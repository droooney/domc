{"version":3,"file":"dwayne.min.js","sources":["../src/utils/array.js","../src/utils/object.js","../src/utils/defineProperty.js","../src/utils/toStringTag.js","../src/utils/is.js","../src/utils/escapeRegex.js","../src/utils/toCase.js","../src/Elem.js","../src/blocks/d-block.js","../src/blocks/d-each.js","../src/blocks/d-elements.js","../src/blocks/d-if.js","../src/blocks/d-item.js","../src/blocks/d-switch.js","../src/mixins/d-attr.js","../src/mixins/d-bind.js","../src/mixins/d-class.js","../src/mixins/d-elem.js","../src/mixins/d-hide.js","../src/mixins/d-node.js","../src/mixins/d-on.js","../src/mixins/d-show.js","../src/mixins/d-style.js","../src/mixins/d-value.js","../src/Block.js","../src/global.js","../src/utils/objectStatics.js"],"sourcesContent":["export function collectFromArray(array, callback, initialValue = {}) {\n  iterateArray(array, (value, index) => {\n    callback(initialValue, value, index, array);\n  });\n\n  return initialValue;\n}\n\nexport function findInArray(array, callback) {\n  for (let i = 0, length = array.length; i < length; i++) {\n    const value = array[i];\n\n    if (callback(value, i, array)) {\n      return {\n        key: i,\n        value\n      };\n    }\n  }\n}\n\nexport function iterateArray(array, callback) {\n  for (let i = 0, length = array.length; i < length; i++) {\n    callback(array[i], i, array);\n  }\n}\n\nexport function removeArrayElem(array, elem) {\n  const index = array.indexOf(elem);\n\n  if (index !== -1) {\n    array.splice(index, 1);\n  }\n}\n\nexport function toObjectKeys(array) {\n  return collectFromArray(array, addKey);\n}\n\nfunction addKey(vars, variable) {\n  vars[variable] = true;\n}\n","import { iterateArray } from './array';\n\nconst {\n  hasOwnProperty: has\n} = {};\n\n/**\n * @const\n * @function assign\n * @param {Object} target - Object to assign rest of arguments to.\n * @param {...Object} objects - Objects that are assigned to the target.\n * @returns {Object} Target.\n */\nexport function assign(target, ...objects) {\n  iterateArray(arguments, (source, index) => {\n    if (index) {\n      iterateObject(source, (value, key) => {\n        target[key] = value;\n      });\n    }\n  });\n\n  return target;\n}\n\nexport function collectFromObject(object, callback, initialValue = {}) {\n  iterateObject(object, (value, key) => {\n    callback(initialValue, value, key, object);\n  });\n\n  return initialValue;\n}\n\nexport function hasOwnProperty(object, key) {\n  return object::has(key);\n}\n\nexport function iterateObject(object, callback) {\n  for (const key in object) {\n    if (hasOwnProperty(object, key)) {\n      callback(object[key], key, object);\n    }\n  }\n}\n\nexport function mapObject(object, callback) {\n  const newObject = {};\n\n  iterateObject(object, (value, key) => {\n    newObject[key] = callback(value, key, object);\n  });\n\n  return newObject;\n}\n","import { iterateObject } from './object';\n\n/**\n * @function defineProperties\n * @param {Object} target - Target to define properties for.\n * @param {Object} properties - Object with properties needed to be assign to the target.\n * @returns {void}\n * @description Function for defining properties of an object.\n */\nexport const { defineProperties } = Object;\n\nexport function definePrototypeProperties(target, properties) {\n  iterateObject(properties, (value, name) => {\n    Object.defineProperty(target, name, {\n      value,\n      writable: true,\n      enumerable: false,\n      configurable: true\n    });\n  });\n}\n\n/**\n * @function defineFrozenProperties\n * @param {Object} target - Target to define properties for.\n * @param {Object} properties - Object with properties needed to be assign to the target.\n * @returns {void}\n * @description Function for defining frozen properties of an object.\n */\nexport function defineFrozenProperties(target, properties) {\n  iterateObject(properties, (value, name) => {\n    Object.defineProperty(target, name, {\n      value,\n      writable: false,\n      enumerable: false,\n      configurable: false\n    });\n  });\n}\n","import { definePrototypeProperties } from './defineProperty';\n\nconst { Symbol } = global;\nconst { toString } = {};\n\n/**\n * @function toStringTag\n * @param {*} object - Object to get toStringTag of.\n * @returns {String} Cut string.\n * @description Cut \"Type\" string from \"[object Type]\" string that gotten from {}.toString,call(object).\n */\nexport function toStringTag(object) {\n  return object::toString().slice(8, -1);\n}\n\nexport function setToStringTag(object, tag) {\n  if (Symbol && Symbol.toStringTag) {\n    definePrototypeProperties(object.prototype, {\n      [Symbol.toStringTag]: tag\n    });\n  }\n}\n","/**\n * @module helpers/checkTypes\n * @private\n * @mixin\n * @description Exports is<Type> methods.\n */\n\nimport { toStringTag } from './toStringTag';\n\n/**\n * @function isArray\n * @public\n * @param {*} value - Value to check if it is an array.\n * @returns {Boolean} If the argument is an array or not.\n * \n * @example\n * isArray([]);                             // true\n * isArray(0);                              // true\n * isArray(document.querySelectorAll('*')); // false\n */\nexport const { isArray } = Array;\n\n/**\n * @function isFunction\n * @public\n * @param {*} value - Value to check if it is a function.\n * @returns {Boolean} If the argument is a function or not.\n * \n * @example\n * isFunction(() => {});            // true\n * \n * const func = () => {};\n * Object.setPrototypeOf(func, {});\n * isFunction(func);                // true\n */\nexport function isFunction(value) {\n  return toStringTag(value) === 'Function' || typeof value === 'function';\n}\n\n/**\n * @function isNil\n * @public\n * @param {*} value - Value to check if it is null or undefined.\n * @returns {Boolean} If the argument is null or undefined or not.\n *\n * @example\n * isNil(null);      // true\n * isNil(undefined); // true\n * isNil(false);     // false\n */\nexport function isNil(value) {\n  /* eslint eqeqeq: 0 */\n  return value == null;\n}\n\n/**\n * @function isString\n * @public\n * @param {*} value - Value to check if it is a string.\n * @returns {Boolean} If the argument is a string or not.\n *\n * @example\n * isString('0');             // true\n * isString(new String('0')); // true\n */\nexport function isString(value) {\n  return toStringTag(value) === 'String';\n}\n","const regexpSpecialCharacters = [\n  '.',\n  '+', '*', '?',\n  '(', ')',\n  '[', ']',\n  '{', '}',\n  '<', '>',\n  '^', '$',\n  '!',\n  '=',\n  ':',\n  '-',\n  '|',\n  ',',\n  '\\\\'\n];\nconst regexpSpecialsRegexp = new RegExp(\n  regexpSpecialCharacters\n    .map((s) => `\\\\${ s }`)\n    .join('|'),\n  'g'\n);\n\nexport function escapeRegex(string) {\n  return string.replace(regexpSpecialsRegexp, '\\\\$&');\n}\n","const DASHED_SYMBOL_REGEX = /-[a-z]/g;\nconst UPPERCASED_SYMBOL_REGEX = /[A-Z]/g;\n\nexport function toCamelCase(value) {\n  return value.replace(DASHED_SYMBOL_REGEX, capitalize);\n}\n\nexport function toHyphenCase(value) {\n  return value.replace(UPPERCASED_SYMBOL_REGEX, hyphenize);\n}\n\nfunction capitalize(match) {\n  return match[1].toUpperCase();\n}\n\nfunction hyphenize(match) {\n  return `-${ match[0].toLowerCase() }`;\n}\n","import {\n  isArray, isNil, isString,\n  assign, definePrototypeProperties,\n  defineProperties,\n  collectFromArray, collectFromObject,\n  iterateArray, iterateObject,\n  toCamelCase, toHyphenCase, toStringTag,\n  setToStringTag, setProto\n} from './utils';\n\n/**\n * @typedef {String} ElemEventString\n * @public\n * @description A string containing events separated by a comma with zero or more spaces or just spaces.\n */\n\n/**\n * @callback ElemListener\n * @public\n * @param {Event} e - Fired event.\n * @param {Element} elem - Element on which the listener was called.\n * @param {Number} index - Index of the element on which the listener was called.\n */\n\n/**\n * @callback ElemRemoveListeners\n * @public\n * @param {...ElemEventString} events - If at least one argument present only removes event listeners specified\n * by the events in the arguments.\n */\n\nconst {\n  document = {},\n  Symbol\n} = global;\nconst HIDE_CLASS = '__dwayne-hidden__';\nconst EVENT_SEPARATOR_REGEX = /(?:,| ) */;\nconst CSS_STYLES_SEPARATOR_REGEX = /; ?/;\nconst CSS_PROP_VALUE_SEPARATOR_REGEX = /: /;\nconst CSS_IMPORTANT_REGEX = / ?!important$/;\nconst EVENT_REGEX = /Event$/;\nconst ELEMENT_REGEX = /Element$/;\nconst HTML_COLLECTION_REGEX = /^(HTMLCollection|NodeList)$/;\nconst X_LINK_ATTR_REGEX = /^xlink:\\w/;\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst XML_NS = 'http://www.w3.org/2000/xmlns/';\nconst X_LINK_NS = 'http://www.w3.org/1999/xlink';\nconst XHTML_NS = 'http://www.w3.org/1999/xhtml';\nconst emptyCollection = [];\n\n/**\n * @class Elem\n * @extends Array\n * @public\n * @param {Element|Element[]} [elem = []] - An element or an array of elements to wrap.\n * @returns {Elem} Instance of Elem.\n * @description Wrap of an elements set.\n *\n * @example\n * new Elem(document.body);\n * new Elem(document.querySelectorAll('.cls'));\n * new Elem(document.getElementsByClassName('cls'));\n */\nclass Elem extends [].constructor {\n  static addMethods(property, value) {\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    definePrototypeProperties(this.prototype, property);\n\n    return this;\n  }\n\n  constructor(elem = emptyCollection) {\n    super();\n\n    if (!isElementsCollection(elem)) {\n      elem = [elem];\n    }\n\n    setProto(this, Elem.prototype);\n\n    iterateArray(elem, (elem) => {\n      if (!isElementsCollection(elem)) {\n        elem = [elem];\n      }\n\n      iterateArray(elem, (elem) => {\n        if (!this.includes(elem) && isValidNode(elem)) {\n          this.push(elem);\n        }\n      });\n    });\n  }\n\n  /**\n   * @method Elem#add\n   * @public\n   * @param {...(Elem|Element|Element[])} elements - Each argument is a Elem, or Element, or array of Elements.\n   * @returns {Elem} Returns this.\n   * @description Method for adding new elements to the set.\n   *\n   * @example\n   * elem1.find('.cls1')\n   *   .add(elem2.find('.cls2'))\n   *   .hide();\n   */\n  add() {\n    const elems = this.slice();\n\n    iterateArray(arguments, (elem) => {\n      if (!isElementsCollection(elem)) {\n        elem = [elem];\n      }\n\n      iterateArray(elem, (elem) => {\n        if (!elems.includes(elem) && isValidNode(elem)) {\n          elems.push(elem);\n        }\n      });\n    });\n\n    return elems;\n  }\n\n  /**\n   * @method Elem#addClass\n   * @public\n   * @param {...String} classes - Classes to add.\n   * @returns {Elem} Returns this.\n   * @description Method for adding classes to the all the elements in the set.\n   *\n   * @example\n   * elem.addClass('red', 'round');\n   */\n  addClass() {\n    return this.forEach((elem) => {\n      const list = elem.classList;\n\n      iterateArray(arguments, (cls) => list.add(cls));\n    });\n  }\n\n  /**\n   * @method Elem#attr\n   * @public\n   * @param {String|Object.<String, String>} [attr] - Name of the attribute to get or\n   * an object of the format { [attrName]: value, ... } to set attributes.\n   * @param {String} [value] - If the first argument is a string\n   * it should be a value to set for that attribute.\n   * @returns {Object|String|Elem} If no arguments passed, D-Wrap of attributes of the first element in the set\n   * returned, if 1 string argument is passed the value of the attribute of the first element in the set\n   * returned otherwise returns this.\n   * @description Method for getting/setting attributes.\n   *\n   * @example\n   * elem.attr('attr1', 'value1'); // attribute attr1 set to 'value1' and this returned\n   * elem.attr('attr1');           // 'value1'\n   * elem.attr({\n   *   attr1: 'value3',            // attribute attr1 set to 'value3'\n   *   attr2: 'value2'             // attribute attr2 set to 'value2'\n   * });                           // this returned\n   * elem.attr();                  // { attr1: 'value3', attr2: 'value2' }\n   */\n  attr(attr, value) {\n    const elem = this[0];\n\n    if (!arguments.length) {\n      if (!elem) {\n        return {};\n      }\n\n      return collectFromObject(elem.attributes, addAttr);\n    }\n\n    if (arguments.length <= 1 && isString(attr)) {\n      if (!elem) {\n        return null;\n      }\n\n      const ns = getAttrNS(attr, elem);\n\n      return ns\n        ? elem.getAttributeNS(ns, attr)\n        : elem.getAttribute(attr);\n    }\n\n    if (arguments.length >= 2) {\n      attr = { [attr]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(attr, (value, key) => {\n        if (isNil(value) || value === false) {\n          return new Elem(elem).removeAttr(key);\n        }\n\n        value = value === true ? '' : value;\n\n        const ns = getAttrNS(key, elem);\n\n        if (ns) {\n          elem.setAttributeNS(ns, key, value);\n        } else {\n          elem.setAttribute(key, value);\n        }\n      });\n    });\n  }\n\n  /**\n   * @method Elem#children\n   * @public\n   * @returns {Elem} D-Wrap of the children of the first element in the set.\n   * @description Method for getting element's children.\n   *\n   * @example\n   * const children = elem.children();\n   */\n  children() {\n    return new Elem(this.length ? this[0].childNodes : []);\n  }\n\n  /**\n   * @method Elem#closest\n   * @public\n   * @param {String} selector - See the link.\n   * @returns {Elem} Set of the closest elements.\n   * @description Synonym for\n   * [Element#closest]{@link https://developer.mozilla.org/en/docs/Web/API/Element/closest}.\n   */\n  closest(selector) {\n    return this.collect((add, elem) => {\n      while (elem) {\n        if (new Elem(elem).is(selector)) {\n          return add(elem);\n        }\n\n        elem = elem.parentNode;\n      }\n    });\n  }\n\n  collect(callback) {\n    const elements = [];\n    const cb = ::elements.push;\n\n    this.forEach((elem, index) => {\n      callback(cb, elem, index, this);\n    });\n\n    return new Elem(elements);\n  }\n\n  /**\n   * @method Elem#contains\n   * @public\n   * @param {Elem|Element} element - Element to find out if it's within the first element in the set.\n   * @returns {Boolean} Returns if the argument within this element.\n   * @description Method is extension for\n   * [Node#contains]{@link https://developer.mozilla.org/en/docs/Web/API/Node/contains}.\n   *\n   * @example\n   * elem.contains(elem2);   // true|false\n   */\n  contains(element) {\n    const parent = this[0];\n    const child = toElem(element)[0];\n\n    return !parent || !child\n      ? false\n      : parent.contains(child);\n  }\n\n  /**\n   * @method Elem#create\n   * @public\n   * @param {String} type - Type of created element. If type is \"#text\" a text node is created.\n   * If type is \"#comment\" a comment node is created.\n   * @returns {Elem} New instance of Elem - wrap of the created elements.\n   * @description Method for creating elements inside this element.\n   * If this element is not an Element the element is just created.\n   *\n   * @example\n   * elem.create('div');\n   */\n  create(type) {\n    return this.collect((add, elem) => {\n      let el = null;\n      const isText = type === '#text';\n      const document = isHTMLDocument(elem)\n        ? elem\n        : elem.ownerDocument;\n\n      if (isText || type === '#comment') {\n        el = isText\n          ? document.createTextNode('')\n          : document.createComment('');\n      } else {\n        const ns = type === 'svg'\n          ? SVG_NS\n          : elem.namespaceURI || document.documentElement.namespaceURI || XHTML_NS;\n\n        el = document.createElementNS(ns, type);\n      }\n\n      add(new Elem(el).into(elem));\n    });\n  }\n\n  /**\n   * @method Elem#createComment\n   * @public\n   * @param {String} text - Text of the comment.\n   * @returns {Elem} New instance of Elem - wrap of the created comments.\n   * @description Method for creating comments inside this element.\n   * If this element is not an Element the comment is just created.\n   *\n   * @example\n   * elem.createComment('comment');\n   */\n  createComment(text) {\n    return this\n      .create('#comment')\n      .text(text);\n  }\n\n  /**\n   * @method Elem#createText\n   * @public\n   * @param {String} text - Text.\n   * @returns {Elem} New instance of Elem - wrap of the created text nodes.\n   * @description Method for creating text nodes inside this element.\n   * If this element is not an Element the text node is just created.\n   *\n   * @example\n   * elem.createText('text');\n   */\n  createText(text) {\n    return this\n      .create('#text')\n      .text(text);\n  }\n\n  /**\n   * @method Elem#css\n   * @public\n   * @param {String|Object.<String, String>} [property] - Name of the property to get or\n   * an object of the format { [property]: value, ... } to set styles.\n   * @param {String} [value] - If the first argument is a string it should be a value to set for that property.\n   * @returns {Object|String|Elem} If no arguments passed, D-Wrap of css styles of the element returned,\n   * if 1 string argument is passed the value of the property returned otherwise returns this.\n   * @description Method for getting/setting styles. Supports !important.\n   *\n   * @example\n   * elem.css('display', 'none'); // display set to 'none' and this returned\n   * elem.css('display');         // 'none'\n   * elem.css({\n   *   display: 'inline',         // display set to 'inline'\n   *   cursor: 'pointer'          // cursor set to 'pointer'\n   * });                          // this returned\n   * elem.css();                  // { display: 'none', cursor: 'pointer' }\n   */\n  css(property, value) {\n    const { style } = this[0] || {};\n\n    if (!arguments.length) {\n      if (!style) {\n        return {};\n      }\n\n      return collectFromArray(style.cssText.split(CSS_STYLES_SEPARATOR_REGEX), addCSSProp);\n    }\n\n    if (arguments.length <= 1 && isString(property)) {\n      if (!style) {\n        return '';\n      }\n\n      property = toHyphenCase(property);\n\n      return style.getPropertyValue(property) + (style.getPropertyPriority(property) ? ' !important' : '');\n    }\n\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(property, (value, property) => {\n        property = toHyphenCase(property);\n\n        if (isNil(value) || value === false) {\n          return new Elem(elem).removeCSS(property);\n        }\n\n        elem.style.removeProperty(property);\n        elem.style.setProperty(\n          property,\n          value.replace(CSS_IMPORTANT_REGEX, ''),\n          CSS_IMPORTANT_REGEX.test(value) ? 'important' : ''\n        );\n      });\n    });\n  }\n\n  /**\n   * @method Elem#data\n   * @public\n   * @param {String|Object.<String, String>} [key] - Name of the data attribute (without data- prefix)\n   * to get or an object of the format { [attrName]: value, ... } to set attributes.\n   * @param {String} [value] - If the first argument is a string it should be a value to set for that attribute.\n   * @returns {Object|String|Elem} If no arguments passed, D-Wrap of dataset of the element returned,\n   * if 1 string argument is passed the value of the data attribute returned otherwise returns this.\n   * @description Method for getting/setting data attributes. See\n   * [HTMLElement#dataset]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/dataset}.\n   *\n   * @example\n   * elem.data('someKey1', 'value'); // attribute data-some-key1 set to 'value1' and this returned\n   * elem.data('someKey1');          // 'value1'\n   * elem.data({\n   *   someKey1: 'value3',           // attribute data-some-key1 set to 'value3'\n   *   someKey2: 'value2'            // attribute data-some-key2 set to 'value2'\n   * });                             // this returned\n   * elem.data();                    // { someKey1: 'value3', someKey2: 'value2' }\n   */\n  data(key, value) {\n    const { dataset } = this[0] || {};\n\n    if (!arguments.length) {\n      if (!dataset) {\n        return {};\n      }\n\n      return collectFromObject(dataset, addDataAttr);\n    }\n\n    if (arguments.length === 1 && isString(key)) {\n      if (!dataset) {\n        return;\n      }\n\n      return dataset[key];\n    }\n\n    if (arguments.length >= 2) {\n      key = { [key]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(key, (value, key) => {\n        elem.dataset[key] = value;\n      });\n    });\n  }\n\n  /**\n   * @method Elem#dispatch\n   * @public\n   * @param {String|Event} event - Event or a string (new Event(event) is created).\n   * @param {Object} [details = {}] - Object that is assigned to the event.\n   * @returns {Elem} Returns this.\n   * @see https://developer.mozilla.org/en/docs/Web/API/Event/Event\n   * @description Synonym for\n   * [EventTarget#dispatchEvent]{@link https://developer.mozilla.org/en/docs/Web/API/EventTarget/dispatchEvent}.\n   *\n   * @example\n   * elem.dispatch('click');\n   * elem.dispatch('click', { bubbles: false, cancellable: false, data: 1 });\n   * elem.dispatch(new CustomEvent('custom-event'));\n   */\n  dispatch(event, details = {}) {\n    const {\n      bubbles = true,\n      cancelable = true,\n      ...realDetails\n    } = details || {};\n    let finalEvent = event;\n\n    if (!EVENT_REGEX.test(toStringTag(finalEvent))) {\n      try {\n        finalEvent = new Event(finalEvent, { bubbles, cancelable });\n        assign(finalEvent, realDetails);\n      } catch (err) {}\n    }\n\n    return this.forEach((elem) => {\n      if (!EVENT_REGEX.test(toStringTag(finalEvent))) {\n        const document = isHTMLDocument(elem)\n          ? elem\n          : elem.ownerDocument;\n\n        finalEvent = document.createEvent('Event');\n        finalEvent.initEvent(event, bubbles, cancelable);\n\n        assign(finalEvent, realDetails);\n      }\n\n      elem.dispatchEvent(finalEvent);\n    });\n  }\n\n  /**\n   * @method Elem#elem\n   * @public\n   * @param {Number} [index = 0] - Index of the element of the set to get. Negative index means elem.length + index.\n   * @returns {Elem} New instance of Elem.\n   *\n   * @example\n   * elem.elem(1); // a wrap of the element in the set that has index 1\n   * elem.elem();  // a wrap of the element in the set that has index 0\n   */\n  elem(index = 0) {\n    if (index < 0) {\n      index = this.length + index;\n    }\n\n    return new Elem(this[index]);\n  }\n\n  /**\n   * @method Elem#filter\n   * @public\n   * @param {IterationCallback} [filterFn = Boolean] - Filter function\n   * @returns {Elem} New instance of Elem.\n   * @description Method for filtering elements.\n   *\n   * @example\n   * elem.filter((elem) => new Elem(elem).closest('.parent'));\n   */\n  filter(filterFn = Boolean) {\n    return this.collect((add, elem, index) => {\n      if (filterFn(elem, index, this)) {\n        add(elem);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#find\n   * @public\n   * @param {String} selector - Selector to find.\n   * @returns {Elem} New instance of Elem.\n   * @description Synonym for\n   * [Element#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Element/querySelectorAll}.\n   */\n  find(selector) {\n    return this.collect((add, elem) => {\n      add(find(selector, elem));\n    });\n  }\n\n  /**\n   * @method Elem#forEach\n   * @public\n   * @param {IterationCallback} callback - Called on each iteration.\n   * @returns {Elem} Returns this.\n   * @description Method for iterating over the set.\n   *\n   * @example\n   * find('.cls').forEach((element, index, set) => {\n   *   // do something\n   * });\n   */\n  forEach(callback) {\n    iterateArray(this, (value, key) => {\n      callback(value, key, this);\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Elem#hasAttr\n   * @public\n   * @param {String} attr - Name of the attribute.\n   * @returns {Boolean} If the first element in the set has the attribute.\n   * @description Method that returns if the first element in the set has the attribute or not.\n   *\n   * @example\n   * elem.attr('attr', 'value').hasAttr('attr'); // true\n   * elem.removeAttr('attr').hasAttr('attr');    // false\n   */\n  hasAttr(attr) {\n    const elem = this[0];\n\n    if (!elem) {\n      return false;\n    }\n\n    const ns = getAttrNS(attr, elem);\n\n    return ns\n      ? elem.hasAttributeNS(ns, attr)\n      : elem.hasAttribute(attr);\n  }\n\n  /**\n   * @method Elem#hasClass\n   * @public\n   * @param {String} cls - Name of the class.\n   * @returns {Boolean} If the first element in the set has the class.\n   * @description Method that returns if the first element in the set has the class or not.\n   *\n   * @example\n   * elem.addClass('cls').hasClass('cls');    // true\n   * elem.removeClass('cls').hasClass('cls'); // false\n   */\n  hasClass(cls) {\n    const elem = this[0];\n\n    return elem\n      ? elem.classList.contains(cls)\n      : false;\n  }\n\n  /**\n   * @method Elem#hide\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Hides all elements in the set.\n   *\n   * @example\n   * elem.hide();\n   */\n  hide() {\n    return this.forEach(hide);\n  }\n\n  /**\n   * @method Elem#html\n   * @public\n   * @param {String|*} [html] - HTML to write instead of current HTML.\n   * @returns {Elem|String} If no arguments passed HTML of the first element in the set returned.\n   * Otherwise all elements HTML in the set are set to the html argument.\n   * @description Gets or sets HTML.\n   *\n   * @example\n   * elem.html('<div>1</div>');\n   * elem.html(); // '<div>1</div>'\n   */\n  html(html) {\n    if (!arguments.length) {\n      const elem = this[0];\n\n      return elem\n        ? elem.innerHTML\n        : '';\n    }\n\n    return this.forEach((elem) => {\n      elem.innerHTML = html;\n    });\n  }\n\n  includes(elem) {\n    return this.indexOf(elem) !== -1;\n  }\n\n  /**\n   * @method Elem#insertAfter\n   * @public\n   * @param {Elem|Element} element - Element to insert this element after.\n   * @returns {Elem} Returns this.\n   * @description Puts the elements from the set after the element specified by the argument.\n   * The elements remain in the same order.\n   *\n   * @example\n   * elem.insertAfter(elem2);\n   * elem.insertAfter(document.getElementById('id'));\n   * elem.insertAfter('#id div.c1');\n   */\n  insertAfter(element) {\n    element = toElem(element).elem(0);\n\n    let parent = element.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    element = element.next()[0];\n    parent = parent[0];\n\n    return this.forEach((elem) => {\n      if (elem === element) {\n        element = element.nextSibling;\n\n        return;\n      }\n\n      if (element) {\n        parent.insertBefore(elem, element);\n      } else {\n        parent.appendChild(elem);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#insertBefore\n   * @public\n   * @param {Elem|Element} element - Element to insert this element before.\n   * @returns {Elem} Returns this.\n   * @description Puts the elements from the set before the element specified by the argument.\n   * The elements remain in the same order.\n   *\n   * @example\n   * elem.insertBefore(elem2);\n   * elem.insertBefore(document.getElementById('id'));\n   * elem.insertBefore('#id div.c1');\n   */\n  insertBefore(element) {\n    element = toElem(element).elem(0);\n\n    let parent = element.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    element = element[0];\n    parent = parent[0];\n\n    return this.forEach((elem) => {\n      parent.insertBefore(elem, element);\n    });\n  }\n\n  /**\n   * @method Elem#into\n   * @public\n   * @param {Elem|Element} element - Element to put this elements into.\n   * @param {Boolean} end - If the elements should be inserted to the end. If false they are inserted to the start.\n   * @returns {Elem} Returns this.\n   * @description Method is similar to\n   * [Node#appendChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/appendChild}.\n   *\n   * @example\n   * elem.into(elem2);\n   * elem.into(document.getElementById('id'));\n   * elem.into('#id div.c1');\n   */\n  into(element, end = true) {\n    element = toElem(element)[0];\n\n    if (\n      !element\n      || isHTMLDocument(element)\n    ) {\n      return this;\n    }\n\n    if (!end && element.firstChild) {\n      for (let i = this.length - 1; i >= 0; i--) {\n        element.insertBefore(this[i], element.firstChild);\n      }\n\n      return this;\n    }\n\n    return this.forEach((elem) => {\n      element.appendChild(elem);\n    });\n  }\n\n  /**\n   * @method Elem#is\n   * @public\n   * @param {String} selector\n   * @returns {Boolean} If the first element in the set matches the selector.\n   * @description Synonym for\n   * [Element#matches]{@link https://developer.mozilla.org/en/docs/Web/API/Element/matches}.\n   *\n   * @example\n   * elem.addClass('cls');\n   * elem.is('.cls');         // true\n   *\n   * elem.removeClass('cls');\n   * elem.is('.cls');         // false\n   */\n  is(selector) {\n    if (!this.length) {\n      return false;\n    }\n\n    const elem = this[0];\n    const matches = (\n      elem.matches\n      || elem.matchesSelector\n      || elem.webkitMatchesSelector\n      || elem.mozMatchesSelector\n      || elem.msMatchesSelector\n      || elem.oMatchesSelector\n    );\n\n    try {\n      return matches.call(elem, selector);\n    } catch (err) {\n      console.error(`Selector '${ selector }' is not a valid selector (Elem#is)`);\n\n      return false;\n    }\n  }\n\n  /**\n   * @method Elem#name\n   * @public\n   * @returns {String} nodeName (lowercased) of the first element in the set.\n   * @description Method for getting name of the first element in the set.\n   *\n   * @example\n   * const elem1 = elem.create('div');\n   * elem1.name() // 'div'\n   */\n  name() {\n    return getName(this[0]);\n  }\n\n  /**\n   * @method Elem#next\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Method for finding next element to each element in the set.\n   *\n   * @example\n   * elem.next(); // finds next element to each element in the set\n   */\n  next() {\n    return this.collect(addNext);\n  }\n\n  /**\n   * @method Elem#on\n   * @public\n   * @param {ElemEventString|Object.<ElemEventString|ElemListener>} event - Either a {@link ElemEventString} string\n   * or an object with event keys (a key is also ElemEventString) and listeners values.\n   * @param {ElemListener} [listener] - If the first argument is a string it must be a listener function for\n   * specified event(s).\n   * @returns {ElemRemoveListeners} Function that takes optional event argument.\n   * @description Adds event listeners for all the elements in the set.\n   *\n   * @example\n   * elem.on(\n   *   'change, input',\n   *   'input, select, textarea, datalist, keygen, output',\n   *   (e, elem, index) => console.log(elem.value)\n   * );\n   * elem.on(\n   *   'change, input',\n   *   (e, elem, index) => console.log(elem.value)\n   * );\n   * elem.on(\n   *   {\n   *     'change, input': (e, elem, index) => console.log(elem.value),\n   *     'blur': () => console.log('blur')\n   *   },\n   *   'input, select, textarea, datalist, keygen, output'\n   * );\n   *\n   * const removeListeners = elem.on({\n   *   'change, input': (e, elem, index) => console.log(elem.value),\n   *   'blur': () => console.log('blur')\n   * });\n   *\n   * removeListeners('click');\n   * removeListeners('blur, change');\n   * removeListeners('blur, change', 'input');\n   * removeListeners();\n   */\n  on(event, listener) {\n    if (isString(event)) {\n      event = { [event]: listener };\n    }\n\n    const newEvents = {};\n    const allListeners = {};\n\n    iterateObject(event, (listener, event) => {\n      iterateArray(event.split(EVENT_SEPARATOR_REGEX), (event) => {\n        (newEvents[event] = newEvents[event] || []).push(listener);\n      });\n    });\n\n    this.forEach((elem) => {\n      iterateObject(newEvents, (listeners, event) => {\n        iterateArray(listeners, (listener) => {\n          elem.addEventListener(event, listener, false);\n          (allListeners[event] = allListeners[event] || []).push(() => {\n            elem.removeEventListener(event, listener);\n          });\n        });\n      });\n    });\n\n    return function removeEventListeners(event) {\n      if (arguments.length) {\n        iterateArray(arguments, (event) => {\n          iterateArray(event.split(EVENT_SEPARATOR_REGEX), (event) => {\n            const removeListeners = allListeners[event];\n\n            if (removeListeners) {\n              iterateArray(removeListeners, (removeListener) => removeListener());\n\n              delete allListeners[event];\n            }\n          });\n        });\n      } else {\n        iterateObject(allListeners, (removeListeners, event) => {\n          iterateArray(removeListeners, (removeListener) => removeListener());\n\n          delete allListeners[event];\n        });\n      }\n    };\n  }\n\n  /**\n   * @method Elem#parent\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Method returns wrap of the set of the parent elements of each element in the set.\n   */\n  parent() {\n    return this.collect(addParent);\n  }\n\n  /**\n   * @method Elem#prev\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Method for finding previous element to each element in the set.\n   *\n   * @example\n   * elem.prev(); // finds previous element to each element in the set\n   */\n  prev() {\n    return this.collect(addPrev);\n  }\n\n  /**\n   * @method Elem#prop\n   * @public\n   * @param {String|Object.<String, *>} property - Either a string of a property or an assigned object.\n   * @param {*} [value] - If a property parameter is a string\n   * this has to be an assigned value if it's present.\n   * @returns {Elem|*} Returns this if it's setter or a value if getter.\n   * @description Method that is either a property getter for the first element in the set\n   * or a setter for every element in the set.\n   *\n   * @example\n   * elem.prop('draggable', false);\n   * elem.prop('draggable'); // false\n   */\n  prop(property, value) {\n    if (arguments.length <= 1 && isString(property)) {\n      return this[0] ? this[0][property] : undefined;\n    }\n\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(property, (value, prop) => {\n        elem[prop] = value;\n      });\n    });\n  }\n\n  /**\n   * @method Elem#remove\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Removes all the elements from the set from the document.\n   * Note: it doesn't remove them from the set so watch out for the memory leaks.\n   *\n   * @example\n   * elem.remove();\n   */\n  remove() {\n    return this.forEach(remove);\n  }\n\n  /**\n   * @method Elem#removeAttr\n   * @public\n   * @param {...String} attributes - Attributes to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the attributes from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeAttr('foo', 'bar', 'baz');\n   */\n  removeAttr() {\n    return this.forEach((elem) => {\n      iterateArray(arguments, (attr) => {\n        const ns = getAttrNS(attr, elem);\n\n        if (ns) {\n          elem.removeAttributeNS(ns, attr);\n        } else {\n          elem.removeAttribute(attr);\n        }\n      });\n    });\n  }\n\n  /**\n   * @method Elem#removeClass\n   * @public\n   * @param {...String} classes - Classes to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the classes from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeClass('foo', 'bar', 'baz');\n   */\n  removeClass() {\n    return this.forEach((elem) => {\n      const list = elem.classList;\n\n      iterateArray(arguments, (cls) => list.remove(cls));\n    });\n  }\n\n  /**\n   * @method Elem#removeCSS\n   * @public\n   * @param {...String} props - CSS properties to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the CSS properties from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeCSS('display', 'position', 'margin');\n   */\n  removeCSS() {\n    return this.forEach((elem) => {\n      iterateArray(arguments, (css) => {\n        elem.style.removeProperty(toHyphenCase(css));\n      });\n    });\n  }\n\n  /**\n   * @method Elem#replace\n   * @public\n   * @param {Elem|Element} element - Element to replace the first element in the set\n   * with a set of elements specified by the argument (Element or Elem).\n   * @returns {Elem} Returns this.\n   * @description Method is similar to\n   * [Node#replaceChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/replaceChild}.\n   *\n   * @example\n   * elem.replace(elem2);\n   * elem.replace(document.getElementById('id'));\n   * elem.replace('#id div.c1');\n   */\n  replace(element) {\n    element = toElem(element);\n\n    const first = this.elem(0);\n    const parent = first.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    let elem = parent;\n    let method = 'into';\n    const next = first.next()[0];\n    const prev = first.prev()[0];\n\n    if (next) {\n      elem = next;\n      method = 'insertBefore';\n    } else if (prev) {\n      elem = prev;\n      method = 'insertAfter';\n    }\n\n    first.remove();\n\n    element[method](elem);\n  }\n\n  /**\n   * @method Elem#show\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Shows all elements in the set.\n   * If an element was hidden using {@link Elem#hide} previous display is set.\n   *\n   * @example\n   * elem.show();\n   */\n  show() {\n    return this.forEach(show);\n  }\n\n  slice() {\n    return new Elem(super.slice.apply(this, arguments));\n  }\n\n  /**\n   * @method Elem#text\n   * @public\n   * @param {String|*} [text] - Text to write instead of current text.\n   * @returns {Elem|String} If no arguments passed text of the first element in the set returned.\n   * Otherwise all elements texts in the set are set to the text argument.\n   * @description Gets or sets text.\n   *\n   * @example\n   * elem.text('123');\n   * elem.text(); // '123'\n   */\n  text(text) {\n    if (!arguments.length) {\n      return this.prop('textContent');\n    }\n\n    return this.forEach((elem) => {\n      elem.textContent = text;\n    });\n  }\n\n  /**\n   * @method Elem#toggleAttr\n   * @public\n   * @param {String} attr - Attribute to toggle.\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the attribute\n   * with the '' value and if falsey method removes the attribute. If not present method adds\n   * the attribute if it doesn't exist and removes if it does.\n   * @returns {Elem} Returns this.\n   * @description Method for toggling attributes.\n   *\n   * @example\n   * elem.toggleAttr('attr');\n   * elem.toggleAttr('attr', someCondition);\n   */\n  toggleAttr(attr, condition) {\n    return this.forEach((elem) => {\n      elem = new Elem(elem);\n\n      if (arguments.length < 2 ? !elem.hasAttr(attr) : condition) {\n        elem.attr(attr, '');\n      } else {\n        elem.removeAttr(attr);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#toggleClass\n   * @public\n   * @param {String} cls - Class to toggle.\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the class\n   * and if falsey method removes the class. If not present method adds\n   * the class if it doesn't exist and removes if it does.\n   * @returns {Elem} Returns this.\n   * @description Method for toggling classes.\n   *\n   * @example\n   * elem.toggleClass('cls');\n   * elem.toggleClass('cls', someCondition);\n   */\n  toggleClass(cls, condition) {\n    return this.forEach((elem) => {\n      const { classList } = elem;\n\n      classList.toggle(cls, arguments.length < 2 ? !classList.contains(cls) : condition);\n    });\n  }\n}\n\nsetToStringTag(Elem, 'Elem');\n\nif (Symbol && Symbol.species) {\n  defineProperties(Elem, {\n    [Symbol.species]: {\n      get() {\n        return Array;\n      }\n    }\n  });\n}\n\n/**\n * @const {Elem} doc\n * @type {Elem}\n * @public\n * @description Elem instance of document.\n */\nconst doc = new Elem(document);\n\n/**\n * @const {Elem} html\n * @type {Elem}\n * @public\n * @description Elem instance of document.documentElement.\n */\nconst html = new Elem(document.documentElement);\n\n/**\n * @const {Elem} body\n * @type {Elem}\n * @public\n * @description Elem instance of document.body.\n */\nconst body = new Elem(document.body);\n\n/**\n * @const {Elem} head\n * @type {Elem}\n * @public\n * @description Elem instance of document.head.\n */\nconst head = new Elem(document.head);\n\n/**\n * @function toElem\n * @private\n * @param {Element|Elem} elem - Element or Elem.\n * @returns {Elem} Instance of Elem.\n */\nfunction toElem(elem) {\n  return isElem(elem)\n    ? elem\n    : new Elem(elem);\n}\n\n/**\n * @function isElem\n * @private\n * @param {*} value - Value to check if it's Elem.\n * @returns {Boolean} If the value is Elem.\n * @description Returns if the value is Elem or not.\n */\nfunction isElem(value) {\n  return value instanceof Elem;\n}\n\n/**\n * @function isHTMLDocument\n * @private\n * @param {*} value - Value to check if it's HTMLDocument.\n * @returns {Boolean} If the value is HTMLDocument.\n * @description Returns if the value is HTMLDocument or not.\n */\nfunction isHTMLDocument(value) {\n  return toStringTag(value) === 'HTMLDocument';\n}\n\n/**\n * @function isElementsCollection\n * @private\n * @param {*} value - Value to check if it's Comment or Text.\n * @returns {Boolean} If the value is HTMLDocument.\n * @description Returns if the value is Comment or Text or not.\n */\nfunction isElementsCollection(value) {\n  return (\n    HTML_COLLECTION_REGEX.test(toStringTag(value))\n    || isElem(value)\n    || isArray(value)\n  );\n}\n\nfunction isValidNode(value) {\n  const tag = toStringTag(value);\n\n  return (\n    ELEMENT_REGEX.test(tag)\n    || tag === 'HTMLDocument'\n    || tag === 'Text'\n    || tag === 'DocumentFragment'\n    || tag === 'Comment'\n  );\n}\n\n/**\n * @function getName\n * @private\n * @param {Element} [elem] - Element which name is needed to know.\n * @returns {String} Element name.\n */\nfunction getName(elem) {\n  return (elem && elem.nodeName && elem.nodeName.toLowerCase()) || '';\n}\n\nfunction getAttrNS(attr, elem) {\n  if (attr === 'xmlns' || attr === 'xmlns:xlink') {\n    return elem.nodeName === 'SVG'\n      ? XML_NS\n      : null;\n  }\n\n  if (X_LINK_ATTR_REGEX.test(attr)) {\n    return new Elem(elem).closest('svg').length\n      ? X_LINK_NS\n      : null;\n  }\n}\n\nfunction createHideStyleNode(head) {\n  const style = head.find(`style#${ HIDE_CLASS }`);\n\n  if (style.length) {\n    return;\n  }\n\n  head\n    .create('style')\n    .prop('id', HIDE_CLASS)\n    .text(`.${ HIDE_CLASS }{display:none !important;}`);\n}\n\nfunction addAttr(attrs, attr) {\n  attrs[attr.name] = attr.value;\n}\n\nfunction addCSSProp(css, value) {\n  if (value) {\n    const property = value.split(CSS_PROP_VALUE_SEPARATOR_REGEX);\n\n    css[toCamelCase(property[0])] = property[1];\n  }\n}\n\nfunction addDataAttr(data, value, key) {\n  data[key] = value;\n}\n\nfunction hide(elem) {\n  createHideStyleNode(new Elem(elem.ownerDocument.head));\n  new Elem(elem).addClass(HIDE_CLASS);\n}\n\nfunction addNext(add, elem) {\n  add(elem.nextSibling);\n}\n\nfunction addParent(add, elem) {\n  add(elem.parentNode);\n}\n\nfunction addPrev(add, elem) {\n  add(elem.previousSibling);\n}\n\nfunction remove(elem) {\n  const parent = elem.parentNode;\n\n  if (parent) {\n    parent.removeChild(elem);\n  }\n}\n\nfunction show(elem) {\n  new Elem(elem).removeClass(HIDE_CLASS);\n}\n\n/**\n * @function find\n * @public\n * @param {String} selector - Selector to find.\n * @param {Element} [base = document] - Base to find in.\n * @returns {Elem} New instance of Elem.\n * @description Synonym for\n * [Document#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Document/querySelectorAll}.\n */\nfunction find(selector, base = document) {\n  return new Elem(base.querySelectorAll(String(selector)));\n}\n\ncreateHideStyleNode(head);\n\nexport { Elem, doc, html, body, head, find };\n","import { findInArray } from '../utils';\n\nexport function registerDBlock(Block) {\n  class DBlock extends Block {\n    static template = html`\n      <d-elements\n        value=\"{elems}\"\n        parentScope=\"{ParentScope}\"\n        parentTemplate=\"{ParentTemplate}\"\n      />\n    `;\n\n    afterConstruct() {\n      const {\n        parentScope: {\n          $$: {\n            parentScope: parentParentScope,\n            parentTemplate: parentParentTemplate,\n            argsChildren: children\n          }\n        },\n        argsChildren: ownChildren,\n        parentTemplate,\n        dBlockName\n      } = this.$$;\n      let found;\n\n      if (ownChildren.length) {\n        return;\n      }\n\n      this.ParentScope = parentParentScope;\n      this.ParentTemplate = parentParentTemplate;\n\n      if (dBlockName) {\n        found = findInArray(children, ({ name: nodeName }) => nodeName === `d-block:${ dBlockName }`);\n\n        if (!found) {\n          let parent = this;\n\n          /* eslint no-empty: 0 */\n          while (\n            (parent = parent.$$.parentScope)\n            && !(found = findInArray(parent.$$.dBlocks, ({ $$: { dBlockName: DBlockName } }) => DBlockName === dBlockName))\n            && parent.$$.parentScope.$$.name === '#d-item'\n          ) {}\n\n          if (found) {\n            this.ParentScope = parent;\n            this.ParentTemplate = parentTemplate;\n            found.value = {\n              children: found.value.$$.argsChildren\n            };\n          }\n        }\n\n        this.elems = found && found.value.children.length\n          ? found.value.children\n          : null;\n      } else {\n        this.elems = children;\n      }\n    }\n  }\n\n  return {\n    name: 'd-block',\n    value: DBlock\n  };\n}\n","import {\n  assign, iterateArray, iterateObject,\n  isArray, isFunction\n} from '../utils';\n\nconst watchArgs = js`[\n  args.set,\n  args.filterBy,\n  args.sortBy\n]`;\n\nexport function registerDEach(Block, createBlock) {\n  class DEach extends Block {\n    constructor(opts) {\n      super(opts);\n\n      const {\n        args: {\n          item: itemName = '$item',\n          index: indexName = '$index'\n        }\n      } = this;\n\n      assign(this.$$, {\n        itemsByUIDs: {},\n        UID: this.args.uid || undefined,\n        itemName,\n        indexName\n      });\n    }\n\n    afterRender() {\n      this.evaluateAndWatch(watchArgs, this.renderSet);\n      this.renderSet();\n    }\n\n    renderSet = () => {\n      const {\n        argsChildren,\n        itemsByUIDs,\n        parentScope,\n        parentElem,\n        parentTemplate,\n        scope,\n        itemName,\n        indexName,\n        UID\n      } = this.$$;\n      const {\n        args: { sortBy }\n      } = this;\n      const newItemsByUIDs = {};\n      const newUIDsCounter = {};\n      const newUIDs = {};\n      let {\n        set,\n        filterBy\n      } = this.args;\n      const isArr = isArray(set);\n      const iterate = isArr\n        ? iterateArray\n        : iterateObject;\n\n      if (isArr && isFunction(sortBy)) {\n        set = set\n          .slice()\n          .sort(sortBy);\n      }\n\n      if (isFunction(filterBy)) {\n        filterBy = [filterBy];\n      }\n\n      if (isArray(filterBy)) {\n        iterateArray(filterBy, (filter) => {\n          set = set.filter(filter);\n        });\n      }\n\n      iterate(set, (item, index) => {\n        scope[itemName] = item;\n        scope[indexName] = index;\n\n        const uid = parentScope.$$.evaluate(UID, null, null, false, false, this);\n\n        newUIDsCounter[uid] = (newUIDsCounter[uid] || 0) + 1;\n        newUIDs[index] = uid;\n      });\n\n      scope[itemName] = null;\n      scope[indexName] = null;\n\n      iterateObject(itemsByUIDs, (items, uid) => {\n        if (!newUIDsCounter[uid]) {\n          iterateArray(items, remove);\n\n          return;\n        }\n\n        iterateArray(items.splice(newUIDsCounter[uid]), remove);\n      });\n\n      let prevBlock;\n\n      iterate(set, (item, index) => {\n        const uid = newUIDs[index];\n        let block;\n\n        if (itemsByUIDs[uid] && itemsByUIDs[uid].length) {\n          block = itemsByUIDs[uid].shift();\n          block.$$.scope[indexName] = index;\n          block.$$.scope[itemName] = item;\n\n          if (block.$$.prevBlock !== prevBlock && prevBlock) {\n            prevBlock.$$.insertAfterIt(block.$$.content, true);\n          }\n        } else {\n          block = createBlock({\n            node: {\n              itemName,\n              indexName,\n              item,\n              index,\n              name: '#d-item',\n              children: argsChildren\n            },\n            parent: this,\n            parentElem,\n            parentBlock: this,\n            parentScope,\n            parentTemplate,\n            prevBlock\n          });\n        }\n\n        (newItemsByUIDs[uid] = newItemsByUIDs[uid] || []).push(block);\n        block.$$.prevBlock = prevBlock;\n        prevBlock = block;\n      });\n\n      this.$$.itemsByUIDs = newItemsByUIDs;\n    };\n  }\n\n  return {\n    name: 'd-each',\n    value: DEach\n  };\n}\n\nfunction remove(item) {\n  item.$$.remove();\n}\n","import { Elem } from '../Elem';\nimport { iterateArray, removeArrayElem } from '../utils';\n\nconst watchArgs = js`args.value`;\n\nexport function registerDElements(Block, createBlock) {\n  class DElements extends Block {\n    afterConstruct() {\n      const { parentElem } = this.$$;\n      const {\n        parentScope,\n        parentTemplate\n      } = this.args;\n\n      this.$$.evaluate(watchArgs, () => {\n        const {\n          children,\n          mixins,\n          parent,\n          watchersToRemove,\n          content\n        } = this.$$;\n        const { value } = this.args;\n\n        iterateArray(children, removeWithParentSignal);\n        iterateArray(mixins, removeWithParentSignal);\n        content.remove();\n\n        if (parent instanceof Block) {\n          parent.$$.removeContent(content);\n        }\n\n        this.$$.children = [];\n        this.$$.mixins = [];\n        this.$$.watchersToRemove = watchersToRemove.filter(({ watchers, watcher, forDElements }) => {\n          if (forDElements) {\n            return true;\n          }\n\n          removeArrayElem(watchers, watcher);\n        });\n        this.$$.content = new Elem();\n\n        let prevBlock;\n\n        iterateArray(value || [], (child) => {\n          prevBlock = createBlock({\n            node: child,\n            parent: this,\n            parentElem,\n            parentBlock: this,\n            parentScope,\n            parentTemplate,\n            prevBlock\n          });\n        });\n      }, this, true);\n    }\n  }\n\n  return {\n    name: 'd-elements',\n    value: DElements\n  };\n}\n\nfunction removeWithParentSignal(item) {\n  item.$$.remove(true);\n}\n","import { findInArray } from '../utils';\n\nexport function registerDIf(Block) {\n  class DIf extends Block {\n    static template = html`\n      <d-elements\n        value=\"{elems}\"\n        parentScope=\"{$$.parentScope}\"\n        parentTemplate=\"{$$.parentTemplate}\"\n      />\n    `;\n\n    constructor(opts) {\n      super(opts);\n\n      const {\n        parentScope,\n        argsChildren\n      } = this.$$;\n      let index = Infinity;\n      const values = argsChildren.map((child, i) => {\n        const {\n          name,\n          attrs = {},\n          children\n        } = child;\n        let cond = attrs.if;\n\n        if (name !== 'd-else' && cond) {\n          cond = parentScope.$$.evaluate(cond, (newValue) => {\n            if (!!newValue === values[i]) {\n              return;\n            }\n\n            values[i] = !!newValue;\n\n            if (i > index) {\n              return;\n            }\n\n            if (i < index) {\n              index = i;\n              this.elems = children;\n\n              return;\n            }\n\n            const found = findInArray(values, Boolean);\n\n            if (found) {\n              index = found.key;\n              this.elems = argsChildren[found.key].children;\n            } else {\n              index = Infinity;\n              this.elems = null;\n            }\n          }, this);\n        } else {\n          cond = true;\n        }\n\n        if (cond && index === Infinity) {\n          index = i;\n          this.elems = children;\n        }\n\n        return !!cond;\n      });\n    }\n  }\n\n  return {\n    name: 'd-if',\n    value: DIf\n  };\n}\n","export function registerDItem(Block) {\n  class DItem extends Block {\n    static template = html`\n      <d-elements\n        value=\"{$$.argsChildren}\"\n        parentScope=\"{this}\"\n        parentTemplate=\"{$$.parentTemplate}\"\n      />\n    `;\n  }\n\n  return {\n    name: '#d-item',\n    value: DItem\n  };\n}\n","import { collectFromArray, findInArray, iterateArray } from '../utils';\n\nconst watchArgs = js`args.value`;\n\nexport function registerDSwitch(Block) {\n  class DSwitch extends Block {\n    static template = html`\n      <d-elements\n        value=\"{elems}\"\n        parentScope=\"{$$.parentScope}\"\n        parentTemplate=\"{$$.parentTemplate}\"\n      />\n    `;\n\n    index = Infinity;\n\n    constructor(opts) {\n      super(opts);\n\n      const {\n        $$: {\n          argsChildren,\n          parentScope\n        },\n        args,\n        args: { value }\n      } = this;\n      let wasDefault;\n\n      this.values = collectFromArray(argsChildren, (values, child, i) => {\n        const {\n          name,\n          attrs,\n          children\n        } = child;\n        let val = attrs.if;\n\n        if (wasDefault) {\n          return;\n        }\n\n        if (name !== 'd-case' && name !== 'd-default') {\n          return;\n        }\n\n        if (name === 'd-default') {\n          wasDefault = true;\n        }\n\n        if (name === 'd-default') {\n          val = value;\n        } else if (val) {\n          val = parentScope.$$.evaluate(val, (newValue) => {\n            if (this.equals(this.values[i].value, newValue)) {\n              return;\n            }\n\n            this.values[i].value = newValue;\n\n            if (i > this.index) {\n              return;\n            }\n\n            if (i < this.index) {\n              this.index = i;\n              this.elems = children;\n\n              return;\n            }\n\n            const found = findInArray(this.values, ({ value }) => (\n              this.equals(value, args.value)\n            ));\n\n            if (found) {\n              this.index = found.key;\n              this.elems = found.value.children;\n            } else {\n              this.index = Infinity;\n              this.elems = null;\n            }\n          }, this);\n        } else {\n          val = undefined;\n        }\n\n        if (this.equals(val, value) && this.index === Infinity) {\n          this.index = i;\n          this.elems = children;\n        }\n\n        values.push({\n          name,\n          children,\n          value: val\n        });\n      }, []);\n    }\n\n    afterConstruct() {\n      this.evaluateAndWatch(watchArgs, () => {\n        const {\n          value: newValue\n        } = this.args;\n\n        this.index = Infinity;\n\n        iterateArray(this.values, ({ name, value, children }, i) => {\n          const val = name === 'd-default'\n            ? newValue\n            : value;\n\n          if (this.equals(val, newValue) && this.index === Infinity) {\n            this.index = i;\n            this.elems = children;\n          }\n        });\n\n        if (this.index === Infinity) {\n          this.elems = null;\n        }\n      });\n    }\n\n    equals(value1, value2) {\n      return value1 === value2;\n    }\n  }\n\n  return {\n    name: 'd-switch',\n    value: DSwitch\n  };\n}\n","import { collectFromObject, iterateObject, keys } from '../utils';\n\nexport function registerDAttr(Mixin) {\n  class DAttr extends Mixin {\n    attrs = {};\n\n    afterUpdate(newValue) {\n      const {\n        elem,\n        args,\n        attrs\n      } = this;\n\n      if (args) {\n        newValue = collectFromObject(args, (attrs, attr) => {\n          attrs[attr] = newValue;\n        });\n      }\n\n      iterateObject(attrs, (value, prop) => {\n        if (!(prop in newValue)) {\n          elem.removeAttr(prop);\n        }\n      });\n      elem.attr(newValue);\n\n      this.attrs = newValue;\n    }\n\n    beforeRemove() {\n      const {\n        elem,\n        attrs\n      } = this;\n\n      elem.removeAttr.apply(elem, keys(attrs));\n    }\n  }\n\n  return {\n    name: 'd-attr',\n    value: DAttr\n  };\n}\n\n","import { isFunction } from '../utils';\n\nexport function registerDBind(Mixin) {\n  class DBind extends Mixin {\n    afterUpdate(value) {\n      if (this.off) {\n        this.off();\n      }\n\n      if (!isFunction(value)) {\n        return;\n      }\n\n      if (this.args) {\n        this.off = this.elem.on(this.args.join(','), value);\n      } else {\n        console.error('Provide \"d-bind\" mixin with an event names (like \"d-bind(click)\" or \"d-bind(keyup, keypress)\")!');\n      }\n    }\n\n    beforeRemove() {\n      const { off } = this;\n\n      if (off) {\n        off();\n      }\n    }\n  }\n\n  return {\n    name: 'd-bind',\n    value: DBind\n  };\n}\n","import {\n  isArray, isString,\n  iterateArray, iterateObject\n} from '../utils';\n\nconst EMPTY_SPACE_REGEX = /\\s+/;\n\nexport function registerDClass(Mixin) {\n  class DClass extends Mixin {\n    classes = [];\n\n    afterUpdate(newValue) {\n      const {\n        elem,\n        args,\n        classes\n      } = this;\n      const newClasses = [];\n\n      if (args) {\n        newValue = newValue\n          ? args\n          : [];\n      }\n\n      if (isString(newValue)) {\n        newValue = newValue.split(EMPTY_SPACE_REGEX);\n      }\n\n      if (isArray(newValue)) {\n        iterateArray(classes, (cls) => {\n          if (newValue.indexOf(cls) === -1) {\n            elem.removeClass(cls);\n          }\n        });\n        iterateArray(newValue, (cls) => {\n          if (isString(cls)) {\n            newClasses.push(cls);\n            elem.addClass(cls);\n          }\n        });\n      } else {\n        iterateArray(classes, (cls) => {\n          if (!newValue || !newValue[cls]) {\n            elem.removeClass(cls);\n          }\n        });\n        iterateObject(newValue, (val, cls) => {\n          if (val) {\n            newClasses.push(cls);\n            elem.addClass(cls);\n          }\n        });\n      }\n\n      this.classes = newClasses;\n    }\n\n    beforeRemove() {\n      const {\n        elem,\n        classes\n      } = this;\n\n      elem.removeClass.apply(elem, classes);\n    }\n  }\n\n  return {\n    name: 'd-class',\n    value: DClass\n  };\n}\n","import { isFunction, isString } from '../utils';\n\nexport function registerDElem(Mixin, createBlock, Block) {\n  class DElem extends Mixin {\n    static evaluate = false;\n\n    constructor(opts) {\n      super(opts);\n\n      const {\n        args,\n        parentTemplate,\n        elem\n      } = this;\n      let scope = parentTemplate;\n      let value = this.evaluateOnce();\n\n      if (args) {\n        scope = value instanceof Block\n          ? value\n          : parentTemplate;\n        value = args[0];\n      }\n\n      if (isFunction(value)) {\n        value(elem);\n      } else if (isString(value)) {\n        scope[value] = elem;\n      }\n    }\n  }\n\n  return {\n    name: 'd-elem',\n    value: DElem\n  };\n}\n","export function registerDHide(Mixin) {\n  class DHide extends Mixin {\n    afterUpdate(value) {\n      const { elem } = this;\n\n      if (value) {\n        elem.hide();\n      } else {\n        elem.show();\n      }\n    }\n\n    beforeRemove() {\n      this.elem.show();\n    }\n  }\n\n  return {\n    name: 'd-hide',\n    value: DHide\n  };\n}\n","import { isFunction, isString } from '../utils';\n\nexport function registerDNode(Mixin, createBlock, Block) {\n  class DNode extends Mixin {\n    static evaluate = false;\n\n    constructor(opts) {\n      super(opts);\n\n      const {\n        args,\n        parentTemplate,\n        node\n      } = this;\n      let scope = parentTemplate;\n      let value = this.evaluateOnce();\n\n      if (args) {\n        scope = value instanceof Block\n          ? value\n          : parentTemplate;\n        value = args[0];\n      }\n\n      if (isFunction(value)) {\n        value(node);\n      } else if (isString(value)) {\n        scope[value] = node;\n      }\n    }\n  }\n\n  return {\n    name: 'd-node',\n    value: DNode\n  };\n}\n","export function registerDOn(Mixin) {\n  class DOn extends Mixin {\n    static evaluate = false;\n\n    constructor(opts) {\n      super(opts);\n\n      if (this.args) {\n        this.off = this.elem.on(this.args.join(','), () => {\n          this.evaluateOnce();\n        });\n      } else {\n        console.error('Provide \"d-on\" mixin with an event names (like \"d-on(click)\" or \"d-on(keyup, keypress)\")!');\n      }\n    }\n\n    beforeRemove() {\n      const { off } = this;\n\n      if (off) {\n        off();\n      }\n    }\n  }\n\n  return {\n    name: 'd-on',\n    value: DOn\n  };\n}\n","export function registerDShow(Mixin) {\n  class DShow extends Mixin {\n    afterUpdate(value) {\n      const { elem } = this;\n\n      if (value) {\n        elem.show();\n      } else {\n        elem.hide();\n      }\n    }\n\n    beforeRemove() {\n      this.elem.show();\n    }\n  }\n\n  return {\n    name: 'd-show',\n    value: DShow\n  };\n}\n","import {\n  isString, iterateObject, keys,\n  collectFromObject, collectFromArray\n} from '../utils';\n\nconst CSS_STYLES_SEPARATOR_REGEX = /; ?/;\n\nexport function registerDStyle(Mixin) {\n  class DStyle extends Mixin {\n    css = {};\n\n    afterUpdate(newValue, oldValue) {\n      const {\n        elem,\n        args,\n        css\n      } = this;\n\n      if (args) {\n        newValue = collectFromObject(args, (css, prop) => {\n          css[prop] = newValue;\n        });\n      }\n\n      if (isString(newValue)) {\n        newValue = collectFromArray(\n          newValue\n            .split(CSS_STYLES_SEPARATOR_REGEX)\n            .filter(Boolean),\n          addCSSProp\n        );\n      }\n\n      iterateObject(css, (value, prop) => {\n        if (!newValue[prop]) {\n          elem.removeCSS(prop);\n        }\n      });\n      elem.css(newValue);\n\n      this.css = newValue;\n    }\n\n    beforeRemove() {\n      const {\n        elem,\n        css\n      } = this;\n\n      elem.removeCSS.apply(elem, keys(css));\n    }\n  }\n\n  return {\n    name: 'd-style',\n    value: DStyle\n  };\n}\n\nfunction addCSSProp(css, item) {\n  const [prop, value] = item;\n\n  css[prop] = value;\n}\n","import {\n  isArray, isFunction, isNil,\n  collectFromArray\n} from '../utils';\n\nexport function registerDValue(Mixin, createBlock, Block) {\n  class DValue extends Mixin {\n    static evaluate = false;\n\n    constructor(opts) {\n      super(opts);\n\n      const {\n        args,\n        parentTemplate,\n        elem,\n        node\n      } = this;\n      const name = elem.name();\n      const type = elem.prop('type');\n      const value = this.evaluateOnce();\n      let initialScopeValue = null;\n\n      this.prop = getProp(name, type, elem);\n      this.name = name;\n      this.type = type;\n      this.value = value;\n      this.options = elem.find('option');\n      this.scope = parentTemplate;\n\n      if (args) {\n        this.name = args[0];\n        this.scope = value instanceof Block\n          ? value\n          : parentTemplate;\n      }\n\n      if (!isFunction(value)) {\n        initialScopeValue = this.scope.$$.evaluate(getEvalFunction(value), (newValue) => {\n          if (this.currentValue !== newValue) {\n            this.currentValue = newValue;\n            this.setProp(newValue);\n          }\n        }, this);\n      }\n\n      const initialElemValue = this.getProp(initialScopeValue, true);\n      const isInitialScopeValueNull = isNil(initialScopeValue);\n      const isCheckbox = type === 'checkbox';\n      const changeScope = () => {\n        this.currentValue = this.getProp(this.currentValue);\n        this.changeScope();\n      };\n\n      if (isInitialScopeValueNull || isCheckbox) {\n        this.currentValue = initialElemValue;\n        this.changeScope();\n\n        if (!isInitialScopeValueNull && isCheckbox) {\n          this.setProp(initialScopeValue);\n        }\n      } else {\n        this.currentValue = initialScopeValue;\n        this.setProp(initialScopeValue);\n      }\n\n      this.offElemListener = elem.on(getListenerName(name, type), (e) => {\n        if (e.target === node) {\n          changeScope();\n        }\n      });\n      this.offFormListener = elem.closest('form').on('reset', () => {\n        setTimeout(changeScope, 0);\n      });\n    }\n\n    changeScope() {\n      const {\n        scope,\n        value,\n        currentValue\n      } = this;\n\n      if (isFunction(value)) {\n        value(currentValue);\n      } else {\n        scope[value] = currentValue;\n      }\n    }\n\n    setProp(value) {\n      const {\n        elem,\n        name,\n        prop,\n        type,\n        node,\n        options\n      } = this;\n\n      if (prop === 'text') {\n        elem.text(value);\n      } else if (prop === 'multiple-select') {\n        options.forEach((option) => {\n          option.selected = value.indexOf(option.value) !== -1;\n        });\n      } else {\n        elem.prop(prop, getValueForSetting(name, value, type, node.value));\n      }\n    }\n\n    getProp(values, init) {\n      const {\n        elem,\n        name,\n        prop,\n        type,\n        node,\n        options\n      } = this;\n\n      return prop === 'text'\n        ? elem.text()\n        : getValueForGetting(name, elem.prop(prop), type, node.value, values, options, init, prop === 'multiple-select');\n    }\n\n    beforeRemove() {\n      this.offElemListener();\n      this.offFormListener();\n    }\n  }\n\n  return {\n    name: 'd-value',\n    value: DValue\n  };\n}\n\nfunction getProp(name, type, elem) {\n  switch (name) {\n    case 'select': {\n      return elem.hasAttr('multiple')\n        ? 'multiple-select'\n        : 'value';\n    }\n\n    case 'input': {\n      if (type === 'file') {\n        return 'files';\n      }\n\n      return type === 'radio' || type === 'checkbox'\n        ? 'checked'\n        : 'value';\n    }\n\n    default: {\n      return elem.hasAttr('contentEditable')\n        ? 'text'\n        : 'value';\n    }\n  }\n}\n\nfunction getValueForSetting(name, value, type, inputValue) {\n  if (name !== 'input') {\n    return value;\n  }\n\n  const isRadio = type === 'radio';\n\n  if (!isRadio && type !== 'checkbox') {\n    return value;\n  }\n\n  return isRadio\n    ? value === inputValue\n    : value.indexOf(inputValue) !== -1;\n}\n\nfunction getValueForGetting(name, value, type, inputValue, values, options, init, isMultiple) {\n  switch (name) {\n    case 'select': {\n      if (!isMultiple) {\n        return value;\n      }\n\n      return collectFromArray(options, addValue, []);\n    }\n\n    case 'input': {\n      if (type !== 'radio' && type !== 'checkbox') {\n        return value;\n      }\n\n      if (type === 'radio') {\n        return value\n          ? inputValue\n          : null;\n      }\n\n      if (!value && init) {\n        return values;\n      }\n\n      if (value) {\n        if (values) {\n          return values.indexOf(inputValue) === -1\n            ? values.concat(inputValue)\n            : values;\n        }\n\n        return [inputValue];\n      }\n\n      if (!isArray(values)) {\n        return [];\n      }\n\n      const index = values.indexOf(inputValue);\n\n      if (index !== -1) {\n        return [\n          ...values.slice(0, index),\n          ...values.slice(index + 1)\n        ];\n      }\n\n      return values;\n    }\n\n    default: {\n      return value;\n    }\n  }\n}\n\nfunction getListenerName(name, type) {\n  switch (name) {\n    case 'select': {\n      return 'change';\n    }\n\n    case 'input': {\n      return (\n        type === 'radio'\n        || type === 'checkbox'\n        || type === 'color'\n        || type === 'file'\n      )\n        ? 'change'\n        : 'change input';\n    }\n\n    default: {\n      return 'input';\n    }\n  }\n}\n\nfunction getEvalFunction(value) {\n  return (scope) => scope[value];\n}\n\nfunction addValue(values, { selected, value }) {\n  if (selected && values.indexOf(value) === -1) {\n    values.push(value);\n  }\n}\n","/**\n * @module Block\n * @private\n * @mixin\n * @description Exports Block class.\n */\n\nimport { Elem } from './Elem';\nimport {\n  defineFrozenProperties, defineProperties,\n  assign, escapeRegex, mapObject,\n  toObjectKeys, collectFromObject,\n  iterateArray, iterateObject,\n  isFunction, isNil, isArray,\n  setToStringTag, hasOwnProperty,\n  removeArrayElem, create,\n  getProto, setProto, keys\n} from './utils';\nimport * as Blocks from './blocks';\nimport * as Mixins from './mixins';\n\n/**\n * @typedef {Error} EvaluationError\n * @public\n * @property {String} expression - Expression which has been evaluated with the error.\n * @property {Block} block - Block in context of which the expression has been evaluated with the error.\n */\n\n/**\n * @callback Watcher\n * @public\n * @param {*} newValue - New value.\n * @param {*} oldValue - Old value.\n */\n\n/**\n * @callback VarsWatcher\n * @public\n */\n\n/**\n * @callback Wrapper\n * @public\n * @param {Block} Block class to wrap.\n * @returns {Block} New Block class.\n */\n\n/**\n * @callback AfterUpdate\n * @public\n * @param {*} newValue - New value.\n * @param {*} oldValue - Old value.\n * @param {*} mixin - Mixin instance.\n */\n\n/**\n * @callback BlockRegisterHook\n * @public\n * @param {Block} Block - Registering block.\n * @param {String} name - Block name.\n * @returns Return value is used for registering the block.\n * If Block subclass returned it's registered instead of the initial block, otherwise\n * the initial block is used.\n */\n\n/**\n * @callback MixinRegisterHook\n * @public\n * @param {Block} Mixin - Registering mixin.\n * @param {String} name - Mixin name.\n * @returns Return value is used for registering the mixin.\n * If Mixin subclass returned it's registered instead of the initial mixin, otherwise\n * the initial mixin is used.\n */\n\nconst rootBlocks = create(null);\nconst rootMixins = create(null);\nconst blockHooks = [];\nconst mixinHooks = [];\nconst { isPrototypeOf } = {};\nconst TAG_NAME_REGEX = /^[a-z][a-z\\d\\-_.:!@#$%^&*()[\\]{}='\"\\\\]*$/i;\nconst ATTR_NAME_REGEX = /^[\\u0000-\\u0020\\s'\">/=]+$/;\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst D_REST_REGEX = /^d-rest(?:#|$)/;\nconst WATCHED_ARG_PREFIX_REGEX = /^args\\./;\nconst WATCHED_GLOBAL_PREFIX_REGEX = /^globals\\./;\nconst NAMED_D_BLOCK_REGEX = /^d-block:([\\s\\S]+)$/;\nconst COMMA_REGEX = /,/;\nconst afterElem = new Elem();\nconst emptyChildren = [];\nconst emptyAttrs = {};\nlet evalMode;\nlet getting = [];\nlet changed;\n\n/**\n * @class Block\n * @public\n * @param {Object} opts - Element options.\n * @returns {Block} Instance of Block.\n * @description Class for dynamic templating.\n *\n * @example\n * import { D, Block, initApp } from 'dwayne';\n *\n * class App extends Block {\n *   static template = '<Hello text=\"{text}\"/>';\n *\n *   constructor(opts) {\n *     super(opts);\n *\n *     this.text = 'world (0)';\n *     this.times = 0;\n *\n *     this.setInterval();\n *   }\n *\n *   setInterval() {\n *     D(1000).interval(() => {\n *       this.text = `world (${ ++this.times })`;\n *     });\n *   }\n * }\n *\n * Block.block('App', App);\n * Block.block('Hello', 'Hello, {args.text}!');\n *\n * initApp('App', document.getElementById('root'));\n */\nclass Block {\n  static _blocks = create(rootBlocks);\n  static _mixins = create(rootMixins);\n\n  /**\n   * @member {Object} [Block.defaultArgs = null]\n   * @type {Object}\n   * @public\n   * @description Block default args.\n   */\n  static defaultArgs = null;\n\n  /**\n   * @member {Object} [Block.defaultLocals = null]\n   * @type {Object}\n   * @public\n   * @description Block default locals.\n   */\n  static defaultLocals = null;\n\n  /**\n   * @member {Object} [Block.template = { vars: [], value: [] }]\n   * @type {Object}\n   * @public\n   * @description Block template.\n   */\n  static template = {\n    vars: [],\n    value: []\n  };\n\n  /**\n   * @method Block.onEvalError\n   * @public\n   * @param {EvaluationError} err - The method is called when an evaluation error occurs.\n   */\n  static onEvalError(err) {\n    console.error(`Eval error (evaluating \"${ err.expression }\" in context of block \"${ err.block.$$.name }\"):`, err);\n  }\n\n  /**\n   * @method Block.beforeRegisterBlock\n   * @public\n   * @param {BlockRegisterHook} hook - Block register hook.\n   */\n  static beforeRegisterBlock(hook) {\n    blockHooks.push(hook);\n\n    return () => {\n      removeArrayElem(blockHooks, hook);\n    };\n  }\n\n  /**\n   * @method Block.beforeRegisterMixin\n   * @public\n   * @param {MixinRegisterHook} hook - Mixin register hook.\n   */\n  static beforeRegisterMixin(hook) {\n    mixinHooks.push(hook);\n\n    return () => {\n      removeArrayElem(mixinHooks, hook);\n    };\n  }\n\n  /**\n   * @method Block.block\n   * @public\n   * @param {String} name - Block or mixin name.\n   * @param {Template|typeof Block} Subclass - Subclass of Block or template string of it.\n   * @returns {typeof Block|undefined} Returns registered Block or undefined if the block hasn't been registered.\n   * @description Register block in the namespace of this.\n   */\n  static block(name, Subclass) {\n    if (isFunction(Subclass) && !isInstanceOf(Block, Subclass)) {\n      const constructor = Subclass;\n\n      Subclass = class extends Block {\n        constructor(opts) {\n          super(opts);\n\n          this::constructor(opts);\n        }\n      };\n    }\n\n    if (!isFunction(Subclass) && isArray(Subclass)) {\n      Subclass = class extends Block {\n        static template = {\n          vars: [],\n          value: Subclass\n        };\n      };\n    }\n\n    if (!isFunction(Subclass) && Subclass.vars && Subclass.value) {\n      Subclass = class extends Block {\n        static template = Subclass;\n      };\n    }\n\n    if (!isFunction(Subclass)) {\n      console.warn(`Block must be a string (representing a block template), a function or a class that extends Block class (name: \"${ name }\") (Block.block)`);\n\n      return;\n    }\n\n    if (!isInstanceOf(Block, Subclass)) {\n      extendBlock(Subclass);\n    }\n\n    if (rootBlocks[name]) {\n      console.warn(`The \"${ name }\" block is a built-in block so the block will not be registered (Block.block)`);\n\n      return;\n    }\n\n    if (!TAG_NAME_REGEX.test(name)) {\n      console.warn(`Name \"${ name }\" is not allowed for blocks so the block will not be registered (Block.block)`);\n\n      return;\n    }\n\n    if (!hasOwnProperty(this, '_blocks')) {\n      this._blocks = create(getProto(this)._blocks);\n    }\n\n    if (!hasOwnProperty(this, 'defaultLocals')) {\n      this.defaultLocals = {};\n    }\n\n    if (!hasOwnProperty(this, 'defaultArgs')) {\n      this.defaultArgs = create(null);\n    }\n\n    try {\n      Subclass = blockHooks.reduce((returnValue, hook) => {\n        const currentReturnValue = hook(returnValue, name, this);\n\n        return isInstanceOf(Block, currentReturnValue)\n          ? currentReturnValue\n          : returnValue;\n      }, Subclass);\n    } catch (err) {\n      console.error('Uncaught error in \"beforeRegisterBlock\" hook:', err);\n    }\n\n    const {\n      vars,\n      value\n    } = Subclass.template;\n\n    Subclass._html = value;\n    Subclass._vars = vars;\n\n    if (hasOwnProperty(Subclass, 'defaultArgs')) {\n      setProto(Subclass.defaultArgs, null);\n    }\n\n    this._blocks[name] = Subclass;\n\n    return Subclass;\n  }\n\n  /**\n   * @method Block.mixin\n   * @public\n   * @param {String} name - Block or mixin name.\n   * @param {typeof Mixin|AfterUpdate} Subclass - Subclass of Mixin or AfterUpdate callback.\n   * @returns {typeof Mixin|undefined} Returns registered Block or undefined if the block hasn't been registered.\n   * @description Register mixin in the namespace of this.\n   */\n  static mixin(name, Subclass) {\n    if (isFunction(Subclass) && !isInstanceOf(Mixin, Subclass)) {\n      const afterUpdate = Subclass;\n\n      Subclass = class extends Mixin {\n        afterUpdate(newValue, oldValue) {\n          this::afterUpdate(newValue, oldValue, this);\n        }\n      };\n    }\n\n    if (!isInstanceOf(Mixin, Subclass)) {\n      console.warn(`The \"${ name }\" class does not extend Mixin and will not be registered (Block.mixin)`);\n\n      return;\n    }\n\n    if (rootMixins[name]) {\n      console.warn(`The \"${ name }\" mixin is a built-in mixin so the mixin will not be registered (Block.mixin)`);\n\n      return;\n    }\n\n    if (!ATTR_NAME_REGEX.test(name)) {\n      console.warn(`Name \"${ name }\" is not allowed for mixins so the mixin will not be registered (Block.mixin)`);\n\n      return;\n    }\n\n    if (!hasOwnProperty(this, '_mixins')) {\n      this._mixins = create(getProto(this)._mixins);\n    }\n\n    try {\n      Subclass = mixinHooks.reduce((returnValue, hook) => {\n        const currentReturnValue = hook(returnValue, name, this);\n\n        return isInstanceOf(Mixin, currentReturnValue)\n          ? currentReturnValue\n          : returnValue;\n      }, Subclass);\n    } catch (err) {\n      console.error('Uncaught error in \"beforeRegisterMixin\" hook:', err);\n    }\n\n    Subclass._match = constructMixinRegExp(name);\n\n    this._mixins[name] = Subclass;\n\n    return Subclass;\n  }\n\n  /**\n   * @method Block.wrap\n   * @public\n   * @param {...Wrapper} wrappers - Functions that return wrapped block.\n   * @returns {typeof Block} New block.\n   * @description Method for wrapping blocks into another blocks.\n   * It is considered best practice to just extends the old block with a new one.\n   *\n   * @example\n   * class MyBlock extends Block {\n   *   static template = '<div>123</div>';\n   * }\n   *\n   * MyBlock.wrap((Block) => {\n   *   return class extends Block {\n   *     static template = `<section class=\"wrapper\">${ Block.template }</section>`;\n   *\n   *     constructor(opts) {\n   *       super(opts);\n   *\n   *       this.additionalVar = 'additional';\n   *     }\n   *   };\n   * });\n   */\n  static wrap(...wrappers) {\n    return wrappers.reduce(wrapBlock, this);\n  }\n\n  constructor(opts) {\n    const {\n      name,\n      args: originalArgs,\n      dBlockName,\n      children,\n      parent,\n      parentElem,\n      parentBlock,\n      parentScope,\n      parentTemplate,\n      prevBlock\n    } = opts;\n    const watchersToRemove = [];\n    const constructor = getProto(this).constructor;\n    const childrenBlocks = [];\n    const mixins = [];\n    const isParentBlock = parent instanceof Block;\n\n    defineFrozenProperties(this, {\n      /**\n       * @member {Block} Block#$\n       * @type {Block}\n       * @public\n       * @description This.\n       */\n      $: this,\n\n      /**\n       * @member {Object} Block#$$\n       * @type {Object}\n       * @protected\n       * @property {Object} args - Private args scope.\n       * @property {Object[]} argsChildren - Block args children.\n       * @property {Block[]} children - Child blocks.\n       * @property {Mixin[]} mixins - Child mixins.\n       * @property {Elem} parentElem - Parent element.\n       * @property {Elem} content - Content elements.\n       * @property {Function} evaluate - Evaluate function.\n       * @property {Object} globals - Private globals scope.\n       * @property {Object} locals - Private locals scope.\n       * @property {Object[]} watchersToRemove - Watchers to remove before removing element.\n       */\n      $$: {\n        name,\n        dBlockName,\n        dBlocks: [],\n        parent,\n        parentElem,\n        parentScope,\n        parentBlock,\n        parentTemplate,\n        content: new Elem(),\n        ns: constructor,\n        argsChildren: children,\n        children: childrenBlocks,\n        mixins,\n        prevBlock,\n        watchersToRemove,\n        isRemoved: false,\n        evaluate: (func, onChange, targetBlock, forDElements, forDItem, forDEach) => {\n          if (!isFunction(func)) {\n            return func;\n          }\n\n          forDElements = !!forDElements;\n          forDItem = !!forDItem;\n\n          const scope = (name === '#d-item' && !forDItem) || forDEach\n            ? (forDEach || this).$$.scope\n            : this;\n          const { watchersToRemove } = targetBlock ? targetBlock.$$ : {};\n          const onChangeFlag = !!onChange;\n\n          const evaluate = () => {\n            let result;\n\n            if (onChangeFlag) {\n              evalMode = true;\n              getting = [];\n            }\n\n            try {\n              result = func(scope);\n            } catch (err) {\n              err.expression = func.expression;\n              err.original = func.original;\n              err.block = this;\n\n              if (isFunction(constructor.onEvalError)) {\n                try {\n                  constructor.onEvalError(err);\n                } catch (e) {\n                  console.error('Uncaught error in onEvalError:', e);\n                }\n              }\n            }\n\n            if (onChangeFlag) {\n              const localWatchers = [];\n\n              iterateArray(getting, (watchers) => {\n                const watcher = () => {\n                  const newResult = evaluate();\n\n                  if (newResult !== result && !targetBlock.$$.isRemoved) {\n                    onChange(newResult, result);\n                  }\n                };\n                const watcherBlock = {\n                  forDElements,\n                  watcher,\n                  watchers\n                };\n\n                watcher.onRemove = () => {\n                  iterateArray(localWatchers, (watcherBlock) => {\n                    const {\n                      watcher,\n                      watchers\n                    } = watcherBlock;\n\n                    removeArrayElem(watchersToRemove, watcherBlock);\n                    removeArrayElem(watchers, watcher);\n                  });\n                };\n\n                localWatchers.push(watcherBlock);\n                watchersToRemove.push(watcherBlock);\n                watchers.push(watcher);\n              });\n\n              evalMode = false;\n              getting = [];\n            }\n\n            return result;\n          };\n\n          return evaluate();\n        },\n        remove: (isParentSignal) => {\n          this.$$.isRemoved = true;\n\n          removeWatchers(watchersToRemove);\n\n          iterateArray(childrenBlocks, removeWithParentSignal);\n\n          iterateArray(mixins, removeWithParentSignal);\n\n          try {\n            this.beforeRemove();\n          } catch (err) {\n            console.error(`Uncaught error in ${ name }#beforeRemove:`, err);\n          }\n\n          if (!isParentSignal && isParentBlock) {\n            parent.$$.removeContent(this.$$.content);\n          }\n\n          if (!isParentSignal && parentBlock) {\n            removeArrayElem(parentBlock.$$.children, this);\n          }\n\n          this.$$.content.remove();\n        },\n        addContent: (contentToAdd, notRecursive) => {\n          const index = this.$$.content.indexOf(contentToAdd[0].previousSibling) + 1;\n\n          if (index === 0) {\n            this.$$.content = contentToAdd.add(this.$$.content);\n          } else {\n            this.$$.content = this.$$.content\n              .slice(0, index)\n              .add(contentToAdd, this.$$.content.slice(index));\n          }\n\n          if (isParentBlock && !notRecursive) {\n            parent.$$.addContent(contentToAdd);\n          }\n        },\n        moveContent: (contentToMove, after) => {\n          const index = this.$$.content.indexOf(contentToMove[0]);\n          const indexToPut = this.$$.content.indexOf(after[0]) + 1;\n\n          if (indexToPut === 0) {\n            this.$$.content = contentToMove.add(\n              this.$$.content.slice(indexToPut, index),\n              this.$$.content.slice(index + contentToMove.length)\n            );\n          } else if (index > indexToPut) {\n            this.$$.content = this.$$.content\n              .slice(0, indexToPut)\n              .add(\n                contentToMove,\n                this.$$.content.slice(indexToPut, index),\n                this.$$.content.slice(index + contentToMove.length)\n              );\n          } else {\n            this.$$.content = this.$$.content\n              .slice(0, index)\n              .add(\n                this.$$.content.slice(index + contentToMove.length, indexToPut),\n                contentToMove,\n                this.$$.content.slice(indexToPut)\n              );\n          }\n\n          if (isParentBlock && indexToPut) {\n            parent.$$.moveContent(contentToMove, after);\n          }\n        },\n        removeContent: (contentToRemove) => {\n          this.$$.content = this.$$.content.filter((elem) => (\n            contentToRemove.indexOf(elem) === -1\n          ));\n\n          if (isParentBlock) {\n            parent.$$.removeContent(contentToRemove);\n          }\n        },\n        insertInStartOfIt: (contentToInsert, moveFlag) => {\n          const { prevBlock } = this.$$;\n          let after = afterElem;\n\n          if (prevBlock instanceof Block) {\n            after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n          } else if (prevBlock) {\n            after = prevBlock;\n            contentToInsert.insertAfter(prevBlock);\n\n            if (isParentBlock) {\n              if (moveFlag) {\n                parent.$$.moveContent(contentToInsert, after);\n              } else {\n                parent.$$.addContent(contentToInsert, true);\n              }\n            }\n          } else if (isParentBlock) {\n            const { prevBlock } = parent.$$;\n\n            if (prevBlock) {\n              let notRecursive;\n\n              if (prevBlock instanceof Block) {\n                after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n                notRecursive = true;\n              } else {\n                after = prevBlock;\n                notRecursive = false;\n                contentToInsert.insertAfter(prevBlock);\n              }\n\n              if (moveFlag) {\n                parent.$$.moveContent(contentToInsert, after);\n              } else {\n                parent.$$.addContent(contentToInsert, notRecursive);\n              }\n            } else {\n              after = parent.$$.insertInStartOfIt(contentToInsert, moveFlag);\n            }\n          } else {\n            contentToInsert.into(parentElem, false);\n          }\n\n          if (moveFlag) {\n            this.$$.moveContent(contentToInsert, after);\n          } else {\n            this.$$.addContent(contentToInsert, true);\n          }\n\n          return after;\n        },\n        insertAfterIt: (contentToInsert, moveFlag) => {\n          const { prevBlock } = this.$$;\n          let after = afterElem;\n          let tryToAddOrMove;\n\n          if (this.$$.content.length) {\n            after = this.$$.content.elem(-1);\n            tryToAddOrMove = true;\n            contentToInsert.insertAfter(after);\n          } else if (prevBlock instanceof Block) {\n            after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n          } else if (prevBlock) {\n            after = prevBlock;\n            tryToAddOrMove = true;\n            contentToInsert.insertAfter(prevBlock);\n          } else if (isParentBlock) {\n            after = parent.$$.insertInStartOfIt(contentToInsert, moveFlag);\n          } else {\n            contentToInsert.into(parentElem, false);\n          }\n\n          if (isParentBlock && tryToAddOrMove) {\n            if (moveFlag) {\n              parent.$$.moveContent(contentToInsert, after);\n            } else {\n              parent.$$.addContent(contentToInsert);\n            }\n          }\n\n          return after;\n        }\n      }\n    });\n\n    iterateObject(constructor.defaultLocals, (value, variable) => {\n      this[variable] = value;\n    });\n    iterateArray(constructor._vars, (variable) => {\n      this[variable] = this[variable];\n    });\n\n    const argsObject = create(null);\n    let args = create(constructor.defaultArgs || null);\n    let wasDRest;\n\n    iterateObject(originalArgs, (value, arg) => {\n      const isDRest = D_REST_REGEX.test(arg);\n      const localArgs = isDRest || wasDRest\n        ? create(args)\n        : args;\n\n      args = localArgs;\n\n      if (isDRest) {\n        const restArgs = parentScope.$$.evaluate(value, (value) => {\n          iterateObject(localArgs, cleanProperty);\n          assign(localArgs, transformRestArgs(value));\n          calculateArgs(args, argsObject);\n        }, this);\n\n        wasDRest = true;\n\n        return assign(localArgs, transformRestArgs(restArgs));\n      }\n\n      const isDElements = name === 'd-elements';\n      const forDElements = isDElements && arg === 'value';\n\n      wasDRest = false;\n\n      if (name !== 'd-each' || arg !== 'uid') {\n        value = parentScope.$$.evaluate(value, (value) => {\n          localArgs[arg] = value;\n          calculateArgs(args, argsObject);\n        }, this, forDElements, isDElements && parentBlock.$$.name === '#d-item');\n      }\n\n      localArgs[arg] = value;\n    });\n\n    defineFrozenProperties(this, {\n      /**\n       * @member {Object} Block#args\n       * @type {Object}\n       * @public\n       */\n      args: argsObject,\n\n      /**\n       * @member {Object} Block#globals\n       * @type {Object}\n       * @public\n       */\n      globals: create(\n        parentScope\n          ? parentScope.globals\n          : null\n      ),\n\n      /**\n       * @member {Block|undefined} Block#parentScope\n       * @type {Block|undefined}\n       * @public\n       */\n      parentScope,\n\n      /**\n       * @member {Block|undefined} Block#parentTemplate\n       * @type {Block|undefined}\n       * @public\n       */\n      parentTemplate\n    });\n\n    calculateArgs(args, argsObject);\n\n    if (parentBlock) {\n      parentBlock.$$.children.push(this);\n    }\n  }\n\n  /**\n   * @method Block#afterConstruct\n   * @public\n   * @description Is called after block construction (including all scopes)\n   * but before rendering the block and its children.\n   */\n  afterConstruct() {}\n\n  /**\n   * @method Block#afterRender\n   * @public\n   * @description Is called after block has been rendered.\n   */\n  afterRender() {}\n\n  /**\n   * @method Block#beforeRemove\n   * @public\n   * @description Is called before the block removal.\n   */\n  beforeRemove() {}\n\n  /**\n   * @method Block#getContent\n   * @public\n   * @returns {Elem}\n   * @description Returns contents of the block.\n   */\n  getContent() {\n    return this.$$.content.slice();\n  }\n\n  /**\n   * @method Block#evaluateAndWatch\n   * @public\n   * @param {Function} func - Function to evaluate.\n   * @param {Watcher} callback - Callback which is called when the expression value is changed.\n   * @returns {*} Evaluation result.\n   * @description Method for evaluating an expression in context of the block and watching for the changes.\n   */\n  evaluateAndWatch(func, callback) {\n    return this.$$.evaluate(func, callback, this);\n  }\n\n  /**\n   * @method Block#watch\n   * @public\n   * @param {...('args'|'globals'|String)} [vars] - Vars to watch (args, globals or locals).\n   * If no specified all locals, args and globals are to be watched.\n   * If the 'args' string all args are to be watched.\n   * If the 'globals' string all globals are to be watched.\n   * @param {VarsWatcher} watcher - Called when watched vars are changed.\n   * @description Method for watching for vars. If no vars passed in arguments\n   * all vars are to be watched. If the 'args' string is in the arguments all args are to be watched.\n   * If the 'globals' string is in the arguments all globals are to be watched.\n   * Otherwise specified vars will be watched.\n   * Watchers should not be put inside the constructor. It is considered best\n   * practice to do it inside the {@link Block#afterConstruct} method.\n   * Note that these expressions (vars, i.e. \"args.arg\") are not to be\n   * evaluated so you cannot put there things like \"a[b]\" or any js code,\n   * only expressions like \"a\", \"b\", \"args.a\", \"args.b\" and \"globals.a\", \"globals.b\".\n   * Also note that if there are more than one var that are changed at once (synchronously)\n   * the watcher is called only once.\n   * Note that the watcher is executed right away because in most cases\n   * this behaviour is very convenient.\n   *\n   * @example\n   * class MyBlock extends Block {\n   *   static template = '<div />';\n   *\n   *   afterConstruct() {\n   *     this.watch('a', () => {});\n   *     this.watch('args.a', 'globals.r', () => {});\n   *     this.watch(() => {});\n   *   }\n   * }\n   */\n  watch(...vars) {\n    const oldWatcher = arguments[arguments.length - 1];\n\n    if (!isFunction(oldWatcher)) {\n      console.warn(`The last argument (watcher) wasn't specified (${ this.$$.name }#watch)`);\n\n      return;\n    }\n\n    const watcher = () => {\n      oldWatcher();\n    };\n\n    if (arguments.length === 1) {\n      watchForAllLocals(this, watcher);\n      watchForAllArgs(this, watcher);\n      watchForAllGlobals(this, watcher);\n\n      oldWatcher();\n\n      return;\n    }\n\n    iterateArray(arguments, (variable) => {\n      if (variable === oldWatcher) {\n        return;\n      }\n\n      variable = `${ variable }`;\n\n      if (variable === '$') {\n        return watchForAllLocals(this, watcher);\n      }\n\n      if (variable === 'args') {\n        return watchForAllArgs(this, watcher);\n      }\n\n      if (variable === 'globals') {\n        return watchForAllGlobals(this, watcher);\n      }\n\n      if (WATCHED_ARG_PREFIX_REGEX.test(variable)) {\n        variable = variable.replace(WATCHED_ARG_PREFIX_REGEX, '');\n\n        if (!this.$$.args[variable]) {\n          return;\n        }\n\n        this.$$.args[variable].watchers.perm.push(watcher);\n\n        return;\n      }\n\n      if (WATCHED_GLOBAL_PREFIX_REGEX.test(variable)) {\n        variable = variable.replace(WATCHED_GLOBAL_PREFIX_REGEX, '');\n\n        if (!this.$$.globals[variable]) {\n          return;\n        }\n\n        const { watchers } = this.$$.globals[variable];\n\n        watchers.perm.push(watcher);\n        this.$$.watchersToRemove.push({\n          watcher,\n          watchers\n        });\n\n        return;\n      }\n\n      if (!this.$$.locals[variable]) {\n        return;\n      }\n\n      this.$$.locals[variable].watchers.perm.push(watcher);\n    });\n\n    oldWatcher();\n  }\n}\n\nsetToStringTag(Block, 'Block');\nsetProto(Block.prototype, null);\n\nregisterBuiltIns(Blocks, rootBlocks, Block);\n\nconst blocks = Block._blocks;\n\nclass Mixin {\n  static evaluate = true;\n\n  /**\n   * @method Mixin.wrap\n   * @public\n   * @param {...Wrapper} wrappers - Functions that return wrapped mixin.\n   * @returns {Mixin} New mixin.\n   * @description Method for wrapping mixins.\n   * It is considered best practice to just extends the old mixin with a new one.\n   */\n  static wrap(...wrappers) {\n    return wrappers.reduce(wrapMixin, this);\n  }\n\n  constructor(opts) {\n    const {\n      name,\n      value,\n      dynamic,\n      elem,\n      args,\n      comment,\n      parentBlock,\n      parentScope,\n      parentTemplate\n    } = opts;\n    const watchersToRemove = [];\n    const watchers = [];\n\n    defineFrozenProperties(this, {\n      $$: {\n        name,\n        _value: value,\n        value,\n        isDynamic: dynamic,\n        parentScope,\n        parentBlock,\n        parentTemplate,\n        watchers,\n        watchersToRemove,\n        isRemoved: false,\n        evaluate: (watcher) => {\n          const {\n            isDynamic,\n            value,\n            _value\n          } = this.$$;\n          const currentValue = isDynamic\n            ? value\n            : parentScope.$$.evaluate(_value);\n\n          if (watcher) {\n            watchers.push(watcher);\n          }\n\n          return currentValue;\n        },\n        remove: (isParentSignal) => {\n          this.$$.isRemoved = true;\n\n          removeWatchers(watchersToRemove);\n\n          try {\n            this.beforeRemove();\n          } catch (err) {\n            console.error(`Uncaught error in ${ name }#beforeRemove:`, err);\n          }\n\n          if (!isParentSignal && parentBlock) {\n            removeArrayElem(parentBlock.$$.mixins, this);\n          }\n        }\n      }\n    });\n\n    this.args = args;\n    this.comment = comment;\n    this.parentScope = parentScope;\n    this.parentTemplate = parentTemplate;\n    this.elem = elem;\n    this.node = elem[0];\n\n    if (parentBlock) {\n      parentBlock.$$.mixins.push(this);\n    }\n  }\n\n  afterUpdate() {}\n\n  beforeRemove() {}\n\n  /**\n   * @method Block#evaluateAndWatch\n   * @public\n   * @param {Watcher} callback - Callback which is called when the mixin value is changed.\n   * @returns {*} Evaluation result.\n   * @description Method for evaluating the mixin value and watching for the changes.\n   */\n  evaluateAndWatch(callback) {\n    return this.$$.evaluate(callback);\n  }\n\n  /**\n   * @method Block#evaluateOnce\n   * @public\n   * @returns {*} Evaluation result.\n   * @description Method for evaluating the mixin value once.\n   */\n  evaluateOnce() {\n    return this.$$.evaluate();\n  }\n}\n\nsetToStringTag(Mixin, 'Mixin');\n\nregisterBuiltIns(Mixins, rootMixins, Mixin);\n\nconst mixins = Block._mixins;\n\nfunction initApp(html, node) {\n  const parentElem = new Elem(node).elem(0);\n\n  if (!parentElem.length) {\n    throw new Error('No valid element to insert the app into was given! (initApp)');\n  }\n\n  if (parentElem.prop('DwayneRootBlock')) {\n    throw new Error('There already exists a Dwayne app inside the given element! (initApp)');\n  }\n\n  if (isArray(html)) {\n    html = {\n      vars: [],\n      value: html\n    };\n  }\n\n  class RootBlock extends Block {\n    static _vars = html.vars;\n    static _html = html.value\n  }\n\n  const block = createBlock({\n    node: {\n      name: '#RootBlock'\n    },\n    Constructor: RootBlock,\n    parent: parentElem,\n    parentElem\n  });\n\n  parentElem\n    .prop('DwayneRootBlock', block)\n    .attr('dwayne-root', '');\n}\n\nfunction removeApp(node) {\n  const elem = new Elem(node);\n\n  if (!elem.length) {\n    throw new Error('No valid element to remove the app from was given! (removeApp)');\n  }\n\n  const { DwayneRootBlock } = elem[0];\n\n  if (!DwayneRootBlock) {\n    throw new Error('No app registered inside the given element! (removeApp)');\n  }\n\n  DwayneRootBlock.$$.remove();\n  elem.removeAttr('dwayne-root');\n\n  delete elem[0].DwayneRootBlock;\n}\n\nfunction registerBuiltIns(set, scope, proto) {\n  iterateObject(set, (register) => {\n    const {\n      name,\n      value\n    } = register(proto, createBlock, Block);\n\n    if (proto === Block) {\n      const {\n        vars,\n        value: html\n      } = value.template;\n\n      value._html = html;\n      value._vars = vars;\n    } else {\n      value._match = constructMixinRegExp(name);\n    }\n\n    scope[name] = value;\n  });\n}\n\nfunction createBlock({ node, Constructor, parent, parentElem, parentBlock, parentScope, parentTemplate, prevBlock }) {\n  const doc = new Elem(parentElem[0].ownerDocument);\n  const elem = parentElem[0].namespaceURI === SVG_NS\n    ? doc.create('svg')\n    : doc;\n  const localBlocks = parentScope ? parentScope.$$.ns._blocks : blocks;\n  const localMixins = parentScope ? parentScope.$$.ns._mixins : mixins;\n  let children = node.children = node.children || emptyChildren;\n  let args = node.attrs = node.attrs || emptyAttrs;\n  let name = node.name || 'UnknownBlock';\n  let constructor = Constructor || (node.name && localBlocks[node.name]);\n  let dBlockMatch;\n  let dBlockName;\n  let dBlockArgs;\n  let dBlockChildren;\n  let dElementsName;\n\n  if (name === 'd-block' && args.name) {\n    name = 'd-elements';\n    constructor = localBlocks[name];\n    dElementsName = args.name;\n    dBlockArgs = args;\n    dBlockChildren = children;\n    children = emptyChildren;\n\n    delete args.name;\n    args = {};\n  } else if (name === 'd-block' && hasOwnProperty(args, 'constructor')) {\n    name = 'UnknownBlock';\n    constructor = parentScope.$$.evaluate(args.constructor);\n\n    if (isFunction(constructor)) {\n      delete args.constructor;\n    } else {\n      constructor = null;\n    }\n  } else if ((dBlockMatch = name.match(NAMED_D_BLOCK_REGEX)) || name === 'd-block') {\n    constructor = blocks['d-block'];\n    dBlockName = dBlockMatch ? dBlockMatch[1] : null;\n  }\n\n  let blockInstance;\n\n  if (constructor) {\n    try {\n      blockInstance = new constructor({\n        name,\n        args,\n        dBlockName,\n        children,\n        parent,\n        parentElem,\n        parentBlock,\n        parentScope,\n        parentTemplate,\n        prevBlock\n      });\n    } catch (err) {\n      console.error(`Uncaught error in new ${ name }:`, err);\n      constructor = null;\n    }\n  }\n\n  if (!constructor) {\n    const {\n      value,\n      children\n    } = node;\n\n    const element = elem.create(name);\n    const currentAttrs = create(null);\n    let attrs = create(null);\n    let wasDRest;\n    const mixinDefaultOpts = {\n      elem: element,\n      parentBlock,\n      parentScope,\n      parentTemplate\n    };\n\n    iterateObject(args, (value, attr) => {\n      const isDRest = D_REST_REGEX.test(attr);\n      const localAttrs = isDRest || wasDRest\n        ? create(attrs)\n        : attrs;\n\n      attrs = localAttrs;\n\n      if (isDRest) {\n        const restAttrs = parentScope.$$.evaluate(value, (value) => {\n          setTimeout(() => {\n            iterateObject(localAttrs, cleanProperty);\n            assign(localAttrs, transformRestAttrs(\n              value, localMixins, mixinDefaultOpts\n            ));\n            calculateAttrs(attrs, currentAttrs, element, false);\n          }, 0);\n        }, parentBlock);\n\n        wasDRest = true;\n\n        return assign(localAttrs, transformRestAttrs(\n          restAttrs, localMixins, mixinDefaultOpts\n        ));\n      }\n\n      const match = mixinMatch(localMixins, attr);\n\n      wasDRest = false;\n\n      if (match) {\n        if (value === true) {\n          value = 'true';\n        }\n\n        localAttrs[attr] = {\n          type: 'mixin',\n          dynamic: false,\n          opts: {\n            value,\n            ...match,\n            ...mixinDefaultOpts\n          },\n          value\n        };\n\n        return;\n      }\n\n      localAttrs[attr] = {\n        type: 'attr',\n        value: parentScope.$$.evaluate(value, (value) => {\n          localAttrs[attr] = {\n            type: 'attr',\n            value\n          };\n          calculateAttrs(attrs, currentAttrs, element, false);\n        }, parentBlock)\n      };\n    });\n\n    const createMixins = calculateAttrs(attrs, currentAttrs, element, true);\n\n    if (name === '#comment') {\n      element.text(value);\n    }\n\n    if (name === '#text') {\n      let text = parentScope.$$.evaluate(value, (value) => {\n        if (isNil(value)) {\n          value = '';\n        }\n\n        element.text(`${ value }`);\n      }, parentBlock);\n\n      if (isNil(text)) {\n        text = '';\n      }\n\n      element.text(`${ text }`);\n    }\n\n    if (children) {\n      const parentElem = name === 'template'\n        ? new Elem(element[0].content)\n        : element;\n      let prevBlock;\n\n      iterateArray(children, (child) => {\n        prevBlock = createBlock({\n          node: child,\n          parent: parentElem,\n          parentElem,\n          parentBlock,\n          parentScope,\n          parentTemplate,\n          prevBlock\n        });\n      });\n    }\n\n    const isParentBlock = parent instanceof Block;\n\n    if (prevBlock instanceof Block) {\n      prevBlock.$$.insertAfterIt(element, false);\n    } else if (prevBlock) {\n      element.insertAfter(prevBlock);\n\n      if (isParentBlock) {\n        parent.$$.addContent(element);\n      }\n    } else if (isParentBlock) {\n      parent.$$.insertInStartOfIt(element, false);\n    } else {\n      element.into(parentElem, false);\n    }\n\n    createMixins();\n\n    return element;\n  }\n\n  const {\n    $$,\n    args: Args,\n    globals,\n    ...locals\n  } = blockInstance;\n\n  if (dBlockMatch || name === 'd-block') {\n    parentScope.$$.dBlocks.push(blockInstance);\n  }\n\n  if (dBlockArgs) {\n    node = {\n      attrs: dBlockArgs,\n      children: dBlockChildren\n    };\n    node.name = parentScope.$$.evaluate(dElementsName, (newName) => {\n      node.name = newName;\n\n      Args.value = [node];\n    }, blockInstance, true);\n\n    Args.value = [node];\n    Args.parentScope = parentScope;\n  }\n\n  const html = name === 'd-elements'\n    ? Args.value || []\n    : constructor._html;\n\n  $$.args = constructPrivateScope(Args);\n  $$.locals = constructPrivateScope(locals);\n  $$.globals = constructPrivateScope(globals, 'globals', parentScope);\n\n  if (name === '#d-item') {\n    const scopeValues = {\n      [node.itemName]: node.item,\n      [node.indexName]: node.index\n    };\n    const scope = parentScope.$$.name === '#d-item'\n      ? parentScope.$$.scope\n      : parentScope;\n\n    $$.ns = parentScope.$$.ns;\n    $$.privateScope = constructPrivateScope(scopeValues);\n    constructPublicScope($$.scope = create(scope), scopeValues, $$.privateScope);\n  }\n\n  if (name === 'd-each') {\n    $$.scope = create(parentScope.$$.name === '#d-item' ? parentScope.$$.scope : parentScope, {\n      [Args.item || '$item']: {\n        value: null,\n        writable: true\n      },\n      [Args.index || '$index']: {\n        value: null,\n        writable: true\n      }\n    });\n  }\n\n  constructPublicScope(Args, Args, $$.args);\n  constructPublicScope(globals, globals, $$.globals);\n  constructPublicScope(blockInstance, locals, $$.locals);\n\n  try {\n    blockInstance.afterConstruct();\n  } catch (err) {\n    console.error(`Uncaught error in ${ name }#afterConstruct:`, err);\n  }\n\n  prevBlock = undefined;\n  parentScope = name === 'd-elements'\n    ? Args.parentScope\n    : blockInstance;\n  parentTemplate = name === 'd-elements'\n    ? Args.parentTemplate\n    : blockInstance;\n\n  iterateArray(html, (child) => {\n    prevBlock = createBlock({\n      node: child,\n      parent: blockInstance,\n      parentElem,\n      parentBlock: blockInstance,\n      parentScope,\n      parentTemplate,\n      prevBlock\n    });\n  });\n\n  try {\n    blockInstance.afterRender();\n  } catch (err) {\n    console.error(`Uncaught error in ${ name }#afterRender:`, err);\n  }\n\n  return blockInstance;\n}\n\nfunction createMixin({ name, Mixin, dynamic, value, args, comment, elem, parentBlock, parentScope, parentTemplate }) {\n  const mixin = new Mixin({\n    name,\n    value,\n    dynamic,\n    args,\n    comment,\n    elem,\n    parentBlock,\n    parentScope,\n    parentTemplate\n  });\n\n  if (Mixin.evaluate) {\n    const value = mixin.value = mixin.evaluateAndWatch((newValue, oldValue) => {\n      mixin.value = newValue;\n\n      try {\n        mixin.afterUpdate(newValue, oldValue);\n      } catch (err) {\n        console.error(`Uncaught error in ${ name }#afterUpdate:`, err);\n      }\n    });\n\n    mixin.afterUpdate(value);\n  }\n\n  return mixin;\n}\n\nfunction isInstanceOf(Class, Subclass) {\n  return Class::isPrototypeOf(Subclass) && Class.prototype::isPrototypeOf(Subclass.prototype);\n}\n\nfunction removeWatchers(watchersToRemove) {\n  iterateArray(watchersToRemove, removeWatcher);\n}\n\nfunction constructPrivateScope(object, type, parentScope) {\n  let scope = {};\n\n  if (type === 'globals') {\n    scope = create(\n      parentScope\n        ? parentScope.$$.globals\n        : null\n    );\n  }\n\n  return collectFromObject(object, (scope, value, key) => {\n    scope[key] = {\n      value,\n      watchers: {\n        temp: [],\n        perm: []\n      }\n    };\n  }, scope);\n}\n\nfunction constructPublicScope(scope, scopeValues, privateScope) {\n  defineProperties(scope, mapObject(scopeValues, (value, key) => {\n    const scope = privateScope[key];\n    const { watchers } = scope;\n\n    return {\n      configurable: false,\n      enumerable: true,\n      get() {\n        if (evalMode) {\n          if (getting.indexOf(watchers.temp) === -1) {\n            getting.push(watchers.temp);\n          }\n        }\n\n        return scope.value;\n      },\n      set(value) {\n        if (value === scope.value) {\n          return;\n        }\n\n        if (!changed) {\n          changed = [];\n        }\n\n        const oldTempWatchers = watchers.temp.slice();\n        const oldValue = scope.value;\n\n        watchers.temp = [];\n        scope.value = value;\n\n        iterateArray(oldTempWatchers, removeTempWatcher);\n        changed.push({\n          scope,\n          oldValue,\n          value\n        });\n\n        setTimeout(() => {\n          if (!changed) {\n            return;\n          }\n\n          const was = [];\n          const values = [];\n\n          for (let i = changed.length - 1; i >= 0; i--) {\n            const {\n              scope,\n              value,\n              oldValue\n            } = changed[i];\n\n            iterateArray(scope.watchers.perm, (watcher) => {\n              const index = was.indexOf(watcher);\n\n              if (index === -1) {\n                was.push(watcher);\n                values.push({\n                  value,\n                  oldValue\n                });\n              } else {\n                values[index].oldValue = oldValue;\n              }\n            });\n\n            changed.splice(i, 1);\n          }\n\n          changed = null;\n\n          iterateArray(was, (watcher, i) => {\n            const {\n              value,\n              oldValue\n            } = values[i];\n\n            watcher(value, oldValue);\n          });\n        }, 0);\n      }\n    };\n  }));\n}\n\nfunction watchForAllLocals(block, watcher) {\n  iterateObject(block.$$.locals, ({ watchers }) => {\n    watchers.perm.push(watcher);\n  });\n}\n\nfunction watchForAllGlobals(block, watcher) {\n  const {\n    globals,\n    watchersToRemove\n  } = block.$$;\n\n  for (const glob in globals) {\n    /* eslint guard-for-in: 0 */\n    const watchers = globals[glob].watchers.perm;\n\n    watchers.push(watcher);\n    watchersToRemove.push({\n      watcher,\n      watchers\n    });\n  }\n}\n\nfunction watchForAllArgs(block, watcher) {\n  iterateObject(block.$$.args, ({ watchers }) => {\n    watchers.perm.push(watcher);\n  });\n}\n\nfunction calculateArgs(args, argsObject) {\n  iterateArray(keys(argsObject), (arg) => {\n    if (!(arg in args)) {\n      argsObject[arg] = undefined;\n    }\n  });\n\n  for (const arg in args) {\n    argsObject[arg] = args[arg];\n  }\n}\n\nfunction transformRestArgs(args) {\n  return collectFromObject(args, addArgs);\n}\n\nfunction transformRestAttrs(attrs, mixins, mixinDefaultOpts) {\n  return collectFromObject(attrs, (eventualAttrs, value, attr) => {\n    if (D_REST_REGEX.test(attr)) {\n      return assign(eventualAttrs, transformRestAttrs(value, mixins, mixinDefaultOpts));\n    }\n\n    const match = mixinMatch(mixins, attr);\n\n    if (match) {\n      eventualAttrs[attr] = {\n        type: 'mixin',\n        dynamic: true,\n        opts: {\n          value,\n          ...match,\n          ...mixinDefaultOpts\n        },\n        value\n      };\n\n      return;\n    }\n\n    eventualAttrs[attr] = {\n      type: 'attr',\n      value\n    };\n  });\n}\n\nfunction mixinMatch(mixins, attr) {\n  let match;\n\n  for (const name in mixins) {\n    const Mixin = mixins[name];\n    const localMatch = attr.match(Mixin._match);\n\n    if (localMatch) {\n      const argsMatch = localMatch[1];\n      let args;\n\n      if (argsMatch === '') {\n        args = [];\n      } else if (argsMatch) {\n        args = argsMatch.split(COMMA_REGEX);\n      }\n\n      match = {\n        args,\n        comment: localMatch[2],\n        Mixin,\n        name\n      };\n\n      break;\n    }\n  }\n\n  return match;\n}\n\nfunction calculateAttrs(attrs, attrsObject, elem, firstTime) {\n  iterateObject(attrsObject, ({ type, value }, attr) => {\n    if (!attrs[attr]) {\n      if (type === 'attr') {\n        elem.removeAttr(attr);\n      } else {\n        value.$$.remove();\n      }\n\n      delete attrsObject[attr];\n    }\n  });\n\n  const mixins = [];\n\n  for (const attr in attrs) {\n    const {\n      type,\n      dynamic,\n      value,\n      opts\n    } = attrs[attr];\n    let nextType;\n    let nextDynamic;\n    let nextValue;\n\n    if (attrsObject[attr]) {\n      const {\n        type: prevType,\n        value: prevValue\n      } = attrsObject[attr];\n\n      if (type === 'attr') {\n        if (prevType === 'mixin') {\n          prevValue.$$.remove();\n        }\n\n        if (prevValue !== value) {\n          elem.attr(attr, value);\n        }\n\n        nextValue = value;\n      } else {\n        const mixin = prevValue;\n\n        if (prevType === 'attr') {\n          elem.removeAttr(attr);\n        }\n\n        mixin.$$.isDynamic = dynamic;\n\n        if (dynamic) {\n          executeMixinWatchers(mixin, value);\n        } else if (!mixin.$$.evaluated && opts.Mixin.evaluate) {\n          const newValue = mixin.$$.parentScope.$$.evaluate(value, (newValue) => {\n            const {\n              type,\n              dynamic\n            } = attrs[attr];\n\n            if (type === 'mixin' && !dynamic) {\n              executeMixinWatchers(mixin, newValue);\n            }\n          }, mixin);\n\n          mixin.$$.evaluated = true;\n\n          executeMixinWatchers(mixin, newValue);\n        }\n\n        nextValue = mixin;\n      }\n\n      nextType = type;\n      nextDynamic = dynamic;\n    } else {\n      if (type === 'attr') {\n        elem.attr(attr, value);\n\n        nextValue = value;\n      } else {\n        const buildMixin = () => {\n          opts.dynamic = dynamic;\n\n          const mixin = createMixin(opts);\n\n          if (!dynamic && opts.Mixin.evaluate) {\n            const {\n              parentScope,\n              value\n            } = opts;\n            const firstValue = parentScope.$$.evaluate(value, (newValue) => {\n              const {\n                type,\n                dynamic\n              } = attrs[attr];\n\n              if (type === 'mixin' && !dynamic) {\n                executeMixinWatchers(mixin, newValue);\n              }\n            }, mixin);\n\n            mixin.$$.evaluated = true;\n            mixin.$$.value = firstValue;\n          }\n\n          nextValue = mixin;\n\n          return {\n            attr,\n            opts: {\n              type,\n              dynamic,\n              value: mixin\n            }\n          };\n        };\n\n        if (firstTime) {\n          mixins.push(buildMixin);\n        } else {\n          buildMixin();\n        }\n      }\n\n      nextType = type;\n      nextDynamic = dynamic;\n    }\n\n    attrsObject[attr] = {\n      type: nextType,\n      dynamic: nextDynamic,\n      value: nextValue\n    };\n  }\n\n  if (firstTime) {\n    return () => {\n      iterateArray(mixins, (buildMixin) => {\n        const {\n          attr,\n          opts\n        } = buildMixin();\n\n        attrsObject[attr] = opts;\n      });\n    };\n  }\n}\n\nfunction executeMixinWatchers(mixin, value) {\n  const oldValue = mixin.$$.value;\n\n  mixin.$$.value = value;\n\n  iterateArray(mixin.$$.watchers, (watcher) => {\n    watcher(value, oldValue);\n  });\n}\n\nfunction constructMixinRegExp(name) {\n  return new RegExp(`^${ escapeRegex(name) }(?:\\\\(([^\\\\)]*)\\\\))?(?:#([\\\\s\\\\S]*))?$`);\n}\n\nfunction extendBlock(cls) {\n  setProto(cls, Block);\n  setProto(cls.prototype, Block.prototype);\n}\n\nfunction insertTemplates(template, templates) {\n  const { vars, value } = template;\n  const newTemplates = create(null);\n  const newVars = toObjectKeys(vars);\n\n  assign(newTemplates, templates);\n  iterateArray(value, forEachNode);\n\n  function forEachNode({ type, value, children }, index, tree) {\n    if (type === '#comment') {\n      value = value.trim();\n\n      if (newTemplates[value]) {\n        tree[index] = newTemplates[value].value;\n        assign(newVars, toObjectKeys(newTemplates[value].vars));\n      }\n    } else {\n      iterateArray(children, forEachNode);\n    }\n  }\n\n  vars.length = 0;\n  vars.push(...keys(newVars));\n\n  return template;\n}\n\nfunction wrapBlock(block, wrapper) {\n  const returnValue = wrapper(block);\n\n  return isInstanceOf(Block, returnValue)\n    ? returnValue\n    : block;\n}\n\nfunction wrapMixin(mixin, wrapper) {\n  const returnValue = wrapper(mixin);\n\n  return isInstanceOf(Mixin, returnValue)\n    ? returnValue\n    : mixin;\n}\n\nfunction removeWithParentSignal(child) {\n  child.$$.remove(true);\n}\n\nfunction remove(child) {\n  child.$$.remove();\n}\n\nfunction cleanProperty(value, arg, object) {\n  delete object[arg];\n}\n\nfunction removeWatcher({ watcher, watchers }) {\n  removeArrayElem(watchers, watcher);\n}\n\nfunction removeTempWatcher(watcher) {\n  watcher.onRemove();\n  watcher();\n}\n\nfunction addArgs(args, value, arg) {\n  if (D_REST_REGEX.test(arg)) {\n    assign(args, transformRestArgs(value));\n  } else {\n    args[arg] = value;\n  }\n}\n\nexport { Block, Mixin, initApp, removeApp, insertTemplates };\n","/* eslint no-nested-ternary: 0 */\n/* eslint no-negated-condition: 0 */\nexport default typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n","export const {\n  create,\n  keys,\n  getPrototypeOf: getProto\n} = Object;\n\nexport const setProto = Object.setPrototypeOf || ((target, proto) => {\n  /* eslint no-proto: 0 */\n  target.__proto__ = proto;\n});\n"],"names":["collectFromArray","array","callback","initialValue","value","index","findInArray","i","length","iterateArray","removeArrayElem","elem","indexOf","splice","toObjectKeys","addKey","vars","variable","assign","target","objects","arguments","source","key","collectFromObject","object","hasOwnProperty","has","iterateObject","mapObject","newObject","definePrototypeProperties","properties","name","defineProperty","defineFrozenProperties","toStringTag","toString","slice","setToStringTag","tag","Symbol","prototype","isFunction","isNil","isString","escapeRegex","string","replace","regexpSpecialsRegexp","toCamelCase","DASHED_SYMBOL_REGEX","capitalize","toHyphenCase","UPPERCASED_SYMBOL_REGEX","hyphenize","match","toUpperCase","toLowerCase","toElem","isElem","Elem","isHTMLDocument","isElementsCollection","HTML_COLLECTION_REGEX","test","isArray","isValidNode","ELEMENT_REGEX","getName","nodeName","getAttrNS","attr","XML_NS","X_LINK_ATTR_REGEX","closest","X_LINK_NS","createHideStyleNode","head","find","HIDE_CLASS","create","prop","text","addAttr","attrs","addCSSProp","css","property","split","CSS_PROP_VALUE_SEPARATOR_REGEX","addDataAttr","data","hide","ownerDocument","addClass","addNext","add","nextSibling","addParent","parentNode","addPrev","previousSibling","remove","parent","removeChild","show","removeClass","selector","base","document","querySelectorAll","String","registerDBlock","Block","DBlock","this","$$","parentScope","parentParentScope","parentParentTemplate","parentTemplate","children","argsChildren","ownChildren","dBlockName","found","ParentScope","ParentTemplate","dBlocks","elems","template","registerDEach","createBlock","renderSet","_this2","itemsByUIDs","parentElem","scope","itemName","indexName","UID","sortBy","args","newItemsByUIDs","newUIDsCounter","newUIDs","set","filterBy","isArr","iterate","sort","filter","item","uid","evaluate","items","prevBlock","block","shift","insertAfterIt","content","push","opts","_this","undefined","evaluateAndWatch","watchArgs","registerDElements","mixins","watchersToRemove","removeWithParentSignal","removeContent","watchers","watcher","forDElements","child","registerDIf","DIf","Infinity","values","map","cond","if","newValue","Boolean","registerDItem","DItem","registerDSwitch","DSwitch","wasDefault","val","equals","value1","value2","registerDAttr","Mixin","removeAttr","apply","keys","registerDBind","off","on","join","error","registerDClass","classes","newClasses","EMPTY_SPACE_REGEX","cls","registerDElem","DElem","evaluateOnce","registerDHide","registerDNode","DNode","node","registerDOn","DOn","registerDShow","registerDStyle","oldValue","CSS_STYLES_SEPARATOR_REGEX","removeCSS","registerDValue","DValue","type","initialScopeValue","getProp","options","getEvalFunction","currentValue","setProp","initialElemValue","isInitialScopeValueNull","isCheckbox","changeScope","offElemListener","getListenerName","e","offFormListener","forEach","option","selected","getValueForSetting","init","getValueForGetting","hasAttr","inputValue","isRadio","isMultiple","addValue","concat","initApp","html","Error","RootBlock","_vars","_html","removeApp","DwayneRootBlock","registerBuiltIns","proto","register","_match","constructMixinRegExp","Constructor","parentBlock","doc","namespaceURI","SVG_NS","localBlocks","ns","_blocks","blocks","localMixins","_mixins","emptyChildren","emptyAttrs","constructor","dBlockMatch","dBlockArgs","dBlockChildren","dElementsName","NAMED_D_BLOCK_REGEX","blockInstance","err","element","currentAttrs","wasDRest","mixinDefaultOpts","isDRest","D_REST_REGEX","localAttrs","restAttrs","cleanProperty","transformRestAttrs","mixinMatch","createMixins","calculateAttrs","isParentBlock","insertAfter","addContent","insertInStartOfIt","into","Args","globals","locals","newName","constructPrivateScope","scopeValues","privateScope","afterConstruct","afterRender","createMixin","dynamic","comment","mixin","afterUpdate","isInstanceOf","Class","Subclass","isPrototypeOf","removeWatchers","removeWatcher","constructPublicScope","evalMode","getting","temp","changed","oldTempWatchers","removeTempWatcher","was","perm","watchForAllLocals","watchForAllGlobals","glob","watchForAllArgs","calculateArgs","argsObject","arg","transformRestArgs","addArgs","eventualAttrs","localMatch","argsMatch","COMMA_REGEX","attrsObject","firstTime","nextType","nextDynamic","nextValue","prevType","prevValue","isDynamic","evaluated","buildMixin","firstValue","executeMixinWatchers","RegExp","extendBlock","insertTemplates","templates","forEachNode","tree","trim","newTemplates","newVars","wrapBlock","wrapper","returnValue","wrapMixin","onRemove","window","global","self","defineProperties","Object","Array","regexpSpecialCharacters","s","getProto","getPrototypeOf","setProto","setPrototypeOf","__proto__","CSS_IMPORTANT_REGEX","EVENT_REGEX","emptyCollection","includes","list","classList","attributes","getAttributeNS","getAttribute","setAttributeNS","setAttribute","childNodes","collect","is","elements","cb","contains","el","isText","createTextNode","createComment","documentElement","createElementNS","style","getPropertyValue","getPropertyPriority","removeProperty","setProperty","cssText","dataset","event","details","bubbles","cancelable","realDetails","finalEvent","Event","createEvent","initEvent","dispatchEvent","filterFn","hasAttributeNS","hasAttribute","innerHTML","next","insertBefore","appendChild","end","firstChild","matches","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","call","listener","newEvents","allListeners","listeners","addEventListener","removeEventListener","removeListeners","removeListener","removeAttributeNS","removeAttribute","first","method","prev","babelHelpers.get","textContent","condition","_arguments5","toggle","_arguments6","species","body","rootBlocks","rootMixins","blockHooks","mixinHooks","TAG_NAME_REGEX","ATTR_NAME_REGEX","WATCHED_ARG_PREFIX_REGEX","WATCHED_GLOBAL_PREFIX_REGEX","afterElem","originalArgs","childrenBlocks","func","onChange","targetBlock","forDItem","forDEach","onChangeFlag","result","expression","original","onEvalError","localWatchers","newResult","isRemoved","watcherBlock","isParentSignal","beforeRemove","_this7","contentToAdd","notRecursive","contentToMove","after","indexToPut","moveContent","contentToRemove","contentToInsert","moveFlag","tryToAddOrMove","defaultLocals","defaultArgs","localArgs","restArgs","isDElements","hook","warn","reduce","currentReturnValue","wrappers","oldWatcher","_this8","Blocks","_this9","_value","Mixins"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}