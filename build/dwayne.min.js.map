{"version":3,"file":"dwayne.min.js","sources":["../src/utils/array.js","../src/utils/object.js","../src/utils/defineProperty.js","../src/utils/toStringTag.js","../src/utils/is.js","../src/utils/escapeRegex.js","../src/utils/toCase.js","../src/helpers/Elem/addAttr.js","../src/helpers/Elem/addCSSProp.js","../src/helpers/Elem/addDataAttr.js","../src/helpers/Elem/addNext.js","../src/helpers/Elem/addParent.js","../src/helpers/Elem/addPrev.js","../src/helpers/Elem/createHideStyleNode.js","../src/helpers/Elem/getAttrNS.js","../src/helpers/Elem/hide.js","../src/helpers/Elem/isElem.js","../src/helpers/Elem/isElementsCollection.js","../src/helpers/Elem/isHTMLDocument.js","../src/helpers/Elem/isValidNode.js","../src/helpers/Elem/remove.js","../src/helpers/Elem/show.js","../src/helpers/Elem/toElem.js","../src/find.js","../src/helpers/Block/calculateArgs.js","../src/helpers/Block/cleanProperty.js","../src/helpers/Block/constructMixinRegex.js","../src/helpers/Block/mixinMatch.js","../src/helpers/Block/transformRestAttrs.js","../src/helpers/Block/executeMixinWatchers.js","../src/helpers/Block/createMixin.js","../src/helpers/Block/calculateAttrs.js","../src/helpers/Block/constructPrivateScope.js","../src/helpers/Block/removeWatcher.js","../src/helpers/Block/constructPublicScope.js","../src/helpers/Block/createBlock.js","../src/helpers/Block/extendBlock.js","../src/helpers/Block/isInstanceOf.js","../src/helpers/Block/remove.js","../src/helpers/Block/watchForAll.js","../src/helpers/Block/wrap.js","../src/initApp.js","../src/blocks/d-switch.js","../src/mixins/d-style.js","../src/mixins/d-value.js","../src/insertTemplates.js","../src/removeApp.js","../src/global.js","../src/utils/objectStatics.js","../src/constants/index.js","../src/Elem.js","../src/Mixin.js","../src/Block.js","../src/blocks/d-block.js","../src/blocks/d-item.js","../src/blocks/d-each.js","../src/blocks/d-elements.js","../src/blocks/d-if.js","../src/mixins/d-attr.js","../src/mixins/d-bind.js","../src/mixins/d-class.js","../src/mixins/d-elem.js","../src/mixins/d-hide.js","../src/mixins/d-node.js","../src/mixins/d-on.js","../src/mixins/d-show.js","../src/helpers/Block/registerBuiltins.js","../src/elems.js"],"sourcesContent":["export function collectFromArray(array, callback, initialValue = {}) {\n  iterateArray(array, (value, index) => {\n    callback(initialValue, value, index, array);\n  });\n\n  return initialValue;\n}\n\nexport function findInArray(array, callback) {\n  for (let i = 0, length = array.length; i < length; i++) {\n    const value = array[i];\n\n    if (callback(value, i, array)) {\n      return {\n        key: i,\n        value\n      };\n    }\n  }\n}\n\nexport function iterateArray(array, callback) {\n  for (let i = 0, length = array.length; i < length; i++) {\n    callback(array[i], i, array);\n  }\n}\n\nexport function removeArrayElem(array, elem) {\n  const index = array.indexOf(elem);\n\n  if (index !== -1) {\n    array.splice(index, 1);\n  }\n}\n\nexport function toObjectKeys(array) {\n  return collectFromArray(array, addKey);\n}\n\nfunction addKey(vars, variable) {\n  vars[variable] = true;\n}\n","import { iterateArray } from './array';\n\nconst {\n  hasOwnProperty: has\n} = {};\nconst { slice } = [];\n\nexport function assign(target) {\n  iterateArray(arguments, (source, index) => {\n    if (index) {\n      iterateObject(source, (value, key) => {\n        target[key] = value;\n      });\n    }\n  });\n\n  return target;\n}\n\nexport function collectFromObject(object, callback, initialValue = {}) {\n  iterateObject(object, (value, key) => {\n    callback(initialValue, value, key, object);\n  });\n\n  return initialValue;\n}\n\nexport function except(object) {\n  const newObject = {};\n  const paths = arguments::slice(1);\n\n  iterateObject(object, (value, key) => {\n    if (paths.indexOf(key) === -1) {\n      newObject[key] = value;\n    }\n  });\n\n  return newObject;\n}\n\nexport function hasOwnProperty(object, key) {\n  return object::has(key);\n}\n\nexport function iterateObject(object, callback) {\n  for (const key in object) {\n    if (hasOwnProperty(object, key)) {\n      callback(object[key], key, object);\n    }\n  }\n}\n\nexport function mapObject(object, callback) {\n  const newObject = {};\n\n  iterateObject(object, (value, key) => {\n    newObject[key] = callback(value, key, object);\n  });\n\n  return newObject;\n}\n","import { iterateObject } from './object';\n\n/**\n * @function defineProperties\n * @param {Object} target - Target to define properties for.\n * @param {Object} properties - Object with properties needed to be assign to the target.\n * @returns {void}\n * @description Function for defining properties of an object.\n */\nexport const { defineProperties } = Object;\n\nexport function definePrototypeProperties(target, properties) {\n  iterateObject(properties, (value, name) => {\n    Object.defineProperty(target, name, {\n      value,\n      writable: true,\n      enumerable: false,\n      configurable: true\n    });\n  });\n}\n\n/**\n * @function defineFrozenProperties\n * @param {Object} target - Target to define properties for.\n * @param {Object} properties - Object with properties needed to be assign to the target.\n * @returns {void}\n * @description Function for defining frozen properties of an object.\n */\nexport function defineFrozenProperties(target, properties) {\n  iterateObject(properties, (value, name) => {\n    Object.defineProperty(target, name, {\n      value,\n      writable: false,\n      enumerable: false,\n      configurable: false\n    });\n  });\n}\n","import { definePrototypeProperties } from './defineProperty';\n\nconst { Symbol } = global;\nconst { toString } = {};\n\n/**\n * @function toStringTag\n * @param {*} object - Object to get toStringTag of.\n * @returns {String} Cut string.\n * @description Cut \"Type\" string from \"[object Type]\" string that gotten from {}.toString,call(object).\n */\nexport function toStringTag(object) {\n  return object::toString().slice(8, -1);\n}\n\nexport function setToStringTag(object, tag) {\n  if (Symbol && Symbol.toStringTag) {\n    definePrototypeProperties(object.prototype, {\n      [Symbol.toStringTag]: tag\n    });\n  }\n}\n","/**\n * @module helpers/checkTypes\n * @private\n * @mixin\n * @description Exports is<Type> methods.\n */\n\nimport { toStringTag } from './toStringTag';\n\n/**\n * @function isArray\n * @public\n * @param {*} value - Value to check if it is an array.\n * @returns {Boolean} If the argument is an array or not.\n * \n * @example\n * isArray([]);                             // true\n * isArray(0);                              // true\n * isArray(document.querySelectorAll('*')); // false\n */\nexport const { isArray } = Array;\n\n/**\n * @function isFunction\n * @public\n * @param {*} value - Value to check if it is a function.\n * @returns {Boolean} If the argument is a function or not.\n * \n * @example\n * isFunction(() => {});            // true\n * \n * const func = () => {};\n * Object.setPrototypeOf(func, {});\n * isFunction(func);                // true\n */\nexport function isFunction(value) {\n  return toStringTag(value) === 'Function' || typeof value === 'function';\n}\n\n/**\n * @function isNil\n * @public\n * @param {*} value - Value to check if it is null or undefined.\n * @returns {Boolean} If the argument is null or undefined or not.\n *\n * @example\n * isNil(null);      // true\n * isNil(undefined); // true\n * isNil(false);     // false\n */\nexport function isNil(value) {\n  /* eslint eqeqeq: 0 */\n  return value == null;\n}\n\n/**\n * @function isString\n * @public\n * @param {*} value - Value to check if it is a string.\n * @returns {Boolean} If the argument is a string or not.\n *\n * @example\n * isString('0');             // true\n * isString(new String('0')); // true\n */\nexport function isString(value) {\n  return toStringTag(value) === 'String';\n}\n","const regexpSpecialCharacters = [\n  '.',\n  '+', '*', '?',\n  '(', ')',\n  '[', ']',\n  '{', '}',\n  '<', '>',\n  '^', '$',\n  '!',\n  '=',\n  ':',\n  '-',\n  '|',\n  ',',\n  '\\\\'\n];\nconst regexpSpecialsRegexp = new RegExp(\n  regexpSpecialCharacters\n    .map((s) => `\\\\${ s }`)\n    .join('|'),\n  'g'\n);\n\nexport function escapeRegex(string) {\n  return string.replace(regexpSpecialsRegexp, '\\\\$&');\n}\n","const DASHED_SYMBOL_REGEX = /-[a-z]/g;\nconst UPPERCASED_SYMBOL_REGEX = /[A-Z]/g;\n\nexport function toCamelCase(value) {\n  return value.replace(DASHED_SYMBOL_REGEX, capitalize);\n}\n\nexport function toHyphenCase(value) {\n  return value.replace(UPPERCASED_SYMBOL_REGEX, hyphenize);\n}\n\nfunction capitalize(match) {\n  return match[1].toUpperCase();\n}\n\nfunction hyphenize(match) {\n  return `-${ match[0].toLowerCase() }`;\n}\n","export function addAttr(attrs, attr) {\n  attrs[attr.name] = attr.value;\n}\n","import { toCamelCase } from '../../utils';\n\nconst CSS_PROP_VALUE_SEPARATOR_REGEX = /: /;\n\nexport function addCSSProp(css, value) {\n  if (value) {\n    const property = value.split(CSS_PROP_VALUE_SEPARATOR_REGEX);\n\n    css[toCamelCase(property[0])] = property[1];\n  }\n}\n","export function addDataAttr(data, value, key) {\n  data[key] = value;\n}\n","export function addNext(add, elem) {\n  add(elem.nextSibling);\n}\n","export function addParent(add, elem) {\n  add(elem.parentNode);\n}\n","export function addPrev(add, elem) {\n  add(elem.previousSibling);\n}\n","import { HIDE_CLASS } from '../../constants';\n\nexport function createHideStyleNode(head) {\n  const style = head.find(`style#${ HIDE_CLASS }`);\n\n  if (style.length) {\n    return;\n  }\n\n  head\n    .create('style')\n    .prop('id', HIDE_CLASS)\n    .text(`.${ HIDE_CLASS }{display:none !important;}`);\n}\n","import { Elem } from '../../Elem';\n\nconst X_LINK_ATTR_REGEX = /^xlink:\\w/;\nconst XML_NS = 'http://www.w3.org/2000/xmlns/';\nconst X_LINK_NS = 'http://www.w3.org/1999/xlink';\n\nexport function getAttrNS(attr, elem) {\n  if (attr === 'xmlns' || attr === 'xmlns:xlink') {\n    return elem.nodeName === 'SVG'\n      ? XML_NS\n      : null;\n  }\n\n  if (X_LINK_ATTR_REGEX.test(attr)) {\n    return new Elem(elem).closest('svg').length\n      ? X_LINK_NS\n      : null;\n  }\n}\n","import { createHideStyleNode } from './createHideStyleNode';\nimport { HIDE_CLASS } from '../../constants';\nimport { Elem } from '../../Elem';\n\nexport function hide(elem) {\n  createHideStyleNode(new Elem(elem.ownerDocument.head));\n  new Elem(elem).addClass(HIDE_CLASS);\n}\n","import { Elem } from '../../Elem';\n\nexport function isElem(value) {\n  return value instanceof Elem;\n}\n","import { toStringTag, isArray } from '../../utils';\nimport { isElem } from './isElem';\n\nconst HTML_COLLECTION_REGEX = /^(HTMLCollection|NodeList)$/;\n\nexport function isElementsCollection(value) {\n  return (\n    HTML_COLLECTION_REGEX.test(toStringTag(value))\n    || isElem(value)\n    || isArray(value)\n  );\n}\n","import { toStringTag } from '../../utils';\n\nexport function isHTMLDocument(value) {\n  return toStringTag(value) === 'HTMLDocument';\n}\n","import { toStringTag } from '../../utils';\n\nconst ELEMENT_REGEX = /Element$/;\n\nexport function isValidNode(value) {\n  const tag = toStringTag(value);\n\n  return (\n    ELEMENT_REGEX.test(tag)\n    || tag === 'HTMLDocument'\n    || tag === 'Text'\n    || tag === 'DocumentFragment'\n    || tag === 'Comment'\n  );\n}\n","export function remove(elem) {\n  const parent = elem.parentNode;\n\n  if (parent) {\n    parent.removeChild(elem);\n  }\n}\n","import { HIDE_CLASS } from '../../constants';\nimport { Elem } from '../../Elem';\n\nexport function show(elem) {\n  new Elem(elem).removeClass(HIDE_CLASS);\n}\n","import { isElem } from './isElem';\nimport { Elem } from '../../Elem';\n\nexport function toElem(elem) {\n  return isElem(elem)\n    ? elem\n    : new Elem(elem);\n}\n","import { Elem } from './Elem';\n\nconst {\n  document = {}\n} = global;\n\n/**\n * @function find\n * @public\n * @param {String} selector - Selector to find.\n * @param {Element|Node} [base = document] - Base to find in.\n * @returns {Elem} New instance of Elem.\n * @description Synonym for\n * [Document#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Document/querySelectorAll}.\n */\nexport function find(selector, base = document) {\n  return new Elem(base.querySelectorAll(String(selector)));\n}\n","import { iterateArray, keys } from '../../utils';\n\nexport function calculateArgs(args, argsObject) {\n  iterateArray(keys(argsObject), (arg) => {\n    if (!(arg in args)) {\n      argsObject[arg] = undefined;\n    }\n  });\n\n  /* eslint guard-for-in: 0 */\n  for (const arg in args) {\n    argsObject[arg] = args[arg];\n  }\n}\n","export function cleanProperty(value, arg, object) {\n  delete object[arg];\n}\n","import { escapeRegex } from '../../utils';\n\nexport function constructMixinRegex(name) {\n  return new RegExp(`^${ escapeRegex(name) }(?:\\\\(([^\\\\)]*)\\\\))?(?:#([\\\\s\\\\S]*))?$`);\n}\n","const COMMA_REGEX = /,/;\n\nexport function mixinMatch(mixins, attr) {\n  let match;\n\n  /* eslint guard-for-in: 0 */\n  for (const name in mixins) {\n    const Mixin = mixins[name];\n    const localMatch = attr.match(Mixin._match);\n\n    if (localMatch) {\n      const argsMatch = localMatch[1];\n      let args;\n\n      if (argsMatch === '') {\n        args = [];\n      } else if (argsMatch) {\n        args = argsMatch.split(COMMA_REGEX);\n      }\n\n      match = {\n        args,\n        comment: localMatch[2],\n        Mixin,\n        name\n      };\n\n      break;\n    }\n  }\n\n  return match;\n}\n","import { collectFromObject, assign } from '../../utils';\nimport { D_REST_REGEX } from '../../constants';\nimport { mixinMatch } from './mixinMatch';\n\nexport function transformRestAttrs(attrs, mixins, mixinDefaultOpts) {\n  return collectFromObject(attrs, (eventualAttrs, value, attr) => {\n    if (D_REST_REGEX.test(attr)) {\n      return assign(eventualAttrs, transformRestAttrs(value, mixins, mixinDefaultOpts));\n    }\n\n    const match = mixinMatch(mixins, attr);\n\n    if (match) {\n      eventualAttrs[attr] = {\n        type: 'mixin',\n        dynamic: true,\n        opts: {\n          value,\n          ...match,\n          ...mixinDefaultOpts\n        },\n        value\n      };\n\n      return;\n    }\n\n    eventualAttrs[attr] = {\n      type: 'attr',\n      value\n    };\n  });\n}\n\nexport function transformRestArgs(args) {\n  return collectFromObject(args, addArgs);\n}\n\nfunction addArgs(args, value, arg) {\n  if (D_REST_REGEX.test(arg)) {\n    assign(args, transformRestArgs(value));\n  } else {\n    args[arg] = value;\n  }\n}\n","import { iterateArray } from '../../utils';\n\nexport function executeMixinWatchers(mixin, value) {\n  const oldValue = mixin.$$.value;\n\n  mixin.$$.value = value;\n\n  iterateArray(mixin.$$.watchers, (watcher) => {\n    watcher(value, oldValue);\n  });\n}\n","export function createMixin({\n  name, Mixin, dynamic,\n  value, args, comment, elem,\n  parentBlock, parentScope, parentTemplate\n}) {\n  const mixin = new Mixin({\n    name,\n    value,\n    dynamic,\n    args,\n    comment,\n    elem,\n    parentBlock,\n    parentScope,\n    parentTemplate\n  });\n\n  if (Mixin.evaluate) {\n    const value = mixin.value = mixin.evaluate((newValue, oldValue) => {\n      mixin.value = newValue;\n\n      try {\n        mixin.afterUpdate(newValue, oldValue);\n      } catch (err) {\n        console.error(`Uncaught error in ${ name }#afterUpdate:`, err);\n      }\n    });\n\n    mixin.afterUpdate(value);\n  }\n\n  return mixin;\n}\n","import { iterateObject, iterateArray } from '../../utils';\nimport { executeMixinWatchers } from './executeMixinWatchers';\nimport { createMixin } from './createMixin';\n\nexport function calculateAttrs(attrs, attrsObject, elem, firstTime) {\n  iterateObject(attrsObject, ({ type, value }, attr) => {\n    if (!attrs[attr]) {\n      if (type === 'attr') {\n        elem.removeAttr(attr);\n      } else {\n        value.$$.remove();\n      }\n\n      delete attrsObject[attr];\n    }\n  });\n\n  const mixins = [];\n\n  /* eslint guard-for-in: 0 */\n  for (const attr in attrs) {\n    const {\n      type,\n      dynamic,\n      value,\n      opts\n    } = attrs[attr];\n    let nextType;\n    let nextDynamic;\n    let nextValue;\n\n    if (attrsObject[attr]) {\n      const {\n        type: prevType,\n        value: prevValue\n      } = attrsObject[attr];\n\n      if (type === 'attr') {\n        if (prevType === 'mixin') {\n          prevValue.$$.remove();\n        }\n\n        if (prevValue !== value) {\n          elem.attr(attr, value);\n        }\n\n        nextValue = value;\n      } else {\n        const mixin = prevValue;\n\n        if (prevType === 'attr') {\n          elem.removeAttr(attr);\n        }\n\n        mixin.$$.isDynamic = dynamic;\n\n        if (dynamic) {\n          executeMixinWatchers(mixin, value);\n        } else if (!mixin.$$.evaluated && opts.Mixin.evaluate) {\n          const newValue = mixin.$$.parentScope.$$.evaluate(value, (newValue) => {\n            const {\n              type,\n              dynamic\n            } = attrs[attr];\n\n            if (type === 'mixin' && !dynamic) {\n              executeMixinWatchers(mixin, newValue);\n            }\n          }, mixin);\n\n          mixin.$$.evaluated = true;\n\n          executeMixinWatchers(mixin, newValue);\n        }\n\n        nextValue = mixin;\n      }\n\n      nextType = type;\n      nextDynamic = dynamic;\n    } else {\n      if (type === 'attr') {\n        elem.attr(attr, value);\n\n        nextValue = value;\n      } else {\n        const buildMixin = () => {\n          opts.dynamic = dynamic;\n\n          const mixin = createMixin(opts);\n\n          if (!dynamic && opts.Mixin.evaluate) {\n            const {\n              parentScope,\n              value\n            } = opts;\n            const firstValue = parentScope.$$.evaluate(value, (newValue) => {\n              const {\n                type,\n                dynamic\n              } = attrs[attr];\n\n              if (type === 'mixin' && !dynamic) {\n                executeMixinWatchers(mixin, newValue);\n              }\n            }, mixin);\n\n            mixin.$$.evaluated = true;\n            mixin.$$.value = firstValue;\n          }\n\n          nextValue = mixin;\n\n          return {\n            attr,\n            opts: {\n              type,\n              dynamic,\n              value: mixin\n            }\n          };\n        };\n\n        if (firstTime) {\n          mixins.push(buildMixin);\n        } else {\n          buildMixin();\n        }\n      }\n\n      nextType = type;\n      nextDynamic = dynamic;\n    }\n\n    attrsObject[attr] = {\n      type: nextType,\n      dynamic: nextDynamic,\n      value: nextValue\n    };\n  }\n\n  if (firstTime) {\n    return () => {\n      iterateArray(mixins, (buildMixin) => {\n        const {\n          attr,\n          opts\n        } = buildMixin();\n\n        attrsObject[attr] = opts;\n      });\n    };\n  }\n}\n","import { create, collectFromObject } from '../../utils';\n\nexport function constructPrivateScope(object, type, parentScope) {\n  let scope = {};\n\n  if (type === 'globals') {\n    scope = create(\n      parentScope\n        ? parentScope.$$.globals\n        : null\n    );\n  }\n\n  return collectFromObject(object, (scope, value, key) => {\n    scope[key] = {\n      value,\n      watchers: {\n        temp: [],\n        perm: []\n      }\n    };\n  }, scope);\n}\n","import { removeArrayElem, iterateArray } from '../../utils';\n\nexport function removeTempWatcher(watcher) {\n  watcher.onRemove();\n  watcher();\n}\n\nexport function removeWatchers(watchersToRemove) {\n  iterateArray(watchersToRemove, removeWatcher);\n}\n\nfunction removeWatcher({ watcher, watchers }) {\n  removeArrayElem(watchers, watcher);\n}\n","import { defineProperties, mapObject, iterateArray } from '../../utils';\nimport { Scope } from '../../constants';\nimport { removeTempWatcher } from './removeWatcher';\n\nlet changed;\n\nexport function constructPublicScope(scope, scopeValues, privateScope) {\n  defineProperties(scope, mapObject(scopeValues, (value, key) => {\n    const scope = privateScope[key];\n    const { watchers } = scope;\n\n    return {\n      configurable: false,\n      enumerable: true,\n      get() {\n        if (Scope.evalMode) {\n          if (Scope.gettingVars.indexOf(watchers.temp) === -1) {\n            Scope.gettingVars.push(watchers.temp);\n          }\n        }\n\n        return scope.value;\n      },\n      set(value) {\n        if (value === scope.value) {\n          return;\n        }\n\n        if (!changed) {\n          changed = [];\n        }\n\n        const oldTempWatchers = watchers.temp.slice();\n        const oldValue = scope.value;\n\n        watchers.temp = [];\n        scope.value = value;\n\n        iterateArray(oldTempWatchers, removeTempWatcher);\n        changed.push({\n          scope,\n          oldValue,\n          value\n        });\n\n        setTimeout(() => {\n          if (!changed) {\n            return;\n          }\n\n          const was = [];\n          const values = [];\n\n          for (let i = changed.length - 1; i >= 0; i--) {\n            const {\n              scope,\n              value,\n              oldValue\n            } = changed[i];\n\n            iterateArray(scope.watchers.perm, (watcher) => {\n              const index = was.indexOf(watcher);\n\n              if (index === -1) {\n                was.push(watcher);\n                values.push({\n                  value,\n                  oldValue\n                });\n              } else {\n                values[index].oldValue = oldValue;\n              }\n            });\n\n            changed.splice(i, 1);\n          }\n\n          changed = null;\n\n          iterateArray(was, (watcher, i) => {\n            const {\n              value,\n              oldValue\n            } = values[i];\n\n            watcher(value, oldValue);\n          });\n        }, 0);\n      }\n    };\n  }));\n}\n","import {\n  except, create, assign,\n  iterateObject, iterateArray,\n  isNil\n} from '../../utils';\nimport { Elem } from '../../Elem';\nimport {\n  SVG_NS, D_REST_REGEX\n} from '../../constants';\nimport { cleanProperty } from './cleanProperty';\nimport { transformRestAttrs } from './transformRestAttrs';\nimport { calculateAttrs } from './calculateAttrs';\nimport { mixinMatch } from './mixinMatch';\nimport { constructPrivateScope } from './constructPrivateScope';\nimport { constructPublicScope } from './constructPublicScope';\nimport { Block } from '../../Block';\n\nconst NAMED_D_BLOCK_REGEX = /^d-block:([\\s\\S]+)$/;\n\nexport function createBlock({ node, Constructor, parent, parentElem, parentBlock, parentScope, parentTemplate, prevBlock }) {\n  const doc = new Elem(parentElem[0].ownerDocument);\n  const elem = parentElem[0].namespaceURI === SVG_NS\n    ? doc.create('svg')\n    : doc;\n  const localBlocks = parentTemplate ? parentTemplate.$$.ns._blocks : Block._blocks;\n  const localMixins = parentTemplate ? parentTemplate.$$.ns._mixins : Block._mixins;\n  let children = node.children = node.children || [];\n  let args = node.attrs = node.attrs || {};\n  let name = node.name || 'UnknownBlock';\n  let constructor = Constructor || (node.name && localBlocks[node.name]);\n  let dBlockMatch;\n  let dBlockName;\n  let dBlockArgs;\n  let dBlockChildren;\n  let dElementsName;\n  let dElementsConstructor;\n\n  if (name === 'd-block' && args.name) {\n    name = 'd-elements';\n    constructor = localBlocks[name];\n    dElementsName = args.name;\n    dBlockArgs = except(args, 'name');\n    dBlockChildren = children;\n    children = [];\n    args = {};\n  } else if (name === 'd-block' && args.Constructor) {\n    name = 'UnknownBlock';\n    constructor = localBlocks[name];\n    dElementsConstructor = args.Constructor;\n    dBlockArgs = except(args, 'Constructor');\n    dBlockChildren = children;\n    children = [];\n    args = {};\n  } else if ((dBlockMatch = name.match(NAMED_D_BLOCK_REGEX)) || name === 'd-block') {\n    constructor = Block._blocks['d-block'];\n    dBlockName = dBlockMatch ? dBlockMatch[1] : null;\n  }\n\n  let blockInstance;\n\n  if (constructor) {\n    try {\n      blockInstance = new constructor({\n        name,\n        args,\n        dBlockName,\n        children,\n        parent,\n        parentElem,\n        parentBlock,\n        parentScope,\n        parentTemplate,\n        prevBlock\n      });\n    } catch (err) {\n      console.error(`Uncaught error in new ${ name }:`, err);\n      constructor = null;\n    }\n  }\n\n  if (!constructor) {\n    const {\n      value,\n      children\n    } = node;\n\n    const element = elem.create(name);\n    const currentAttrs = create(null);\n    let attrs = create(null);\n    let wasDRest;\n    const mixinDefaultOpts = {\n      elem: element,\n      parentBlock,\n      parentScope,\n      parentTemplate\n    };\n\n    iterateObject(args, (value, attr) => {\n      const isDRest = D_REST_REGEX.test(attr);\n      const localAttrs = isDRest || wasDRest\n        ? create(attrs)\n        : attrs;\n\n      attrs = localAttrs;\n\n      if (isDRest) {\n        const restAttrs = parentScope.$$.evaluate(value, (value) => {\n          setTimeout(() => {\n            iterateObject(localAttrs, cleanProperty);\n            assign(localAttrs, transformRestAttrs(\n              value, localMixins, mixinDefaultOpts\n            ));\n            calculateAttrs(attrs, currentAttrs, element, false);\n          }, 0);\n        }, parentBlock);\n\n        wasDRest = true;\n\n        return assign(localAttrs, transformRestAttrs(\n          restAttrs, localMixins, mixinDefaultOpts\n        ));\n      }\n\n      const match = mixinMatch(localMixins, attr);\n\n      wasDRest = false;\n\n      if (match) {\n        if (value === true) {\n          value = 'true';\n        }\n\n        localAttrs[attr] = {\n          type: 'mixin',\n          dynamic: false,\n          opts: {\n            value,\n            ...match,\n            ...mixinDefaultOpts\n          },\n          value\n        };\n\n        return;\n      }\n\n      localAttrs[attr] = {\n        type: 'attr',\n        value: parentScope.$$.evaluate(value, (value) => {\n          localAttrs[attr] = {\n            type: 'attr',\n            value\n          };\n          calculateAttrs(attrs, currentAttrs, element, false);\n        }, parentBlock)\n      };\n    });\n\n    const createMixins = calculateAttrs(attrs, currentAttrs, element, true);\n\n    if (name === '#comment') {\n      element.text(value);\n    }\n\n    if (name === '#text') {\n      let text = parentScope.$$.evaluate(value, (value) => {\n        if (isNil(value)) {\n          value = '';\n        }\n\n        element.text(`${ value }`);\n      }, parentBlock);\n\n      if (isNil(text)) {\n        text = '';\n      }\n\n      element.text(`${ text }`);\n    }\n\n    if (children) {\n      const parentElem = name === 'template'\n        ? new Elem(element[0].content)\n        : element;\n      let prevBlock;\n\n      iterateArray(children, (child) => {\n        prevBlock = createBlock({\n          node: child,\n          parent: parentElem,\n          parentElem,\n          parentBlock,\n          parentScope,\n          parentTemplate,\n          prevBlock\n        });\n      });\n    }\n\n    const isParentBlock = parent instanceof Block;\n\n    if (prevBlock instanceof Block) {\n      prevBlock.$$.insertAfterIt(element, false);\n    } else if (prevBlock) {\n      element.insertAfter(prevBlock);\n\n      if (isParentBlock) {\n        parent.$$.addContent(element);\n      }\n    } else if (isParentBlock) {\n      parent.$$.insertInStartOfIt(element, false);\n    } else {\n      element.into(parentElem, false);\n    }\n\n    createMixins();\n\n    return element;\n  }\n\n  const {\n    $$,\n    args: Args,\n    globals,\n    ...locals\n  } = blockInstance;\n\n  if (dElementsName) {\n    node = {\n      attrs: dBlockArgs,\n      children: dBlockChildren\n    };\n    node.name = parentScope.$$.evaluate(dElementsName, (newName) => {\n      node.name = newName;\n\n      Args.value = [node];\n    }, blockInstance, true);\n\n    Args.value = [node];\n    Args.parentScope = parentScope;\n    Args.parentTemplate = parentTemplate;\n  }\n\n  if (dElementsConstructor) {\n    node = {\n      name,\n      attrs: dBlockArgs,\n      children: dBlockChildren\n    };\n\n    Args.Constructor = parentScope.$$.evaluate(dElementsConstructor, (newConstructor) => {\n      Args.Constructor = newConstructor;\n      Args.value = [node];\n    }, blockInstance, true);\n    Args.value = [node];\n    Args.parentScope = parentScope;\n    Args.parentTemplate = parentTemplate;\n  }\n\n  const html = name === 'd-elements'\n    ? Args.value || []\n    : constructor._html;\n\n  $$.args = constructPrivateScope(Args);\n  $$.locals = constructPrivateScope(locals);\n  $$.globals = constructPrivateScope(globals, 'globals', parentScope);\n\n  if (name === '#d-item') {\n    const scopeValues = {\n      [node.itemName]: node.item,\n      [node.indexName]: node.index\n    };\n    const scope = parentScope.$$.name === '#d-item'\n      ? parentScope.$$.scope\n      : parentScope;\n\n    $$.ns = parentScope.$$.ns;\n    $$.privateScope = constructPrivateScope(scopeValues);\n    constructPublicScope($$.scope = create(scope), scopeValues, $$.privateScope);\n  }\n\n  if (name === 'd-each') {\n    $$.scope = create(parentScope.$$.name === '#d-item' ? parentScope.$$.scope : parentScope, {\n      [Args.item || '$item']: {\n        value: null,\n        writable: true\n      },\n      [Args.index || '$index']: {\n        value: null,\n        writable: true\n      }\n    });\n  }\n\n  constructPublicScope(Args, Args, $$.args);\n  constructPublicScope(globals, globals, $$.globals);\n  constructPublicScope(blockInstance, locals, $$.locals);\n\n  try {\n    blockInstance.afterConstruct();\n  } catch (err) {\n    console.error(`Uncaught error in ${ name }#afterConstruct:`, err);\n  }\n\n  prevBlock = undefined;\n  parentScope = name === 'd-elements'\n    ? Args.parentScope\n    : blockInstance;\n  parentTemplate = name === 'd-elements'\n    ? Args.parentTemplate\n    : blockInstance;\n\n  iterateArray(html, (child) => {\n    prevBlock = createBlock({\n      node: child,\n      parent: blockInstance,\n      parentElem,\n      parentBlock: blockInstance,\n      parentScope,\n      parentTemplate,\n      prevBlock\n    });\n  });\n\n  blockInstance.$$.isRendered = true;\n\n  try {\n    blockInstance.afterRender();\n  } catch (err) {\n    console.error(`Uncaught error in ${ name }#afterRender:`, err);\n  }\n\n  return blockInstance;\n}\n","import { setProto } from '../../utils';\nimport { Block } from '../../Block';\n\nexport function extendBlock(cls) {\n  setProto(cls, Block);\n  setProto(cls.prototype, Block.prototype);\n}\n","const { isPrototypeOf } = {};\n\nexport function isInstanceOf(Class, Subclass) {\n  return Class::isPrototypeOf(Subclass) && Class.prototype::isPrototypeOf(Subclass.prototype);\n}\n","export function removeWithParentSignal(child) {\n  child.$$.remove(true);\n}\n\nexport function remove(child) {\n  child.$$.remove();\n}\n","import { iterateObject } from '../../utils';\n\nexport function watchForAllLocals(block, watcher) {\n  iterateObject(block.$$.locals, ({ watchers }) => {\n    watchers.perm.push(watcher);\n  });\n}\n\nexport function watchForAllGlobals(block, watcher) {\n  const {\n    globals,\n    watchersToRemove\n  } = block.$$;\n\n  for (const glob in globals) {\n    /* eslint guard-for-in: 0 */\n    const watchers = globals[glob].watchers.perm;\n\n    watchers.push(watcher);\n    watchersToRemove.push({\n      watcher,\n      watchers\n    });\n  }\n}\n\nexport function watchForAllArgs(block, watcher) {\n  iterateObject(block.$$.args, ({ watchers }) => {\n    watchers.perm.push(watcher);\n  });\n}\n","import { isInstanceOf } from './isInstanceOf';\nimport { Block } from '../../Block';\nimport { Mixin } from '../../Mixin';\n\nexport function wrapBlock(block, wrapper) {\n  const returnValue = wrapper(block);\n\n  return isInstanceOf(Block, returnValue)\n    ? returnValue\n    : block;\n}\n\nexport function wrapMixin(mixin, wrapper) {\n  const returnValue = wrapper(mixin);\n\n  return isInstanceOf(Mixin, returnValue)\n    ? returnValue\n    : mixin;\n}\n","import { isArray } from './utils';\nimport { createBlock } from './helpers/Block';\nimport { Block } from './Block';\nimport { Elem } from './Elem';\n\nexport function initApp(html, container) {\n  const parentElem = new Elem(container).elem(0);\n\n  if (!parentElem.length) {\n    throw new Error('No valid element to insert the app into was given! (initApp)');\n  }\n\n  if (parentElem.prop('DwayneRootBlock')) {\n    throw new Error('There already exists a Dwayne app inside the given element! (initApp)');\n  }\n\n  if (isArray(html)) {\n    html = {\n      vars: [],\n      value: html\n    };\n  }\n\n  class RootBlock extends Block {\n    static _vars = html.vars;\n    static _html = html.value\n  }\n\n  const block = createBlock({\n    node: {\n      name: '#RootBlock'\n    },\n    Constructor: RootBlock,\n    parent: parentElem,\n    parentElem\n  });\n\n  parentElem\n    .prop('DwayneRootBlock', block)\n    .attr('dwayne-root', '');\n}\n","import { collectFromArray, findInArray, iterateArray } from '../utils';\nimport { Block } from '../Block';\nimport { rootBlocks } from '../constants';\n\nconst watchArgs = js`args.value`;\n\nrootBlocks['d-switch'] = class DSwitch extends Block {\n  static template = html`\n    <d-elements\n      value=\"{elems}\"\n      parentScope=\"{$$.parentScope}\"\n      parentTemplate=\"{$$.parentTemplate}\"\n    />\n  `;\n\n  index = Infinity;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      $$: {\n        htmlChildren,\n        parentScope\n      },\n      args,\n      args: { value }\n    } = this;\n    let wasDefault;\n\n    this.values = collectFromArray(htmlChildren, (values, child, i) => {\n      const {\n        name,\n        attrs,\n        children\n      } = child;\n      let val = attrs.if;\n\n      if (wasDefault) {\n        return;\n      }\n\n      if (name !== 'd-case' && name !== 'd-default') {\n        return;\n      }\n\n      if (name === 'd-default') {\n        wasDefault = true;\n      }\n\n      if (name === 'd-default') {\n        val = value;\n      } else if (val) {\n        val = parentScope.$$.evaluate(val, (newValue) => {\n          if (equals(this.values[i].value, newValue)) {\n            return;\n          }\n\n          this.values[i].value = newValue;\n\n          if (i > this.index) {\n            return;\n          }\n\n          if (i < this.index) {\n            this.index = i;\n            this.elems = children;\n\n            return;\n          }\n\n          const found = findInArray(this.values, ({ value }) => (\n            equals(value, args.value)\n          ));\n\n          if (found) {\n            this.index = found.key;\n            this.elems = found.value.children;\n          } else {\n            this.index = Infinity;\n            this.elems = null;\n          }\n        }, this);\n      } else {\n        val = undefined;\n      }\n\n      if (equals(val, value) && this.index === Infinity) {\n        this.index = i;\n        this.elems = children;\n      }\n\n      values.push({\n        name,\n        children,\n        value: val\n      });\n    }, []);\n  }\n\n  afterConstruct() {\n    this.evaluate(watchArgs, () => {\n      const {\n        value: newValue\n      } = this.args;\n\n      this.index = Infinity;\n\n      iterateArray(this.values, ({ name, value, children }, i) => {\n        const val = name === 'd-default'\n          ? newValue\n          : value;\n\n        if (equals(val, newValue) && this.index === Infinity) {\n          this.index = i;\n          this.elems = children;\n        }\n      });\n\n      if (this.index === Infinity) {\n        this.elems = null;\n      }\n    });\n  }\n};\n\nfunction equals(value1, value2) {\n  return value1 === value2;\n}\n","import {\n  isString, iterateObject, keys,\n  collectFromObject, collectFromArray\n} from '../utils';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nconst CSS_STYLES_SEPARATOR_REGEX = /; ?/;\n\nrootMixins['d-style'] = class DStyle extends Mixin {\n  css = {};\n\n  afterUpdate(newValue, oldValue) {\n    const {\n      elem,\n      args,\n      css\n    } = this;\n\n    if (args) {\n      newValue = collectFromObject(args, (css, prop) => {\n        css[prop] = newValue;\n      });\n    }\n\n    if (isString(newValue)) {\n      newValue = collectFromArray(\n        newValue\n          .split(CSS_STYLES_SEPARATOR_REGEX)\n          .filter(Boolean),\n        addCSSProp\n      );\n    }\n\n    iterateObject(css, (value, prop) => {\n      if (!newValue[prop]) {\n        elem.removeCSS(prop);\n      }\n    });\n    elem.css(newValue);\n\n    this.css = newValue;\n  }\n\n  beforeRemove() {\n    const {\n      elem,\n      css\n    } = this;\n\n    elem.removeCSS.apply(elem, keys(css));\n  }\n};\n\nfunction addCSSProp(css, item) {\n  const [prop, value] = item;\n\n  css[prop] = value;\n}\n","import {\n  isArray, isFunction, isNil,\n  collectFromArray\n} from '../utils';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-value'] = class DValue extends Mixin {\n  static evaluate = false;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      args,\n      parentTemplate,\n      elem,\n      node\n    } = this;\n    const name = elem.name();\n    const type = elem.prop('type');\n    const value = this.evaluate();\n    let initialScopeValue = null;\n\n    this.prop = getProp(name, type, elem);\n    this.name = name;\n    this.type = type;\n    this.value = value;\n    this.options = elem.find('option');\n    this.scope = parentTemplate;\n\n    if (args) {\n      this.name = args[0];\n      this.scope = value instanceof Block\n        ? value\n        : parentTemplate;\n    }\n\n    if (!isFunction(value)) {\n      initialScopeValue = this.scope.$$.evaluate(getEvalFunction(value), (newValue) => {\n        if (this.currentValue !== newValue) {\n          this.currentValue = newValue;\n          this.setProp(newValue);\n        }\n      }, this);\n    }\n\n    const initialElemValue = this.getProp(initialScopeValue, true);\n    const isInitialScopeValueNull = isNil(initialScopeValue);\n    const isCheckbox = type === 'checkbox';\n    const changeScope = () => {\n      this.currentValue = this.getProp(this.currentValue);\n      this.changeScope();\n    };\n\n    if (isInitialScopeValueNull || isCheckbox) {\n      this.currentValue = initialElemValue;\n      this.changeScope();\n\n      if (!isInitialScopeValueNull && isCheckbox) {\n        this.setProp(initialScopeValue);\n      }\n    } else {\n      this.currentValue = initialScopeValue;\n      this.setProp(initialScopeValue);\n    }\n\n    this.offElemListener = elem.on(getListenerName(name, type), (e) => {\n      if (e.target === node) {\n        changeScope();\n      }\n    });\n    this.offFormListener = elem.closest('form').on('reset', () => {\n      setTimeout(changeScope, 0);\n    });\n  }\n\n  changeScope() {\n    const {\n      scope,\n      value,\n      currentValue\n    } = this;\n\n    if (isFunction(value)) {\n      value(currentValue);\n    } else {\n      scope[value] = currentValue;\n    }\n  }\n\n  setProp(value) {\n    const {\n      elem,\n      name,\n      prop,\n      type,\n      node,\n      options\n    } = this;\n\n    if (prop === 'text') {\n      elem.text(value);\n    } else if (prop === 'multiple-select') {\n      options.forEach((option) => {\n        option.selected = value.indexOf(option.value) !== -1;\n      });\n    } else {\n      elem.prop(prop, getValueForSetting(name, value, type, node.value));\n    }\n  }\n\n  getProp(values, init) {\n    const {\n      elem,\n      name,\n      prop,\n      type,\n      node,\n      options\n    } = this;\n\n    return prop === 'text'\n      ? elem.text()\n      : getValueForGetting(name, elem.prop(prop), type, node.value, values, options, init, prop === 'multiple-select');\n  }\n\n  beforeRemove() {\n    this.offElemListener();\n    this.offFormListener();\n  }\n};\n\nfunction getProp(name, type, elem) {\n  switch (name) {\n    case 'select': {\n      return elem.hasAttr('multiple')\n        ? 'multiple-select'\n        : 'value';\n    }\n\n    case 'input': {\n      if (type === 'file') {\n        return 'files';\n      }\n\n      return type === 'radio' || type === 'checkbox'\n        ? 'checked'\n        : 'value';\n    }\n\n    default: {\n      return elem.hasAttr('contentEditable')\n        ? 'text'\n        : 'value';\n    }\n  }\n}\n\nfunction getValueForSetting(name, value, type, inputValue) {\n  if (name !== 'input') {\n    return value;\n  }\n\n  const isRadio = type === 'radio';\n\n  if (!isRadio && type !== 'checkbox') {\n    return value;\n  }\n\n  return isRadio\n    ? value === inputValue\n    : value.indexOf(inputValue) !== -1;\n}\n\nfunction getValueForGetting(name, value, type, inputValue, values, options, init, isMultiple) {\n  switch (name) {\n    case 'select': {\n      if (!isMultiple) {\n        return value;\n      }\n\n      return collectFromArray(options, addValue, []);\n    }\n\n    case 'input': {\n      if (type !== 'radio' && type !== 'checkbox') {\n        return value;\n      }\n\n      if (type === 'radio') {\n        return value\n          ? inputValue\n          : null;\n      }\n\n      if (!value && init) {\n        return values;\n      }\n\n      if (value) {\n        if (values) {\n          return values.indexOf(inputValue) === -1\n            ? values.concat(inputValue)\n            : values;\n        }\n\n        return [inputValue];\n      }\n\n      if (!isArray(values)) {\n        return [];\n      }\n\n      const index = values.indexOf(inputValue);\n\n      if (index !== -1) {\n        return [\n          ...values.slice(0, index),\n          ...values.slice(index + 1)\n        ];\n      }\n\n      return values;\n    }\n\n    default: {\n      return value;\n    }\n  }\n}\n\nfunction getListenerName(name, type) {\n  switch (name) {\n    case 'select': {\n      return 'change';\n    }\n\n    case 'input': {\n      return (\n        type === 'radio'\n        || type === 'checkbox'\n        || type === 'color'\n        || type === 'file'\n      )\n        ? 'change'\n        : 'change input';\n    }\n\n    default: {\n      return 'input';\n    }\n  }\n}\n\nfunction getEvalFunction(value) {\n  return (scope) => scope[value];\n}\n\nfunction addValue(values, { selected, value }) {\n  if (selected && values.indexOf(value) === -1) {\n    values.push(value);\n  }\n}\n","import {\n  toObjectKeys, iterateArray,\n  assign, keys, create\n} from './utils';\n\nexport function insertTemplates(template, templates) {\n  const {\n    vars,\n    value\n  } = template;\n  const newTemplates = create(null);\n  const newVars = toObjectKeys(vars);\n\n  assign(newTemplates, templates);\n  iterateArray(value, forEachNode);\n\n  function forEachNode({ type, value, children }, index, tree) {\n    if (type === '#comment') {\n      value = value.trim();\n\n      if (newTemplates[value]) {\n        tree[index] = newTemplates[value].value;\n        assign(newVars, toObjectKeys(newTemplates[value].vars));\n      }\n    } else {\n      iterateArray(children, forEachNode);\n    }\n  }\n\n  vars.length = 0;\n  vars.push(...keys(newVars));\n\n  return template;\n}\n","import { Block } from './Block';\nimport { Elem } from './Elem';\n\nexport function removeApp(node) {\n  const elem = new Elem(node);\n\n  if (!elem.length) {\n    throw new Error('No valid element to remove the app from was given! (removeApp)');\n  }\n\n  node = elem[0];\n\n  const { DwayneRootBlock } = node;\n\n  if (!(DwayneRootBlock instanceof Block)) {\n    throw new Error('No app registered inside the given element! (removeApp)');\n  }\n\n  DwayneRootBlock.$$.remove();\n  elem.removeAttr('dwayne-root');\n\n  delete node.DwayneRootBlock;\n}\n","/* eslint no-nested-ternary: 0 */\n/* eslint no-negated-condition: 0 */\nexport default typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n","export const {\n  create,\n  keys,\n  getPrototypeOf: getProto\n} = Object;\n\nexport const setProto = Object.setPrototypeOf || ((target, proto) => {\n  /* eslint no-proto: 0 */\n  target.__proto__ = proto;\n});\n","import { create } from '../utils/objectStatics';\n\nexport const HIDE_CLASS = '__dwayne-hidden__';\nexport const SVG_NS = 'http://www.w3.org/2000/svg';\nexport const D_REST_REGEX = /^d-rest(?:#|$)/;\n\nexport const rootBlocks = create(null);\nexport const rootMixins = create(null);\nexport const Scope = {\n  evalMode: false,\n  gettingVars: []\n};\n","import {\n  isNil, isString, assign,\n  definePrototypeProperties, defineProperties,\n  collectFromArray, collectFromObject,\n  iterateArray, iterateObject,\n  toHyphenCase, toStringTag,\n  setToStringTag, setProto\n} from './utils';\nimport {\n  isHTMLDocument, isValidNode,\n  addAttr, addCSSProp, addDataAttr,\n  addNext, addParent, addPrev,\n  toElem, isElementsCollection,\n  getAttrNS, hide, show, remove\n} from './helpers/Elem';\nimport { SVG_NS } from './constants';\nimport { find } from './find';\n\n/**\n * @typedef {String} ElemEventString\n * @public\n * @description A string containing events separated by a comma with zero or more spaces or just spaces.\n */\n\n/**\n * @callback ElemListener\n * @public\n * @param {Event} e - Fired event.\n * @param {Element} elem - Element on which the listener was called.\n * @param {Number} index - Index of the element on which the listener was called.\n */\n\n/**\n * @callback ElemRemoveListeners\n * @public\n * @param {...ElemEventString} events - If at least one argument present only removes event listeners specified\n * by the events in the arguments.\n */\n\n/**\n * @callback IterationCallback\n * @public\n * @param {Element|Node} node - Iteration element.\n * @param {Number} index - Iteration index.\n * @param {Elem} elem - Initial set.\n */\n\nconst { Symbol } = global;\nconst EVENT_SEPARATOR_REGEX = /(?:,| ) */;\nconst CSS_STYLES_SEPARATOR_REGEX = /; ?/;\nconst CSS_IMPORTANT_REGEX = / ?!important$/;\nconst EVENT_REGEX = /Event$/;\nconst XHTML_NS = 'http://www.w3.org/1999/xhtml';\nconst emptyCollection = [];\n\n/**\n * @class Elem\n * @extends Array\n * @public\n * @param {Element|Element[]} [elem = []] - An element or an array of elements to wrap.\n * @returns {Elem} Instance of Elem.\n * @description Wrap of an elements set.\n *\n * @example\n * new Elem(document.body);\n * new Elem(document.querySelectorAll('.cls'));\n * new Elem(document.getElementsByClassName('cls'));\n */\nclass Elem extends Array {\n  static addMethods(property, value) {\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    definePrototypeProperties(this.prototype, property);\n\n    return this;\n  }\n\n  constructor(elem = emptyCollection) {\n    super();\n\n    if (!isElementsCollection(elem)) {\n      elem = [elem];\n    }\n\n    setProto(this, Elem.prototype);\n\n    iterateArray(elem, (elem) => {\n      if (!isElementsCollection(elem)) {\n        elem = [elem];\n      }\n\n      iterateArray(elem, (elem) => {\n        if (!this.includes(elem) && isValidNode(elem)) {\n          this.push(elem);\n        }\n      });\n    });\n  }\n\n  /**\n   * @method Elem#add\n   * @public\n   * @param {...(Elem|Element|Element[])} elements - Each argument is a Elem, or Element, or array of Elements.\n   * @returns {Elem} Returns this.\n   * @description Method for adding new elements to the set.\n   *\n   * @example\n   * elem1.find('.cls1')\n   *   .add(elem2.find('.cls2'))\n   *   .hide();\n   */\n  add() {\n    const elems = this.slice();\n\n    iterateArray(arguments, (elem) => {\n      if (!isElementsCollection(elem)) {\n        elem = [elem];\n      }\n\n      iterateArray(elem, (elem) => {\n        if (!elems.includes(elem) && isValidNode(elem)) {\n          elems.push(elem);\n        }\n      });\n    });\n\n    return elems;\n  }\n\n  /**\n   * @method Elem#addClass\n   * @public\n   * @param {...String} classes - Classes to add.\n   * @returns {Elem} Returns this.\n   * @description Method for adding classes to the all the elements in the set.\n   *\n   * @example\n   * elem.addClass('red', 'round');\n   */\n  addClass() {\n    return this.forEach((elem) => {\n      const list = elem.classList;\n\n      iterateArray(arguments, (cls) => list.add(cls));\n    });\n  }\n\n  /**\n   * @method Elem#attr\n   * @public\n   * @param {String|Object.<String, String>} [attr] - Name of the attribute to get or\n   * an object of the format { [attrName]: value, ... } to set attributes.\n   * @param {String} [value] - If the first argument is a string\n   * it should be a value to set for that attribute.\n   * @returns {Object|String|Elem} If no arguments passed, D-Wrap of attributes of the first element in the set\n   * returned, if 1 string argument is passed the value of the attribute of the first element in the set\n   * returned otherwise returns this.\n   * @description Method for getting/setting attributes.\n   *\n   * @example\n   * elem.attr('attr1', 'value1'); // attribute attr1 set to 'value1' and this returned\n   * elem.attr('attr1');           // 'value1'\n   * elem.attr({\n   *   attr1: 'value3',            // attribute attr1 set to 'value3'\n   *   attr2: 'value2'             // attribute attr2 set to 'value2'\n   * });                           // this returned\n   * elem.attr();                  // { attr1: 'value3', attr2: 'value2' }\n   */\n  attr(attr, value) {\n    const elem = this[0];\n\n    if (!arguments.length) {\n      if (!elem) {\n        return {};\n      }\n\n      return collectFromObject(elem.attributes, addAttr);\n    }\n\n    if (arguments.length <= 1 && isString(attr)) {\n      if (!elem) {\n        return null;\n      }\n\n      const ns = getAttrNS(attr, elem);\n\n      return ns\n        ? elem.getAttributeNS(ns, attr)\n        : elem.getAttribute(attr);\n    }\n\n    if (arguments.length >= 2) {\n      attr = { [attr]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(attr, (value, key) => {\n        if (isNil(value) || value === false) {\n          return new Elem(elem).removeAttr(key);\n        }\n\n        value = value === true ? '' : value;\n\n        const ns = getAttrNS(key, elem);\n\n        if (ns) {\n          elem.setAttributeNS(ns, key, value);\n        } else {\n          elem.setAttribute(key, value);\n        }\n      });\n    });\n  }\n\n  /**\n   * @method Elem#children\n   * @public\n   * @returns {Elem} D-Wrap of the children of the first element in the set.\n   * @description Method for getting element's children.\n   *\n   * @example\n   * const children = elem.children();\n   */\n  children() {\n    return new Elem(this.length ? this[0].childNodes : []);\n  }\n\n  /**\n   * @method Elem#closest\n   * @public\n   * @param {String} selector - See the link.\n   * @returns {Elem} Set of the closest elements.\n   * @description Synonym for\n   * [Element#closest]{@link https://developer.mozilla.org/en/docs/Web/API/Element/closest}.\n   */\n  closest(selector) {\n    return this.collect((add, elem) => {\n      while (elem) {\n        if (new Elem(elem).is(selector)) {\n          return add(elem);\n        }\n\n        elem = elem.parentNode;\n      }\n    });\n  }\n\n  collect(callback) {\n    const elements = [];\n    const cb = ::elements.push;\n\n    this.forEach((elem, index) => {\n      callback(cb, elem, index, this);\n    });\n\n    return new Elem(elements);\n  }\n\n  /**\n   * @method Elem#contains\n   * @public\n   * @param {Elem|Element} element - Element to find out if it's within the first element in the set.\n   * @returns {Boolean} Returns if the argument within this element.\n   * @description Method is extension for\n   * [Node#contains]{@link https://developer.mozilla.org/en/docs/Web/API/Node/contains}.\n   *\n   * @example\n   * elem.contains(elem2);   // true|false\n   */\n  contains(element) {\n    const parent = this[0];\n    const child = toElem(element)[0];\n\n    return !parent || !child\n      ? false\n      : parent.contains(child);\n  }\n\n  /**\n   * @method Elem#create\n   * @public\n   * @param {String} type - Type of created element. If type is \"#text\" a text node is created.\n   * If type is \"#comment\" a comment node is created.\n   * @returns {Elem} New instance of Elem - wrap of the created elements.\n   * @description Method for creating elements inside this element.\n   * If this element is not an Element the element is just created.\n   *\n   * @example\n   * elem.create('div');\n   */\n  create(type) {\n    return this.collect((add, elem) => {\n      let el = null;\n      const isText = type === '#text';\n      const document = isHTMLDocument(elem)\n        ? elem\n        : elem.ownerDocument;\n\n      if (isText || type === '#comment') {\n        el = isText\n          ? document.createTextNode('')\n          : document.createComment('');\n      } else {\n        const ns = type === 'svg'\n          ? SVG_NS\n          : elem.namespaceURI || document.documentElement.namespaceURI || XHTML_NS;\n\n        el = document.createElementNS(ns, type);\n      }\n\n      add(new Elem(el).into(elem));\n    });\n  }\n\n  /**\n   * @method Elem#createComment\n   * @public\n   * @param {String} text - Text of the comment.\n   * @returns {Elem} New instance of Elem - wrap of the created comments.\n   * @description Method for creating comments inside this element.\n   * If this element is not an Element the comment is just created.\n   *\n   * @example\n   * elem.createComment('comment');\n   */\n  createComment(text) {\n    return this\n      .create('#comment')\n      .text(text);\n  }\n\n  /**\n   * @method Elem#createText\n   * @public\n   * @param {String} text - Text.\n   * @returns {Elem} New instance of Elem - wrap of the created text nodes.\n   * @description Method for creating text nodes inside this element.\n   * If this element is not an Element the text node is just created.\n   *\n   * @example\n   * elem.createText('text');\n   */\n  createText(text) {\n    return this\n      .create('#text')\n      .text(text);\n  }\n\n  /**\n   * @method Elem#css\n   * @public\n   * @param {String|Object.<String, String>} [property] - Name of the property to get or\n   * an object of the format { [property]: value, ... } to set styles.\n   * @param {String} [value] - If the first argument is a string it should be a value to set for that property.\n   * @returns {Object|String|Elem} If no arguments passed, D-Wrap of css styles of the element returned,\n   * if 1 string argument is passed the value of the property returned otherwise returns this.\n   * @description Method for getting/setting styles. Supports !important.\n   *\n   * @example\n   * elem.css('display', 'none'); // display set to 'none' and this returned\n   * elem.css('display');         // 'none'\n   * elem.css({\n   *   display: 'inline',         // display set to 'inline'\n   *   cursor: 'pointer'          // cursor set to 'pointer'\n   * });                          // this returned\n   * elem.css();                  // { display: 'none', cursor: 'pointer' }\n   */\n  css(property, value) {\n    const { style } = this[0] || {};\n\n    if (!arguments.length) {\n      if (!style) {\n        return {};\n      }\n\n      return collectFromArray(style.cssText.split(CSS_STYLES_SEPARATOR_REGEX), addCSSProp);\n    }\n\n    if (arguments.length <= 1 && isString(property)) {\n      if (!style) {\n        return '';\n      }\n\n      property = toHyphenCase(property);\n\n      return style.getPropertyValue(property) + (style.getPropertyPriority(property) ? ' !important' : '');\n    }\n\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(property, (value, property) => {\n        property = toHyphenCase(property);\n\n        if (isNil(value) || value === false) {\n          return new Elem(elem).removeCSS(property);\n        }\n\n        elem.style.removeProperty(property);\n        elem.style.setProperty(\n          property,\n          value.replace(CSS_IMPORTANT_REGEX, ''),\n          CSS_IMPORTANT_REGEX.test(value) ? 'important' : ''\n        );\n      });\n    });\n  }\n\n  /**\n   * @method Elem#data\n   * @public\n   * @param {String|Object.<String, String>} [key] - Name of the data attribute (without data- prefix)\n   * to get or an object of the format { [attrName]: value, ... } to set attributes.\n   * @param {String} [value] - If the first argument is a string it should be a value to set for that attribute.\n   * @returns {Object|String|Elem} If no arguments passed, D-Wrap of dataset of the element returned,\n   * if 1 string argument is passed the value of the data attribute returned otherwise returns this.\n   * @description Method for getting/setting data attributes. See\n   * [HTMLElement#dataset]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/dataset}.\n   *\n   * @example\n   * elem.data('someKey1', 'value'); // attribute data-some-key1 set to 'value1' and this returned\n   * elem.data('someKey1');          // 'value1'\n   * elem.data({\n   *   someKey1: 'value3',           // attribute data-some-key1 set to 'value3'\n   *   someKey2: 'value2'            // attribute data-some-key2 set to 'value2'\n   * });                             // this returned\n   * elem.data();                    // { someKey1: 'value3', someKey2: 'value2' }\n   */\n  data(key, value) {\n    const { dataset } = this[0] || {};\n\n    if (!arguments.length) {\n      if (!dataset) {\n        return {};\n      }\n\n      return collectFromObject(dataset, addDataAttr);\n    }\n\n    if (arguments.length === 1 && isString(key)) {\n      if (!dataset) {\n        return;\n      }\n\n      return dataset[key];\n    }\n\n    if (arguments.length >= 2) {\n      key = { [key]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(key, (value, key) => {\n        elem.dataset[key] = value;\n      });\n    });\n  }\n\n  /**\n   * @method Elem#dispatch\n   * @public\n   * @param {String|Event} event - Event or a string (new Event(event) is created).\n   * @param {Object} [details = {}] - Object that is assigned to the event.\n   * @returns {Elem} Returns this.\n   * @see https://developer.mozilla.org/en/docs/Web/API/Event/Event\n   * @description Synonym for\n   * [EventTarget#dispatchEvent]{@link https://developer.mozilla.org/en/docs/Web/API/EventTarget/dispatchEvent}.\n   *\n   * @example\n   * elem.dispatch('click');\n   * elem.dispatch('click', { bubbles: false, cancellable: false, data: 1 });\n   * elem.dispatch(new CustomEvent('custom-event'));\n   */\n  dispatch(event, details = {}) {\n    const {\n      bubbles = true,\n      cancelable = true,\n      ...realDetails\n    } = details || {};\n    let finalEvent = event;\n\n    if (!EVENT_REGEX.test(toStringTag(finalEvent))) {\n      try {\n        finalEvent = new Event(finalEvent, { bubbles, cancelable });\n        assign(finalEvent, realDetails);\n      } catch (err) {}\n    }\n\n    return this.forEach((elem) => {\n      if (!EVENT_REGEX.test(toStringTag(finalEvent))) {\n        const document = isHTMLDocument(elem)\n          ? elem\n          : elem.ownerDocument;\n\n        finalEvent = document.createEvent('Event');\n        finalEvent.initEvent(event, bubbles, cancelable);\n\n        assign(finalEvent, realDetails);\n      }\n\n      elem.dispatchEvent(finalEvent);\n    });\n  }\n\n  /**\n   * @method Elem#elem\n   * @public\n   * @param {Number} [index = 0] - Index of the element of the set to get. Negative index means elem.length + index.\n   * @returns {Elem} New instance of Elem.\n   *\n   * @example\n   * elem.elem(1); // a wrap of the element in the set that has index 1\n   * elem.elem();  // a wrap of the element in the set that has index 0\n   */\n  elem(index = 0) {\n    if (index < 0) {\n      index = this.length + index;\n    }\n\n    return new Elem(this[index]);\n  }\n\n  /**\n   * @method Elem#filter\n   * @public\n   * @param {IterationCallback} [filterFn = Boolean] - Filter function\n   * @returns {Elem} New instance of Elem.\n   * @description Method for filtering elements.\n   *\n   * @example\n   * elem.filter((elem) => new Elem(elem).closest('.parent'));\n   */\n  filter(filterFn = Boolean) {\n    return this.collect((add, elem, index) => {\n      if (filterFn(elem, index, this)) {\n        add(elem);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#find\n   * @public\n   * @param {String} selector - Selector to find.\n   * @returns {Elem} New instance of Elem.\n   * @description Synonym for\n   * [Element#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Element/querySelectorAll}.\n   */\n  find(selector) {\n    return this.collect((add, elem) => {\n      add(find(selector, elem));\n    });\n  }\n\n  /**\n   * @method Elem#forEach\n   * @public\n   * @param {IterationCallback} callback - Called on each iteration.\n   * @returns {Elem} Returns this.\n   * @description Method for iterating over the set.\n   *\n   * @example\n   * find('.cls').forEach((element, index, set) => {\n   *   // do something\n   * });\n   */\n  forEach(callback) {\n    iterateArray(this, (value, key) => {\n      callback(value, key, this);\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Elem#hasAttr\n   * @public\n   * @param {String} attr - Name of the attribute.\n   * @returns {Boolean} If the first element in the set has the attribute.\n   * @description Method that returns if the first element in the set has the attribute or not.\n   *\n   * @example\n   * elem.attr('attr', 'value').hasAttr('attr'); // true\n   * elem.removeAttr('attr').hasAttr('attr');    // false\n   */\n  hasAttr(attr) {\n    const elem = this[0];\n\n    if (!elem) {\n      return false;\n    }\n\n    const ns = getAttrNS(attr, elem);\n\n    return ns\n      ? elem.hasAttributeNS(ns, attr)\n      : elem.hasAttribute(attr);\n  }\n\n  /**\n   * @method Elem#hasClass\n   * @public\n   * @param {String} cls - Name of the class.\n   * @returns {Boolean} If the first element in the set has the class.\n   * @description Method that returns if the first element in the set has the class or not.\n   *\n   * @example\n   * elem.addClass('cls').hasClass('cls');    // true\n   * elem.removeClass('cls').hasClass('cls'); // false\n   */\n  hasClass(cls) {\n    const elem = this[0];\n\n    return elem\n      ? elem.classList.contains(cls)\n      : false;\n  }\n\n  /**\n   * @method Elem#hide\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Hides all elements in the set.\n   *\n   * @example\n   * elem.hide();\n   */\n  hide() {\n    return this.forEach(hide);\n  }\n\n  /**\n   * @method Elem#html\n   * @public\n   * @param {String|*} [html] - HTML to write instead of current HTML.\n   * @returns {Elem|String} If no arguments passed HTML of the first element in the set returned.\n   * Otherwise all elements HTML in the set are set to the html argument.\n   * @description Gets or sets HTML.\n   *\n   * @example\n   * elem.html('<div>1</div>');\n   * elem.html(); // '<div>1</div>'\n   */\n  html(html) {\n    if (!arguments.length) {\n      const elem = this[0];\n\n      return elem\n        ? elem.innerHTML\n        : '';\n    }\n\n    return this.forEach((elem) => {\n      elem.innerHTML = html;\n    });\n  }\n\n  includes(elem) {\n    return this.indexOf(elem) !== -1;\n  }\n\n  /**\n   * @method Elem#insertAfter\n   * @public\n   * @param {Elem|Element} element - Element to insert this element after.\n   * @returns {Elem} Returns this.\n   * @description Puts the elements from the set after the element specified by the argument.\n   * The elements remain in the same order.\n   *\n   * @example\n   * elem.insertAfter(elem2);\n   * elem.insertAfter(document.getElementById('id'));\n   * elem.insertAfter('#id div.c1');\n   */\n  insertAfter(element) {\n    element = toElem(element).elem(0);\n\n    let parent = element.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    element = element.next()[0];\n    parent = parent[0];\n\n    return this.forEach((elem) => {\n      if (elem === element) {\n        element = element.nextSibling;\n\n        return;\n      }\n\n      if (element) {\n        parent.insertBefore(elem, element);\n      } else {\n        parent.appendChild(elem);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#insertBefore\n   * @public\n   * @param {Elem|Element} element - Element to insert this element before.\n   * @returns {Elem} Returns this.\n   * @description Puts the elements from the set before the element specified by the argument.\n   * The elements remain in the same order.\n   *\n   * @example\n   * elem.insertBefore(elem2);\n   * elem.insertBefore(document.getElementById('id'));\n   * elem.insertBefore('#id div.c1');\n   */\n  insertBefore(element) {\n    element = toElem(element).elem(0);\n\n    let parent = element.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    element = element[0];\n    parent = parent[0];\n\n    return this.forEach((elem) => {\n      parent.insertBefore(elem, element);\n    });\n  }\n\n  /**\n   * @method Elem#into\n   * @public\n   * @param {Elem|Element} element - Element to put this elements into.\n   * @param {Boolean} end - If the elements should be inserted to the end. If false they are inserted to the start.\n   * @returns {Elem} Returns this.\n   * @description Method is similar to\n   * [Node#appendChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/appendChild}.\n   *\n   * @example\n   * elem.into(elem2);\n   * elem.into(document.getElementById('id'));\n   * elem.into('#id div.c1');\n   */\n  into(element, end = true) {\n    element = toElem(element)[0];\n\n    if (\n      !element\n      || isHTMLDocument(element)\n    ) {\n      return this;\n    }\n\n    if (!end && element.firstChild) {\n      for (let i = this.length - 1; i >= 0; i--) {\n        element.insertBefore(this[i], element.firstChild);\n      }\n\n      return this;\n    }\n\n    return this.forEach((elem) => {\n      element.appendChild(elem);\n    });\n  }\n\n  /**\n   * @method Elem#is\n   * @public\n   * @param {String} selector\n   * @returns {Boolean} If the first element in the set matches the selector.\n   * @description Synonym for\n   * [Element#matches]{@link https://developer.mozilla.org/en/docs/Web/API/Element/matches}.\n   *\n   * @example\n   * elem.addClass('cls');\n   * elem.is('.cls');         // true\n   *\n   * elem.removeClass('cls');\n   * elem.is('.cls');         // false\n   */\n  is(selector) {\n    if (!this.length) {\n      return false;\n    }\n\n    const elem = this[0];\n    const matches = (\n      elem.matches\n      || elem.matchesSelector\n      || elem.webkitMatchesSelector\n      || elem.mozMatchesSelector\n      || elem.msMatchesSelector\n      || elem.oMatchesSelector\n    );\n\n    try {\n      return matches.call(elem, selector);\n    } catch (err) {\n      console.error(`Selector '${ selector }' is not a valid selector (Elem#is)`);\n\n      return false;\n    }\n  }\n\n  /**\n   * @method Elem#name\n   * @public\n   * @returns {String|void} nodeName (lowercased) of the first element in the set.\n   * @description Method for getting name of the first element in the set.\n   *\n   * @example\n   * elem.create('div').name() // 'div'\n   */\n  name() {\n    const elem = this[0];\n\n    return elem && elem.nodeName\n      ? elem.nodeName.toLowerCase()\n      : undefined;\n  }\n\n  /**\n   * @method Elem#next\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Method for finding next element to each element in the set.\n   *\n   * @example\n   * elem.next(); // finds next element to each element in the set\n   */\n  next() {\n    return this.collect(addNext);\n  }\n\n  /**\n   * @method Elem#on\n   * @public\n   * @param {ElemEventString|Object.<ElemEventString|ElemListener>} event - Either a {@link ElemEventString} string\n   * or an object with event keys (a key is also ElemEventString) and listeners values.\n   * @param {ElemListener} [listener] - If the first argument is a string it must be a listener function for\n   * specified event(s).\n   * @returns {ElemRemoveListeners} Function that takes optional event argument.\n   * @description Adds event listeners for all the elements in the set.\n   *\n   * @example\n   * elem.on(\n   *   'change, input',\n   *   'input, select, textarea, datalist, keygen, output',\n   *   (e, elem, index) => console.log(elem.value)\n   * );\n   * elem.on(\n   *   'change, input',\n   *   (e, elem, index) => console.log(elem.value)\n   * );\n   * elem.on(\n   *   {\n   *     'change, input': (e, elem, index) => console.log(elem.value),\n   *     'blur': () => console.log('blur')\n   *   },\n   *   'input, select, textarea, datalist, keygen, output'\n   * );\n   *\n   * const removeListeners = elem.on({\n   *   'change, input': (e, elem, index) => console.log(elem.value),\n   *   'blur': () => console.log('blur')\n   * });\n   *\n   * removeListeners('click');\n   * removeListeners('blur, change');\n   * removeListeners('blur, change', 'input');\n   * removeListeners();\n   */\n  on(event, listener) {\n    if (isString(event)) {\n      event = { [event]: listener };\n    }\n\n    const newEvents = {};\n    const allListeners = {};\n\n    iterateObject(event, (listener, event) => {\n      iterateArray(event.split(EVENT_SEPARATOR_REGEX), (event) => {\n        (newEvents[event] = newEvents[event] || []).push(listener);\n      });\n    });\n\n    this.forEach((elem) => {\n      iterateObject(newEvents, (listeners, event) => {\n        iterateArray(listeners, (listener) => {\n          elem.addEventListener(event, listener, false);\n          (allListeners[event] = allListeners[event] || []).push(() => {\n            elem.removeEventListener(event, listener);\n          });\n        });\n      });\n    });\n\n    return function removeEventListeners(event) {\n      if (arguments.length) {\n        iterateArray(arguments, (event) => {\n          iterateArray(event.split(EVENT_SEPARATOR_REGEX), (event) => {\n            const removeListeners = allListeners[event];\n\n            if (removeListeners) {\n              iterateArray(removeListeners, (removeListener) => removeListener());\n\n              delete allListeners[event];\n            }\n          });\n        });\n      } else {\n        iterateObject(allListeners, (removeListeners, event) => {\n          iterateArray(removeListeners, (removeListener) => removeListener());\n\n          delete allListeners[event];\n        });\n      }\n    };\n  }\n\n  /**\n   * @method Elem#parent\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Method returns wrap of the set of the parent elements of each element in the set.\n   */\n  parent() {\n    return this.collect(addParent);\n  }\n\n  /**\n   * @method Elem#prev\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Method for finding previous element to each element in the set.\n   *\n   * @example\n   * elem.prev(); // finds previous element to each element in the set\n   */\n  prev() {\n    return this.collect(addPrev);\n  }\n\n  /**\n   * @method Elem#prop\n   * @public\n   * @param {String|Object.<String, *>} property - Either a string of a property or an assigned object.\n   * @param {*} [value] - If a property parameter is a string\n   * this has to be an assigned value if it's present.\n   * @returns {Elem|*} Returns this if it's setter or a value if getter.\n   * @description Method that is either a property getter for the first element in the set\n   * or a setter for every element in the set.\n   *\n   * @example\n   * elem.prop('draggable', false);\n   * elem.prop('draggable'); // false\n   */\n  prop(property, value) {\n    if (arguments.length <= 1 && isString(property)) {\n      return this[0] ? this[0][property] : undefined;\n    }\n\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(property, (value, prop) => {\n        elem[prop] = value;\n      });\n    });\n  }\n\n  /**\n   * @method Elem#remove\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Removes all the elements from the set from the document.\n   * Note: it doesn't remove them from the set so watch out for the memory leaks.\n   *\n   * @example\n   * elem.remove();\n   */\n  remove() {\n    return this.forEach(remove);\n  }\n\n  /**\n   * @method Elem#removeAttr\n   * @public\n   * @param {...String} attributes - Attributes to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the attributes from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeAttr('foo', 'bar', 'baz');\n   */\n  removeAttr() {\n    return this.forEach((elem) => {\n      iterateArray(arguments, (attr) => {\n        const ns = getAttrNS(attr, elem);\n\n        if (ns) {\n          elem.removeAttributeNS(ns, attr);\n        } else {\n          elem.removeAttribute(attr);\n        }\n      });\n    });\n  }\n\n  /**\n   * @method Elem#removeClass\n   * @public\n   * @param {...String} classes - Classes to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the classes from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeClass('foo', 'bar', 'baz');\n   */\n  removeClass() {\n    return this.forEach((elem) => {\n      const list = elem.classList;\n\n      iterateArray(arguments, (cls) => list.remove(cls));\n    });\n  }\n\n  /**\n   * @method Elem#removeCSS\n   * @public\n   * @param {...String} props - CSS properties to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the CSS properties from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeCSS('display', 'position', 'margin');\n   */\n  removeCSS() {\n    return this.forEach((elem) => {\n      iterateArray(arguments, (css) => {\n        elem.style.removeProperty(toHyphenCase(css));\n      });\n    });\n  }\n\n  /**\n   * @method Elem#replace\n   * @public\n   * @param {Elem|Element} element - Element to replace the first element in the set\n   * with a set of elements specified by the argument (Element or Elem).\n   * @returns {Elem} Returns this.\n   * @description Method is similar to\n   * [Node#replaceChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/replaceChild}.\n   *\n   * @example\n   * elem.replace(elem2);\n   * elem.replace(document.getElementById('id'));\n   * elem.replace('#id div.c1');\n   */\n  replace(element) {\n    element = toElem(element);\n\n    const first = this.elem(0);\n    const parent = first.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    let elem = parent;\n    let method = 'into';\n    const next = first.next()[0];\n    const prev = first.prev()[0];\n\n    if (next) {\n      elem = next;\n      method = 'insertBefore';\n    } else if (prev) {\n      elem = prev;\n      method = 'insertAfter';\n    }\n\n    first.remove();\n\n    element[method](elem);\n  }\n\n  /**\n   * @method Elem#show\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Shows all elements in the set.\n   * If an element was hidden using {@link Elem#hide} previous display is set.\n   *\n   * @example\n   * elem.show();\n   */\n  show() {\n    return this.forEach(show);\n  }\n\n  slice() {\n    return new Elem(super.slice.apply(this, arguments));\n  }\n\n  /**\n   * @method Elem#text\n   * @public\n   * @param {String|*} [text] - Text to write instead of current text.\n   * @returns {Elem|String} If no arguments passed text of the first element in the set returned.\n   * Otherwise all elements texts in the set are set to the text argument.\n   * @description Gets or sets text.\n   *\n   * @example\n   * elem.text('123');\n   * elem.text(); // '123'\n   */\n  text(text) {\n    if (!arguments.length) {\n      return this.prop('textContent');\n    }\n\n    return this.forEach((elem) => {\n      elem.textContent = text;\n    });\n  }\n\n  /**\n   * @method Elem#toggleAttr\n   * @public\n   * @param {String} attr - Attribute to toggle.\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the attribute\n   * with the '' value and if falsey method removes the attribute. If not present method adds\n   * the attribute if it doesn't exist and removes if it does.\n   * @returns {Elem} Returns this.\n   * @description Method for toggling attributes.\n   *\n   * @example\n   * elem.toggleAttr('attr');\n   * elem.toggleAttr('attr', someCondition);\n   */\n  toggleAttr(attr, condition) {\n    return this.forEach((elem) => {\n      elem = new Elem(elem);\n\n      if (arguments.length < 2 ? !elem.hasAttr(attr) : condition) {\n        elem.attr(attr, '');\n      } else {\n        elem.removeAttr(attr);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#toggleClass\n   * @public\n   * @param {String} cls - Class to toggle.\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the class\n   * and if falsey method removes the class. If not present method adds\n   * the class if it doesn't exist and removes if it does.\n   * @returns {Elem} Returns this.\n   * @description Method for toggling classes.\n   *\n   * @example\n   * elem.toggleClass('cls');\n   * elem.toggleClass('cls', someCondition);\n   */\n  toggleClass(cls, condition) {\n    return this.forEach((elem) => {\n      const { classList } = elem;\n\n      classList.toggle(cls, arguments.length < 2 ? !classList.contains(cls) : condition);\n    });\n  }\n}\n\nsetToStringTag(Elem, 'Elem');\n\nif (Symbol && Symbol.species) {\n  defineProperties(Elem, {\n    [Symbol.species]: {\n      get() {\n        return Array;\n      }\n    }\n  });\n}\n\nexport { Elem };\n","import {\n  defineFrozenProperties,\n  removeArrayElem, setToStringTag\n} from './utils';\nimport { wrapMixin, removeWatchers } from './helpers/Block';\n\nclass Mixin {\n  static evaluate = true;\n\n  /**\n   * @method Mixin.wrap\n   * @public\n   * @param {...Wrapper} wrappers - Functions that return wrapped mixin.\n   * @returns {typeof Mixin} New mixin.\n   * @description Method for wrapping mixins.\n   * It is considered best practice to just extends the old mixin with a new one.\n   */\n  static wrap(...wrappers) {\n    return wrappers.reduce(wrapMixin, this);\n  }\n\n  constructor(opts) {\n    const {\n      name,\n      value,\n      dynamic,\n      elem,\n      args,\n      comment,\n      parentBlock,\n      parentScope,\n      parentTemplate\n    } = opts;\n    const watchersToRemove = [];\n    const watchers = [];\n\n    defineFrozenProperties(this, {\n      $$: {\n        name,\n        _value: value,\n        value,\n        isDynamic: dynamic,\n        parentScope,\n        parentBlock,\n        parentTemplate,\n        watchers,\n        watchersToRemove,\n        isRemoved: false,\n        evaluate: (watcher) => {\n          const {\n            isDynamic,\n            value,\n            _value\n          } = this.$$;\n          const currentValue = isDynamic\n            ? value\n            : parentScope.$$.evaluate(_value);\n\n          if (watcher) {\n            watchers.push(watcher);\n          }\n\n          return currentValue;\n        },\n        remove: (isParentSignal) => {\n          this.$$.isRemoved = true;\n\n          removeWatchers(watchersToRemove);\n\n          try {\n            this.beforeRemove();\n          } catch (err) {\n            console.error(`Uncaught error in ${ name }#beforeRemove:`, err);\n          }\n\n          if (!isParentSignal && parentBlock) {\n            removeArrayElem(parentBlock.$$.mixins, this);\n          }\n        }\n      }\n    });\n\n    /**\n     * @member {String[]} [Mixin#args]\n     * @type {String[]}\n     * @public\n     */\n    this.args = args;\n\n    /**\n     * @member {String} [Mixin#comment]\n     * @type {String}\n     * @public\n     */\n    this.comment = comment;\n\n    /**\n     * @member {Block} [Mixin#parentBlock]\n     * @type {Block}\n     * @public\n     */\n    this.parentBlock = parentBlock;\n\n    /**\n     * @member {Block} [Mixin#parentScope]\n     * @type {Block}\n     * @public\n     */\n    this.parentScope = parentScope;\n\n    /**\n     * @member {Block} [Mixin#parentTemplate]\n     * @type {Block}\n     * @public\n     */\n    this.parentTemplate = parentTemplate;\n\n    /**\n     * @member {Elem} Mixin#elem\n     * @type {Elem}\n     * @public\n     */\n    this.elem = elem;\n\n    /**\n     * @member {Element} Mixin#node\n     * @type {Element}\n     * @public\n     */\n    this.node = elem[0];\n\n    if (parentBlock) {\n      parentBlock.$$.mixins.push(this);\n    }\n  }\n\n  afterUpdate() {}\n\n  beforeRemove() {}\n\n  /**\n   * @method Block#evaluate\n   * @public\n   * @param {Watcher} [callback] - If present, callback which is called when the mixin value is changed.\n   * @returns {*} Evaluation result.\n   * @description Method for evaluating the mixin value and watching for the changes.\n   */\n  evaluate(callback) {\n    return this.$$.evaluate(callback);\n  }\n}\n\nsetToStringTag(Mixin, 'Mixin');\n\nexport { Mixin };\n","import { Elem } from './Elem';\nimport {\n  defineFrozenProperties,\n  assign, iterateArray, iterateObject,\n  isFunction, isArray,\n  setToStringTag, hasOwnProperty,\n  removeArrayElem, create,\n  getProto, setProto\n} from './utils';\nimport {\n  constructMixinRegex, isInstanceOf,\n  removeWatchers, removeWithParentSignal, cleanProperty,\n  transformRestArgs, calculateArgs,\n  watchForAllArgs, watchForAllGlobals, watchForAllLocals,\n  extendBlock, wrapBlock\n} from './helpers/Block';\nimport {\n  D_REST_REGEX, Scope,\n  rootBlocks, rootMixins\n} from './constants';\nimport { initApp } from './initApp';\nimport { Mixin } from './Mixin';\n\n/**\n * @typedef {Error} EvaluationError\n * @public\n * @property {String} expression - Expression which has been evaluated with the error.\n * @property {Block} block - Block in context of which the expression has been evaluated with the error.\n */\n\n/**\n * @callback Watcher\n * @public\n * @param {*} newValue - New value.\n * @param {*} oldValue - Old value.\n */\n\n/**\n * @callback VarsWatcher\n * @public\n */\n\n/**\n * @callback Wrapper\n * @public\n * @param {typeof Block|typeof Mixin} Block class to wrap.\n * @returns {typeof Block} New Block class.\n */\n\n/**\n * @callback AfterUpdate\n * @public\n * @param {*} newValue - New value.\n * @param {*} oldValue - Old value.\n * @param {*} mixin - Mixin instance.\n */\n\n/**\n * @callback BlockRegisterHook\n * @public\n * @param {Block} Block - Registering block.\n * @param {String} name - Block name.\n * @returns Return value is used for registering the block.\n * If Block subclass returned it's registered instead of the initial block, otherwise\n * the initial block is used.\n */\n\n/**\n * @callback MixinRegisterHook\n * @public\n * @param {Block} Mixin - Registering mixin.\n * @param {String} name - Mixin name.\n * @returns Return value is used for registering the mixin.\n * If Mixin subclass returned it's registered instead of the initial mixin, otherwise\n * the initial mixin is used.\n */\n\nconst blockHooks = [];\nconst mixinHooks = [];\nconst TAG_NAME_REGEX = /^[a-z][a-z\\d\\-_.:!@#$%^&*()[\\]{}='\"\\\\]*$/i;\nconst ATTR_NAME_REGEX = /^[\\u0000-\\u0020\\s'\">/=]+$/;\nconst WATCHED_ARG_PREFIX_REGEX = /^args\\./;\nconst WATCHED_GLOBAL_PREFIX_REGEX = /^globals\\./;\nconst afterElem = new Elem();\n\n/**\n * @class Block\n * @extends null\n * @public\n * @param {Object} opts - Element options.\n * @returns {Block} Instance of Block.\n * @description Class for dynamic templating.\n *\n * @example\n * import { D, Block, initApp } from 'dwayne';\n *\n * class App extends Block {\n *   static template = '<Hello text=\"{text}\"/>';\n *\n *   constructor(opts) {\n *     super(opts);\n *\n *     this.text = 'world (0)';\n *     this.times = 0;\n *\n *     this.setInterval();\n *   }\n *\n *   setInterval() {\n *     D(1000).interval(() => {\n *       this.text = `world (${ ++this.times })`;\n *     });\n *   }\n * }\n *\n * Block.block('App', App);\n * Block.block('Hello', 'Hello, {args.text}!');\n *\n * initApp(html`<App/>`, document.getElementById('root'));\n */\nclass Block {\n  static _blocks = create(rootBlocks);\n  static _mixins = create(rootMixins);\n\n  /**\n   * @member {Object} [Block.defaultArgs = null]\n   * @type {Object}\n   * @public\n   * @description Block default args.\n   */\n  static defaultArgs = null;\n\n  /**\n   * @member {Object} [Block.defaultLocals = null]\n   * @type {Object}\n   * @public\n   * @description Block default locals.\n   */\n  static defaultLocals = null;\n\n  /**\n   * @member {Object} [Block.template = { vars: [], value: [] }]\n   * @type {Object}\n   * @public\n   * @description Block template.\n   */\n  static template = {\n    vars: [],\n    value: []\n  };\n\n  /**\n   * @method Block.onEvalError\n   * @public\n   * @param {EvaluationError} err - The method is called when an evaluation error occurs.\n   */\n  static onEvalError(err) {\n    console.error(`Eval error (evaluating \"${ err.expression }\" in context of block \"${ err.block.$$.name }\"):`, err);\n  }\n\n  /**\n   * @method Block.beforeRegisterBlock\n   * @public\n   * @param {BlockRegisterHook} hook - Block register hook.\n   */\n  static beforeRegisterBlock(hook) {\n    blockHooks.push(hook);\n\n    return () => {\n      removeArrayElem(blockHooks, hook);\n    };\n  }\n\n  /**\n   * @method Block.beforeRegisterMixin\n   * @public\n   * @param {MixinRegisterHook} hook - Mixin register hook.\n   */\n  static beforeRegisterMixin(hook) {\n    mixinHooks.push(hook);\n\n    return () => {\n      removeArrayElem(mixinHooks, hook);\n    };\n  }\n\n  /**\n   * @method Block.block\n   * @public\n   * @param {String} name - Block or mixin name.\n   * @param {Template|typeof Block} Subclass - Subclass of Block or template string of it.\n   * @returns {typeof Block|undefined} Returns registered Block or undefined if the block hasn't been registered.\n   * @description Register block in the namespace of this.\n   */\n  static block(name, Subclass) {\n    if (isFunction(Subclass) && !isInstanceOf(Block, Subclass)) {\n      const constructor = Subclass;\n\n      Subclass = class extends Block {\n        constructor(opts) {\n          super(opts);\n\n          this::constructor(opts);\n        }\n      };\n    }\n\n    if (!isFunction(Subclass) && isArray(Subclass)) {\n      Subclass = class extends Block {\n        static template = {\n          vars: [],\n          value: Subclass\n        };\n      };\n    }\n\n    if (!isFunction(Subclass) && Subclass.vars && Subclass.value) {\n      Subclass = class extends Block {\n        static template = Subclass;\n      };\n    }\n\n    if (!isFunction(Subclass)) {\n      console.warn(`Block must be a string (representing a block template), a function or a class that extends Block class (name: \"${ name }\") (Block.block)`);\n\n      return;\n    }\n\n    if (!isInstanceOf(Block, Subclass)) {\n      extendBlock(Subclass);\n    }\n\n    if (rootBlocks[name]) {\n      console.warn(`The \"${ name }\" block is a built-in block so the block will not be registered (Block.block)`);\n\n      return;\n    }\n\n    if (!TAG_NAME_REGEX.test(name)) {\n      console.warn(`Name \"${ name }\" is not allowed for blocks so the block will not be registered (Block.block)`);\n\n      return;\n    }\n\n    if (!hasOwnProperty(this, '_blocks')) {\n      this._blocks = create(getProto(this)._blocks);\n    }\n\n    if (!hasOwnProperty(this, 'defaultLocals')) {\n      this.defaultLocals = {};\n    }\n\n    if (!hasOwnProperty(this, 'defaultArgs')) {\n      this.defaultArgs = create(null);\n    }\n\n    try {\n      Subclass = blockHooks.reduce((returnValue, hook) => {\n        const currentReturnValue = hook(returnValue, name, this);\n\n        return isInstanceOf(Block, currentReturnValue)\n          ? currentReturnValue\n          : returnValue;\n      }, Subclass);\n    } catch (err) {\n      console.error('Uncaught error in \"beforeRegisterBlock\" hook:', err);\n    }\n\n    const {\n      vars,\n      value\n    } = Subclass.template;\n\n    Subclass._html = value;\n    Subclass._vars = vars;\n\n    if (hasOwnProperty(Subclass, 'defaultArgs')) {\n      setProto(Subclass.defaultArgs, null);\n    }\n\n    this._blocks[name] = Subclass;\n\n    return Subclass;\n  }\n\n  /**\n   * @method Block.get\n   * @public\n   * @param {String} name - Block name.\n   * @returns {typeof Block|undefined} Returns registered Block with specified name.\n   */\n  static get(name) {\n    return (this._blocks || {})[name];\n  }\n\n  /**\n   * @method Block.init\n   * @public\n   * @param {Elem|Element} [container] - Container of the app.\n   * @returns {void}\n   * @description Method for initializing app.\n   */\n  static init(container) {\n    initApp(htmlScopeless`<d-block Constructor=\"{this}\"/>`, container);\n  }\n\n  /**\n   * @method Block.mixin\n   * @public\n   * @param {String} name - Block or mixin name.\n   * @param {typeof Mixin|AfterUpdate} Subclass - Subclass of Mixin or AfterUpdate callback.\n   * @returns {typeof Mixin|undefined} Returns registered Block or undefined if the block hasn't been registered.\n   * @description Register mixin in the namespace of this.\n   */\n  static mixin(name, Subclass) {\n    if (isFunction(Subclass) && !isInstanceOf(Mixin, Subclass)) {\n      const afterUpdate = Subclass;\n\n      Subclass = class extends Mixin {\n        afterUpdate(newValue, oldValue) {\n          this::afterUpdate(newValue, oldValue, this);\n        }\n      };\n    }\n\n    if (!isInstanceOf(Mixin, Subclass)) {\n      console.warn(`The \"${ name }\" class does not extend Mixin and will not be registered (Block.mixin)`);\n\n      return;\n    }\n\n    if (rootMixins[name]) {\n      console.warn(`The \"${ name }\" mixin is a built-in mixin so the mixin will not be registered (Block.mixin)`);\n\n      return;\n    }\n\n    if (!ATTR_NAME_REGEX.test(name)) {\n      console.warn(`Name \"${ name }\" is not allowed for mixins so the mixin will not be registered (Block.mixin)`);\n\n      return;\n    }\n\n    if (!hasOwnProperty(this, '_mixins')) {\n      this._mixins = create(getProto(this)._mixins);\n    }\n\n    try {\n      Subclass = mixinHooks.reduce((returnValue, hook) => {\n        const currentReturnValue = hook(returnValue, name, this);\n\n        return isInstanceOf(Mixin, currentReturnValue)\n          ? currentReturnValue\n          : returnValue;\n      }, Subclass);\n    } catch (err) {\n      console.error('Uncaught error in \"beforeRegisterMixin\" hook:', err);\n    }\n\n    Subclass._match = constructMixinRegex(name);\n\n    this._mixins[name] = Subclass;\n\n    return Subclass;\n  }\n\n  /**\n   * @method Block.wrap\n   * @public\n   * @param {...Wrapper} wrappers - Functions that return wrapped block.\n   * @returns {typeof Block} New block.\n   * @description Method for wrapping blocks into another blocks.\n   * It is considered best practice to just extends the old block with a new one.\n   *\n   * @example\n   * class MyBlock extends Block {\n   *   static template = '<div>123</div>';\n   * }\n   *\n   * MyBlock.wrap((Block) => {\n   *   return class extends Block {\n   *     static template = `<section class=\"wrapper\">${ Block.template }</section>`;\n   *\n   *     constructor(opts) {\n   *       super(opts);\n   *\n   *       this.additionalVar = 'additional';\n   *     }\n   *   };\n   * });\n   */\n  static wrap(...wrappers) {\n    return wrappers.reduce(wrapBlock, this);\n  }\n\n  constructor(opts) {\n    const {\n      name,\n      args: originalArgs,\n      dBlockName,\n      children,\n      parent,\n      parentElem,\n      parentBlock,\n      parentScope,\n      parentTemplate,\n      prevBlock\n    } = opts;\n    const watchersToRemove = [];\n    const constructor = getProto(this).constructor;\n    const childrenBlocks = [];\n    const mixins = [];\n    const isParentBlock = parent instanceof Block;\n\n    defineFrozenProperties(this, {\n      /**\n       * @member {Block} Block#$\n       * @type {Block}\n       * @public\n       * @description This.\n       */\n      $: this,\n\n      /**\n       * @member {Object} Block#$$\n       * @type {Object}\n       * @protected\n       * @property {Object} args - Private args scope.\n       * @property {Object[]} htmlChildren - Block html children.\n       * @property {Block[]} children - Child blocks.\n       * @property {Mixin[]} mixins - Child mixins.\n       * @property {Elem} parentElem - Parent element.\n       * @property {Elem} content - Content elements.\n       * @property {Function} evaluate - Evaluate function.\n       * @property {Object} globals - Private globals scope.\n       * @property {Object} locals - Private locals scope.\n       * @property {Object[]} watchersToRemove - Watchers to remove before removing element.\n       */\n      $$: {\n        name,\n        dBlockName,\n        dBlocks: [],\n        parent,\n        parentElem,\n        parentScope,\n        parentBlock,\n        parentTemplate,\n        content: new Elem(),\n        ns: constructor,\n        htmlChildren: children,\n        children: childrenBlocks,\n        mixins,\n        prevBlock,\n        watchersToRemove,\n        isRemoved: false,\n        isRendered: false,\n        evaluate: (func, onChange, targetBlock, forDElements, forDItem, forDEach) => {\n          if (!isFunction(func)) {\n            return func;\n          }\n\n          forDElements = !!forDElements;\n          forDItem = !!forDItem;\n\n          const scope = (name === '#d-item' && !forDItem) || forDEach\n            ? (forDEach || this).$$.scope\n            : this;\n          const { watchersToRemove } = targetBlock ? targetBlock.$$ : {};\n          const onChangeFlag = !!onChange;\n\n          const evaluate = () => {\n            let result;\n\n            if (onChangeFlag) {\n              Scope.evalMode = true;\n              Scope.gettingVars = [];\n            }\n\n            try {\n              result = func(scope);\n            } catch (err) {\n              err.expression = func.expression;\n              err.original = func.original;\n              err.block = this;\n\n              if (isFunction(constructor.onEvalError)) {\n                try {\n                  constructor.onEvalError(err);\n                } catch (e) {\n                  console.error('Uncaught error in onEvalError:', e);\n                }\n              }\n            }\n\n            if (onChangeFlag) {\n              const localWatchers = [];\n\n              iterateArray(Scope.gettingVars, (watchers) => {\n                const watcher = () => {\n                  const newResult = evaluate();\n\n                  if (newResult !== result && !targetBlock.$$.isRemoved) {\n                    onChange(newResult, result);\n                  }\n                };\n                const watcherBlock = {\n                  forDElements,\n                  watcher,\n                  watchers\n                };\n\n                watcher.onRemove = () => {\n                  iterateArray(localWatchers, (watcherBlock) => {\n                    const {\n                      watcher,\n                      watchers\n                    } = watcherBlock;\n\n                    removeArrayElem(watchersToRemove, watcherBlock);\n                    removeArrayElem(watchers, watcher);\n                  });\n                };\n\n                localWatchers.push(watcherBlock);\n                watchersToRemove.push(watcherBlock);\n                watchers.push(watcher);\n              });\n\n              Scope.evalMode = false;\n              Scope.gettingVars = [];\n            }\n\n            return result;\n          };\n\n          return evaluate();\n        },\n        remove: (isParentSignal) => {\n          this.$$.isRemoved = true;\n\n          removeWatchers(watchersToRemove);\n\n          iterateArray(childrenBlocks, removeWithParentSignal);\n          iterateArray(mixins, removeWithParentSignal);\n\n          try {\n            this.beforeRemove();\n          } catch (err) {\n            console.error(`Uncaught error in ${ name }#beforeRemove:`, err);\n          }\n\n          if (!isParentSignal && isParentBlock) {\n            parent.$$.removeContent(this.$$.content);\n          }\n\n          if (!isParentSignal && parentBlock) {\n            removeArrayElem(parentBlock.$$.children, this);\n          }\n\n          this.$$.content.remove();\n        },\n        changeContent: (newContent) => {\n          this.$$.content = newContent;\n\n          if (this.$$.isRendered) {\n            try {\n              this.afterDOMChange();\n            } catch (err) {\n              console.error(`Uncaught error in ${ name }#afterContentChange:`, err);\n            }\n          }\n        },\n        addContent: (contentToAdd, notRecursive) => {\n          const oldContent = this.$$.content;\n          const index = oldContent.indexOf(contentToAdd[0].previousSibling) + 1;\n          let newContent;\n\n          if (index === 0) {\n            newContent = contentToAdd.add(oldContent);\n          } else {\n            newContent = oldContent\n              .slice(0, index)\n              .add(contentToAdd, oldContent.slice(index));\n          }\n\n          this.$$.changeContent(newContent);\n\n          if (isParentBlock && !notRecursive) {\n            parent.$$.addContent(contentToAdd, notRecursive);\n          }\n        },\n        moveContent: (contentToMove, after) => {\n          const oldContent = this.$$.content;\n          const index = oldContent.indexOf(contentToMove[0]);\n          const indexToPut = oldContent.indexOf(after[0]) + 1;\n          let newContent;\n\n          if (indexToPut === 0) {\n            newContent = contentToMove.add(\n              oldContent.slice(indexToPut, index),\n              oldContent.slice(index + contentToMove.length)\n            );\n          } else if (index > indexToPut) {\n            newContent = oldContent\n              .slice(0, indexToPut)\n              .add(\n                contentToMove,\n                oldContent.slice(indexToPut, index),\n                oldContent.slice(index + contentToMove.length)\n              );\n          } else {\n            newContent = oldContent\n              .slice(0, index)\n              .add(\n                oldContent.slice(index + contentToMove.length, indexToPut),\n                contentToMove,\n                oldContent.slice(indexToPut)\n              );\n          }\n\n          this.$$.changeContent(newContent);\n\n          if (isParentBlock && indexToPut) {\n            parent.$$.moveContent(contentToMove, after);\n          }\n        },\n        removeContent: (contentToRemove) => {\n          this.$$.changeContent(this.$$.content.filter((elem) => (\n            contentToRemove.indexOf(elem) === -1\n          )));\n\n          if (isParentBlock) {\n            parent.$$.removeContent(contentToRemove);\n          }\n        },\n        insertInStartOfIt: (contentToInsert, moveFlag) => {\n          const { prevBlock } = this.$$;\n          let after = afterElem;\n\n          if (prevBlock instanceof Block) {\n            after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n          } else if (prevBlock) {\n            after = prevBlock;\n            contentToInsert.insertAfter(prevBlock);\n\n            if (isParentBlock) {\n              if (moveFlag) {\n                parent.$$.moveContent(contentToInsert, after);\n              } else {\n                parent.$$.addContent(contentToInsert, true);\n              }\n            }\n          } else if (isParentBlock) {\n            const { prevBlock } = parent.$$;\n\n            if (prevBlock) {\n              let notRecursive;\n\n              if (prevBlock instanceof Block) {\n                after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n                notRecursive = true;\n              } else {\n                after = prevBlock;\n                notRecursive = false;\n                contentToInsert.insertAfter(prevBlock);\n              }\n\n              if (moveFlag) {\n                parent.$$.moveContent(contentToInsert, after);\n              } else {\n                parent.$$.addContent(contentToInsert, notRecursive);\n              }\n            } else {\n              after = parent.$$.insertInStartOfIt(contentToInsert, moveFlag);\n            }\n          } else {\n            contentToInsert.into(parentElem, false);\n          }\n\n          if (moveFlag) {\n            this.$$.moveContent(contentToInsert, after);\n          } else {\n            this.$$.addContent(contentToInsert, true);\n          }\n\n          return after;\n        },\n        insertAfterIt: (contentToInsert, moveFlag) => {\n          const { prevBlock } = this.$$;\n          let after = afterElem;\n          let tryToAddOrMove;\n\n          if (this.$$.content.length) {\n            after = this.$$.content.elem(-1);\n            tryToAddOrMove = true;\n            contentToInsert.insertAfter(after);\n          } else if (prevBlock instanceof Block) {\n            after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n          } else if (prevBlock) {\n            after = prevBlock;\n            tryToAddOrMove = true;\n            contentToInsert.insertAfter(prevBlock);\n          } else if (isParentBlock) {\n            after = parent.$$.insertInStartOfIt(contentToInsert, moveFlag);\n          } else {\n            contentToInsert.into(parentElem, false);\n          }\n\n          if (isParentBlock && tryToAddOrMove) {\n            if (moveFlag) {\n              parent.$$.moveContent(contentToInsert, after);\n            } else {\n              parent.$$.addContent(contentToInsert);\n            }\n          }\n\n          return after;\n        }\n      }\n    });\n\n    iterateObject(constructor.defaultLocals, (value, variable) => {\n      this[variable] = value;\n    });\n    iterateArray(constructor._vars, (variable) => {\n      this[variable] = this[variable];\n    });\n\n    const argsObject = create(null);\n    let args = create(constructor.defaultArgs || null);\n    let wasDRest;\n\n    iterateObject(originalArgs, (value, arg) => {\n      const isDRest = D_REST_REGEX.test(arg);\n      const localArgs = isDRest || wasDRest\n        ? create(args)\n        : args;\n\n      args = localArgs;\n\n      if (isDRest) {\n        const restArgs = parentScope.$$.evaluate(value, (value) => {\n          iterateObject(localArgs, cleanProperty);\n          assign(localArgs, transformRestArgs(value));\n          calculateArgs(args, argsObject);\n        }, this);\n\n        wasDRest = true;\n\n        return assign(localArgs, transformRestArgs(restArgs));\n      }\n\n      const isDElements = name === 'd-elements';\n      const forDElements = isDElements && arg === 'value';\n\n      wasDRest = false;\n\n      if (name !== 'd-each' || arg !== 'uid') {\n        value = parentScope.$$.evaluate(value, (value) => {\n          localArgs[arg] = value;\n          calculateArgs(args, argsObject);\n        }, this, forDElements, isDElements && parentBlock.$$.name === '#d-item');\n      }\n\n      localArgs[arg] = value;\n    });\n\n    defineFrozenProperties(this, {\n      /**\n       * @member {Object} Block#args\n       * @type {Object}\n       * @public\n       */\n      args: argsObject,\n\n      /**\n       * @member {Object} Block#globals\n       * @type {Object}\n       * @public\n       */\n      globals: create(\n        parentScope\n          ? parentScope.globals\n          : null\n      )\n    });\n\n    calculateArgs(args, argsObject);\n\n    if (parentBlock) {\n      parentBlock.$$.children.push(this);\n    }\n  }\n\n  /**\n   * @method Block#afterConstruct\n   * @public\n   * @description Is called after block construction (including all scopes)\n   * but before rendering the block and its children.\n   */\n  afterConstruct() {}\n\n  /**\n   * @method Block#afterDOMChange\n   * @public\n   * @description Is called after block DOM structure has changed.\n   */\n  afterDOMChange() {}\n\n  /**\n   * @method Block#afterRender\n   * @public\n   * @description Is called after block has been rendered.\n   */\n  afterRender() {}\n\n  /**\n   * @method Block#beforeRemove\n   * @public\n   * @description Is called before the block removal.\n   */\n  beforeRemove() {}\n\n  /**\n   * @method Block#getChildBlocks\n   * @public\n   * @returns {Block[]}\n   * @description Returns child blocks.\n   */\n  getChildBlocks() {\n    return this.$$.blocks.slice();\n  }\n\n  /**\n   * @method Block#getChildBlocks\n   * @public\n   * @returns {Mixin[]}\n   * @description Returns child mixins.\n   */\n  getChildMixins() {\n    return this.$$.mixins.slice();\n  }\n\n  /**\n   * @method Block#getChildren\n   * @public\n   * @returns {Object[]}\n   * @description Returns Block HTML children.\n   */\n  getChildren() {\n    return this.$$.htmlChildren;\n  }\n\n  /**\n   * @method Block#getDOM\n   * @public\n   * @returns {Elem}\n   * @description Returns DOM contents of the block.\n   */\n  getDOM() {\n    return this.$$.content.slice();\n  }\n\n  /**\n   * @method Block#getParentBlock\n   * @public\n   * @returns {Block|void}\n   * @description Returns parent block.\n   */\n  getParentBlock() {\n    return this.$$.parentBlock;\n  }\n\n  /**\n   * @method Block#getParentElem\n   * @public\n   * @returns {Elem|void}\n   * @description Returns parent Elem.\n   */\n  getParentElem() {\n    return this.$$.parentElem.slice();\n  }\n\n  /**\n   * @method Block#getParentScope\n   * @public\n   * @returns {Block|void}\n   * @description Returns parent scope.\n   */\n  getParentScope() {\n    return this.$$.parentScope;\n  }\n\n  /**\n   * @method Block#getParentTemplate\n   * @public\n   * @returns {Block|void}\n   * @description Returns parent template.\n   */\n  getParentTemplate() {\n    return this.$$.parentTemplate;\n  }\n\n  /**\n   * @method Block#evaluate\n   * @public\n   * @param {Function} func - Function to evaluate.\n   * @param {Watcher} [callback] - If present, callback which is called when the expression value is changed.\n   * @param {Block|Mixin} [target = this] - What block or mixin requests the value.\n   * @returns {*} Evaluation result.\n   * @description Method for evaluating an expression in context of the block and watching for the changes.\n   */\n  evaluate(func, callback, target = this) {\n    return this.$$.evaluate(func, callback, target);\n  }\n\n  /**\n   * @method Block#watch\n   * @public\n   * @param {...('args'|'globals'|String)} [vars] - Vars to watch (args, globals or locals).\n   * If no specified all locals, args and globals are to be watched.\n   * If the 'args' string all args are to be watched.\n   * If the 'globals' string all globals are to be watched.\n   * @param {VarsWatcher} watcher - Called when watched vars are changed.\n   * @description Method for watching for vars. If no vars passed in arguments\n   * all vars are to be watched. If the 'args' string is in the arguments all args are to be watched.\n   * If the 'globals' string is in the arguments all globals are to be watched.\n   * Otherwise specified vars will be watched.\n   * Watchers should not be put inside the constructor. It is considered best\n   * practice to do it inside the {@link Block#afterConstruct} method.\n   * Note that these expressions (vars, i.e. \"args.arg\") are not to be\n   * evaluated so you cannot put there things like \"a[b]\" or any js code,\n   * only expressions like \"a\", \"b\", \"args.a\", \"args.b\" and \"globals.a\", \"globals.b\".\n   * Also note that if there are more than one var that are changed at once (synchronously)\n   * the watcher is called only once.\n   * Note that the watcher is executed right away because in most cases\n   * this behaviour is very convenient.\n   *\n   * @example\n   * class MyBlock extends Block {\n   *   static template = '<div />';\n   *\n   *   afterConstruct() {\n   *     this.watch('a', () => {});\n   *     this.watch('args.a', 'globals.r', () => {});\n   *     this.watch(() => {});\n   *   }\n   * }\n   */\n  watch(...vars) {\n    const oldWatcher = arguments[arguments.length - 1];\n\n    if (!isFunction(oldWatcher)) {\n      console.warn(`The last argument (watcher) wasn't specified (${ this.$$.name }#watch)`);\n\n      return;\n    }\n\n    const watcher = () => {\n      oldWatcher();\n    };\n\n    if (arguments.length === 1) {\n      watchForAllLocals(this, watcher);\n      watchForAllArgs(this, watcher);\n      watchForAllGlobals(this, watcher);\n\n      oldWatcher();\n\n      return;\n    }\n\n    iterateArray(arguments, (variable) => {\n      if (variable === oldWatcher) {\n        return;\n      }\n\n      variable = `${ variable }`;\n\n      if (variable === '$') {\n        return watchForAllLocals(this, watcher);\n      }\n\n      if (variable === 'args') {\n        return watchForAllArgs(this, watcher);\n      }\n\n      if (variable === 'globals') {\n        return watchForAllGlobals(this, watcher);\n      }\n\n      if (WATCHED_ARG_PREFIX_REGEX.test(variable)) {\n        variable = variable.replace(WATCHED_ARG_PREFIX_REGEX, '');\n\n        if (!this.$$.args[variable]) {\n          return;\n        }\n\n        this.$$.args[variable].watchers.perm.push(watcher);\n\n        return;\n      }\n\n      if (WATCHED_GLOBAL_PREFIX_REGEX.test(variable)) {\n        variable = variable.replace(WATCHED_GLOBAL_PREFIX_REGEX, '');\n\n        if (!this.$$.globals[variable]) {\n          return;\n        }\n\n        const { watchers } = this.$$.globals[variable];\n\n        watchers.perm.push(watcher);\n        this.$$.watchersToRemove.push({\n          watcher,\n          watchers\n        });\n\n        return;\n      }\n\n      if (!this.$$.locals[variable]) {\n        return;\n      }\n\n      this.$$.locals[variable].watchers.perm.push(watcher);\n    });\n\n    oldWatcher();\n  }\n}\n\nsetToStringTag(Block, 'Block');\nsetProto(Block.prototype, null);\n\nexport { Block };\n","import { findInArray } from '../utils';\nimport { Block } from '../Block';\nimport { rootBlocks } from '../constants';\n\nrootBlocks['d-block'] = class DBlock extends Block {\n  static template = html`\n    <d-elements\n      value=\"{elems}\"\n      parentScope=\"{ParentScope}\"\n      parentTemplate=\"{ParentTemplate}\"\n    />\n  `;\n\n  afterConstruct() {\n    const {\n      parentScope: {\n        $$: {\n          parentScope: parentParentScope,\n          parentTemplate: parentParentTemplate,\n          htmlChildren: children\n        }\n      },\n      htmlChildren: ownChildren,\n      parentTemplate,\n      dBlockName\n    } = this.$$;\n    let found;\n\n    if (ownChildren.length) {\n      return;\n    }\n\n    this.ParentScope = parentParentScope;\n    this.ParentTemplate = parentParentTemplate;\n\n    if (dBlockName) {\n      found = findInArray(children, ({ name: nodeName }) => nodeName === `d-block:${ dBlockName }`);\n\n      if (!found) {\n        let parent = this;\n\n        /* eslint no-empty: 0 */\n        while (\n        (parent = parent.$$.parentScope)\n        && !(found = findInArray(parent.$$.dBlocks, ({ $$: { dBlockName: DBlockName } }) => DBlockName === dBlockName))\n        && parent.$$.parentScope.$$.name === '#d-item'\n          ) {}\n\n        if (found) {\n          this.ParentScope = parent;\n          this.ParentTemplate = parentTemplate;\n          found.value = {\n            children: found.value.$$.htmlChildren\n          };\n        }\n      }\n\n      this.elems = found && found.value.children.length\n        ? found.value.children\n        : null;\n    } else {\n      this.elems = children;\n    }\n  }\n};\n","import { Block } from '../Block';\n\nconst template = html`\n  <d-elements\n    value=\"{$$.htmlChildren}\"\n    parentScope=\"{this}\"\n    parentTemplate=\"{$$.parentTemplate}\"\n  />\n`;\n\nclass DItem extends Block {\n  static template = template;\n  static _vars = template.vars;\n  static _html = template.value;\n}\n\nexport { DItem };\n","import {\n  assign, iterateArray, iterateObject,\n  isArray, isFunction\n} from '../utils';\nimport { remove, createBlock } from '../helpers/Block';\nimport { Block } from '../Block';\nimport { rootBlocks } from '../constants';\nimport { DItem } from './d-item';\n\nconst watchArgs = js`[\n  args.set,\n  args.filterBy,\n  args.sortBy\n]`;\n\nrootBlocks['d-each'] = class DEach extends Block {\n  constructor(opts) {\n    super(opts);\n\n    const {\n      args: {\n        item: itemName = '$item',\n        index: indexName = '$index'\n      }\n    } = this;\n\n    assign(this.$$, {\n      itemsByUIDs: {},\n      UID: this.args.uid || undefined,\n      itemName,\n      indexName\n    });\n  }\n\n  afterRender() {\n    this.evaluate(watchArgs, this.renderSet);\n    this.renderSet();\n  }\n\n  renderSet = () => {\n    const {\n      htmlChildren,\n      itemsByUIDs,\n      parentScope,\n      parentElem,\n      parentTemplate,\n      scope,\n      itemName,\n      indexName,\n      UID\n    } = this.$$;\n    const {\n      args: { sortBy }\n    } = this;\n    const newItemsByUIDs = {};\n    const newUIDsCounter = {};\n    const newUIDs = {};\n    let {\n      set,\n      filterBy\n    } = this.args;\n    const isArr = isArray(set);\n    const iterate = isArr\n      ? iterateArray\n      : iterateObject;\n\n    if (isArr && isFunction(sortBy)) {\n      set = set\n        .slice()\n        .sort(sortBy);\n    }\n\n    if (isFunction(filterBy)) {\n      filterBy = [filterBy];\n    }\n\n    if (isArray(filterBy)) {\n      iterateArray(filterBy, (filter) => {\n        set = set.filter(filter);\n      });\n    }\n\n    iterate(set, (item, index) => {\n      scope[itemName] = item;\n      scope[indexName] = index;\n\n      const uid = parentScope.$$.evaluate(UID, null, null, false, false, this);\n\n      newUIDsCounter[uid] = (newUIDsCounter[uid] || 0) + 1;\n      newUIDs[index] = uid;\n    });\n\n    scope[itemName] = null;\n    scope[indexName] = null;\n\n    iterateObject(itemsByUIDs, (items, uid) => {\n      if (!newUIDsCounter[uid]) {\n        iterateArray(items, remove);\n\n        return;\n      }\n\n      iterateArray(items.splice(newUIDsCounter[uid]), remove);\n    });\n\n    let prevBlock;\n\n    iterate(set, (item, index) => {\n      const uid = newUIDs[index];\n      let block;\n\n      if (itemsByUIDs[uid] && itemsByUIDs[uid].length) {\n        block = itemsByUIDs[uid].shift();\n        block.$$.scope[indexName] = index;\n        block.$$.scope[itemName] = item;\n\n        if (block.$$.prevBlock !== prevBlock && prevBlock) {\n          prevBlock.$$.insertAfterIt(block.$$.content, true);\n        }\n      } else {\n        block = createBlock({\n          node: {\n            itemName,\n            indexName,\n            item,\n            index,\n            name: '#d-item',\n            children: htmlChildren\n          },\n          Constructor: DItem,\n          parent: this,\n          parentElem,\n          parentBlock: this,\n          parentScope,\n          parentTemplate,\n          prevBlock\n        });\n      }\n\n      (newItemsByUIDs[uid] = newItemsByUIDs[uid] || []).push(block);\n      block.$$.prevBlock = prevBlock;\n      prevBlock = block;\n    });\n\n    this.$$.itemsByUIDs = newItemsByUIDs;\n  };\n};\n","import { iterateArray, removeArrayElem } from '../utils';\nimport { removeWithParentSignal, createBlock } from '../helpers/Block';\nimport { Block } from '../Block';\nimport { Elem } from '../Elem';\nimport { rootBlocks } from '../constants';\n\nconst watchArgs = js`args.value`;\n\nrootBlocks['d-elements'] = class DElements extends Block {\n  afterConstruct() {\n    const { parentElem } = this.$$;\n    const {\n      Constructor,\n      parentScope,\n      parentTemplate\n    } = this.args;\n\n    this.$$.evaluate(watchArgs, () => {\n      const {\n        children,\n        mixins,\n        parent,\n        watchersToRemove,\n        content\n      } = this.$$;\n      const { value } = this.args;\n\n      iterateArray(children, removeWithParentSignal);\n      iterateArray(mixins, removeWithParentSignal);\n      content.remove();\n\n      if (parent instanceof Block) {\n        parent.$$.removeContent(content);\n      }\n\n      this.$$.children = [];\n      this.$$.mixins = [];\n      this.$$.watchersToRemove = watchersToRemove.filter(({ watchers, watcher, forDElements }) => {\n        if (forDElements) {\n          return true;\n        }\n\n        removeArrayElem(watchers, watcher);\n      });\n      this.$$.content = new Elem();\n\n      let prevBlock;\n\n      iterateArray(value || [], (child) => {\n        prevBlock = createBlock({\n          node: child,\n          Constructor,\n          parent: this,\n          parentElem,\n          parentBlock: this,\n          parentScope,\n          parentTemplate,\n          prevBlock\n        });\n      });\n    }, this, true);\n  }\n};\n","import { findInArray } from '../utils';\nimport { Block } from '../Block';\nimport { rootBlocks } from '../constants';\n\nrootBlocks['d-if'] = class DIf extends Block {\n  static template = html`\n    <d-elements\n      value=\"{elems}\"\n      parentScope=\"{$$.parentScope}\"\n      parentTemplate=\"{$$.parentTemplate}\"\n    />\n  `;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      parentScope,\n      htmlChildren\n    } = this.$$;\n    let index = Infinity;\n    const values = htmlChildren.map((child, i) => {\n      const {\n        name,\n        attrs = {},\n        children\n      } = child;\n      let cond = attrs.if;\n\n      if (name !== 'd-else' && cond) {\n        cond = parentScope.$$.evaluate(cond, (newValue) => {\n          if (!!newValue === values[i]) {\n            return;\n          }\n\n          values[i] = !!newValue;\n\n          if (i > index) {\n            return;\n          }\n\n          if (i < index) {\n            index = i;\n            this.elems = children;\n\n            return;\n          }\n\n          const found = findInArray(values, Boolean);\n\n          if (found) {\n            index = found.key;\n            this.elems = htmlChildren[found.key].children;\n          } else {\n            index = Infinity;\n            this.elems = null;\n          }\n        }, this);\n      } else {\n        cond = true;\n      }\n\n      if (cond && index === Infinity) {\n        index = i;\n        this.elems = children;\n      }\n\n      return !!cond;\n    });\n  }\n};\n","import { collectFromObject, iterateObject, keys } from '../utils';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-attr'] = class DAttr extends Mixin {\n  attrs = {};\n\n  afterUpdate(newValue) {\n    const {\n      elem,\n      args,\n      attrs\n    } = this;\n\n    if (args) {\n      newValue = collectFromObject(args, (attrs, attr) => {\n        attrs[attr] = newValue;\n      });\n    }\n\n    iterateObject(attrs, (value, prop) => {\n      if (!(prop in newValue)) {\n        elem.removeAttr(prop);\n      }\n    });\n    elem.attr(newValue);\n\n    this.attrs = newValue;\n  }\n\n  beforeRemove() {\n    const {\n      elem,\n      attrs\n    } = this;\n\n    elem.removeAttr.apply(elem, keys(attrs));\n  }\n};\n\n","import { isFunction } from '../utils';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-bind'] = class DBind extends Mixin {\n  afterUpdate(value) {\n    if (this.off) {\n      this.off();\n    }\n\n    if (!isFunction(value)) {\n      return;\n    }\n\n    if (this.args) {\n      this.off = this.elem.on(this.args.join(','), value);\n    } else {\n      console.error('Provide \"d-bind\" mixin with an event names (like \"d-bind(click)\" or \"d-bind(keyup, keypress)\")!');\n    }\n  }\n\n  beforeRemove() {\n    const { off } = this;\n\n    if (off) {\n      off();\n    }\n  }\n};\n","import {\n  isArray, isString,\n  iterateArray, iterateObject\n} from '../utils';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nconst EMPTY_SPACE_REGEX = /\\s+/;\n\nrootMixins['d-class'] = class DClass extends Mixin {\n  classes = [];\n\n  afterUpdate(newValue) {\n    const {\n      elem,\n      args,\n      classes\n    } = this;\n    const newClasses = [];\n\n    if (args) {\n      newValue = newValue\n        ? args\n        : [];\n    }\n\n    if (isString(newValue)) {\n      newValue = newValue.split(EMPTY_SPACE_REGEX);\n    }\n\n    if (isArray(newValue)) {\n      iterateArray(classes, (cls) => {\n        if (newValue.indexOf(cls) === -1) {\n          elem.removeClass(cls);\n        }\n      });\n      iterateArray(newValue, (cls) => {\n        if (isString(cls)) {\n          newClasses.push(cls);\n          elem.addClass(cls);\n        }\n      });\n    } else {\n      iterateArray(classes, (cls) => {\n        if (!newValue || !newValue[cls]) {\n          elem.removeClass(cls);\n        }\n      });\n      iterateObject(newValue, (val, cls) => {\n        if (val) {\n          newClasses.push(cls);\n          elem.addClass(cls);\n        }\n      });\n    }\n\n    this.classes = newClasses;\n  }\n\n  beforeRemove() {\n    const {\n      elem,\n      classes\n    } = this;\n\n    elem.removeClass.apply(elem, classes);\n  }\n};\n","import { isFunction, isString } from '../utils';\nimport { Block } from '../Block';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-elem'] = class DElem extends Mixin {\n  static evaluate = false;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      args,\n      parentTemplate,\n      elem\n    } = this;\n    let scope = parentTemplate;\n    let value = this.evaluate();\n\n    if (args) {\n      scope = value instanceof Block\n        ? value\n        : parentTemplate;\n      value = args[0];\n    }\n\n    if (isFunction(value)) {\n      value(elem);\n    } else if (isString(value)) {\n      scope[value] = elem;\n    }\n  }\n};\n","import { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-hide'] = class DHide extends Mixin {\n  afterUpdate(value) {\n    const { elem } = this;\n\n    if (value) {\n      elem.hide();\n    } else {\n      elem.show();\n    }\n  }\n\n  beforeRemove() {\n    this.elem.show();\n  }\n};\n","import { isFunction, isString } from '../utils';\nimport { Block } from '../Block';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-node'] = class DNode extends Mixin {\n  static evaluate = false;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      args,\n      parentTemplate,\n      node\n    } = this;\n    let scope = parentTemplate;\n    let value = this.evaluate();\n\n    if (args) {\n      scope = value instanceof Block\n        ? value\n        : parentTemplate;\n      value = args[0];\n    }\n\n    if (isFunction(value)) {\n      value(node);\n    } else if (isString(value)) {\n      scope[value] = node;\n    }\n  }\n};\n","import { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-on'] = class DOn extends Mixin {\n  static evaluate = false;\n\n  constructor(opts) {\n    super(opts);\n\n    if (this.args) {\n      this.off = this.elem.on(this.args.join(','), () => {\n        this.evaluate();\n      });\n    } else {\n      console.error('Provide \"d-on\" mixin with an event names (like \"d-on(click)\" or \"d-on(keyup, keypress)\")!');\n    }\n  }\n\n  beforeRemove() {\n    const { off } = this;\n\n    if (off) {\n      off();\n    }\n  }\n};\n","import { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-show'] = class DShow extends Mixin {\n  afterUpdate(value) {\n    const { elem } = this;\n\n    if (value) {\n      elem.show();\n    } else {\n      elem.hide();\n    }\n  }\n\n  beforeRemove() {\n    this.elem.show();\n  }\n};\n","import { iterateObject } from '../../utils';\nimport { rootBlocks, rootMixins } from '../../constants';\nimport { constructMixinRegex } from './constructMixinRegex';\n\niterateObject(rootBlocks, (Block) => {\n  Block._vars = Block.template.vars;\n  Block._html = Block.template.value;\n});\n\niterateObject(rootMixins, (Mixin, name) => {\n  Mixin._match = constructMixinRegex(name);\n});\n","import { Elem } from './Elem';\nimport { createHideStyleNode } from './helpers/Elem';\n\nconst {\n  document = {}\n} = global;\n\n/**\n * @const {Elem} doc\n * @type {Elem}\n * @public\n * @description Elem instance of document.\n */\nexport const doc = new Elem(document);\n\n/**\n * @const {Elem} html\n * @type {Elem}\n * @public\n * @description Elem instance of document.documentElement.\n */\nexport const html = new Elem(document.documentElement);\n\n/**\n * @const {Elem} body\n * @type {Elem}\n * @public\n * @description Elem instance of document.body.\n */\nexport const body = new Elem(document.body);\n\n/**\n * @const {Elem} head\n * @type {Elem}\n * @public\n * @description Elem instance of document.head.\n */\nexport const head = new Elem(document.head);\n\ncreateHideStyleNode(head);\n"],"names":["collectFromArray","array","callback","initialValue","value","index","findInArray","i","length","iterateArray","removeArrayElem","elem","indexOf","splice","toObjectKeys","addKey","vars","variable","assign","target","arguments","source","key","collectFromObject","object","except","newObject","paths","slice","hasOwnProperty","has","iterateObject","mapObject","definePrototypeProperties","properties","name","defineProperty","defineFrozenProperties","toStringTag","toString","setToStringTag","tag","Symbol","prototype","isFunction","isNil","isString","escapeRegex","string","replace","regexpSpecialsRegexp","toCamelCase","DASHED_SYMBOL_REGEX","capitalize","toHyphenCase","UPPERCASED_SYMBOL_REGEX","hyphenize","match","toUpperCase","toLowerCase","addAttr","attrs","attr","addCSSProp","css","property","split","CSS_PROP_VALUE_SEPARATOR_REGEX","addDataAttr","data","addNext","add","nextSibling","addParent","parentNode","addPrev","previousSibling","createHideStyleNode","head","find","HIDE_CLASS","create","prop","text","getAttrNS","nodeName","XML_NS","X_LINK_ATTR_REGEX","test","Elem","closest","X_LINK_NS","hide","ownerDocument","addClass","isElem","isElementsCollection","HTML_COLLECTION_REGEX","isArray","isHTMLDocument","isValidNode","ELEMENT_REGEX","remove","parent","removeChild","show","removeClass","toElem","selector","base","document","querySelectorAll","String","calculateArgs","args","argsObject","keys","arg","undefined","cleanProperty","constructMixinRegex","RegExp","mixinMatch","mixins","Mixin","localMatch","_match","argsMatch","COMMA_REGEX","transformRestAttrs","mixinDefaultOpts","eventualAttrs","D_REST_REGEX","transformRestArgs","addArgs","executeMixinWatchers","mixin","oldValue","$$","watchers","watcher","createMixin","dynamic","comment","parentBlock","parentScope","parentTemplate","evaluate","newValue","afterUpdate","err","error","calculateAttrs","attrsObject","firstTime","type","removeAttr","opts","nextType","nextDynamic","nextValue","prevType","prevValue","isDynamic","evaluated","buildMixin","firstValue","push","constructPrivateScope","scope","globals","removeTempWatcher","onRemove","removeWatchers","watchersToRemove","removeWatcher","constructPublicScope","scopeValues","privateScope","Scope","evalMode","gettingVars","temp","changed","oldTempWatchers","was","values","perm","createBlock","node","Constructor","parentElem","prevBlock","doc","namespaceURI","SVG_NS","localBlocks","ns","_blocks","Block","localMixins","_mixins","children","constructor","dBlockMatch","dBlockName","dBlockArgs","dBlockChildren","dElementsName","dElementsConstructor","NAMED_D_BLOCK_REGEX","blockInstance","element","currentAttrs","wasDRest","isDRest","localAttrs","restAttrs","createMixins","content","child","isParentBlock","insertAfterIt","insertAfter","addContent","insertInStartOfIt","into","Args","locals","newName","newConstructor","html","_html","itemName","item","indexName","afterConstruct","isRendered","afterRender","extendBlock","cls","isInstanceOf","Class","Subclass","isPrototypeOf","removeWithParentSignal","watchForAllLocals","block","watchForAllGlobals","glob","watchForAllArgs","wrapBlock","wrapper","returnValue","wrapMixin","initApp","container","Error","RootBlock","_vars","equals","value1","value2","getProp","hasAttr","getValueForSetting","inputValue","isRadio","getValueForGetting","options","init","isMultiple","addValue","concat","getListenerName","getEvalFunction","selected","insertTemplates","template","templates","forEachNode","tree","trim","newTemplates","newVars","removeApp","DwayneRootBlock","window","global","self","defineProperties","Object","Array","regexpSpecialCharacters","map","s","join","getProto","getPrototypeOf","setProto","setPrototypeOf","proto","__proto__","rootBlocks","rootMixins","CSS_IMPORTANT_REGEX","EVENT_REGEX","emptyCollection","_this","includes","this","elems","forEach","list","classList","attributes","getAttributeNS","getAttribute","setAttributeNS","setAttribute","childNodes","collect","is","elements","cb","contains","el","isText","createTextNode","createComment","documentElement","createElementNS","style","getPropertyValue","getPropertyPriority","removeCSS","removeProperty","setProperty","cssText","dataset","event","details","bubbles","cancelable","realDetails","finalEvent","Event","createEvent","initEvent","dispatchEvent","filterFn","Boolean","hasAttributeNS","hasAttribute","innerHTML","next","insertBefore","appendChild","end","firstChild","matches","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","call","listener","newEvents","allListeners","listeners","addEventListener","removeEventListener","removeListeners","removeListener","removeAttributeNS","removeAttribute","first","method","prev","babelHelpers.get","apply","textContent","condition","_arguments5","toggle","_arguments6","species","_value","currentValue","isParentSignal","isRemoved","beforeRemove","wrappers","reduce","blockHooks","mixinHooks","TAG_NAME_REGEX","ATTR_NAME_REGEX","WATCHED_ARG_PREFIX_REGEX","WATCHED_GLOBAL_PREFIX_REGEX","afterElem","originalArgs","childrenBlocks","func","onChange","targetBlock","forDElements","forDItem","forDEach","onChangeFlag","result","expression","original","onEvalError","e","localWatchers","newResult","watcherBlock","removeContent","_this8","newContent","afterDOMChange","contentToAdd","notRecursive","oldContent","changeContent","contentToMove","after","indexToPut","moveContent","contentToRemove","filter","contentToInsert","moveFlag","tryToAddOrMove","defaultLocals","defaultArgs","localArgs","restArgs","isDElements","hook","warn","currentReturnValue","blocks","htmlChildren","oldWatcher","_this9","parentParentScope","parentParentTemplate","ownChildren","found","ParentScope","ParentTemplate","dBlocks","DItem","watchArgs","uid","renderSet","_this2","itemsByUIDs","UID","sortBy","newItemsByUIDs","newUIDsCounter","newUIDs","set","filterBy","isArr","iterate","sort","items","shift","Infinity","cond","if","wasDefault","val","off","on","classes","newClasses","initialScopeValue","setProp","initialElemValue","isInitialScopeValueNull","isCheckbox","changeScope","offElemListener","offFormListener","option","body"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}