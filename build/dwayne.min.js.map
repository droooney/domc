{"version":3,"file":"dwayne.min.js","sources":["../lib/helpers/toStringTag.js","../lib/helpers/checkTypes.js","../lib/D.js","../lib/helpers/iterate.js","../lib/helpers/assign.js","../lib/helpers/defineProperty.js","../lib/helpers/toArray.js","../lib/helpers/validate.js","../lib/Alphabet.js","../lib/Switcher.js","../lib/Super.js","../lib/Func.js","../lib/Num.js","../lib/Arr.js","../lib/BlobObject.js","../lib/Str.js","../lib/helpers/markupToJSON.js","../lib/Elem.js","../lib/blocks/d-block.js","../lib/blocks/d-each.js","../lib/blocks/d-elements.js","../lib/blocks/d-if.js","../lib/blocks/d-item.js","../lib/blocks/d-switch.js","../lib/blocks/d-text.js","../lib/mixins/d-attr.js","../lib/mixins/d-bind.js","../lib/mixins/d-class.js","../lib/mixins/d-elem.js","../lib/mixins/d-hide.js","../lib/mixins/d-on.js","../lib/mixins/d-show.js","../lib/mixins/d-style.js","../lib/mixins/d-text.js","../lib/mixins/d-validate.js","../lib/mixins/d-value.js","../lib/Block.js","../lib/constants/formats.js","../lib/Dat.js","../lib/helpers/constructURL.js","../lib/Fetch.js","../lib/Router.js","../lib/constants/global.js","../lib/constants/appliedRegExps.js","../lib/constants/canvasMethods.js","../lib/constants/constructors.js","../lib/constants/elements.js","../lib/constants/htmlAllowedTagSymbols.js","../lib/constants/regexpSpecialCharacters.js","../lib/constants/validateCheckExpressions.js","../lib/helpers/Symbol.js","../lib/Promise.js","../lib/helpers/parseHeaders.js","../lib/helpers/transformData.js","../lib/helpers/resolveURL.js","../browser.js"],"sourcesContent":["/**\r\n * @module helpers/toStringTag\r\n * @private\r\n * @description Exports toStringTag method.\r\n */\r\n\r\n/**\r\n * @function toStringTag\r\n * @param {*} object - Object to get toStringTag of.\r\n * @returns {String} Cut string.\r\n * @description Cut \"Type\" string from \"[object Type]\" string that gotten from {}.toString,call(object).\r\n */\r\nexport function toStringTag(object) {\r\n  return {}.toString.call(object).replace(/^\\[object |]$/g, '');\r\n}\r\n","/**\r\n * @module helpers/checkTypes\r\n * @private\r\n * @mixin\r\n * @description Exports is<Type> methods.\r\n */\r\n\r\nimport { toStringTag } from './toStringTag';\r\n\r\n/**\r\n * @function isArray\r\n * @public\r\n * @param {*} value - Value to check if it is an array.\r\n * @returns {Boolean} If the argument is an array or not.\r\n * \r\n * @example\r\n * isArray([]);                             // true\r\n * isArray(0);                              // true\r\n * isArray(document.querySelectorAll('*')); // false\r\n */\r\nexport function isArray(value) {\r\n  return toStringTag(value) === 'Array';\r\n}\r\n\r\n/**\r\n * @function isArrayLike\r\n * @public\r\n * @param {*} value - Value to check if it is array-like.\r\n * @returns {Boolean} If the argument is array-like or not.\r\n * @description Basically returns if the argument has non-negative integer \"length\" property and isn't a function.\r\n * \r\n * @example\r\n * isArrayLike([]);                             // true\r\n * isArrayLike('');                             // true\r\n * isArrayLike(() => {});                       // false\r\n * isArrayLike(document.querySelectorAll('*')); // true\r\n */\r\nexport function isArrayLike(value) {\r\n  if (!value || isFunction(value)) {\r\n    return false;\r\n  }\r\n  \r\n  const length = value.length;\r\n  \r\n  return isInteger(length) && length >= 0;\r\n}\r\n\r\n/**\r\n * @function isBoolean\r\n * @public\r\n * @param {*} value - Value to check if it is a boolean.\r\n * @returns {Boolean} If the argument is a boolean or not.\r\n * \r\n * @example\r\n * isBoolean(true);               // true\r\n * isBoolean(new Boolean(false)); // true\r\n * isBoolean(null);               // false\r\n */\r\nexport function isBoolean(value) {\r\n  return toStringTag(value) === 'Boolean';\r\n}\r\n\r\n/**\r\n * @function isDate\r\n * @public\r\n * @param {*} value - Value to check if it is a date.\r\n * @returns {Boolean} If the argument is a date or not.\r\n * \r\n * @example\r\n * isDate(new Date());                 // true\r\n * isDate('1999-12-31T23:59:59.999Z'); // false\r\n */\r\nexport function isDate(value) {\r\n  return toStringTag(value) === 'Date';\r\n}\r\n\r\n/**\r\n * @function isDateLike\r\n * @public\r\n * @param {*} value - Value to check if it is date-like.\r\n * @returns {Boolean} If the argument is date-like or not.\r\n * @description Basically returns if new Date(argument) is not invalid date.\r\n * \r\n * @example\r\n * isDateLike(new Date());                 // true\r\n * isDateLike('1999-12-31T23:59:59.999Z'); // true\r\n * isDateLike(0);                          // true\r\n */\r\nexport function isDateLike(value) {\r\n  value = new Date(value);\r\n  \r\n  return !isNaN(value.getTime());\r\n}\r\n\r\n/**\r\n * @function isElement\r\n * @public\r\n * @param {*} value - Value to check if it is an element.\r\n * @returns {Boolean} If the argument is element or not.\r\n *\r\n * @example\r\n * isElement(document.querySelector('html')); // true\r\n */\r\nexport function isElement(value) {\r\n  return /Element$/.test(toStringTag(value));\r\n}\r\n\r\n/**\r\n * @function isFinite\r\n * @public\r\n * @param {*} value - Value to check if it is finite.\r\n * @returns {Boolean} If the argument is finite or not.\r\n * \r\n * @example\r\n * isFinite(0);        // true\r\n * isFinite('0');      // false\r\n * isFinite(Infinity); // false\r\n * isFinite(NaN);      // false\r\n */\r\nexport function isFinite(value) {\r\n  if (!isNumber(value)) {\r\n    return false;\r\n  }\r\n  \r\n  value = Number(value);\r\n\r\n  return !isNaN(value) && value !== Infinity && value !== -Infinity;\r\n}\r\n\r\n/**\r\n * @function isFunction\r\n * @public\r\n * @param {*} value - Value to check if it is a function.\r\n * @returns {Boolean} If the argument is a function or not.\r\n * \r\n * @example\r\n * isFunction(() => {});            // true\r\n * \r\n * const func = () => {};\r\n * Object.setPrototypeOf(func, {});\r\n * isFunction(func);                // true\r\n */\r\nexport function isFunction(value) {\r\n  return toStringTag(value) === 'Function' || typeof value === 'function';\r\n}\r\n\r\n/**\r\n * @function isInteger\r\n * @public\r\n * @param {*} value - Value to check if it is an integer.\r\n * @returns {Boolean} If the argument is an integer or not.\r\n *\r\n * @example\r\n * isInteger(0);             // true\r\n * isInteger(0.1);           // false\r\n * isInteger(new Number(0)); // true\r\n * isInteger('0');           // false\r\n * isInteger(Infinity);      // false\r\n * isInteger(NaN);           // false\r\n */\r\nexport function isInteger(value) {\r\n  return isNumber(value) && value % 1 === 0;\r\n}\r\n\r\n/**\r\n * @function isIntegerLike\r\n * @public\r\n * @param {*} value - Value to check if it is integer-like.\r\n * @returns {Boolean} If the argument is integer-like or not.\r\n *\r\n * @example\r\n * isIntegerLike(0);             // true\r\n * isIntegerLike(new Number(0)); // true\r\n * isIntegerLike(0.1);           // false\r\n * isIntegerLike('0');           // true\r\n */\r\nexport function isIntegerLike(value) {\r\n  value = parseInt(Number(value));\r\n\r\n  return !!(value || value === 0);\r\n}\r\n\r\n/**\r\n * @function isNaN\r\n * @public\r\n * @param {*} value - Value to check if it is NaN.\r\n * @returns {Boolean} If the argument is NaN or not.\r\n *\r\n * @example\r\n * isNaN(0);               // false\r\n * isNaN('NaN');           // false\r\n * isNaN(NaN);             // true\r\n * isNaN(new Number(NaN)); // true\r\n */\r\nexport function isNaN(value) {\r\n  if (!isNumber(value)) {\r\n    return false;\r\n  }\r\n  \r\n  value = Number(value);\r\n\r\n  return value !== value;\r\n}\r\n\r\n/**\r\n * @function isNull\r\n * @public\r\n * @param {*} value - Value to check if it is null.\r\n * @returns {Boolean} If the argument is null or not.\r\n *\r\n * @example\r\n * isNull(null);      // true\r\n * isNull(undefined); // false\r\n */\r\nexport function isNull(value) {\r\n  return value === null;\r\n}\r\n\r\n/**\r\n * @function isNil\r\n * @public\r\n * @param {*} value - Value to check if it is null or undefined.\r\n * @returns {Boolean} If the argument is null or undefined or not.\r\n *\r\n * @example\r\n * isNil(null);      // true\r\n * isNil(undefined); // true\r\n * isNil(false);     // false\r\n */\r\nexport function isNil(value) {\r\n  return value === null || typeof value === 'undefined';\r\n}\r\n\r\n/**\r\n * @function isNumber\r\n * @public\r\n * @param {*} value - Value to check if it is a number.\r\n * @returns {Boolean} If the argument is a number or not.\r\n *\r\n * @example\r\n * isNumber(0);             // true\r\n * isNumber(new Number(0)); // true\r\n * isNumber(NaN);           // true\r\n * isNumber('0');           // false\r\n */\r\nexport function isNumber(value) {\r\n  return toStringTag(value) === 'Number';\r\n}\r\n\r\n/**\r\n * @function isNumberLike\r\n * @public\r\n * @param {*} value - Value to check if it is number-like.\r\n * @returns {Boolean} If the argument is number-like or not.\r\n *\r\n * @example\r\n * isNumberLike(0);          // true\r\n * isNumberLike('0');        // true\r\n * isNumberLike('Infinity'); // true\r\n * isNumberLike('NaN');      // true\r\n * isNumberLike(NaN);        // true\r\n */\r\nexport function isNumberLike(value) {\r\n  if (isNaN(value) || value === 'NaN') {\r\n    return true;\r\n  }\r\n  \r\n  value = Number(value);\r\n  \r\n  return !!(value || value === 0);\r\n}\r\n\r\n/**\r\n * @function isObject\r\n * @public\r\n * @param {*} value - Value to check if it is an object.\r\n * @returns {Boolean} If the argument is an object or not.\r\n *\r\n * @example\r\n * isObject({});   // true\r\n * isObject(1);    // false\r\n * isObject(null); // false\r\n */\r\nexport function isObject(value) {\r\n  return !!value && (toStringTag(value) === 'Object' || typeof value === 'object' || value instanceof Object);\r\n}\r\n\r\n/**\r\n * @function isPlainObject\r\n * @public\r\n * @param {*} value - Value to check if it is a plain object.\r\n * @returns {Boolean} If the argument is a plain object or not.\r\n *\r\n * @example\r\n * const obj = {};\r\n *\r\n * ifPlainObject(obj); // true\r\n *\r\n * Object.setPrototypeOf(object, null);\r\n *\r\n * ifPlainObject(obj); // true\r\n *\r\n * Object.setPrototypeOf(object, {});\r\n *\r\n * ifPlainObject(obj); // false\r\n */\r\nexport function isPlainObject(value) {\r\n  if (isPrimitive(value)) {\r\n    return false;\r\n  }\r\n\r\n  const proto = Object.getPrototypeOf(value);\r\n\r\n  if (isNull(proto)) {\r\n    return true;\r\n  }\r\n\r\n  const constructor = proto.constructor;\r\n\r\n  return isFunction(constructor) &&\r\n    constructor instanceof constructor &&\r\n    isNull(Object.getPrototypeOf(proto));\r\n}\r\n\r\n/**\r\n * @function isPrimitive\r\n * @public\r\n * @param {*} value - Value to check if it is primitive.\r\n * @returns {Boolean} If the argument is primitive or not.\r\n *\r\n * @example\r\n * isPrimitive(1);             // true\r\n * isPrimitive({});            // false\r\n * isPrimitive('');            // true\r\n * isPrimitive(new Number(0)); // false\r\n * isPrimitive(true);          // true\r\n * isPrimitive(Symbol('foo')); // true\r\n * isPrimitive(null);          // true\r\n * isPrimitive(undefined);     // true\r\n */\r\nexport function isPrimitive(value) {\r\n  return isNull(value) || /^(number|string|boolean|symbol|undefined)$/.test(typeof value);\r\n}\r\n\r\n/**\r\n * @function isRegExp\r\n * @public\r\n * @param {*} value - Value to check if it is a regular expression.\r\n * @returns {Boolean} If the argument is a regular expression or not.\r\n *\r\n * @example\r\n * isRegExp(/foo/);             // true\r\n * isRegExp('/foo/');           // false\r\n * isRegExp(new RegExp('foo')); // true\r\n */\r\nexport function isRegExp(value) {\r\n  return toStringTag(value) === 'RegExp';\r\n}\r\n\r\n/**\r\n * @function isString\r\n * @public\r\n * @param {*} value - Value to check if it is a string.\r\n * @returns {Boolean} If the argument is a string or not.\r\n *\r\n * @example\r\n * isString('0');             // true\r\n * isString(new String('0')); // true\r\n */\r\nexport function isString(value) {\r\n  return toStringTag(value) === 'String';\r\n}\r\n\r\n/**\r\n * @function isSymbol\r\n * @public\r\n * @param {*} value - Value to check if it is a symbol.\r\n * @returns {Boolean} If the argument is a symbol or not.\r\n *\r\n * @example\r\n * isSymbol(Symbol('1')); // true\r\n */\r\nexport function isSymbol(value) {\r\n  return toStringTag(value) === 'Symbol';\r\n}\r\n\r\n/**\r\n * @function isUndefined\r\n * @public\r\n * @param {*} value - Value to check if it is undefined.\r\n * @returns {Boolean} If the argument is undefined or not.\r\n *\r\n * @example\r\n * isUndefined(null);      // false\r\n * isUndefined(undefined); // true\r\n */\r\nexport function isUndefined(value) {\r\n  return typeof value === 'undefined';\r\n}\r\n","/**\r\n * @module D\r\n * @private\r\n * @description Exports D function.\r\n */\r\n\r\nimport { constructors } from './constants';\r\n\r\n/**\r\n * @function D\r\n * @public\r\n * @param {*} [value] - Any value.\r\n * @returns {DWrap} Wrap of the argument.\r\n * @description Function for creating a D-wrap of an object.\r\n *\r\n * @example\r\n * D({});            // Super\r\n * D(() => {});      // Func\r\n * D([]);            // Arr\r\n * D(1);             // Num\r\n * D('1');           // Str\r\n * D(new Date());    // Dat\r\n * D(document.body); // Elem\r\n */\r\nfunction D(value) {\r\n  for (let i = constructors.length - 1; i >= 0; i--) {\r\n    const levelConstructors = constructors[i];\r\n\r\n    for (let k = 0, len = levelConstructors.length; k < len; k++) {\r\n      const constructor = levelConstructors[k];\r\n\r\n      if (value instanceof constructor.cls) {\r\n        return value;\r\n      }\r\n\r\n      if (constructor.check(value)) {\r\n        return new constructor.cls(value);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport * from './helpers/checkTypes';\r\nexport { D };\r\n","/**\r\n * @module helpers/iterate\r\n * @private\r\n * @description Exports iterate method.\r\n */\r\n\r\nimport { isArrayLike, isUndefined } from './checkTypes';\r\n\r\n/**\r\n * @callback IterationCallback\r\n * @param {*} value - Iteration value.\r\n * @param {String|Number} key - Iteration key.\r\n * @param {*} object - Initial iterable object.\r\n */\r\n\r\n/**\r\n * @function iterate\r\n * @param {(Object|Array|null|undefined)} object - Value to iterate over.\r\n * @param {IterationCallback} callback - Callback that is called on every iteration.\r\n * @returns {*} If callback returns not undefined then iterate returns this value.\r\n * @description Function for iterating over all types of values.\r\n */\r\nexport function iterate(object, callback) {\r\n  const array = isArrayLike(object);\r\n  const iteratedKeys = {};\r\n\r\n  let iterated = 0;\r\n\r\n  for (const key in object) {\r\n    if ({}.hasOwnProperty.call(iteratedKeys, key)) {\r\n      continue;\r\n    }\r\n\r\n    iteratedKeys[key] = true;\r\n\r\n    if ({}.hasOwnProperty.call(object, key)) {\r\n      if (array && iterated++ >= object.length) {\r\n        break;\r\n      }\r\n\r\n      const value = callback(object[key], array ? Number(key) : key, object);\r\n\r\n      if (!isUndefined(value)) {\r\n        return value;\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @module helpers/assign\r\n * @private\r\n * @description Exports Object.assign-like method.\r\n */\r\n\r\nimport { iterate } from './iterate';\r\n\r\n/**\r\n * @const\r\n * @function assign\r\n * @param {Object} target - Object to assign rest of arguments to.\r\n * @param {...Object} objects - Objects that are assigned to the target.\r\n * @returns {Object} Target.\r\n */\r\nexport function assign(target, ...objects) {\r\n  iterate(arguments, (source, index) => {\r\n    if (index) {\r\n      iterate(source, (value, key) => {\r\n        target[key] = value;\r\n      });\r\n    }\r\n  });\r\n    \r\n  return target;\r\n}\r\n","/**\r\n * @module helpers/defineProperty\r\n * @private\r\n * @description Exports defineProperty and dynamicDefineProperties methods.\r\n */\r\n\r\nimport { iterate } from './iterate';\r\n\r\n/**\r\n * @callback propertyGeneratorCallback\r\n * @param {String} name - Name of the property.\r\n * @param {Number} i - Index of the array.\r\n * @returns {*} Generated property.\r\n */\r\n\r\n/**\r\n * @function dynamicDefineProperties\r\n * @param {Object} target - Object to define properties for.\r\n * @param {Array} properties - Object which keys are properties.\r\n * @param {propertyGeneratorCallback} propertyGenerator - Callback for every property.\r\n * @returns {void}\r\n * @description Function for dynamic creating properties based on name of the method.\r\n */\r\nexport function dynamicDefineProperties(target, properties, propertyGenerator) {\r\n  iterate(properties, (name, i) => {\r\n    Object.defineProperty(target, name, {\r\n      value: propertyGenerator(name, i),\r\n      writable: true,\r\n      enumerable: false,\r\n      configurable: true\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * @function defineProperties\r\n * @param {Object} target - Target to define properties for.\r\n * @param {Object} properties - Object with properties needed to be assign to the target.\r\n * @returns {void}\r\n * @description Function for defining properties of an object.\r\n */\r\nexport function defineProperties(target, properties) {\r\n  iterate(properties, (method, name) => {\r\n    if (/^get /.test(name)) {\r\n      Object.defineProperty(target, name.replace(/^get /, ''), {\r\n        get: method,\r\n        set: undefined,\r\n        enumerable: false,\r\n        configurable: true\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    if (/^set /.test(name)) {\r\n      Object.defineProperty(target, name.replace(/^set /, ''), {\r\n        set: method,\r\n        get: undefined,\r\n        enumerable: false,\r\n        configurable: true\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    if (/^get\\/set /.test(name)) {\r\n      Object.defineProperty(target, name.replace(/^get\\/set /, ''), {\r\n        get: method.get,\r\n        set: method.set,\r\n        enumerable: false,\r\n        configurable: true\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    if (name !== 'Symbol.toStringTag') {\r\n      Object.defineProperty(target, name, {\r\n        value: method,\r\n        writable: true,\r\n        enumerable: false,\r\n        configurable: true\r\n      });\r\n    }\r\n  });\r\n}\r\n","/**\r\n * @module helpers/toArray\r\n * @private\r\n * @description Exports toArray method.\r\n */\r\n\r\nimport { isArray, isArrayLike, isString } from './checkTypes';\r\nimport { iterate } from './iterate';\r\n\r\n/**\r\n * @function toArray\r\n * @param {*} value - Any value.\r\n * @param {Boolean} [createNewArray = false] - If it is needed to create new array.\r\n * @returns {Array} Create array.\r\n * @description Function for creating an array of any value.\r\n */\r\nexport function toArray(value, createNewArray) {\r\n  if (isArray(value) && !createNewArray) {\r\n    return value;\r\n  }\r\n\r\n  const array = [];\r\n\r\n  if (isArrayLike(value) && !isString(value)) {\r\n    iterate(value, (value) => {\r\n      array.push(value);\r\n    });\r\n  } else {\r\n    array.push(value);\r\n  }\r\n\r\n  return array;\r\n}\r\n","/**\r\n * @module helpers/validate\r\n * @private\r\n * @description Exports validate method.\r\n */\r\n\r\nimport { validateCheckExpressions } from '../constants';\r\nimport { iterate } from './iterate';\r\nimport { isArray } from './checkTypes';\r\n\r\nconst numbers = ['1st', '2nd', '3rd', '4th', '5th', '6th', '7th'];\r\n\r\n/**\r\n * @function validate\r\n * @private\r\n * @param {Object} args - Arguments of function.\r\n * @param {Object} options - Object with validate parameters.\r\n * @param {String} [name] - Name of the function what called validate.\r\n * @returns {void}\r\n * @description Function for checking arguments of other functions.\r\n */\r\nexport function validate(args, options, name) {\r\n  iterate(options, (array, number) => {\r\n    if (!isArray(array)) {\r\n      array = [array];\r\n    }\r\n\r\n    iterate(array, (checker) => {\r\n      checker = validateCheckExpressions[checker];\r\n\r\n      if (!checker.check(args[number])) {\r\n        throw new checker.error(checker.text.replace('$n', numbers[number]) + (name ? ` (at ${ name })` : ''));\r\n      }\r\n    });\r\n  });\r\n}\r\n","/**\r\n * @module Alphabet\r\n * @private\r\n * @mixin\r\n * @description Exports Alphabet class.\r\n */\r\n\r\nimport { isString, validate, defineProperties, Symbol } from './helpers';\r\n\r\n/**\r\n * @typedef {String} Char\r\n * @public\r\n * @description A string of one char.\r\n */\r\n\r\n/**\r\n * @class Alphabet\r\n * @public\r\n * @param {ArrayLike} alphabet - Alphabet to wrap.\r\n * @returns {Alphabet} Instance of Alphabet.\r\n * @description Class for alphabet manipulations: add, delete symbols, generate a token from an alphabet,\r\n * check if an alphabet contains a word.\r\n *\r\n * @example\r\n * new Alphabet(['a', 'b', 'c']);\r\n */\r\nclass Alphabet {\r\n  constructor(alphabet = []) {\r\n    const a = {};\r\n\r\n    for (let i = 0, length = alphabet.length; i < length; i++) {\r\n      const char = alphabet[i];\r\n\r\n      if (!check(char)) {\r\n        throw new Error('Each element of an array must be a single char! (in Alphabet)');\r\n      }\r\n\r\n      a[char] = char;\r\n    }\r\n\r\n    /**\r\n     * @member {Object} Alphabet#$$\r\n     * @public\r\n     * @description The alphabet.\r\n     */\r\n    Object.defineProperty(this, '$$', { value: a });\r\n  }\r\n\r\n  /**\r\n   * @method Alphabet#add\r\n   * @public\r\n   * @param {...Char} chars - Chars to add.\r\n   * @returns {Alphabet} Returns this.\r\n   * @description Method for adding new letters to the alphabet.\r\n   *\r\n   * @example\r\n   * const alphabet = new Alphabet(['a', 'b', 'c']);\r\n   *\r\n   * alphabet.add('d', 'e');\r\n   *\r\n   * alphabet.get().$; // ['a', 'b', 'c', 'd', 'e']\r\n   */\r\n  add(...chars) {\r\n    for (let i = 0, length = chars.length; i < length; i++) {\r\n      const char = chars[i];\r\n\r\n      if (!check(char)) {\r\n        throw new Error('Each argument must be a single char! (in Alphabet#add)');\r\n      }\r\n\r\n      this.$$[char] = char;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Alphabet#contains\r\n   * @public\r\n   * @param {String} word - Word to check if it is in the alphabet or not.\r\n   * @returns {Boolean} If the word in the alphabet or not.\r\n   * @description Method that returns if a word is in alphabet or not.\r\n   *\r\n   * @example\r\n   * const alphabet = new Alphabet(['f', 'b', 'o', 'a', 'r']);\r\n   *\r\n   * alphabet.contains('foo'); // true\r\n   * alphabet.contains('bar'); // true\r\n   * alphabet.contains('baz'); // false\r\n   */\r\n  contains(word) {\r\n    validate([word], ['string'], 'Alphabet#contains');\r\n\r\n    const alphabet = this.$$;\r\n\r\n    for (let i = 0, length = word.length; i < length; i++) {\r\n      if (!alphabet[word[i]]) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @method Alphabet#delete\r\n   * @public\r\n   * @param {...Char} chars - Chars to delete.\r\n   * @returns {Alphabet} Returns this.\r\n   * @description Method for deleting letters from the alphabet.\r\n   *\r\n   * @example\r\n   * const alphabet = new Alphabet(['a', 'b', 'c', 'd']);\r\n   *\r\n   * alphabet.delete('a');\r\n   *\r\n   * alphabet.get().$; // ['b', 'c', 'd']\r\n   *\r\n   * alphabet.delete('b', 'd');\r\n   *\r\n   * alphabet.get().$; // ['c']\r\n   */\r\n  delete(...chars) {\r\n    for (let i = 0, length = chars.length; i < length; i++) {\r\n      const char = chars[i];\r\n\r\n      if (!check(char)) {\r\n        throw new Error('Each argument must be a single char! (in Alphabet#delete)');\r\n      }\r\n\r\n      delete this.$$[char];\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Alphabet#get\r\n   * @returns {Array} Wrap of an array of alphabet letters.\r\n   * @description Method for getting array of alphabet letters.\r\n   *\r\n   * @example\r\n   * new Alphabet(['a', 'b', 'c']).get().$; // ['a', 'b', 'c']\r\n   */\r\n  get() {\r\n    return Object.keys(this.$$);\r\n  }\r\n\r\n  /**\r\n   * @method Alphabet#token\r\n   * @public\r\n   * @param {Number} length - Token length.\r\n   * @returns {String} Token.\r\n   * @description Method for generating random token with given length.\r\n   *\r\n   * @example\r\n   * new Alphabet(['a', 'b', 'c']).token(4); // 'abcb'\r\n   */\r\n  token(length) {\r\n    validate([length], [['intLike', '>0']], 'Alphabet#token');\r\n\r\n    const alphabet = Object.keys(this.$$);\r\n    const len = alphabet.length;\r\n    let token = '';\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      token += alphabet[Math.floor(Math.random() * len)];\r\n    }\r\n\r\n    return token;\r\n  }\r\n}\r\n\r\ndefineProperties(Alphabet.prototype, {\r\n  [Symbol.toStringTag]: 'Alphabet'\r\n});\r\n\r\nfunction check(char) {\r\n  return isString(char) && char.length === 1;\r\n}\r\n\r\n/**\r\n * @function alphabet\r\n * @public\r\n * @param {String} string - String to generate an alphabet from.\r\n * @returns {Alphabet} New instance of Alphabet.\r\n * @description Function for creating an alphabet from a string that has format like this:\r\n * '&lt;char1&gt;-&lt;char2&gt; &lt;char3&gt;-&lt;char4&gt;'\r\n *\r\n * @example\r\n * const a1 = alphabet('a-c 1-3');\r\n * const a2 = alphabet('5-5f-g');\r\n *\r\n * a1.get().$; // ['1', '2', '3', 'a', 'b', 'c']\r\n * a2.get().$; // ['5', 'f', 'g']\r\n */\r\nfunction alphabet(string) {\r\n  validate([string], ['string']);\r\n\r\n  const ranges = string.split(/([\\s\\S]-+[\\s\\S])?/g);\r\n  const length = ranges.length;\r\n  const alphabet = [];\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    const range = ranges[i];\r\n\r\n    if (!range || range === ' ') {\r\n      continue;\r\n    }\r\n\r\n    if (/-/.test(range) && !/[\\s\\S]-+[\\s\\S]/.test(range)) {\r\n      throw new Error(`Wrong part of the string (${ range })! (in alphabet)`);\r\n    }\r\n\r\n    if (/-/.test(range)) {\r\n      const start = range.charCodeAt(0);\r\n      const end = range.charCodeAt(2);\r\n\r\n      if (start > end) {\r\n        throw new Error('Start of the range must be before its end! (in alphabet)');\r\n      }\r\n\r\n      for (let k = 0, len = end - start + 1; k < len; k++) {\r\n        alphabet.push(String.fromCharCode(start + k));\r\n      }\r\n\r\n      continue;\r\n    }\r\n\r\n    if (range.length === 1) {\r\n      alphabet.push(range);\r\n    }\r\n  }\r\n\r\n  return new Alphabet(alphabet);\r\n}\r\n\r\nexport { Alphabet, alphabet };\r\n","/**\r\n * @module Switcher\r\n * @private\r\n * @mixin\r\n * @description Exports Switcher class.\r\n */\r\n\r\nimport {\r\n  isArray, isFunction, isString, isUndefined,\r\n  iterate, Symbol, toArray, defineProperties\r\n} from './helpers';\r\n\r\n/**\r\n * @typedef {'boolean'|'equals'|'strictEquals'|'call'} SwitcherMode\r\n * @public\r\n * @description Enum type of switcher modes.\r\n */\r\n\r\n/**\r\n * @callback SwitcherCallCallback\r\n * @public\r\n * @param {*} value - Switcher value.\r\n * @returns {Boolean|*} On what the callback returns depends if the case is a match (truthy for the match).\r\n */\r\n\r\n/**\r\n * @callback SwitcherMatchCallback\r\n * @public\r\n * @param {...*} args - Arguments from the second argument that switcher was called with.\r\n * @param {*} value - Switcher value.\r\n * @param {*} matched - Switcher matched case.\r\n */\r\n\r\n/**\r\n * @class Switcher\r\n * @public\r\n * @param {Object} [cases = {}] - Object of cases.\r\n * @param {SwitcherMode} [mode = 'equals'] - Switcher mode.\r\n * @param {*} [defaultValue] - Switcher default value.\r\n * @returns {Switcher} - Instance of Switcher.\r\n * @description Switcher class for creating functions working similar to switch (value) {} construction,\r\n * but with the value assignment. Switcher instance is a function that accepts a value argument and an optional\r\n * args argument. Args with additional switcher value and matched case\r\n * are passed into the function of the matched case (if it is a function).\r\n *\r\n * @example\r\n * const switcher = new Switcher();\r\n * const switcher = new Switcher({\r\n *   case1: 'value1',\r\n *   case2: 'value2'\r\n * });\r\n * const switcher = new Switcher('strictEquals');\r\n * const switcher = new Switcher({\r\n *   case1: 'value1',\r\n *   case2: 'value2'\r\n * }, 'strictEquals');\r\n * const switcher = new Switcher('strictEquals', 'defaultValue');\r\n * const switcher = new Switcher({\r\n *   case1: 'value1',\r\n *   case2: 'value2'\r\n * }, 'strictEquals', 'defaultValue');\r\n *\r\n * // See [switcher]{@link switcher} examples for more information.\r\n */\r\nclass Switcher extends Function {\r\n  constructor(cases = {}, mode = 'equals', defaultValue) {\r\n    super();\r\n\r\n    if (isString(cases)) {\r\n      if (!isUndefined(arguments[1])) {\r\n        defaultValue = mode;\r\n      }\r\n\r\n      mode = cases;\r\n      cases = {};\r\n    }\r\n\r\n    const eventualCases = [];\r\n\r\n    iterate(cases, (value, Case) => {\r\n      eventualCases.push({ case: Case, value });\r\n    });\r\n\r\n    function switcher(value, args = []) {\r\n      const { mode, default: def, cases } = switcher.$$;\r\n\r\n      let ret = iterate(cases, ({ value: val, case: Case }) => {\r\n        if (\r\n          (mode === 'boolean' && Case) ||\r\n          /* eslint eqeqeq: 0 */\r\n          (mode === 'equals' && Case == value) ||\r\n          (mode === 'strictEquals' && Case === value) ||\r\n          (mode === 'call' && Case(value))\r\n        ) {\r\n          return { case: Case, value: val };\r\n        }\r\n      });\r\n\r\n      if (isUndefined(ret)) {\r\n        ret = { value: def };\r\n      }\r\n\r\n      if (!isFunction(ret.value)) {\r\n        return ret.value;\r\n      }\r\n\r\n      args = toArray(args, true);\r\n      args.push(value, ret.case);\r\n\r\n      return ret.value.apply(null, args);\r\n    }\r\n\r\n    /**\r\n     * @member Switcher#$$\r\n     * @type {Object}\r\n     * @protected\r\n     * @property {Array} cases - Array of cases.\r\n     * @property {SwitcherMode} mode - Switcher mode.\r\n     * @property {*} default - Switcher default value.\r\n     * @description Config parameters.\r\n     */\r\n    Object.defineProperty(switcher, '$$', {\r\n      value: {\r\n        cases: eventualCases,\r\n        mode,\r\n        default: defaultValue\r\n      }\r\n    });\r\n    Object.setPrototypeOf(switcher, Switcher.prototype);\r\n\r\n    return switcher;\r\n  }\r\n\r\n  /**\r\n   * @method Switcher#case\r\n   * @public\r\n   * @param {*|SwitcherCallCallback|Array.<*|SwitcherCallCallback>} cases - Case or an array of cases.\r\n   * @param {*|SwitcherMatchCallback} value - Value that has to be assigned or a function\r\n   * that is called with switcher value, if it's the case.\r\n   * @returns {Switcher} Returns this.\r\n   * @description Method for defining new cases.\r\n   *\r\n   * @example\r\n   * const sw = new Switcher()\r\n   *   .case(1, 'one')\r\n   *   .case(2, 'two');\r\n   *\r\n   * sw(1); // 'one'\r\n   * sw(2); // 'two'\r\n   */\r\n  case(cases, value) {\r\n    if (!isArray(cases)) {\r\n      cases = [cases];\r\n    }\r\n\r\n    iterate(cases, (Case) => {\r\n      this.$$.cases.push({ case: Case, value });\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Switcher#default\r\n   * @public\r\n   * @param {*} def - New default value.\r\n   * @returns {Switcher} Returns this.\r\n   * @description Method for redefining default switcher value.\r\n   *\r\n   * @example\r\n   * const sw = new Switcher()\r\n   *   .case(1, 'one')\r\n   *   .default('three');\r\n   *\r\n   * sw(1); // 'one'\r\n   * sw(2); // 'three'\r\n   */\r\n  default(def) {\r\n    this.$$.default = def;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Switcher#mode\r\n   * @public\r\n   * @param {SwitcherMode} mode - New switcher mode.\r\n   * @returns {Switcher} Returns this.\r\n   * @description Method for redefining switcher mode.\r\n   *\r\n   * @example\r\n   * const sw = new Switcher()\r\n   *   .mode('strictEquals')\r\n   *   .case(1, 'number')\r\n   *   .case('1', 'string');\r\n   *\r\n   * sw(1);   // 'number'\r\n   * sw('1'); // 'string'\r\n   */\r\n  mode(mode) {\r\n    this.$$.mode = mode;\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\ndefineProperties(Switcher.prototype, {\r\n  [Symbol.toStringTag]: 'Switcher'\r\n});\r\n\r\n/**\r\n * @function switcher\r\n * @public\r\n * @param {Object} [cases = {}] - Object of cases.\r\n * @param {SwitcherMode} [mode = 'equals'] - Switcher mode.\r\n * @param {*} [defaultValue] - Switcher default value.\r\n * @returns {Switcher} New instance of Switcher.\r\n * @description Simple wrap of [new Switcher(...)]{@link Switcher}.\r\n * \r\n * @example\r\n * const sw = switcher({\r\n *   1: 'foo',\r\n *   2: 'bar'\r\n * });\r\n * sw(1); // 'foo'\r\n * sw(2); // 'bar'\r\n * sw(3); // undefined\r\n * \r\n * @example\r\n * const sw = switcher()\r\n *   .case([1, 2], 'foo')\r\n *   .case(3, 'bar');\r\n *   \r\n * sw(1); // 'foo'\r\n * sw(2); // 'foo'\r\n * sw(3); // 'bar'\r\n * \r\n * @example\r\n * const sw = switcher('call')\r\n *   .case(isArray, 'array')\r\n *   .case(isString, 'string')\r\n *   .case(isNumber, 'number')\r\n *   .default('rest');\r\n *   \r\n * sw([]);    // 'array'\r\n * sw('foo'); // 'string'\r\n * sw(123);   // 'number'\r\n * sw({});    // 'rest'\r\n * \r\n * @example\r\n * const sw = switcher({\r\n *   1: (value) => {\r\n *     console.log(value + 1);\r\n *   },\r\n *   2: () => {\r\n *     console.log(value - 1);\r\n *   }\r\n * });\r\n * \r\n * sw(1); // 2\r\n * sw(2); // 1\r\n * \r\n * @example\r\n * const sw = switcher({\r\n *   first: (array) => array[0],\r\n *   last: (array) => array[array.length - 1]\r\n * }, 'equals', (array, index) => array[index]);\r\n * const array = [1, 2, 3, 4];\r\n * \r\n * sw('first', [array]); // 1\r\n * sw('last', [array]);  // 4\r\n * sw(1, [array]);       // 2\r\n * sw(2, [array]);       // 3\r\n */\r\nfunction switcher(cases, mode, defaultValue) {\r\n  return new Switcher(...arguments);\r\n}\r\n\r\n/**\r\n * @function when\r\n * @public\r\n * @param {Boolean|*} condition - Condition used for returning the proper value.\r\n * @param {*} value1 - Value if the condition is truthy.\r\n * @param {*} value2 - Value if the condition is falsey.\r\n * @returns {*} value1 or value2.\r\n * @description Synonym for\r\n * [ternary operator]{@link https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference/Operators/Conditional_Operator}.\r\n * \r\n * @example\r\n * when(true, 'true', 'false'); // 'true'\r\n */\r\nfunction when(condition, value1, value2) {\r\n  return condition ? value1 : value2;\r\n}\r\n\r\nexport { Switcher, switcher, when };\r\n","/**\r\n * @module Super\r\n * @private\r\n * @mixin\r\n * @description Exports Super class.\r\n */\r\n\r\nimport { D } from './D';\r\nimport { switcher } from './Switcher';\r\nimport { constructors } from './constants/constructors';\r\nimport {\r\n  isArray, isArrayLike, isDate, isElement, isFunction, isNil, isNaN, isNull,\r\n  isObject, isPlainObject, isPrimitive, isRegExp, isString, isUndefined,\r\n  validate, toStringTag, iterate, Symbol, defineProperties\r\n} from './helpers';\r\n\r\n/**\r\n * @typedef {Super|Arr|Func|Elem|Str|Num|Dat|BlobObject} DWrap\r\n * @public\r\n * @description Any kind of D-Wrap.\r\n */\r\n\r\n/**\r\n * @typedef {String|Number|null} Key\r\n * @public\r\n * @description Key type used in many methods.\r\n */\r\n\r\n/**\r\n * @typedef {TreeElement[]} Tree\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {Object} TreeElement\r\n * @public\r\n * @property {Key} key - Tree element key.\r\n * @property {*} value - Tree element value.\r\n * @description {@link Tree} element.\r\n */\r\n\r\n/**\r\n * @callback DeepIterationCallback\r\n * @public\r\n * @param {*} value - Current iteration value.\r\n * @param {String|Number} key - Current iteration key/index.\r\n * @param {*} object - Iteration object.\r\n * @param {Tree} tree - Tree of { key, value } elements.\r\n */\r\n\r\n/**\r\n * @callback DeepReduceCallback\r\n * @public\r\n * @param {*} previousValue - Previous value.\r\n * @param {*} value - Current iteration value.\r\n * @param {String|Number} key - Current iteration key/index.\r\n * @param {*} object - Iteration object.\r\n * @param {Tree} tree - Tree of { key, value } elements.\r\n */\r\n\r\n/**\r\n * @callback IterationCallback\r\n * @public\r\n * @param {*} value - Current iteration value.\r\n * @param {String|Number} key - Current iteration key/index.\r\n * @param {*} object - Iteration object.\r\n */\r\n\r\n/**\r\n * @callback JSONCallback\r\n * @public\r\n * @param {String|null} key - Current value.\r\n * @param {*} value - Current key.\r\n * @param {Object} object - Iteration object.\r\n */\r\n\r\n/**\r\n * @callback ObjectCallback\r\n * @public\r\n * @param {Object} newObject - The new object.\r\n * @param {*} value - Current iteration value.\r\n * @param {String|Number} key - Current iteration key/index.\r\n * @param {*} object - Iteration object.\r\n */\r\n\r\n/**\r\n * @callback ReduceCallback\r\n * @public\r\n * @param {*} previousValue - Previous value.\r\n * @param {*} value - Current iteration value.\r\n * @param {String|Number} key - Current iteration key/index.\r\n * @param {*} object - Iteration object.\r\n */\r\n\r\n/**\r\n * @callback SuperMethod\r\n * @public\r\n * @this {DWrap}\r\n */\r\n\r\nconst cloneSwitcher = switcher('call', (object) => object)\r\n  .case(\r\n    (object) => new Super(object) === object,\r\n    (object) => new (Object.getPrototypeOf(object).constructor)(new Super(object.$).deepClone().$)\r\n  )\r\n  .case(isElement, (object, deep) => object.clone(deep))\r\n  .case(isDate, (object) => new Date(object))\r\n  .case(isRegExp, (object) => new RegExp(object.source, object.toString().match(/[gimuy]*$/)[0]))\r\n  .case(isArray, () => [])\r\n  .case(isPlainObject, () => ({}));\r\n\r\n/**\r\n * @class Super\r\n * @public\r\n * @param {*} [object] - An object to wrap.\r\n * @returns {DWrap} Instance of Super.\r\n * @description Wrap of any value. And there is no way to create a nested wrap.\r\n *\r\n * @example\r\n * new Super({}); // Super\r\n */\r\nclass Super {\r\n  constructor(object) {\r\n    if (object instanceof Super) {\r\n      return object;\r\n    }\r\n\r\n    /**\r\n     * @member Super#$\r\n     * @type {*}\r\n     * @public\r\n     * @description Wrapped object.\r\n     */\r\n    Object.defineProperty(this, '$', { value: object });\r\n  }\r\n\r\n  /**\r\n   * @method Super.addStaticProperties\r\n   * @public\r\n   * @param {String|Object} property - Either a string of a property or an object\r\n   * with properties keys and values values.\r\n   * @param {Object} [value] - If a property parameter is a string this has to be a property value.\r\n   * @returns {this} Returns this.\r\n   * @description Sets static properties for DWrap constructors.\r\n   *\r\n   * @example\r\n   * Super.addStaticProperties('cool', 42);\r\n   * Super.addStaticProperties('superCool', 42*42);\r\n   */\r\n  static addStaticProperties(property, value) {\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: value };\r\n    }\r\n\r\n    defineProperties(this, property);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super.addInstanceProperties\r\n   * @public\r\n   * @param {String|Object} property - Either a string of a property or an object\r\n   * with properties keys and values values.\r\n   * @param {Object} [value] - If a property parameter is a string this has to be a property value.\r\n   * @returns {this} Returns this.\r\n   * @description Sets static properties for DWrap prototypes.\r\n   *\r\n   * @example\r\n   * Super.addInstanceProperties('cool', 42);\r\n   * Super.addInstanceProperties('superCool', 42*42);\r\n   */\r\n  static addInstanceProperties(property, value) {\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: value };\r\n    }\r\n\r\n    defineProperties(this.prototype, property);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#assign\r\n   * @public\r\n   * @param {...(Object|Super|*)} objects - Objects to be assigned to the object.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Synonym for\r\n   * [Object.assign]\r\n   * {@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2 }).assign({ a: 3 }, { c: 3, d: 4 }, { d: 5 }).$; // { a: 3, b: 2, c: 3, d: 5 }\r\n   */\r\n  assign(...objects) {\r\n    const object = this.$;\r\n\r\n    iterate(object && arguments, (o) => {\r\n      iterate(new Super(o).$, (value, key) => {\r\n        object[key] = value;\r\n      });\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#average\r\n   * @public\r\n   * @param {IterationCallback} [callback = null] - Callback that is passed to {@link Super#sum}.\r\n   * @returns {Number} Average value.\r\n   * @description Synonym for object.sum(callback) / object.count.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).average();                         // 2\r\n   * new Super({ a: 1, b: 2, c: 5 }).average((value) => value * value); // 10\r\n   */\r\n  average(callback = null) {\r\n    validate([callback], ['function||!'], 'Super#average');\r\n\r\n    return this.sum(callback) / this.count;\r\n  }\r\n\r\n  /**\r\n   * @method Super#call\r\n   * @public\r\n   * @param {SuperMethod} func - Function to be called with this context.\r\n   * @param {...*} args - Arguments to be called with.\r\n   * @returns {*} Return of function call.\r\n   * @description Synonym for func.call(DObject, ...args);\r\n   *\r\n   * @example\r\n   * new Super({ a: 1 }).call(function (b, c) {\r\n   *   return this.a + b + c;\r\n   * }, 2, 3); // 6\r\n   */\r\n  call(func, ...args) {\r\n    validate([func], ['function'], 'Super#call');\r\n\r\n    return func.apply(this, args);\r\n  }\r\n\r\n  /**\r\n   * @method Super#clone\r\n   * @returns {DWrap} New object.\r\n   * @description Method assigns properties of the object to an empty one and returns the new one.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2 } }).clone().$; // { a: 1, b: { c: 2 } }\r\n   */\r\n  clone() {\r\n    const object = this.$;\r\n    const clone = cloneSwitcher(object, [object, false]);\r\n\r\n    if (clone !== object) {\r\n      iterate(object, (value, key) => {\r\n        clone[key] = value;\r\n      });\r\n    }\r\n\r\n    return new this.constructor(clone);\r\n  }\r\n\r\n  /**\r\n   * @member Super#count\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description Returns number of own enumerable keys of the object.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2 }).count; // 2\r\n   */\r\n  get count() {\r\n    const object = this.$;\r\n\r\n    if (!isObject(object)) {\r\n      return 0;\r\n    }\r\n\r\n    return isArrayLike(object) ? object.length : Object.keys(object).length;\r\n  }\r\n\r\n  /**\r\n   * @method Super#create\r\n   * @public\r\n   * @param {Object} [descriptors] - Descriptors passed to Object.create.\r\n   * @returns {DWrap} New instance of D-Wrap.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create\r\n   * @description Synonym for\r\n   * [Object.create]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create}.\r\n   *\r\n   * @example\r\n   * new Super({}).create({\r\n   *   a: {\r\n   *     value: 1,\r\n   *     enumerable: false,\r\n   *     writable: true,\r\n   *     configurable: false\r\n   *   }\r\n   * }).$; // { a: 1 }\r\n   */\r\n  create(descriptors) {\r\n    return D(isPrimitive(this.$) ? undefined : Object.create(this.$, descriptors));\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepAssign\r\n   * @public\r\n   * @param {...*} objects - Objects to be assigned to the object.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Deep analogue of {@link Super#assign}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1 }).deepAssign(\r\n   *   {\r\n   *     b: {\r\n   *       c: 2\r\n   *     }\r\n   *   },\r\n   *   {\r\n   *     a: {\r\n   *       b: 1\r\n   *     }\r\n   *   },\r\n   *   {\r\n   *     a: {\r\n   *       c: {\r\n   *         d: 1\r\n   *       }\r\n   *     },\r\n   *     b: 2\r\n   *   },\r\n   *   null\r\n   * });\r\n   * // {\r\n   * //   a: {\r\n   * //     b: 1,\r\n   * //     c: {\r\n   * //       d: 1\r\n   * //     }\r\n   * //   },\r\n   * //   b: 2,\r\n   * // }\r\n   */\r\n  deepAssign(...objects) {\r\n    const object = this.$;\r\n\r\n    if (isPrimitive(object)) {\r\n      return this;\r\n    }\r\n\r\n    iterate(arguments, (o) => {\r\n      deepAssign(object, o);\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepClone\r\n   * @public\r\n   * @returns {DWrap} New instance of DWrap.\r\n   * @description Deep cloning method. Clones plain objects, arrays, regular expressions and elements, the rest stays the same.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: [2, 3], c: { d: 4 } }).deepClone().$;\r\n   * // {\r\n   * //   a: 1,\r\n   * //   b: [2, 3],\r\n   * //   c: { d: 4 }\r\n   * // }\r\n   */\r\n  deepClone() {\r\n    return new this.constructor(deepClone(this.$));\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepEquals\r\n   * @public\r\n   * @param {*} [object] - Object to compare to.\r\n   * @returns {Boolean} - If the objects are deep equal or not.\r\n   * @description Method for deep comparison of two objects.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1 }).deepEquals({ a: '1' }); // true\r\n   * new Super(/1/).deepEquals(/1/);             // true\r\n   */\r\n  deepEquals(object = null) {\r\n    return deepEqual(this.$, object, false);\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepEvery\r\n   * @public\r\n   * @param {DeepIterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy iteration goes on and if falsey it stops.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {Boolean} If all the callback calls returned truthy value.\r\n   * @description Returns boolean if all the callback calls returned truthy value.\r\n   * Otherwise false. Deep analogue of {@link Super#every}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepEvery((value) => value < 4); // true\r\n   * new Super({ a: {}, b: {}, c: {} }).deepEvery(() => false);              // true\r\n   */\r\n  deepEvery(callback, n) {\r\n    if (arguments.length === 1 && !isFunction(callback)) {\r\n      n = callback;\r\n      callback = Boolean;\r\n    } else if (arguments.length === 1) {\r\n      n = Infinity;\r\n    } else if (!arguments.length) {\r\n      n = Infinity;\r\n      callback = Boolean;\r\n    }\r\n\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepEvery');\r\n\r\n    n = Number(n);\r\n\r\n    return deepEvery(this.$, callback, n, [{ key: null, value: this.$ }]);\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepFilter\r\n   * @public\r\n   * @param {DeepIterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy the element is included and if falsey it's excluded.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {DWrap} New D-Wrap of filtered object.\r\n   * @description Returns filtered by the callback object. Deep analogue of {@link Super#filter}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFilter((value) => value%2).$;     // { a: 1, b: { d: 3 } }\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFilter((value) => value === 1).$; // { a: 1 }\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFilter((value) => value > 3).$;   // {}\r\n   */\r\n  deepFilter(callback, n) {\r\n    if (arguments.length === 1 && !isFunction(callback)) {\r\n      n = callback;\r\n      callback = Boolean;\r\n    } else if (arguments.length === 1) {\r\n      n = Infinity;\r\n    } else if (!arguments.length) {\r\n      n = Infinity;\r\n      callback = Boolean;\r\n    }\r\n\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepFilter');\r\n\r\n    const filtered = deepFilter(this.$, callback, n, [{ key: null, value: this.$ }]);\r\n\r\n    return D(isNil(filtered) ? filtered : filtered || {});\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepFind\r\n   * @public\r\n   * @param {DeepIterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy iteration stops and if falsey it continues.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {Tree|null} Tree of { key, value } if something found and null if not.\r\n   * @description Returns tree of the elements if something found and null if nothing found.\r\n   * Deep analogue of {@link Super#find}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFind((value) => value === 2);\r\n   * // [\r\n   * //   { key: 'c', value: 2 },\r\n   * //   { key: 'b', value: { c: 2, d: 3 } },\r\n   * //   { key: null, value: <initial object> }\r\n   * // ]\r\n   */\r\n  deepFind(callback, n) {\r\n    if (arguments.length === 1 && !isFunction(callback)) {\r\n      n = callback;\r\n      callback = Boolean;\r\n    } else if (arguments.length === 1) {\r\n      n = Infinity;\r\n    } else if (!arguments.length) {\r\n      n = Infinity;\r\n      callback = Boolean;\r\n    }\r\n\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepFind');\r\n\r\n    return deepFind(this.$, callback, n, [{ key: null, value: this.$ }]);\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepForEach\r\n   * @public\r\n   * @param {DeepIterationCallback} callback - Called on each iteration.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Method for iterating over any object. Deep analogue of {@link Super#forEach}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepForEach((value, key, object) => object[key] = value * value).$;\r\n   * // { a: 1, b: { c: 4, d: 9 } }\r\n   */\r\n  deepForEach(callback, n = Infinity) {\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepForEach');\r\n\r\n    n = Number(n);\r\n\r\n    deepForEach(this.$, callback, n, [{ key: null, value: this.$ }]);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepForEach\r\n   * @public\r\n   * @param {DeepIterationCallback} callback - Called on each iteration.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Method for iterating over any object. Deep analogue of {@link Super#forEach}.\r\n   * Unlike {@link Super#deepForEach} the callback is called on every value of every object inside\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepForEach((value, key, object) => object[key] = value * value).$;\r\n   * // { a: 1, b: { c: 4, d: 9 } }\r\n   */\r\n  deepForEachEntry(callback, n = Infinity) {\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepForEach');\r\n\r\n    n = Number(n);\r\n\r\n    deepForEachEntry(this.$, callback, n, [{ key: null, value: this.$ }]);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepFreeze\r\n   * @public\r\n   * @returns {DWrap} Returns this.\r\n   * @description Deep analogue of {@link Super#freeze}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFreeze(); // Super\r\n   */\r\n  deepFreeze() {\r\n    deepFreeze(this.$);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepMap\r\n   * @public\r\n   * @param {DeepIterationCallback} callback - Called on each iteration.\r\n   * Return value is used for creating a new object.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {DWrap} D-Wrap of the new object.\r\n   * @description Returns a wrap of a new object using the callback. Deep analogue of {@link Super#map}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepMap((value) => value * value).$;\r\n   * // { a: 1, b: { c: 4, d: 9 } }\r\n   */\r\n  deepMap(callback, n = Infinity) {\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepMap');\r\n\r\n    n = Number(n);\r\n\r\n    return D(deepMap(this.$, callback, n, [{ key: null, value: this.$ }]));\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepReduce\r\n   * @public\r\n   * @param {DeepReduceCallback} callback - Called on each iteration.\r\n   * Return value is passed to the next callback call.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @param {*} [IV = <first value>|undefined] - Initial value.\r\n   * @returns {*} Modified IV.\r\n   * @description Returns modified IV. Deep analogue of {@link Super#reduce}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepReduce((sum, value) => sum + value * value, Infinity, 0); // 14\r\n   */\r\n  deepReduce(callback, n = Infinity, IV) {\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepReduce');\r\n\r\n    n = Number(n);\r\n\r\n    const object = this.$;\r\n    const tree = [{ key: null, value: this.$ }];\r\n\r\n    if (arguments.length < 3) {\r\n      return deepReduce(object, callback, n, false, undefined, tree).IV;\r\n    }\r\n\r\n    return deepReduce(object, callback, n, false, { IV }, tree).IV;\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepSome\r\n   * @public\r\n   * @param {DeepIterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy iteration stops and if falsey it continues.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {Boolean} If all the callback calls returned truthy value.\r\n   * @description Returns true if some of the callback calls returned truthy value.\r\n   * Otherwise false. Deep analogue of {@link Super#some}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepSome((value) => value > 4); // false\r\n   * new Super({ a: {}, b: {}, c: {} }).deepSome(() => true);               // false\r\n   */\r\n  deepSome(callback, n) {\r\n    if (arguments.length === 1 && !isFunction(callback)) {\r\n      n = callback;\r\n      callback = Boolean;\r\n    } else if (arguments.length === 1) {\r\n      n = Infinity;\r\n    } else if (!arguments.length) {\r\n      n = Infinity;\r\n      callback = Boolean;\r\n    }\r\n\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepSome');\r\n\r\n    n = Number(n);\r\n\r\n    return deepSome(this.$, callback, n, [{ key: null, value: this.$ }]);\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepStrictEquals\r\n   * @public\r\n   * @param {*} [object] - Object to compare to.\r\n   * @returns {Boolean} - If the objects are deep strict equal or not.\r\n   * @description Method for deep strict comparison of two objects.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1 }).deepStrictEquals({ a: '1' }); // false\r\n   * new Super(/1/).deepStrictEquals(/1/);             // true\r\n   */\r\n  deepStrictEquals(object = null) {\r\n    return deepEqual(this.$, object, true);\r\n  }\r\n\r\n  /**\r\n   * @method Super#define\r\n   * @param {String|Object} property - Either a string of a property or a descriptors object.\r\n   * @param {Object} [descriptor] - If a property parameter is a string this has to be a property descriptor.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Synonym for both\r\n   * [Object.defineProperty]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty}\r\n   * and\r\n   * [Object.defineProperties]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties}.\r\n   *\r\n   * @example\r\n   * new Super({}).define('a', {\r\n   *   value: 1,\r\n   *   enumerable: false,\r\n   *   writable: true,\r\n   *   configurable: false\r\n   * }).$; // { a: 1 }\r\n   * new Super({}).define({\r\n   *   a: {\r\n   *     value: 1,\r\n   *     enumerable: false,\r\n   *     writable: true,\r\n   *     configurable: false\r\n   *   }\r\n   * }).$; // { a: 1 }\r\n   */\r\n  define(property, descriptor) {\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: descriptor };\r\n    }\r\n\r\n    property = new Super(property).$;\r\n\r\n    if (isObject(this.$)) {\r\n      Object.defineProperties(this.$, property);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#delete\r\n   * @public\r\n   * @param {...String} props - List of properties to delete.\r\n   * @returns {DWrap} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/delete\r\n   * @description Synonym for multiple\r\n   * [\"delete\" operator]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/delete}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).delete('c', 'a').$; // { b: 2 }\r\n   */\r\n  delete(...props) {\r\n    const object = this.$;\r\n\r\n    iterate(object && props, (property) => {\r\n      delete object[property];\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#equals\r\n   * @public\r\n   * @param {*} [object] - Object to compare.\r\n   * @returns {Boolean} If the objects are equal or not.\r\n   * @description Returns true if objects are equal using '==' operator and false if not. NaNs are considered to be equal.\r\n   *\r\n   * @example\r\n   * new Super(3).equals('3');   // true\r\n   * new Super(NaN).equals(NaN); // true\r\n   */\r\n  equals(object) {\r\n    const o = this.$;\r\n\r\n    object = new Super(object).$;\r\n\r\n    /* eslint eqeqeq: 0 */\r\n    return o == object || (isNaN(o) && isNaN(object));\r\n  }\r\n\r\n  /**\r\n   * @method Super#every\r\n   * @public\r\n   * @param {IterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy iteration goes on and if falsey it stops.\r\n   * @returns {Boolean} If all the callback calls returned truthy value.\r\n   * @description Returns boolean if all the callback calls returned truthy value.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).every((value) => value < 4); // true\r\n   * new Super({}).every(() => false);                            // true\r\n   */\r\n  every(callback = Boolean) {\r\n    validate([callback], ['function'], 'Super#every');\r\n\r\n    return iterate(this.$, (value, key, object) => {\r\n      if (!callback(value, key, object)) {\r\n        return false;\r\n      }\r\n    }) !== false;\r\n  }\r\n\r\n  /**\r\n   * @method Super#filter\r\n   * @public\r\n   * @param {IterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy the element is included and if falsey it's excluded.\r\n   * @returns {DWrap} New D-Wrap of filtered object.\r\n   * @description Returns filtered by the callback object.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).filter((value) => value%2).$; // { a: 1, c: 3 }\r\n   * new Super(null).filter((value) => value%2).$;                 // null\r\n   */\r\n  filter(callback = Boolean) {\r\n    validate([callback], ['function'], 'Super#filter');\r\n\r\n    const object = this.$;\r\n    const array = isArrayLike(object);\r\n\r\n    /* eslint no-nested-ternary: 0 */\r\n    const o = array ? [] : isNil(object) ? object : {};\r\n\r\n    iterate(object, (value, key) => {\r\n      if (callback(value, key, object)) {\r\n        if (array) {\r\n          o.push(value);\r\n        } else {\r\n          o[key] = value;\r\n        }\r\n      }\r\n    });\r\n\r\n    return D(o);\r\n  }\r\n\r\n  /**\r\n   * @method Super#find\r\n   * @public\r\n   * @param {IterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy iteration stops and if falsey it continues.\r\n   * @returns {{ key: Key, value: * }|null} { key, value } if found and null if not.\r\n   * @description Returns found { key, value } if something found and null if nothing found.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).find((value) => value === 2); // { key: 'b', value: 2 }\r\n   * new Super([1, 2, 3]).find((value) => value === 2);            // { key: 1, value: 2 }\r\n   */\r\n  find(callback) {\r\n    validate([callback], ['function'], 'Super#find');\r\n\r\n    return iterate(this.$, (value, key, object) => {\r\n      if (callback(value, key, object)) {\r\n        return { key, value };\r\n      }\r\n    }) || null;\r\n  }\r\n\r\n  /**\r\n   * @method Super#forEach\r\n   * @public\r\n   * @param {IterationCallback} callback - Called on each iteration.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Method for iterating over any object.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).forEach((value, key, object) => {\r\n   *   object[key] = value * value;\r\n   * }).$; // { a: 1, b: { c: 4, d: 5 } }\r\n   */\r\n  forEach(callback) {\r\n    validate([callback], ['function'], 'Super#forEach');\r\n\r\n    iterate(this.$, (value, key, object) => {\r\n      callback(value, key, object);\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#freeze\r\n   * @public\r\n   * @returns {DWrap} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\r\n   * @description Synonym for\r\n   * [Object.freeze]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).freeze(); // Super\r\n   */\r\n  freeze() {\r\n    Object.freeze(this.$);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#get\r\n   * @public\r\n   * @param {String|Object.<String, Function>} property - Either a string of a property or a getters object.\r\n   * @param {Function} [getter] - If a property parameter is a string this has to be a getter function.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Method for defining getters.\r\n   *\r\n   * @example\r\n   * const object1 = new Super({}).get('a', () => 1).$;\r\n   * object1.a; // 1\r\n   *\r\n   * const object2 = new Super({}).get({\r\n   *   a: () => 2\r\n   * }).$;\r\n   * object2.a; // 2\r\n   */\r\n  get(property, getter) {\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: getter };\r\n    }\r\n\r\n    const object = this.$;\r\n\r\n    iterate(isObject(object) && new Super(property).$, (getter, property) => {\r\n      Object.defineProperty(object, property, { get: getter });\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#has\r\n   * @public\r\n   * @param {String|*} key - Property to check.\r\n   * @returns {Boolean} Returns true if the object has the key and false if not.\r\n   * @see https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/in\r\n   * @description Synonym for\r\n   * [\"in\" operator]{@link https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/in}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).has('b'); // true\r\n   */\r\n  has(key) {\r\n    const object = this.$;\r\n\r\n    if (!isObject(object)) {\r\n      return false;\r\n    }\r\n\r\n    return key in object;\r\n  }\r\n\r\n  /**\r\n   * @method Super#hasOwn\r\n   * @public\r\n   * @param {String|*} key - Property to check.\r\n   * @returns {Boolean} Returns true if the object has its own key and false if not.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\r\n   * @description Synonym for\r\n   * [Object#hasOwnProperty]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).hasOwn('b');              // true\r\n   * new Super({ a: 1, b: 2, c: 3 }).hasOwn('hasOwnProperty'); // false\r\n   */\r\n  hasOwn(key) {\r\n    const object = this.$;\r\n\r\n    if (!isObject(object)) {\r\n      return false;\r\n    }\r\n\r\n    return {}.hasOwnProperty.call(object, key);\r\n  }\r\n\r\n  /**\r\n   * @method Super#instanceof\r\n   * @public\r\n   * @param {Function} constructor - Constructor to check.\r\n   * @returns {Boolean} If the object is an instance of constructor.\r\n   * @see https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/instanceof\r\n   * @description Synonym for\r\n   * [\"instanceof\" operator]{@link https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/instanceof}.\r\n   */\r\n  instanceof(constructor) {\r\n    return this.$ instanceof constructor;\r\n  }\r\n\r\n  /**\r\n   * @method Super#isFrozen\r\n   * @public\r\n   * @returns {Boolean} If the object is frozen.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\r\n   * @description Synonym for\r\n   * [Object.isFrozen]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen}.\r\n   *\r\n   * @example\r\n   * new Super({}).freeze().isFrozen(); // true\r\n   */\r\n  isFrozen() {\r\n    return Object.isFrozen(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Super#json\r\n   * @public\r\n   * @param {JSONCallback|String[]} [replacer] - See the link.\r\n   * @param {String|Number} [space] - See the link.\r\n   * @returns {String} JSON string.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\r\n   * @description Synonym for\r\n   * [JSON.stringify]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).json(); // '{\"a\":1,\"b\":2,\"c\":3}'\r\n   * new Super({ a: 1, b: 2, c: 3 }).json('    ');\r\n   * // {\r\n   * //     \"a\": 1,\r\n   * //     \"b\": 2,\r\n   * //     \"c\": 3\r\n   * // }\r\n   * new Super({ a: 1, b: 2, c: 3 }).json((key, value) => {\r\n   *   if (typeof value === 'number') {\r\n   *     return value%2 ? key + value0 : undefined;\r\n   *   }\r\n   *\r\n   *   return value;\r\n   * }, 2);\r\n   * // {\r\n   * //   \"a\": \"a1\",\r\n   * //   \"c\": \"c3\"\r\n   * // }\r\n   */\r\n  json(replacer, space) {\r\n    if (arguments.length === 1 && !isFunction(replacer) && !isArray(replacer)) {\r\n      [].unshift.call(arguments, null);\r\n    }\r\n\r\n    [].unshift.call(arguments, this.$);\r\n\r\n    return JSON.stringify.apply(JSON, arguments);\r\n  }\r\n\r\n  /**\r\n   * @method Super#keyOf\r\n   * @public\r\n   * @param {*} value - Value to find.\r\n   * @returns {String|Number|null} A key or an index if found and null if not.\r\n   * @description Method for finding equal to the argument value in the object. NaNs are considered to be equal.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).keyOf(2);   // 'b'\r\n   * new Super({ a: 1, b: 2, c: 3 }).keyOf('2'); // 'b'\r\n   */\r\n  keyOf(value) {\r\n    const key = iterate(this.$, (val, key) => {\r\n      if (val == value || (isNaN(val) && isNaN(value))) {\r\n        return key;\r\n      }\r\n    });\r\n\r\n    return isUndefined(key) ? null : key;\r\n  }\r\n\r\n  /**\r\n   * @method Super#keyOfStrict\r\n   * @public\r\n   * @param {*} value - Value to find.\r\n   * @returns {String|Number|null} A key or an index if found and null if not.\r\n   * @description Method for finding strict equal to the argument value in the object. NaNs are considered to be equal.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).keyOfStrict(2);   // 'b'\r\n   * new Super({ a: 1, b: 2, c: 3 }).keyOfStrict('2'); // 'b'\r\n   */\r\n  keyOfStrict(value) {\r\n    const key = iterate(this.$, (val, key) => {\r\n      if (val === value || (isNaN(val) && isNaN(value))) {\r\n        return key;\r\n      }\r\n    });\r\n\r\n    return isUndefined(key) ? null : key;\r\n  }\r\n\r\n  /**\r\n   * @method Super#keys\r\n   * @public\r\n   * @returns {DWrap} A wrap of the keys array.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\r\n   * @description Synonym for\r\n   * [Object.keys]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/keys}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).keys().$; // ['a', 'b', 'c']\r\n   * new Super(null).keys().$;                 // []\r\n   */\r\n  keys() {\r\n    const object = this.$;\r\n\r\n    return D(isObject(object) ? Object.keys(object) : []);\r\n  }\r\n\r\n  /**\r\n   * @method Super#map\r\n   * @public\r\n   * @param {IterationCallback} callback - Called on each iteration.\r\n   * Return value is used for creating a new object.\r\n   * @returns {DWrap} D-Wrap of the new object.\r\n   * @description Returns a wrap of a new object using the callback.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).map((value) => value * 2).$; // { a: 2, b: 4, c: 6 }\r\n   * new Super(null).map((value) => value * 2).$;                 // null\r\n   */\r\n  map(callback) {\r\n    validate([callback], ['function'], 'Super#map');\r\n\r\n    const object = this.$;\r\n    const o = isArrayLike(object) ? [] : isNull(object) ? null : {};\r\n\r\n    iterate(object, (value, key) => {\r\n      o[key] = callback(value, key, object);\r\n    });\r\n\r\n    return D(o);\r\n  }\r\n\r\n  /**\r\n   * @method Super#max\r\n   * @public\r\n   * @param {IterationCallback} callback - Called on each iteration.\r\n   * Return value is used for comparison with the previous max value.\r\n   * @returns {{key: Key, value: Number}} Object with max value and key of the max value.\r\n   * @description Method for finding max value in the object.\r\n   * If no callback is present comparison is between values of the object.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).max();                     // { key: 'c', value: 3 }\r\n   * new Super({ a: 1, b: 2, c: 3 }).max((value) => 4 - value); // { key: 'a', value: 3 }\r\n   * new Super({ a: 'a', b: 'b', c: 'c' }).max();               // { key: null, value: -Infinity }\r\n   */\r\n  max(callback = null) {\r\n    validate([callback], ['function||!'], 'Super#max');\r\n\r\n    return this.object((max, value, key, object) => {\r\n      const val = Number(callback ? callback(value, key, object) : value);\r\n\r\n      if (val > max.value) {\r\n        max.key = key;\r\n        max.value = val;\r\n      }\r\n    }, { key: null, value: -Infinity }).$;\r\n  }\r\n\r\n  /**\r\n   * @method Super#min\r\n   * @public\r\n   * @param {IterationCallback} callback - Called on each iteration.\r\n   * Return value is used for comparison with the previous min value.\r\n   * @returns {{key: Key, value: Number}} Object with min value and key of the min value.\r\n   * @description Method for finding min value in the object.\r\n   * If no callback is present comparison is between values of the object.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).min();                     // { key: 'a', value: 1 }\r\n   * new Super({ a: 1, b: 2, c: 3 }).min((value) => 4 - value); // { key: 'c', value: 1 }\r\n   * new Super({ a: 'a', b: 'b', c: 'c' }).min();               // { key: null, value: Infinity }\r\n   */\r\n  min(callback = null) {\r\n    validate([callback], ['function||!'], 'Super#min');\r\n\r\n    return this.object((min, value, key, object) => {\r\n      const val = Number(callback ? callback(value, key, object) : value);\r\n\r\n      if (val < min.value) {\r\n        min.key = key;\r\n        min.value = val;\r\n      }\r\n    }, { key: null, value: Infinity }).$;\r\n  }\r\n\r\n  /**\r\n   * @method Super#object\r\n   * @public\r\n   * @param {ObjectCallback} callback - Called on each iteration.\r\n   * @param {Object|*} [object = {}] - Object that is passed to the callback.\r\n   * @returns {DWrap} Wrap of the new object.\r\n   * @description Type of {@link Super#reduce}.\r\n   * The object is passed as an argument into the callback. The output is this object.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2 }).object((object, value, key) => {\r\n   *   object[key] = value;\r\n   *   object[key + key] = value * 2;\r\n   * }).$; // { a: 1, aa: 2, b: 2, bb: 4 }\r\n   */\r\n  object(callback, object = {}) {\r\n    validate([callback], ['function'], 'Super#object');\r\n\r\n    iterate(this.$, (value, key, obj) => {\r\n      callback(object, value, key, obj);\r\n    });\r\n\r\n    return D(object);\r\n  }\r\n\r\n  /**\r\n   * @method Super#prop\r\n   * @public\r\n   * @param {String|Object.<String, *>} property - Either a string of a property or an assigned object.\r\n   * @param {*} [value] - If a property parameter is a string\r\n   * this has to be an assigned value if it's present.\r\n   * @returns {DWrap|*} Returns this if it's a setter or a value if getter.\r\n   * @description Method for getting and setting properties.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).prop('a');              // 1\r\n   * new Super({ a: 1, b: 2, c: 3 }).prop('a', 7).$;         // { a: 7, b: 2, c: 3 }\r\n   * new Super({ a: 1, b: 2, c: 3 }).prop({ a: 7, b: 8 }).$; // { a: 7, b: 8, c: 3 }\r\n   */\r\n  prop(property, value) {\r\n    if (arguments.length <= 1 && isString(property)) {\r\n      return this.$ ? this.$[property] : undefined;\r\n    }\r\n\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: value };\r\n    }\r\n\r\n    return this.assign(property);\r\n  }\r\n\r\n  /**\r\n   * @method Super#propertyDescriptor\r\n   * @public\r\n   * @param {String} property - Property of the object.\r\n   * @returns {Object|undefined} Property descriptor.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\r\n   * @descriptor Synonym for\r\n   * [Object.getOwnPropertyDescriptor]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1 }).propertyDescriptor('a');\r\n   * // {\r\n   * //   value: 1,\r\n   * //   enumerable: true,\r\n   * //   writable: true,\r\n   * //   configurable: true\r\n   * // }\r\n   */\r\n  propertyDescriptor(property) {\r\n    const object = this.$;\r\n\r\n    return isObject(object) ? Object.getOwnPropertyDescriptor(object, property) : undefined;\r\n  }\r\n\r\n  /**\r\n   * @method Super#propertyNames\r\n   * @public\r\n   * @returns {DWrap} D-Wrap of the names array.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\r\n   * @descriptor Synonym for\r\n   * [Object.getOwnPropertyNames]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2 }).define('c', { value: 3 }).$; // ['a', 'b', 'c']\r\n   */\r\n  propertyNames() {\r\n    const object = this.$;\r\n\r\n    return D(isObject(object) ? Object.getOwnPropertyNames(object) : []);\r\n  }\r\n\r\n  /**\r\n   * @method Super#propertySymbols\r\n   * @public\r\n   * @returns {DWrap} D-Wrap of the names array.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\r\n   * @descriptor Synonym for\r\n   * [Object.getOwnPropertySymbols]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols}.\r\n   *\r\n   * @example\r\n   * new Super({ [Symbol('foo')]: 1 }).define(Symbol('bar'), { value: 2 }).$; // [Symbol('foo'), Symbol('bar')]\r\n   */\r\n  propertySymbols() {\r\n    const object = this.$;\r\n\r\n    return D(isObject(object) ? Object.getOwnPropertySymbols(object) : []);\r\n  }\r\n\r\n  /**\r\n   * @method Super#proto\r\n   * @public\r\n   * @param {*} [proto] - If it's present it's set as a prototype to the object.\r\n   * @returns {DWrap} In getter mode returns wrap of the prototype and in setter mode returns this.\r\n   * @description Synonym for both\r\n   * [Object.getPrototypeOf]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf}\r\n   * and\r\n   * [Object.setPrototypeOf]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf}.\r\n   */\r\n  proto(proto) {\r\n    const object = this.$;\r\n    const isContextObject = !isNil(object);\r\n\r\n    if (arguments.length) {\r\n      if (isContextObject && (isObject(proto) || isNull(proto))) {\r\n        Object.setPrototypeOf(object, proto);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    return isContextObject ? new Super(Object.getPrototypeOf(object)) : new Super();\r\n  }\r\n\r\n  /**\r\n   * @method Super#reduce\r\n   * @public\r\n   * @param {ReduceCallback} callback - Called on each iteration.\r\n   * Return value is passed to the next callback call.\r\n   * @param {*} [IV = <first value>|undefined] - Initial value.\r\n   * @returns {*} Modified IV.\r\n   * @description Returns modified IV. If the second argument is not present first value in the object is taken\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).reduce((sum, value) => sum + value * value, 0); // 14\r\n   */\r\n  reduce(callback, IV) {\r\n    validate([callback], ['function'], 'Super#reduce');\r\n\r\n    const object = this.$;\r\n\r\n    let startKey;\r\n\r\n    if (arguments.length === 1) {\r\n      iterate(object, (value, key) => {\r\n        startKey = key;\r\n        IV = value;\r\n\r\n        return true;\r\n      });\r\n    }\r\n\r\n    iterate(object, (value, key) => {\r\n      if (key !== startKey) {\r\n        IV = callback(IV, value, key, object);\r\n      }\r\n    });\r\n\r\n    return IV;\r\n  }\r\n\r\n  /**\r\n   * @method Super#set\r\n   * @public\r\n   * @param {String|Object.<String, Function>} property - Either a string of a property or a setters object.\r\n   * @param {Function} [setter] - If a property parameter is a string this has to be a setter function.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Method for defining setters.\r\n   *\r\n   * @example\r\n   * const object = new Super({})\r\n   *   .get('public', function () {\r\n   *     return this._private;\r\n   *   })\r\n   *   .set('public', function (value) {\r\n   *     if (typeof value === 'number') {\r\n   *       this._private = value;\r\n   *     }\r\n   *   });\r\n   * object.prop('public', '1').$; // { public: undefined }\r\n   * object.prop('public', 1).$;   // { public: 1, _private: 1 }\r\n   *\r\n   * new Super({}).set({\r\n   *   public(value) {\r\n   *     if (typeof value === 'number') {\r\n   *       this._private = value;\r\n   *     }\r\n   *   }\r\n   * });\r\n   */\r\n  set(property, setter) {\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: setter };\r\n    }\r\n\r\n    const object = this.$;\r\n\r\n    iterate(isObject(object) && new Super(property).$, (setter, property) => {\r\n      Object.defineProperty(object, property, { set: setter });\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#some\r\n   * @public\r\n   * @param {IterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy iteration stops and if falsey it continues.\r\n   * @returns {Boolean} If all the callback calls returned truthy value.\r\n   * @description Returns true if some of the callback calls returned truthy value. Otherwise false.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).some((value) => value > 4); // false\r\n   * new Super({}).some(() => true);                             // false\r\n   */\r\n  some(callback = Boolean) {\r\n    validate([callback], ['function'], 'Super#some');\r\n\r\n    return iterate(this.$, (value, key, object) => {\r\n      if (callback(value, key, object)) {\r\n        return true;\r\n      }\r\n    }) || false;\r\n  }\r\n\r\n  /**\r\n   * @method Super#strictEquals\r\n   * @public\r\n   * @param {*} [object] - Object to compare.\r\n   * @returns {Boolean} If the objects are equal or not.\r\n   * @description Returns true if objects are equal using '===' operator and false if not.\r\n   * NaNs are considered to be strict equal.\r\n   *\r\n   * @example\r\n   * new Super(3).strictEquals('3');   // false\r\n   * new Super(NaN).strictEquals(NaN); // true\r\n   */\r\n  strictEquals(object) {\r\n    const o = this.$;\r\n\r\n    object = new Super(object).$;\r\n\r\n    return o === object || (isNaN(o) && isNaN(object));\r\n  }\r\n\r\n  /**\r\n   * @method Super#sum\r\n   * @public\r\n   * @param {IterationCallback} [callback = null] - Called on each iteration.\r\n   * @returns {Number} Sum.\r\n   * @description Type of {@link Super#reduce}.\r\n   * If the callback is present it's used for summing. If not the value is used.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).sum();                         // 6\r\n   * new Super({ a: 1, b: 2, c: 3 }).sum((value) => value * value); // 14\r\n   */\r\n  sum(callback = null) {\r\n    validate([callback], ['function||!'], 'Super#sum');\r\n\r\n    return this.reduce((sum, value, key, object) => (\r\n      sum + Number(callback ? callback(value, key, object) : value)\r\n    ), 0);\r\n  }\r\n\r\n  toJSON() {\r\n    return this.$;\r\n  }\r\n\r\n  /**\r\n   * @member Super#toStringTag\r\n   * @type {String}\r\n   * @public\r\n   * @readonly\r\n   * @description Returns toString tag of the object.\r\n   *\r\n   * @example\r\n   * new Super({}).toStringTag; // 'Object'\r\n   * new Super([]).toStringTag; // 'Array'\r\n   * new Super(1).toStringTag;  // 'Number'\r\n   */\r\n  get toStringTag() {\r\n    return toStringTag(this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Super#type\r\n   * @type {String}\r\n   * @public\r\n   * @readonly\r\n   * @description Synonym for\r\n   * [\"typeof\" operator]{@link https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/instanceof}..\r\n   *\r\n   * @example\r\n   * new Super({}).type;   // 'object'\r\n   * new Super(1).type;    // 'number'\r\n   * new Super('1').type;  // 'string'\r\n   * new Super(true).type; // 'boolean'\r\n   */\r\n  get type() {\r\n    return typeof this.$;\r\n  }\r\n\r\n  /**\r\n   * @method Super#value\r\n   * @public\r\n   * @param {String|Object.<String, *>} property - Either a string of a property or a values object.\r\n   * @param {Object.<String, *>} [value] - If a property parameter is a string this has to be a value to be set.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Method for defining non-enumerable, non-writable, non-configurable values.\r\n   * Synonym for object.define(property, { value: value }).\r\n   *\r\n   * @example\r\n   * new Super({}).value('a', 1).$; // { a: 1 }\r\n   * new Super({}).value({\r\n   *   a: 1\r\n   * }).$;                          // { a: 1 }\r\n   */\r\n  value(property, value) {\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: value };\r\n    }\r\n\r\n    const object = this.$;\r\n\r\n    iterate(isObject(object) && new Super(property).$, (value, property) => {\r\n      Object.defineProperty(object, property, { value });\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#values\r\n   * @public\r\n   * @returns {DWrap} A wrap of the values array.\r\n   * @description Returns D-Wrap of the values array.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).values().$; // [1, 2, 3]\r\n   * new Super(null).values().$;                 // []\r\n   */\r\n  values() {\r\n    const array = [];\r\n\r\n    iterate(this.$, (value) => {\r\n      array.push(value);\r\n    });\r\n\r\n    return D(array);\r\n  }\r\n\r\n  /**\r\n   * @method Super#word\r\n   * @public\r\n   * @param {IterationCallback} callback - Called on each iteration.\r\n   * @returns {String} Concatenated string.\r\n   * @description Type of {@link Super#reduce}.\r\n   * If the callback is present it's used for concatenating. If not the value is used.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).word();                         // '123'\r\n   * new Super({ a: 1, b: 2, c: 3 }).word((value) => value + value); // '112233'\r\n   */\r\n  word(callback = null) {\r\n    validate([callback], ['function||!'], 'Super#word');\r\n\r\n    return this.reduce((word, value, key, object) => (\r\n      word + String(callback ? callback(value, key, object) : value)\r\n    ), '');\r\n  }\r\n}\r\n\r\ndefineProperties(Super.prototype, {\r\n  [Symbol.toStringTag]: 'Super'\r\n});\r\n\r\n/**\r\n * @function deepAssign\r\n * @private\r\n * @param {*} target - Object to assign properties to.\r\n * @param {*} object - Object to assign properties from.\r\n * @returns {void}\r\n */\r\nfunction deepAssign(target, object) {\r\n  iterate(object, (value, key) => {\r\n    if (isPrimitive(target[key]) || !{}.hasOwnProperty.call(target, key)) {\r\n      target[key] = deepClone(value);\r\n\r\n      return;\r\n    }\r\n\r\n    if (!isPrimitive(target[key])) {\r\n      deepAssign(target[key], value);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @function deepClone\r\n * @private\r\n * @param {*} object - Object to clone.\r\n * @description Does the deep cloning.\r\n */\r\nfunction deepClone(object) {\r\n  const clone = cloneSwitcher(object, [object, true]);\r\n\r\n  if (clone !== object) {\r\n    iterate(object, (value, key) => {\r\n      clone[key] = deepClone(value);\r\n    });\r\n  }\r\n\r\n  return clone;\r\n}\r\n\r\n/**\r\n * @function deepEqual\r\n * @private\r\n * @param {*} o1 - First object to compare.\r\n * @param {*} o2 - Second object to compare.\r\n * @param {Boolean} strict - If comparison should be strict or not.\r\n * @returns {Boolean} - If the object are deep equal or not.\r\n */\r\nfunction deepEqual(o1, o2, strict) {\r\n  if (o1 === o2) {\r\n    return true;\r\n  }\r\n\r\n  if (isNaN(o1) && isNaN(o2) && isPrimitive(o1) && isPrimitive(o2)) {\r\n    return true;\r\n  }\r\n\r\n  if (isNaN(o1) || isNaN(o2)) {\r\n    return false;\r\n  }\r\n\r\n  if (isPrimitive(o1) || isPrimitive(o2)) {\r\n    return strict ? o1 === o2 : o1 == o2;\r\n  }\r\n\r\n  if (isDate(o1) && isDate(o2)) {\r\n    return o1.getTime() === o2.getTime();\r\n  }\r\n\r\n  if (isDate(o1) || isDate(o2)) {\r\n    return false;\r\n  }\r\n\r\n  if (isRegExp(o1) && isRegExp(o2)) {\r\n    return o1.source === o2.source &&\r\n      o1.toString().match(/[gimuy]*$/)[0] === o2.toString().match(/[gimuy]*$/)[0] &&\r\n      o1.lastIndex === o2.lastIndex;\r\n  }\r\n\r\n  if (isRegExp(o1) || isRegExp(o2)) {\r\n    return false;\r\n  }\r\n\r\n  if ((!isPlainObject(o1) && !isArray(o1)) || (!isPlainObject(o2) && !isArray(o2))) {\r\n    return false;\r\n  }\r\n\r\n  const p1 = Object.getPrototypeOf(o1);\r\n  const p2 = Object.getPrototypeOf(o1);\r\n\r\n  if (Object.keys(o1).length !== Object.keys(o2).length) {\r\n    return false;\r\n  }\r\n\r\n  if (p1 && p2 && (toStringTag(p1.constructor) !== toStringTag(p2.constructor))) {\r\n    return false;\r\n  }\r\n\r\n  return iterate(o1, (value, key) => {\r\n    if (!(key in o2) || !deepEqual(value, o2[key], strict)) {\r\n      return false;\r\n    }\r\n  }) !== false;\r\n}\r\n\r\n/**\r\n * @function deepEvery\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * If returns truthy the iteration goes on and if not it stops.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {Boolean} - If all the callback calls returned truthy value.\r\n */\r\nfunction deepEvery(object, callback, n, tree) {\r\n  const end = n === 1;\r\n\r\n  return iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    if (\r\n      end || isPrimitive(value)\r\n        ? !callback(value, key, object, newTree)\r\n        : !deepEvery(value, callback, n - 1, newTree)\r\n    ) {\r\n      return false;\r\n    }\r\n  }) !== false;\r\n}\r\n\r\n/**\r\n * @function deepFilter\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * If returns truthy the element is included in the output and if not it's excluded.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {*} Filtered object.\r\n */\r\nfunction deepFilter(object, callback, n, tree) {\r\n  const array = isArrayLike(object);\r\n  const nul = isNil(object);\r\n  const o = array ? [] : nul ? object : {};\r\n  const end = n === 1;\r\n\r\n  iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    if ((end || isPrimitive(value)) && callback(value, key, object, newTree)) {\r\n      if (array) {\r\n        o.push(value);\r\n      } else {\r\n        o[key] = value;\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (!end) {\r\n      const filtered = deepFilter(value, callback, n - 1, newTree);\r\n\r\n      if (filtered) {\r\n        if (array) {\r\n          o.push(filtered);\r\n        } else {\r\n          o[key] = filtered;\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  if (array) {\r\n    return o.length ? o : undefined;\r\n  }\r\n\r\n  if (!nul) {\r\n    return Object.keys(o).length ? o : undefined;\r\n  }\r\n\r\n  return o;\r\n}\r\n\r\n/**\r\n * @function deepFind\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * If returns truthy the iteration stops and if not it continues.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {Tree|null} - If found the whole tree is returned and if not it's null what's returned.\r\n */\r\nfunction deepFind(object, callback, n, tree) {\r\n  const end = n === 1;\r\n\r\n  return iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    if (end || isPrimitive(value)) {\r\n      if (callback(value, key, object, newTree)) {\r\n        return newTree;\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    const result = deepFind(value, callback, n - 1, newTree);\r\n\r\n    if (result) {\r\n      return result;\r\n    }\r\n  }) || null;\r\n}\r\n\r\n/**\r\n * @function deepForEach\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {void}\r\n */\r\nfunction deepForEach(object, callback, n, tree) {\r\n  const end = n === 1;\r\n\r\n  iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    if (end || isPrimitive(value)) {\r\n      callback(value, key, object, newTree);\r\n    } else {\r\n      deepForEach(value, callback, n - 1, newTree);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @function deepForEachEntry\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {void}\r\n */\r\nfunction deepForEachEntry(object, callback, n, tree) {\r\n  const end = n === 1;\r\n\r\n  iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    callback(value, key, object, newTree);\r\n\r\n    if (!end && !isPrimitive(value)) {\r\n      deepForEachEntry(value, callback, n - 1, newTree);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @function deepFreeze\r\n * @private\r\n * @param {*} object - Object to freeze.\r\n * @returns {void}\r\n */\r\nfunction deepFreeze(object) {\r\n  Object.freeze(object);\r\n  iterate(object, deepFreeze);\r\n}\r\n\r\n/**\r\n * @function deepMap\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * Returned value is used to create to new object.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {*} New object.\r\n */\r\nfunction deepMap(object, callback, n, tree) {\r\n  const o = isArrayLike(object) ? [] : isNil(object) ? object : {};\r\n  const end = n === 1;\r\n\r\n  iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    o[key] = end || isPrimitive(value)\r\n      ? callback(value, key, object, newTree)\r\n      : deepMap(value, callback, n - 1, newTree);\r\n  });\r\n\r\n  return o;\r\n}\r\n\r\n/**\r\n * @function deepReduce\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepReduceCallback} callback - Callback that is called on every element.\r\n * Returned value is used to create to new object.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Boolean} start - If callback was called already or not.\r\n * @param {{ IV: * }|undefined} IV - If callback was called already or not.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {{ IV: * }} Transformed IV.\r\n */\r\nfunction deepReduce(object, callback, n, start, IV, tree) {\r\n  const end = n === 1;\r\n\r\n  iterate(object, (value, key, object) => {\r\n    if (!IV && (end || isPrimitive(value)) && !start) {\r\n      IV = { IV: value };\r\n      start = true;\r\n\r\n      return;\r\n    }\r\n\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    IV = end || isPrimitive(value)\r\n      ? { IV: callback(IV.IV, value, key, object, newTree) }\r\n      : deepReduce(value, callback, n - 1, start, IV, newTree);\r\n  });\r\n\r\n  return IV;\r\n}\r\n\r\n/**\r\n * @function deepSome\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * If returns truthy the iteration stops and if not it continues.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {Boolean} - If some of the callback calls returned truthy value.\r\n */\r\nfunction deepSome(object, callback, n, tree) {\r\n  const end = n === 1;\r\n\r\n  return iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    if (\r\n      end || isPrimitive(value)\r\n        ? callback(value, key, object, newTree)\r\n        : deepSome(value, callback, n - 1, newTree)\r\n    ) {\r\n      return true;\r\n    }\r\n  }) || false;\r\n}\r\n\r\nconstructors[0].push({\r\n  check: () => true,\r\n  cls: Super\r\n});\r\n\r\nexport { Super };\r\n","/**\r\n * @module Func\r\n * @private\r\n * @mixin\r\n * @description Exports Func class.\r\n */\r\n\r\nimport { Super } from './Super';\r\nimport { Promise } from './Promise';\r\nimport { constructors } from './constants';\r\nimport { isFunction, validate, toArray, Symbol, defineProperties, iterate } from './helpers';\r\n\r\n/**\r\n * @callback BeforeMiddleware\r\n * @param {Array} args - Previous arguments.\r\n * @param {Func} func - This function.\r\n * @returns {Array} - New arguments.\r\n */\r\n\r\n/**\r\n * @callback AfterMiddleware\r\n * @param {*} returnValue - Previous return value.\r\n * @param {Func} func - This function.\r\n * @returns {*} - New return value.\r\n */\r\n\r\n/**\r\n * @class Func\r\n * @extends Super\r\n * @public\r\n * @param {Function} [func = function () {}] - Function to wrap.\r\n * @returns {Func} Instance of Func.\r\n * @description A wrap of a function.\r\n *\r\n * @example\r\n * const func = new Func(Math.max);\r\n *\r\n * func(1, 4, -2, 5); // 5\r\n */\r\nclass Func extends Super {\r\n  constructor(func = () => {}) {\r\n    super();\r\n\r\n    function proxy() {\r\n      if (++proxy.$$.called < proxy.$$.canBeCalled) {\r\n        const { before, after, sync, contextLocked } = proxy.$$;\r\n        let { context, args } = proxy.$$;\r\n        let ret;\r\n\r\n        context = contextLocked ? context : context || this;\r\n        args = args.concat(toArray(arguments));\r\n\r\n        if (sync) {\r\n          iterate(before, (middleware) => {\r\n            args = middleware.call(context, toArray(args), proxy);\r\n          });\r\n\r\n          ret = func.apply(context, toArray(args));\r\n\r\n          iterate(after, (middleware) => {\r\n            ret = middleware.call(context, ret, proxy);\r\n          });\r\n\r\n          return ret;\r\n        }\r\n\r\n        let promise = Promise.resolve(args);\r\n\r\n        iterate(before, (middleware) => {\r\n          promise = promise.then((args) => middleware.call(context, toArray(args), proxy));\r\n        });\r\n\r\n        promise = promise.then((args) => func.apply(context, toArray(args)));\r\n\r\n        iterate(after, (middleware) => {\r\n          promise = promise.then((ret) => middleware.call(context, ret, proxy));\r\n        });\r\n\r\n        return promise;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @member {Object} Func#$$\r\n     * @type {Object}\r\n     * @protected\r\n     * @property {Array} after - After middleware array.\r\n     * @property {Array} args - Locked and bound arguments.\r\n     * @property {Array} argsLocked - Locked arguments.\r\n     * @property {Array} before - Before middleware array.\r\n     * @property {Number} called - How many times the function was called.\r\n     * @property {Number} canBeCalled - How many times the function can be actually called.\r\n     * @property {*} context - Locked or bound context.\r\n     * @property {Boolean} contextLocked - Is context locked or not.\r\n     * @property {Boolean} sync - Is function synchronous or not.\r\n     * @description Config parameters.\r\n     */\r\n    Object.defineProperty(proxy, '$$', {\r\n      value: {\r\n        after: [],\r\n        args: [],\r\n        argsLocked: [],\r\n        before: [],\r\n        called: 0,\r\n        canBeCalled: Infinity,\r\n        context: null,\r\n        contextLocked: false,\r\n        sync: true\r\n      }\r\n    });\r\n\r\n    /**\r\n     * @member {Function} Func#$\r\n     * @type {Function}\r\n     * @public\r\n     * @description Original function.\r\n     */\r\n    Object.defineProperty(proxy, '$', { value: func });\r\n    Object.setPrototypeOf(proxy, Func.prototype);\r\n\r\n    return proxy;\r\n  }\r\n\r\n  /**\r\n   * @method Func#after\r\n   * @public\r\n   * @param {AfterMiddleware} middleware - After middleware.\r\n   * @param {Boolean|*} [afterAll = true] - Boolean parameter where to put middleware.\r\n   * Truthy parameter stands for \"to the end\" and falsey for \"to the beginning\".\r\n   * @returns {Func} Returns this.\r\n   * @description Adds after middleware.\r\n   *\r\n   * @example\r\n   * const func = new Func((a) => a + 1)\r\n   *   .after((result) => result * result);\r\n   *\r\n   * func(4);  // 25\r\n   * func(-4); // 9\r\n   */\r\n  after(middleware, afterAll = true) {\r\n    validate([middleware], ['function'], 'Func#after');\r\n\r\n    const { after } = this.$$;\r\n\r\n    if (afterAll) {\r\n      after.push(middleware);\r\n    } else {\r\n      after.unshift(middleware);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#apply\r\n   * @public\r\n   * @param {*} [context] - Context to call with.\r\n   * @param {(Array|Arguments)} [args] - Arguments to call with.\r\n   * @returns {*} Return of function call.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\r\n   * @description Synonym for\r\n   * [Function#apply]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Function/apply}.\r\n   */\r\n  apply(context, args) {\r\n    return (() => {}).apply.apply(this, arguments);\r\n  }\r\n\r\n  /**\r\n   * @method Func#async\r\n   * @public\r\n   * @param {Boolean|*} [condition] - If the function should be synchronous or not.\r\n   * @returns {Func} Returns this.\r\n   * @description If the function should be synchronous or not.\r\n   *\r\n   * @example\r\n   * const func = new Func((a) => a + 1).async();\r\n   *\r\n   * func(4).then((result) => {\r\n   *   console.log(result); // 5\r\n   * });\r\n   */\r\n  async(condition = true) {\r\n    this.$$.sync = !condition;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#before\r\n   * @public\r\n   * @param {BeforeMiddleware} middleware - Before middleware.\r\n   * @param {Boolean|*} [beforeAll = true] - Boolean parameter where to put middleware.\r\n   * Truthy parameter stands for \"to the beginning\" and falsey for \"to the end\".\r\n   * @returns {Func} Returns this.\r\n   * @description Adds before middleware.\r\n   *\r\n   * @example\r\n   * const func = new Func((a) => a + 1)\r\n   *   .before(([arg]) => [arg * arg]);\r\n   *\r\n   * func(4); // 17\r\n   * func(3); // 10\r\n   */\r\n  before(middleware, beforeAll = true) {\r\n    validate([middleware], ['function'], 'Func#before');\r\n\r\n    const { before } = this.$$;\r\n\r\n    if (beforeAll) {\r\n      before.unshift(middleware);\r\n    } else {\r\n      before.push(middleware);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#bind\r\n   * @public\r\n   * @param {*} context - Context to bind.\r\n   * @param {...(Array|Arguments|*)} args - Arguments to bind.\r\n   * @returns {Func} Returns this.\r\n   * @description Composition of {@link Func#bindContext} and {@link Func#bindArgs}.\r\n   *\r\n   * @example\r\n   * const func = new Func(function (a, b) {\r\n   *   return this.a + a + b;\r\n   * }).bind({ a: 2 }, 1);\r\n   *\r\n   * func(1); // 4\r\n   * func(3); // 6\r\n   */\r\n  bind(context, ...args) {\r\n    return this\r\n      .bindContext(context)\r\n      .bindArgs(args);\r\n  }\r\n\r\n  /**\r\n   * @method Func#bindArgs\r\n   * @public\r\n   * @param {(Array|Arguments)} args - Arguments to bind.\r\n   * @returns {Func} Returns this.\r\n   * @description Binds arguments in addition to already locked and bound ones.\r\n   *\r\n   * @example\r\n   * const func = new Func((...args) => {\r\n   *   let sum = 0;\r\n   *\r\n   *   for (let i = 0; i < args.length; i++) {\r\n   *     sum += args[i];\r\n   *   }\r\n   *\r\n   *   return sum;\r\n   * });\r\n   *\r\n   * func(1, 2, 3); // 6\r\n   *\r\n   * func.bindArgs([4]);\r\n   *\r\n   * func(1, 2, 3); // 10\r\n   *\r\n   * func.bindArgs([5]);\r\n   *\r\n   * func(1, 2, 3); // 15\r\n   */\r\n  bindArgs(args) {\r\n    const func = this.$$;\r\n\r\n    func.args = func.args.concat(toArray(args));\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#bindContext\r\n   * @public\r\n   * @param {*} context - Context to bind.\r\n   * @returns {Func} Returns this.\r\n   * @description Bind new context if it's not already locked.\r\n   *\r\n   * @example\r\n   * const func = new Func(function () {\r\n   *   return this.a;\r\n   * }).bindContext({ a: 1 });\r\n   *\r\n   * func(); // 1\r\n   *\r\n   * func.bindContext({ a: 2 });\r\n   *\r\n   * func(); // 2\r\n   */\r\n  bindContext(context) {\r\n    const func = this.$$;\r\n\r\n    if (!func.contextLocked) {\r\n      func.context = context;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#call\r\n   * @public\r\n   * @param {*} [context] - Context to call with.\r\n   * @param {...*} [args] - Arguments to call with.\r\n   * @returns {*} Return of function call.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Function/call\r\n   * @description Synonym for\r\n   * [Function#call]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Function/call}.\r\n   */\r\n  call(context, ...args) {\r\n    return (() => {}).call.apply(this, arguments);\r\n  }\r\n\r\n  /**\r\n   * @member {Number} Func#called\r\n   * @public\r\n   * @readonly\r\n   * @description Returns how many times the function was called.\r\n   *\r\n   * @example\r\n   * const func = new Func((a) => a + 1);\r\n   *\r\n   * func();\r\n   * func();\r\n   *\r\n   * func.called // 2\r\n   */\r\n  get called() {\r\n    return this.$$.called;\r\n  }\r\n\r\n  /**\r\n   * @method Func#canBeCalled\r\n   * @public\r\n   * @param {Number} times - Number of maximum times the function is called (middlewares are also taken for a count).\r\n   * @returns {Func} Returns this.\r\n   * @description Method for limiting call times of function.\r\n   *\r\n   * @example\r\n   * const func = new Func((a) => a + 1)\r\n   *   .canBeCalled(1);\r\n   *\r\n   * func(1); // 2\r\n   * func(1); // undefined\r\n   */\r\n  canBeCalled(times) {\r\n    this.$$.canBeCalled = times;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#limitArgsTo\r\n   * @public\r\n   * @param {Number} number - Number of arguments to limit to.\r\n   * @returns {Func} Returns this.\r\n   * @description Built-in before middleware for limiting number of arguments\r\n   * that is put to the end of before middlewares.\r\n   *\r\n   * @example\r\n   * const func = new Func((a, b) => [a, b]);\r\n   *\r\n   * func(1, 2); // [1, 2]\r\n   *\r\n   * func.limitArgsTo(1);\r\n   *\r\n   * func(1, 2); // [1, undefined]\r\n   */\r\n  limitArgsTo(number) {\r\n    return this.before((args) => args.slice(0, number), false);\r\n  }\r\n\r\n  /**\r\n   * @method Func#lock\r\n   * @public\r\n   * @param {*} context - Context to lock.\r\n   * @param {(Array|Arguments|*)} args - Arguments to lock.\r\n   * @returns {Func} Returns this.\r\n   * @description Composition of {@link Func#lockContext} and {@link Func#lockArgs}.\r\n   *\r\n   * @example\r\n   * const func = new Func(function (a, b) {\r\n   *   return this.a + a + b;\r\n   * }).lock({ a: 2 }, [1]);\r\n   *\r\n   * func(1); // 4\r\n   * func(3); // 6\r\n   */\r\n  lock(context, args) {\r\n    return this\r\n      .lockContext(context)\r\n      .lockArgs(args);\r\n  }\r\n\r\n  /**\r\n   * @method Func#lockArgs\r\n   * @public\r\n   * @param {(Array|Arguments|*)} args - Arguments to lock.\r\n   * @returns {Func} Returns this.\r\n   * @description Erases bound arguments and adds new arguments to already locked ones.\r\n   *\r\n   * @example\r\n   * const func = new Func((...args) => {\r\n   *   let sum = 0;\r\n   *\r\n   *   for (let i = 0; i < args.length; i++) {\r\n   *     sum += args[i];\r\n   *   }\r\n   *\r\n   *   return sum;\r\n   * });\r\n   *\r\n   * func(1, 2, 3); // 6\r\n   *\r\n   * func.lockArgs([4]);\r\n   *\r\n   * func(1, 2, 3); // 10\r\n   *\r\n   * func.bindArgs([6, 7]);\r\n   * func.lockArgs([5]);\r\n   *\r\n   * func(1, 2, 3); // 15\r\n   */\r\n  lockArgs(args) {\r\n    const func = this.$$;\r\n\r\n    func.args = func.argsLocked = func.argsLocked.concat(toArray(args));\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#lockContext\r\n   * @public\r\n   * @param {*} context - Context to lock.\r\n   * @returns {Func} Returns this.\r\n   * @description Locks context if it's not already locked.\r\n   *\r\n   * @example\r\n   * const func = new Func(function () {\r\n   *   return this.a;\r\n   * }).lockContext({ a: 1 });\r\n   *\r\n   * func(); // 1\r\n   *\r\n   * func.lockContext({ a: 2 });\r\n   *\r\n   * func(); // 1\r\n   */\r\n  lockContext(context) {\r\n    const func = this.$$;\r\n\r\n    if (!func.contextLocked) {\r\n      func.context = context;\r\n      func.contextLocked = true;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#timing\r\n   * @public\r\n   * @param {String} mark - Argument that is passed to console.time() and console.timeEnd().\r\n   * By default name of the original function, or if it's not present, 'anonymous' is used.\r\n   * @returns {Func} Returns this.\r\n   * @description Built-in before and after middlewares for noting calling time.\r\n   * In case of asynchronous functions it notes time between calling function and resolving or rejecting the result.\r\n   *\r\n   * @example\r\n   * const func = new Func((a) => a + 1)\r\n   *   .timing('plus 1');\r\n   *\r\n   * func(2); // plus 1: 0.010ms\r\n   *\r\n   * const async = new Func(() => new Promise(() => {\r\n   *     setTimeout(resolve, 1000);\r\n   *   }))\r\n   *   .async()\r\n   *   .timing();\r\n   *\r\n   * async();\r\n   * // After 1 second...\r\n   * // anonymous: 1000.010ms\r\n   */\r\n  timing(mark) {\r\n    mark = arguments.length ? String(mark) : this.$.name || 'anonymous';\r\n\r\n    this.before((args) => {\r\n      console.time(mark);\r\n\r\n      return args;\r\n    }, false);\r\n\r\n    this.after((ret) => {\r\n      console.timeEnd(mark);\r\n\r\n      return ret;\r\n    }, false);\r\n\r\n    return this;\r\n  }\r\n\r\n  toString() {\r\n    return (() => {}).toString.call(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Func#unbind\r\n   * @public\r\n   * @returns {Func} Returns this.\r\n   * @description Composition of {@link Func#unbindContext} and {@link Func#unbindArgs}.\r\n   *\r\n   * @example\r\n   * const func = new Func(function (a) {\r\n   *   return this.foo + ' & ' +  a;\r\n   * }).bind({ foo: 2 }, 1);\r\n   *\r\n   * func(); // '2 & 1'\r\n   *\r\n   * func.unbind();\r\n   *\r\n   * func(); // 'undefined & undefined'\r\n   */\r\n  unbind() {\r\n    return this\r\n      .unbindContext()\r\n      .unbindArgs();\r\n  }\r\n\r\n  /**\r\n   * @method Func#unbindArgs\r\n   * @public\r\n   * @returns {Func} Returns this.\r\n   * @description Erases all bound arguments.\r\n   *\r\n   * @example\r\n   * const func = new Func((...args) => {\r\n   *   let sum = 0;\r\n   *\r\n   *   for (let i = 0; i < args.length; i++) {\r\n   *     sum += args[i];\r\n   *   }\r\n   *\r\n   *   return sum;\r\n   * }).bindArgs([4, 5]);\r\n   *\r\n   * func(1, 2, 3); // 15\r\n   *\r\n   * func.unbindArgs();\r\n   *\r\n   * func(1, 2, 3); // 6\r\n   */\r\n  unbindArgs() {\r\n    const func = this.$$;\r\n\r\n    func.args = func.argsLocked;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#unbindContext\r\n   * @public\r\n   * @returns {Func} Returns this.\r\n   * @description Erases context if it's not locked.\r\n   *\r\n   * @example\r\n   * const func = new Func(function () {\r\n   *   return this.foo;\r\n   * }).bindContext({ foo: 1 });\r\n   *\r\n   * func(); // 1\r\n   *\r\n   * func.unbindArgs();\r\n   *\r\n   * func(); // undefined\r\n   */\r\n  unbindContext() {\r\n    const func = this.$$;\r\n\r\n    if (!func.contextLocked) {\r\n      func.context = null;\r\n    }\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\ndefineProperties(Func.prototype, {\r\n  [Symbol.toStringTag]: 'Func'\r\n});\r\n\r\nconstructors[1].push({\r\n  check: isFunction,\r\n  cls: Func\r\n});\r\n\r\n/**\r\n * @function method\r\n * @public\r\n * @param {String} method - Method to call.\r\n * @param {(Array|Arguments|*)} args - Arguments to call the method with.\r\n * @returns {Function} Function that calls stated method with given arguments.\r\n * @description Function that returns the function\r\n * that calls stated method of its first argument with given arguments.\r\n *\r\n * @example\r\n * [1.2345, 2.789, 3.14].map(method('toFixed', [2])); // ['1.23', '2.79', '3.14']\r\n */\r\nfunction method(method, args = []) {\r\n  return (x) => x[method].apply(x, toArray(args));\r\n}\r\n\r\n/**\r\n * @function noop\r\n * @public\r\n * @returns {void}\r\n * @description Empty function.\r\n */\r\nfunction noop() {}\r\n\r\n/**\r\n * @function prop\r\n * @public\r\n * @param {String} prop - Property to return.\r\n * @returns {Function} Function that returns given property of its first argument.\r\n * @description Function that return the function that returns given property of its first argument.\r\n *\r\n * @example\r\n * ['foo', '12', '7890'].map(prop('length')); // [3, 2, 4]\r\n */\r\nfunction prop(prop) {\r\n  return ({ [prop]: value }) => value;\r\n}\r\n\r\n/**\r\n * @function self\r\n * @public\r\n * @returns {*} First argument itself.\r\n * @description Function that returns the first argument.\r\n *\r\n * @example\r\n * [1, 2].map(self);                     // [1, 2]\r\n * [1, 3, NaN, 0, 7, null].filter(self); // [1, 3, 7]\r\n */\r\nfunction self() {\r\n  return arguments[0];\r\n}\r\n\r\nexport { Func, method, noop, prop, self };\r\n","/**\r\n * @module Num\r\n * @private\r\n * @mixin\r\n * @description Exports Num class.\r\n */\r\n\r\nimport { Super } from './Super';\r\nimport { Func } from './Func';\r\nimport { Promise } from './Promise';\r\nimport { constructors } from './constants';\r\nimport {\r\n  isNumber, isFinite, toArray,\r\n  defineProperties, validate, Symbol\r\n} from './helpers';\r\n\r\nconst toRadian = Math.PI / 180;\r\nconst toDegree = 180 / Math.PI;\r\nconst ln2 = Math.LN2;\r\nconst ln10 = Math.LN10;\r\n\r\n/**\r\n * @class Num\r\n * @extends Super\r\n * @public\r\n * @param {Number} [number = 0] - A number to wrap.\r\n * @returns {Num} Instance of Num.\r\n * @description Wrap of a number.\r\n *\r\n * @example\r\n * const num = new Num(1);\r\n */\r\nclass Num extends Super {\r\n  constructor(number = 0) {\r\n    super(+number);\r\n\r\n    /**\r\n     * @member Num#$\r\n     * @type {Number}\r\n     * @public\r\n     * @description Original number.\r\n     */\r\n  }\r\n\r\n  /**\r\n   * @member Num#abs\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/abs\r\n   * @description Synonym for\r\n   * [Math.abs]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/abs}.\r\n   *\r\n   * @example\r\n   * new Num(1).abs;  // 1\r\n   * new Num(-1).abs; // 1\r\n   */\r\n  get abs() {\r\n    return Math.abs(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Num#acos\r\n   * @public\r\n   * @param {Boolean|*} [toDegrees = false] If it is truthy the return value is transformed into degrees.\r\n   * @returns {Number} Arccosine of the number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/acos\r\n   * @description Synonym for\r\n   * [Math.acos]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/acos}.\r\n   */\r\n  acos(toDegrees) {\r\n    return (toDegrees ? toDegree : 1) * Math.acos(this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#acosh\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh\r\n   * @description Synonym for\r\n   * [Math.acosh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh}.\r\n   */\r\n  get acosh() {\r\n    const number = this.$;\r\n\r\n    return Math.log(number + Math.sqrt(number * number - 1));\r\n  }\r\n\r\n  /**\r\n   * @member Num#asinh\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh\r\n   * @description Synonym for\r\n   * [Math.asinh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh}.\r\n   */\r\n  get asinh() {\r\n    const number = this.$;\r\n\r\n    return Math.log(number + Math.sqrt(number * number + 1));\r\n  }\r\n\r\n  /**\r\n   * @method Num#asin\r\n   * @public\r\n   * @param {Boolean|*} [toDegrees = false] If it is truthy the return value is transformed into degrees.\r\n   * @returns {Number} Arcsine of the number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/asin\r\n   * @description Synonym for\r\n   * [Math.asin]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/asin}.\r\n   */\r\n  asin(toDegrees) {\r\n    return (toDegrees ? toDegree : 1) * Math.asin(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Num#atan\r\n   * @public\r\n   * @param {Boolean|*} [toDegrees = false] If it is truthy the return value is transformed into degrees.\r\n   * @returns {Number} Arcsine of the number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/atan\r\n   * @description Synonym for\r\n   * [Math.atan]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/atan}.\r\n   */\r\n  atan(toDegrees) {\r\n    return (toDegrees ? toDegree : 1) * Math.atan(this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#atanh\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh\r\n   * @description Synonym for\r\n   * [Math.atanh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh}.\r\n   */\r\n  get atanh() {\r\n    const number = this.$;\r\n\r\n    return Math.log((1 + number) / (1 - number)) / 2;\r\n  }\r\n\r\n  /**\r\n   * @member Num#cbrt\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt\r\n   * @description Synonym for\r\n   * [Math.cbrt]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt}.\r\n   */\r\n  get cbrt() {\r\n    const cbrt = Math.pow(Math.abs(this.$), 1 / 3);\r\n\r\n    return this.$ > 0 ? cbrt : -cbrt;\r\n  }\r\n\r\n  /**\r\n   * @member Num#ceil\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil\r\n   * @description Synonym for\r\n   * [Math.ceil]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil}.\r\n   *\r\n   * @example\r\n   * new Num(1.1).ceil;  // 2\r\n   * new Num(-1.1).ceil; // -1\r\n   */\r\n  get ceil() {\r\n    return Math.ceil(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Num#cos\r\n   * @public\r\n   * @param {Boolean|*} [asDegrees = false] If it is truthy the number is treated as a degree value.\r\n   * @returns {Number} Cosine of the number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cos\r\n   * @description Synonym for\r\n   * [Math.cos]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cos}.\r\n   */\r\n  cos(asDegrees) {\r\n    return Math.cos((asDegrees ? toRadian : 1) * this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#cosh\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh\r\n   * @description Synonym for\r\n   * [Math.cosh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh}.\r\n   */\r\n  get cosh() {\r\n    const exp = this.exp;\r\n\r\n    return (exp + 1 / exp) / 2;\r\n  }\r\n\r\n  /**\r\n   * @member Num#cube\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description Cube of the number.\r\n   *\r\n   * @example\r\n   * new Num(2).cube;  // 8\r\n   * new Num(-3).ceil; // -27\r\n   */\r\n  get cube() {\r\n    return this.$ * this.$ * this.$;\r\n  }\r\n\r\n  /**\r\n   * @member Num#exp\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/exp\r\n   * @description Synonym for\r\n   * [Math.exp]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/exp}.\r\n   */\r\n  get exp() {\r\n    return Math.exp(this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#floor\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\r\n   * @description Synonym for\r\n   * [Math.floor]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/floor}.\r\n   *\r\n   * @example\r\n   * new Num(1.1).floor;  // 1\r\n   * new Num(-1.1).floor; // -2\r\n   */\r\n  get floor() {\r\n    return Math.floor(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Num#interval\r\n   * @public\r\n   * @param {Function} func - Function that is called every <number> milliseconds.\r\n   * @param {Array} [args] - Arguments passed to the function.\r\n   * @returns {Function} Function that aborts the interval. The context of the function (if it's not already bound)\r\n   * is the object with the abort method.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/setInterval\r\n   * @description Analogue of the\r\n   * [setInterval]{@link https://developer.mozilla.org/en/docs/Web/API/WindowTimers/setInterval}.\r\n   *\r\n   * @example\r\n   * const times = 0;\r\n   * new Num(50).interval(function () {\r\n   *   if (++times === 10) {\r\n   *     this.abort();\r\n   *   }\r\n   * });\r\n   */\r\n  interval(func, args = []) {\r\n    validate([func], ['function'], 'Num#interval');\r\n\r\n    func = new Func(func).bindContext({ abort });\r\n    args = toArray(args);\r\n\r\n    const number = this.$;\r\n\r\n    let aborted;\r\n    let timeout = setTimeout(function interval() {\r\n      if (!aborted) {\r\n        func.apply(null, args);\r\n\r\n        if (!aborted) {\r\n          timeout = setTimeout(interval, number);\r\n        }\r\n      }\r\n    }, 0);\r\n\r\n    return abort;\r\n\r\n    function abort() {\r\n      aborted = true;\r\n\r\n      return clearTimeout(timeout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @member Num#ln\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log\r\n   * @description Synonym for\r\n   * [Math.log]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log}.\r\n   */\r\n  get ln() {\r\n    return Math.log(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Num#log\r\n   * @public\r\n   * @param {Number} number - Number to get logarithm of.\r\n   * @returns {Number} Logarithm of the argument number to the number base.\r\n   * @description Returns the logarithm of the argument number to the number base.\r\n   *\r\n   * @example\r\n   * new Num(2).log(16);  // 4\r\n   * new Num(3).log(243); // 5\r\n   */\r\n  log(number) {\r\n    return Math.log(number) / Math.log(this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#log2\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log2\r\n   * @description Synonym for\r\n   * [Math.log2]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log2}.\r\n   */\r\n  get log2() {\r\n    return this.ln / ln2;\r\n  }\r\n\r\n  /**\r\n   * @member Num#log10\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log10\r\n   * @description Synonym for\r\n   * [Math.log10]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log10}.\r\n   */\r\n  get log10() {\r\n    return this.ln / ln10;\r\n  }\r\n\r\n  /**\r\n   * @method Num#pow\r\n   * @public\r\n   * @param {Number} power - Power the number should be raised to.\r\n   * @returns {Number} The number to the <power> power.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/pow\r\n   * @description Synonym for\r\n   * [Math.pow]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/pow}.\r\n   *\r\n   * @example\r\n   * new Num(4).pow(.5); // 2\r\n   * new Num(3).pow(2);  // 9\r\n   */\r\n  pow(power) {\r\n    return Math.pow(this.$, power);\r\n  }\r\n\r\n  /**\r\n   * @method Num#root\r\n   * @public\r\n   * @param {Number} power - Power the number should be raised to.\r\n   * @returns {Number} The <power> root of the number.\r\n   * @description Synonym for number.pow(1 / power);\r\n   *\r\n   * @example\r\n   * new Num(4).root(2);   // 0.5\r\n   * new Num(243).root(5); // 3\r\n   */\r\n  root(power) {\r\n    return Math.pow(this.$, 1 / power);\r\n  }\r\n\r\n  /**\r\n   * @member Num#round\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/round\r\n   * @description Synonym for\r\n   * [Math.round]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/round}.\r\n   *\r\n   * @example\r\n   * new Num(1.1).floor;  // 1\r\n   * new Num(-1.1).floor; // -1\r\n   * new Num(1.5).floor;  // 2\r\n   */\r\n  get round() {\r\n    return Math.round(this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#sign\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\r\n   * @description Synonym for\r\n   * [Math.sign]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sign}.\r\n   */\r\n  get sign() {\r\n    const number = this.$;\r\n\r\n    if (!number) {\r\n      return number;\r\n    }\r\n\r\n    return number > 0 ? 1 : -1;\r\n  }\r\n\r\n  /**\r\n   * @method Num#sin\r\n   * @public\r\n   * @param {Boolean|*} [asDegrees = false] If it is truthy the number is treated as a degree value.\r\n   * @returns {Number} Sine of the number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sin\r\n   * @description Synonym for\r\n   * [Math.sin]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sin}.\r\n   */\r\n  sin(asDegrees) {\r\n    return Math.sin((asDegrees ? toRadian : 1) * this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#sinh\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh\r\n   * @description Synonym for\r\n   * [Math.sinh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh}.\r\n   */\r\n  get sinh() {\r\n    const exp = this.exp;\r\n\r\n    return (exp - 1 / exp) / 2;\r\n  }\r\n\r\n  /**\r\n   * @member Num#sq\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description The square of the number.\r\n   *\r\n   * @example\r\n   * new Num(2).sq;  // 4\r\n   * new Num(-3).sq; // 9\r\n   */\r\n  get sq() {\r\n    return this.$ * this.$;\r\n  }\r\n\r\n  /**\r\n   * @member Num#sqrt\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt\r\n   * @description Synonym for\r\n   * [Math.sqrt]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt}.\r\n   */\r\n  get sqrt() {\r\n    return Math.sqrt(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Num#tan\r\n   * @public\r\n   * @param {Boolean|*} [asDegrees = false] If it is truthy the number is treated as a degree value.\r\n   * @returns {Number} Tangent of the number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/tan\r\n   * @description Synonym for\r\n   * [Math.tan]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/tan}.\r\n   */\r\n  tan(asDegrees) {\r\n    return Math.tan((asDegrees ? toRadian : 1) * this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#tanh\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh\r\n   * @description Synonym for\r\n   * [Math.tanh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh}.\r\n   */\r\n  get tanh() {\r\n    const number = this.$;\r\n\r\n    if (!isFinite(number)) {\r\n      return this.sign;\r\n    }\r\n\r\n    const exp = Math.exp(2 * number);\r\n\r\n    return (exp - 1) / (exp + 1);\r\n  }\r\n\r\n  /**\r\n   * @method Num#timeout\r\n   * @public\r\n   * @param {*} [value] - Value to be resolved by the promise.\r\n   * @returns {Promise} Promise that could be aborted.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/WindowTimers/setTimeout\r\n   * @description Promise-based analogue of\r\n   * [setTimeout]{@link https://developer.mozilla.org/en/docs/Web/API/WindowTimers/setTimeout}.\r\n   *\r\n   * @example\r\n   * new Num(50).timeout('resolved').then((value) => {\r\n   *   console.log(value); // 'resolved'\r\n   * });\r\n   *\r\n   * const promise = new Num(50).timeout();\r\n   * promise.abort();\r\n   */\r\n  timeout(value) {\r\n    let timeout;\r\n    let reject;\r\n\r\n    const promise = new Promise((resolve, rej) => {\r\n      reject = rej;\r\n      timeout = setTimeout(resolve, this.$, value);\r\n    });\r\n\r\n    promise.abort = function abort() {\r\n      clearTimeout(timeout);\r\n\r\n      reject(new Error('Timeout was aborted'));\r\n\r\n      return this;\r\n    };\r\n\r\n    return promise;\r\n  }\r\n\r\n  /**\r\n   * @method Num#toBase\r\n   * @public\r\n   * @param {Number} [base = 10] - Base that the number should inverted to.\r\n   * @returns {String} A string representation of the number in <base> base.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toString\r\n   * @description Synonym for\r\n   * [Number#toString]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toString}.\r\n   *\r\n   * @example\r\n   * new Num(4).toBase(2); // 100\r\n   * new Num(3).toBase();  // 3\r\n   */\r\n  toBase(base = 10) {\r\n    return this.$.toString(base);\r\n  }\r\n\r\n  /**\r\n   * @method Num#toExponential\r\n   * @public\r\n   * @param {Number} [fractionDigits] - See the link.\r\n   * @returns {String} A string representation of the number in the exponential format.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential\r\n   * @description Synonym for\r\n   * [Number#toExponential]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential}.\r\n   */\r\n  toExponential(fractionDigits) {\r\n    return this.$.toExponential(fractionDigits);\r\n  }\r\n\r\n  /**\r\n   * @method Num#toFixed\r\n   * @public\r\n   * @param {Number} [digits = 0] - See the link.\r\n   * @returns {String} Fixed-point formatted number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed\r\n   * @description Synonym for\r\n   * [Number#toFixed]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed}.\r\n   */\r\n  toFixed(digits) {\r\n    return this.$.toFixed(digits);\r\n  }\r\n\r\n  /**\r\n   * @method Num#toPrecision\r\n   * @public\r\n   * @param {Number} [precision] - See the link.\r\n   * @returns {String} A string representation of the number to the specified precision.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision\r\n   * @description Synonym for\r\n   * [Number#toPrecision]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision}.\r\n   */\r\n  toPrecision(precision) {\r\n    return this.$.toPrecision(precision);\r\n  }\r\n\r\n  valueOf() {\r\n    return Number(this.$);\r\n  }\r\n}\r\n\r\ndefineProperties(Num.prototype, {\r\n  [Symbol.toStringTag]: 'Num'\r\n});\r\n\r\nconstructors[1].push({\r\n  check: isNumber,\r\n  cls: Num\r\n});\r\n\r\n/**\r\n * @function rand\r\n * @public\r\n * @param {Number} [start = 0] - Start of the range.\r\n * @param {Number} [end = 1] - End of the range.\r\n * @returns {Number} Random number.\r\n * @description Returns a random number in the range specified by the arguments.\r\n *\r\n * @example\r\n * rand(1, 5); // 2.315\r\n * rand(1, 5); // 4.356763\r\n */\r\nfunction rand(start = 0, end = 1) {\r\n  return start + (end - start) * Math.random();\r\n}\r\n\r\n/**\r\n * @function random\r\n * @public\r\n * @param {Integer} start - Start of the range.\r\n * @param {Integer} end - End of the range.\r\n * @returns {Number} Random integer.\r\n * @description Returns a random integer number in the range specified by the arguments.\r\n *\r\n * @example\r\n * random(1, 5); // 3\r\n * random(1, 5); // 1\r\n */\r\nfunction random(start, end) {\r\n  validate([start, end], ['intLike', 'intLike'], 'random');\r\n\r\n  if (end <= start) {\r\n    throw new Error('The second argument must be greater than the first!', 'random');\r\n  }\r\n\r\n  return Math.floor(rand(start, end + 1));\r\n}\r\n\r\nexport { Num, rand, random };\r\n","/**\r\n * @module Arr\r\n * @private\r\n * @mixin\r\n * @description Exports Arr class.\r\n */\r\n\r\nimport { random } from './Num';\r\nimport { Super } from './Super';\r\nimport { constructors } from './constants';\r\nimport {\r\n  isArrayLike, isNaN, isNumber, isString,\r\n  toArray, validate, iterate as iterator, Symbol, defineProperties\r\n} from './helpers';\r\n\r\n/**\r\n * @typedef {Array|*} ArrayLike\r\n * @public\r\n * @description Array-like type.\r\n */\r\n\r\n/**\r\n * @callback ArrayCallback\r\n * @public\r\n * @param {Number} i - Iteration index.\r\n */\r\n\r\n/**\r\n * @callback IterateCallback\r\n * @public\r\n * @param {Number} i - Iteration index.\r\n */\r\n\r\n/**\r\n * @callback CompareFunction\r\n * @public\r\n * @param {*} x - First value to be compared.\r\n * @param {*} y - Second value to be compared.\r\n */\r\n\r\n/**\r\n * @class Arr\r\n * @extends Super\r\n * @public\r\n * @param {Array} [array = []] - An array to wrap.\r\n * @returns {Arr} Instance of Arr.\r\n * @description Wrap of an array.\r\n *\r\n * @example\r\n * new Arr([1, 2]);\r\n */\r\nclass Arr extends Super {\r\n  constructor(array = []) {\r\n    super(toArray(array instanceof Arr ? array.$ : array));\r\n\r\n    /**\r\n     * @member Arr#$\r\n     * @type {Array}\r\n     * @public\r\n     * @description Made array.\r\n     */\r\n  }\r\n\r\n  /**\r\n   * @method Arr#concat\r\n   * @public\r\n   * @param {...(Array|Arr|*)} values - Arrays or any other values to concat the array with.\r\n   * @returns {Arr} New instance of Arr.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\r\n   * @description Synonym for\r\n   * [Array#concat]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/concat}.\r\n   */\r\n  concat(...values) {\r\n    const array = toArray(this.$, true);\r\n\r\n    iterator(arguments, (value) => {\r\n      value = new Super(value).$;\r\n\r\n      if (isArrayLike(value) && !isString(value)) {\r\n        iterator(value, (value) => {\r\n          array.push(value);\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      array.push(value);\r\n    });\r\n\r\n    return new this.constructor(array);\r\n  }\r\n\r\n  /**\r\n   * @member Arr#first\r\n   * @type {*}\r\n   * @public\r\n   * @readonly\r\n   * @description Returns the first element of the array.\r\n   *\r\n   * @example\r\n   * new Arr([1, 2, 3]).first; // 1\r\n   * new Arr([]).first;        // undefined\r\n   */\r\n  get first() {\r\n    return this.$[0];\r\n  }\r\n\r\n  /**\r\n   * @method Arr#indexOf\r\n   * @public\r\n   * @param {*} value - Value to search.\r\n   * @returns {Number} Index of the argument.\r\n   * @description Almost the same as {@link Super#keyOf}. The difference is that if the value is not found\r\n   * -1 returned instead of null and if found Number(key) returned.\r\n   *\r\n   * @example\r\n   * new Arr([1, 2, 3]).indexOf(1);       // 0\r\n   * new Arr([1, 2, 3]).indexOf('1');     // 0\r\n   * new Arr([1, 2, 3]).indexOf(3);       // -1\r\n   * new Arr([1, 2, NaN]).indexOf(NaN);   // 2\r\n   */\r\n  indexOf(value) {\r\n    const key = this.keyOf(value);\r\n\r\n    return key === null ? -1 : Number(key);\r\n  }\r\n\r\n  /**\r\n   * @method Arr#indexOfStrict\r\n   * @public\r\n   * @param {*} value - Value to search.\r\n   * @returns {Number} Index of the argument.\r\n   * @description Almost the same as {@link Super#keyOfStrict}. The difference is that if the value is not found\r\n   * -1 returned instead of null and if found Number(key) returned.\r\n   *\r\n   * @example\r\n   * new Arr([1, 2, 3]).indexOfStrict(1);       // 0\r\n   * new Arr([1, 2, 3]).indexOfStrict('1');     // -1\r\n   * new Arr([1, 2, 3]).indexOfStrict(3);       // -1\r\n   * new Arr([1, 2, NaN]).indexOfStrict(NaN);   // 2\r\n   */\r\n  indexOfStrict(value) {\r\n    const key = this.keyOfStrict(value);\r\n\r\n    return key === null ? -1 : Number(key);\r\n  }\r\n\r\n  /**\r\n   * @method Arr#join\r\n   * @public\r\n   * @param {String} [separator = ','] - See the link.\r\n   * @returns {String} - String of joined array.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/join\r\n   * @description Synonym for\r\n   * [Array#join]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/join}.\r\n   */\r\n  join(separator) {\r\n    return this.$.join.apply(this.$, arguments);\r\n  }\r\n\r\n  /**\r\n   * @member Arr#last\r\n   * @type {*}\r\n   * @public\r\n   * @readonly\r\n   * @description The last element of the array.\r\n   *\r\n   * @example\r\n   * new Arr([1, 2, 3]).last; // 3\r\n   * new Arr([]).last;        // undefined\r\n   */\r\n  get last() {\r\n    const array = this.$;\r\n\r\n    return array[array.length - 1];\r\n  }\r\n\r\n  /**\r\n   * @member Arr#length\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/length\r\n   * @description Synonym for\r\n   * [Array#length]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/length}.\r\n   */\r\n  get length() {\r\n    return this.$.length;\r\n  }\r\n\r\n  /**\r\n   * @method Arr#pop\r\n   * @public\r\n   * @returns {*} Returns deleted element.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\r\n   * @description Synonym for\r\n   * [Array#pop]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/pop}.\r\n   */\r\n  pop() {\r\n    return this.$.pop();\r\n  }\r\n\r\n  /**\r\n   * @method Arr#push\r\n   * @public\r\n   * @param {...*} values See the link.\r\n   * @this {Arr}\r\n   * @returns {Arr} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push\r\n   * @description Synonym for\r\n   * [Array#push]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push}\r\n   * besides returning this.\r\n   */\r\n  push(...values) {\r\n    this.$.push.apply(this.$, arguments);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Arr#random\r\n   * @public\r\n   * @returns {*} Random item of the array.\r\n   * @description Method for getting random items of the array.\r\n   *\r\n   * @example\r\n   * new Arr([1, 5, 3]).random(); // 3\r\n   * new Arr([1, 5, 3]).random(); // 5\r\n   */\r\n  random() {\r\n    return this.$[random(0, this.$.length - 1)];\r\n  }\r\n\r\n  /**\r\n   * @method Arr#reverse\r\n   * @public\r\n   * @returns {Arr} A wrap of the reversed array.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\r\n   * @description Synonym for\r\n   * [Array#reverse]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse}.\r\n   */\r\n  reverse() {\r\n    this.$.reverse();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Arr#shift\r\n   * @public\r\n   * @returns {*} Returns deleted element.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\r\n   * @description Synonym for\r\n   * [Array#shift]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/shift}.\r\n   */\r\n  shift() {\r\n    return this.$.shift();\r\n  }\r\n\r\n  /**\r\n   * @method Arr#shuffle\r\n   * @public\r\n   * @returns {Arr} Returns this.\r\n   * @description Method for shuffling.\r\n   *\r\n   * @example\r\n   * new Arr([1, 2, 3, 4]).shuffle().$; // [4, 2, 3, 1]\r\n   * new Arr([1, 2, 3, 4]).shuffle().$; // [1, 3, 4, 2]\r\n   */\r\n  shuffle() {\r\n    const length = this.$.length;\r\n\r\n    return this.forEach((value, index, array) => {\r\n      const randomIndex = index + Math.floor((length - index) * Math.random());\r\n\r\n      array[index] = array[randomIndex];\r\n      array[randomIndex] = value;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Arr#slice\r\n   * @public\r\n   * @param {Number} [begin = 0] - See the link.\r\n   * @param {Number} [end = array.length] - See the link.\r\n   * @returns {Arr} A wrap of a sliced array.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\r\n   * @description Synonym for\r\n   * [Array#slice]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/slice}.\r\n   */\r\n  slice(begin, end) {\r\n    return new this.constructor(this.$.slice.apply(this.$, arguments));\r\n  }\r\n\r\n  /**\r\n   * @method Arr#sort\r\n   * @public\r\n   * @param {CompareFunction} [compareFunction] - See the link.\r\n   * @returns {Arr} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\r\n   * @description Synonym for\r\n   * [Array#sort]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/sort}.\r\n   */\r\n  sort(compareFunction) {\r\n    validate([compareFunction], ['function||!'], 'Arr#sort');\r\n\r\n    this.$.sort(compareFunction);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Arr#sortAsc\r\n   * @public\r\n   * @returns {Arr} Returns this.\r\n   * @description Method for ascending sorting. Puts non-numbers first, then NaNs, then sorted values.\r\n   *\r\n   * @example\r\n   * new Arr([NaN, 1, -7, '100', 5]).sortAsc().$; // ['100', NaN, -7, 1, 5]\r\n   */\r\n  sortAsc() {\r\n    return this.sort(asc);\r\n  }\r\n\r\n  /**\r\n   * @method Arr#sortDesc\r\n   * @public\r\n   * @returns {Arr} Returns this.\r\n   * @description Method for descending sorting. Puts sorted values first, then NaNs, then non-numbers.\r\n   *\r\n   * @example\r\n   * new Arr([NaN, 1, -7, '100', 5]).sortDesc().$; // [5, 1, -7, NaN, '100']\r\n   */\r\n  sortDesc() {\r\n    return this.sort((y, x) => asc(x, y));\r\n  }\r\n\r\n  /**\r\n   * @method Arr#splice\r\n   * @public\r\n   * @param {Number} [start] - See the link.\r\n   * @param {Number} [deleteCount] - See the link.\r\n   * @param {...*} [items] - See the link.\r\n   * @returns {Arr} A wrap of return value of #splice call.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\r\n   * @description Synonym for\r\n   * [Array#splice]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/splice}.\r\n   */\r\n  splice(start, deleteCount, ...items) {\r\n    return new Arr(this.$.splice.apply(this.$, arguments));\r\n  }\r\n\r\n  /**\r\n   * @method Arr#string\r\n   * @public\r\n   * @returns {String} Concatenated array.\r\n   * @description Synonym for array.join('').\r\n   *\r\n   * @example\r\n   * new Arr([1, 2, 3]).string(); // '123'\r\n   */\r\n  string() {\r\n    return this.join('');\r\n  }\r\n\r\n  /**\r\n   * @method Arr#unshift\r\n   * @public\r\n   * @param {...*} [values] - See the link.\r\n   * @returns {Arr} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\r\n   * @description Synonym for\r\n   * [Array#unshift]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift}\r\n   * besides returning this.\r\n   */\r\n  unshift(...values) {\r\n    this.$.unshift.apply(this.$, arguments);\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\ndefineProperties(Arr.prototype, {\r\n  [Symbol.toStringTag]: 'Arr'\r\n});\r\n\r\n/**\r\n * @function asc\r\n * @private\r\n * @param {*} x - First value to be compared.\r\n * @param {*} y - Second value to be compared.\r\n * @returns {Number} Where to put the first element: before or after.\r\n */\r\nfunction asc(x, y) {\r\n  if (!isNumber(x) && !isNumber(y)) {\r\n    return 0;\r\n  }\r\n\r\n  if (!isNumber(x)) {\r\n    return -1;\r\n  }\r\n\r\n  if (!isNumber(y)) {\r\n    return 1;\r\n  }\r\n\r\n  if (isNaN(x) && isNaN(y)) {\r\n    return 0;\r\n  }\r\n\r\n  if (isNaN(x)) {\r\n    return -1;\r\n  }\r\n\r\n  if (isNaN(y)) {\r\n    return 1;\r\n  }\r\n\r\n  return x - y;\r\n}\r\n\r\nconstructors[1].push({\r\n  check: isArrayLike,\r\n  cls: Arr\r\n});\r\n\r\n/**\r\n * @function array\r\n * @public\r\n * @param {Number} number - Length of the array.\r\n * @param {ArrayCallback} [callback] - If it's present it has to be a function\r\n * that returns the element that is pushed to the new array.\r\n * @returns {Arr} New instance of Arr.\r\n * @description Method for creating new array from the length using optional callback.\r\n *\r\n * @example\r\n * array(3).$;               // [0, 1, 2]\r\n * array(3, (i) => i * 2).$; // [0, 2, 4]\r\n */\r\nfunction array(number, callback) {\r\n  validate([number, callback], [['intLike', '>=0'], 'function||!'], 'array');\r\n\r\n  const array = [];\r\n\r\n  for (let i = 0; i < number; i++) {\r\n    array.push(callback ? callback(i) : i);\r\n  }\r\n\r\n  return new Arr(array);\r\n}\r\n\r\n/**\r\n * @function iterate\r\n * @public\r\n * @param {Number} number - Number of iterations.\r\n * @param {IterateCallback} callback - Callback that is called on each iteration with the iteration index.\r\n * @returns {void}\r\n * @description Method for replacing for (...) construction.\r\n *\r\n * @example\r\n * iterate();\r\n */\r\nfunction iterate(number, callback) {\r\n  validate([number, callback], [['intLike', '>=0'], 'function'], 'iterate');\r\n\r\n  for (let i = 0; i < number; i++) {\r\n    callback(i);\r\n  }\r\n}\r\n\r\nexport { Arr, array, iterate };\r\n","/**\r\n * @module BlobObject\r\n * @private\r\n * @mixin\r\n * @description Exports BlobObject class.\r\n */\r\n\r\nimport { Super } from './Super';\r\nimport { Promise } from './Promise';\r\nimport { constructors } from './constants';\r\nimport {\r\n  isArray, isFunction,\r\n  toStringTag, Symbol, defineProperties\r\n} from './helpers';\r\n\r\n/**\r\n * @typedef {{ buffer: String, binary: String, dataURL: String, text: String }} methods\r\n * @private\r\n * @description List of read blob methods.\r\n */\r\nconst methods = {\r\n  buffer: 'ArrayBuffer',\r\n  binary: 'BinaryString',\r\n  dataURL: 'DataURL',\r\n  text: 'Text'\r\n};\r\nconst { URL } = global;\r\n\r\n/**\r\n * @typedef {('buffer'|'binary'|'dataURL'|'text')} ReadBlobMethod\r\n * @public\r\n * @description Enum type of read blob methods.\r\n */\r\n\r\n/**\r\n * @typedef {ArrayBuffer|ArrayBufferView|Blob|String} BlobParts\r\n * @public\r\n * @description Allowed blob parts.\r\n */\r\n\r\n/**\r\n * @callback ReaderEventListener\r\n * @public\r\n * @param {Event} e - Fired event.\r\n * @param {FileReader} reader - FileReader.\r\n */\r\n\r\n/**\r\n * @class BlobObject\r\n * @extends Super\r\n * @public\r\n * @param {Blob} blob - Blob to wrap.\r\n * @returns {BlobObject} Instance of BlobObject.\r\n * @description Wrap of a blob.\r\n *\r\n * @example\r\n * new BlobObject(new Blob(['{\"foo\":\"bar\"}'], { type: 'application/json' }));\r\n */\r\nclass BlobObject extends Super {\r\n  /**\r\n   * @member BlobObject#$\r\n   * @type {Blob}\r\n   * @public\r\n   * @description Original Blob.\r\n   */\r\n\r\n  /**\r\n   * @member {String} BlobObject#dataURL\r\n   * @type {String}\r\n   * @public\r\n   * @readonly\r\n   * @description Returns dataURL representation of the blob.\r\n   */\r\n  get dataURL() {\r\n    return URL.createObjectURL(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method BlobObject#readAs\r\n   * @public\r\n   * @param {ReadBlobMethod} method - Method that is used for reading from blob.\r\n   * @param {ReaderEventListener} [progress] - Progress listener.\r\n   * @returns {Promise} Promise that could be aborted.\r\n   * @description Method for reading from blobs.\r\n   *\r\n   * @example\r\n   * new BlobObject(new Blob(['{\"foo\":\"bar\"}'], { type: 'application/json' }))\r\n   *   .readAs('text')\r\n   *   .then((value) => {\r\n   *     console.log(value); // '{\"foo\":\"bar\"}'\r\n   *   });\r\n   */\r\n  readAs(method, progress) {\r\n    if (!methods[method]) {\r\n      throw new Error('1st argument must be one of following values: buffer, binary, dataURL, text');\r\n    }\r\n\r\n    let reader = new FileReader();\r\n    let toReject;\r\n\r\n    if (isFunction(progress)) {\r\n      reader.onprogress = function (e) {\r\n        progress(e, this);\r\n      };\r\n    }\r\n\r\n    const promise = new Promise((resolve, reject) => {\r\n      toReject = reject;\r\n\r\n      reader.onerror = ({ target }) => {\r\n        if (reader) {\r\n          reject(target.error);\r\n        }\r\n      };\r\n\r\n      reader.onload = ({ target }) => {\r\n        resolve(target.result);\r\n      };\r\n\r\n      reader[`readAs${ methods[method] }`](this.$);\r\n    });\r\n\r\n    promise.abort = function abort() {\r\n      toReject(new Error('Reading was aborted'));\r\n\r\n      reader.abort();\r\n\r\n      reader = null;\r\n\r\n      return this;\r\n    };\r\n\r\n    return promise;\r\n  }\r\n\r\n  /**\r\n   * @method BlobObject#saveAs\r\n   * @public\r\n   * @param {String} [name] - Name that is used for saving file.\r\n   * @returns {BlobObject} Returns this.\r\n   * @description Method for saving blobs.\r\n   *\r\n   * @example\r\n   * new BlobObject(new Blob(['{\"foo\":\"bar\"}'], { type: 'application/json' }))\r\n   *   .saveAs('blob.json');\r\n   */\r\n  saveAs(name = 'download') {\r\n    const anchor = document.createElement('a');\r\n\r\n    anchor.href = this.dataURL;\r\n    anchor.setAttribute('download', name);\r\n    anchor.click();\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\ndefineProperties(BlobObject.prototype, {\r\n  [Symbol.toStringTag]: 'BlobObject'\r\n});\r\n\r\nconstructors[1].push({\r\n  check: (blob) => /^(Blob|File)$/.test(toStringTag(blob)),\r\n  cls: BlobObject\r\n});\r\n\r\n/**\r\n * @function blob\r\n * @public\r\n * @param {(BlobParts[]|BlobParts)} blobParts - Blob parts that are passed to\r\n * [Blob]{@link https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob} constructor.\r\n * @param {Object} [options] - Options that are passed to\r\n * [Blob]{@link https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob} constructor.\r\n * @returns {BlobObject} New instance of BlobObject.\r\n * @description Function for creating blobs not involving BlobObject and Blob constructors.\r\n */\r\nfunction blob(blobParts, options = {}) {\r\n  if (!isArray(blobParts)) {\r\n    blobParts = [blobParts];\r\n  }\r\n\r\n  return new BlobObject(new Blob(blobParts, options));\r\n}\r\n\r\nexport { BlobObject, blob };\r\n","/**\r\n * @module Str\r\n * @private\r\n * @mixin\r\n * @description Exports Str class.\r\n */\r\n\r\nimport { D } from './D';\r\nimport { Super } from './Super';\r\nimport { constructors, regexpSpecialCharacters } from './constants';\r\nimport {\r\n  isFunction, isNumberLike, isObject, isString,\r\n  validate, Symbol, defineProperties, iterate\r\n} from './helpers';\r\n\r\nconst htmlSpecials = {\r\n  '&': '&amp;',\r\n  '<': '&lt;',\r\n  '>': '&gt;'\r\n};\r\nconst regexpSpecialsRegexp = new RegExp(\r\n  new Super(regexpSpecialCharacters)\r\n    .word((x) => `\\\\${ x }|`)\r\n    .replace(/\\|$/, ''),\r\n  'g'\r\n);\r\n\r\n/**\r\n * @class Str\r\n * @extends Super\r\n * @public\r\n * @param {String} [string = ''] - A string to wrap.\r\n * @returns {Str} Instance of Str.\r\n * @description Wrap of a string.\r\n *\r\n * @example\r\n * const s = new Num('1');\r\n */\r\nclass Str extends Super {\r\n  constructor(string = '') {\r\n    super(`${ string }`);\r\n\r\n    /**\r\n     * @member Str#$\r\n     * @type {String}\r\n     * @public\r\n     * @description Original string.\r\n     */\r\n  }\r\n\r\n  /**\r\n   * @method Str#capitalizeFirst\r\n   * @public\r\n   * @returns {Str} Capitalized string.\r\n   * @description Method capitalizing the first symbol.\r\n   *\r\n   * @example\r\n   * new Str('foo').capitalizeFirst().$; // 'Foo'\r\n   */\r\n  capitalizeFirst() {\r\n    const string = this.$;\r\n\r\n    return new Str(string.slice(0, 1).toUpperCase() + string.slice(1));\r\n  }\r\n\r\n  /**\r\n   * @method Str#endsWith\r\n   * @public\r\n   * @param {String} searchString - See the link.\r\n   * @param {Number} [position = string.length] - See the link.\r\n   * @returns {Boolean} If the string ends with the argument string.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\r\n   * @description Synonym for\r\n   * [String#endsWith]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith}.\r\n   */\r\n  endsWith(searchString, position) {\r\n    if (arguments.length < 2) {\r\n      position = this.$.length;\r\n    }\r\n\r\n    return this\r\n      .slice(0, position)\r\n      .revert()\r\n      .startsWith(new Str(searchString).revert().$);\r\n  }\r\n\r\n  /**\r\n   * @method Str#escapeHTML\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Methods escaping \"&\", \"<\" and \">\" symbols.\r\n   *\r\n   * @example\r\n   * new Str('\"1 < 2\" & \"7 > 4\" are true expressions.').escapeHTML().$;\r\n   * // '\"1 &lt; 2\" &amp \"7 &gt; 2\" are true expressions.'\r\n   */\r\n  escapeHTML() {\r\n    let string = this.$;\r\n\r\n    iterate(htmlSpecials, (escaped, symbol) => {\r\n      string = string.replace(new RegExp(symbol, 'g'), escaped);\r\n    });\r\n\r\n    return new Str(string);\r\n  }\r\n\r\n  /**\r\n   * @method Str#escapeRegExp\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Method escaping RegExp special characters.\r\n   *\r\n   * @example\r\n   * new Str('(213.98 - [] {})').escapeRegExp().$; // '\\(213\\.98 \\- \\[\\] \\{\\}\\)'\r\n   */\r\n  escapeRegExp() {\r\n    return this.replace(regexpSpecialsRegexp, '\\\\$&');\r\n  }\r\n\r\n  /**\r\n   * @method Str#in\r\n   * @public\r\n   * @param {*} object - Object to check the string as a property in.\r\n   * @returns {Boolean} If it is in the object or not.\r\n   * @description Returns string in object.\r\n   *\r\n   * @example\r\n   * new Str('a').in({ a: 1 }); // true\r\n   * new Str('toFixed').in(1);  // false\r\n   * new Str('a').in(null);     // false\r\n   */\r\n  in(object) {\r\n    if (!isObject(object)) {\r\n      return false;\r\n    }\r\n\r\n    return this.$ in object;\r\n  }\r\n\r\n  /**\r\n   * @method Str#indexOf\r\n   * @public\r\n   * @param {String} searchValue - See the link.\r\n   * @param {Number} [fromIndex = 0] - See the link.\r\n   * @returns {Number} Found index or -1.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\r\n   * @description Synonym for\r\n   * [String#indexOf]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf}.\r\n   */\r\n  indexOf(searchValue, fromIndex) {\r\n    return this.$.indexOf.apply(this.$, arguments);\r\n  }\r\n\r\n  /**\r\n   * @method Str#lastIndexOf\r\n   * @public\r\n   * @param {String} searchValue - See the link.\r\n   * @param {Number} [fromIndex = string.length] - See the link.\r\n   * @returns {Number} Found index or -1.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf\r\n   * @description Synonym for\r\n   * [String#lastIndexOf]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf}.\r\n   */\r\n  lastIndexOf(searchValue, fromIndex) {\r\n    return this.$.lastIndexOf.apply(this.$, arguments);\r\n  }\r\n\r\n  /**\r\n   * @member Str#length\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/length\r\n   * @description Synonym for\r\n   * [String#length]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/length}.\r\n   */\r\n  get length() {\r\n    return this.$.length;\r\n  }\r\n\r\n  /**\r\n   * @method Str#match\r\n   * @public\r\n   * @returns {Arr|Super} D-Wrap of found match.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/match\r\n   * @description Synonym for\r\n   * [String#match]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/match}.\r\n   */\r\n  match(regexp) {\r\n    return D(this.$.match.apply(this.$, arguments));\r\n  }\r\n\r\n  /**\r\n   * @method Str#repeat\r\n   * @public\r\n   * @param {Integer} times - Times to repeat the string.\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\r\n   * @description Synonym for\r\n   * [String#repeat]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/repeat}.\r\n   *\r\n   * @example\r\n   * new Str('123').repeat(2).$; // '123123'\r\n   * new Str('123').repeat(0).$; // ''\r\n   */\r\n  repeat(times) {\r\n    validate([times], [['intLike', '>=0']], 'Str#repeat');\r\n\r\n    times = +times;\r\n\r\n    const string = this.$;\r\n\r\n    let s = '';\r\n\r\n    for (let i = 0; i < times; i++) {\r\n      s += string;\r\n    }\r\n\r\n    return new Str(s);\r\n  }\r\n\r\n  /**\r\n   * @method Str#replace\r\n   * @public\r\n   * @param {RegExp|String} regexp - See the link.\r\n   * @param {String|Function} [replacer = ''] - See the link.\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/replace\r\n   * @description Synonym for\r\n   * [String#replace]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/replace}\r\n   * besides that replacer has a default value of ''.\r\n   */\r\n  replace(regexp, replacer = '') {\r\n    return new Str(this.$.replace(regexp, replacer));\r\n  }\r\n\r\n  /**\r\n   * @method Str#replaceString\r\n   * @public\r\n   * @param {String} string - String to replace.\r\n   * @param {String} [replacer = ''] - String to replace with.\r\n   * @returns {Str} New instance of Str.\r\n   * @description Method for global string replaceing.\r\n   *\r\n   * @example\r\n   * new Str('123123').replaceString('1', '4').$; // '423423'\r\n   * new Str('123123').replaceString('1').$;      // '2323'\r\n   */\r\n  replaceString(string, replacer = '') {\r\n    string = new Super(string).$;\r\n\r\n    validate([string], ['string'], 'Str#replaceString');\r\n\r\n    return new Str(this.$.split(string).join(replacer));\r\n  }\r\n\r\n  /**\r\n   * @method Str#revert\r\n   * @public\r\n   * @returns {Str} New instance of string.\r\n   * @description Method for reverting a string.\r\n   *\r\n   * @example\r\n   * new Str('1234').revert().$; // '4321'\r\n   */\r\n  revert() {\r\n    const string = this.$;\r\n    let str = '';\r\n\r\n    for (let i = string.length - 1; i >= 0; i--) {\r\n      str += string[i];\r\n    }\r\n\r\n    return new Str(str);\r\n  }\r\n\r\n  /**\r\n   * @method Str#search\r\n   * @public\r\n   * @param {RegExp} regexp - See the link.\r\n   * @returns {Number} Index of the first match, if found, and -1 if not.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/search\r\n   * @description Synonym for\r\n   * [String#search]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/search}.\r\n   */\r\n  search(regexp) {\r\n    validate([regexp], ['regexp']);\r\n\r\n    return this.$.search.apply(this.$, arguments);\r\n  }\r\n\r\n  /**\r\n   * @method Str#slice\r\n   * @public\r\n   * @param {Number} [beginSlice = 0] - See the link.\r\n   * @param {Number} [endSlice = string.length] - See the link.\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/slice\r\n   * @description Synonym for\r\n   * [String#slice]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/slice}.\r\n   */\r\n  slice(beginSlice, endSlice) {\r\n    return new Str(this.$.slice.apply(this.$, arguments));\r\n  }\r\n\r\n  /**\r\n   * @method Str#split\r\n   * @public\r\n   * @param {RegExp|String} [separator] - See the link.\r\n   * @returns {Arr|Super} D-Wrap of the array.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/split\r\n   * @description Synonym for\r\n   * [String#split]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/split}.\r\n   */\r\n  split(separator) {\r\n    return D(this.$.split.apply(this.$, arguments));\r\n  }\r\n\r\n  /**\r\n   * @method Str#startsWith\r\n   * @public\r\n   * @param {String} searchString - See the link.\r\n   * @param {Number} [position = 0] - See the link.\r\n   * @returns {Boolean} If the string ends with the argument string.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\r\n   * @description Synonym for\r\n   * [String#startsWith]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith}.\r\n   */\r\n  startsWith(searchString, position = 0) {\r\n    return this.$.indexOf.apply(this.$, arguments) === position;\r\n  }\r\n\r\n  /**\r\n   * @method Str#substr\r\n   * @public\r\n   * @param {Number} [start = 0] - See the link.\r\n   * @param {Number} [length = string.length] - See the link.\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/substr\r\n   * @description Synonym for\r\n   * [String#substr]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/substr}.\r\n   */\r\n  substr(start, length) {\r\n    return new Str(this.$.substr.apply(this.$, arguments));\r\n  }\r\n\r\n  /**\r\n   * @method Str#substring\r\n   * @public\r\n   * @param {Number} [indexStart = 0] - See the link.\r\n   * @param {Number} [indexEnd = string.length] - See the link.\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/substring\r\n   * @description Synonym for\r\n   * [String#substring]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/substring}.\r\n   */\r\n  substring(indexStart, indexEnd) {\r\n    return new Str(this.$.substring.apply(this.$, arguments));\r\n  }\r\n\r\n  /**\r\n   * @method Str#toCamelCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Removes following regexp /\\s\\-_\\./ making the string camel cased.\r\n   *\r\n   * @example\r\n   * new Str('spinal-case').toCamelCase().$;  // 'spinalCase'\r\n   * new Str('_snake_case_').toCamelCase().$; // 'snakeCase'\r\n   */\r\n  toCamelCase() {\r\n    return new Str(trim(this.$)\r\n      .replace(/[\\s\\-_.]+/g, '-')\r\n      .replace(/-[^-]/g, (match) => match[1].toUpperCase())\r\n      .replace(/^[\\S]/, (match) => match.toLowerCase())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @method Str#toCapitalCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Removes following regexp /\\-_\\./ making the string capital letter cased.\r\n   *\r\n   * @example\r\n   * new Str('spinal-case').toCapitalCase().$;  // 'Spinal Case'\r\n   * new Str('_snake_case_').toCapitalCase().$; // 'Snake Case'\r\n   */\r\n  toCapitalCase() {\r\n    return new Str(trim(this.$)\r\n      .replace(/[\\s\\-_.]+/g, ' ')\r\n      .replace(/[\\S]/g, (match) => (\r\n        match.toLowerCase() === match ? match : ` ${ match }`\r\n      ))\r\n      .replace(/\\s[\\S]/g, (match) => match.toUpperCase())\r\n      .replace(/\\s+/g, ' ')\r\n      .replace(/^\\s/, '')\r\n      .replace(/^[\\S]/, (match) => match.toUpperCase())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @method Str#toDotCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Removes following regexp /\\-_\\./ making the string dot cased.\r\n   *\r\n   * @example\r\n   * new Str('spinal-case').toDotCase().$;  // 'spinal.case'\r\n   * new Str('_snake_case_').toDotCase().$; // 'snake.case'\r\n   */\r\n  toDotCase() {\r\n    return new Str(trim(this.$)\r\n      .replace(/[\\s\\-_.]+/g, '.')\r\n      .replace(/[^.]/g, (match) => (\r\n        match.toLowerCase() === match ? match : `.${ match }`\r\n      ))\r\n      .replace(/\\.+/g, '.')\r\n      .replace(/^\\./, '')\r\n      .toLowerCase()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @method Str#toHyphenCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Removes following regexp /\\s\\-_\\./ making the string camel cased.\r\n   *\r\n   * @example\r\n   * new Str('camelCase').toSpinalCase().$;    // 'camel-case'\r\n   * new Str('_snake_case_').toSpinalCase().$; // 'snake-case'\r\n   */\r\n  toHyphenCase() {\r\n    return new Str(trim(this.$)\r\n      .replace(/[\\s\\-_.]+/g, '-')\r\n      .replace(/[^-]/g, (match) => (\r\n        match.toLowerCase() === match ? match : `-${ match }`\r\n      ))\r\n      .replace(/-+/g, '-')\r\n      .replace(/^-/, '')\r\n      .toLowerCase()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @method Str#toLowerCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase\r\n   * @description Synonym for\r\n   * [String#toLowerCase]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase}.\r\n   *\r\n   * @example\r\n   * new Str('UPPER-CASE').toLowerCase().$;  // 'upper-case'\r\n   */\r\n  toLowerCase() {\r\n    return new Str(this.$.toLowerCase());\r\n  }\r\n\r\n  /**\r\n   * @method Str#toSnakeCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Removes following regexp /\\s\\-\\./ making the string spinal cased.\r\n   *\r\n   * @example\r\n   * new Str('spinal-case').toSnakeCase().$; // 'spinal_case'\r\n   * new Str('camelCase').toSnakeCase().$;   // 'camel_case'\r\n   */\r\n  toSnakeCase() {\r\n    return new Str(trim(this.$)\r\n      .replace(/[\\s\\-_.]+/g, '_')\r\n      .replace(/[^_]/g, (match) => (\r\n        match.toLowerCase() === match ? match : `_${ match }`\r\n      ))\r\n      .replace(/_+/g, '_')\r\n      .replace(/^_/, '')\r\n      .toLowerCase()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @method Str#toSpaceCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Removes following regexp /\\-_\\./ making the string space cased.\r\n   *\r\n   * @example\r\n   * new Str('spinal-case').toSpaceCase().$;  // 'spinal case'\r\n   * new Str('_snake_case_').toSpaceCase().$; // 'snake case'\r\n   */\r\n  toSpaceCase() {\r\n    return new Str(trim(this.$)\r\n      .replace(/[\\s\\-_.]+/g, ' ')\r\n      .replace(/[\\S]/g, (match) => (\r\n        match.toLowerCase() === match ? match : ` ${ match }`\r\n      ))\r\n      .replace(/\\s+/g, ' ')\r\n      .replace(/^\\s/, '')\r\n      .toLowerCase()\r\n    );\r\n  }\r\n\r\n  toString() {\r\n    return this.$;\r\n  }\r\n\r\n  /**\r\n   * @method Str#toUpperCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\r\n   * @description Synonym for\r\n   * [String#toUpperCase]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase}.\r\n   *\r\n   * @example\r\n   * new Str('lower-case').toUpperCase().$;  // 'LOWER-CASE'\r\n   */\r\n  toUpperCase() {\r\n    return new Str(this.$.toUpperCase());\r\n  }\r\n\r\n  /**\r\n   * @method Str#trim\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trim\r\n   * @description Synonym for\r\n   * [String#trim]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trim}.\r\n   */\r\n  trim() {\r\n    return new Str(this.$.replace(/^[\\s\\ufeff\\u00a0]+|[\\s\\ufeff\\u00a0]+$/g, ''));\r\n  }\r\n\r\n  /**\r\n   * @method Str#trimLeft\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trimLeft\r\n   * @description Synonym for\r\n   * [String#trimLeft]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trimLeft}.\r\n   */\r\n  trimLeft() {\r\n    return new Str(this.$.replace(/^[\\s\\ufeff\\u00a0]+/, ''));\r\n  }\r\n\r\n  /**\r\n   * @method Str#trimRight\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trimRight\r\n   * @description Synonym for\r\n   * [String#trimRight]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trimRight}.\r\n   */\r\n  trimRight() {\r\n    return new Str(this.$.replace(/[\\s\\ufeff\\u00a0]+$/, ''));\r\n  }\r\n}\r\n\r\ndefineProperties(Str.prototype, {\r\n  [Symbol.toStringTag]: 'Str'\r\n});\r\n\r\nconstructors[2].push({\r\n  check: isString,\r\n  cls: Str\r\n});\r\n\r\nfunction trim(string) {\r\n  return string.replace(/^[\\s\\-_.]+|[\\s\\-_.]+$/g, '');\r\n}\r\n\r\n/**\r\n * @function parseJSON\r\n * @public\r\n * @param {String} [json = null] - String to parse.\r\n * @param {Object} [options] - Options.\r\n * @param {Boolean|*} [options.numbers] - If it is needed to parse number-like strings as numbers.\r\n * @param {Boolean|*} [options.dates] - If it is needed to parse date-like string as dates.\r\n * Date-like string is considered to match ^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\\dZ?$\r\n * @param {JSONCallback} [callback] - Callback that called on every iteration.\r\n * @returns {DWrap} D-Wrap of found match.\r\n * @description Method for parsing json.\r\n *\r\n * @example\r\n * parseJSON('{ \"a\": 1 }').$;                                           // { a: 1 }\r\n * parseJSON('{ \"a\": \"1\" }', { numbers: true }).$;                      // { numbers: true }\r\n * parseJSON('{ \"a\": \"1999-12-31T23:59:59.999Z\" }', { dates: true }).$; // { a: Date {...} }\r\n */\r\nfunction parseJSON(json = null, options = {}, callback) {\r\n  if (arguments.length <= 1) {\r\n    return D(JSON.parse(json));\r\n  }\r\n\r\n  if (isFunction(options)) {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n\r\n  const { numbers, dates } = options;\r\n  const parsed = JSON.parse(json, function (key, value) {\r\n    if (dates && /^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\\dZ?$/.test(value)) {\r\n      value = new Date(value);\r\n    } else if (numbers && isNumberLike(value) && isString(value)) {\r\n      value = Number(value);\r\n    }\r\n\r\n    return callback ? callback.apply(this, arguments) : value;\r\n  });\r\n\r\n  return D(parsed);\r\n}\r\n\r\nexport { Str, parseJSON };\r\n","/**\r\n * @module helpers/markupToJSON\r\n * @private\r\n * @description Exports markupToJSON method.\r\n */\r\n\r\nimport { Arr } from '../Arr';\r\nimport { Str } from '../Str';\r\nimport { Super } from '../Super';\r\nimport { switcher } from '../Switcher';\r\nimport { htmlAllowedTagSymbols, htmlAllowedAttrSymbols, voidElements } from '../constants';\r\n\r\n/**\r\n * @typedef {Object} MarkupElement\r\n * @property {'comment'|'text'|'element'} type - Type of the node.\r\n * @property {MarkupElement} parent - Type of the node.\r\n * @property {Object.<String, String>} attrs - Node attributes\r\n * @property {MarkupElement[]} children - Node children.\r\n */\r\n\r\nconst submitString = 'Please, submit an issue at https://github.com/dwaynejs/dwayne/issues.';\r\nconst NODE_REGEX_SET = new Super({\r\n  'tag-open': new RegExp(`<(${ htmlAllowedTagSymbols })\\\\s*`, 'i'),\r\n  'tag-close': constructCloseTagRegExp(htmlAllowedTagSymbols),\r\n  comment: /<!--((?:-[^\\->]|[^\\->])(?:-?[^-])*[^-]?|)-->/\r\n});\r\nconst TAG_OPEN_CLOSE = /^(\\/?)>/;\r\n// const ATTRIBUTE = /^([^\\u0000-\\u0020\\s\"'>\\/=]+)(?:\\s*=\\s*('[^']*'|\"[^\"]*\"|[^\\s\"'`<>=]+))?\\s*/;\r\nconst ATTRIBUTE = new RegExp(`^(${ htmlAllowedAttrSymbols })(?:\\\\s*=\\\\s*('[^']*'|\"[^\"]*\"|[^\\\\s\"'\\`<>=]+))?\\\\s*`);\r\nconst div = document.createElement('div');\r\nconst nodeSwitcher = switcher('strictEquals', (elem) => elem)\r\n  .case('tag-open', (elem, node) => {\r\n    const {\r\n      value: name,\r\n      selfClosing\r\n    } = node;\r\n\r\n    node = {\r\n      name,\r\n      attrs: new Super(node.attrs).map((value) => (\r\n        parseCharacterData(value)\r\n      )).$,\r\n      parent: elem,\r\n      children: new Arr([])\r\n    };\r\n\r\n    elem.children.push(node);\r\n\r\n    if (!selfClosing && voidElements.indexOf(name) === -1) {\r\n      elem = node;\r\n    }\r\n\r\n    return elem;\r\n  })\r\n  .case('tag-close', (elem, node) => {\r\n    if (elem.name === node.value) {\r\n      elem = elem.parent;\r\n    }\r\n\r\n    return elem;\r\n  })\r\n  .case(['comment', 'text'], (elem, node, collapseWhiteSpace, type) => {\r\n    const element = {\r\n      name: `#${ type }`,\r\n      parent: elem,\r\n      value: node.value\r\n    };\r\n\r\n    if (type === 'text' && elem.name !== 'script' && elem.name !== 'style') {\r\n      element.value = parseCharacterData(element.value);\r\n\r\n      if (collapseWhiteSpace) {\r\n        element.value = new Str(element.value).trim().$;\r\n      }\r\n    }\r\n\r\n    if (!collapseWhiteSpace || !/^\\s*$/.test(element.value)) {\r\n      elem.children.push(element);\r\n    }\r\n\r\n    return elem;\r\n  });\r\nconst rawTextSwitcher = switcher('strictEquals', false)\r\n  .case(['title', 'textarea', 'style', 'script'], true);\r\n\r\nclass InternalParsingError {\r\n  constructor(index) {\r\n    this.index = index;\r\n  }\r\n}\r\n\r\nclass ParsingError extends Error {\r\n  type = 'PARSING_ERROR';\r\n}\r\n\r\n/**\r\n * @function markupToJSON\r\n * @private\r\n * @param {String} markup - Markup to parse to JSON.\r\n * @param {Boolean} [collapseWhiteSpace = false] - If the whitespace should be collapsed.\r\n * @returns {Arr.<MarkupElement>} Markup elements array.\r\n * @description Function for parsing html and xml to JSON.\r\n */\r\nexport default (markup, collapseWhiteSpace) => {\r\n  collapseWhiteSpace = !!collapseWhiteSpace;\r\n\r\n  const elements = new Arr([]);\r\n  const startMarkup = markup;\r\n  let found;\r\n  let globalIndex = 0;\r\n  let elem = {\r\n    name: null,\r\n    children: elements\r\n  };\r\n\r\n  while (markup.length) {\r\n    try {\r\n      found = find(markup, elem);\r\n    } catch (err) {\r\n      if (!(err instanceof InternalParsingError)) {\r\n        throwUnexpectedError();\r\n      }\r\n\r\n      throw new ParsingError(`Parsing error near index ${ nearString(startMarkup, globalIndex + err.index) }`);\r\n    }\r\n\r\n    const {\r\n      type,\r\n      attrs,\r\n      selfClosing,\r\n      index,\r\n      value\r\n    } = found;\r\n\r\n    globalIndex += index;\r\n\r\n    if (!index) {\r\n      throwUnexpectedError();\r\n    }\r\n\r\n    const node = {\r\n      type,\r\n      value\r\n    };\r\n\r\n    if (type === 'tag-open') {\r\n      node.attrs = attrs;\r\n      node.selfClosing = selfClosing;\r\n    }\r\n\r\n    elem = nodeSwitcher(node.type, [elem, node, collapseWhiteSpace]);\r\n\r\n    markup = markup.slice(index);\r\n  }\r\n\r\n  return elements;\r\n\r\n  function throwUnexpectedError() {\r\n    throw new ParsingError(`Unexpected parsing error near index ${ nearString(startMarkup, globalIndex) }. ${ submitString }`);\r\n  }\r\n};\r\n\r\nfunction find(markup, elem) {\r\n  const { name } = elem;\r\n  let matches;\r\n\r\n  if (rawTextSwitcher(name)) {\r\n    matches = new Super({\r\n      'tag-close': markup.match(constructCloseTagRegExp(name))\r\n    });\r\n  } else {\r\n    matches = NODE_REGEX_SET.map((regex) => (\r\n      markup.match(regex)\r\n    ));\r\n  }\r\n\r\n  let match;\r\n\r\n  if (\r\n    match = matches.find((match) => (\r\n      match && match.index === 0\r\n    ))\r\n  ) {\r\n    const returning = {\r\n      type: match.key,\r\n      index: match.value[0].length,\r\n      value: match.value[1]\r\n    };\r\n    const attrs = {};\r\n\r\n    if (match.key === 'tag-open') {\r\n      const startMarkup = markup;\r\n      let closeMatch;\r\n\r\n      returning.selfClosing = false;\r\n      returning.attrs = attrs;\r\n\r\n      while (\r\n        (markup = startMarkup.slice(returning.index)) &&\r\n        !(closeMatch = markup.match(TAG_OPEN_CLOSE))\r\n      ) {\r\n        const attr = markup.match(ATTRIBUTE);\r\n\r\n        if (!attr) {\r\n          returning.index += 1;\r\n\r\n          continue;\r\n        }\r\n\r\n        attrs[attr[1]] = (attr[2] || '').replace(/^(\"|')|(\"|')$/g, '');\r\n        returning.index += attr[0].length;\r\n      }\r\n\r\n      if (closeMatch) {\r\n        returning.index += closeMatch[0].length;\r\n        returning.selfClosing = !!closeMatch[1];\r\n      }\r\n    }\r\n\r\n    return returning;\r\n  }\r\n\r\n  let { value: index } = matches.min((match) => (\r\n    match ? match.index : NaN\r\n  ));\r\n\r\n  if (index === Infinity) {\r\n    index = markup.length;\r\n  }\r\n\r\n  return {\r\n    type: 'text',\r\n    index,\r\n    value: markup.slice(0, index)\r\n  };\r\n}\r\n\r\nfunction constructCloseTagRegExp(tagName) {\r\n  return new RegExp(`</(${ tagName })\\\\s*>`, 'i');\r\n}\r\n\r\nfunction nearString(markup, index) {\r\n  return `${ index } (~~~ \"${ markup.slice(index, index + 15) }\" ~~~, the string itself is \"${ markup }\")`;\r\n}\r\n\r\nfunction parseCharacterData(string) {\r\n  return string.replace(/&(\\w+|#x?\\d+);/g, (match) => {\r\n    div.innerHTML = match;\r\n\r\n    return div.textContent || div.innerText;\r\n  });\r\n}\r\n","/**\r\n * @module Elem\r\n * @private\r\n * @mixin\r\n * @description Exports Elem class.\r\n */\r\n\r\nimport { Super } from './Super';\r\nimport { Arr, array, iterate as times } from './Arr';\r\nimport { blob } from './BlobObject';\r\nimport { method } from './Func';\r\nimport { Promise } from './Promise';\r\nimport { Str } from './Str';\r\nimport { switcher } from './Switcher';\r\nimport {\r\n  constructors, appliedRegExps, htmlElements, svgElements,\r\n  canvasGetMethods, canvasRestMethods\r\n} from './constants';\r\nimport {\r\n  isArray, isArrayLike, isElement, isFunction,\r\n  isInteger, isNil, isNumber, isNull, isString,\r\n  assign, dynamicDefineProperties, defineProperties, toArray,\r\n  validate, toStringTag, iterate, Symbol\r\n} from './helpers';\r\nimport markupToJSON from './helpers/markupToJSON';\r\n\r\n/**\r\n * @typedef {String} ElemEventString\r\n * @public\r\n * @description A string containing events separated by a comma with zero or more spaces or just spaces.\r\n */\r\n\r\n/**\r\n * @callback ElemValueCallback\r\n * @public\r\n * @param {String} value - Old value.\r\n * @param {Elem} elem - Current element.\r\n * @param {Number} index - Index in the set of the elements.\r\n */\r\n\r\n/**\r\n * @callback ElemSetOfCallback\r\n * @public\r\n * @param {Element} created - Created element.\r\n * @param {*} value - Value of the iterated element in the object.\r\n * @param {Key} key - Key of the iterated element in the object.\r\n * @param {*} object - Object that is iterated over.\r\n * @param {Element} elem - Current element.\r\n * @param {Number} index - Index of the current element.\r\n */\r\n\r\n/**\r\n * @callback ValidateCallback\r\n * @public\r\n * @param {*} value - Element value.\r\n * @param {Element} elem - Element to validate.\r\n * @param {Number} index - Index of the element.\r\n */\r\n\r\n/**\r\n * @callback CtxCallback\r\n * @public\r\n * @param {CanvasRenderingContext2D} ctx - Canvas rendering context.\r\n */\r\n\r\n/**\r\n * @callback ElemListener\r\n * @public\r\n * @param {Event} e - Fired event.\r\n * @param {Element} elem - Element on which the listener was called.\r\n * @param {Number} index - Index of the element on which the listener was called.\r\n */\r\n\r\n/**\r\n * @callback ElemRemoveListeners\r\n * @public\r\n * @param {...ElemEventString} events - If at least one argument present only removes event listeners specified\r\n * by the events in the arguments.\r\n */\r\n\r\nconst nativeDocument = global.document;\r\nconst emptyDiv = nativeDocument.createElement('div');\r\nconst eventSeparator = /(,| ) */;\r\nconst textProperty = new Super(Node.prototype).propertyDescriptor('textContent') ? 'textContent' : 'innerText';\r\nconst classes = {};\r\nconst attrs = {};\r\nconst windowsDwayneData = new Arr([]);\r\nconst inputElements = 'input, select, textarea, datalist, keygen, output';\r\nconst click = method('click');\r\nconst svgNS = 'http://www.w3.org/2000/svg';\r\nconst xmlNS = 'http://www.w3.org/2000/xmlns/';\r\nconst xlinkNS = 'http://www.w3.org/1999/xlink';\r\nconst xhtmlNS = 'http://www.w3.org/1999/xhtml';\r\nconst typeSwitcher = switcher('call', (elem, type) => {\r\n  const ns = type === 'svg'\r\n    ? svgNS\r\n    : elem.prop('namespaceURI') || nativeDocument.documentElement.namespaceURI || xhtmlNS;\r\n\r\n  return nativeDocument.createElementNS(ns, type);\r\n})\r\n  .case(\r\n    (type) => type === '#comment',\r\n    () => nativeDocument.createComment('')\r\n  )\r\n  .case(\r\n    (type) => type === '#text',\r\n    () => nativeDocument.createTextNode('')\r\n  );\r\nconst refSwitcher = switcher('strictEquals', 'href')\r\n  .case(\r\n    ['img', 'script', 'iframe', 'audio', 'video'],\r\n    'src'\r\n  )\r\n  .case(\r\n    'form',\r\n    'action'\r\n  );\r\nconst filterSwitcher = switcher('call', (selector) => selector)\r\n  .case(\r\n    isString,\r\n    (selector) => (\r\n      (elem) => new Elem(elem).is(selector)\r\n    )\r\n  )\r\n  .case(\r\n    [isArray, isElem],\r\n    (elems) => {\r\n      elems = new Arr(elems);\r\n\r\n      return (elem) => elems.indexOf(elem) !== -1;\r\n    }\r\n  );\r\nconst innerSwitcher = switcher('strictEquals', 0)\r\n  .case('padding-box', (paddings) => paddings)\r\n  .case('border-box', (paddings, borders) => paddings + borders);\r\nconst outerSwitcher = switcher('strictEquals', (borders, paddings) => borders + paddings)\r\n  .case('padding-box', (borders) => borders)\r\n  .case('border-box', 0);\r\nconst attrNSSwitcher = switcher('call', null)\r\n  .case((attr) => attr === 'xmlns' || attr === 'xmlns:xlink', (elem) => (\r\n    elem.name === 'svg'\r\n      ? xmlNS\r\n      : null\r\n  ))\r\n  .case((attr) => /^xlink:\\w/.test(attr), (elem) => (\r\n    elem.closest('svg').length\r\n      ? xlinkNS\r\n      : null\r\n  ));\r\n\r\n/**\r\n * @class Elem\r\n * @extends Arr\r\n * @public\r\n * @param {Element|Element[]} [elem = []] - An element or an array of elements to wrap.\r\n * @returns {Elem} Instance of Elem.\r\n * @description Wrap of an elements set. Also has all methods from from\r\n * [CanvasRenderingContext2D]{@link https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D}.\r\n * Getters methods return the same as methods from CanvasRenderingContext2D and the rest return this.\r\n * Work for the first canvas element in the set.\r\n *\r\n * @example\r\n * new Elem(document.body);\r\n * new Elem(document.querySelectorAll('.cls'));\r\n * new Elem(document.getElementsByClassName('cls'));\r\n */\r\nclass Elem extends Arr {\r\n  constructor(elem = []) {\r\n    super((() => {\r\n      let element = elem;\r\n\r\n      if (isArrayLike(element) && (\r\n        isWindow(element) ||\r\n        isHTMLDocument(element) ||\r\n        isDocumentFragment(element) ||\r\n        isElement(element) ||\r\n        isCommentOrText(element) ||\r\n        isStyleRule(element)\r\n      )) {\r\n        element = [element];\r\n      }\r\n\r\n      return new Arr(toArray(new Super(element).$, true)).object((elems, elem) => {\r\n        if (elems.indexOf(elem) === -1 && (\r\n          isElement(elem) ||\r\n          isWindow(elem) ||\r\n          isHTMLDocument(elem) ||\r\n          isDocumentFragment(elem) ||\r\n          isCommentOrText(elem) ||\r\n          isStyleRule(elem)\r\n        )) {\r\n          return elems.push(elem);\r\n        }\r\n\r\n        if (isElem(elem)) {\r\n          elems.push.apply(elems, elem.$);\r\n        }\r\n      }, []).$;\r\n    })());\r\n\r\n    this.$$ = elem;\r\n\r\n    this.forEach(addDwayneData);\r\n\r\n    /**\r\n     * @member {Array.<Node|Window>} Elem#$\r\n     * @type {Array.<Node|Window>}\r\n     * @public\r\n     * @description Constructed element set.\r\n     */\r\n\r\n    /**\r\n     * @member {*} Elem#$$\r\n     * @type {*}\r\n     * @public\r\n     * @description Initial element set.\r\n     */\r\n  }\r\n\r\n  /**\r\n   * @method Elem#add\r\n   * @public\r\n   * @param {...(String|Elem|Element|Element[])} elements - Each argument is a selector, or Elem, or Element, or array of Elements.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for adding new elements to the set.\r\n   *\r\n   * @example\r\n   * elem1.find('.cls1')\r\n   *   .add(elem2.find('.cls2'))\r\n   *   .hide();\r\n   */\r\n  add(...elements) {\r\n    iterate(arguments, (elem) => {\r\n      toFind(elem).forEach((elem) => {\r\n        if (this.indexOf(elem) === -1) {\r\n          this.push(elem);\r\n        }\r\n      });\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#addClass\r\n   * @public\r\n   * @param {...String} classes - Classes to add.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for adding classes to the all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.addClass('red', 'round');\r\n   */\r\n  addClass(...classes) {\r\n    return this.forEach((elem) => {\r\n      const list = elem.classList;\r\n\r\n      iterate(isElement(elem) && arguments, (cls) => list.add(cls));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#addComment\r\n   * @public\r\n   * @param {String} text - Text of comment to add.\r\n   * @param {Boolean} end - If the comment should be inserted to the end. If false it's inserted to the start.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for adding comment to all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.addHTML('<div>1</div>');\r\n   */\r\n  addComment(text, end = true) {\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.insertAdjacentHTML(end ? 'beforeend' : 'afterbegin', `<!--${ text }-->`);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#addHTML\r\n   * @public\r\n   * @param {String} html - HTML to add.\r\n   * @param {Boolean} end - If the HTML should be inserted to the end. If false it's inserted to the start.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for adding HTML to all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.addHTML('<div>1</div>');\r\n   */\r\n  addHTML(html, end = true) {\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.insertAdjacentHTML(end ? 'beforeend' : 'afterbegin', html);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#addRule\r\n   * @public\r\n   * @param {String} name - Name of the rule.\r\n   * @param {String} selector - Selector for the rule\r\n   * @param {Object.<String, String>} style - Style for the selector.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for adding css styles into the first style tag in the set.\r\n   * Note: style element should be inside the document.\r\n   *\r\n   * @example\r\n   * style.addRule('img-size', 'img.square', {\r\n   *   width: '40px !important',\r\n   *   height: '40px !important'\r\n   * });\r\n   */\r\n  addRule(name, selector, style) {\r\n    this.some((elem) => {\r\n      if (getName(elem) === 'style') {\r\n        const { sheet } = elem;\r\n        const { length } = sheet.cssRules;\r\n        const rules = new Super(style).word((value, property) => (\r\n          `${ new Str(property).toHyphenCase() }: ${ value };\\n`\r\n        ));\r\n\r\n        sheet.insertRule(\r\n          `${ selector } {${ rules && '\\n' }${ rules }}`,\r\n          length\r\n        );\r\n        sheet.cssRules[length].dwayneData = { name };\r\n\r\n        return true;\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#addText\r\n   * @public\r\n   * @param {String} text - Text to add.\r\n   * @param {Boolean} end - If the text should be inserted to the end. If false it's inserted to the start.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for adding text to all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.addText('123');\r\n   */\r\n  addText(text, end = true) {\r\n    return this.forEach((elem) => {\r\n      new Elem(nativeDocument.createTextNode(text)).into(elem, end);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#apply\r\n   * @public\r\n   * @param {...String} strings - Strings to apply.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method that is a shorthand for many other methods.\r\n   * All shorthands can be separated with space and written within one string.\r\n   *\r\n   * @example\r\n   * elem.apply(\r\n   *   '#id .c1 .c2 @border(1px solid black) $disabled $attr(some value) *(Click me!)'\r\n   * );\r\n   * // shorthand for\r\n   * // elem\r\n   * //   .id('id')\r\n   * //   .addClass('c1', 'c2')\r\n   * //   .css('border', '1px solid black')\r\n   * //   .attr({\r\n   * //     attr, 'some value'\r\n   * //     disabled: ''\r\n   * //   })\r\n   * //   .text('Click me!');\r\n   * // There is a full list of possible types of syntax below...\r\n   *\r\n   * elem.apply('#id');                    // shorthand for elem.id('id');\r\n   * elem.apply('.c1 .c2');                // shorthand for elem.addClass('c1', 'c2');\r\n   * elem.apply('-.c1 -.c2');              // shorthand for elem.removeClass('c1', 'c2');\r\n   * elem.apply('-@float -@display');      // shorthand for elem.removeCSS('float', 'display');\r\n   * elem.apply('-$a1 -$a2');              // shorthand for elem.removeAttr('a1', 'a2');\r\n   * elem.apply('*(some text)');           // shorthand for elem.text('some text');\r\n   * elem.apply('&(<div>1</div>)');        // shorthand for elem.html('<div>1</div>');\r\n   * elem.apply('@float(right)');          // shorthand for elem.css('float', 'right');\r\n   * elem.apply('@transform(scale(5px))'); // shorthand for elem.css('transform', 'scale(5px)');\r\n   * elem.apply('@margin(2px 2px)');       // shorthand for elem.css('margin', '2px 2px');\r\n   * elem.apply('@marginLeft(2px)');       // shorthand for elem.css('marginLeft', '2px 2px');\r\n   * elem.apply('@margin-left(2px)');      // shorthand for elem.css('margin-left', '2px 2px');\r\n   * elem.apply('$attr(some value)');      // shorthand for elem.attr('attr', 'some value');\r\n   * elem.apply('$attr');                  // shorthand for elem.attr('attr', '');\r\n   */\r\n  apply(...strings) {\r\n    let applied;\r\n    let setApplied;\r\n    let callback;\r\n    let name;\r\n    let np1;\r\n    let slice;\r\n\r\n    new Str(new Arr(arguments).join(' '))\r\n      .split(/(\\s+)/)\r\n      .forEach((string) => {\r\n        if (!applied) {\r\n          np1 = string.slice(0, 1);\r\n          callback = appliedRegExps[np1];\r\n          slice = 1;\r\n\r\n          if (callback && !isFunction(callback)) {\r\n            callback = callback[string.slice(1, 2)];\r\n            slice = 2;\r\n          }\r\n\r\n          if (/^\\s+$/.test(string) || !callback) {\r\n            return;\r\n          }\r\n\r\n          name = string.slice(slice).match(/^[^()]+/);\r\n\r\n          if (!name && (np1 !== '*' && np1 !== '&')) {\r\n            return;\r\n          }\r\n\r\n          applied = {\r\n            name: name ? name[0] : '',\r\n            args: string.slice(slice + (name ? name[0] : '').length),\r\n            callback\r\n          };\r\n\r\n          setApplied = true;\r\n        }\r\n\r\n        if (!setApplied) {\r\n          applied.args += string;\r\n        }\r\n\r\n        if (!applied.args || /^\\([\\s\\S]+\\)$/.test(applied.args)) {\r\n          applied.callback(this, applied.name, applied.args.replace(/^\\(|\\)$/g, ''));\r\n          applied = null;\r\n        }\r\n\r\n        setApplied = false;\r\n      });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#attr\r\n   * @public\r\n   * @param {String|Object.<String, String|ElemValueCallback>} [attr] - Name of the attribute to get or\r\n   * an object of the format { [attrName]: value, ... } to set attributes.\r\n   * @param {String|ElemValueCallback} [value] - If the first argument is a string\r\n   * it should be a value to set for that attribute.\r\n   * @returns {Super|String|Elem} If no arguments passed, D-Wrap of attributes of the first element in the set\r\n   * returned, if 1 string argument is passed the value of the attribute of the first element in the set\r\n   * returned otherwise returns this.\r\n   * @description Method for getting/setting attributes.\r\n   *\r\n   * @example\r\n   * elem.attr('attr1', 'value1'); // attribute attr1 set to 'value1' and this returned\r\n   * elem.attr('attr1');           // 'value1'\r\n   * elem.attr({\r\n   *   attr1: 'value3',            // attribute attr1 set to 'value3'\r\n   *   attr2: 'value2'             // attribute attr2 set to 'value2'\r\n   * });                           // this returned\r\n   * elem.attr().$;                // { attr1: 'value3', attr2: 'value2' }\r\n   */\r\n  attr(attr, value) {\r\n    const elem = getElem(this);\r\n\r\n    if (!arguments.length) {\r\n      return new Super(elem.attributes).object((o, attr) => {\r\n        o[attr.name] = attr.value;\r\n      });\r\n    }\r\n\r\n    if (arguments.length <= 1 && isString(attr)) {\r\n      const ns = attrNSSwitcher(attr, [new Elem(elem)]);\r\n\r\n      return isNull(ns)\r\n        ? elem.getAttribute(attr)\r\n        : elem.getAttributeNS(ns, attr);\r\n    }\r\n\r\n    if (arguments.length >= 2) {\r\n      attr = { [attr]: value };\r\n    }\r\n\r\n    return this.forEach((elem, index) => {\r\n      if (!isElement(elem)) {\r\n        return;\r\n      }\r\n\r\n      new Super(attr).forEach((value, key) => {\r\n        value = isFunction(value)\r\n          ? value(new Elem(elem).attr(key), elem, index)\r\n          : value;\r\n\r\n        if (isNil(value)) {\r\n          return new Elem(elem).removeAttr(key);\r\n        }\r\n\r\n        const ns = attrNSSwitcher(key, [new Elem(elem)]);\r\n\r\n        if (isNull(ns)) {\r\n          elem.setAttribute(key, value);\r\n        } else {\r\n          elem.setAttributeNS(ns, key, value);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#blob\r\n   * @public\r\n   * @param {Object} [options = {}] - Options that are passed into {@link blob}.\r\n   * @returns {Promise.<BlobObject>} New instance of promise.\r\n   * @description Returns a {@link BlobObject} Promise. Works with image or canvas first element.\r\n   *\r\n   * @example\r\n   * image.blob().then((blob) => console.log(blob));  // BlobObject\r\n   * canvas.blob().then((blob) => console.log(blob)); // BlobObject\r\n   */\r\n  blob(options = {}) {\r\n    return new Promise((resolve, reject) => {\r\n      const elem = this.first();\r\n      const { name } = elem;\r\n\r\n      if (name !== 'img' && name !== 'canvas') {\r\n        reject(new Error('First element in the set isn\\'t an image or a canvas! (Elem#blob)'));\r\n      }\r\n\r\n      if (name === 'canvas') {\r\n        return resolve(elem);\r\n      }\r\n\r\n      elem\r\n        .load()\r\n        .then(() => {\r\n          if (elem.isBroken()) {\r\n            return reject(new Error('The image is broken! (Elem#blob)'));\r\n          }\r\n\r\n          const canvas = new Elem(nativeDocument).canvas();\r\n          const width = elem.width();\r\n          const height = elem.height();\r\n\r\n          canvas\r\n            .width(width)\r\n            .height(height)\r\n            .drawImage(elem.$[0], 0, 0);\r\n\r\n          resolve(canvas);\r\n        });\r\n    }).then((canvas) => {\r\n      const dataURL = canvas.dataURL();\r\n      const byteString = atob(dataURL.split(',')[1]);\r\n      const length = byteString.length;\r\n      const ab = new ArrayBuffer(length);\r\n      const ia = new Uint8Array(ab);\r\n\r\n      times(length, (i) => {\r\n        ia[i] = byteString.charCodeAt(i);\r\n      });\r\n\r\n      return blob(ab, options);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#blur\r\n   * @returns {Elem} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLElement/blur\r\n   * @description Synonym for\r\n   * [HTMLElement#blur]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/blur}.\r\n   */\r\n  blur() {\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.blur();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#calcCSS\r\n   * @param {String} [pseudo] - See the link.\r\n   * @returns {CSSStyleDeclaration} See the link.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/Window/getComputedStyle\r\n   * @description Synonym for\r\n   * [getComputedStyle]{@link https://developer.mozilla.org/en/docs/Web/API/Window/getComputedStyle}.\r\n   * Returns computed style for the first element in the set or undefined.\r\n   */\r\n  calcCSS(pseudo = null) {\r\n    return getComputedStyle(getElem(this), pseudo);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#changeRule\r\n   * @public\r\n   * @param {String} name - Name of the rule.\r\n   * @param {Object.<String, String>} style - Style for the selector.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for changing css styles in the first style tag in the set.\r\n   * Note: style element should be inside the document.\r\n   *\r\n   * @example\r\n   * style.changeRule('img-size', {\r\n   *   width: '50px !important',\r\n   *   height: '50px !important'\r\n   * });\r\n   */\r\n  changeRule(name, style) {\r\n    this.some((elem) => {\r\n      if (getName(elem) === 'style') {\r\n        const { value: rule } = new Arr(elem.sheet.cssRules).find((rule) => rule.dwayneData && rule.dwayneData.name === name) || {};\r\n\r\n        if (rule) {\r\n          new Elem(rule).css(style);\r\n\r\n          return true;\r\n        }\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#child\r\n   * @public\r\n   * @param {Number|String|Elem|Element|Element[]} element - If the argument is a number a wrap of the set of the children\r\n   * of this index of each element in the set returned otherwise an element to put into this element, a collection\r\n   * or a selector of it.\r\n   * @param {Boolean} end - If the elements should be inserted to the end. If false they are inserted to the start.\r\n   * @returns {Elem} Returns a wrap of children or inserted elements.\r\n   * @description Method is similar to\r\n   * [Node#appendChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/appendChild}.\r\n   *\r\n   * @example\r\n   * const child = elem.child(1);\r\n   *\r\n   * elem.child(elem2);\r\n   * elem.child(document.getElementById('id'));\r\n   * elem.child('#id div.c1');\r\n   */\r\n  child(element, end = true) {\r\n    if (isInteger(element) && element >= 0) {\r\n      return this.children().elem(element);\r\n    }\r\n\r\n    return toFind(element).into(this, end);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#children\r\n   * @public\r\n   * @returns {Elem} D-Wrap of the children of the first element in the set.\r\n   * @description Method for getting element's children.\r\n   *\r\n   * @example\r\n   * const children = elem.children();\r\n   */\r\n  children() {\r\n    return new Elem(this.length ? this.$[0].childNodes : []);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#class\r\n   * @public\r\n   * @param {String} [cls] - If it's present it has to contain class attribute to set.\r\n   * @returns {Arr|Elem} If the argument is present this returned otherwise a wrap of the classes array returned.\r\n   * @description Method for getting/setting classes.\r\n   *\r\n   * @example\r\n   * elem.class('c1 c2'); // class set to 'c1 c2'\r\n   * elem.class().$;      // ['c1', 'c2']\r\n   */\r\n  class(cls) {\r\n    if (!arguments.length) {\r\n      return new Arr(getElem(this).className.split(' '));\r\n    }\r\n\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.className = cls;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#click\r\n   * @returns {Elem} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLElement/click\r\n   * @description Synonym for\r\n   * [HTMLElement#click]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/click}.\r\n   */\r\n  click() {\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.click();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#clone\r\n   * @public\r\n   * @param {Boolean|*} [deep = false] - See thee link.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/Node/cloneNode\r\n   * @description Synonym for\r\n   * [Node#cloneNode]{@link https://developer.mozilla.org/en/docs/Web/API/Node/cloneNode}.\r\n   */\r\n  clone(deep = false) {\r\n    return this.object((elems, elem) => {\r\n      elems.add(elem.cloneNode(!!deep));\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#closest\r\n   * @public\r\n   * @param {String} selector - See the link.\r\n   * @returns {Elem} Set of the closest elements.\r\n   * @description Synonym for\r\n   * [Element#closest]{@link https://developer.mozilla.org/en/docs/Web/API/Element/closest}.\r\n   */\r\n  closest(selector) {\r\n    return this.object((elems, elem) => {\r\n      while (elem) {\r\n        if (new Elem(elem).is(selector)) {\r\n          return elems.add(elem);\r\n        }\r\n\r\n        elem = elem.parentNode;\r\n      }\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#contains\r\n   * @public\r\n   * @param {String|Elem|Element} element - Element to find out if it's within the first element\r\n   * in the set or a selector of it.\r\n   * @returns {Boolean} Returns if the argument within this element.\r\n   * @description Method is extension for\r\n   * [Node#contains]{@link https://developer.mozilla.org/en/docs/Web/API/Node/contains}.\r\n   *\r\n   * @example\r\n   * elem1.contains(elem2);   // true|false\r\n   * elem.contains(selector); // true|false\r\n   */\r\n  contains(element) {\r\n    element = toFind(element);\r\n\r\n    return getElem(this).contains(getElem(element));\r\n  }\r\n\r\n  /**\r\n   * @method Elem#create\r\n   * @public\r\n   * @param {String} type - Type of created element. If type is \"#text\" a text node is created.\r\n   * If type is \"#comment\" a comment node is created.\r\n   * @param {...String} appliedExpressions - Strings that are passed into {@link Elem#apply}.\r\n   * @returns {Elem} New instance of Elem - wrap of the created elements.\r\n   * @description Method for creating elements inside this element.\r\n   * If this element is not an Element the element is just created.\r\n   *\r\n   * @example\r\n   * elem.create('div', '#id .c1 .c2 *Some text*');\r\n   *\r\n   * // also there are shorthands for almost every HTML-element\r\n   * elem.div();\r\n   * elem.input('$type(checkbox) $name(country)');\r\n   */\r\n  create(type, ...appliedExpressions) {\r\n    return this.object((elems, elem) => {\r\n      const element = new Elem(typeSwitcher(type, [new Elem(elem)]));\r\n\r\n      element.into(elem);\r\n\r\n      elems.add(element.apply.apply(element, appliedExpressions));\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#createComment\r\n   * @public\r\n   * @param {String} text - Text of the comment.\r\n   * @returns {Elem} New instance of Elem - wrap of the created comments.\r\n   * @description Method for creating comments inside this element.\r\n   * If this element is not an Element the comment is just created.\r\n   *\r\n   * @example\r\n   * elem.createComment('comment');\r\n   */\r\n  createComment(text) {\r\n    return this\r\n      .create('#comment')\r\n      .text(text);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#createText\r\n   * @public\r\n   * @param {String} text - Text.\r\n   * @returns {Elem} New instance of Elem - wrap of the created text nodes.\r\n   * @description Method for creating text nodes inside this element.\r\n   * If this element is not an Element the text node is just created.\r\n   *\r\n   * @example\r\n   * elem.createText('text');\r\n   */\r\n  createText(text) {\r\n    return this\r\n      .create('#text')\r\n      .text(text);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#css\r\n   * @public\r\n   * @param {String|Object.<String, String|ElemValueCallback>} [property] - Name of the property to get or\r\n   * an object of the format { [property]: value, ... } to set styles.\r\n   * @param {String|ElemValueCallback} [value] - If the first argument is a string it should be a value to set for that property.\r\n   * @returns {Super|String|Elem} If no arguments passed, D-Wrap of css styles of the element returned,\r\n   * if 1 string argument is passed the value of the property returned otherwise returns this.\r\n   * @description Method for getting/setting styles. Supports !important.\r\n   *\r\n   * @example\r\n   * elem.css('display', 'none'); // display set to 'none' and this returned\r\n   * elem.css('display');         // 'none'\r\n   * elem.css({\r\n   *   display: 'inline',         // display set to 'inline'\r\n   *   cursor: 'pointer'          // cursor set to 'pointer'\r\n   * });                          // this returned\r\n   * elem.css().$;                // { display: 'none', cursor: 'pointer' }\r\n   */\r\n  css(property, value) {\r\n    let style = getElem(this).style;\r\n\r\n    if (isStyleRule(this.$[0])) {\r\n      style = this.$[0].style;\r\n    }\r\n\r\n    if (!arguments.length) {\r\n      return new Str(style.cssText)\r\n        .split(/; ?/)\r\n        .object((o, value) => {\r\n          if (value) {\r\n            property = value.split(/: /);\r\n\r\n            o[new Str(property[0]).toCamelCase().$] = property[1];\r\n          }\r\n        });\r\n    }\r\n\r\n    if (arguments.length <= 1 && isString(property)) {\r\n      property = new Str(property).toHyphenCase().$;\r\n\r\n      return style.getPropertyValue(property) + (style.getPropertyPriority(property) ? ' !important' : '');\r\n    }\r\n\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: value };\r\n    }\r\n\r\n    return this.forEach((elem, index) => {\r\n      if (!isElement(elem) && !isStyleRule(elem)) {\r\n        return;\r\n      }\r\n\r\n      new Super(property).forEach((value, property) => {\r\n        property = new Str(property).toHyphenCase().$;\r\n\r\n        if (isFunction(value)) {\r\n          value = value(new Elem(elem).css(property), elem, index);\r\n        }\r\n\r\n        elem.style.removeProperty(property);\r\n        elem.style.setProperty(\r\n          property,\r\n          value.replace(/ ?!important$/, ''),\r\n          /!important$/.test(value) ? 'important' : ''\r\n        );\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#ctx\r\n   * @public\r\n   * @param {String|Object|CtxCallback} [property] - If present and object\r\n   * it's assigned to the canvas rendering context, if function\r\n   * it's called with canvas rendering context argument, if string\r\n   * the value from the second argument is used for assigning\r\n   * this property to canvas rendering context and if not present\r\n   * canvas rendering context returned.\r\n   * @param {*} [value] - See the property argument.\r\n   * @returns {CanvasRenderingContext2D|Elem}\r\n   * @description Rendering context of the first canvas in the set.\r\n   *\r\n   * @example\r\n   * canvas.ctx; // CanvasRenderingContext2D\r\n   */\r\n  ctx(property, value) {\r\n    let ctx;\r\n\r\n    this.some((elem) => {\r\n      if (getName(elem) === 'canvas') {\r\n        ctx = elem.dwayneData.ctx;\r\n\r\n        return true;\r\n      }\r\n    });\r\n\r\n    if (!arguments.length) {\r\n      return ctx;\r\n    }\r\n\r\n    if (!ctx) {\r\n      return this;\r\n    }\r\n\r\n    if (isFunction(property)) {\r\n      property(ctx);\r\n    } else {\r\n      if (arguments.length >= 2) {\r\n        property = { [property]: value };\r\n      }\r\n\r\n      assign(ctx, property);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#data\r\n   * @public\r\n   * @param {String|Object.<String, String|ElemValueCallback>} [key] - Name of the data attribute (without data- prefix)\r\n   * to get or an object of the format { [attrName]: value, ... } to set attributes.\r\n   * @param {String|ElemValueCallback} [value] - If the first argument is a string it should be a value to set for that attribute.\r\n   * @returns {Super|String|Elem} If no arguments passed, D-Wrap of dataset of the element returned,\r\n   * if 1 string argument is passed the value of the data attribute returned otherwise returns this.\r\n   * @description Method for getting/setting data attributes. See\r\n   * [HTMLElement#dataset]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/dataset}.\r\n   *\r\n   * @example\r\n   * elem.data('someKey1', 'value'); // attribute data-some-key1 set to 'value1' and this returned\r\n   * elem.data('someKey1');          // 'value1'\r\n   * elem.data({\r\n   *   someKey1: 'value3',           // attribute data-some-key1 set to 'value3'\r\n   *   someKey2: 'value2'            // attribute data-some-key2 set to 'value2'\r\n   * });                             // this returned\r\n   * elem.data().$;                  // { someKey1: 'value3', someKey2: 'value2' }\r\n   */\r\n  data(key, value) {\r\n    const dataset = getElem(this).dataset;\r\n\r\n    if (!arguments.length) {\r\n      return new Super(dataset).object((o, value, key) => {\r\n        o[key] = value;\r\n      });\r\n    }\r\n\r\n    if (arguments.length === 1 && isString(key)) {\r\n      return dataset[key];\r\n    }\r\n\r\n    if (arguments.length >= 2) {\r\n      key = { [key]: value };\r\n    }\r\n\r\n    return this.forEach((elem, index) => {\r\n      if (!isElement(elem)) {\r\n        return;\r\n      }\r\n\r\n      iterate(key, (value, key) => {\r\n        elem.dataset[key] = isFunction(value) ? value(elem.dataset[key], elem, index) : value;\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#dataURL\r\n   * @param {String} [type = 'image/png'] - See the link\r\n   * @param {Number} [encoderOptions = 0.92] - See the link.\r\n   * @returns {String} Data URL for the first canvas element in the set.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/toDataURL\r\n   * @description Synonym for\r\n   * [HTMLCanvasElement#toDataURL]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/toDataURL}.\r\n   *\r\n   * @example\r\n   * canvas.dataURL();\r\n   */\r\n  dataURL(type, encoderOptions) {\r\n    const ctx = this.ctx();\r\n\r\n    if (!ctx) {\r\n      return '';\r\n    }\r\n\r\n    return ctx.canvas.toDataURL.apply(ctx.canvas, arguments);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#deleteRule\r\n   * @public\r\n   * @param {String} name - Name of the rule.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for deleting css styles in a style tag.\r\n   * Note: style element should be inside the document.\r\n   *\r\n   * @example\r\n   * style.deleteRule('img-size');\r\n   */\r\n  deleteRule(name) {\r\n    this.some((elem) => {\r\n      if (getName(elem) === 'style') {\r\n        const rule = new Arr(elem.sheet.cssRules).find((rule) => rule.dwayneData && rule.dwayneData.name === name);\r\n\r\n        if (rule) {\r\n          elem.sheet.deleteRule(rule.key);\r\n\r\n          return true;\r\n        }\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#dispatch\r\n   * @public\r\n   * @param {String|Event} event - Event or a string (new Event(event) is created).\r\n   * @param {Object} [eventInit = {}] - See the link.\r\n   * @param {Boolean} [eventInit.bubbles = true] - See the link.\r\n   * @param {Boolean} [eventInit.cancelable = true] - See the link.\r\n   * @param {Object} [details = {}] - Object that is assigned to the event.\r\n   * @returns {Elem} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/Event/Event\r\n   * @description Synonym for\r\n   * [EventTarget#dispatchEvent]{@link https://developer.mozilla.org/en/docs/Web/API/EventTarget/dispatchEvent}.\r\n   *\r\n   * @example\r\n   * elem.dispatch('click');\r\n   * elem.dispatch('click', { bubbles: false, cancellable: false });\r\n   * elem.dispatch(new CustomEvent('custom-event'));\r\n   */\r\n  dispatch(event, eventInit = {}, details = {}) {\r\n    const { bubbles = true, cancelable = true } = eventInit || {};\r\n    let finalEvent = event;\r\n\r\n    if (!/Event$/.test(toStringTag(finalEvent))) {\r\n      try {\r\n        finalEvent = new Event(finalEvent, { bubbles, cancelable });\r\n      } catch (err) {\r\n        finalEvent = nativeDocument.createEvent('Event');\r\n        finalEvent.initEvent(event, bubbles, cancelable);\r\n      }\r\n\r\n      assign(finalEvent, details);\r\n    }\r\n\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.dispatchEvent(finalEvent);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#elem\r\n   * @public\r\n   * @param {Number} [index = 0] - Index of the element of the set to get. Negative index means elem.length + index.\r\n   * @returns {Elem} New instance of Elem.\r\n   *\r\n   * @example\r\n   * elem.elem(1); // a wrap of the element in the set that has index 1\r\n   * elem.elem();  // a wrap of the element in the set that has index 0\r\n   */\r\n  elem(index = 0) {\r\n    if (index < 0) {\r\n      index = this.length + index;\r\n    }\r\n\r\n    return new Elem(this.$[index]);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#filter\r\n   * @public\r\n   * @param {String|Function|Element[]|Elem} [selector = Boolean] - If it's a string the method filters elements with the selector\r\n   * otherwise super.filter is called.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Method for filtering elements.\r\n   *\r\n   * @example\r\n   * elem.filter((elem) => new Elem(elem).closest('.parent'));\r\n   * elem.filter(elemsInArray);\r\n   * elem.filter(elemsInElem);\r\n   * elem.filter('.child');\r\n   */\r\n  filter(selector = Boolean) {\r\n    return new Elem(super.filter(filterSwitcher(selector)));\r\n  }\r\n\r\n  /**\r\n   * @method Elem#find\r\n   * @public\r\n   * @param {String|Function} selector - Selector to find.\r\n   * @returns {Elem|{ key: Key, value: * }|null} New instance of Elem if selector is a string\r\n   * otherwise super.find is called.\r\n   * @description Synonym for\r\n   * [Element#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Element/querySelectorAll}.\r\n   */\r\n  find(selector) {\r\n    if (!isString(selector)) {\r\n      return super.find(selector);\r\n    }\r\n\r\n    return this.object((elems, elem) => {\r\n      elems.add(find(selector, elem));\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#first\r\n   * @public\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Synonym for elem.elem(0).\r\n   */\r\n  first() {\r\n    return this.elem(0);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#firstChild\r\n   * @public\r\n   * @param {String} [selector = null] - If present, finds first child in every elem that matches the selector.\r\n   * If not, finds first child of each element in the set.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Method for finding first children of each element in the set.\r\n   *\r\n   * @example\r\n   * elem.first();       // finds first child of each element in the elem set\r\n   * elem.first('.foo'); // find first child that has foo class of each element in the set\r\n   */\r\n  firstChild(selector = null) {\r\n    return this.object((elems, elem) => {\r\n      const { value: found } = new Elem(elem)\r\n        .children()\r\n        .find((elem) => new Elem(elem).is(selector)) || {};\r\n\r\n      elems.add(found);\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#focus\r\n   * @returns {Elem} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLElement/focus\r\n   * @description Synonym for\r\n   * [HTMLElement#focus]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/focus}.\r\n   */\r\n  focus() {\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#getRule\r\n   * @public\r\n   * @param {String} name - Name of the rule.\r\n   * @returns {{ selector: (String|void), rules: Object }} Set of the css rules.\r\n   * @description Method for getting set of the rules under the name.\r\n   * Note: style element should be inside the document.\r\n   *\r\n   * @example\r\n   * style.addRule('img-size', 'img.square', {\r\n   *   width: '40px',\r\n   *   height: '40px'\r\n   * });\r\n   * style.getRule('img-size');\r\n   * // {\r\n   * //   selector: 'img.square',\r\n   * //   rules: {\r\n   * //     width: '40px',\r\n   * //     height: '40px'\r\n   * //   }\r\n   * // }\r\n   */\r\n  getRule(name) {\r\n    let found = {\r\n      selector: undefined,\r\n      rules: {}\r\n    };\r\n\r\n    this.some((elem) => {\r\n      if (getName(elem) === 'style') {\r\n        const { value: rule } = new Arr(elem.sheet.cssRules).find((rule) => rule.dwayneData && rule.dwayneData.name === name) || {};\r\n\r\n        if (rule) {\r\n          found = {\r\n            selector: rule.selectorText,\r\n            rules: new Elem(rule).css().$\r\n          };\r\n\r\n          return true;\r\n        }\r\n      }\r\n    });\r\n\r\n    return found;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#hasAttr\r\n   * @public\r\n   * @param {String} attr - Name of the attribute.\r\n   * @returns {Boolean} If the first element in the set has the attribute.\r\n   * @description Method that returns if the first element in the set has the attribute or not.\r\n   *\r\n   * @example\r\n   * elem.attr('attr', 'value').hasAttr('attr'); // true\r\n   * elem.removeAttr('attr').hasAttr('attr');    // false\r\n   */\r\n  hasAttr(attr) {\r\n    const elem = getElem(this);\r\n    const ns = attrNSSwitcher(attr, [new Elem(elem)]);\r\n\r\n    return isNull(ns)\r\n      ? elem.hasAttribute(attr)\r\n      : elem.hasAttributeNS(ns, attr);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#hasClass\r\n   * @public\r\n   * @param {String} cls - Name of the class.\r\n   * @returns {Boolean} If the first element in the set has the class.\r\n   * @description Method that returns if the first element in the set has the class or not.\r\n   *\r\n   * @example\r\n   * elem.addClass('cls').hasClass('cls');    // true\r\n   * elem.removeClass('cls').hasClass('cls'); // false\r\n   */\r\n  hasClass(cls) {\r\n    return getElem(this).classList.contains(cls);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#height\r\n   * @public\r\n   * @param {*|ElemValueCallback} [height] - Height to set.\r\n   * @returns {Elem|String} If no arguments passed height of the first element in the set returned.\r\n   * Otherwise all elements heights in the set are set to the height argument.\r\n   * @description Gets or sets height.\r\n   *\r\n   * @example\r\n   * elem.height(123);\r\n   * elem.height(); // 123\r\n   */\r\n  height(height) {\r\n    return this.prop.apply(this, new Arr(arguments).unshift('height').$);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#hide\r\n   * @public\r\n   * @returns {Elem} Returns this.\r\n   * @description Hides all elements in the set.\r\n   *\r\n   * @example\r\n   * elem.hide();\r\n   */\r\n  hide() {\r\n    return this.forEach((elem) => {\r\n      elem = new Elem(elem);\r\n\r\n      const currentDisplay = elem.css('display');\r\n\r\n      if (currentDisplay.indexOf('none')) {\r\n        elem.prop('dwayneData').previousDisplay = currentDisplay;\r\n      }\r\n\r\n      elem.css('display', 'none !important');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#html\r\n   * @public\r\n   * @param {String|ElemValueCallback|*} [html] - HTML to write instead of current HTML.\r\n   * @returns {Elem|String} If no arguments passed HTML of the first element in the set returned.\r\n   * Otherwise all elements HTML in the set are set to the html argument.\r\n   * @description Gets or sets HTML.\r\n   *\r\n   * @example\r\n   * elem.html('<div>1</div>');\r\n   * elem.html(); // '<div>1</div>'\r\n   */\r\n  html(html) {\r\n    if (!arguments.length) {\r\n      return getElem(this).innerHTML;\r\n    }\r\n\r\n    return this.forEach((elem, index) => {\r\n      if (isElement(elem)) {\r\n        elem.innerHTML = isFunction(html) ? html(elem.innerHTML, elem, index) : html;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#id\r\n   * @public\r\n   * @param {String|*} [id] - Id to set.\r\n   * @returns {Elem|String} If no arguments passed id of the first element in the set returned.\r\n   * Otherwise all elements ids in the set are set to the id argument.\r\n   * @description Gets id or sets ids.\r\n   *\r\n   * @example\r\n   * elem.id('unique');\r\n   * elem.id(); // 'unique'\r\n   */\r\n  id(id) {\r\n    if (!arguments.length) {\r\n      return getElem(this).id;\r\n    }\r\n\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.id = id;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @member {Number} Elem#innerHeight\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description Getter for finding how much height content of the first element can be.\r\n   *\r\n   * @example\r\n   * elem.css({\r\n   *   boxSizing: 'border-box',\r\n   *   height: '200px',\r\n   *   paddingTop: '2px',\r\n   *   paddingBottom: '3px',\r\n   *   borderTop: '1px solid black',\r\n   *   borderBottom: '4px solid black'\r\n   * }).innerHeight; // 190\r\n   * elem\r\n   *   .css('box-sizing', 'content-box')\r\n   *   .innerHeight; // 200\r\n   * elem\r\n   *   .css('box-sizing', 'padding-box')\r\n   *   .innerHeight; // 195\r\n   */\r\n  get innerHeight() {\r\n    const elem = this.$[0];\r\n\r\n    if (isWindow(elem)) {\r\n      return elem.innerHeight;\r\n    }\r\n\r\n    const {\r\n      borderTopWidth,\r\n      borderBottomWidth,\r\n      boxSizing,\r\n      height,\r\n      paddingTop,\r\n      paddingBottom\r\n    } = this.calcCSS();\r\n    const borders = px(borderTopWidth) + px(borderBottomWidth);\r\n    const paddings = px(paddingTop) + px(paddingBottom);\r\n\r\n    return px(height) - innerSwitcher(boxSizing, [paddings, borders]);\r\n  }\r\n\r\n  /**\r\n   * @member {Number} Elem#innerWidth\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description Getter for finding how much width content of the first element can be.\r\n   *\r\n   * @example\r\n   * elem.css({\r\n   *   boxSizing: 'border-box',\r\n   *   width: '200px',\r\n   *   paddingLeft: '2px',\r\n   *   paddingRight: '3px',\r\n   *   borderLeft: '1px solid black',\r\n   *   borderRight: '4px solid black'\r\n   * }).innerWidth; // 190\r\n   * elem\r\n   *   .css('box-sizing', 'content-box')\r\n   *   .innerWidth; // 200\r\n   * elem\r\n   *   .css('box-sizing', 'padding-box')\r\n   *   .innerWidth; // 195\r\n   */\r\n  get innerWidth() {\r\n    const elem = this.$[0];\r\n\r\n    if (isWindow(elem)) {\r\n      return elem.innerWidth;\r\n    }\r\n\r\n    const {\r\n      borderLeftWidth,\r\n      borderRightWidth,\r\n      boxSizing,\r\n      paddingLeft,\r\n      paddingRight,\r\n      width\r\n    } = this.calcCSS();\r\n    const borders = px(borderLeftWidth) + px(borderRightWidth);\r\n    const paddings = px(paddingLeft) + px(paddingRight);\r\n\r\n    return px(width) - innerSwitcher(boxSizing, [paddings, borders]);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#insertAfter\r\n   * @public\r\n   * @param {String|Elem|Element} element - Element to insert this element after or a selector of it.\r\n   * @returns {Elem} Returns this.\r\n   * @description Puts the elements from the set after the element specified by the argument.\r\n   * The elements remain in the same order.\r\n   *\r\n   * @example\r\n   * elem.insertAfter(elem2);\r\n   * elem.insertAfter(document.getElementById('id'));\r\n   * elem.insertAfter('#id div.c1');\r\n   */\r\n  insertAfter(element) {\r\n    element = toFind(element).first();\r\n\r\n    let parent = element.parent();\r\n\r\n    if (!parent.length) {\r\n      return this;\r\n    }\r\n\r\n    element = element.next().$[0];\r\n    parent = parent.$[0];\r\n\r\n    return this.forEach((elem) => {\r\n      if (element) {\r\n        parent.insertBefore(elem, element);\r\n      } else {\r\n        parent.appendChild(elem);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#insertBefore\r\n   * @public\r\n   * @param {String|Elem|Element} element - Element to insert this element before or a selector of it.\r\n   * @returns {Elem} Returns this.\r\n   * @description Puts the elements from the set before the element specified by the argument.\r\n   * The elements remain in the same order.\r\n   *\r\n   * @example\r\n   * elem.insertBefore(elem2);\r\n   * elem.insertBefore(document.getElementById('id'));\r\n   * elem.insertBefore('#id div.c1');\r\n   */\r\n  insertBefore(element) {\r\n    element = toFind(element).first();\r\n\r\n    let parent = element.parent();\r\n\r\n    if (!parent.length) {\r\n      return this;\r\n    }\r\n\r\n    element = element.$[0];\r\n    parent = parent.$[0];\r\n\r\n    return this.forEach((elem) => {\r\n      parent.insertBefore(elem, element);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#into\r\n   * @public\r\n   * @param {String|Elem|Element} element - Element to put this elements into or a selector of it.\r\n   * @param {Boolean} end - If the elements should be inserted to the end. If false they are inserted to the start.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method is similar to\r\n   * [Node#appendChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/appendChild}.\r\n   *\r\n   * @example\r\n   * elem.into(elem2);\r\n   * elem.into(document.getElementById('id'));\r\n   * elem.into('#id div.c1');\r\n   */\r\n  into(element, end = true) {\r\n    element = toFind(element).$[0];\r\n\r\n    if (\r\n      !element ||\r\n      isWindow(element) ||\r\n      isHTMLDocument(element) ||\r\n      isCommentOrText(element)\r\n    ) {\r\n      return this;\r\n    }\r\n\r\n    if (!end && element.firstChild) {\r\n      return this\r\n        .slice()\r\n        .reverse()\r\n        .forEach((elem) => {\r\n          element.insertBefore(elem, element.firstChild);\r\n        });\r\n    }\r\n\r\n    return this.forEach((elem) => {\r\n      element.appendChild(elem);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#is\r\n   * @public\r\n   * @param {String} selector\r\n   * @returns {Boolean} If the first element in the set matches the selector.\r\n   * If the selector is undefined or null always returns true. If it's not for not elements\r\n   * entries returns false.\r\n   * @description Synonym for\r\n   * [Element#matches]{@link https://developer.mozilla.org/en/docs/Web/API/Element/matches}.\r\n   *\r\n   * @example\r\n   * elem.addClass('cls');\r\n   * elem.is('.cls');         // true\r\n   *\r\n   * elem.removeClass('cls');\r\n   * elem.is('.cls');         // false\r\n   */\r\n  is(selector) {\r\n    if (isNull(selector)) {\r\n      return true;\r\n    }\r\n\r\n    const elem = getElem(this);\r\n    const matches = (\r\n      elem.matches ||\r\n      elem.matchesSelector ||\r\n      elem.webkitMatchesSelector ||\r\n      elem.mozMatchesSelector ||\r\n      elem.msMatchesSelector ||\r\n      elem.oMatchesSelector\r\n    );\r\n\r\n    if (!isElement(this.$[0])) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      return matches.call(elem, selector);\r\n    } catch (err) {\r\n      console.error(`Selector '${ selector }' is not a valid selector (Elem#is)`);\r\n\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method Elem#isBroken\r\n   * @public\r\n   * @returns {Boolean} If the first image in the set is broken.\r\n   * @description Returns if the first element in the set is broken. Not image and not loaded image is considered proper.\r\n   *\r\n   * @example\r\n   * const img = elem.img().on({\r\n   *   'load': onload,\r\n   *   'error': onload\r\n   * });\r\n   *\r\n   * onload = () => {\r\n   *   console.log(img.isBroken()); // true\r\n   * };\r\n   *\r\n   * img.ref('/some/non-existent/site/not-found.png');\r\n   */\r\n  isBroken() {\r\n    let isBroken = false;\r\n\r\n    this.some((elem) => {\r\n      if (getName(elem) === 'img') {\r\n        isBroken = !!(elem.complete && (!elem.naturalWidth || !elem.naturalHeight));\r\n\r\n        return true;\r\n      }\r\n    });\r\n\r\n    return isBroken;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#isWithinDocument\r\n   * @public\r\n   * @returns {Boolean} Returns if the first element in the set is within the document or not.\r\n   * @description Returns if the first element in the set is within the document or not.\r\n   *\r\n   * @example\r\n   * new Elem(document.body).isWithinDocument();  // true\r\n   * new Elem(document).div().isWithinDocument(); // false\r\n   */\r\n  isWithinDocument() {\r\n    return this.first().closest('html').length !== 0;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#last\r\n   * @public\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Synonym for elem.elem(-1).\r\n   */\r\n  last() {\r\n    return this.elem(-1);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#lastChild\r\n   * @public\r\n   * @param {String} [selector = null] - If present, finds last child in every elem that matches the selector.\r\n   * If not, finds last child of each element in the set.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Method for finding last children of each element in the set.\r\n   *\r\n   * @example\r\n   * elem.last();       // finds last child of each element in the elem set\r\n   * elem.last('.foo'); // find last child that has 'foo' class of each element in the set\r\n   */\r\n  lastChild(selector = null) {\r\n    return this.object((elems, elem) => {\r\n      const { value: found } = new Elem(elem)\r\n        .children()\r\n        .reverse()\r\n        .find((elem) => new Elem(elem).is(selector)) || {};\r\n\r\n      elems.add(found);\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#load\r\n   * @public\r\n   * @returns {Promise.<{ proper: Elem, broken: Elem }>} Promise with broken and proper images.\r\n   * @description Loads each image in the set and puts it to the proper or broken array.\r\n   *\r\n   * @example\r\n   * images.load().then(({ broken }) => {\r\n   *   broken.filter('img').ref('/fallback.png');\r\n   * });\r\n   */\r\n  load() {\r\n    const images = {\r\n      proper: new Elem(),\r\n      broken: new Elem()\r\n    };\r\n\r\n    return Promise.all(\r\n      this\r\n        .filter((elem) => getName(elem) === 'img')\r\n        .map((elem) => {\r\n          const $elem = new Elem(elem);\r\n\r\n          if (elem.complete) {\r\n            images[$elem.isBroken() ? 'broken' : 'proper'].push(elem);\r\n\r\n            return;\r\n          }\r\n\r\n          return new Promise((resolve) => {\r\n            const removeListeners = $elem.on({\r\n              load() {\r\n                images.proper.add(elem);\r\n\r\n                removeListeners();\r\n                resolve();\r\n              },\r\n              error() {\r\n                images.broken.add(elem);\r\n\r\n                removeListeners();\r\n                resolve();\r\n              }\r\n            });\r\n          });\r\n        })\r\n        .$\r\n    ).then(() => images);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#moveAttr\r\n   * @public\r\n   * @param {String} attr - Attribute to move to the first element.\r\n   * @param {String} [value = ''] - Value to set for the attribute. If not set attribute of the previous element or '' used.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for moving an attribute from previous element to the next one (first element in this set).\r\n   *\r\n   * @example\r\n   * elem1.moveAttr('attr', 'value');     // attribute 'attr' set to 'value' on elem1\r\n   * elem2.moveAttr('attr');              // attribute 'attr' removed from elem1. set to 'value' on elem2\r\n   * elem3.moveAttr('attr', 'new value'); // attribute 'attr' removed from elem2. set to 'new value' on elem3\r\n   */\r\n  moveAttr(attr, value = '') {\r\n    const prev = attrs[attr];\r\n    const elem = this.elem();\r\n\r\n    if (prev && elem.length) {\r\n      if (arguments.length < 2) {\r\n        value = prev.attr(attr);\r\n      }\r\n\r\n      prev.removeAttr(attr);\r\n    }\r\n\r\n    if (elem.length) {\r\n      attrs[attr] = elem.attr(attr, value);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#moveClass\r\n   * @public\r\n   * @param {String} cls - Class to move to the first element.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for moving a class from previous element to the next one (first element in this set).\r\n   *\r\n   * @example\r\n   * elem1.moveClass('cls'); // class 'cls' added to elem1\r\n   * elem2.moveClass('cls'); // class 'cls' removed from elem1. added to elem1\r\n   */\r\n  moveClass(cls) {\r\n    const prev = classes[cls];\r\n    const elem = this.elem();\r\n\r\n    if (prev && elem.length) {\r\n      prev.removeClass(cls);\r\n    }\r\n\r\n    if (elem.length) {\r\n      classes[cls] = elem.addClass(cls);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @member {String} Elem#name\r\n   * @type {String}\r\n   * @public\r\n   * @readonly\r\n   * @description nodeName (lowercased) of the first element in the set.\r\n   *\r\n   * @example\r\n   * const elem1 = elem.create('div');\r\n   * elem1.name // 'div'\r\n   */\r\n  get name() {\r\n    return getName(this.$[0]);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#next\r\n   * @public\r\n   * @param {String} [selector = null] - If present, finds next element to every elem that matches the selector.\r\n   * If not, finds next element to each element in the set.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Method for finding next element to each element in the set.\r\n   *\r\n   * @example\r\n   * elem.next();       // finds next element to each element in the set\r\n   * elem.next('.foo'); // finds next element to each element that has 'foo' class\r\n   */\r\n  next(selector = null) {\r\n    return this.object((elems, elem) => {\r\n      /* eslint no-cond-assign: 0 */\r\n      while (elem = elem.nextSibling) {\r\n        if (new Elem(elem).is(selector)) {\r\n          return elems.add(elem);\r\n        }\r\n      }\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#off\r\n   * @public\r\n   * @param {...ElemEventString} events - Events to remove.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method that removes all the listeners from each element in the set specified by the events arguments.\r\n   *\r\n   * @example\r\n   * elem.off('click');\r\n   * elem.off('click, input');\r\n   * elem.off('click, input', 'focus');\r\n   */\r\n  off(...events) {\r\n    return this.forEach((elem) => {\r\n      const { listeners } = elem.dwayneData;\r\n\r\n      iterate(arguments, (event) => {\r\n        iterate(event.split(eventSeparator), (event) => {\r\n          (listeners[event] || new Super()).forEach(({ removeListener }) => removeListener());\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#on\r\n   * @public\r\n   * @param {ElemEventString|Object.<ElemEventString|ElemListener>} event - Either a {@link ElemEventString} string\r\n   * or an object with event keys (a key is also ElemEventString) and listeners values.\r\n   * @param {String} [selector = null] - Selector to filter event targets.\r\n   * @param {ElemListener} [listener] - If the first argument is a string it must be a listener function for\r\n   * specified event(s).\r\n   * @returns {ElemRemoveListeners} Function that takes optional event argument.\r\n   * @description Adds event listeners for all the elements in the set.\r\n   * For debugging: If you need to know what listeners are in work (and what selectors filter targets)\r\n   * you can look at the base property of the only dwayne listener that listens for the event\r\n   * and find all working listeners in listener.base.dwayneData.listeners[event].$.\r\n   *\r\n   * @example\r\n   * elem.on(\r\n   *   'change, input',\r\n   *   'input, select, textarea, datalist, keygen, output',\r\n   *   (e, elem, index) => console.log(elem.value)\r\n   * );\r\n   * elem.on(\r\n   *   'change, input',\r\n   *   (e, elem, index) => console.log(elem.value)\r\n   * );\r\n   * elem.on(\r\n   *   {\r\n   *     'change, input': (e, elem, index) => console.log(elem.value),\r\n   *     'blur': () => console.log('blur')\r\n   *   },\r\n   *   'input, select, textarea, datalist, keygen, output'\r\n   * );\r\n   *\r\n   * const removeListeners = elem.on({\r\n   *   'change, input': (e, elem, index) => console.log(elem.value),\r\n   *   'blur': () => console.log('blur')\r\n   * });\r\n   *\r\n   * removeListeners('click');\r\n   * removeListeners('blur, change');\r\n   * removeListeners('blur, change', 'input');\r\n   * removeListeners();\r\n   */\r\n  on(event, selector = null, listener) {\r\n    const allListeners = new Super({});\r\n\r\n    if (isFunction(selector)) {\r\n      listener = selector;\r\n      selector = null;\r\n    }\r\n\r\n    if (isString(event)) {\r\n      event = { [event]: listener };\r\n    }\r\n\r\n    event = new Super(event).object((listeners, listener, event) => {\r\n      iterate(event.split(eventSeparator), (event) => {\r\n        listeners[event] = listener;\r\n      });\r\n    });\r\n\r\n    this.forEach((elem) => {\r\n      if (!isElement(elem) && !isWindow(elem) && !isHTMLDocument(elem)) {\r\n        return;\r\n      }\r\n\r\n      const { listeners } = (windowsDwayneData.find(({ element }) => element === elem) || {}).value || elem.dwayneData;\r\n\r\n      event.forEach((listener, event) => {\r\n        const removeEventListeners = listeners[event] = listeners[event] || new Super({}).define('index', {\r\n          value: 0,\r\n          configurable: true,\r\n          writable: true\r\n        });\r\n        const index = removeEventListeners.prop('index');\r\n\r\n        if (!removeEventListeners.has('listener')) {\r\n          const newListener = (e) => {\r\n            removeEventListeners.forEach(({ selector, listener }) => {\r\n              if (new Elem(e.target).is(selector)) {\r\n                listener.call(elem, e, elem, index);\r\n              }\r\n            });\r\n          };\r\n\r\n          newListener.base = elem;\r\n\r\n          elem.addEventListener(event, newListener, false);\r\n          removeEventListeners.define('listener', {\r\n            value: newListener,\r\n            configurable: true,\r\n            writable: true\r\n          });\r\n        }\r\n\r\n        const removeListener = () => {\r\n          removeEventListeners.delete(index);\r\n\r\n          if (!removeEventListeners.count) {\r\n            elem.removeEventListener(event, removeEventListeners.prop('listener'), false);\r\n            removeEventListeners.delete('listener');\r\n          }\r\n        };\r\n\r\n        allListeners.prop(event, (allListeners.prop(event) || new Arr()).push(removeListener));\r\n\r\n        removeEventListeners.assign({\r\n          index: index + 1,\r\n          [index]: {\r\n            selector,\r\n            listener,\r\n            removeListener\r\n          }\r\n        });\r\n      });\r\n    });\r\n\r\n    return function removeEventListeners(event) {\r\n      if (arguments.length) {\r\n        iterate(arguments, (event) => {\r\n          iterate(event.split(eventSeparator), (event) => {\r\n            if (allListeners.has(event)) {\r\n              allListeners.prop(event).forEach((removeListener) => removeListener());\r\n              allListeners.delete(event);\r\n            }\r\n          });\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      allListeners.forEach((removeListeners) => {\r\n        removeListeners.forEach((removeListener) => removeListener());\r\n      });\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @member {Number} Elem#outerHeight\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description Getter for finding how much height the element actually is.\r\n   *\r\n   * @example\r\n   * elem.css({\r\n   *   boxSizing: 'border-box',\r\n   *   height: '200px',\r\n   *   paddingTop: '2px',\r\n   *   paddingBottom: '3px',\r\n   *   borderTop: '1px solid black',\r\n   *   borderBottom: '4px solid black'\r\n   *   marginTop: '0px',\r\n   *   marginBottom: '5px'\r\n   * }).outerHeight; // 205\r\n   * elem\r\n   *   .css('box-sizing', 'content-box')\r\n   *   .outerHeight; // 215\r\n   * elem\r\n   *   .css('box-sizing', 'padding-box')\r\n   *   .outerHeight; // 210\r\n   */\r\n  get outerHeight() {\r\n    const elem = this.$[0];\r\n\r\n    if (isWindow(elem)) {\r\n      return elem.outerHeight;\r\n    }\r\n\r\n    const {\r\n      borderTopWidth,\r\n      borderBottomWidth,\r\n      boxSizing,\r\n      height,\r\n      marginTop,\r\n      marginBottom,\r\n      paddingTop,\r\n      paddingBottom\r\n    } = this.calcCSS();\r\n    const borders = px(borderTopWidth) + px(borderBottomWidth);\r\n    const paddings = px(paddingTop) + px(paddingBottom);\r\n\r\n    return px(height) + px(marginTop) + px(marginBottom) + outerSwitcher(boxSizing, [borders, paddings]);\r\n  }\r\n\r\n  /**\r\n   * @member {Number} Elem#outerWidth\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description Getter for finding how much width the element actually is.\r\n   *\r\n   * @example\r\n   * elem.css({\r\n   *   boxSizing: 'border-box',\r\n   *   width: '200px',\r\n   *   paddingLeft: '2px',\r\n   *   paddingRight: '3px',\r\n   *   borderLeft: '1px solid black',\r\n   *   borderRight: '4px solid black'\r\n   *   marginLeft: '0px',\r\n   *   marginRight: '5px'\r\n   * }).outerWidth; // 205\r\n   * elem\r\n   *   .css('box-sizing', 'content-box')\r\n   *   .outerWidth; // 215\r\n   * elem\r\n   *   .css('box-sizing', 'padding-box')\r\n   *   .outerWidth; // 210\r\n   */\r\n  get outerWidth() {\r\n    const elem = this.$[0];\r\n\r\n    if (isWindow(elem)) {\r\n      return elem.outerWidth;\r\n    }\r\n\r\n    const {\r\n      borderLeftWidth,\r\n      borderRightWidth,\r\n      boxSizing,\r\n      marginLeft,\r\n      marginRight,\r\n      paddingLeft,\r\n      paddingRight,\r\n      width\r\n    } = this.calcCSS();\r\n    const borders = px(borderLeftWidth) + px(borderRightWidth);\r\n    const paddings = px(paddingLeft) + px(paddingRight);\r\n\r\n    return px(width) + px(marginLeft) + px(marginRight) + outerSwitcher(boxSizing, [borders, paddings]);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#parent\r\n   * @public\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Method returns wrap of the set of the parent elements of each element in the set.\r\n   */\r\n  parent() {\r\n    return this.object((elems, elem) => elems.add(elem.parentNode), new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#parentTree\r\n   * @public\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Returns wrap of all parents of each element in the set.\r\n   *\r\n   * @example\r\n   * elem.parentTree(); // Elem\r\n   */\r\n  parentTree() {\r\n    return this.object((elems, elem) => {\r\n      while (elem = elem.parentNode) {\r\n        elems.add(elem);\r\n      }\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#prev\r\n   * @public\r\n   * @param {String} [selector = null] - If present, finds previous element to every elem that matches the selector.\r\n   * If not, finds previous element to each element in the set.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Method for finding previous element to each element in the set.\r\n   *\r\n   * @example\r\n   * elem.next();       // finds previous element to each element in the set\r\n   * elem.next('.foo'); // finds previous element to each element that has 'foo' class\r\n   */\r\n  prev(selector = null) {\r\n    return this.object((elems, elem) => {\r\n      /* eslint no-cond-assign: 0 */\r\n      while (elem = elem.previousSibling) {\r\n        if (new Elem(elem).is(selector)) {\r\n          return elems.add(elem);\r\n        }\r\n      }\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#prop\r\n   * @public\r\n   * @param {String|Object.<String, ElemValueCallback|*>} property - Either a string of a property or an assigned object.\r\n   * @param {ElemValueCallback|*} [value] - If a property parameter is a string\r\n   * this has to be an assigned value if it's present.\r\n   * @returns {Elem|*} Returns this if it's setter or a value if getter.\r\n   * @description Method that is either a property getter for the first element in the set\r\n   * or a setter for every element in the set.\r\n   *\r\n   * @example\r\n   * elem.prop('draggable', false);\r\n   * elem.prop('draggable'); // false\r\n   */\r\n  prop(property, value) {\r\n    if (arguments.length <= 1 && isString(property)) {\r\n      return this.$[0] ? this.$[0][property] : undefined;\r\n    }\r\n\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: value };\r\n    }\r\n\r\n    return this.forEach((elem, index) => {\r\n      iterate(property, (value, prop) => {\r\n        elem[prop] = isFunction(value) ? value(elem[prop], elem, index) : value;\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#ref\r\n   * @public\r\n   * @param {String|ElemValueCallback} [link] - If it's present link to a resource.\r\n   * @returns {Elem|String} If the link argument isn't present it's a getter of the 'src' attribute\r\n   * for the one of following elements: img, script, iframe, audio, video; of the 'action' attribute\r\n   * for a form element and of the 'href' attribute for the rest. If it's present it's a setter\r\n   * of the same attribute for all the element in the set.\r\n   * @description Method for getting resources links and setting them.\r\n   *\r\n   * @example\r\n   * elem.ref('/some/cool/image.png');\r\n   * elem.ref(); // '/some/cool/image.png'\r\n   */\r\n  ref(link) {\r\n    if (!arguments.length) {\r\n      return this.attr(refSwitcher(this.name));\r\n    }\r\n\r\n    return this.forEach((elem) => {\r\n      elem = new Elem(elem);\r\n\r\n      elem.attr(refSwitcher(elem.name), link);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#remove\r\n   * @public\r\n   * @returns {Elem} Returns this.\r\n   * @description Removes all the elements from the set from the document.\r\n   * Note: it doesn't remove them from the set so watch out for the memory leaks.\r\n   *\r\n   * @example\r\n   * elem.remove();\r\n   */\r\n  remove() {\r\n    return this.forEach((elem) => {\r\n      const parent = elem.parentNode;\r\n\r\n      if (parent) {\r\n        parent.removeChild(elem);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#removeAttr\r\n   * @public\r\n   * @param {...String} attributes - Attributes to remove.\r\n   * @returns {Elem} Returns this.\r\n   * @description Removes all the attributes from arguments from all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.removeAttr('foo', 'bar', 'baz');\r\n   */\r\n  removeAttr(...attributes) {\r\n    return this.forEach((elem) => {\r\n      if (!isElement(elem)) {\r\n        return;\r\n      }\r\n\r\n      iterate(arguments, (attr) => {\r\n        const ns = attrNSSwitcher(attr, [new Elem(elem)]);\r\n\r\n        if (isNull(ns)) {\r\n          elem.removeAttribute(attr);\r\n        } else {\r\n          elem.removeAttributeNS(ns, attr);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#removeClass\r\n   * @public\r\n   * @param {...String} classes - Classes to remove.\r\n   * @returns {Elem} Returns this.\r\n   * @description Removes all the classes from arguments from all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.removeClass('foo', 'bar', 'baz');\r\n   */\r\n  removeClass(...classes) {\r\n    return this.forEach((elem) => {\r\n      const list = elem.classList;\r\n\r\n      iterate(isElement(elem) && arguments, (cls) => list.remove(cls));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#removeCSS\r\n   * @public\r\n   * @param {...String} props - CSS properties to remove.\r\n   * @returns {Elem} Returns this.\r\n   * @description Removes all the CSS properties from arguments from all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.removeCSS('display', 'position', 'margin');\r\n   */\r\n  removeCSS(...props) {\r\n    return this.forEach((elem) => {\r\n      if (!isElement(elem)) {\r\n        return;\r\n      }\r\n\r\n      iterate(arguments, (css) => {\r\n        elem.style.removeProperty(css);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#replace\r\n   * @public\r\n   * @param {String|Elem|Element} element - Element to replace the first element in the set\r\n   * with a set of elements specified by the argument (Element, set of elements or a selector of them).\r\n   * @returns {Elem} Returns this.\r\n   * @description Method is similar to\r\n   * [Node#replaceChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/replaceChild}.\r\n   *\r\n   * @example\r\n   * elem.replace(elem2);\r\n   * elem.replace(document.getElementById('id'));\r\n   * elem.replace('#id div.c1');\r\n   */\r\n  replace(element) {\r\n    element = toFind(element);\r\n\r\n    const parent = this.first().parent();\r\n\r\n    if (!parent.length) {\r\n      return this;\r\n    }\r\n\r\n    let elem = parent;\r\n    let method = 'into';\r\n    const next = this.next().first().$[0];\r\n    const prev = this.prev().first().$[0];\r\n\r\n    if (next) {\r\n      elem = next;\r\n      method = 'insertBefore';\r\n    } else if (prev) {\r\n      elem = prev;\r\n      method = 'insertAfter';\r\n    }\r\n\r\n    this.first().remove();\r\n\r\n    element[method](elem);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#setOf\r\n   * @public\r\n   * @param {String} type - HTML element type.\r\n   * @param {Number|Object|Array.<*>} iterator - A number (how many elements to create inside each element),\r\n   * an object or an array to iterate over.\r\n   * @param {ElemSetOfCallback} callback\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Function for creating set of elements inside each element in the set based on an array or an object.\r\n   *\r\n   * @example\r\n   * table.setOf('tr', [[1, 2], [3, 4], [5, 6]], (row, array) => {\r\n   *   D(row).setOf('td', array, (col, number) => {\r\n   *     D(col).text(number);\r\n   *   });\r\n   * });\r\n   */\r\n  setOf(type, iterator, callback) {\r\n    validate({ 2: callback }, { 2: ['function'] }, 'Elem#setOf');\r\n\r\n    iterator = new Super(iterator).$;\r\n\r\n    if (isNumber(iterator)) {\r\n      try {\r\n        validate({ 1: iterator }, { 1: ['intLike', '>=0'] }, 'Elem#setOf');\r\n      } catch (e) {\r\n        throw new Error('2nd argument must be either or non-negative integer, or object! (at Elem#setOf)');\r\n      }\r\n\r\n      iterator = array(iterator).$;\r\n    }\r\n\r\n    return this.object((elems, elem, index) => {\r\n      iterate(iterator, (value, key) => {\r\n        const created = new Elem(elem).create(type);\r\n\r\n        callback(created.$[0], value, key, iterator, elem, index);\r\n\r\n        elems.add(created);\r\n      });\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#show\r\n   * @public\r\n   * @returns {Elem} Returns this.\r\n   * @description Shows all elements in the set.\r\n   * If an element was hidden using {@link Elem#hide} previous display is set.\r\n   *\r\n   * @example\r\n   * elem.show();\r\n   */\r\n  show() {\r\n    return this.forEach((elem) => {\r\n      const { dwayneData } = elem;\r\n\r\n      elem = new Elem(elem);\r\n\r\n      if (elem.css('display').indexOf('none') === 0) {\r\n        elem.css('display', dwayneData.previousDisplay);\r\n      }\r\n\r\n      dwayneData.previousDisplay = '';\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#text\r\n   * @public\r\n   * @param {String|ElemValueCallback|*} [text] - Text to write instead of current text.\r\n   * @returns {Elem|String} If no arguments passed text of the first element in the set returned.\r\n   * Otherwise all elements texts in the set are set to the text argument.\r\n   * @description Gets or sets text.\r\n   *\r\n   * @example\r\n   * elem.text('123');\r\n   * elem.text(); // '123'\r\n   */\r\n  text(text) {\r\n    if (!arguments.length) {\r\n      return this.prop(textProperty);\r\n    }\r\n\r\n    return this.forEach((elem, index) => {\r\n      const txt = elem[textProperty];\r\n\r\n      new Elem(elem).prop(\r\n        textProperty,\r\n        isFunction(text)\r\n          ? text(txt, elem, index)\r\n          : text\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#toggleAttr\r\n   * @public\r\n   * @param {String} attr - Attribute to toggle.\r\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the attribute\r\n   * with the '' value and if falsey method removes the attribute. If not present method adds\r\n   * the attribute if it doesn't exist and removes if it does.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for toggling attributes.\r\n   *\r\n   * @example\r\n   * elem.toggleAttr('attr');\r\n   * elem.toggleAttr('attr', someCondition);\r\n   */\r\n  toggleAttr(attr, condition) {\r\n    return this.forEach((elem) => {\r\n      elem = new Elem(elem);\r\n\r\n      if (arguments.length < 2 ? !elem.hasAttr(attr) : condition) {\r\n        elem.attr(attr, '');\r\n      } else {\r\n        elem.removeAttr(attr);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#toggleAttr\r\n   * @public\r\n   * @param {String} cls - Class to toggle.\r\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the class\r\n   * and if falsey method removes the class. If not present method adds\r\n   * the class if it doesn't exist and removes if it does.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for toggling classes.\r\n   *\r\n   * @example\r\n   * elem.toggleClass('cls');\r\n   * elem.toggleClass('cls', someCondition);\r\n   */\r\n  toggleClass(cls, condition) {\r\n    return (arguments.length < 2 ? !this.hasClass(cls) : condition)\r\n      ? this.addClass(cls)\r\n      : this.removeClass(cls);\r\n  }\r\n\r\n  get toStringTag() {\r\n    return toStringTag(this.$$);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#up\r\n   * @public\r\n   * @param {Integer} [level = 1] - What level up along the tree should be the parent.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Creates a collection of parents of level &lt;level&gt;.\r\n   *\r\n   * @example\r\n   * elem.up();\r\n   * elem.up(2);\r\n   */\r\n  up(level = 1) {\r\n    validate([level], [['intLike', '>=0']], 'Elem#up');\r\n\r\n    level = Number(level);\r\n\r\n    return this.object((elems, elem) => {\r\n      let n = level;\r\n\r\n      while (n-- && elem) {\r\n        elem = elem.parentNode;\r\n      }\r\n\r\n      elems.add(elem);\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#validate\r\n   * @public\r\n   * @param {ValidateCallback} [validator] - If present, function that validates inputs.\r\n   * @returns {Elem|Object.<String, Error|*>|null}\r\n   * If a callback argument provided returns this. If no arguments provided returns either an object\r\n   * with input names keys and errors values or null if no errors found.\r\n   * @description If a callback argument provided adds it to the element validators list.\r\n   * If no arguments provided validates every input element in the set with its own functions.\r\n   * If an element is a form it validates all input elements inside it. After the validation\r\n   * fires 'validate' event with 'valid' and 'error' (if form it's errors) properties.\r\n   *\r\n   * @example\r\n   * form.on('input change', 'input', (value, input) => {\r\n   *   input = D(input);\r\n   *\r\n   *   if (Number(value) % 3) {\r\n   *     input.addClass('invalid');\r\n   *\r\n   *     throw new Error('The value should be divided by 3!');\r\n   *   }\r\n   *\r\n   *   input.removeClass('invalid');\r\n   * });\r\n   */\r\n  validate(validator) {\r\n    validate([validator], ['function||!'], 'Elem#validate');\r\n\r\n    if (validator) {\r\n      return this.forEach(({ dwayneData }) => {\r\n        dwayneData.validators.push(validator);\r\n      });\r\n    }\r\n\r\n    const errors = new Super({ errors: null });\r\n\r\n    this\r\n      .filter(`${ inputElements }, form`)\r\n      .forEach((elem, index) => {\r\n        if (getName(elem) === 'form') {\r\n          let formErrors = { errors: null };\r\n          const form = new Elem(elem);\r\n          const inputs = form.find(inputElements);\r\n\r\n          inputs.forEach((input, index) => {\r\n            validatorWrap(input, index, formErrors);\r\n          });\r\n\r\n          errors.deepAssign(formErrors);\r\n\r\n          formErrors = formErrors.errors;\r\n\r\n          form.dispatch('validate', {}, {\r\n            valid: !formErrors,\r\n            errors: formErrors\r\n          });\r\n\r\n          return inputs.forEach((input) => {\r\n            const inputError = (formErrors || {})[input.name];\r\n\r\n            new Elem(input).dispatch('validate', {}, {\r\n              valid: !inputError,\r\n              error: inputError || null\r\n            });\r\n          });\r\n        }\r\n\r\n        let inputError = { errors: null };\r\n\r\n        validatorWrap(elem, index, inputError);\r\n        errors.deepAssign(inputError);\r\n\r\n        inputError = (inputError.errors || {})[elem.name];\r\n\r\n        new Elem(elem).dispatch('validate', {}, {\r\n          valid: !inputError,\r\n          error: inputError || null\r\n        });\r\n      });\r\n\r\n    function validatorWrap(input, index, errors) {\r\n      try {\r\n        if (input.validity && !input.validity.valid) {\r\n          throw new Error(input.validationMessage);\r\n        }\r\n\r\n        input.dwayneData.validators.forEach((validator) => {\r\n          validator(input.value, input, index);\r\n        });\r\n      } catch (err) {\r\n        (errors.errors = errors.errors || {})[input.name] = err;\r\n      }\r\n    }\r\n\r\n    if (errors.every((error) => isNull(error))) {\r\n      return null;\r\n    }\r\n\r\n    return errors.$.errors;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#width\r\n   * @public\r\n   * @param {*|ElemValueCallback} [width] - Width to set.\r\n   * @returns {Elem|String} If no arguments passed width of the first element in the set returned.\r\n   * Otherwise all elements widths in the set are set to the width argument.\r\n   * @description Gets or sets width.\r\n   *\r\n   * @example\r\n   * elem.width(123);\r\n   * elem.width(); // 123\r\n   */\r\n  width(width) {\r\n    return this.prop.apply(this, new Arr(arguments).unshift('width').$);\r\n  }\r\n}\r\n\r\ndefineProperties(Elem.prototype, {\r\n  [Symbol.toStringTag]: 'Elem'\r\n});\r\n\r\n/**\r\n * @const {Elem} win\r\n * @type {Elem}\r\n * @public\r\n * @description Elem instance of window.\r\n */\r\nconst win = new Elem(global);\r\n\r\n/**\r\n * @const {Elem} doc\r\n * @type {Elem}\r\n * @public\r\n * @description Elem instance of document.\r\n */\r\nconst doc = new Elem(nativeDocument);\r\n\r\n/**\r\n * @const {Elem} html\r\n * @type {Elem}\r\n * @public\r\n * @description Elem instance of document.documentElement.\r\n */\r\nconst html = new Elem(nativeDocument.documentElement);\r\n\r\n/**\r\n * @const {Elem} body\r\n * @type {Elem}\r\n * @public\r\n * @description Elem instance of document.body.\r\n */\r\nconst body = new Elem(nativeDocument.body);\r\n\r\n/**\r\n * @const {Elem} head\r\n * @type {Elem}\r\n * @public\r\n * @description Elem instance of document.head.\r\n */\r\nconst head = new Elem(nativeDocument.head);\r\n\r\nconst elements = new Arr(htmlElements).concat(svgElements).$;\r\nconst props = new Arr(elements).map((type) => new Str(type).toCamelCase().$).$;\r\n\r\ndynamicDefineProperties(Elem.prototype, props, (elem, i) => function () {\r\n  return this.create.apply(this, new Arr(arguments).unshift(elements[i]).$);\r\n});\r\n\r\ndynamicDefineProperties(Elem.prototype, canvasGetMethods, (method) => function () {\r\n  const ctx = this.ctx();\r\n\r\n  if (ctx) {\r\n    return ctx[method].apply(ctx, arguments);\r\n  }\r\n});\r\n\r\ndynamicDefineProperties(Elem.prototype, canvasRestMethods, (method) => function () {\r\n  const ctx = this.ctx();\r\n\r\n  if (ctx) {\r\n    ctx[method].apply(ctx, arguments);\r\n  }\r\n\r\n  return this;\r\n});\r\n\r\n/**\r\n * @function toFind\r\n * @private\r\n * @param {Element|Elem|String} elem - Element, selector of Elements or Elem.\r\n * @returns {Elem} Instance of Elem.\r\n */\r\nfunction toFind(elem) {\r\n  if (isElem(elem)) {\r\n    return elem;\r\n  }\r\n\r\n  if (isString(elem)) {\r\n    elem = find(elem);\r\n  }\r\n\r\n  return new Elem(elem);\r\n}\r\n\r\n/**\r\n * @function isElem\r\n * @private\r\n * @param {*} value - Value to check if it's Elem.\r\n * @returns {Boolean} If the value is Elem.\r\n * @description Returns if the value is Elem or not.\r\n */\r\nfunction isElem(value) {\r\n  return value instanceof Elem;\r\n}\r\n\r\n/**\r\n * @function isWindow\r\n * @private\r\n * @param {*} value - Value to check if it's Window.\r\n * @returns {Boolean} If the value is Window.\r\n * @description Returns if the value is Window or not.\r\n */\r\nfunction isWindow(value) {\r\n  return toStringTag(value) === 'Window';\r\n}\r\n\r\n/**\r\n * @function isHTMLDocument\r\n * @private\r\n * @param {*} value - Value to check if it's HTMLDocument.\r\n * @returns {Boolean} If the value is HTMLDocument.\r\n * @description Returns if the value is HTMLDocument or not.\r\n */\r\nfunction isHTMLDocument(value) {\r\n  return toStringTag(value) === 'HTMLDocument';\r\n}\r\n\r\n/**\r\n * @function isDocumentFragment\r\n * @private\r\n * @param {*} value - Value to check if it's a DocumentFragment.\r\n * @returns {Boolean} If the value is a DocumentFragment.\r\n * @description Returns if the value is a DocumentFragment or not.\r\n */\r\nfunction isDocumentFragment(value) {\r\n  return toStringTag(value) === 'DocumentFragment';\r\n}\r\n\r\n/**\r\n * @function isStyleRule\r\n * @private\r\n * @param {*} value - Value to check if it's a style rule.\r\n * @returns {Boolean} If the value is a style rule.\r\n * @description Returns if the value is a style rule or not.\r\n */\r\nfunction isStyleRule(value) {\r\n  return toStringTag(value) === 'CSSStyleRule';\r\n}\r\n\r\n/**\r\n * @function\r\n * @private\r\n * @param {*} value - Value to check if it's Comment or Text.\r\n * @returns {Boolean} If the value is HTMLDocument.\r\n * @description Returns if the value is Comment or Text or not.\r\n */\r\nfunction isCommentOrText(value) {\r\n  const tag = toStringTag(value);\r\n\r\n  return tag === 'Comment' || tag === 'Text';\r\n}\r\n\r\n/**\r\n * @function getElem\r\n * @private\r\n * @param {Elem} elem - Element to check.\r\n * @returns {Element} The argument or a fallback if needed.\r\n */\r\nfunction getElem(elem) {\r\n  return isElement(elem.$[0]) ? elem.$[0] : emptyDiv;\r\n}\r\n\r\n/**\r\n * @function getName\r\n * @private\r\n * @param {Element} [elem] - Element which name is needed to know.\r\n * @returns {String} Element name.\r\n */\r\nfunction getName(elem) {\r\n  return (elem && elem.nodeName && elem.nodeName.toLowerCase()) || '';\r\n}\r\n\r\n/**\r\n * @function addDwayneData\r\n * @private\r\n * @param {Element} elem - Element to add dwayneData to.\r\n * @returns {void}\r\n */\r\nfunction addDwayneData(elem) {\r\n  if (!{}.hasOwnProperty.call(elem, 'dwayneData') && !isWindow(elem)) {\r\n    /**\r\n     * @member Element#dwayneData\r\n     * @type {Object}\r\n     * @protected\r\n     * @property {String} previousDisplay - Parameter used for hiding/showing elements.\r\n     * @property {Object.<String, Super>} removeListeners - Parameter used for remove event listeners.\r\n     * @property {CanvasRenderingContext2D} [ctx] - Canvas rendering context.\r\n     * @property {Arr} validators - Validators assigned to element.\r\n     * @description D data.\r\n     */\r\n    Object.defineProperty(elem, 'dwayneData', {\r\n      value: {\r\n        previousDisplay: '',\r\n        listeners: {},\r\n        ctx: getName(elem) === 'canvas' && elem.getContext('2d'),\r\n        validators: new Arr([])\r\n      }\r\n    });\r\n  } else if (isWindow(elem) && !windowsDwayneData.some(({ element }) => element === elem)) {\r\n    windowsDwayneData.push({\r\n      element: elem,\r\n      listeners: {}\r\n    });\r\n  }\r\n}\r\n\r\nconstructors[2].push({\r\n  check: (elem) => (\r\n    isElement(elem) ||\r\n    isWindow(elem) ||\r\n    isHTMLDocument(elem) ||\r\n    isCommentOrText(elem) ||\r\n    isDocumentFragment(elem) ||\r\n    /^(HTMLCollection|NodeList)$/.test(toStringTag(elem))\r\n  ),\r\n  cls: Elem\r\n});\r\n\r\n/**\r\n * @function find\r\n * @public\r\n * @param {String} selector - Selector to find.\r\n * @param {Element} [base = document] - Base to find in.\r\n * @returns {Elem} New instance of Elem.\r\n * @description Synonym for\r\n * [Document#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Document/querySelectorAll}.\r\n */\r\nfunction find(selector, base = nativeDocument) {\r\n  return new Elem(\r\n    isElement(base) || isHTMLDocument(base)\r\n      ? base.querySelectorAll(String(selector))\r\n      : []\r\n  );\r\n}\r\n\r\n/**\r\n * @function parseHTML\r\n * @public\r\n * @param {String} html - HTML to parse.\r\n * @param {Boolean} [collapseWhiteSpace = false] - If the whitespace should be\r\n * collapsed during the parsing.\r\n * @returns {Elem} New instance of Elem.\r\n * @description Parses HTML and returns a wrap of #document-fragment containing the contents.\r\n *\r\n * @example\r\n * parseHTML('<div>123</div>'); // Elem\r\n */\r\nfunction parseHTML(html, collapseWhiteSpace) {\r\n  const json = markupToJSON(html, collapseWhiteSpace);\r\n  const template = doc.template();\r\n  const elem = new Elem(template.$[0].content);\r\n\r\n  json.forEach(function forEachNode(node) {\r\n    const {\r\n      name,\r\n      attrs,\r\n      value,\r\n      parent,\r\n      children\r\n    } = node;\r\n\r\n    const parentNode = parent.elem || elem;\r\n    const element = parentNode.create(name);\r\n\r\n    node.elem = element;\r\n\r\n    if (value) {\r\n      element.text(value);\r\n    }\r\n\r\n    if (attrs) {\r\n      element.attr(attrs);\r\n    }\r\n\r\n    if (name === 'template') {\r\n      node.elem = new Elem(element.prop('content'));\r\n    }\r\n\r\n    if (children) {\r\n      children.forEach(forEachNode);\r\n    }\r\n  });\r\n\r\n  return new Elem(elem);\r\n}\r\n\r\n/**\r\n * @function px\r\n * @public\r\n * @param {String|Number} size - String containing pixels value or a number.\r\n * @returns {Number} Number of pixels.\r\n * @description Function for parsing pixel strings.\r\n *\r\n * @example\r\n * px('0px');  // 0\r\n * px('42px'); // 42\r\n */\r\nfunction px(size) {\r\n  return Number(String(size).replace(/px$/, ''));\r\n}\r\n\r\nexport { Elem, win, doc, html, body, head, find, parseHTML, px };\r\n","export function registerDBlock(Block) {\r\n  class DBlock extends Block {\r\n    static template = '<d-elements value=\"{elems}\" />';\r\n\r\n    elems = null;\r\n\r\n    afterConstruct() {\r\n      const { children } = this.$$.parent;\r\n      const { name } = this.args;\r\n      let found;\r\n\r\n      if (name) {\r\n        found = children.find(({ name: nodeName }) => nodeName === `d-block-${ name }`);\r\n\r\n        if (found && found.value.children.length) {\r\n          this.elems = found.value.children;\r\n        }\r\n      } else {\r\n        this.elems = children;\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-block',\r\n    value: DBlock\r\n  };\r\n}\r\n","import { Arr } from '../Arr';\r\nimport { Elem } from '../Elem';\r\nimport { Super } from '../Super';\r\nimport { assign } from '../helpers';\r\n\r\nexport function registerDEach(Block, createBlock) {\r\n  class DEach extends Block {\r\n    constructor(opts) {\r\n      super(opts);\r\n\r\n      const {\r\n        args: {\r\n          item: itemName = '$item',\r\n          index: indexName = '$index'\r\n        }\r\n      } = this;\r\n\r\n      assign(this.$$, {\r\n        uids: new Super({}),\r\n        items: new Arr([]),\r\n        UID: String(this.args.uid),\r\n        itemName,\r\n        indexName\r\n      });\r\n    }\r\n\r\n    afterRender() {\r\n      this.constructValues(this.args.set);\r\n      this.watchArgs('set', (set) => {\r\n        this.constructValues(set);\r\n      });\r\n    }\r\n\r\n    constructValues(set) {\r\n      const {\r\n        elems: {\r\n          start,\r\n          parent: parentElem\r\n        },\r\n        uids,\r\n        parent,\r\n        scope,\r\n        itemName,\r\n        indexName,\r\n        UID\r\n      } = this.$$;\r\n      const { children } = this;\r\n      const $uids = uids.$;\r\n      const newKeys = {};\r\n      const newUIDs = {};\r\n\r\n      new Super(set).forEach((item, index) => {\r\n        scope[itemName] = item;\r\n        scope[indexName] = index;\r\n\r\n        const uid = parent.$$.evaluate(String(UID), null, null, false, false, this);\r\n\r\n        newKeys[uid] = newKeys[uid] || {};\r\n        newKeys[uid][index] = true;\r\n        newUIDs[index] = uid;\r\n      });\r\n\r\n      scope[itemName] = null;\r\n      scope[indexName] = null;\r\n\r\n      uids.forEach((items, uid) => {\r\n        if (!newKeys[uid]) {\r\n          items.forEach((Item) => {\r\n            Item.remove();\r\n          });\r\n\r\n          return;\r\n        }\r\n\r\n        items.splice(Object.keys(newKeys[uid]).length).forEach((Item) => {\r\n          Item.remove();\r\n        });\r\n      });\r\n\r\n      let after = start;\r\n\r\n      new Super(set).forEach((item, index) => {\r\n        const uid = newUIDs[index];\r\n        let block;\r\n\r\n        if ($uids[uid] && $uids[uid].length) {\r\n          block = newKeys[uid][index] = uids.$[uid].shift();\r\n          block.$$.scope[indexName] = index;\r\n          block.$$.scope[itemName] = item;\r\n        } else {\r\n          block = newKeys[uid][index] = createBlock({\r\n            node: {\r\n              itemName,\r\n              indexName,\r\n              item,\r\n              index,\r\n              name: '#d-item',\r\n              block: parent,\r\n              children\r\n            },\r\n            after,\r\n            parent: parentElem,\r\n            parentBlock: this,\r\n            parentScope: parent\r\n          });\r\n        }\r\n\r\n        const {\r\n          start,\r\n          end\r\n        } = block.$$.elems;\r\n\r\n        if (start.prev().$[0] !== after.$[0]) {\r\n          const { content } = block.$$.elems;\r\n\r\n          new Elem([\r\n            start,\r\n            content,\r\n            end\r\n          ]).insertAfter(after);\r\n        }\r\n\r\n        after = end;\r\n      });\r\n\r\n      this.$$.uids = new Super(newKeys).map((items) => (\r\n        new Super(items).values()\r\n      ));\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-each',\r\n    value: DEach\r\n  };\r\n}\r\n","import { Arr } from '../Arr';\r\nimport { Elem } from '../Elem';\r\n\r\nexport function registerDElements(Block, createBlock) {\r\n  class DElements extends Block {\r\n    afterConstruct() {\r\n      this.watchArgs('value', (value) => {\r\n        const {\r\n          children,\r\n          mixins,\r\n          watchersToRemove,\r\n          elems: {\r\n            start,\r\n            content,\r\n            parent\r\n          }\r\n        } = this.$$;\r\n        let after = start;\r\n\r\n        children.forEach((child) => {\r\n          child.remove(true);\r\n        });\r\n        mixins.forEach((mixin) => {\r\n          mixin.remove(true);\r\n        });\r\n        content.remove();\r\n\r\n        this.$$.children = new Arr([]);\r\n        this.$$.mixins = new Arr([]);\r\n        this.$$.watchersToRemove = watchersToRemove.filter(({ watchers, watcher, forDElements }) => {\r\n          if (forDElements) {\r\n            return true;\r\n          }\r\n\r\n          const index = watchers.indexOf(watcher);\r\n\r\n          if (index !== -1) {\r\n            watchers.splice(index, 1);\r\n          }\r\n        });\r\n\r\n        const newContent = new Elem();\r\n\r\n        new Arr(value || []).forEach((child) => {\r\n          const block = createBlock({\r\n            node: child,\r\n            after,\r\n            parent,\r\n            parentBlock: this,\r\n            parentScope: this\r\n          });\r\n\r\n          if (block instanceof Block) {\r\n            const { elems } = block.$$;\r\n\r\n            after = elems.end;\r\n\r\n            newContent.add(elems.start, elems.content, elems.end);\r\n          } else {\r\n            after = block;\r\n\r\n            newContent.add(block);\r\n          }\r\n        });\r\n\r\n        this.$$.elems.content = newContent;\r\n      });\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-elements',\r\n    value: DElements\r\n  };\r\n}\r\n","export function registerDIf(Block) {\r\n  class DIf extends Block {\r\n    static template = '<d-elements value=\"{elems}\"/>';\r\n\r\n    index = Infinity;\r\n    elems = null;\r\n    values = this.children.map((child, i) => {\r\n      const {\r\n        name,\r\n        attrs,\r\n        children\r\n      } = child;\r\n      const cond = this.evaluateAndWatch(name === 'd-else' ? '{true}' : attrs.if || '{true}', (newValue) => {\r\n        if (!!newValue === this.values.$[i]) {\r\n          return;\r\n        }\r\n\r\n        this.values.$[i] = !!newValue;\r\n\r\n        if (i > this.index) {\r\n          return;\r\n        }\r\n\r\n        if (i < this.index) {\r\n          this.index = i;\r\n          this.elems = children;\r\n\r\n          return;\r\n        }\r\n\r\n        const found = this.values.find(Boolean);\r\n\r\n        if (found) {\r\n          this.index = found.key;\r\n          this.elems = this.children.$[found.key].children;\r\n        } else {\r\n          this.index = Infinity;\r\n          this.elems = null;\r\n        }\r\n      });\r\n\r\n      if (cond && this.index === Infinity) {\r\n        this.index = i;\r\n        this.elems = children;\r\n      }\r\n\r\n      return cond;\r\n    });\r\n  }\r\n\r\n  return {\r\n    name: 'd-if',\r\n    value: DIf\r\n  };\r\n}\r\n","export function registerDItem(Block) {\r\n  class DItem extends Block {\r\n    static template = '<d-elements value=\"{children}\"/>';\r\n  }\r\n\r\n  return {\r\n    name: '#d-item',\r\n    value: DItem\r\n  };\r\n}\r\n","import { Arr } from '../Arr';\r\nimport { Super } from '../Super';\r\n\r\nexport function registerDSwitch(Block) {\r\n  class DSwitch extends Block {\r\n    static template = '<d-elements value=\"{elems}\"/>';\r\n\r\n    index = Infinity;\r\n    elems = null;\r\n\r\n    constructor(opts) {\r\n      super(opts);\r\n\r\n      const {\r\n        args,\r\n        args: { value }\r\n      } = this;\r\n      let wasDefault;\r\n\r\n      this.values = this.children.object((values, child, i) => {\r\n        const {\r\n          name,\r\n          attrs,\r\n          children\r\n        } = child;\r\n\r\n        if (wasDefault) {\r\n          return;\r\n        }\r\n\r\n        if (name !== 'd-case' && name !== 'd-default') {\r\n          return;\r\n        }\r\n\r\n        if (name === 'd-default') {\r\n          wasDefault = true;\r\n        }\r\n\r\n        let val;\r\n\r\n        if (name === 'd-default') {\r\n          val = args.value;\r\n        } else {\r\n          val = this.evaluateAndWatch(attrs.if || '{undefined}', (newValue) => {\r\n            if (this.equals(this.values.$[i].value, newValue)) {\r\n              return;\r\n            }\r\n\r\n            this.values.$[i].value = newValue;\r\n\r\n            if (i > this.index) {\r\n              return;\r\n            }\r\n\r\n            if (i < this.index) {\r\n              this.index = i;\r\n              this.elems = children;\r\n\r\n              return;\r\n            }\r\n\r\n            const found = this.values.find(({ value }) => (\r\n              this.equals(value, args.value)\r\n            ));\r\n\r\n            if (found) {\r\n              this.index = found.key;\r\n              this.elems = found.value.children;\r\n            } else {\r\n              this.index = Infinity;\r\n              this.elems = null;\r\n            }\r\n          });\r\n        }\r\n\r\n        if (this.equals(val, value) && this.index === Infinity) {\r\n          this.index = i;\r\n          this.elems = children;\r\n        }\r\n\r\n        values.push({\r\n          name,\r\n          children,\r\n          value: val\r\n        });\r\n      }, new Arr([]));\r\n    }\r\n\r\n    afterConstruct() {\r\n      this.watchArgs('value', (newValue) => {\r\n        this.index = Infinity;\r\n        this.values.forEach(({ name, value, children }, i) => {\r\n          const val = name === 'd-default'\r\n            ? newValue\r\n            : value;\r\n\r\n          if (this.equals(val, newValue) && this.index === Infinity) {\r\n            this.index = i;\r\n            this.elems = children;\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    equals(value1, value2) {\r\n      return new Super(value1).equals(value2);\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-switch',\r\n    value: DSwitch\r\n  };\r\n}\r\n","import { isNil } from '../helpers';\r\n\r\nexport function registerDText(Block) {\r\n  class DText extends Block {\r\n    static template = '<d-elements value=\"{[{ name: \\'#text\\', value: text }]}\"/>';\r\n\r\n    text = '';\r\n\r\n    afterConstruct() {\r\n      this.text = isNil(this.args.value) ? '' : this.args.value;\r\n\r\n      this.watchArgs('value', (newValue) => {\r\n        this.text = isNil(newValue) ? '' : newValue;\r\n      });\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-text',\r\n    value: DText\r\n  };\r\n}\r\n","import { Super } from '../Super';\r\n\r\nexport function registerDAttr(Mixin) {\r\n  class DAttr extends Mixin {\r\n    afterUpdate(newValue, oldValue) {\r\n      const { elem } = this;\r\n\r\n      newValue = new Super(newValue).$;\r\n\r\n      new Super(oldValue).forEach((value, prop) => {\r\n        if (!newValue[prop]) {\r\n          elem.removeAttr(prop);\r\n        }\r\n      });\r\n      elem.attr(newValue);\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-attr',\r\n    value: DAttr\r\n  };\r\n}\r\n\r\n","import { isFunction } from '../helpers';\r\n\r\nexport function registerDBind(Mixin) {\r\n  class DBind extends Mixin {\r\n    afterUpdate(value) {\r\n      if (this.off) {\r\n        this.off();\r\n      }\r\n\r\n      if (!isFunction(value)) {\r\n        return;\r\n      }\r\n\r\n      this.off = this.elem.on(this.match[0], value);\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-bind',\r\n    value: DBind\r\n  };\r\n}\r\n","import { Super } from '../Super';\nimport { isArray, isObject, isString, iterate } from '../helpers';\n\nexport function registerDClass(Mixin) {\n  class DClass extends Mixin {\n    afterUpdate(newValue, oldValue) {\n      const { elem } = this;\n\n      newValue = new Super(newValue).$;\n      oldValue = new Super(oldValue).$;\n\n      if (isString(newValue)) {\n        newValue = newValue.split(/\\s+/);\n      }\n\n      if (isString(oldValue)) {\n        newValue = newValue.split(/\\s+/);\n      }\n\n      if (isArray(newValue)) {\n        iterate(oldValue, (cls) => {\n          if (isString(cls) && !newValue[cls]) {\n            elem.removeClass(cls);\n          }\n        });\n        iterate(newValue, (cls) => {\n          if (isString(cls)) {\n            elem.addClass(cls);\n          }\n        });\n      } else if (isObject(newValue)) {\n        iterate(oldValue, (val, cls) => {\n          if (val && !newValue[cls]) {\n            elem.removeClass(cls);\n          }\n        });\n        iterate(newValue, (val, cls) => {\n          if (val) {\n            elem.addClass(cls);\n          }\n        });\n      } else if (isArray(oldValue)) {\n        iterate(oldValue, (cls) => {\n          if (isString(cls)) {\n            elem.removeClass(cls);\n          }\n        });\n      } else if (isObject(oldValue)) {\n        iterate(oldValue, (val, cls) => {\n          if (val) {\n            elem.removeClass(cls);\n          }\n        });\n      }\n    }\n  }\n\n  return {\n    name: 'd-class',\n    value: DClass\n  };\n}\n","import { isString } from '../helpers';\r\n\r\nexport function registerDElem(Mixin) {\r\n  class DElem extends Mixin {\r\n    afterUpdate(newValue, oldValue) {\r\n      const { parent } = this.$$;\r\n\r\n      if (newValue !== oldValue && isString(oldValue)) {\r\n        delete parent[oldValue];\r\n      }\r\n\r\n      if (isString(newValue)) {\r\n        parent[newValue] = this.elem;\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-elem',\r\n    value: DElem\r\n  };\r\n}\r\n","export function registerDHide(Mixin) {\r\n  class DHide extends Mixin {\r\n    afterUpdate(value) {\r\n      const { elem } = this;\r\n\r\n      if (value) {\r\n        elem.hide();\r\n      } else {\r\n        elem.show();\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-hide',\r\n    value: DHide\r\n  };\r\n}\r\n","export function registerDOn(Mixin) {\r\n  class DOn extends Mixin {\r\n    static evaluate = false;\r\n\r\n    constructor(opts) {\r\n      super(opts);\r\n\r\n      this.elem.on(this.match[0], () => {\r\n        this.evaluateOnce();\r\n      });\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-on',\r\n    value: DOn\r\n  };\r\n}\r\n","export function registerDShow(Mixin) {\r\n  class DShow extends Mixin {\r\n    afterUpdate(value) {\r\n      const { elem } = this;\r\n\r\n      if (value) {\r\n        elem.show();\r\n      } else {\r\n        elem.hide();\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-show',\r\n    value: DShow\r\n  };\r\n}\r\n","import { Super } from '../Super';\r\n\r\nexport function registerDStyle(Mixin) {\r\n  class DStyle extends Mixin {\r\n    afterUpdate(newValue, oldValue) {\r\n      const { elem } = this;\r\n\r\n      newValue = new Super(newValue).$;\r\n\r\n      new Super(oldValue).forEach((value, prop) => {\r\n        if (!newValue[prop]) {\r\n          elem.removeCSS(prop);\r\n        }\r\n      });\r\n      elem.css(newValue);\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-style',\r\n    value: DStyle\r\n  };\r\n}\r\n","import { isNil } from '../helpers';\r\n\r\nexport function registerDText(Mixin) {\r\n  class DText extends Mixin {\r\n    afterUpdate(value) {\r\n      this.elem.text(\r\n        isNil(value)\r\n          ? ''\r\n          : `${ value }`\r\n      );\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-text',\r\n    value: DText\r\n  };\r\n}\r\n","import { isFunction } from '../helpers';\r\n\r\nexport function registerDValidate(Mixin) {\r\n  class DValidate extends Mixin {\r\n    static evaluate = false;\r\n\r\n    constructor(opts) {\r\n      super(opts);\r\n\r\n      const { elem } = this;\r\n      const validator = this.evaluateOnce();\r\n\r\n      if (isFunction(validator)) {\r\n        elem.validate(validator);\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-validate',\r\n    value: DValidate\r\n  };\r\n}\r\n","import { Arr } from '../Arr';\nimport { switcher } from '../Switcher';\nimport { isArray, isNil } from '../helpers';\n\nconst propSwitcher = switcher('strictEquals', (type, elem) => (\n  elem.hasAttr('contenteditable') || elem.hasAttr('contentEditable')\n    ? 'text'\n    : 'value'\n))\n  .case('input', (type) => {\n    if (type === 'file') {\n      return 'files';\n    }\n\n    return type === 'radio' || type === 'checkbox'\n      ? 'checked'\n      : 'value';\n  });\nconst setValueSwitcher = switcher('strictEquals', (value) => value)\n  .case('input', (value, type, inputValue) => {\n    if (type !== 'radio' && type !== 'checkbox') {\n      return value;\n    }\n\n    if (type === 'radio') {\n      return value === inputValue;\n    }\n\n    return value.indexOf(inputValue) !== -1;\n  });\nconst getValueSwitcher = switcher('strictEquals', (value) => value)\n  .case('input', (value, type, inputValue, values) => {\n    if (type !== 'radio' && type !== 'checkbox') {\n      return value;\n    }\n\n    if (type === 'radio') {\n      return value\n        ? inputValue\n        : null;\n    }\n\n    if (value) {\n      if (values) {\n        return values.indexOf(inputValue) === -1\n          ? new Arr(values).concat(inputValue).$\n          : values;\n      }\n\n      return [inputValue];\n    }\n\n    if (!isArray(values)) {\n      return [];\n    }\n\n    const index = values.indexOf(inputValue);\n\n    if (index !== -1) {\n      return [\n        ...new Arr(values).slice(0, index).$,\n        ...new Arr(values).slice(index + 1).$\n      ];\n    }\n\n    return values;\n  });\nconst listenerSwitcher = switcher('strictEquals', 'input')\n  .case('select', 'change')\n  .case('input', (type) => (\n    type === 'radio'\n    || type === 'checkbox'\n    || type === 'color'\n    || type === 'file'\n      ? 'change'\n      : 'input'\n  ));\n\nexport function registerDValue(Mixin) {\n  class DValue extends Mixin {\n    static evaluate = false;\n\n    constructor(opts) {\n      super(opts);\n\n      const {\n        $$: {\n          _value,\n          parent\n        },\n        elem\n      } = this;\n      const type = elem.prop('type');\n\n      this.prop = propSwitcher(elem.name, [type, elem]);\n      this.type = type;\n\n      const initialScopeValue = parent.$$.evaluate(`{${ _value }}`, (newValue) => {\n        this.setProp(newValue);\n      }, this);\n      const initialElemValue = this.getProp(initialScopeValue);\n\n      if (isNil(initialScopeValue) || type === 'checkbox') {\n        parent[_value] = initialElemValue;\n      } else {\n        this.setProp(initialScopeValue);\n      }\n\n      elem.on(listenerSwitcher(elem.name, [type]), (e) => {\n        if (e.target === elem.$[0]) {\n          parent[_value] = this.getProp(parent[_value]);\n        }\n      });\n    }\n\n    setProp(value) {\n      const {\n        elem,\n        prop,\n        type\n      } = this;\n\n      if (prop === 'text') {\n        elem.text(value);\n      } else {\n        elem.prop(prop, setValueSwitcher(elem.name, [value, type, elem.$[0].value]));\n      }\n    }\n\n    getProp(values) {\n      const {\n        elem,\n        prop,\n        type\n      } = this;\n\n      return prop === 'text'\n        ? elem.text()\n        : getValueSwitcher(elem.name, [elem.prop(prop), type, elem.$[0].value, values]);\n    }\n  }\n\n  return {\n    name: 'd-value',\n    value: DValue\n  };\n}\n","/**\r\n * @module Block\r\n * @private\r\n * @mixin\r\n * @description Exports Block class.\r\n */\r\n\r\nimport { Arr } from './Arr';\r\nimport { find, doc, Elem } from './Elem';\r\nimport { Super } from './Super';\r\nimport {\r\n  iterate, defineProperties, validate,\r\n  isFunction, isNil, isUndefined\r\n} from './helpers';\r\nimport * as Blocks from './blocks';\r\nimport * as Mixins from './mixins';\r\nimport { htmlAllowedTagSymbols, htmlAllowedAttrSymbols } from './constants';\r\nimport markupToJSON from './helpers/markupToJSON';\r\n\r\n/**\r\n * @callback Watcher\r\n * @param {*} newValue - New value.\r\n * @param {*} oldValue - Old value.\r\n */\r\n\r\n/**\r\n * @callback Wrapper\r\n * @param {Block} Block class to wrap.\r\n * @returns {Block} New Block class.\r\n */\r\n\r\nconst blocks = Object.create(null);\r\nconst mixins = Object.create(null);\r\nconst isPrototypeOf = {}.isPrototypeOf;\r\nconst tagName = new RegExp(`^${ htmlAllowedTagSymbols }$`, 'i');\r\nconst attrName = new RegExp(`^${ htmlAllowedAttrSymbols }$`);\r\nconst expressionRegExp = /^\\{[\\s\\S]+\\}$/;\r\nconst { document } = global;\r\nconst svgNS = 'http://www.w3.org/2000/svg';\r\nlet onEvalError;\r\nlet evalMode;\r\nlet getting;\r\nlet changed;\r\n\r\n/**\r\n * @class Block\r\n * @public\r\n * @param {Object} opts - Element options.\r\n * @returns {Block} Instance of Block.\r\n * @description Class for dynamic templating.\r\n *\r\n * @example\r\n * import { D, Block, initApp, registerBlock } from 'dwayne';\r\n *\r\n * class App extends Block {\r\n *   static template = '<Hello text=\"{text}\"/>';\r\n *\r\n *   constructor(args, children) {\r\n *     super(args, children);\r\n *\r\n *     this.text = 'world (0)';\r\n *     this.times = 0;\r\n *\r\n *     this.setInterval();\r\n *   }\r\n *\r\n *   setInterval() {\r\n *     D(1000).interval(() => {\r\n *       this.text = `world (${ ++this.times })`;\r\n *     });\r\n *   }\r\n * }\r\n *\r\n * class Hello extends Block {\r\n *   static template = 'Hello, <d-text value=\"{args.text}\"/>!';\r\n * }\r\n *\r\n * Block.App = App;\r\n * Block.Hello = Hello;\r\n *\r\n * initApp();\r\n */\r\nclass Block {\r\n  /**\r\n   * @member {Boolean} [Block.collapseWhiteSpace = true]\r\n   * @type {Boolean}\r\n   * @public\r\n   * @description If the whitespace between html elements and\r\n   * in the start and the end inside the tag should be omitted during parsing.\r\n   */\r\n  static collapseWhiteSpace = true;\r\n\r\n  /**\r\n   * @member {Object} [Block.defaultArgs = true]\r\n   * @type {Object}\r\n   * @public\r\n   * @description Provide default args if that args may not appear in the args\r\n   * (using \"d-rest\") but you use them in your template and want them to be watched.\r\n   */\r\n  static defaultArgs = {};\r\n\r\n  static get onEvalError() {\r\n    return onEvalError;\r\n  }\r\n\r\n  static set onEvalError(listener) {\r\n    if (isFunction(listener)) {\r\n      onEvalError = listener;\r\n    } else {\r\n      onEvalError = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method Block.wrap\r\n   * @public\r\n   * @param {Wrapper} func - Function that returns wrapped block.\r\n   * @returns {Block} New block.\r\n   * @description Method for wrapping blocks into another blocks.\r\n   * It is considered best practice to just extends the old block with a new one.\r\n   *\r\n   * @example\r\n   * class MyBlock extends Block {\r\n   *   static template = '<div>123</div>';\r\n   * }\r\n   *\r\n   * MyBlock.wrap((Block) => {\r\n   *   return class extends Block {\r\n   *     static template = `<section class=\"wrapper\">${ Block.template }</section>`;\r\n   *\r\n   *     constructor() {\r\n   *       this.additionalVar = 'additional';\r\n   *     }\r\n   *   };\r\n   * });\r\n   */\r\n  static wrap(func) {\r\n    validate([func], ['function']);\r\n\r\n    return func(this);\r\n  }\r\n\r\n  constructor(opts) {\r\n    const {\r\n      name,\r\n      args: originalArgs,\r\n      children,\r\n      block,\r\n      parent,\r\n      parentBlock,\r\n      parentScope\r\n    } = opts;\r\n    const watchersToRemove = new Arr([]);\r\n\r\n    Object.defineProperties(this, {\r\n      /**\r\n       * @member {Block} Block#$\r\n       * @type {Block}\r\n       * @public\r\n       * @description This.\r\n       */\r\n      $: {\r\n        value: this\r\n      },\r\n\r\n      /**\r\n       * @member {Object} Block#$$\r\n       * @type {Object}\r\n       * @protected\r\n       * @property {Object} args - Private args scope.\r\n       * @property {Arr} children - Child blocks.\r\n       * @property {Arr} mixins - Child mixins.\r\n       * @property {Object} elems - Elements connected to the block.\r\n       * @property {Elem} elems.parent - Parent element.\r\n       * @property {Elem} elems.start - Start comment block.\r\n       * @property {Elem} elems.end - End comment block.\r\n       * @property {Elem} elems.content - Content elements.\r\n       * @property {Function} evaluate - Evaluate function.\r\n       * @property {Object} global - Private global scope.\r\n       * @property {Object} locals - Private locals scope.\r\n       * @property {Arr} watchersToRemove - Watchers to remove before removing element.\r\n       */\r\n      $$: {\r\n        value: {\r\n          name,\r\n          parent: parentScope,\r\n          parentBlock,\r\n          children: new Arr([]),\r\n          mixins: new Arr([]),\r\n          Block: block,\r\n          elems: {\r\n            start: doc.createComment(` ${ name }: start `),\r\n            end: doc.createComment(` ${ name }: end `),\r\n            content: new Elem(),\r\n            parent\r\n          },\r\n          watchersToRemove,\r\n          evaluate: (expression, onChange, instance, forDElements, forDItem, forDEach) => {\r\n            if (!expressionRegExp.test(expression)) {\r\n              return expression;\r\n            }\r\n\r\n            forDElements = !!forDElements;\r\n            forDItem = !!forDItem;\r\n            expression = expression.replace(/^\\{|\\}$/g, '');\r\n\r\n            const store = (name === '#d-item' && !forDItem) || forDEach\r\n              ? (forDEach || this).$$.scope\r\n              : this;\r\n\r\n            /* eslint no-new-func: 0 */\r\n            const { watchersToRemove } = instance ? instance.$$ : {};\r\n            const func = new Function(\r\n              '',\r\n              'with(document.DwayneStore){$$.expr=eval(\"$$.expr=\"+$$.expr);return $$.expr}'\r\n            );\r\n\r\n            return evaluate.call(this);\r\n\r\n            function evaluate() {\r\n              let result;\r\n\r\n              if (onChange) {\r\n                evalMode = true;\r\n                getting = new Arr([]);\r\n              }\r\n\r\n              store.$$.expr = expression;\r\n              document.DwayneStore = store;\r\n\r\n              try {\r\n                result = func();\r\n              } catch (err) {\r\n                if (onEvalError) {\r\n                  onEvalError(err);\r\n                }\r\n              }\r\n\r\n              if (onChange) {\r\n                const localWatchers = new Arr([]);\r\n\r\n                getting.forEach((watchers) => {\r\n                  const watcher = () => {\r\n                    const newResult = evaluate.call(this);\r\n\r\n                    if (newResult !== result) {\r\n                      onChange(newResult, result);\r\n                    }\r\n                  };\r\n                  const watcherBlock = {\r\n                    forDElements,\r\n                    watcher,\r\n                    watchers\r\n                  };\r\n\r\n                  watcher.onRemove = () => {\r\n                    localWatchers.forEach((watcherBlock) => {\r\n                      const {\r\n                        watcher,\r\n                        watchers\r\n                      } = watcherBlock;\r\n                      const index1 = watchersToRemove.indexOf(watcherBlock);\r\n                      const index2 = watchers.indexOf(watcher);\r\n\r\n                      if (index1 !== -1) {\r\n                        watchersToRemove.splice(index1, 1);\r\n                      }\r\n\r\n                      if (index2 !== -1) {\r\n                        watchers.splice(index2, 1);\r\n                      }\r\n                    });\r\n                  };\r\n\r\n                  localWatchers.push(watcherBlock);\r\n                  watchersToRemove.push(watcherBlock);\r\n                  watchers.push(watcher);\r\n                });\r\n\r\n                evalMode = false;\r\n                getting = new Arr([]);\r\n              }\r\n\r\n              store.$$.expr = null;\r\n              document.DwayneStore = null;\r\n\r\n              return result;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    const args = new Super(originalArgs).map((value, arg) => {\r\n      if (name === 'd-each' && (\r\n        arg === 'item'\r\n        || arg === 'index'\r\n        || arg === 'uid'\r\n      )) {\r\n        return value;\r\n      }\r\n\r\n      const forDElements = name === 'd-elements' && arg === 'value';\r\n\r\n      return parentScope.$$.evaluate(value, (value) => {\r\n        this.args[arg] = value;\r\n      }, this, forDElements, forDElements && parentBlock.$$.name === '#d-item');\r\n    }).$;\r\n\r\n    this.args = args;\r\n    this.children = children || new Arr([]);\r\n    this.global = Object.create(\r\n      parentScope\r\n        ? Object.create(parentScope.global)\r\n        : null\r\n    );\r\n\r\n    this.$$.elems.start.$[0].DwayneBlock = this;\r\n    this.$$.elems.end.$[0].DwayneBlock = this;\r\n\r\n    if (parentBlock) {\r\n      parentBlock.$$.children.push(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method Block#afterConstruct\r\n   * @public\r\n   * @description Is called after block construction (including all scopes)\r\n   * but before rendering the block and its children.\r\n   */\r\n  afterConstruct() {}\r\n\r\n  /**\r\n   * @method Block#afterRender\r\n   * @public\r\n   * @description Is called after block has been rendered.\r\n   */\r\n  afterRender() {}\r\n\r\n  /**\r\n   * @method Block#afterRender\r\n   * @public\r\n   * @description Is called before the block removal.\r\n   */\r\n  beforeRemove() {}\r\n\r\n  evaluateAndWatch(expression, callback) {\r\n    return this.$$.parent.$$.evaluate(expression, callback, this);\r\n  }\r\n\r\n  evaluateOnce(expression) {\r\n    return this.$$.parent.$$.evaluate(expression);\r\n  }\r\n\r\n  /**\r\n   * @method Block#remove\r\n   * @public\r\n   * @description Method fot forcing the block to be removed. Calls\r\n   * remove method for all of its child blocks and calls beforeRemove function.\r\n   */\r\n  remove(isParentSignal) {\r\n    const {\r\n      parentBlock,\r\n      children,\r\n      mixins,\r\n      elems: {\r\n        start,\r\n        content,\r\n        end\r\n      },\r\n      watchersToRemove\r\n    } = this.$$;\r\n\r\n    removeWatchers(watchersToRemove);\r\n\r\n    children.forEach((child) => {\r\n      child.remove(true);\r\n    });\r\n\r\n    mixins.forEach((mixin) => {\r\n      mixin.remove(true);\r\n    });\r\n\r\n    try {\r\n      this.beforeRemove();\r\n    } catch (err) {\r\n      console.error('Uncaught error in beforeRemove:', err);\r\n    }\r\n\r\n    if (!isParentSignal && parentBlock) {\r\n      const index = parentBlock.$$.children.indexOf(this);\r\n\r\n      if (index !== -1) {\r\n        parentBlock.$$.children.splice(index, 1);\r\n      }\r\n    }\r\n\r\n    new Elem([\r\n      start,\r\n      content,\r\n      end\r\n    ]).remove();\r\n  }\r\n\r\n  /**\r\n   * @method Block#watch\r\n   * @public\r\n   * @param {...String} [args] - Vars to watch (args, global or local).\r\n   * @param {Watcher} watcher - Called when watched vars are changed.\r\n   * @description Method for watching for vars. If no vars passed in arguments\r\n   * all vars are to be watched. Otherwise specified vars will be watched.\r\n   * Watchers should not be put inside the constructor. It is considered best\r\n   * practice to do it inside the {@link Block#afterConstruct} method.\r\n   * Note that these expressions (vars, i.e. \"args.arg\") are not to be\r\n   * evaluated so you cannot put there things like \"a[b]\" or any js code,\r\n   * only expressions like \"a\", \"b\", \"args.a\", \"args.b\" and \"global.a\", \"global.b\".\r\n   *\r\n   * @example\r\n   * class MyBlock extends Block {\r\n   *   static template = '<div />';\r\n   *\r\n   *   afterConstruct() {\r\n   *     this.watch('a', () => {});\r\n   *     this.watch('args.a', 'global.r', () => {});\r\n   *     this.watch(() => {});\r\n   *   }\r\n   * }\r\n   */\r\n  watch() {\r\n    const watcher = arguments[arguments.length - 1];\r\n\r\n    if (!isFunction(watcher)) {\r\n      return;\r\n    }\r\n\r\n    if (arguments.length === 1) {\r\n      for (const global in this.$$.global) {\r\n        /* eslint guard-for-in: 0 */\r\n        this.$$.global[global].watchers.perm.push(watcher);\r\n      }\r\n\r\n      iterate(this.$$.args, ({ watchers }) => {\r\n        watchers.perm.push(watcher);\r\n      });\r\n\r\n      return iterate(this.$$.locals, ({ watchers }) => {\r\n        watchers.perm.push(watcher);\r\n      });\r\n    }\r\n\r\n    iterate(arguments, (variable) => {\r\n      if (variable === watcher) {\r\n        return;\r\n      }\r\n\r\n      variable = `${ variable }`;\r\n\r\n      if (/^args\\./.test(variable)) {\r\n        variable = variable.replace(/^args\\./, '');\r\n\r\n        if (!this.$$.args[variable]) {\r\n          return;\r\n        }\r\n\r\n        this.$$.args[variable].watchers.perm.push(watcher);\r\n\r\n        return;\r\n      }\r\n\r\n      if (/^global\\./.test(variable)) {\r\n        variable = variable.replace(/^global\\./, '');\r\n\r\n        if (!this.$$.global[variable]) {\r\n          return;\r\n        }\r\n\r\n        this.$$.global[variable].watchers.perm.push(watcher);\r\n\r\n        return;\r\n      }\r\n\r\n      if (!this.$$.locals[variable]) {\r\n        return;\r\n      }\r\n\r\n      this.$$.locals[variable].watchers.perm.push(watcher);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Block#watchArgs\r\n   * @public\r\n   * @param {...String} [args] - Args to watch.\r\n   * @param {Watcher} watcher - Called when watched args are changed.\r\n   * @description Method for watching for args. If no args passed in arguments\r\n   * all args are to be watched. Otherwise specified args will be watched.\r\n   * Watchers should not be put inside the constructor. It is considered best\r\n   * practice to do it inside the {@link Block#afterConstruct} method.\r\n   *\r\n   * @example\r\n   * class MyBlock extends Block {\r\n   *   static template = '<div />';\r\n   *\r\n   *   afterConstruct() {\r\n   *     this.watchArgs('a', () => {});\r\n   *     this.watchArgs('a', 'b', () => {});\r\n   *     this.watchArgs(() => {});\r\n   *   }\r\n   * }\r\n   */\r\n  watchArgs() {\r\n    const watcher = arguments[arguments.length - 1];\r\n\r\n    if (!isFunction(watcher)) {\r\n      return;\r\n    }\r\n\r\n    if (arguments.length === 1) {\r\n      return iterate(this.$$.args, ({ watchers }) => {\r\n        watchers.perm.push(watcher);\r\n      });\r\n    }\r\n\r\n    iterate(arguments, (arg) => {\r\n      if (arg === watcher) {\r\n        return;\r\n      }\r\n\r\n      if (!this.$$.args[arg]) {\r\n        return;\r\n      }\r\n\r\n      this.$$.args[arg].watchers.perm.push(watcher);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Block#watchGlobal\r\n   * @public\r\n   * @param {...String} [globals] - Globals to watch.\r\n   * @param {Watcher} watcher - Called when watched globals are changed.\r\n   * @description Method for watching for globals. If no globals passed in arguments\r\n   * all globals are to be watched. Otherwise specified globals will be watched.\r\n   * Watchers should not be put inside the constructor. It is considered best\r\n   * practice to do it inside the {@link Block#afterConstruct} method.\r\n   *\r\n   * @example\r\n   * class MyBlock extends Block {\r\n   *   static template = '<div />';\r\n   *\r\n   *   afterConstruct() {\r\n   *     this.watchGlobal('a', () => {});\r\n   *     this.watchGlobal('a', 'b', () => {});\r\n   *     this.watchGlobal(() => {});\r\n   *   }\r\n   * }\r\n   */\r\n  watchGlobals() {\r\n    const watcher = arguments[arguments.length - 1];\r\n\r\n    if (!isFunction(watcher)) {\r\n      return;\r\n    }\r\n\r\n    if (arguments.length === 1) {\r\n      for (const global in this.$$.global) {\r\n        /* eslint guard-for-in: 0 */\r\n        this.$$.global[global].watchers.perm.push(watcher);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    iterate(arguments, (global) => {\r\n      if (global === watcher) {\r\n        return;\r\n      }\r\n\r\n      if (!this.$$.global[global]) {\r\n        return;\r\n      }\r\n\r\n      this.$$.global[global].watchers.perm.push(watcher);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Block#watchLocals\r\n   * @public\r\n   * @param {...String} [locals] - Locals to watch.\r\n   * @param {Watcher} watcher - Called when watched locals are changed.\r\n   * @description Method for watching for locals. If no locals passed in arguments\r\n   * all locals are to be watched. Otherwise specified locals will be watched.\r\n   * Watchers should not be put inside the constructor. It is considered best\r\n   * practice to do it inside the {@link Block#afterConstruct} method.\r\n   *\r\n   * @example\r\n   * class MyBlock extends Block {\r\n   *   static template = '<div />';\r\n   *\r\n   *   afterConstruct() {\r\n   *     this.watchLocals('a', () => {});\r\n   *     this.watchLocals('a', 'b', () => {});\r\n   *     this.watchLocals(() => {});\r\n   *   }\r\n   * }\r\n   */\r\n  watchLocals() {\r\n    const watcher = arguments[arguments.length - 1];\r\n\r\n    if (!isFunction(watcher)) {\r\n      return;\r\n    }\r\n\r\n    if (arguments.length === 1) {\r\n      return iterate(this.$$.locals, ({ watchers }) => {\r\n        watchers.perm.push(watcher);\r\n      });\r\n    }\r\n\r\n    iterate(arguments, (local) => {\r\n      if (local === watcher) {\r\n        return;\r\n      }\r\n\r\n      if (!this.$$.locals[local]) {\r\n        return;\r\n      }\r\n\r\n      this.$$.locals[local].watchers.perm.push(watcher);\r\n    });\r\n  }\r\n}\r\n\r\nregisterBuiltIns(Blocks, Block);\r\n\r\nclass Mixin {\r\n  static evaluate = true;\r\n\r\n  constructor(opts) {\r\n    const {\r\n      value,\r\n      elem,\r\n      match,\r\n      parentBlock,\r\n      parentScope\r\n    } = opts;\r\n\r\n    Object.defineProperties(this, {\r\n      $$: {\r\n        value: {\r\n          _value: value,\r\n          parent: parentScope,\r\n          parentBlock,\r\n          watchersToRemove: new Arr([])\r\n        }\r\n      }\r\n    });\r\n\r\n    this.match = new Arr(match).slice(1).$;\r\n    this.elem = elem;\r\n\r\n    if (new Super(this).proto().$.constructor.evaluate) {\r\n      this.value = this.evaluateAndWatch((newValue, oldValue) => {\r\n        this.value = newValue;\r\n\r\n        try {\r\n          this.afterUpdate(newValue, oldValue);\r\n        } catch (err) {\r\n          console.error(`Uncaught error in ${ name }#onUpdate:`, err);\r\n        }\r\n      });\r\n\r\n      this.afterUpdate(this.value);\r\n    }\r\n\r\n    if (parentBlock) {\r\n      parentBlock.$$.mixins.push(this);\r\n    }\r\n  }\r\n\r\n  afterUpdate() {}\r\n\r\n  beforeRemove() {}\r\n\r\n  evaluateAndWatch(callback) {\r\n    const {\r\n      _value,\r\n      parent\r\n    } = this.$$;\r\n\r\n    return parent.$$.evaluate(_value, callback, this);\r\n  }\r\n\r\n  evaluateOnce() {\r\n    const {\r\n      _value,\r\n      parent\r\n    } = this.$$;\r\n\r\n    return parent.$$.evaluate(_value);\r\n  }\r\n\r\n  /**\r\n   * @method Mixin#remove\r\n   * @public\r\n   * @description Method fot forcing the mixin to be removed.\r\n   */\r\n  remove(isParentSignal) {\r\n    const {\r\n      parentBlock,\r\n      watchersToRemove\r\n    } = this.$$;\r\n\r\n    removeWatchers(watchersToRemove);\r\n\r\n    try {\r\n      this.beforeRemove();\r\n    } catch (err) {\r\n      console.error('Uncaught error in beforeRemove:', err);\r\n    }\r\n\r\n    if (!isParentSignal && parentBlock) {\r\n      const index = parentBlock.$$.mixins.indexOf(this);\r\n\r\n      if (index !== -1) {\r\n        parentBlock.$$.mixins.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nregisterBuiltIns(Mixins, Mixin);\r\n\r\nfunction initApp() {\r\n  const root = find('d-root').first();\r\n\r\n  if (!root.length) {\r\n    throw new Error('No d-root element is found! (initApp)');\r\n  }\r\n\r\n  registerBlocks(Block, blocks);\r\n\r\n  iterate(Mixin, (Mixin, name) => {\r\n    if (name === 'evaluate') {\r\n      return;\r\n    }\r\n\r\n    if (!isFunction(Mixin)) {\r\n      console.warn(`The \"${ name }\" mixin is not a function and will not be registered (initApp)`);\r\n\r\n      return;\r\n    }\r\n\r\n    if (!attrName.test(name)) {\r\n      console.warn(`Name \"${ name }\" is not allowed for mixins so the mixin will not be registered (initApp)`);\r\n\r\n      return;\r\n    }\r\n\r\n    if (!isInstanceOfMixin(Mixin)) {\r\n      console.warn(`The \"${ name }\" mixin does not extend Mixin and will not be registered (initApp)`);\r\n\r\n      return;\r\n    }\r\n\r\n    mixins[name] = Mixin;\r\n\r\n    defineProperties(Mixin, {\r\n      _match: new RegExp(`^${ name }(?:-([\\\\s\\\\S]+))?$`)\r\n    });\r\n  });\r\n\r\n  const block = root.attr('block');\r\n\r\n  if (!blocks[block]) {\r\n    throw new Error(`No \"${ block }\" block is registered! (initApp)`);\r\n  }\r\n\r\n  const replacement = doc.createComment(' d-root: start ');\r\n  const parent = root.parent();\r\n\r\n  replacement.add(doc.createComment(' d-root: end '));\r\n\r\n  root.replace(replacement);\r\n\r\n  createBlock({\r\n    node: {\r\n      name: block,\r\n      attrs: {},\r\n      children: new Arr([])\r\n    },\r\n    after: replacement.first(),\r\n    parent\r\n  });\r\n}\r\n\r\nfunction registerBlocks(Block, blocks) {\r\n  iterate(Block, (Block, name) => {\r\n    if (\r\n      name === 'collapseWhiteSpace'\r\n      || name === 'defaultArgs'\r\n      || name === 'template'\r\n      || name === 'wrap'\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (!isFunction(Block)) {\r\n      console.warn(`The \"${ name }\" block is not a function and will not be registered (initApp)`);\r\n\r\n      return;\r\n    }\r\n\r\n    if (!tagName.test(name) && name !== '#d-item') {\r\n      console.warn(`Name \"${ name }\" is not allowed for blocks so the block will not be registered (initApp)`);\r\n\r\n      return;\r\n    }\r\n\r\n    if (!isInstanceOfBlock(Block)) {\r\n      console.warn(`The \"${ name }\" block does not extend Block and will not be registered (initApp)`);\r\n\r\n      return;\r\n    }\r\n\r\n    const children = Object.create(blocks);\r\n\r\n    blocks[name] = {\r\n      block: Block,\r\n      html: deepCloneChildren(\r\n        markupToJSON(\r\n          `${ Block.template || '' }`,\r\n          Block.collapseWhiteSpace\r\n        )\r\n      ),\r\n      children\r\n    };\r\n\r\n    registerBlocks(Block, children);\r\n  });\r\n}\r\n\r\nfunction registerBuiltIns(set, proto) {\r\n  iterate(set, (register) => {\r\n    const {\r\n      name,\r\n      value\r\n    } = register(proto, createBlock);\r\n\r\n    Object.defineProperty(proto, name, {\r\n      value,\r\n      enumerable: true\r\n    });\r\n  });\r\n}\r\n\r\nfunction createBlock({ node, after, parent, parentBlock, parentScope }) {\r\n  parentScope = (node && node.block) || parentScope;\r\n\r\n  const name = (node && node.name) || 'UnknownBlock';\r\n  const args = (node && node.attrs) || {};\r\n  const children = (node && node.children) || new Arr([]);\r\n  const elem = parent.prop('namespaceURI') === svgNS\r\n    ? doc.svg()\r\n    : new Elem(doc.template().$[0].content);\r\n  const localBlocks = parentScope ? parentScope.$$.Block.children : blocks;\r\n  let constructor = node && node.name && localBlocks[node.name] ? localBlocks[node.name].block : null;\r\n  let dBlockMatch;\r\n\r\n  if (!children.length && (dBlockMatch = name.match(/^d-block-([\\s\\S]+)$/) || name === 'd-block')) {\r\n    constructor = blocks['d-block'].block;\r\n\r\n    args.name = dBlockMatch ? dBlockMatch[1] : null;\r\n  }\r\n\r\n  if (!constructor) {\r\n    const {\r\n      value,\r\n      children\r\n    } = node;\r\n\r\n    if (name === '#text' && expressionRegExp.test(value)) {\r\n      return createBlock({\r\n        node: {\r\n          name: 'd-text',\r\n          attrs: { value },\r\n          children: new Arr([]),\r\n          block: parentScope\r\n        },\r\n        after,\r\n        parent,\r\n        parentBlock,\r\n        parentScope\r\n      });\r\n    }\r\n\r\n    const element = elem.create(name);\r\n    const currentMixins = new Arr([]);\r\n\r\n    const attrs = new Super(args).object((object, value, attr) => {\r\n      const match = iterate(mixins, (Mixin, name) => {\r\n        const match = attr.match(Mixin._match);\r\n\r\n        if (match) {\r\n          return {\r\n            match,\r\n            name\r\n          };\r\n        }\r\n      });\r\n\r\n      if (match) {\r\n        currentMixins.push({\r\n          name: match.name,\r\n          match: match.match,\r\n          value,\r\n          elem: element,\r\n          parentBlock,\r\n          parentScope\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      object[attr] = parentScope.$$.evaluate(value, (value) => {\r\n        element.attr(attr, value);\r\n      }, parentBlock);\r\n    }).$;\r\n\r\n    if (!isNil(value)) {\r\n      element.text(value);\r\n    }\r\n\r\n    if (attrs) {\r\n      element.attr(attrs);\r\n    }\r\n\r\n    if (after.length) {\r\n      element.insertAfter(after);\r\n    } else {\r\n      element.into(parent);\r\n    }\r\n\r\n    after = new Elem();\r\n\r\n    if (children) {\r\n      transformDIfChildren(children).forEach((child) => {\r\n        const block = createBlock({\r\n          node: child,\r\n          after,\r\n          parent: element,\r\n          parentBlock,\r\n          parentScope\r\n        });\r\n\r\n        if (block instanceof Block) {\r\n          after = block.$$.elems.end;\r\n        } else {\r\n          after = block;\r\n        }\r\n      });\r\n    }\r\n\r\n    currentMixins.forEach((opts) => {\r\n      createMixin(opts);\r\n    });\r\n\r\n    return element;\r\n  }\r\n\r\n  const block = node && node.name ? localBlocks[node.name] : null;\r\n  const blockInstance = new constructor({\r\n    name,\r\n    args,\r\n    children,\r\n    block,\r\n    parent,\r\n    parentBlock,\r\n    parentScope\r\n  });\r\n\r\n  Object.defineProperties(blockInstance, {\r\n    args: {\r\n      value: blockInstance.args\r\n    },\r\n    global: {\r\n      value: blockInstance.global\r\n    }\r\n  });\r\n\r\n  let html = name === 'd-elements'\r\n    ? new Arr(blockInstance.args.value || [])\r\n    : deepCloneChildren(block.html, blockInstance);\r\n\r\n  if (name === 'd-elements' && parentBlock.$$.name === '#d-item') {\r\n    html = deepCloneChildren(html, parentBlock);\r\n  }\r\n\r\n  const {\r\n    $$,\r\n    args: Args,\r\n    global,\r\n    ...locals\r\n  } = blockInstance;\r\n  const eventualArgs = {\r\n    ...constructor.defaultArgs,\r\n    ...Args\r\n  };\r\n\r\n  delete locals.$;\r\n  delete locals.$$;\r\n\r\n  $$.args = constructPrivateScope(eventualArgs);\r\n  $$.locals = constructPrivateScope(locals);\r\n  $$.global = constructPrivateScope(global, 'global', parentScope);\r\n\r\n  if (name === '#d-item') {\r\n    const scopeValues = {\r\n      [node.itemName]: node.item,\r\n      [node.indexName]: node.index\r\n    };\r\n    let parent = blockInstance;\r\n    let scope = parentScope;\r\n    let DItemFound;\r\n\r\n    while (!DItemFound && (parent = parent.$$.parentBlock)) {\r\n      DItemFound = parent.$$.name === '#d-item';\r\n    }\r\n\r\n    if (DItemFound) {\r\n      scope = parent.$$.scope;\r\n    }\r\n\r\n    $$.Block = parentScope.$$.Block;\r\n    $$.privateScope = constructPrivateScope(scopeValues);\r\n    constructPublicScope($$.scope = Object.create(scope), scopeValues, $$.privateScope);\r\n  }\r\n\r\n  if (name === 'd-each') {\r\n    $$.scope = Object.create(parentScope);\r\n  }\r\n\r\n  constructPublicScope(Args, eventualArgs, $$.args);\r\n  constructPublicScope(global, global, $$.global);\r\n  constructPublicScope(blockInstance, locals, $$.locals);\r\n\r\n  try {\r\n    blockInstance.afterConstruct();\r\n  } catch (err) {\r\n    console.error(`Uncaught error in ${ name }#afterConstruct:`, err);\r\n  }\r\n\r\n  const elems = new Elem([\r\n    $$.elems.start,\r\n    $$.elems.end\r\n  ]);\r\n\r\n  if (after.length) {\r\n    elems.insertAfter(after);\r\n  } else {\r\n    elems.into(parent);\r\n  }\r\n\r\n  after = $$.elems.start;\r\n\r\n  // console.log(blockInstance);\r\n\r\n  transformDIfChildren(html).forEach((child) => {\r\n    const block = createBlock({\r\n      node: child,\r\n      after,\r\n      parent,\r\n      parentBlock: blockInstance,\r\n      parentScope\r\n    });\r\n\r\n    if (block instanceof Block) {\r\n      const { elems } = block.$$;\r\n\r\n      after = elems.end;\r\n\r\n      $$.elems.content.add(elems.start, elems.content, elems.end);\r\n    } else {\r\n      after = block;\r\n\r\n      $$.elems.content.add(block);\r\n    }\r\n  });\r\n\r\n  try {\r\n    blockInstance.afterRender();\r\n  } catch (err) {\r\n    console.error(`Uncaught error in ${ name }#afterRender:`, err);\r\n  }\r\n\r\n  return blockInstance;\r\n}\r\n\r\nfunction createMixin({ name, value, match, elem, parentBlock, parentScope }) {\r\n  const Mixin = mixins[name];\r\n\r\n  new Mixin({\r\n    value,\r\n    match,\r\n    elem,\r\n    parentBlock,\r\n    parentScope\r\n  });\r\n}\r\n\r\nfunction deepCloneChildren(children, block) {\r\n  return new Arr(children || []).map((child) => {\r\n    const {\r\n      name,\r\n      attrs,\r\n      value,\r\n      children\r\n    } = child;\r\n    const newChild = {\r\n      name,\r\n      value,\r\n      attrs: { ...attrs }\r\n    };\r\n\r\n    if (block) {\r\n      newChild.block = block;\r\n    }\r\n\r\n    if (children) {\r\n      newChild.children = deepCloneChildren(children, block);\r\n    }\r\n\r\n    return newChild;\r\n  });\r\n}\r\n\r\nfunction transformDIfChildren(children) {\r\n  return new Arr(children || [])\r\n    .concat({})\r\n    .object((object, child) => {\r\n      const { name } = child;\r\n      const {\r\n        html,\r\n        ifElse\r\n      } = object;\r\n\r\n      if (name !== 'd-else-if' && name !== 'd-else') {\r\n        if (ifElse) {\r\n          html.push({\r\n            name: 'd-if',\r\n            block: ifElse.$[0].block,\r\n            children: ifElse\r\n          });\r\n\r\n          object.ifElse = null;\r\n        }\r\n\r\n        if (name === 'd-if') {\r\n          object.ifElse = new Arr([child]);\r\n        } else if (!isUndefined(name)) {\r\n          html.push(child);\r\n        }\r\n      } else {\r\n        (ifElse || html).push(child);\r\n\r\n        if (name === 'd-else' && ifElse) {\r\n          html.push({\r\n            name: 'd-if',\r\n            block: ifElse.$[0].block,\r\n            children: ifElse\r\n          });\r\n\r\n          object.ifElse = null;\r\n        }\r\n      }\r\n    }, {\r\n      html: new Arr([]),\r\n      ifElse: null\r\n    }).$.html;\r\n}\r\n\r\nfunction isInstanceOfBlock(block) {\r\n  return isPrototypeOf.call(Block, block) && isPrototypeOf.call(Block.prototype, block.prototype);\r\n}\r\n\r\nfunction isInstanceOfMixin(mixin) {\r\n  return isPrototypeOf.call(Mixin, mixin) && isPrototypeOf.call(Mixin.prototype, mixin.prototype);\r\n}\r\n\r\nfunction removeWatchers(watchersToRemove) {\r\n  watchersToRemove.forEach(({ watcher, watchers }) => {\r\n    const index = watchers.indexOf(watcher);\r\n\r\n    if (index !== -1) {\r\n      watchers.splice(index, 1);\r\n    }\r\n  });\r\n}\r\n\r\nfunction constructPrivateScope(object, type, parentScope) {\r\n  let scope = {};\r\n\r\n  if (type === 'global') {\r\n    scope = Object.create(\r\n      parentScope\r\n        ? parentScope.$$.global\r\n        : null\r\n    );\r\n  }\r\n\r\n  return new Super(object).object((scope, value, key) => {\r\n    scope[key] = {\r\n      value,\r\n      watchers: {\r\n        temp: new Arr([]),\r\n        perm: new Arr([])\r\n      }\r\n    };\r\n  }, scope).$;\r\n}\r\n\r\nfunction constructPublicScope(scope, scopeValues, privateScope) {\r\n  new Super(scope).define(new Super(scopeValues).map((value, key) => {\r\n    const scope = privateScope[key];\r\n\r\n    return {\r\n      get() {\r\n        if (evalMode) {\r\n          if (getting.indexOf(scope.watchers.temp) === -1) {\r\n            getting.push(scope.watchers.temp);\r\n          }\r\n        }\r\n\r\n        return scope.value;\r\n      },\r\n      set(value) {\r\n        if (value === scope.value) {\r\n          return;\r\n        }\r\n\r\n        if (!changed) {\r\n          changed = [];\r\n        }\r\n\r\n        const oldTempWatchers = scope.watchers.temp.slice();\r\n        const oldValue = scope.value;\r\n\r\n        scope.watchers.temp = new Arr([]);\r\n        scope.value = value;\r\n\r\n        oldTempWatchers.forEach((watcher) => {\r\n          watcher.onRemove();\r\n          watcher();\r\n        });\r\n        changed.push({\r\n          scope,\r\n          oldValue,\r\n          value\r\n        });\r\n\r\n        setTimeout(() => {\r\n          if (!changed) {\r\n            return;\r\n          }\r\n\r\n          const was = new Arr([]);\r\n\r\n          while (changed.length) {\r\n            for (let i = changed.length - 1; i >= 0; i--) {\r\n              const {\r\n                scope,\r\n                value,\r\n                oldValue\r\n              } = changed[i];\r\n\r\n              scope.watchers.perm.forEach((watcher) => {\r\n                if (was.indexOf(watcher) === -1) {\r\n                  watcher(value, oldValue);\r\n                  was.push(watcher);\r\n                }\r\n              });\r\n\r\n              changed.splice(i, 1);\r\n            }\r\n          }\r\n\r\n          changed = null;\r\n        }, 0);\r\n      }\r\n    };\r\n  }).$);\r\n}\r\n\r\nexport { Block, Mixin, initApp };\r\n","/**\r\n * @module constants/formats\r\n * @private\r\n * @description Exports different types of formatting for {@link Date#format}.\r\n */\r\n\r\nimport { Super } from '../Super';\r\nimport { Str } from '../Str';\r\n\r\nconst zero = new Str('0');\r\nconst daysOfTheWeekNames = [\r\n  'Sunday',\r\n  'Monday',\r\n  'Tuesday',\r\n  'Wednesday',\r\n  'Thursday',\r\n  'Friday',\r\n  'Saturday'\r\n];\r\nconst daysOfTheWeekAliases = new Super(daysOfTheWeekNames).map((value) => value.slice(0, 3)).$;\r\nconst monthsNames = [\r\n  'January',\r\n  'February',\r\n  'March',\r\n  'April',\r\n  'May',\r\n  'June',\r\n  'Jule',\r\n  'August',\r\n  'September',\r\n  'October',\r\n  'November',\r\n  'December'\r\n];\r\nconst monthsAliases = new Super(monthsNames).map((value) => value.slice(0, 3)).$;\r\n\r\n/**\r\n * @callback module:constants/formats~matchCallback\r\n * @param {Dat} date - D-wrap of a date to apply format to.\r\n * @param {String} string - Matched applied expression.\r\n */\r\n\r\n/**\r\n * @typedef {Object} module:constants/formats~formatExpr\r\n * @property {String} format - Matched format.\r\n * @property {module:constants/formats~matchCallback} match - Callback if there was a match.\r\n */\r\n\r\n/**\r\n * @type {module:constants/formats~formatExpr[]}\r\n * @description Array of different formats.\r\n */\r\nexport default [\r\n  {\r\n    format: 'ccc',\r\n    match: (date, utc) => round(date[utc]('c'), 3)\r\n  },\r\n  {\r\n    format: 'c',\r\n    match: (date, utc) => date[utc]('c')\r\n  },\r\n  {\r\n    format: 'ss',\r\n    match: (date, utc) => round(date[utc]('s'), 2)\r\n  },\r\n  {\r\n    format: 's',\r\n    match: (date, utc) => date[utc]('s')\r\n  },\r\n  {\r\n    format: 'mm',\r\n    match: (date, utc) => round(date[utc]('m'), 2)\r\n  },\r\n  {\r\n    format: 'm',\r\n    match: (date, utc) => date[utc]('m')\r\n  },\r\n  {\r\n    format: 'hh',\r\n    match: (date, utc) => round(date[utc]('h'), 2)\r\n  },\r\n  {\r\n    format: 'h',\r\n    match: (date, utc) => date[utc]('h')\r\n  },\r\n  {\r\n    format: 'dddd',\r\n    match: (date, utc) => daysOfTheWeekNames[date[utc]('dw')]\r\n  },\r\n  {\r\n    format: 'ddd',\r\n    match: (date, utc) => daysOfTheWeekAliases[date[utc]('dw')]\r\n  },\r\n  {\r\n    format: 'dd',\r\n    match: (date, utc) => round(date[utc]('d'), 2)\r\n  },\r\n  {\r\n    format: 'd',\r\n    match: (date, utc) => date[utc]('d')\r\n  },\r\n  {\r\n    format: 'MMMM',\r\n    match: (date, utc) => monthsNames[date[utc]('M') - 1]\r\n  },\r\n  {\r\n    format: 'MMM',\r\n    match: (date, utc) => monthsAliases[date[utc]('M') - 1]\r\n  },\r\n  {\r\n    format: 'MM',\r\n    match: (date, utc) => round(date[utc]('M'), 2)\r\n  },\r\n  {\r\n    format: 'M',\r\n    match: (date, utc) => date[utc]('M')\r\n  },\r\n  {\r\n    format: 'yyyy',\r\n    match: (date, utc) => round(date[utc]('y'), 4)\r\n  },\r\n  {\r\n    format: 'yy',\r\n    match: (date, utc) => String(date[utc]('y')).slice(-2)\r\n  },\r\n  {\r\n    format: 'y',\r\n    match: (date, utc) => date[utc]('y')\r\n  }\r\n];\r\n\r\n/**\r\n * @function round\r\n * @private\r\n * @param {Number} number - Number to round.\r\n * @param {Number} digits - Number of the digits of the output.\r\n * @returns {String} String with necessary additional starting zeroes.\r\n */\r\nfunction round(number, digits) {\r\n  const string = String(number);\r\n  let zeroes = digits - string.length;\r\n\r\n  zeroes = zeroes < 0 ? 0 : zeroes;\r\n\r\n  return zero.repeat(zeroes).$ + string;\r\n}\r\n","/**\r\n * @module Dat\r\n * @private\r\n * @mixin\r\n * @description Exports Dat class.\r\n */\r\n\r\nimport { Super } from './Super';\r\nimport { Num } from './Num';\r\nimport { Str } from './Str';\r\nimport { switcher } from './Switcher';\r\nimport { constructors } from './constants';\r\nimport formats from './constants/formats';\r\nimport { isDate, iterate, Symbol, defineProperties } from './helpers';\r\n\r\n/**\r\n * @typedef {*} DateLike\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {'c'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} AddPeriod\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {'c'|'s'|'m'|'h'|'d'|'dw'|'M'|'y'} GetPeriod\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {'c'|'s'|'m'|'h'|'d'|'M'|'y'} OfOnePeriod\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {'c'|'s'|'m'|'h'|'d'|'M'|'y'} SetPeriod\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {'ccc'|'c'|'ss'|'s'|'mm'|'m'|'hh'|'h'|'dddd'|'ddd'|'dd'|'d'|'MMMM'|'MMM'|'MM'|'M'|'yyyy'|'yy'|'y'} Format\r\n * @public\r\n */\r\n\r\nconst coeffs = {\r\n  c: 1,\r\n  s: 1000,\r\n  m: 60000,\r\n  h: 3600000,\r\n  d: 86400000,\r\n  w: 604800000,\r\n  M: 2592000000,\r\n  y: 31536000000\r\n};\r\n\r\nconst getSwitcher = switcher({\r\n  c: (date, utc) => date[`${ utc }Milliseconds`](),\r\n  s: (date, utc) => date[`${ utc }Seconds`](),\r\n  m: (date, utc) => date[`${ utc }Minutes`](),\r\n  h: (date, utc) => date[`${ utc }Hours`](),\r\n  d: (date, utc) => date[`${ utc }Date`](),\r\n  dw: (date, utc) => date[`${ utc }Day`](),\r\n  M: (date, utc) => date[`${ utc }Month`]() + 1,\r\n  y: (date, utc) => date[`${ utc }FullYear`]()\r\n}, 'equals', NaN);\r\nconst setSwitcher = switcher({\r\n  c: (date, value, utc) => date[`${ utc }Milliseconds`](value),\r\n  s: (date, value, utc) => date[`${ utc }Seconds`](value),\r\n  m: (date, value, utc) => date[`${ utc }Minutes`](value),\r\n  h: (date, value, utc) => date[`${ utc }Hours`](value),\r\n  d: (date, value, utc) => date[`${ utc }Date`](value),\r\n  M: (date, value, utc) => date[`${ utc }Month`](value - 1),\r\n  y: (date, value, utc) => date[`${ utc }FullYear`](value)\r\n});\r\n\r\n/**\r\n * @class Dat\r\n * @extends Super\r\n * @public\r\n * @param {Date} [date = new Date()] - A date to wrap.\r\n * @returns {Dat} Instance of Dat.\r\n * @description Wrap of a date.\r\n *\r\n * @example\r\n * const date = new Dat(new Date());\r\n */\r\nclass Dat extends Super {\r\n  constructor(date = new Date()) {\r\n    super(date);\r\n\r\n    /**\r\n     * @member Dat#$\r\n     * @type {Date}\r\n     * @public\r\n     * @description Original date.\r\n     */\r\n  }\r\n\r\n  /**\r\n   * @method Dat#add\r\n   * @public\r\n   * @param {AddPeriod|Object.<AddPeriod, Number>} what - What to add.\r\n   * @param {Number} [number] - Number of what to add if the first argument is a period string.\r\n   * @returns {Dat} Returns this.\r\n   * @description Method for adding amounts of time to the date. Returns new instance of Dat.\r\n   *\r\n   * @example\r\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).add('c', 2).toISOString();         // '2000-01-01T00:00:00.001Z'\r\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).add({ c: 2, d: 5 }).toISOString(); // '2000-01-06T00:00:00.001Z'\r\n   */\r\n  add(what, number) {\r\n    if (arguments.length >= 2) {\r\n      what = { [what]: number };\r\n    }\r\n\r\n    return this.time(this.time() + new Super(what).sum((value, what) => coeffs[what] * value));\r\n  }\r\n\r\n  /**\r\n   * @method Dat#expires\r\n   * @public\r\n   * @param {*} [value = this] - Value to resolve after the date expires.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @description Method for defining when the date expires.\r\n   *\r\n   * @example\r\n   * new Dat().add('c', 500).expires('Expired').then((value) => {\r\n   *   // After 500 milliseconds\r\n   *   console.log(value); // 'Expired'\r\n   * });\r\n   */\r\n  expires(value) {\r\n    if (!arguments.length) {\r\n      value = this;\r\n    }\r\n\r\n    return new Num(this.$ - now()).timeout(value);\r\n  }\r\n\r\n  /**\r\n   * @method Dat#format\r\n   * @public\r\n   * @param {String} string - Template for the output.\r\n   * @param {String} [prefix = ''] - If needed [all special strings]{@link Format}\r\n   * are treated as they should be prefix with prefix.\r\n   * @returns {String} Formatted string.\r\n   * @description Method for creating formatted output based on a string.\r\n   *\r\n   * @example\r\n   * new Dat('1999-12-31T23:59:59.999Z').format('Seconds: $ss, milliseconds: $ccc.', '$');\r\n   * // 'Seconds: 59, milliseconds: 999.'\r\n   */\r\n  format(string, prefix = '') {\r\n    string = new Str(new Super(string).$);\r\n    prefix = String(new Super(prefix).$);\r\n\r\n    iterate(formats, (format) => {\r\n      string = string.replaceString(prefix + format.format, format.match(this, 'get'));\r\n    });\r\n\r\n    return string.$;\r\n  }\r\n\r\n  /**\r\n   * @method Dat#formatUTC\r\n   * @public\r\n   * @param {String} string - See {@link Dat#format}.\r\n   * @param {String} [prefix = ''] - See {@link Dat#format}.\r\n   * @returns {String} Formatted string.\r\n   * @description UTC version of {@link Dat#format}.\r\n   *\r\n   * @example\r\n   * new Dat('1999-07-07T03:09:09.099Z').formatUTC(\r\n   *   `\r\n   *     Milliseconds: $ccc|$c.\r\n   *     Seconds:      $ss|$s.\r\n   *     Minutes:      $mm|$m.\r\n   *     Hours:        $hh|$h.\r\n   *     Day:          $dddd|$ddd|$dd|$d.\r\n   *     Month:        $MMMM|$MMM|$MM|$M.\r\n   *     Year:         $yyyy|$yy|$y.\r\n   *   `,\r\n   *   '$'\r\n   * );\r\n   * // Milliseconds: 099|99.\r\n   * // Seconds:      09|9.\r\n   * // Minutes:      09|9.\r\n   * // Hours:        03|3.\r\n   * // Day:          Friday|Fri|07|7.\r\n   * // Month:        July|Jul|07|7.\r\n   * // Year:         1999|99|1999.\r\n   */\r\n  formatUTC(string, prefix = '') {\r\n    string = new Str(new Super(string).$);\r\n    prefix = String(new Super(prefix).$);\r\n\r\n    iterate(formats, (format) => {\r\n      string = string.replaceString(prefix + format.format, format.match(this, 'getUTC'));\r\n    });\r\n\r\n    return string.$;\r\n  }\r\n\r\n  /**\r\n   * @method Dat#get\r\n   * @public\r\n   * @param {GetPeriod} what - What to get.\r\n   * @returns {Number} Number of what to get.\r\n   * @description Method for getting values such as seconds or minutes.\r\n   *\r\n   * @example\r\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).get('s'); // 59\r\n   */\r\n  get(what) {\r\n    return getSwitcher(what, [this.$, 'get']);\r\n  }\r\n\r\n  /**\r\n   * @method Dat#getUTC\r\n   * @public\r\n   * @param {GetPeriod} what - See {@link Dat#get}.\r\n   * @returns {Number} Number of what to get.\r\n   * @description UTC version of {@link Dat#get}.\r\n   *\r\n   * @example\r\n   * const date = new Dat(new Date('1999-12-31T23:59:59.999Z'));\r\n   *\r\n   * date.getUTC('c');  // 999\r\n   * date.getUTC('s');  // 59\r\n   * date.getUTC('m');  // 59\r\n   * date.getUTC('h');  // 23\r\n   * date.getUTC('d');  // 31\r\n   * date.getUTC('dw'); // 5\r\n   * date.getUTC('M');  // 12\r\n   * date.getUTC('y');  // 1999\r\n   */\r\n  getUTC(what) {\r\n    return getSwitcher(what, [this.$, 'getUTC']);\r\n  }\r\n\r\n  /**\r\n   * @method Dat#isAfter\r\n   * @public\r\n   * @param {DateLike} date - Date to be compared to this date.\r\n   * @returns {Boolean} If this date is after the argument one.\r\n   * @description Finds out if this date is after the argument one.\r\n   *\r\n   * @example\r\n   * new Dat(new Date(333)).isAfter(new Date(334)); // false\r\n   * new Dat(new Date(333)).isAfter(new Date(332)); // true\r\n   */\r\n  isAfter(date) {\r\n    date = new Date(new Super(date).$);\r\n\r\n    return date.getTime() < this.$.getTime();\r\n  }\r\n\r\n  /**\r\n   * @method Dat#isBefore\r\n   * @public\r\n   * @param {DateLike} date - Date to be compared to this date.\r\n   * @returns {Boolean} If this date is before the argument one.\r\n   * @description Finds out if this date is before the argument one.\r\n   *\r\n   * @example\r\n   * new Dat(new Date(333)).isBefore(new Date(334)); // true\r\n   * new Dat(new Date(333)).isBefore(new Date(332)); // false\r\n   */\r\n  isBefore(date) {\r\n    date = new Date(new Super(date).$);\r\n\r\n    return date.getTime() > this.$.getTime();\r\n  }\r\n\r\n  /**\r\n   * @method Dat#isBetween\r\n   * @public\r\n   * @param {DateLike} date1 - Start of the range.\r\n   * @param {DateLike} date2 - End of the range.\r\n   * @returns {Boolean} If this date is after date1 and before date2.\r\n   * @description Finds out if this date is after date1 and before date2.\r\n   *\r\n   * @example\r\n   * new Dat(new Date(333)).isBetween(new Date(332), new Date(334)); // true\r\n   * new Dat(new Date(333)).isBetween(new Date(334), new Date(332)); // false\r\n   */\r\n  isBetween(date1, date2) {\r\n    const time = this.$.getTime();\r\n\r\n    date1 = new Date(new Super(date1).$);\r\n    date2 = new Date(new Super(date2).$);\r\n\r\n    return time > date1.getTime() && time < date2.getTime();\r\n  }\r\n\r\n  /**\r\n   * @method Dat#isInvalid\r\n   * @public\r\n   * @returns {Boolean} If the date is invalid.\r\n   * @description Returns if the date is invalid.\r\n   *\r\n   * @example\r\n   * new Dat(new Date('a')).isInvalid(); // true\r\n   * new Dat(new Date(1)).isInvalid();   // false\r\n   */\r\n  isInvalid() {\r\n    return this.$.toString() === 'Invalid Date';\r\n  }\r\n\r\n  /**\r\n   * @method Dat#isPassed\r\n   * @public\r\n   * @returns {Boolean} If the date is passed.\r\n   * @description Returns if the date is passed.\r\n   *\r\n   * @example\r\n   * new Dat(new Date(1)).isPassed(); // true\r\n   */\r\n  isPassed() {\r\n    return this.isBefore(now());\r\n  }\r\n\r\n  /**\r\n   * @method Dat#ofOne\r\n   * @public\r\n   * @param {OfOnePeriod} what - Period to check.\r\n   * @param {DateLike} date - Date to check.\r\n   * @returns {Boolean} If two dates are of one second, minute or something else.\r\n   * @description Returns if two dates are of one second, minute or something else.\r\n   *\r\n   * @example\r\n   * new Dat(new Date('1999-12-31T23:59:59.000Z')).ofOne('s', new Date(1999-12-31T23:59:59.333Z')); // true\r\n   * new Dat(new Date('1999-12-31T23:59:59.000Z')).ofOne('s', new Date(1999-12-31T23:59:58.999Z')); // false\r\n   */\r\n  ofOne(what, date) {\r\n    if (!(what in coeffs) || what === 'w') {\r\n      return false;\r\n    }\r\n\r\n    date = new Dat(new Date(date));\r\n\r\n    let started;\r\n\r\n    return iterate(coeffs, (coeff, w) => {\r\n      if (w === what) {\r\n        started = true;\r\n      }\r\n\r\n      if (!started || w === 'w') {\r\n        return;\r\n      }\r\n\r\n      if (started && this.get(w) !== date.get(w)) {\r\n        return false;\r\n      }\r\n    }) !== false;\r\n  }\r\n\r\n  /**\r\n   * @method Dat#set\r\n   * @public\r\n   * @param {SetPeriod|Object.<SetPeriod, Number>} what - What to add.\r\n   * @param {Number} [number] - Number of what to set if the first argument is a period string.\r\n   * @returns {Dat} Returns this.\r\n   * @description Method for setting values such as seconds or minutes.\r\n   *\r\n   * @example\r\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).set('s', 58).get('s');           // 58\r\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).set({ c: 998, s: 58 }).get('c'); // 998\r\n   */\r\n  set(what, number) {\r\n    const date = this.$;\r\n\r\n    if (arguments.length >= 2) {\r\n      what = { [what]: number };\r\n    }\r\n\r\n    what = new Super(what).$;\r\n\r\n    iterate(what, (value, what) => {\r\n      setSwitcher(what, [date, value, 'set']);\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Dat#setUTC\r\n   * @public\r\n   * @param {SetPeriod|Object.<SetPeriod, Number>} what - See {@link Dat#set}.\r\n   * @param {Number} [number] - See {@link Dat#set}.\r\n   * @returns {Dat} Returns this.\r\n   * @description UTC version of {@link Dat#set}.\r\n   *\r\n   * @example\r\n   * const date = new Dat(new Date('1999-12-31T23:59:59.999Z'));\r\n   *\r\n   * date.setUTC('ccc', 998).getUTC('ccc'); // 998\r\n   * date.setUTC({\r\n   *   s: 58,\r\n   *   m: 58,\r\n   *   h: 22\r\n   * });\r\n   *\r\n   * date.getUTC('s'); // 58\r\n   * date.getUTC('m'); // 58\r\n   * date.getUTC('h'); // 23\r\n   */\r\n  setUTC(what, number) {\r\n    const date = this.$;\r\n\r\n    if (arguments.length >= 2) {\r\n      what = { [what]: number };\r\n    }\r\n\r\n    what = new Super(what).$;\r\n\r\n    iterate(what, (value, what) => {\r\n      setSwitcher(what, [date, value, 'setUTC']);\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Dat#setUTC\r\n   * @public\r\n   * @param {Number} [time] - Time to set.\r\n   * @returns {Dat|Number} - If the time argument is present this is returned otherwise the time is returned.\r\n   * @description Synonym for both\r\n   * [Date#getTime]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime} and\r\n   * [Date#setTime]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime}.\r\n   */\r\n  time(time) {\r\n    const date = this.$;\r\n\r\n    if (arguments.length) {\r\n      date.setTime(time);\r\n    }\r\n\r\n    return date.getTime();\r\n  }\r\n\r\n  toISOString() {\r\n    return this.$.toISOString();\r\n  }\r\n\r\n  toLocaleString() {\r\n    return this.$.toLocaleString();\r\n  }\r\n\r\n  toString() {\r\n    return this.$.toString();\r\n  }\r\n\r\n  valueOf() {\r\n    return this.$.valueOf();\r\n  }\r\n}\r\ndefineProperties(Dat.prototype, {\r\n  [Symbol.toStringTag]: 'Dat'\r\n});\r\n\r\nconstructors[1].push({\r\n  check: isDate,\r\n  cls: Dat\r\n});\r\n\r\n/**\r\n * @function now\r\n * @public\r\n * @returns {Number} Number of milliseconds.\r\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/now\r\n * @description Synonym for\r\n * [Date.now]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/now}.\r\n */\r\nfunction now() {\r\n  return Date.now();\r\n}\r\n\r\n/**\r\n * @function date\r\n * @public\r\n * @param {DateLike} [date = new Date()] - Date-like value that is passed to the Date constructor.\r\n * @returns {Dat} New instance of Dat.\r\n * @description Synonym for new Dat(new Date(date));\r\n */\r\nfunction date(date) {\r\n  if (!arguments.length) {\r\n    return new Dat(new Date(now()));\r\n  }\r\n\r\n  date = new Super(date).$;\r\n\r\n  return new Dat(new Date(date));\r\n}\r\n\r\nexport { Dat, now, date };\r\n","/**\r\n * @module helpers/constructURL\r\n * @private\r\n * @description Exports constructURL method.\r\n */\r\n\r\nimport { Arr } from '../Arr';\r\nimport { Str } from '../Str';\r\nimport { switcher } from '../Switcher';\r\nimport { isArray, isObject, isPlainObject } from './checkTypes';\r\nimport { iterate } from './iterate';\r\n\r\n/**\r\n * @type {RegExp}\r\n * @description Absolute URL pattern.\r\n */\r\nconst absoluteURLRegexp = /^(([a-z][a-z\\d+\\-.]*:)?\\/\\/|data:[a-z]+\\/[a-z]+;base64,)/i;\r\nconst querySwitcher = switcher('call', () => new Arr([]))\r\n  .case(isArray, (prefix, query) => {\r\n    let queryParams = new Arr([]);\r\n\r\n    iterate(query, (value) => {\r\n      if (isPlainObject(value) || isArray(value)) {\r\n        queryParams = queryParams.concat(querySwitcher(value, [`${ prefix }[]`]));\r\n\r\n        return;\r\n      }\r\n\r\n      queryParams.push({\r\n        param: `${ prefix }[]`,\r\n        value\r\n      });\r\n    });\r\n\r\n    return queryParams.$;\r\n  })\r\n  .case(isPlainObject, (prefix, query) => {\r\n    let queryParams = new Arr([]);\r\n\r\n    iterate(query, (value, param) => {\r\n      if (isPlainObject(value) || isArray(value)) {\r\n        queryParams = queryParams.concat(querySwitcher(value, [prefix ? `${ prefix }[${ param }]` : param]));\r\n\r\n        return;\r\n      }\r\n\r\n      queryParams.push({\r\n        param: prefix ? `${ prefix }[${ param }]` : param,\r\n        value: isObject(value) ? JSON.stringify(value) : String(value)\r\n      });\r\n    });\r\n\r\n    return queryParams.$;\r\n  });\r\n\r\n/**\r\n * @function constructURL\r\n * @param {String} baseURL - BaseURL of the output URL.\r\n * @param {String} url - Main part of the output URL.\r\n * @param {Object} params - Params to replace in the url expressions like \":param\".\r\n * @param {Object} query - Object with query params.\r\n * @param {Object} [hash = ''] - URL hash.\r\n * @param {Object} [encodeOptions = {}] - If you need to encode something.\r\n * @param {Object} [encodeOptions.params = true] - If you need to encode params.\r\n * @param {Object} [encodeOptions.query = true] - If you need to encode query params.\r\n * @returns {String} Constructed URL.\r\n * @description Function for constructing URL from the base URL, URL, params and query params.\r\n */\r\nexport default (baseURL, url, params, query, hash = '', encodeOptions = {}) => {\r\n  const {\r\n    params: encodeParams = true,\r\n    query: encodeQuery = true\r\n  } = encodeOptions;\r\n  let URL = isAbsolute(url)\r\n    ? url\r\n    : `${ String(baseURL).replace(/\\/+$/, '') }/${ String(url).replace(/^\\/+/, '') }`;\r\n\r\n  iterate(params, (value, param) => {\r\n    URL = new Str(URL).replaceString(`:${ param }`, encode(value, encodeParams)).$;\r\n  });\r\n\r\n  const queryParams = querySwitcher(query, ['']);\r\n\r\n  if (queryParams.length) {\r\n    URL += (URL.indexOf('?') === -1 ? '?' : '&') + queryParams\r\n      .map(({ param, value }) => `${ encode(param, encodeQuery) }=${ encode(value, encodeQuery) }`)\r\n      .join('&');\r\n  }\r\n\r\n  return `${ URL }${ hash ? `#${ hash }` : '' }`;\r\n};\r\n\r\n/**\r\n * @function isAbsolute\r\n * @param {String} url - URL to check if it is absolute or not.\r\n * @returns {Boolean} If the argument URL is absolute or not.\r\n */\r\nfunction isAbsolute(url) {\r\n  return absoluteURLRegexp.test(url);\r\n}\r\n\r\n/**\r\n * @function encode\r\n * @param {String} string - String to encode using encodeURIComponent.\r\n * @param {Boolean} isEncoded - If the string should be encoded.\r\n * @returns {String} Encoded string.\r\n */\r\nfunction encode(string, isEncoded) {\r\n  return isEncoded ? encodeURIComponent(string) : string;\r\n}\r\n","/**\r\n * @module Fetch\r\n * @private\r\n * @mixin\r\n * @description Exports Fetch class.\r\n */\r\n\r\nimport { Promise } from './Promise';\r\nimport { Super } from './Super';\r\nimport { Arr } from './Arr';\r\nimport { Str } from './Str';\r\nimport {\r\n  isArray, isFunction, isString,\r\n  assign, Symbol, validate, iterate, defineProperties\r\n} from './helpers';\r\nimport constructURL from './helpers/constructURL';\r\nimport parseHeaders from './helpers/parseHeaders';\r\nimport transformData from './helpers/transformData';\r\n\r\n/**\r\n * @typedef {'get'|'post'|'delete'|'head'|'put'|'patch'} FetchMethod\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {Object} FetchConfig\r\n * @public\r\n * @property {Array.<AfterMiddleware|FetchErrorAfterMiddleware>} [after]\r\n * @property {Object} [auth]\r\n * @property {String} [auth.username]\r\n * @property {String} [auth.password]\r\n * @property {String} [baseURL]\r\n * @property {Array.<BeforeMiddleware|FetchErrorBeforeMiddleware>} [before]\r\n * @property {*} [data]\r\n * @property {Object.<String, String[]>} [headers]\r\n * @property {FetchMethod} [method]\r\n * @property {Object} [params]\r\n * @property {Object} [query]\r\n * @property {String} [responseType]\r\n * @property {Number} [timeout]\r\n * @property {String} [url]\r\n * @property {Boolean} [withCredentials]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FetchResponse\r\n * @public\r\n * @property {FetchConfig} config\r\n * @property {*} data\r\n * @property {Object.<String, String>} headers\r\n * @property {Number} status\r\n * @property {String} statusText\r\n * @property {XMLHttpRequest} xhr\r\n */\r\n\r\n/**\r\n * @callback FetchAfterMiddleware\r\n * @public\r\n * @param {FetchResponse} config - Fetch response.\r\n */\r\n\r\n/**\r\n * @callback FetchErrorAfterMiddleware\r\n * @public\r\n * @param {Error|*} err - Thrown error.\r\n * @param {FetchResponse} config - Fetch response.\r\n */\r\n\r\n/**\r\n * @callback FetchBeforeMiddleware\r\n * @public\r\n * @param {FetchConfig} config - Fetch config.\r\n */\r\n\r\n/**\r\n * @callback FetchErrorBeforeMiddleware\r\n * @public\r\n * @param {Error|*} err - Thrown error.\r\n * @param {FetchConfig} config - Fetch config.\r\n */\r\n\r\n/**\r\n * @callback FetchConfigFunction\r\n * @public\r\n * @param {FetchConfig} config\r\n */\r\n\r\nconst defaults = {\r\n  after: [],\r\n  auth: {\r\n    username: '',\r\n    password: ''\r\n  },\r\n  baseURL: global.location.origin,\r\n  before: [],\r\n  data: null,\r\n  headers: {},\r\n  method: 'get',\r\n  params: {},\r\n  query: {},\r\n  responseType: '',\r\n  timeout: 0,\r\n  url: '',\r\n  withCredentials: false\r\n};\r\nconst uploadMethods = new Arr(['post', 'put']);\r\n\r\n/**\r\n * @class Fetch\r\n * @extends Function\r\n * @public\r\n * @param {FetchConfig} [config = {}] - A number to wrap.\r\n * @returns {Fetch} Instance of Fetch.\r\n * An instance of Fetch is a function that simply calls #request with the same arguments.\r\n * @description Class for fetching data.\r\n *\r\n * @example\r\n * const fetch = new Fetch();\r\n *\r\n * fetch('/data').then((res) => {\r\n *   console.log(res);\r\n * });\r\n */\r\nclass Fetch extends Function {\r\n  constructor(config = {}) {\r\n    super();\r\n\r\n    function fetch() {\r\n      return fetch.request.apply(fetch, arguments);\r\n    }\r\n\r\n    const conf = new Super({}).deepAssign(defaults, config).$;\r\n\r\n    if (conf.before.indexOf(fetchBeforeMiddleware) === -1) {\r\n      conf.before.push(fetchBeforeMiddleware);\r\n    }\r\n\r\n    /**\r\n     * @member {FetchConfig} Fetch#$$\r\n     * @type {FetchConfig}\r\n     * @public\r\n     * @description Fetch config.\r\n     */\r\n    Object.defineProperty(fetch, '$$', { value: conf });\r\n    Object.setPrototypeOf(fetch, Fetch.prototype);\r\n\r\n    return fetch;\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#after\r\n   * @public\r\n   * @param {FetchAfterMiddleware|FetchErrorAfterMiddleware} middleware - Middleware to add.\r\n   * @param {Boolean|*} [afterAll = true] - Boolean parameter where to put the middleware.\r\n   * Truthy parameter stands for \"to the end\" and falsey for \"to the beginning\".\r\n   * @returns {Fetch} Returns this.\r\n   * @description Middleware that is called after the request.\r\n   * If the middleware has 2 or less arguments it's treated as success middleware otherwise as an error one.\r\n   * If the middleware returns a promise it becomes a part of the middleware chain.\r\n   *\r\n   * @example\r\n   * const fetch = new Fetch()\r\n   *   .after((err, res) => {\r\n   *     console.log(err);\r\n   *\r\n   *     throw err;\r\n   *   })\r\n   *   .after((res) => {\r\n   *     res.json = D(res.data).parseJSON():\r\n   *   });\r\n   */\r\n  after(middleware, afterAll = true) {\r\n    validate([middleware], ['function'], 'Fetch#after');\r\n\r\n    const { after } = this.$$;\r\n\r\n    if (afterAll) {\r\n      after.push(middleware);\r\n    } else {\r\n      after.unshift(middleware);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#before\r\n   * @public\r\n   * @param {FetchBeforeMiddleware|FetchErrorBeforeMiddleware} middleware - Middleware to add.\r\n   * @param {Boolean|*} [beforeAll = true] - Boolean parameter where to put the middleware.\r\n   * Truthy parameter stands for \"to the beginning\" and falsey for \"to the end\".\r\n   * @returns {Fetch} Returns this.\r\n   * @description Middleware that is called before the request.\r\n   * If the middleware has 2 or less arguments it's treated as success middleware otherwise as an error one.\r\n   * If the middleware returns a promise it becomes a part of the middleware chain.\r\n   *\r\n   * @example\r\n   * const fetch = new Fetch()\r\n   *   .before((err, req) => {\r\n   *     console.log(err);\r\n   *\r\n   *     throw err;\r\n   *   })\r\n   *   .before((req) => {\r\n   *     if (req.url === '/veryLongRequest') {\r\n   *       req.timeout = 30000;\r\n   *     }\r\n   *   });\r\n   */\r\n  before(middleware, beforeAll = true) {\r\n    validate([middleware], ['function'], 'Fetch#before');\r\n\r\n    const { before } = this.$$;\r\n\r\n    if (beforeAll) {\r\n      before.unshift(middleware);\r\n    } else {\r\n      before.push(middleware);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#config\r\n   * @public\r\n   * @param {String|FetchConfig|FetchConfigFunction} [property] - If it's a function\r\n   * it's called with the fetch config argument, if it's a string the value argument\r\n   * is used for assigning this property to the fetch config\r\n   * otherwise it's assigned to the fetch config.\r\n   * @param {*} [value] - See the property argument.\r\n   * @returns {Fetch|FetchConfig} If the argument is present this is returned otherwise the fetch config is returned.\r\n   * @description Method for getting and setting config.\r\n   *\r\n   * @example\r\n   * const fetch = new Fetch();\r\n   *\r\n   * fetch.config({ baseURL: 5000 });\r\n   * fetch.config().timeout; // 5000\r\n   *\r\n   * fetch.config((config) => {\r\n   *   config.baseURL += '/api';\r\n   * });\r\n   */\r\n  config(property, value) {\r\n    const conf = this.$$;\r\n\r\n    if (!arguments.length) {\r\n      return conf;\r\n    }\r\n\r\n    if (isFunction(property)) {\r\n      property(conf);\r\n    } else {\r\n      if (arguments.length >= 2) {\r\n        property = { [property]: value };\r\n      }\r\n\r\n      new Super(conf).deepAssign(property);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#delete\r\n   * @public\r\n   * @param {String} [url] - See {@link Fetch#request}.\r\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\r\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\r\n   * @description Shorthand for #request for delete requests.\r\n   *\r\n   * @example\r\n   * new Fetch().delete('/data').then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  delete(url, config = {}) {\r\n    if (!isString(url)) {\r\n      config = url;\r\n      url = undefined;\r\n    }\r\n\r\n    return this.request(url, assign({ method: 'delete' }, config));\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#get\r\n   * @public\r\n   * @param {String} [url] - See {@link Fetch#request}.\r\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\r\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\r\n   * @description Shorthand for #request for get requests.\r\n   *\r\n   * @example\r\n   * new Fetch().get('/data').then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  get(url, config = {}) {\r\n    if (!isString(url)) {\r\n      config = url;\r\n      url = undefined;\r\n    }\r\n\r\n    return this.request(url, assign({ method: 'get' }, config));\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#head\r\n   * @public\r\n   * @param {String} [url] - See {@link Fetch#request}.\r\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\r\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\r\n   * @description Shorthand for #request for head requests.\r\n   *\r\n   * @example\r\n   * new Fetch().head('/data').then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  head(url, config = {}) {\r\n    if (!isString(url)) {\r\n      config = url;\r\n      url = undefined;\r\n    }\r\n\r\n    return this.request(url, assign({ method: 'head' }, config));\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#headers\r\n   * @public\r\n   * @param {String|Object.<String, String|String[]>} header - A header string or an object of the following format:\r\n   * { [header]: [value1, value2, ...] }.\r\n   * @param {String|String[]} [value] - Header value. If the first argument is a string\r\n   * this has to be a header value or an array of header values.\r\n   * @returns {Fetch} Returns this.\r\n   * @description Method for setting request headers.\r\n   *\r\n   * @example\r\n   * const fetch = new Fetch()\r\n   *   .headers('Header1', 'Value')\r\n   *   .headers('Header2', ['Value1', 'Value2'])\r\n   *   .headers({\r\n   *     Header3: ['Value1', 'Value2']\r\n   *   });\r\n   */\r\n  headers(header, value) {\r\n    const { headers } = this.$$;\r\n\r\n    if (arguments.length >= 2) {\r\n      header = { [header]: value };\r\n    }\r\n\r\n    iterate(header, (value, header) => {\r\n      const array = headers[header] || [];\r\n      const toPush = isArray(value) ? value : [value];\r\n\r\n      (headers[header] = array).push.apply(array, toPush);\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#instance\r\n   * @public\r\n   * @param {FetchConfig} [config] - New config if needed.\r\n   * @returns {Fetch} New instance of Fetch.\r\n   * @description Method for creating new fetch instances based on already existent.\r\n   *\r\n   * @example\r\n   * const mainFetch = new Fetch({\r\n   *   baseURL: '//other.domain.com/api',\r\n   *   withCredentials: true\r\n   * });\r\n   *\r\n   * const longFetch = mainFetch.instance({\r\n   *   timeout: 10000\r\n   * });\r\n   */\r\n  instance(config = {}) {\r\n    const dataConfig = new Super(config).hasOwn('data')\r\n      ? { data: config.data }\r\n      : {};\r\n\r\n    delete config.data;\r\n\r\n    const conf = new Super({})\r\n      .deepAssign(this.$$, config)\r\n      .assign(dataConfig)\r\n      .$;\r\n\r\n    return new Fetch(conf);\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#patch\r\n   * @public\r\n   * @param {String} [url] - See {@link Fetch#request}.\r\n   * @param {*} [data] - Additional parameter for uploading data.\r\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\r\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\r\n   * @description Shorthand for #request for head requests.\r\n   *\r\n   * @example\r\n   * new Fetch().patch('/data', { user: 'John' }).then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  patch(url, data = {}, config = {}) {\r\n    if (arguments.length && !isString(url)) {\r\n      config = data;\r\n      data = url;\r\n      url = undefined;\r\n    }\r\n\r\n    return this.request(url, assign({ method: 'patch', data }, config));\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#post\r\n   * @public\r\n   * @param {String} [url] - See {@link Fetch#request}.\r\n   * @param {*} [data] - Additional parameter for uploading data.\r\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\r\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\r\n   * @description Shorthand for #request for head requests.\r\n   *\r\n   * @example\r\n   * new Fetch().post('/data', { user: 'John' }).then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  post(url, data = {}, config = {}) {\r\n    if (arguments.length && !isString(url)) {\r\n      config = data;\r\n      data = url;\r\n      url = undefined;\r\n    }\r\n\r\n    return this.request(url, assign({ method: 'post', data }, config));\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#put\r\n   * @public\r\n   * @param {String} [url] - See {@link Fetch#request}.\r\n   * @param {*} [data] - Additional parameter for uploading data.\r\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\r\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\r\n   * @description Shorthand for #request for head requests.\r\n   *\r\n   * @example\r\n   * new Fetch().put('/data', { user: 'John' }).then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  put(url, data = {}, config = {}) {\r\n    if (arguments.length && !isString(url)) {\r\n      config = data;\r\n      data = url;\r\n      url = undefined;\r\n    }\r\n\r\n    return this.request(url, assign({ method: 'put', data }, config));\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#request\r\n   * @public\r\n   * @param {String} [url] - URL for the request.\r\n   * @param {FetchConfig} [config] - Additional config for this particular request.\r\n   * @returns {Promise.<FetchResponse, Error>} Promise that is resolved with the request response.\r\n   * @description Main function for making requests. All request methods call this method\r\n   * including the fetch instance itself.\r\n   *\r\n   * @example\r\n   * const fetch = new Fetch();\r\n   *\r\n   * fetch.request('/data', { timeout: 1000 }).then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   *\r\n   * fetch.request({ timeout: 1000 }).then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   *\r\n   * fetch.request().then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  request(url, config = {}) {\r\n    if (arguments.length === 1 && !isString(url)) {\r\n      config = url;\r\n    }\r\n\r\n    const dataConfig = new Super(config).hasOwn('data')\r\n      ? { data: config.data }\r\n      : {};\r\n    const urlConfig = isString(url)\r\n      ? { url }\r\n      : {};\r\n\r\n    delete config.data;\r\n\r\n    const conf = new Super(this.$$)\r\n      .deepClone()\r\n      .deepAssign(urlConfig, config)\r\n      .assign(dataConfig)\r\n      .$;\r\n\r\n    let xhr;\r\n    let promise = Promise.resolve();\r\n\r\n    iterate(conf.before, (middleware) => {\r\n      promise = promise.then(() => {\r\n        if (middleware.length >= 2) {\r\n          return Promise.resolve();\r\n        }\r\n\r\n        return new Promise((resolve) => {\r\n          resolve(middleware(conf));\r\n        });\r\n      }, (err) => {\r\n        if (middleware.length < 2) {\r\n          return Promise.reject(err);\r\n        }\r\n\r\n        return new Promise((resolve) => {\r\n          resolve(middleware(err, conf));\r\n        });\r\n      });\r\n    });\r\n\r\n    promise = promise.then(() => new Promise((resolve, reject) => {\r\n      const {\r\n        after,\r\n        auth: {\r\n          username,\r\n          password\r\n        },\r\n        data,\r\n        headers,\r\n        method,\r\n        onprogress,\r\n        responseType,\r\n        timeout,\r\n        url,\r\n        withCredentials\r\n      } = conf;\r\n\r\n      xhr = new XMLHttpRequest();\r\n\r\n      xhr.open(method, url, true, username, password);\r\n\r\n      iterate(headers, (value, header) => {\r\n        xhr.setRequestHeader(header, value);\r\n      });\r\n\r\n      if (onprogress) {\r\n        if (uploadMethods.indexOfStrict(method) === -1) {\r\n          xhr.onprogress = onprogress;\r\n        } else {\r\n          xhr.upload.onprogress = onprogress;\r\n        }\r\n      }\r\n\r\n      xhr.onabort = () => {\r\n        reject(new Error('Request was aborted'));\r\n\r\n        xhr = null;\r\n      };\r\n\r\n      xhr.onerror = () => {\r\n        reject(new Error('Network error'));\r\n\r\n        xhr = null;\r\n      };\r\n\r\n      xhr.ontimeout = () => {\r\n        reject(new Error('Request time exceeded'));\r\n\r\n        xhr = null;\r\n      };\r\n\r\n      xhr.onreadystatechange = () => {\r\n        if (!xhr || !xhr.status || xhr.readyState !== 4) {\r\n          return;\r\n        }\r\n\r\n        const response = {\r\n          config: conf,\r\n          data: !responseType || responseType === 'text' ? xhr.responseText : xhr.response,\r\n          headers: parseHeaders(xhr.getAllResponseHeaders()),\r\n          status: xhr.status === 1223 ? 204 : xhr.status,\r\n          statusText: xhr.status === 1223 ? 'No Content' : xhr.statusText,\r\n          xhr\r\n        };\r\n\r\n        let promise = Promise.resolve();\r\n\r\n        iterate(after, (middleware) => {\r\n          promise = promise.then(() => {\r\n            if (middleware.length >= 2) {\r\n              return Promise.resolve();\r\n            }\r\n\r\n            return new Promise((resolve) => {\r\n              resolve(middleware(response));\r\n            });\r\n          }, (err) => {\r\n            if (middleware.length < 2) {\r\n              return Promise.reject(err);\r\n            }\r\n\r\n            return new Promise((resolve) => {\r\n              resolve(middleware(err, response));\r\n            });\r\n          });\r\n        });\r\n\r\n        resolve(promise\r\n          .then(() => response)\r\n          .catch((err) => {\r\n            try {\r\n              err.response = response;\r\n            } catch (e) {\r\n              throw err;\r\n            }\r\n\r\n            throw err;\r\n          })\r\n        );\r\n      };\r\n\r\n      xhr.responseType = responseType;\r\n      xhr.timeout = Number(timeout) || 0;\r\n      xhr.withCredentials = !!withCredentials;\r\n\r\n      xhr.send(data);\r\n    }));\r\n\r\n    promise.abort = function abort() {\r\n      if (xhr) {\r\n        xhr.abort();\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\n    return promise;\r\n  }\r\n}\r\n\r\ndefineProperties(Fetch.prototype, {\r\n  [Symbol.toStringTag]: 'Fetch'\r\n});\r\n\r\n/**\r\n * @function fetchBeforeMiddleware\r\n * @private\r\n * @param {FetchConfig} config\r\n * @description Built-in before middleware for url, data, method, headers construction.\r\n */\r\nfunction fetchBeforeMiddleware(config) {\r\n  const {\r\n    baseURL,\r\n    data,\r\n    headers,\r\n    method,\r\n    params,\r\n    query,\r\n    url\r\n  } = config;\r\n  const METHOD = method.toUpperCase();\r\n\r\n  config.method = METHOD;\r\n  config.url = constructURL(baseURL, url, params, query);\r\n  config.data = transformData(data, METHOD, headers);\r\n  config.headers = new Super(headers).object((headers, values, header) => {\r\n    header = new Str(header)\r\n      .toCapitalCase()\r\n      .replace(/\\s+/g, '-')\r\n      .$;\r\n\r\n    headers[header] = values.join(', ');\r\n  }).$;\r\n}\r\n\r\n/**\r\n * @const {Fetch} fetch\r\n * @type {Fetch}\r\n * @public\r\n * @description Empty instance of Fetch.\r\n */\r\nconst fetch = new Fetch();\r\n\r\nexport { Fetch, fetch };\r\n","/**\r\n * @module Router\r\n * @private\r\n * @mixin\r\n * @description Exports Router.\r\n */\r\n\r\nimport { Arr } from './Arr';\r\nimport { Elem, win } from './Elem';\r\nimport { self } from './Func';\r\nimport { Str } from './Str';\r\nimport { Super } from './Super';\r\nimport { switcher } from './Switcher';\r\nimport { assign, isNil, isRegExp, isString } from './helpers';\r\nimport constructURL from './helpers/constructURL';\r\nimport resolveURL from './helpers/resolveURL';\r\n\r\nconst Routes = new Arr([]);\r\nconst subscribers = new Super({});\r\nconst {\r\n  history,\r\n  location,\r\n  location: {\r\n    origin,\r\n    href\r\n  }\r\n} = global;\r\nlet initialized;\r\nlet pushed;\r\nlet wasRoot;\r\nlet wasDefault;\r\nlet rootRoute;\r\nlet redirectRoute;\r\nlet RedirectRoute;\r\nlet defaultRoute;\r\nlet DefaultRoute;\r\nlet currentRoute;\r\nlet currentRouteParams;\r\n\r\nconst pathSwitcher = switcher('call', () => {\r\n  throw new Error('State path must be a string, a regular expression or undefined! (at registerState)');\r\n})\r\n  .case(isRegExp, (path) => ({\r\n    path: path.source.replace(/\\\\\\//g, '/'),\r\n    url: path,\r\n    params: {}\r\n  }))\r\n  .case(isNil, () => ({\r\n    path: '/',\r\n    url: '/',\r\n    params: {}\r\n  }))\r\n  .case(isString, (path) => {\r\n    if (path.indexOf('/')) {\r\n      throw new Error('If route path is a string it must start with \"/\"! (at registerState)');\r\n    }\r\n\r\n    const index = path.indexOf('?');\r\n    const params = new Super({});\r\n    let newURL = '';\r\n    const newPath = new Str(path)\r\n      .slice(0, index === -1 ? path.length : index)\r\n      .replace(/^\\/|\\/$/g)\r\n      .split(/\\//)\r\n      .map((part, i, array) => {\r\n        if (!part && array.length > 1) {\r\n          throw new Error('If route path is a string it must not contain \"//\" or end with \"/\"! (at makeRoute)');\r\n        }\r\n\r\n        const index = part.indexOf(':');\r\n\r\n        if (index > 0) {\r\n          throw new Error('If route path is a string resource part must be either a string or an URL parameter! (at makeRoute)');\r\n        }\r\n\r\n        if (index === -1) {\r\n          return {\r\n            url: part,\r\n            value: part\r\n          };\r\n        }\r\n\r\n        const {\r\n          name,\r\n          regexp = /[^/]*/\r\n        } = resolveParameter(\r\n          part.slice(1),\r\n          'URL parameter must not be an empty string or contain characters besides \"a-zA-Z_$\"! (at makeRoute)',\r\n          'URL parameter regexp validator must be within parentheses (e.g. :userId(\\\\d+) and not contain ones)! (at makeRoute)'\r\n        );\r\n\r\n        params.$[name] = params.count;\r\n\r\n        return {\r\n          type: 'param',\r\n          url: `:${ name }`,\r\n          value: regexp\r\n        };\r\n      })\r\n      .word(({ type, url, value }) => {\r\n        let newPath;\r\n\r\n        if (type === 'param') {\r\n          newPath = `(${ value.source.replace(/\\\\\\//g, '/') })`;\r\n        } else {\r\n          newPath = new Str(value).escapeRegExp().$;\r\n        }\r\n\r\n        newURL += `/${ url }`;\r\n\r\n        return `/${ newPath }`;\r\n      });\r\n\r\n    return {\r\n      path: newPath,\r\n      url: newURL,\r\n      params: params.$\r\n    };\r\n  });\r\n\r\nclass Route {\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    const {\r\n      name,\r\n      path = '/',\r\n      abstract = false,\r\n      parent,\r\n      decodeQuery = true,\r\n      encodeQuery = true,\r\n      decodeParams = true,\r\n      encodeParams = true\r\n    } = options || {};\r\n    const {\r\n      url: relativeURL,\r\n      path: relativePath,\r\n      params\r\n    } = pathSwitcher(path);\r\n    const query = {};\r\n\r\n    new Super(this).assign({\r\n      name,\r\n      parentName: parent,\r\n      abstract: !!abstract,\r\n      children: new Arr([]),\r\n      decodeParams: !!decodeParams,\r\n      decodeQuery: !!decodeQuery,\r\n      encodeParams: !!encodeParams,\r\n      encodeQuery: !!encodeQuery,\r\n      params,\r\n      query,\r\n      relativePath,\r\n      relativeURL\r\n    });\r\n\r\n    const index = isString(path) ? path.indexOf('?') : -1;\r\n\r\n    if (index !== -1) {\r\n      new Str(path)\r\n        .replace(/&$/)\r\n        .slice(index + 1)\r\n        .split('&')\r\n        .forEach((param) => {\r\n          const {\r\n            name,\r\n            regexp = /[\\s\\S]*/\r\n          } = resolveParameter(\r\n            param,\r\n            'Query parameter must not be an empty string or contain characters besides \"a-zA-Z_$\"! (at makeRoute)',\r\n            'Query parameter regexp validator must be within parentheses (e.g. :userId(\\\\d+)) and not contain them! (at makeRoute)'\r\n          );\r\n\r\n          query[name] = new RegExp(`^${ regexp.source.replace(/\\\\\\//g, '/') }$`);\r\n        });\r\n    }\r\n\r\n    if (name === defaultRoute && (\r\n        new Super(params).count\r\n        || new Super(query).count\r\n      )) {\r\n      throw new Error('Default route must not have URL or query params! (at makeRoute)');\r\n    }\r\n  }\r\n}\r\n\r\nconst baseRoute = new Route();\r\n\r\nfunction initRouter() {\r\n  if (initialized) {\r\n    return;\r\n  }\r\n\r\n  initialized = true;\r\n  RedirectRoute = (Routes.find(({ name }) => name === redirectRoute) || {}).value;\r\n  DefaultRoute = (Routes.find(({ name }) => name === defaultRoute) || {}).value;\r\n\r\n  if (redirectRoute && !RedirectRoute) {\r\n    throw new Error(`There is no specified fallback route (\"${ redirectRoute }\")! (at initRouter)`);\r\n  }\r\n\r\n  Routes\r\n    .forEach((route) => {\r\n      const {\r\n        parentName,\r\n        name\r\n      } = route;\r\n      const ParentName = parentName || rootRoute;\r\n      const { value: parent } = Routes.find(({ name }) => name === ParentName) || {};\r\n\r\n      if (!parent) {\r\n        throw new Error(`No such parent route (\"${ ParentName }\") found for the route (\"${ name }\")! (at initRouter)`);\r\n      }\r\n\r\n      if (!parent.abstract && name !== rootRoute) {\r\n        throw new Error(`Parent route must be abstract (for \"${ name }\")! (at initRouter)`);\r\n      }\r\n\r\n      if (name !== rootRoute) {\r\n        route.parentName = ParentName;\r\n      }\r\n\r\n      route.parent = name === rootRoute\r\n        ? baseRoute\r\n        : parent;\r\n    })\r\n    .forEach((route) => {\r\n      const {\r\n        name,\r\n        parent: {\r\n          params: parentParams,\r\n          query: parentQuery,\r\n          path\r\n        },\r\n        params,\r\n        query,\r\n        relativeURL,\r\n        relativePath\r\n      } = route;\r\n      let proto = route;\r\n      let count = 0;\r\n      let newPath = relativePath;\r\n      let newURL = '';\r\n\r\n      if (isRegExp(path)) {\r\n        throw new Error('URL regexp route cannot be extended! (at initRouter)');\r\n      }\r\n\r\n      while (proto = proto.parent) {\r\n        count += new Super(proto.params).count;\r\n        newPath = proto.relativePath + newPath;\r\n        newURL = proto.relativeURL + newURL;\r\n\r\n        proto.children.push(route);\r\n      }\r\n\r\n      newPath = new RegExp(`^${ newPath.replace(/\\/+/g, '/').replace(/\\/$/, '') || '/' }$`);\r\n      newURL = isRegExp(relativeURL)\r\n        ? newPath\r\n        : (newURL + relativeURL).replace(/\\/+/g, '/').replace(/\\/$/, '') || '/';\r\n\r\n      new Super(query).proto(parentQuery);\r\n      new Super(params)\r\n        .proto(parentParams)\r\n        .forEach((value, key, params) => {\r\n          params[key] += count;\r\n        });\r\n\r\n      if (name === defaultRoute && (\r\n          new Super(params).count\r\n          || new Super(query).count\r\n        )) {\r\n        throw new Error('Default route must not have URL or query params! (at initRouter)');\r\n      }\r\n\r\n      route.url = newURL;\r\n      route.validatePath = newPath;\r\n    });\r\n\r\n  changeRoute();\r\n\r\n  win.on({\r\n    popstate() {\r\n      if (location.href !== href) {\r\n        pushed = true;\r\n      }\r\n\r\n      if (pushed) {\r\n        changeRoute();\r\n      }\r\n    },\r\n    click(e) {\r\n      const closestLink = new Elem(e.target).closest('a');\r\n\r\n      if (closestLink.length && closestLink.attr('target') !== '_blank') {\r\n        e.preventDefault();\r\n\r\n        forward(closestLink.attr('href') || '', true);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nfunction makeRoute(options) {\r\n  const {\r\n    name,\r\n    path,\r\n    abstract,\r\n    root,\r\n    fallbackTo,\r\n    default: isDefault\r\n  } = options || {};\r\n\r\n  if (initialized) {\r\n    console.warn('Router was already initialized (at makeRoute)');\r\n\r\n    return self;\r\n  }\r\n\r\n  if (wasRoot && root) {\r\n    throw new Error(`There can't be two root routes (\"${ rootRoute }\" and \"${ name }\")! (at makeRoute)`);\r\n  }\r\n\r\n  if (wasDefault && isDefault) {\r\n    throw new Error(`There can't be two default routes (\"${ defaultRoute }\" and \"${ name }\")! (at makeRoute)`);\r\n  }\r\n\r\n  if (!name) {\r\n    throw new Error('State must have a non-empty string \"name\" property! (at makeRoute)');\r\n  }\r\n\r\n  if (Routes.some(({ name: Name }) => Name === name)) {\r\n    throw new Error('State must have unique \"name\" property! (at makeRoute)');\r\n  }\r\n\r\n  if (root) {\r\n    wasRoot = true;\r\n    rootRoute = name;\r\n    options.parent = null;\r\n\r\n    if (fallbackTo) {\r\n      redirectRoute = fallbackTo;\r\n    }\r\n  }\r\n\r\n  if (isDefault) {\r\n    wasDefault = true;\r\n    defaultRoute = name;\r\n\r\n    if (abstract) {\r\n      throw new Error('Default route can\\'t be abstract! (at makeRoute)');\r\n    }\r\n\r\n    if (isRegExp(path)) {\r\n      throw new Error('Default route can\\'t have a regexp path! (at makeRoute)');\r\n    }\r\n  }\r\n\r\n  const route = new Route(options);\r\n\r\n  Routes.push(route);\r\n\r\n  let unsubscribe;\r\n  let routeLoaded;\r\n\r\n  return (Block) => (\r\n    class extends Block {\r\n      static template = `<div class=\"dwayne-route route-${ name }\" d-show=\"{__isCurrentRoute__}\">${ Block.template }</div>`;\r\n\r\n      constructor(opts) {\r\n        super(opts);\r\n\r\n        if (root) {\r\n          initRouter();\r\n\r\n          const router = {\r\n            buildURL(name, options = {}) {\r\n              const { value: route } = Routes.find(({ name: n }) => n === name) || {};\r\n\r\n              if (!route) {\r\n                throw new Error(`There are no routes with name \"${ name }\"! (at router.buildURL)`);\r\n              }\r\n\r\n              const {\r\n                url,\r\n                encodeParams,\r\n                encodeQuery\r\n              } = route;\r\n\r\n              if (isRegExp(url)) {\r\n                throw new Error('URL can be built only from the string URLs! (at router.buildURL)');\r\n              }\r\n\r\n              const {\r\n                params = {},\r\n                query = {},\r\n                hash = ''\r\n              } = options;\r\n\r\n              return constructURL(origin, url, params, query, hash, {\r\n                params: encodeParams,\r\n                query: encodeQuery\r\n              });\r\n            },\r\n            go(name, options) {\r\n              forward(router.buildURL(name, options), true);\r\n            },\r\n            goToURL(url) {\r\n              forward(url, true);\r\n            },\r\n            pushURL(url) {\r\n              changeHistory(url, true);\r\n            },\r\n            redirect(name, options) {\r\n              forward(router.buildURL(name, options));\r\n            },\r\n            redirectToURL(url) {\r\n              forward(url);\r\n            },\r\n            replaceURL(url) {\r\n              changeHistory(url);\r\n            }\r\n          };\r\n\r\n          this.global.router = router;\r\n        }\r\n\r\n        this.__isCurrentRoute__ = (\r\n          route === currentRoute\r\n          || route.children.indexOf(currentRoute) !== -1\r\n        );\r\n        this.args.route = currentRouteParams;\r\n\r\n        routeLoaded = false;\r\n        unsubscribe = subscribe(name, () => {\r\n          const isCurrentRoute = (\r\n            route === currentRoute\r\n            || route.children.indexOf(currentRoute) !== -1\r\n          );\r\n\r\n          if (isCurrentRoute) {\r\n            callBeforeLoad(this);\r\n          } else {\r\n            callBeforeLeave(this);\r\n          }\r\n\r\n          this.args.route = currentRouteParams;\r\n          this.__isCurrentRoute__ = isCurrentRoute;\r\n        });\r\n\r\n        if (this.__isCurrentRoute__) {\r\n          callBeforeLoad(this);\r\n        }\r\n      }\r\n\r\n      beforeRemove() {\r\n        unsubscribe();\r\n        unsubscribe = null;\r\n        callBeforeLeave(this);\r\n        super.beforeRemove();\r\n      }\r\n    }\r\n  );\r\n\r\n  function callBeforeLoad(route) {\r\n    if (route.beforeLoadRoute && !routeLoaded) {\r\n      try {\r\n        route.beforeLoadRoute();\r\n      } catch (err) {\r\n        console.error(`Uncaught error in ${ name }#beforeLeave:`, err);\r\n      }\r\n    }\r\n\r\n    routeLoaded = true;\r\n  }\r\n\r\n  function callBeforeLeave(route) {\r\n    if (route.beforeLeaveRoute && routeLoaded) {\r\n      try {\r\n        route.beforeLeaveRoute();\r\n      } catch (err) {\r\n        console.error(`Uncaught error in ${ name }#beforeLeave:`, err);\r\n      }\r\n    }\r\n\r\n    routeLoaded = false;\r\n  }\r\n}\r\n\r\nfunction subscribe(name, callback) {\r\n  subscribers.$[name] = callback;\r\n\r\n  return () => {\r\n    subscribers.delete(name);\r\n  };\r\n}\r\n\r\nfunction forward(url, push) {\r\n  changeHistory(url, push);\r\n  changeRoute();\r\n}\r\n\r\nfunction changeRoute() {\r\n  const route = findRouteByURL();\r\n\r\n  if (route) {\r\n    ({\r\n      route: currentRoute,\r\n      ...currentRouteParams\r\n    } = route);\r\n    assign(currentRouteParams, {\r\n      name: currentRoute.name,\r\n      host: location.host,\r\n      hostname: location.hostname,\r\n      href: location.href,\r\n      origin: location.origin,\r\n      pathname: location.pathname,\r\n      port: location.port,\r\n      protocol: location.protocol,\r\n      search: location.search\r\n    });\r\n  } else {\r\n    if (redirectRoute) {\r\n      const {\r\n        url,\r\n        encodeParams,\r\n        encodeQuery\r\n      } = RedirectRoute;\r\n\r\n      return forward(constructURL(origin, url, {}, {}, '', {\r\n        params: encodeParams,\r\n        query: encodeQuery\r\n      }));\r\n    }\r\n\r\n    currentRoute = null;\r\n    currentRouteParams = null;\r\n  }\r\n\r\n  subscribers.forEach((callback) => callback());\r\n}\r\n\r\nfunction findRouteByURL() {\r\n  const pathname = location.pathname || '/';\r\n  const search = location.search || '';\r\n  let urlParams;\r\n\r\n  Routes.some((route) => {\r\n    if (route.abstract) {\r\n      return;\r\n    }\r\n\r\n    const {\r\n      url: routeURL,\r\n      validatePath,\r\n      params,\r\n      query: requiredQuery,\r\n      decodeParams,\r\n      decodeQuery\r\n    } = route;\r\n    const resolved = resolveURL(decodeQuery);\r\n    const query = new Super(resolved.query);\r\n    const eventualParams = {};\r\n    const match = (\r\n      (pathname.replace(/\\/$/, '') || '/') +\r\n      (isRegExp(routeURL) ? search : '')\r\n    ).match(validatePath);\r\n\r\n    if (!match) {\r\n      return;\r\n    }\r\n\r\n    /* eslint guard-for-in: 0 */\r\n    for (const param in requiredQuery) {\r\n      if (!query.hasOwn(param) || !requiredQuery[param].test(query.$[param])) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    match.shift();\r\n\r\n    for (const param in params) {\r\n      eventualParams[param] = decode(match[params[param]], decodeParams);\r\n    }\r\n\r\n    urlParams = {\r\n      route,\r\n      params: eventualParams,\r\n      query: query.$,\r\n      hash: resolved.hash\r\n    };\r\n\r\n    return true;\r\n  });\r\n\r\n  if (urlParams) {\r\n    return urlParams;\r\n  }\r\n\r\n  if (!defaultRoute) {\r\n    return;\r\n  }\r\n\r\n  return {\r\n    route: DefaultRoute,\r\n    params: {},\r\n    ...resolveURL(DefaultRoute.decodeQuery)\r\n  };\r\n}\r\n\r\nfunction decode(string, decodeParams) {\r\n  return decodeParams\r\n    ? decodeURIComponent(string)\r\n    : string;\r\n}\r\n\r\nfunction changeHistory(url, push) {\r\n  try {\r\n    history[push ? 'pushState' : 'replaceState'](null, null, url);\r\n    pushed = true;\r\n  } catch (err) {\r\n    location.href = url;\r\n  }\r\n}\r\n\r\nfunction resolveParameter(param, nameErrorName, valueErrorName) {\r\n  const nameMatch = param.match(/^[a-z_$]+/i);\r\n\r\n  if (!nameMatch) {\r\n    throw new Error(nameErrorName);\r\n  }\r\n\r\n  const name = nameMatch[0];\r\n  const value = param.slice(name.length);\r\n  let regexp;\r\n\r\n  if (value && (value.indexOf('(') || value.indexOf(')') !== value.length - 1)) {\r\n    throw new Error(valueErrorName);\r\n  }\r\n\r\n  if (value) {\r\n    regexp = new RegExp(value.slice(1, -1));\r\n  }\r\n\r\n  return {\r\n    name,\r\n    regexp\r\n  };\r\n}\r\n\r\nexport { makeRoute };\r\n","/* eslint no-nested-ternary: 0 */\r\n/* eslint no-negated-condition: 0 */\r\nexport default typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\r\n","/**\r\n * @module constants/appliedRegExps\r\n * @private\r\n * @description Exports different types of syntax for {@link Elem#apply}.\r\n */\r\n\r\n/**\r\n * @callback matchAppliedExprCallback\r\n * @param {Elem} elem - D-elem of an element to apply expression to.\r\n * @param {String} string - Matched applied name.\r\n * @param {String} arg - Argument within the parentheses.\r\n */\r\n\r\n/**\r\n * @type {Object.<String, matchAppliedExprCallback|Object.<String, matchAppliedExprCallback>>}\r\n * @description Object of different types of syntax.\r\n */\r\n\r\nexport const appliedRegExps = {\r\n  '#'(elem, id) {\r\n    elem.id(id);\r\n  },\r\n  '.'(elem, cls) {\r\n    elem.addClass(cls);\r\n  },\r\n  $(elem, attr, value) {\r\n    elem.attr(attr, value);\r\n  },\r\n  '@'(elem, prop, value) {\r\n    elem.css(prop, value);\r\n  },\r\n  '&'(elem, name, html) {\r\n    elem.html(html);\r\n  },\r\n  '*'(elem, name, text) {\r\n    elem.text(text);\r\n  },\r\n  '-': {\r\n    '.'(elem, cls) {\r\n      elem.removeClass(cls);\r\n    },\r\n    $(elem, attr) {\r\n      elem.removeAttr(attr);\r\n    },\r\n    '@'(elem, prop) {\r\n      elem.removeCSS(prop);\r\n    }\r\n  }\r\n};\r\n","/**\r\n * @module constants/elements\r\n * @private\r\n * @description Exports different canvas methods for {@link Elem} for creating html-elements.\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {String[]}\r\n */\r\nexport const canvasGetMethods = [\r\n  /**\r\n   * @member {Function} Elem#createImageData\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {ImageData|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/createImageData\r\n   */\r\n  'createImageData',\r\n\r\n  /**\r\n   * @member {Function} Elem#createLinearGradient\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {CanvasGradient|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/createLinearGradient\r\n   */\r\n  'createLinearGradient',\r\n\r\n  /**\r\n   * @member {Function} Elem#createPattern\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {CanvasPattern|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/createPattern\r\n   */\r\n  'createPattern',\r\n\r\n  /**\r\n   * @member {Function} Elem#createRadialGradient\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {CanvasGradient|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/createRadialGradient\r\n   */\r\n  'createRadialGradient',\r\n\r\n  /**\r\n   * @member {Function} Elem#getImageData\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {ImageData|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/getImageData\r\n   */\r\n  'getImageData',\r\n\r\n  /**\r\n   * @member {Function} Elem#getLineDash\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Number[]|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/getLineDash\r\n   */\r\n  'getLineDash',\r\n\r\n  /**\r\n   * @member {Function} Elem#isPointInPath\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Boolean|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/isPointInPath\r\n   */\r\n  'isPointInPath',\r\n\r\n  /**\r\n   * @member {Function} Elem#isPointInStroke\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Boolean|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/isPointInStroke\r\n   */\r\n  'isPointInStroke',\r\n\r\n  /**\r\n   * @member {Function} Elem#measureText\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {TextMetrics|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/measureText\r\n   */\r\n  'measureText'\r\n];\r\n\r\nexport const canvasRestMethods = [\r\n  /**\r\n   * @member {Function} Elem#arc\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/arc\r\n   */\r\n  'arc',\r\n\r\n  /**\r\n   * @member {Function} Elem#arcTo\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/arcTo\r\n   */\r\n  'arcTo',\r\n\r\n  /**\r\n   * @member {Function} Elem#beginPath\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/beginPath\r\n   */\r\n  'beginPath',\r\n\r\n  /**\r\n   * @member {Function} Elem#bezierCurveTo\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo\r\n   */\r\n  'bezierCurveTo',\r\n\r\n  /**\r\n   * @member {Function} Elem#clearRect\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/clearRect\r\n   */\r\n  'clearRect',\r\n\r\n  /**\r\n   * @member {Function} Elem#clip\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/clip\r\n   */\r\n  'clip',\r\n\r\n  /**\r\n   * @member {Function} Elem#closePath\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/closePath\r\n   */\r\n  'closePath',\r\n\r\n  /**\r\n   * @member {Function} Elem#drawFocusIfNeeded\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/drawFocusIfNeeded\r\n   */\r\n  'drawFocusIfNeeded',\r\n\r\n  /**\r\n   * @member {Function} Elem#drawImage\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/drawImage\r\n   */\r\n  'drawImage',\r\n\r\n  /**\r\n   * @member {Function} Elem#ellipse\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/ellipse\r\n   */\r\n  'ellipse',\r\n\r\n  /**\r\n   * @member {Function} Elem#fill\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/fill\r\n   */\r\n  'fill',\r\n\r\n  /**\r\n   * @member {Function} Elem#fillRect\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/fillRect\r\n   */\r\n  'fillRect',\r\n\r\n  /**\r\n   * @member {Function} Elem#fillText\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/fillText\r\n   */\r\n  'fillText',\r\n\r\n  /**\r\n   * @member {Function} Elem#lineTo\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/lineTo\r\n   */\r\n  'lineTo',\r\n\r\n  /**\r\n   * @member {Function} Elem#moveTo\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/moveTo\r\n   */\r\n  'moveTo',\r\n\r\n  /**\r\n   * @member {Function} Elem#putImageData\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/putImageData\r\n   */\r\n  'putImageData',\r\n\r\n  /**\r\n   * @member {Function} Elem#quadraticCurveTo\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo\r\n   */\r\n  'quadraticCurveTo',\r\n\r\n  /**\r\n   * @member {Function} Elem#rect\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/rect\r\n   */\r\n  'rect',\r\n\r\n  /**\r\n   * @member {Function} Elem#resetTransform\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/resetTransform\r\n   */\r\n  'resetTransform',\r\n\r\n  /**\r\n   * @member {Function} Elem#restore\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/restore\r\n   */\r\n  'restore',\r\n\r\n  /**\r\n   * @member {Function} Elem#rotate\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/rotate\r\n   */\r\n  'rotate',\r\n\r\n  /**\r\n   * @member {Function} Elem#save\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/save\r\n   */\r\n  'save',\r\n\r\n  /**\r\n   * @member {Function} Elem#scale\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/scale\r\n   */\r\n  'scale',\r\n\r\n  /**\r\n   * @member {Function} Elem#setLineDash\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/setLineDash\r\n   */\r\n  'setLineDash',\r\n\r\n  /**\r\n   * @member {Function} Elem#setTransform\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/setTransform\r\n   */\r\n  'setTransform',\r\n\r\n  /**\r\n   * @member {Function} Elem#stroke\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/stroke\r\n   */\r\n  'stroke',\r\n\r\n  /**\r\n   * @member {Function} Elem#strokeRect\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/strokeRect\r\n   */\r\n  'strokeRect',\r\n\r\n  /**\r\n   * @member {Function} Elem#strokeText\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/strokeText\r\n   */\r\n  'strokeText',\r\n\r\n  /**\r\n   * @member {Function} Elem#transform\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/transform\r\n   */\r\n  'transform',\r\n\r\n  /**\r\n   * @member {Function} Elem#translate\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/translate\r\n   */\r\n  'translate'\r\n];\r\n","/**\r\n * @module constants/constructors\r\n * @private\r\n * @description Exports constructors levels.\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {Array[]}\r\n */\r\nexport const constructors = [\r\n  [],\r\n  [],\r\n  []\r\n];\r\n","/**\r\n * @module constants/elements\r\n * @private\r\n * @description Exports methods for {@link Elem} for creating html-elements.\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {String[]}\r\n */\r\nexport const htmlElements = [\r\n  /**\r\n   * @member {Function} Elem#a\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'a',\r\n\r\n  /**\r\n   * @member {Function} Elem#abbr\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'abbr',\r\n\r\n  /**\r\n   * @member {Function} Elem#address\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'address',\r\n\r\n  /**\r\n   * @member {Function} Elem#area\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'area',\r\n\r\n  /**\r\n   * @member {Function} Elem#article\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'article',\r\n\r\n  /**\r\n   * @member {Function} Elem#audio\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'audio',\r\n\r\n  /**\r\n   * @member {Function} Elem#b\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'b',\r\n\r\n  /**\r\n   * @member {Function} Elem#base\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'base',\r\n\r\n  /**\r\n   * @member {Function} Elem#bdi\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'bdi',\r\n\r\n  /**\r\n   * @member {Function} Elem#bdo\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'bdo',\r\n\r\n  /**\r\n   * @member {Function} Elem#blockquote\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'blockquote',\r\n\r\n  /**\r\n   * @member {Function} Elem#body\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'body',\r\n\r\n  /**\r\n   * @member {Function} Elem#br\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'br',\r\n\r\n  /**\r\n   * @member {Function} Elem#button\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'button',\r\n\r\n  /**\r\n   * @member {Function} Elem#canvas\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'canvas',\r\n\r\n  /**\r\n   * @member {Function} Elem#caption\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'caption',\r\n\r\n  /**\r\n   * @member {Function} Elem#cite\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'cite',\r\n\r\n  /**\r\n   * @member {Function} Elem#code\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'code',\r\n\r\n  /**\r\n   * @member {Function} Elem#col\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'col',\r\n\r\n  /**\r\n   * @member {Function} Elem#colgroup\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'colgroup',\r\n\r\n  /**\r\n   * @member {Function} Elem#content\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'content',\r\n\r\n  /**\r\n   * @member {Function} Elem#datalist\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'datalist',\r\n\r\n  /**\r\n   * @member {Function} Elem#dd\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'dd',\r\n\r\n  /**\r\n   * @member {Function} Elem#del\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'del',\r\n\r\n  /**\r\n   * @member {Function} Elem#details\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'details',\r\n\r\n  /**\r\n   * @member {Function} Elem#dfn\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'dfn',\r\n\r\n  /**\r\n   * @member {Function} Elem#dialog\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'dialog',\r\n\r\n  /**\r\n   * @member {Function} Elem#div\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'div',\r\n\r\n  /**\r\n   * @member {Function} Elem#dl\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'dl',\r\n\r\n  /**\r\n   * @member {Function} Elem#dt\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'dt',\r\n\r\n  /**\r\n   * @member {Function} Elem#element\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'element',\r\n\r\n  /**\r\n   * @member {Function} Elem#em\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'em',\r\n\r\n  /**\r\n   * @member {Function} Elem#embed\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'embed',\r\n\r\n  /**\r\n   * @member {Function} Elem#fieldset\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'fieldset',\r\n\r\n  /**\r\n   * @member {Function} Elem#figcaption\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'figcaption',\r\n\r\n  /**\r\n   * @member {Function} Elem#figure\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'figure',\r\n\r\n  /**\r\n   * @member {Function} Elem#footer\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'footer',\r\n\r\n  /**\r\n   * @member {Function} Elem#form\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'form',\r\n\r\n  /**\r\n   * @member {Function} Elem#h1\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'h1',\r\n\r\n  /**\r\n   * @member {Function} Elem#h2\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'h2',\r\n\r\n  /**\r\n   * @member {Function} Elem#h3\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'h3',\r\n\r\n  /**\r\n   * @member {Function} Elem#h4\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'h4',\r\n\r\n  /**\r\n   * @member {Function} Elem#h5\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'h5',\r\n\r\n  /**\r\n   * @member {Function} Elem#h6\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'h6',\r\n\r\n  /**\r\n   * @member {Function} Elem#head\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'head',\r\n\r\n  /**\r\n   * @member {Function} Elem#header\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'header',\r\n\r\n  /**\r\n   * @member {Function} Elem#hgroup\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'hgroup',\r\n\r\n  /**\r\n   * @member {Function} Elem#hr\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'hr',\r\n\r\n  /**\r\n   * @member {Function} Elem#i\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'i',\r\n\r\n  /**\r\n   * @member {Function} Elem#iframe\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'iframe',\r\n\r\n  /**\r\n   * @member {Function} Elem#img\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'img',\r\n\r\n  /**\r\n   * @member {Function} Elem#input\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'input',\r\n\r\n  /**\r\n   * @member {Function} Elem#ins\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'ins',\r\n\r\n  /**\r\n   * @member {Function} Elem#kbd\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'kbd',\r\n\r\n  /**\r\n   * @member {Function} Elem#label\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'label',\r\n\r\n  /**\r\n   * @member {Function} Elem#legend\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'legend',\r\n\r\n  /**\r\n   * @member {Function} Elem#li\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'li',\r\n\r\n  /**\r\n   * @member {Function} Elem#link\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'link',\r\n\r\n  /**\r\n   * @member {Function} Elem#main\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'main',\r\n\r\n  /**\r\n   * @member {Function} Elem#mark\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'mark',\r\n\r\n  /**\r\n   * @member {Function} Elem#menu\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'menu',\r\n\r\n  /**\r\n   * @member {Function} Elem#menuitem\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'menuitem',\r\n\r\n  /**\r\n   * @member {Function} Elem#meta\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'meta',\r\n\r\n  /**\r\n   * @member {Function} Elem#meter\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'meter',\r\n\r\n  /**\r\n   * @member {Function} Elem#nav\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'nav',\r\n\r\n  /**\r\n   * @member {Function} Elem#noscript\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'noscript',\r\n\r\n  /**\r\n   * @member {Function} Elem#ol\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'ol',\r\n\r\n  /**\r\n   * @member {Function} Elem#optgroup\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'optgroup',\r\n\r\n  /**\r\n   * @member {Function} Elem#option\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'option',\r\n\r\n  /**\r\n   * @member {Function} Elem#output\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'output',\r\n\r\n  /**\r\n   * @member {Function} Elem#p\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'p',\r\n\r\n  /**\r\n   * @member {Function} Elem#param\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'param',\r\n\r\n  /**\r\n   * @member {Function} Elem#pre\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'pre',\r\n\r\n  /**\r\n   * @member {Function} Elem#progress\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'progress',\r\n\r\n  /**\r\n   * @member {Function} Elem#q\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'q',\r\n\r\n  /**\r\n   * @member {Function} Elem#rp\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'rp',\r\n\r\n  /**\r\n   * @member {Function} Elem#rt\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'rt',\r\n\r\n  /**\r\n   * @member {Function} Elem#rtc\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'rtc',\r\n\r\n  /**\r\n   * @member {Function} Elem#ruby\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'ruby',\r\n\r\n  /**\r\n   * @member {Function} Elem#s\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  's',\r\n\r\n  /**\r\n   * @member {Function} Elem#samp\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'samp',\r\n\r\n  /**\r\n   * @member {Function} Elem#script\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'script',\r\n\r\n  /**\r\n   * @member {Function} Elem#section\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'section',\r\n\r\n  /**\r\n   * @member {Function} Elem#select\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'select',\r\n\r\n  /**\r\n   * @member {Function} Elem#shadow\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'shadow',\r\n\r\n  /**\r\n   * @member {Function} Elem#small\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'small',\r\n\r\n  /**\r\n   * @member {Function} Elem#source\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'source',\r\n\r\n  /**\r\n   * @member {Function} Elem#span\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'span',\r\n\r\n  /**\r\n   * @member {Function} Elem#strong\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'strong',\r\n\r\n  /**\r\n   * @member {Function} Elem#style\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'style',\r\n\r\n  /**\r\n   * @member {Function} Elem#sub\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'sub',\r\n\r\n  /**\r\n   * @member {Function} Elem#summary\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'summary',\r\n\r\n  /**\r\n   * @member {Function} Elem#sup\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'sup',\r\n\r\n  /**\r\n   * @member {Function} Elem#table\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'table',\r\n\r\n  /**\r\n   * @member {Function} Elem#tbody\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'tbody',\r\n\r\n  /**\r\n   * @member {Function} Elem#td\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'td',\r\n\r\n  /**\r\n   * @member {Function} Elem#template\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'template',\r\n\r\n  /**\r\n   * @member {Function} Elem#textarea\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'textarea',\r\n\r\n  /**\r\n   * @member {Function} Elem#tfoot\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'tfoot',\r\n\r\n  /**\r\n   * @member {Function} Elem#th\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'th',\r\n\r\n  /**\r\n   * @member {Function} Elem#thead\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'thead',\r\n\r\n  /**\r\n   * @member {Function} Elem#time\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'time',\r\n\r\n  /**\r\n   * @member {Function} Elem#title\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'title',\r\n\r\n  /**\r\n   * @member {Function} Elem#tr\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'tr',\r\n\r\n  /**\r\n   * @member {Function} Elem#track\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'track',\r\n\r\n  /**\r\n   * @member {Function} Elem#u\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'u',\r\n\r\n  /**\r\n   * @member {Function} Elem#ul\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'ul',\r\n\r\n  /**\r\n   * @member {Function} Elem#var\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'var',\r\n\r\n  /**\r\n   * @member {Function} Elem#video\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'video',\r\n\r\n  /**\r\n   * @member {Function} Elem#wbr\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'wbr'\r\n];\r\n\r\nexport const svgElements = [\r\n  /**\r\n   * @member {Function} Elem#altGlyph\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'altGlyph',\r\n\r\n  /**\r\n   * @member {Function} Elem#altGlyphDef\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'altGlyphDef',\r\n\r\n  /**\r\n   * @member {Function} Elem#altGlyphItem\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'altGlyphItem',\r\n\r\n  /**\r\n   * @member {Function} Elem#animate\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'animate',\r\n\r\n  /**\r\n   * @member {Function} Elem#animateColor\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'animateColor',\r\n\r\n  /**\r\n   * @member {Function} Elem#animateMotion\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'animateMotion',\r\n\r\n  /**\r\n   * @member {Function} Elem#animateTransform\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'animateTransform',\r\n\r\n  /**\r\n   * @member {Function} Elem#circle\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'circle',\r\n\r\n  /**\r\n   * @member {Function} Elem#clipPath\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'clipPath',\r\n\r\n  /**\r\n   * @member {Function} Elem#colorProfile\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'color-profile',\r\n\r\n  /**\r\n   * @member {Function} Elem#cursor\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'cursor',\r\n\r\n  /**\r\n   * @member {Function} Elem#defs\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'defs',\r\n\r\n  /**\r\n   * @member {Function} Elem#desc\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'desc',\r\n\r\n  /**\r\n   * @member {Function} Elem#discard\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'discard',\r\n\r\n  /**\r\n   * @member {Function} Elem#ellipse\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'ellipse',\r\n\r\n  /**\r\n   * @member {Function} Elem#feBlend\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feBlend',\r\n\r\n  /**\r\n   * @member {Function} Elem#feColorMatrix\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feColorMatrix',\r\n\r\n  /**\r\n   * @member {Function} Elem#feComponentTransfer\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feComponentTransfer',\r\n\r\n  /**\r\n   * @member {Function} Elem#feComposite\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feComposite',\r\n\r\n  /**\r\n   * @member {Function} Elem#feConvolveMatrix\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feConvolveMatrix',\r\n\r\n  /**\r\n   * @member {Function} Elem#feDiffuseLighting\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feDiffuseLighting',\r\n\r\n  /**\r\n   * @member {Function} Elem#feDisplacementMap\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feDisplacementMap',\r\n\r\n  /**\r\n   * @member {Function} Elem#feDistantLight\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feDistantLight',\r\n\r\n  /**\r\n   * @member {Function} Elem#feDropShadow\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feDropShadow',\r\n\r\n  /**\r\n   * @member {Function} Elem#feFlood\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feFlood',\r\n\r\n  /**\r\n   * @member {Function} Elem#feFuncA\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feFuncA',\r\n\r\n  /**\r\n   * @member {Function} Elem#feFuncB\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feFuncB',\r\n\r\n  /**\r\n   * @member {Function} Elem#feFuncG\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feFuncG',\r\n\r\n  /**\r\n   * @member {Function} Elem#feFuncR\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feFuncR',\r\n\r\n  /**\r\n   * @member {Function} Elem#feGaussianBlur\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feGaussianBlur',\r\n\r\n  /**\r\n   * @member {Function} Elem#feImage\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feImage',\r\n\r\n  /**\r\n   * @member {Function} Elem#feMerge\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feMerge',\r\n\r\n  /**\r\n   * @member {Function} Elem#feMergeNode\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feMergeNode',\r\n\r\n  /**\r\n   * @member {Function} Elem#feMorphology\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feMorphology',\r\n\r\n  /**\r\n   * @member {Function} Elem#feOffset\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feOffset',\r\n\r\n  /**\r\n   * @member {Function} Elem#fePointLight\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'fePointLight',\r\n\r\n  /**\r\n   * @member {Function} Elem#feSpecularLighting\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feSpecularLighting',\r\n\r\n  /**\r\n   * @member {Function} Elem#feSpotLight\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feSpotLight',\r\n\r\n  /**\r\n   * @member {Function} Elem#feTile\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feTile',\r\n\r\n  /**\r\n   * @member {Function} Elem#feTurbulence\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feTurbulence',\r\n\r\n  /**\r\n   * @member {Function} Elem#font\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'font',\r\n\r\n  /**\r\n   * @member {Function} Elem#fontFace\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'font-face',\r\n\r\n  /**\r\n   * @member {Function} Elem#fontFaceFormat\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'font-face-format',\r\n\r\n  /**\r\n   * @member {Function} Elem#fontFaceName\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'font-face-name',\r\n\r\n  /**\r\n   * @member {Function} Elem#fontFaceSrc\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'font-face-src',\r\n\r\n  /**\r\n   * @member {Function} Elem#fontFaceUri\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'font-face-uri',\r\n\r\n  /**\r\n   * @member {Function} Elem#foreignObject\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'foreignObject',\r\n\r\n  /**\r\n   * @member {Function} Elem#g\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'g',\r\n\r\n  /**\r\n   * @member {Function} Elem#glyph\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'glyph',\r\n\r\n  /**\r\n   * @member {Function} Elem#glyphRef\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'glyphRef',\r\n\r\n  /**\r\n   * @member {Function} Elem#hatch\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'hatch',\r\n\r\n  /**\r\n   * @member {Function} Elem#hatchpath\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'hatchpath',\r\n\r\n  /**\r\n   * @member {Function} Elem#hkern\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'hkern',\r\n\r\n  /**\r\n   * @member {Function} Elem#image\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'image',\r\n\r\n  /**\r\n   * @member {Function} Elem#line\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'line',\r\n\r\n  /**\r\n   * @member {Function} Elem#linearGradient\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'linearGradient',\r\n\r\n  /**\r\n   * @member {Function} Elem#marker\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'marker',\r\n\r\n  /**\r\n   * @member {Function} Elem#mask\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'mask',\r\n\r\n  /**\r\n   * @member {Function} Elem#mesh\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'mesh',\r\n\r\n  /**\r\n   * @member {Function} Elem#meshgradient\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'meshgradient',\r\n\r\n  /**\r\n   * @member {Function} Elem#meshpatch\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'meshpatch',\r\n\r\n  /**\r\n   * @member {Function} Elem#meshrow\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'meshrow',\r\n\r\n  /**\r\n   * @member {Function} Elem#metadata\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'metadata',\r\n\r\n  /**\r\n   * @member {Function} Elem#missingGlyph\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'missing-glyph',\r\n\r\n  /**\r\n   * @member {Function} Elem#mpath\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'mpath',\r\n\r\n  /**\r\n   * @member {Function} Elem#path\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'path',\r\n\r\n  /**\r\n   * @member {Function} Elem#pattern\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'pattern',\r\n\r\n  /**\r\n   * @member {Function} Elem#polygon\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'polygon',\r\n\r\n  /**\r\n   * @member {Function} Elem#polyline\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'polyline',\r\n\r\n  /**\r\n   * @member {Function} Elem#radialGradient\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'radialGradient',\r\n\r\n  /**\r\n   * @member {Function} Elem#rect\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'rect',\r\n\r\n  /**\r\n   * @member {Function} Elem#set\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'set',\r\n\r\n  /**\r\n   * @member {Function} Elem#solidcolor\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'solidcolor',\r\n\r\n  /**\r\n   * @member {Function} Elem#stop\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'stop',\r\n\r\n  /**\r\n   * @member {Function} Elem#style\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'style',\r\n\r\n  /**\r\n   * @member {Function} Elem#svg\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'svg',\r\n\r\n  /**\r\n   * @member {Function} Elem#switch\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'switch',\r\n\r\n  /**\r\n   * @member {Function} Elem#symbol\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'symbol',\r\n\r\n  /**\r\n   * @member {Function} Elem#textPath\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'textPath',\r\n\r\n  /**\r\n   * @member {Function} Elem#tref\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'tref',\r\n\r\n  /**\r\n   * @member {Function} Elem#tspan\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'tspan',\r\n\r\n  /**\r\n   * @member {Function} Elem#unknown\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'unknown',\r\n\r\n  /**\r\n   * @member {Function} Elem#use\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'use',\r\n\r\n  /**\r\n   * @member {Function} Elem#view\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'view',\r\n\r\n  /**\r\n   * @member {Function} Elem#vkern\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'vkern'\r\n];\r\n\r\nexport const voidElements = [\r\n  'area',\r\n  'base',\r\n  'br',\r\n  'col',\r\n  'command',\r\n  'embed',\r\n  'hr',\r\n  'img',\r\n  'input',\r\n  'keygen',\r\n  'link',\r\n  'meta',\r\n  'param',\r\n  'source',\r\n  'track',\r\n  'wbr'\r\n];\r\n","export const htmlAllowedTagSymbols = '[a-z][a-z\\\\d\\\\-_.:!@#\\\\$%\\\\^&*()\\\\[\\\\]{}\\\\\\\\=\\'\"]*';\r\nexport const htmlAllowedAttrSymbols = '[^\\\\u0000-\\\\u0020\\\\s\"\\'>/=]+';\r\n","/**\r\n * @module constants/regexpSpecialCharacters\r\n * @private\r\n * @description Exports special characters for RegExp.\r\n */\r\n\r\n/**\r\n * @const\r\n * @name module:constants/regexpSpecialCharacters~regexpSpecialCharacters\r\n * @type {String[]}\r\n */\r\nexport const regexpSpecialCharacters = [\r\n  '.',\r\n  '+', '*', '?',\r\n  '(', ')',\r\n  '[', ']',\r\n  '{', '}',\r\n  '<', '>',\r\n  '^', '$',\r\n  '!',\r\n  '=',\r\n  ':',\r\n  '-',\r\n  '|',\r\n  ',',\r\n  '\\\\'\r\n];\r\n","/**\r\n * @module constants/validateCheckExpressions\r\n * @private\r\n * @description Exports different types of validate expressions for {@link module:helpers/validate}.\r\n */\r\n\r\nimport * as methods from '../helpers/checkTypes';\r\n\r\n/**\r\n * @callback checkValidityCallback\r\n * @private\r\n * @param {*} value - Value to check.\r\n */\r\n\r\n/**\r\n * @typedef {Object} validateExpr\r\n * @private\r\n * @property {String} text - Text of the thrown error.\r\n * @property {Error} error - Type of the thrown error.\r\n * @property {checkValidityCallback} check - Callback for checking value.\r\n */\r\n\r\n/**\r\n * @type {validateExpr[]}\r\n * @private\r\n * @description Object of different types of validation.\r\n */\r\nexport const validateCheckExpressions = {\r\n  '>0': {\r\n    check: (n) => n > 0,\r\n    text: '$n argument must be positive!',\r\n    error: RangeError\r\n  },\r\n  '>=0': {\r\n    check: (n) => n >= 0,\r\n    text: '$n argument must be non-negative!',\r\n    error: RangeError\r\n  },\r\n  '<0': {\r\n    check: (n) => n < 0,\r\n    text: '$n argument must be negative!',\r\n    error: RangeError\r\n  },\r\n  '<=0': {\r\n    check: (n) => n <= 0,\r\n    text: '$n argument must be non-positive!',\r\n    error: RangeError\r\n  },\r\n  '!!': {\r\n    check: (v) => !methods.isNil(v),\r\n    text: '$n argument must be not null or undefined!',\r\n    error: TypeError\r\n  },\r\n  array: {\r\n    check: methods.isArray,\r\n    text: '$n argument must be an array!',\r\n    error: TypeError\r\n  },\r\n  'array||!': {\r\n    check: (a) => methods.isArray(a) || methods.isNil(a),\r\n    text: '$n argument must be an array, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  arrayLike: {\r\n    check: methods.isArrayLike,\r\n    text: '$n argument must be array-like!',\r\n    error: TypeError\r\n  },\r\n  'arrayLike||!': {\r\n    check: (a) => methods.isArrayLike(a) || methods.isNil(a),\r\n    text: '$n argument must be array-like, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  date: {\r\n    check: methods.isDate,\r\n    text: '$n argument must be a date!',\r\n    error: TypeError\r\n  },\r\n  'date||!': {\r\n    check: (d) => methods.isDate(d) || methods.isNil(d),\r\n    text: '$n argument must be a date, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  dateLike: {\r\n    check: methods.isDateLike,\r\n    text: '$n argument must be date-like!',\r\n    error: TypeError\r\n  },\r\n  'dateLike||!': {\r\n    check: (d) => methods.isDateLike(d) || methods.isNil(d),\r\n    text: '$n argument must be date-like, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  function: {\r\n    check: methods.isFunction,\r\n    text: '$n argument must be a function!',\r\n    error: TypeError\r\n  },\r\n  'function||!': {\r\n    check: (f) => methods.isFunction(f) || methods.isNil(f),\r\n    text: '$n argument must be a function, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  int: {\r\n    check: methods.isInteger,\r\n    text: '$n argument must be an integer!',\r\n    error: TypeError\r\n  },\r\n  'int||!': {\r\n    check: (i) => methods.isInteger(i) || methods.isNil(i),\r\n    text: '$n argument must be an integer, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  intLike: {\r\n    check: methods.isIntegerLike,\r\n    text: '$n argument must be integer-like!',\r\n    error: TypeError\r\n  },\r\n  'intLike||!': {\r\n    check: (i) => methods.isIntegerLike(i) || methods.isNil(i),\r\n    text: '$n argument must be integer-like, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  number: {\r\n    check: methods.isNumber,\r\n    text: '$n argument must be a number!',\r\n    error: TypeError\r\n  },\r\n  'number||!': {\r\n    check: (n) => methods.isNumber(n) || methods.isNil(n),\r\n    text: '$n argument must be a number, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  numberLike: {\r\n    check: methods.isNumberLike,\r\n    text: '$n argument must be number-like!',\r\n    error: TypeError\r\n  },\r\n  'numberLike||!': {\r\n    check: (n) => methods.isNumberLike(n) || methods.isNil(n),\r\n    text: '$n argument must be number-like, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  object: {\r\n    check: methods.isObject,\r\n    text: '$n argument must be an object!',\r\n    error: TypeError\r\n  },\r\n  'object||!': {\r\n    check: (o) => methods.isObject(o) || methods.isNil(o),\r\n    text: '$n argument must be an object, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  regexp: {\r\n    check: methods.isRegExp,\r\n    text: '$n argument must be a regular expression!',\r\n    error: TypeError\r\n  },\r\n  'regexp||!': {\r\n    check: (r) => methods.isRegExp(r) || methods.isNil(r),\r\n    text: '$n argument must be a regular expression, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  string: {\r\n    check: methods.isString,\r\n    text: '$n argument must be a string!',\r\n    error: TypeError\r\n  },\r\n  'string||!': {\r\n    check: (s) => methods.isString(s) || methods.isNil(s),\r\n    text: '$n argument must be a string, or undefined, or null!',\r\n    error: TypeError\r\n  }\r\n};\r\n","/**\r\n * @module helpers/Symbol\r\n * @private\r\n * @description Exports Symbol class.\r\n */\r\n\r\nexport const Symbol = global.Symbol || {\r\n  toStringTag: 'Symbol.toStringTag',\r\n  iterator: Math.random().toString(36)\r\n};\r\n","/**\r\n * @module Promise\r\n * @private\r\n * @mixin\r\n * @description Exports Promise class.\r\n */\r\n\r\nimport { isFunction, defineProperties, Symbol } from './helpers';\r\n\r\n/**\r\n * @callback onFulfilledOrRejected\r\n * @public\r\n * @param {*} value - Promise value.\r\n * @param {Boolean} success - If the previous promise is fulfilled it's true and false if rejected.\r\n */\r\n\r\n/**\r\n * @callback onRejected\r\n * @public\r\n * @param {Error|*} err - Promise error.\r\n */\r\n\r\n/**\r\n * @callback onFulfilled\r\n * @public\r\n * @param {*} value - Promise value.\r\n */\r\n\r\nconst secret = {};\r\nconst iterator = Symbol.iterator;\r\n\r\n/**\r\n * @class Promise\r\n * @public\r\n * @param {Function} executor - Function that takes two arguments: resolve and reject functions.\r\n * Call the resolve function when you need to fulfill the promise and call the reject one\r\n * when you need to reject it.\r\n * @returns {Promise} Instance of Promise.\r\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\r\n * @description Class with almost identical API to\r\n * [ES6 Promise]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise}.\r\n * There is a couple differences: set Promise.onError to a function with which you want to\r\n * subscribe to a promise error and set Promise.onUnhandledRejection to a function with which\r\n * you want to subscribe to an unhandled error\r\n * (defaults to console.error.bind(console, '%s %o', 'Uncaught (in promise)')).\r\n */\r\nclass Promise {\r\n  static onError = null;\r\n  static onUnhandledRejection = console.error.bind(console, '%s %o', 'Uncaught (in promise)');\r\n\r\n  constructor(executor) {\r\n    if (!isFunction(executor)) {\r\n      throw new TypeError(`Promise resolver ${ {}.toString.call(executor) } is not a function`);\r\n    }\r\n\r\n    let hiddenStatus;\r\n    let hiddenValue;\r\n\r\n    const\tonFulfill = [];\r\n    const onReject = [];\r\n    const realPromise = this;\r\n    const hiddenPromise = {\r\n      handled: false,\r\n      get status() {\r\n        return hiddenStatus;\r\n      },\r\n      set status(value) {\r\n        hiddenStatus = value;\r\n        realPromise.status = value;\r\n      },\r\n      get value() {\r\n        return hiddenValue;\r\n      },\r\n      set value(val) {\r\n        hiddenValue = val;\r\n        realPromise.value = val;\r\n      }\r\n    };\r\n\r\n    hiddenPromise.status = 'pending';\r\n    hiddenPromise.value = undefined;\r\n\r\n    /**\r\n     * @typedef {Object} hiddenPromise\r\n     * @private\r\n     * @property {Boolean|Object} handled - If the promise is handled or not.\r\n     * @property {'pending'|'fulfilled'|'rejected'} status - Status of the promise.\r\n     * @property {*} value - Value of the promise.\r\n     */\r\n\r\n    /**\r\n     * @member {Function} hiddenPromise#handle\r\n     * @private\r\n     * @param {('reject'|'resolve')} event - Type of the event to handle.\r\n     * @param {Function} handler - Handler itself.\r\n     * @param {Function} resolve - Resolve function.\r\n     * @param {Function} reject - Reject function.\r\n     * @param {Object} secret - Secret.\r\n     * @description Private method for handling promises.\r\n     */\r\n\r\n    /**\r\n     * @member {hiddenPromise} Promise#$$\r\n     * @protected\r\n     */\r\n    defineProperties(this.$$ = {}, {\r\n      'get/set handled': {\r\n        get() {\r\n          return hiddenPromise.handled;\r\n        },\r\n        set(key) {\r\n          if (key === secret) {\r\n            hiddenPromise.handled = true;\r\n          }\r\n        }\r\n      },\r\n      handle(status, f, resolve, reject, key) {\r\n        if (key === secret) {\r\n          const proxy = isFunction(f) ? (value) => {\r\n            try {\r\n              resolve(f(value));\r\n            } catch (err) {\r\n              reject(err);\r\n            }\r\n          } : null;\r\n\r\n          if (status === 'resolve') {\r\n            onFulfill.push(proxy || ((value) => resolve(value)));\r\n          } else if (status === 'reject') {\r\n            onReject.push(proxy || ((err) => reject(err)));\r\n          }\r\n        }\r\n      },\r\n      'get status'() {\r\n        return hiddenPromise.status;\r\n      },\r\n      'get value'() {\r\n        return hiddenPromise.value;\r\n      }\r\n    });\r\n\r\n    try {\r\n      executor(resolve, reject);\r\n    } catch (err) {\r\n      reject(err);\r\n    }\r\n\r\n    function reject(err) {\r\n      if (hiddenPromise.status === 'pending') {\r\n        hiddenPromise.status = 'rejected';\r\n        hiddenPromise.value = err;\r\n\r\n        for (let i = 0, length = onReject.length; i < length; i++) {\r\n          hiddenPromise.handled = true;\r\n\r\n          onReject[i](err);\r\n        }\r\n\r\n        const {\r\n          onUnhandledRejection,\r\n          onError\r\n        } = Promise;\r\n\r\n        if (isFunction(onError)) {\r\n          onError(err);\r\n        }\r\n\r\n        setTimeout(() => {\r\n          if (!hiddenPromise.handled && isFunction(onUnhandledRejection)) {\r\n            onUnhandledRejection(err);\r\n          }\r\n        }, 1);\r\n      }\r\n    }\r\n\r\n    function resolve(value) {\r\n      if (hiddenPromise.status === 'pending') {\r\n        if (value && isFunction(value.then)) {\r\n          return value.then((value) => {\r\n            resolve(value);\r\n          }, (err) => {\r\n            reject(err);\r\n          });\r\n        }\r\n\r\n        hiddenPromise.status = 'fulfilled';\r\n        hiddenPromise.value = value;\r\n\r\n        for (let i = 0, length = onFulfill.length; i < length; i++) {\r\n          hiddenPromise.handled = true;\r\n\r\n          onFulfill[i](value);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method Promise.all\r\n   * @param {(Array|Iterable).<Promise|*>} iterable - Iterable object (like array) of promises\r\n   * or any values.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\r\n   */\r\n  static all(iterable) {\r\n    const array = [];\r\n\r\n    let toResolve = 0;\r\n\r\n    if (iterable[iterator]) {\r\n      iterable = iterable[iterator]();\r\n\r\n      return new Promise((resolve, reject) => {\r\n        let next;\r\n        let i = 0;\r\n\r\n        while (!(next = iterable.next()).done) {\r\n          const promise = Promise.resolve(next.value);\r\n\r\n          toResolve++;\r\n\r\n          ((i) => {\r\n            promise.then((value) => {\r\n              toResolve--;\r\n              array[i] = value;\r\n\r\n              setTimeout(() => {\r\n                if (next.done && !toResolve) {\r\n                  resolve(array);\r\n                }\r\n              }, 1);\r\n            }, reject);\r\n          })(i++);\r\n        }\r\n\r\n        if (!i) {\r\n          return Promise.resolve([]);\r\n        }\r\n      });\r\n    }\r\n\r\n    const length = iterable.length;\r\n\r\n    if (!length) {\r\n      return Promise.resolve([]);\r\n    }\r\n\r\n    toResolve = length;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      for (let i = 0; i < length; i++) {\r\n        const promise = Promise.resolve(iterable[i]);\r\n\r\n        promise.then((value) => {\r\n          toResolve--;\r\n          array[i] = value;\r\n\r\n          if (!toResolve) {\r\n            resolve(array);\r\n          }\r\n        }, reject);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Promise.race\r\n   * @param {(Array|Iterable).<Promise|*>} iterable - Iterable object (like array) of promises\r\n   * or any values.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\r\n   */\r\n  static race(iterable) {\r\n    if (iterable[iterator]) {\r\n      iterable = iterable[iterator]();\r\n\r\n      return new Promise((resolve, reject) => {\r\n        let next;\r\n\r\n        while (!(next = iterable.next()).done) {\r\n          next.value.then(resolve, reject);\r\n        }\r\n      });\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      for (let i = 0, length = iterable.length; i < length; i++) {\r\n        iterable[i].then(resolve, reject);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Promise.reject\r\n   * @param {*} value - Value to reject.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject\r\n   */\r\n  static reject(value) {\r\n    return new Promise((resolve, reject) => {\r\n      reject(value);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Promise.resolve\r\n   * @param {Promise|Thenable|*} value - Promise, thenable or any value to resolve.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\r\n   */\r\n  static resolve(value) {\r\n    if (value && isFunction(value.then)) {\r\n      return value;\r\n    }\r\n\r\n    return new Promise((resolve) => {\r\n      resolve(value);\r\n    });\r\n  }\r\n\r\n  abort() {}\r\n\r\n  /**\r\n   * @method Promise#catch\r\n   * @param {onRejected} onRejected - onRejected callback.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\r\n   */\r\n  catch(onRejected) {\r\n    return this.then(null, onRejected);\r\n  }\r\n\r\n  /**\r\n   * @method Promise#finally\r\n   * @public\r\n   * @param {onFulfilledOrRejected} onFulfilledOrRejected - onFulfilledOrRejected callback.\r\n   * @returns {Promise}\r\n   * @description Method for catching both fulfilled and rejected promises.\r\n   *\r\n   * @example\r\n   * spinner.show();\r\n   * fetchData()\r\n   *   .then((data) => {\r\n   *     // do something with data\r\n   *   })\r\n   *   .catch((err) => {\r\n   *     // handle error somehow\r\n   *   })\r\n   *   .finally(() => {\r\n   *     spinner.hide();\r\n   *   });\r\n   */\r\n  finally(onFulfilledOrRejected) {\r\n    const isFunc = isFunction(onFulfilledOrRejected);\r\n\r\n    return this.then((value) => (\r\n      Promise\r\n        .resolve(\r\n          isFunc\r\n            ? onFulfilledOrRejected(value, true)\r\n            : 0\r\n        )\r\n        .then(() => value)\r\n    ), (err) => (\r\n      Promise\r\n        .resolve(\r\n          isFunc\r\n            ? onFulfilledOrRejected(err, false)\r\n            : 0\r\n        )\r\n        .then(() => Promise.reject(err))\r\n    ));\r\n  }\r\n\r\n  /**\r\n   * @method Promise#then\r\n   * @param {onFulfilled} [onFulfilled] - onFulfilled callback.\r\n   * @param {onRejected} [onRejected] - onRejected callback.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\r\n   */\r\n  then(onFulfilled, onRejected) {\r\n    const promise = this.$$;\r\n\r\n    if (promise.status === 'pending') {\r\n      return new Promise((resolve, reject) => {\r\n        promise.handle('reject', onRejected, resolve, reject, secret);\r\n        promise.handle('resolve', onFulfilled, resolve, reject, secret);\r\n      });\r\n    }\r\n\r\n    promise.handled = secret;\r\n\r\n    const { value } = promise;\r\n\r\n    let method;\r\n    let handler;\r\n\r\n    if (promise.status === 'fulfilled') {\r\n      method = 'resolve';\r\n      handler = onFulfilled;\r\n    } else {\r\n      method = 'reject';\r\n      handler = onRejected;\r\n    }\r\n\r\n    if (!isFunction(handler)) {\r\n      return Promise[method](value);\r\n    }\r\n\r\n    try {\r\n      return Promise.resolve(handler(value));\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n  }\r\n}\r\n\r\ndefineProperties(Promise.prototype, {\r\n  [Symbol.toStringTag]: 'Promise'\r\n});\r\n\r\nexport { Promise };\r\n","/**\r\n * @module helpers/parseHeaders\r\n * @private\r\n * @description Exports parseHeaders method.\r\n */\r\n\r\nimport { Str } from '../Str';\r\nimport { iterate } from './iterate';\r\n\r\n/**\r\n * @function parseHeaders\r\n * @param {String} rawHeaders - Raw headers.\r\n * @returns {Object} Headers object\r\n * @description Function for parsing raw headers.\r\n */\r\nexport default (rawHeaders) => {\r\n  const headers = {};\r\n\r\n  iterate((rawHeaders || '').split('\\n'), (value) => {\r\n    const index = value.indexOf(':');\r\n    const key = new Str(value.substring(0, index))\r\n      .trim()\r\n      .toCamelCase().$;\r\n    const val = new Str(value.substring(index + 1)).trim().$;\r\n\r\n    if (key) {\r\n      headers[key] = (headers[key] ? `${ headers[key] }, ` : '') + val;\r\n    }\r\n  });\r\n\r\n  return headers;\r\n};\r\n","/**\r\n * @module helpers/transformData\r\n * @private\r\n * @description Exports transformData method.\r\n */\r\n\r\nimport { Arr } from '../Arr';\r\nimport { Super } from '../Super';\r\nimport { isObject, toStringTag } from './';\r\n\r\nconst notToTransform = new Arr(['FormData', 'File', 'Blob', 'ArrayBuffer', 'String', 'Number']);\r\nconst withoutBody = new Arr(['DELETE', 'GET', 'HEAD']);\r\n\r\n/**\r\n * @function transformData\r\n * @param {*} data - Data to transform\r\n * @param {String} method - HTTP method.\r\n * @param {Object} headers - Object with headers.\r\n * @returns {*} - Transformed data.\r\n */\r\nexport default (data, method, headers) => {\r\n  data = new Super(data).$;\r\n\r\n  if (withoutBody.indexOfStrict(method) !== -1) {\r\n    return null;\r\n  }\r\n\r\n  if (isObject(data) && notToTransform.indexOfStrict(toStringTag(data)) === -1) {\r\n    if (!headers.contentType) {\r\n      headers.contentType = ['application/json;charset=utf-8'];\r\n    }\r\n\r\n    return new Super(data).json();\r\n  }\r\n\r\n  return data;\r\n};\r\n","/**\r\n * @module helpers/resolveURL\r\n * @private\r\n * @description Exports Object.assign-like method.\r\n */\r\n\r\nimport { Str } from '../Str';\r\n\r\nconst { location } = global;\r\n\r\nexport default (decodeQuery) => {\r\n  const {\r\n    search: query,\r\n    hash\r\n  } = location;\r\n  const params = {\r\n    query: {},\r\n    hash: hash.replace(/^#/, '')\r\n  };\r\n\r\n  if (!query) {\r\n    return params;\r\n  }\r\n\r\n  new Str(query.replace(/^\\?/, ''))\r\n    .split('&')\r\n    .forEach((rawParam) => {\r\n      let [param, value = ''] = rawParam.split('=');\r\n\r\n      param = decodeQuery ? decodeURIComponent(param) : param;\r\n      value = decodeQuery ? decodeURIComponent(value) : value;\r\n\r\n      if (!/^[^[]+/.test(param)) {\r\n        return;\r\n      }\r\n\r\n      let paramName;\r\n      let paramObject = params.query;\r\n\r\n      new Str(param)\r\n        .match(/^[^[\\]]*|\\[[^[\\]]*]/g)\r\n        .forEach((name) => {\r\n          if (name.indexOf('[')) {\r\n            paramName = name;\r\n\r\n            return;\r\n          }\r\n\r\n          name = name.slice(1, -1);\r\n\r\n          paramObject = paramObject[paramName] = paramObject[paramName] || (name ? {} : []);\r\n          paramName = name || paramObject.length;\r\n        });\r\n\r\n      paramObject[paramName] = value;\r\n    });\r\n\r\n  return params;\r\n};\r\n","import * as statics from './lib/browser';\r\nimport { assign } from './lib/helpers/assign';\r\n\r\nconst { D } = statics;\r\n\r\nassign(D, statics);\r\n\r\ndelete D.D;\r\n\r\nglobal.D = D;\r\n"],"names":["toStringTag","object","toString","call","replace","isArray","value","isArrayLike","isFunction","length","isInteger","isBoolean","isDate","isDateLike","Date","isNaN","getTime","isElement","test","isFinite","isNumber","Number","Infinity","isIntegerLike","parseInt","isNull","isNil","isNumberLike","isObject","Object","isPlainObject","isPrimitive","proto","getPrototypeOf","constructor","isRegExp","isString","isSymbol","isUndefined","D","i","constructors","levelConstructors","k","len","cls","check","iterate","callback","array","iteratedKeys","iterated","key","hasOwnProperty","assign","target","objects","arguments","source","index","dynamicDefineProperties","properties","propertyGenerator","name","defineProperty","defineProperties","method","undefined","get","set","toArray","createNewArray","push","validate","args","options","number","checker","validateCheckExpressions","error","text","numbers","char","alphabet","string","ranges","split","range","Error","start","charCodeAt","end","String","fromCharCode","Alphabet","switcher","cases","mode","defaultValue","Switcher","when","condition","value1","value2","deepAssign","deepClone","clone","cloneSwitcher","deepEqual","o1","o2","strict","match","lastIndex","p1","p2","keys","deepEvery","n","tree","newTree","concat","deepFilter","nul","o","filtered","deepFind","result","deepForEach","deepForEachEntry","deepFreeze","freeze","deepMap","deepReduce","IV","deepSome","x","apply","noop","prop","self","rand","Math","random","floor","asc","y","Arr","blob","blobParts","BlobObject","Blob","trim","parseJSON","json","JSON","parse","dates","parsed","this","find","markup","elem","matches","rawTextSwitcher","Super","constructCloseTagRegExp","NODE_REGEX_SET","map","regex","returning","attrs","startMarkup","closeMatch","selfClosing","slice","TAG_OPEN_CLOSE","attr","ATTRIBUTE","min","NaN","tagName","RegExp","nearString","parseCharacterData","innerHTML","div","textContent","innerText","toFind","isElem","Elem","isWindow","isHTMLDocument","isDocumentFragment","isStyleRule","isCommentOrText","tag","getElem","$","emptyDiv","getName","nodeName","toLowerCase","addDwayneData","windowsDwayneData","some","element","getContext","selector","base","nativeDocument","querySelectorAll","parseHTML","html","collapseWhiteSpace","markupToJSON","template","doc","content","forEach","forEachNode","node","parent","children","parentNode","create","px","size","registerDBlock","Block","DBlock","elems","$$","found","registerDEach","createBlock","DEach","opts","item","itemName","indexName","_this","uid","constructValues","watchArgs","parentElem","uids","scope","UID","$uids","newKeys","newUIDs","evaluate","items","splice","Item","remove","after","block","shift","prev","insertAfter","values","registerDElements","DElements","_this2","mixins","watchersToRemove","child","mixin","filter","watchers","watcher","forDElements","indexOf","newContent","add","registerDIf","DIf","cond","evaluateAndWatch","if","newValue","Boolean","registerDItem","DItem","registerDSwitch","DSwitch","wasDefault","val","equals","registerDText","DText","registerDAttr","Mixin","DAttr","oldValue","removeAttr","registerDBind","DBind","off","on","registerDClass","DClass","removeClass","addClass","registerDElem","DElem","registerDHide","DHide","hide","show","registerDOn","DOn","evaluateOnce","registerDShow","DShow","registerDStyle","DStyle","removeCSS","css","registerDValidate","DValidate","validator","registerDValue","DValue","_value","type","propSwitcher","initialScopeValue","setProp","initialElemValue","getProp","listenerSwitcher","e","setValueSwitcher","getValueSwitcher","initApp","root","first","blocks","warn","attrName","isInstanceOfMixin","replacement","createComment","registerBlocks","isInstanceOfBlock","deepCloneChildren","registerBuiltIns","register","parentBlock","parentScope","svgNS","svg","localBlocks","dBlockMatch","expressionRegExp","currentMixins","_match","into","blockInstance","global","Args","locals","eventualArgs","defaultArgs","constructPrivateScope","scopeValues","DItemFound","privateScope","afterConstruct","err","afterRender","createMixin","newChild","transformDIfChildren","ifElse","isPrototypeOf","prototype","removeWatchers","constructPublicScope","define","evalMode","getting","temp","changed","oldTempWatchers","onRemove","was","perm","round","digits","zeroes","zero","repeat","now","date","Dat","isAbsolute","url","absoluteURLRegexp","encode","isEncoded","encodeURIComponent","fetchBeforeMiddleware","config","baseURL","data","headers","params","query","METHOD","toUpperCase","constructURL","transformData","header","Str","toCapitalCase","join","initRouter","initialized","Routes","redirectRoute","defaultRoute","RedirectRoute","route","parentName","ParentName","rootRoute","abstract","baseRoute","parentParams","parentQuery","path","relativeURL","relativePath","count","newPath","newURL","validatePath","location","href","pushed","closestLink","closest","preventDefault","makeRoute","callBeforeLoad","beforeLoadRoute","routeLoaded","callBeforeLeave","beforeLeaveRoute","fallbackTo","isDefault","default","wasRoot","Name","Route","unsubscribe","router","encodeParams","encodeQuery","hash","origin","buildURL","__isCurrentRoute__","currentRoute","currentRouteParams","subscribe","isCurrentRoute","delete","forward","changeRoute","findRouteByURL","host","hostname","pathname","port","protocol","search","urlParams","routeURL","requiredQuery","decodeParams","decodeQuery","resolved","resolveURL","eventualParams","param","hasOwn","decode","DefaultRoute","decodeURIComponent","changeHistory","resolveParameter","nameErrorName","valueErrorName","nameMatch","regexp","window","appliedRegExps","id","canvasGetMethods","canvasRestMethods","htmlElements","svgElements","voidElements","htmlAllowedTagSymbols","htmlAllowedAttrSymbols","regexpSpecialCharacters","RangeError","v","methods","TypeError","a","d","f","r","s","Symbol","chars","word","token","def","ret","Case","case","eventualCases","setPrototypeOf","Function","deep","sum","func","descriptors","property","descriptor","props","getter","isFrozen","replacer","space","unshift","stringify","max","obj","getOwnPropertyDescriptor","getOwnPropertyNames","getOwnPropertySymbols","isContextObject","startKey","setter","reduce","secret","iterator","Promise","executor","reject","hiddenPromise","status","onReject","handled","onUnhandledRejection","onError","resolve","then","onFulfill","hiddenStatus","hiddenValue","realPromise","proxy","onRejected","onFulfilledOrRejected","isFunc","onFulfilled","promise","handle","handler","iterable","toResolve","next","done","console","bind","Func","called","canBeCalled","before","sync","contextLocked","context","middleware","afterAll","beforeAll","bindContext","bindArgs","times","lockContext","lockArgs","argsLocked","mark","time","timeEnd","unbindContext","unbindArgs","toRadian","PI","toDegree","ln2","LN2","ln10","LN10","Num","toDegrees","acos","asin","atan","asDegrees","cos","abort","clearTimeout","timeout","aborted","setTimeout","interval","log","power","pow","sin","tan","rej","fractionDigits","toExponential","toFixed","precision","toPrecision","abs","sqrt","cbrt","ceil","exp","ln","sign","keyOf","keyOfStrict","separator","pop","reverse","randomIndex","begin","compareFunction","sort","deleteCount","URL","progress","reader","FileReader","toReject","onprogress","onerror","onload","anchor","document","createElement","dataURL","setAttribute","click","createObjectURL","htmlSpecials","regexpSpecialsRegexp","searchString","position","revert","startsWith","escaped","symbol","searchValue","fromIndex","lastIndexOf","str","beginSlice","endSlice","substr","indexStart","indexEnd","substring","submitString","nodeSwitcher","InternalParsingError","ParsingError","throwUnexpectedError","globalIndex","elements","eventSeparator","textProperty","Node","propertyDescriptor","classes","inputElements","xmlNS","xlinkNS","xhtmlNS","typeSwitcher","ns","documentElement","namespaceURI","createElementNS","createTextNode","refSwitcher","filterSwitcher","is","innerSwitcher","paddings","borders","outerSwitcher","attrNSSwitcher","list","classList","insertAdjacentHTML","style","sheet","cssRules","rules","toHyphenCase","insertRule","dwayneData","strings","applied","setApplied","np1","attributes","getAttribute","getAttributeNS","setAttributeNS","_this4","load","isBroken","canvas","width","height","drawImage","byteString","atob","ab","ArrayBuffer","ia","Uint8Array","blur","pseudo","getComputedStyle","rule","childNodes","className","cloneNode","contains","appliedExpressions","getPropertyValue","getPropertyPriority","removeProperty","setProperty","cssText","toCamelCase","ctx","dataset","encoderOptions","toDataURL","deleteRule","event","eventInit","details","bubbles","cancelable","finalEvent","Event","createEvent","initEvent","dispatchEvent","focus","selectorText","hasAttribute","hasAttributeNS","currentDisplay","previousDisplay","insertBefore","appendChild","firstChild","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","complete","naturalWidth","naturalHeight","images","all","$elem","removeListeners","proper","broken","nextSibling","events","listeners","removeListener","listener","allListeners","removeEventListeners","has","newListener","addEventListener","removeEventListener","previousSibling","link","removeChild","removeAttribute","removeAttributeNS","2","1","created","txt","_arguments6","hasAttr","hasClass","level","validatorWrap","input","errors","validity","valid","validationMessage","validators","formErrors","form","inputs","dispatch","inputError","every","innerHeight","calcCSS","borderTopWidth","borderBottomWidth","boxSizing","paddingTop","paddingBottom","innerWidth","borderLeftWidth","borderRightWidth","paddingLeft","paddingRight","outerHeight","marginTop","marginBottom","outerWidth","marginLeft","marginRight","win","body","head","inputValue","onEvalError","originalArgs","expression","onChange","instance","forDItem","forDEach","expr","DwayneStore","store","localWatchers","newResult","watcherBlock","index1","index2","arg","DwayneBlock","isParentSignal","beforeRemove","variable","_this3","_this5","local","_this6","Blocks","afterUpdate","Mixins","daysOfTheWeekNames","daysOfTheWeekAliases","monthsNames","monthsAliases","utc","coeffs","getSwitcher","setSwitcher","what","prefix","formats","format","replaceString","date1","date2","isBefore","started","coeff","w","setTime","toISOString","toLocaleString","valueOf","querySwitcher","queryParams","encodeOptions","rawHeaders","notToTransform","withoutBody","indexOfStrict","contentType","defaults","uploadMethods","Fetch","fetch","request","conf","toPush","dataConfig","urlConfig","xhr","auth","username","password","responseType","withCredentials","XMLHttpRequest","open","setRequestHeader","upload","onabort","ontimeout","onreadystatechange","readyState","response","responseText","parseHeaders","getAllResponseHeaders","statusText","catch","send","rawParam","paramName","paramObject","subscribers","history","pathSwitcher","part","escapeRegExp","statics"],"mappings":"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","preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi4uL2xpYi9oZWxwZXJzL3RvU3RyaW5nVGFnLmpzIiwiLi4vbGliL2hlbHBlcnMvY2hlY2tUeXBlcy5qcyIsIi4uL2xpYi9ELmpzIiwiLi4vbGliL2hlbHBlcnMvaXRlcmF0ZS5qcyIsIi4uL2xpYi9oZWxwZXJzL2Fzc2lnbi5qcyIsIi4uL2xpYi9oZWxwZXJzL2RlZmluZVByb3BlcnR5LmpzIiwiLi4vbGliL2hlbHBlcnMvdG9BcnJheS5qcyIsIi4uL2xpYi9oZWxwZXJzL3ZhbGlkYXRlLmpzIiwiLi4vbGliL0FscGhhYmV0LmpzIiwiLi4vbGliL1N3aXRjaGVyLmpzIiwiLi4vbGliL1N1cGVyLmpzIiwiLi4vbGliL0Z1bmMuanMiLCIuLi9saWIvTnVtLmpzIiwiLi4vbGliL0Fyci5qcyIsIi4uL2xpYi9CbG9iT2JqZWN0LmpzIiwiLi4vbGliL1N0ci5qcyIsIi4uL2xpYi9oZWxwZXJzL21hcmt1cFRvSlNPTi5qcyIsIi4uL2xpYi9FbGVtLmpzIiwiLi4vbGliL2Jsb2Nrcy9kLWJsb2NrLmpzIiwiLi4vbGliL2Jsb2Nrcy9kLWVhY2guanMiLCIuLi9saWIvYmxvY2tzL2QtZWxlbWVudHMuanMiLCIuLi9saWIvYmxvY2tzL2QtaWYuanMiLCIuLi9saWIvYmxvY2tzL2QtaXRlbS5qcyIsIi4uL2xpYi9ibG9ja3MvZC1zd2l0Y2guanMiLCIuLi9saWIvYmxvY2tzL2QtdGV4dC5qcyIsIi4uL2xpYi9taXhpbnMvZC1hdHRyLmpzIiwiLi4vbGliL21peGlucy9kLWJpbmQuanMiLCIuLi9saWIvbWl4aW5zL2QtY2xhc3MuanMiLCIuLi9saWIvbWl4aW5zL2QtZWxlbS5qcyIsIi4uL2xpYi9taXhpbnMvZC1oaWRlLmpzIiwiLi4vbGliL21peGlucy9kLW9uLmpzIiwiLi4vbGliL21peGlucy9kLXNob3cuanMiLCIuLi9saWIvbWl4aW5zL2Qtc3R5bGUuanMiLCIuLi9saWIvbWl4aW5zL2QtdGV4dC5qcyIsIi4uL2xpYi9taXhpbnMvZC12YWxpZGF0ZS5qcyIsIi4uL2xpYi9taXhpbnMvZC12YWx1ZS5qcyIsIi4uL2xpYi9CbG9jay5qcyIsIi4uL2xpYi9jb25zdGFudHMvZm9ybWF0cy5qcyIsIi4uL2xpYi9EYXQuanMiLCIuLi9saWIvaGVscGVycy9jb25zdHJ1Y3RVUkwuanMiLCIuLi9saWIvRmV0Y2guanMiLCIuLi9saWIvUm91dGVyLmpzIiwiLi4vbGliL2NvbnN0YW50cy9nbG9iYWwuanMiLCIuLi9saWIvY29uc3RhbnRzL2FwcGxpZWRSZWdFeHBzLmpzIiwiLi4vbGliL2NvbnN0YW50cy9jYW52YXNNZXRob2RzLmpzIiwiLi4vbGliL2NvbnN0YW50cy9jb25zdHJ1Y3RvcnMuanMiLCIuLi9saWIvY29uc3RhbnRzL2VsZW1lbnRzLmpzIiwiLi4vbGliL2NvbnN0YW50cy9odG1sQWxsb3dlZFRhZ1N5bWJvbHMuanMiLCIuLi9saWIvY29uc3RhbnRzL3JlZ2V4cFNwZWNpYWxDaGFyYWN0ZXJzLmpzIiwiLi4vbGliL2NvbnN0YW50cy92YWxpZGF0ZUNoZWNrRXhwcmVzc2lvbnMuanMiLCIuLi9saWIvaGVscGVycy9TeW1ib2wuanMiLCIuLi9saWIvUHJvbWlzZS5qcyIsIi4uL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIi4uL2xpYi9oZWxwZXJzL3RyYW5zZm9ybURhdGEuanMiLCIuLi9saWIvaGVscGVycy9yZXNvbHZlVVJMLmpzIiwiLi4vYnJvd3Nlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQG1vZHVsZSBoZWxwZXJzL3RvU3RyaW5nVGFnXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBkZXNjcmlwdGlvbiBFeHBvcnRzIHRvU3RyaW5nVGFnIG1ldGhvZC5cclxuICovXHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uIHRvU3RyaW5nVGFnXHJcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IC0gT2JqZWN0IHRvIGdldCB0b1N0cmluZ1RhZyBvZi5cclxuICogQHJldHVybnMge1N0cmluZ30gQ3V0IHN0cmluZy5cclxuICogQGRlc2NyaXB0aW9uIEN1dCBcIlR5cGVcIiBzdHJpbmcgZnJvbSBcIltvYmplY3QgVHlwZV1cIiBzdHJpbmcgdGhhdCBnb3R0ZW4gZnJvbSB7fS50b1N0cmluZyxjYWxsKG9iamVjdCkuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdG9TdHJpbmdUYWcob2JqZWN0KSB7XHJcbiAgcmV0dXJuIHt9LnRvU3RyaW5nLmNhbGwob2JqZWN0KS5yZXBsYWNlKC9eXFxbb2JqZWN0IHxdJC9nLCAnJyk7XHJcbn1cclxuIiwiLyoqXHJcbiAqIEBtb2R1bGUgaGVscGVycy9jaGVja1R5cGVzXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBtaXhpblxyXG4gKiBAZGVzY3JpcHRpb24gRXhwb3J0cyBpczxUeXBlPiBtZXRob2RzLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IHRvU3RyaW5nVGFnIH0gZnJvbSAnLi90b1N0cmluZ1RhZyc7XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uIGlzQXJyYXlcclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gVmFsdWUgdG8gY2hlY2sgaWYgaXQgaXMgYW4gYXJyYXkuXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBJZiB0aGUgYXJndW1lbnQgaXMgYW4gYXJyYXkgb3Igbm90LlxyXG4gKiBcclxuICogQGV4YW1wbGVcclxuICogaXNBcnJheShbXSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0cnVlXHJcbiAqIGlzQXJyYXkoMCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJ1ZVxyXG4gKiBpc0FycmF5KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyonKSk7IC8vIGZhbHNlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNBcnJheSh2YWx1ZSkge1xyXG4gIHJldHVybiB0b1N0cmluZ1RhZyh2YWx1ZSkgPT09ICdBcnJheSc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZnVuY3Rpb24gaXNBcnJheUxpa2VcclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gVmFsdWUgdG8gY2hlY2sgaWYgaXQgaXMgYXJyYXktbGlrZS5cclxuICogQHJldHVybnMge0Jvb2xlYW59IElmIHRoZSBhcmd1bWVudCBpcyBhcnJheS1saWtlIG9yIG5vdC5cclxuICogQGRlc2NyaXB0aW9uIEJhc2ljYWxseSByZXR1cm5zIGlmIHRoZSBhcmd1bWVudCBoYXMgbm9uLW5lZ2F0aXZlIGludGVnZXIgXCJsZW5ndGhcIiBwcm9wZXJ0eSBhbmQgaXNuJ3QgYSBmdW5jdGlvbi5cclxuICogXHJcbiAqIEBleGFtcGxlXHJcbiAqIGlzQXJyYXlMaWtlKFtdKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRydWVcclxuICogaXNBcnJheUxpa2UoJycpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJ1ZVxyXG4gKiBpc0FycmF5TGlrZSgoKSA9PiB7fSk7ICAgICAgICAgICAgICAgICAgICAgICAvLyBmYWxzZVxyXG4gKiBpc0FycmF5TGlrZShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcqJykpOyAvLyB0cnVlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcclxuICBpZiAoIXZhbHVlIHx8IGlzRnVuY3Rpb24odmFsdWUpKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG4gIFxyXG4gIGNvbnN0IGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcclxuICBcclxuICByZXR1cm4gaXNJbnRlZ2VyKGxlbmd0aCkgJiYgbGVuZ3RoID49IDA7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZnVuY3Rpb24gaXNCb29sZWFuXHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIHsqfSB2YWx1ZSAtIFZhbHVlIHRvIGNoZWNrIGlmIGl0IGlzIGEgYm9vbGVhbi5cclxuICogQHJldHVybnMge0Jvb2xlYW59IElmIHRoZSBhcmd1bWVudCBpcyBhIGJvb2xlYW4gb3Igbm90LlxyXG4gKiBcclxuICogQGV4YW1wbGVcclxuICogaXNCb29sZWFuKHRydWUpOyAgICAgICAgICAgICAgIC8vIHRydWVcclxuICogaXNCb29sZWFuKG5ldyBCb29sZWFuKGZhbHNlKSk7IC8vIHRydWVcclxuICogaXNCb29sZWFuKG51bGwpOyAgICAgICAgICAgICAgIC8vIGZhbHNlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XHJcbiAgcmV0dXJuIHRvU3RyaW5nVGFnKHZhbHVlKSA9PT0gJ0Jvb2xlYW4nO1xyXG59XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uIGlzRGF0ZVxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBWYWx1ZSB0byBjaGVjayBpZiBpdCBpcyBhIGRhdGUuXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBJZiB0aGUgYXJndW1lbnQgaXMgYSBkYXRlIG9yIG5vdC5cclxuICogXHJcbiAqIEBleGFtcGxlXHJcbiAqIGlzRGF0ZShuZXcgRGF0ZSgpKTsgICAgICAgICAgICAgICAgIC8vIHRydWVcclxuICogaXNEYXRlKCcxOTk5LTEyLTMxVDIzOjU5OjU5Ljk5OVonKTsgLy8gZmFsc2VcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0RhdGUodmFsdWUpIHtcclxuICByZXR1cm4gdG9TdHJpbmdUYWcodmFsdWUpID09PSAnRGF0ZSc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZnVuY3Rpb24gaXNEYXRlTGlrZVxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBWYWx1ZSB0byBjaGVjayBpZiBpdCBpcyBkYXRlLWxpa2UuXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBJZiB0aGUgYXJndW1lbnQgaXMgZGF0ZS1saWtlIG9yIG5vdC5cclxuICogQGRlc2NyaXB0aW9uIEJhc2ljYWxseSByZXR1cm5zIGlmIG5ldyBEYXRlKGFyZ3VtZW50KSBpcyBub3QgaW52YWxpZCBkYXRlLlxyXG4gKiBcclxuICogQGV4YW1wbGVcclxuICogaXNEYXRlTGlrZShuZXcgRGF0ZSgpKTsgICAgICAgICAgICAgICAgIC8vIHRydWVcclxuICogaXNEYXRlTGlrZSgnMTk5OS0xMi0zMVQyMzo1OTo1OS45OTlaJyk7IC8vIHRydWVcclxuICogaXNEYXRlTGlrZSgwKTsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRydWVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0RhdGVMaWtlKHZhbHVlKSB7XHJcbiAgdmFsdWUgPSBuZXcgRGF0ZSh2YWx1ZSk7XHJcbiAgXHJcbiAgcmV0dXJuICFpc05hTih2YWx1ZS5nZXRUaW1lKCkpO1xyXG59XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uIGlzRWxlbWVudFxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBWYWx1ZSB0byBjaGVjayBpZiBpdCBpcyBhbiBlbGVtZW50LlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gSWYgdGhlIGFyZ3VtZW50IGlzIGVsZW1lbnQgb3Igbm90LlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBpc0VsZW1lbnQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaHRtbCcpKTsgLy8gdHJ1ZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRWxlbWVudCh2YWx1ZSkge1xyXG4gIHJldHVybiAvRWxlbWVudCQvLnRlc3QodG9TdHJpbmdUYWcodmFsdWUpKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvbiBpc0Zpbml0ZVxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBWYWx1ZSB0byBjaGVjayBpZiBpdCBpcyBmaW5pdGUuXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBJZiB0aGUgYXJndW1lbnQgaXMgZmluaXRlIG9yIG5vdC5cclxuICogXHJcbiAqIEBleGFtcGxlXHJcbiAqIGlzRmluaXRlKDApOyAgICAgICAgLy8gdHJ1ZVxyXG4gKiBpc0Zpbml0ZSgnMCcpOyAgICAgIC8vIGZhbHNlXHJcbiAqIGlzRmluaXRlKEluZmluaXR5KTsgLy8gZmFsc2VcclxuICogaXNGaW5pdGUoTmFOKTsgICAgICAvLyBmYWxzZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRmluaXRlKHZhbHVlKSB7XHJcbiAgaWYgKCFpc051bWJlcih2YWx1ZSkpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbiAgXHJcbiAgdmFsdWUgPSBOdW1iZXIodmFsdWUpO1xyXG5cclxuICByZXR1cm4gIWlzTmFOKHZhbHVlKSAmJiB2YWx1ZSAhPT0gSW5maW5pdHkgJiYgdmFsdWUgIT09IC1JbmZpbml0eTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvbiBpc0Z1bmN0aW9uXHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIHsqfSB2YWx1ZSAtIFZhbHVlIHRvIGNoZWNrIGlmIGl0IGlzIGEgZnVuY3Rpb24uXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBJZiB0aGUgYXJndW1lbnQgaXMgYSBmdW5jdGlvbiBvciBub3QuXHJcbiAqIFxyXG4gKiBAZXhhbXBsZVxyXG4gKiBpc0Z1bmN0aW9uKCgpID0+IHt9KTsgICAgICAgICAgICAvLyB0cnVlXHJcbiAqIFxyXG4gKiBjb25zdCBmdW5jID0gKCkgPT4ge307XHJcbiAqIE9iamVjdC5zZXRQcm90b3R5cGVPZihmdW5jLCB7fSk7XHJcbiAqIGlzRnVuY3Rpb24oZnVuYyk7ICAgICAgICAgICAgICAgIC8vIHRydWVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIHRvU3RyaW5nVGFnKHZhbHVlKSA9PT0gJ0Z1bmN0aW9uJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZnVuY3Rpb24gaXNJbnRlZ2VyXHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIHsqfSB2YWx1ZSAtIFZhbHVlIHRvIGNoZWNrIGlmIGl0IGlzIGFuIGludGVnZXIuXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBJZiB0aGUgYXJndW1lbnQgaXMgYW4gaW50ZWdlciBvciBub3QuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIGlzSW50ZWdlcigwKTsgICAgICAgICAgICAgLy8gdHJ1ZVxyXG4gKiBpc0ludGVnZXIoMC4xKTsgICAgICAgICAgIC8vIGZhbHNlXHJcbiAqIGlzSW50ZWdlcihuZXcgTnVtYmVyKDApKTsgLy8gdHJ1ZVxyXG4gKiBpc0ludGVnZXIoJzAnKTsgICAgICAgICAgIC8vIGZhbHNlXHJcbiAqIGlzSW50ZWdlcihJbmZpbml0eSk7ICAgICAgLy8gZmFsc2VcclxuICogaXNJbnRlZ2VyKE5hTik7ICAgICAgICAgICAvLyBmYWxzZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZSkge1xyXG4gIHJldHVybiBpc051bWJlcih2YWx1ZSkgJiYgdmFsdWUgJSAxID09PSAwO1xyXG59XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uIGlzSW50ZWdlckxpa2VcclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gVmFsdWUgdG8gY2hlY2sgaWYgaXQgaXMgaW50ZWdlci1saWtlLlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gSWYgdGhlIGFyZ3VtZW50IGlzIGludGVnZXItbGlrZSBvciBub3QuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIGlzSW50ZWdlckxpa2UoMCk7ICAgICAgICAgICAgIC8vIHRydWVcclxuICogaXNJbnRlZ2VyTGlrZShuZXcgTnVtYmVyKDApKTsgLy8gdHJ1ZVxyXG4gKiBpc0ludGVnZXJMaWtlKDAuMSk7ICAgICAgICAgICAvLyBmYWxzZVxyXG4gKiBpc0ludGVnZXJMaWtlKCcwJyk7ICAgICAgICAgICAvLyB0cnVlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNJbnRlZ2VyTGlrZSh2YWx1ZSkge1xyXG4gIHZhbHVlID0gcGFyc2VJbnQoTnVtYmVyKHZhbHVlKSk7XHJcblxyXG4gIHJldHVybiAhISh2YWx1ZSB8fCB2YWx1ZSA9PT0gMCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZnVuY3Rpb24gaXNOYU5cclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gVmFsdWUgdG8gY2hlY2sgaWYgaXQgaXMgTmFOLlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gSWYgdGhlIGFyZ3VtZW50IGlzIE5hTiBvciBub3QuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIGlzTmFOKDApOyAgICAgICAgICAgICAgIC8vIGZhbHNlXHJcbiAqIGlzTmFOKCdOYU4nKTsgICAgICAgICAgIC8vIGZhbHNlXHJcbiAqIGlzTmFOKE5hTik7ICAgICAgICAgICAgIC8vIHRydWVcclxuICogaXNOYU4obmV3IE51bWJlcihOYU4pKTsgLy8gdHJ1ZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzTmFOKHZhbHVlKSB7XHJcbiAgaWYgKCFpc051bWJlcih2YWx1ZSkpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbiAgXHJcbiAgdmFsdWUgPSBOdW1iZXIodmFsdWUpO1xyXG5cclxuICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xyXG59XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uIGlzTnVsbFxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBWYWx1ZSB0byBjaGVjayBpZiBpdCBpcyBudWxsLlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gSWYgdGhlIGFyZ3VtZW50IGlzIG51bGwgb3Igbm90LlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBpc051bGwobnVsbCk7ICAgICAgLy8gdHJ1ZVxyXG4gKiBpc051bGwodW5kZWZpbmVkKTsgLy8gZmFsc2VcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc051bGwodmFsdWUpIHtcclxuICByZXR1cm4gdmFsdWUgPT09IG51bGw7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZnVuY3Rpb24gaXNOaWxcclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gVmFsdWUgdG8gY2hlY2sgaWYgaXQgaXMgbnVsbCBvciB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBJZiB0aGUgYXJndW1lbnQgaXMgbnVsbCBvciB1bmRlZmluZWQgb3Igbm90LlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBpc05pbChudWxsKTsgICAgICAvLyB0cnVlXHJcbiAqIGlzTmlsKHVuZGVmaW5lZCk7IC8vIHRydWVcclxuICogaXNOaWwoZmFsc2UpOyAgICAgLy8gZmFsc2VcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc05pbCh2YWx1ZSkge1xyXG4gIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnO1xyXG59XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uIGlzTnVtYmVyXHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIHsqfSB2YWx1ZSAtIFZhbHVlIHRvIGNoZWNrIGlmIGl0IGlzIGEgbnVtYmVyLlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gSWYgdGhlIGFyZ3VtZW50IGlzIGEgbnVtYmVyIG9yIG5vdC5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogaXNOdW1iZXIoMCk7ICAgICAgICAgICAgIC8vIHRydWVcclxuICogaXNOdW1iZXIobmV3IE51bWJlcigwKSk7IC8vIHRydWVcclxuICogaXNOdW1iZXIoTmFOKTsgICAgICAgICAgIC8vIHRydWVcclxuICogaXNOdW1iZXIoJzAnKTsgICAgICAgICAgIC8vIGZhbHNlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcclxuICByZXR1cm4gdG9TdHJpbmdUYWcodmFsdWUpID09PSAnTnVtYmVyJztcclxufVxyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvbiBpc051bWJlckxpa2VcclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gVmFsdWUgdG8gY2hlY2sgaWYgaXQgaXMgbnVtYmVyLWxpa2UuXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBJZiB0aGUgYXJndW1lbnQgaXMgbnVtYmVyLWxpa2Ugb3Igbm90LlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBpc051bWJlckxpa2UoMCk7ICAgICAgICAgIC8vIHRydWVcclxuICogaXNOdW1iZXJMaWtlKCcwJyk7ICAgICAgICAvLyB0cnVlXHJcbiAqIGlzTnVtYmVyTGlrZSgnSW5maW5pdHknKTsgLy8gdHJ1ZVxyXG4gKiBpc051bWJlckxpa2UoJ05hTicpOyAgICAgIC8vIHRydWVcclxuICogaXNOdW1iZXJMaWtlKE5hTik7ICAgICAgICAvLyB0cnVlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXJMaWtlKHZhbHVlKSB7XHJcbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gJ05hTicpIHtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuICBcclxuICB2YWx1ZSA9IE51bWJlcih2YWx1ZSk7XHJcbiAgXHJcbiAgcmV0dXJuICEhKHZhbHVlIHx8IHZhbHVlID09PSAwKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvbiBpc09iamVjdFxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBWYWx1ZSB0byBjaGVjayBpZiBpdCBpcyBhbiBvYmplY3QuXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBJZiB0aGUgYXJndW1lbnQgaXMgYW4gb2JqZWN0IG9yIG5vdC5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogaXNPYmplY3Qoe30pOyAgIC8vIHRydWVcclxuICogaXNPYmplY3QoMSk7ICAgIC8vIGZhbHNlXHJcbiAqIGlzT2JqZWN0KG51bGwpOyAvLyBmYWxzZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XHJcbiAgcmV0dXJuICEhdmFsdWUgJiYgKHRvU3RyaW5nVGFnKHZhbHVlKSA9PT0gJ09iamVjdCcgfHwgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyB8fCB2YWx1ZSBpbnN0YW5jZW9mIE9iamVjdCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZnVuY3Rpb24gaXNQbGFpbk9iamVjdFxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBWYWx1ZSB0byBjaGVjayBpZiBpdCBpcyBhIHBsYWluIG9iamVjdC5cclxuICogQHJldHVybnMge0Jvb2xlYW59IElmIHRoZSBhcmd1bWVudCBpcyBhIHBsYWluIG9iamVjdCBvciBub3QuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIGNvbnN0IG9iaiA9IHt9O1xyXG4gKlxyXG4gKiBpZlBsYWluT2JqZWN0KG9iaik7IC8vIHRydWVcclxuICpcclxuICogT2JqZWN0LnNldFByb3RvdHlwZU9mKG9iamVjdCwgbnVsbCk7XHJcbiAqXHJcbiAqIGlmUGxhaW5PYmplY3Qob2JqKTsgLy8gdHJ1ZVxyXG4gKlxyXG4gKiBPYmplY3Quc2V0UHJvdG90eXBlT2Yob2JqZWN0LCB7fSk7XHJcbiAqXHJcbiAqIGlmUGxhaW5PYmplY3Qob2JqKTsgLy8gZmFsc2VcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XHJcbiAgaWYgKGlzUHJpbWl0aXZlKHZhbHVlKSkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpO1xyXG5cclxuICBpZiAoaXNOdWxsKHByb3RvKSkge1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBjb25zdCBjb25zdHJ1Y3RvciA9IHByb3RvLmNvbnN0cnVjdG9yO1xyXG5cclxuICByZXR1cm4gaXNGdW5jdGlvbihjb25zdHJ1Y3RvcikgJiZcclxuICAgIGNvbnN0cnVjdG9yIGluc3RhbmNlb2YgY29uc3RydWN0b3IgJiZcclxuICAgIGlzTnVsbChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvbiBpc1ByaW1pdGl2ZVxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBWYWx1ZSB0byBjaGVjayBpZiBpdCBpcyBwcmltaXRpdmUuXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBJZiB0aGUgYXJndW1lbnQgaXMgcHJpbWl0aXZlIG9yIG5vdC5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogaXNQcmltaXRpdmUoMSk7ICAgICAgICAgICAgIC8vIHRydWVcclxuICogaXNQcmltaXRpdmUoe30pOyAgICAgICAgICAgIC8vIGZhbHNlXHJcbiAqIGlzUHJpbWl0aXZlKCcnKTsgICAgICAgICAgICAvLyB0cnVlXHJcbiAqIGlzUHJpbWl0aXZlKG5ldyBOdW1iZXIoMCkpOyAvLyBmYWxzZVxyXG4gKiBpc1ByaW1pdGl2ZSh0cnVlKTsgICAgICAgICAgLy8gdHJ1ZVxyXG4gKiBpc1ByaW1pdGl2ZShTeW1ib2woJ2ZvbycpKTsgLy8gdHJ1ZVxyXG4gKiBpc1ByaW1pdGl2ZShudWxsKTsgICAgICAgICAgLy8gdHJ1ZVxyXG4gKiBpc1ByaW1pdGl2ZSh1bmRlZmluZWQpOyAgICAgLy8gdHJ1ZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJpbWl0aXZlKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGlzTnVsbCh2YWx1ZSkgfHwgL14obnVtYmVyfHN0cmluZ3xib29sZWFufHN5bWJvbHx1bmRlZmluZWQpJC8udGVzdCh0eXBlb2YgdmFsdWUpO1xyXG59XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uIGlzUmVnRXhwXHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIHsqfSB2YWx1ZSAtIFZhbHVlIHRvIGNoZWNrIGlmIGl0IGlzIGEgcmVndWxhciBleHByZXNzaW9uLlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gSWYgdGhlIGFyZ3VtZW50IGlzIGEgcmVndWxhciBleHByZXNzaW9uIG9yIG5vdC5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogaXNSZWdFeHAoL2Zvby8pOyAgICAgICAgICAgICAvLyB0cnVlXHJcbiAqIGlzUmVnRXhwKCcvZm9vLycpOyAgICAgICAgICAgLy8gZmFsc2VcclxuICogaXNSZWdFeHAobmV3IFJlZ0V4cCgnZm9vJykpOyAvLyB0cnVlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNSZWdFeHAodmFsdWUpIHtcclxuICByZXR1cm4gdG9TdHJpbmdUYWcodmFsdWUpID09PSAnUmVnRXhwJztcclxufVxyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvbiBpc1N0cmluZ1xyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBWYWx1ZSB0byBjaGVjayBpZiBpdCBpcyBhIHN0cmluZy5cclxuICogQHJldHVybnMge0Jvb2xlYW59IElmIHRoZSBhcmd1bWVudCBpcyBhIHN0cmluZyBvciBub3QuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIGlzU3RyaW5nKCcwJyk7ICAgICAgICAgICAgIC8vIHRydWVcclxuICogaXNTdHJpbmcobmV3IFN0cmluZygnMCcpKTsgLy8gdHJ1ZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XHJcbiAgcmV0dXJuIHRvU3RyaW5nVGFnKHZhbHVlKSA9PT0gJ1N0cmluZyc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZnVuY3Rpb24gaXNTeW1ib2xcclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gVmFsdWUgdG8gY2hlY2sgaWYgaXQgaXMgYSBzeW1ib2wuXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBJZiB0aGUgYXJndW1lbnQgaXMgYSBzeW1ib2wgb3Igbm90LlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBpc1N5bWJvbChTeW1ib2woJzEnKSk7IC8vIHRydWVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xyXG4gIHJldHVybiB0b1N0cmluZ1RhZyh2YWx1ZSkgPT09ICdTeW1ib2wnO1xyXG59XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uIGlzVW5kZWZpbmVkXHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIHsqfSB2YWx1ZSAtIFZhbHVlIHRvIGNoZWNrIGlmIGl0IGlzIHVuZGVmaW5lZC5cclxuICogQHJldHVybnMge0Jvb2xlYW59IElmIHRoZSBhcmd1bWVudCBpcyB1bmRlZmluZWQgb3Igbm90LlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBpc1VuZGVmaW5lZChudWxsKTsgICAgICAvLyBmYWxzZVxyXG4gKiBpc1VuZGVmaW5lZCh1bmRlZmluZWQpOyAvLyB0cnVlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtcclxuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJztcclxufVxyXG4iLCIvKipcclxuICogQG1vZHVsZSBEXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBkZXNjcmlwdGlvbiBFeHBvcnRzIEQgZnVuY3Rpb24uXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgY29uc3RydWN0b3JzIH0gZnJvbSAnLi9jb25zdGFudHMnO1xyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvbiBEXHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIHsqfSBbdmFsdWVdIC0gQW55IHZhbHVlLlxyXG4gKiBAcmV0dXJucyB7RFdyYXB9IFdyYXAgb2YgdGhlIGFyZ3VtZW50LlxyXG4gKiBAZGVzY3JpcHRpb24gRnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgRC13cmFwIG9mIGFuIG9iamVjdC5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogRCh7fSk7ICAgICAgICAgICAgLy8gU3VwZXJcclxuICogRCgoKSA9PiB7fSk7ICAgICAgLy8gRnVuY1xyXG4gKiBEKFtdKTsgICAgICAgICAgICAvLyBBcnJcclxuICogRCgxKTsgICAgICAgICAgICAgLy8gTnVtXHJcbiAqIEQoJzEnKTsgICAgICAgICAgIC8vIFN0clxyXG4gKiBEKG5ldyBEYXRlKCkpOyAgICAvLyBEYXRcclxuICogRChkb2N1bWVudC5ib2R5KTsgLy8gRWxlbVxyXG4gKi9cclxuZnVuY3Rpb24gRCh2YWx1ZSkge1xyXG4gIGZvciAobGV0IGkgPSBjb25zdHJ1Y3RvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgIGNvbnN0IGxldmVsQ29uc3RydWN0b3JzID0gY29uc3RydWN0b3JzW2ldO1xyXG5cclxuICAgIGZvciAobGV0IGsgPSAwLCBsZW4gPSBsZXZlbENvbnN0cnVjdG9ycy5sZW5ndGg7IGsgPCBsZW47IGsrKykge1xyXG4gICAgICBjb25zdCBjb25zdHJ1Y3RvciA9IGxldmVsQ29uc3RydWN0b3JzW2tdO1xyXG5cclxuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgY29uc3RydWN0b3IuY2xzKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoY29uc3RydWN0b3IuY2hlY2sodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBjb25zdHJ1Y3Rvci5jbHModmFsdWUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgKiBmcm9tICcuL2hlbHBlcnMvY2hlY2tUeXBlcyc7XHJcbmV4cG9ydCB7IEQgfTtcclxuIiwiLyoqXHJcbiAqIEBtb2R1bGUgaGVscGVycy9pdGVyYXRlXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBkZXNjcmlwdGlvbiBFeHBvcnRzIGl0ZXJhdGUgbWV0aG9kLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IGlzQXJyYXlMaWtlLCBpc1VuZGVmaW5lZCB9IGZyb20gJy4vY2hlY2tUeXBlcyc7XHJcblxyXG4vKipcclxuICogQGNhbGxiYWNrIEl0ZXJhdGlvbkNhbGxiYWNrXHJcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBJdGVyYXRpb24gdmFsdWUuXHJcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0ga2V5IC0gSXRlcmF0aW9uIGtleS5cclxuICogQHBhcmFtIHsqfSBvYmplY3QgLSBJbml0aWFsIGl0ZXJhYmxlIG9iamVjdC5cclxuICovXHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uIGl0ZXJhdGVcclxuICogQHBhcmFtIHsoT2JqZWN0fEFycmF5fG51bGx8dW5kZWZpbmVkKX0gb2JqZWN0IC0gVmFsdWUgdG8gaXRlcmF0ZSBvdmVyLlxyXG4gKiBAcGFyYW0ge0l0ZXJhdGlvbkNhbGxiYWNrfSBjYWxsYmFjayAtIENhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIG9uIGV2ZXJ5IGl0ZXJhdGlvbi5cclxuICogQHJldHVybnMgeyp9IElmIGNhbGxiYWNrIHJldHVybnMgbm90IHVuZGVmaW5lZCB0aGVuIGl0ZXJhdGUgcmV0dXJucyB0aGlzIHZhbHVlLlxyXG4gKiBAZGVzY3JpcHRpb24gRnVuY3Rpb24gZm9yIGl0ZXJhdGluZyBvdmVyIGFsbCB0eXBlcyBvZiB2YWx1ZXMuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXRlcmF0ZShvYmplY3QsIGNhbGxiYWNrKSB7XHJcbiAgY29uc3QgYXJyYXkgPSBpc0FycmF5TGlrZShvYmplY3QpO1xyXG4gIGNvbnN0IGl0ZXJhdGVkS2V5cyA9IHt9O1xyXG5cclxuICBsZXQgaXRlcmF0ZWQgPSAwO1xyXG5cclxuICBmb3IgKGNvbnN0IGtleSBpbiBvYmplY3QpIHtcclxuICAgIGlmICh7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGl0ZXJhdGVkS2V5cywga2V5KSkge1xyXG4gICAgICBjb250aW51ZTtcclxuICAgIH1cclxuXHJcbiAgICBpdGVyYXRlZEtleXNba2V5XSA9IHRydWU7XHJcblxyXG4gICAgaWYgKHt9Lmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSB7XHJcbiAgICAgIGlmIChhcnJheSAmJiBpdGVyYXRlZCsrID49IG9iamVjdC5sZW5ndGgpIHtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgdmFsdWUgPSBjYWxsYmFjayhvYmplY3Rba2V5XSwgYXJyYXkgPyBOdW1iZXIoa2V5KSA6IGtleSwgb2JqZWN0KTtcclxuXHJcbiAgICAgIGlmICghaXNVbmRlZmluZWQodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBAbW9kdWxlIGhlbHBlcnMvYXNzaWduXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBkZXNjcmlwdGlvbiBFeHBvcnRzIE9iamVjdC5hc3NpZ24tbGlrZSBtZXRob2QuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgaXRlcmF0ZSB9IGZyb20gJy4vaXRlcmF0ZSc7XHJcblxyXG4vKipcclxuICogQGNvbnN0XHJcbiAqIEBmdW5jdGlvbiBhc3NpZ25cclxuICogQHBhcmFtIHtPYmplY3R9IHRhcmdldCAtIE9iamVjdCB0byBhc3NpZ24gcmVzdCBvZiBhcmd1bWVudHMgdG8uXHJcbiAqIEBwYXJhbSB7Li4uT2JqZWN0fSBvYmplY3RzIC0gT2JqZWN0cyB0aGF0IGFyZSBhc3NpZ25lZCB0byB0aGUgdGFyZ2V0LlxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUYXJnZXQuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgLi4ub2JqZWN0cykge1xyXG4gIGl0ZXJhdGUoYXJndW1lbnRzLCAoc291cmNlLCBpbmRleCkgPT4ge1xyXG4gICAgaWYgKGluZGV4KSB7XHJcbiAgICAgIGl0ZXJhdGUoc291cmNlLCAodmFsdWUsIGtleSkgPT4ge1xyXG4gICAgICAgIHRhcmdldFtrZXldID0gdmFsdWU7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gICAgXHJcbiAgcmV0dXJuIHRhcmdldDtcclxufVxyXG4iLCIvKipcclxuICogQG1vZHVsZSBoZWxwZXJzL2RlZmluZVByb3BlcnR5XHJcbiAqIEBwcml2YXRlXHJcbiAqIEBkZXNjcmlwdGlvbiBFeHBvcnRzIGRlZmluZVByb3BlcnR5IGFuZCBkeW5hbWljRGVmaW5lUHJvcGVydGllcyBtZXRob2RzLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IGl0ZXJhdGUgfSBmcm9tICcuL2l0ZXJhdGUnO1xyXG5cclxuLyoqXHJcbiAqIEBjYWxsYmFjayBwcm9wZXJ0eUdlbmVyYXRvckNhbGxiYWNrXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIC0gTmFtZSBvZiB0aGUgcHJvcGVydHkuXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBpIC0gSW5kZXggb2YgdGhlIGFycmF5LlxyXG4gKiBAcmV0dXJucyB7Kn0gR2VuZXJhdGVkIHByb3BlcnR5LlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAZnVuY3Rpb24gZHluYW1pY0RlZmluZVByb3BlcnRpZXNcclxuICogQHBhcmFtIHtPYmplY3R9IHRhcmdldCAtIE9iamVjdCB0byBkZWZpbmUgcHJvcGVydGllcyBmb3IuXHJcbiAqIEBwYXJhbSB7QXJyYXl9IHByb3BlcnRpZXMgLSBPYmplY3Qgd2hpY2gga2V5cyBhcmUgcHJvcGVydGllcy5cclxuICogQHBhcmFtIHtwcm9wZXJ0eUdlbmVyYXRvckNhbGxiYWNrfSBwcm9wZXJ0eUdlbmVyYXRvciAtIENhbGxiYWNrIGZvciBldmVyeSBwcm9wZXJ0eS5cclxuICogQHJldHVybnMge3ZvaWR9XHJcbiAqIEBkZXNjcmlwdGlvbiBGdW5jdGlvbiBmb3IgZHluYW1pYyBjcmVhdGluZyBwcm9wZXJ0aWVzIGJhc2VkIG9uIG5hbWUgb2YgdGhlIG1ldGhvZC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkeW5hbWljRGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BlcnRpZXMsIHByb3BlcnR5R2VuZXJhdG9yKSB7XHJcbiAgaXRlcmF0ZShwcm9wZXJ0aWVzLCAobmFtZSwgaSkgPT4ge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbmFtZSwge1xyXG4gICAgICB2YWx1ZTogcHJvcGVydHlHZW5lcmF0b3IobmFtZSwgaSksXHJcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxyXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXQgLSBUYXJnZXQgdG8gZGVmaW5lIHByb3BlcnRpZXMgZm9yLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllcyAtIE9iamVjdCB3aXRoIHByb3BlcnRpZXMgbmVlZGVkIHRvIGJlIGFzc2lnbiB0byB0aGUgdGFyZ2V0LlxyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICogQGRlc2NyaXB0aW9uIEZ1bmN0aW9uIGZvciBkZWZpbmluZyBwcm9wZXJ0aWVzIG9mIGFuIG9iamVjdC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcGVydGllcykge1xyXG4gIGl0ZXJhdGUocHJvcGVydGllcywgKG1ldGhvZCwgbmFtZSkgPT4ge1xyXG4gICAgaWYgKC9eZ2V0IC8udGVzdChuYW1lKSkge1xyXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBuYW1lLnJlcGxhY2UoL15nZXQgLywgJycpLCB7XHJcbiAgICAgICAgZ2V0OiBtZXRob2QsXHJcbiAgICAgICAgc2V0OiB1bmRlZmluZWQsXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICgvXnNldCAvLnRlc3QobmFtZSkpIHtcclxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbmFtZS5yZXBsYWNlKC9ec2V0IC8sICcnKSwge1xyXG4gICAgICAgIHNldDogbWV0aG9kLFxyXG4gICAgICAgIGdldDogdW5kZWZpbmVkLFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoL15nZXRcXC9zZXQgLy50ZXN0KG5hbWUpKSB7XHJcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG5hbWUucmVwbGFjZSgvXmdldFxcL3NldCAvLCAnJyksIHtcclxuICAgICAgICBnZXQ6IG1ldGhvZC5nZXQsXHJcbiAgICAgICAgc2V0OiBtZXRob2Quc2V0LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobmFtZSAhPT0gJ1N5bWJvbC50b1N0cmluZ1RhZycpIHtcclxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbmFtZSwge1xyXG4gICAgICAgIHZhbHVlOiBtZXRob2QsXHJcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcbiIsIi8qKlxyXG4gKiBAbW9kdWxlIGhlbHBlcnMvdG9BcnJheVxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAZGVzY3JpcHRpb24gRXhwb3J0cyB0b0FycmF5IG1ldGhvZC5cclxuICovXHJcblxyXG5pbXBvcnQgeyBpc0FycmF5LCBpc0FycmF5TGlrZSwgaXNTdHJpbmcgfSBmcm9tICcuL2NoZWNrVHlwZXMnO1xyXG5pbXBvcnQgeyBpdGVyYXRlIH0gZnJvbSAnLi9pdGVyYXRlJztcclxuXHJcbi8qKlxyXG4gKiBAZnVuY3Rpb24gdG9BcnJheVxyXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gQW55IHZhbHVlLlxyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtjcmVhdGVOZXdBcnJheSA9IGZhbHNlXSAtIElmIGl0IGlzIG5lZWRlZCB0byBjcmVhdGUgbmV3IGFycmF5LlxyXG4gKiBAcmV0dXJucyB7QXJyYXl9IENyZWF0ZSBhcnJheS5cclxuICogQGRlc2NyaXB0aW9uIEZ1bmN0aW9uIGZvciBjcmVhdGluZyBhbiBhcnJheSBvZiBhbnkgdmFsdWUuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdG9BcnJheSh2YWx1ZSwgY3JlYXRlTmV3QXJyYXkpIHtcclxuICBpZiAoaXNBcnJheSh2YWx1ZSkgJiYgIWNyZWF0ZU5ld0FycmF5KSB7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbiAgfVxyXG5cclxuICBjb25zdCBhcnJheSA9IFtdO1xyXG5cclxuICBpZiAoaXNBcnJheUxpa2UodmFsdWUpICYmICFpc1N0cmluZyh2YWx1ZSkpIHtcclxuICAgIGl0ZXJhdGUodmFsdWUsICh2YWx1ZSkgPT4ge1xyXG4gICAgICBhcnJheS5wdXNoKHZhbHVlKTtcclxuICAgIH0pO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBhcnJheS5wdXNoKHZhbHVlKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBhcnJheTtcclxufVxyXG4iLCIvKipcclxuICogQG1vZHVsZSBoZWxwZXJzL3ZhbGlkYXRlXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBkZXNjcmlwdGlvbiBFeHBvcnRzIHZhbGlkYXRlIG1ldGhvZC5cclxuICovXHJcblxyXG5pbXBvcnQgeyB2YWxpZGF0ZUNoZWNrRXhwcmVzc2lvbnMgfSBmcm9tICcuLi9jb25zdGFudHMnO1xyXG5pbXBvcnQgeyBpdGVyYXRlIH0gZnJvbSAnLi9pdGVyYXRlJztcclxuaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJy4vY2hlY2tUeXBlcyc7XHJcblxyXG5jb25zdCBudW1iZXJzID0gWycxc3QnLCAnMm5kJywgJzNyZCcsICc0dGgnLCAnNXRoJywgJzZ0aCcsICc3dGgnXTtcclxuXHJcbi8qKlxyXG4gKiBAZnVuY3Rpb24gdmFsaWRhdGVcclxuICogQHByaXZhdGVcclxuICogQHBhcmFtIHtPYmplY3R9IGFyZ3MgLSBBcmd1bWVudHMgb2YgZnVuY3Rpb24uXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT2JqZWN0IHdpdGggdmFsaWRhdGUgcGFyYW1ldGVycy5cclxuICogQHBhcmFtIHtTdHJpbmd9IFtuYW1lXSAtIE5hbWUgb2YgdGhlIGZ1bmN0aW9uIHdoYXQgY2FsbGVkIHZhbGlkYXRlLlxyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICogQGRlc2NyaXB0aW9uIEZ1bmN0aW9uIGZvciBjaGVja2luZyBhcmd1bWVudHMgb2Ygb3RoZXIgZnVuY3Rpb25zLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlKGFyZ3MsIG9wdGlvbnMsIG5hbWUpIHtcclxuICBpdGVyYXRlKG9wdGlvbnMsIChhcnJheSwgbnVtYmVyKSA9PiB7XHJcbiAgICBpZiAoIWlzQXJyYXkoYXJyYXkpKSB7XHJcbiAgICAgIGFycmF5ID0gW2FycmF5XTtcclxuICAgIH1cclxuXHJcbiAgICBpdGVyYXRlKGFycmF5LCAoY2hlY2tlcikgPT4ge1xyXG4gICAgICBjaGVja2VyID0gdmFsaWRhdGVDaGVja0V4cHJlc3Npb25zW2NoZWNrZXJdO1xyXG5cclxuICAgICAgaWYgKCFjaGVja2VyLmNoZWNrKGFyZ3NbbnVtYmVyXSkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgY2hlY2tlci5lcnJvcihjaGVja2VyLnRleHQucmVwbGFjZSgnJG4nLCBudW1iZXJzW251bWJlcl0pICsgKG5hbWUgPyBgIChhdCAkeyBuYW1lIH0pYCA6ICcnKSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0pO1xyXG59XHJcbiIsIi8qKlxyXG4gKiBAbW9kdWxlIEFscGhhYmV0XHJcbiAqIEBwcml2YXRlXHJcbiAqIEBtaXhpblxyXG4gKiBAZGVzY3JpcHRpb24gRXhwb3J0cyBBbHBoYWJldCBjbGFzcy5cclxuICovXHJcblxyXG5pbXBvcnQgeyBpc1N0cmluZywgdmFsaWRhdGUsIGRlZmluZVByb3BlcnRpZXMsIFN5bWJvbCB9IGZyb20gJy4vaGVscGVycyc7XHJcblxyXG4vKipcclxuICogQHR5cGVkZWYge1N0cmluZ30gQ2hhclxyXG4gKiBAcHVibGljXHJcbiAqIEBkZXNjcmlwdGlvbiBBIHN0cmluZyBvZiBvbmUgY2hhci5cclxuICovXHJcblxyXG4vKipcclxuICogQGNsYXNzIEFscGhhYmV0XHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIHtBcnJheUxpa2V9IGFscGhhYmV0IC0gQWxwaGFiZXQgdG8gd3JhcC5cclxuICogQHJldHVybnMge0FscGhhYmV0fSBJbnN0YW5jZSBvZiBBbHBoYWJldC5cclxuICogQGRlc2NyaXB0aW9uIENsYXNzIGZvciBhbHBoYWJldCBtYW5pcHVsYXRpb25zOiBhZGQsIGRlbGV0ZSBzeW1ib2xzLCBnZW5lcmF0ZSBhIHRva2VuIGZyb20gYW4gYWxwaGFiZXQsXHJcbiAqIGNoZWNrIGlmIGFuIGFscGhhYmV0IGNvbnRhaW5zIGEgd29yZC5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogbmV3IEFscGhhYmV0KFsnYScsICdiJywgJ2MnXSk7XHJcbiAqL1xyXG5jbGFzcyBBbHBoYWJldCB7XHJcbiAgY29uc3RydWN0b3IoYWxwaGFiZXQgPSBbXSkge1xyXG4gICAgY29uc3QgYSA9IHt9O1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSBhbHBoYWJldC5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICBjb25zdCBjaGFyID0gYWxwaGFiZXRbaV07XHJcblxyXG4gICAgICBpZiAoIWNoZWNrKGNoYXIpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFYWNoIGVsZW1lbnQgb2YgYW4gYXJyYXkgbXVzdCBiZSBhIHNpbmdsZSBjaGFyISAoaW4gQWxwaGFiZXQpJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGFbY2hhcl0gPSBjaGFyO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQG1lbWJlciB7T2JqZWN0fSBBbHBoYWJldCMkJFxyXG4gICAgICogQHB1YmxpY1xyXG4gICAgICogQGRlc2NyaXB0aW9uIFRoZSBhbHBoYWJldC5cclxuICAgICAqL1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICckJCcsIHsgdmFsdWU6IGEgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEFscGhhYmV0I2FkZFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0gey4uLkNoYXJ9IGNoYXJzIC0gQ2hhcnMgdG8gYWRkLlxyXG4gICAqIEByZXR1cm5zIHtBbHBoYWJldH0gUmV0dXJucyB0aGlzLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBNZXRob2QgZm9yIGFkZGluZyBuZXcgbGV0dGVycyB0byB0aGUgYWxwaGFiZXQuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIGNvbnN0IGFscGhhYmV0ID0gbmV3IEFscGhhYmV0KFsnYScsICdiJywgJ2MnXSk7XHJcbiAgICpcclxuICAgKiBhbHBoYWJldC5hZGQoJ2QnLCAnZScpO1xyXG4gICAqXHJcbiAgICogYWxwaGFiZXQuZ2V0KCkuJDsgLy8gWydhJywgJ2InLCAnYycsICdkJywgJ2UnXVxyXG4gICAqL1xyXG4gIGFkZCguLi5jaGFycykge1xyXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IGNoYXJzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGNoYXIgPSBjaGFyc1tpXTtcclxuXHJcbiAgICAgIGlmICghY2hlY2soY2hhcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0VhY2ggYXJndW1lbnQgbXVzdCBiZSBhIHNpbmdsZSBjaGFyISAoaW4gQWxwaGFiZXQjYWRkKScpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLiQkW2NoYXJdID0gY2hhcjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgQWxwaGFiZXQjY29udGFpbnNcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IHdvcmQgLSBXb3JkIHRvIGNoZWNrIGlmIGl0IGlzIGluIHRoZSBhbHBoYWJldCBvciBub3QuXHJcbiAgICogQHJldHVybnMge0Jvb2xlYW59IElmIHRoZSB3b3JkIGluIHRoZSBhbHBoYWJldCBvciBub3QuXHJcbiAgICogQGRlc2NyaXB0aW9uIE1ldGhvZCB0aGF0IHJldHVybnMgaWYgYSB3b3JkIGlzIGluIGFscGhhYmV0IG9yIG5vdC5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogY29uc3QgYWxwaGFiZXQgPSBuZXcgQWxwaGFiZXQoWydmJywgJ2InLCAnbycsICdhJywgJ3InXSk7XHJcbiAgICpcclxuICAgKiBhbHBoYWJldC5jb250YWlucygnZm9vJyk7IC8vIHRydWVcclxuICAgKiBhbHBoYWJldC5jb250YWlucygnYmFyJyk7IC8vIHRydWVcclxuICAgKiBhbHBoYWJldC5jb250YWlucygnYmF6Jyk7IC8vIGZhbHNlXHJcbiAgICovXHJcbiAgY29udGFpbnMod29yZCkge1xyXG4gICAgdmFsaWRhdGUoW3dvcmRdLCBbJ3N0cmluZyddLCAnQWxwaGFiZXQjY29udGFpbnMnKTtcclxuXHJcbiAgICBjb25zdCBhbHBoYWJldCA9IHRoaXMuJCQ7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IHdvcmQubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgaWYgKCFhbHBoYWJldFt3b3JkW2ldXSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBBbHBoYWJldCNkZWxldGVcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHsuLi5DaGFyfSBjaGFycyAtIENoYXJzIHRvIGRlbGV0ZS5cclxuICAgKiBAcmV0dXJucyB7QWxwaGFiZXR9IFJldHVybnMgdGhpcy5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIGZvciBkZWxldGluZyBsZXR0ZXJzIGZyb20gdGhlIGFscGhhYmV0LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBjb25zdCBhbHBoYWJldCA9IG5ldyBBbHBoYWJldChbJ2EnLCAnYicsICdjJywgJ2QnXSk7XHJcbiAgICpcclxuICAgKiBhbHBoYWJldC5kZWxldGUoJ2EnKTtcclxuICAgKlxyXG4gICAqIGFscGhhYmV0LmdldCgpLiQ7IC8vIFsnYicsICdjJywgJ2QnXVxyXG4gICAqXHJcbiAgICogYWxwaGFiZXQuZGVsZXRlKCdiJywgJ2QnKTtcclxuICAgKlxyXG4gICAqIGFscGhhYmV0LmdldCgpLiQ7IC8vIFsnYyddXHJcbiAgICovXHJcbiAgZGVsZXRlKC4uLmNoYXJzKSB7XHJcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0gY2hhcnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgY29uc3QgY2hhciA9IGNoYXJzW2ldO1xyXG5cclxuICAgICAgaWYgKCFjaGVjayhjaGFyKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRWFjaCBhcmd1bWVudCBtdXN0IGJlIGEgc2luZ2xlIGNoYXIhIChpbiBBbHBoYWJldCNkZWxldGUpJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGRlbGV0ZSB0aGlzLiQkW2NoYXJdO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBBbHBoYWJldCNnZXRcclxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFdyYXAgb2YgYW4gYXJyYXkgb2YgYWxwaGFiZXQgbGV0dGVycy5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIGZvciBnZXR0aW5nIGFycmF5IG9mIGFscGhhYmV0IGxldHRlcnMuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBBbHBoYWJldChbJ2EnLCAnYicsICdjJ10pLmdldCgpLiQ7IC8vIFsnYScsICdiJywgJ2MnXVxyXG4gICAqL1xyXG4gIGdldCgpIHtcclxuICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLiQkKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgQWxwaGFiZXQjdG9rZW5cclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGxlbmd0aCAtIFRva2VuIGxlbmd0aC5cclxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSBUb2tlbi5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIGZvciBnZW5lcmF0aW5nIHJhbmRvbSB0b2tlbiB3aXRoIGdpdmVuIGxlbmd0aC5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogbmV3IEFscGhhYmV0KFsnYScsICdiJywgJ2MnXSkudG9rZW4oNCk7IC8vICdhYmNiJ1xyXG4gICAqL1xyXG4gIHRva2VuKGxlbmd0aCkge1xyXG4gICAgdmFsaWRhdGUoW2xlbmd0aF0sIFtbJ2ludExpa2UnLCAnPjAnXV0sICdBbHBoYWJldCN0b2tlbicpO1xyXG5cclxuICAgIGNvbnN0IGFscGhhYmV0ID0gT2JqZWN0LmtleXModGhpcy4kJCk7XHJcbiAgICBjb25zdCBsZW4gPSBhbHBoYWJldC5sZW5ndGg7XHJcbiAgICBsZXQgdG9rZW4gPSAnJztcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHRva2VuICs9IGFscGhhYmV0W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGxlbildO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0b2tlbjtcclxuICB9XHJcbn1cclxuXHJcbmRlZmluZVByb3BlcnRpZXMoQWxwaGFiZXQucHJvdG90eXBlLCB7XHJcbiAgW1N5bWJvbC50b1N0cmluZ1RhZ106ICdBbHBoYWJldCdcclxufSk7XHJcblxyXG5mdW5jdGlvbiBjaGVjayhjaGFyKSB7XHJcbiAgcmV0dXJuIGlzU3RyaW5nKGNoYXIpICYmIGNoYXIubGVuZ3RoID09PSAxO1xyXG59XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uIGFscGhhYmV0XHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZyAtIFN0cmluZyB0byBnZW5lcmF0ZSBhbiBhbHBoYWJldCBmcm9tLlxyXG4gKiBAcmV0dXJucyB7QWxwaGFiZXR9IE5ldyBpbnN0YW5jZSBvZiBBbHBoYWJldC5cclxuICogQGRlc2NyaXB0aW9uIEZ1bmN0aW9uIGZvciBjcmVhdGluZyBhbiBhbHBoYWJldCBmcm9tIGEgc3RyaW5nIHRoYXQgaGFzIGZvcm1hdCBsaWtlIHRoaXM6XHJcbiAqICcmbHQ7Y2hhcjEmZ3Q7LSZsdDtjaGFyMiZndDsgJmx0O2NoYXIzJmd0Oy0mbHQ7Y2hhcjQmZ3Q7J1xyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBjb25zdCBhMSA9IGFscGhhYmV0KCdhLWMgMS0zJyk7XHJcbiAqIGNvbnN0IGEyID0gYWxwaGFiZXQoJzUtNWYtZycpO1xyXG4gKlxyXG4gKiBhMS5nZXQoKS4kOyAvLyBbJzEnLCAnMicsICczJywgJ2EnLCAnYicsICdjJ11cclxuICogYTIuZ2V0KCkuJDsgLy8gWyc1JywgJ2YnLCAnZyddXHJcbiAqL1xyXG5mdW5jdGlvbiBhbHBoYWJldChzdHJpbmcpIHtcclxuICB2YWxpZGF0ZShbc3RyaW5nXSwgWydzdHJpbmcnXSk7XHJcblxyXG4gIGNvbnN0IHJhbmdlcyA9IHN0cmluZy5zcGxpdCgvKFtcXHNcXFNdLStbXFxzXFxTXSk/L2cpO1xyXG4gIGNvbnN0IGxlbmd0aCA9IHJhbmdlcy5sZW5ndGg7XHJcbiAgY29uc3QgYWxwaGFiZXQgPSBbXTtcclxuXHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgY29uc3QgcmFuZ2UgPSByYW5nZXNbaV07XHJcblxyXG4gICAgaWYgKCFyYW5nZSB8fCByYW5nZSA9PT0gJyAnKSB7XHJcbiAgICAgIGNvbnRpbnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICgvLS8udGVzdChyYW5nZSkgJiYgIS9bXFxzXFxTXS0rW1xcc1xcU10vLnRlc3QocmFuZ2UpKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgV3JvbmcgcGFydCBvZiB0aGUgc3RyaW5nICgkeyByYW5nZSB9KSEgKGluIGFscGhhYmV0KWApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICgvLS8udGVzdChyYW5nZSkpIHtcclxuICAgICAgY29uc3Qgc3RhcnQgPSByYW5nZS5jaGFyQ29kZUF0KDApO1xyXG4gICAgICBjb25zdCBlbmQgPSByYW5nZS5jaGFyQ29kZUF0KDIpO1xyXG5cclxuICAgICAgaWYgKHN0YXJ0ID4gZW5kKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdGFydCBvZiB0aGUgcmFuZ2UgbXVzdCBiZSBiZWZvcmUgaXRzIGVuZCEgKGluIGFscGhhYmV0KScpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmb3IgKGxldCBrID0gMCwgbGVuID0gZW5kIC0gc3RhcnQgKyAxOyBrIDwgbGVuOyBrKyspIHtcclxuICAgICAgICBhbHBoYWJldC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoc3RhcnQgKyBrKSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnRpbnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChyYW5nZS5sZW5ndGggPT09IDEpIHtcclxuICAgICAgYWxwaGFiZXQucHVzaChyYW5nZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gbmV3IEFscGhhYmV0KGFscGhhYmV0KTtcclxufVxyXG5cclxuZXhwb3J0IHsgQWxwaGFiZXQsIGFscGhhYmV0IH07XHJcbiIsIi8qKlxyXG4gKiBAbW9kdWxlIFN3aXRjaGVyXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBtaXhpblxyXG4gKiBAZGVzY3JpcHRpb24gRXhwb3J0cyBTd2l0Y2hlciBjbGFzcy5cclxuICovXHJcblxyXG5pbXBvcnQge1xyXG4gIGlzQXJyYXksIGlzRnVuY3Rpb24sIGlzU3RyaW5nLCBpc1VuZGVmaW5lZCxcclxuICBpdGVyYXRlLCBTeW1ib2wsIHRvQXJyYXksIGRlZmluZVByb3BlcnRpZXNcclxufSBmcm9tICcuL2hlbHBlcnMnO1xyXG5cclxuLyoqXHJcbiAqIEB0eXBlZGVmIHsnYm9vbGVhbid8J2VxdWFscyd8J3N0cmljdEVxdWFscyd8J2NhbGwnfSBTd2l0Y2hlck1vZGVcclxuICogQHB1YmxpY1xyXG4gKiBAZGVzY3JpcHRpb24gRW51bSB0eXBlIG9mIHN3aXRjaGVyIG1vZGVzLlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAY2FsbGJhY2sgU3dpdGNoZXJDYWxsQ2FsbGJhY2tcclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gU3dpdGNoZXIgdmFsdWUuXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufCp9IE9uIHdoYXQgdGhlIGNhbGxiYWNrIHJldHVybnMgZGVwZW5kcyBpZiB0aGUgY2FzZSBpcyBhIG1hdGNoICh0cnV0aHkgZm9yIHRoZSBtYXRjaCkuXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEBjYWxsYmFjayBTd2l0Y2hlck1hdGNoQ2FsbGJhY2tcclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0gey4uLip9IGFyZ3MgLSBBcmd1bWVudHMgZnJvbSB0aGUgc2Vjb25kIGFyZ3VtZW50IHRoYXQgc3dpdGNoZXIgd2FzIGNhbGxlZCB3aXRoLlxyXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gU3dpdGNoZXIgdmFsdWUuXHJcbiAqIEBwYXJhbSB7Kn0gbWF0Y2hlZCAtIFN3aXRjaGVyIG1hdGNoZWQgY2FzZS5cclxuICovXHJcblxyXG4vKipcclxuICogQGNsYXNzIFN3aXRjaGVyXHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIHtPYmplY3R9IFtjYXNlcyA9IHt9XSAtIE9iamVjdCBvZiBjYXNlcy5cclxuICogQHBhcmFtIHtTd2l0Y2hlck1vZGV9IFttb2RlID0gJ2VxdWFscyddIC0gU3dpdGNoZXIgbW9kZS5cclxuICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSAtIFN3aXRjaGVyIGRlZmF1bHQgdmFsdWUuXHJcbiAqIEByZXR1cm5zIHtTd2l0Y2hlcn0gLSBJbnN0YW5jZSBvZiBTd2l0Y2hlci5cclxuICogQGRlc2NyaXB0aW9uIFN3aXRjaGVyIGNsYXNzIGZvciBjcmVhdGluZyBmdW5jdGlvbnMgd29ya2luZyBzaW1pbGFyIHRvIHN3aXRjaCAodmFsdWUpIHt9IGNvbnN0cnVjdGlvbixcclxuICogYnV0IHdpdGggdGhlIHZhbHVlIGFzc2lnbm1lbnQuIFN3aXRjaGVyIGluc3RhbmNlIGlzIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIGEgdmFsdWUgYXJndW1lbnQgYW5kIGFuIG9wdGlvbmFsXHJcbiAqIGFyZ3MgYXJndW1lbnQuIEFyZ3Mgd2l0aCBhZGRpdGlvbmFsIHN3aXRjaGVyIHZhbHVlIGFuZCBtYXRjaGVkIGNhc2VcclxuICogYXJlIHBhc3NlZCBpbnRvIHRoZSBmdW5jdGlvbiBvZiB0aGUgbWF0Y2hlZCBjYXNlIChpZiBpdCBpcyBhIGZ1bmN0aW9uKS5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogY29uc3Qgc3dpdGNoZXIgPSBuZXcgU3dpdGNoZXIoKTtcclxuICogY29uc3Qgc3dpdGNoZXIgPSBuZXcgU3dpdGNoZXIoe1xyXG4gKiAgIGNhc2UxOiAndmFsdWUxJyxcclxuICogICBjYXNlMjogJ3ZhbHVlMidcclxuICogfSk7XHJcbiAqIGNvbnN0IHN3aXRjaGVyID0gbmV3IFN3aXRjaGVyKCdzdHJpY3RFcXVhbHMnKTtcclxuICogY29uc3Qgc3dpdGNoZXIgPSBuZXcgU3dpdGNoZXIoe1xyXG4gKiAgIGNhc2UxOiAndmFsdWUxJyxcclxuICogICBjYXNlMjogJ3ZhbHVlMidcclxuICogfSwgJ3N0cmljdEVxdWFscycpO1xyXG4gKiBjb25zdCBzd2l0Y2hlciA9IG5ldyBTd2l0Y2hlcignc3RyaWN0RXF1YWxzJywgJ2RlZmF1bHRWYWx1ZScpO1xyXG4gKiBjb25zdCBzd2l0Y2hlciA9IG5ldyBTd2l0Y2hlcih7XHJcbiAqICAgY2FzZTE6ICd2YWx1ZTEnLFxyXG4gKiAgIGNhc2UyOiAndmFsdWUyJ1xyXG4gKiB9LCAnc3RyaWN0RXF1YWxzJywgJ2RlZmF1bHRWYWx1ZScpO1xyXG4gKlxyXG4gKiAvLyBTZWUgW3N3aXRjaGVyXXtAbGluayBzd2l0Y2hlcn0gZXhhbXBsZXMgZm9yIG1vcmUgaW5mb3JtYXRpb24uXHJcbiAqL1xyXG5jbGFzcyBTd2l0Y2hlciBleHRlbmRzIEZ1bmN0aW9uIHtcclxuICBjb25zdHJ1Y3RvcihjYXNlcyA9IHt9LCBtb2RlID0gJ2VxdWFscycsIGRlZmF1bHRWYWx1ZSkge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICBpZiAoaXNTdHJpbmcoY2FzZXMpKSB7XHJcbiAgICAgIGlmICghaXNVbmRlZmluZWQoYXJndW1lbnRzWzFdKSkge1xyXG4gICAgICAgIGRlZmF1bHRWYWx1ZSA9IG1vZGU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG1vZGUgPSBjYXNlcztcclxuICAgICAgY2FzZXMgPSB7fTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBldmVudHVhbENhc2VzID0gW107XHJcblxyXG4gICAgaXRlcmF0ZShjYXNlcywgKHZhbHVlLCBDYXNlKSA9PiB7XHJcbiAgICAgIGV2ZW50dWFsQ2FzZXMucHVzaCh7IGNhc2U6IENhc2UsIHZhbHVlIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gc3dpdGNoZXIodmFsdWUsIGFyZ3MgPSBbXSkge1xyXG4gICAgICBjb25zdCB7IG1vZGUsIGRlZmF1bHQ6IGRlZiwgY2FzZXMgfSA9IHN3aXRjaGVyLiQkO1xyXG5cclxuICAgICAgbGV0IHJldCA9IGl0ZXJhdGUoY2FzZXMsICh7IHZhbHVlOiB2YWwsIGNhc2U6IENhc2UgfSkgPT4ge1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIChtb2RlID09PSAnYm9vbGVhbicgJiYgQ2FzZSkgfHxcclxuICAgICAgICAgIC8qIGVzbGludCBlcWVxZXE6IDAgKi9cclxuICAgICAgICAgIChtb2RlID09PSAnZXF1YWxzJyAmJiBDYXNlID09IHZhbHVlKSB8fFxyXG4gICAgICAgICAgKG1vZGUgPT09ICdzdHJpY3RFcXVhbHMnICYmIENhc2UgPT09IHZhbHVlKSB8fFxyXG4gICAgICAgICAgKG1vZGUgPT09ICdjYWxsJyAmJiBDYXNlKHZhbHVlKSlcclxuICAgICAgICApIHtcclxuICAgICAgICAgIHJldHVybiB7IGNhc2U6IENhc2UsIHZhbHVlOiB2YWwgfTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaWYgKGlzVW5kZWZpbmVkKHJldCkpIHtcclxuICAgICAgICByZXQgPSB7IHZhbHVlOiBkZWYgfTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCFpc0Z1bmN0aW9uKHJldC52YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gcmV0LnZhbHVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBhcmdzID0gdG9BcnJheShhcmdzLCB0cnVlKTtcclxuICAgICAgYXJncy5wdXNoKHZhbHVlLCByZXQuY2FzZSk7XHJcblxyXG4gICAgICByZXR1cm4gcmV0LnZhbHVlLmFwcGx5KG51bGwsIGFyZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQG1lbWJlciBTd2l0Y2hlciMkJFxyXG4gICAgICogQHR5cGUge09iamVjdH1cclxuICAgICAqIEBwcm90ZWN0ZWRcclxuICAgICAqIEBwcm9wZXJ0eSB7QXJyYXl9IGNhc2VzIC0gQXJyYXkgb2YgY2FzZXMuXHJcbiAgICAgKiBAcHJvcGVydHkge1N3aXRjaGVyTW9kZX0gbW9kZSAtIFN3aXRjaGVyIG1vZGUuXHJcbiAgICAgKiBAcHJvcGVydHkgeyp9IGRlZmF1bHQgLSBTd2l0Y2hlciBkZWZhdWx0IHZhbHVlLlxyXG4gICAgICogQGRlc2NyaXB0aW9uIENvbmZpZyBwYXJhbWV0ZXJzLlxyXG4gICAgICovXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3dpdGNoZXIsICckJCcsIHtcclxuICAgICAgdmFsdWU6IHtcclxuICAgICAgICBjYXNlczogZXZlbnR1YWxDYXNlcyxcclxuICAgICAgICBtb2RlLFxyXG4gICAgICAgIGRlZmF1bHQ6IGRlZmF1bHRWYWx1ZVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihzd2l0Y2hlciwgU3dpdGNoZXIucHJvdG90eXBlKTtcclxuXHJcbiAgICByZXR1cm4gc3dpdGNoZXI7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIFN3aXRjaGVyI2Nhc2VcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHsqfFN3aXRjaGVyQ2FsbENhbGxiYWNrfEFycmF5LjwqfFN3aXRjaGVyQ2FsbENhbGxiYWNrPn0gY2FzZXMgLSBDYXNlIG9yIGFuIGFycmF5IG9mIGNhc2VzLlxyXG4gICAqIEBwYXJhbSB7KnxTd2l0Y2hlck1hdGNoQ2FsbGJhY2t9IHZhbHVlIC0gVmFsdWUgdGhhdCBoYXMgdG8gYmUgYXNzaWduZWQgb3IgYSBmdW5jdGlvblxyXG4gICAqIHRoYXQgaXMgY2FsbGVkIHdpdGggc3dpdGNoZXIgdmFsdWUsIGlmIGl0J3MgdGhlIGNhc2UuXHJcbiAgICogQHJldHVybnMge1N3aXRjaGVyfSBSZXR1cm5zIHRoaXMuXHJcbiAgICogQGRlc2NyaXB0aW9uIE1ldGhvZCBmb3IgZGVmaW5pbmcgbmV3IGNhc2VzLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBjb25zdCBzdyA9IG5ldyBTd2l0Y2hlcigpXHJcbiAgICogICAuY2FzZSgxLCAnb25lJylcclxuICAgKiAgIC5jYXNlKDIsICd0d28nKTtcclxuICAgKlxyXG4gICAqIHN3KDEpOyAvLyAnb25lJ1xyXG4gICAqIHN3KDIpOyAvLyAndHdvJ1xyXG4gICAqL1xyXG4gIGNhc2UoY2FzZXMsIHZhbHVlKSB7XHJcbiAgICBpZiAoIWlzQXJyYXkoY2FzZXMpKSB7XHJcbiAgICAgIGNhc2VzID0gW2Nhc2VzXTtcclxuICAgIH1cclxuXHJcbiAgICBpdGVyYXRlKGNhc2VzLCAoQ2FzZSkgPT4ge1xyXG4gICAgICB0aGlzLiQkLmNhc2VzLnB1c2goeyBjYXNlOiBDYXNlLCB2YWx1ZSB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTd2l0Y2hlciNkZWZhdWx0XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7Kn0gZGVmIC0gTmV3IGRlZmF1bHQgdmFsdWUuXHJcbiAgICogQHJldHVybnMge1N3aXRjaGVyfSBSZXR1cm5zIHRoaXMuXHJcbiAgICogQGRlc2NyaXB0aW9uIE1ldGhvZCBmb3IgcmVkZWZpbmluZyBkZWZhdWx0IHN3aXRjaGVyIHZhbHVlLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBjb25zdCBzdyA9IG5ldyBTd2l0Y2hlcigpXHJcbiAgICogICAuY2FzZSgxLCAnb25lJylcclxuICAgKiAgIC5kZWZhdWx0KCd0aHJlZScpO1xyXG4gICAqXHJcbiAgICogc3coMSk7IC8vICdvbmUnXHJcbiAgICogc3coMik7IC8vICd0aHJlZSdcclxuICAgKi9cclxuICBkZWZhdWx0KGRlZikge1xyXG4gICAgdGhpcy4kJC5kZWZhdWx0ID0gZGVmO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTd2l0Y2hlciNtb2RlXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7U3dpdGNoZXJNb2RlfSBtb2RlIC0gTmV3IHN3aXRjaGVyIG1vZGUuXHJcbiAgICogQHJldHVybnMge1N3aXRjaGVyfSBSZXR1cm5zIHRoaXMuXHJcbiAgICogQGRlc2NyaXB0aW9uIE1ldGhvZCBmb3IgcmVkZWZpbmluZyBzd2l0Y2hlciBtb2RlLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBjb25zdCBzdyA9IG5ldyBTd2l0Y2hlcigpXHJcbiAgICogICAubW9kZSgnc3RyaWN0RXF1YWxzJylcclxuICAgKiAgIC5jYXNlKDEsICdudW1iZXInKVxyXG4gICAqICAgLmNhc2UoJzEnLCAnc3RyaW5nJyk7XHJcbiAgICpcclxuICAgKiBzdygxKTsgICAvLyAnbnVtYmVyJ1xyXG4gICAqIHN3KCcxJyk7IC8vICdzdHJpbmcnXHJcbiAgICovXHJcbiAgbW9kZShtb2RlKSB7XHJcbiAgICB0aGlzLiQkLm1vZGUgPSBtb2RlO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxufVxyXG5cclxuZGVmaW5lUHJvcGVydGllcyhTd2l0Y2hlci5wcm90b3R5cGUsIHtcclxuICBbU3ltYm9sLnRvU3RyaW5nVGFnXTogJ1N3aXRjaGVyJ1xyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAZnVuY3Rpb24gc3dpdGNoZXJcclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0ge09iamVjdH0gW2Nhc2VzID0ge31dIC0gT2JqZWN0IG9mIGNhc2VzLlxyXG4gKiBAcGFyYW0ge1N3aXRjaGVyTW9kZX0gW21vZGUgPSAnZXF1YWxzJ10gLSBTd2l0Y2hlciBtb2RlLlxyXG4gKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIC0gU3dpdGNoZXIgZGVmYXVsdCB2YWx1ZS5cclxuICogQHJldHVybnMge1N3aXRjaGVyfSBOZXcgaW5zdGFuY2Ugb2YgU3dpdGNoZXIuXHJcbiAqIEBkZXNjcmlwdGlvbiBTaW1wbGUgd3JhcCBvZiBbbmV3IFN3aXRjaGVyKC4uLilde0BsaW5rIFN3aXRjaGVyfS5cclxuICogXHJcbiAqIEBleGFtcGxlXHJcbiAqIGNvbnN0IHN3ID0gc3dpdGNoZXIoe1xyXG4gKiAgIDE6ICdmb28nLFxyXG4gKiAgIDI6ICdiYXInXHJcbiAqIH0pO1xyXG4gKiBzdygxKTsgLy8gJ2ZvbydcclxuICogc3coMik7IC8vICdiYXInXHJcbiAqIHN3KDMpOyAvLyB1bmRlZmluZWRcclxuICogXHJcbiAqIEBleGFtcGxlXHJcbiAqIGNvbnN0IHN3ID0gc3dpdGNoZXIoKVxyXG4gKiAgIC5jYXNlKFsxLCAyXSwgJ2ZvbycpXHJcbiAqICAgLmNhc2UoMywgJ2JhcicpO1xyXG4gKiAgIFxyXG4gKiBzdygxKTsgLy8gJ2ZvbydcclxuICogc3coMik7IC8vICdmb28nXHJcbiAqIHN3KDMpOyAvLyAnYmFyJ1xyXG4gKiBcclxuICogQGV4YW1wbGVcclxuICogY29uc3Qgc3cgPSBzd2l0Y2hlcignY2FsbCcpXHJcbiAqICAgLmNhc2UoaXNBcnJheSwgJ2FycmF5JylcclxuICogICAuY2FzZShpc1N0cmluZywgJ3N0cmluZycpXHJcbiAqICAgLmNhc2UoaXNOdW1iZXIsICdudW1iZXInKVxyXG4gKiAgIC5kZWZhdWx0KCdyZXN0Jyk7XHJcbiAqICAgXHJcbiAqIHN3KFtdKTsgICAgLy8gJ2FycmF5J1xyXG4gKiBzdygnZm9vJyk7IC8vICdzdHJpbmcnXHJcbiAqIHN3KDEyMyk7ICAgLy8gJ251bWJlcidcclxuICogc3coe30pOyAgICAvLyAncmVzdCdcclxuICogXHJcbiAqIEBleGFtcGxlXHJcbiAqIGNvbnN0IHN3ID0gc3dpdGNoZXIoe1xyXG4gKiAgIDE6ICh2YWx1ZSkgPT4ge1xyXG4gKiAgICAgY29uc29sZS5sb2codmFsdWUgKyAxKTtcclxuICogICB9LFxyXG4gKiAgIDI6ICgpID0+IHtcclxuICogICAgIGNvbnNvbGUubG9nKHZhbHVlIC0gMSk7XHJcbiAqICAgfVxyXG4gKiB9KTtcclxuICogXHJcbiAqIHN3KDEpOyAvLyAyXHJcbiAqIHN3KDIpOyAvLyAxXHJcbiAqIFxyXG4gKiBAZXhhbXBsZVxyXG4gKiBjb25zdCBzdyA9IHN3aXRjaGVyKHtcclxuICogICBmaXJzdDogKGFycmF5KSA9PiBhcnJheVswXSxcclxuICogICBsYXN0OiAoYXJyYXkpID0+IGFycmF5W2FycmF5Lmxlbmd0aCAtIDFdXHJcbiAqIH0sICdlcXVhbHMnLCAoYXJyYXksIGluZGV4KSA9PiBhcnJheVtpbmRleF0pO1xyXG4gKiBjb25zdCBhcnJheSA9IFsxLCAyLCAzLCA0XTtcclxuICogXHJcbiAqIHN3KCdmaXJzdCcsIFthcnJheV0pOyAvLyAxXHJcbiAqIHN3KCdsYXN0JywgW2FycmF5XSk7ICAvLyA0XHJcbiAqIHN3KDEsIFthcnJheV0pOyAgICAgICAvLyAyXHJcbiAqIHN3KDIsIFthcnJheV0pOyAgICAgICAvLyAzXHJcbiAqL1xyXG5mdW5jdGlvbiBzd2l0Y2hlcihjYXNlcywgbW9kZSwgZGVmYXVsdFZhbHVlKSB7XHJcbiAgcmV0dXJuIG5ldyBTd2l0Y2hlciguLi5hcmd1bWVudHMpO1xyXG59XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uIHdoZW5cclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0ge0Jvb2xlYW58Kn0gY29uZGl0aW9uIC0gQ29uZGl0aW9uIHVzZWQgZm9yIHJldHVybmluZyB0aGUgcHJvcGVyIHZhbHVlLlxyXG4gKiBAcGFyYW0geyp9IHZhbHVlMSAtIFZhbHVlIGlmIHRoZSBjb25kaXRpb24gaXMgdHJ1dGh5LlxyXG4gKiBAcGFyYW0geyp9IHZhbHVlMiAtIFZhbHVlIGlmIHRoZSBjb25kaXRpb24gaXMgZmFsc2V5LlxyXG4gKiBAcmV0dXJucyB7Kn0gdmFsdWUxIG9yIHZhbHVlMi5cclxuICogQGRlc2NyaXB0aW9uIFN5bm9ueW0gZm9yXHJcbiAqIFt0ZXJuYXJ5IG9wZXJhdG9yXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9ubC9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9PcGVyYXRvcnMvQ29uZGl0aW9uYWxfT3BlcmF0b3J9LlxyXG4gKiBcclxuICogQGV4YW1wbGVcclxuICogd2hlbih0cnVlLCAndHJ1ZScsICdmYWxzZScpOyAvLyAndHJ1ZSdcclxuICovXHJcbmZ1bmN0aW9uIHdoZW4oY29uZGl0aW9uLCB2YWx1ZTEsIHZhbHVlMikge1xyXG4gIHJldHVybiBjb25kaXRpb24gPyB2YWx1ZTEgOiB2YWx1ZTI7XHJcbn1cclxuXHJcbmV4cG9ydCB7IFN3aXRjaGVyLCBzd2l0Y2hlciwgd2hlbiB9O1xyXG4iLCIvKipcclxuICogQG1vZHVsZSBTdXBlclxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAbWl4aW5cclxuICogQGRlc2NyaXB0aW9uIEV4cG9ydHMgU3VwZXIgY2xhc3MuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgRCB9IGZyb20gJy4vRCc7XHJcbmltcG9ydCB7IHN3aXRjaGVyIH0gZnJvbSAnLi9Td2l0Y2hlcic7XHJcbmltcG9ydCB7IGNvbnN0cnVjdG9ycyB9IGZyb20gJy4vY29uc3RhbnRzL2NvbnN0cnVjdG9ycyc7XHJcbmltcG9ydCB7XHJcbiAgaXNBcnJheSwgaXNBcnJheUxpa2UsIGlzRGF0ZSwgaXNFbGVtZW50LCBpc0Z1bmN0aW9uLCBpc05pbCwgaXNOYU4sIGlzTnVsbCxcclxuICBpc09iamVjdCwgaXNQbGFpbk9iamVjdCwgaXNQcmltaXRpdmUsIGlzUmVnRXhwLCBpc1N0cmluZywgaXNVbmRlZmluZWQsXHJcbiAgdmFsaWRhdGUsIHRvU3RyaW5nVGFnLCBpdGVyYXRlLCBTeW1ib2wsIGRlZmluZVByb3BlcnRpZXNcclxufSBmcm9tICcuL2hlbHBlcnMnO1xyXG5cclxuLyoqXHJcbiAqIEB0eXBlZGVmIHtTdXBlcnxBcnJ8RnVuY3xFbGVtfFN0cnxOdW18RGF0fEJsb2JPYmplY3R9IERXcmFwXHJcbiAqIEBwdWJsaWNcclxuICogQGRlc2NyaXB0aW9uIEFueSBraW5kIG9mIEQtV3JhcC5cclxuICovXHJcblxyXG4vKipcclxuICogQHR5cGVkZWYge1N0cmluZ3xOdW1iZXJ8bnVsbH0gS2V5XHJcbiAqIEBwdWJsaWNcclxuICogQGRlc2NyaXB0aW9uIEtleSB0eXBlIHVzZWQgaW4gbWFueSBtZXRob2RzLlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAdHlwZWRlZiB7VHJlZUVsZW1lbnRbXX0gVHJlZVxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFRyZWVFbGVtZW50XHJcbiAqIEBwdWJsaWNcclxuICogQHByb3BlcnR5IHtLZXl9IGtleSAtIFRyZWUgZWxlbWVudCBrZXkuXHJcbiAqIEBwcm9wZXJ0eSB7Kn0gdmFsdWUgLSBUcmVlIGVsZW1lbnQgdmFsdWUuXHJcbiAqIEBkZXNjcmlwdGlvbiB7QGxpbmsgVHJlZX0gZWxlbWVudC5cclxuICovXHJcblxyXG4vKipcclxuICogQGNhbGxiYWNrIERlZXBJdGVyYXRpb25DYWxsYmFja1xyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBDdXJyZW50IGl0ZXJhdGlvbiB2YWx1ZS5cclxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBrZXkgLSBDdXJyZW50IGl0ZXJhdGlvbiBrZXkvaW5kZXguXHJcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IC0gSXRlcmF0aW9uIG9iamVjdC5cclxuICogQHBhcmFtIHtUcmVlfSB0cmVlIC0gVHJlZSBvZiB7IGtleSwgdmFsdWUgfSBlbGVtZW50cy5cclxuICovXHJcblxyXG4vKipcclxuICogQGNhbGxiYWNrIERlZXBSZWR1Y2VDYWxsYmFja1xyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7Kn0gcHJldmlvdXNWYWx1ZSAtIFByZXZpb3VzIHZhbHVlLlxyXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gQ3VycmVudCBpdGVyYXRpb24gdmFsdWUuXHJcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0ga2V5IC0gQ3VycmVudCBpdGVyYXRpb24ga2V5L2luZGV4LlxyXG4gKiBAcGFyYW0geyp9IG9iamVjdCAtIEl0ZXJhdGlvbiBvYmplY3QuXHJcbiAqIEBwYXJhbSB7VHJlZX0gdHJlZSAtIFRyZWUgb2YgeyBrZXksIHZhbHVlIH0gZWxlbWVudHMuXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEBjYWxsYmFjayBJdGVyYXRpb25DYWxsYmFja1xyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBDdXJyZW50IGl0ZXJhdGlvbiB2YWx1ZS5cclxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBrZXkgLSBDdXJyZW50IGl0ZXJhdGlvbiBrZXkvaW5kZXguXHJcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IC0gSXRlcmF0aW9uIG9iamVjdC5cclxuICovXHJcblxyXG4vKipcclxuICogQGNhbGxiYWNrIEpTT05DYWxsYmFja1xyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7U3RyaW5nfG51bGx9IGtleSAtIEN1cnJlbnQgdmFsdWUuXHJcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBDdXJyZW50IGtleS5cclxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCAtIEl0ZXJhdGlvbiBvYmplY3QuXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEBjYWxsYmFjayBPYmplY3RDYWxsYmFja1xyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBuZXdPYmplY3QgLSBUaGUgbmV3IG9iamVjdC5cclxuICogQHBhcmFtIHsqfSB2YWx1ZSAtIEN1cnJlbnQgaXRlcmF0aW9uIHZhbHVlLlxyXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IGtleSAtIEN1cnJlbnQgaXRlcmF0aW9uIGtleS9pbmRleC5cclxuICogQHBhcmFtIHsqfSBvYmplY3QgLSBJdGVyYXRpb24gb2JqZWN0LlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAY2FsbGJhY2sgUmVkdWNlQ2FsbGJhY2tcclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0geyp9IHByZXZpb3VzVmFsdWUgLSBQcmV2aW91cyB2YWx1ZS5cclxuICogQHBhcmFtIHsqfSB2YWx1ZSAtIEN1cnJlbnQgaXRlcmF0aW9uIHZhbHVlLlxyXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IGtleSAtIEN1cnJlbnQgaXRlcmF0aW9uIGtleS9pbmRleC5cclxuICogQHBhcmFtIHsqfSBvYmplY3QgLSBJdGVyYXRpb24gb2JqZWN0LlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAY2FsbGJhY2sgU3VwZXJNZXRob2RcclxuICogQHB1YmxpY1xyXG4gKiBAdGhpcyB7RFdyYXB9XHJcbiAqL1xyXG5cclxuY29uc3QgY2xvbmVTd2l0Y2hlciA9IHN3aXRjaGVyKCdjYWxsJywgKG9iamVjdCkgPT4gb2JqZWN0KVxyXG4gIC5jYXNlKFxyXG4gICAgKG9iamVjdCkgPT4gbmV3IFN1cGVyKG9iamVjdCkgPT09IG9iamVjdCxcclxuICAgIChvYmplY3QpID0+IG5ldyAoT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCkuY29uc3RydWN0b3IpKG5ldyBTdXBlcihvYmplY3QuJCkuZGVlcENsb25lKCkuJClcclxuICApXHJcbiAgLmNhc2UoaXNFbGVtZW50LCAob2JqZWN0LCBkZWVwKSA9PiBvYmplY3QuY2xvbmUoZGVlcCkpXHJcbiAgLmNhc2UoaXNEYXRlLCAob2JqZWN0KSA9PiBuZXcgRGF0ZShvYmplY3QpKVxyXG4gIC5jYXNlKGlzUmVnRXhwLCAob2JqZWN0KSA9PiBuZXcgUmVnRXhwKG9iamVjdC5zb3VyY2UsIG9iamVjdC50b1N0cmluZygpLm1hdGNoKC9bZ2ltdXldKiQvKVswXSkpXHJcbiAgLmNhc2UoaXNBcnJheSwgKCkgPT4gW10pXHJcbiAgLmNhc2UoaXNQbGFpbk9iamVjdCwgKCkgPT4gKHt9KSk7XHJcblxyXG4vKipcclxuICogQGNsYXNzIFN1cGVyXHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIHsqfSBbb2JqZWN0XSAtIEFuIG9iamVjdCB0byB3cmFwLlxyXG4gKiBAcmV0dXJucyB7RFdyYXB9IEluc3RhbmNlIG9mIFN1cGVyLlxyXG4gKiBAZGVzY3JpcHRpb24gV3JhcCBvZiBhbnkgdmFsdWUuIEFuZCB0aGVyZSBpcyBubyB3YXkgdG8gY3JlYXRlIGEgbmVzdGVkIHdyYXAuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIG5ldyBTdXBlcih7fSk7IC8vIFN1cGVyXHJcbiAqL1xyXG5jbGFzcyBTdXBlciB7XHJcbiAgY29uc3RydWN0b3Iob2JqZWN0KSB7XHJcbiAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgU3VwZXIpIHtcclxuICAgICAgcmV0dXJuIG9iamVjdDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBtZW1iZXIgU3VwZXIjJFxyXG4gICAgICogQHR5cGUgeyp9XHJcbiAgICAgKiBAcHVibGljXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gV3JhcHBlZCBvYmplY3QuXHJcbiAgICAgKi9cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnJCcsIHsgdmFsdWU6IG9iamVjdCB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgU3VwZXIuYWRkU3RhdGljUHJvcGVydGllc1xyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IHByb3BlcnR5IC0gRWl0aGVyIGEgc3RyaW5nIG9mIGEgcHJvcGVydHkgb3IgYW4gb2JqZWN0XHJcbiAgICogd2l0aCBwcm9wZXJ0aWVzIGtleXMgYW5kIHZhbHVlcyB2YWx1ZXMuXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFt2YWx1ZV0gLSBJZiBhIHByb3BlcnR5IHBhcmFtZXRlciBpcyBhIHN0cmluZyB0aGlzIGhhcyB0byBiZSBhIHByb3BlcnR5IHZhbHVlLlxyXG4gICAqIEByZXR1cm5zIHt0aGlzfSBSZXR1cm5zIHRoaXMuXHJcbiAgICogQGRlc2NyaXB0aW9uIFNldHMgc3RhdGljIHByb3BlcnRpZXMgZm9yIERXcmFwIGNvbnN0cnVjdG9ycy5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogU3VwZXIuYWRkU3RhdGljUHJvcGVydGllcygnY29vbCcsIDQyKTtcclxuICAgKiBTdXBlci5hZGRTdGF0aWNQcm9wZXJ0aWVzKCdzdXBlckNvb2wnLCA0Mio0Mik7XHJcbiAgICovXHJcbiAgc3RhdGljIGFkZFN0YXRpY1Byb3BlcnRpZXMocHJvcGVydHksIHZhbHVlKSB7XHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAyKSB7XHJcbiAgICAgIHByb3BlcnR5ID0geyBbcHJvcGVydHldOiB2YWx1ZSB9O1xyXG4gICAgfVxyXG5cclxuICAgIGRlZmluZVByb3BlcnRpZXModGhpcywgcHJvcGVydHkpO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdXBlci5hZGRJbnN0YW5jZVByb3BlcnRpZXNcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBwcm9wZXJ0eSAtIEVpdGhlciBhIHN0cmluZyBvZiBhIHByb3BlcnR5IG9yIGFuIG9iamVjdFxyXG4gICAqIHdpdGggcHJvcGVydGllcyBrZXlzIGFuZCB2YWx1ZXMgdmFsdWVzLlxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbdmFsdWVdIC0gSWYgYSBwcm9wZXJ0eSBwYXJhbWV0ZXIgaXMgYSBzdHJpbmcgdGhpcyBoYXMgdG8gYmUgYSBwcm9wZXJ0eSB2YWx1ZS5cclxuICAgKiBAcmV0dXJucyB7dGhpc30gUmV0dXJucyB0aGlzLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBTZXRzIHN0YXRpYyBwcm9wZXJ0aWVzIGZvciBEV3JhcCBwcm90b3R5cGVzLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBTdXBlci5hZGRJbnN0YW5jZVByb3BlcnRpZXMoJ2Nvb2wnLCA0Mik7XHJcbiAgICogU3VwZXIuYWRkSW5zdGFuY2VQcm9wZXJ0aWVzKCdzdXBlckNvb2wnLCA0Mio0Mik7XHJcbiAgICovXHJcbiAgc3RhdGljIGFkZEluc3RhbmNlUHJvcGVydGllcyhwcm9wZXJ0eSwgdmFsdWUpIHtcclxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDIpIHtcclxuICAgICAgcHJvcGVydHkgPSB7IFtwcm9wZXJ0eV06IHZhbHVlIH07XHJcbiAgICB9XHJcblxyXG4gICAgZGVmaW5lUHJvcGVydGllcyh0aGlzLnByb3RvdHlwZSwgcHJvcGVydHkpO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdXBlciNhc3NpZ25cclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHsuLi4oT2JqZWN0fFN1cGVyfCopfSBvYmplY3RzIC0gT2JqZWN0cyB0byBiZSBhc3NpZ25lZCB0byB0aGUgb2JqZWN0LlxyXG4gICAqIEByZXR1cm5zIHtEV3JhcH0gUmV0dXJucyB0aGlzLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBTeW5vbnltIGZvclxyXG4gICAqIFtPYmplY3QuYXNzaWduXVxyXG4gICAqIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvYXNzaWdufS5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogbmV3IFN1cGVyKHsgYTogMSwgYjogMiB9KS5hc3NpZ24oeyBhOiAzIH0sIHsgYzogMywgZDogNCB9LCB7IGQ6IDUgfSkuJDsgLy8geyBhOiAzLCBiOiAyLCBjOiAzLCBkOiA1IH1cclxuICAgKi9cclxuICBhc3NpZ24oLi4ub2JqZWN0cykge1xyXG4gICAgY29uc3Qgb2JqZWN0ID0gdGhpcy4kO1xyXG5cclxuICAgIGl0ZXJhdGUob2JqZWN0ICYmIGFyZ3VtZW50cywgKG8pID0+IHtcclxuICAgICAgaXRlcmF0ZShuZXcgU3VwZXIobykuJCwgKHZhbHVlLCBrZXkpID0+IHtcclxuICAgICAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdXBlciNhdmVyYWdlXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7SXRlcmF0aW9uQ2FsbGJhY2t9IFtjYWxsYmFjayA9IG51bGxdIC0gQ2FsbGJhY2sgdGhhdCBpcyBwYXNzZWQgdG8ge0BsaW5rIFN1cGVyI3N1bX0uXHJcbiAgICogQHJldHVybnMge051bWJlcn0gQXZlcmFnZSB2YWx1ZS5cclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3Igb2JqZWN0LnN1bShjYWxsYmFjaykgLyBvYmplY3QuY291bnQuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBTdXBlcih7IGE6IDEsIGI6IDIsIGM6IDMgfSkuYXZlcmFnZSgpOyAgICAgICAgICAgICAgICAgICAgICAgICAvLyAyXHJcbiAgICogbmV3IFN1cGVyKHsgYTogMSwgYjogMiwgYzogNSB9KS5hdmVyYWdlKCh2YWx1ZSkgPT4gdmFsdWUgKiB2YWx1ZSk7IC8vIDEwXHJcbiAgICovXHJcbiAgYXZlcmFnZShjYWxsYmFjayA9IG51bGwpIHtcclxuICAgIHZhbGlkYXRlKFtjYWxsYmFja10sIFsnZnVuY3Rpb258fCEnXSwgJ1N1cGVyI2F2ZXJhZ2UnKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5zdW0oY2FsbGJhY2spIC8gdGhpcy5jb3VudDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgU3VwZXIjY2FsbFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1N1cGVyTWV0aG9kfSBmdW5jIC0gRnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdpdGggdGhpcyBjb250ZXh0LlxyXG4gICAqIEBwYXJhbSB7Li4uKn0gYXJncyAtIEFyZ3VtZW50cyB0byBiZSBjYWxsZWQgd2l0aC5cclxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJuIG9mIGZ1bmN0aW9uIGNhbGwuXHJcbiAgICogQGRlc2NyaXB0aW9uIFN5bm9ueW0gZm9yIGZ1bmMuY2FsbChET2JqZWN0LCAuLi5hcmdzKTtcclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogbmV3IFN1cGVyKHsgYTogMSB9KS5jYWxsKGZ1bmN0aW9uIChiLCBjKSB7XHJcbiAgICogICByZXR1cm4gdGhpcy5hICsgYiArIGM7XHJcbiAgICogfSwgMiwgMyk7IC8vIDZcclxuICAgKi9cclxuICBjYWxsKGZ1bmMsIC4uLmFyZ3MpIHtcclxuICAgIHZhbGlkYXRlKFtmdW5jXSwgWydmdW5jdGlvbiddLCAnU3VwZXIjY2FsbCcpO1xyXG5cclxuICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdXBlciNjbG9uZVxyXG4gICAqIEByZXR1cm5zIHtEV3JhcH0gTmV3IG9iamVjdC5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIGFzc2lnbnMgcHJvcGVydGllcyBvZiB0aGUgb2JqZWN0IHRvIGFuIGVtcHR5IG9uZSBhbmQgcmV0dXJucyB0aGUgbmV3IG9uZS5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogbmV3IFN1cGVyKHsgYTogMSwgYjogeyBjOiAyIH0gfSkuY2xvbmUoKS4kOyAvLyB7IGE6IDEsIGI6IHsgYzogMiB9IH1cclxuICAgKi9cclxuICBjbG9uZSgpIHtcclxuICAgIGNvbnN0IG9iamVjdCA9IHRoaXMuJDtcclxuICAgIGNvbnN0IGNsb25lID0gY2xvbmVTd2l0Y2hlcihvYmplY3QsIFtvYmplY3QsIGZhbHNlXSk7XHJcblxyXG4gICAgaWYgKGNsb25lICE9PSBvYmplY3QpIHtcclxuICAgICAgaXRlcmF0ZShvYmplY3QsICh2YWx1ZSwga2V5KSA9PiB7XHJcbiAgICAgICAgY2xvbmVba2V5XSA9IHZhbHVlO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoY2xvbmUpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciBTdXBlciNjb3VudFxyXG4gICAqIEB0eXBlIHtOdW1iZXJ9XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZWFkb25seVxyXG4gICAqIEBkZXNjcmlwdGlvbiBSZXR1cm5zIG51bWJlciBvZiBvd24gZW51bWVyYWJsZSBrZXlzIG9mIHRoZSBvYmplY3QuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBTdXBlcih7IGE6IDEsIGI6IDIgfSkuY291bnQ7IC8vIDJcclxuICAgKi9cclxuICBnZXQgY291bnQoKSB7XHJcbiAgICBjb25zdCBvYmplY3QgPSB0aGlzLiQ7XHJcblxyXG4gICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XHJcbiAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gb2JqZWN0Lmxlbmd0aCA6IE9iamVjdC5rZXlzKG9iamVjdCkubGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdXBlciNjcmVhdGVcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtkZXNjcmlwdG9yc10gLSBEZXNjcmlwdG9ycyBwYXNzZWQgdG8gT2JqZWN0LmNyZWF0ZS5cclxuICAgKiBAcmV0dXJucyB7RFdyYXB9IE5ldyBpbnN0YW5jZSBvZiBELVdyYXAuXHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvY3JlYXRlXHJcbiAgICogQGRlc2NyaXB0aW9uIFN5bm9ueW0gZm9yXHJcbiAgICogW09iamVjdC5jcmVhdGVde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9jcmVhdGV9LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgU3VwZXIoe30pLmNyZWF0ZSh7XHJcbiAgICogICBhOiB7XHJcbiAgICogICAgIHZhbHVlOiAxLFxyXG4gICAqICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgKiAgICAgd3JpdGFibGU6IHRydWUsXHJcbiAgICogICAgIGNvbmZpZ3VyYWJsZTogZmFsc2VcclxuICAgKiAgIH1cclxuICAgKiB9KS4kOyAvLyB7IGE6IDEgfVxyXG4gICAqL1xyXG4gIGNyZWF0ZShkZXNjcmlwdG9ycykge1xyXG4gICAgcmV0dXJuIEQoaXNQcmltaXRpdmUodGhpcy4kKSA/IHVuZGVmaW5lZCA6IE9iamVjdC5jcmVhdGUodGhpcy4kLCBkZXNjcmlwdG9ycykpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdXBlciNkZWVwQXNzaWduXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7Li4uKn0gb2JqZWN0cyAtIE9iamVjdHMgdG8gYmUgYXNzaWduZWQgdG8gdGhlIG9iamVjdC5cclxuICAgKiBAcmV0dXJucyB7RFdyYXB9IFJldHVybnMgdGhpcy5cclxuICAgKiBAZGVzY3JpcHRpb24gRGVlcCBhbmFsb2d1ZSBvZiB7QGxpbmsgU3VwZXIjYXNzaWdufS5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogbmV3IFN1cGVyKHsgYTogMSB9KS5kZWVwQXNzaWduKFxyXG4gICAqICAge1xyXG4gICAqICAgICBiOiB7XHJcbiAgICogICAgICAgYzogMlxyXG4gICAqICAgICB9XHJcbiAgICogICB9LFxyXG4gICAqICAge1xyXG4gICAqICAgICBhOiB7XHJcbiAgICogICAgICAgYjogMVxyXG4gICAqICAgICB9XHJcbiAgICogICB9LFxyXG4gICAqICAge1xyXG4gICAqICAgICBhOiB7XHJcbiAgICogICAgICAgYzoge1xyXG4gICAqICAgICAgICAgZDogMVxyXG4gICAqICAgICAgIH1cclxuICAgKiAgICAgfSxcclxuICAgKiAgICAgYjogMlxyXG4gICAqICAgfSxcclxuICAgKiAgIG51bGxcclxuICAgKiB9KTtcclxuICAgKiAvLyB7XHJcbiAgICogLy8gICBhOiB7XHJcbiAgICogLy8gICAgIGI6IDEsXHJcbiAgICogLy8gICAgIGM6IHtcclxuICAgKiAvLyAgICAgICBkOiAxXHJcbiAgICogLy8gICAgIH1cclxuICAgKiAvLyAgIH0sXHJcbiAgICogLy8gICBiOiAyLFxyXG4gICAqIC8vIH1cclxuICAgKi9cclxuICBkZWVwQXNzaWduKC4uLm9iamVjdHMpIHtcclxuICAgIGNvbnN0IG9iamVjdCA9IHRoaXMuJDtcclxuXHJcbiAgICBpZiAoaXNQcmltaXRpdmUob2JqZWN0KSkge1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBpdGVyYXRlKGFyZ3VtZW50cywgKG8pID0+IHtcclxuICAgICAgZGVlcEFzc2lnbihvYmplY3QsIG8pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIFN1cGVyI2RlZXBDbG9uZVxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcmV0dXJucyB7RFdyYXB9IE5ldyBpbnN0YW5jZSBvZiBEV3JhcC5cclxuICAgKiBAZGVzY3JpcHRpb24gRGVlcCBjbG9uaW5nIG1ldGhvZC4gQ2xvbmVzIHBsYWluIG9iamVjdHMsIGFycmF5cywgcmVndWxhciBleHByZXNzaW9ucyBhbmQgZWxlbWVudHMsIHRoZSByZXN0IHN0YXlzIHRoZSBzYW1lLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgU3VwZXIoeyBhOiAxLCBiOiBbMiwgM10sIGM6IHsgZDogNCB9IH0pLmRlZXBDbG9uZSgpLiQ7XHJcbiAgICogLy8ge1xyXG4gICAqIC8vICAgYTogMSxcclxuICAgKiAvLyAgIGI6IFsyLCAzXSxcclxuICAgKiAvLyAgIGM6IHsgZDogNCB9XHJcbiAgICogLy8gfVxyXG4gICAqL1xyXG4gIGRlZXBDbG9uZSgpIHtcclxuICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcihkZWVwQ2xvbmUodGhpcy4kKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIFN1cGVyI2RlZXBFcXVhbHNcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHsqfSBbb2JqZWN0XSAtIE9iamVjdCB0byBjb21wYXJlIHRvLlxyXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSAtIElmIHRoZSBvYmplY3RzIGFyZSBkZWVwIGVxdWFsIG9yIG5vdC5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIGZvciBkZWVwIGNvbXBhcmlzb24gb2YgdHdvIG9iamVjdHMuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBTdXBlcih7IGE6IDEgfSkuZGVlcEVxdWFscyh7IGE6ICcxJyB9KTsgLy8gdHJ1ZVxyXG4gICAqIG5ldyBTdXBlcigvMS8pLmRlZXBFcXVhbHMoLzEvKTsgICAgICAgICAgICAgLy8gdHJ1ZVxyXG4gICAqL1xyXG4gIGRlZXBFcXVhbHMob2JqZWN0ID0gbnVsbCkge1xyXG4gICAgcmV0dXJuIGRlZXBFcXVhbCh0aGlzLiQsIG9iamVjdCwgZmFsc2UpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdXBlciNkZWVwRXZlcnlcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtEZWVwSXRlcmF0aW9uQ2FsbGJhY2t9IFtjYWxsYmFjayA9IEJvb2xlYW5dIC0gQ2FsbGVkIG9uIGVhY2ggaXRlcmF0aW9uLlxyXG4gICAqIElmIHJldHVybnMgdHJ1dGh5IGl0ZXJhdGlvbiBnb2VzIG9uIGFuZCBpZiBmYWxzZXkgaXQgc3RvcHMuXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtuID0gSW5maW5pdHldIC0gSXRlcmF0aW9uIGRlcHRoLlxyXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBJZiBhbGwgdGhlIGNhbGxiYWNrIGNhbGxzIHJldHVybmVkIHRydXRoeSB2YWx1ZS5cclxuICAgKiBAZGVzY3JpcHRpb24gUmV0dXJucyBib29sZWFuIGlmIGFsbCB0aGUgY2FsbGJhY2sgY2FsbHMgcmV0dXJuZWQgdHJ1dGh5IHZhbHVlLlxyXG4gICAqIE90aGVyd2lzZSBmYWxzZS4gRGVlcCBhbmFsb2d1ZSBvZiB7QGxpbmsgU3VwZXIjZXZlcnl9LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgU3VwZXIoeyBhOiAxLCBiOiB7IGM6IDIsIGQ6IDMgfSB9KS5kZWVwRXZlcnkoKHZhbHVlKSA9PiB2YWx1ZSA8IDQpOyAvLyB0cnVlXHJcbiAgICogbmV3IFN1cGVyKHsgYToge30sIGI6IHt9LCBjOiB7fSB9KS5kZWVwRXZlcnkoKCkgPT4gZmFsc2UpOyAgICAgICAgICAgICAgLy8gdHJ1ZVxyXG4gICAqL1xyXG4gIGRlZXBFdmVyeShjYWxsYmFjaywgbikge1xyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEgJiYgIWlzRnVuY3Rpb24oY2FsbGJhY2spKSB7XHJcbiAgICAgIG4gPSBjYWxsYmFjaztcclxuICAgICAgY2FsbGJhY2sgPSBCb29sZWFuO1xyXG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgIG4gPSBJbmZpbml0eTtcclxuICAgIH0gZWxzZSBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgbiA9IEluZmluaXR5O1xyXG4gICAgICBjYWxsYmFjayA9IEJvb2xlYW47XHJcbiAgICB9XHJcblxyXG4gICAgdmFsaWRhdGUoW2NhbGxiYWNrLCBuXSwgWydmdW5jdGlvbicsIFsnbnVtYmVyTGlrZScsICc+MCddXSwgJ1N1cGVyI2RlZXBFdmVyeScpO1xyXG5cclxuICAgIG4gPSBOdW1iZXIobik7XHJcblxyXG4gICAgcmV0dXJuIGRlZXBFdmVyeSh0aGlzLiQsIGNhbGxiYWNrLCBuLCBbeyBrZXk6IG51bGwsIHZhbHVlOiB0aGlzLiQgfV0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdXBlciNkZWVwRmlsdGVyXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7RGVlcEl0ZXJhdGlvbkNhbGxiYWNrfSBbY2FsbGJhY2sgPSBCb29sZWFuXSAtIENhbGxlZCBvbiBlYWNoIGl0ZXJhdGlvbi5cclxuICAgKiBJZiByZXR1cm5zIHRydXRoeSB0aGUgZWxlbWVudCBpcyBpbmNsdWRlZCBhbmQgaWYgZmFsc2V5IGl0J3MgZXhjbHVkZWQuXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtuID0gSW5maW5pdHldIC0gSXRlcmF0aW9uIGRlcHRoLlxyXG4gICAqIEByZXR1cm5zIHtEV3JhcH0gTmV3IEQtV3JhcCBvZiBmaWx0ZXJlZCBvYmplY3QuXHJcbiAgICogQGRlc2NyaXB0aW9uIFJldHVybnMgZmlsdGVyZWQgYnkgdGhlIGNhbGxiYWNrIG9iamVjdC4gRGVlcCBhbmFsb2d1ZSBvZiB7QGxpbmsgU3VwZXIjZmlsdGVyfS5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogbmV3IFN1cGVyKHsgYTogMSwgYjogeyBjOiAyLCBkOiAzIH0gfSkuZGVlcEZpbHRlcigodmFsdWUpID0+IHZhbHVlJTIpLiQ7ICAgICAvLyB7IGE6IDEsIGI6IHsgZDogMyB9IH1cclxuICAgKiBuZXcgU3VwZXIoeyBhOiAxLCBiOiB7IGM6IDIsIGQ6IDMgfSB9KS5kZWVwRmlsdGVyKCh2YWx1ZSkgPT4gdmFsdWUgPT09IDEpLiQ7IC8vIHsgYTogMSB9XHJcbiAgICogbmV3IFN1cGVyKHsgYTogMSwgYjogeyBjOiAyLCBkOiAzIH0gfSkuZGVlcEZpbHRlcigodmFsdWUpID0+IHZhbHVlID4gMykuJDsgICAvLyB7fVxyXG4gICAqL1xyXG4gIGRlZXBGaWx0ZXIoY2FsbGJhY2ssIG4pIHtcclxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmICFpc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xyXG4gICAgICBuID0gY2FsbGJhY2s7XHJcbiAgICAgIGNhbGxiYWNrID0gQm9vbGVhbjtcclxuICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICBuID0gSW5maW5pdHk7XHJcbiAgICB9IGVsc2UgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgIG4gPSBJbmZpbml0eTtcclxuICAgICAgY2FsbGJhY2sgPSBCb29sZWFuO1xyXG4gICAgfVxyXG5cclxuICAgIHZhbGlkYXRlKFtjYWxsYmFjaywgbl0sIFsnZnVuY3Rpb24nLCBbJ251bWJlckxpa2UnLCAnPjAnXV0sICdTdXBlciNkZWVwRmlsdGVyJyk7XHJcblxyXG4gICAgY29uc3QgZmlsdGVyZWQgPSBkZWVwRmlsdGVyKHRoaXMuJCwgY2FsbGJhY2ssIG4sIFt7IGtleTogbnVsbCwgdmFsdWU6IHRoaXMuJCB9XSk7XHJcblxyXG4gICAgcmV0dXJuIEQoaXNOaWwoZmlsdGVyZWQpID8gZmlsdGVyZWQgOiBmaWx0ZXJlZCB8fCB7fSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIFN1cGVyI2RlZXBGaW5kXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7RGVlcEl0ZXJhdGlvbkNhbGxiYWNrfSBbY2FsbGJhY2sgPSBCb29sZWFuXSAtIENhbGxlZCBvbiBlYWNoIGl0ZXJhdGlvbi5cclxuICAgKiBJZiByZXR1cm5zIHRydXRoeSBpdGVyYXRpb24gc3RvcHMgYW5kIGlmIGZhbHNleSBpdCBjb250aW51ZXMuXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtuID0gSW5maW5pdHldIC0gSXRlcmF0aW9uIGRlcHRoLlxyXG4gICAqIEByZXR1cm5zIHtUcmVlfG51bGx9IFRyZWUgb2YgeyBrZXksIHZhbHVlIH0gaWYgc29tZXRoaW5nIGZvdW5kIGFuZCBudWxsIGlmIG5vdC5cclxuICAgKiBAZGVzY3JpcHRpb24gUmV0dXJucyB0cmVlIG9mIHRoZSBlbGVtZW50cyBpZiBzb21ldGhpbmcgZm91bmQgYW5kIG51bGwgaWYgbm90aGluZyBmb3VuZC5cclxuICAgKiBEZWVwIGFuYWxvZ3VlIG9mIHtAbGluayBTdXBlciNmaW5kfS5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogbmV3IFN1cGVyKHsgYTogMSwgYjogeyBjOiAyLCBkOiAzIH0gfSkuZGVlcEZpbmQoKHZhbHVlKSA9PiB2YWx1ZSA9PT0gMik7XHJcbiAgICogLy8gW1xyXG4gICAqIC8vICAgeyBrZXk6ICdjJywgdmFsdWU6IDIgfSxcclxuICAgKiAvLyAgIHsga2V5OiAnYicsIHZhbHVlOiB7IGM6IDIsIGQ6IDMgfSB9LFxyXG4gICAqIC8vICAgeyBrZXk6IG51bGwsIHZhbHVlOiA8aW5pdGlhbCBvYmplY3Q+IH1cclxuICAgKiAvLyBdXHJcbiAgICovXHJcbiAgZGVlcEZpbmQoY2FsbGJhY2ssIG4pIHtcclxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmICFpc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xyXG4gICAgICBuID0gY2FsbGJhY2s7XHJcbiAgICAgIGNhbGxiYWNrID0gQm9vbGVhbjtcclxuICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICBuID0gSW5maW5pdHk7XHJcbiAgICB9IGVsc2UgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgIG4gPSBJbmZpbml0eTtcclxuICAgICAgY2FsbGJhY2sgPSBCb29sZWFuO1xyXG4gICAgfVxyXG5cclxuICAgIHZhbGlkYXRlKFtjYWxsYmFjaywgbl0sIFsnZnVuY3Rpb24nLCBbJ251bWJlckxpa2UnLCAnPjAnXV0sICdTdXBlciNkZWVwRmluZCcpO1xyXG5cclxuICAgIHJldHVybiBkZWVwRmluZCh0aGlzLiQsIGNhbGxiYWNrLCBuLCBbeyBrZXk6IG51bGwsIHZhbHVlOiB0aGlzLiQgfV0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdXBlciNkZWVwRm9yRWFjaFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge0RlZXBJdGVyYXRpb25DYWxsYmFja30gY2FsbGJhY2sgLSBDYWxsZWQgb24gZWFjaCBpdGVyYXRpb24uXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtuID0gSW5maW5pdHldIC0gSXRlcmF0aW9uIGRlcHRoLlxyXG4gICAqIEByZXR1cm5zIHtEV3JhcH0gUmV0dXJucyB0aGlzLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBNZXRob2QgZm9yIGl0ZXJhdGluZyBvdmVyIGFueSBvYmplY3QuIERlZXAgYW5hbG9ndWUgb2Yge0BsaW5rIFN1cGVyI2ZvckVhY2h9LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgU3VwZXIoeyBhOiAxLCBiOiB7IGM6IDIsIGQ6IDMgfSB9KS5kZWVwRm9yRWFjaCgodmFsdWUsIGtleSwgb2JqZWN0KSA9PiBvYmplY3Rba2V5XSA9IHZhbHVlICogdmFsdWUpLiQ7XHJcbiAgICogLy8geyBhOiAxLCBiOiB7IGM6IDQsIGQ6IDkgfSB9XHJcbiAgICovXHJcbiAgZGVlcEZvckVhY2goY2FsbGJhY2ssIG4gPSBJbmZpbml0eSkge1xyXG4gICAgdmFsaWRhdGUoW2NhbGxiYWNrLCBuXSwgWydmdW5jdGlvbicsIFsnbnVtYmVyTGlrZScsICc+MCddXSwgJ1N1cGVyI2RlZXBGb3JFYWNoJyk7XHJcblxyXG4gICAgbiA9IE51bWJlcihuKTtcclxuXHJcbiAgICBkZWVwRm9yRWFjaCh0aGlzLiQsIGNhbGxiYWNrLCBuLCBbeyBrZXk6IG51bGwsIHZhbHVlOiB0aGlzLiQgfV0pO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdXBlciNkZWVwRm9yRWFjaFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge0RlZXBJdGVyYXRpb25DYWxsYmFja30gY2FsbGJhY2sgLSBDYWxsZWQgb24gZWFjaCBpdGVyYXRpb24uXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtuID0gSW5maW5pdHldIC0gSXRlcmF0aW9uIGRlcHRoLlxyXG4gICAqIEByZXR1cm5zIHtEV3JhcH0gUmV0dXJucyB0aGlzLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBNZXRob2QgZm9yIGl0ZXJhdGluZyBvdmVyIGFueSBvYmplY3QuIERlZXAgYW5hbG9ndWUgb2Yge0BsaW5rIFN1cGVyI2ZvckVhY2h9LlxyXG4gICAqIFVubGlrZSB7QGxpbmsgU3VwZXIjZGVlcEZvckVhY2h9IHRoZSBjYWxsYmFjayBpcyBjYWxsZWQgb24gZXZlcnkgdmFsdWUgb2YgZXZlcnkgb2JqZWN0IGluc2lkZVxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgU3VwZXIoeyBhOiAxLCBiOiB7IGM6IDIsIGQ6IDMgfSB9KS5kZWVwRm9yRWFjaCgodmFsdWUsIGtleSwgb2JqZWN0KSA9PiBvYmplY3Rba2V5XSA9IHZhbHVlICogdmFsdWUpLiQ7XHJcbiAgICogLy8geyBhOiAxLCBiOiB7IGM6IDQsIGQ6IDkgfSB9XHJcbiAgICovXHJcbiAgZGVlcEZvckVhY2hFbnRyeShjYWxsYmFjaywgbiA9IEluZmluaXR5KSB7XHJcbiAgICB2YWxpZGF0ZShbY2FsbGJhY2ssIG5dLCBbJ2Z1bmN0aW9uJywgWydudW1iZXJMaWtlJywgJz4wJ11dLCAnU3VwZXIjZGVlcEZvckVhY2gnKTtcclxuXHJcbiAgICBuID0gTnVtYmVyKG4pO1xyXG5cclxuICAgIGRlZXBGb3JFYWNoRW50cnkodGhpcy4kLCBjYWxsYmFjaywgbiwgW3sga2V5OiBudWxsLCB2YWx1ZTogdGhpcy4kIH1dKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgU3VwZXIjZGVlcEZyZWV6ZVxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcmV0dXJucyB7RFdyYXB9IFJldHVybnMgdGhpcy5cclxuICAgKiBAZGVzY3JpcHRpb24gRGVlcCBhbmFsb2d1ZSBvZiB7QGxpbmsgU3VwZXIjZnJlZXplfS5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogbmV3IFN1cGVyKHsgYTogMSwgYjogeyBjOiAyLCBkOiAzIH0gfSkuZGVlcEZyZWV6ZSgpOyAvLyBTdXBlclxyXG4gICAqL1xyXG4gIGRlZXBGcmVlemUoKSB7XHJcbiAgICBkZWVwRnJlZXplKHRoaXMuJCk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIFN1cGVyI2RlZXBNYXBcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtEZWVwSXRlcmF0aW9uQ2FsbGJhY2t9IGNhbGxiYWNrIC0gQ2FsbGVkIG9uIGVhY2ggaXRlcmF0aW9uLlxyXG4gICAqIFJldHVybiB2YWx1ZSBpcyB1c2VkIGZvciBjcmVhdGluZyBhIG5ldyBvYmplY3QuXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtuID0gSW5maW5pdHldIC0gSXRlcmF0aW9uIGRlcHRoLlxyXG4gICAqIEByZXR1cm5zIHtEV3JhcH0gRC1XcmFwIG9mIHRoZSBuZXcgb2JqZWN0LlxyXG4gICAqIEBkZXNjcmlwdGlvbiBSZXR1cm5zIGEgd3JhcCBvZiBhIG5ldyBvYmplY3QgdXNpbmcgdGhlIGNhbGxiYWNrLiBEZWVwIGFuYWxvZ3VlIG9mIHtAbGluayBTdXBlciNtYXB9LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgU3VwZXIoeyBhOiAxLCBiOiB7IGM6IDIsIGQ6IDMgfSB9KS5kZWVwTWFwKCh2YWx1ZSkgPT4gdmFsdWUgKiB2YWx1ZSkuJDtcclxuICAgKiAvLyB7IGE6IDEsIGI6IHsgYzogNCwgZDogOSB9IH1cclxuICAgKi9cclxuICBkZWVwTWFwKGNhbGxiYWNrLCBuID0gSW5maW5pdHkpIHtcclxuICAgIHZhbGlkYXRlKFtjYWxsYmFjaywgbl0sIFsnZnVuY3Rpb24nLCBbJ251bWJlckxpa2UnLCAnPjAnXV0sICdTdXBlciNkZWVwTWFwJyk7XHJcblxyXG4gICAgbiA9IE51bWJlcihuKTtcclxuXHJcbiAgICByZXR1cm4gRChkZWVwTWFwKHRoaXMuJCwgY2FsbGJhY2ssIG4sIFt7IGtleTogbnVsbCwgdmFsdWU6IHRoaXMuJCB9XSkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdXBlciNkZWVwUmVkdWNlXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7RGVlcFJlZHVjZUNhbGxiYWNrfSBjYWxsYmFjayAtIENhbGxlZCBvbiBlYWNoIGl0ZXJhdGlvbi5cclxuICAgKiBSZXR1cm4gdmFsdWUgaXMgcGFzc2VkIHRvIHRoZSBuZXh0IGNhbGxiYWNrIGNhbGwuXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtuID0gSW5maW5pdHldIC0gSXRlcmF0aW9uIGRlcHRoLlxyXG4gICAqIEBwYXJhbSB7Kn0gW0lWID0gPGZpcnN0IHZhbHVlPnx1bmRlZmluZWRdIC0gSW5pdGlhbCB2YWx1ZS5cclxuICAgKiBAcmV0dXJucyB7Kn0gTW9kaWZpZWQgSVYuXHJcbiAgICogQGRlc2NyaXB0aW9uIFJldHVybnMgbW9kaWZpZWQgSVYuIERlZXAgYW5hbG9ndWUgb2Yge0BsaW5rIFN1cGVyI3JlZHVjZX0uXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBTdXBlcih7IGE6IDEsIGI6IHsgYzogMiwgZDogMyB9IH0pLmRlZXBSZWR1Y2UoKHN1bSwgdmFsdWUpID0+IHN1bSArIHZhbHVlICogdmFsdWUsIEluZmluaXR5LCAwKTsgLy8gMTRcclxuICAgKi9cclxuICBkZWVwUmVkdWNlKGNhbGxiYWNrLCBuID0gSW5maW5pdHksIElWKSB7XHJcbiAgICB2YWxpZGF0ZShbY2FsbGJhY2ssIG5dLCBbJ2Z1bmN0aW9uJywgWydudW1iZXJMaWtlJywgJz4wJ11dLCAnU3VwZXIjZGVlcFJlZHVjZScpO1xyXG5cclxuICAgIG4gPSBOdW1iZXIobik7XHJcblxyXG4gICAgY29uc3Qgb2JqZWN0ID0gdGhpcy4kO1xyXG4gICAgY29uc3QgdHJlZSA9IFt7IGtleTogbnVsbCwgdmFsdWU6IHRoaXMuJCB9XTtcclxuXHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIHtcclxuICAgICAgcmV0dXJuIGRlZXBSZWR1Y2Uob2JqZWN0LCBjYWxsYmFjaywgbiwgZmFsc2UsIHVuZGVmaW5lZCwgdHJlZSkuSVY7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGRlZXBSZWR1Y2Uob2JqZWN0LCBjYWxsYmFjaywgbiwgZmFsc2UsIHsgSVYgfSwgdHJlZSkuSVY7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIFN1cGVyI2RlZXBTb21lXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7RGVlcEl0ZXJhdGlvbkNhbGxiYWNrfSBbY2FsbGJhY2sgPSBCb29sZWFuXSAtIENhbGxlZCBvbiBlYWNoIGl0ZXJhdGlvbi5cclxuICAgKiBJZiByZXR1cm5zIHRydXRoeSBpdGVyYXRpb24gc3RvcHMgYW5kIGlmIGZhbHNleSBpdCBjb250aW51ZXMuXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtuID0gSW5maW5pdHldIC0gSXRlcmF0aW9uIGRlcHRoLlxyXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBJZiBhbGwgdGhlIGNhbGxiYWNrIGNhbGxzIHJldHVybmVkIHRydXRoeSB2YWx1ZS5cclxuICAgKiBAZGVzY3JpcHRpb24gUmV0dXJucyB0cnVlIGlmIHNvbWUgb2YgdGhlIGNhbGxiYWNrIGNhbGxzIHJldHVybmVkIHRydXRoeSB2YWx1ZS5cclxuICAgKiBPdGhlcndpc2UgZmFsc2UuIERlZXAgYW5hbG9ndWUgb2Yge0BsaW5rIFN1cGVyI3NvbWV9LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgU3VwZXIoeyBhOiAxLCBiOiB7IGM6IDIsIGQ6IDMgfSB9KS5kZWVwU29tZSgodmFsdWUpID0+IHZhbHVlID4gNCk7IC8vIGZhbHNlXHJcbiAgICogbmV3IFN1cGVyKHsgYToge30sIGI6IHt9LCBjOiB7fSB9KS5kZWVwU29tZSgoKSA9PiB0cnVlKTsgICAgICAgICAgICAgICAvLyBmYWxzZVxyXG4gICAqL1xyXG4gIGRlZXBTb21lKGNhbGxiYWNrLCBuKSB7XHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiAhaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcclxuICAgICAgbiA9IGNhbGxiYWNrO1xyXG4gICAgICBjYWxsYmFjayA9IEJvb2xlYW47XHJcbiAgICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgbiA9IEluZmluaXR5O1xyXG4gICAgfSBlbHNlIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICBuID0gSW5maW5pdHk7XHJcbiAgICAgIGNhbGxiYWNrID0gQm9vbGVhbjtcclxuICAgIH1cclxuXHJcbiAgICB2YWxpZGF0ZShbY2FsbGJhY2ssIG5dLCBbJ2Z1bmN0aW9uJywgWydudW1iZXJMaWtlJywgJz4wJ11dLCAnU3VwZXIjZGVlcFNvbWUnKTtcclxuXHJcbiAgICBuID0gTnVtYmVyKG4pO1xyXG5cclxuICAgIHJldHVybiBkZWVwU29tZSh0aGlzLiQsIGNhbGxiYWNrLCBuLCBbeyBrZXk6IG51bGwsIHZhbHVlOiB0aGlzLiQgfV0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdXBlciNkZWVwU3RyaWN0RXF1YWxzXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7Kn0gW29iamVjdF0gLSBPYmplY3QgdG8gY29tcGFyZSB0by5cclxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gLSBJZiB0aGUgb2JqZWN0cyBhcmUgZGVlcCBzdHJpY3QgZXF1YWwgb3Igbm90LlxyXG4gICAqIEBkZXNjcmlwdGlvbiBNZXRob2QgZm9yIGRlZXAgc3RyaWN0IGNvbXBhcmlzb24gb2YgdHdvIG9iamVjdHMuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBTdXBlcih7IGE6IDEgfSkuZGVlcFN0cmljdEVxdWFscyh7IGE6ICcxJyB9KTsgLy8gZmFsc2VcclxuICAgKiBuZXcgU3VwZXIoLzEvKS5kZWVwU3RyaWN0RXF1YWxzKC8xLyk7ICAgICAgICAgICAgIC8vIHRydWVcclxuICAgKi9cclxuICBkZWVwU3RyaWN0RXF1YWxzKG9iamVjdCA9IG51bGwpIHtcclxuICAgIHJldHVybiBkZWVwRXF1YWwodGhpcy4kLCBvYmplY3QsIHRydWUpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdXBlciNkZWZpbmVcclxuICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IHByb3BlcnR5IC0gRWl0aGVyIGEgc3RyaW5nIG9mIGEgcHJvcGVydHkgb3IgYSBkZXNjcmlwdG9ycyBvYmplY3QuXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtkZXNjcmlwdG9yXSAtIElmIGEgcHJvcGVydHkgcGFyYW1ldGVyIGlzIGEgc3RyaW5nIHRoaXMgaGFzIHRvIGJlIGEgcHJvcGVydHkgZGVzY3JpcHRvci5cclxuICAgKiBAcmV0dXJucyB7RFdyYXB9IFJldHVybnMgdGhpcy5cclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3IgYm90aFxyXG4gICAqIFtPYmplY3QuZGVmaW5lUHJvcGVydHlde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9kZWZpbmVQcm9wZXJ0eX1cclxuICAgKiBhbmRcclxuICAgKiBbT2JqZWN0LmRlZmluZVByb3BlcnRpZXNde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9kZWZpbmVQcm9wZXJ0aWVzfS5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogbmV3IFN1cGVyKHt9KS5kZWZpbmUoJ2EnLCB7XHJcbiAgICogICB2YWx1ZTogMSxcclxuICAgKiAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAqICAgd3JpdGFibGU6IHRydWUsXHJcbiAgICogICBjb25maWd1cmFibGU6IGZhbHNlXHJcbiAgICogfSkuJDsgLy8geyBhOiAxIH1cclxuICAgKiBuZXcgU3VwZXIoe30pLmRlZmluZSh7XHJcbiAgICogICBhOiB7XHJcbiAgICogICAgIHZhbHVlOiAxLFxyXG4gICAqICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgKiAgICAgd3JpdGFibGU6IHRydWUsXHJcbiAgICogICAgIGNvbmZpZ3VyYWJsZTogZmFsc2VcclxuICAgKiAgIH1cclxuICAgKiB9KS4kOyAvLyB7IGE6IDEgfVxyXG4gICAqL1xyXG4gIGRlZmluZShwcm9wZXJ0eSwgZGVzY3JpcHRvcikge1xyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMikge1xyXG4gICAgICBwcm9wZXJ0eSA9IHsgW3Byb3BlcnR5XTogZGVzY3JpcHRvciB9O1xyXG4gICAgfVxyXG5cclxuICAgIHByb3BlcnR5ID0gbmV3IFN1cGVyKHByb3BlcnR5KS4kO1xyXG5cclxuICAgIGlmIChpc09iamVjdCh0aGlzLiQpKSB7XHJcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMuJCwgcHJvcGVydHkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdXBlciNkZWxldGVcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IHByb3BzIC0gTGlzdCBvZiBwcm9wZXJ0aWVzIHRvIGRlbGV0ZS5cclxuICAgKiBAcmV0dXJucyB7RFdyYXB9IFJldHVybnMgdGhpcy5cclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL09wZXJhdG9ycy9kZWxldGVcclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3IgbXVsdGlwbGVcclxuICAgKiBbXCJkZWxldGVcIiBvcGVyYXRvcl17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvT3BlcmF0b3JzL2RlbGV0ZX0uXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBTdXBlcih7IGE6IDEsIGI6IDIsIGM6IDMgfSkuZGVsZXRlKCdjJywgJ2EnKS4kOyAvLyB7IGI6IDIgfVxyXG4gICAqL1xyXG4gIGRlbGV0ZSguLi5wcm9wcykge1xyXG4gICAgY29uc3Qgb2JqZWN0ID0gdGhpcy4kO1xyXG5cclxuICAgIGl0ZXJhdGUob2JqZWN0ICYmIHByb3BzLCAocHJvcGVydHkpID0+IHtcclxuICAgICAgZGVsZXRlIG9iamVjdFtwcm9wZXJ0eV07XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgU3VwZXIjZXF1YWxzXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7Kn0gW29iamVjdF0gLSBPYmplY3QgdG8gY29tcGFyZS5cclxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gSWYgdGhlIG9iamVjdHMgYXJlIGVxdWFsIG9yIG5vdC5cclxuICAgKiBAZGVzY3JpcHRpb24gUmV0dXJucyB0cnVlIGlmIG9iamVjdHMgYXJlIGVxdWFsIHVzaW5nICc9PScgb3BlcmF0b3IgYW5kIGZhbHNlIGlmIG5vdC4gTmFOcyBhcmUgY29uc2lkZXJlZCB0byBiZSBlcXVhbC5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogbmV3IFN1cGVyKDMpLmVxdWFscygnMycpOyAgIC8vIHRydWVcclxuICAgKiBuZXcgU3VwZXIoTmFOKS5lcXVhbHMoTmFOKTsgLy8gdHJ1ZVxyXG4gICAqL1xyXG4gIGVxdWFscyhvYmplY3QpIHtcclxuICAgIGNvbnN0IG8gPSB0aGlzLiQ7XHJcblxyXG4gICAgb2JqZWN0ID0gbmV3IFN1cGVyKG9iamVjdCkuJDtcclxuXHJcbiAgICAvKiBlc2xpbnQgZXFlcWVxOiAwICovXHJcbiAgICByZXR1cm4gbyA9PSBvYmplY3QgfHwgKGlzTmFOKG8pICYmIGlzTmFOKG9iamVjdCkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdXBlciNldmVyeVxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge0l0ZXJhdGlvbkNhbGxiYWNrfSBbY2FsbGJhY2sgPSBCb29sZWFuXSAtIENhbGxlZCBvbiBlYWNoIGl0ZXJhdGlvbi5cclxuICAgKiBJZiByZXR1cm5zIHRydXRoeSBpdGVyYXRpb24gZ29lcyBvbiBhbmQgaWYgZmFsc2V5IGl0IHN0b3BzLlxyXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBJZiBhbGwgdGhlIGNhbGxiYWNrIGNhbGxzIHJldHVybmVkIHRydXRoeSB2YWx1ZS5cclxuICAgKiBAZGVzY3JpcHRpb24gUmV0dXJucyBib29sZWFuIGlmIGFsbCB0aGUgY2FsbGJhY2sgY2FsbHMgcmV0dXJuZWQgdHJ1dGh5IHZhbHVlLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgU3VwZXIoeyBhOiAxLCBiOiAyLCBjOiAzIH0pLmV2ZXJ5KCh2YWx1ZSkgPT4gdmFsdWUgPCA0KTsgLy8gdHJ1ZVxyXG4gICAqIG5ldyBTdXBlcih7fSkuZXZlcnkoKCkgPT4gZmFsc2UpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0cnVlXHJcbiAgICovXHJcbiAgZXZlcnkoY2FsbGJhY2sgPSBCb29sZWFuKSB7XHJcbiAgICB2YWxpZGF0ZShbY2FsbGJhY2tdLCBbJ2Z1bmN0aW9uJ10sICdTdXBlciNldmVyeScpO1xyXG5cclxuICAgIHJldHVybiBpdGVyYXRlKHRoaXMuJCwgKHZhbHVlLCBrZXksIG9iamVjdCkgPT4ge1xyXG4gICAgICBpZiAoIWNhbGxiYWNrKHZhbHVlLCBrZXksIG9iamVjdCkpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH0pICE9PSBmYWxzZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgU3VwZXIjZmlsdGVyXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7SXRlcmF0aW9uQ2FsbGJhY2t9IFtjYWxsYmFjayA9IEJvb2xlYW5dIC0gQ2FsbGVkIG9uIGVhY2ggaXRlcmF0aW9uLlxyXG4gICAqIElmIHJldHVybnMgdHJ1dGh5IHRoZSBlbGVtZW50IGlzIGluY2x1ZGVkIGFuZCBpZiBmYWxzZXkgaXQncyBleGNsdWRlZC5cclxuICAgKiBAcmV0dXJucyB7RFdyYXB9IE5ldyBELVdyYXAgb2YgZmlsdGVyZWQgb2JqZWN0LlxyXG4gICAqIEBkZXNjcmlwdGlvbiBSZXR1cm5zIGZpbHRlcmVkIGJ5IHRoZSBjYWxsYmFjayBvYmplY3QuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBTdXBlcih7IGE6IDEsIGI6IDIsIGM6IDMgfSkuZmlsdGVyKCh2YWx1ZSkgPT4gdmFsdWUlMikuJDsgLy8geyBhOiAxLCBjOiAzIH1cclxuICAgKiBuZXcgU3VwZXIobnVsbCkuZmlsdGVyKCh2YWx1ZSkgPT4gdmFsdWUlMikuJDsgICAgICAgICAgICAgICAgIC8vIG51bGxcclxuICAgKi9cclxuICBmaWx0ZXIoY2FsbGJhY2sgPSBCb29sZWFuKSB7XHJcbiAgICB2YWxpZGF0ZShbY2FsbGJhY2tdLCBbJ2Z1bmN0aW9uJ10sICdTdXBlciNmaWx0ZXInKTtcclxuXHJcbiAgICBjb25zdCBvYmplY3QgPSB0aGlzLiQ7XHJcbiAgICBjb25zdCBhcnJheSA9IGlzQXJyYXlMaWtlKG9iamVjdCk7XHJcblxyXG4gICAgLyogZXNsaW50IG5vLW5lc3RlZC10ZXJuYXJ5OiAwICovXHJcbiAgICBjb25zdCBvID0gYXJyYXkgPyBbXSA6IGlzTmlsKG9iamVjdCkgPyBvYmplY3QgOiB7fTtcclxuXHJcbiAgICBpdGVyYXRlKG9iamVjdCwgKHZhbHVlLCBrZXkpID0+IHtcclxuICAgICAgaWYgKGNhbGxiYWNrKHZhbHVlLCBrZXksIG9iamVjdCkpIHtcclxuICAgICAgICBpZiAoYXJyYXkpIHtcclxuICAgICAgICAgIG8ucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIG9ba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIEQobyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIFN1cGVyI2ZpbmRcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtJdGVyYXRpb25DYWxsYmFja30gW2NhbGxiYWNrID0gQm9vbGVhbl0gLSBDYWxsZWQgb24gZWFjaCBpdGVyYXRpb24uXHJcbiAgICogSWYgcmV0dXJucyB0cnV0aHkgaXRlcmF0aW9uIHN0b3BzIGFuZCBpZiBmYWxzZXkgaXQgY29udGludWVzLlxyXG4gICAqIEByZXR1cm5zIHt7IGtleTogS2V5LCB2YWx1ZTogKiB9fG51bGx9IHsga2V5LCB2YWx1ZSB9IGlmIGZvdW5kIGFuZCBudWxsIGlmIG5vdC5cclxuICAgKiBAZGVzY3JpcHRpb24gUmV0dXJucyBmb3VuZCB7IGtleSwgdmFsdWUgfSBpZiBzb21ldGhpbmcgZm91bmQgYW5kIG51bGwgaWYgbm90aGluZyBmb3VuZC5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogbmV3IFN1cGVyKHsgYTogMSwgYjogMiwgYzogMyB9KS5maW5kKCh2YWx1ZSkgPT4gdmFsdWUgPT09IDIpOyAvLyB7IGtleTogJ2InLCB2YWx1ZTogMiB9XHJcbiAgICogbmV3IFN1cGVyKFsxLCAyLCAzXSkuZmluZCgodmFsdWUpID0+IHZhbHVlID09PSAyKTsgICAgICAgICAgICAvLyB7IGtleTogMSwgdmFsdWU6IDIgfVxyXG4gICAqL1xyXG4gIGZpbmQoY2FsbGJhY2spIHtcclxuICAgIHZhbGlkYXRlKFtjYWxsYmFja10sIFsnZnVuY3Rpb24nXSwgJ1N1cGVyI2ZpbmQnKTtcclxuXHJcbiAgICByZXR1cm4gaXRlcmF0ZSh0aGlzLiQsICh2YWx1ZSwga2V5LCBvYmplY3QpID0+IHtcclxuICAgICAgaWYgKGNhbGxiYWNrKHZhbHVlLCBrZXksIG9iamVjdCkpIHtcclxuICAgICAgICByZXR1cm4geyBrZXksIHZhbHVlIH07XHJcbiAgICAgIH1cclxuICAgIH0pIHx8IG51bGw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIFN1cGVyI2ZvckVhY2hcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtJdGVyYXRpb25DYWxsYmFja30gY2FsbGJhY2sgLSBDYWxsZWQgb24gZWFjaCBpdGVyYXRpb24uXHJcbiAgICogQHJldHVybnMge0RXcmFwfSBSZXR1cm5zIHRoaXMuXHJcbiAgICogQGRlc2NyaXB0aW9uIE1ldGhvZCBmb3IgaXRlcmF0aW5nIG92ZXIgYW55IG9iamVjdC5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogbmV3IFN1cGVyKHsgYTogMSwgYjogMiwgYzogMyB9KS5mb3JFYWNoKCh2YWx1ZSwga2V5LCBvYmplY3QpID0+IHtcclxuICAgKiAgIG9iamVjdFtrZXldID0gdmFsdWUgKiB2YWx1ZTtcclxuICAgKiB9KS4kOyAvLyB7IGE6IDEsIGI6IHsgYzogNCwgZDogNSB9IH1cclxuICAgKi9cclxuICBmb3JFYWNoKGNhbGxiYWNrKSB7XHJcbiAgICB2YWxpZGF0ZShbY2FsbGJhY2tdLCBbJ2Z1bmN0aW9uJ10sICdTdXBlciNmb3JFYWNoJyk7XHJcblxyXG4gICAgaXRlcmF0ZSh0aGlzLiQsICh2YWx1ZSwga2V5LCBvYmplY3QpID0+IHtcclxuICAgICAgY2FsbGJhY2sodmFsdWUsIGtleSwgb2JqZWN0KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdXBlciNmcmVlemVcclxuICAgKiBAcHVibGljXHJcbiAgICogQHJldHVybnMge0RXcmFwfSBSZXR1cm5zIHRoaXMuXHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvZnJlZXplXHJcbiAgICogQGRlc2NyaXB0aW9uIFN5bm9ueW0gZm9yXHJcbiAgICogW09iamVjdC5mcmVlemVde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9mcmVlemV9LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgU3VwZXIoeyBhOiAxLCBiOiAyLCBjOiAzIH0pLmZyZWV6ZSgpOyAvLyBTdXBlclxyXG4gICAqL1xyXG4gIGZyZWV6ZSgpIHtcclxuICAgIE9iamVjdC5mcmVlemUodGhpcy4kKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgU3VwZXIjZ2V0XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdC48U3RyaW5nLCBGdW5jdGlvbj59IHByb3BlcnR5IC0gRWl0aGVyIGEgc3RyaW5nIG9mIGEgcHJvcGVydHkgb3IgYSBnZXR0ZXJzIG9iamVjdC5cclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZ2V0dGVyXSAtIElmIGEgcHJvcGVydHkgcGFyYW1ldGVyIGlzIGEgc3RyaW5nIHRoaXMgaGFzIHRvIGJlIGEgZ2V0dGVyIGZ1bmN0aW9uLlxyXG4gICAqIEByZXR1cm5zIHtEV3JhcH0gUmV0dXJucyB0aGlzLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBNZXRob2QgZm9yIGRlZmluaW5nIGdldHRlcnMuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIGNvbnN0IG9iamVjdDEgPSBuZXcgU3VwZXIoe30pLmdldCgnYScsICgpID0+IDEpLiQ7XHJcbiAgICogb2JqZWN0MS5hOyAvLyAxXHJcbiAgICpcclxuICAgKiBjb25zdCBvYmplY3QyID0gbmV3IFN1cGVyKHt9KS5nZXQoe1xyXG4gICAqICAgYTogKCkgPT4gMlxyXG4gICAqIH0pLiQ7XHJcbiAgICogb2JqZWN0Mi5hOyAvLyAyXHJcbiAgICovXHJcbiAgZ2V0KHByb3BlcnR5LCBnZXR0ZXIpIHtcclxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDIpIHtcclxuICAgICAgcHJvcGVydHkgPSB7IFtwcm9wZXJ0eV06IGdldHRlciB9O1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG9iamVjdCA9IHRoaXMuJDtcclxuXHJcbiAgICBpdGVyYXRlKGlzT2JqZWN0KG9iamVjdCkgJiYgbmV3IFN1cGVyKHByb3BlcnR5KS4kLCAoZ2V0dGVyLCBwcm9wZXJ0eSkgPT4ge1xyXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCBwcm9wZXJ0eSwgeyBnZXQ6IGdldHRlciB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdXBlciNoYXNcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtTdHJpbmd8Kn0ga2V5IC0gUHJvcGVydHkgdG8gY2hlY2suXHJcbiAgICogQHJldHVybnMge0Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiB0aGUgb2JqZWN0IGhhcyB0aGUga2V5IGFuZCBmYWxzZSBpZiBub3QuXHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9ydS9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9PcGVyYXRvcnMvaW5cclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3JcclxuICAgKiBbXCJpblwiIG9wZXJhdG9yXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9ydS9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9PcGVyYXRvcnMvaW59LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgU3VwZXIoeyBhOiAxLCBiOiAyLCBjOiAzIH0pLmhhcygnYicpOyAvLyB0cnVlXHJcbiAgICovXHJcbiAgaGFzKGtleSkge1xyXG4gICAgY29uc3Qgb2JqZWN0ID0gdGhpcy4kO1xyXG5cclxuICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGtleSBpbiBvYmplY3Q7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIFN1cGVyI2hhc093blxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1N0cmluZ3wqfSBrZXkgLSBQcm9wZXJ0eSB0byBjaGVjay5cclxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIHRoZSBvYmplY3QgaGFzIGl0cyBvd24ga2V5IGFuZCBmYWxzZSBpZiBub3QuXHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaGFzT3duUHJvcGVydHlcclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3JcclxuICAgKiBbT2JqZWN0I2hhc093blByb3BlcnR5XXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaGFzT3duUHJvcGVydHl9LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgU3VwZXIoeyBhOiAxLCBiOiAyLCBjOiAzIH0pLmhhc093bignYicpOyAgICAgICAgICAgICAgLy8gdHJ1ZVxyXG4gICAqIG5ldyBTdXBlcih7IGE6IDEsIGI6IDIsIGM6IDMgfSkuaGFzT3duKCdoYXNPd25Qcm9wZXJ0eScpOyAvLyBmYWxzZVxyXG4gICAqL1xyXG4gIGhhc093bihrZXkpIHtcclxuICAgIGNvbnN0IG9iamVjdCA9IHRoaXMuJDtcclxuXHJcbiAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgU3VwZXIjaW5zdGFuY2VvZlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25zdHJ1Y3RvciAtIENvbnN0cnVjdG9yIHRvIGNoZWNrLlxyXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBJZiB0aGUgb2JqZWN0IGlzIGFuIGluc3RhbmNlIG9mIGNvbnN0cnVjdG9yLlxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvcnUvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvT3BlcmF0b3JzL2luc3RhbmNlb2ZcclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3JcclxuICAgKiBbXCJpbnN0YW5jZW9mXCIgb3BlcmF0b3Jde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL3J1L2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL09wZXJhdG9ycy9pbnN0YW5jZW9mfS5cclxuICAgKi9cclxuICBpbnN0YW5jZW9mKGNvbnN0cnVjdG9yKSB7XHJcbiAgICByZXR1cm4gdGhpcy4kIGluc3RhbmNlb2YgY29uc3RydWN0b3I7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIFN1cGVyI2lzRnJvemVuXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBJZiB0aGUgb2JqZWN0IGlzIGZyb3plbi5cclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc0Zyb3plblxyXG4gICAqIEBkZXNjcmlwdGlvbiBTeW5vbnltIGZvclxyXG4gICAqIFtPYmplY3QuaXNGcm96ZW5de0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc0Zyb3plbn0uXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBTdXBlcih7fSkuZnJlZXplKCkuaXNGcm96ZW4oKTsgLy8gdHJ1ZVxyXG4gICAqL1xyXG4gIGlzRnJvemVuKCkge1xyXG4gICAgcmV0dXJuIE9iamVjdC5pc0Zyb3plbih0aGlzLiQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdXBlciNqc29uXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7SlNPTkNhbGxiYWNrfFN0cmluZ1tdfSBbcmVwbGFjZXJdIC0gU2VlIHRoZSBsaW5rLlxyXG4gICAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gW3NwYWNlXSAtIFNlZSB0aGUgbGluay5cclxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSBKU09OIHN0cmluZy5cclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0pTT04vc3RyaW5naWZ5XHJcbiAgICogQGRlc2NyaXB0aW9uIFN5bm9ueW0gZm9yXHJcbiAgICogW0pTT04uc3RyaW5naWZ5XXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9KU09OL3N0cmluZ2lmeX0uXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBTdXBlcih7IGE6IDEsIGI6IDIsIGM6IDMgfSkuanNvbigpOyAvLyAne1wiYVwiOjEsXCJiXCI6MixcImNcIjozfSdcclxuICAgKiBuZXcgU3VwZXIoeyBhOiAxLCBiOiAyLCBjOiAzIH0pLmpzb24oJyAgICAnKTtcclxuICAgKiAvLyB7XHJcbiAgICogLy8gICAgIFwiYVwiOiAxLFxyXG4gICAqIC8vICAgICBcImJcIjogMixcclxuICAgKiAvLyAgICAgXCJjXCI6IDNcclxuICAgKiAvLyB9XHJcbiAgICogbmV3IFN1cGVyKHsgYTogMSwgYjogMiwgYzogMyB9KS5qc29uKChrZXksIHZhbHVlKSA9PiB7XHJcbiAgICogICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xyXG4gICAqICAgICByZXR1cm4gdmFsdWUlMiA/IGtleSArIHZhbHVlMCA6IHVuZGVmaW5lZDtcclxuICAgKiAgIH1cclxuICAgKlxyXG4gICAqICAgcmV0dXJuIHZhbHVlO1xyXG4gICAqIH0sIDIpO1xyXG4gICAqIC8vIHtcclxuICAgKiAvLyAgIFwiYVwiOiBcImExXCIsXHJcbiAgICogLy8gICBcImNcIjogXCJjM1wiXHJcbiAgICogLy8gfVxyXG4gICAqL1xyXG4gIGpzb24ocmVwbGFjZXIsIHNwYWNlKSB7XHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiAhaXNGdW5jdGlvbihyZXBsYWNlcikgJiYgIWlzQXJyYXkocmVwbGFjZXIpKSB7XHJcbiAgICAgIFtdLnVuc2hpZnQuY2FsbChhcmd1bWVudHMsIG51bGwpO1xyXG4gICAgfVxyXG5cclxuICAgIFtdLnVuc2hpZnQuY2FsbChhcmd1bWVudHMsIHRoaXMuJCk7XHJcblxyXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5LmFwcGx5KEpTT04sIGFyZ3VtZW50cyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIFN1cGVyI2tleU9mXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBWYWx1ZSB0byBmaW5kLlxyXG4gICAqIEByZXR1cm5zIHtTdHJpbmd8TnVtYmVyfG51bGx9IEEga2V5IG9yIGFuIGluZGV4IGlmIGZvdW5kIGFuZCBudWxsIGlmIG5vdC5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIGZvciBmaW5kaW5nIGVxdWFsIHRvIHRoZSBhcmd1bWVudCB2YWx1ZSBpbiB0aGUgb2JqZWN0LiBOYU5zIGFyZSBjb25zaWRlcmVkIHRvIGJlIGVxdWFsLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgU3VwZXIoeyBhOiAxLCBiOiAyLCBjOiAzIH0pLmtleU9mKDIpOyAgIC8vICdiJ1xyXG4gICAqIG5ldyBTdXBlcih7IGE6IDEsIGI6IDIsIGM6IDMgfSkua2V5T2YoJzInKTsgLy8gJ2InXHJcbiAgICovXHJcbiAga2V5T2YodmFsdWUpIHtcclxuICAgIGNvbnN0IGtleSA9IGl0ZXJhdGUodGhpcy4kLCAodmFsLCBrZXkpID0+IHtcclxuICAgICAgaWYgKHZhbCA9PSB2YWx1ZSB8fCAoaXNOYU4odmFsKSAmJiBpc05hTih2YWx1ZSkpKSB7XHJcbiAgICAgICAgcmV0dXJuIGtleTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGlzVW5kZWZpbmVkKGtleSkgPyBudWxsIDoga2V5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdXBlciNrZXlPZlN0cmljdFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0geyp9IHZhbHVlIC0gVmFsdWUgdG8gZmluZC5cclxuICAgKiBAcmV0dXJucyB7U3RyaW5nfE51bWJlcnxudWxsfSBBIGtleSBvciBhbiBpbmRleCBpZiBmb3VuZCBhbmQgbnVsbCBpZiBub3QuXHJcbiAgICogQGRlc2NyaXB0aW9uIE1ldGhvZCBmb3IgZmluZGluZyBzdHJpY3QgZXF1YWwgdG8gdGhlIGFyZ3VtZW50IHZhbHVlIGluIHRoZSBvYmplY3QuIE5hTnMgYXJlIGNvbnNpZGVyZWQgdG8gYmUgZXF1YWwuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBTdXBlcih7IGE6IDEsIGI6IDIsIGM6IDMgfSkua2V5T2ZTdHJpY3QoMik7ICAgLy8gJ2InXHJcbiAgICogbmV3IFN1cGVyKHsgYTogMSwgYjogMiwgYzogMyB9KS5rZXlPZlN0cmljdCgnMicpOyAvLyAnYidcclxuICAgKi9cclxuICBrZXlPZlN0cmljdCh2YWx1ZSkge1xyXG4gICAgY29uc3Qga2V5ID0gaXRlcmF0ZSh0aGlzLiQsICh2YWwsIGtleSkgPT4ge1xyXG4gICAgICBpZiAodmFsID09PSB2YWx1ZSB8fCAoaXNOYU4odmFsKSAmJiBpc05hTih2YWx1ZSkpKSB7XHJcbiAgICAgICAgcmV0dXJuIGtleTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGlzVW5kZWZpbmVkKGtleSkgPyBudWxsIDoga2V5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdXBlciNrZXlzXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZXR1cm5zIHtEV3JhcH0gQSB3cmFwIG9mIHRoZSBrZXlzIGFycmF5LlxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2tleXNcclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3JcclxuICAgKiBbT2JqZWN0LmtleXNde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9rZXlzfS5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogbmV3IFN1cGVyKHsgYTogMSwgYjogMiwgYzogMyB9KS5rZXlzKCkuJDsgLy8gWydhJywgJ2InLCAnYyddXHJcbiAgICogbmV3IFN1cGVyKG51bGwpLmtleXMoKS4kOyAgICAgICAgICAgICAgICAgLy8gW11cclxuICAgKi9cclxuICBrZXlzKCkge1xyXG4gICAgY29uc3Qgb2JqZWN0ID0gdGhpcy4kO1xyXG5cclxuICAgIHJldHVybiBEKGlzT2JqZWN0KG9iamVjdCkgPyBPYmplY3Qua2V5cyhvYmplY3QpIDogW10pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdXBlciNtYXBcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtJdGVyYXRpb25DYWxsYmFja30gY2FsbGJhY2sgLSBDYWxsZWQgb24gZWFjaCBpdGVyYXRpb24uXHJcbiAgICogUmV0dXJuIHZhbHVlIGlzIHVzZWQgZm9yIGNyZWF0aW5nIGEgbmV3IG9iamVjdC5cclxuICAgKiBAcmV0dXJucyB7RFdyYXB9IEQtV3JhcCBvZiB0aGUgbmV3IG9iamVjdC5cclxuICAgKiBAZGVzY3JpcHRpb24gUmV0dXJucyBhIHdyYXAgb2YgYSBuZXcgb2JqZWN0IHVzaW5nIHRoZSBjYWxsYmFjay5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogbmV3IFN1cGVyKHsgYTogMSwgYjogMiwgYzogMyB9KS5tYXAoKHZhbHVlKSA9PiB2YWx1ZSAqIDIpLiQ7IC8vIHsgYTogMiwgYjogNCwgYzogNiB9XHJcbiAgICogbmV3IFN1cGVyKG51bGwpLm1hcCgodmFsdWUpID0+IHZhbHVlICogMikuJDsgICAgICAgICAgICAgICAgIC8vIG51bGxcclxuICAgKi9cclxuICBtYXAoY2FsbGJhY2spIHtcclxuICAgIHZhbGlkYXRlKFtjYWxsYmFja10sIFsnZnVuY3Rpb24nXSwgJ1N1cGVyI21hcCcpO1xyXG5cclxuICAgIGNvbnN0IG9iamVjdCA9IHRoaXMuJDtcclxuICAgIGNvbnN0IG8gPSBpc0FycmF5TGlrZShvYmplY3QpID8gW10gOiBpc051bGwob2JqZWN0KSA/IG51bGwgOiB7fTtcclxuXHJcbiAgICBpdGVyYXRlKG9iamVjdCwgKHZhbHVlLCBrZXkpID0+IHtcclxuICAgICAgb1trZXldID0gY2FsbGJhY2sodmFsdWUsIGtleSwgb2JqZWN0KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBEKG8pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdXBlciNtYXhcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtJdGVyYXRpb25DYWxsYmFja30gY2FsbGJhY2sgLSBDYWxsZWQgb24gZWFjaCBpdGVyYXRpb24uXHJcbiAgICogUmV0dXJuIHZhbHVlIGlzIHVzZWQgZm9yIGNvbXBhcmlzb24gd2l0aCB0aGUgcHJldmlvdXMgbWF4IHZhbHVlLlxyXG4gICAqIEByZXR1cm5zIHt7a2V5OiBLZXksIHZhbHVlOiBOdW1iZXJ9fSBPYmplY3Qgd2l0aCBtYXggdmFsdWUgYW5kIGtleSBvZiB0aGUgbWF4IHZhbHVlLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBNZXRob2QgZm9yIGZpbmRpbmcgbWF4IHZhbHVlIGluIHRoZSBvYmplY3QuXHJcbiAgICogSWYgbm8gY2FsbGJhY2sgaXMgcHJlc2VudCBjb21wYXJpc29uIGlzIGJldHdlZW4gdmFsdWVzIG9mIHRoZSBvYmplY3QuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBTdXBlcih7IGE6IDEsIGI6IDIsIGM6IDMgfSkubWF4KCk7ICAgICAgICAgICAgICAgICAgICAgLy8geyBrZXk6ICdjJywgdmFsdWU6IDMgfVxyXG4gICAqIG5ldyBTdXBlcih7IGE6IDEsIGI6IDIsIGM6IDMgfSkubWF4KCh2YWx1ZSkgPT4gNCAtIHZhbHVlKTsgLy8geyBrZXk6ICdhJywgdmFsdWU6IDMgfVxyXG4gICAqIG5ldyBTdXBlcih7IGE6ICdhJywgYjogJ2InLCBjOiAnYycgfSkubWF4KCk7ICAgICAgICAgICAgICAgLy8geyBrZXk6IG51bGwsIHZhbHVlOiAtSW5maW5pdHkgfVxyXG4gICAqL1xyXG4gIG1heChjYWxsYmFjayA9IG51bGwpIHtcclxuICAgIHZhbGlkYXRlKFtjYWxsYmFja10sIFsnZnVuY3Rpb258fCEnXSwgJ1N1cGVyI21heCcpO1xyXG5cclxuICAgIHJldHVybiB0aGlzLm9iamVjdCgobWF4LCB2YWx1ZSwga2V5LCBvYmplY3QpID0+IHtcclxuICAgICAgY29uc3QgdmFsID0gTnVtYmVyKGNhbGxiYWNrID8gY2FsbGJhY2sodmFsdWUsIGtleSwgb2JqZWN0KSA6IHZhbHVlKTtcclxuXHJcbiAgICAgIGlmICh2YWwgPiBtYXgudmFsdWUpIHtcclxuICAgICAgICBtYXgua2V5ID0ga2V5O1xyXG4gICAgICAgIG1heC52YWx1ZSA9IHZhbDtcclxuICAgICAgfVxyXG4gICAgfSwgeyBrZXk6IG51bGwsIHZhbHVlOiAtSW5maW5pdHkgfSkuJDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgU3VwZXIjbWluXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7SXRlcmF0aW9uQ2FsbGJhY2t9IGNhbGxiYWNrIC0gQ2FsbGVkIG9uIGVhY2ggaXRlcmF0aW9uLlxyXG4gICAqIFJldHVybiB2YWx1ZSBpcyB1c2VkIGZvciBjb21wYXJpc29uIHdpdGggdGhlIHByZXZpb3VzIG1pbiB2YWx1ZS5cclxuICAgKiBAcmV0dXJucyB7e2tleTogS2V5LCB2YWx1ZTogTnVtYmVyfX0gT2JqZWN0IHdpdGggbWluIHZhbHVlIGFuZCBrZXkgb2YgdGhlIG1pbiB2YWx1ZS5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIGZvciBmaW5kaW5nIG1pbiB2YWx1ZSBpbiB0aGUgb2JqZWN0LlxyXG4gICAqIElmIG5vIGNhbGxiYWNrIGlzIHByZXNlbnQgY29tcGFyaXNvbiBpcyBiZXR3ZWVuIHZhbHVlcyBvZiB0aGUgb2JqZWN0LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgU3VwZXIoeyBhOiAxLCBiOiAyLCBjOiAzIH0pLm1pbigpOyAgICAgICAgICAgICAgICAgICAgIC8vIHsga2V5OiAnYScsIHZhbHVlOiAxIH1cclxuICAgKiBuZXcgU3VwZXIoeyBhOiAxLCBiOiAyLCBjOiAzIH0pLm1pbigodmFsdWUpID0+IDQgLSB2YWx1ZSk7IC8vIHsga2V5OiAnYycsIHZhbHVlOiAxIH1cclxuICAgKiBuZXcgU3VwZXIoeyBhOiAnYScsIGI6ICdiJywgYzogJ2MnIH0pLm1pbigpOyAgICAgICAgICAgICAgIC8vIHsga2V5OiBudWxsLCB2YWx1ZTogSW5maW5pdHkgfVxyXG4gICAqL1xyXG4gIG1pbihjYWxsYmFjayA9IG51bGwpIHtcclxuICAgIHZhbGlkYXRlKFtjYWxsYmFja10sIFsnZnVuY3Rpb258fCEnXSwgJ1N1cGVyI21pbicpO1xyXG5cclxuICAgIHJldHVybiB0aGlzLm9iamVjdCgobWluLCB2YWx1ZSwga2V5LCBvYmplY3QpID0+IHtcclxuICAgICAgY29uc3QgdmFsID0gTnVtYmVyKGNhbGxiYWNrID8gY2FsbGJhY2sodmFsdWUsIGtleSwgb2JqZWN0KSA6IHZhbHVlKTtcclxuXHJcbiAgICAgIGlmICh2YWwgPCBtaW4udmFsdWUpIHtcclxuICAgICAgICBtaW4ua2V5ID0ga2V5O1xyXG4gICAgICAgIG1pbi52YWx1ZSA9IHZhbDtcclxuICAgICAgfVxyXG4gICAgfSwgeyBrZXk6IG51bGwsIHZhbHVlOiBJbmZpbml0eSB9KS4kO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdXBlciNvYmplY3RcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtPYmplY3RDYWxsYmFja30gY2FsbGJhY2sgLSBDYWxsZWQgb24gZWFjaCBpdGVyYXRpb24uXHJcbiAgICogQHBhcmFtIHtPYmplY3R8Kn0gW29iamVjdCA9IHt9XSAtIE9iamVjdCB0aGF0IGlzIHBhc3NlZCB0byB0aGUgY2FsbGJhY2suXHJcbiAgICogQHJldHVybnMge0RXcmFwfSBXcmFwIG9mIHRoZSBuZXcgb2JqZWN0LlxyXG4gICAqIEBkZXNjcmlwdGlvbiBUeXBlIG9mIHtAbGluayBTdXBlciNyZWR1Y2V9LlxyXG4gICAqIFRoZSBvYmplY3QgaXMgcGFzc2VkIGFzIGFuIGFyZ3VtZW50IGludG8gdGhlIGNhbGxiYWNrLiBUaGUgb3V0cHV0IGlzIHRoaXMgb2JqZWN0LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgU3VwZXIoeyBhOiAxLCBiOiAyIH0pLm9iamVjdCgob2JqZWN0LCB2YWx1ZSwga2V5KSA9PiB7XHJcbiAgICogICBvYmplY3Rba2V5XSA9IHZhbHVlO1xyXG4gICAqICAgb2JqZWN0W2tleSArIGtleV0gPSB2YWx1ZSAqIDI7XHJcbiAgICogfSkuJDsgLy8geyBhOiAxLCBhYTogMiwgYjogMiwgYmI6IDQgfVxyXG4gICAqL1xyXG4gIG9iamVjdChjYWxsYmFjaywgb2JqZWN0ID0ge30pIHtcclxuICAgIHZhbGlkYXRlKFtjYWxsYmFja10sIFsnZnVuY3Rpb24nXSwgJ1N1cGVyI29iamVjdCcpO1xyXG5cclxuICAgIGl0ZXJhdGUodGhpcy4kLCAodmFsdWUsIGtleSwgb2JqKSA9PiB7XHJcbiAgICAgIGNhbGxiYWNrKG9iamVjdCwgdmFsdWUsIGtleSwgb2JqKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBEKG9iamVjdCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIFN1cGVyI3Byb3BcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0LjxTdHJpbmcsICo+fSBwcm9wZXJ0eSAtIEVpdGhlciBhIHN0cmluZyBvZiBhIHByb3BlcnR5IG9yIGFuIGFzc2lnbmVkIG9iamVjdC5cclxuICAgKiBAcGFyYW0geyp9IFt2YWx1ZV0gLSBJZiBhIHByb3BlcnR5IHBhcmFtZXRlciBpcyBhIHN0cmluZ1xyXG4gICAqIHRoaXMgaGFzIHRvIGJlIGFuIGFzc2lnbmVkIHZhbHVlIGlmIGl0J3MgcHJlc2VudC5cclxuICAgKiBAcmV0dXJucyB7RFdyYXB8Kn0gUmV0dXJucyB0aGlzIGlmIGl0J3MgYSBzZXR0ZXIgb3IgYSB2YWx1ZSBpZiBnZXR0ZXIuXHJcbiAgICogQGRlc2NyaXB0aW9uIE1ldGhvZCBmb3IgZ2V0dGluZyBhbmQgc2V0dGluZyBwcm9wZXJ0aWVzLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgU3VwZXIoeyBhOiAxLCBiOiAyLCBjOiAzIH0pLnByb3AoJ2EnKTsgICAgICAgICAgICAgIC8vIDFcclxuICAgKiBuZXcgU3VwZXIoeyBhOiAxLCBiOiAyLCBjOiAzIH0pLnByb3AoJ2EnLCA3KS4kOyAgICAgICAgIC8vIHsgYTogNywgYjogMiwgYzogMyB9XHJcbiAgICogbmV3IFN1cGVyKHsgYTogMSwgYjogMiwgYzogMyB9KS5wcm9wKHsgYTogNywgYjogOCB9KS4kOyAvLyB7IGE6IDcsIGI6IDgsIGM6IDMgfVxyXG4gICAqL1xyXG4gIHByb3AocHJvcGVydHksIHZhbHVlKSB7XHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8PSAxICYmIGlzU3RyaW5nKHByb3BlcnR5KSkge1xyXG4gICAgICByZXR1cm4gdGhpcy4kID8gdGhpcy4kW3Byb3BlcnR5XSA6IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAyKSB7XHJcbiAgICAgIHByb3BlcnR5ID0geyBbcHJvcGVydHldOiB2YWx1ZSB9O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLmFzc2lnbihwcm9wZXJ0eSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIFN1cGVyI3Byb3BlcnR5RGVzY3JpcHRvclxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHkgLSBQcm9wZXJ0eSBvZiB0aGUgb2JqZWN0LlxyXG4gICAqIEByZXR1cm5zIHtPYmplY3R8dW5kZWZpbmVkfSBQcm9wZXJ0eSBkZXNjcmlwdG9yLlxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2dldE93blByb3BlcnR5RGVzY3JpcHRvclxyXG4gICAqIEBkZXNjcmlwdG9yIFN5bm9ueW0gZm9yXHJcbiAgICogW09iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Jde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3J9LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgU3VwZXIoeyBhOiAxIH0pLnByb3BlcnR5RGVzY3JpcHRvcignYScpO1xyXG4gICAqIC8vIHtcclxuICAgKiAvLyAgIHZhbHVlOiAxLFxyXG4gICAqIC8vICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgKiAvLyAgIHdyaXRhYmxlOiB0cnVlLFxyXG4gICAqIC8vICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICogLy8gfVxyXG4gICAqL1xyXG4gIHByb3BlcnR5RGVzY3JpcHRvcihwcm9wZXJ0eSkge1xyXG4gICAgY29uc3Qgb2JqZWN0ID0gdGhpcy4kO1xyXG5cclxuICAgIHJldHVybiBpc09iamVjdChvYmplY3QpID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KSA6IHVuZGVmaW5lZDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgU3VwZXIjcHJvcGVydHlOYW1lc1xyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcmV0dXJucyB7RFdyYXB9IEQtV3JhcCBvZiB0aGUgbmFtZXMgYXJyYXkuXHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvZ2V0T3duUHJvcGVydHlOYW1lc1xyXG4gICAqIEBkZXNjcmlwdG9yIFN5bm9ueW0gZm9yXHJcbiAgICogW09iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvZ2V0T3duUHJvcGVydHlOYW1lc30uXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBTdXBlcih7IGE6IDEsIGI6IDIgfSkuZGVmaW5lKCdjJywgeyB2YWx1ZTogMyB9KS4kOyAvLyBbJ2EnLCAnYicsICdjJ11cclxuICAgKi9cclxuICBwcm9wZXJ0eU5hbWVzKCkge1xyXG4gICAgY29uc3Qgb2JqZWN0ID0gdGhpcy4kO1xyXG5cclxuICAgIHJldHVybiBEKGlzT2JqZWN0KG9iamVjdCkgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmplY3QpIDogW10pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdXBlciNwcm9wZXJ0eVN5bWJvbHNcclxuICAgKiBAcHVibGljXHJcbiAgICogQHJldHVybnMge0RXcmFwfSBELVdyYXAgb2YgdGhlIG5hbWVzIGFycmF5LlxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2dldE93blByb3BlcnR5U3ltYm9sc1xyXG4gICAqIEBkZXNjcmlwdG9yIFN5bm9ueW0gZm9yXHJcbiAgICogW09iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9nZXRPd25Qcm9wZXJ0eVN5bWJvbHN9LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgU3VwZXIoeyBbU3ltYm9sKCdmb28nKV06IDEgfSkuZGVmaW5lKFN5bWJvbCgnYmFyJyksIHsgdmFsdWU6IDIgfSkuJDsgLy8gW1N5bWJvbCgnZm9vJyksIFN5bWJvbCgnYmFyJyldXHJcbiAgICovXHJcbiAgcHJvcGVydHlTeW1ib2xzKCkge1xyXG4gICAgY29uc3Qgb2JqZWN0ID0gdGhpcy4kO1xyXG5cclxuICAgIHJldHVybiBEKGlzT2JqZWN0KG9iamVjdCkgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCkgOiBbXSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIFN1cGVyI3Byb3RvXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7Kn0gW3Byb3RvXSAtIElmIGl0J3MgcHJlc2VudCBpdCdzIHNldCBhcyBhIHByb3RvdHlwZSB0byB0aGUgb2JqZWN0LlxyXG4gICAqIEByZXR1cm5zIHtEV3JhcH0gSW4gZ2V0dGVyIG1vZGUgcmV0dXJucyB3cmFwIG9mIHRoZSBwcm90b3R5cGUgYW5kIGluIHNldHRlciBtb2RlIHJldHVybnMgdGhpcy5cclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3IgYm90aFxyXG4gICAqIFtPYmplY3QuZ2V0UHJvdG90eXBlT2Zde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9nZXRQcm90b3R5cGVPZn1cclxuICAgKiBhbmRcclxuICAgKiBbT2JqZWN0LnNldFByb3RvdHlwZU9mXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3Qvc2V0UHJvdG90eXBlT2Z9LlxyXG4gICAqL1xyXG4gIHByb3RvKHByb3RvKSB7XHJcbiAgICBjb25zdCBvYmplY3QgPSB0aGlzLiQ7XHJcbiAgICBjb25zdCBpc0NvbnRleHRPYmplY3QgPSAhaXNOaWwob2JqZWN0KTtcclxuXHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICBpZiAoaXNDb250ZXh0T2JqZWN0ICYmIChpc09iamVjdChwcm90bykgfHwgaXNOdWxsKHByb3RvKSkpIHtcclxuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2Yob2JqZWN0LCBwcm90byk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBpc0NvbnRleHRPYmplY3QgPyBuZXcgU3VwZXIoT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCkpIDogbmV3IFN1cGVyKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIFN1cGVyI3JlZHVjZVxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1JlZHVjZUNhbGxiYWNrfSBjYWxsYmFjayAtIENhbGxlZCBvbiBlYWNoIGl0ZXJhdGlvbi5cclxuICAgKiBSZXR1cm4gdmFsdWUgaXMgcGFzc2VkIHRvIHRoZSBuZXh0IGNhbGxiYWNrIGNhbGwuXHJcbiAgICogQHBhcmFtIHsqfSBbSVYgPSA8Zmlyc3QgdmFsdWU+fHVuZGVmaW5lZF0gLSBJbml0aWFsIHZhbHVlLlxyXG4gICAqIEByZXR1cm5zIHsqfSBNb2RpZmllZCBJVi5cclxuICAgKiBAZGVzY3JpcHRpb24gUmV0dXJucyBtb2RpZmllZCBJVi4gSWYgdGhlIHNlY29uZCBhcmd1bWVudCBpcyBub3QgcHJlc2VudCBmaXJzdCB2YWx1ZSBpbiB0aGUgb2JqZWN0IGlzIHRha2VuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBTdXBlcih7IGE6IDEsIGI6IDIsIGM6IDMgfSkucmVkdWNlKChzdW0sIHZhbHVlKSA9PiBzdW0gKyB2YWx1ZSAqIHZhbHVlLCAwKTsgLy8gMTRcclxuICAgKi9cclxuICByZWR1Y2UoY2FsbGJhY2ssIElWKSB7XHJcbiAgICB2YWxpZGF0ZShbY2FsbGJhY2tdLCBbJ2Z1bmN0aW9uJ10sICdTdXBlciNyZWR1Y2UnKTtcclxuXHJcbiAgICBjb25zdCBvYmplY3QgPSB0aGlzLiQ7XHJcblxyXG4gICAgbGV0IHN0YXJ0S2V5O1xyXG5cclxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgIGl0ZXJhdGUob2JqZWN0LCAodmFsdWUsIGtleSkgPT4ge1xyXG4gICAgICAgIHN0YXJ0S2V5ID0ga2V5O1xyXG4gICAgICAgIElWID0gdmFsdWU7XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBpdGVyYXRlKG9iamVjdCwgKHZhbHVlLCBrZXkpID0+IHtcclxuICAgICAgaWYgKGtleSAhPT0gc3RhcnRLZXkpIHtcclxuICAgICAgICBJViA9IGNhbGxiYWNrKElWLCB2YWx1ZSwga2V5LCBvYmplY3QpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gSVY7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIFN1cGVyI3NldFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3QuPFN0cmluZywgRnVuY3Rpb24+fSBwcm9wZXJ0eSAtIEVpdGhlciBhIHN0cmluZyBvZiBhIHByb3BlcnR5IG9yIGEgc2V0dGVycyBvYmplY3QuXHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3NldHRlcl0gLSBJZiBhIHByb3BlcnR5IHBhcmFtZXRlciBpcyBhIHN0cmluZyB0aGlzIGhhcyB0byBiZSBhIHNldHRlciBmdW5jdGlvbi5cclxuICAgKiBAcmV0dXJucyB7RFdyYXB9IFJldHVybnMgdGhpcy5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIGZvciBkZWZpbmluZyBzZXR0ZXJzLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBjb25zdCBvYmplY3QgPSBuZXcgU3VwZXIoe30pXHJcbiAgICogICAuZ2V0KCdwdWJsaWMnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICogICAgIHJldHVybiB0aGlzLl9wcml2YXRlO1xyXG4gICAqICAgfSlcclxuICAgKiAgIC5zZXQoJ3B1YmxpYycsIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAqICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xyXG4gICAqICAgICAgIHRoaXMuX3ByaXZhdGUgPSB2YWx1ZTtcclxuICAgKiAgICAgfVxyXG4gICAqICAgfSk7XHJcbiAgICogb2JqZWN0LnByb3AoJ3B1YmxpYycsICcxJykuJDsgLy8geyBwdWJsaWM6IHVuZGVmaW5lZCB9XHJcbiAgICogb2JqZWN0LnByb3AoJ3B1YmxpYycsIDEpLiQ7ICAgLy8geyBwdWJsaWM6IDEsIF9wcml2YXRlOiAxIH1cclxuICAgKlxyXG4gICAqIG5ldyBTdXBlcih7fSkuc2V0KHtcclxuICAgKiAgIHB1YmxpYyh2YWx1ZSkge1xyXG4gICAqICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xyXG4gICAqICAgICAgIHRoaXMuX3ByaXZhdGUgPSB2YWx1ZTtcclxuICAgKiAgICAgfVxyXG4gICAqICAgfVxyXG4gICAqIH0pO1xyXG4gICAqL1xyXG4gIHNldChwcm9wZXJ0eSwgc2V0dGVyKSB7XHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAyKSB7XHJcbiAgICAgIHByb3BlcnR5ID0geyBbcHJvcGVydHldOiBzZXR0ZXIgfTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBvYmplY3QgPSB0aGlzLiQ7XHJcblxyXG4gICAgaXRlcmF0ZShpc09iamVjdChvYmplY3QpICYmIG5ldyBTdXBlcihwcm9wZXJ0eSkuJCwgKHNldHRlciwgcHJvcGVydHkpID0+IHtcclxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcGVydHksIHsgc2V0OiBzZXR0ZXIgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgU3VwZXIjc29tZVxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge0l0ZXJhdGlvbkNhbGxiYWNrfSBbY2FsbGJhY2sgPSBCb29sZWFuXSAtIENhbGxlZCBvbiBlYWNoIGl0ZXJhdGlvbi5cclxuICAgKiBJZiByZXR1cm5zIHRydXRoeSBpdGVyYXRpb24gc3RvcHMgYW5kIGlmIGZhbHNleSBpdCBjb250aW51ZXMuXHJcbiAgICogQHJldHVybnMge0Jvb2xlYW59IElmIGFsbCB0aGUgY2FsbGJhY2sgY2FsbHMgcmV0dXJuZWQgdHJ1dGh5IHZhbHVlLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBSZXR1cm5zIHRydWUgaWYgc29tZSBvZiB0aGUgY2FsbGJhY2sgY2FsbHMgcmV0dXJuZWQgdHJ1dGh5IHZhbHVlLiBPdGhlcndpc2UgZmFsc2UuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBTdXBlcih7IGE6IDEsIGI6IDIsIGM6IDMgfSkuc29tZSgodmFsdWUpID0+IHZhbHVlID4gNCk7IC8vIGZhbHNlXHJcbiAgICogbmV3IFN1cGVyKHt9KS5zb21lKCgpID0+IHRydWUpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmFsc2VcclxuICAgKi9cclxuICBzb21lKGNhbGxiYWNrID0gQm9vbGVhbikge1xyXG4gICAgdmFsaWRhdGUoW2NhbGxiYWNrXSwgWydmdW5jdGlvbiddLCAnU3VwZXIjc29tZScpO1xyXG5cclxuICAgIHJldHVybiBpdGVyYXRlKHRoaXMuJCwgKHZhbHVlLCBrZXksIG9iamVjdCkgPT4ge1xyXG4gICAgICBpZiAoY2FsbGJhY2sodmFsdWUsIGtleSwgb2JqZWN0KSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9KSB8fCBmYWxzZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgU3VwZXIjc3RyaWN0RXF1YWxzXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7Kn0gW29iamVjdF0gLSBPYmplY3QgdG8gY29tcGFyZS5cclxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gSWYgdGhlIG9iamVjdHMgYXJlIGVxdWFsIG9yIG5vdC5cclxuICAgKiBAZGVzY3JpcHRpb24gUmV0dXJucyB0cnVlIGlmIG9iamVjdHMgYXJlIGVxdWFsIHVzaW5nICc9PT0nIG9wZXJhdG9yIGFuZCBmYWxzZSBpZiBub3QuXHJcbiAgICogTmFOcyBhcmUgY29uc2lkZXJlZCB0byBiZSBzdHJpY3QgZXF1YWwuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBTdXBlcigzKS5zdHJpY3RFcXVhbHMoJzMnKTsgICAvLyBmYWxzZVxyXG4gICAqIG5ldyBTdXBlcihOYU4pLnN0cmljdEVxdWFscyhOYU4pOyAvLyB0cnVlXHJcbiAgICovXHJcbiAgc3RyaWN0RXF1YWxzKG9iamVjdCkge1xyXG4gICAgY29uc3QgbyA9IHRoaXMuJDtcclxuXHJcbiAgICBvYmplY3QgPSBuZXcgU3VwZXIob2JqZWN0KS4kO1xyXG5cclxuICAgIHJldHVybiBvID09PSBvYmplY3QgfHwgKGlzTmFOKG8pICYmIGlzTmFOKG9iamVjdCkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdXBlciNzdW1cclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtJdGVyYXRpb25DYWxsYmFja30gW2NhbGxiYWNrID0gbnVsbF0gLSBDYWxsZWQgb24gZWFjaCBpdGVyYXRpb24uXHJcbiAgICogQHJldHVybnMge051bWJlcn0gU3VtLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBUeXBlIG9mIHtAbGluayBTdXBlciNyZWR1Y2V9LlxyXG4gICAqIElmIHRoZSBjYWxsYmFjayBpcyBwcmVzZW50IGl0J3MgdXNlZCBmb3Igc3VtbWluZy4gSWYgbm90IHRoZSB2YWx1ZSBpcyB1c2VkLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgU3VwZXIoeyBhOiAxLCBiOiAyLCBjOiAzIH0pLnN1bSgpOyAgICAgICAgICAgICAgICAgICAgICAgICAvLyA2XHJcbiAgICogbmV3IFN1cGVyKHsgYTogMSwgYjogMiwgYzogMyB9KS5zdW0oKHZhbHVlKSA9PiB2YWx1ZSAqIHZhbHVlKTsgLy8gMTRcclxuICAgKi9cclxuICBzdW0oY2FsbGJhY2sgPSBudWxsKSB7XHJcbiAgICB2YWxpZGF0ZShbY2FsbGJhY2tdLCBbJ2Z1bmN0aW9ufHwhJ10sICdTdXBlciNzdW0nKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5yZWR1Y2UoKHN1bSwgdmFsdWUsIGtleSwgb2JqZWN0KSA9PiAoXHJcbiAgICAgIHN1bSArIE51bWJlcihjYWxsYmFjayA/IGNhbGxiYWNrKHZhbHVlLCBrZXksIG9iamVjdCkgOiB2YWx1ZSlcclxuICAgICksIDApO1xyXG4gIH1cclxuXHJcbiAgdG9KU09OKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuJDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIgU3VwZXIjdG9TdHJpbmdUYWdcclxuICAgKiBAdHlwZSB7U3RyaW5nfVxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcmVhZG9ubHlcclxuICAgKiBAZGVzY3JpcHRpb24gUmV0dXJucyB0b1N0cmluZyB0YWcgb2YgdGhlIG9iamVjdC5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogbmV3IFN1cGVyKHt9KS50b1N0cmluZ1RhZzsgLy8gJ09iamVjdCdcclxuICAgKiBuZXcgU3VwZXIoW10pLnRvU3RyaW5nVGFnOyAvLyAnQXJyYXknXHJcbiAgICogbmV3IFN1cGVyKDEpLnRvU3RyaW5nVGFnOyAgLy8gJ051bWJlcidcclxuICAgKi9cclxuICBnZXQgdG9TdHJpbmdUYWcoKSB7XHJcbiAgICByZXR1cm4gdG9TdHJpbmdUYWcodGhpcy4kKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIgU3VwZXIjdHlwZVxyXG4gICAqIEB0eXBlIHtTdHJpbmd9XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZWFkb25seVxyXG4gICAqIEBkZXNjcmlwdGlvbiBTeW5vbnltIGZvclxyXG4gICAqIFtcInR5cGVvZlwiIG9wZXJhdG9yXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9ydS9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9PcGVyYXRvcnMvaW5zdGFuY2VvZn0uLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgU3VwZXIoe30pLnR5cGU7ICAgLy8gJ29iamVjdCdcclxuICAgKiBuZXcgU3VwZXIoMSkudHlwZTsgICAgLy8gJ251bWJlcidcclxuICAgKiBuZXcgU3VwZXIoJzEnKS50eXBlOyAgLy8gJ3N0cmluZydcclxuICAgKiBuZXcgU3VwZXIodHJ1ZSkudHlwZTsgLy8gJ2Jvb2xlYW4nXHJcbiAgICovXHJcbiAgZ2V0IHR5cGUoKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHRoaXMuJDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgU3VwZXIjdmFsdWVcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0LjxTdHJpbmcsICo+fSBwcm9wZXJ0eSAtIEVpdGhlciBhIHN0cmluZyBvZiBhIHByb3BlcnR5IG9yIGEgdmFsdWVzIG9iamVjdC5cclxuICAgKiBAcGFyYW0ge09iamVjdC48U3RyaW5nLCAqPn0gW3ZhbHVlXSAtIElmIGEgcHJvcGVydHkgcGFyYW1ldGVyIGlzIGEgc3RyaW5nIHRoaXMgaGFzIHRvIGJlIGEgdmFsdWUgdG8gYmUgc2V0LlxyXG4gICAqIEByZXR1cm5zIHtEV3JhcH0gUmV0dXJucyB0aGlzLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBNZXRob2QgZm9yIGRlZmluaW5nIG5vbi1lbnVtZXJhYmxlLCBub24td3JpdGFibGUsIG5vbi1jb25maWd1cmFibGUgdmFsdWVzLlxyXG4gICAqIFN5bm9ueW0gZm9yIG9iamVjdC5kZWZpbmUocHJvcGVydHksIHsgdmFsdWU6IHZhbHVlIH0pLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgU3VwZXIoe30pLnZhbHVlKCdhJywgMSkuJDsgLy8geyBhOiAxIH1cclxuICAgKiBuZXcgU3VwZXIoe30pLnZhbHVlKHtcclxuICAgKiAgIGE6IDFcclxuICAgKiB9KS4kOyAgICAgICAgICAgICAgICAgICAgICAgICAgLy8geyBhOiAxIH1cclxuICAgKi9cclxuICB2YWx1ZShwcm9wZXJ0eSwgdmFsdWUpIHtcclxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDIpIHtcclxuICAgICAgcHJvcGVydHkgPSB7IFtwcm9wZXJ0eV06IHZhbHVlIH07XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgb2JqZWN0ID0gdGhpcy4kO1xyXG5cclxuICAgIGl0ZXJhdGUoaXNPYmplY3Qob2JqZWN0KSAmJiBuZXcgU3VwZXIocHJvcGVydHkpLiQsICh2YWx1ZSwgcHJvcGVydHkpID0+IHtcclxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcGVydHksIHsgdmFsdWUgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgU3VwZXIjdmFsdWVzXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZXR1cm5zIHtEV3JhcH0gQSB3cmFwIG9mIHRoZSB2YWx1ZXMgYXJyYXkuXHJcbiAgICogQGRlc2NyaXB0aW9uIFJldHVybnMgRC1XcmFwIG9mIHRoZSB2YWx1ZXMgYXJyYXkuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBTdXBlcih7IGE6IDEsIGI6IDIsIGM6IDMgfSkudmFsdWVzKCkuJDsgLy8gWzEsIDIsIDNdXHJcbiAgICogbmV3IFN1cGVyKG51bGwpLnZhbHVlcygpLiQ7ICAgICAgICAgICAgICAgICAvLyBbXVxyXG4gICAqL1xyXG4gIHZhbHVlcygpIHtcclxuICAgIGNvbnN0IGFycmF5ID0gW107XHJcblxyXG4gICAgaXRlcmF0ZSh0aGlzLiQsICh2YWx1ZSkgPT4ge1xyXG4gICAgICBhcnJheS5wdXNoKHZhbHVlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBEKGFycmF5KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgU3VwZXIjd29yZFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge0l0ZXJhdGlvbkNhbGxiYWNrfSBjYWxsYmFjayAtIENhbGxlZCBvbiBlYWNoIGl0ZXJhdGlvbi5cclxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSBDb25jYXRlbmF0ZWQgc3RyaW5nLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBUeXBlIG9mIHtAbGluayBTdXBlciNyZWR1Y2V9LlxyXG4gICAqIElmIHRoZSBjYWxsYmFjayBpcyBwcmVzZW50IGl0J3MgdXNlZCBmb3IgY29uY2F0ZW5hdGluZy4gSWYgbm90IHRoZSB2YWx1ZSBpcyB1c2VkLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgU3VwZXIoeyBhOiAxLCBiOiAyLCBjOiAzIH0pLndvcmQoKTsgICAgICAgICAgICAgICAgICAgICAgICAgLy8gJzEyMydcclxuICAgKiBuZXcgU3VwZXIoeyBhOiAxLCBiOiAyLCBjOiAzIH0pLndvcmQoKHZhbHVlKSA9PiB2YWx1ZSArIHZhbHVlKTsgLy8gJzExMjIzMydcclxuICAgKi9cclxuICB3b3JkKGNhbGxiYWNrID0gbnVsbCkge1xyXG4gICAgdmFsaWRhdGUoW2NhbGxiYWNrXSwgWydmdW5jdGlvbnx8ISddLCAnU3VwZXIjd29yZCcpO1xyXG5cclxuICAgIHJldHVybiB0aGlzLnJlZHVjZSgod29yZCwgdmFsdWUsIGtleSwgb2JqZWN0KSA9PiAoXHJcbiAgICAgIHdvcmQgKyBTdHJpbmcoY2FsbGJhY2sgPyBjYWxsYmFjayh2YWx1ZSwga2V5LCBvYmplY3QpIDogdmFsdWUpXHJcbiAgICApLCAnJyk7XHJcbiAgfVxyXG59XHJcblxyXG5kZWZpbmVQcm9wZXJ0aWVzKFN1cGVyLnByb3RvdHlwZSwge1xyXG4gIFtTeW1ib2wudG9TdHJpbmdUYWddOiAnU3VwZXInXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvbiBkZWVwQXNzaWduXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBwYXJhbSB7Kn0gdGFyZ2V0IC0gT2JqZWN0IHRvIGFzc2lnbiBwcm9wZXJ0aWVzIHRvLlxyXG4gKiBAcGFyYW0geyp9IG9iamVjdCAtIE9iamVjdCB0byBhc3NpZ24gcHJvcGVydGllcyBmcm9tLlxyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICovXHJcbmZ1bmN0aW9uIGRlZXBBc3NpZ24odGFyZ2V0LCBvYmplY3QpIHtcclxuICBpdGVyYXRlKG9iamVjdCwgKHZhbHVlLCBrZXkpID0+IHtcclxuICAgIGlmIChpc1ByaW1pdGl2ZSh0YXJnZXRba2V5XSkgfHwgIXt9Lmhhc093blByb3BlcnR5LmNhbGwodGFyZ2V0LCBrZXkpKSB7XHJcbiAgICAgIHRhcmdldFtrZXldID0gZGVlcENsb25lKHZhbHVlKTtcclxuXHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWlzUHJpbWl0aXZlKHRhcmdldFtrZXldKSkge1xyXG4gICAgICBkZWVwQXNzaWduKHRhcmdldFtrZXldLCB2YWx1ZSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZnVuY3Rpb24gZGVlcENsb25lXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IC0gT2JqZWN0IHRvIGNsb25lLlxyXG4gKiBAZGVzY3JpcHRpb24gRG9lcyB0aGUgZGVlcCBjbG9uaW5nLlxyXG4gKi9cclxuZnVuY3Rpb24gZGVlcENsb25lKG9iamVjdCkge1xyXG4gIGNvbnN0IGNsb25lID0gY2xvbmVTd2l0Y2hlcihvYmplY3QsIFtvYmplY3QsIHRydWVdKTtcclxuXHJcbiAgaWYgKGNsb25lICE9PSBvYmplY3QpIHtcclxuICAgIGl0ZXJhdGUob2JqZWN0LCAodmFsdWUsIGtleSkgPT4ge1xyXG4gICAgICBjbG9uZVtrZXldID0gZGVlcENsb25lKHZhbHVlKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGNsb25lO1xyXG59XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uIGRlZXBFcXVhbFxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcGFyYW0geyp9IG8xIC0gRmlyc3Qgb2JqZWN0IHRvIGNvbXBhcmUuXHJcbiAqIEBwYXJhbSB7Kn0gbzIgLSBTZWNvbmQgb2JqZWN0IHRvIGNvbXBhcmUuXHJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gc3RyaWN0IC0gSWYgY29tcGFyaXNvbiBzaG91bGQgYmUgc3RyaWN0IG9yIG5vdC5cclxuICogQHJldHVybnMge0Jvb2xlYW59IC0gSWYgdGhlIG9iamVjdCBhcmUgZGVlcCBlcXVhbCBvciBub3QuXHJcbiAqL1xyXG5mdW5jdGlvbiBkZWVwRXF1YWwobzEsIG8yLCBzdHJpY3QpIHtcclxuICBpZiAobzEgPT09IG8yKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGlmIChpc05hTihvMSkgJiYgaXNOYU4obzIpICYmIGlzUHJpbWl0aXZlKG8xKSAmJiBpc1ByaW1pdGl2ZShvMikpIHtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgaWYgKGlzTmFOKG8xKSB8fCBpc05hTihvMikpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIGlmIChpc1ByaW1pdGl2ZShvMSkgfHwgaXNQcmltaXRpdmUobzIpKSB7XHJcbiAgICByZXR1cm4gc3RyaWN0ID8gbzEgPT09IG8yIDogbzEgPT0gbzI7XHJcbiAgfVxyXG5cclxuICBpZiAoaXNEYXRlKG8xKSAmJiBpc0RhdGUobzIpKSB7XHJcbiAgICByZXR1cm4gbzEuZ2V0VGltZSgpID09PSBvMi5nZXRUaW1lKCk7XHJcbiAgfVxyXG5cclxuICBpZiAoaXNEYXRlKG8xKSB8fCBpc0RhdGUobzIpKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBpZiAoaXNSZWdFeHAobzEpICYmIGlzUmVnRXhwKG8yKSkge1xyXG4gICAgcmV0dXJuIG8xLnNvdXJjZSA9PT0gbzIuc291cmNlICYmXHJcbiAgICAgIG8xLnRvU3RyaW5nKCkubWF0Y2goL1tnaW11eV0qJC8pWzBdID09PSBvMi50b1N0cmluZygpLm1hdGNoKC9bZ2ltdXldKiQvKVswXSAmJlxyXG4gICAgICBvMS5sYXN0SW5kZXggPT09IG8yLmxhc3RJbmRleDtcclxuICB9XHJcblxyXG4gIGlmIChpc1JlZ0V4cChvMSkgfHwgaXNSZWdFeHAobzIpKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBpZiAoKCFpc1BsYWluT2JqZWN0KG8xKSAmJiAhaXNBcnJheShvMSkpIHx8ICghaXNQbGFpbk9iamVjdChvMikgJiYgIWlzQXJyYXkobzIpKSkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgcDEgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YobzEpO1xyXG4gIGNvbnN0IHAyID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG8xKTtcclxuXHJcbiAgaWYgKE9iamVjdC5rZXlzKG8xKS5sZW5ndGggIT09IE9iamVjdC5rZXlzKG8yKS5sZW5ndGgpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIGlmIChwMSAmJiBwMiAmJiAodG9TdHJpbmdUYWcocDEuY29uc3RydWN0b3IpICE9PSB0b1N0cmluZ1RhZyhwMi5jb25zdHJ1Y3RvcikpKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gaXRlcmF0ZShvMSwgKHZhbHVlLCBrZXkpID0+IHtcclxuICAgIGlmICghKGtleSBpbiBvMikgfHwgIWRlZXBFcXVhbCh2YWx1ZSwgbzJba2V5XSwgc3RyaWN0KSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgfSkgIT09IGZhbHNlO1xyXG59XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uIGRlZXBFdmVyeVxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcGFyYW0geyp9IG9iamVjdCAtIE9iamVjdCB0byBpdGVyYXRlIG92ZXIuXHJcbiAqIEBwYXJhbSB7RGVlcEl0ZXJhdGlvbkNhbGxiYWNrfSBjYWxsYmFjayAtIENhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIG9uIGV2ZXJ5IGVsZW1lbnQuXHJcbiAqIElmIHJldHVybnMgdHJ1dGh5IHRoZSBpdGVyYXRpb24gZ29lcyBvbiBhbmQgaWYgbm90IGl0IHN0b3BzLlxyXG4gKiBAcGFyYW0ge051bWJlcn0gbiAtIERlcHRoIG9mIGl0ZXJhdGlvbi5cclxuICogQHBhcmFtIHtUcmVlfSB0cmVlIC0gVHJlZSBvZiB7IGtleSwgdmFsdWUgfSBvYmplY3RzIG9mIGl0ZXJhdGlvbi5cclxuICogQHJldHVybnMge0Jvb2xlYW59IC0gSWYgYWxsIHRoZSBjYWxsYmFjayBjYWxscyByZXR1cm5lZCB0cnV0aHkgdmFsdWUuXHJcbiAqL1xyXG5mdW5jdGlvbiBkZWVwRXZlcnkob2JqZWN0LCBjYWxsYmFjaywgbiwgdHJlZSkge1xyXG4gIGNvbnN0IGVuZCA9IG4gPT09IDE7XHJcblxyXG4gIHJldHVybiBpdGVyYXRlKG9iamVjdCwgKHZhbHVlLCBrZXksIG9iamVjdCkgPT4ge1xyXG4gICAgY29uc3QgbmV3VHJlZSA9IFt7IGtleSwgdmFsdWUgfV0uY29uY2F0KHRyZWUpO1xyXG5cclxuICAgIGlmIChcclxuICAgICAgZW5kIHx8IGlzUHJpbWl0aXZlKHZhbHVlKVxyXG4gICAgICAgID8gIWNhbGxiYWNrKHZhbHVlLCBrZXksIG9iamVjdCwgbmV3VHJlZSlcclxuICAgICAgICA6ICFkZWVwRXZlcnkodmFsdWUsIGNhbGxiYWNrLCBuIC0gMSwgbmV3VHJlZSlcclxuICAgICkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgfSkgIT09IGZhbHNlO1xyXG59XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uIGRlZXBGaWx0ZXJcclxuICogQHByaXZhdGVcclxuICogQHBhcmFtIHsqfSBvYmplY3QgLSBPYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxyXG4gKiBAcGFyYW0ge0RlZXBJdGVyYXRpb25DYWxsYmFja30gY2FsbGJhY2sgLSBDYWxsYmFjayB0aGF0IGlzIGNhbGxlZCBvbiBldmVyeSBlbGVtZW50LlxyXG4gKiBJZiByZXR1cm5zIHRydXRoeSB0aGUgZWxlbWVudCBpcyBpbmNsdWRlZCBpbiB0aGUgb3V0cHV0IGFuZCBpZiBub3QgaXQncyBleGNsdWRlZC5cclxuICogQHBhcmFtIHtOdW1iZXJ9IG4gLSBEZXB0aCBvZiBpdGVyYXRpb24uXHJcbiAqIEBwYXJhbSB7VHJlZX0gdHJlZSAtIFRyZWUgb2YgeyBrZXksIHZhbHVlIH0gb2JqZWN0cyBvZiBpdGVyYXRpb24uXHJcbiAqIEByZXR1cm5zIHsqfSBGaWx0ZXJlZCBvYmplY3QuXHJcbiAqL1xyXG5mdW5jdGlvbiBkZWVwRmlsdGVyKG9iamVjdCwgY2FsbGJhY2ssIG4sIHRyZWUpIHtcclxuICBjb25zdCBhcnJheSA9IGlzQXJyYXlMaWtlKG9iamVjdCk7XHJcbiAgY29uc3QgbnVsID0gaXNOaWwob2JqZWN0KTtcclxuICBjb25zdCBvID0gYXJyYXkgPyBbXSA6IG51bCA/IG9iamVjdCA6IHt9O1xyXG4gIGNvbnN0IGVuZCA9IG4gPT09IDE7XHJcblxyXG4gIGl0ZXJhdGUob2JqZWN0LCAodmFsdWUsIGtleSwgb2JqZWN0KSA9PiB7XHJcbiAgICBjb25zdCBuZXdUcmVlID0gW3sga2V5LCB2YWx1ZSB9XS5jb25jYXQodHJlZSk7XHJcblxyXG4gICAgaWYgKChlbmQgfHwgaXNQcmltaXRpdmUodmFsdWUpKSAmJiBjYWxsYmFjayh2YWx1ZSwga2V5LCBvYmplY3QsIG5ld1RyZWUpKSB7XHJcbiAgICAgIGlmIChhcnJheSkge1xyXG4gICAgICAgIG8ucHVzaCh2YWx1ZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgb1trZXldID0gdmFsdWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWVuZCkge1xyXG4gICAgICBjb25zdCBmaWx0ZXJlZCA9IGRlZXBGaWx0ZXIodmFsdWUsIGNhbGxiYWNrLCBuIC0gMSwgbmV3VHJlZSk7XHJcblxyXG4gICAgICBpZiAoZmlsdGVyZWQpIHtcclxuICAgICAgICBpZiAoYXJyYXkpIHtcclxuICAgICAgICAgIG8ucHVzaChmaWx0ZXJlZCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIG9ba2V5XSA9IGZpbHRlcmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICBpZiAoYXJyYXkpIHtcclxuICAgIHJldHVybiBvLmxlbmd0aCA/IG8gOiB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxuICBpZiAoIW51bCkge1xyXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG8pLmxlbmd0aCA/IG8gOiB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gbztcclxufVxyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvbiBkZWVwRmluZFxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcGFyYW0geyp9IG9iamVjdCAtIE9iamVjdCB0byBpdGVyYXRlIG92ZXIuXHJcbiAqIEBwYXJhbSB7RGVlcEl0ZXJhdGlvbkNhbGxiYWNrfSBjYWxsYmFjayAtIENhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIG9uIGV2ZXJ5IGVsZW1lbnQuXHJcbiAqIElmIHJldHVybnMgdHJ1dGh5IHRoZSBpdGVyYXRpb24gc3RvcHMgYW5kIGlmIG5vdCBpdCBjb250aW51ZXMuXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBuIC0gRGVwdGggb2YgaXRlcmF0aW9uLlxyXG4gKiBAcGFyYW0ge1RyZWV9IHRyZWUgLSBUcmVlIG9mIHsga2V5LCB2YWx1ZSB9IG9iamVjdHMgb2YgaXRlcmF0aW9uLlxyXG4gKiBAcmV0dXJucyB7VHJlZXxudWxsfSAtIElmIGZvdW5kIHRoZSB3aG9sZSB0cmVlIGlzIHJldHVybmVkIGFuZCBpZiBub3QgaXQncyBudWxsIHdoYXQncyByZXR1cm5lZC5cclxuICovXHJcbmZ1bmN0aW9uIGRlZXBGaW5kKG9iamVjdCwgY2FsbGJhY2ssIG4sIHRyZWUpIHtcclxuICBjb25zdCBlbmQgPSBuID09PSAxO1xyXG5cclxuICByZXR1cm4gaXRlcmF0ZShvYmplY3QsICh2YWx1ZSwga2V5LCBvYmplY3QpID0+IHtcclxuICAgIGNvbnN0IG5ld1RyZWUgPSBbeyBrZXksIHZhbHVlIH1dLmNvbmNhdCh0cmVlKTtcclxuXHJcbiAgICBpZiAoZW5kIHx8IGlzUHJpbWl0aXZlKHZhbHVlKSkge1xyXG4gICAgICBpZiAoY2FsbGJhY2sodmFsdWUsIGtleSwgb2JqZWN0LCBuZXdUcmVlKSkge1xyXG4gICAgICAgIHJldHVybiBuZXdUcmVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcmVzdWx0ID0gZGVlcEZpbmQodmFsdWUsIGNhbGxiYWNrLCBuIC0gMSwgbmV3VHJlZSk7XHJcblxyXG4gICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gIH0pIHx8IG51bGw7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZnVuY3Rpb24gZGVlcEZvckVhY2hcclxuICogQHByaXZhdGVcclxuICogQHBhcmFtIHsqfSBvYmplY3QgLSBPYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxyXG4gKiBAcGFyYW0ge0RlZXBJdGVyYXRpb25DYWxsYmFja30gY2FsbGJhY2sgLSBDYWxsYmFjayB0aGF0IGlzIGNhbGxlZCBvbiBldmVyeSBlbGVtZW50LlxyXG4gKiBAcGFyYW0ge051bWJlcn0gbiAtIERlcHRoIG9mIGl0ZXJhdGlvbi5cclxuICogQHBhcmFtIHtUcmVlfSB0cmVlIC0gVHJlZSBvZiB7IGtleSwgdmFsdWUgfSBvYmplY3RzIG9mIGl0ZXJhdGlvbi5cclxuICogQHJldHVybnMge3ZvaWR9XHJcbiAqL1xyXG5mdW5jdGlvbiBkZWVwRm9yRWFjaChvYmplY3QsIGNhbGxiYWNrLCBuLCB0cmVlKSB7XHJcbiAgY29uc3QgZW5kID0gbiA9PT0gMTtcclxuXHJcbiAgaXRlcmF0ZShvYmplY3QsICh2YWx1ZSwga2V5LCBvYmplY3QpID0+IHtcclxuICAgIGNvbnN0IG5ld1RyZWUgPSBbeyBrZXksIHZhbHVlIH1dLmNvbmNhdCh0cmVlKTtcclxuXHJcbiAgICBpZiAoZW5kIHx8IGlzUHJpbWl0aXZlKHZhbHVlKSkge1xyXG4gICAgICBjYWxsYmFjayh2YWx1ZSwga2V5LCBvYmplY3QsIG5ld1RyZWUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZGVlcEZvckVhY2godmFsdWUsIGNhbGxiYWNrLCBuIC0gMSwgbmV3VHJlZSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZnVuY3Rpb24gZGVlcEZvckVhY2hFbnRyeVxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcGFyYW0geyp9IG9iamVjdCAtIE9iamVjdCB0byBpdGVyYXRlIG92ZXIuXHJcbiAqIEBwYXJhbSB7RGVlcEl0ZXJhdGlvbkNhbGxiYWNrfSBjYWxsYmFjayAtIENhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIG9uIGV2ZXJ5IGVsZW1lbnQuXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBuIC0gRGVwdGggb2YgaXRlcmF0aW9uLlxyXG4gKiBAcGFyYW0ge1RyZWV9IHRyZWUgLSBUcmVlIG9mIHsga2V5LCB2YWx1ZSB9IG9iamVjdHMgb2YgaXRlcmF0aW9uLlxyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICovXHJcbmZ1bmN0aW9uIGRlZXBGb3JFYWNoRW50cnkob2JqZWN0LCBjYWxsYmFjaywgbiwgdHJlZSkge1xyXG4gIGNvbnN0IGVuZCA9IG4gPT09IDE7XHJcblxyXG4gIGl0ZXJhdGUob2JqZWN0LCAodmFsdWUsIGtleSwgb2JqZWN0KSA9PiB7XHJcbiAgICBjb25zdCBuZXdUcmVlID0gW3sga2V5LCB2YWx1ZSB9XS5jb25jYXQodHJlZSk7XHJcblxyXG4gICAgY2FsbGJhY2sodmFsdWUsIGtleSwgb2JqZWN0LCBuZXdUcmVlKTtcclxuXHJcbiAgICBpZiAoIWVuZCAmJiAhaXNQcmltaXRpdmUodmFsdWUpKSB7XHJcbiAgICAgIGRlZXBGb3JFYWNoRW50cnkodmFsdWUsIGNhbGxiYWNrLCBuIC0gMSwgbmV3VHJlZSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZnVuY3Rpb24gZGVlcEZyZWV6ZVxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcGFyYW0geyp9IG9iamVjdCAtIE9iamVjdCB0byBmcmVlemUuXHJcbiAqIEByZXR1cm5zIHt2b2lkfVxyXG4gKi9cclxuZnVuY3Rpb24gZGVlcEZyZWV6ZShvYmplY3QpIHtcclxuICBPYmplY3QuZnJlZXplKG9iamVjdCk7XHJcbiAgaXRlcmF0ZShvYmplY3QsIGRlZXBGcmVlemUpO1xyXG59XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uIGRlZXBNYXBcclxuICogQHByaXZhdGVcclxuICogQHBhcmFtIHsqfSBvYmplY3QgLSBPYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxyXG4gKiBAcGFyYW0ge0RlZXBJdGVyYXRpb25DYWxsYmFja30gY2FsbGJhY2sgLSBDYWxsYmFjayB0aGF0IGlzIGNhbGxlZCBvbiBldmVyeSBlbGVtZW50LlxyXG4gKiBSZXR1cm5lZCB2YWx1ZSBpcyB1c2VkIHRvIGNyZWF0ZSB0byBuZXcgb2JqZWN0LlxyXG4gKiBAcGFyYW0ge051bWJlcn0gbiAtIERlcHRoIG9mIGl0ZXJhdGlvbi5cclxuICogQHBhcmFtIHtUcmVlfSB0cmVlIC0gVHJlZSBvZiB7IGtleSwgdmFsdWUgfSBvYmplY3RzIG9mIGl0ZXJhdGlvbi5cclxuICogQHJldHVybnMgeyp9IE5ldyBvYmplY3QuXHJcbiAqL1xyXG5mdW5jdGlvbiBkZWVwTWFwKG9iamVjdCwgY2FsbGJhY2ssIG4sIHRyZWUpIHtcclxuICBjb25zdCBvID0gaXNBcnJheUxpa2Uob2JqZWN0KSA/IFtdIDogaXNOaWwob2JqZWN0KSA/IG9iamVjdCA6IHt9O1xyXG4gIGNvbnN0IGVuZCA9IG4gPT09IDE7XHJcblxyXG4gIGl0ZXJhdGUob2JqZWN0LCAodmFsdWUsIGtleSwgb2JqZWN0KSA9PiB7XHJcbiAgICBjb25zdCBuZXdUcmVlID0gW3sga2V5LCB2YWx1ZSB9XS5jb25jYXQodHJlZSk7XHJcblxyXG4gICAgb1trZXldID0gZW5kIHx8IGlzUHJpbWl0aXZlKHZhbHVlKVxyXG4gICAgICA/IGNhbGxiYWNrKHZhbHVlLCBrZXksIG9iamVjdCwgbmV3VHJlZSlcclxuICAgICAgOiBkZWVwTWFwKHZhbHVlLCBjYWxsYmFjaywgbiAtIDEsIG5ld1RyZWUpO1xyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gbztcclxufVxyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvbiBkZWVwUmVkdWNlXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IC0gT2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cclxuICogQHBhcmFtIHtEZWVwUmVkdWNlQ2FsbGJhY2t9IGNhbGxiYWNrIC0gQ2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgb24gZXZlcnkgZWxlbWVudC5cclxuICogUmV0dXJuZWQgdmFsdWUgaXMgdXNlZCB0byBjcmVhdGUgdG8gbmV3IG9iamVjdC5cclxuICogQHBhcmFtIHtOdW1iZXJ9IG4gLSBEZXB0aCBvZiBpdGVyYXRpb24uXHJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gc3RhcnQgLSBJZiBjYWxsYmFjayB3YXMgY2FsbGVkIGFscmVhZHkgb3Igbm90LlxyXG4gKiBAcGFyYW0ge3sgSVY6ICogfXx1bmRlZmluZWR9IElWIC0gSWYgY2FsbGJhY2sgd2FzIGNhbGxlZCBhbHJlYWR5IG9yIG5vdC5cclxuICogQHBhcmFtIHtUcmVlfSB0cmVlIC0gVHJlZSBvZiB7IGtleSwgdmFsdWUgfSBvYmplY3RzIG9mIGl0ZXJhdGlvbi5cclxuICogQHJldHVybnMge3sgSVY6ICogfX0gVHJhbnNmb3JtZWQgSVYuXHJcbiAqL1xyXG5mdW5jdGlvbiBkZWVwUmVkdWNlKG9iamVjdCwgY2FsbGJhY2ssIG4sIHN0YXJ0LCBJViwgdHJlZSkge1xyXG4gIGNvbnN0IGVuZCA9IG4gPT09IDE7XHJcblxyXG4gIGl0ZXJhdGUob2JqZWN0LCAodmFsdWUsIGtleSwgb2JqZWN0KSA9PiB7XHJcbiAgICBpZiAoIUlWICYmIChlbmQgfHwgaXNQcmltaXRpdmUodmFsdWUpKSAmJiAhc3RhcnQpIHtcclxuICAgICAgSVYgPSB7IElWOiB2YWx1ZSB9O1xyXG4gICAgICBzdGFydCA9IHRydWU7XHJcblxyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgbmV3VHJlZSA9IFt7IGtleSwgdmFsdWUgfV0uY29uY2F0KHRyZWUpO1xyXG5cclxuICAgIElWID0gZW5kIHx8IGlzUHJpbWl0aXZlKHZhbHVlKVxyXG4gICAgICA/IHsgSVY6IGNhbGxiYWNrKElWLklWLCB2YWx1ZSwga2V5LCBvYmplY3QsIG5ld1RyZWUpIH1cclxuICAgICAgOiBkZWVwUmVkdWNlKHZhbHVlLCBjYWxsYmFjaywgbiAtIDEsIHN0YXJ0LCBJViwgbmV3VHJlZSk7XHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiBJVjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvbiBkZWVwU29tZVxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcGFyYW0geyp9IG9iamVjdCAtIE9iamVjdCB0byBpdGVyYXRlIG92ZXIuXHJcbiAqIEBwYXJhbSB7RGVlcEl0ZXJhdGlvbkNhbGxiYWNrfSBjYWxsYmFjayAtIENhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIG9uIGV2ZXJ5IGVsZW1lbnQuXHJcbiAqIElmIHJldHVybnMgdHJ1dGh5IHRoZSBpdGVyYXRpb24gc3RvcHMgYW5kIGlmIG5vdCBpdCBjb250aW51ZXMuXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBuIC0gRGVwdGggb2YgaXRlcmF0aW9uLlxyXG4gKiBAcGFyYW0ge1RyZWV9IHRyZWUgLSBUcmVlIG9mIHsga2V5LCB2YWx1ZSB9IG9iamVjdHMgb2YgaXRlcmF0aW9uLlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gLSBJZiBzb21lIG9mIHRoZSBjYWxsYmFjayBjYWxscyByZXR1cm5lZCB0cnV0aHkgdmFsdWUuXHJcbiAqL1xyXG5mdW5jdGlvbiBkZWVwU29tZShvYmplY3QsIGNhbGxiYWNrLCBuLCB0cmVlKSB7XHJcbiAgY29uc3QgZW5kID0gbiA9PT0gMTtcclxuXHJcbiAgcmV0dXJuIGl0ZXJhdGUob2JqZWN0LCAodmFsdWUsIGtleSwgb2JqZWN0KSA9PiB7XHJcbiAgICBjb25zdCBuZXdUcmVlID0gW3sga2V5LCB2YWx1ZSB9XS5jb25jYXQodHJlZSk7XHJcblxyXG4gICAgaWYgKFxyXG4gICAgICBlbmQgfHwgaXNQcmltaXRpdmUodmFsdWUpXHJcbiAgICAgICAgPyBjYWxsYmFjayh2YWx1ZSwga2V5LCBvYmplY3QsIG5ld1RyZWUpXHJcbiAgICAgICAgOiBkZWVwU29tZSh2YWx1ZSwgY2FsbGJhY2ssIG4gLSAxLCBuZXdUcmVlKVxyXG4gICAgKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gIH0pIHx8IGZhbHNlO1xyXG59XHJcblxyXG5jb25zdHJ1Y3RvcnNbMF0ucHVzaCh7XHJcbiAgY2hlY2s6ICgpID0+IHRydWUsXHJcbiAgY2xzOiBTdXBlclxyXG59KTtcclxuXHJcbmV4cG9ydCB7IFN1cGVyIH07XHJcbiIsIi8qKlxyXG4gKiBAbW9kdWxlIEZ1bmNcclxuICogQHByaXZhdGVcclxuICogQG1peGluXHJcbiAqIEBkZXNjcmlwdGlvbiBFeHBvcnRzIEZ1bmMgY2xhc3MuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgU3VwZXIgfSBmcm9tICcuL1N1cGVyJztcclxuaW1wb3J0IHsgUHJvbWlzZSB9IGZyb20gJy4vUHJvbWlzZSc7XHJcbmltcG9ydCB7IGNvbnN0cnVjdG9ycyB9IGZyb20gJy4vY29uc3RhbnRzJztcclxuaW1wb3J0IHsgaXNGdW5jdGlvbiwgdmFsaWRhdGUsIHRvQXJyYXksIFN5bWJvbCwgZGVmaW5lUHJvcGVydGllcywgaXRlcmF0ZSB9IGZyb20gJy4vaGVscGVycyc7XHJcblxyXG4vKipcclxuICogQGNhbGxiYWNrIEJlZm9yZU1pZGRsZXdhcmVcclxuICogQHBhcmFtIHtBcnJheX0gYXJncyAtIFByZXZpb3VzIGFyZ3VtZW50cy5cclxuICogQHBhcmFtIHtGdW5jfSBmdW5jIC0gVGhpcyBmdW5jdGlvbi5cclxuICogQHJldHVybnMge0FycmF5fSAtIE5ldyBhcmd1bWVudHMuXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEBjYWxsYmFjayBBZnRlck1pZGRsZXdhcmVcclxuICogQHBhcmFtIHsqfSByZXR1cm5WYWx1ZSAtIFByZXZpb3VzIHJldHVybiB2YWx1ZS5cclxuICogQHBhcmFtIHtGdW5jfSBmdW5jIC0gVGhpcyBmdW5jdGlvbi5cclxuICogQHJldHVybnMgeyp9IC0gTmV3IHJldHVybiB2YWx1ZS5cclxuICovXHJcblxyXG4vKipcclxuICogQGNsYXNzIEZ1bmNcclxuICogQGV4dGVuZHMgU3VwZXJcclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZnVuYyA9IGZ1bmN0aW9uICgpIHt9XSAtIEZ1bmN0aW9uIHRvIHdyYXAuXHJcbiAqIEByZXR1cm5zIHtGdW5jfSBJbnN0YW5jZSBvZiBGdW5jLlxyXG4gKiBAZGVzY3JpcHRpb24gQSB3cmFwIG9mIGEgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIGNvbnN0IGZ1bmMgPSBuZXcgRnVuYyhNYXRoLm1heCk7XHJcbiAqXHJcbiAqIGZ1bmMoMSwgNCwgLTIsIDUpOyAvLyA1XHJcbiAqL1xyXG5jbGFzcyBGdW5jIGV4dGVuZHMgU3VwZXIge1xyXG4gIGNvbnN0cnVjdG9yKGZ1bmMgPSAoKSA9PiB7fSkge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICBmdW5jdGlvbiBwcm94eSgpIHtcclxuICAgICAgaWYgKCsrcHJveHkuJCQuY2FsbGVkIDwgcHJveHkuJCQuY2FuQmVDYWxsZWQpIHtcclxuICAgICAgICBjb25zdCB7IGJlZm9yZSwgYWZ0ZXIsIHN5bmMsIGNvbnRleHRMb2NrZWQgfSA9IHByb3h5LiQkO1xyXG4gICAgICAgIGxldCB7IGNvbnRleHQsIGFyZ3MgfSA9IHByb3h5LiQkO1xyXG4gICAgICAgIGxldCByZXQ7XHJcblxyXG4gICAgICAgIGNvbnRleHQgPSBjb250ZXh0TG9ja2VkID8gY29udGV4dCA6IGNvbnRleHQgfHwgdGhpcztcclxuICAgICAgICBhcmdzID0gYXJncy5jb25jYXQodG9BcnJheShhcmd1bWVudHMpKTtcclxuXHJcbiAgICAgICAgaWYgKHN5bmMpIHtcclxuICAgICAgICAgIGl0ZXJhdGUoYmVmb3JlLCAobWlkZGxld2FyZSkgPT4ge1xyXG4gICAgICAgICAgICBhcmdzID0gbWlkZGxld2FyZS5jYWxsKGNvbnRleHQsIHRvQXJyYXkoYXJncyksIHByb3h5KTtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIHJldCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgdG9BcnJheShhcmdzKSk7XHJcblxyXG4gICAgICAgICAgaXRlcmF0ZShhZnRlciwgKG1pZGRsZXdhcmUpID0+IHtcclxuICAgICAgICAgICAgcmV0ID0gbWlkZGxld2FyZS5jYWxsKGNvbnRleHQsIHJldCwgcHJveHkpO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGFyZ3MpO1xyXG5cclxuICAgICAgICBpdGVyYXRlKGJlZm9yZSwgKG1pZGRsZXdhcmUpID0+IHtcclxuICAgICAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oKGFyZ3MpID0+IG1pZGRsZXdhcmUuY2FsbChjb250ZXh0LCB0b0FycmF5KGFyZ3MpLCBwcm94eSkpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKChhcmdzKSA9PiBmdW5jLmFwcGx5KGNvbnRleHQsIHRvQXJyYXkoYXJncykpKTtcclxuXHJcbiAgICAgICAgaXRlcmF0ZShhZnRlciwgKG1pZGRsZXdhcmUpID0+IHtcclxuICAgICAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oKHJldCkgPT4gbWlkZGxld2FyZS5jYWxsKGNvbnRleHQsIHJldCwgcHJveHkpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBtZW1iZXIge09iamVjdH0gRnVuYyMkJFxyXG4gICAgICogQHR5cGUge09iamVjdH1cclxuICAgICAqIEBwcm90ZWN0ZWRcclxuICAgICAqIEBwcm9wZXJ0eSB7QXJyYXl9IGFmdGVyIC0gQWZ0ZXIgbWlkZGxld2FyZSBhcnJheS5cclxuICAgICAqIEBwcm9wZXJ0eSB7QXJyYXl9IGFyZ3MgLSBMb2NrZWQgYW5kIGJvdW5kIGFyZ3VtZW50cy5cclxuICAgICAqIEBwcm9wZXJ0eSB7QXJyYXl9IGFyZ3NMb2NrZWQgLSBMb2NrZWQgYXJndW1lbnRzLlxyXG4gICAgICogQHByb3BlcnR5IHtBcnJheX0gYmVmb3JlIC0gQmVmb3JlIG1pZGRsZXdhcmUgYXJyYXkuXHJcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gY2FsbGVkIC0gSG93IG1hbnkgdGltZXMgdGhlIGZ1bmN0aW9uIHdhcyBjYWxsZWQuXHJcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gY2FuQmVDYWxsZWQgLSBIb3cgbWFueSB0aW1lcyB0aGUgZnVuY3Rpb24gY2FuIGJlIGFjdHVhbGx5IGNhbGxlZC5cclxuICAgICAqIEBwcm9wZXJ0eSB7Kn0gY29udGV4dCAtIExvY2tlZCBvciBib3VuZCBjb250ZXh0LlxyXG4gICAgICogQHByb3BlcnR5IHtCb29sZWFufSBjb250ZXh0TG9ja2VkIC0gSXMgY29udGV4dCBsb2NrZWQgb3Igbm90LlxyXG4gICAgICogQHByb3BlcnR5IHtCb29sZWFufSBzeW5jIC0gSXMgZnVuY3Rpb24gc3luY2hyb25vdXMgb3Igbm90LlxyXG4gICAgICogQGRlc2NyaXB0aW9uIENvbmZpZyBwYXJhbWV0ZXJzLlxyXG4gICAgICovXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJveHksICckJCcsIHtcclxuICAgICAgdmFsdWU6IHtcclxuICAgICAgICBhZnRlcjogW10sXHJcbiAgICAgICAgYXJnczogW10sXHJcbiAgICAgICAgYXJnc0xvY2tlZDogW10sXHJcbiAgICAgICAgYmVmb3JlOiBbXSxcclxuICAgICAgICBjYWxsZWQ6IDAsXHJcbiAgICAgICAgY2FuQmVDYWxsZWQ6IEluZmluaXR5LFxyXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXHJcbiAgICAgICAgY29udGV4dExvY2tlZDogZmFsc2UsXHJcbiAgICAgICAgc3luYzogdHJ1ZVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBGdW5jIyRcclxuICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgICAqIEBwdWJsaWNcclxuICAgICAqIEBkZXNjcmlwdGlvbiBPcmlnaW5hbCBmdW5jdGlvbi5cclxuICAgICAqL1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3h5LCAnJCcsIHsgdmFsdWU6IGZ1bmMgfSk7XHJcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YocHJveHksIEZ1bmMucHJvdG90eXBlKTtcclxuXHJcbiAgICByZXR1cm4gcHJveHk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEZ1bmMjYWZ0ZXJcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtBZnRlck1pZGRsZXdhcmV9IG1pZGRsZXdhcmUgLSBBZnRlciBtaWRkbGV3YXJlLlxyXG4gICAqIEBwYXJhbSB7Qm9vbGVhbnwqfSBbYWZ0ZXJBbGwgPSB0cnVlXSAtIEJvb2xlYW4gcGFyYW1ldGVyIHdoZXJlIHRvIHB1dCBtaWRkbGV3YXJlLlxyXG4gICAqIFRydXRoeSBwYXJhbWV0ZXIgc3RhbmRzIGZvciBcInRvIHRoZSBlbmRcIiBhbmQgZmFsc2V5IGZvciBcInRvIHRoZSBiZWdpbm5pbmdcIi5cclxuICAgKiBAcmV0dXJucyB7RnVuY30gUmV0dXJucyB0aGlzLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBBZGRzIGFmdGVyIG1pZGRsZXdhcmUuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIGNvbnN0IGZ1bmMgPSBuZXcgRnVuYygoYSkgPT4gYSArIDEpXHJcbiAgICogICAuYWZ0ZXIoKHJlc3VsdCkgPT4gcmVzdWx0ICogcmVzdWx0KTtcclxuICAgKlxyXG4gICAqIGZ1bmMoNCk7ICAvLyAyNVxyXG4gICAqIGZ1bmMoLTQpOyAvLyA5XHJcbiAgICovXHJcbiAgYWZ0ZXIobWlkZGxld2FyZSwgYWZ0ZXJBbGwgPSB0cnVlKSB7XHJcbiAgICB2YWxpZGF0ZShbbWlkZGxld2FyZV0sIFsnZnVuY3Rpb24nXSwgJ0Z1bmMjYWZ0ZXInKTtcclxuXHJcbiAgICBjb25zdCB7IGFmdGVyIH0gPSB0aGlzLiQkO1xyXG5cclxuICAgIGlmIChhZnRlckFsbCkge1xyXG4gICAgICBhZnRlci5wdXNoKG1pZGRsZXdhcmUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYWZ0ZXIudW5zaGlmdChtaWRkbGV3YXJlKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRnVuYyNhcHBseVxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0geyp9IFtjb250ZXh0XSAtIENvbnRleHQgdG8gY2FsbCB3aXRoLlxyXG4gICAqIEBwYXJhbSB7KEFycmF5fEFyZ3VtZW50cyl9IFthcmdzXSAtIEFyZ3VtZW50cyB0byBjYWxsIHdpdGguXHJcbiAgICogQHJldHVybnMgeyp9IFJldHVybiBvZiBmdW5jdGlvbiBjYWxsLlxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRnVuY3Rpb24vYXBwbHlcclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3JcclxuICAgKiBbRnVuY3Rpb24jYXBwbHlde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0Z1bmN0aW9uL2FwcGx5fS5cclxuICAgKi9cclxuICBhcHBseShjb250ZXh0LCBhcmdzKSB7XHJcbiAgICByZXR1cm4gKCgpID0+IHt9KS5hcHBseS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBGdW5jI2FzeW5jXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7Qm9vbGVhbnwqfSBbY29uZGl0aW9uXSAtIElmIHRoZSBmdW5jdGlvbiBzaG91bGQgYmUgc3luY2hyb25vdXMgb3Igbm90LlxyXG4gICAqIEByZXR1cm5zIHtGdW5jfSBSZXR1cm5zIHRoaXMuXHJcbiAgICogQGRlc2NyaXB0aW9uIElmIHRoZSBmdW5jdGlvbiBzaG91bGQgYmUgc3luY2hyb25vdXMgb3Igbm90LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBjb25zdCBmdW5jID0gbmV3IEZ1bmMoKGEpID0+IGEgKyAxKS5hc3luYygpO1xyXG4gICAqXHJcbiAgICogZnVuYyg0KS50aGVuKChyZXN1bHQpID0+IHtcclxuICAgKiAgIGNvbnNvbGUubG9nKHJlc3VsdCk7IC8vIDVcclxuICAgKiB9KTtcclxuICAgKi9cclxuICBhc3luYyhjb25kaXRpb24gPSB0cnVlKSB7XHJcbiAgICB0aGlzLiQkLnN5bmMgPSAhY29uZGl0aW9uO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBGdW5jI2JlZm9yZVxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge0JlZm9yZU1pZGRsZXdhcmV9IG1pZGRsZXdhcmUgLSBCZWZvcmUgbWlkZGxld2FyZS5cclxuICAgKiBAcGFyYW0ge0Jvb2xlYW58Kn0gW2JlZm9yZUFsbCA9IHRydWVdIC0gQm9vbGVhbiBwYXJhbWV0ZXIgd2hlcmUgdG8gcHV0IG1pZGRsZXdhcmUuXHJcbiAgICogVHJ1dGh5IHBhcmFtZXRlciBzdGFuZHMgZm9yIFwidG8gdGhlIGJlZ2lubmluZ1wiIGFuZCBmYWxzZXkgZm9yIFwidG8gdGhlIGVuZFwiLlxyXG4gICAqIEByZXR1cm5zIHtGdW5jfSBSZXR1cm5zIHRoaXMuXHJcbiAgICogQGRlc2NyaXB0aW9uIEFkZHMgYmVmb3JlIG1pZGRsZXdhcmUuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIGNvbnN0IGZ1bmMgPSBuZXcgRnVuYygoYSkgPT4gYSArIDEpXHJcbiAgICogICAuYmVmb3JlKChbYXJnXSkgPT4gW2FyZyAqIGFyZ10pO1xyXG4gICAqXHJcbiAgICogZnVuYyg0KTsgLy8gMTdcclxuICAgKiBmdW5jKDMpOyAvLyAxMFxyXG4gICAqL1xyXG4gIGJlZm9yZShtaWRkbGV3YXJlLCBiZWZvcmVBbGwgPSB0cnVlKSB7XHJcbiAgICB2YWxpZGF0ZShbbWlkZGxld2FyZV0sIFsnZnVuY3Rpb24nXSwgJ0Z1bmMjYmVmb3JlJyk7XHJcblxyXG4gICAgY29uc3QgeyBiZWZvcmUgfSA9IHRoaXMuJCQ7XHJcblxyXG4gICAgaWYgKGJlZm9yZUFsbCkge1xyXG4gICAgICBiZWZvcmUudW5zaGlmdChtaWRkbGV3YXJlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGJlZm9yZS5wdXNoKG1pZGRsZXdhcmUpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBGdW5jI2JpbmRcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHsqfSBjb250ZXh0IC0gQ29udGV4dCB0byBiaW5kLlxyXG4gICAqIEBwYXJhbSB7Li4uKEFycmF5fEFyZ3VtZW50c3wqKX0gYXJncyAtIEFyZ3VtZW50cyB0byBiaW5kLlxyXG4gICAqIEByZXR1cm5zIHtGdW5jfSBSZXR1cm5zIHRoaXMuXHJcbiAgICogQGRlc2NyaXB0aW9uIENvbXBvc2l0aW9uIG9mIHtAbGluayBGdW5jI2JpbmRDb250ZXh0fSBhbmQge0BsaW5rIEZ1bmMjYmluZEFyZ3N9LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBjb25zdCBmdW5jID0gbmV3IEZ1bmMoZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgKiAgIHJldHVybiB0aGlzLmEgKyBhICsgYjtcclxuICAgKiB9KS5iaW5kKHsgYTogMiB9LCAxKTtcclxuICAgKlxyXG4gICAqIGZ1bmMoMSk7IC8vIDRcclxuICAgKiBmdW5jKDMpOyAvLyA2XHJcbiAgICovXHJcbiAgYmluZChjb250ZXh0LCAuLi5hcmdzKSB7XHJcbiAgICByZXR1cm4gdGhpc1xyXG4gICAgICAuYmluZENvbnRleHQoY29udGV4dClcclxuICAgICAgLmJpbmRBcmdzKGFyZ3MpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBGdW5jI2JpbmRBcmdzXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7KEFycmF5fEFyZ3VtZW50cyl9IGFyZ3MgLSBBcmd1bWVudHMgdG8gYmluZC5cclxuICAgKiBAcmV0dXJucyB7RnVuY30gUmV0dXJucyB0aGlzLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBCaW5kcyBhcmd1bWVudHMgaW4gYWRkaXRpb24gdG8gYWxyZWFkeSBsb2NrZWQgYW5kIGJvdW5kIG9uZXMuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIGNvbnN0IGZ1bmMgPSBuZXcgRnVuYygoLi4uYXJncykgPT4ge1xyXG4gICAqICAgbGV0IHN1bSA9IDA7XHJcbiAgICpcclxuICAgKiAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xyXG4gICAqICAgICBzdW0gKz0gYXJnc1tpXTtcclxuICAgKiAgIH1cclxuICAgKlxyXG4gICAqICAgcmV0dXJuIHN1bTtcclxuICAgKiB9KTtcclxuICAgKlxyXG4gICAqIGZ1bmMoMSwgMiwgMyk7IC8vIDZcclxuICAgKlxyXG4gICAqIGZ1bmMuYmluZEFyZ3MoWzRdKTtcclxuICAgKlxyXG4gICAqIGZ1bmMoMSwgMiwgMyk7IC8vIDEwXHJcbiAgICpcclxuICAgKiBmdW5jLmJpbmRBcmdzKFs1XSk7XHJcbiAgICpcclxuICAgKiBmdW5jKDEsIDIsIDMpOyAvLyAxNVxyXG4gICAqL1xyXG4gIGJpbmRBcmdzKGFyZ3MpIHtcclxuICAgIGNvbnN0IGZ1bmMgPSB0aGlzLiQkO1xyXG5cclxuICAgIGZ1bmMuYXJncyA9IGZ1bmMuYXJncy5jb25jYXQodG9BcnJheShhcmdzKSk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEZ1bmMjYmluZENvbnRleHRcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHsqfSBjb250ZXh0IC0gQ29udGV4dCB0byBiaW5kLlxyXG4gICAqIEByZXR1cm5zIHtGdW5jfSBSZXR1cm5zIHRoaXMuXHJcbiAgICogQGRlc2NyaXB0aW9uIEJpbmQgbmV3IGNvbnRleHQgaWYgaXQncyBub3QgYWxyZWFkeSBsb2NrZWQuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIGNvbnN0IGZ1bmMgPSBuZXcgRnVuYyhmdW5jdGlvbiAoKSB7XHJcbiAgICogICByZXR1cm4gdGhpcy5hO1xyXG4gICAqIH0pLmJpbmRDb250ZXh0KHsgYTogMSB9KTtcclxuICAgKlxyXG4gICAqIGZ1bmMoKTsgLy8gMVxyXG4gICAqXHJcbiAgICogZnVuYy5iaW5kQ29udGV4dCh7IGE6IDIgfSk7XHJcbiAgICpcclxuICAgKiBmdW5jKCk7IC8vIDJcclxuICAgKi9cclxuICBiaW5kQ29udGV4dChjb250ZXh0KSB7XHJcbiAgICBjb25zdCBmdW5jID0gdGhpcy4kJDtcclxuXHJcbiAgICBpZiAoIWZ1bmMuY29udGV4dExvY2tlZCkge1xyXG4gICAgICBmdW5jLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBGdW5jI2NhbGxcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHsqfSBbY29udGV4dF0gLSBDb250ZXh0IHRvIGNhbGwgd2l0aC5cclxuICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSAtIEFyZ3VtZW50cyB0byBjYWxsIHdpdGguXHJcbiAgICogQHJldHVybnMgeyp9IFJldHVybiBvZiBmdW5jdGlvbiBjYWxsLlxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRnVuY3Rpb24vY2FsbFxyXG4gICAqIEBkZXNjcmlwdGlvbiBTeW5vbnltIGZvclxyXG4gICAqIFtGdW5jdGlvbiNjYWxsXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9GdW5jdGlvbi9jYWxsfS5cclxuICAgKi9cclxuICBjYWxsKGNvbnRleHQsIC4uLmFyZ3MpIHtcclxuICAgIHJldHVybiAoKCkgPT4ge30pLmNhbGwuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge051bWJlcn0gRnVuYyNjYWxsZWRcclxuICAgKiBAcHVibGljXHJcbiAgICogQHJlYWRvbmx5XHJcbiAgICogQGRlc2NyaXB0aW9uIFJldHVybnMgaG93IG1hbnkgdGltZXMgdGhlIGZ1bmN0aW9uIHdhcyBjYWxsZWQuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIGNvbnN0IGZ1bmMgPSBuZXcgRnVuYygoYSkgPT4gYSArIDEpO1xyXG4gICAqXHJcbiAgICogZnVuYygpO1xyXG4gICAqIGZ1bmMoKTtcclxuICAgKlxyXG4gICAqIGZ1bmMuY2FsbGVkIC8vIDJcclxuICAgKi9cclxuICBnZXQgY2FsbGVkKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuJCQuY2FsbGVkO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBGdW5jI2NhbkJlQ2FsbGVkXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB0aW1lcyAtIE51bWJlciBvZiBtYXhpbXVtIHRpbWVzIHRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgKG1pZGRsZXdhcmVzIGFyZSBhbHNvIHRha2VuIGZvciBhIGNvdW50KS5cclxuICAgKiBAcmV0dXJucyB7RnVuY30gUmV0dXJucyB0aGlzLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBNZXRob2QgZm9yIGxpbWl0aW5nIGNhbGwgdGltZXMgb2YgZnVuY3Rpb24uXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIGNvbnN0IGZ1bmMgPSBuZXcgRnVuYygoYSkgPT4gYSArIDEpXHJcbiAgICogICAuY2FuQmVDYWxsZWQoMSk7XHJcbiAgICpcclxuICAgKiBmdW5jKDEpOyAvLyAyXHJcbiAgICogZnVuYygxKTsgLy8gdW5kZWZpbmVkXHJcbiAgICovXHJcbiAgY2FuQmVDYWxsZWQodGltZXMpIHtcclxuICAgIHRoaXMuJCQuY2FuQmVDYWxsZWQgPSB0aW1lcztcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRnVuYyNsaW1pdEFyZ3NUb1xyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge051bWJlcn0gbnVtYmVyIC0gTnVtYmVyIG9mIGFyZ3VtZW50cyB0byBsaW1pdCB0by5cclxuICAgKiBAcmV0dXJucyB7RnVuY30gUmV0dXJucyB0aGlzLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBCdWlsdC1pbiBiZWZvcmUgbWlkZGxld2FyZSBmb3IgbGltaXRpbmcgbnVtYmVyIG9mIGFyZ3VtZW50c1xyXG4gICAqIHRoYXQgaXMgcHV0IHRvIHRoZSBlbmQgb2YgYmVmb3JlIG1pZGRsZXdhcmVzLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBjb25zdCBmdW5jID0gbmV3IEZ1bmMoKGEsIGIpID0+IFthLCBiXSk7XHJcbiAgICpcclxuICAgKiBmdW5jKDEsIDIpOyAvLyBbMSwgMl1cclxuICAgKlxyXG4gICAqIGZ1bmMubGltaXRBcmdzVG8oMSk7XHJcbiAgICpcclxuICAgKiBmdW5jKDEsIDIpOyAvLyBbMSwgdW5kZWZpbmVkXVxyXG4gICAqL1xyXG4gIGxpbWl0QXJnc1RvKG51bWJlcikge1xyXG4gICAgcmV0dXJuIHRoaXMuYmVmb3JlKChhcmdzKSA9PiBhcmdzLnNsaWNlKDAsIG51bWJlciksIGZhbHNlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRnVuYyNsb2NrXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7Kn0gY29udGV4dCAtIENvbnRleHQgdG8gbG9jay5cclxuICAgKiBAcGFyYW0geyhBcnJheXxBcmd1bWVudHN8Kil9IGFyZ3MgLSBBcmd1bWVudHMgdG8gbG9jay5cclxuICAgKiBAcmV0dXJucyB7RnVuY30gUmV0dXJucyB0aGlzLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBDb21wb3NpdGlvbiBvZiB7QGxpbmsgRnVuYyNsb2NrQ29udGV4dH0gYW5kIHtAbGluayBGdW5jI2xvY2tBcmdzfS5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogY29uc3QgZnVuYyA9IG5ldyBGdW5jKGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICogICByZXR1cm4gdGhpcy5hICsgYSArIGI7XHJcbiAgICogfSkubG9jayh7IGE6IDIgfSwgWzFdKTtcclxuICAgKlxyXG4gICAqIGZ1bmMoMSk7IC8vIDRcclxuICAgKiBmdW5jKDMpOyAvLyA2XHJcbiAgICovXHJcbiAgbG9jayhjb250ZXh0LCBhcmdzKSB7XHJcbiAgICByZXR1cm4gdGhpc1xyXG4gICAgICAubG9ja0NvbnRleHQoY29udGV4dClcclxuICAgICAgLmxvY2tBcmdzKGFyZ3MpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBGdW5jI2xvY2tBcmdzXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7KEFycmF5fEFyZ3VtZW50c3wqKX0gYXJncyAtIEFyZ3VtZW50cyB0byBsb2NrLlxyXG4gICAqIEByZXR1cm5zIHtGdW5jfSBSZXR1cm5zIHRoaXMuXHJcbiAgICogQGRlc2NyaXB0aW9uIEVyYXNlcyBib3VuZCBhcmd1bWVudHMgYW5kIGFkZHMgbmV3IGFyZ3VtZW50cyB0byBhbHJlYWR5IGxvY2tlZCBvbmVzLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBjb25zdCBmdW5jID0gbmV3IEZ1bmMoKC4uLmFyZ3MpID0+IHtcclxuICAgKiAgIGxldCBzdW0gPSAwO1xyXG4gICAqXHJcbiAgICogICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcclxuICAgKiAgICAgc3VtICs9IGFyZ3NbaV07XHJcbiAgICogICB9XHJcbiAgICpcclxuICAgKiAgIHJldHVybiBzdW07XHJcbiAgICogfSk7XHJcbiAgICpcclxuICAgKiBmdW5jKDEsIDIsIDMpOyAvLyA2XHJcbiAgICpcclxuICAgKiBmdW5jLmxvY2tBcmdzKFs0XSk7XHJcbiAgICpcclxuICAgKiBmdW5jKDEsIDIsIDMpOyAvLyAxMFxyXG4gICAqXHJcbiAgICogZnVuYy5iaW5kQXJncyhbNiwgN10pO1xyXG4gICAqIGZ1bmMubG9ja0FyZ3MoWzVdKTtcclxuICAgKlxyXG4gICAqIGZ1bmMoMSwgMiwgMyk7IC8vIDE1XHJcbiAgICovXHJcbiAgbG9ja0FyZ3MoYXJncykge1xyXG4gICAgY29uc3QgZnVuYyA9IHRoaXMuJCQ7XHJcblxyXG4gICAgZnVuYy5hcmdzID0gZnVuYy5hcmdzTG9ja2VkID0gZnVuYy5hcmdzTG9ja2VkLmNvbmNhdCh0b0FycmF5KGFyZ3MpKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRnVuYyNsb2NrQ29udGV4dFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0geyp9IGNvbnRleHQgLSBDb250ZXh0IHRvIGxvY2suXHJcbiAgICogQHJldHVybnMge0Z1bmN9IFJldHVybnMgdGhpcy5cclxuICAgKiBAZGVzY3JpcHRpb24gTG9ja3MgY29udGV4dCBpZiBpdCdzIG5vdCBhbHJlYWR5IGxvY2tlZC5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogY29uc3QgZnVuYyA9IG5ldyBGdW5jKGZ1bmN0aW9uICgpIHtcclxuICAgKiAgIHJldHVybiB0aGlzLmE7XHJcbiAgICogfSkubG9ja0NvbnRleHQoeyBhOiAxIH0pO1xyXG4gICAqXHJcbiAgICogZnVuYygpOyAvLyAxXHJcbiAgICpcclxuICAgKiBmdW5jLmxvY2tDb250ZXh0KHsgYTogMiB9KTtcclxuICAgKlxyXG4gICAqIGZ1bmMoKTsgLy8gMVxyXG4gICAqL1xyXG4gIGxvY2tDb250ZXh0KGNvbnRleHQpIHtcclxuICAgIGNvbnN0IGZ1bmMgPSB0aGlzLiQkO1xyXG5cclxuICAgIGlmICghZnVuYy5jb250ZXh0TG9ja2VkKSB7XHJcbiAgICAgIGZ1bmMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICAgIGZ1bmMuY29udGV4dExvY2tlZCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEZ1bmMjdGltaW5nXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtYXJrIC0gQXJndW1lbnQgdGhhdCBpcyBwYXNzZWQgdG8gY29uc29sZS50aW1lKCkgYW5kIGNvbnNvbGUudGltZUVuZCgpLlxyXG4gICAqIEJ5IGRlZmF1bHQgbmFtZSBvZiB0aGUgb3JpZ2luYWwgZnVuY3Rpb24sIG9yIGlmIGl0J3Mgbm90IHByZXNlbnQsICdhbm9ueW1vdXMnIGlzIHVzZWQuXHJcbiAgICogQHJldHVybnMge0Z1bmN9IFJldHVybnMgdGhpcy5cclxuICAgKiBAZGVzY3JpcHRpb24gQnVpbHQtaW4gYmVmb3JlIGFuZCBhZnRlciBtaWRkbGV3YXJlcyBmb3Igbm90aW5nIGNhbGxpbmcgdGltZS5cclxuICAgKiBJbiBjYXNlIG9mIGFzeW5jaHJvbm91cyBmdW5jdGlvbnMgaXQgbm90ZXMgdGltZSBiZXR3ZWVuIGNhbGxpbmcgZnVuY3Rpb24gYW5kIHJlc29sdmluZyBvciByZWplY3RpbmcgdGhlIHJlc3VsdC5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogY29uc3QgZnVuYyA9IG5ldyBGdW5jKChhKSA9PiBhICsgMSlcclxuICAgKiAgIC50aW1pbmcoJ3BsdXMgMScpO1xyXG4gICAqXHJcbiAgICogZnVuYygyKTsgLy8gcGx1cyAxOiAwLjAxMG1zXHJcbiAgICpcclxuICAgKiBjb25zdCBhc3luYyA9IG5ldyBGdW5jKCgpID0+IG5ldyBQcm9taXNlKCgpID0+IHtcclxuICAgKiAgICAgc2V0VGltZW91dChyZXNvbHZlLCAxMDAwKTtcclxuICAgKiAgIH0pKVxyXG4gICAqICAgLmFzeW5jKClcclxuICAgKiAgIC50aW1pbmcoKTtcclxuICAgKlxyXG4gICAqIGFzeW5jKCk7XHJcbiAgICogLy8gQWZ0ZXIgMSBzZWNvbmQuLi5cclxuICAgKiAvLyBhbm9ueW1vdXM6IDEwMDAuMDEwbXNcclxuICAgKi9cclxuICB0aW1pbmcobWFyaykge1xyXG4gICAgbWFyayA9IGFyZ3VtZW50cy5sZW5ndGggPyBTdHJpbmcobWFyaykgOiB0aGlzLiQubmFtZSB8fCAnYW5vbnltb3VzJztcclxuXHJcbiAgICB0aGlzLmJlZm9yZSgoYXJncykgPT4ge1xyXG4gICAgICBjb25zb2xlLnRpbWUobWFyayk7XHJcblxyXG4gICAgICByZXR1cm4gYXJncztcclxuICAgIH0sIGZhbHNlKTtcclxuXHJcbiAgICB0aGlzLmFmdGVyKChyZXQpID0+IHtcclxuICAgICAgY29uc29sZS50aW1lRW5kKG1hcmspO1xyXG5cclxuICAgICAgcmV0dXJuIHJldDtcclxuICAgIH0sIGZhbHNlKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIHRvU3RyaW5nKCkge1xyXG4gICAgcmV0dXJuICgoKSA9PiB7fSkudG9TdHJpbmcuY2FsbCh0aGlzLiQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBGdW5jI3VuYmluZFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcmV0dXJucyB7RnVuY30gUmV0dXJucyB0aGlzLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBDb21wb3NpdGlvbiBvZiB7QGxpbmsgRnVuYyN1bmJpbmRDb250ZXh0fSBhbmQge0BsaW5rIEZ1bmMjdW5iaW5kQXJnc30uXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIGNvbnN0IGZ1bmMgPSBuZXcgRnVuYyhmdW5jdGlvbiAoYSkge1xyXG4gICAqICAgcmV0dXJuIHRoaXMuZm9vICsgJyAmICcgKyAgYTtcclxuICAgKiB9KS5iaW5kKHsgZm9vOiAyIH0sIDEpO1xyXG4gICAqXHJcbiAgICogZnVuYygpOyAvLyAnMiAmIDEnXHJcbiAgICpcclxuICAgKiBmdW5jLnVuYmluZCgpO1xyXG4gICAqXHJcbiAgICogZnVuYygpOyAvLyAndW5kZWZpbmVkICYgdW5kZWZpbmVkJ1xyXG4gICAqL1xyXG4gIHVuYmluZCgpIHtcclxuICAgIHJldHVybiB0aGlzXHJcbiAgICAgIC51bmJpbmRDb250ZXh0KClcclxuICAgICAgLnVuYmluZEFyZ3MoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRnVuYyN1bmJpbmRBcmdzXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZXR1cm5zIHtGdW5jfSBSZXR1cm5zIHRoaXMuXHJcbiAgICogQGRlc2NyaXB0aW9uIEVyYXNlcyBhbGwgYm91bmQgYXJndW1lbnRzLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBjb25zdCBmdW5jID0gbmV3IEZ1bmMoKC4uLmFyZ3MpID0+IHtcclxuICAgKiAgIGxldCBzdW0gPSAwO1xyXG4gICAqXHJcbiAgICogICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcclxuICAgKiAgICAgc3VtICs9IGFyZ3NbaV07XHJcbiAgICogICB9XHJcbiAgICpcclxuICAgKiAgIHJldHVybiBzdW07XHJcbiAgICogfSkuYmluZEFyZ3MoWzQsIDVdKTtcclxuICAgKlxyXG4gICAqIGZ1bmMoMSwgMiwgMyk7IC8vIDE1XHJcbiAgICpcclxuICAgKiBmdW5jLnVuYmluZEFyZ3MoKTtcclxuICAgKlxyXG4gICAqIGZ1bmMoMSwgMiwgMyk7IC8vIDZcclxuICAgKi9cclxuICB1bmJpbmRBcmdzKCkge1xyXG4gICAgY29uc3QgZnVuYyA9IHRoaXMuJCQ7XHJcblxyXG4gICAgZnVuYy5hcmdzID0gZnVuYy5hcmdzTG9ja2VkO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBGdW5jI3VuYmluZENvbnRleHRcclxuICAgKiBAcHVibGljXHJcbiAgICogQHJldHVybnMge0Z1bmN9IFJldHVybnMgdGhpcy5cclxuICAgKiBAZGVzY3JpcHRpb24gRXJhc2VzIGNvbnRleHQgaWYgaXQncyBub3QgbG9ja2VkLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBjb25zdCBmdW5jID0gbmV3IEZ1bmMoZnVuY3Rpb24gKCkge1xyXG4gICAqICAgcmV0dXJuIHRoaXMuZm9vO1xyXG4gICAqIH0pLmJpbmRDb250ZXh0KHsgZm9vOiAxIH0pO1xyXG4gICAqXHJcbiAgICogZnVuYygpOyAvLyAxXHJcbiAgICpcclxuICAgKiBmdW5jLnVuYmluZEFyZ3MoKTtcclxuICAgKlxyXG4gICAqIGZ1bmMoKTsgLy8gdW5kZWZpbmVkXHJcbiAgICovXHJcbiAgdW5iaW5kQ29udGV4dCgpIHtcclxuICAgIGNvbnN0IGZ1bmMgPSB0aGlzLiQkO1xyXG5cclxuICAgIGlmICghZnVuYy5jb250ZXh0TG9ja2VkKSB7XHJcbiAgICAgIGZ1bmMuY29udGV4dCA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG59XHJcblxyXG5kZWZpbmVQcm9wZXJ0aWVzKEZ1bmMucHJvdG90eXBlLCB7XHJcbiAgW1N5bWJvbC50b1N0cmluZ1RhZ106ICdGdW5jJ1xyXG59KTtcclxuXHJcbmNvbnN0cnVjdG9yc1sxXS5wdXNoKHtcclxuICBjaGVjazogaXNGdW5jdGlvbixcclxuICBjbHM6IEZ1bmNcclxufSk7XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uIG1ldGhvZFxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXRob2QgLSBNZXRob2QgdG8gY2FsbC5cclxuICogQHBhcmFtIHsoQXJyYXl8QXJndW1lbnRzfCopfSBhcmdzIC0gQXJndW1lbnRzIHRvIGNhbGwgdGhlIG1ldGhvZCB3aXRoLlxyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEZ1bmN0aW9uIHRoYXQgY2FsbHMgc3RhdGVkIG1ldGhvZCB3aXRoIGdpdmVuIGFyZ3VtZW50cy5cclxuICogQGRlc2NyaXB0aW9uIEZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgZnVuY3Rpb25cclxuICogdGhhdCBjYWxscyBzdGF0ZWQgbWV0aG9kIG9mIGl0cyBmaXJzdCBhcmd1bWVudCB3aXRoIGdpdmVuIGFyZ3VtZW50cy5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogWzEuMjM0NSwgMi43ODksIDMuMTRdLm1hcChtZXRob2QoJ3RvRml4ZWQnLCBbMl0pKTsgLy8gWycxLjIzJywgJzIuNzknLCAnMy4xNCddXHJcbiAqL1xyXG5mdW5jdGlvbiBtZXRob2QobWV0aG9kLCBhcmdzID0gW10pIHtcclxuICByZXR1cm4gKHgpID0+IHhbbWV0aG9kXS5hcHBseSh4LCB0b0FycmF5KGFyZ3MpKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvbiBub29wXHJcbiAqIEBwdWJsaWNcclxuICogQHJldHVybnMge3ZvaWR9XHJcbiAqIEBkZXNjcmlwdGlvbiBFbXB0eSBmdW5jdGlvbi5cclxuICovXHJcbmZ1bmN0aW9uIG5vb3AoKSB7fVxyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvbiBwcm9wXHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIHtTdHJpbmd9IHByb3AgLSBQcm9wZXJ0eSB0byByZXR1cm4uXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gRnVuY3Rpb24gdGhhdCByZXR1cm5zIGdpdmVuIHByb3BlcnR5IG9mIGl0cyBmaXJzdCBhcmd1bWVudC5cclxuICogQGRlc2NyaXB0aW9uIEZ1bmN0aW9uIHRoYXQgcmV0dXJuIHRoZSBmdW5jdGlvbiB0aGF0IHJldHVybnMgZ2l2ZW4gcHJvcGVydHkgb2YgaXRzIGZpcnN0IGFyZ3VtZW50LlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBbJ2ZvbycsICcxMicsICc3ODkwJ10ubWFwKHByb3AoJ2xlbmd0aCcpKTsgLy8gWzMsIDIsIDRdXHJcbiAqL1xyXG5mdW5jdGlvbiBwcm9wKHByb3ApIHtcclxuICByZXR1cm4gKHsgW3Byb3BdOiB2YWx1ZSB9KSA9PiB2YWx1ZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvbiBzZWxmXHJcbiAqIEBwdWJsaWNcclxuICogQHJldHVybnMgeyp9IEZpcnN0IGFyZ3VtZW50IGl0c2VsZi5cclxuICogQGRlc2NyaXB0aW9uIEZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIFsxLCAyXS5tYXAoc2VsZik7ICAgICAgICAgICAgICAgICAgICAgLy8gWzEsIDJdXHJcbiAqIFsxLCAzLCBOYU4sIDAsIDcsIG51bGxdLmZpbHRlcihzZWxmKTsgLy8gWzEsIDMsIDddXHJcbiAqL1xyXG5mdW5jdGlvbiBzZWxmKCkge1xyXG4gIHJldHVybiBhcmd1bWVudHNbMF07XHJcbn1cclxuXHJcbmV4cG9ydCB7IEZ1bmMsIG1ldGhvZCwgbm9vcCwgcHJvcCwgc2VsZiB9O1xyXG4iLCIvKipcclxuICogQG1vZHVsZSBOdW1cclxuICogQHByaXZhdGVcclxuICogQG1peGluXHJcbiAqIEBkZXNjcmlwdGlvbiBFeHBvcnRzIE51bSBjbGFzcy5cclxuICovXHJcblxyXG5pbXBvcnQgeyBTdXBlciB9IGZyb20gJy4vU3VwZXInO1xyXG5pbXBvcnQgeyBGdW5jIH0gZnJvbSAnLi9GdW5jJztcclxuaW1wb3J0IHsgUHJvbWlzZSB9IGZyb20gJy4vUHJvbWlzZSc7XHJcbmltcG9ydCB7IGNvbnN0cnVjdG9ycyB9IGZyb20gJy4vY29uc3RhbnRzJztcclxuaW1wb3J0IHtcclxuICBpc051bWJlciwgaXNGaW5pdGUsIHRvQXJyYXksXHJcbiAgZGVmaW5lUHJvcGVydGllcywgdmFsaWRhdGUsIFN5bWJvbFxyXG59IGZyb20gJy4vaGVscGVycyc7XHJcblxyXG5jb25zdCB0b1JhZGlhbiA9IE1hdGguUEkgLyAxODA7XHJcbmNvbnN0IHRvRGVncmVlID0gMTgwIC8gTWF0aC5QSTtcclxuY29uc3QgbG4yID0gTWF0aC5MTjI7XHJcbmNvbnN0IGxuMTAgPSBNYXRoLkxOMTA7XHJcblxyXG4vKipcclxuICogQGNsYXNzIE51bVxyXG4gKiBAZXh0ZW5kcyBTdXBlclxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbbnVtYmVyID0gMF0gLSBBIG51bWJlciB0byB3cmFwLlxyXG4gKiBAcmV0dXJucyB7TnVtfSBJbnN0YW5jZSBvZiBOdW0uXHJcbiAqIEBkZXNjcmlwdGlvbiBXcmFwIG9mIGEgbnVtYmVyLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBjb25zdCBudW0gPSBuZXcgTnVtKDEpO1xyXG4gKi9cclxuY2xhc3MgTnVtIGV4dGVuZHMgU3VwZXIge1xyXG4gIGNvbnN0cnVjdG9yKG51bWJlciA9IDApIHtcclxuICAgIHN1cGVyKCtudW1iZXIpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQG1lbWJlciBOdW0jJFxyXG4gICAgICogQHR5cGUge051bWJlcn1cclxuICAgICAqIEBwdWJsaWNcclxuICAgICAqIEBkZXNjcmlwdGlvbiBPcmlnaW5hbCBudW1iZXIuXHJcbiAgICAgKi9cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIgTnVtI2Fic1xyXG4gICAqIEB0eXBlIHtOdW1iZXJ9XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZWFkb25seVxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aC9hYnNcclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3JcclxuICAgKiBbTWF0aC5hYnNde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL01hdGgvYWJzfS5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogbmV3IE51bSgxKS5hYnM7ICAvLyAxXHJcbiAgICogbmV3IE51bSgtMSkuYWJzOyAvLyAxXHJcbiAgICovXHJcbiAgZ2V0IGFicygpIHtcclxuICAgIHJldHVybiBNYXRoLmFicyh0aGlzLiQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBOdW0jYWNvc1xyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge0Jvb2xlYW58Kn0gW3RvRGVncmVlcyA9IGZhbHNlXSBJZiBpdCBpcyB0cnV0aHkgdGhlIHJldHVybiB2YWx1ZSBpcyB0cmFuc2Zvcm1lZCBpbnRvIGRlZ3JlZXMuXHJcbiAgICogQHJldHVybnMge051bWJlcn0gQXJjY29zaW5lIG9mIHRoZSBudW1iZXIuXHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9NYXRoL2Fjb3NcclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3JcclxuICAgKiBbTWF0aC5hY29zXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9NYXRoL2Fjb3N9LlxyXG4gICAqL1xyXG4gIGFjb3ModG9EZWdyZWVzKSB7XHJcbiAgICByZXR1cm4gKHRvRGVncmVlcyA/IHRvRGVncmVlIDogMSkgKiBNYXRoLmFjb3ModGhpcy4kKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIgTnVtI2Fjb3NoXHJcbiAgICogQHR5cGUge051bWJlcn1cclxuICAgKiBAcHVibGljXHJcbiAgICogQHJlYWRvbmx5XHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9NYXRoL2Fjb3NoXHJcbiAgICogQGRlc2NyaXB0aW9uIFN5bm9ueW0gZm9yXHJcbiAgICogW01hdGguYWNvc2hde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL01hdGgvYWNvc2h9LlxyXG4gICAqL1xyXG4gIGdldCBhY29zaCgpIHtcclxuICAgIGNvbnN0IG51bWJlciA9IHRoaXMuJDtcclxuXHJcbiAgICByZXR1cm4gTWF0aC5sb2cobnVtYmVyICsgTWF0aC5zcXJ0KG51bWJlciAqIG51bWJlciAtIDEpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIgTnVtI2FzaW5oXHJcbiAgICogQHR5cGUge051bWJlcn1cclxuICAgKiBAcHVibGljXHJcbiAgICogQHJlYWRvbmx5XHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9NYXRoL2FzaW5oXHJcbiAgICogQGRlc2NyaXB0aW9uIFN5bm9ueW0gZm9yXHJcbiAgICogW01hdGguYXNpbmhde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL01hdGgvYXNpbmh9LlxyXG4gICAqL1xyXG4gIGdldCBhc2luaCgpIHtcclxuICAgIGNvbnN0IG51bWJlciA9IHRoaXMuJDtcclxuXHJcbiAgICByZXR1cm4gTWF0aC5sb2cobnVtYmVyICsgTWF0aC5zcXJ0KG51bWJlciAqIG51bWJlciArIDEpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgTnVtI2FzaW5cclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtCb29sZWFufCp9IFt0b0RlZ3JlZXMgPSBmYWxzZV0gSWYgaXQgaXMgdHJ1dGh5IHRoZSByZXR1cm4gdmFsdWUgaXMgdHJhbnNmb3JtZWQgaW50byBkZWdyZWVzLlxyXG4gICAqIEByZXR1cm5zIHtOdW1iZXJ9IEFyY3NpbmUgb2YgdGhlIG51bWJlci5cclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL01hdGgvYXNpblxyXG4gICAqIEBkZXNjcmlwdGlvbiBTeW5vbnltIGZvclxyXG4gICAqIFtNYXRoLmFzaW5de0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL01hdGgvYXNpbn0uXHJcbiAgICovXHJcbiAgYXNpbih0b0RlZ3JlZXMpIHtcclxuICAgIHJldHVybiAodG9EZWdyZWVzID8gdG9EZWdyZWUgOiAxKSAqIE1hdGguYXNpbih0aGlzLiQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBOdW0jYXRhblxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge0Jvb2xlYW58Kn0gW3RvRGVncmVlcyA9IGZhbHNlXSBJZiBpdCBpcyB0cnV0aHkgdGhlIHJldHVybiB2YWx1ZSBpcyB0cmFuc2Zvcm1lZCBpbnRvIGRlZ3JlZXMuXHJcbiAgICogQHJldHVybnMge051bWJlcn0gQXJjc2luZSBvZiB0aGUgbnVtYmVyLlxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aC9hdGFuXHJcbiAgICogQGRlc2NyaXB0aW9uIFN5bm9ueW0gZm9yXHJcbiAgICogW01hdGguYXRhbl17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aC9hdGFufS5cclxuICAgKi9cclxuICBhdGFuKHRvRGVncmVlcykge1xyXG4gICAgcmV0dXJuICh0b0RlZ3JlZXMgPyB0b0RlZ3JlZSA6IDEpICogTWF0aC5hdGFuKHRoaXMuJCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIE51bSNhdGFuaFxyXG4gICAqIEB0eXBlIHtOdW1iZXJ9XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZWFkb25seVxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aC9hdGFuaFxyXG4gICAqIEBkZXNjcmlwdGlvbiBTeW5vbnltIGZvclxyXG4gICAqIFtNYXRoLmF0YW5oXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9NYXRoL2F0YW5ofS5cclxuICAgKi9cclxuICBnZXQgYXRhbmgoKSB7XHJcbiAgICBjb25zdCBudW1iZXIgPSB0aGlzLiQ7XHJcblxyXG4gICAgcmV0dXJuIE1hdGgubG9nKCgxICsgbnVtYmVyKSAvICgxIC0gbnVtYmVyKSkgLyAyO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciBOdW0jY2JydFxyXG4gICAqIEB0eXBlIHtOdW1iZXJ9XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZWFkb25seVxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aC9jYnJ0XHJcbiAgICogQGRlc2NyaXB0aW9uIFN5bm9ueW0gZm9yXHJcbiAgICogW01hdGguY2JydF17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aC9jYnJ0fS5cclxuICAgKi9cclxuICBnZXQgY2JydCgpIHtcclxuICAgIGNvbnN0IGNicnQgPSBNYXRoLnBvdyhNYXRoLmFicyh0aGlzLiQpLCAxIC8gMyk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuJCA+IDAgPyBjYnJ0IDogLWNicnQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIE51bSNjZWlsXHJcbiAgICogQHR5cGUge051bWJlcn1cclxuICAgKiBAcHVibGljXHJcbiAgICogQHJlYWRvbmx5XHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9NYXRoL2NlaWxcclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3JcclxuICAgKiBbTWF0aC5jZWlsXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9NYXRoL2NlaWx9LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgTnVtKDEuMSkuY2VpbDsgIC8vIDJcclxuICAgKiBuZXcgTnVtKC0xLjEpLmNlaWw7IC8vIC0xXHJcbiAgICovXHJcbiAgZ2V0IGNlaWwoKSB7XHJcbiAgICByZXR1cm4gTWF0aC5jZWlsKHRoaXMuJCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIE51bSNjb3NcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtCb29sZWFufCp9IFthc0RlZ3JlZXMgPSBmYWxzZV0gSWYgaXQgaXMgdHJ1dGh5IHRoZSBudW1iZXIgaXMgdHJlYXRlZCBhcyBhIGRlZ3JlZSB2YWx1ZS5cclxuICAgKiBAcmV0dXJucyB7TnVtYmVyfSBDb3NpbmUgb2YgdGhlIG51bWJlci5cclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL01hdGgvY29zXHJcbiAgICogQGRlc2NyaXB0aW9uIFN5bm9ueW0gZm9yXHJcbiAgICogW01hdGguY29zXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9NYXRoL2Nvc30uXHJcbiAgICovXHJcbiAgY29zKGFzRGVncmVlcykge1xyXG4gICAgcmV0dXJuIE1hdGguY29zKChhc0RlZ3JlZXMgPyB0b1JhZGlhbiA6IDEpICogdGhpcy4kKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIgTnVtI2Nvc2hcclxuICAgKiBAdHlwZSB7TnVtYmVyfVxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcmVhZG9ubHlcclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL01hdGgvY29zaFxyXG4gICAqIEBkZXNjcmlwdGlvbiBTeW5vbnltIGZvclxyXG4gICAqIFtNYXRoLmNvc2hde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL01hdGgvY29zaH0uXHJcbiAgICovXHJcbiAgZ2V0IGNvc2goKSB7XHJcbiAgICBjb25zdCBleHAgPSB0aGlzLmV4cDtcclxuXHJcbiAgICByZXR1cm4gKGV4cCArIDEgLyBleHApIC8gMjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIgTnVtI2N1YmVcclxuICAgKiBAdHlwZSB7TnVtYmVyfVxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcmVhZG9ubHlcclxuICAgKiBAZGVzY3JpcHRpb24gQ3ViZSBvZiB0aGUgbnVtYmVyLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgTnVtKDIpLmN1YmU7ICAvLyA4XHJcbiAgICogbmV3IE51bSgtMykuY2VpbDsgLy8gLTI3XHJcbiAgICovXHJcbiAgZ2V0IGN1YmUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy4kICogdGhpcy4kICogdGhpcy4kO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciBOdW0jZXhwXHJcbiAgICogQHR5cGUge051bWJlcn1cclxuICAgKiBAcHVibGljXHJcbiAgICogQHJlYWRvbmx5XHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9NYXRoL2V4cFxyXG4gICAqIEBkZXNjcmlwdGlvbiBTeW5vbnltIGZvclxyXG4gICAqIFtNYXRoLmV4cF17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aC9leHB9LlxyXG4gICAqL1xyXG4gIGdldCBleHAoKSB7XHJcbiAgICByZXR1cm4gTWF0aC5leHAodGhpcy4kKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIgTnVtI2Zsb29yXHJcbiAgICogQHR5cGUge051bWJlcn1cclxuICAgKiBAcHVibGljXHJcbiAgICogQHJlYWRvbmx5XHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9NYXRoL2Zsb29yXHJcbiAgICogQGRlc2NyaXB0aW9uIFN5bm9ueW0gZm9yXHJcbiAgICogW01hdGguZmxvb3Jde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL01hdGgvZmxvb3J9LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgTnVtKDEuMSkuZmxvb3I7ICAvLyAxXHJcbiAgICogbmV3IE51bSgtMS4xKS5mbG9vcjsgLy8gLTJcclxuICAgKi9cclxuICBnZXQgZmxvb3IoKSB7XHJcbiAgICByZXR1cm4gTWF0aC5mbG9vcih0aGlzLiQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBOdW0jaW50ZXJ2YWxcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyAtIEZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIGV2ZXJ5IDxudW1iZXI+IG1pbGxpc2Vjb25kcy5cclxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnc10gLSBBcmd1bWVudHMgcGFzc2VkIHRvIHRoZSBmdW5jdGlvbi5cclxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEZ1bmN0aW9uIHRoYXQgYWJvcnRzIHRoZSBpbnRlcnZhbC4gVGhlIGNvbnRleHQgb2YgdGhlIGZ1bmN0aW9uIChpZiBpdCdzIG5vdCBhbHJlYWR5IGJvdW5kKVxyXG4gICAqIGlzIHRoZSBvYmplY3Qgd2l0aCB0aGUgYWJvcnQgbWV0aG9kLlxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aC9zZXRJbnRlcnZhbFxyXG4gICAqIEBkZXNjcmlwdGlvbiBBbmFsb2d1ZSBvZiB0aGVcclxuICAgKiBbc2V0SW50ZXJ2YWxde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0FQSS9XaW5kb3dUaW1lcnMvc2V0SW50ZXJ2YWx9LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBjb25zdCB0aW1lcyA9IDA7XHJcbiAgICogbmV3IE51bSg1MCkuaW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xyXG4gICAqICAgaWYgKCsrdGltZXMgPT09IDEwKSB7XHJcbiAgICogICAgIHRoaXMuYWJvcnQoKTtcclxuICAgKiAgIH1cclxuICAgKiB9KTtcclxuICAgKi9cclxuICBpbnRlcnZhbChmdW5jLCBhcmdzID0gW10pIHtcclxuICAgIHZhbGlkYXRlKFtmdW5jXSwgWydmdW5jdGlvbiddLCAnTnVtI2ludGVydmFsJyk7XHJcblxyXG4gICAgZnVuYyA9IG5ldyBGdW5jKGZ1bmMpLmJpbmRDb250ZXh0KHsgYWJvcnQgfSk7XHJcbiAgICBhcmdzID0gdG9BcnJheShhcmdzKTtcclxuXHJcbiAgICBjb25zdCBudW1iZXIgPSB0aGlzLiQ7XHJcblxyXG4gICAgbGV0IGFib3J0ZWQ7XHJcbiAgICBsZXQgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gaW50ZXJ2YWwoKSB7XHJcbiAgICAgIGlmICghYWJvcnRlZCkge1xyXG4gICAgICAgIGZ1bmMuYXBwbHkobnVsbCwgYXJncyk7XHJcblxyXG4gICAgICAgIGlmICghYWJvcnRlZCkge1xyXG4gICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoaW50ZXJ2YWwsIG51bWJlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LCAwKTtcclxuXHJcbiAgICByZXR1cm4gYWJvcnQ7XHJcblxyXG4gICAgZnVuY3Rpb24gYWJvcnQoKSB7XHJcbiAgICAgIGFib3J0ZWQgPSB0cnVlO1xyXG5cclxuICAgICAgcmV0dXJuIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIgTnVtI2xuXHJcbiAgICogQHR5cGUge051bWJlcn1cclxuICAgKiBAcHVibGljXHJcbiAgICogQHJlYWRvbmx5XHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9NYXRoL2xvZ1xyXG4gICAqIEBkZXNjcmlwdGlvbiBTeW5vbnltIGZvclxyXG4gICAqIFtNYXRoLmxvZ117QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aC9sb2d9LlxyXG4gICAqL1xyXG4gIGdldCBsbigpIHtcclxuICAgIHJldHVybiBNYXRoLmxvZyh0aGlzLiQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBOdW0jbG9nXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBudW1iZXIgLSBOdW1iZXIgdG8gZ2V0IGxvZ2FyaXRobSBvZi5cclxuICAgKiBAcmV0dXJucyB7TnVtYmVyfSBMb2dhcml0aG0gb2YgdGhlIGFyZ3VtZW50IG51bWJlciB0byB0aGUgbnVtYmVyIGJhc2UuXHJcbiAgICogQGRlc2NyaXB0aW9uIFJldHVybnMgdGhlIGxvZ2FyaXRobSBvZiB0aGUgYXJndW1lbnQgbnVtYmVyIHRvIHRoZSBudW1iZXIgYmFzZS5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogbmV3IE51bSgyKS5sb2coMTYpOyAgLy8gNFxyXG4gICAqIG5ldyBOdW0oMykubG9nKDI0Myk7IC8vIDVcclxuICAgKi9cclxuICBsb2cobnVtYmVyKSB7XHJcbiAgICByZXR1cm4gTWF0aC5sb2cobnVtYmVyKSAvIE1hdGgubG9nKHRoaXMuJCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIE51bSNsb2cyXHJcbiAgICogQHR5cGUge051bWJlcn1cclxuICAgKiBAcHVibGljXHJcbiAgICogQHJlYWRvbmx5XHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9NYXRoL2xvZzJcclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3JcclxuICAgKiBbTWF0aC5sb2cyXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9NYXRoL2xvZzJ9LlxyXG4gICAqL1xyXG4gIGdldCBsb2cyKCkge1xyXG4gICAgcmV0dXJuIHRoaXMubG4gLyBsbjI7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIE51bSNsb2cxMFxyXG4gICAqIEB0eXBlIHtOdW1iZXJ9XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZWFkb25seVxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aC9sb2cxMFxyXG4gICAqIEBkZXNjcmlwdGlvbiBTeW5vbnltIGZvclxyXG4gICAqIFtNYXRoLmxvZzEwXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9NYXRoL2xvZzEwfS5cclxuICAgKi9cclxuICBnZXQgbG9nMTAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5sbiAvIGxuMTA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIE51bSNwb3dcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHBvd2VyIC0gUG93ZXIgdGhlIG51bWJlciBzaG91bGQgYmUgcmFpc2VkIHRvLlxyXG4gICAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBudW1iZXIgdG8gdGhlIDxwb3dlcj4gcG93ZXIuXHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9NYXRoL3Bvd1xyXG4gICAqIEBkZXNjcmlwdGlvbiBTeW5vbnltIGZvclxyXG4gICAqIFtNYXRoLnBvd117QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aC9wb3d9LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgTnVtKDQpLnBvdyguNSk7IC8vIDJcclxuICAgKiBuZXcgTnVtKDMpLnBvdygyKTsgIC8vIDlcclxuICAgKi9cclxuICBwb3cocG93ZXIpIHtcclxuICAgIHJldHVybiBNYXRoLnBvdyh0aGlzLiQsIHBvd2VyKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgTnVtI3Jvb3RcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHBvd2VyIC0gUG93ZXIgdGhlIG51bWJlciBzaG91bGQgYmUgcmFpc2VkIHRvLlxyXG4gICAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSA8cG93ZXI+IHJvb3Qgb2YgdGhlIG51bWJlci5cclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3IgbnVtYmVyLnBvdygxIC8gcG93ZXIpO1xyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgTnVtKDQpLnJvb3QoMik7ICAgLy8gMC41XHJcbiAgICogbmV3IE51bSgyNDMpLnJvb3QoNSk7IC8vIDNcclxuICAgKi9cclxuICByb290KHBvd2VyKSB7XHJcbiAgICByZXR1cm4gTWF0aC5wb3codGhpcy4kLCAxIC8gcG93ZXIpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciBOdW0jcm91bmRcclxuICAgKiBAdHlwZSB7TnVtYmVyfVxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcmVhZG9ubHlcclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL01hdGgvcm91bmRcclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3JcclxuICAgKiBbTWF0aC5yb3VuZF17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aC9yb3VuZH0uXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBOdW0oMS4xKS5mbG9vcjsgIC8vIDFcclxuICAgKiBuZXcgTnVtKC0xLjEpLmZsb29yOyAvLyAtMVxyXG4gICAqIG5ldyBOdW0oMS41KS5mbG9vcjsgIC8vIDJcclxuICAgKi9cclxuICBnZXQgcm91bmQoKSB7XHJcbiAgICByZXR1cm4gTWF0aC5yb3VuZCh0aGlzLiQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciBOdW0jc2lnblxyXG4gICAqIEB0eXBlIHtOdW1iZXJ9XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZWFkb25seVxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aC9zaWduXHJcbiAgICogQGRlc2NyaXB0aW9uIFN5bm9ueW0gZm9yXHJcbiAgICogW01hdGguc2lnbl17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aC9zaWdufS5cclxuICAgKi9cclxuICBnZXQgc2lnbigpIHtcclxuICAgIGNvbnN0IG51bWJlciA9IHRoaXMuJDtcclxuXHJcbiAgICBpZiAoIW51bWJlcikge1xyXG4gICAgICByZXR1cm4gbnVtYmVyO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBudW1iZXIgPiAwID8gMSA6IC0xO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBOdW0jc2luXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7Qm9vbGVhbnwqfSBbYXNEZWdyZWVzID0gZmFsc2VdIElmIGl0IGlzIHRydXRoeSB0aGUgbnVtYmVyIGlzIHRyZWF0ZWQgYXMgYSBkZWdyZWUgdmFsdWUuXHJcbiAgICogQHJldHVybnMge051bWJlcn0gU2luZSBvZiB0aGUgbnVtYmVyLlxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aC9zaW5cclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3JcclxuICAgKiBbTWF0aC5zaW5de0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL01hdGgvc2lufS5cclxuICAgKi9cclxuICBzaW4oYXNEZWdyZWVzKSB7XHJcbiAgICByZXR1cm4gTWF0aC5zaW4oKGFzRGVncmVlcyA/IHRvUmFkaWFuIDogMSkgKiB0aGlzLiQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciBOdW0jc2luaFxyXG4gICAqIEB0eXBlIHtOdW1iZXJ9XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZWFkb25seVxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aC9zaW5oXHJcbiAgICogQGRlc2NyaXB0aW9uIFN5bm9ueW0gZm9yXHJcbiAgICogW01hdGguc2luaF17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aC9zaW5ofS5cclxuICAgKi9cclxuICBnZXQgc2luaCgpIHtcclxuICAgIGNvbnN0IGV4cCA9IHRoaXMuZXhwO1xyXG5cclxuICAgIHJldHVybiAoZXhwIC0gMSAvIGV4cCkgLyAyO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciBOdW0jc3FcclxuICAgKiBAdHlwZSB7TnVtYmVyfVxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcmVhZG9ubHlcclxuICAgKiBAZGVzY3JpcHRpb24gVGhlIHNxdWFyZSBvZiB0aGUgbnVtYmVyLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgTnVtKDIpLnNxOyAgLy8gNFxyXG4gICAqIG5ldyBOdW0oLTMpLnNxOyAvLyA5XHJcbiAgICovXHJcbiAgZ2V0IHNxKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuJCAqIHRoaXMuJDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIgTnVtI3NxcnRcclxuICAgKiBAdHlwZSB7TnVtYmVyfVxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcmVhZG9ubHlcclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL01hdGgvc3FydFxyXG4gICAqIEBkZXNjcmlwdGlvbiBTeW5vbnltIGZvclxyXG4gICAqIFtNYXRoLnNxcnRde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL01hdGgvc3FydH0uXHJcbiAgICovXHJcbiAgZ2V0IHNxcnQoKSB7XHJcbiAgICByZXR1cm4gTWF0aC5zcXJ0KHRoaXMuJCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIE51bSN0YW5cclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtCb29sZWFufCp9IFthc0RlZ3JlZXMgPSBmYWxzZV0gSWYgaXQgaXMgdHJ1dGh5IHRoZSBudW1iZXIgaXMgdHJlYXRlZCBhcyBhIGRlZ3JlZSB2YWx1ZS5cclxuICAgKiBAcmV0dXJucyB7TnVtYmVyfSBUYW5nZW50IG9mIHRoZSBudW1iZXIuXHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9NYXRoL3RhblxyXG4gICAqIEBkZXNjcmlwdGlvbiBTeW5vbnltIGZvclxyXG4gICAqIFtNYXRoLnRhbl17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aC90YW59LlxyXG4gICAqL1xyXG4gIHRhbihhc0RlZ3JlZXMpIHtcclxuICAgIHJldHVybiBNYXRoLnRhbigoYXNEZWdyZWVzID8gdG9SYWRpYW4gOiAxKSAqIHRoaXMuJCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIE51bSN0YW5oXHJcbiAgICogQHR5cGUge051bWJlcn1cclxuICAgKiBAcHVibGljXHJcbiAgICogQHJlYWRvbmx5XHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9NYXRoL3RhbmhcclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3JcclxuICAgKiBbTWF0aC50YW5oXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9NYXRoL3Rhbmh9LlxyXG4gICAqL1xyXG4gIGdldCB0YW5oKCkge1xyXG4gICAgY29uc3QgbnVtYmVyID0gdGhpcy4kO1xyXG5cclxuICAgIGlmICghaXNGaW5pdGUobnVtYmVyKSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5zaWduO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGV4cCA9IE1hdGguZXhwKDIgKiBudW1iZXIpO1xyXG5cclxuICAgIHJldHVybiAoZXhwIC0gMSkgLyAoZXhwICsgMSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIE51bSN0aW1lb3V0XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7Kn0gW3ZhbHVlXSAtIFZhbHVlIHRvIGJlIHJlc29sdmVkIGJ5IHRoZSBwcm9taXNlLlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBQcm9taXNlIHRoYXQgY291bGQgYmUgYWJvcnRlZC5cclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0FQSS9XaW5kb3dUaW1lcnMvc2V0VGltZW91dFxyXG4gICAqIEBkZXNjcmlwdGlvbiBQcm9taXNlLWJhc2VkIGFuYWxvZ3VlIG9mXHJcbiAgICogW3NldFRpbWVvdXRde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0FQSS9XaW5kb3dUaW1lcnMvc2V0VGltZW91dH0uXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBOdW0oNTApLnRpbWVvdXQoJ3Jlc29sdmVkJykudGhlbigodmFsdWUpID0+IHtcclxuICAgKiAgIGNvbnNvbGUubG9nKHZhbHVlKTsgLy8gJ3Jlc29sdmVkJ1xyXG4gICAqIH0pO1xyXG4gICAqXHJcbiAgICogY29uc3QgcHJvbWlzZSA9IG5ldyBOdW0oNTApLnRpbWVvdXQoKTtcclxuICAgKiBwcm9taXNlLmFib3J0KCk7XHJcbiAgICovXHJcbiAgdGltZW91dCh2YWx1ZSkge1xyXG4gICAgbGV0IHRpbWVvdXQ7XHJcbiAgICBsZXQgcmVqZWN0O1xyXG5cclxuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqKSA9PiB7XHJcbiAgICAgIHJlamVjdCA9IHJlajtcclxuICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQocmVzb2x2ZSwgdGhpcy4kLCB2YWx1ZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBwcm9taXNlLmFib3J0ID0gZnVuY3Rpb24gYWJvcnQoKSB7XHJcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcclxuXHJcbiAgICAgIHJlamVjdChuZXcgRXJyb3IoJ1RpbWVvdXQgd2FzIGFib3J0ZWQnKSk7XHJcblxyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHByb21pc2U7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIE51bSN0b0Jhc2VcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtiYXNlID0gMTBdIC0gQmFzZSB0aGF0IHRoZSBudW1iZXIgc2hvdWxkIGludmVydGVkIHRvLlxyXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IEEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBudW1iZXIgaW4gPGJhc2U+IGJhc2UuXHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9OdW1iZXIvdG9TdHJpbmdcclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3JcclxuICAgKiBbTnVtYmVyI3RvU3RyaW5nXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9OdW1iZXIvdG9TdHJpbmd9LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgTnVtKDQpLnRvQmFzZSgyKTsgLy8gMTAwXHJcbiAgICogbmV3IE51bSgzKS50b0Jhc2UoKTsgIC8vIDNcclxuICAgKi9cclxuICB0b0Jhc2UoYmFzZSA9IDEwKSB7XHJcbiAgICByZXR1cm4gdGhpcy4kLnRvU3RyaW5nKGJhc2UpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBOdW0jdG9FeHBvbmVudGlhbFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge051bWJlcn0gW2ZyYWN0aW9uRGlnaXRzXSAtIFNlZSB0aGUgbGluay5cclxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSBBIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgbnVtYmVyIGluIHRoZSBleHBvbmVudGlhbCBmb3JtYXQuXHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9OdW1iZXIvdG9FeHBvbmVudGlhbFxyXG4gICAqIEBkZXNjcmlwdGlvbiBTeW5vbnltIGZvclxyXG4gICAqIFtOdW1iZXIjdG9FeHBvbmVudGlhbF17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTnVtYmVyL3RvRXhwb25lbnRpYWx9LlxyXG4gICAqL1xyXG4gIHRvRXhwb25lbnRpYWwoZnJhY3Rpb25EaWdpdHMpIHtcclxuICAgIHJldHVybiB0aGlzLiQudG9FeHBvbmVudGlhbChmcmFjdGlvbkRpZ2l0cyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIE51bSN0b0ZpeGVkXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbZGlnaXRzID0gMF0gLSBTZWUgdGhlIGxpbmsuXHJcbiAgICogQHJldHVybnMge1N0cmluZ30gRml4ZWQtcG9pbnQgZm9ybWF0dGVkIG51bWJlci5cclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL051bWJlci90b0ZpeGVkXHJcbiAgICogQGRlc2NyaXB0aW9uIFN5bm9ueW0gZm9yXHJcbiAgICogW051bWJlciN0b0ZpeGVkXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9OdW1iZXIvdG9GaXhlZH0uXHJcbiAgICovXHJcbiAgdG9GaXhlZChkaWdpdHMpIHtcclxuICAgIHJldHVybiB0aGlzLiQudG9GaXhlZChkaWdpdHMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBOdW0jdG9QcmVjaXNpb25cclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcmVjaXNpb25dIC0gU2VlIHRoZSBsaW5rLlxyXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IEEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBudW1iZXIgdG8gdGhlIHNwZWNpZmllZCBwcmVjaXNpb24uXHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9OdW1iZXIvdG9QcmVjaXNpb25cclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3JcclxuICAgKiBbTnVtYmVyI3RvUHJlY2lzaW9uXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9OdW1iZXIvdG9QcmVjaXNpb259LlxyXG4gICAqL1xyXG4gIHRvUHJlY2lzaW9uKHByZWNpc2lvbikge1xyXG4gICAgcmV0dXJuIHRoaXMuJC50b1ByZWNpc2lvbihwcmVjaXNpb24pO1xyXG4gIH1cclxuXHJcbiAgdmFsdWVPZigpIHtcclxuICAgIHJldHVybiBOdW1iZXIodGhpcy4kKTtcclxuICB9XHJcbn1cclxuXHJcbmRlZmluZVByb3BlcnRpZXMoTnVtLnByb3RvdHlwZSwge1xyXG4gIFtTeW1ib2wudG9TdHJpbmdUYWddOiAnTnVtJ1xyXG59KTtcclxuXHJcbmNvbnN0cnVjdG9yc1sxXS5wdXNoKHtcclxuICBjaGVjazogaXNOdW1iZXIsXHJcbiAgY2xzOiBOdW1cclxufSk7XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uIHJhbmRcclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0ge051bWJlcn0gW3N0YXJ0ID0gMF0gLSBTdGFydCBvZiB0aGUgcmFuZ2UuXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbZW5kID0gMV0gLSBFbmQgb2YgdGhlIHJhbmdlLlxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSYW5kb20gbnVtYmVyLlxyXG4gKiBAZGVzY3JpcHRpb24gUmV0dXJucyBhIHJhbmRvbSBudW1iZXIgaW4gdGhlIHJhbmdlIHNwZWNpZmllZCBieSB0aGUgYXJndW1lbnRzLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiByYW5kKDEsIDUpOyAvLyAyLjMxNVxyXG4gKiByYW5kKDEsIDUpOyAvLyA0LjM1Njc2M1xyXG4gKi9cclxuZnVuY3Rpb24gcmFuZChzdGFydCA9IDAsIGVuZCA9IDEpIHtcclxuICByZXR1cm4gc3RhcnQgKyAoZW5kIC0gc3RhcnQpICogTWF0aC5yYW5kb20oKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvbiByYW5kb21cclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0ge0ludGVnZXJ9IHN0YXJ0IC0gU3RhcnQgb2YgdGhlIHJhbmdlLlxyXG4gKiBAcGFyYW0ge0ludGVnZXJ9IGVuZCAtIEVuZCBvZiB0aGUgcmFuZ2UuXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJhbmRvbSBpbnRlZ2VyLlxyXG4gKiBAZGVzY3JpcHRpb24gUmV0dXJucyBhIHJhbmRvbSBpbnRlZ2VyIG51bWJlciBpbiB0aGUgcmFuZ2Ugc3BlY2lmaWVkIGJ5IHRoZSBhcmd1bWVudHMuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIHJhbmRvbSgxLCA1KTsgLy8gM1xyXG4gKiByYW5kb20oMSwgNSk7IC8vIDFcclxuICovXHJcbmZ1bmN0aW9uIHJhbmRvbShzdGFydCwgZW5kKSB7XHJcbiAgdmFsaWRhdGUoW3N0YXJ0LCBlbmRdLCBbJ2ludExpa2UnLCAnaW50TGlrZSddLCAncmFuZG9tJyk7XHJcblxyXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcignVGhlIHNlY29uZCBhcmd1bWVudCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB0aGUgZmlyc3QhJywgJ3JhbmRvbScpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIE1hdGguZmxvb3IocmFuZChzdGFydCwgZW5kICsgMSkpO1xyXG59XHJcblxyXG5leHBvcnQgeyBOdW0sIHJhbmQsIHJhbmRvbSB9O1xyXG4iLCIvKipcclxuICogQG1vZHVsZSBBcnJcclxuICogQHByaXZhdGVcclxuICogQG1peGluXHJcbiAqIEBkZXNjcmlwdGlvbiBFeHBvcnRzIEFyciBjbGFzcy5cclxuICovXHJcblxyXG5pbXBvcnQgeyByYW5kb20gfSBmcm9tICcuL051bSc7XHJcbmltcG9ydCB7IFN1cGVyIH0gZnJvbSAnLi9TdXBlcic7XHJcbmltcG9ydCB7IGNvbnN0cnVjdG9ycyB9IGZyb20gJy4vY29uc3RhbnRzJztcclxuaW1wb3J0IHtcclxuICBpc0FycmF5TGlrZSwgaXNOYU4sIGlzTnVtYmVyLCBpc1N0cmluZyxcclxuICB0b0FycmF5LCB2YWxpZGF0ZSwgaXRlcmF0ZSBhcyBpdGVyYXRvciwgU3ltYm9sLCBkZWZpbmVQcm9wZXJ0aWVzXHJcbn0gZnJvbSAnLi9oZWxwZXJzJztcclxuXHJcbi8qKlxyXG4gKiBAdHlwZWRlZiB7QXJyYXl8Kn0gQXJyYXlMaWtlXHJcbiAqIEBwdWJsaWNcclxuICogQGRlc2NyaXB0aW9uIEFycmF5LWxpa2UgdHlwZS5cclxuICovXHJcblxyXG4vKipcclxuICogQGNhbGxiYWNrIEFycmF5Q2FsbGJhY2tcclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0ge051bWJlcn0gaSAtIEl0ZXJhdGlvbiBpbmRleC5cclxuICovXHJcblxyXG4vKipcclxuICogQGNhbGxiYWNrIEl0ZXJhdGVDYWxsYmFja1xyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBpIC0gSXRlcmF0aW9uIGluZGV4LlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAY2FsbGJhY2sgQ29tcGFyZUZ1bmN0aW9uXHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIHsqfSB4IC0gRmlyc3QgdmFsdWUgdG8gYmUgY29tcGFyZWQuXHJcbiAqIEBwYXJhbSB7Kn0geSAtIFNlY29uZCB2YWx1ZSB0byBiZSBjb21wYXJlZC5cclxuICovXHJcblxyXG4vKipcclxuICogQGNsYXNzIEFyclxyXG4gKiBAZXh0ZW5kcyBTdXBlclxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheSA9IFtdXSAtIEFuIGFycmF5IHRvIHdyYXAuXHJcbiAqIEByZXR1cm5zIHtBcnJ9IEluc3RhbmNlIG9mIEFyci5cclxuICogQGRlc2NyaXB0aW9uIFdyYXAgb2YgYW4gYXJyYXkuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIG5ldyBBcnIoWzEsIDJdKTtcclxuICovXHJcbmNsYXNzIEFyciBleHRlbmRzIFN1cGVyIHtcclxuICBjb25zdHJ1Y3RvcihhcnJheSA9IFtdKSB7XHJcbiAgICBzdXBlcih0b0FycmF5KGFycmF5IGluc3RhbmNlb2YgQXJyID8gYXJyYXkuJCA6IGFycmF5KSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAbWVtYmVyIEFyciMkXHJcbiAgICAgKiBAdHlwZSB7QXJyYXl9XHJcbiAgICAgKiBAcHVibGljXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gTWFkZSBhcnJheS5cclxuICAgICAqL1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBBcnIjY29uY2F0XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7Li4uKEFycmF5fEFycnwqKX0gdmFsdWVzIC0gQXJyYXlzIG9yIGFueSBvdGhlciB2YWx1ZXMgdG8gY29uY2F0IHRoZSBhcnJheSB3aXRoLlxyXG4gICAqIEByZXR1cm5zIHtBcnJ9IE5ldyBpbnN0YW5jZSBvZiBBcnIuXHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9jb25jYXRcclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3JcclxuICAgKiBbQXJyYXkjY29uY2F0XXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9jb25jYXR9LlxyXG4gICAqL1xyXG4gIGNvbmNhdCguLi52YWx1ZXMpIHtcclxuICAgIGNvbnN0IGFycmF5ID0gdG9BcnJheSh0aGlzLiQsIHRydWUpO1xyXG5cclxuICAgIGl0ZXJhdG9yKGFyZ3VtZW50cywgKHZhbHVlKSA9PiB7XHJcbiAgICAgIHZhbHVlID0gbmV3IFN1cGVyKHZhbHVlKS4kO1xyXG5cclxuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSAmJiAhaXNTdHJpbmcodmFsdWUpKSB7XHJcbiAgICAgICAgaXRlcmF0b3IodmFsdWUsICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgYXJyYXkucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgYXJyYXkucHVzaCh2YWx1ZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoYXJyYXkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciBBcnIjZmlyc3RcclxuICAgKiBAdHlwZSB7Kn1cclxuICAgKiBAcHVibGljXHJcbiAgICogQHJlYWRvbmx5XHJcbiAgICogQGRlc2NyaXB0aW9uIFJldHVybnMgdGhlIGZpcnN0IGVsZW1lbnQgb2YgdGhlIGFycmF5LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgQXJyKFsxLCAyLCAzXSkuZmlyc3Q7IC8vIDFcclxuICAgKiBuZXcgQXJyKFtdKS5maXJzdDsgICAgICAgIC8vIHVuZGVmaW5lZFxyXG4gICAqL1xyXG4gIGdldCBmaXJzdCgpIHtcclxuICAgIHJldHVybiB0aGlzLiRbMF07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEFyciNpbmRleE9mXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBWYWx1ZSB0byBzZWFyY2guXHJcbiAgICogQHJldHVybnMge051bWJlcn0gSW5kZXggb2YgdGhlIGFyZ3VtZW50LlxyXG4gICAqIEBkZXNjcmlwdGlvbiBBbG1vc3QgdGhlIHNhbWUgYXMge0BsaW5rIFN1cGVyI2tleU9mfS4gVGhlIGRpZmZlcmVuY2UgaXMgdGhhdCBpZiB0aGUgdmFsdWUgaXMgbm90IGZvdW5kXHJcbiAgICogLTEgcmV0dXJuZWQgaW5zdGVhZCBvZiBudWxsIGFuZCBpZiBmb3VuZCBOdW1iZXIoa2V5KSByZXR1cm5lZC5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogbmV3IEFycihbMSwgMiwgM10pLmluZGV4T2YoMSk7ICAgICAgIC8vIDBcclxuICAgKiBuZXcgQXJyKFsxLCAyLCAzXSkuaW5kZXhPZignMScpOyAgICAgLy8gMFxyXG4gICAqIG5ldyBBcnIoWzEsIDIsIDNdKS5pbmRleE9mKDMpOyAgICAgICAvLyAtMVxyXG4gICAqIG5ldyBBcnIoWzEsIDIsIE5hTl0pLmluZGV4T2YoTmFOKTsgICAvLyAyXHJcbiAgICovXHJcbiAgaW5kZXhPZih2YWx1ZSkge1xyXG4gICAgY29uc3Qga2V5ID0gdGhpcy5rZXlPZih2YWx1ZSk7XHJcblxyXG4gICAgcmV0dXJuIGtleSA9PT0gbnVsbCA/IC0xIDogTnVtYmVyKGtleSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEFyciNpbmRleE9mU3RyaWN0XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBWYWx1ZSB0byBzZWFyY2guXHJcbiAgICogQHJldHVybnMge051bWJlcn0gSW5kZXggb2YgdGhlIGFyZ3VtZW50LlxyXG4gICAqIEBkZXNjcmlwdGlvbiBBbG1vc3QgdGhlIHNhbWUgYXMge0BsaW5rIFN1cGVyI2tleU9mU3RyaWN0fS4gVGhlIGRpZmZlcmVuY2UgaXMgdGhhdCBpZiB0aGUgdmFsdWUgaXMgbm90IGZvdW5kXHJcbiAgICogLTEgcmV0dXJuZWQgaW5zdGVhZCBvZiBudWxsIGFuZCBpZiBmb3VuZCBOdW1iZXIoa2V5KSByZXR1cm5lZC5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogbmV3IEFycihbMSwgMiwgM10pLmluZGV4T2ZTdHJpY3QoMSk7ICAgICAgIC8vIDBcclxuICAgKiBuZXcgQXJyKFsxLCAyLCAzXSkuaW5kZXhPZlN0cmljdCgnMScpOyAgICAgLy8gLTFcclxuICAgKiBuZXcgQXJyKFsxLCAyLCAzXSkuaW5kZXhPZlN0cmljdCgzKTsgICAgICAgLy8gLTFcclxuICAgKiBuZXcgQXJyKFsxLCAyLCBOYU5dKS5pbmRleE9mU3RyaWN0KE5hTik7ICAgLy8gMlxyXG4gICAqL1xyXG4gIGluZGV4T2ZTdHJpY3QodmFsdWUpIHtcclxuICAgIGNvbnN0IGtleSA9IHRoaXMua2V5T2ZTdHJpY3QodmFsdWUpO1xyXG5cclxuICAgIHJldHVybiBrZXkgPT09IG51bGwgPyAtMSA6IE51bWJlcihrZXkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBBcnIjam9pblxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1N0cmluZ30gW3NlcGFyYXRvciA9ICcsJ10gLSBTZWUgdGhlIGxpbmsuXHJcbiAgICogQHJldHVybnMge1N0cmluZ30gLSBTdHJpbmcgb2Ygam9pbmVkIGFycmF5LlxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvam9pblxyXG4gICAqIEBkZXNjcmlwdGlvbiBTeW5vbnltIGZvclxyXG4gICAqIFtBcnJheSNqb2luXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9qb2lufS5cclxuICAgKi9cclxuICBqb2luKHNlcGFyYXRvcikge1xyXG4gICAgcmV0dXJuIHRoaXMuJC5qb2luLmFwcGx5KHRoaXMuJCwgYXJndW1lbnRzKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIgQXJyI2xhc3RcclxuICAgKiBAdHlwZSB7Kn1cclxuICAgKiBAcHVibGljXHJcbiAgICogQHJlYWRvbmx5XHJcbiAgICogQGRlc2NyaXB0aW9uIFRoZSBsYXN0IGVsZW1lbnQgb2YgdGhlIGFycmF5LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgQXJyKFsxLCAyLCAzXSkubGFzdDsgLy8gM1xyXG4gICAqIG5ldyBBcnIoW10pLmxhc3Q7ICAgICAgICAvLyB1bmRlZmluZWRcclxuICAgKi9cclxuICBnZXQgbGFzdCgpIHtcclxuICAgIGNvbnN0IGFycmF5ID0gdGhpcy4kO1xyXG5cclxuICAgIHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSAxXTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIgQXJyI2xlbmd0aFxyXG4gICAqIEB0eXBlIHtOdW1iZXJ9XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZWFkb25seVxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvbGVuZ3RoXHJcbiAgICogQGRlc2NyaXB0aW9uIFN5bm9ueW0gZm9yXHJcbiAgICogW0FycmF5I2xlbmd0aF17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvbGVuZ3RofS5cclxuICAgKi9cclxuICBnZXQgbGVuZ3RoKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuJC5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEFyciNwb3BcclxuICAgKiBAcHVibGljXHJcbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgZGVsZXRlZCBlbGVtZW50LlxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvcG9wXHJcbiAgICogQGRlc2NyaXB0aW9uIFN5bm9ueW0gZm9yXHJcbiAgICogW0FycmF5I3BvcF17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvcG9wfS5cclxuICAgKi9cclxuICBwb3AoKSB7XHJcbiAgICByZXR1cm4gdGhpcy4kLnBvcCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBBcnIjcHVzaFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0gey4uLip9IHZhbHVlcyBTZWUgdGhlIGxpbmsuXHJcbiAgICogQHRoaXMge0Fycn1cclxuICAgKiBAcmV0dXJucyB7QXJyfSBSZXR1cm5zIHRoaXMuXHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9wdXNoXHJcbiAgICogQGRlc2NyaXB0aW9uIFN5bm9ueW0gZm9yXHJcbiAgICogW0FycmF5I3B1c2hde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L3B1c2h9XHJcbiAgICogYmVzaWRlcyByZXR1cm5pbmcgdGhpcy5cclxuICAgKi9cclxuICBwdXNoKC4uLnZhbHVlcykge1xyXG4gICAgdGhpcy4kLnB1c2guYXBwbHkodGhpcy4kLCBhcmd1bWVudHMpO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBBcnIjcmFuZG9tXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZXR1cm5zIHsqfSBSYW5kb20gaXRlbSBvZiB0aGUgYXJyYXkuXHJcbiAgICogQGRlc2NyaXB0aW9uIE1ldGhvZCBmb3IgZ2V0dGluZyByYW5kb20gaXRlbXMgb2YgdGhlIGFycmF5LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgQXJyKFsxLCA1LCAzXSkucmFuZG9tKCk7IC8vIDNcclxuICAgKiBuZXcgQXJyKFsxLCA1LCAzXSkucmFuZG9tKCk7IC8vIDVcclxuICAgKi9cclxuICByYW5kb20oKSB7XHJcbiAgICByZXR1cm4gdGhpcy4kW3JhbmRvbSgwLCB0aGlzLiQubGVuZ3RoIC0gMSldO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBBcnIjcmV2ZXJzZVxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcmV0dXJucyB7QXJyfSBBIHdyYXAgb2YgdGhlIHJldmVyc2VkIGFycmF5LlxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvcmV2ZXJzZVxyXG4gICAqIEBkZXNjcmlwdGlvbiBTeW5vbnltIGZvclxyXG4gICAqIFtBcnJheSNyZXZlcnNlXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9yZXZlcnNlfS5cclxuICAgKi9cclxuICByZXZlcnNlKCkge1xyXG4gICAgdGhpcy4kLnJldmVyc2UoKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgQXJyI3NoaWZ0XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGRlbGV0ZWQgZWxlbWVudC5cclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L3NoaWZ0XHJcbiAgICogQGRlc2NyaXB0aW9uIFN5bm9ueW0gZm9yXHJcbiAgICogW0FycmF5I3NoaWZ0XXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9zaGlmdH0uXHJcbiAgICovXHJcbiAgc2hpZnQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy4kLnNoaWZ0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEFyciNzaHVmZmxlXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZXR1cm5zIHtBcnJ9IFJldHVybnMgdGhpcy5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIGZvciBzaHVmZmxpbmcuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBBcnIoWzEsIDIsIDMsIDRdKS5zaHVmZmxlKCkuJDsgLy8gWzQsIDIsIDMsIDFdXHJcbiAgICogbmV3IEFycihbMSwgMiwgMywgNF0pLnNodWZmbGUoKS4kOyAvLyBbMSwgMywgNCwgMl1cclxuICAgKi9cclxuICBzaHVmZmxlKCkge1xyXG4gICAgY29uc3QgbGVuZ3RoID0gdGhpcy4kLmxlbmd0aDtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5mb3JFYWNoKCh2YWx1ZSwgaW5kZXgsIGFycmF5KSA9PiB7XHJcbiAgICAgIGNvbnN0IHJhbmRvbUluZGV4ID0gaW5kZXggKyBNYXRoLmZsb29yKChsZW5ndGggLSBpbmRleCkgKiBNYXRoLnJhbmRvbSgpKTtcclxuXHJcbiAgICAgIGFycmF5W2luZGV4XSA9IGFycmF5W3JhbmRvbUluZGV4XTtcclxuICAgICAgYXJyYXlbcmFuZG9tSW5kZXhdID0gdmFsdWU7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgQXJyI3NsaWNlXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbYmVnaW4gPSAwXSAtIFNlZSB0aGUgbGluay5cclxuICAgKiBAcGFyYW0ge051bWJlcn0gW2VuZCA9IGFycmF5Lmxlbmd0aF0gLSBTZWUgdGhlIGxpbmsuXHJcbiAgICogQHJldHVybnMge0Fycn0gQSB3cmFwIG9mIGEgc2xpY2VkIGFycmF5LlxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvc2xpY2VcclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3JcclxuICAgKiBbQXJyYXkjc2xpY2Vde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L3NsaWNlfS5cclxuICAgKi9cclxuICBzbGljZShiZWdpbiwgZW5kKSB7XHJcbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy4kLnNsaWNlLmFwcGx5KHRoaXMuJCwgYXJndW1lbnRzKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEFyciNzb3J0XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7Q29tcGFyZUZ1bmN0aW9ufSBbY29tcGFyZUZ1bmN0aW9uXSAtIFNlZSB0aGUgbGluay5cclxuICAgKiBAcmV0dXJucyB7QXJyfSBSZXR1cm5zIHRoaXMuXHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9zb3J0XHJcbiAgICogQGRlc2NyaXB0aW9uIFN5bm9ueW0gZm9yXHJcbiAgICogW0FycmF5I3NvcnRde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L3NvcnR9LlxyXG4gICAqL1xyXG4gIHNvcnQoY29tcGFyZUZ1bmN0aW9uKSB7XHJcbiAgICB2YWxpZGF0ZShbY29tcGFyZUZ1bmN0aW9uXSwgWydmdW5jdGlvbnx8ISddLCAnQXJyI3NvcnQnKTtcclxuXHJcbiAgICB0aGlzLiQuc29ydChjb21wYXJlRnVuY3Rpb24pO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBBcnIjc29ydEFzY1xyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcmV0dXJucyB7QXJyfSBSZXR1cm5zIHRoaXMuXHJcbiAgICogQGRlc2NyaXB0aW9uIE1ldGhvZCBmb3IgYXNjZW5kaW5nIHNvcnRpbmcuIFB1dHMgbm9uLW51bWJlcnMgZmlyc3QsIHRoZW4gTmFOcywgdGhlbiBzb3J0ZWQgdmFsdWVzLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgQXJyKFtOYU4sIDEsIC03LCAnMTAwJywgNV0pLnNvcnRBc2MoKS4kOyAvLyBbJzEwMCcsIE5hTiwgLTcsIDEsIDVdXHJcbiAgICovXHJcbiAgc29ydEFzYygpIHtcclxuICAgIHJldHVybiB0aGlzLnNvcnQoYXNjKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgQXJyI3NvcnREZXNjXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZXR1cm5zIHtBcnJ9IFJldHVybnMgdGhpcy5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIGZvciBkZXNjZW5kaW5nIHNvcnRpbmcuIFB1dHMgc29ydGVkIHZhbHVlcyBmaXJzdCwgdGhlbiBOYU5zLCB0aGVuIG5vbi1udW1iZXJzLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgQXJyKFtOYU4sIDEsIC03LCAnMTAwJywgNV0pLnNvcnREZXNjKCkuJDsgLy8gWzUsIDEsIC03LCBOYU4sICcxMDAnXVxyXG4gICAqL1xyXG4gIHNvcnREZXNjKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuc29ydCgoeSwgeCkgPT4gYXNjKHgsIHkpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgQXJyI3NwbGljZVxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge051bWJlcn0gW3N0YXJ0XSAtIFNlZSB0aGUgbGluay5cclxuICAgKiBAcGFyYW0ge051bWJlcn0gW2RlbGV0ZUNvdW50XSAtIFNlZSB0aGUgbGluay5cclxuICAgKiBAcGFyYW0gey4uLip9IFtpdGVtc10gLSBTZWUgdGhlIGxpbmsuXHJcbiAgICogQHJldHVybnMge0Fycn0gQSB3cmFwIG9mIHJldHVybiB2YWx1ZSBvZiAjc3BsaWNlIGNhbGwuXHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9zcGxpY2VcclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3JcclxuICAgKiBbQXJyYXkjc3BsaWNlXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9zcGxpY2V9LlxyXG4gICAqL1xyXG4gIHNwbGljZShzdGFydCwgZGVsZXRlQ291bnQsIC4uLml0ZW1zKSB7XHJcbiAgICByZXR1cm4gbmV3IEFycih0aGlzLiQuc3BsaWNlLmFwcGx5KHRoaXMuJCwgYXJndW1lbnRzKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEFyciNzdHJpbmdcclxuICAgKiBAcHVibGljXHJcbiAgICogQHJldHVybnMge1N0cmluZ30gQ29uY2F0ZW5hdGVkIGFycmF5LlxyXG4gICAqIEBkZXNjcmlwdGlvbiBTeW5vbnltIGZvciBhcnJheS5qb2luKCcnKS5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogbmV3IEFycihbMSwgMiwgM10pLnN0cmluZygpOyAvLyAnMTIzJ1xyXG4gICAqL1xyXG4gIHN0cmluZygpIHtcclxuICAgIHJldHVybiB0aGlzLmpvaW4oJycpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBBcnIjdW5zaGlmdFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIC0gU2VlIHRoZSBsaW5rLlxyXG4gICAqIEByZXR1cm5zIHtBcnJ9IFJldHVybnMgdGhpcy5cclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L3Vuc2hpZnRcclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3JcclxuICAgKiBbQXJyYXkjdW5zaGlmdF17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvdW5zaGlmdH1cclxuICAgKiBiZXNpZGVzIHJldHVybmluZyB0aGlzLlxyXG4gICAqL1xyXG4gIHVuc2hpZnQoLi4udmFsdWVzKSB7XHJcbiAgICB0aGlzLiQudW5zaGlmdC5hcHBseSh0aGlzLiQsIGFyZ3VtZW50cyk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG59XHJcblxyXG5kZWZpbmVQcm9wZXJ0aWVzKEFyci5wcm90b3R5cGUsIHtcclxuICBbU3ltYm9sLnRvU3RyaW5nVGFnXTogJ0FycidcclxufSk7XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uIGFzY1xyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcGFyYW0geyp9IHggLSBGaXJzdCB2YWx1ZSB0byBiZSBjb21wYXJlZC5cclxuICogQHBhcmFtIHsqfSB5IC0gU2Vjb25kIHZhbHVlIHRvIGJlIGNvbXBhcmVkLlxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBXaGVyZSB0byBwdXQgdGhlIGZpcnN0IGVsZW1lbnQ6IGJlZm9yZSBvciBhZnRlci5cclxuICovXHJcbmZ1bmN0aW9uIGFzYyh4LCB5KSB7XHJcbiAgaWYgKCFpc051bWJlcih4KSAmJiAhaXNOdW1iZXIoeSkpIHtcclxuICAgIHJldHVybiAwO1xyXG4gIH1cclxuXHJcbiAgaWYgKCFpc051bWJlcih4KSkge1xyXG4gICAgcmV0dXJuIC0xO1xyXG4gIH1cclxuXHJcbiAgaWYgKCFpc051bWJlcih5KSkge1xyXG4gICAgcmV0dXJuIDE7XHJcbiAgfVxyXG5cclxuICBpZiAoaXNOYU4oeCkgJiYgaXNOYU4oeSkpIHtcclxuICAgIHJldHVybiAwO1xyXG4gIH1cclxuXHJcbiAgaWYgKGlzTmFOKHgpKSB7XHJcbiAgICByZXR1cm4gLTE7XHJcbiAgfVxyXG5cclxuICBpZiAoaXNOYU4oeSkpIHtcclxuICAgIHJldHVybiAxO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHggLSB5O1xyXG59XHJcblxyXG5jb25zdHJ1Y3RvcnNbMV0ucHVzaCh7XHJcbiAgY2hlY2s6IGlzQXJyYXlMaWtlLFxyXG4gIGNsczogQXJyXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvbiBhcnJheVxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBudW1iZXIgLSBMZW5ndGggb2YgdGhlIGFycmF5LlxyXG4gKiBAcGFyYW0ge0FycmF5Q2FsbGJhY2t9IFtjYWxsYmFja10gLSBJZiBpdCdzIHByZXNlbnQgaXQgaGFzIHRvIGJlIGEgZnVuY3Rpb25cclxuICogdGhhdCByZXR1cm5zIHRoZSBlbGVtZW50IHRoYXQgaXMgcHVzaGVkIHRvIHRoZSBuZXcgYXJyYXkuXHJcbiAqIEByZXR1cm5zIHtBcnJ9IE5ldyBpbnN0YW5jZSBvZiBBcnIuXHJcbiAqIEBkZXNjcmlwdGlvbiBNZXRob2QgZm9yIGNyZWF0aW5nIG5ldyBhcnJheSBmcm9tIHRoZSBsZW5ndGggdXNpbmcgb3B0aW9uYWwgY2FsbGJhY2suXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIGFycmF5KDMpLiQ7ICAgICAgICAgICAgICAgLy8gWzAsIDEsIDJdXHJcbiAqIGFycmF5KDMsIChpKSA9PiBpICogMikuJDsgLy8gWzAsIDIsIDRdXHJcbiAqL1xyXG5mdW5jdGlvbiBhcnJheShudW1iZXIsIGNhbGxiYWNrKSB7XHJcbiAgdmFsaWRhdGUoW251bWJlciwgY2FsbGJhY2tdLCBbWydpbnRMaWtlJywgJz49MCddLCAnZnVuY3Rpb258fCEnXSwgJ2FycmF5Jyk7XHJcblxyXG4gIGNvbnN0IGFycmF5ID0gW107XHJcblxyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtYmVyOyBpKyspIHtcclxuICAgIGFycmF5LnB1c2goY2FsbGJhY2sgPyBjYWxsYmFjayhpKSA6IGkpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG5ldyBBcnIoYXJyYXkpO1xyXG59XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uIGl0ZXJhdGVcclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0ge051bWJlcn0gbnVtYmVyIC0gTnVtYmVyIG9mIGl0ZXJhdGlvbnMuXHJcbiAqIEBwYXJhbSB7SXRlcmF0ZUNhbGxiYWNrfSBjYWxsYmFjayAtIENhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIG9uIGVhY2ggaXRlcmF0aW9uIHdpdGggdGhlIGl0ZXJhdGlvbiBpbmRleC5cclxuICogQHJldHVybnMge3ZvaWR9XHJcbiAqIEBkZXNjcmlwdGlvbiBNZXRob2QgZm9yIHJlcGxhY2luZyBmb3IgKC4uLikgY29uc3RydWN0aW9uLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBpdGVyYXRlKCk7XHJcbiAqL1xyXG5mdW5jdGlvbiBpdGVyYXRlKG51bWJlciwgY2FsbGJhY2spIHtcclxuICB2YWxpZGF0ZShbbnVtYmVyLCBjYWxsYmFja10sIFtbJ2ludExpa2UnLCAnPj0wJ10sICdmdW5jdGlvbiddLCAnaXRlcmF0ZScpO1xyXG5cclxuICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlcjsgaSsrKSB7XHJcbiAgICBjYWxsYmFjayhpKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IEFyciwgYXJyYXksIGl0ZXJhdGUgfTtcclxuIiwiLyoqXHJcbiAqIEBtb2R1bGUgQmxvYk9iamVjdFxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAbWl4aW5cclxuICogQGRlc2NyaXB0aW9uIEV4cG9ydHMgQmxvYk9iamVjdCBjbGFzcy5cclxuICovXHJcblxyXG5pbXBvcnQgeyBTdXBlciB9IGZyb20gJy4vU3VwZXInO1xyXG5pbXBvcnQgeyBQcm9taXNlIH0gZnJvbSAnLi9Qcm9taXNlJztcclxuaW1wb3J0IHsgY29uc3RydWN0b3JzIH0gZnJvbSAnLi9jb25zdGFudHMnO1xyXG5pbXBvcnQge1xyXG4gIGlzQXJyYXksIGlzRnVuY3Rpb24sXHJcbiAgdG9TdHJpbmdUYWcsIFN5bWJvbCwgZGVmaW5lUHJvcGVydGllc1xyXG59IGZyb20gJy4vaGVscGVycyc7XHJcblxyXG4vKipcclxuICogQHR5cGVkZWYge3sgYnVmZmVyOiBTdHJpbmcsIGJpbmFyeTogU3RyaW5nLCBkYXRhVVJMOiBTdHJpbmcsIHRleHQ6IFN0cmluZyB9fSBtZXRob2RzXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBkZXNjcmlwdGlvbiBMaXN0IG9mIHJlYWQgYmxvYiBtZXRob2RzLlxyXG4gKi9cclxuY29uc3QgbWV0aG9kcyA9IHtcclxuICBidWZmZXI6ICdBcnJheUJ1ZmZlcicsXHJcbiAgYmluYXJ5OiAnQmluYXJ5U3RyaW5nJyxcclxuICBkYXRhVVJMOiAnRGF0YVVSTCcsXHJcbiAgdGV4dDogJ1RleHQnXHJcbn07XHJcbmNvbnN0IHsgVVJMIH0gPSBnbG9iYWw7XHJcblxyXG4vKipcclxuICogQHR5cGVkZWYgeygnYnVmZmVyJ3wnYmluYXJ5J3wnZGF0YVVSTCd8J3RleHQnKX0gUmVhZEJsb2JNZXRob2RcclxuICogQHB1YmxpY1xyXG4gKiBAZGVzY3JpcHRpb24gRW51bSB0eXBlIG9mIHJlYWQgYmxvYiBtZXRob2RzLlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAdHlwZWRlZiB7QXJyYXlCdWZmZXJ8QXJyYXlCdWZmZXJWaWV3fEJsb2J8U3RyaW5nfSBCbG9iUGFydHNcclxuICogQHB1YmxpY1xyXG4gKiBAZGVzY3JpcHRpb24gQWxsb3dlZCBibG9iIHBhcnRzLlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAY2FsbGJhY2sgUmVhZGVyRXZlbnRMaXN0ZW5lclxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7RXZlbnR9IGUgLSBGaXJlZCBldmVudC5cclxuICogQHBhcmFtIHtGaWxlUmVhZGVyfSByZWFkZXIgLSBGaWxlUmVhZGVyLlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAY2xhc3MgQmxvYk9iamVjdFxyXG4gKiBAZXh0ZW5kcyBTdXBlclxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7QmxvYn0gYmxvYiAtIEJsb2IgdG8gd3JhcC5cclxuICogQHJldHVybnMge0Jsb2JPYmplY3R9IEluc3RhbmNlIG9mIEJsb2JPYmplY3QuXHJcbiAqIEBkZXNjcmlwdGlvbiBXcmFwIG9mIGEgYmxvYi5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogbmV3IEJsb2JPYmplY3QobmV3IEJsb2IoWyd7XCJmb29cIjpcImJhclwifSddLCB7IHR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyB9KSk7XHJcbiAqL1xyXG5jbGFzcyBCbG9iT2JqZWN0IGV4dGVuZHMgU3VwZXIge1xyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIgQmxvYk9iamVjdCMkXHJcbiAgICogQHR5cGUge0Jsb2J9XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBkZXNjcmlwdGlvbiBPcmlnaW5hbCBCbG9iLlxyXG4gICAqL1xyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtTdHJpbmd9IEJsb2JPYmplY3QjZGF0YVVSTFxyXG4gICAqIEB0eXBlIHtTdHJpbmd9XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZWFkb25seVxyXG4gICAqIEBkZXNjcmlwdGlvbiBSZXR1cm5zIGRhdGFVUkwgcmVwcmVzZW50YXRpb24gb2YgdGhlIGJsb2IuXHJcbiAgICovXHJcbiAgZ2V0IGRhdGFVUkwoKSB7XHJcbiAgICByZXR1cm4gVVJMLmNyZWF0ZU9iamVjdFVSTCh0aGlzLiQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBCbG9iT2JqZWN0I3JlYWRBc1xyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1JlYWRCbG9iTWV0aG9kfSBtZXRob2QgLSBNZXRob2QgdGhhdCBpcyB1c2VkIGZvciByZWFkaW5nIGZyb20gYmxvYi5cclxuICAgKiBAcGFyYW0ge1JlYWRlckV2ZW50TGlzdGVuZXJ9IFtwcm9ncmVzc10gLSBQcm9ncmVzcyBsaXN0ZW5lci5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSB0aGF0IGNvdWxkIGJlIGFib3J0ZWQuXHJcbiAgICogQGRlc2NyaXB0aW9uIE1ldGhvZCBmb3IgcmVhZGluZyBmcm9tIGJsb2JzLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgQmxvYk9iamVjdChuZXcgQmxvYihbJ3tcImZvb1wiOlwiYmFyXCJ9J10sIHsgdHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nIH0pKVxyXG4gICAqICAgLnJlYWRBcygndGV4dCcpXHJcbiAgICogICAudGhlbigodmFsdWUpID0+IHtcclxuICAgKiAgICAgY29uc29sZS5sb2codmFsdWUpOyAvLyAne1wiZm9vXCI6XCJiYXJcIn0nXHJcbiAgICogICB9KTtcclxuICAgKi9cclxuICByZWFkQXMobWV0aG9kLCBwcm9ncmVzcykge1xyXG4gICAgaWYgKCFtZXRob2RzW21ldGhvZF0pIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCcxc3QgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgZm9sbG93aW5nIHZhbHVlczogYnVmZmVyLCBiaW5hcnksIGRhdGFVUkwsIHRleHQnKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcclxuICAgIGxldCB0b1JlamVjdDtcclxuXHJcbiAgICBpZiAoaXNGdW5jdGlvbihwcm9ncmVzcykpIHtcclxuICAgICAgcmVhZGVyLm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIHByb2dyZXNzKGUsIHRoaXMpO1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIHRvUmVqZWN0ID0gcmVqZWN0O1xyXG5cclxuICAgICAgcmVhZGVyLm9uZXJyb3IgPSAoeyB0YXJnZXQgfSkgPT4ge1xyXG4gICAgICAgIGlmIChyZWFkZXIpIHtcclxuICAgICAgICAgIHJlamVjdCh0YXJnZXQuZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIHJlYWRlci5vbmxvYWQgPSAoeyB0YXJnZXQgfSkgPT4ge1xyXG4gICAgICAgIHJlc29sdmUodGFyZ2V0LnJlc3VsdCk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICByZWFkZXJbYHJlYWRBcyR7IG1ldGhvZHNbbWV0aG9kXSB9YF0odGhpcy4kKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHByb21pc2UuYWJvcnQgPSBmdW5jdGlvbiBhYm9ydCgpIHtcclxuICAgICAgdG9SZWplY3QobmV3IEVycm9yKCdSZWFkaW5nIHdhcyBhYm9ydGVkJykpO1xyXG5cclxuICAgICAgcmVhZGVyLmFib3J0KCk7XHJcblxyXG4gICAgICByZWFkZXIgPSBudWxsO1xyXG5cclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBwcm9taXNlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBCbG9iT2JqZWN0I3NhdmVBc1xyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1N0cmluZ30gW25hbWVdIC0gTmFtZSB0aGF0IGlzIHVzZWQgZm9yIHNhdmluZyBmaWxlLlxyXG4gICAqIEByZXR1cm5zIHtCbG9iT2JqZWN0fSBSZXR1cm5zIHRoaXMuXHJcbiAgICogQGRlc2NyaXB0aW9uIE1ldGhvZCBmb3Igc2F2aW5nIGJsb2JzLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgQmxvYk9iamVjdChuZXcgQmxvYihbJ3tcImZvb1wiOlwiYmFyXCJ9J10sIHsgdHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nIH0pKVxyXG4gICAqICAgLnNhdmVBcygnYmxvYi5qc29uJyk7XHJcbiAgICovXHJcbiAgc2F2ZUFzKG5hbWUgPSAnZG93bmxvYWQnKSB7XHJcbiAgICBjb25zdCBhbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XHJcblxyXG4gICAgYW5jaG9yLmhyZWYgPSB0aGlzLmRhdGFVUkw7XHJcbiAgICBhbmNob3Iuc2V0QXR0cmlidXRlKCdkb3dubG9hZCcsIG5hbWUpO1xyXG4gICAgYW5jaG9yLmNsaWNrKCk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG59XHJcblxyXG5kZWZpbmVQcm9wZXJ0aWVzKEJsb2JPYmplY3QucHJvdG90eXBlLCB7XHJcbiAgW1N5bWJvbC50b1N0cmluZ1RhZ106ICdCbG9iT2JqZWN0J1xyXG59KTtcclxuXHJcbmNvbnN0cnVjdG9yc1sxXS5wdXNoKHtcclxuICBjaGVjazogKGJsb2IpID0+IC9eKEJsb2J8RmlsZSkkLy50ZXN0KHRvU3RyaW5nVGFnKGJsb2IpKSxcclxuICBjbHM6IEJsb2JPYmplY3RcclxufSk7XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uIGJsb2JcclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0geyhCbG9iUGFydHNbXXxCbG9iUGFydHMpfSBibG9iUGFydHMgLSBCbG9iIHBhcnRzIHRoYXQgYXJlIHBhc3NlZCB0b1xyXG4gKiBbQmxvYl17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0Jsb2IvQmxvYn0gY29uc3RydWN0b3IuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBPcHRpb25zIHRoYXQgYXJlIHBhc3NlZCB0b1xyXG4gKiBbQmxvYl17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0Jsb2IvQmxvYn0gY29uc3RydWN0b3IuXHJcbiAqIEByZXR1cm5zIHtCbG9iT2JqZWN0fSBOZXcgaW5zdGFuY2Ugb2YgQmxvYk9iamVjdC5cclxuICogQGRlc2NyaXB0aW9uIEZ1bmN0aW9uIGZvciBjcmVhdGluZyBibG9icyBub3QgaW52b2x2aW5nIEJsb2JPYmplY3QgYW5kIEJsb2IgY29uc3RydWN0b3JzLlxyXG4gKi9cclxuZnVuY3Rpb24gYmxvYihibG9iUGFydHMsIG9wdGlvbnMgPSB7fSkge1xyXG4gIGlmICghaXNBcnJheShibG9iUGFydHMpKSB7XHJcbiAgICBibG9iUGFydHMgPSBbYmxvYlBhcnRzXTtcclxuICB9XHJcblxyXG4gIHJldHVybiBuZXcgQmxvYk9iamVjdChuZXcgQmxvYihibG9iUGFydHMsIG9wdGlvbnMpKTtcclxufVxyXG5cclxuZXhwb3J0IHsgQmxvYk9iamVjdCwgYmxvYiB9O1xyXG4iLCIvKipcclxuICogQG1vZHVsZSBTdHJcclxuICogQHByaXZhdGVcclxuICogQG1peGluXHJcbiAqIEBkZXNjcmlwdGlvbiBFeHBvcnRzIFN0ciBjbGFzcy5cclxuICovXHJcblxyXG5pbXBvcnQgeyBEIH0gZnJvbSAnLi9EJztcclxuaW1wb3J0IHsgU3VwZXIgfSBmcm9tICcuL1N1cGVyJztcclxuaW1wb3J0IHsgY29uc3RydWN0b3JzLCByZWdleHBTcGVjaWFsQ2hhcmFjdGVycyB9IGZyb20gJy4vY29uc3RhbnRzJztcclxuaW1wb3J0IHtcclxuICBpc0Z1bmN0aW9uLCBpc051bWJlckxpa2UsIGlzT2JqZWN0LCBpc1N0cmluZyxcclxuICB2YWxpZGF0ZSwgU3ltYm9sLCBkZWZpbmVQcm9wZXJ0aWVzLCBpdGVyYXRlXHJcbn0gZnJvbSAnLi9oZWxwZXJzJztcclxuXHJcbmNvbnN0IGh0bWxTcGVjaWFscyA9IHtcclxuICAnJic6ICcmYW1wOycsXHJcbiAgJzwnOiAnJmx0OycsXHJcbiAgJz4nOiAnJmd0OydcclxufTtcclxuY29uc3QgcmVnZXhwU3BlY2lhbHNSZWdleHAgPSBuZXcgUmVnRXhwKFxyXG4gIG5ldyBTdXBlcihyZWdleHBTcGVjaWFsQ2hhcmFjdGVycylcclxuICAgIC53b3JkKCh4KSA9PiBgXFxcXCR7IHggfXxgKVxyXG4gICAgLnJlcGxhY2UoL1xcfCQvLCAnJyksXHJcbiAgJ2cnXHJcbik7XHJcblxyXG4vKipcclxuICogQGNsYXNzIFN0clxyXG4gKiBAZXh0ZW5kcyBTdXBlclxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBbc3RyaW5nID0gJyddIC0gQSBzdHJpbmcgdG8gd3JhcC5cclxuICogQHJldHVybnMge1N0cn0gSW5zdGFuY2Ugb2YgU3RyLlxyXG4gKiBAZGVzY3JpcHRpb24gV3JhcCBvZiBhIHN0cmluZy5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogY29uc3QgcyA9IG5ldyBOdW0oJzEnKTtcclxuICovXHJcbmNsYXNzIFN0ciBleHRlbmRzIFN1cGVyIHtcclxuICBjb25zdHJ1Y3RvcihzdHJpbmcgPSAnJykge1xyXG4gICAgc3VwZXIoYCR7IHN0cmluZyB9YCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAbWVtYmVyIFN0ciMkXHJcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxyXG4gICAgICogQHB1YmxpY1xyXG4gICAgICogQGRlc2NyaXB0aW9uIE9yaWdpbmFsIHN0cmluZy5cclxuICAgICAqL1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdHIjY2FwaXRhbGl6ZUZpcnN0XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZXR1cm5zIHtTdHJ9IENhcGl0YWxpemVkIHN0cmluZy5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIGNhcGl0YWxpemluZyB0aGUgZmlyc3Qgc3ltYm9sLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgU3RyKCdmb28nKS5jYXBpdGFsaXplRmlyc3QoKS4kOyAvLyAnRm9vJ1xyXG4gICAqL1xyXG4gIGNhcGl0YWxpemVGaXJzdCgpIHtcclxuICAgIGNvbnN0IHN0cmluZyA9IHRoaXMuJDtcclxuXHJcbiAgICByZXR1cm4gbmV3IFN0cihzdHJpbmcuc2xpY2UoMCwgMSkudG9VcHBlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIFN0ciNlbmRzV2l0aFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2VhcmNoU3RyaW5nIC0gU2VlIHRoZSBsaW5rLlxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbcG9zaXRpb24gPSBzdHJpbmcubGVuZ3RoXSAtIFNlZSB0aGUgbGluay5cclxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gSWYgdGhlIHN0cmluZyBlbmRzIHdpdGggdGhlIGFyZ3VtZW50IHN0cmluZy5cclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9lbmRzV2l0aFxyXG4gICAqIEBkZXNjcmlwdGlvbiBTeW5vbnltIGZvclxyXG4gICAqIFtTdHJpbmcjZW5kc1dpdGhde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9lbmRzV2l0aH0uXHJcbiAgICovXHJcbiAgZW5kc1dpdGgoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbikge1xyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XHJcbiAgICAgIHBvc2l0aW9uID0gdGhpcy4kLmxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpc1xyXG4gICAgICAuc2xpY2UoMCwgcG9zaXRpb24pXHJcbiAgICAgIC5yZXZlcnQoKVxyXG4gICAgICAuc3RhcnRzV2l0aChuZXcgU3RyKHNlYXJjaFN0cmluZykucmV2ZXJ0KCkuJCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIFN0ciNlc2NhcGVIVE1MXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZXR1cm5zIHtTdHJ9IE5ldyBpbnN0YW5jZSBvZiBTdHIuXHJcbiAgICogQGRlc2NyaXB0aW9uIE1ldGhvZHMgZXNjYXBpbmcgXCImXCIsIFwiPFwiIGFuZCBcIj5cIiBzeW1ib2xzLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgU3RyKCdcIjEgPCAyXCIgJiBcIjcgPiA0XCIgYXJlIHRydWUgZXhwcmVzc2lvbnMuJykuZXNjYXBlSFRNTCgpLiQ7XHJcbiAgICogLy8gJ1wiMSAmbHQ7IDJcIiAmYW1wIFwiNyAmZ3Q7IDJcIiBhcmUgdHJ1ZSBleHByZXNzaW9ucy4nXHJcbiAgICovXHJcbiAgZXNjYXBlSFRNTCgpIHtcclxuICAgIGxldCBzdHJpbmcgPSB0aGlzLiQ7XHJcblxyXG4gICAgaXRlcmF0ZShodG1sU3BlY2lhbHMsIChlc2NhcGVkLCBzeW1ib2wpID0+IHtcclxuICAgICAgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UobmV3IFJlZ0V4cChzeW1ib2wsICdnJyksIGVzY2FwZWQpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBTdHIoc3RyaW5nKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgU3RyI2VzY2FwZVJlZ0V4cFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcmV0dXJucyB7U3RyfSBOZXcgaW5zdGFuY2Ugb2YgU3RyLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBNZXRob2QgZXNjYXBpbmcgUmVnRXhwIHNwZWNpYWwgY2hhcmFjdGVycy5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogbmV3IFN0cignKDIxMy45OCAtIFtdIHt9KScpLmVzY2FwZVJlZ0V4cCgpLiQ7IC8vICdcXCgyMTNcXC45OCBcXC0gXFxbXFxdIFxce1xcfVxcKSdcclxuICAgKi9cclxuICBlc2NhcGVSZWdFeHAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5yZXBsYWNlKHJlZ2V4cFNwZWNpYWxzUmVnZXhwLCAnXFxcXCQmJyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIFN0ciNpblxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0geyp9IG9iamVjdCAtIE9iamVjdCB0byBjaGVjayB0aGUgc3RyaW5nIGFzIGEgcHJvcGVydHkgaW4uXHJcbiAgICogQHJldHVybnMge0Jvb2xlYW59IElmIGl0IGlzIGluIHRoZSBvYmplY3Qgb3Igbm90LlxyXG4gICAqIEBkZXNjcmlwdGlvbiBSZXR1cm5zIHN0cmluZyBpbiBvYmplY3QuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBTdHIoJ2EnKS5pbih7IGE6IDEgfSk7IC8vIHRydWVcclxuICAgKiBuZXcgU3RyKCd0b0ZpeGVkJykuaW4oMSk7ICAvLyBmYWxzZVxyXG4gICAqIG5ldyBTdHIoJ2EnKS5pbihudWxsKTsgICAgIC8vIGZhbHNlXHJcbiAgICovXHJcbiAgaW4ob2JqZWN0KSB7XHJcbiAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLiQgaW4gb2JqZWN0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdHIjaW5kZXhPZlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2VhcmNoVmFsdWUgLSBTZWUgdGhlIGxpbmsuXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtmcm9tSW5kZXggPSAwXSAtIFNlZSB0aGUgbGluay5cclxuICAgKiBAcmV0dXJucyB7TnVtYmVyfSBGb3VuZCBpbmRleCBvciAtMS5cclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9pbmRleE9mXHJcbiAgICogQGRlc2NyaXB0aW9uIFN5bm9ueW0gZm9yXHJcbiAgICogW1N0cmluZyNpbmRleE9mXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvaW5kZXhPZn0uXHJcbiAgICovXHJcbiAgaW5kZXhPZihzZWFyY2hWYWx1ZSwgZnJvbUluZGV4KSB7XHJcbiAgICByZXR1cm4gdGhpcy4kLmluZGV4T2YuYXBwbHkodGhpcy4kLCBhcmd1bWVudHMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdHIjbGFzdEluZGV4T2ZcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IHNlYXJjaFZhbHVlIC0gU2VlIHRoZSBsaW5rLlxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbZnJvbUluZGV4ID0gc3RyaW5nLmxlbmd0aF0gLSBTZWUgdGhlIGxpbmsuXHJcbiAgICogQHJldHVybnMge051bWJlcn0gRm91bmQgaW5kZXggb3IgLTEuXHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvbGFzdEluZGV4T2ZcclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3JcclxuICAgKiBbU3RyaW5nI2xhc3RJbmRleE9mXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvbGFzdEluZGV4T2Z9LlxyXG4gICAqL1xyXG4gIGxhc3RJbmRleE9mKHNlYXJjaFZhbHVlLCBmcm9tSW5kZXgpIHtcclxuICAgIHJldHVybiB0aGlzLiQubGFzdEluZGV4T2YuYXBwbHkodGhpcy4kLCBhcmd1bWVudHMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciBTdHIjbGVuZ3RoXHJcbiAgICogQHR5cGUge051bWJlcn1cclxuICAgKiBAcHVibGljXHJcbiAgICogQHJlYWRvbmx5XHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvbGVuZ3RoXHJcbiAgICogQGRlc2NyaXB0aW9uIFN5bm9ueW0gZm9yXHJcbiAgICogW1N0cmluZyNsZW5ndGhde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9sZW5ndGh9LlxyXG4gICAqL1xyXG4gIGdldCBsZW5ndGgoKSB7XHJcbiAgICByZXR1cm4gdGhpcy4kLmxlbmd0aDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgU3RyI21hdGNoXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZXR1cm5zIHtBcnJ8U3VwZXJ9IEQtV3JhcCBvZiBmb3VuZCBtYXRjaC5cclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9tYXRjaFxyXG4gICAqIEBkZXNjcmlwdGlvbiBTeW5vbnltIGZvclxyXG4gICAqIFtTdHJpbmcjbWF0Y2hde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9tYXRjaH0uXHJcbiAgICovXHJcbiAgbWF0Y2gocmVnZXhwKSB7XHJcbiAgICByZXR1cm4gRCh0aGlzLiQubWF0Y2guYXBwbHkodGhpcy4kLCBhcmd1bWVudHMpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgU3RyI3JlcGVhdFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge0ludGVnZXJ9IHRpbWVzIC0gVGltZXMgdG8gcmVwZWF0IHRoZSBzdHJpbmcuXHJcbiAgICogQHJldHVybnMge1N0cn0gTmV3IGluc3RhbmNlIG9mIFN0ci5cclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9yZXBlYXRcclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3JcclxuICAgKiBbU3RyaW5nI3JlcGVhdF17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL3JlcGVhdH0uXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBTdHIoJzEyMycpLnJlcGVhdCgyKS4kOyAvLyAnMTIzMTIzJ1xyXG4gICAqIG5ldyBTdHIoJzEyMycpLnJlcGVhdCgwKS4kOyAvLyAnJ1xyXG4gICAqL1xyXG4gIHJlcGVhdCh0aW1lcykge1xyXG4gICAgdmFsaWRhdGUoW3RpbWVzXSwgW1snaW50TGlrZScsICc+PTAnXV0sICdTdHIjcmVwZWF0Jyk7XHJcblxyXG4gICAgdGltZXMgPSArdGltZXM7XHJcblxyXG4gICAgY29uc3Qgc3RyaW5nID0gdGhpcy4kO1xyXG5cclxuICAgIGxldCBzID0gJyc7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aW1lczsgaSsrKSB7XHJcbiAgICAgIHMgKz0gc3RyaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXcgU3RyKHMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdHIjcmVwbGFjZVxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1JlZ0V4cHxTdHJpbmd9IHJlZ2V4cCAtIFNlZSB0aGUgbGluay5cclxuICAgKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gW3JlcGxhY2VyID0gJyddIC0gU2VlIHRoZSBsaW5rLlxyXG4gICAqIEByZXR1cm5zIHtTdHJ9IE5ldyBpbnN0YW5jZSBvZiBTdHIuXHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvcmVwbGFjZVxyXG4gICAqIEBkZXNjcmlwdGlvbiBTeW5vbnltIGZvclxyXG4gICAqIFtTdHJpbmcjcmVwbGFjZV17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL3JlcGxhY2V9XHJcbiAgICogYmVzaWRlcyB0aGF0IHJlcGxhY2VyIGhhcyBhIGRlZmF1bHQgdmFsdWUgb2YgJycuXHJcbiAgICovXHJcbiAgcmVwbGFjZShyZWdleHAsIHJlcGxhY2VyID0gJycpIHtcclxuICAgIHJldHVybiBuZXcgU3RyKHRoaXMuJC5yZXBsYWNlKHJlZ2V4cCwgcmVwbGFjZXIpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgU3RyI3JlcGxhY2VTdHJpbmdcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZyAtIFN0cmluZyB0byByZXBsYWNlLlxyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbcmVwbGFjZXIgPSAnJ10gLSBTdHJpbmcgdG8gcmVwbGFjZSB3aXRoLlxyXG4gICAqIEByZXR1cm5zIHtTdHJ9IE5ldyBpbnN0YW5jZSBvZiBTdHIuXHJcbiAgICogQGRlc2NyaXB0aW9uIE1ldGhvZCBmb3IgZ2xvYmFsIHN0cmluZyByZXBsYWNlaW5nLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgU3RyKCcxMjMxMjMnKS5yZXBsYWNlU3RyaW5nKCcxJywgJzQnKS4kOyAvLyAnNDIzNDIzJ1xyXG4gICAqIG5ldyBTdHIoJzEyMzEyMycpLnJlcGxhY2VTdHJpbmcoJzEnKS4kOyAgICAgIC8vICcyMzIzJ1xyXG4gICAqL1xyXG4gIHJlcGxhY2VTdHJpbmcoc3RyaW5nLCByZXBsYWNlciA9ICcnKSB7XHJcbiAgICBzdHJpbmcgPSBuZXcgU3VwZXIoc3RyaW5nKS4kO1xyXG5cclxuICAgIHZhbGlkYXRlKFtzdHJpbmddLCBbJ3N0cmluZyddLCAnU3RyI3JlcGxhY2VTdHJpbmcnKTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFN0cih0aGlzLiQuc3BsaXQoc3RyaW5nKS5qb2luKHJlcGxhY2VyKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIFN0ciNyZXZlcnRcclxuICAgKiBAcHVibGljXHJcbiAgICogQHJldHVybnMge1N0cn0gTmV3IGluc3RhbmNlIG9mIHN0cmluZy5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIGZvciByZXZlcnRpbmcgYSBzdHJpbmcuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBTdHIoJzEyMzQnKS5yZXZlcnQoKS4kOyAvLyAnNDMyMSdcclxuICAgKi9cclxuICByZXZlcnQoKSB7XHJcbiAgICBjb25zdCBzdHJpbmcgPSB0aGlzLiQ7XHJcbiAgICBsZXQgc3RyID0gJyc7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IHN0cmluZy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICBzdHIgKz0gc3RyaW5nW2ldO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXcgU3RyKHN0cik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIFN0ciNzZWFyY2hcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtSZWdFeHB9IHJlZ2V4cCAtIFNlZSB0aGUgbGluay5cclxuICAgKiBAcmV0dXJucyB7TnVtYmVyfSBJbmRleCBvZiB0aGUgZmlyc3QgbWF0Y2gsIGlmIGZvdW5kLCBhbmQgLTEgaWYgbm90LlxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL3NlYXJjaFxyXG4gICAqIEBkZXNjcmlwdGlvbiBTeW5vbnltIGZvclxyXG4gICAqIFtTdHJpbmcjc2VhcmNoXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvc2VhcmNofS5cclxuICAgKi9cclxuICBzZWFyY2gocmVnZXhwKSB7XHJcbiAgICB2YWxpZGF0ZShbcmVnZXhwXSwgWydyZWdleHAnXSk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuJC5zZWFyY2guYXBwbHkodGhpcy4kLCBhcmd1bWVudHMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdHIjc2xpY2VcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtiZWdpblNsaWNlID0gMF0gLSBTZWUgdGhlIGxpbmsuXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtlbmRTbGljZSA9IHN0cmluZy5sZW5ndGhdIC0gU2VlIHRoZSBsaW5rLlxyXG4gICAqIEByZXR1cm5zIHtTdHJ9IE5ldyBpbnN0YW5jZSBvZiBTdHIuXHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvc2xpY2VcclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3JcclxuICAgKiBbU3RyaW5nI3NsaWNlXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvc2xpY2V9LlxyXG4gICAqL1xyXG4gIHNsaWNlKGJlZ2luU2xpY2UsIGVuZFNsaWNlKSB7XHJcbiAgICByZXR1cm4gbmV3IFN0cih0aGlzLiQuc2xpY2UuYXBwbHkodGhpcy4kLCBhcmd1bWVudHMpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgU3RyI3NwbGl0XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7UmVnRXhwfFN0cmluZ30gW3NlcGFyYXRvcl0gLSBTZWUgdGhlIGxpbmsuXHJcbiAgICogQHJldHVybnMge0FycnxTdXBlcn0gRC1XcmFwIG9mIHRoZSBhcnJheS5cclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9zcGxpdFxyXG4gICAqIEBkZXNjcmlwdGlvbiBTeW5vbnltIGZvclxyXG4gICAqIFtTdHJpbmcjc3BsaXRde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9zcGxpdH0uXHJcbiAgICovXHJcbiAgc3BsaXQoc2VwYXJhdG9yKSB7XHJcbiAgICByZXR1cm4gRCh0aGlzLiQuc3BsaXQuYXBwbHkodGhpcy4kLCBhcmd1bWVudHMpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgU3RyI3N0YXJ0c1dpdGhcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IHNlYXJjaFN0cmluZyAtIFNlZSB0aGUgbGluay5cclxuICAgKiBAcGFyYW0ge051bWJlcn0gW3Bvc2l0aW9uID0gMF0gLSBTZWUgdGhlIGxpbmsuXHJcbiAgICogQHJldHVybnMge0Jvb2xlYW59IElmIHRoZSBzdHJpbmcgZW5kcyB3aXRoIHRoZSBhcmd1bWVudCBzdHJpbmcuXHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvc3RhcnRzV2l0aFxyXG4gICAqIEBkZXNjcmlwdGlvbiBTeW5vbnltIGZvclxyXG4gICAqIFtTdHJpbmcjc3RhcnRzV2l0aF17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL3N0YXJ0c1dpdGh9LlxyXG4gICAqL1xyXG4gIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbiA9IDApIHtcclxuICAgIHJldHVybiB0aGlzLiQuaW5kZXhPZi5hcHBseSh0aGlzLiQsIGFyZ3VtZW50cykgPT09IHBvc2l0aW9uO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdHIjc3Vic3RyXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbc3RhcnQgPSAwXSAtIFNlZSB0aGUgbGluay5cclxuICAgKiBAcGFyYW0ge051bWJlcn0gW2xlbmd0aCA9IHN0cmluZy5sZW5ndGhdIC0gU2VlIHRoZSBsaW5rLlxyXG4gICAqIEByZXR1cm5zIHtTdHJ9IE5ldyBpbnN0YW5jZSBvZiBTdHIuXHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvc3Vic3RyXHJcbiAgICogQGRlc2NyaXB0aW9uIFN5bm9ueW0gZm9yXHJcbiAgICogW1N0cmluZyNzdWJzdHJde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9zdWJzdHJ9LlxyXG4gICAqL1xyXG4gIHN1YnN0cihzdGFydCwgbGVuZ3RoKSB7XHJcbiAgICByZXR1cm4gbmV3IFN0cih0aGlzLiQuc3Vic3RyLmFwcGx5KHRoaXMuJCwgYXJndW1lbnRzKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIFN0ciNzdWJzdHJpbmdcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtpbmRleFN0YXJ0ID0gMF0gLSBTZWUgdGhlIGxpbmsuXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtpbmRleEVuZCA9IHN0cmluZy5sZW5ndGhdIC0gU2VlIHRoZSBsaW5rLlxyXG4gICAqIEByZXR1cm5zIHtTdHJ9IE5ldyBpbnN0YW5jZSBvZiBTdHIuXHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvc3Vic3RyaW5nXHJcbiAgICogQGRlc2NyaXB0aW9uIFN5bm9ueW0gZm9yXHJcbiAgICogW1N0cmluZyNzdWJzdHJpbmdde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9zdWJzdHJpbmd9LlxyXG4gICAqL1xyXG4gIHN1YnN0cmluZyhpbmRleFN0YXJ0LCBpbmRleEVuZCkge1xyXG4gICAgcmV0dXJuIG5ldyBTdHIodGhpcy4kLnN1YnN0cmluZy5hcHBseSh0aGlzLiQsIGFyZ3VtZW50cykpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdHIjdG9DYW1lbENhc2VcclxuICAgKiBAcHVibGljXHJcbiAgICogQHJldHVybnMge1N0cn0gTmV3IGluc3RhbmNlIG9mIFN0ci5cclxuICAgKiBAZGVzY3JpcHRpb24gUmVtb3ZlcyBmb2xsb3dpbmcgcmVnZXhwIC9cXHNcXC1fXFwuLyBtYWtpbmcgdGhlIHN0cmluZyBjYW1lbCBjYXNlZC5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogbmV3IFN0cignc3BpbmFsLWNhc2UnKS50b0NhbWVsQ2FzZSgpLiQ7ICAvLyAnc3BpbmFsQ2FzZSdcclxuICAgKiBuZXcgU3RyKCdfc25ha2VfY2FzZV8nKS50b0NhbWVsQ2FzZSgpLiQ7IC8vICdzbmFrZUNhc2UnXHJcbiAgICovXHJcbiAgdG9DYW1lbENhc2UoKSB7XHJcbiAgICByZXR1cm4gbmV3IFN0cih0cmltKHRoaXMuJClcclxuICAgICAgLnJlcGxhY2UoL1tcXHNcXC1fLl0rL2csICctJylcclxuICAgICAgLnJlcGxhY2UoLy1bXi1dL2csIChtYXRjaCkgPT4gbWF0Y2hbMV0udG9VcHBlckNhc2UoKSlcclxuICAgICAgLnJlcGxhY2UoL15bXFxTXS8sIChtYXRjaCkgPT4gbWF0Y2gudG9Mb3dlckNhc2UoKSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIFN0ciN0b0NhcGl0YWxDYXNlXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZXR1cm5zIHtTdHJ9IE5ldyBpbnN0YW5jZSBvZiBTdHIuXHJcbiAgICogQGRlc2NyaXB0aW9uIFJlbW92ZXMgZm9sbG93aW5nIHJlZ2V4cCAvXFwtX1xcLi8gbWFraW5nIHRoZSBzdHJpbmcgY2FwaXRhbCBsZXR0ZXIgY2FzZWQuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBTdHIoJ3NwaW5hbC1jYXNlJykudG9DYXBpdGFsQ2FzZSgpLiQ7ICAvLyAnU3BpbmFsIENhc2UnXHJcbiAgICogbmV3IFN0cignX3NuYWtlX2Nhc2VfJykudG9DYXBpdGFsQ2FzZSgpLiQ7IC8vICdTbmFrZSBDYXNlJ1xyXG4gICAqL1xyXG4gIHRvQ2FwaXRhbENhc2UoKSB7XHJcbiAgICByZXR1cm4gbmV3IFN0cih0cmltKHRoaXMuJClcclxuICAgICAgLnJlcGxhY2UoL1tcXHNcXC1fLl0rL2csICcgJylcclxuICAgICAgLnJlcGxhY2UoL1tcXFNdL2csIChtYXRjaCkgPT4gKFxyXG4gICAgICAgIG1hdGNoLnRvTG93ZXJDYXNlKCkgPT09IG1hdGNoID8gbWF0Y2ggOiBgICR7IG1hdGNoIH1gXHJcbiAgICAgICkpXHJcbiAgICAgIC5yZXBsYWNlKC9cXHNbXFxTXS9nLCAobWF0Y2gpID0+IG1hdGNoLnRvVXBwZXJDYXNlKCkpXHJcbiAgICAgIC5yZXBsYWNlKC9cXHMrL2csICcgJylcclxuICAgICAgLnJlcGxhY2UoL15cXHMvLCAnJylcclxuICAgICAgLnJlcGxhY2UoL15bXFxTXS8sIChtYXRjaCkgPT4gbWF0Y2gudG9VcHBlckNhc2UoKSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIFN0ciN0b0RvdENhc2VcclxuICAgKiBAcHVibGljXHJcbiAgICogQHJldHVybnMge1N0cn0gTmV3IGluc3RhbmNlIG9mIFN0ci5cclxuICAgKiBAZGVzY3JpcHRpb24gUmVtb3ZlcyBmb2xsb3dpbmcgcmVnZXhwIC9cXC1fXFwuLyBtYWtpbmcgdGhlIHN0cmluZyBkb3QgY2FzZWQuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBTdHIoJ3NwaW5hbC1jYXNlJykudG9Eb3RDYXNlKCkuJDsgIC8vICdzcGluYWwuY2FzZSdcclxuICAgKiBuZXcgU3RyKCdfc25ha2VfY2FzZV8nKS50b0RvdENhc2UoKS4kOyAvLyAnc25ha2UuY2FzZSdcclxuICAgKi9cclxuICB0b0RvdENhc2UoKSB7XHJcbiAgICByZXR1cm4gbmV3IFN0cih0cmltKHRoaXMuJClcclxuICAgICAgLnJlcGxhY2UoL1tcXHNcXC1fLl0rL2csICcuJylcclxuICAgICAgLnJlcGxhY2UoL1teLl0vZywgKG1hdGNoKSA9PiAoXHJcbiAgICAgICAgbWF0Y2gudG9Mb3dlckNhc2UoKSA9PT0gbWF0Y2ggPyBtYXRjaCA6IGAuJHsgbWF0Y2ggfWBcclxuICAgICAgKSlcclxuICAgICAgLnJlcGxhY2UoL1xcLisvZywgJy4nKVxyXG4gICAgICAucmVwbGFjZSgvXlxcLi8sICcnKVxyXG4gICAgICAudG9Mb3dlckNhc2UoKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgU3RyI3RvSHlwaGVuQ2FzZVxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcmV0dXJucyB7U3RyfSBOZXcgaW5zdGFuY2Ugb2YgU3RyLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBSZW1vdmVzIGZvbGxvd2luZyByZWdleHAgL1xcc1xcLV9cXC4vIG1ha2luZyB0aGUgc3RyaW5nIGNhbWVsIGNhc2VkLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgU3RyKCdjYW1lbENhc2UnKS50b1NwaW5hbENhc2UoKS4kOyAgICAvLyAnY2FtZWwtY2FzZSdcclxuICAgKiBuZXcgU3RyKCdfc25ha2VfY2FzZV8nKS50b1NwaW5hbENhc2UoKS4kOyAvLyAnc25ha2UtY2FzZSdcclxuICAgKi9cclxuICB0b0h5cGhlbkNhc2UoKSB7XHJcbiAgICByZXR1cm4gbmV3IFN0cih0cmltKHRoaXMuJClcclxuICAgICAgLnJlcGxhY2UoL1tcXHNcXC1fLl0rL2csICctJylcclxuICAgICAgLnJlcGxhY2UoL1teLV0vZywgKG1hdGNoKSA9PiAoXHJcbiAgICAgICAgbWF0Y2gudG9Mb3dlckNhc2UoKSA9PT0gbWF0Y2ggPyBtYXRjaCA6IGAtJHsgbWF0Y2ggfWBcclxuICAgICAgKSlcclxuICAgICAgLnJlcGxhY2UoLy0rL2csICctJylcclxuICAgICAgLnJlcGxhY2UoL14tLywgJycpXHJcbiAgICAgIC50b0xvd2VyQ2FzZSgpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdHIjdG9Mb3dlckNhc2VcclxuICAgKiBAcHVibGljXHJcbiAgICogQHJldHVybnMge1N0cn0gTmV3IGluc3RhbmNlIG9mIFN0ci5cclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy90b0xvd2VyQ2FzZVxyXG4gICAqIEBkZXNjcmlwdGlvbiBTeW5vbnltIGZvclxyXG4gICAqIFtTdHJpbmcjdG9Mb3dlckNhc2Vde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy90b0xvd2VyQ2FzZX0uXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBTdHIoJ1VQUEVSLUNBU0UnKS50b0xvd2VyQ2FzZSgpLiQ7ICAvLyAndXBwZXItY2FzZSdcclxuICAgKi9cclxuICB0b0xvd2VyQ2FzZSgpIHtcclxuICAgIHJldHVybiBuZXcgU3RyKHRoaXMuJC50b0xvd2VyQ2FzZSgpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgU3RyI3RvU25ha2VDYXNlXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZXR1cm5zIHtTdHJ9IE5ldyBpbnN0YW5jZSBvZiBTdHIuXHJcbiAgICogQGRlc2NyaXB0aW9uIFJlbW92ZXMgZm9sbG93aW5nIHJlZ2V4cCAvXFxzXFwtXFwuLyBtYWtpbmcgdGhlIHN0cmluZyBzcGluYWwgY2FzZWQuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBTdHIoJ3NwaW5hbC1jYXNlJykudG9TbmFrZUNhc2UoKS4kOyAvLyAnc3BpbmFsX2Nhc2UnXHJcbiAgICogbmV3IFN0cignY2FtZWxDYXNlJykudG9TbmFrZUNhc2UoKS4kOyAgIC8vICdjYW1lbF9jYXNlJ1xyXG4gICAqL1xyXG4gIHRvU25ha2VDYXNlKCkge1xyXG4gICAgcmV0dXJuIG5ldyBTdHIodHJpbSh0aGlzLiQpXHJcbiAgICAgIC5yZXBsYWNlKC9bXFxzXFwtXy5dKy9nLCAnXycpXHJcbiAgICAgIC5yZXBsYWNlKC9bXl9dL2csIChtYXRjaCkgPT4gKFxyXG4gICAgICAgIG1hdGNoLnRvTG93ZXJDYXNlKCkgPT09IG1hdGNoID8gbWF0Y2ggOiBgXyR7IG1hdGNoIH1gXHJcbiAgICAgICkpXHJcbiAgICAgIC5yZXBsYWNlKC9fKy9nLCAnXycpXHJcbiAgICAgIC5yZXBsYWNlKC9eXy8sICcnKVxyXG4gICAgICAudG9Mb3dlckNhc2UoKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgU3RyI3RvU3BhY2VDYXNlXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZXR1cm5zIHtTdHJ9IE5ldyBpbnN0YW5jZSBvZiBTdHIuXHJcbiAgICogQGRlc2NyaXB0aW9uIFJlbW92ZXMgZm9sbG93aW5nIHJlZ2V4cCAvXFwtX1xcLi8gbWFraW5nIHRoZSBzdHJpbmcgc3BhY2UgY2FzZWQuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBTdHIoJ3NwaW5hbC1jYXNlJykudG9TcGFjZUNhc2UoKS4kOyAgLy8gJ3NwaW5hbCBjYXNlJ1xyXG4gICAqIG5ldyBTdHIoJ19zbmFrZV9jYXNlXycpLnRvU3BhY2VDYXNlKCkuJDsgLy8gJ3NuYWtlIGNhc2UnXHJcbiAgICovXHJcbiAgdG9TcGFjZUNhc2UoKSB7XHJcbiAgICByZXR1cm4gbmV3IFN0cih0cmltKHRoaXMuJClcclxuICAgICAgLnJlcGxhY2UoL1tcXHNcXC1fLl0rL2csICcgJylcclxuICAgICAgLnJlcGxhY2UoL1tcXFNdL2csIChtYXRjaCkgPT4gKFxyXG4gICAgICAgIG1hdGNoLnRvTG93ZXJDYXNlKCkgPT09IG1hdGNoID8gbWF0Y2ggOiBgICR7IG1hdGNoIH1gXHJcbiAgICAgICkpXHJcbiAgICAgIC5yZXBsYWNlKC9cXHMrL2csICcgJylcclxuICAgICAgLnJlcGxhY2UoL15cXHMvLCAnJylcclxuICAgICAgLnRvTG93ZXJDYXNlKClcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICB0b1N0cmluZygpIHtcclxuICAgIHJldHVybiB0aGlzLiQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIFN0ciN0b1VwcGVyQ2FzZVxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcmV0dXJucyB7U3RyfSBOZXcgaW5zdGFuY2Ugb2YgU3RyLlxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL3RvVXBwZXJDYXNlXHJcbiAgICogQGRlc2NyaXB0aW9uIFN5bm9ueW0gZm9yXHJcbiAgICogW1N0cmluZyN0b1VwcGVyQ2FzZV17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL3RvVXBwZXJDYXNlfS5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogbmV3IFN0cignbG93ZXItY2FzZScpLnRvVXBwZXJDYXNlKCkuJDsgIC8vICdMT1dFUi1DQVNFJ1xyXG4gICAqL1xyXG4gIHRvVXBwZXJDYXNlKCkge1xyXG4gICAgcmV0dXJuIG5ldyBTdHIodGhpcy4kLnRvVXBwZXJDYXNlKCkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBTdHIjdHJpbVxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcmV0dXJucyB7U3RyfSBOZXcgaW5zdGFuY2Ugb2YgU3RyLlxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL3RyaW1cclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3JcclxuICAgKiBbU3RyaW5nI3RyaW1de0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy90cmltfS5cclxuICAgKi9cclxuICB0cmltKCkge1xyXG4gICAgcmV0dXJuIG5ldyBTdHIodGhpcy4kLnJlcGxhY2UoL15bXFxzXFx1ZmVmZlxcdTAwYTBdK3xbXFxzXFx1ZmVmZlxcdTAwYTBdKyQvZywgJycpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgU3RyI3RyaW1MZWZ0XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZXR1cm5zIHtTdHJ9IE5ldyBpbnN0YW5jZSBvZiBTdHIuXHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvdHJpbUxlZnRcclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3JcclxuICAgKiBbU3RyaW5nI3RyaW1MZWZ0XXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvdHJpbUxlZnR9LlxyXG4gICAqL1xyXG4gIHRyaW1MZWZ0KCkge1xyXG4gICAgcmV0dXJuIG5ldyBTdHIodGhpcy4kLnJlcGxhY2UoL15bXFxzXFx1ZmVmZlxcdTAwYTBdKy8sICcnKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIFN0ciN0cmltUmlnaHRcclxuICAgKiBAcHVibGljXHJcbiAgICogQHJldHVybnMge1N0cn0gTmV3IGluc3RhbmNlIG9mIFN0ci5cclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy90cmltUmlnaHRcclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3JcclxuICAgKiBbU3RyaW5nI3RyaW1SaWdodF17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL3RyaW1SaWdodH0uXHJcbiAgICovXHJcbiAgdHJpbVJpZ2h0KCkge1xyXG4gICAgcmV0dXJuIG5ldyBTdHIodGhpcy4kLnJlcGxhY2UoL1tcXHNcXHVmZWZmXFx1MDBhMF0rJC8sICcnKSk7XHJcbiAgfVxyXG59XHJcblxyXG5kZWZpbmVQcm9wZXJ0aWVzKFN0ci5wcm90b3R5cGUsIHtcclxuICBbU3ltYm9sLnRvU3RyaW5nVGFnXTogJ1N0cidcclxufSk7XHJcblxyXG5jb25zdHJ1Y3RvcnNbMl0ucHVzaCh7XHJcbiAgY2hlY2s6IGlzU3RyaW5nLFxyXG4gIGNsczogU3RyXHJcbn0pO1xyXG5cclxuZnVuY3Rpb24gdHJpbShzdHJpbmcpIHtcclxuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL15bXFxzXFwtXy5dK3xbXFxzXFwtXy5dKyQvZywgJycpO1xyXG59XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uIHBhcnNlSlNPTlxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBbanNvbiA9IG51bGxdIC0gU3RyaW5nIHRvIHBhcnNlLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gT3B0aW9ucy5cclxuICogQHBhcmFtIHtCb29sZWFufCp9IFtvcHRpb25zLm51bWJlcnNdIC0gSWYgaXQgaXMgbmVlZGVkIHRvIHBhcnNlIG51bWJlci1saWtlIHN0cmluZ3MgYXMgbnVtYmVycy5cclxuICogQHBhcmFtIHtCb29sZWFufCp9IFtvcHRpb25zLmRhdGVzXSAtIElmIGl0IGlzIG5lZWRlZCB0byBwYXJzZSBkYXRlLWxpa2Ugc3RyaW5nIGFzIGRhdGVzLlxyXG4gKiBEYXRlLWxpa2Ugc3RyaW5nIGlzIGNvbnNpZGVyZWQgdG8gbWF0Y2ggXlxcZFxcZFxcZFxcZC1cXGRcXGQtXFxkXFxkVFxcZFxcZDpcXGRcXGQ6XFxkXFxkXFwuXFxkXFxkXFxkWj8kXHJcbiAqIEBwYXJhbSB7SlNPTkNhbGxiYWNrfSBbY2FsbGJhY2tdIC0gQ2FsbGJhY2sgdGhhdCBjYWxsZWQgb24gZXZlcnkgaXRlcmF0aW9uLlxyXG4gKiBAcmV0dXJucyB7RFdyYXB9IEQtV3JhcCBvZiBmb3VuZCBtYXRjaC5cclxuICogQGRlc2NyaXB0aW9uIE1ldGhvZCBmb3IgcGFyc2luZyBqc29uLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBwYXJzZUpTT04oJ3sgXCJhXCI6IDEgfScpLiQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHsgYTogMSB9XHJcbiAqIHBhcnNlSlNPTigneyBcImFcIjogXCIxXCIgfScsIHsgbnVtYmVyczogdHJ1ZSB9KS4kOyAgICAgICAgICAgICAgICAgICAgICAvLyB7IG51bWJlcnM6IHRydWUgfVxyXG4gKiBwYXJzZUpTT04oJ3sgXCJhXCI6IFwiMTk5OS0xMi0zMVQyMzo1OTo1OS45OTlaXCIgfScsIHsgZGF0ZXM6IHRydWUgfSkuJDsgLy8geyBhOiBEYXRlIHsuLi59IH1cclxuICovXHJcbmZ1bmN0aW9uIHBhcnNlSlNPTihqc29uID0gbnVsbCwgb3B0aW9ucyA9IHt9LCBjYWxsYmFjaykge1xyXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDw9IDEpIHtcclxuICAgIHJldHVybiBEKEpTT04ucGFyc2UoanNvbikpO1xyXG4gIH1cclxuXHJcbiAgaWYgKGlzRnVuY3Rpb24ob3B0aW9ucykpIHtcclxuICAgIGNhbGxiYWNrID0gb3B0aW9ucztcclxuICAgIG9wdGlvbnMgPSB7fTtcclxuICB9XHJcblxyXG4gIGNvbnN0IHsgbnVtYmVycywgZGF0ZXMgfSA9IG9wdGlvbnM7XHJcbiAgY29uc3QgcGFyc2VkID0gSlNPTi5wYXJzZShqc29uLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgaWYgKGRhdGVzICYmIC9eXFxkXFxkXFxkXFxkLVxcZFxcZC1cXGRcXGRUXFxkXFxkOlxcZFxcZDpcXGRcXGRcXC5cXGRcXGRcXGRaPyQvLnRlc3QodmFsdWUpKSB7XHJcbiAgICAgIHZhbHVlID0gbmV3IERhdGUodmFsdWUpO1xyXG4gICAgfSBlbHNlIGlmIChudW1iZXJzICYmIGlzTnVtYmVyTGlrZSh2YWx1ZSkgJiYgaXNTdHJpbmcodmFsdWUpKSB7XHJcbiAgICAgIHZhbHVlID0gTnVtYmVyKHZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY2FsbGJhY2sgPyBjYWxsYmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogdmFsdWU7XHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiBEKHBhcnNlZCk7XHJcbn1cclxuXHJcbmV4cG9ydCB7IFN0ciwgcGFyc2VKU09OIH07XHJcbiIsIi8qKlxyXG4gKiBAbW9kdWxlIGhlbHBlcnMvbWFya3VwVG9KU09OXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBkZXNjcmlwdGlvbiBFeHBvcnRzIG1hcmt1cFRvSlNPTiBtZXRob2QuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQXJyIH0gZnJvbSAnLi4vQXJyJztcclxuaW1wb3J0IHsgU3RyIH0gZnJvbSAnLi4vU3RyJztcclxuaW1wb3J0IHsgU3VwZXIgfSBmcm9tICcuLi9TdXBlcic7XHJcbmltcG9ydCB7IHN3aXRjaGVyIH0gZnJvbSAnLi4vU3dpdGNoZXInO1xyXG5pbXBvcnQgeyBodG1sQWxsb3dlZFRhZ1N5bWJvbHMsIGh0bWxBbGxvd2VkQXR0clN5bWJvbHMsIHZvaWRFbGVtZW50cyB9IGZyb20gJy4uL2NvbnN0YW50cyc7XHJcblxyXG4vKipcclxuICogQHR5cGVkZWYge09iamVjdH0gTWFya3VwRWxlbWVudFxyXG4gKiBAcHJvcGVydHkgeydjb21tZW50J3wndGV4dCd8J2VsZW1lbnQnfSB0eXBlIC0gVHlwZSBvZiB0aGUgbm9kZS5cclxuICogQHByb3BlcnR5IHtNYXJrdXBFbGVtZW50fSBwYXJlbnQgLSBUeXBlIG9mIHRoZSBub2RlLlxyXG4gKiBAcHJvcGVydHkge09iamVjdC48U3RyaW5nLCBTdHJpbmc+fSBhdHRycyAtIE5vZGUgYXR0cmlidXRlc1xyXG4gKiBAcHJvcGVydHkge01hcmt1cEVsZW1lbnRbXX0gY2hpbGRyZW4gLSBOb2RlIGNoaWxkcmVuLlxyXG4gKi9cclxuXHJcbmNvbnN0IHN1Ym1pdFN0cmluZyA9ICdQbGVhc2UsIHN1Ym1pdCBhbiBpc3N1ZSBhdCBodHRwczovL2dpdGh1Yi5jb20vZHdheW5lanMvZHdheW5lL2lzc3Vlcy4nO1xyXG5jb25zdCBOT0RFX1JFR0VYX1NFVCA9IG5ldyBTdXBlcih7XHJcbiAgJ3RhZy1vcGVuJzogbmV3IFJlZ0V4cChgPCgkeyBodG1sQWxsb3dlZFRhZ1N5bWJvbHMgfSlcXFxccypgLCAnaScpLFxyXG4gICd0YWctY2xvc2UnOiBjb25zdHJ1Y3RDbG9zZVRhZ1JlZ0V4cChodG1sQWxsb3dlZFRhZ1N5bWJvbHMpLFxyXG4gIGNvbW1lbnQ6IC88IS0tKCg/Oi1bXlxcLT5dfFteXFwtPl0pKD86LT9bXi1dKSpbXi1dP3wpLS0+L1xyXG59KTtcclxuY29uc3QgVEFHX09QRU5fQ0xPU0UgPSAvXihcXC8/KT4vO1xyXG4vLyBjb25zdCBBVFRSSUJVVEUgPSAvXihbXlxcdTAwMDAtXFx1MDAyMFxcc1wiJz5cXC89XSspKD86XFxzKj1cXHMqKCdbXiddKid8XCJbXlwiXSpcInxbXlxcc1wiJ2A8Pj1dKykpP1xccyovO1xyXG5jb25zdCBBVFRSSUJVVEUgPSBuZXcgUmVnRXhwKGBeKCR7IGh0bWxBbGxvd2VkQXR0clN5bWJvbHMgfSkoPzpcXFxccyo9XFxcXHMqKCdbXiddKid8XCJbXlwiXSpcInxbXlxcXFxzXCInXFxgPD49XSspKT9cXFxccypgKTtcclxuY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbmNvbnN0IG5vZGVTd2l0Y2hlciA9IHN3aXRjaGVyKCdzdHJpY3RFcXVhbHMnLCAoZWxlbSkgPT4gZWxlbSlcclxuICAuY2FzZSgndGFnLW9wZW4nLCAoZWxlbSwgbm9kZSkgPT4ge1xyXG4gICAgY29uc3Qge1xyXG4gICAgICB2YWx1ZTogbmFtZSxcclxuICAgICAgc2VsZkNsb3NpbmdcclxuICAgIH0gPSBub2RlO1xyXG5cclxuICAgIG5vZGUgPSB7XHJcbiAgICAgIG5hbWUsXHJcbiAgICAgIGF0dHJzOiBuZXcgU3VwZXIobm9kZS5hdHRycykubWFwKCh2YWx1ZSkgPT4gKFxyXG4gICAgICAgIHBhcnNlQ2hhcmFjdGVyRGF0YSh2YWx1ZSlcclxuICAgICAgKSkuJCxcclxuICAgICAgcGFyZW50OiBlbGVtLFxyXG4gICAgICBjaGlsZHJlbjogbmV3IEFycihbXSlcclxuICAgIH07XHJcblxyXG4gICAgZWxlbS5jaGlsZHJlbi5wdXNoKG5vZGUpO1xyXG5cclxuICAgIGlmICghc2VsZkNsb3NpbmcgJiYgdm9pZEVsZW1lbnRzLmluZGV4T2YobmFtZSkgPT09IC0xKSB7XHJcbiAgICAgIGVsZW0gPSBub2RlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBlbGVtO1xyXG4gIH0pXHJcbiAgLmNhc2UoJ3RhZy1jbG9zZScsIChlbGVtLCBub2RlKSA9PiB7XHJcbiAgICBpZiAoZWxlbS5uYW1lID09PSBub2RlLnZhbHVlKSB7XHJcbiAgICAgIGVsZW0gPSBlbGVtLnBhcmVudDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZWxlbTtcclxuICB9KVxyXG4gIC5jYXNlKFsnY29tbWVudCcsICd0ZXh0J10sIChlbGVtLCBub2RlLCBjb2xsYXBzZVdoaXRlU3BhY2UsIHR5cGUpID0+IHtcclxuICAgIGNvbnN0IGVsZW1lbnQgPSB7XHJcbiAgICAgIG5hbWU6IGAjJHsgdHlwZSB9YCxcclxuICAgICAgcGFyZW50OiBlbGVtLFxyXG4gICAgICB2YWx1ZTogbm9kZS52YWx1ZVxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAodHlwZSA9PT0gJ3RleHQnICYmIGVsZW0ubmFtZSAhPT0gJ3NjcmlwdCcgJiYgZWxlbS5uYW1lICE9PSAnc3R5bGUnKSB7XHJcbiAgICAgIGVsZW1lbnQudmFsdWUgPSBwYXJzZUNoYXJhY3RlckRhdGEoZWxlbWVudC52YWx1ZSk7XHJcblxyXG4gICAgICBpZiAoY29sbGFwc2VXaGl0ZVNwYWNlKSB7XHJcbiAgICAgICAgZWxlbWVudC52YWx1ZSA9IG5ldyBTdHIoZWxlbWVudC52YWx1ZSkudHJpbSgpLiQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWNvbGxhcHNlV2hpdGVTcGFjZSB8fCAhL15cXHMqJC8udGVzdChlbGVtZW50LnZhbHVlKSkge1xyXG4gICAgICBlbGVtLmNoaWxkcmVuLnB1c2goZWxlbWVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGVsZW07XHJcbiAgfSk7XHJcbmNvbnN0IHJhd1RleHRTd2l0Y2hlciA9IHN3aXRjaGVyKCdzdHJpY3RFcXVhbHMnLCBmYWxzZSlcclxuICAuY2FzZShbJ3RpdGxlJywgJ3RleHRhcmVhJywgJ3N0eWxlJywgJ3NjcmlwdCddLCB0cnVlKTtcclxuXHJcbmNsYXNzIEludGVybmFsUGFyc2luZ0Vycm9yIHtcclxuICBjb25zdHJ1Y3RvcihpbmRleCkge1xyXG4gICAgdGhpcy5pbmRleCA9IGluZGV4O1xyXG4gIH1cclxufVxyXG5cclxuY2xhc3MgUGFyc2luZ0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xyXG4gIHR5cGUgPSAnUEFSU0lOR19FUlJPUic7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZnVuY3Rpb24gbWFya3VwVG9KU09OXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBtYXJrdXAgLSBNYXJrdXAgdG8gcGFyc2UgdG8gSlNPTi5cclxuICogQHBhcmFtIHtCb29sZWFufSBbY29sbGFwc2VXaGl0ZVNwYWNlID0gZmFsc2VdIC0gSWYgdGhlIHdoaXRlc3BhY2Ugc2hvdWxkIGJlIGNvbGxhcHNlZC5cclxuICogQHJldHVybnMge0Fyci48TWFya3VwRWxlbWVudD59IE1hcmt1cCBlbGVtZW50cyBhcnJheS5cclxuICogQGRlc2NyaXB0aW9uIEZ1bmN0aW9uIGZvciBwYXJzaW5nIGh0bWwgYW5kIHhtbCB0byBKU09OLlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgKG1hcmt1cCwgY29sbGFwc2VXaGl0ZVNwYWNlKSA9PiB7XHJcbiAgY29sbGFwc2VXaGl0ZVNwYWNlID0gISFjb2xsYXBzZVdoaXRlU3BhY2U7XHJcblxyXG4gIGNvbnN0IGVsZW1lbnRzID0gbmV3IEFycihbXSk7XHJcbiAgY29uc3Qgc3RhcnRNYXJrdXAgPSBtYXJrdXA7XHJcbiAgbGV0IGZvdW5kO1xyXG4gIGxldCBnbG9iYWxJbmRleCA9IDA7XHJcbiAgbGV0IGVsZW0gPSB7XHJcbiAgICBuYW1lOiBudWxsLFxyXG4gICAgY2hpbGRyZW46IGVsZW1lbnRzXHJcbiAgfTtcclxuXHJcbiAgd2hpbGUgKG1hcmt1cC5sZW5ndGgpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGZvdW5kID0gZmluZChtYXJrdXAsIGVsZW0pO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIGlmICghKGVyciBpbnN0YW5jZW9mIEludGVybmFsUGFyc2luZ0Vycm9yKSkge1xyXG4gICAgICAgIHRocm93VW5leHBlY3RlZEVycm9yKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRocm93IG5ldyBQYXJzaW5nRXJyb3IoYFBhcnNpbmcgZXJyb3IgbmVhciBpbmRleCAkeyBuZWFyU3RyaW5nKHN0YXJ0TWFya3VwLCBnbG9iYWxJbmRleCArIGVyci5pbmRleCkgfWApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHtcclxuICAgICAgdHlwZSxcclxuICAgICAgYXR0cnMsXHJcbiAgICAgIHNlbGZDbG9zaW5nLFxyXG4gICAgICBpbmRleCxcclxuICAgICAgdmFsdWVcclxuICAgIH0gPSBmb3VuZDtcclxuXHJcbiAgICBnbG9iYWxJbmRleCArPSBpbmRleDtcclxuXHJcbiAgICBpZiAoIWluZGV4KSB7XHJcbiAgICAgIHRocm93VW5leHBlY3RlZEVycm9yKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgbm9kZSA9IHtcclxuICAgICAgdHlwZSxcclxuICAgICAgdmFsdWVcclxuICAgIH07XHJcblxyXG4gICAgaWYgKHR5cGUgPT09ICd0YWctb3BlbicpIHtcclxuICAgICAgbm9kZS5hdHRycyA9IGF0dHJzO1xyXG4gICAgICBub2RlLnNlbGZDbG9zaW5nID0gc2VsZkNsb3Npbmc7XHJcbiAgICB9XHJcblxyXG4gICAgZWxlbSA9IG5vZGVTd2l0Y2hlcihub2RlLnR5cGUsIFtlbGVtLCBub2RlLCBjb2xsYXBzZVdoaXRlU3BhY2VdKTtcclxuXHJcbiAgICBtYXJrdXAgPSBtYXJrdXAuc2xpY2UoaW5kZXgpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGVsZW1lbnRzO1xyXG5cclxuICBmdW5jdGlvbiB0aHJvd1VuZXhwZWN0ZWRFcnJvcigpIHtcclxuICAgIHRocm93IG5ldyBQYXJzaW5nRXJyb3IoYFVuZXhwZWN0ZWQgcGFyc2luZyBlcnJvciBuZWFyIGluZGV4ICR7IG5lYXJTdHJpbmcoc3RhcnRNYXJrdXAsIGdsb2JhbEluZGV4KSB9LiAkeyBzdWJtaXRTdHJpbmcgfWApO1xyXG4gIH1cclxufTtcclxuXHJcbmZ1bmN0aW9uIGZpbmQobWFya3VwLCBlbGVtKSB7XHJcbiAgY29uc3QgeyBuYW1lIH0gPSBlbGVtO1xyXG4gIGxldCBtYXRjaGVzO1xyXG5cclxuICBpZiAocmF3VGV4dFN3aXRjaGVyKG5hbWUpKSB7XHJcbiAgICBtYXRjaGVzID0gbmV3IFN1cGVyKHtcclxuICAgICAgJ3RhZy1jbG9zZSc6IG1hcmt1cC5tYXRjaChjb25zdHJ1Y3RDbG9zZVRhZ1JlZ0V4cChuYW1lKSlcclxuICAgIH0pO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBtYXRjaGVzID0gTk9ERV9SRUdFWF9TRVQubWFwKChyZWdleCkgPT4gKFxyXG4gICAgICBtYXJrdXAubWF0Y2gocmVnZXgpXHJcbiAgICApKTtcclxuICB9XHJcblxyXG4gIGxldCBtYXRjaDtcclxuXHJcbiAgaWYgKFxyXG4gICAgbWF0Y2ggPSBtYXRjaGVzLmZpbmQoKG1hdGNoKSA9PiAoXHJcbiAgICAgIG1hdGNoICYmIG1hdGNoLmluZGV4ID09PSAwXHJcbiAgICApKVxyXG4gICkge1xyXG4gICAgY29uc3QgcmV0dXJuaW5nID0ge1xyXG4gICAgICB0eXBlOiBtYXRjaC5rZXksXHJcbiAgICAgIGluZGV4OiBtYXRjaC52YWx1ZVswXS5sZW5ndGgsXHJcbiAgICAgIHZhbHVlOiBtYXRjaC52YWx1ZVsxXVxyXG4gICAgfTtcclxuICAgIGNvbnN0IGF0dHJzID0ge307XHJcblxyXG4gICAgaWYgKG1hdGNoLmtleSA9PT0gJ3RhZy1vcGVuJykge1xyXG4gICAgICBjb25zdCBzdGFydE1hcmt1cCA9IG1hcmt1cDtcclxuICAgICAgbGV0IGNsb3NlTWF0Y2g7XHJcblxyXG4gICAgICByZXR1cm5pbmcuc2VsZkNsb3NpbmcgPSBmYWxzZTtcclxuICAgICAgcmV0dXJuaW5nLmF0dHJzID0gYXR0cnM7XHJcblxyXG4gICAgICB3aGlsZSAoXHJcbiAgICAgICAgKG1hcmt1cCA9IHN0YXJ0TWFya3VwLnNsaWNlKHJldHVybmluZy5pbmRleCkpICYmXHJcbiAgICAgICAgIShjbG9zZU1hdGNoID0gbWFya3VwLm1hdGNoKFRBR19PUEVOX0NMT1NFKSlcclxuICAgICAgKSB7XHJcbiAgICAgICAgY29uc3QgYXR0ciA9IG1hcmt1cC5tYXRjaChBVFRSSUJVVEUpO1xyXG5cclxuICAgICAgICBpZiAoIWF0dHIpIHtcclxuICAgICAgICAgIHJldHVybmluZy5pbmRleCArPSAxO1xyXG5cclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXR0cnNbYXR0clsxXV0gPSAoYXR0clsyXSB8fCAnJykucmVwbGFjZSgvXihcInwnKXwoXCJ8JykkL2csICcnKTtcclxuICAgICAgICByZXR1cm5pbmcuaW5kZXggKz0gYXR0clswXS5sZW5ndGg7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChjbG9zZU1hdGNoKSB7XHJcbiAgICAgICAgcmV0dXJuaW5nLmluZGV4ICs9IGNsb3NlTWF0Y2hbMF0ubGVuZ3RoO1xyXG4gICAgICAgIHJldHVybmluZy5zZWxmQ2xvc2luZyA9ICEhY2xvc2VNYXRjaFsxXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXR1cm5pbmc7XHJcbiAgfVxyXG5cclxuICBsZXQgeyB2YWx1ZTogaW5kZXggfSA9IG1hdGNoZXMubWluKChtYXRjaCkgPT4gKFxyXG4gICAgbWF0Y2ggPyBtYXRjaC5pbmRleCA6IE5hTlxyXG4gICkpO1xyXG5cclxuICBpZiAoaW5kZXggPT09IEluZmluaXR5KSB7XHJcbiAgICBpbmRleCA9IG1hcmt1cC5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgdHlwZTogJ3RleHQnLFxyXG4gICAgaW5kZXgsXHJcbiAgICB2YWx1ZTogbWFya3VwLnNsaWNlKDAsIGluZGV4KVxyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNvbnN0cnVjdENsb3NlVGFnUmVnRXhwKHRhZ05hbWUpIHtcclxuICByZXR1cm4gbmV3IFJlZ0V4cChgPC8oJHsgdGFnTmFtZSB9KVxcXFxzKj5gLCAnaScpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBuZWFyU3RyaW5nKG1hcmt1cCwgaW5kZXgpIHtcclxuICByZXR1cm4gYCR7IGluZGV4IH0gKH5+fiBcIiR7IG1hcmt1cC5zbGljZShpbmRleCwgaW5kZXggKyAxNSkgfVwiIH5+fiwgdGhlIHN0cmluZyBpdHNlbGYgaXMgXCIkeyBtYXJrdXAgfVwiKWA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBhcnNlQ2hhcmFjdGVyRGF0YShzdHJpbmcpIHtcclxuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoLyYoXFx3K3wjeD9cXGQrKTsvZywgKG1hdGNoKSA9PiB7XHJcbiAgICBkaXYuaW5uZXJIVE1MID0gbWF0Y2g7XHJcblxyXG4gICAgcmV0dXJuIGRpdi50ZXh0Q29udGVudCB8fCBkaXYuaW5uZXJUZXh0O1xyXG4gIH0pO1xyXG59XHJcbiIsIi8qKlxyXG4gKiBAbW9kdWxlIEVsZW1cclxuICogQHByaXZhdGVcclxuICogQG1peGluXHJcbiAqIEBkZXNjcmlwdGlvbiBFeHBvcnRzIEVsZW0gY2xhc3MuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgU3VwZXIgfSBmcm9tICcuL1N1cGVyJztcclxuaW1wb3J0IHsgQXJyLCBhcnJheSwgaXRlcmF0ZSBhcyB0aW1lcyB9IGZyb20gJy4vQXJyJztcclxuaW1wb3J0IHsgYmxvYiB9IGZyb20gJy4vQmxvYk9iamVjdCc7XHJcbmltcG9ydCB7IG1ldGhvZCB9IGZyb20gJy4vRnVuYyc7XHJcbmltcG9ydCB7IFByb21pc2UgfSBmcm9tICcuL1Byb21pc2UnO1xyXG5pbXBvcnQgeyBTdHIgfSBmcm9tICcuL1N0cic7XHJcbmltcG9ydCB7IHN3aXRjaGVyIH0gZnJvbSAnLi9Td2l0Y2hlcic7XHJcbmltcG9ydCB7XHJcbiAgY29uc3RydWN0b3JzLCBhcHBsaWVkUmVnRXhwcywgaHRtbEVsZW1lbnRzLCBzdmdFbGVtZW50cyxcclxuICBjYW52YXNHZXRNZXRob2RzLCBjYW52YXNSZXN0TWV0aG9kc1xyXG59IGZyb20gJy4vY29uc3RhbnRzJztcclxuaW1wb3J0IHtcclxuICBpc0FycmF5LCBpc0FycmF5TGlrZSwgaXNFbGVtZW50LCBpc0Z1bmN0aW9uLFxyXG4gIGlzSW50ZWdlciwgaXNOaWwsIGlzTnVtYmVyLCBpc051bGwsIGlzU3RyaW5nLFxyXG4gIGFzc2lnbiwgZHluYW1pY0RlZmluZVByb3BlcnRpZXMsIGRlZmluZVByb3BlcnRpZXMsIHRvQXJyYXksXHJcbiAgdmFsaWRhdGUsIHRvU3RyaW5nVGFnLCBpdGVyYXRlLCBTeW1ib2xcclxufSBmcm9tICcuL2hlbHBlcnMnO1xyXG5pbXBvcnQgbWFya3VwVG9KU09OIGZyb20gJy4vaGVscGVycy9tYXJrdXBUb0pTT04nO1xyXG5cclxuLyoqXHJcbiAqIEB0eXBlZGVmIHtTdHJpbmd9IEVsZW1FdmVudFN0cmluZ1xyXG4gKiBAcHVibGljXHJcbiAqIEBkZXNjcmlwdGlvbiBBIHN0cmluZyBjb250YWluaW5nIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBjb21tYSB3aXRoIHplcm8gb3IgbW9yZSBzcGFjZXMgb3IganVzdCBzcGFjZXMuXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEBjYWxsYmFjayBFbGVtVmFsdWVDYWxsYmFja1xyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZSAtIE9sZCB2YWx1ZS5cclxuICogQHBhcmFtIHtFbGVtfSBlbGVtIC0gQ3VycmVudCBlbGVtZW50LlxyXG4gKiBAcGFyYW0ge051bWJlcn0gaW5kZXggLSBJbmRleCBpbiB0aGUgc2V0IG9mIHRoZSBlbGVtZW50cy5cclxuICovXHJcblxyXG4vKipcclxuICogQGNhbGxiYWNrIEVsZW1TZXRPZkNhbGxiYWNrXHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIHtFbGVtZW50fSBjcmVhdGVkIC0gQ3JlYXRlZCBlbGVtZW50LlxyXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gVmFsdWUgb2YgdGhlIGl0ZXJhdGVkIGVsZW1lbnQgaW4gdGhlIG9iamVjdC5cclxuICogQHBhcmFtIHtLZXl9IGtleSAtIEtleSBvZiB0aGUgaXRlcmF0ZWQgZWxlbWVudCBpbiB0aGUgb2JqZWN0LlxyXG4gKiBAcGFyYW0geyp9IG9iamVjdCAtIE9iamVjdCB0aGF0IGlzIGl0ZXJhdGVkIG92ZXIuXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbSAtIEN1cnJlbnQgZWxlbWVudC5cclxuICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4IC0gSW5kZXggb2YgdGhlIGN1cnJlbnQgZWxlbWVudC5cclxuICovXHJcblxyXG4vKipcclxuICogQGNhbGxiYWNrIFZhbGlkYXRlQ2FsbGJhY2tcclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gRWxlbWVudCB2YWx1ZS5cclxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtIC0gRWxlbWVudCB0byB2YWxpZGF0ZS5cclxuICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4IC0gSW5kZXggb2YgdGhlIGVsZW1lbnQuXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEBjYWxsYmFjayBDdHhDYWxsYmFja1xyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggLSBDYW52YXMgcmVuZGVyaW5nIGNvbnRleHQuXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEBjYWxsYmFjayBFbGVtTGlzdGVuZXJcclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0ge0V2ZW50fSBlIC0gRmlyZWQgZXZlbnQuXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbSAtIEVsZW1lbnQgb24gd2hpY2ggdGhlIGxpc3RlbmVyIHdhcyBjYWxsZWQuXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBpbmRleCAtIEluZGV4IG9mIHRoZSBlbGVtZW50IG9uIHdoaWNoIHRoZSBsaXN0ZW5lciB3YXMgY2FsbGVkLlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAY2FsbGJhY2sgRWxlbVJlbW92ZUxpc3RlbmVyc1xyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7Li4uRWxlbUV2ZW50U3RyaW5nfSBldmVudHMgLSBJZiBhdCBsZWFzdCBvbmUgYXJndW1lbnQgcHJlc2VudCBvbmx5IHJlbW92ZXMgZXZlbnQgbGlzdGVuZXJzIHNwZWNpZmllZFxyXG4gKiBieSB0aGUgZXZlbnRzIGluIHRoZSBhcmd1bWVudHMuXHJcbiAqL1xyXG5cclxuY29uc3QgbmF0aXZlRG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XHJcbmNvbnN0IGVtcHR5RGl2ID0gbmF0aXZlRG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbmNvbnN0IGV2ZW50U2VwYXJhdG9yID0gLygsfCApICovO1xyXG5jb25zdCB0ZXh0UHJvcGVydHkgPSBuZXcgU3VwZXIoTm9kZS5wcm90b3R5cGUpLnByb3BlcnR5RGVzY3JpcHRvcigndGV4dENvbnRlbnQnKSA/ICd0ZXh0Q29udGVudCcgOiAnaW5uZXJUZXh0JztcclxuY29uc3QgY2xhc3NlcyA9IHt9O1xyXG5jb25zdCBhdHRycyA9IHt9O1xyXG5jb25zdCB3aW5kb3dzRHdheW5lRGF0YSA9IG5ldyBBcnIoW10pO1xyXG5jb25zdCBpbnB1dEVsZW1lbnRzID0gJ2lucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBkYXRhbGlzdCwga2V5Z2VuLCBvdXRwdXQnO1xyXG5jb25zdCBjbGljayA9IG1ldGhvZCgnY2xpY2snKTtcclxuY29uc3Qgc3ZnTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnO1xyXG5jb25zdCB4bWxOUyA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zLyc7XHJcbmNvbnN0IHhsaW5rTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc7XHJcbmNvbnN0IHhodG1sTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCc7XHJcbmNvbnN0IHR5cGVTd2l0Y2hlciA9IHN3aXRjaGVyKCdjYWxsJywgKGVsZW0sIHR5cGUpID0+IHtcclxuICBjb25zdCBucyA9IHR5cGUgPT09ICdzdmcnXHJcbiAgICA/IHN2Z05TXHJcbiAgICA6IGVsZW0ucHJvcCgnbmFtZXNwYWNlVVJJJykgfHwgbmF0aXZlRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm5hbWVzcGFjZVVSSSB8fCB4aHRtbE5TO1xyXG5cclxuICByZXR1cm4gbmF0aXZlRG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5zLCB0eXBlKTtcclxufSlcclxuICAuY2FzZShcclxuICAgICh0eXBlKSA9PiB0eXBlID09PSAnI2NvbW1lbnQnLFxyXG4gICAgKCkgPT4gbmF0aXZlRG9jdW1lbnQuY3JlYXRlQ29tbWVudCgnJylcclxuICApXHJcbiAgLmNhc2UoXHJcbiAgICAodHlwZSkgPT4gdHlwZSA9PT0gJyN0ZXh0JyxcclxuICAgICgpID0+IG5hdGl2ZURvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKVxyXG4gICk7XHJcbmNvbnN0IHJlZlN3aXRjaGVyID0gc3dpdGNoZXIoJ3N0cmljdEVxdWFscycsICdocmVmJylcclxuICAuY2FzZShcclxuICAgIFsnaW1nJywgJ3NjcmlwdCcsICdpZnJhbWUnLCAnYXVkaW8nLCAndmlkZW8nXSxcclxuICAgICdzcmMnXHJcbiAgKVxyXG4gIC5jYXNlKFxyXG4gICAgJ2Zvcm0nLFxyXG4gICAgJ2FjdGlvbidcclxuICApO1xyXG5jb25zdCBmaWx0ZXJTd2l0Y2hlciA9IHN3aXRjaGVyKCdjYWxsJywgKHNlbGVjdG9yKSA9PiBzZWxlY3RvcilcclxuICAuY2FzZShcclxuICAgIGlzU3RyaW5nLFxyXG4gICAgKHNlbGVjdG9yKSA9PiAoXHJcbiAgICAgIChlbGVtKSA9PiBuZXcgRWxlbShlbGVtKS5pcyhzZWxlY3RvcilcclxuICAgIClcclxuICApXHJcbiAgLmNhc2UoXHJcbiAgICBbaXNBcnJheSwgaXNFbGVtXSxcclxuICAgIChlbGVtcykgPT4ge1xyXG4gICAgICBlbGVtcyA9IG5ldyBBcnIoZWxlbXMpO1xyXG5cclxuICAgICAgcmV0dXJuIChlbGVtKSA9PiBlbGVtcy5pbmRleE9mKGVsZW0pICE9PSAtMTtcclxuICAgIH1cclxuICApO1xyXG5jb25zdCBpbm5lclN3aXRjaGVyID0gc3dpdGNoZXIoJ3N0cmljdEVxdWFscycsIDApXHJcbiAgLmNhc2UoJ3BhZGRpbmctYm94JywgKHBhZGRpbmdzKSA9PiBwYWRkaW5ncylcclxuICAuY2FzZSgnYm9yZGVyLWJveCcsIChwYWRkaW5ncywgYm9yZGVycykgPT4gcGFkZGluZ3MgKyBib3JkZXJzKTtcclxuY29uc3Qgb3V0ZXJTd2l0Y2hlciA9IHN3aXRjaGVyKCdzdHJpY3RFcXVhbHMnLCAoYm9yZGVycywgcGFkZGluZ3MpID0+IGJvcmRlcnMgKyBwYWRkaW5ncylcclxuICAuY2FzZSgncGFkZGluZy1ib3gnLCAoYm9yZGVycykgPT4gYm9yZGVycylcclxuICAuY2FzZSgnYm9yZGVyLWJveCcsIDApO1xyXG5jb25zdCBhdHRyTlNTd2l0Y2hlciA9IHN3aXRjaGVyKCdjYWxsJywgbnVsbClcclxuICAuY2FzZSgoYXR0cikgPT4gYXR0ciA9PT0gJ3htbG5zJyB8fCBhdHRyID09PSAneG1sbnM6eGxpbmsnLCAoZWxlbSkgPT4gKFxyXG4gICAgZWxlbS5uYW1lID09PSAnc3ZnJ1xyXG4gICAgICA/IHhtbE5TXHJcbiAgICAgIDogbnVsbFxyXG4gICkpXHJcbiAgLmNhc2UoKGF0dHIpID0+IC9eeGxpbms6XFx3Ly50ZXN0KGF0dHIpLCAoZWxlbSkgPT4gKFxyXG4gICAgZWxlbS5jbG9zZXN0KCdzdmcnKS5sZW5ndGhcclxuICAgICAgPyB4bGlua05TXHJcbiAgICAgIDogbnVsbFxyXG4gICkpO1xyXG5cclxuLyoqXHJcbiAqIEBjbGFzcyBFbGVtXHJcbiAqIEBleHRlbmRzIEFyclxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7RWxlbWVudHxFbGVtZW50W119IFtlbGVtID0gW11dIC0gQW4gZWxlbWVudCBvciBhbiBhcnJheSBvZiBlbGVtZW50cyB0byB3cmFwLlxyXG4gKiBAcmV0dXJucyB7RWxlbX0gSW5zdGFuY2Ugb2YgRWxlbS5cclxuICogQGRlc2NyaXB0aW9uIFdyYXAgb2YgYW4gZWxlbWVudHMgc2V0LiBBbHNvIGhhcyBhbGwgbWV0aG9kcyBmcm9tIGZyb21cclxuICogW0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRF17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvQVBJL0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0uXHJcbiAqIEdldHRlcnMgbWV0aG9kcyByZXR1cm4gdGhlIHNhbWUgYXMgbWV0aG9kcyBmcm9tIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCBhbmQgdGhlIHJlc3QgcmV0dXJuIHRoaXMuXHJcbiAqIFdvcmsgZm9yIHRoZSBmaXJzdCBjYW52YXMgZWxlbWVudCBpbiB0aGUgc2V0LlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBuZXcgRWxlbShkb2N1bWVudC5ib2R5KTtcclxuICogbmV3IEVsZW0oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNscycpKTtcclxuICogbmV3IEVsZW0oZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnY2xzJykpO1xyXG4gKi9cclxuY2xhc3MgRWxlbSBleHRlbmRzIEFyciB7XHJcbiAgY29uc3RydWN0b3IoZWxlbSA9IFtdKSB7XHJcbiAgICBzdXBlcigoKCkgPT4ge1xyXG4gICAgICBsZXQgZWxlbWVudCA9IGVsZW07XHJcblxyXG4gICAgICBpZiAoaXNBcnJheUxpa2UoZWxlbWVudCkgJiYgKFxyXG4gICAgICAgIGlzV2luZG93KGVsZW1lbnQpIHx8XHJcbiAgICAgICAgaXNIVE1MRG9jdW1lbnQoZWxlbWVudCkgfHxcclxuICAgICAgICBpc0RvY3VtZW50RnJhZ21lbnQoZWxlbWVudCkgfHxcclxuICAgICAgICBpc0VsZW1lbnQoZWxlbWVudCkgfHxcclxuICAgICAgICBpc0NvbW1lbnRPclRleHQoZWxlbWVudCkgfHxcclxuICAgICAgICBpc1N0eWxlUnVsZShlbGVtZW50KVxyXG4gICAgICApKSB7XHJcbiAgICAgICAgZWxlbWVudCA9IFtlbGVtZW50XTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIG5ldyBBcnIodG9BcnJheShuZXcgU3VwZXIoZWxlbWVudCkuJCwgdHJ1ZSkpLm9iamVjdCgoZWxlbXMsIGVsZW0pID0+IHtcclxuICAgICAgICBpZiAoZWxlbXMuaW5kZXhPZihlbGVtKSA9PT0gLTEgJiYgKFxyXG4gICAgICAgICAgaXNFbGVtZW50KGVsZW0pIHx8XHJcbiAgICAgICAgICBpc1dpbmRvdyhlbGVtKSB8fFxyXG4gICAgICAgICAgaXNIVE1MRG9jdW1lbnQoZWxlbSkgfHxcclxuICAgICAgICAgIGlzRG9jdW1lbnRGcmFnbWVudChlbGVtKSB8fFxyXG4gICAgICAgICAgaXNDb21tZW50T3JUZXh0KGVsZW0pIHx8XHJcbiAgICAgICAgICBpc1N0eWxlUnVsZShlbGVtKVxyXG4gICAgICAgICkpIHtcclxuICAgICAgICAgIHJldHVybiBlbGVtcy5wdXNoKGVsZW0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGlzRWxlbShlbGVtKSkge1xyXG4gICAgICAgICAgZWxlbXMucHVzaC5hcHBseShlbGVtcywgZWxlbS4kKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sIFtdKS4kO1xyXG4gICAgfSkoKSk7XHJcblxyXG4gICAgdGhpcy4kJCA9IGVsZW07XHJcblxyXG4gICAgdGhpcy5mb3JFYWNoKGFkZER3YXluZURhdGEpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQG1lbWJlciB7QXJyYXkuPE5vZGV8V2luZG93Pn0gRWxlbSMkXHJcbiAgICAgKiBAdHlwZSB7QXJyYXkuPE5vZGV8V2luZG93Pn1cclxuICAgICAqIEBwdWJsaWNcclxuICAgICAqIEBkZXNjcmlwdGlvbiBDb25zdHJ1Y3RlZCBlbGVtZW50IHNldC5cclxuICAgICAqL1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQG1lbWJlciB7Kn0gRWxlbSMkJFxyXG4gICAgICogQHR5cGUgeyp9XHJcbiAgICAgKiBAcHVibGljXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gSW5pdGlhbCBlbGVtZW50IHNldC5cclxuICAgICAqL1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBFbGVtI2FkZFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0gey4uLihTdHJpbmd8RWxlbXxFbGVtZW50fEVsZW1lbnRbXSl9IGVsZW1lbnRzIC0gRWFjaCBhcmd1bWVudCBpcyBhIHNlbGVjdG9yLCBvciBFbGVtLCBvciBFbGVtZW50LCBvciBhcnJheSBvZiBFbGVtZW50cy5cclxuICAgKiBAcmV0dXJucyB7RWxlbX0gUmV0dXJucyB0aGlzLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBNZXRob2QgZm9yIGFkZGluZyBuZXcgZWxlbWVudHMgdG8gdGhlIHNldC5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogZWxlbTEuZmluZCgnLmNsczEnKVxyXG4gICAqICAgLmFkZChlbGVtMi5maW5kKCcuY2xzMicpKVxyXG4gICAqICAgLmhpZGUoKTtcclxuICAgKi9cclxuICBhZGQoLi4uZWxlbWVudHMpIHtcclxuICAgIGl0ZXJhdGUoYXJndW1lbnRzLCAoZWxlbSkgPT4ge1xyXG4gICAgICB0b0ZpbmQoZWxlbSkuZm9yRWFjaCgoZWxlbSkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmluZGV4T2YoZWxlbSkgPT09IC0xKSB7XHJcbiAgICAgICAgICB0aGlzLnB1c2goZWxlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBFbGVtI2FkZENsYXNzXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBjbGFzc2VzIC0gQ2xhc3NlcyB0byBhZGQuXHJcbiAgICogQHJldHVybnMge0VsZW19IFJldHVybnMgdGhpcy5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIGZvciBhZGRpbmcgY2xhc3NlcyB0byB0aGUgYWxsIHRoZSBlbGVtZW50cyBpbiB0aGUgc2V0LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBlbGVtLmFkZENsYXNzKCdyZWQnLCAncm91bmQnKTtcclxuICAgKi9cclxuICBhZGRDbGFzcyguLi5jbGFzc2VzKSB7XHJcbiAgICByZXR1cm4gdGhpcy5mb3JFYWNoKChlbGVtKSA9PiB7XHJcbiAgICAgIGNvbnN0IGxpc3QgPSBlbGVtLmNsYXNzTGlzdDtcclxuXHJcbiAgICAgIGl0ZXJhdGUoaXNFbGVtZW50KGVsZW0pICYmIGFyZ3VtZW50cywgKGNscykgPT4gbGlzdC5hZGQoY2xzKSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRWxlbSNhZGRDb21tZW50XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0IC0gVGV4dCBvZiBjb21tZW50IHRvIGFkZC5cclxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGVuZCAtIElmIHRoZSBjb21tZW50IHNob3VsZCBiZSBpbnNlcnRlZCB0byB0aGUgZW5kLiBJZiBmYWxzZSBpdCdzIGluc2VydGVkIHRvIHRoZSBzdGFydC5cclxuICAgKiBAcmV0dXJucyB7RWxlbX0gUmV0dXJucyB0aGlzLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBNZXRob2QgZm9yIGFkZGluZyBjb21tZW50IHRvIGFsbCB0aGUgZWxlbWVudHMgaW4gdGhlIHNldC5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogZWxlbS5hZGRIVE1MKCc8ZGl2PjE8L2Rpdj4nKTtcclxuICAgKi9cclxuICBhZGRDb21tZW50KHRleHQsIGVuZCA9IHRydWUpIHtcclxuICAgIHJldHVybiB0aGlzLmZvckVhY2goKGVsZW0pID0+IHtcclxuICAgICAgaWYgKGlzRWxlbWVudChlbGVtKSkge1xyXG4gICAgICAgIGVsZW0uaW5zZXJ0QWRqYWNlbnRIVE1MKGVuZCA/ICdiZWZvcmVlbmQnIDogJ2FmdGVyYmVnaW4nLCBgPCEtLSR7IHRleHQgfS0tPmApO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRWxlbSNhZGRIVE1MXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBodG1sIC0gSFRNTCB0byBhZGQuXHJcbiAgICogQHBhcmFtIHtCb29sZWFufSBlbmQgLSBJZiB0aGUgSFRNTCBzaG91bGQgYmUgaW5zZXJ0ZWQgdG8gdGhlIGVuZC4gSWYgZmFsc2UgaXQncyBpbnNlcnRlZCB0byB0aGUgc3RhcnQuXHJcbiAgICogQHJldHVybnMge0VsZW19IFJldHVybnMgdGhpcy5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIGZvciBhZGRpbmcgSFRNTCB0byBhbGwgdGhlIGVsZW1lbnRzIGluIHRoZSBzZXQuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIGVsZW0uYWRkSFRNTCgnPGRpdj4xPC9kaXY+Jyk7XHJcbiAgICovXHJcbiAgYWRkSFRNTChodG1sLCBlbmQgPSB0cnVlKSB7XHJcbiAgICByZXR1cm4gdGhpcy5mb3JFYWNoKChlbGVtKSA9PiB7XHJcbiAgICAgIGlmIChpc0VsZW1lbnQoZWxlbSkpIHtcclxuICAgICAgICBlbGVtLmluc2VydEFkamFjZW50SFRNTChlbmQgPyAnYmVmb3JlZW5kJyA6ICdhZnRlcmJlZ2luJywgaHRtbCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBFbGVtI2FkZFJ1bGVcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgLSBOYW1lIG9mIHRoZSBydWxlLlxyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzZWxlY3RvciAtIFNlbGVjdG9yIGZvciB0aGUgcnVsZVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0LjxTdHJpbmcsIFN0cmluZz59IHN0eWxlIC0gU3R5bGUgZm9yIHRoZSBzZWxlY3Rvci5cclxuICAgKiBAcmV0dXJucyB7RWxlbX0gUmV0dXJucyB0aGlzLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBNZXRob2QgZm9yIGFkZGluZyBjc3Mgc3R5bGVzIGludG8gdGhlIGZpcnN0IHN0eWxlIHRhZyBpbiB0aGUgc2V0LlxyXG4gICAqIE5vdGU6IHN0eWxlIGVsZW1lbnQgc2hvdWxkIGJlIGluc2lkZSB0aGUgZG9jdW1lbnQuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIHN0eWxlLmFkZFJ1bGUoJ2ltZy1zaXplJywgJ2ltZy5zcXVhcmUnLCB7XHJcbiAgICogICB3aWR0aDogJzQwcHggIWltcG9ydGFudCcsXHJcbiAgICogICBoZWlnaHQ6ICc0MHB4ICFpbXBvcnRhbnQnXHJcbiAgICogfSk7XHJcbiAgICovXHJcbiAgYWRkUnVsZShuYW1lLCBzZWxlY3Rvciwgc3R5bGUpIHtcclxuICAgIHRoaXMuc29tZSgoZWxlbSkgPT4ge1xyXG4gICAgICBpZiAoZ2V0TmFtZShlbGVtKSA9PT0gJ3N0eWxlJykge1xyXG4gICAgICAgIGNvbnN0IHsgc2hlZXQgfSA9IGVsZW07XHJcbiAgICAgICAgY29uc3QgeyBsZW5ndGggfSA9IHNoZWV0LmNzc1J1bGVzO1xyXG4gICAgICAgIGNvbnN0IHJ1bGVzID0gbmV3IFN1cGVyKHN0eWxlKS53b3JkKCh2YWx1ZSwgcHJvcGVydHkpID0+IChcclxuICAgICAgICAgIGAkeyBuZXcgU3RyKHByb3BlcnR5KS50b0h5cGhlbkNhc2UoKSB9OiAkeyB2YWx1ZSB9O1xcbmBcclxuICAgICAgICApKTtcclxuXHJcbiAgICAgICAgc2hlZXQuaW5zZXJ0UnVsZShcclxuICAgICAgICAgIGAkeyBzZWxlY3RvciB9IHskeyBydWxlcyAmJiAnXFxuJyB9JHsgcnVsZXMgfX1gLFxyXG4gICAgICAgICAgbGVuZ3RoXHJcbiAgICAgICAgKTtcclxuICAgICAgICBzaGVldC5jc3NSdWxlc1tsZW5ndGhdLmR3YXluZURhdGEgPSB7IG5hbWUgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBFbGVtI2FkZFRleHRcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IHRleHQgLSBUZXh0IHRvIGFkZC5cclxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGVuZCAtIElmIHRoZSB0ZXh0IHNob3VsZCBiZSBpbnNlcnRlZCB0byB0aGUgZW5kLiBJZiBmYWxzZSBpdCdzIGluc2VydGVkIHRvIHRoZSBzdGFydC5cclxuICAgKiBAcmV0dXJucyB7RWxlbX0gUmV0dXJucyB0aGlzLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBNZXRob2QgZm9yIGFkZGluZyB0ZXh0IHRvIGFsbCB0aGUgZWxlbWVudHMgaW4gdGhlIHNldC5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogZWxlbS5hZGRUZXh0KCcxMjMnKTtcclxuICAgKi9cclxuICBhZGRUZXh0KHRleHQsIGVuZCA9IHRydWUpIHtcclxuICAgIHJldHVybiB0aGlzLmZvckVhY2goKGVsZW0pID0+IHtcclxuICAgICAgbmV3IEVsZW0obmF0aXZlRG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGV4dCkpLmludG8oZWxlbSwgZW5kKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBFbGVtI2FwcGx5XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBzdHJpbmdzIC0gU3RyaW5ncyB0byBhcHBseS5cclxuICAgKiBAcmV0dXJucyB7RWxlbX0gUmV0dXJucyB0aGlzLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBNZXRob2QgdGhhdCBpcyBhIHNob3J0aGFuZCBmb3IgbWFueSBvdGhlciBtZXRob2RzLlxyXG4gICAqIEFsbCBzaG9ydGhhbmRzIGNhbiBiZSBzZXBhcmF0ZWQgd2l0aCBzcGFjZSBhbmQgd3JpdHRlbiB3aXRoaW4gb25lIHN0cmluZy5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogZWxlbS5hcHBseShcclxuICAgKiAgICcjaWQgLmMxIC5jMiBAYm9yZGVyKDFweCBzb2xpZCBibGFjaykgJGRpc2FibGVkICRhdHRyKHNvbWUgdmFsdWUpICooQ2xpY2sgbWUhKSdcclxuICAgKiApO1xyXG4gICAqIC8vIHNob3J0aGFuZCBmb3JcclxuICAgKiAvLyBlbGVtXHJcbiAgICogLy8gICAuaWQoJ2lkJylcclxuICAgKiAvLyAgIC5hZGRDbGFzcygnYzEnLCAnYzInKVxyXG4gICAqIC8vICAgLmNzcygnYm9yZGVyJywgJzFweCBzb2xpZCBibGFjaycpXHJcbiAgICogLy8gICAuYXR0cih7XHJcbiAgICogLy8gICAgIGF0dHIsICdzb21lIHZhbHVlJ1xyXG4gICAqIC8vICAgICBkaXNhYmxlZDogJydcclxuICAgKiAvLyAgIH0pXHJcbiAgICogLy8gICAudGV4dCgnQ2xpY2sgbWUhJyk7XHJcbiAgICogLy8gVGhlcmUgaXMgYSBmdWxsIGxpc3Qgb2YgcG9zc2libGUgdHlwZXMgb2Ygc3ludGF4IGJlbG93Li4uXHJcbiAgICpcclxuICAgKiBlbGVtLmFwcGx5KCcjaWQnKTsgICAgICAgICAgICAgICAgICAgIC8vIHNob3J0aGFuZCBmb3IgZWxlbS5pZCgnaWQnKTtcclxuICAgKiBlbGVtLmFwcGx5KCcuYzEgLmMyJyk7ICAgICAgICAgICAgICAgIC8vIHNob3J0aGFuZCBmb3IgZWxlbS5hZGRDbGFzcygnYzEnLCAnYzInKTtcclxuICAgKiBlbGVtLmFwcGx5KCctLmMxIC0uYzInKTsgICAgICAgICAgICAgIC8vIHNob3J0aGFuZCBmb3IgZWxlbS5yZW1vdmVDbGFzcygnYzEnLCAnYzInKTtcclxuICAgKiBlbGVtLmFwcGx5KCctQGZsb2F0IC1AZGlzcGxheScpOyAgICAgIC8vIHNob3J0aGFuZCBmb3IgZWxlbS5yZW1vdmVDU1MoJ2Zsb2F0JywgJ2Rpc3BsYXknKTtcclxuICAgKiBlbGVtLmFwcGx5KCctJGExIC0kYTInKTsgICAgICAgICAgICAgIC8vIHNob3J0aGFuZCBmb3IgZWxlbS5yZW1vdmVBdHRyKCdhMScsICdhMicpO1xyXG4gICAqIGVsZW0uYXBwbHkoJyooc29tZSB0ZXh0KScpOyAgICAgICAgICAgLy8gc2hvcnRoYW5kIGZvciBlbGVtLnRleHQoJ3NvbWUgdGV4dCcpO1xyXG4gICAqIGVsZW0uYXBwbHkoJyYoPGRpdj4xPC9kaXY+KScpOyAgICAgICAgLy8gc2hvcnRoYW5kIGZvciBlbGVtLmh0bWwoJzxkaXY+MTwvZGl2PicpO1xyXG4gICAqIGVsZW0uYXBwbHkoJ0BmbG9hdChyaWdodCknKTsgICAgICAgICAgLy8gc2hvcnRoYW5kIGZvciBlbGVtLmNzcygnZmxvYXQnLCAncmlnaHQnKTtcclxuICAgKiBlbGVtLmFwcGx5KCdAdHJhbnNmb3JtKHNjYWxlKDVweCkpJyk7IC8vIHNob3J0aGFuZCBmb3IgZWxlbS5jc3MoJ3RyYW5zZm9ybScsICdzY2FsZSg1cHgpJyk7XHJcbiAgICogZWxlbS5hcHBseSgnQG1hcmdpbigycHggMnB4KScpOyAgICAgICAvLyBzaG9ydGhhbmQgZm9yIGVsZW0uY3NzKCdtYXJnaW4nLCAnMnB4IDJweCcpO1xyXG4gICAqIGVsZW0uYXBwbHkoJ0BtYXJnaW5MZWZ0KDJweCknKTsgICAgICAgLy8gc2hvcnRoYW5kIGZvciBlbGVtLmNzcygnbWFyZ2luTGVmdCcsICcycHggMnB4Jyk7XHJcbiAgICogZWxlbS5hcHBseSgnQG1hcmdpbi1sZWZ0KDJweCknKTsgICAgICAvLyBzaG9ydGhhbmQgZm9yIGVsZW0uY3NzKCdtYXJnaW4tbGVmdCcsICcycHggMnB4Jyk7XHJcbiAgICogZWxlbS5hcHBseSgnJGF0dHIoc29tZSB2YWx1ZSknKTsgICAgICAvLyBzaG9ydGhhbmQgZm9yIGVsZW0uYXR0cignYXR0cicsICdzb21lIHZhbHVlJyk7XHJcbiAgICogZWxlbS5hcHBseSgnJGF0dHInKTsgICAgICAgICAgICAgICAgICAvLyBzaG9ydGhhbmQgZm9yIGVsZW0uYXR0cignYXR0cicsICcnKTtcclxuICAgKi9cclxuICBhcHBseSguLi5zdHJpbmdzKSB7XHJcbiAgICBsZXQgYXBwbGllZDtcclxuICAgIGxldCBzZXRBcHBsaWVkO1xyXG4gICAgbGV0IGNhbGxiYWNrO1xyXG4gICAgbGV0IG5hbWU7XHJcbiAgICBsZXQgbnAxO1xyXG4gICAgbGV0IHNsaWNlO1xyXG5cclxuICAgIG5ldyBTdHIobmV3IEFycihhcmd1bWVudHMpLmpvaW4oJyAnKSlcclxuICAgICAgLnNwbGl0KC8oXFxzKykvKVxyXG4gICAgICAuZm9yRWFjaCgoc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgaWYgKCFhcHBsaWVkKSB7XHJcbiAgICAgICAgICBucDEgPSBzdHJpbmcuc2xpY2UoMCwgMSk7XHJcbiAgICAgICAgICBjYWxsYmFjayA9IGFwcGxpZWRSZWdFeHBzW25wMV07XHJcbiAgICAgICAgICBzbGljZSA9IDE7XHJcblxyXG4gICAgICAgICAgaWYgKGNhbGxiYWNrICYmICFpc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xyXG4gICAgICAgICAgICBjYWxsYmFjayA9IGNhbGxiYWNrW3N0cmluZy5zbGljZSgxLCAyKV07XHJcbiAgICAgICAgICAgIHNsaWNlID0gMjtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAoL15cXHMrJC8udGVzdChzdHJpbmcpIHx8ICFjYWxsYmFjaykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgbmFtZSA9IHN0cmluZy5zbGljZShzbGljZSkubWF0Y2goL15bXigpXSsvKTtcclxuXHJcbiAgICAgICAgICBpZiAoIW5hbWUgJiYgKG5wMSAhPT0gJyonICYmIG5wMSAhPT0gJyYnKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgYXBwbGllZCA9IHtcclxuICAgICAgICAgICAgbmFtZTogbmFtZSA/IG5hbWVbMF0gOiAnJyxcclxuICAgICAgICAgICAgYXJnczogc3RyaW5nLnNsaWNlKHNsaWNlICsgKG5hbWUgPyBuYW1lWzBdIDogJycpLmxlbmd0aCksXHJcbiAgICAgICAgICAgIGNhbGxiYWNrXHJcbiAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgIHNldEFwcGxpZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFzZXRBcHBsaWVkKSB7XHJcbiAgICAgICAgICBhcHBsaWVkLmFyZ3MgKz0gc3RyaW5nO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFhcHBsaWVkLmFyZ3MgfHwgL15cXChbXFxzXFxTXStcXCkkLy50ZXN0KGFwcGxpZWQuYXJncykpIHtcclxuICAgICAgICAgIGFwcGxpZWQuY2FsbGJhY2sodGhpcywgYXBwbGllZC5uYW1lLCBhcHBsaWVkLmFyZ3MucmVwbGFjZSgvXlxcKHxcXCkkL2csICcnKSk7XHJcbiAgICAgICAgICBhcHBsaWVkID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldEFwcGxpZWQgPSBmYWxzZTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEVsZW0jYXR0clxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3QuPFN0cmluZywgU3RyaW5nfEVsZW1WYWx1ZUNhbGxiYWNrPn0gW2F0dHJdIC0gTmFtZSBvZiB0aGUgYXR0cmlidXRlIHRvIGdldCBvclxyXG4gICAqIGFuIG9iamVjdCBvZiB0aGUgZm9ybWF0IHsgW2F0dHJOYW1lXTogdmFsdWUsIC4uLiB9IHRvIHNldCBhdHRyaWJ1dGVzLlxyXG4gICAqIEBwYXJhbSB7U3RyaW5nfEVsZW1WYWx1ZUNhbGxiYWNrfSBbdmFsdWVdIC0gSWYgdGhlIGZpcnN0IGFyZ3VtZW50IGlzIGEgc3RyaW5nXHJcbiAgICogaXQgc2hvdWxkIGJlIGEgdmFsdWUgdG8gc2V0IGZvciB0aGF0IGF0dHJpYnV0ZS5cclxuICAgKiBAcmV0dXJucyB7U3VwZXJ8U3RyaW5nfEVsZW19IElmIG5vIGFyZ3VtZW50cyBwYXNzZWQsIEQtV3JhcCBvZiBhdHRyaWJ1dGVzIG9mIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBzZXRcclxuICAgKiByZXR1cm5lZCwgaWYgMSBzdHJpbmcgYXJndW1lbnQgaXMgcGFzc2VkIHRoZSB2YWx1ZSBvZiB0aGUgYXR0cmlidXRlIG9mIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBzZXRcclxuICAgKiByZXR1cm5lZCBvdGhlcndpc2UgcmV0dXJucyB0aGlzLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBNZXRob2QgZm9yIGdldHRpbmcvc2V0dGluZyBhdHRyaWJ1dGVzLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBlbGVtLmF0dHIoJ2F0dHIxJywgJ3ZhbHVlMScpOyAvLyBhdHRyaWJ1dGUgYXR0cjEgc2V0IHRvICd2YWx1ZTEnIGFuZCB0aGlzIHJldHVybmVkXHJcbiAgICogZWxlbS5hdHRyKCdhdHRyMScpOyAgICAgICAgICAgLy8gJ3ZhbHVlMSdcclxuICAgKiBlbGVtLmF0dHIoe1xyXG4gICAqICAgYXR0cjE6ICd2YWx1ZTMnLCAgICAgICAgICAgIC8vIGF0dHJpYnV0ZSBhdHRyMSBzZXQgdG8gJ3ZhbHVlMydcclxuICAgKiAgIGF0dHIyOiAndmFsdWUyJyAgICAgICAgICAgICAvLyBhdHRyaWJ1dGUgYXR0cjIgc2V0IHRvICd2YWx1ZTInXHJcbiAgICogfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyByZXR1cm5lZFxyXG4gICAqIGVsZW0uYXR0cigpLiQ7ICAgICAgICAgICAgICAgIC8vIHsgYXR0cjE6ICd2YWx1ZTMnLCBhdHRyMjogJ3ZhbHVlMicgfVxyXG4gICAqL1xyXG4gIGF0dHIoYXR0ciwgdmFsdWUpIHtcclxuICAgIGNvbnN0IGVsZW0gPSBnZXRFbGVtKHRoaXMpO1xyXG5cclxuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICByZXR1cm4gbmV3IFN1cGVyKGVsZW0uYXR0cmlidXRlcykub2JqZWN0KChvLCBhdHRyKSA9PiB7XHJcbiAgICAgICAgb1thdHRyLm5hbWVdID0gYXR0ci52YWx1ZTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPD0gMSAmJiBpc1N0cmluZyhhdHRyKSkge1xyXG4gICAgICBjb25zdCBucyA9IGF0dHJOU1N3aXRjaGVyKGF0dHIsIFtuZXcgRWxlbShlbGVtKV0pO1xyXG5cclxuICAgICAgcmV0dXJuIGlzTnVsbChucylcclxuICAgICAgICA/IGVsZW0uZ2V0QXR0cmlidXRlKGF0dHIpXHJcbiAgICAgICAgOiBlbGVtLmdldEF0dHJpYnV0ZU5TKG5zLCBhdHRyKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAyKSB7XHJcbiAgICAgIGF0dHIgPSB7IFthdHRyXTogdmFsdWUgfTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5mb3JFYWNoKChlbGVtLCBpbmRleCkgPT4ge1xyXG4gICAgICBpZiAoIWlzRWxlbWVudChlbGVtKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgbmV3IFN1cGVyKGF0dHIpLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcclxuICAgICAgICB2YWx1ZSA9IGlzRnVuY3Rpb24odmFsdWUpXHJcbiAgICAgICAgICA/IHZhbHVlKG5ldyBFbGVtKGVsZW0pLmF0dHIoa2V5KSwgZWxlbSwgaW5kZXgpXHJcbiAgICAgICAgICA6IHZhbHVlO1xyXG5cclxuICAgICAgICBpZiAoaXNOaWwodmFsdWUpKSB7XHJcbiAgICAgICAgICByZXR1cm4gbmV3IEVsZW0oZWxlbSkucmVtb3ZlQXR0cihrZXkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgbnMgPSBhdHRyTlNTd2l0Y2hlcihrZXksIFtuZXcgRWxlbShlbGVtKV0pO1xyXG5cclxuICAgICAgICBpZiAoaXNOdWxsKG5zKSkge1xyXG4gICAgICAgICAgZWxlbS5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGVsZW0uc2V0QXR0cmlidXRlTlMobnMsIGtleSwgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRWxlbSNibG9iXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucyA9IHt9XSAtIE9wdGlvbnMgdGhhdCBhcmUgcGFzc2VkIGludG8ge0BsaW5rIGJsb2J9LlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlLjxCbG9iT2JqZWN0Pn0gTmV3IGluc3RhbmNlIG9mIHByb21pc2UuXHJcbiAgICogQGRlc2NyaXB0aW9uIFJldHVybnMgYSB7QGxpbmsgQmxvYk9iamVjdH0gUHJvbWlzZS4gV29ya3Mgd2l0aCBpbWFnZSBvciBjYW52YXMgZmlyc3QgZWxlbWVudC5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogaW1hZ2UuYmxvYigpLnRoZW4oKGJsb2IpID0+IGNvbnNvbGUubG9nKGJsb2IpKTsgIC8vIEJsb2JPYmplY3RcclxuICAgKiBjYW52YXMuYmxvYigpLnRoZW4oKGJsb2IpID0+IGNvbnNvbGUubG9nKGJsb2IpKTsgLy8gQmxvYk9iamVjdFxyXG4gICAqL1xyXG4gIGJsb2Iob3B0aW9ucyA9IHt9KSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBjb25zdCBlbGVtID0gdGhpcy5maXJzdCgpO1xyXG4gICAgICBjb25zdCB7IG5hbWUgfSA9IGVsZW07XHJcblxyXG4gICAgICBpZiAobmFtZSAhPT0gJ2ltZycgJiYgbmFtZSAhPT0gJ2NhbnZhcycpIHtcclxuICAgICAgICByZWplY3QobmV3IEVycm9yKCdGaXJzdCBlbGVtZW50IGluIHRoZSBzZXQgaXNuXFwndCBhbiBpbWFnZSBvciBhIGNhbnZhcyEgKEVsZW0jYmxvYiknKSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChuYW1lID09PSAnY2FudmFzJykge1xyXG4gICAgICAgIHJldHVybiByZXNvbHZlKGVsZW0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBlbGVtXHJcbiAgICAgICAgLmxvYWQoKVxyXG4gICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgIGlmIChlbGVtLmlzQnJva2VuKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoJ1RoZSBpbWFnZSBpcyBicm9rZW4hIChFbGVtI2Jsb2IpJykpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGNvbnN0IGNhbnZhcyA9IG5ldyBFbGVtKG5hdGl2ZURvY3VtZW50KS5jYW52YXMoKTtcclxuICAgICAgICAgIGNvbnN0IHdpZHRoID0gZWxlbS53aWR0aCgpO1xyXG4gICAgICAgICAgY29uc3QgaGVpZ2h0ID0gZWxlbS5oZWlnaHQoKTtcclxuXHJcbiAgICAgICAgICBjYW52YXNcclxuICAgICAgICAgICAgLndpZHRoKHdpZHRoKVxyXG4gICAgICAgICAgICAuaGVpZ2h0KGhlaWdodClcclxuICAgICAgICAgICAgLmRyYXdJbWFnZShlbGVtLiRbMF0sIDAsIDApO1xyXG5cclxuICAgICAgICAgIHJlc29sdmUoY2FudmFzKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pLnRoZW4oKGNhbnZhcykgPT4ge1xyXG4gICAgICBjb25zdCBkYXRhVVJMID0gY2FudmFzLmRhdGFVUkwoKTtcclxuICAgICAgY29uc3QgYnl0ZVN0cmluZyA9IGF0b2IoZGF0YVVSTC5zcGxpdCgnLCcpWzFdKTtcclxuICAgICAgY29uc3QgbGVuZ3RoID0gYnl0ZVN0cmluZy5sZW5ndGg7XHJcbiAgICAgIGNvbnN0IGFiID0gbmV3IEFycmF5QnVmZmVyKGxlbmd0aCk7XHJcbiAgICAgIGNvbnN0IGlhID0gbmV3IFVpbnQ4QXJyYXkoYWIpO1xyXG5cclxuICAgICAgdGltZXMobGVuZ3RoLCAoaSkgPT4ge1xyXG4gICAgICAgIGlhW2ldID0gYnl0ZVN0cmluZy5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHJldHVybiBibG9iKGFiLCBvcHRpb25zKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBFbGVtI2JsdXJcclxuICAgKiBAcmV0dXJucyB7RWxlbX0gUmV0dXJucyB0aGlzLlxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvQVBJL0hUTUxFbGVtZW50L2JsdXJcclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3JcclxuICAgKiBbSFRNTEVsZW1lbnQjYmx1cl17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvQVBJL0hUTUxFbGVtZW50L2JsdXJ9LlxyXG4gICAqL1xyXG4gIGJsdXIoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5mb3JFYWNoKChlbGVtKSA9PiB7XHJcbiAgICAgIGlmIChpc0VsZW1lbnQoZWxlbSkpIHtcclxuICAgICAgICBlbGVtLmJsdXIoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEVsZW0jY2FsY0NTU1xyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbcHNldWRvXSAtIFNlZSB0aGUgbGluay5cclxuICAgKiBAcmV0dXJucyB7Q1NTU3R5bGVEZWNsYXJhdGlvbn0gU2VlIHRoZSBsaW5rLlxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvQVBJL1dpbmRvdy9nZXRDb21wdXRlZFN0eWxlXHJcbiAgICogQGRlc2NyaXB0aW9uIFN5bm9ueW0gZm9yXHJcbiAgICogW2dldENvbXB1dGVkU3R5bGVde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0FQSS9XaW5kb3cvZ2V0Q29tcHV0ZWRTdHlsZX0uXHJcbiAgICogUmV0dXJucyBjb21wdXRlZCBzdHlsZSBmb3IgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIHNldCBvciB1bmRlZmluZWQuXHJcbiAgICovXHJcbiAgY2FsY0NTUyhwc2V1ZG8gPSBudWxsKSB7XHJcbiAgICByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZShnZXRFbGVtKHRoaXMpLCBwc2V1ZG8pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBFbGVtI2NoYW5nZVJ1bGVcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgLSBOYW1lIG9mIHRoZSBydWxlLlxyXG4gICAqIEBwYXJhbSB7T2JqZWN0LjxTdHJpbmcsIFN0cmluZz59IHN0eWxlIC0gU3R5bGUgZm9yIHRoZSBzZWxlY3Rvci5cclxuICAgKiBAcmV0dXJucyB7RWxlbX0gUmV0dXJucyB0aGlzLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBNZXRob2QgZm9yIGNoYW5naW5nIGNzcyBzdHlsZXMgaW4gdGhlIGZpcnN0IHN0eWxlIHRhZyBpbiB0aGUgc2V0LlxyXG4gICAqIE5vdGU6IHN0eWxlIGVsZW1lbnQgc2hvdWxkIGJlIGluc2lkZSB0aGUgZG9jdW1lbnQuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIHN0eWxlLmNoYW5nZVJ1bGUoJ2ltZy1zaXplJywge1xyXG4gICAqICAgd2lkdGg6ICc1MHB4ICFpbXBvcnRhbnQnLFxyXG4gICAqICAgaGVpZ2h0OiAnNTBweCAhaW1wb3J0YW50J1xyXG4gICAqIH0pO1xyXG4gICAqL1xyXG4gIGNoYW5nZVJ1bGUobmFtZSwgc3R5bGUpIHtcclxuICAgIHRoaXMuc29tZSgoZWxlbSkgPT4ge1xyXG4gICAgICBpZiAoZ2V0TmFtZShlbGVtKSA9PT0gJ3N0eWxlJykge1xyXG4gICAgICAgIGNvbnN0IHsgdmFsdWU6IHJ1bGUgfSA9IG5ldyBBcnIoZWxlbS5zaGVldC5jc3NSdWxlcykuZmluZCgocnVsZSkgPT4gcnVsZS5kd2F5bmVEYXRhICYmIHJ1bGUuZHdheW5lRGF0YS5uYW1lID09PSBuYW1lKSB8fCB7fTtcclxuXHJcbiAgICAgICAgaWYgKHJ1bGUpIHtcclxuICAgICAgICAgIG5ldyBFbGVtKHJ1bGUpLmNzcyhzdHlsZSk7XHJcblxyXG4gICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRWxlbSNjaGlsZFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge051bWJlcnxTdHJpbmd8RWxlbXxFbGVtZW50fEVsZW1lbnRbXX0gZWxlbWVudCAtIElmIHRoZSBhcmd1bWVudCBpcyBhIG51bWJlciBhIHdyYXAgb2YgdGhlIHNldCBvZiB0aGUgY2hpbGRyZW5cclxuICAgKiBvZiB0aGlzIGluZGV4IG9mIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IHJldHVybmVkIG90aGVyd2lzZSBhbiBlbGVtZW50IHRvIHB1dCBpbnRvIHRoaXMgZWxlbWVudCwgYSBjb2xsZWN0aW9uXHJcbiAgICogb3IgYSBzZWxlY3RvciBvZiBpdC5cclxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGVuZCAtIElmIHRoZSBlbGVtZW50cyBzaG91bGQgYmUgaW5zZXJ0ZWQgdG8gdGhlIGVuZC4gSWYgZmFsc2UgdGhleSBhcmUgaW5zZXJ0ZWQgdG8gdGhlIHN0YXJ0LlxyXG4gICAqIEByZXR1cm5zIHtFbGVtfSBSZXR1cm5zIGEgd3JhcCBvZiBjaGlsZHJlbiBvciBpbnNlcnRlZCBlbGVtZW50cy5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIGlzIHNpbWlsYXIgdG9cclxuICAgKiBbTm9kZSNhcHBlbmRDaGlsZF17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvQVBJL05vZGUvYXBwZW5kQ2hpbGR9LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBjb25zdCBjaGlsZCA9IGVsZW0uY2hpbGQoMSk7XHJcbiAgICpcclxuICAgKiBlbGVtLmNoaWxkKGVsZW0yKTtcclxuICAgKiBlbGVtLmNoaWxkKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpZCcpKTtcclxuICAgKiBlbGVtLmNoaWxkKCcjaWQgZGl2LmMxJyk7XHJcbiAgICovXHJcbiAgY2hpbGQoZWxlbWVudCwgZW5kID0gdHJ1ZSkge1xyXG4gICAgaWYgKGlzSW50ZWdlcihlbGVtZW50KSAmJiBlbGVtZW50ID49IDApIHtcclxuICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4oKS5lbGVtKGVsZW1lbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0b0ZpbmQoZWxlbWVudCkuaW50byh0aGlzLCBlbmQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBFbGVtI2NoaWxkcmVuXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfSBELVdyYXAgb2YgdGhlIGNoaWxkcmVuIG9mIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBzZXQuXHJcbiAgICogQGRlc2NyaXB0aW9uIE1ldGhvZCBmb3IgZ2V0dGluZyBlbGVtZW50J3MgY2hpbGRyZW4uXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIGNvbnN0IGNoaWxkcmVuID0gZWxlbS5jaGlsZHJlbigpO1xyXG4gICAqL1xyXG4gIGNoaWxkcmVuKCkge1xyXG4gICAgcmV0dXJuIG5ldyBFbGVtKHRoaXMubGVuZ3RoID8gdGhpcy4kWzBdLmNoaWxkTm9kZXMgOiBbXSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEVsZW0jY2xhc3NcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IFtjbHNdIC0gSWYgaXQncyBwcmVzZW50IGl0IGhhcyB0byBjb250YWluIGNsYXNzIGF0dHJpYnV0ZSB0byBzZXQuXHJcbiAgICogQHJldHVybnMge0FycnxFbGVtfSBJZiB0aGUgYXJndW1lbnQgaXMgcHJlc2VudCB0aGlzIHJldHVybmVkIG90aGVyd2lzZSBhIHdyYXAgb2YgdGhlIGNsYXNzZXMgYXJyYXkgcmV0dXJuZWQuXHJcbiAgICogQGRlc2NyaXB0aW9uIE1ldGhvZCBmb3IgZ2V0dGluZy9zZXR0aW5nIGNsYXNzZXMuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIGVsZW0uY2xhc3MoJ2MxIGMyJyk7IC8vIGNsYXNzIHNldCB0byAnYzEgYzInXHJcbiAgICogZWxlbS5jbGFzcygpLiQ7ICAgICAgLy8gWydjMScsICdjMiddXHJcbiAgICovXHJcbiAgY2xhc3MoY2xzKSB7XHJcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgcmV0dXJuIG5ldyBBcnIoZ2V0RWxlbSh0aGlzKS5jbGFzc05hbWUuc3BsaXQoJyAnKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuZm9yRWFjaCgoZWxlbSkgPT4ge1xyXG4gICAgICBpZiAoaXNFbGVtZW50KGVsZW0pKSB7XHJcbiAgICAgICAgZWxlbS5jbGFzc05hbWUgPSBjbHM7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBFbGVtI2NsaWNrXHJcbiAgICogQHJldHVybnMge0VsZW19IFJldHVybnMgdGhpcy5cclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0FQSS9IVE1MRWxlbWVudC9jbGlja1xyXG4gICAqIEBkZXNjcmlwdGlvbiBTeW5vbnltIGZvclxyXG4gICAqIFtIVE1MRWxlbWVudCNjbGlja117QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvQVBJL0hUTUxFbGVtZW50L2NsaWNrfS5cclxuICAgKi9cclxuICBjbGljaygpIHtcclxuICAgIHJldHVybiB0aGlzLmZvckVhY2goKGVsZW0pID0+IHtcclxuICAgICAgaWYgKGlzRWxlbWVudChlbGVtKSkge1xyXG4gICAgICAgIGVsZW0uY2xpY2soKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEVsZW0jY2xvbmVcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtCb29sZWFufCp9IFtkZWVwID0gZmFsc2VdIC0gU2VlIHRoZWUgbGluay5cclxuICAgKiBAcmV0dXJucyB7RWxlbX0gTmV3IGluc3RhbmNlIG9mIEVsZW0uXHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9BUEkvTm9kZS9jbG9uZU5vZGVcclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3JcclxuICAgKiBbTm9kZSNjbG9uZU5vZGVde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0FQSS9Ob2RlL2Nsb25lTm9kZX0uXHJcbiAgICovXHJcbiAgY2xvbmUoZGVlcCA9IGZhbHNlKSB7XHJcbiAgICByZXR1cm4gdGhpcy5vYmplY3QoKGVsZW1zLCBlbGVtKSA9PiB7XHJcbiAgICAgIGVsZW1zLmFkZChlbGVtLmNsb25lTm9kZSghIWRlZXApKTtcclxuICAgIH0sIG5ldyBFbGVtKCkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBFbGVtI2Nsb3Nlc3RcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IHNlbGVjdG9yIC0gU2VlIHRoZSBsaW5rLlxyXG4gICAqIEByZXR1cm5zIHtFbGVtfSBTZXQgb2YgdGhlIGNsb3Nlc3QgZWxlbWVudHMuXHJcbiAgICogQGRlc2NyaXB0aW9uIFN5bm9ueW0gZm9yXHJcbiAgICogW0VsZW1lbnQjY2xvc2VzdF17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvQVBJL0VsZW1lbnQvY2xvc2VzdH0uXHJcbiAgICovXHJcbiAgY2xvc2VzdChzZWxlY3Rvcikge1xyXG4gICAgcmV0dXJuIHRoaXMub2JqZWN0KChlbGVtcywgZWxlbSkgPT4ge1xyXG4gICAgICB3aGlsZSAoZWxlbSkge1xyXG4gICAgICAgIGlmIChuZXcgRWxlbShlbGVtKS5pcyhzZWxlY3RvcikpIHtcclxuICAgICAgICAgIHJldHVybiBlbGVtcy5hZGQoZWxlbSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBlbGVtID0gZWxlbS5wYXJlbnROb2RlO1xyXG4gICAgICB9XHJcbiAgICB9LCBuZXcgRWxlbSgpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRWxlbSNjb250YWluc1xyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1N0cmluZ3xFbGVtfEVsZW1lbnR9IGVsZW1lbnQgLSBFbGVtZW50IHRvIGZpbmQgb3V0IGlmIGl0J3Mgd2l0aGluIHRoZSBmaXJzdCBlbGVtZW50XHJcbiAgICogaW4gdGhlIHNldCBvciBhIHNlbGVjdG9yIG9mIGl0LlxyXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBSZXR1cm5zIGlmIHRoZSBhcmd1bWVudCB3aXRoaW4gdGhpcyBlbGVtZW50LlxyXG4gICAqIEBkZXNjcmlwdGlvbiBNZXRob2QgaXMgZXh0ZW5zaW9uIGZvclxyXG4gICAqIFtOb2RlI2NvbnRhaW5zXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9BUEkvTm9kZS9jb250YWluc30uXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIGVsZW0xLmNvbnRhaW5zKGVsZW0yKTsgICAvLyB0cnVlfGZhbHNlXHJcbiAgICogZWxlbS5jb250YWlucyhzZWxlY3Rvcik7IC8vIHRydWV8ZmFsc2VcclxuICAgKi9cclxuICBjb250YWlucyhlbGVtZW50KSB7XHJcbiAgICBlbGVtZW50ID0gdG9GaW5kKGVsZW1lbnQpO1xyXG5cclxuICAgIHJldHVybiBnZXRFbGVtKHRoaXMpLmNvbnRhaW5zKGdldEVsZW0oZWxlbWVudCkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBFbGVtI2NyZWF0ZVxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSAtIFR5cGUgb2YgY3JlYXRlZCBlbGVtZW50LiBJZiB0eXBlIGlzIFwiI3RleHRcIiBhIHRleHQgbm9kZSBpcyBjcmVhdGVkLlxyXG4gICAqIElmIHR5cGUgaXMgXCIjY29tbWVudFwiIGEgY29tbWVudCBub2RlIGlzIGNyZWF0ZWQuXHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9ucyAtIFN0cmluZ3MgdGhhdCBhcmUgcGFzc2VkIGludG8ge0BsaW5rIEVsZW0jYXBwbHl9LlxyXG4gICAqIEByZXR1cm5zIHtFbGVtfSBOZXcgaW5zdGFuY2Ugb2YgRWxlbSAtIHdyYXAgb2YgdGhlIGNyZWF0ZWQgZWxlbWVudHMuXHJcbiAgICogQGRlc2NyaXB0aW9uIE1ldGhvZCBmb3IgY3JlYXRpbmcgZWxlbWVudHMgaW5zaWRlIHRoaXMgZWxlbWVudC5cclxuICAgKiBJZiB0aGlzIGVsZW1lbnQgaXMgbm90IGFuIEVsZW1lbnQgdGhlIGVsZW1lbnQgaXMganVzdCBjcmVhdGVkLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBlbGVtLmNyZWF0ZSgnZGl2JywgJyNpZCAuYzEgLmMyICpTb21lIHRleHQqJyk7XHJcbiAgICpcclxuICAgKiAvLyBhbHNvIHRoZXJlIGFyZSBzaG9ydGhhbmRzIGZvciBhbG1vc3QgZXZlcnkgSFRNTC1lbGVtZW50XHJcbiAgICogZWxlbS5kaXYoKTtcclxuICAgKiBlbGVtLmlucHV0KCckdHlwZShjaGVja2JveCkgJG5hbWUoY291bnRyeSknKTtcclxuICAgKi9cclxuICBjcmVhdGUodHlwZSwgLi4uYXBwbGllZEV4cHJlc3Npb25zKSB7XHJcbiAgICByZXR1cm4gdGhpcy5vYmplY3QoKGVsZW1zLCBlbGVtKSA9PiB7XHJcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBuZXcgRWxlbSh0eXBlU3dpdGNoZXIodHlwZSwgW25ldyBFbGVtKGVsZW0pXSkpO1xyXG5cclxuICAgICAgZWxlbWVudC5pbnRvKGVsZW0pO1xyXG5cclxuICAgICAgZWxlbXMuYWRkKGVsZW1lbnQuYXBwbHkuYXBwbHkoZWxlbWVudCwgYXBwbGllZEV4cHJlc3Npb25zKSk7XHJcbiAgICB9LCBuZXcgRWxlbSgpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRWxlbSNjcmVhdGVDb21tZW50XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0IC0gVGV4dCBvZiB0aGUgY29tbWVudC5cclxuICAgKiBAcmV0dXJucyB7RWxlbX0gTmV3IGluc3RhbmNlIG9mIEVsZW0gLSB3cmFwIG9mIHRoZSBjcmVhdGVkIGNvbW1lbnRzLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBNZXRob2QgZm9yIGNyZWF0aW5nIGNvbW1lbnRzIGluc2lkZSB0aGlzIGVsZW1lbnQuXHJcbiAgICogSWYgdGhpcyBlbGVtZW50IGlzIG5vdCBhbiBFbGVtZW50IHRoZSBjb21tZW50IGlzIGp1c3QgY3JlYXRlZC5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogZWxlbS5jcmVhdGVDb21tZW50KCdjb21tZW50Jyk7XHJcbiAgICovXHJcbiAgY3JlYXRlQ29tbWVudCh0ZXh0KSB7XHJcbiAgICByZXR1cm4gdGhpc1xyXG4gICAgICAuY3JlYXRlKCcjY29tbWVudCcpXHJcbiAgICAgIC50ZXh0KHRleHQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBFbGVtI2NyZWF0ZVRleHRcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IHRleHQgLSBUZXh0LlxyXG4gICAqIEByZXR1cm5zIHtFbGVtfSBOZXcgaW5zdGFuY2Ugb2YgRWxlbSAtIHdyYXAgb2YgdGhlIGNyZWF0ZWQgdGV4dCBub2Rlcy5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIGZvciBjcmVhdGluZyB0ZXh0IG5vZGVzIGluc2lkZSB0aGlzIGVsZW1lbnQuXHJcbiAgICogSWYgdGhpcyBlbGVtZW50IGlzIG5vdCBhbiBFbGVtZW50IHRoZSB0ZXh0IG5vZGUgaXMganVzdCBjcmVhdGVkLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBlbGVtLmNyZWF0ZVRleHQoJ3RleHQnKTtcclxuICAgKi9cclxuICBjcmVhdGVUZXh0KHRleHQpIHtcclxuICAgIHJldHVybiB0aGlzXHJcbiAgICAgIC5jcmVhdGUoJyN0ZXh0JylcclxuICAgICAgLnRleHQodGV4dCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEVsZW0jY3NzXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdC48U3RyaW5nLCBTdHJpbmd8RWxlbVZhbHVlQ2FsbGJhY2s+fSBbcHJvcGVydHldIC0gTmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0IG9yXHJcbiAgICogYW4gb2JqZWN0IG9mIHRoZSBmb3JtYXQgeyBbcHJvcGVydHldOiB2YWx1ZSwgLi4uIH0gdG8gc2V0IHN0eWxlcy5cclxuICAgKiBAcGFyYW0ge1N0cmluZ3xFbGVtVmFsdWVDYWxsYmFja30gW3ZhbHVlXSAtIElmIHRoZSBmaXJzdCBhcmd1bWVudCBpcyBhIHN0cmluZyBpdCBzaG91bGQgYmUgYSB2YWx1ZSB0byBzZXQgZm9yIHRoYXQgcHJvcGVydHkuXHJcbiAgICogQHJldHVybnMge1N1cGVyfFN0cmluZ3xFbGVtfSBJZiBubyBhcmd1bWVudHMgcGFzc2VkLCBELVdyYXAgb2YgY3NzIHN0eWxlcyBvZiB0aGUgZWxlbWVudCByZXR1cm5lZCxcclxuICAgKiBpZiAxIHN0cmluZyBhcmd1bWVudCBpcyBwYXNzZWQgdGhlIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eSByZXR1cm5lZCBvdGhlcndpc2UgcmV0dXJucyB0aGlzLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBNZXRob2QgZm9yIGdldHRpbmcvc2V0dGluZyBzdHlsZXMuIFN1cHBvcnRzICFpbXBvcnRhbnQuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIGVsZW0uY3NzKCdkaXNwbGF5JywgJ25vbmUnKTsgLy8gZGlzcGxheSBzZXQgdG8gJ25vbmUnIGFuZCB0aGlzIHJldHVybmVkXHJcbiAgICogZWxlbS5jc3MoJ2Rpc3BsYXknKTsgICAgICAgICAvLyAnbm9uZSdcclxuICAgKiBlbGVtLmNzcyh7XHJcbiAgICogICBkaXNwbGF5OiAnaW5saW5lJywgICAgICAgICAvLyBkaXNwbGF5IHNldCB0byAnaW5saW5lJ1xyXG4gICAqICAgY3Vyc29yOiAncG9pbnRlcicgICAgICAgICAgLy8gY3Vyc29yIHNldCB0byAncG9pbnRlcidcclxuICAgKiB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgcmV0dXJuZWRcclxuICAgKiBlbGVtLmNzcygpLiQ7ICAgICAgICAgICAgICAgIC8vIHsgZGlzcGxheTogJ25vbmUnLCBjdXJzb3I6ICdwb2ludGVyJyB9XHJcbiAgICovXHJcbiAgY3NzKHByb3BlcnR5LCB2YWx1ZSkge1xyXG4gICAgbGV0IHN0eWxlID0gZ2V0RWxlbSh0aGlzKS5zdHlsZTtcclxuXHJcbiAgICBpZiAoaXNTdHlsZVJ1bGUodGhpcy4kWzBdKSkge1xyXG4gICAgICBzdHlsZSA9IHRoaXMuJFswXS5zdHlsZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgcmV0dXJuIG5ldyBTdHIoc3R5bGUuY3NzVGV4dClcclxuICAgICAgICAuc3BsaXQoLzsgPy8pXHJcbiAgICAgICAgLm9iamVjdCgobywgdmFsdWUpID0+IHtcclxuICAgICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBwcm9wZXJ0eSA9IHZhbHVlLnNwbGl0KC86IC8pO1xyXG5cclxuICAgICAgICAgICAgb1tuZXcgU3RyKHByb3BlcnR5WzBdKS50b0NhbWVsQ2FzZSgpLiRdID0gcHJvcGVydHlbMV07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPD0gMSAmJiBpc1N0cmluZyhwcm9wZXJ0eSkpIHtcclxuICAgICAgcHJvcGVydHkgPSBuZXcgU3RyKHByb3BlcnR5KS50b0h5cGhlbkNhc2UoKS4kO1xyXG5cclxuICAgICAgcmV0dXJuIHN0eWxlLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkpICsgKHN0eWxlLmdldFByb3BlcnR5UHJpb3JpdHkocHJvcGVydHkpID8gJyAhaW1wb3J0YW50JyA6ICcnKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAyKSB7XHJcbiAgICAgIHByb3BlcnR5ID0geyBbcHJvcGVydHldOiB2YWx1ZSB9O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLmZvckVhY2goKGVsZW0sIGluZGV4KSA9PiB7XHJcbiAgICAgIGlmICghaXNFbGVtZW50KGVsZW0pICYmICFpc1N0eWxlUnVsZShlbGVtKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgbmV3IFN1cGVyKHByb3BlcnR5KS5mb3JFYWNoKCh2YWx1ZSwgcHJvcGVydHkpID0+IHtcclxuICAgICAgICBwcm9wZXJ0eSA9IG5ldyBTdHIocHJvcGVydHkpLnRvSHlwaGVuQ2FzZSgpLiQ7XHJcblxyXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xyXG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZShuZXcgRWxlbShlbGVtKS5jc3MocHJvcGVydHkpLCBlbGVtLCBpbmRleCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBlbGVtLnN0eWxlLnJlbW92ZVByb3BlcnR5KHByb3BlcnR5KTtcclxuICAgICAgICBlbGVtLnN0eWxlLnNldFByb3BlcnR5KFxyXG4gICAgICAgICAgcHJvcGVydHksXHJcbiAgICAgICAgICB2YWx1ZS5yZXBsYWNlKC8gPyFpbXBvcnRhbnQkLywgJycpLFxyXG4gICAgICAgICAgLyFpbXBvcnRhbnQkLy50ZXN0KHZhbHVlKSA/ICdpbXBvcnRhbnQnIDogJydcclxuICAgICAgICApO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBFbGVtI2N0eFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R8Q3R4Q2FsbGJhY2t9IFtwcm9wZXJ0eV0gLSBJZiBwcmVzZW50IGFuZCBvYmplY3RcclxuICAgKiBpdCdzIGFzc2lnbmVkIHRvIHRoZSBjYW52YXMgcmVuZGVyaW5nIGNvbnRleHQsIGlmIGZ1bmN0aW9uXHJcbiAgICogaXQncyBjYWxsZWQgd2l0aCBjYW52YXMgcmVuZGVyaW5nIGNvbnRleHQgYXJndW1lbnQsIGlmIHN0cmluZ1xyXG4gICAqIHRoZSB2YWx1ZSBmcm9tIHRoZSBzZWNvbmQgYXJndW1lbnQgaXMgdXNlZCBmb3IgYXNzaWduaW5nXHJcbiAgICogdGhpcyBwcm9wZXJ0eSB0byBjYW52YXMgcmVuZGVyaW5nIGNvbnRleHQgYW5kIGlmIG5vdCBwcmVzZW50XHJcbiAgICogY2FudmFzIHJlbmRlcmluZyBjb250ZXh0IHJldHVybmVkLlxyXG4gICAqIEBwYXJhbSB7Kn0gW3ZhbHVlXSAtIFNlZSB0aGUgcHJvcGVydHkgYXJndW1lbnQuXHJcbiAgICogQHJldHVybnMge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRHxFbGVtfVxyXG4gICAqIEBkZXNjcmlwdGlvbiBSZW5kZXJpbmcgY29udGV4dCBvZiB0aGUgZmlyc3QgY2FudmFzIGluIHRoZSBzZXQuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIGNhbnZhcy5jdHg7IC8vIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRFxyXG4gICAqL1xyXG4gIGN0eChwcm9wZXJ0eSwgdmFsdWUpIHtcclxuICAgIGxldCBjdHg7XHJcblxyXG4gICAgdGhpcy5zb21lKChlbGVtKSA9PiB7XHJcbiAgICAgIGlmIChnZXROYW1lKGVsZW0pID09PSAnY2FudmFzJykge1xyXG4gICAgICAgIGN0eCA9IGVsZW0uZHdheW5lRGF0YS5jdHg7XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgcmV0dXJuIGN0eDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWN0eCkge1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaXNGdW5jdGlvbihwcm9wZXJ0eSkpIHtcclxuICAgICAgcHJvcGVydHkoY3R4KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDIpIHtcclxuICAgICAgICBwcm9wZXJ0eSA9IHsgW3Byb3BlcnR5XTogdmFsdWUgfTtcclxuICAgICAgfVxyXG5cclxuICAgICAgYXNzaWduKGN0eCwgcHJvcGVydHkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBFbGVtI2RhdGFcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0LjxTdHJpbmcsIFN0cmluZ3xFbGVtVmFsdWVDYWxsYmFjaz59IFtrZXldIC0gTmFtZSBvZiB0aGUgZGF0YSBhdHRyaWJ1dGUgKHdpdGhvdXQgZGF0YS0gcHJlZml4KVxyXG4gICAqIHRvIGdldCBvciBhbiBvYmplY3Qgb2YgdGhlIGZvcm1hdCB7IFthdHRyTmFtZV06IHZhbHVlLCAuLi4gfSB0byBzZXQgYXR0cmlidXRlcy5cclxuICAgKiBAcGFyYW0ge1N0cmluZ3xFbGVtVmFsdWVDYWxsYmFja30gW3ZhbHVlXSAtIElmIHRoZSBmaXJzdCBhcmd1bWVudCBpcyBhIHN0cmluZyBpdCBzaG91bGQgYmUgYSB2YWx1ZSB0byBzZXQgZm9yIHRoYXQgYXR0cmlidXRlLlxyXG4gICAqIEByZXR1cm5zIHtTdXBlcnxTdHJpbmd8RWxlbX0gSWYgbm8gYXJndW1lbnRzIHBhc3NlZCwgRC1XcmFwIG9mIGRhdGFzZXQgb2YgdGhlIGVsZW1lbnQgcmV0dXJuZWQsXHJcbiAgICogaWYgMSBzdHJpbmcgYXJndW1lbnQgaXMgcGFzc2VkIHRoZSB2YWx1ZSBvZiB0aGUgZGF0YSBhdHRyaWJ1dGUgcmV0dXJuZWQgb3RoZXJ3aXNlIHJldHVybnMgdGhpcy5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIGZvciBnZXR0aW5nL3NldHRpbmcgZGF0YSBhdHRyaWJ1dGVzLiBTZWVcclxuICAgKiBbSFRNTEVsZW1lbnQjZGF0YXNldF17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvQVBJL0hUTUxFbGVtZW50L2RhdGFzZXR9LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBlbGVtLmRhdGEoJ3NvbWVLZXkxJywgJ3ZhbHVlJyk7IC8vIGF0dHJpYnV0ZSBkYXRhLXNvbWUta2V5MSBzZXQgdG8gJ3ZhbHVlMScgYW5kIHRoaXMgcmV0dXJuZWRcclxuICAgKiBlbGVtLmRhdGEoJ3NvbWVLZXkxJyk7ICAgICAgICAgIC8vICd2YWx1ZTEnXHJcbiAgICogZWxlbS5kYXRhKHtcclxuICAgKiAgIHNvbWVLZXkxOiAndmFsdWUzJywgICAgICAgICAgIC8vIGF0dHJpYnV0ZSBkYXRhLXNvbWUta2V5MSBzZXQgdG8gJ3ZhbHVlMydcclxuICAgKiAgIHNvbWVLZXkyOiAndmFsdWUyJyAgICAgICAgICAgIC8vIGF0dHJpYnV0ZSBkYXRhLXNvbWUta2V5MiBzZXQgdG8gJ3ZhbHVlMidcclxuICAgKiB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgcmV0dXJuZWRcclxuICAgKiBlbGVtLmRhdGEoKS4kOyAgICAgICAgICAgICAgICAgIC8vIHsgc29tZUtleTE6ICd2YWx1ZTMnLCBzb21lS2V5MjogJ3ZhbHVlMicgfVxyXG4gICAqL1xyXG4gIGRhdGEoa2V5LCB2YWx1ZSkge1xyXG4gICAgY29uc3QgZGF0YXNldCA9IGdldEVsZW0odGhpcykuZGF0YXNldDtcclxuXHJcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgcmV0dXJuIG5ldyBTdXBlcihkYXRhc2V0KS5vYmplY3QoKG8sIHZhbHVlLCBrZXkpID0+IHtcclxuICAgICAgICBvW2tleV0gPSB2YWx1ZTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEgJiYgaXNTdHJpbmcoa2V5KSkge1xyXG4gICAgICByZXR1cm4gZGF0YXNldFtrZXldO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDIpIHtcclxuICAgICAga2V5ID0geyBba2V5XTogdmFsdWUgfTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5mb3JFYWNoKChlbGVtLCBpbmRleCkgPT4ge1xyXG4gICAgICBpZiAoIWlzRWxlbWVudChlbGVtKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaXRlcmF0ZShrZXksICh2YWx1ZSwga2V5KSA9PiB7XHJcbiAgICAgICAgZWxlbS5kYXRhc2V0W2tleV0gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlKGVsZW0uZGF0YXNldFtrZXldLCBlbGVtLCBpbmRleCkgOiB2YWx1ZTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRWxlbSNkYXRhVVJMXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IFt0eXBlID0gJ2ltYWdlL3BuZyddIC0gU2VlIHRoZSBsaW5rXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtlbmNvZGVyT3B0aW9ucyA9IDAuOTJdIC0gU2VlIHRoZSBsaW5rLlxyXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IERhdGEgVVJMIGZvciB0aGUgZmlyc3QgY2FudmFzIGVsZW1lbnQgaW4gdGhlIHNldC5cclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0FQSS9IVE1MQ2FudmFzRWxlbWVudC90b0RhdGFVUkxcclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3JcclxuICAgKiBbSFRNTENhbnZhc0VsZW1lbnQjdG9EYXRhVVJMXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9BUEkvSFRNTENhbnZhc0VsZW1lbnQvdG9EYXRhVVJMfS5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogY2FudmFzLmRhdGFVUkwoKTtcclxuICAgKi9cclxuICBkYXRhVVJMKHR5cGUsIGVuY29kZXJPcHRpb25zKSB7XHJcbiAgICBjb25zdCBjdHggPSB0aGlzLmN0eCgpO1xyXG5cclxuICAgIGlmICghY3R4KSB7XHJcbiAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY3R4LmNhbnZhcy50b0RhdGFVUkwuYXBwbHkoY3R4LmNhbnZhcywgYXJndW1lbnRzKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRWxlbSNkZWxldGVSdWxlXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIC0gTmFtZSBvZiB0aGUgcnVsZS5cclxuICAgKiBAcmV0dXJucyB7RWxlbX0gUmV0dXJucyB0aGlzLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBNZXRob2QgZm9yIGRlbGV0aW5nIGNzcyBzdHlsZXMgaW4gYSBzdHlsZSB0YWcuXHJcbiAgICogTm90ZTogc3R5bGUgZWxlbWVudCBzaG91bGQgYmUgaW5zaWRlIHRoZSBkb2N1bWVudC5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogc3R5bGUuZGVsZXRlUnVsZSgnaW1nLXNpemUnKTtcclxuICAgKi9cclxuICBkZWxldGVSdWxlKG5hbWUpIHtcclxuICAgIHRoaXMuc29tZSgoZWxlbSkgPT4ge1xyXG4gICAgICBpZiAoZ2V0TmFtZShlbGVtKSA9PT0gJ3N0eWxlJykge1xyXG4gICAgICAgIGNvbnN0IHJ1bGUgPSBuZXcgQXJyKGVsZW0uc2hlZXQuY3NzUnVsZXMpLmZpbmQoKHJ1bGUpID0+IHJ1bGUuZHdheW5lRGF0YSAmJiBydWxlLmR3YXluZURhdGEubmFtZSA9PT0gbmFtZSk7XHJcblxyXG4gICAgICAgIGlmIChydWxlKSB7XHJcbiAgICAgICAgICBlbGVtLnNoZWV0LmRlbGV0ZVJ1bGUocnVsZS5rZXkpO1xyXG5cclxuICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEVsZW0jZGlzcGF0Y2hcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtTdHJpbmd8RXZlbnR9IGV2ZW50IC0gRXZlbnQgb3IgYSBzdHJpbmcgKG5ldyBFdmVudChldmVudCkgaXMgY3JlYXRlZCkuXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtldmVudEluaXQgPSB7fV0gLSBTZWUgdGhlIGxpbmsuXHJcbiAgICogQHBhcmFtIHtCb29sZWFufSBbZXZlbnRJbml0LmJ1YmJsZXMgPSB0cnVlXSAtIFNlZSB0aGUgbGluay5cclxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtldmVudEluaXQuY2FuY2VsYWJsZSA9IHRydWVdIC0gU2VlIHRoZSBsaW5rLlxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbZGV0YWlscyA9IHt9XSAtIE9iamVjdCB0aGF0IGlzIGFzc2lnbmVkIHRvIHRoZSBldmVudC5cclxuICAgKiBAcmV0dXJucyB7RWxlbX0gUmV0dXJucyB0aGlzLlxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvQVBJL0V2ZW50L0V2ZW50XHJcbiAgICogQGRlc2NyaXB0aW9uIFN5bm9ueW0gZm9yXHJcbiAgICogW0V2ZW50VGFyZ2V0I2Rpc3BhdGNoRXZlbnRde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0FQSS9FdmVudFRhcmdldC9kaXNwYXRjaEV2ZW50fS5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogZWxlbS5kaXNwYXRjaCgnY2xpY2snKTtcclxuICAgKiBlbGVtLmRpc3BhdGNoKCdjbGljaycsIHsgYnViYmxlczogZmFsc2UsIGNhbmNlbGxhYmxlOiBmYWxzZSB9KTtcclxuICAgKiBlbGVtLmRpc3BhdGNoKG5ldyBDdXN0b21FdmVudCgnY3VzdG9tLWV2ZW50JykpO1xyXG4gICAqL1xyXG4gIGRpc3BhdGNoKGV2ZW50LCBldmVudEluaXQgPSB7fSwgZGV0YWlscyA9IHt9KSB7XHJcbiAgICBjb25zdCB7IGJ1YmJsZXMgPSB0cnVlLCBjYW5jZWxhYmxlID0gdHJ1ZSB9ID0gZXZlbnRJbml0IHx8IHt9O1xyXG4gICAgbGV0IGZpbmFsRXZlbnQgPSBldmVudDtcclxuXHJcbiAgICBpZiAoIS9FdmVudCQvLnRlc3QodG9TdHJpbmdUYWcoZmluYWxFdmVudCkpKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgZmluYWxFdmVudCA9IG5ldyBFdmVudChmaW5hbEV2ZW50LCB7IGJ1YmJsZXMsIGNhbmNlbGFibGUgfSk7XHJcbiAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgIGZpbmFsRXZlbnQgPSBuYXRpdmVEb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcclxuICAgICAgICBmaW5hbEV2ZW50LmluaXRFdmVudChldmVudCwgYnViYmxlcywgY2FuY2VsYWJsZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGFzc2lnbihmaW5hbEV2ZW50LCBkZXRhaWxzKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5mb3JFYWNoKChlbGVtKSA9PiB7XHJcbiAgICAgIGlmIChpc0VsZW1lbnQoZWxlbSkpIHtcclxuICAgICAgICBlbGVtLmRpc3BhdGNoRXZlbnQoZmluYWxFdmVudCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBFbGVtI2VsZW1cclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtpbmRleCA9IDBdIC0gSW5kZXggb2YgdGhlIGVsZW1lbnQgb2YgdGhlIHNldCB0byBnZXQuIE5lZ2F0aXZlIGluZGV4IG1lYW5zIGVsZW0ubGVuZ3RoICsgaW5kZXguXHJcbiAgICogQHJldHVybnMge0VsZW19IE5ldyBpbnN0YW5jZSBvZiBFbGVtLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBlbGVtLmVsZW0oMSk7IC8vIGEgd3JhcCBvZiB0aGUgZWxlbWVudCBpbiB0aGUgc2V0IHRoYXQgaGFzIGluZGV4IDFcclxuICAgKiBlbGVtLmVsZW0oKTsgIC8vIGEgd3JhcCBvZiB0aGUgZWxlbWVudCBpbiB0aGUgc2V0IHRoYXQgaGFzIGluZGV4IDBcclxuICAgKi9cclxuICBlbGVtKGluZGV4ID0gMCkge1xyXG4gICAgaWYgKGluZGV4IDwgMCkge1xyXG4gICAgICBpbmRleCA9IHRoaXMubGVuZ3RoICsgaW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG5ldyBFbGVtKHRoaXMuJFtpbmRleF0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBFbGVtI2ZpbHRlclxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbnxFbGVtZW50W118RWxlbX0gW3NlbGVjdG9yID0gQm9vbGVhbl0gLSBJZiBpdCdzIGEgc3RyaW5nIHRoZSBtZXRob2QgZmlsdGVycyBlbGVtZW50cyB3aXRoIHRoZSBzZWxlY3RvclxyXG4gICAqIG90aGVyd2lzZSBzdXBlci5maWx0ZXIgaXMgY2FsbGVkLlxyXG4gICAqIEByZXR1cm5zIHtFbGVtfSBOZXcgaW5zdGFuY2Ugb2YgRWxlbS5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIGZvciBmaWx0ZXJpbmcgZWxlbWVudHMuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIGVsZW0uZmlsdGVyKChlbGVtKSA9PiBuZXcgRWxlbShlbGVtKS5jbG9zZXN0KCcucGFyZW50JykpO1xyXG4gICAqIGVsZW0uZmlsdGVyKGVsZW1zSW5BcnJheSk7XHJcbiAgICogZWxlbS5maWx0ZXIoZWxlbXNJbkVsZW0pO1xyXG4gICAqIGVsZW0uZmlsdGVyKCcuY2hpbGQnKTtcclxuICAgKi9cclxuICBmaWx0ZXIoc2VsZWN0b3IgPSBCb29sZWFuKSB7XHJcbiAgICByZXR1cm4gbmV3IEVsZW0oc3VwZXIuZmlsdGVyKGZpbHRlclN3aXRjaGVyKHNlbGVjdG9yKSkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBFbGVtI2ZpbmRcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIC0gU2VsZWN0b3IgdG8gZmluZC5cclxuICAgKiBAcmV0dXJucyB7RWxlbXx7IGtleTogS2V5LCB2YWx1ZTogKiB9fG51bGx9IE5ldyBpbnN0YW5jZSBvZiBFbGVtIGlmIHNlbGVjdG9yIGlzIGEgc3RyaW5nXHJcbiAgICogb3RoZXJ3aXNlIHN1cGVyLmZpbmQgaXMgY2FsbGVkLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBTeW5vbnltIGZvclxyXG4gICAqIFtFbGVtZW50I3F1ZXJ5U2VsZWN0b3JBbGxde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0FQSS9FbGVtZW50L3F1ZXJ5U2VsZWN0b3JBbGx9LlxyXG4gICAqL1xyXG4gIGZpbmQoc2VsZWN0b3IpIHtcclxuICAgIGlmICghaXNTdHJpbmcoc2VsZWN0b3IpKSB7XHJcbiAgICAgIHJldHVybiBzdXBlci5maW5kKHNlbGVjdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5vYmplY3QoKGVsZW1zLCBlbGVtKSA9PiB7XHJcbiAgICAgIGVsZW1zLmFkZChmaW5kKHNlbGVjdG9yLCBlbGVtKSk7XHJcbiAgICB9LCBuZXcgRWxlbSgpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRWxlbSNmaXJzdFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcmV0dXJucyB7RWxlbX0gTmV3IGluc3RhbmNlIG9mIEVsZW0uXHJcbiAgICogQGRlc2NyaXB0aW9uIFN5bm9ueW0gZm9yIGVsZW0uZWxlbSgwKS5cclxuICAgKi9cclxuICBmaXJzdCgpIHtcclxuICAgIHJldHVybiB0aGlzLmVsZW0oMCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEVsZW0jZmlyc3RDaGlsZFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1N0cmluZ30gW3NlbGVjdG9yID0gbnVsbF0gLSBJZiBwcmVzZW50LCBmaW5kcyBmaXJzdCBjaGlsZCBpbiBldmVyeSBlbGVtIHRoYXQgbWF0Y2hlcyB0aGUgc2VsZWN0b3IuXHJcbiAgICogSWYgbm90LCBmaW5kcyBmaXJzdCBjaGlsZCBvZiBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldC5cclxuICAgKiBAcmV0dXJucyB7RWxlbX0gTmV3IGluc3RhbmNlIG9mIEVsZW0uXHJcbiAgICogQGRlc2NyaXB0aW9uIE1ldGhvZCBmb3IgZmluZGluZyBmaXJzdCBjaGlsZHJlbiBvZiBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldC5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogZWxlbS5maXJzdCgpOyAgICAgICAvLyBmaW5kcyBmaXJzdCBjaGlsZCBvZiBlYWNoIGVsZW1lbnQgaW4gdGhlIGVsZW0gc2V0XHJcbiAgICogZWxlbS5maXJzdCgnLmZvbycpOyAvLyBmaW5kIGZpcnN0IGNoaWxkIHRoYXQgaGFzIGZvbyBjbGFzcyBvZiBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldFxyXG4gICAqL1xyXG4gIGZpcnN0Q2hpbGQoc2VsZWN0b3IgPSBudWxsKSB7XHJcbiAgICByZXR1cm4gdGhpcy5vYmplY3QoKGVsZW1zLCBlbGVtKSA9PiB7XHJcbiAgICAgIGNvbnN0IHsgdmFsdWU6IGZvdW5kIH0gPSBuZXcgRWxlbShlbGVtKVxyXG4gICAgICAgIC5jaGlsZHJlbigpXHJcbiAgICAgICAgLmZpbmQoKGVsZW0pID0+IG5ldyBFbGVtKGVsZW0pLmlzKHNlbGVjdG9yKSkgfHwge307XHJcblxyXG4gICAgICBlbGVtcy5hZGQoZm91bmQpO1xyXG4gICAgfSwgbmV3IEVsZW0oKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEVsZW0jZm9jdXNcclxuICAgKiBAcmV0dXJucyB7RWxlbX0gUmV0dXJucyB0aGlzLlxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvQVBJL0hUTUxFbGVtZW50L2ZvY3VzXHJcbiAgICogQGRlc2NyaXB0aW9uIFN5bm9ueW0gZm9yXHJcbiAgICogW0hUTUxFbGVtZW50I2ZvY3VzXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9BUEkvSFRNTEVsZW1lbnQvZm9jdXN9LlxyXG4gICAqL1xyXG4gIGZvY3VzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZm9yRWFjaCgoZWxlbSkgPT4ge1xyXG4gICAgICBpZiAoaXNFbGVtZW50KGVsZW0pKSB7XHJcbiAgICAgICAgZWxlbS5mb2N1cygpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRWxlbSNnZXRSdWxlXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIC0gTmFtZSBvZiB0aGUgcnVsZS5cclxuICAgKiBAcmV0dXJucyB7eyBzZWxlY3RvcjogKFN0cmluZ3x2b2lkKSwgcnVsZXM6IE9iamVjdCB9fSBTZXQgb2YgdGhlIGNzcyBydWxlcy5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIGZvciBnZXR0aW5nIHNldCBvZiB0aGUgcnVsZXMgdW5kZXIgdGhlIG5hbWUuXHJcbiAgICogTm90ZTogc3R5bGUgZWxlbWVudCBzaG91bGQgYmUgaW5zaWRlIHRoZSBkb2N1bWVudC5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogc3R5bGUuYWRkUnVsZSgnaW1nLXNpemUnLCAnaW1nLnNxdWFyZScsIHtcclxuICAgKiAgIHdpZHRoOiAnNDBweCcsXHJcbiAgICogICBoZWlnaHQ6ICc0MHB4J1xyXG4gICAqIH0pO1xyXG4gICAqIHN0eWxlLmdldFJ1bGUoJ2ltZy1zaXplJyk7XHJcbiAgICogLy8ge1xyXG4gICAqIC8vICAgc2VsZWN0b3I6ICdpbWcuc3F1YXJlJyxcclxuICAgKiAvLyAgIHJ1bGVzOiB7XHJcbiAgICogLy8gICAgIHdpZHRoOiAnNDBweCcsXHJcbiAgICogLy8gICAgIGhlaWdodDogJzQwcHgnXHJcbiAgICogLy8gICB9XHJcbiAgICogLy8gfVxyXG4gICAqL1xyXG4gIGdldFJ1bGUobmFtZSkge1xyXG4gICAgbGV0IGZvdW5kID0ge1xyXG4gICAgICBzZWxlY3RvcjogdW5kZWZpbmVkLFxyXG4gICAgICBydWxlczoge31cclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5zb21lKChlbGVtKSA9PiB7XHJcbiAgICAgIGlmIChnZXROYW1lKGVsZW0pID09PSAnc3R5bGUnKSB7XHJcbiAgICAgICAgY29uc3QgeyB2YWx1ZTogcnVsZSB9ID0gbmV3IEFycihlbGVtLnNoZWV0LmNzc1J1bGVzKS5maW5kKChydWxlKSA9PiBydWxlLmR3YXluZURhdGEgJiYgcnVsZS5kd2F5bmVEYXRhLm5hbWUgPT09IG5hbWUpIHx8IHt9O1xyXG5cclxuICAgICAgICBpZiAocnVsZSkge1xyXG4gICAgICAgICAgZm91bmQgPSB7XHJcbiAgICAgICAgICAgIHNlbGVjdG9yOiBydWxlLnNlbGVjdG9yVGV4dCxcclxuICAgICAgICAgICAgcnVsZXM6IG5ldyBFbGVtKHJ1bGUpLmNzcygpLiRcclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gZm91bmQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEVsZW0jaGFzQXR0clxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1N0cmluZ30gYXR0ciAtIE5hbWUgb2YgdGhlIGF0dHJpYnV0ZS5cclxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gSWYgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIHNldCBoYXMgdGhlIGF0dHJpYnV0ZS5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIHRoYXQgcmV0dXJucyBpZiB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgc2V0IGhhcyB0aGUgYXR0cmlidXRlIG9yIG5vdC5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogZWxlbS5hdHRyKCdhdHRyJywgJ3ZhbHVlJykuaGFzQXR0cignYXR0cicpOyAvLyB0cnVlXHJcbiAgICogZWxlbS5yZW1vdmVBdHRyKCdhdHRyJykuaGFzQXR0cignYXR0cicpOyAgICAvLyBmYWxzZVxyXG4gICAqL1xyXG4gIGhhc0F0dHIoYXR0cikge1xyXG4gICAgY29uc3QgZWxlbSA9IGdldEVsZW0odGhpcyk7XHJcbiAgICBjb25zdCBucyA9IGF0dHJOU1N3aXRjaGVyKGF0dHIsIFtuZXcgRWxlbShlbGVtKV0pO1xyXG5cclxuICAgIHJldHVybiBpc051bGwobnMpXHJcbiAgICAgID8gZWxlbS5oYXNBdHRyaWJ1dGUoYXR0cilcclxuICAgICAgOiBlbGVtLmhhc0F0dHJpYnV0ZU5TKG5zLCBhdHRyKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRWxlbSNoYXNDbGFzc1xyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1N0cmluZ30gY2xzIC0gTmFtZSBvZiB0aGUgY2xhc3MuXHJcbiAgICogQHJldHVybnMge0Jvb2xlYW59IElmIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBzZXQgaGFzIHRoZSBjbGFzcy5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIHRoYXQgcmV0dXJucyBpZiB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgc2V0IGhhcyB0aGUgY2xhc3Mgb3Igbm90LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBlbGVtLmFkZENsYXNzKCdjbHMnKS5oYXNDbGFzcygnY2xzJyk7ICAgIC8vIHRydWVcclxuICAgKiBlbGVtLnJlbW92ZUNsYXNzKCdjbHMnKS5oYXNDbGFzcygnY2xzJyk7IC8vIGZhbHNlXHJcbiAgICovXHJcbiAgaGFzQ2xhc3MoY2xzKSB7XHJcbiAgICByZXR1cm4gZ2V0RWxlbSh0aGlzKS5jbGFzc0xpc3QuY29udGFpbnMoY2xzKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRWxlbSNoZWlnaHRcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHsqfEVsZW1WYWx1ZUNhbGxiYWNrfSBbaGVpZ2h0XSAtIEhlaWdodCB0byBzZXQuXHJcbiAgICogQHJldHVybnMge0VsZW18U3RyaW5nfSBJZiBubyBhcmd1bWVudHMgcGFzc2VkIGhlaWdodCBvZiB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgc2V0IHJldHVybmVkLlxyXG4gICAqIE90aGVyd2lzZSBhbGwgZWxlbWVudHMgaGVpZ2h0cyBpbiB0aGUgc2V0IGFyZSBzZXQgdG8gdGhlIGhlaWdodCBhcmd1bWVudC5cclxuICAgKiBAZGVzY3JpcHRpb24gR2V0cyBvciBzZXRzIGhlaWdodC5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogZWxlbS5oZWlnaHQoMTIzKTtcclxuICAgKiBlbGVtLmhlaWdodCgpOyAvLyAxMjNcclxuICAgKi9cclxuICBoZWlnaHQoaGVpZ2h0KSB7XHJcbiAgICByZXR1cm4gdGhpcy5wcm9wLmFwcGx5KHRoaXMsIG5ldyBBcnIoYXJndW1lbnRzKS51bnNoaWZ0KCdoZWlnaHQnKS4kKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRWxlbSNoaWRlXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfSBSZXR1cm5zIHRoaXMuXHJcbiAgICogQGRlc2NyaXB0aW9uIEhpZGVzIGFsbCBlbGVtZW50cyBpbiB0aGUgc2V0LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBlbGVtLmhpZGUoKTtcclxuICAgKi9cclxuICBoaWRlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZm9yRWFjaCgoZWxlbSkgPT4ge1xyXG4gICAgICBlbGVtID0gbmV3IEVsZW0oZWxlbSk7XHJcblxyXG4gICAgICBjb25zdCBjdXJyZW50RGlzcGxheSA9IGVsZW0uY3NzKCdkaXNwbGF5Jyk7XHJcblxyXG4gICAgICBpZiAoY3VycmVudERpc3BsYXkuaW5kZXhPZignbm9uZScpKSB7XHJcbiAgICAgICAgZWxlbS5wcm9wKCdkd2F5bmVEYXRhJykucHJldmlvdXNEaXNwbGF5ID0gY3VycmVudERpc3BsYXk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGVsZW0uY3NzKCdkaXNwbGF5JywgJ25vbmUgIWltcG9ydGFudCcpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEVsZW0jaHRtbFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1N0cmluZ3xFbGVtVmFsdWVDYWxsYmFja3wqfSBbaHRtbF0gLSBIVE1MIHRvIHdyaXRlIGluc3RlYWQgb2YgY3VycmVudCBIVE1MLlxyXG4gICAqIEByZXR1cm5zIHtFbGVtfFN0cmluZ30gSWYgbm8gYXJndW1lbnRzIHBhc3NlZCBIVE1MIG9mIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBzZXQgcmV0dXJuZWQuXHJcbiAgICogT3RoZXJ3aXNlIGFsbCBlbGVtZW50cyBIVE1MIGluIHRoZSBzZXQgYXJlIHNldCB0byB0aGUgaHRtbCBhcmd1bWVudC5cclxuICAgKiBAZGVzY3JpcHRpb24gR2V0cyBvciBzZXRzIEhUTUwuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIGVsZW0uaHRtbCgnPGRpdj4xPC9kaXY+Jyk7XHJcbiAgICogZWxlbS5odG1sKCk7IC8vICc8ZGl2PjE8L2Rpdj4nXHJcbiAgICovXHJcbiAgaHRtbChodG1sKSB7XHJcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgcmV0dXJuIGdldEVsZW0odGhpcykuaW5uZXJIVE1MO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLmZvckVhY2goKGVsZW0sIGluZGV4KSA9PiB7XHJcbiAgICAgIGlmIChpc0VsZW1lbnQoZWxlbSkpIHtcclxuICAgICAgICBlbGVtLmlubmVySFRNTCA9IGlzRnVuY3Rpb24oaHRtbCkgPyBodG1sKGVsZW0uaW5uZXJIVE1MLCBlbGVtLCBpbmRleCkgOiBodG1sO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRWxlbSNpZFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1N0cmluZ3wqfSBbaWRdIC0gSWQgdG8gc2V0LlxyXG4gICAqIEByZXR1cm5zIHtFbGVtfFN0cmluZ30gSWYgbm8gYXJndW1lbnRzIHBhc3NlZCBpZCBvZiB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgc2V0IHJldHVybmVkLlxyXG4gICAqIE90aGVyd2lzZSBhbGwgZWxlbWVudHMgaWRzIGluIHRoZSBzZXQgYXJlIHNldCB0byB0aGUgaWQgYXJndW1lbnQuXHJcbiAgICogQGRlc2NyaXB0aW9uIEdldHMgaWQgb3Igc2V0cyBpZHMuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIGVsZW0uaWQoJ3VuaXF1ZScpO1xyXG4gICAqIGVsZW0uaWQoKTsgLy8gJ3VuaXF1ZSdcclxuICAgKi9cclxuICBpZChpZCkge1xyXG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgIHJldHVybiBnZXRFbGVtKHRoaXMpLmlkO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLmZvckVhY2goKGVsZW0pID0+IHtcclxuICAgICAgaWYgKGlzRWxlbWVudChlbGVtKSkge1xyXG4gICAgICAgIGVsZW0uaWQgPSBpZDtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtOdW1iZXJ9IEVsZW0jaW5uZXJIZWlnaHRcclxuICAgKiBAdHlwZSB7TnVtYmVyfVxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcmVhZG9ubHlcclxuICAgKiBAZGVzY3JpcHRpb24gR2V0dGVyIGZvciBmaW5kaW5nIGhvdyBtdWNoIGhlaWdodCBjb250ZW50IG9mIHRoZSBmaXJzdCBlbGVtZW50IGNhbiBiZS5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogZWxlbS5jc3Moe1xyXG4gICAqICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXHJcbiAgICogICBoZWlnaHQ6ICcyMDBweCcsXHJcbiAgICogICBwYWRkaW5nVG9wOiAnMnB4JyxcclxuICAgKiAgIHBhZGRpbmdCb3R0b206ICczcHgnLFxyXG4gICAqICAgYm9yZGVyVG9wOiAnMXB4IHNvbGlkIGJsYWNrJyxcclxuICAgKiAgIGJvcmRlckJvdHRvbTogJzRweCBzb2xpZCBibGFjaydcclxuICAgKiB9KS5pbm5lckhlaWdodDsgLy8gMTkwXHJcbiAgICogZWxlbVxyXG4gICAqICAgLmNzcygnYm94LXNpemluZycsICdjb250ZW50LWJveCcpXHJcbiAgICogICAuaW5uZXJIZWlnaHQ7IC8vIDIwMFxyXG4gICAqIGVsZW1cclxuICAgKiAgIC5jc3MoJ2JveC1zaXppbmcnLCAncGFkZGluZy1ib3gnKVxyXG4gICAqICAgLmlubmVySGVpZ2h0OyAvLyAxOTVcclxuICAgKi9cclxuICBnZXQgaW5uZXJIZWlnaHQoKSB7XHJcbiAgICBjb25zdCBlbGVtID0gdGhpcy4kWzBdO1xyXG5cclxuICAgIGlmIChpc1dpbmRvdyhlbGVtKSkge1xyXG4gICAgICByZXR1cm4gZWxlbS5pbm5lckhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB7XHJcbiAgICAgIGJvcmRlclRvcFdpZHRoLFxyXG4gICAgICBib3JkZXJCb3R0b21XaWR0aCxcclxuICAgICAgYm94U2l6aW5nLFxyXG4gICAgICBoZWlnaHQsXHJcbiAgICAgIHBhZGRpbmdUb3AsXHJcbiAgICAgIHBhZGRpbmdCb3R0b21cclxuICAgIH0gPSB0aGlzLmNhbGNDU1MoKTtcclxuICAgIGNvbnN0IGJvcmRlcnMgPSBweChib3JkZXJUb3BXaWR0aCkgKyBweChib3JkZXJCb3R0b21XaWR0aCk7XHJcbiAgICBjb25zdCBwYWRkaW5ncyA9IHB4KHBhZGRpbmdUb3ApICsgcHgocGFkZGluZ0JvdHRvbSk7XHJcblxyXG4gICAgcmV0dXJuIHB4KGhlaWdodCkgLSBpbm5lclN3aXRjaGVyKGJveFNpemluZywgW3BhZGRpbmdzLCBib3JkZXJzXSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtOdW1iZXJ9IEVsZW0jaW5uZXJXaWR0aFxyXG4gICAqIEB0eXBlIHtOdW1iZXJ9XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZWFkb25seVxyXG4gICAqIEBkZXNjcmlwdGlvbiBHZXR0ZXIgZm9yIGZpbmRpbmcgaG93IG11Y2ggd2lkdGggY29udGVudCBvZiB0aGUgZmlyc3QgZWxlbWVudCBjYW4gYmUuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIGVsZW0uY3NzKHtcclxuICAgKiAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxyXG4gICAqICAgd2lkdGg6ICcyMDBweCcsXHJcbiAgICogICBwYWRkaW5nTGVmdDogJzJweCcsXHJcbiAgICogICBwYWRkaW5nUmlnaHQ6ICczcHgnLFxyXG4gICAqICAgYm9yZGVyTGVmdDogJzFweCBzb2xpZCBibGFjaycsXHJcbiAgICogICBib3JkZXJSaWdodDogJzRweCBzb2xpZCBibGFjaydcclxuICAgKiB9KS5pbm5lcldpZHRoOyAvLyAxOTBcclxuICAgKiBlbGVtXHJcbiAgICogICAuY3NzKCdib3gtc2l6aW5nJywgJ2NvbnRlbnQtYm94JylcclxuICAgKiAgIC5pbm5lcldpZHRoOyAvLyAyMDBcclxuICAgKiBlbGVtXHJcbiAgICogICAuY3NzKCdib3gtc2l6aW5nJywgJ3BhZGRpbmctYm94JylcclxuICAgKiAgIC5pbm5lcldpZHRoOyAvLyAxOTVcclxuICAgKi9cclxuICBnZXQgaW5uZXJXaWR0aCgpIHtcclxuICAgIGNvbnN0IGVsZW0gPSB0aGlzLiRbMF07XHJcblxyXG4gICAgaWYgKGlzV2luZG93KGVsZW0pKSB7XHJcbiAgICAgIHJldHVybiBlbGVtLmlubmVyV2lkdGg7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qge1xyXG4gICAgICBib3JkZXJMZWZ0V2lkdGgsXHJcbiAgICAgIGJvcmRlclJpZ2h0V2lkdGgsXHJcbiAgICAgIGJveFNpemluZyxcclxuICAgICAgcGFkZGluZ0xlZnQsXHJcbiAgICAgIHBhZGRpbmdSaWdodCxcclxuICAgICAgd2lkdGhcclxuICAgIH0gPSB0aGlzLmNhbGNDU1MoKTtcclxuICAgIGNvbnN0IGJvcmRlcnMgPSBweChib3JkZXJMZWZ0V2lkdGgpICsgcHgoYm9yZGVyUmlnaHRXaWR0aCk7XHJcbiAgICBjb25zdCBwYWRkaW5ncyA9IHB4KHBhZGRpbmdMZWZ0KSArIHB4KHBhZGRpbmdSaWdodCk7XHJcblxyXG4gICAgcmV0dXJuIHB4KHdpZHRoKSAtIGlubmVyU3dpdGNoZXIoYm94U2l6aW5nLCBbcGFkZGluZ3MsIGJvcmRlcnNdKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRWxlbSNpbnNlcnRBZnRlclxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1N0cmluZ3xFbGVtfEVsZW1lbnR9IGVsZW1lbnQgLSBFbGVtZW50IHRvIGluc2VydCB0aGlzIGVsZW1lbnQgYWZ0ZXIgb3IgYSBzZWxlY3RvciBvZiBpdC5cclxuICAgKiBAcmV0dXJucyB7RWxlbX0gUmV0dXJucyB0aGlzLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBQdXRzIHRoZSBlbGVtZW50cyBmcm9tIHRoZSBzZXQgYWZ0ZXIgdGhlIGVsZW1lbnQgc3BlY2lmaWVkIGJ5IHRoZSBhcmd1bWVudC5cclxuICAgKiBUaGUgZWxlbWVudHMgcmVtYWluIGluIHRoZSBzYW1lIG9yZGVyLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBlbGVtLmluc2VydEFmdGVyKGVsZW0yKTtcclxuICAgKiBlbGVtLmluc2VydEFmdGVyKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpZCcpKTtcclxuICAgKiBlbGVtLmluc2VydEFmdGVyKCcjaWQgZGl2LmMxJyk7XHJcbiAgICovXHJcbiAgaW5zZXJ0QWZ0ZXIoZWxlbWVudCkge1xyXG4gICAgZWxlbWVudCA9IHRvRmluZChlbGVtZW50KS5maXJzdCgpO1xyXG5cclxuICAgIGxldCBwYXJlbnQgPSBlbGVtZW50LnBhcmVudCgpO1xyXG5cclxuICAgIGlmICghcGFyZW50Lmxlbmd0aCkge1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBlbGVtZW50ID0gZWxlbWVudC5uZXh0KCkuJFswXTtcclxuICAgIHBhcmVudCA9IHBhcmVudC4kWzBdO1xyXG5cclxuICAgIHJldHVybiB0aGlzLmZvckVhY2goKGVsZW0pID0+IHtcclxuICAgICAgaWYgKGVsZW1lbnQpIHtcclxuICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGVsZW0sIGVsZW1lbnQpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChlbGVtKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEVsZW0jaW5zZXJ0QmVmb3JlXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7U3RyaW5nfEVsZW18RWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gaW5zZXJ0IHRoaXMgZWxlbWVudCBiZWZvcmUgb3IgYSBzZWxlY3RvciBvZiBpdC5cclxuICAgKiBAcmV0dXJucyB7RWxlbX0gUmV0dXJucyB0aGlzLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBQdXRzIHRoZSBlbGVtZW50cyBmcm9tIHRoZSBzZXQgYmVmb3JlIHRoZSBlbGVtZW50IHNwZWNpZmllZCBieSB0aGUgYXJndW1lbnQuXHJcbiAgICogVGhlIGVsZW1lbnRzIHJlbWFpbiBpbiB0aGUgc2FtZSBvcmRlci5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogZWxlbS5pbnNlcnRCZWZvcmUoZWxlbTIpO1xyXG4gICAqIGVsZW0uaW5zZXJ0QmVmb3JlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpZCcpKTtcclxuICAgKiBlbGVtLmluc2VydEJlZm9yZSgnI2lkIGRpdi5jMScpO1xyXG4gICAqL1xyXG4gIGluc2VydEJlZm9yZShlbGVtZW50KSB7XHJcbiAgICBlbGVtZW50ID0gdG9GaW5kKGVsZW1lbnQpLmZpcnN0KCk7XHJcblxyXG4gICAgbGV0IHBhcmVudCA9IGVsZW1lbnQucGFyZW50KCk7XHJcblxyXG4gICAgaWYgKCFwYXJlbnQubGVuZ3RoKSB7XHJcbiAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGVsZW1lbnQgPSBlbGVtZW50LiRbMF07XHJcbiAgICBwYXJlbnQgPSBwYXJlbnQuJFswXTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5mb3JFYWNoKChlbGVtKSA9PiB7XHJcbiAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoZWxlbSwgZWxlbWVudCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRWxlbSNpbnRvXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7U3RyaW5nfEVsZW18RWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gcHV0IHRoaXMgZWxlbWVudHMgaW50byBvciBhIHNlbGVjdG9yIG9mIGl0LlxyXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gZW5kIC0gSWYgdGhlIGVsZW1lbnRzIHNob3VsZCBiZSBpbnNlcnRlZCB0byB0aGUgZW5kLiBJZiBmYWxzZSB0aGV5IGFyZSBpbnNlcnRlZCB0byB0aGUgc3RhcnQuXHJcbiAgICogQHJldHVybnMge0VsZW19IFJldHVybnMgdGhpcy5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIGlzIHNpbWlsYXIgdG9cclxuICAgKiBbTm9kZSNhcHBlbmRDaGlsZF17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvQVBJL05vZGUvYXBwZW5kQ2hpbGR9LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBlbGVtLmludG8oZWxlbTIpO1xyXG4gICAqIGVsZW0uaW50byhkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaWQnKSk7XHJcbiAgICogZWxlbS5pbnRvKCcjaWQgZGl2LmMxJyk7XHJcbiAgICovXHJcbiAgaW50byhlbGVtZW50LCBlbmQgPSB0cnVlKSB7XHJcbiAgICBlbGVtZW50ID0gdG9GaW5kKGVsZW1lbnQpLiRbMF07XHJcblxyXG4gICAgaWYgKFxyXG4gICAgICAhZWxlbWVudCB8fFxyXG4gICAgICBpc1dpbmRvdyhlbGVtZW50KSB8fFxyXG4gICAgICBpc0hUTUxEb2N1bWVudChlbGVtZW50KSB8fFxyXG4gICAgICBpc0NvbW1lbnRPclRleHQoZWxlbWVudClcclxuICAgICkge1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWVuZCAmJiBlbGVtZW50LmZpcnN0Q2hpbGQpIHtcclxuICAgICAgcmV0dXJuIHRoaXNcclxuICAgICAgICAuc2xpY2UoKVxyXG4gICAgICAgIC5yZXZlcnNlKClcclxuICAgICAgICAuZm9yRWFjaCgoZWxlbSkgPT4ge1xyXG4gICAgICAgICAgZWxlbWVudC5pbnNlcnRCZWZvcmUoZWxlbSwgZWxlbWVudC5maXJzdENoaWxkKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5mb3JFYWNoKChlbGVtKSA9PiB7XHJcbiAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoZWxlbSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRWxlbSNpc1xyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2VsZWN0b3JcclxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gSWYgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIHNldCBtYXRjaGVzIHRoZSBzZWxlY3Rvci5cclxuICAgKiBJZiB0aGUgc2VsZWN0b3IgaXMgdW5kZWZpbmVkIG9yIG51bGwgYWx3YXlzIHJldHVybnMgdHJ1ZS4gSWYgaXQncyBub3QgZm9yIG5vdCBlbGVtZW50c1xyXG4gICAqIGVudHJpZXMgcmV0dXJucyBmYWxzZS5cclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3JcclxuICAgKiBbRWxlbWVudCNtYXRjaGVzXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9BUEkvRWxlbWVudC9tYXRjaGVzfS5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogZWxlbS5hZGRDbGFzcygnY2xzJyk7XHJcbiAgICogZWxlbS5pcygnLmNscycpOyAgICAgICAgIC8vIHRydWVcclxuICAgKlxyXG4gICAqIGVsZW0ucmVtb3ZlQ2xhc3MoJ2NscycpO1xyXG4gICAqIGVsZW0uaXMoJy5jbHMnKTsgICAgICAgICAvLyBmYWxzZVxyXG4gICAqL1xyXG4gIGlzKHNlbGVjdG9yKSB7XHJcbiAgICBpZiAoaXNOdWxsKHNlbGVjdG9yKSkge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBlbGVtID0gZ2V0RWxlbSh0aGlzKTtcclxuICAgIGNvbnN0IG1hdGNoZXMgPSAoXHJcbiAgICAgIGVsZW0ubWF0Y2hlcyB8fFxyXG4gICAgICBlbGVtLm1hdGNoZXNTZWxlY3RvciB8fFxyXG4gICAgICBlbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxyXG4gICAgICBlbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxyXG4gICAgICBlbGVtLm1zTWF0Y2hlc1NlbGVjdG9yIHx8XHJcbiAgICAgIGVsZW0ub01hdGNoZXNTZWxlY3RvclxyXG4gICAgKTtcclxuXHJcbiAgICBpZiAoIWlzRWxlbWVudCh0aGlzLiRbMF0pKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICB0cnkge1xyXG4gICAgICByZXR1cm4gbWF0Y2hlcy5jYWxsKGVsZW0sIHNlbGVjdG9yKTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBTZWxlY3RvciAnJHsgc2VsZWN0b3IgfScgaXMgbm90IGEgdmFsaWQgc2VsZWN0b3IgKEVsZW0jaXMpYCk7XHJcblxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEVsZW0jaXNCcm9rZW5cclxuICAgKiBAcHVibGljXHJcbiAgICogQHJldHVybnMge0Jvb2xlYW59IElmIHRoZSBmaXJzdCBpbWFnZSBpbiB0aGUgc2V0IGlzIGJyb2tlbi5cclxuICAgKiBAZGVzY3JpcHRpb24gUmV0dXJucyBpZiB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgc2V0IGlzIGJyb2tlbi4gTm90IGltYWdlIGFuZCBub3QgbG9hZGVkIGltYWdlIGlzIGNvbnNpZGVyZWQgcHJvcGVyLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBjb25zdCBpbWcgPSBlbGVtLmltZygpLm9uKHtcclxuICAgKiAgICdsb2FkJzogb25sb2FkLFxyXG4gICAqICAgJ2Vycm9yJzogb25sb2FkXHJcbiAgICogfSk7XHJcbiAgICpcclxuICAgKiBvbmxvYWQgPSAoKSA9PiB7XHJcbiAgICogICBjb25zb2xlLmxvZyhpbWcuaXNCcm9rZW4oKSk7IC8vIHRydWVcclxuICAgKiB9O1xyXG4gICAqXHJcbiAgICogaW1nLnJlZignL3NvbWUvbm9uLWV4aXN0ZW50L3NpdGUvbm90LWZvdW5kLnBuZycpO1xyXG4gICAqL1xyXG4gIGlzQnJva2VuKCkge1xyXG4gICAgbGV0IGlzQnJva2VuID0gZmFsc2U7XHJcblxyXG4gICAgdGhpcy5zb21lKChlbGVtKSA9PiB7XHJcbiAgICAgIGlmIChnZXROYW1lKGVsZW0pID09PSAnaW1nJykge1xyXG4gICAgICAgIGlzQnJva2VuID0gISEoZWxlbS5jb21wbGV0ZSAmJiAoIWVsZW0ubmF0dXJhbFdpZHRoIHx8ICFlbGVtLm5hdHVyYWxIZWlnaHQpKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBpc0Jyb2tlbjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRWxlbSNpc1dpdGhpbkRvY3VtZW50XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBSZXR1cm5zIGlmIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBzZXQgaXMgd2l0aGluIHRoZSBkb2N1bWVudCBvciBub3QuXHJcbiAgICogQGRlc2NyaXB0aW9uIFJldHVybnMgaWYgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIHNldCBpcyB3aXRoaW4gdGhlIGRvY3VtZW50IG9yIG5vdC5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogbmV3IEVsZW0oZG9jdW1lbnQuYm9keSkuaXNXaXRoaW5Eb2N1bWVudCgpOyAgLy8gdHJ1ZVxyXG4gICAqIG5ldyBFbGVtKGRvY3VtZW50KS5kaXYoKS5pc1dpdGhpbkRvY3VtZW50KCk7IC8vIGZhbHNlXHJcbiAgICovXHJcbiAgaXNXaXRoaW5Eb2N1bWVudCgpIHtcclxuICAgIHJldHVybiB0aGlzLmZpcnN0KCkuY2xvc2VzdCgnaHRtbCcpLmxlbmd0aCAhPT0gMDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRWxlbSNsYXN0XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfSBOZXcgaW5zdGFuY2Ugb2YgRWxlbS5cclxuICAgKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3IgZWxlbS5lbGVtKC0xKS5cclxuICAgKi9cclxuICBsYXN0KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZWxlbSgtMSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEVsZW0jbGFzdENoaWxkXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbc2VsZWN0b3IgPSBudWxsXSAtIElmIHByZXNlbnQsIGZpbmRzIGxhc3QgY2hpbGQgaW4gZXZlcnkgZWxlbSB0aGF0IG1hdGNoZXMgdGhlIHNlbGVjdG9yLlxyXG4gICAqIElmIG5vdCwgZmluZHMgbGFzdCBjaGlsZCBvZiBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldC5cclxuICAgKiBAcmV0dXJucyB7RWxlbX0gTmV3IGluc3RhbmNlIG9mIEVsZW0uXHJcbiAgICogQGRlc2NyaXB0aW9uIE1ldGhvZCBmb3IgZmluZGluZyBsYXN0IGNoaWxkcmVuIG9mIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBlbGVtLmxhc3QoKTsgICAgICAgLy8gZmluZHMgbGFzdCBjaGlsZCBvZiBlYWNoIGVsZW1lbnQgaW4gdGhlIGVsZW0gc2V0XHJcbiAgICogZWxlbS5sYXN0KCcuZm9vJyk7IC8vIGZpbmQgbGFzdCBjaGlsZCB0aGF0IGhhcyAnZm9vJyBjbGFzcyBvZiBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldFxyXG4gICAqL1xyXG4gIGxhc3RDaGlsZChzZWxlY3RvciA9IG51bGwpIHtcclxuICAgIHJldHVybiB0aGlzLm9iamVjdCgoZWxlbXMsIGVsZW0pID0+IHtcclxuICAgICAgY29uc3QgeyB2YWx1ZTogZm91bmQgfSA9IG5ldyBFbGVtKGVsZW0pXHJcbiAgICAgICAgLmNoaWxkcmVuKClcclxuICAgICAgICAucmV2ZXJzZSgpXHJcbiAgICAgICAgLmZpbmQoKGVsZW0pID0+IG5ldyBFbGVtKGVsZW0pLmlzKHNlbGVjdG9yKSkgfHwge307XHJcblxyXG4gICAgICBlbGVtcy5hZGQoZm91bmQpO1xyXG4gICAgfSwgbmV3IEVsZW0oKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEVsZW0jbG9hZFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZS48eyBwcm9wZXI6IEVsZW0sIGJyb2tlbjogRWxlbSB9Pn0gUHJvbWlzZSB3aXRoIGJyb2tlbiBhbmQgcHJvcGVyIGltYWdlcy5cclxuICAgKiBAZGVzY3JpcHRpb24gTG9hZHMgZWFjaCBpbWFnZSBpbiB0aGUgc2V0IGFuZCBwdXRzIGl0IHRvIHRoZSBwcm9wZXIgb3IgYnJva2VuIGFycmF5LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBpbWFnZXMubG9hZCgpLnRoZW4oKHsgYnJva2VuIH0pID0+IHtcclxuICAgKiAgIGJyb2tlbi5maWx0ZXIoJ2ltZycpLnJlZignL2ZhbGxiYWNrLnBuZycpO1xyXG4gICAqIH0pO1xyXG4gICAqL1xyXG4gIGxvYWQoKSB7XHJcbiAgICBjb25zdCBpbWFnZXMgPSB7XHJcbiAgICAgIHByb3BlcjogbmV3IEVsZW0oKSxcclxuICAgICAgYnJva2VuOiBuZXcgRWxlbSgpXHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBQcm9taXNlLmFsbChcclxuICAgICAgdGhpc1xyXG4gICAgICAgIC5maWx0ZXIoKGVsZW0pID0+IGdldE5hbWUoZWxlbSkgPT09ICdpbWcnKVxyXG4gICAgICAgIC5tYXAoKGVsZW0pID0+IHtcclxuICAgICAgICAgIGNvbnN0ICRlbGVtID0gbmV3IEVsZW0oZWxlbSk7XHJcblxyXG4gICAgICAgICAgaWYgKGVsZW0uY29tcGxldGUpIHtcclxuICAgICAgICAgICAgaW1hZ2VzWyRlbGVtLmlzQnJva2VuKCkgPyAnYnJva2VuJyA6ICdwcm9wZXInXS5wdXNoKGVsZW0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCByZW1vdmVMaXN0ZW5lcnMgPSAkZWxlbS5vbih7XHJcbiAgICAgICAgICAgICAgbG9hZCgpIHtcclxuICAgICAgICAgICAgICAgIGltYWdlcy5wcm9wZXIuYWRkKGVsZW0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHJlbW92ZUxpc3RlbmVycygpO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgZXJyb3IoKSB7XHJcbiAgICAgICAgICAgICAgICBpbWFnZXMuYnJva2VuLmFkZChlbGVtKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZW1vdmVMaXN0ZW5lcnMoKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuJFxyXG4gICAgKS50aGVuKCgpID0+IGltYWdlcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEVsZW0jbW92ZUF0dHJcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IGF0dHIgLSBBdHRyaWJ1dGUgdG8gbW92ZSB0byB0aGUgZmlyc3QgZWxlbWVudC5cclxuICAgKiBAcGFyYW0ge1N0cmluZ30gW3ZhbHVlID0gJyddIC0gVmFsdWUgdG8gc2V0IGZvciB0aGUgYXR0cmlidXRlLiBJZiBub3Qgc2V0IGF0dHJpYnV0ZSBvZiB0aGUgcHJldmlvdXMgZWxlbWVudCBvciAnJyB1c2VkLlxyXG4gICAqIEByZXR1cm5zIHtFbGVtfSBSZXR1cm5zIHRoaXMuXHJcbiAgICogQGRlc2NyaXB0aW9uIE1ldGhvZCBmb3IgbW92aW5nIGFuIGF0dHJpYnV0ZSBmcm9tIHByZXZpb3VzIGVsZW1lbnQgdG8gdGhlIG5leHQgb25lIChmaXJzdCBlbGVtZW50IGluIHRoaXMgc2V0KS5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogZWxlbTEubW92ZUF0dHIoJ2F0dHInLCAndmFsdWUnKTsgICAgIC8vIGF0dHJpYnV0ZSAnYXR0cicgc2V0IHRvICd2YWx1ZScgb24gZWxlbTFcclxuICAgKiBlbGVtMi5tb3ZlQXR0cignYXR0cicpOyAgICAgICAgICAgICAgLy8gYXR0cmlidXRlICdhdHRyJyByZW1vdmVkIGZyb20gZWxlbTEuIHNldCB0byAndmFsdWUnIG9uIGVsZW0yXHJcbiAgICogZWxlbTMubW92ZUF0dHIoJ2F0dHInLCAnbmV3IHZhbHVlJyk7IC8vIGF0dHJpYnV0ZSAnYXR0cicgcmVtb3ZlZCBmcm9tIGVsZW0yLiBzZXQgdG8gJ25ldyB2YWx1ZScgb24gZWxlbTNcclxuICAgKi9cclxuICBtb3ZlQXR0cihhdHRyLCB2YWx1ZSA9ICcnKSB7XHJcbiAgICBjb25zdCBwcmV2ID0gYXR0cnNbYXR0cl07XHJcbiAgICBjb25zdCBlbGVtID0gdGhpcy5lbGVtKCk7XHJcblxyXG4gICAgaWYgKHByZXYgJiYgZWxlbS5sZW5ndGgpIHtcclxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XHJcbiAgICAgICAgdmFsdWUgPSBwcmV2LmF0dHIoYXR0cik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHByZXYucmVtb3ZlQXR0cihhdHRyKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZWxlbS5sZW5ndGgpIHtcclxuICAgICAgYXR0cnNbYXR0cl0gPSBlbGVtLmF0dHIoYXR0ciwgdmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBFbGVtI21vdmVDbGFzc1xyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1N0cmluZ30gY2xzIC0gQ2xhc3MgdG8gbW92ZSB0byB0aGUgZmlyc3QgZWxlbWVudC5cclxuICAgKiBAcmV0dXJucyB7RWxlbX0gUmV0dXJucyB0aGlzLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBNZXRob2QgZm9yIG1vdmluZyBhIGNsYXNzIGZyb20gcHJldmlvdXMgZWxlbWVudCB0byB0aGUgbmV4dCBvbmUgKGZpcnN0IGVsZW1lbnQgaW4gdGhpcyBzZXQpLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBlbGVtMS5tb3ZlQ2xhc3MoJ2NscycpOyAvLyBjbGFzcyAnY2xzJyBhZGRlZCB0byBlbGVtMVxyXG4gICAqIGVsZW0yLm1vdmVDbGFzcygnY2xzJyk7IC8vIGNsYXNzICdjbHMnIHJlbW92ZWQgZnJvbSBlbGVtMS4gYWRkZWQgdG8gZWxlbTFcclxuICAgKi9cclxuICBtb3ZlQ2xhc3MoY2xzKSB7XHJcbiAgICBjb25zdCBwcmV2ID0gY2xhc3Nlc1tjbHNdO1xyXG4gICAgY29uc3QgZWxlbSA9IHRoaXMuZWxlbSgpO1xyXG5cclxuICAgIGlmIChwcmV2ICYmIGVsZW0ubGVuZ3RoKSB7XHJcbiAgICAgIHByZXYucmVtb3ZlQ2xhc3MoY2xzKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZWxlbS5sZW5ndGgpIHtcclxuICAgICAgY2xhc3Nlc1tjbHNdID0gZWxlbS5hZGRDbGFzcyhjbHMpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7U3RyaW5nfSBFbGVtI25hbWVcclxuICAgKiBAdHlwZSB7U3RyaW5nfVxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcmVhZG9ubHlcclxuICAgKiBAZGVzY3JpcHRpb24gbm9kZU5hbWUgKGxvd2VyY2FzZWQpIG9mIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBzZXQuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIGNvbnN0IGVsZW0xID0gZWxlbS5jcmVhdGUoJ2RpdicpO1xyXG4gICAqIGVsZW0xLm5hbWUgLy8gJ2RpdidcclxuICAgKi9cclxuICBnZXQgbmFtZSgpIHtcclxuICAgIHJldHVybiBnZXROYW1lKHRoaXMuJFswXSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEVsZW0jbmV4dFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1N0cmluZ30gW3NlbGVjdG9yID0gbnVsbF0gLSBJZiBwcmVzZW50LCBmaW5kcyBuZXh0IGVsZW1lbnQgdG8gZXZlcnkgZWxlbSB0aGF0IG1hdGNoZXMgdGhlIHNlbGVjdG9yLlxyXG4gICAqIElmIG5vdCwgZmluZHMgbmV4dCBlbGVtZW50IHRvIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0LlxyXG4gICAqIEByZXR1cm5zIHtFbGVtfSBOZXcgaW5zdGFuY2Ugb2YgRWxlbS5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIGZvciBmaW5kaW5nIG5leHQgZWxlbWVudCB0byBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldC5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogZWxlbS5uZXh0KCk7ICAgICAgIC8vIGZpbmRzIG5leHQgZWxlbWVudCB0byBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldFxyXG4gICAqIGVsZW0ubmV4dCgnLmZvbycpOyAvLyBmaW5kcyBuZXh0IGVsZW1lbnQgdG8gZWFjaCBlbGVtZW50IHRoYXQgaGFzICdmb28nIGNsYXNzXHJcbiAgICovXHJcbiAgbmV4dChzZWxlY3RvciA9IG51bGwpIHtcclxuICAgIHJldHVybiB0aGlzLm9iamVjdCgoZWxlbXMsIGVsZW0pID0+IHtcclxuICAgICAgLyogZXNsaW50IG5vLWNvbmQtYXNzaWduOiAwICovXHJcbiAgICAgIHdoaWxlIChlbGVtID0gZWxlbS5uZXh0U2libGluZykge1xyXG4gICAgICAgIGlmIChuZXcgRWxlbShlbGVtKS5pcyhzZWxlY3RvcikpIHtcclxuICAgICAgICAgIHJldHVybiBlbGVtcy5hZGQoZWxlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LCBuZXcgRWxlbSgpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRWxlbSNvZmZcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHsuLi5FbGVtRXZlbnRTdHJpbmd9IGV2ZW50cyAtIEV2ZW50cyB0byByZW1vdmUuXHJcbiAgICogQHJldHVybnMge0VsZW19IFJldHVybnMgdGhpcy5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIHRoYXQgcmVtb3ZlcyBhbGwgdGhlIGxpc3RlbmVycyBmcm9tIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IHNwZWNpZmllZCBieSB0aGUgZXZlbnRzIGFyZ3VtZW50cy5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogZWxlbS5vZmYoJ2NsaWNrJyk7XHJcbiAgICogZWxlbS5vZmYoJ2NsaWNrLCBpbnB1dCcpO1xyXG4gICAqIGVsZW0ub2ZmKCdjbGljaywgaW5wdXQnLCAnZm9jdXMnKTtcclxuICAgKi9cclxuICBvZmYoLi4uZXZlbnRzKSB7XHJcbiAgICByZXR1cm4gdGhpcy5mb3JFYWNoKChlbGVtKSA9PiB7XHJcbiAgICAgIGNvbnN0IHsgbGlzdGVuZXJzIH0gPSBlbGVtLmR3YXluZURhdGE7XHJcblxyXG4gICAgICBpdGVyYXRlKGFyZ3VtZW50cywgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgaXRlcmF0ZShldmVudC5zcGxpdChldmVudFNlcGFyYXRvciksIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgKGxpc3RlbmVyc1tldmVudF0gfHwgbmV3IFN1cGVyKCkpLmZvckVhY2goKHsgcmVtb3ZlTGlzdGVuZXIgfSkgPT4gcmVtb3ZlTGlzdGVuZXIoKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEVsZW0jb25cclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtFbGVtRXZlbnRTdHJpbmd8T2JqZWN0LjxFbGVtRXZlbnRTdHJpbmd8RWxlbUxpc3RlbmVyPn0gZXZlbnQgLSBFaXRoZXIgYSB7QGxpbmsgRWxlbUV2ZW50U3RyaW5nfSBzdHJpbmdcclxuICAgKiBvciBhbiBvYmplY3Qgd2l0aCBldmVudCBrZXlzIChhIGtleSBpcyBhbHNvIEVsZW1FdmVudFN0cmluZykgYW5kIGxpc3RlbmVycyB2YWx1ZXMuXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IFtzZWxlY3RvciA9IG51bGxdIC0gU2VsZWN0b3IgdG8gZmlsdGVyIGV2ZW50IHRhcmdldHMuXHJcbiAgICogQHBhcmFtIHtFbGVtTGlzdGVuZXJ9IFtsaXN0ZW5lcl0gLSBJZiB0aGUgZmlyc3QgYXJndW1lbnQgaXMgYSBzdHJpbmcgaXQgbXVzdCBiZSBhIGxpc3RlbmVyIGZ1bmN0aW9uIGZvclxyXG4gICAqIHNwZWNpZmllZCBldmVudChzKS5cclxuICAgKiBAcmV0dXJucyB7RWxlbVJlbW92ZUxpc3RlbmVyc30gRnVuY3Rpb24gdGhhdCB0YWtlcyBvcHRpb25hbCBldmVudCBhcmd1bWVudC5cclxuICAgKiBAZGVzY3JpcHRpb24gQWRkcyBldmVudCBsaXN0ZW5lcnMgZm9yIGFsbCB0aGUgZWxlbWVudHMgaW4gdGhlIHNldC5cclxuICAgKiBGb3IgZGVidWdnaW5nOiBJZiB5b3UgbmVlZCB0byBrbm93IHdoYXQgbGlzdGVuZXJzIGFyZSBpbiB3b3JrIChhbmQgd2hhdCBzZWxlY3RvcnMgZmlsdGVyIHRhcmdldHMpXHJcbiAgICogeW91IGNhbiBsb29rIGF0IHRoZSBiYXNlIHByb3BlcnR5IG9mIHRoZSBvbmx5IGR3YXluZSBsaXN0ZW5lciB0aGF0IGxpc3RlbnMgZm9yIHRoZSBldmVudFxyXG4gICAqIGFuZCBmaW5kIGFsbCB3b3JraW5nIGxpc3RlbmVycyBpbiBsaXN0ZW5lci5iYXNlLmR3YXluZURhdGEubGlzdGVuZXJzW2V2ZW50XS4kLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBlbGVtLm9uKFxyXG4gICAqICAgJ2NoYW5nZSwgaW5wdXQnLFxyXG4gICAqICAgJ2lucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBkYXRhbGlzdCwga2V5Z2VuLCBvdXRwdXQnLFxyXG4gICAqICAgKGUsIGVsZW0sIGluZGV4KSA9PiBjb25zb2xlLmxvZyhlbGVtLnZhbHVlKVxyXG4gICAqICk7XHJcbiAgICogZWxlbS5vbihcclxuICAgKiAgICdjaGFuZ2UsIGlucHV0JyxcclxuICAgKiAgIChlLCBlbGVtLCBpbmRleCkgPT4gY29uc29sZS5sb2coZWxlbS52YWx1ZSlcclxuICAgKiApO1xyXG4gICAqIGVsZW0ub24oXHJcbiAgICogICB7XHJcbiAgICogICAgICdjaGFuZ2UsIGlucHV0JzogKGUsIGVsZW0sIGluZGV4KSA9PiBjb25zb2xlLmxvZyhlbGVtLnZhbHVlKSxcclxuICAgKiAgICAgJ2JsdXInOiAoKSA9PiBjb25zb2xlLmxvZygnYmx1cicpXHJcbiAgICogICB9LFxyXG4gICAqICAgJ2lucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBkYXRhbGlzdCwga2V5Z2VuLCBvdXRwdXQnXHJcbiAgICogKTtcclxuICAgKlxyXG4gICAqIGNvbnN0IHJlbW92ZUxpc3RlbmVycyA9IGVsZW0ub24oe1xyXG4gICAqICAgJ2NoYW5nZSwgaW5wdXQnOiAoZSwgZWxlbSwgaW5kZXgpID0+IGNvbnNvbGUubG9nKGVsZW0udmFsdWUpLFxyXG4gICAqICAgJ2JsdXInOiAoKSA9PiBjb25zb2xlLmxvZygnYmx1cicpXHJcbiAgICogfSk7XHJcbiAgICpcclxuICAgKiByZW1vdmVMaXN0ZW5lcnMoJ2NsaWNrJyk7XHJcbiAgICogcmVtb3ZlTGlzdGVuZXJzKCdibHVyLCBjaGFuZ2UnKTtcclxuICAgKiByZW1vdmVMaXN0ZW5lcnMoJ2JsdXIsIGNoYW5nZScsICdpbnB1dCcpO1xyXG4gICAqIHJlbW92ZUxpc3RlbmVycygpO1xyXG4gICAqL1xyXG4gIG9uKGV2ZW50LCBzZWxlY3RvciA9IG51bGwsIGxpc3RlbmVyKSB7XHJcbiAgICBjb25zdCBhbGxMaXN0ZW5lcnMgPSBuZXcgU3VwZXIoe30pO1xyXG5cclxuICAgIGlmIChpc0Z1bmN0aW9uKHNlbGVjdG9yKSkge1xyXG4gICAgICBsaXN0ZW5lciA9IHNlbGVjdG9yO1xyXG4gICAgICBzZWxlY3RvciA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGlzU3RyaW5nKGV2ZW50KSkge1xyXG4gICAgICBldmVudCA9IHsgW2V2ZW50XTogbGlzdGVuZXIgfTtcclxuICAgIH1cclxuXHJcbiAgICBldmVudCA9IG5ldyBTdXBlcihldmVudCkub2JqZWN0KChsaXN0ZW5lcnMsIGxpc3RlbmVyLCBldmVudCkgPT4ge1xyXG4gICAgICBpdGVyYXRlKGV2ZW50LnNwbGl0KGV2ZW50U2VwYXJhdG9yKSwgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgbGlzdGVuZXJzW2V2ZW50XSA9IGxpc3RlbmVyO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuZm9yRWFjaCgoZWxlbSkgPT4ge1xyXG4gICAgICBpZiAoIWlzRWxlbWVudChlbGVtKSAmJiAhaXNXaW5kb3coZWxlbSkgJiYgIWlzSFRNTERvY3VtZW50KGVsZW0pKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCB7IGxpc3RlbmVycyB9ID0gKHdpbmRvd3NEd2F5bmVEYXRhLmZpbmQoKHsgZWxlbWVudCB9KSA9PiBlbGVtZW50ID09PSBlbGVtKSB8fCB7fSkudmFsdWUgfHwgZWxlbS5kd2F5bmVEYXRhO1xyXG5cclxuICAgICAgZXZlbnQuZm9yRWFjaCgobGlzdGVuZXIsIGV2ZW50KSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMgPSBsaXN0ZW5lcnNbZXZlbnRdID0gbGlzdGVuZXJzW2V2ZW50XSB8fCBuZXcgU3VwZXIoe30pLmRlZmluZSgnaW5kZXgnLCB7XHJcbiAgICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSByZW1vdmVFdmVudExpc3RlbmVycy5wcm9wKCdpbmRleCcpO1xyXG5cclxuICAgICAgICBpZiAoIXJlbW92ZUV2ZW50TGlzdGVuZXJzLmhhcygnbGlzdGVuZXInKSkge1xyXG4gICAgICAgICAgY29uc3QgbmV3TGlzdGVuZXIgPSAoZSkgPT4ge1xyXG4gICAgICAgICAgICByZW1vdmVFdmVudExpc3RlbmVycy5mb3JFYWNoKCh7IHNlbGVjdG9yLCBsaXN0ZW5lciB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgaWYgKG5ldyBFbGVtKGUudGFyZ2V0KS5pcyhzZWxlY3RvcikpIHtcclxuICAgICAgICAgICAgICAgIGxpc3RlbmVyLmNhbGwoZWxlbSwgZSwgZWxlbSwgaW5kZXgpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgIG5ld0xpc3RlbmVyLmJhc2UgPSBlbGVtO1xyXG5cclxuICAgICAgICAgIGVsZW0uYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgbmV3TGlzdGVuZXIsIGZhbHNlKTtcclxuICAgICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJzLmRlZmluZSgnbGlzdGVuZXInLCB7XHJcbiAgICAgICAgICAgIHZhbHVlOiBuZXdMaXN0ZW5lcixcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCByZW1vdmVMaXN0ZW5lciA9ICgpID0+IHtcclxuICAgICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJzLmRlbGV0ZShpbmRleCk7XHJcblxyXG4gICAgICAgICAgaWYgKCFyZW1vdmVFdmVudExpc3RlbmVycy5jb3VudCkge1xyXG4gICAgICAgICAgICBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIHJlbW92ZUV2ZW50TGlzdGVuZXJzLnByb3AoJ2xpc3RlbmVyJyksIGZhbHNlKTtcclxuICAgICAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMuZGVsZXRlKCdsaXN0ZW5lcicpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGFsbExpc3RlbmVycy5wcm9wKGV2ZW50LCAoYWxsTGlzdGVuZXJzLnByb3AoZXZlbnQpIHx8IG5ldyBBcnIoKSkucHVzaChyZW1vdmVMaXN0ZW5lcikpO1xyXG5cclxuICAgICAgICByZW1vdmVFdmVudExpc3RlbmVycy5hc3NpZ24oe1xyXG4gICAgICAgICAgaW5kZXg6IGluZGV4ICsgMSxcclxuICAgICAgICAgIFtpbmRleF06IHtcclxuICAgICAgICAgICAgc2VsZWN0b3IsXHJcbiAgICAgICAgICAgIGxpc3RlbmVyLFxyXG4gICAgICAgICAgICByZW1vdmVMaXN0ZW5lclxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVycyhldmVudCkge1xyXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIGl0ZXJhdGUoYXJndW1lbnRzLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgIGl0ZXJhdGUoZXZlbnQuc3BsaXQoZXZlbnRTZXBhcmF0b3IpLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgaWYgKGFsbExpc3RlbmVycy5oYXMoZXZlbnQpKSB7XHJcbiAgICAgICAgICAgICAgYWxsTGlzdGVuZXJzLnByb3AoZXZlbnQpLmZvckVhY2goKHJlbW92ZUxpc3RlbmVyKSA9PiByZW1vdmVMaXN0ZW5lcigpKTtcclxuICAgICAgICAgICAgICBhbGxMaXN0ZW5lcnMuZGVsZXRlKGV2ZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgYWxsTGlzdGVuZXJzLmZvckVhY2goKHJlbW92ZUxpc3RlbmVycykgPT4ge1xyXG4gICAgICAgIHJlbW92ZUxpc3RlbmVycy5mb3JFYWNoKChyZW1vdmVMaXN0ZW5lcikgPT4gcmVtb3ZlTGlzdGVuZXIoKSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge051bWJlcn0gRWxlbSNvdXRlckhlaWdodFxyXG4gICAqIEB0eXBlIHtOdW1iZXJ9XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZWFkb25seVxyXG4gICAqIEBkZXNjcmlwdGlvbiBHZXR0ZXIgZm9yIGZpbmRpbmcgaG93IG11Y2ggaGVpZ2h0IHRoZSBlbGVtZW50IGFjdHVhbGx5IGlzLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBlbGVtLmNzcyh7XHJcbiAgICogICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcclxuICAgKiAgIGhlaWdodDogJzIwMHB4JyxcclxuICAgKiAgIHBhZGRpbmdUb3A6ICcycHgnLFxyXG4gICAqICAgcGFkZGluZ0JvdHRvbTogJzNweCcsXHJcbiAgICogICBib3JkZXJUb3A6ICcxcHggc29saWQgYmxhY2snLFxyXG4gICAqICAgYm9yZGVyQm90dG9tOiAnNHB4IHNvbGlkIGJsYWNrJ1xyXG4gICAqICAgbWFyZ2luVG9wOiAnMHB4JyxcclxuICAgKiAgIG1hcmdpbkJvdHRvbTogJzVweCdcclxuICAgKiB9KS5vdXRlckhlaWdodDsgLy8gMjA1XHJcbiAgICogZWxlbVxyXG4gICAqICAgLmNzcygnYm94LXNpemluZycsICdjb250ZW50LWJveCcpXHJcbiAgICogICAub3V0ZXJIZWlnaHQ7IC8vIDIxNVxyXG4gICAqIGVsZW1cclxuICAgKiAgIC5jc3MoJ2JveC1zaXppbmcnLCAncGFkZGluZy1ib3gnKVxyXG4gICAqICAgLm91dGVySGVpZ2h0OyAvLyAyMTBcclxuICAgKi9cclxuICBnZXQgb3V0ZXJIZWlnaHQoKSB7XHJcbiAgICBjb25zdCBlbGVtID0gdGhpcy4kWzBdO1xyXG5cclxuICAgIGlmIChpc1dpbmRvdyhlbGVtKSkge1xyXG4gICAgICByZXR1cm4gZWxlbS5vdXRlckhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB7XHJcbiAgICAgIGJvcmRlclRvcFdpZHRoLFxyXG4gICAgICBib3JkZXJCb3R0b21XaWR0aCxcclxuICAgICAgYm94U2l6aW5nLFxyXG4gICAgICBoZWlnaHQsXHJcbiAgICAgIG1hcmdpblRvcCxcclxuICAgICAgbWFyZ2luQm90dG9tLFxyXG4gICAgICBwYWRkaW5nVG9wLFxyXG4gICAgICBwYWRkaW5nQm90dG9tXHJcbiAgICB9ID0gdGhpcy5jYWxjQ1NTKCk7XHJcbiAgICBjb25zdCBib3JkZXJzID0gcHgoYm9yZGVyVG9wV2lkdGgpICsgcHgoYm9yZGVyQm90dG9tV2lkdGgpO1xyXG4gICAgY29uc3QgcGFkZGluZ3MgPSBweChwYWRkaW5nVG9wKSArIHB4KHBhZGRpbmdCb3R0b20pO1xyXG5cclxuICAgIHJldHVybiBweChoZWlnaHQpICsgcHgobWFyZ2luVG9wKSArIHB4KG1hcmdpbkJvdHRvbSkgKyBvdXRlclN3aXRjaGVyKGJveFNpemluZywgW2JvcmRlcnMsIHBhZGRpbmdzXSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtOdW1iZXJ9IEVsZW0jb3V0ZXJXaWR0aFxyXG4gICAqIEB0eXBlIHtOdW1iZXJ9XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZWFkb25seVxyXG4gICAqIEBkZXNjcmlwdGlvbiBHZXR0ZXIgZm9yIGZpbmRpbmcgaG93IG11Y2ggd2lkdGggdGhlIGVsZW1lbnQgYWN0dWFsbHkgaXMuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIGVsZW0uY3NzKHtcclxuICAgKiAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxyXG4gICAqICAgd2lkdGg6ICcyMDBweCcsXHJcbiAgICogICBwYWRkaW5nTGVmdDogJzJweCcsXHJcbiAgICogICBwYWRkaW5nUmlnaHQ6ICczcHgnLFxyXG4gICAqICAgYm9yZGVyTGVmdDogJzFweCBzb2xpZCBibGFjaycsXHJcbiAgICogICBib3JkZXJSaWdodDogJzRweCBzb2xpZCBibGFjaydcclxuICAgKiAgIG1hcmdpbkxlZnQ6ICcwcHgnLFxyXG4gICAqICAgbWFyZ2luUmlnaHQ6ICc1cHgnXHJcbiAgICogfSkub3V0ZXJXaWR0aDsgLy8gMjA1XHJcbiAgICogZWxlbVxyXG4gICAqICAgLmNzcygnYm94LXNpemluZycsICdjb250ZW50LWJveCcpXHJcbiAgICogICAub3V0ZXJXaWR0aDsgLy8gMjE1XHJcbiAgICogZWxlbVxyXG4gICAqICAgLmNzcygnYm94LXNpemluZycsICdwYWRkaW5nLWJveCcpXHJcbiAgICogICAub3V0ZXJXaWR0aDsgLy8gMjEwXHJcbiAgICovXHJcbiAgZ2V0IG91dGVyV2lkdGgoKSB7XHJcbiAgICBjb25zdCBlbGVtID0gdGhpcy4kWzBdO1xyXG5cclxuICAgIGlmIChpc1dpbmRvdyhlbGVtKSkge1xyXG4gICAgICByZXR1cm4gZWxlbS5vdXRlcldpZHRoO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHtcclxuICAgICAgYm9yZGVyTGVmdFdpZHRoLFxyXG4gICAgICBib3JkZXJSaWdodFdpZHRoLFxyXG4gICAgICBib3hTaXppbmcsXHJcbiAgICAgIG1hcmdpbkxlZnQsXHJcbiAgICAgIG1hcmdpblJpZ2h0LFxyXG4gICAgICBwYWRkaW5nTGVmdCxcclxuICAgICAgcGFkZGluZ1JpZ2h0LFxyXG4gICAgICB3aWR0aFxyXG4gICAgfSA9IHRoaXMuY2FsY0NTUygpO1xyXG4gICAgY29uc3QgYm9yZGVycyA9IHB4KGJvcmRlckxlZnRXaWR0aCkgKyBweChib3JkZXJSaWdodFdpZHRoKTtcclxuICAgIGNvbnN0IHBhZGRpbmdzID0gcHgocGFkZGluZ0xlZnQpICsgcHgocGFkZGluZ1JpZ2h0KTtcclxuXHJcbiAgICByZXR1cm4gcHgod2lkdGgpICsgcHgobWFyZ2luTGVmdCkgKyBweChtYXJnaW5SaWdodCkgKyBvdXRlclN3aXRjaGVyKGJveFNpemluZywgW2JvcmRlcnMsIHBhZGRpbmdzXSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEVsZW0jcGFyZW50XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfSBOZXcgaW5zdGFuY2Ugb2YgRWxlbS5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIHJldHVybnMgd3JhcCBvZiB0aGUgc2V0IG9mIHRoZSBwYXJlbnQgZWxlbWVudHMgb2YgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQuXHJcbiAgICovXHJcbiAgcGFyZW50KCkge1xyXG4gICAgcmV0dXJuIHRoaXMub2JqZWN0KChlbGVtcywgZWxlbSkgPT4gZWxlbXMuYWRkKGVsZW0ucGFyZW50Tm9kZSksIG5ldyBFbGVtKCkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBFbGVtI3BhcmVudFRyZWVcclxuICAgKiBAcHVibGljXHJcbiAgICogQHJldHVybnMge0VsZW19IE5ldyBpbnN0YW5jZSBvZiBFbGVtLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBSZXR1cm5zIHdyYXAgb2YgYWxsIHBhcmVudHMgb2YgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIGVsZW0ucGFyZW50VHJlZSgpOyAvLyBFbGVtXHJcbiAgICovXHJcbiAgcGFyZW50VHJlZSgpIHtcclxuICAgIHJldHVybiB0aGlzLm9iamVjdCgoZWxlbXMsIGVsZW0pID0+IHtcclxuICAgICAgd2hpbGUgKGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpIHtcclxuICAgICAgICBlbGVtcy5hZGQoZWxlbSk7XHJcbiAgICAgIH1cclxuICAgIH0sIG5ldyBFbGVtKCkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBFbGVtI3ByZXZcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IFtzZWxlY3RvciA9IG51bGxdIC0gSWYgcHJlc2VudCwgZmluZHMgcHJldmlvdXMgZWxlbWVudCB0byBldmVyeSBlbGVtIHRoYXQgbWF0Y2hlcyB0aGUgc2VsZWN0b3IuXHJcbiAgICogSWYgbm90LCBmaW5kcyBwcmV2aW91cyBlbGVtZW50IHRvIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0LlxyXG4gICAqIEByZXR1cm5zIHtFbGVtfSBOZXcgaW5zdGFuY2Ugb2YgRWxlbS5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIGZvciBmaW5kaW5nIHByZXZpb3VzIGVsZW1lbnQgdG8gZWFjaCBlbGVtZW50IGluIHRoZSBzZXQuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIGVsZW0ubmV4dCgpOyAgICAgICAvLyBmaW5kcyBwcmV2aW91cyBlbGVtZW50IHRvIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0XHJcbiAgICogZWxlbS5uZXh0KCcuZm9vJyk7IC8vIGZpbmRzIHByZXZpb3VzIGVsZW1lbnQgdG8gZWFjaCBlbGVtZW50IHRoYXQgaGFzICdmb28nIGNsYXNzXHJcbiAgICovXHJcbiAgcHJldihzZWxlY3RvciA9IG51bGwpIHtcclxuICAgIHJldHVybiB0aGlzLm9iamVjdCgoZWxlbXMsIGVsZW0pID0+IHtcclxuICAgICAgLyogZXNsaW50IG5vLWNvbmQtYXNzaWduOiAwICovXHJcbiAgICAgIHdoaWxlIChlbGVtID0gZWxlbS5wcmV2aW91c1NpYmxpbmcpIHtcclxuICAgICAgICBpZiAobmV3IEVsZW0oZWxlbSkuaXMoc2VsZWN0b3IpKSB7XHJcbiAgICAgICAgICByZXR1cm4gZWxlbXMuYWRkKGVsZW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSwgbmV3IEVsZW0oKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEVsZW0jcHJvcFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3QuPFN0cmluZywgRWxlbVZhbHVlQ2FsbGJhY2t8Kj59IHByb3BlcnR5IC0gRWl0aGVyIGEgc3RyaW5nIG9mIGEgcHJvcGVydHkgb3IgYW4gYXNzaWduZWQgb2JqZWN0LlxyXG4gICAqIEBwYXJhbSB7RWxlbVZhbHVlQ2FsbGJhY2t8Kn0gW3ZhbHVlXSAtIElmIGEgcHJvcGVydHkgcGFyYW1ldGVyIGlzIGEgc3RyaW5nXHJcbiAgICogdGhpcyBoYXMgdG8gYmUgYW4gYXNzaWduZWQgdmFsdWUgaWYgaXQncyBwcmVzZW50LlxyXG4gICAqIEByZXR1cm5zIHtFbGVtfCp9IFJldHVybnMgdGhpcyBpZiBpdCdzIHNldHRlciBvciBhIHZhbHVlIGlmIGdldHRlci5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIHRoYXQgaXMgZWl0aGVyIGEgcHJvcGVydHkgZ2V0dGVyIGZvciB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgc2V0XHJcbiAgICogb3IgYSBzZXR0ZXIgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIHNldC5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogZWxlbS5wcm9wKCdkcmFnZ2FibGUnLCBmYWxzZSk7XHJcbiAgICogZWxlbS5wcm9wKCdkcmFnZ2FibGUnKTsgLy8gZmFsc2VcclxuICAgKi9cclxuICBwcm9wKHByb3BlcnR5LCB2YWx1ZSkge1xyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPD0gMSAmJiBpc1N0cmluZyhwcm9wZXJ0eSkpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuJFswXSA/IHRoaXMuJFswXVtwcm9wZXJ0eV0gOiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMikge1xyXG4gICAgICBwcm9wZXJ0eSA9IHsgW3Byb3BlcnR5XTogdmFsdWUgfTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5mb3JFYWNoKChlbGVtLCBpbmRleCkgPT4ge1xyXG4gICAgICBpdGVyYXRlKHByb3BlcnR5LCAodmFsdWUsIHByb3ApID0+IHtcclxuICAgICAgICBlbGVtW3Byb3BdID0gaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZShlbGVtW3Byb3BdLCBlbGVtLCBpbmRleCkgOiB2YWx1ZTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRWxlbSNyZWZcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtTdHJpbmd8RWxlbVZhbHVlQ2FsbGJhY2t9IFtsaW5rXSAtIElmIGl0J3MgcHJlc2VudCBsaW5rIHRvIGEgcmVzb3VyY2UuXHJcbiAgICogQHJldHVybnMge0VsZW18U3RyaW5nfSBJZiB0aGUgbGluayBhcmd1bWVudCBpc24ndCBwcmVzZW50IGl0J3MgYSBnZXR0ZXIgb2YgdGhlICdzcmMnIGF0dHJpYnV0ZVxyXG4gICAqIGZvciB0aGUgb25lIG9mIGZvbGxvd2luZyBlbGVtZW50czogaW1nLCBzY3JpcHQsIGlmcmFtZSwgYXVkaW8sIHZpZGVvOyBvZiB0aGUgJ2FjdGlvbicgYXR0cmlidXRlXHJcbiAgICogZm9yIGEgZm9ybSBlbGVtZW50IGFuZCBvZiB0aGUgJ2hyZWYnIGF0dHJpYnV0ZSBmb3IgdGhlIHJlc3QuIElmIGl0J3MgcHJlc2VudCBpdCdzIGEgc2V0dGVyXHJcbiAgICogb2YgdGhlIHNhbWUgYXR0cmlidXRlIGZvciBhbGwgdGhlIGVsZW1lbnQgaW4gdGhlIHNldC5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIGZvciBnZXR0aW5nIHJlc291cmNlcyBsaW5rcyBhbmQgc2V0dGluZyB0aGVtLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBlbGVtLnJlZignL3NvbWUvY29vbC9pbWFnZS5wbmcnKTtcclxuICAgKiBlbGVtLnJlZigpOyAvLyAnL3NvbWUvY29vbC9pbWFnZS5wbmcnXHJcbiAgICovXHJcbiAgcmVmKGxpbmspIHtcclxuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5hdHRyKHJlZlN3aXRjaGVyKHRoaXMubmFtZSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLmZvckVhY2goKGVsZW0pID0+IHtcclxuICAgICAgZWxlbSA9IG5ldyBFbGVtKGVsZW0pO1xyXG5cclxuICAgICAgZWxlbS5hdHRyKHJlZlN3aXRjaGVyKGVsZW0ubmFtZSksIGxpbmspO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEVsZW0jcmVtb3ZlXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfSBSZXR1cm5zIHRoaXMuXHJcbiAgICogQGRlc2NyaXB0aW9uIFJlbW92ZXMgYWxsIHRoZSBlbGVtZW50cyBmcm9tIHRoZSBzZXQgZnJvbSB0aGUgZG9jdW1lbnQuXHJcbiAgICogTm90ZTogaXQgZG9lc24ndCByZW1vdmUgdGhlbSBmcm9tIHRoZSBzZXQgc28gd2F0Y2ggb3V0IGZvciB0aGUgbWVtb3J5IGxlYWtzLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBlbGVtLnJlbW92ZSgpO1xyXG4gICAqL1xyXG4gIHJlbW92ZSgpIHtcclxuICAgIHJldHVybiB0aGlzLmZvckVhY2goKGVsZW0pID0+IHtcclxuICAgICAgY29uc3QgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xyXG5cclxuICAgICAgaWYgKHBhcmVudCkge1xyXG4gICAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChlbGVtKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEVsZW0jcmVtb3ZlQXR0clxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXR0cmlidXRlcyAtIEF0dHJpYnV0ZXMgdG8gcmVtb3ZlLlxyXG4gICAqIEByZXR1cm5zIHtFbGVtfSBSZXR1cm5zIHRoaXMuXHJcbiAgICogQGRlc2NyaXB0aW9uIFJlbW92ZXMgYWxsIHRoZSBhdHRyaWJ1dGVzIGZyb20gYXJndW1lbnRzIGZyb20gYWxsIHRoZSBlbGVtZW50cyBpbiB0aGUgc2V0LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBlbGVtLnJlbW92ZUF0dHIoJ2ZvbycsICdiYXInLCAnYmF6Jyk7XHJcbiAgICovXHJcbiAgcmVtb3ZlQXR0ciguLi5hdHRyaWJ1dGVzKSB7XHJcbiAgICByZXR1cm4gdGhpcy5mb3JFYWNoKChlbGVtKSA9PiB7XHJcbiAgICAgIGlmICghaXNFbGVtZW50KGVsZW0pKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpdGVyYXRlKGFyZ3VtZW50cywgKGF0dHIpID0+IHtcclxuICAgICAgICBjb25zdCBucyA9IGF0dHJOU1N3aXRjaGVyKGF0dHIsIFtuZXcgRWxlbShlbGVtKV0pO1xyXG5cclxuICAgICAgICBpZiAoaXNOdWxsKG5zKSkge1xyXG4gICAgICAgICAgZWxlbS5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGVsZW0ucmVtb3ZlQXR0cmlidXRlTlMobnMsIGF0dHIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRWxlbSNyZW1vdmVDbGFzc1xyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gY2xhc3NlcyAtIENsYXNzZXMgdG8gcmVtb3ZlLlxyXG4gICAqIEByZXR1cm5zIHtFbGVtfSBSZXR1cm5zIHRoaXMuXHJcbiAgICogQGRlc2NyaXB0aW9uIFJlbW92ZXMgYWxsIHRoZSBjbGFzc2VzIGZyb20gYXJndW1lbnRzIGZyb20gYWxsIHRoZSBlbGVtZW50cyBpbiB0aGUgc2V0LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBlbGVtLnJlbW92ZUNsYXNzKCdmb28nLCAnYmFyJywgJ2JheicpO1xyXG4gICAqL1xyXG4gIHJlbW92ZUNsYXNzKC4uLmNsYXNzZXMpIHtcclxuICAgIHJldHVybiB0aGlzLmZvckVhY2goKGVsZW0pID0+IHtcclxuICAgICAgY29uc3QgbGlzdCA9IGVsZW0uY2xhc3NMaXN0O1xyXG5cclxuICAgICAgaXRlcmF0ZShpc0VsZW1lbnQoZWxlbSkgJiYgYXJndW1lbnRzLCAoY2xzKSA9PiBsaXN0LnJlbW92ZShjbHMpKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBFbGVtI3JlbW92ZUNTU1xyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gcHJvcHMgLSBDU1MgcHJvcGVydGllcyB0byByZW1vdmUuXHJcbiAgICogQHJldHVybnMge0VsZW19IFJldHVybnMgdGhpcy5cclxuICAgKiBAZGVzY3JpcHRpb24gUmVtb3ZlcyBhbGwgdGhlIENTUyBwcm9wZXJ0aWVzIGZyb20gYXJndW1lbnRzIGZyb20gYWxsIHRoZSBlbGVtZW50cyBpbiB0aGUgc2V0LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBlbGVtLnJlbW92ZUNTUygnZGlzcGxheScsICdwb3NpdGlvbicsICdtYXJnaW4nKTtcclxuICAgKi9cclxuICByZW1vdmVDU1MoLi4ucHJvcHMpIHtcclxuICAgIHJldHVybiB0aGlzLmZvckVhY2goKGVsZW0pID0+IHtcclxuICAgICAgaWYgKCFpc0VsZW1lbnQoZWxlbSkpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGl0ZXJhdGUoYXJndW1lbnRzLCAoY3NzKSA9PiB7XHJcbiAgICAgICAgZWxlbS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShjc3MpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBFbGVtI3JlcGxhY2VcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtTdHJpbmd8RWxlbXxFbGVtZW50fSBlbGVtZW50IC0gRWxlbWVudCB0byByZXBsYWNlIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBzZXRcclxuICAgKiB3aXRoIGEgc2V0IG9mIGVsZW1lbnRzIHNwZWNpZmllZCBieSB0aGUgYXJndW1lbnQgKEVsZW1lbnQsIHNldCBvZiBlbGVtZW50cyBvciBhIHNlbGVjdG9yIG9mIHRoZW0pLlxyXG4gICAqIEByZXR1cm5zIHtFbGVtfSBSZXR1cm5zIHRoaXMuXHJcbiAgICogQGRlc2NyaXB0aW9uIE1ldGhvZCBpcyBzaW1pbGFyIHRvXHJcbiAgICogW05vZGUjcmVwbGFjZUNoaWxkXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9BUEkvTm9kZS9yZXBsYWNlQ2hpbGR9LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBlbGVtLnJlcGxhY2UoZWxlbTIpO1xyXG4gICAqIGVsZW0ucmVwbGFjZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaWQnKSk7XHJcbiAgICogZWxlbS5yZXBsYWNlKCcjaWQgZGl2LmMxJyk7XHJcbiAgICovXHJcbiAgcmVwbGFjZShlbGVtZW50KSB7XHJcbiAgICBlbGVtZW50ID0gdG9GaW5kKGVsZW1lbnQpO1xyXG5cclxuICAgIGNvbnN0IHBhcmVudCA9IHRoaXMuZmlyc3QoKS5wYXJlbnQoKTtcclxuXHJcbiAgICBpZiAoIXBhcmVudC5sZW5ndGgpIHtcclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGVsZW0gPSBwYXJlbnQ7XHJcbiAgICBsZXQgbWV0aG9kID0gJ2ludG8nO1xyXG4gICAgY29uc3QgbmV4dCA9IHRoaXMubmV4dCgpLmZpcnN0KCkuJFswXTtcclxuICAgIGNvbnN0IHByZXYgPSB0aGlzLnByZXYoKS5maXJzdCgpLiRbMF07XHJcblxyXG4gICAgaWYgKG5leHQpIHtcclxuICAgICAgZWxlbSA9IG5leHQ7XHJcbiAgICAgIG1ldGhvZCA9ICdpbnNlcnRCZWZvcmUnO1xyXG4gICAgfSBlbHNlIGlmIChwcmV2KSB7XHJcbiAgICAgIGVsZW0gPSBwcmV2O1xyXG4gICAgICBtZXRob2QgPSAnaW5zZXJ0QWZ0ZXInO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZmlyc3QoKS5yZW1vdmUoKTtcclxuXHJcbiAgICBlbGVtZW50W21ldGhvZF0oZWxlbSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEVsZW0jc2V0T2ZcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgLSBIVE1MIGVsZW1lbnQgdHlwZS5cclxuICAgKiBAcGFyYW0ge051bWJlcnxPYmplY3R8QXJyYXkuPCo+fSBpdGVyYXRvciAtIEEgbnVtYmVyIChob3cgbWFueSBlbGVtZW50cyB0byBjcmVhdGUgaW5zaWRlIGVhY2ggZWxlbWVudCksXHJcbiAgICogYW4gb2JqZWN0IG9yIGFuIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cclxuICAgKiBAcGFyYW0ge0VsZW1TZXRPZkNhbGxiYWNrfSBjYWxsYmFja1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfSBOZXcgaW5zdGFuY2Ugb2YgRWxlbS5cclxuICAgKiBAZGVzY3JpcHRpb24gRnVuY3Rpb24gZm9yIGNyZWF0aW5nIHNldCBvZiBlbGVtZW50cyBpbnNpZGUgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgYmFzZWQgb24gYW4gYXJyYXkgb3IgYW4gb2JqZWN0LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiB0YWJsZS5zZXRPZigndHInLCBbWzEsIDJdLCBbMywgNF0sIFs1LCA2XV0sIChyb3csIGFycmF5KSA9PiB7XHJcbiAgICogICBEKHJvdykuc2V0T2YoJ3RkJywgYXJyYXksIChjb2wsIG51bWJlcikgPT4ge1xyXG4gICAqICAgICBEKGNvbCkudGV4dChudW1iZXIpO1xyXG4gICAqICAgfSk7XHJcbiAgICogfSk7XHJcbiAgICovXHJcbiAgc2V0T2YodHlwZSwgaXRlcmF0b3IsIGNhbGxiYWNrKSB7XHJcbiAgICB2YWxpZGF0ZSh7IDI6IGNhbGxiYWNrIH0sIHsgMjogWydmdW5jdGlvbiddIH0sICdFbGVtI3NldE9mJyk7XHJcblxyXG4gICAgaXRlcmF0b3IgPSBuZXcgU3VwZXIoaXRlcmF0b3IpLiQ7XHJcblxyXG4gICAgaWYgKGlzTnVtYmVyKGl0ZXJhdG9yKSkge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHZhbGlkYXRlKHsgMTogaXRlcmF0b3IgfSwgeyAxOiBbJ2ludExpa2UnLCAnPj0wJ10gfSwgJ0VsZW0jc2V0T2YnKTtcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignMm5kIGFyZ3VtZW50IG11c3QgYmUgZWl0aGVyIG9yIG5vbi1uZWdhdGl2ZSBpbnRlZ2VyLCBvciBvYmplY3QhIChhdCBFbGVtI3NldE9mKScpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpdGVyYXRvciA9IGFycmF5KGl0ZXJhdG9yKS4kO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLm9iamVjdCgoZWxlbXMsIGVsZW0sIGluZGV4KSA9PiB7XHJcbiAgICAgIGl0ZXJhdGUoaXRlcmF0b3IsICh2YWx1ZSwga2V5KSA9PiB7XHJcbiAgICAgICAgY29uc3QgY3JlYXRlZCA9IG5ldyBFbGVtKGVsZW0pLmNyZWF0ZSh0eXBlKTtcclxuXHJcbiAgICAgICAgY2FsbGJhY2soY3JlYXRlZC4kWzBdLCB2YWx1ZSwga2V5LCBpdGVyYXRvciwgZWxlbSwgaW5kZXgpO1xyXG5cclxuICAgICAgICBlbGVtcy5hZGQoY3JlYXRlZCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSwgbmV3IEVsZW0oKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEVsZW0jc2hvd1xyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcmV0dXJucyB7RWxlbX0gUmV0dXJucyB0aGlzLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBTaG93cyBhbGwgZWxlbWVudHMgaW4gdGhlIHNldC5cclxuICAgKiBJZiBhbiBlbGVtZW50IHdhcyBoaWRkZW4gdXNpbmcge0BsaW5rIEVsZW0jaGlkZX0gcHJldmlvdXMgZGlzcGxheSBpcyBzZXQuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIGVsZW0uc2hvdygpO1xyXG4gICAqL1xyXG4gIHNob3coKSB7XHJcbiAgICByZXR1cm4gdGhpcy5mb3JFYWNoKChlbGVtKSA9PiB7XHJcbiAgICAgIGNvbnN0IHsgZHdheW5lRGF0YSB9ID0gZWxlbTtcclxuXHJcbiAgICAgIGVsZW0gPSBuZXcgRWxlbShlbGVtKTtcclxuXHJcbiAgICAgIGlmIChlbGVtLmNzcygnZGlzcGxheScpLmluZGV4T2YoJ25vbmUnKSA9PT0gMCkge1xyXG4gICAgICAgIGVsZW0uY3NzKCdkaXNwbGF5JywgZHdheW5lRGF0YS5wcmV2aW91c0Rpc3BsYXkpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBkd2F5bmVEYXRhLnByZXZpb3VzRGlzcGxheSA9ICcnO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEVsZW0jdGV4dFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1N0cmluZ3xFbGVtVmFsdWVDYWxsYmFja3wqfSBbdGV4dF0gLSBUZXh0IHRvIHdyaXRlIGluc3RlYWQgb2YgY3VycmVudCB0ZXh0LlxyXG4gICAqIEByZXR1cm5zIHtFbGVtfFN0cmluZ30gSWYgbm8gYXJndW1lbnRzIHBhc3NlZCB0ZXh0IG9mIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBzZXQgcmV0dXJuZWQuXHJcbiAgICogT3RoZXJ3aXNlIGFsbCBlbGVtZW50cyB0ZXh0cyBpbiB0aGUgc2V0IGFyZSBzZXQgdG8gdGhlIHRleHQgYXJndW1lbnQuXHJcbiAgICogQGRlc2NyaXB0aW9uIEdldHMgb3Igc2V0cyB0ZXh0LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBlbGVtLnRleHQoJzEyMycpO1xyXG4gICAqIGVsZW0udGV4dCgpOyAvLyAnMTIzJ1xyXG4gICAqL1xyXG4gIHRleHQodGV4dCkge1xyXG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnByb3AodGV4dFByb3BlcnR5KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5mb3JFYWNoKChlbGVtLCBpbmRleCkgPT4ge1xyXG4gICAgICBjb25zdCB0eHQgPSBlbGVtW3RleHRQcm9wZXJ0eV07XHJcblxyXG4gICAgICBuZXcgRWxlbShlbGVtKS5wcm9wKFxyXG4gICAgICAgIHRleHRQcm9wZXJ0eSxcclxuICAgICAgICBpc0Z1bmN0aW9uKHRleHQpXHJcbiAgICAgICAgICA/IHRleHQodHh0LCBlbGVtLCBpbmRleClcclxuICAgICAgICAgIDogdGV4dFxyXG4gICAgICApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEVsZW0jdG9nZ2xlQXR0clxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1N0cmluZ30gYXR0ciAtIEF0dHJpYnV0ZSB0byB0b2dnbGUuXHJcbiAgICogQHBhcmFtIHtCb29sZWFufCp9IFtjb25kaXRpb25dIC0gSWYgcHJlc2VudCBhbmQgdGhlIGNvbmRpdGlvbiBpcyB0cnV0aHkgbWV0aG9kIGFkZHMgdGhlIGF0dHJpYnV0ZVxyXG4gICAqIHdpdGggdGhlICcnIHZhbHVlIGFuZCBpZiBmYWxzZXkgbWV0aG9kIHJlbW92ZXMgdGhlIGF0dHJpYnV0ZS4gSWYgbm90IHByZXNlbnQgbWV0aG9kIGFkZHNcclxuICAgKiB0aGUgYXR0cmlidXRlIGlmIGl0IGRvZXNuJ3QgZXhpc3QgYW5kIHJlbW92ZXMgaWYgaXQgZG9lcy5cclxuICAgKiBAcmV0dXJucyB7RWxlbX0gUmV0dXJucyB0aGlzLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBNZXRob2QgZm9yIHRvZ2dsaW5nIGF0dHJpYnV0ZXMuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIGVsZW0udG9nZ2xlQXR0cignYXR0cicpO1xyXG4gICAqIGVsZW0udG9nZ2xlQXR0cignYXR0cicsIHNvbWVDb25kaXRpb24pO1xyXG4gICAqL1xyXG4gIHRvZ2dsZUF0dHIoYXR0ciwgY29uZGl0aW9uKSB7XHJcbiAgICByZXR1cm4gdGhpcy5mb3JFYWNoKChlbGVtKSA9PiB7XHJcbiAgICAgIGVsZW0gPSBuZXcgRWxlbShlbGVtKTtcclxuXHJcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMiA/ICFlbGVtLmhhc0F0dHIoYXR0cikgOiBjb25kaXRpb24pIHtcclxuICAgICAgICBlbGVtLmF0dHIoYXR0ciwgJycpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGVsZW0ucmVtb3ZlQXR0cihhdHRyKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEVsZW0jdG9nZ2xlQXR0clxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1N0cmluZ30gY2xzIC0gQ2xhc3MgdG8gdG9nZ2xlLlxyXG4gICAqIEBwYXJhbSB7Qm9vbGVhbnwqfSBbY29uZGl0aW9uXSAtIElmIHByZXNlbnQgYW5kIHRoZSBjb25kaXRpb24gaXMgdHJ1dGh5IG1ldGhvZCBhZGRzIHRoZSBjbGFzc1xyXG4gICAqIGFuZCBpZiBmYWxzZXkgbWV0aG9kIHJlbW92ZXMgdGhlIGNsYXNzLiBJZiBub3QgcHJlc2VudCBtZXRob2QgYWRkc1xyXG4gICAqIHRoZSBjbGFzcyBpZiBpdCBkb2Vzbid0IGV4aXN0IGFuZCByZW1vdmVzIGlmIGl0IGRvZXMuXHJcbiAgICogQHJldHVybnMge0VsZW19IFJldHVybnMgdGhpcy5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIGZvciB0b2dnbGluZyBjbGFzc2VzLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBlbGVtLnRvZ2dsZUNsYXNzKCdjbHMnKTtcclxuICAgKiBlbGVtLnRvZ2dsZUNsYXNzKCdjbHMnLCBzb21lQ29uZGl0aW9uKTtcclxuICAgKi9cclxuICB0b2dnbGVDbGFzcyhjbHMsIGNvbmRpdGlvbikge1xyXG4gICAgcmV0dXJuIChhcmd1bWVudHMubGVuZ3RoIDwgMiA/ICF0aGlzLmhhc0NsYXNzKGNscykgOiBjb25kaXRpb24pXHJcbiAgICAgID8gdGhpcy5hZGRDbGFzcyhjbHMpXHJcbiAgICAgIDogdGhpcy5yZW1vdmVDbGFzcyhjbHMpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHRvU3RyaW5nVGFnKCkge1xyXG4gICAgcmV0dXJuIHRvU3RyaW5nVGFnKHRoaXMuJCQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBFbGVtI3VwXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7SW50ZWdlcn0gW2xldmVsID0gMV0gLSBXaGF0IGxldmVsIHVwIGFsb25nIHRoZSB0cmVlIHNob3VsZCBiZSB0aGUgcGFyZW50LlxyXG4gICAqIEByZXR1cm5zIHtFbGVtfSBOZXcgaW5zdGFuY2Ugb2YgRWxlbS5cclxuICAgKiBAZGVzY3JpcHRpb24gQ3JlYXRlcyBhIGNvbGxlY3Rpb24gb2YgcGFyZW50cyBvZiBsZXZlbCAmbHQ7bGV2ZWwmZ3Q7LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBlbGVtLnVwKCk7XHJcbiAgICogZWxlbS51cCgyKTtcclxuICAgKi9cclxuICB1cChsZXZlbCA9IDEpIHtcclxuICAgIHZhbGlkYXRlKFtsZXZlbF0sIFtbJ2ludExpa2UnLCAnPj0wJ11dLCAnRWxlbSN1cCcpO1xyXG5cclxuICAgIGxldmVsID0gTnVtYmVyKGxldmVsKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5vYmplY3QoKGVsZW1zLCBlbGVtKSA9PiB7XHJcbiAgICAgIGxldCBuID0gbGV2ZWw7XHJcblxyXG4gICAgICB3aGlsZSAobi0tICYmIGVsZW0pIHtcclxuICAgICAgICBlbGVtID0gZWxlbS5wYXJlbnROb2RlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBlbGVtcy5hZGQoZWxlbSk7XHJcbiAgICB9LCBuZXcgRWxlbSgpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRWxlbSN2YWxpZGF0ZVxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1ZhbGlkYXRlQ2FsbGJhY2t9IFt2YWxpZGF0b3JdIC0gSWYgcHJlc2VudCwgZnVuY3Rpb24gdGhhdCB2YWxpZGF0ZXMgaW5wdXRzLlxyXG4gICAqIEByZXR1cm5zIHtFbGVtfE9iamVjdC48U3RyaW5nLCBFcnJvcnwqPnxudWxsfVxyXG4gICAqIElmIGEgY2FsbGJhY2sgYXJndW1lbnQgcHJvdmlkZWQgcmV0dXJucyB0aGlzLiBJZiBubyBhcmd1bWVudHMgcHJvdmlkZWQgcmV0dXJucyBlaXRoZXIgYW4gb2JqZWN0XHJcbiAgICogd2l0aCBpbnB1dCBuYW1lcyBrZXlzIGFuZCBlcnJvcnMgdmFsdWVzIG9yIG51bGwgaWYgbm8gZXJyb3JzIGZvdW5kLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBJZiBhIGNhbGxiYWNrIGFyZ3VtZW50IHByb3ZpZGVkIGFkZHMgaXQgdG8gdGhlIGVsZW1lbnQgdmFsaWRhdG9ycyBsaXN0LlxyXG4gICAqIElmIG5vIGFyZ3VtZW50cyBwcm92aWRlZCB2YWxpZGF0ZXMgZXZlcnkgaW5wdXQgZWxlbWVudCBpbiB0aGUgc2V0IHdpdGggaXRzIG93biBmdW5jdGlvbnMuXHJcbiAgICogSWYgYW4gZWxlbWVudCBpcyBhIGZvcm0gaXQgdmFsaWRhdGVzIGFsbCBpbnB1dCBlbGVtZW50cyBpbnNpZGUgaXQuIEFmdGVyIHRoZSB2YWxpZGF0aW9uXHJcbiAgICogZmlyZXMgJ3ZhbGlkYXRlJyBldmVudCB3aXRoICd2YWxpZCcgYW5kICdlcnJvcicgKGlmIGZvcm0gaXQncyBlcnJvcnMpIHByb3BlcnRpZXMuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIGZvcm0ub24oJ2lucHV0IGNoYW5nZScsICdpbnB1dCcsICh2YWx1ZSwgaW5wdXQpID0+IHtcclxuICAgKiAgIGlucHV0ID0gRChpbnB1dCk7XHJcbiAgICpcclxuICAgKiAgIGlmIChOdW1iZXIodmFsdWUpICUgMykge1xyXG4gICAqICAgICBpbnB1dC5hZGRDbGFzcygnaW52YWxpZCcpO1xyXG4gICAqXHJcbiAgICogICAgIHRocm93IG5ldyBFcnJvcignVGhlIHZhbHVlIHNob3VsZCBiZSBkaXZpZGVkIGJ5IDMhJyk7XHJcbiAgICogICB9XHJcbiAgICpcclxuICAgKiAgIGlucHV0LnJlbW92ZUNsYXNzKCdpbnZhbGlkJyk7XHJcbiAgICogfSk7XHJcbiAgICovXHJcbiAgdmFsaWRhdGUodmFsaWRhdG9yKSB7XHJcbiAgICB2YWxpZGF0ZShbdmFsaWRhdG9yXSwgWydmdW5jdGlvbnx8ISddLCAnRWxlbSN2YWxpZGF0ZScpO1xyXG5cclxuICAgIGlmICh2YWxpZGF0b3IpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuZm9yRWFjaCgoeyBkd2F5bmVEYXRhIH0pID0+IHtcclxuICAgICAgICBkd2F5bmVEYXRhLnZhbGlkYXRvcnMucHVzaCh2YWxpZGF0b3IpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBlcnJvcnMgPSBuZXcgU3VwZXIoeyBlcnJvcnM6IG51bGwgfSk7XHJcblxyXG4gICAgdGhpc1xyXG4gICAgICAuZmlsdGVyKGAkeyBpbnB1dEVsZW1lbnRzIH0sIGZvcm1gKVxyXG4gICAgICAuZm9yRWFjaCgoZWxlbSwgaW5kZXgpID0+IHtcclxuICAgICAgICBpZiAoZ2V0TmFtZShlbGVtKSA9PT0gJ2Zvcm0nKSB7XHJcbiAgICAgICAgICBsZXQgZm9ybUVycm9ycyA9IHsgZXJyb3JzOiBudWxsIH07XHJcbiAgICAgICAgICBjb25zdCBmb3JtID0gbmV3IEVsZW0oZWxlbSk7XHJcbiAgICAgICAgICBjb25zdCBpbnB1dHMgPSBmb3JtLmZpbmQoaW5wdXRFbGVtZW50cyk7XHJcblxyXG4gICAgICAgICAgaW5wdXRzLmZvckVhY2goKGlucHV0LCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICB2YWxpZGF0b3JXcmFwKGlucHV0LCBpbmRleCwgZm9ybUVycm9ycyk7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBlcnJvcnMuZGVlcEFzc2lnbihmb3JtRXJyb3JzKTtcclxuXHJcbiAgICAgICAgICBmb3JtRXJyb3JzID0gZm9ybUVycm9ycy5lcnJvcnM7XHJcblxyXG4gICAgICAgICAgZm9ybS5kaXNwYXRjaCgndmFsaWRhdGUnLCB7fSwge1xyXG4gICAgICAgICAgICB2YWxpZDogIWZvcm1FcnJvcnMsXHJcbiAgICAgICAgICAgIGVycm9yczogZm9ybUVycm9yc1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgcmV0dXJuIGlucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBpbnB1dEVycm9yID0gKGZvcm1FcnJvcnMgfHwge30pW2lucHV0Lm5hbWVdO1xyXG5cclxuICAgICAgICAgICAgbmV3IEVsZW0oaW5wdXQpLmRpc3BhdGNoKCd2YWxpZGF0ZScsIHt9LCB7XHJcbiAgICAgICAgICAgICAgdmFsaWQ6ICFpbnB1dEVycm9yLFxyXG4gICAgICAgICAgICAgIGVycm9yOiBpbnB1dEVycm9yIHx8IG51bGxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBpbnB1dEVycm9yID0geyBlcnJvcnM6IG51bGwgfTtcclxuXHJcbiAgICAgICAgdmFsaWRhdG9yV3JhcChlbGVtLCBpbmRleCwgaW5wdXRFcnJvcik7XHJcbiAgICAgICAgZXJyb3JzLmRlZXBBc3NpZ24oaW5wdXRFcnJvcik7XHJcblxyXG4gICAgICAgIGlucHV0RXJyb3IgPSAoaW5wdXRFcnJvci5lcnJvcnMgfHwge30pW2VsZW0ubmFtZV07XHJcblxyXG4gICAgICAgIG5ldyBFbGVtKGVsZW0pLmRpc3BhdGNoKCd2YWxpZGF0ZScsIHt9LCB7XHJcbiAgICAgICAgICB2YWxpZDogIWlucHV0RXJyb3IsXHJcbiAgICAgICAgICBlcnJvcjogaW5wdXRFcnJvciB8fCBudWxsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHZhbGlkYXRvcldyYXAoaW5wdXQsIGluZGV4LCBlcnJvcnMpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBpZiAoaW5wdXQudmFsaWRpdHkgJiYgIWlucHV0LnZhbGlkaXR5LnZhbGlkKSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoaW5wdXQudmFsaWRhdGlvbk1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW5wdXQuZHdheW5lRGF0YS52YWxpZGF0b3JzLmZvckVhY2goKHZhbGlkYXRvcikgPT4ge1xyXG4gICAgICAgICAgdmFsaWRhdG9yKGlucHV0LnZhbHVlLCBpbnB1dCwgaW5kZXgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAoZXJyb3JzLmVycm9ycyA9IGVycm9ycy5lcnJvcnMgfHwge30pW2lucHV0Lm5hbWVdID0gZXJyO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGVycm9ycy5ldmVyeSgoZXJyb3IpID0+IGlzTnVsbChlcnJvcikpKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBlcnJvcnMuJC5lcnJvcnM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEVsZW0jd2lkdGhcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHsqfEVsZW1WYWx1ZUNhbGxiYWNrfSBbd2lkdGhdIC0gV2lkdGggdG8gc2V0LlxyXG4gICAqIEByZXR1cm5zIHtFbGVtfFN0cmluZ30gSWYgbm8gYXJndW1lbnRzIHBhc3NlZCB3aWR0aCBvZiB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgc2V0IHJldHVybmVkLlxyXG4gICAqIE90aGVyd2lzZSBhbGwgZWxlbWVudHMgd2lkdGhzIGluIHRoZSBzZXQgYXJlIHNldCB0byB0aGUgd2lkdGggYXJndW1lbnQuXHJcbiAgICogQGRlc2NyaXB0aW9uIEdldHMgb3Igc2V0cyB3aWR0aC5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogZWxlbS53aWR0aCgxMjMpO1xyXG4gICAqIGVsZW0ud2lkdGgoKTsgLy8gMTIzXHJcbiAgICovXHJcbiAgd2lkdGgod2lkdGgpIHtcclxuICAgIHJldHVybiB0aGlzLnByb3AuYXBwbHkodGhpcywgbmV3IEFycihhcmd1bWVudHMpLnVuc2hpZnQoJ3dpZHRoJykuJCk7XHJcbiAgfVxyXG59XHJcblxyXG5kZWZpbmVQcm9wZXJ0aWVzKEVsZW0ucHJvdG90eXBlLCB7XHJcbiAgW1N5bWJvbC50b1N0cmluZ1RhZ106ICdFbGVtJ1xyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAY29uc3Qge0VsZW19IHdpblxyXG4gKiBAdHlwZSB7RWxlbX1cclxuICogQHB1YmxpY1xyXG4gKiBAZGVzY3JpcHRpb24gRWxlbSBpbnN0YW5jZSBvZiB3aW5kb3cuXHJcbiAqL1xyXG5jb25zdCB3aW4gPSBuZXcgRWxlbShnbG9iYWwpO1xyXG5cclxuLyoqXHJcbiAqIEBjb25zdCB7RWxlbX0gZG9jXHJcbiAqIEB0eXBlIHtFbGVtfVxyXG4gKiBAcHVibGljXHJcbiAqIEBkZXNjcmlwdGlvbiBFbGVtIGluc3RhbmNlIG9mIGRvY3VtZW50LlxyXG4gKi9cclxuY29uc3QgZG9jID0gbmV3IEVsZW0obmF0aXZlRG9jdW1lbnQpO1xyXG5cclxuLyoqXHJcbiAqIEBjb25zdCB7RWxlbX0gaHRtbFxyXG4gKiBAdHlwZSB7RWxlbX1cclxuICogQHB1YmxpY1xyXG4gKiBAZGVzY3JpcHRpb24gRWxlbSBpbnN0YW5jZSBvZiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuXHJcbiAqL1xyXG5jb25zdCBodG1sID0gbmV3IEVsZW0obmF0aXZlRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KTtcclxuXHJcbi8qKlxyXG4gKiBAY29uc3Qge0VsZW19IGJvZHlcclxuICogQHR5cGUge0VsZW19XHJcbiAqIEBwdWJsaWNcclxuICogQGRlc2NyaXB0aW9uIEVsZW0gaW5zdGFuY2Ugb2YgZG9jdW1lbnQuYm9keS5cclxuICovXHJcbmNvbnN0IGJvZHkgPSBuZXcgRWxlbShuYXRpdmVEb2N1bWVudC5ib2R5KTtcclxuXHJcbi8qKlxyXG4gKiBAY29uc3Qge0VsZW19IGhlYWRcclxuICogQHR5cGUge0VsZW19XHJcbiAqIEBwdWJsaWNcclxuICogQGRlc2NyaXB0aW9uIEVsZW0gaW5zdGFuY2Ugb2YgZG9jdW1lbnQuaGVhZC5cclxuICovXHJcbmNvbnN0IGhlYWQgPSBuZXcgRWxlbShuYXRpdmVEb2N1bWVudC5oZWFkKTtcclxuXHJcbmNvbnN0IGVsZW1lbnRzID0gbmV3IEFycihodG1sRWxlbWVudHMpLmNvbmNhdChzdmdFbGVtZW50cykuJDtcclxuY29uc3QgcHJvcHMgPSBuZXcgQXJyKGVsZW1lbnRzKS5tYXAoKHR5cGUpID0+IG5ldyBTdHIodHlwZSkudG9DYW1lbENhc2UoKS4kKS4kO1xyXG5cclxuZHluYW1pY0RlZmluZVByb3BlcnRpZXMoRWxlbS5wcm90b3R5cGUsIHByb3BzLCAoZWxlbSwgaSkgPT4gZnVuY3Rpb24gKCkge1xyXG4gIHJldHVybiB0aGlzLmNyZWF0ZS5hcHBseSh0aGlzLCBuZXcgQXJyKGFyZ3VtZW50cykudW5zaGlmdChlbGVtZW50c1tpXSkuJCk7XHJcbn0pO1xyXG5cclxuZHluYW1pY0RlZmluZVByb3BlcnRpZXMoRWxlbS5wcm90b3R5cGUsIGNhbnZhc0dldE1ldGhvZHMsIChtZXRob2QpID0+IGZ1bmN0aW9uICgpIHtcclxuICBjb25zdCBjdHggPSB0aGlzLmN0eCgpO1xyXG5cclxuICBpZiAoY3R4KSB7XHJcbiAgICByZXR1cm4gY3R4W21ldGhvZF0uYXBwbHkoY3R4LCBhcmd1bWVudHMpO1xyXG4gIH1cclxufSk7XHJcblxyXG5keW5hbWljRGVmaW5lUHJvcGVydGllcyhFbGVtLnByb3RvdHlwZSwgY2FudmFzUmVzdE1ldGhvZHMsIChtZXRob2QpID0+IGZ1bmN0aW9uICgpIHtcclxuICBjb25zdCBjdHggPSB0aGlzLmN0eCgpO1xyXG5cclxuICBpZiAoY3R4KSB7XHJcbiAgICBjdHhbbWV0aG9kXS5hcHBseShjdHgsIGFyZ3VtZW50cyk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdGhpcztcclxufSk7XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uIHRvRmluZFxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcGFyYW0ge0VsZW1lbnR8RWxlbXxTdHJpbmd9IGVsZW0gLSBFbGVtZW50LCBzZWxlY3RvciBvZiBFbGVtZW50cyBvciBFbGVtLlxyXG4gKiBAcmV0dXJucyB7RWxlbX0gSW5zdGFuY2Ugb2YgRWxlbS5cclxuICovXHJcbmZ1bmN0aW9uIHRvRmluZChlbGVtKSB7XHJcbiAgaWYgKGlzRWxlbShlbGVtKSkge1xyXG4gICAgcmV0dXJuIGVsZW07XHJcbiAgfVxyXG5cclxuICBpZiAoaXNTdHJpbmcoZWxlbSkpIHtcclxuICAgIGVsZW0gPSBmaW5kKGVsZW0pO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG5ldyBFbGVtKGVsZW0pO1xyXG59XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uIGlzRWxlbVxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gVmFsdWUgdG8gY2hlY2sgaWYgaXQncyBFbGVtLlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gSWYgdGhlIHZhbHVlIGlzIEVsZW0uXHJcbiAqIEBkZXNjcmlwdGlvbiBSZXR1cm5zIGlmIHRoZSB2YWx1ZSBpcyBFbGVtIG9yIG5vdC5cclxuICovXHJcbmZ1bmN0aW9uIGlzRWxlbSh2YWx1ZSkge1xyXG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIEVsZW07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZnVuY3Rpb24gaXNXaW5kb3dcclxuICogQHByaXZhdGVcclxuICogQHBhcmFtIHsqfSB2YWx1ZSAtIFZhbHVlIHRvIGNoZWNrIGlmIGl0J3MgV2luZG93LlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gSWYgdGhlIHZhbHVlIGlzIFdpbmRvdy5cclxuICogQGRlc2NyaXB0aW9uIFJldHVybnMgaWYgdGhlIHZhbHVlIGlzIFdpbmRvdyBvciBub3QuXHJcbiAqL1xyXG5mdW5jdGlvbiBpc1dpbmRvdyh2YWx1ZSkge1xyXG4gIHJldHVybiB0b1N0cmluZ1RhZyh2YWx1ZSkgPT09ICdXaW5kb3cnO1xyXG59XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uIGlzSFRNTERvY3VtZW50XHJcbiAqIEBwcml2YXRlXHJcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBWYWx1ZSB0byBjaGVjayBpZiBpdCdzIEhUTUxEb2N1bWVudC5cclxuICogQHJldHVybnMge0Jvb2xlYW59IElmIHRoZSB2YWx1ZSBpcyBIVE1MRG9jdW1lbnQuXHJcbiAqIEBkZXNjcmlwdGlvbiBSZXR1cm5zIGlmIHRoZSB2YWx1ZSBpcyBIVE1MRG9jdW1lbnQgb3Igbm90LlxyXG4gKi9cclxuZnVuY3Rpb24gaXNIVE1MRG9jdW1lbnQodmFsdWUpIHtcclxuICByZXR1cm4gdG9TdHJpbmdUYWcodmFsdWUpID09PSAnSFRNTERvY3VtZW50JztcclxufVxyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvbiBpc0RvY3VtZW50RnJhZ21lbnRcclxuICogQHByaXZhdGVcclxuICogQHBhcmFtIHsqfSB2YWx1ZSAtIFZhbHVlIHRvIGNoZWNrIGlmIGl0J3MgYSBEb2N1bWVudEZyYWdtZW50LlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gSWYgdGhlIHZhbHVlIGlzIGEgRG9jdW1lbnRGcmFnbWVudC5cclxuICogQGRlc2NyaXB0aW9uIFJldHVybnMgaWYgdGhlIHZhbHVlIGlzIGEgRG9jdW1lbnRGcmFnbWVudCBvciBub3QuXHJcbiAqL1xyXG5mdW5jdGlvbiBpc0RvY3VtZW50RnJhZ21lbnQodmFsdWUpIHtcclxuICByZXR1cm4gdG9TdHJpbmdUYWcodmFsdWUpID09PSAnRG9jdW1lbnRGcmFnbWVudCc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZnVuY3Rpb24gaXNTdHlsZVJ1bGVcclxuICogQHByaXZhdGVcclxuICogQHBhcmFtIHsqfSB2YWx1ZSAtIFZhbHVlIHRvIGNoZWNrIGlmIGl0J3MgYSBzdHlsZSBydWxlLlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gSWYgdGhlIHZhbHVlIGlzIGEgc3R5bGUgcnVsZS5cclxuICogQGRlc2NyaXB0aW9uIFJldHVybnMgaWYgdGhlIHZhbHVlIGlzIGEgc3R5bGUgcnVsZSBvciBub3QuXHJcbiAqL1xyXG5mdW5jdGlvbiBpc1N0eWxlUnVsZSh2YWx1ZSkge1xyXG4gIHJldHVybiB0b1N0cmluZ1RhZyh2YWx1ZSkgPT09ICdDU1NTdHlsZVJ1bGUnO1xyXG59XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBWYWx1ZSB0byBjaGVjayBpZiBpdCdzIENvbW1lbnQgb3IgVGV4dC5cclxuICogQHJldHVybnMge0Jvb2xlYW59IElmIHRoZSB2YWx1ZSBpcyBIVE1MRG9jdW1lbnQuXHJcbiAqIEBkZXNjcmlwdGlvbiBSZXR1cm5zIGlmIHRoZSB2YWx1ZSBpcyBDb21tZW50IG9yIFRleHQgb3Igbm90LlxyXG4gKi9cclxuZnVuY3Rpb24gaXNDb21tZW50T3JUZXh0KHZhbHVlKSB7XHJcbiAgY29uc3QgdGFnID0gdG9TdHJpbmdUYWcodmFsdWUpO1xyXG5cclxuICByZXR1cm4gdGFnID09PSAnQ29tbWVudCcgfHwgdGFnID09PSAnVGV4dCc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZnVuY3Rpb24gZ2V0RWxlbVxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcGFyYW0ge0VsZW19IGVsZW0gLSBFbGVtZW50IHRvIGNoZWNrLlxyXG4gKiBAcmV0dXJucyB7RWxlbWVudH0gVGhlIGFyZ3VtZW50IG9yIGEgZmFsbGJhY2sgaWYgbmVlZGVkLlxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0RWxlbShlbGVtKSB7XHJcbiAgcmV0dXJuIGlzRWxlbWVudChlbGVtLiRbMF0pID8gZWxlbS4kWzBdIDogZW1wdHlEaXY7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZnVuY3Rpb24gZ2V0TmFtZVxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IFtlbGVtXSAtIEVsZW1lbnQgd2hpY2ggbmFtZSBpcyBuZWVkZWQgdG8ga25vdy5cclxuICogQHJldHVybnMge1N0cmluZ30gRWxlbWVudCBuYW1lLlxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0TmFtZShlbGVtKSB7XHJcbiAgcmV0dXJuIChlbGVtICYmIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKSB8fCAnJztcclxufVxyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvbiBhZGREd2F5bmVEYXRhXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbSAtIEVsZW1lbnQgdG8gYWRkIGR3YXluZURhdGEgdG8uXHJcbiAqIEByZXR1cm5zIHt2b2lkfVxyXG4gKi9cclxuZnVuY3Rpb24gYWRkRHdheW5lRGF0YShlbGVtKSB7XHJcbiAgaWYgKCF7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGVsZW0sICdkd2F5bmVEYXRhJykgJiYgIWlzV2luZG93KGVsZW0pKSB7XHJcbiAgICAvKipcclxuICAgICAqIEBtZW1iZXIgRWxlbWVudCNkd2F5bmVEYXRhXHJcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxyXG4gICAgICogQHByb3RlY3RlZFxyXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmd9IHByZXZpb3VzRGlzcGxheSAtIFBhcmFtZXRlciB1c2VkIGZvciBoaWRpbmcvc2hvd2luZyBlbGVtZW50cy5cclxuICAgICAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxTdHJpbmcsIFN1cGVyPn0gcmVtb3ZlTGlzdGVuZXJzIC0gUGFyYW1ldGVyIHVzZWQgZm9yIHJlbW92ZSBldmVudCBsaXN0ZW5lcnMuXHJcbiAgICAgKiBAcHJvcGVydHkge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gW2N0eF0gLSBDYW52YXMgcmVuZGVyaW5nIGNvbnRleHQuXHJcbiAgICAgKiBAcHJvcGVydHkge0Fycn0gdmFsaWRhdG9ycyAtIFZhbGlkYXRvcnMgYXNzaWduZWQgdG8gZWxlbWVudC5cclxuICAgICAqIEBkZXNjcmlwdGlvbiBEIGRhdGEuXHJcbiAgICAgKi9cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbGVtLCAnZHdheW5lRGF0YScsIHtcclxuICAgICAgdmFsdWU6IHtcclxuICAgICAgICBwcmV2aW91c0Rpc3BsYXk6ICcnLFxyXG4gICAgICAgIGxpc3RlbmVyczoge30sXHJcbiAgICAgICAgY3R4OiBnZXROYW1lKGVsZW0pID09PSAnY2FudmFzJyAmJiBlbGVtLmdldENvbnRleHQoJzJkJyksXHJcbiAgICAgICAgdmFsaWRhdG9yczogbmV3IEFycihbXSlcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfSBlbHNlIGlmIChpc1dpbmRvdyhlbGVtKSAmJiAhd2luZG93c0R3YXluZURhdGEuc29tZSgoeyBlbGVtZW50IH0pID0+IGVsZW1lbnQgPT09IGVsZW0pKSB7XHJcbiAgICB3aW5kb3dzRHdheW5lRGF0YS5wdXNoKHtcclxuICAgICAgZWxlbWVudDogZWxlbSxcclxuICAgICAgbGlzdGVuZXJzOiB7fVxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5jb25zdHJ1Y3RvcnNbMl0ucHVzaCh7XHJcbiAgY2hlY2s6IChlbGVtKSA9PiAoXHJcbiAgICBpc0VsZW1lbnQoZWxlbSkgfHxcclxuICAgIGlzV2luZG93KGVsZW0pIHx8XHJcbiAgICBpc0hUTUxEb2N1bWVudChlbGVtKSB8fFxyXG4gICAgaXNDb21tZW50T3JUZXh0KGVsZW0pIHx8XHJcbiAgICBpc0RvY3VtZW50RnJhZ21lbnQoZWxlbSkgfHxcclxuICAgIC9eKEhUTUxDb2xsZWN0aW9ufE5vZGVMaXN0KSQvLnRlc3QodG9TdHJpbmdUYWcoZWxlbSkpXHJcbiAgKSxcclxuICBjbHM6IEVsZW1cclxufSk7XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uIGZpbmRcclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VsZWN0b3IgLSBTZWxlY3RvciB0byBmaW5kLlxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IFtiYXNlID0gZG9jdW1lbnRdIC0gQmFzZSB0byBmaW5kIGluLlxyXG4gKiBAcmV0dXJucyB7RWxlbX0gTmV3IGluc3RhbmNlIG9mIEVsZW0uXHJcbiAqIEBkZXNjcmlwdGlvbiBTeW5vbnltIGZvclxyXG4gKiBbRG9jdW1lbnQjcXVlcnlTZWxlY3RvckFsbF17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvQVBJL0RvY3VtZW50L3F1ZXJ5U2VsZWN0b3JBbGx9LlxyXG4gKi9cclxuZnVuY3Rpb24gZmluZChzZWxlY3RvciwgYmFzZSA9IG5hdGl2ZURvY3VtZW50KSB7XHJcbiAgcmV0dXJuIG5ldyBFbGVtKFxyXG4gICAgaXNFbGVtZW50KGJhc2UpIHx8IGlzSFRNTERvY3VtZW50KGJhc2UpXHJcbiAgICAgID8gYmFzZS5xdWVyeVNlbGVjdG9yQWxsKFN0cmluZyhzZWxlY3RvcikpXHJcbiAgICAgIDogW11cclxuICApO1xyXG59XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uIHBhcnNlSFRNTFxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBodG1sIC0gSFRNTCB0byBwYXJzZS5cclxuICogQHBhcmFtIHtCb29sZWFufSBbY29sbGFwc2VXaGl0ZVNwYWNlID0gZmFsc2VdIC0gSWYgdGhlIHdoaXRlc3BhY2Ugc2hvdWxkIGJlXHJcbiAqIGNvbGxhcHNlZCBkdXJpbmcgdGhlIHBhcnNpbmcuXHJcbiAqIEByZXR1cm5zIHtFbGVtfSBOZXcgaW5zdGFuY2Ugb2YgRWxlbS5cclxuICogQGRlc2NyaXB0aW9uIFBhcnNlcyBIVE1MIGFuZCByZXR1cm5zIGEgd3JhcCBvZiAjZG9jdW1lbnQtZnJhZ21lbnQgY29udGFpbmluZyB0aGUgY29udGVudHMuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIHBhcnNlSFRNTCgnPGRpdj4xMjM8L2Rpdj4nKTsgLy8gRWxlbVxyXG4gKi9cclxuZnVuY3Rpb24gcGFyc2VIVE1MKGh0bWwsIGNvbGxhcHNlV2hpdGVTcGFjZSkge1xyXG4gIGNvbnN0IGpzb24gPSBtYXJrdXBUb0pTT04oaHRtbCwgY29sbGFwc2VXaGl0ZVNwYWNlKTtcclxuICBjb25zdCB0ZW1wbGF0ZSA9IGRvYy50ZW1wbGF0ZSgpO1xyXG4gIGNvbnN0IGVsZW0gPSBuZXcgRWxlbSh0ZW1wbGF0ZS4kWzBdLmNvbnRlbnQpO1xyXG5cclxuICBqc29uLmZvckVhY2goZnVuY3Rpb24gZm9yRWFjaE5vZGUobm9kZSkge1xyXG4gICAgY29uc3Qge1xyXG4gICAgICBuYW1lLFxyXG4gICAgICBhdHRycyxcclxuICAgICAgdmFsdWUsXHJcbiAgICAgIHBhcmVudCxcclxuICAgICAgY2hpbGRyZW5cclxuICAgIH0gPSBub2RlO1xyXG5cclxuICAgIGNvbnN0IHBhcmVudE5vZGUgPSBwYXJlbnQuZWxlbSB8fCBlbGVtO1xyXG4gICAgY29uc3QgZWxlbWVudCA9IHBhcmVudE5vZGUuY3JlYXRlKG5hbWUpO1xyXG5cclxuICAgIG5vZGUuZWxlbSA9IGVsZW1lbnQ7XHJcblxyXG4gICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgIGVsZW1lbnQudGV4dCh2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGF0dHJzKSB7XHJcbiAgICAgIGVsZW1lbnQuYXR0cihhdHRycyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG5hbWUgPT09ICd0ZW1wbGF0ZScpIHtcclxuICAgICAgbm9kZS5lbGVtID0gbmV3IEVsZW0oZWxlbWVudC5wcm9wKCdjb250ZW50JykpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjaGlsZHJlbikge1xyXG4gICAgICBjaGlsZHJlbi5mb3JFYWNoKGZvckVhY2hOb2RlKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIG5ldyBFbGVtKGVsZW0pO1xyXG59XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uIHB4XHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBzaXplIC0gU3RyaW5nIGNvbnRhaW5pbmcgcGl4ZWxzIHZhbHVlIG9yIGEgbnVtYmVyLlxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBOdW1iZXIgb2YgcGl4ZWxzLlxyXG4gKiBAZGVzY3JpcHRpb24gRnVuY3Rpb24gZm9yIHBhcnNpbmcgcGl4ZWwgc3RyaW5ncy5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogcHgoJzBweCcpOyAgLy8gMFxyXG4gKiBweCgnNDJweCcpOyAvLyA0MlxyXG4gKi9cclxuZnVuY3Rpb24gcHgoc2l6ZSkge1xyXG4gIHJldHVybiBOdW1iZXIoU3RyaW5nKHNpemUpLnJlcGxhY2UoL3B4JC8sICcnKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB7IEVsZW0sIHdpbiwgZG9jLCBodG1sLCBib2R5LCBoZWFkLCBmaW5kLCBwYXJzZUhUTUwsIHB4IH07XHJcbiIsImV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckRCbG9jayhCbG9jaykge1xyXG4gIGNsYXNzIERCbG9jayBleHRlbmRzIEJsb2NrIHtcclxuICAgIHN0YXRpYyB0ZW1wbGF0ZSA9ICc8ZC1lbGVtZW50cyB2YWx1ZT1cIntlbGVtc31cIiAvPic7XHJcblxyXG4gICAgZWxlbXMgPSBudWxsO1xyXG5cclxuICAgIGFmdGVyQ29uc3RydWN0KCkge1xyXG4gICAgICBjb25zdCB7IGNoaWxkcmVuIH0gPSB0aGlzLiQkLnBhcmVudDtcclxuICAgICAgY29uc3QgeyBuYW1lIH0gPSB0aGlzLmFyZ3M7XHJcbiAgICAgIGxldCBmb3VuZDtcclxuXHJcbiAgICAgIGlmIChuYW1lKSB7XHJcbiAgICAgICAgZm91bmQgPSBjaGlsZHJlbi5maW5kKCh7IG5hbWU6IG5vZGVOYW1lIH0pID0+IG5vZGVOYW1lID09PSBgZC1ibG9jay0keyBuYW1lIH1gKTtcclxuXHJcbiAgICAgICAgaWYgKGZvdW5kICYmIGZvdW5kLnZhbHVlLmNoaWxkcmVuLmxlbmd0aCkge1xyXG4gICAgICAgICAgdGhpcy5lbGVtcyA9IGZvdW5kLnZhbHVlLmNoaWxkcmVuO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmVsZW1zID0gY2hpbGRyZW47XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBuYW1lOiAnZC1ibG9jaycsXHJcbiAgICB2YWx1ZTogREJsb2NrXHJcbiAgfTtcclxufVxyXG4iLCJpbXBvcnQgeyBBcnIgfSBmcm9tICcuLi9BcnInO1xyXG5pbXBvcnQgeyBFbGVtIH0gZnJvbSAnLi4vRWxlbSc7XHJcbmltcG9ydCB7IFN1cGVyIH0gZnJvbSAnLi4vU3VwZXInO1xyXG5pbXBvcnQgeyBhc3NpZ24gfSBmcm9tICcuLi9oZWxwZXJzJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckRFYWNoKEJsb2NrLCBjcmVhdGVCbG9jaykge1xyXG4gIGNsYXNzIERFYWNoIGV4dGVuZHMgQmxvY2sge1xyXG4gICAgY29uc3RydWN0b3Iob3B0cykge1xyXG4gICAgICBzdXBlcihvcHRzKTtcclxuXHJcbiAgICAgIGNvbnN0IHtcclxuICAgICAgICBhcmdzOiB7XHJcbiAgICAgICAgICBpdGVtOiBpdGVtTmFtZSA9ICckaXRlbScsXHJcbiAgICAgICAgICBpbmRleDogaW5kZXhOYW1lID0gJyRpbmRleCdcclxuICAgICAgICB9XHJcbiAgICAgIH0gPSB0aGlzO1xyXG5cclxuICAgICAgYXNzaWduKHRoaXMuJCQsIHtcclxuICAgICAgICB1aWRzOiBuZXcgU3VwZXIoe30pLFxyXG4gICAgICAgIGl0ZW1zOiBuZXcgQXJyKFtdKSxcclxuICAgICAgICBVSUQ6IFN0cmluZyh0aGlzLmFyZ3MudWlkKSxcclxuICAgICAgICBpdGVtTmFtZSxcclxuICAgICAgICBpbmRleE5hbWVcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYWZ0ZXJSZW5kZXIoKSB7XHJcbiAgICAgIHRoaXMuY29uc3RydWN0VmFsdWVzKHRoaXMuYXJncy5zZXQpO1xyXG4gICAgICB0aGlzLndhdGNoQXJncygnc2V0JywgKHNldCkgPT4ge1xyXG4gICAgICAgIHRoaXMuY29uc3RydWN0VmFsdWVzKHNldCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0cnVjdFZhbHVlcyhzZXQpIHtcclxuICAgICAgY29uc3Qge1xyXG4gICAgICAgIGVsZW1zOiB7XHJcbiAgICAgICAgICBzdGFydCxcclxuICAgICAgICAgIHBhcmVudDogcGFyZW50RWxlbVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdWlkcyxcclxuICAgICAgICBwYXJlbnQsXHJcbiAgICAgICAgc2NvcGUsXHJcbiAgICAgICAgaXRlbU5hbWUsXHJcbiAgICAgICAgaW5kZXhOYW1lLFxyXG4gICAgICAgIFVJRFxyXG4gICAgICB9ID0gdGhpcy4kJDtcclxuICAgICAgY29uc3QgeyBjaGlsZHJlbiB9ID0gdGhpcztcclxuICAgICAgY29uc3QgJHVpZHMgPSB1aWRzLiQ7XHJcbiAgICAgIGNvbnN0IG5ld0tleXMgPSB7fTtcclxuICAgICAgY29uc3QgbmV3VUlEcyA9IHt9O1xyXG5cclxuICAgICAgbmV3IFN1cGVyKHNldCkuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcclxuICAgICAgICBzY29wZVtpdGVtTmFtZV0gPSBpdGVtO1xyXG4gICAgICAgIHNjb3BlW2luZGV4TmFtZV0gPSBpbmRleDtcclxuXHJcbiAgICAgICAgY29uc3QgdWlkID0gcGFyZW50LiQkLmV2YWx1YXRlKFN0cmluZyhVSUQpLCBudWxsLCBudWxsLCBmYWxzZSwgZmFsc2UsIHRoaXMpO1xyXG5cclxuICAgICAgICBuZXdLZXlzW3VpZF0gPSBuZXdLZXlzW3VpZF0gfHwge307XHJcbiAgICAgICAgbmV3S2V5c1t1aWRdW2luZGV4XSA9IHRydWU7XHJcbiAgICAgICAgbmV3VUlEc1tpbmRleF0gPSB1aWQ7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgc2NvcGVbaXRlbU5hbWVdID0gbnVsbDtcclxuICAgICAgc2NvcGVbaW5kZXhOYW1lXSA9IG51bGw7XHJcblxyXG4gICAgICB1aWRzLmZvckVhY2goKGl0ZW1zLCB1aWQpID0+IHtcclxuICAgICAgICBpZiAoIW5ld0tleXNbdWlkXSkge1xyXG4gICAgICAgICAgaXRlbXMuZm9yRWFjaCgoSXRlbSkgPT4ge1xyXG4gICAgICAgICAgICBJdGVtLnJlbW92ZSgpO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaXRlbXMuc3BsaWNlKE9iamVjdC5rZXlzKG5ld0tleXNbdWlkXSkubGVuZ3RoKS5mb3JFYWNoKChJdGVtKSA9PiB7XHJcbiAgICAgICAgICBJdGVtLnJlbW92ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGxldCBhZnRlciA9IHN0YXJ0O1xyXG5cclxuICAgICAgbmV3IFN1cGVyKHNldCkuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcclxuICAgICAgICBjb25zdCB1aWQgPSBuZXdVSURzW2luZGV4XTtcclxuICAgICAgICBsZXQgYmxvY2s7XHJcblxyXG4gICAgICAgIGlmICgkdWlkc1t1aWRdICYmICR1aWRzW3VpZF0ubGVuZ3RoKSB7XHJcbiAgICAgICAgICBibG9jayA9IG5ld0tleXNbdWlkXVtpbmRleF0gPSB1aWRzLiRbdWlkXS5zaGlmdCgpO1xyXG4gICAgICAgICAgYmxvY2suJCQuc2NvcGVbaW5kZXhOYW1lXSA9IGluZGV4O1xyXG4gICAgICAgICAgYmxvY2suJCQuc2NvcGVbaXRlbU5hbWVdID0gaXRlbTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgYmxvY2sgPSBuZXdLZXlzW3VpZF1baW5kZXhdID0gY3JlYXRlQmxvY2soe1xyXG4gICAgICAgICAgICBub2RlOiB7XHJcbiAgICAgICAgICAgICAgaXRlbU5hbWUsXHJcbiAgICAgICAgICAgICAgaW5kZXhOYW1lLFxyXG4gICAgICAgICAgICAgIGl0ZW0sXHJcbiAgICAgICAgICAgICAgaW5kZXgsXHJcbiAgICAgICAgICAgICAgbmFtZTogJyNkLWl0ZW0nLFxyXG4gICAgICAgICAgICAgIGJsb2NrOiBwYXJlbnQsXHJcbiAgICAgICAgICAgICAgY2hpbGRyZW5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYWZ0ZXIsXHJcbiAgICAgICAgICAgIHBhcmVudDogcGFyZW50RWxlbSxcclxuICAgICAgICAgICAgcGFyZW50QmxvY2s6IHRoaXMsXHJcbiAgICAgICAgICAgIHBhcmVudFNjb3BlOiBwYXJlbnRcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qge1xyXG4gICAgICAgICAgc3RhcnQsXHJcbiAgICAgICAgICBlbmRcclxuICAgICAgICB9ID0gYmxvY2suJCQuZWxlbXM7XHJcblxyXG4gICAgICAgIGlmIChzdGFydC5wcmV2KCkuJFswXSAhPT0gYWZ0ZXIuJFswXSkge1xyXG4gICAgICAgICAgY29uc3QgeyBjb250ZW50IH0gPSBibG9jay4kJC5lbGVtcztcclxuXHJcbiAgICAgICAgICBuZXcgRWxlbShbXHJcbiAgICAgICAgICAgIHN0YXJ0LFxyXG4gICAgICAgICAgICBjb250ZW50LFxyXG4gICAgICAgICAgICBlbmRcclxuICAgICAgICAgIF0pLmluc2VydEFmdGVyKGFmdGVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFmdGVyID0gZW5kO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHRoaXMuJCQudWlkcyA9IG5ldyBTdXBlcihuZXdLZXlzKS5tYXAoKGl0ZW1zKSA9PiAoXHJcbiAgICAgICAgbmV3IFN1cGVyKGl0ZW1zKS52YWx1ZXMoKVxyXG4gICAgICApKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBuYW1lOiAnZC1lYWNoJyxcclxuICAgIHZhbHVlOiBERWFjaFxyXG4gIH07XHJcbn1cclxuIiwiaW1wb3J0IHsgQXJyIH0gZnJvbSAnLi4vQXJyJztcclxuaW1wb3J0IHsgRWxlbSB9IGZyb20gJy4uL0VsZW0nO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyREVsZW1lbnRzKEJsb2NrLCBjcmVhdGVCbG9jaykge1xyXG4gIGNsYXNzIERFbGVtZW50cyBleHRlbmRzIEJsb2NrIHtcclxuICAgIGFmdGVyQ29uc3RydWN0KCkge1xyXG4gICAgICB0aGlzLndhdGNoQXJncygndmFsdWUnLCAodmFsdWUpID0+IHtcclxuICAgICAgICBjb25zdCB7XHJcbiAgICAgICAgICBjaGlsZHJlbixcclxuICAgICAgICAgIG1peGlucyxcclxuICAgICAgICAgIHdhdGNoZXJzVG9SZW1vdmUsXHJcbiAgICAgICAgICBlbGVtczoge1xyXG4gICAgICAgICAgICBzdGFydCxcclxuICAgICAgICAgICAgY29udGVudCxcclxuICAgICAgICAgICAgcGFyZW50XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSA9IHRoaXMuJCQ7XHJcbiAgICAgICAgbGV0IGFmdGVyID0gc3RhcnQ7XHJcblxyXG4gICAgICAgIGNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiB7XHJcbiAgICAgICAgICBjaGlsZC5yZW1vdmUodHJ1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbWl4aW5zLmZvckVhY2goKG1peGluKSA9PiB7XHJcbiAgICAgICAgICBtaXhpbi5yZW1vdmUodHJ1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29udGVudC5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgdGhpcy4kJC5jaGlsZHJlbiA9IG5ldyBBcnIoW10pO1xyXG4gICAgICAgIHRoaXMuJCQubWl4aW5zID0gbmV3IEFycihbXSk7XHJcbiAgICAgICAgdGhpcy4kJC53YXRjaGVyc1RvUmVtb3ZlID0gd2F0Y2hlcnNUb1JlbW92ZS5maWx0ZXIoKHsgd2F0Y2hlcnMsIHdhdGNoZXIsIGZvckRFbGVtZW50cyB9KSA9PiB7XHJcbiAgICAgICAgICBpZiAoZm9yREVsZW1lbnRzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGNvbnN0IGluZGV4ID0gd2F0Y2hlcnMuaW5kZXhPZih3YXRjaGVyKTtcclxuXHJcbiAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XHJcbiAgICAgICAgICAgIHdhdGNoZXJzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IG5ld0NvbnRlbnQgPSBuZXcgRWxlbSgpO1xyXG5cclxuICAgICAgICBuZXcgQXJyKHZhbHVlIHx8IFtdKS5mb3JFYWNoKChjaGlsZCkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgYmxvY2sgPSBjcmVhdGVCbG9jayh7XHJcbiAgICAgICAgICAgIG5vZGU6IGNoaWxkLFxyXG4gICAgICAgICAgICBhZnRlcixcclxuICAgICAgICAgICAgcGFyZW50LFxyXG4gICAgICAgICAgICBwYXJlbnRCbG9jazogdGhpcyxcclxuICAgICAgICAgICAgcGFyZW50U2NvcGU6IHRoaXNcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIGlmIChibG9jayBpbnN0YW5jZW9mIEJsb2NrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgZWxlbXMgfSA9IGJsb2NrLiQkO1xyXG5cclxuICAgICAgICAgICAgYWZ0ZXIgPSBlbGVtcy5lbmQ7XHJcblxyXG4gICAgICAgICAgICBuZXdDb250ZW50LmFkZChlbGVtcy5zdGFydCwgZWxlbXMuY29udGVudCwgZWxlbXMuZW5kKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGFmdGVyID0gYmxvY2s7XHJcblxyXG4gICAgICAgICAgICBuZXdDb250ZW50LmFkZChibG9jayk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuJCQuZWxlbXMuY29udGVudCA9IG5ld0NvbnRlbnQ7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIG5hbWU6ICdkLWVsZW1lbnRzJyxcclxuICAgIHZhbHVlOiBERWxlbWVudHNcclxuICB9O1xyXG59XHJcbiIsImV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckRJZihCbG9jaykge1xyXG4gIGNsYXNzIERJZiBleHRlbmRzIEJsb2NrIHtcclxuICAgIHN0YXRpYyB0ZW1wbGF0ZSA9ICc8ZC1lbGVtZW50cyB2YWx1ZT1cIntlbGVtc31cIi8+JztcclxuXHJcbiAgICBpbmRleCA9IEluZmluaXR5O1xyXG4gICAgZWxlbXMgPSBudWxsO1xyXG4gICAgdmFsdWVzID0gdGhpcy5jaGlsZHJlbi5tYXAoKGNoaWxkLCBpKSA9PiB7XHJcbiAgICAgIGNvbnN0IHtcclxuICAgICAgICBuYW1lLFxyXG4gICAgICAgIGF0dHJzLFxyXG4gICAgICAgIGNoaWxkcmVuXHJcbiAgICAgIH0gPSBjaGlsZDtcclxuICAgICAgY29uc3QgY29uZCA9IHRoaXMuZXZhbHVhdGVBbmRXYXRjaChuYW1lID09PSAnZC1lbHNlJyA/ICd7dHJ1ZX0nIDogYXR0cnMuaWYgfHwgJ3t0cnVlfScsIChuZXdWYWx1ZSkgPT4ge1xyXG4gICAgICAgIGlmICghIW5ld1ZhbHVlID09PSB0aGlzLnZhbHVlcy4kW2ldKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnZhbHVlcy4kW2ldID0gISFuZXdWYWx1ZTtcclxuXHJcbiAgICAgICAgaWYgKGkgPiB0aGlzLmluZGV4KSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaSA8IHRoaXMuaW5kZXgpIHtcclxuICAgICAgICAgIHRoaXMuaW5kZXggPSBpO1xyXG4gICAgICAgICAgdGhpcy5lbGVtcyA9IGNoaWxkcmVuO1xyXG5cclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGZvdW5kID0gdGhpcy52YWx1ZXMuZmluZChCb29sZWFuKTtcclxuXHJcbiAgICAgICAgaWYgKGZvdW5kKSB7XHJcbiAgICAgICAgICB0aGlzLmluZGV4ID0gZm91bmQua2V5O1xyXG4gICAgICAgICAgdGhpcy5lbGVtcyA9IHRoaXMuY2hpbGRyZW4uJFtmb3VuZC5rZXldLmNoaWxkcmVuO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLmluZGV4ID0gSW5maW5pdHk7XHJcbiAgICAgICAgICB0aGlzLmVsZW1zID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaWYgKGNvbmQgJiYgdGhpcy5pbmRleCA9PT0gSW5maW5pdHkpIHtcclxuICAgICAgICB0aGlzLmluZGV4ID0gaTtcclxuICAgICAgICB0aGlzLmVsZW1zID0gY2hpbGRyZW47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBjb25kO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgbmFtZTogJ2QtaWYnLFxyXG4gICAgdmFsdWU6IERJZlxyXG4gIH07XHJcbn1cclxuIiwiZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyREl0ZW0oQmxvY2spIHtcclxuICBjbGFzcyBESXRlbSBleHRlbmRzIEJsb2NrIHtcclxuICAgIHN0YXRpYyB0ZW1wbGF0ZSA9ICc8ZC1lbGVtZW50cyB2YWx1ZT1cIntjaGlsZHJlbn1cIi8+JztcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBuYW1lOiAnI2QtaXRlbScsXHJcbiAgICB2YWx1ZTogREl0ZW1cclxuICB9O1xyXG59XHJcbiIsImltcG9ydCB7IEFyciB9IGZyb20gJy4uL0Fycic7XHJcbmltcG9ydCB7IFN1cGVyIH0gZnJvbSAnLi4vU3VwZXInO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyRFN3aXRjaChCbG9jaykge1xyXG4gIGNsYXNzIERTd2l0Y2ggZXh0ZW5kcyBCbG9jayB7XHJcbiAgICBzdGF0aWMgdGVtcGxhdGUgPSAnPGQtZWxlbWVudHMgdmFsdWU9XCJ7ZWxlbXN9XCIvPic7XHJcblxyXG4gICAgaW5kZXggPSBJbmZpbml0eTtcclxuICAgIGVsZW1zID0gbnVsbDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XHJcbiAgICAgIHN1cGVyKG9wdHMpO1xyXG5cclxuICAgICAgY29uc3Qge1xyXG4gICAgICAgIGFyZ3MsXHJcbiAgICAgICAgYXJnczogeyB2YWx1ZSB9XHJcbiAgICAgIH0gPSB0aGlzO1xyXG4gICAgICBsZXQgd2FzRGVmYXVsdDtcclxuXHJcbiAgICAgIHRoaXMudmFsdWVzID0gdGhpcy5jaGlsZHJlbi5vYmplY3QoKHZhbHVlcywgY2hpbGQsIGkpID0+IHtcclxuICAgICAgICBjb25zdCB7XHJcbiAgICAgICAgICBuYW1lLFxyXG4gICAgICAgICAgYXR0cnMsXHJcbiAgICAgICAgICBjaGlsZHJlblxyXG4gICAgICAgIH0gPSBjaGlsZDtcclxuXHJcbiAgICAgICAgaWYgKHdhc0RlZmF1bHQpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChuYW1lICE9PSAnZC1jYXNlJyAmJiBuYW1lICE9PSAnZC1kZWZhdWx0Jykge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG5hbWUgPT09ICdkLWRlZmF1bHQnKSB7XHJcbiAgICAgICAgICB3YXNEZWZhdWx0ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCB2YWw7XHJcblxyXG4gICAgICAgIGlmIChuYW1lID09PSAnZC1kZWZhdWx0Jykge1xyXG4gICAgICAgICAgdmFsID0gYXJncy52YWx1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdmFsID0gdGhpcy5ldmFsdWF0ZUFuZFdhdGNoKGF0dHJzLmlmIHx8ICd7dW5kZWZpbmVkfScsIChuZXdWYWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5lcXVhbHModGhpcy52YWx1ZXMuJFtpXS52YWx1ZSwgbmV3VmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnZhbHVlcy4kW2ldLnZhbHVlID0gbmV3VmFsdWU7XHJcblxyXG4gICAgICAgICAgICBpZiAoaSA+IHRoaXMuaW5kZXgpIHtcclxuICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChpIDwgdGhpcy5pbmRleCkge1xyXG4gICAgICAgICAgICAgIHRoaXMuaW5kZXggPSBpO1xyXG4gICAgICAgICAgICAgIHRoaXMuZWxlbXMgPSBjaGlsZHJlbjtcclxuXHJcbiAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBmb3VuZCA9IHRoaXMudmFsdWVzLmZpbmQoKHsgdmFsdWUgfSkgPT4gKFxyXG4gICAgICAgICAgICAgIHRoaXMuZXF1YWxzKHZhbHVlLCBhcmdzLnZhbHVlKVxyXG4gICAgICAgICAgICApKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChmb3VuZCkge1xyXG4gICAgICAgICAgICAgIHRoaXMuaW5kZXggPSBmb3VuZC5rZXk7XHJcbiAgICAgICAgICAgICAgdGhpcy5lbGVtcyA9IGZvdW5kLnZhbHVlLmNoaWxkcmVuO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHRoaXMuaW5kZXggPSBJbmZpbml0eTtcclxuICAgICAgICAgICAgICB0aGlzLmVsZW1zID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5lcXVhbHModmFsLCB2YWx1ZSkgJiYgdGhpcy5pbmRleCA9PT0gSW5maW5pdHkpIHtcclxuICAgICAgICAgIHRoaXMuaW5kZXggPSBpO1xyXG4gICAgICAgICAgdGhpcy5lbGVtcyA9IGNoaWxkcmVuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFsdWVzLnB1c2goe1xyXG4gICAgICAgICAgbmFtZSxcclxuICAgICAgICAgIGNoaWxkcmVuLFxyXG4gICAgICAgICAgdmFsdWU6IHZhbFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9LCBuZXcgQXJyKFtdKSk7XHJcbiAgICB9XHJcblxyXG4gICAgYWZ0ZXJDb25zdHJ1Y3QoKSB7XHJcbiAgICAgIHRoaXMud2F0Y2hBcmdzKCd2YWx1ZScsIChuZXdWYWx1ZSkgPT4ge1xyXG4gICAgICAgIHRoaXMuaW5kZXggPSBJbmZpbml0eTtcclxuICAgICAgICB0aGlzLnZhbHVlcy5mb3JFYWNoKCh7IG5hbWUsIHZhbHVlLCBjaGlsZHJlbiB9LCBpKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCB2YWwgPSBuYW1lID09PSAnZC1kZWZhdWx0J1xyXG4gICAgICAgICAgICA/IG5ld1ZhbHVlXHJcbiAgICAgICAgICAgIDogdmFsdWU7XHJcblxyXG4gICAgICAgICAgaWYgKHRoaXMuZXF1YWxzKHZhbCwgbmV3VmFsdWUpICYmIHRoaXMuaW5kZXggPT09IEluZmluaXR5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5kZXggPSBpO1xyXG4gICAgICAgICAgICB0aGlzLmVsZW1zID0gY2hpbGRyZW47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGVxdWFscyh2YWx1ZTEsIHZhbHVlMikge1xyXG4gICAgICByZXR1cm4gbmV3IFN1cGVyKHZhbHVlMSkuZXF1YWxzKHZhbHVlMik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgbmFtZTogJ2Qtc3dpdGNoJyxcclxuICAgIHZhbHVlOiBEU3dpdGNoXHJcbiAgfTtcclxufVxyXG4iLCJpbXBvcnQgeyBpc05pbCB9IGZyb20gJy4uL2hlbHBlcnMnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyRFRleHQoQmxvY2spIHtcclxuICBjbGFzcyBEVGV4dCBleHRlbmRzIEJsb2NrIHtcclxuICAgIHN0YXRpYyB0ZW1wbGF0ZSA9ICc8ZC1lbGVtZW50cyB2YWx1ZT1cIntbeyBuYW1lOiBcXCcjdGV4dFxcJywgdmFsdWU6IHRleHQgfV19XCIvPic7XHJcblxyXG4gICAgdGV4dCA9ICcnO1xyXG5cclxuICAgIGFmdGVyQ29uc3RydWN0KCkge1xyXG4gICAgICB0aGlzLnRleHQgPSBpc05pbCh0aGlzLmFyZ3MudmFsdWUpID8gJycgOiB0aGlzLmFyZ3MudmFsdWU7XHJcblxyXG4gICAgICB0aGlzLndhdGNoQXJncygndmFsdWUnLCAobmV3VmFsdWUpID0+IHtcclxuICAgICAgICB0aGlzLnRleHQgPSBpc05pbChuZXdWYWx1ZSkgPyAnJyA6IG5ld1ZhbHVlO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBuYW1lOiAnZC10ZXh0JyxcclxuICAgIHZhbHVlOiBEVGV4dFxyXG4gIH07XHJcbn1cclxuIiwiaW1wb3J0IHsgU3VwZXIgfSBmcm9tICcuLi9TdXBlcic7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJEQXR0cihNaXhpbikge1xyXG4gIGNsYXNzIERBdHRyIGV4dGVuZHMgTWl4aW4ge1xyXG4gICAgYWZ0ZXJVcGRhdGUobmV3VmFsdWUsIG9sZFZhbHVlKSB7XHJcbiAgICAgIGNvbnN0IHsgZWxlbSB9ID0gdGhpcztcclxuXHJcbiAgICAgIG5ld1ZhbHVlID0gbmV3IFN1cGVyKG5ld1ZhbHVlKS4kO1xyXG5cclxuICAgICAgbmV3IFN1cGVyKG9sZFZhbHVlKS5mb3JFYWNoKCh2YWx1ZSwgcHJvcCkgPT4ge1xyXG4gICAgICAgIGlmICghbmV3VmFsdWVbcHJvcF0pIHtcclxuICAgICAgICAgIGVsZW0ucmVtb3ZlQXR0cihwcm9wKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBlbGVtLmF0dHIobmV3VmFsdWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIG5hbWU6ICdkLWF0dHInLFxyXG4gICAgdmFsdWU6IERBdHRyXHJcbiAgfTtcclxufVxyXG5cclxuIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL2hlbHBlcnMnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyREJpbmQoTWl4aW4pIHtcclxuICBjbGFzcyBEQmluZCBleHRlbmRzIE1peGluIHtcclxuICAgIGFmdGVyVXBkYXRlKHZhbHVlKSB7XHJcbiAgICAgIGlmICh0aGlzLm9mZikge1xyXG4gICAgICAgIHRoaXMub2ZmKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghaXNGdW5jdGlvbih2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMub2ZmID0gdGhpcy5lbGVtLm9uKHRoaXMubWF0Y2hbMF0sIHZhbHVlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBuYW1lOiAnZC1iaW5kJyxcclxuICAgIHZhbHVlOiBEQmluZFxyXG4gIH07XHJcbn1cclxuIiwiaW1wb3J0IHsgU3VwZXIgfSBmcm9tICcuLi9TdXBlcic7XG5pbXBvcnQgeyBpc0FycmF5LCBpc09iamVjdCwgaXNTdHJpbmcsIGl0ZXJhdGUgfSBmcm9tICcuLi9oZWxwZXJzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyRENsYXNzKE1peGluKSB7XG4gIGNsYXNzIERDbGFzcyBleHRlbmRzIE1peGluIHtcbiAgICBhZnRlclVwZGF0ZShuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgIGNvbnN0IHsgZWxlbSB9ID0gdGhpcztcblxuICAgICAgbmV3VmFsdWUgPSBuZXcgU3VwZXIobmV3VmFsdWUpLiQ7XG4gICAgICBvbGRWYWx1ZSA9IG5ldyBTdXBlcihvbGRWYWx1ZSkuJDtcblxuICAgICAgaWYgKGlzU3RyaW5nKG5ld1ZhbHVlKSkge1xuICAgICAgICBuZXdWYWx1ZSA9IG5ld1ZhbHVlLnNwbGl0KC9cXHMrLyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1N0cmluZyhvbGRWYWx1ZSkpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBuZXdWYWx1ZS5zcGxpdCgvXFxzKy8pO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNBcnJheShuZXdWYWx1ZSkpIHtcbiAgICAgICAgaXRlcmF0ZShvbGRWYWx1ZSwgKGNscykgPT4ge1xuICAgICAgICAgIGlmIChpc1N0cmluZyhjbHMpICYmICFuZXdWYWx1ZVtjbHNdKSB7XG4gICAgICAgICAgICBlbGVtLnJlbW92ZUNsYXNzKGNscyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaXRlcmF0ZShuZXdWYWx1ZSwgKGNscykgPT4ge1xuICAgICAgICAgIGlmIChpc1N0cmluZyhjbHMpKSB7XG4gICAgICAgICAgICBlbGVtLmFkZENsYXNzKGNscyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QobmV3VmFsdWUpKSB7XG4gICAgICAgIGl0ZXJhdGUob2xkVmFsdWUsICh2YWwsIGNscykgPT4ge1xuICAgICAgICAgIGlmICh2YWwgJiYgIW5ld1ZhbHVlW2Nsc10pIHtcbiAgICAgICAgICAgIGVsZW0ucmVtb3ZlQ2xhc3MoY2xzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpdGVyYXRlKG5ld1ZhbHVlLCAodmFsLCBjbHMpID0+IHtcbiAgICAgICAgICBpZiAodmFsKSB7XG4gICAgICAgICAgICBlbGVtLmFkZENsYXNzKGNscyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShvbGRWYWx1ZSkpIHtcbiAgICAgICAgaXRlcmF0ZShvbGRWYWx1ZSwgKGNscykgPT4ge1xuICAgICAgICAgIGlmIChpc1N0cmluZyhjbHMpKSB7XG4gICAgICAgICAgICBlbGVtLnJlbW92ZUNsYXNzKGNscyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3Qob2xkVmFsdWUpKSB7XG4gICAgICAgIGl0ZXJhdGUob2xkVmFsdWUsICh2YWwsIGNscykgPT4ge1xuICAgICAgICAgIGlmICh2YWwpIHtcbiAgICAgICAgICAgIGVsZW0ucmVtb3ZlQ2xhc3MoY2xzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogJ2QtY2xhc3MnLFxuICAgIHZhbHVlOiBEQ2xhc3NcbiAgfTtcbn1cbiIsImltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSAnLi4vaGVscGVycyc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJERWxlbShNaXhpbikge1xyXG4gIGNsYXNzIERFbGVtIGV4dGVuZHMgTWl4aW4ge1xyXG4gICAgYWZ0ZXJVcGRhdGUobmV3VmFsdWUsIG9sZFZhbHVlKSB7XHJcbiAgICAgIGNvbnN0IHsgcGFyZW50IH0gPSB0aGlzLiQkO1xyXG5cclxuICAgICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSAmJiBpc1N0cmluZyhvbGRWYWx1ZSkpIHtcclxuICAgICAgICBkZWxldGUgcGFyZW50W29sZFZhbHVlXTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGlzU3RyaW5nKG5ld1ZhbHVlKSkge1xyXG4gICAgICAgIHBhcmVudFtuZXdWYWx1ZV0gPSB0aGlzLmVsZW07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBuYW1lOiAnZC1lbGVtJyxcclxuICAgIHZhbHVlOiBERWxlbVxyXG4gIH07XHJcbn1cclxuIiwiZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyREhpZGUoTWl4aW4pIHtcclxuICBjbGFzcyBESGlkZSBleHRlbmRzIE1peGluIHtcclxuICAgIGFmdGVyVXBkYXRlKHZhbHVlKSB7XHJcbiAgICAgIGNvbnN0IHsgZWxlbSB9ID0gdGhpcztcclxuXHJcbiAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgIGVsZW0uaGlkZSgpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGVsZW0uc2hvdygpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgbmFtZTogJ2QtaGlkZScsXHJcbiAgICB2YWx1ZTogREhpZGVcclxuICB9O1xyXG59XHJcbiIsImV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckRPbihNaXhpbikge1xyXG4gIGNsYXNzIERPbiBleHRlbmRzIE1peGluIHtcclxuICAgIHN0YXRpYyBldmFsdWF0ZSA9IGZhbHNlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcclxuICAgICAgc3VwZXIob3B0cyk7XHJcblxyXG4gICAgICB0aGlzLmVsZW0ub24odGhpcy5tYXRjaFswXSwgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuZXZhbHVhdGVPbmNlKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIG5hbWU6ICdkLW9uJyxcclxuICAgIHZhbHVlOiBET25cclxuICB9O1xyXG59XHJcbiIsImV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckRTaG93KE1peGluKSB7XHJcbiAgY2xhc3MgRFNob3cgZXh0ZW5kcyBNaXhpbiB7XHJcbiAgICBhZnRlclVwZGF0ZSh2YWx1ZSkge1xyXG4gICAgICBjb25zdCB7IGVsZW0gfSA9IHRoaXM7XHJcblxyXG4gICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICBlbGVtLnNob3coKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBlbGVtLmhpZGUoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIG5hbWU6ICdkLXNob3cnLFxyXG4gICAgdmFsdWU6IERTaG93XHJcbiAgfTtcclxufVxyXG4iLCJpbXBvcnQgeyBTdXBlciB9IGZyb20gJy4uL1N1cGVyJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckRTdHlsZShNaXhpbikge1xyXG4gIGNsYXNzIERTdHlsZSBleHRlbmRzIE1peGluIHtcclxuICAgIGFmdGVyVXBkYXRlKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xyXG4gICAgICBjb25zdCB7IGVsZW0gfSA9IHRoaXM7XHJcblxyXG4gICAgICBuZXdWYWx1ZSA9IG5ldyBTdXBlcihuZXdWYWx1ZSkuJDtcclxuXHJcbiAgICAgIG5ldyBTdXBlcihvbGRWYWx1ZSkuZm9yRWFjaCgodmFsdWUsIHByb3ApID0+IHtcclxuICAgICAgICBpZiAoIW5ld1ZhbHVlW3Byb3BdKSB7XHJcbiAgICAgICAgICBlbGVtLnJlbW92ZUNTUyhwcm9wKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBlbGVtLmNzcyhuZXdWYWx1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgbmFtZTogJ2Qtc3R5bGUnLFxyXG4gICAgdmFsdWU6IERTdHlsZVxyXG4gIH07XHJcbn1cclxuIiwiaW1wb3J0IHsgaXNOaWwgfSBmcm9tICcuLi9oZWxwZXJzJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckRUZXh0KE1peGluKSB7XHJcbiAgY2xhc3MgRFRleHQgZXh0ZW5kcyBNaXhpbiB7XHJcbiAgICBhZnRlclVwZGF0ZSh2YWx1ZSkge1xyXG4gICAgICB0aGlzLmVsZW0udGV4dChcclxuICAgICAgICBpc05pbCh2YWx1ZSlcclxuICAgICAgICAgID8gJydcclxuICAgICAgICAgIDogYCR7IHZhbHVlIH1gXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgbmFtZTogJ2QtdGV4dCcsXHJcbiAgICB2YWx1ZTogRFRleHRcclxuICB9O1xyXG59XHJcbiIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi9oZWxwZXJzJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckRWYWxpZGF0ZShNaXhpbikge1xyXG4gIGNsYXNzIERWYWxpZGF0ZSBleHRlbmRzIE1peGluIHtcclxuICAgIHN0YXRpYyBldmFsdWF0ZSA9IGZhbHNlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcclxuICAgICAgc3VwZXIob3B0cyk7XHJcblxyXG4gICAgICBjb25zdCB7IGVsZW0gfSA9IHRoaXM7XHJcbiAgICAgIGNvbnN0IHZhbGlkYXRvciA9IHRoaXMuZXZhbHVhdGVPbmNlKCk7XHJcblxyXG4gICAgICBpZiAoaXNGdW5jdGlvbih2YWxpZGF0b3IpKSB7XHJcbiAgICAgICAgZWxlbS52YWxpZGF0ZSh2YWxpZGF0b3IpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgbmFtZTogJ2QtdmFsaWRhdGUnLFxyXG4gICAgdmFsdWU6IERWYWxpZGF0ZVxyXG4gIH07XHJcbn1cclxuIiwiaW1wb3J0IHsgQXJyIH0gZnJvbSAnLi4vQXJyJztcbmltcG9ydCB7IHN3aXRjaGVyIH0gZnJvbSAnLi4vU3dpdGNoZXInO1xuaW1wb3J0IHsgaXNBcnJheSwgaXNOaWwgfSBmcm9tICcuLi9oZWxwZXJzJztcblxuY29uc3QgcHJvcFN3aXRjaGVyID0gc3dpdGNoZXIoJ3N0cmljdEVxdWFscycsICh0eXBlLCBlbGVtKSA9PiAoXG4gIGVsZW0uaGFzQXR0cignY29udGVudGVkaXRhYmxlJykgfHwgZWxlbS5oYXNBdHRyKCdjb250ZW50RWRpdGFibGUnKVxuICAgID8gJ3RleHQnXG4gICAgOiAndmFsdWUnXG4pKVxuICAuY2FzZSgnaW5wdXQnLCAodHlwZSkgPT4ge1xuICAgIGlmICh0eXBlID09PSAnZmlsZScpIHtcbiAgICAgIHJldHVybiAnZmlsZXMnO1xuICAgIH1cblxuICAgIHJldHVybiB0eXBlID09PSAncmFkaW8nIHx8IHR5cGUgPT09ICdjaGVja2JveCdcbiAgICAgID8gJ2NoZWNrZWQnXG4gICAgICA6ICd2YWx1ZSc7XG4gIH0pO1xuY29uc3Qgc2V0VmFsdWVTd2l0Y2hlciA9IHN3aXRjaGVyKCdzdHJpY3RFcXVhbHMnLCAodmFsdWUpID0+IHZhbHVlKVxuICAuY2FzZSgnaW5wdXQnLCAodmFsdWUsIHR5cGUsIGlucHV0VmFsdWUpID0+IHtcbiAgICBpZiAodHlwZSAhPT0gJ3JhZGlvJyAmJiB0eXBlICE9PSAnY2hlY2tib3gnKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKHR5cGUgPT09ICdyYWRpbycpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gaW5wdXRWYWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWUuaW5kZXhPZihpbnB1dFZhbHVlKSAhPT0gLTE7XG4gIH0pO1xuY29uc3QgZ2V0VmFsdWVTd2l0Y2hlciA9IHN3aXRjaGVyKCdzdHJpY3RFcXVhbHMnLCAodmFsdWUpID0+IHZhbHVlKVxuICAuY2FzZSgnaW5wdXQnLCAodmFsdWUsIHR5cGUsIGlucHV0VmFsdWUsIHZhbHVlcykgPT4ge1xuICAgIGlmICh0eXBlICE9PSAncmFkaW8nICYmIHR5cGUgIT09ICdjaGVja2JveCcpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBpZiAodHlwZSA9PT0gJ3JhZGlvJykge1xuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgICAgID8gaW5wdXRWYWx1ZVxuICAgICAgICA6IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWVzKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZXMuaW5kZXhPZihpbnB1dFZhbHVlKSA9PT0gLTFcbiAgICAgICAgICA/IG5ldyBBcnIodmFsdWVzKS5jb25jYXQoaW5wdXRWYWx1ZSkuJFxuICAgICAgICAgIDogdmFsdWVzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gW2lucHV0VmFsdWVdO1xuICAgIH1cblxuICAgIGlmICghaXNBcnJheSh2YWx1ZXMpKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgY29uc3QgaW5kZXggPSB2YWx1ZXMuaW5kZXhPZihpbnB1dFZhbHVlKTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIC4uLm5ldyBBcnIodmFsdWVzKS5zbGljZSgwLCBpbmRleCkuJCxcbiAgICAgICAgLi4ubmV3IEFycih2YWx1ZXMpLnNsaWNlKGluZGV4ICsgMSkuJFxuICAgICAgXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVzO1xuICB9KTtcbmNvbnN0IGxpc3RlbmVyU3dpdGNoZXIgPSBzd2l0Y2hlcignc3RyaWN0RXF1YWxzJywgJ2lucHV0JylcbiAgLmNhc2UoJ3NlbGVjdCcsICdjaGFuZ2UnKVxuICAuY2FzZSgnaW5wdXQnLCAodHlwZSkgPT4gKFxuICAgIHR5cGUgPT09ICdyYWRpbydcbiAgICB8fCB0eXBlID09PSAnY2hlY2tib3gnXG4gICAgfHwgdHlwZSA9PT0gJ2NvbG9yJ1xuICAgIHx8IHR5cGUgPT09ICdmaWxlJ1xuICAgICAgPyAnY2hhbmdlJ1xuICAgICAgOiAnaW5wdXQnXG4gICkpO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJEVmFsdWUoTWl4aW4pIHtcbiAgY2xhc3MgRFZhbHVlIGV4dGVuZHMgTWl4aW4ge1xuICAgIHN0YXRpYyBldmFsdWF0ZSA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgc3VwZXIob3B0cyk7XG5cbiAgICAgIGNvbnN0IHtcbiAgICAgICAgJCQ6IHtcbiAgICAgICAgICBfdmFsdWUsXG4gICAgICAgICAgcGFyZW50XG4gICAgICAgIH0sXG4gICAgICAgIGVsZW1cbiAgICAgIH0gPSB0aGlzO1xuICAgICAgY29uc3QgdHlwZSA9IGVsZW0ucHJvcCgndHlwZScpO1xuXG4gICAgICB0aGlzLnByb3AgPSBwcm9wU3dpdGNoZXIoZWxlbS5uYW1lLCBbdHlwZSwgZWxlbV0pO1xuICAgICAgdGhpcy50eXBlID0gdHlwZTtcblxuICAgICAgY29uc3QgaW5pdGlhbFNjb3BlVmFsdWUgPSBwYXJlbnQuJCQuZXZhbHVhdGUoYHskeyBfdmFsdWUgfX1gLCAobmV3VmFsdWUpID0+IHtcbiAgICAgICAgdGhpcy5zZXRQcm9wKG5ld1ZhbHVlKTtcbiAgICAgIH0sIHRoaXMpO1xuICAgICAgY29uc3QgaW5pdGlhbEVsZW1WYWx1ZSA9IHRoaXMuZ2V0UHJvcChpbml0aWFsU2NvcGVWYWx1ZSk7XG5cbiAgICAgIGlmIChpc05pbChpbml0aWFsU2NvcGVWYWx1ZSkgfHwgdHlwZSA9PT0gJ2NoZWNrYm94Jykge1xuICAgICAgICBwYXJlbnRbX3ZhbHVlXSA9IGluaXRpYWxFbGVtVmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNldFByb3AoaW5pdGlhbFNjb3BlVmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBlbGVtLm9uKGxpc3RlbmVyU3dpdGNoZXIoZWxlbS5uYW1lLCBbdHlwZV0pLCAoZSkgPT4ge1xuICAgICAgICBpZiAoZS50YXJnZXQgPT09IGVsZW0uJFswXSkge1xuICAgICAgICAgIHBhcmVudFtfdmFsdWVdID0gdGhpcy5nZXRQcm9wKHBhcmVudFtfdmFsdWVdKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2V0UHJvcCh2YWx1ZSkge1xuICAgICAgY29uc3Qge1xuICAgICAgICBlbGVtLFxuICAgICAgICBwcm9wLFxuICAgICAgICB0eXBlXG4gICAgICB9ID0gdGhpcztcblxuICAgICAgaWYgKHByb3AgPT09ICd0ZXh0Jykge1xuICAgICAgICBlbGVtLnRleHQodmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbS5wcm9wKHByb3AsIHNldFZhbHVlU3dpdGNoZXIoZWxlbS5uYW1lLCBbdmFsdWUsIHR5cGUsIGVsZW0uJFswXS52YWx1ZV0pKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRQcm9wKHZhbHVlcykge1xuICAgICAgY29uc3Qge1xuICAgICAgICBlbGVtLFxuICAgICAgICBwcm9wLFxuICAgICAgICB0eXBlXG4gICAgICB9ID0gdGhpcztcblxuICAgICAgcmV0dXJuIHByb3AgPT09ICd0ZXh0J1xuICAgICAgICA/IGVsZW0udGV4dCgpXG4gICAgICAgIDogZ2V0VmFsdWVTd2l0Y2hlcihlbGVtLm5hbWUsIFtlbGVtLnByb3AocHJvcCksIHR5cGUsIGVsZW0uJFswXS52YWx1ZSwgdmFsdWVzXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnZC12YWx1ZScsXG4gICAgdmFsdWU6IERWYWx1ZVxuICB9O1xufVxuIiwiLyoqXHJcbiAqIEBtb2R1bGUgQmxvY2tcclxuICogQHByaXZhdGVcclxuICogQG1peGluXHJcbiAqIEBkZXNjcmlwdGlvbiBFeHBvcnRzIEJsb2NrIGNsYXNzLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEFyciB9IGZyb20gJy4vQXJyJztcclxuaW1wb3J0IHsgZmluZCwgZG9jLCBFbGVtIH0gZnJvbSAnLi9FbGVtJztcclxuaW1wb3J0IHsgU3VwZXIgfSBmcm9tICcuL1N1cGVyJztcclxuaW1wb3J0IHtcclxuICBpdGVyYXRlLCBkZWZpbmVQcm9wZXJ0aWVzLCB2YWxpZGF0ZSxcclxuICBpc0Z1bmN0aW9uLCBpc05pbCwgaXNVbmRlZmluZWRcclxufSBmcm9tICcuL2hlbHBlcnMnO1xyXG5pbXBvcnQgKiBhcyBCbG9ja3MgZnJvbSAnLi9ibG9ja3MnO1xyXG5pbXBvcnQgKiBhcyBNaXhpbnMgZnJvbSAnLi9taXhpbnMnO1xyXG5pbXBvcnQgeyBodG1sQWxsb3dlZFRhZ1N5bWJvbHMsIGh0bWxBbGxvd2VkQXR0clN5bWJvbHMgfSBmcm9tICcuL2NvbnN0YW50cyc7XHJcbmltcG9ydCBtYXJrdXBUb0pTT04gZnJvbSAnLi9oZWxwZXJzL21hcmt1cFRvSlNPTic7XHJcblxyXG4vKipcclxuICogQGNhbGxiYWNrIFdhdGNoZXJcclxuICogQHBhcmFtIHsqfSBuZXdWYWx1ZSAtIE5ldyB2YWx1ZS5cclxuICogQHBhcmFtIHsqfSBvbGRWYWx1ZSAtIE9sZCB2YWx1ZS5cclxuICovXHJcblxyXG4vKipcclxuICogQGNhbGxiYWNrIFdyYXBwZXJcclxuICogQHBhcmFtIHtCbG9ja30gQmxvY2sgY2xhc3MgdG8gd3JhcC5cclxuICogQHJldHVybnMge0Jsb2NrfSBOZXcgQmxvY2sgY2xhc3MuXHJcbiAqL1xyXG5cclxuY29uc3QgYmxvY2tzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuY29uc3QgbWl4aW5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuY29uc3QgaXNQcm90b3R5cGVPZiA9IHt9LmlzUHJvdG90eXBlT2Y7XHJcbmNvbnN0IHRhZ05hbWUgPSBuZXcgUmVnRXhwKGBeJHsgaHRtbEFsbG93ZWRUYWdTeW1ib2xzIH0kYCwgJ2knKTtcclxuY29uc3QgYXR0ck5hbWUgPSBuZXcgUmVnRXhwKGBeJHsgaHRtbEFsbG93ZWRBdHRyU3ltYm9scyB9JGApO1xyXG5jb25zdCBleHByZXNzaW9uUmVnRXhwID0gL15cXHtbXFxzXFxTXStcXH0kLztcclxuY29uc3QgeyBkb2N1bWVudCB9ID0gZ2xvYmFsO1xyXG5jb25zdCBzdmdOUyA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc7XHJcbmxldCBvbkV2YWxFcnJvcjtcclxubGV0IGV2YWxNb2RlO1xyXG5sZXQgZ2V0dGluZztcclxubGV0IGNoYW5nZWQ7XHJcblxyXG4vKipcclxuICogQGNsYXNzIEJsb2NrXHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBFbGVtZW50IG9wdGlvbnMuXHJcbiAqIEByZXR1cm5zIHtCbG9ja30gSW5zdGFuY2Ugb2YgQmxvY2suXHJcbiAqIEBkZXNjcmlwdGlvbiBDbGFzcyBmb3IgZHluYW1pYyB0ZW1wbGF0aW5nLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBpbXBvcnQgeyBELCBCbG9jaywgaW5pdEFwcCwgcmVnaXN0ZXJCbG9jayB9IGZyb20gJ2R3YXluZSc7XHJcbiAqXHJcbiAqIGNsYXNzIEFwcCBleHRlbmRzIEJsb2NrIHtcclxuICogICBzdGF0aWMgdGVtcGxhdGUgPSAnPEhlbGxvIHRleHQ9XCJ7dGV4dH1cIi8+JztcclxuICpcclxuICogICBjb25zdHJ1Y3RvcihhcmdzLCBjaGlsZHJlbikge1xyXG4gKiAgICAgc3VwZXIoYXJncywgY2hpbGRyZW4pO1xyXG4gKlxyXG4gKiAgICAgdGhpcy50ZXh0ID0gJ3dvcmxkICgwKSc7XHJcbiAqICAgICB0aGlzLnRpbWVzID0gMDtcclxuICpcclxuICogICAgIHRoaXMuc2V0SW50ZXJ2YWwoKTtcclxuICogICB9XHJcbiAqXHJcbiAqICAgc2V0SW50ZXJ2YWwoKSB7XHJcbiAqICAgICBEKDEwMDApLmludGVydmFsKCgpID0+IHtcclxuICogICAgICAgdGhpcy50ZXh0ID0gYHdvcmxkICgkeyArK3RoaXMudGltZXMgfSlgO1xyXG4gKiAgICAgfSk7XHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqXHJcbiAqIGNsYXNzIEhlbGxvIGV4dGVuZHMgQmxvY2sge1xyXG4gKiAgIHN0YXRpYyB0ZW1wbGF0ZSA9ICdIZWxsbywgPGQtdGV4dCB2YWx1ZT1cInthcmdzLnRleHR9XCIvPiEnO1xyXG4gKiB9XHJcbiAqXHJcbiAqIEJsb2NrLkFwcCA9IEFwcDtcclxuICogQmxvY2suSGVsbG8gPSBIZWxsbztcclxuICpcclxuICogaW5pdEFwcCgpO1xyXG4gKi9cclxuY2xhc3MgQmxvY2sge1xyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Jvb2xlYW59IFtCbG9jay5jb2xsYXBzZVdoaXRlU3BhY2UgPSB0cnVlXVxyXG4gICAqIEB0eXBlIHtCb29sZWFufVxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAZGVzY3JpcHRpb24gSWYgdGhlIHdoaXRlc3BhY2UgYmV0d2VlbiBodG1sIGVsZW1lbnRzIGFuZFxyXG4gICAqIGluIHRoZSBzdGFydCBhbmQgdGhlIGVuZCBpbnNpZGUgdGhlIHRhZyBzaG91bGQgYmUgb21pdHRlZCBkdXJpbmcgcGFyc2luZy5cclxuICAgKi9cclxuICBzdGF0aWMgY29sbGFwc2VXaGl0ZVNwYWNlID0gdHJ1ZTtcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7T2JqZWN0fSBbQmxvY2suZGVmYXVsdEFyZ3MgPSB0cnVlXVxyXG4gICAqIEB0eXBlIHtPYmplY3R9XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBkZXNjcmlwdGlvbiBQcm92aWRlIGRlZmF1bHQgYXJncyBpZiB0aGF0IGFyZ3MgbWF5IG5vdCBhcHBlYXIgaW4gdGhlIGFyZ3NcclxuICAgKiAodXNpbmcgXCJkLXJlc3RcIikgYnV0IHlvdSB1c2UgdGhlbSBpbiB5b3VyIHRlbXBsYXRlIGFuZCB3YW50IHRoZW0gdG8gYmUgd2F0Y2hlZC5cclxuICAgKi9cclxuICBzdGF0aWMgZGVmYXVsdEFyZ3MgPSB7fTtcclxuXHJcbiAgc3RhdGljIGdldCBvbkV2YWxFcnJvcigpIHtcclxuICAgIHJldHVybiBvbkV2YWxFcnJvcjtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBzZXQgb25FdmFsRXJyb3IobGlzdGVuZXIpIHtcclxuICAgIGlmIChpc0Z1bmN0aW9uKGxpc3RlbmVyKSkge1xyXG4gICAgICBvbkV2YWxFcnJvciA9IGxpc3RlbmVyO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgb25FdmFsRXJyb3IgPSBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBCbG9jay53cmFwXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7V3JhcHBlcn0gZnVuYyAtIEZ1bmN0aW9uIHRoYXQgcmV0dXJucyB3cmFwcGVkIGJsb2NrLlxyXG4gICAqIEByZXR1cm5zIHtCbG9ja30gTmV3IGJsb2NrLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBNZXRob2QgZm9yIHdyYXBwaW5nIGJsb2NrcyBpbnRvIGFub3RoZXIgYmxvY2tzLlxyXG4gICAqIEl0IGlzIGNvbnNpZGVyZWQgYmVzdCBwcmFjdGljZSB0byBqdXN0IGV4dGVuZHMgdGhlIG9sZCBibG9jayB3aXRoIGEgbmV3IG9uZS5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogY2xhc3MgTXlCbG9jayBleHRlbmRzIEJsb2NrIHtcclxuICAgKiAgIHN0YXRpYyB0ZW1wbGF0ZSA9ICc8ZGl2PjEyMzwvZGl2Pic7XHJcbiAgICogfVxyXG4gICAqXHJcbiAgICogTXlCbG9jay53cmFwKChCbG9jaykgPT4ge1xyXG4gICAqICAgcmV0dXJuIGNsYXNzIGV4dGVuZHMgQmxvY2sge1xyXG4gICAqICAgICBzdGF0aWMgdGVtcGxhdGUgPSBgPHNlY3Rpb24gY2xhc3M9XCJ3cmFwcGVyXCI+JHsgQmxvY2sudGVtcGxhdGUgfTwvc2VjdGlvbj5gO1xyXG4gICAqXHJcbiAgICogICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAqICAgICAgIHRoaXMuYWRkaXRpb25hbFZhciA9ICdhZGRpdGlvbmFsJztcclxuICAgKiAgICAgfVxyXG4gICAqICAgfTtcclxuICAgKiB9KTtcclxuICAgKi9cclxuICBzdGF0aWMgd3JhcChmdW5jKSB7XHJcbiAgICB2YWxpZGF0ZShbZnVuY10sIFsnZnVuY3Rpb24nXSk7XHJcblxyXG4gICAgcmV0dXJuIGZ1bmModGhpcyk7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihvcHRzKSB7XHJcbiAgICBjb25zdCB7XHJcbiAgICAgIG5hbWUsXHJcbiAgICAgIGFyZ3M6IG9yaWdpbmFsQXJncyxcclxuICAgICAgY2hpbGRyZW4sXHJcbiAgICAgIGJsb2NrLFxyXG4gICAgICBwYXJlbnQsXHJcbiAgICAgIHBhcmVudEJsb2NrLFxyXG4gICAgICBwYXJlbnRTY29wZVxyXG4gICAgfSA9IG9wdHM7XHJcbiAgICBjb25zdCB3YXRjaGVyc1RvUmVtb3ZlID0gbmV3IEFycihbXSk7XHJcblxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xyXG4gICAgICAvKipcclxuICAgICAgICogQG1lbWJlciB7QmxvY2t9IEJsb2NrIyRcclxuICAgICAgICogQHR5cGUge0Jsb2NrfVxyXG4gICAgICAgKiBAcHVibGljXHJcbiAgICAgICAqIEBkZXNjcmlwdGlvbiBUaGlzLlxyXG4gICAgICAgKi9cclxuICAgICAgJDoge1xyXG4gICAgICAgIHZhbHVlOiB0aGlzXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogQG1lbWJlciB7T2JqZWN0fSBCbG9jayMkJFxyXG4gICAgICAgKiBAdHlwZSB7T2JqZWN0fVxyXG4gICAgICAgKiBAcHJvdGVjdGVkXHJcbiAgICAgICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBhcmdzIC0gUHJpdmF0ZSBhcmdzIHNjb3BlLlxyXG4gICAgICAgKiBAcHJvcGVydHkge0Fycn0gY2hpbGRyZW4gLSBDaGlsZCBibG9ja3MuXHJcbiAgICAgICAqIEBwcm9wZXJ0eSB7QXJyfSBtaXhpbnMgLSBDaGlsZCBtaXhpbnMuXHJcbiAgICAgICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBlbGVtcyAtIEVsZW1lbnRzIGNvbm5lY3RlZCB0byB0aGUgYmxvY2suXHJcbiAgICAgICAqIEBwcm9wZXJ0eSB7RWxlbX0gZWxlbXMucGFyZW50IC0gUGFyZW50IGVsZW1lbnQuXHJcbiAgICAgICAqIEBwcm9wZXJ0eSB7RWxlbX0gZWxlbXMuc3RhcnQgLSBTdGFydCBjb21tZW50IGJsb2NrLlxyXG4gICAgICAgKiBAcHJvcGVydHkge0VsZW19IGVsZW1zLmVuZCAtIEVuZCBjb21tZW50IGJsb2NrLlxyXG4gICAgICAgKiBAcHJvcGVydHkge0VsZW19IGVsZW1zLmNvbnRlbnQgLSBDb250ZW50IGVsZW1lbnRzLlxyXG4gICAgICAgKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBldmFsdWF0ZSAtIEV2YWx1YXRlIGZ1bmN0aW9uLlxyXG4gICAgICAgKiBAcHJvcGVydHkge09iamVjdH0gZ2xvYmFsIC0gUHJpdmF0ZSBnbG9iYWwgc2NvcGUuXHJcbiAgICAgICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBsb2NhbHMgLSBQcml2YXRlIGxvY2FscyBzY29wZS5cclxuICAgICAgICogQHByb3BlcnR5IHtBcnJ9IHdhdGNoZXJzVG9SZW1vdmUgLSBXYXRjaGVycyB0byByZW1vdmUgYmVmb3JlIHJlbW92aW5nIGVsZW1lbnQuXHJcbiAgICAgICAqL1xyXG4gICAgICAkJDoge1xyXG4gICAgICAgIHZhbHVlOiB7XHJcbiAgICAgICAgICBuYW1lLFxyXG4gICAgICAgICAgcGFyZW50OiBwYXJlbnRTY29wZSxcclxuICAgICAgICAgIHBhcmVudEJsb2NrLFxyXG4gICAgICAgICAgY2hpbGRyZW46IG5ldyBBcnIoW10pLFxyXG4gICAgICAgICAgbWl4aW5zOiBuZXcgQXJyKFtdKSxcclxuICAgICAgICAgIEJsb2NrOiBibG9jayxcclxuICAgICAgICAgIGVsZW1zOiB7XHJcbiAgICAgICAgICAgIHN0YXJ0OiBkb2MuY3JlYXRlQ29tbWVudChgICR7IG5hbWUgfTogc3RhcnQgYCksXHJcbiAgICAgICAgICAgIGVuZDogZG9jLmNyZWF0ZUNvbW1lbnQoYCAkeyBuYW1lIH06IGVuZCBgKSxcclxuICAgICAgICAgICAgY29udGVudDogbmV3IEVsZW0oKSxcclxuICAgICAgICAgICAgcGFyZW50XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgd2F0Y2hlcnNUb1JlbW92ZSxcclxuICAgICAgICAgIGV2YWx1YXRlOiAoZXhwcmVzc2lvbiwgb25DaGFuZ2UsIGluc3RhbmNlLCBmb3JERWxlbWVudHMsIGZvckRJdGVtLCBmb3JERWFjaCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWV4cHJlc3Npb25SZWdFeHAudGVzdChleHByZXNzaW9uKSkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBleHByZXNzaW9uO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3JERWxlbWVudHMgPSAhIWZvckRFbGVtZW50cztcclxuICAgICAgICAgICAgZm9yREl0ZW0gPSAhIWZvckRJdGVtO1xyXG4gICAgICAgICAgICBleHByZXNzaW9uID0gZXhwcmVzc2lvbi5yZXBsYWNlKC9eXFx7fFxcfSQvZywgJycpO1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgc3RvcmUgPSAobmFtZSA9PT0gJyNkLWl0ZW0nICYmICFmb3JESXRlbSkgfHwgZm9yREVhY2hcclxuICAgICAgICAgICAgICA/IChmb3JERWFjaCB8fCB0aGlzKS4kJC5zY29wZVxyXG4gICAgICAgICAgICAgIDogdGhpcztcclxuXHJcbiAgICAgICAgICAgIC8qIGVzbGludCBuby1uZXctZnVuYzogMCAqL1xyXG4gICAgICAgICAgICBjb25zdCB7IHdhdGNoZXJzVG9SZW1vdmUgfSA9IGluc3RhbmNlID8gaW5zdGFuY2UuJCQgOiB7fTtcclxuICAgICAgICAgICAgY29uc3QgZnVuYyA9IG5ldyBGdW5jdGlvbihcclxuICAgICAgICAgICAgICAnJyxcclxuICAgICAgICAgICAgICAnd2l0aChkb2N1bWVudC5Ed2F5bmVTdG9yZSl7JCQuZXhwcj1ldmFsKFwiJCQuZXhwcj1cIiskJC5leHByKTtyZXR1cm4gJCQuZXhwcn0nXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZXZhbHVhdGUuY2FsbCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGV2YWx1YXRlKCkge1xyXG4gICAgICAgICAgICAgIGxldCByZXN1bHQ7XHJcblxyXG4gICAgICAgICAgICAgIGlmIChvbkNoYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgZXZhbE1vZGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgZ2V0dGluZyA9IG5ldyBBcnIoW10pO1xyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgc3RvcmUuJCQuZXhwciA9IGV4cHJlc3Npb247XHJcbiAgICAgICAgICAgICAgZG9jdW1lbnQuRHdheW5lU3RvcmUgPSBzdG9yZTtcclxuXHJcbiAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmMoKTtcclxuICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChvbkV2YWxFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICBvbkV2YWxFcnJvcihlcnIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgaWYgKG9uQ2hhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFdhdGNoZXJzID0gbmV3IEFycihbXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgZ2V0dGluZy5mb3JFYWNoKCh3YXRjaGVycykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICBjb25zdCB3YXRjaGVyID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1Jlc3VsdCA9IGV2YWx1YXRlLmNhbGwodGhpcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdSZXN1bHQgIT09IHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2UobmV3UmVzdWx0LCByZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgY29uc3Qgd2F0Y2hlckJsb2NrID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvckRFbGVtZW50cyxcclxuICAgICAgICAgICAgICAgICAgICB3YXRjaGVyLFxyXG4gICAgICAgICAgICAgICAgICAgIHdhdGNoZXJzXHJcbiAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICB3YXRjaGVyLm9uUmVtb3ZlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsV2F0Y2hlcnMuZm9yRWFjaCgod2F0Y2hlckJsb2NrKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhdGNoZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhdGNoZXJzXHJcbiAgICAgICAgICAgICAgICAgICAgICB9ID0gd2F0Y2hlckJsb2NrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5kZXgxID0gd2F0Y2hlcnNUb1JlbW92ZS5pbmRleE9mKHdhdGNoZXJCbG9jayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleDIgPSB3YXRjaGVycy5pbmRleE9mKHdhdGNoZXIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleDEgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhdGNoZXJzVG9SZW1vdmUuc3BsaWNlKGluZGV4MSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4MiAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2F0Y2hlcnMuc3BsaWNlKGluZGV4MiwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICBsb2NhbFdhdGNoZXJzLnB1c2god2F0Y2hlckJsb2NrKTtcclxuICAgICAgICAgICAgICAgICAgd2F0Y2hlcnNUb1JlbW92ZS5wdXNoKHdhdGNoZXJCbG9jayk7XHJcbiAgICAgICAgICAgICAgICAgIHdhdGNoZXJzLnB1c2god2F0Y2hlcik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBldmFsTW9kZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgZ2V0dGluZyA9IG5ldyBBcnIoW10pO1xyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgc3RvcmUuJCQuZXhwciA9IG51bGw7XHJcbiAgICAgICAgICAgICAgZG9jdW1lbnQuRHdheW5lU3RvcmUgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBhcmdzID0gbmV3IFN1cGVyKG9yaWdpbmFsQXJncykubWFwKCh2YWx1ZSwgYXJnKSA9PiB7XHJcbiAgICAgIGlmIChuYW1lID09PSAnZC1lYWNoJyAmJiAoXHJcbiAgICAgICAgYXJnID09PSAnaXRlbSdcclxuICAgICAgICB8fCBhcmcgPT09ICdpbmRleCdcclxuICAgICAgICB8fCBhcmcgPT09ICd1aWQnXHJcbiAgICAgICkpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGZvckRFbGVtZW50cyA9IG5hbWUgPT09ICdkLWVsZW1lbnRzJyAmJiBhcmcgPT09ICd2YWx1ZSc7XHJcblxyXG4gICAgICByZXR1cm4gcGFyZW50U2NvcGUuJCQuZXZhbHVhdGUodmFsdWUsICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgIHRoaXMuYXJnc1thcmddID0gdmFsdWU7XHJcbiAgICAgIH0sIHRoaXMsIGZvckRFbGVtZW50cywgZm9yREVsZW1lbnRzICYmIHBhcmVudEJsb2NrLiQkLm5hbWUgPT09ICcjZC1pdGVtJyk7XHJcbiAgICB9KS4kO1xyXG5cclxuICAgIHRoaXMuYXJncyA9IGFyZ3M7XHJcbiAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW4gfHwgbmV3IEFycihbXSk7XHJcbiAgICB0aGlzLmdsb2JhbCA9IE9iamVjdC5jcmVhdGUoXHJcbiAgICAgIHBhcmVudFNjb3BlXHJcbiAgICAgICAgPyBPYmplY3QuY3JlYXRlKHBhcmVudFNjb3BlLmdsb2JhbClcclxuICAgICAgICA6IG51bGxcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy4kJC5lbGVtcy5zdGFydC4kWzBdLkR3YXluZUJsb2NrID0gdGhpcztcclxuICAgIHRoaXMuJCQuZWxlbXMuZW5kLiRbMF0uRHdheW5lQmxvY2sgPSB0aGlzO1xyXG5cclxuICAgIGlmIChwYXJlbnRCbG9jaykge1xyXG4gICAgICBwYXJlbnRCbG9jay4kJC5jaGlsZHJlbi5wdXNoKHRoaXMpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBCbG9jayNhZnRlckNvbnN0cnVjdFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAZGVzY3JpcHRpb24gSXMgY2FsbGVkIGFmdGVyIGJsb2NrIGNvbnN0cnVjdGlvbiAoaW5jbHVkaW5nIGFsbCBzY29wZXMpXHJcbiAgICogYnV0IGJlZm9yZSByZW5kZXJpbmcgdGhlIGJsb2NrIGFuZCBpdHMgY2hpbGRyZW4uXHJcbiAgICovXHJcbiAgYWZ0ZXJDb25zdHJ1Y3QoKSB7fVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEJsb2NrI2FmdGVyUmVuZGVyXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBkZXNjcmlwdGlvbiBJcyBjYWxsZWQgYWZ0ZXIgYmxvY2sgaGFzIGJlZW4gcmVuZGVyZWQuXHJcbiAgICovXHJcbiAgYWZ0ZXJSZW5kZXIoKSB7fVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEJsb2NrI2FmdGVyUmVuZGVyXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBkZXNjcmlwdGlvbiBJcyBjYWxsZWQgYmVmb3JlIHRoZSBibG9jayByZW1vdmFsLlxyXG4gICAqL1xyXG4gIGJlZm9yZVJlbW92ZSgpIHt9XHJcblxyXG4gIGV2YWx1YXRlQW5kV2F0Y2goZXhwcmVzc2lvbiwgY2FsbGJhY2spIHtcclxuICAgIHJldHVybiB0aGlzLiQkLnBhcmVudC4kJC5ldmFsdWF0ZShleHByZXNzaW9uLCBjYWxsYmFjaywgdGhpcyk7XHJcbiAgfVxyXG5cclxuICBldmFsdWF0ZU9uY2UoZXhwcmVzc2lvbikge1xyXG4gICAgcmV0dXJuIHRoaXMuJCQucGFyZW50LiQkLmV2YWx1YXRlKGV4cHJlc3Npb24pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBCbG9jayNyZW1vdmVcclxuICAgKiBAcHVibGljXHJcbiAgICogQGRlc2NyaXB0aW9uIE1ldGhvZCBmb3QgZm9yY2luZyB0aGUgYmxvY2sgdG8gYmUgcmVtb3ZlZC4gQ2FsbHNcclxuICAgKiByZW1vdmUgbWV0aG9kIGZvciBhbGwgb2YgaXRzIGNoaWxkIGJsb2NrcyBhbmQgY2FsbHMgYmVmb3JlUmVtb3ZlIGZ1bmN0aW9uLlxyXG4gICAqL1xyXG4gIHJlbW92ZShpc1BhcmVudFNpZ25hbCkge1xyXG4gICAgY29uc3Qge1xyXG4gICAgICBwYXJlbnRCbG9jayxcclxuICAgICAgY2hpbGRyZW4sXHJcbiAgICAgIG1peGlucyxcclxuICAgICAgZWxlbXM6IHtcclxuICAgICAgICBzdGFydCxcclxuICAgICAgICBjb250ZW50LFxyXG4gICAgICAgIGVuZFxyXG4gICAgICB9LFxyXG4gICAgICB3YXRjaGVyc1RvUmVtb3ZlXHJcbiAgICB9ID0gdGhpcy4kJDtcclxuXHJcbiAgICByZW1vdmVXYXRjaGVycyh3YXRjaGVyc1RvUmVtb3ZlKTtcclxuXHJcbiAgICBjaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4ge1xyXG4gICAgICBjaGlsZC5yZW1vdmUodHJ1ZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBtaXhpbnMuZm9yRWFjaCgobWl4aW4pID0+IHtcclxuICAgICAgbWl4aW4ucmVtb3ZlKHRydWUpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgdGhpcy5iZWZvcmVSZW1vdmUoKTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdVbmNhdWdodCBlcnJvciBpbiBiZWZvcmVSZW1vdmU6JywgZXJyKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWlzUGFyZW50U2lnbmFsICYmIHBhcmVudEJsb2NrKSB7XHJcbiAgICAgIGNvbnN0IGluZGV4ID0gcGFyZW50QmxvY2suJCQuY2hpbGRyZW4uaW5kZXhPZih0aGlzKTtcclxuXHJcbiAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcclxuICAgICAgICBwYXJlbnRCbG9jay4kJC5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbmV3IEVsZW0oW1xyXG4gICAgICBzdGFydCxcclxuICAgICAgY29udGVudCxcclxuICAgICAgZW5kXHJcbiAgICBdKS5yZW1vdmUoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgQmxvY2sjd2F0Y2hcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IFthcmdzXSAtIFZhcnMgdG8gd2F0Y2ggKGFyZ3MsIGdsb2JhbCBvciBsb2NhbCkuXHJcbiAgICogQHBhcmFtIHtXYXRjaGVyfSB3YXRjaGVyIC0gQ2FsbGVkIHdoZW4gd2F0Y2hlZCB2YXJzIGFyZSBjaGFuZ2VkLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBNZXRob2QgZm9yIHdhdGNoaW5nIGZvciB2YXJzLiBJZiBubyB2YXJzIHBhc3NlZCBpbiBhcmd1bWVudHNcclxuICAgKiBhbGwgdmFycyBhcmUgdG8gYmUgd2F0Y2hlZC4gT3RoZXJ3aXNlIHNwZWNpZmllZCB2YXJzIHdpbGwgYmUgd2F0Y2hlZC5cclxuICAgKiBXYXRjaGVycyBzaG91bGQgbm90IGJlIHB1dCBpbnNpZGUgdGhlIGNvbnN0cnVjdG9yLiBJdCBpcyBjb25zaWRlcmVkIGJlc3RcclxuICAgKiBwcmFjdGljZSB0byBkbyBpdCBpbnNpZGUgdGhlIHtAbGluayBCbG9jayNhZnRlckNvbnN0cnVjdH0gbWV0aG9kLlxyXG4gICAqIE5vdGUgdGhhdCB0aGVzZSBleHByZXNzaW9ucyAodmFycywgaS5lLiBcImFyZ3MuYXJnXCIpIGFyZSBub3QgdG8gYmVcclxuICAgKiBldmFsdWF0ZWQgc28geW91IGNhbm5vdCBwdXQgdGhlcmUgdGhpbmdzIGxpa2UgXCJhW2JdXCIgb3IgYW55IGpzIGNvZGUsXHJcbiAgICogb25seSBleHByZXNzaW9ucyBsaWtlIFwiYVwiLCBcImJcIiwgXCJhcmdzLmFcIiwgXCJhcmdzLmJcIiBhbmQgXCJnbG9iYWwuYVwiLCBcImdsb2JhbC5iXCIuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIGNsYXNzIE15QmxvY2sgZXh0ZW5kcyBCbG9jayB7XHJcbiAgICogICBzdGF0aWMgdGVtcGxhdGUgPSAnPGRpdiAvPic7XHJcbiAgICpcclxuICAgKiAgIGFmdGVyQ29uc3RydWN0KCkge1xyXG4gICAqICAgICB0aGlzLndhdGNoKCdhJywgKCkgPT4ge30pO1xyXG4gICAqICAgICB0aGlzLndhdGNoKCdhcmdzLmEnLCAnZ2xvYmFsLnInLCAoKSA9PiB7fSk7XHJcbiAgICogICAgIHRoaXMud2F0Y2goKCkgPT4ge30pO1xyXG4gICAqICAgfVxyXG4gICAqIH1cclxuICAgKi9cclxuICB3YXRjaCgpIHtcclxuICAgIGNvbnN0IHdhdGNoZXIgPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdO1xyXG5cclxuICAgIGlmICghaXNGdW5jdGlvbih3YXRjaGVyKSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgZm9yIChjb25zdCBnbG9iYWwgaW4gdGhpcy4kJC5nbG9iYWwpIHtcclxuICAgICAgICAvKiBlc2xpbnQgZ3VhcmQtZm9yLWluOiAwICovXHJcbiAgICAgICAgdGhpcy4kJC5nbG9iYWxbZ2xvYmFsXS53YXRjaGVycy5wZXJtLnB1c2god2F0Y2hlcik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGl0ZXJhdGUodGhpcy4kJC5hcmdzLCAoeyB3YXRjaGVycyB9KSA9PiB7XHJcbiAgICAgICAgd2F0Y2hlcnMucGVybS5wdXNoKHdhdGNoZXIpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHJldHVybiBpdGVyYXRlKHRoaXMuJCQubG9jYWxzLCAoeyB3YXRjaGVycyB9KSA9PiB7XHJcbiAgICAgICAgd2F0Y2hlcnMucGVybS5wdXNoKHdhdGNoZXIpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBpdGVyYXRlKGFyZ3VtZW50cywgKHZhcmlhYmxlKSA9PiB7XHJcbiAgICAgIGlmICh2YXJpYWJsZSA9PT0gd2F0Y2hlcikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyaWFibGUgPSBgJHsgdmFyaWFibGUgfWA7XHJcblxyXG4gICAgICBpZiAoL15hcmdzXFwuLy50ZXN0KHZhcmlhYmxlKSkge1xyXG4gICAgICAgIHZhcmlhYmxlID0gdmFyaWFibGUucmVwbGFjZSgvXmFyZ3NcXC4vLCAnJyk7XHJcblxyXG4gICAgICAgIGlmICghdGhpcy4kJC5hcmdzW3ZhcmlhYmxlXSkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy4kJC5hcmdzW3ZhcmlhYmxlXS53YXRjaGVycy5wZXJtLnB1c2god2F0Y2hlcik7XHJcblxyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKC9eZ2xvYmFsXFwuLy50ZXN0KHZhcmlhYmxlKSkge1xyXG4gICAgICAgIHZhcmlhYmxlID0gdmFyaWFibGUucmVwbGFjZSgvXmdsb2JhbFxcLi8sICcnKTtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLiQkLmdsb2JhbFt2YXJpYWJsZV0pIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuJCQuZ2xvYmFsW3ZhcmlhYmxlXS53YXRjaGVycy5wZXJtLnB1c2god2F0Y2hlcik7XHJcblxyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCF0aGlzLiQkLmxvY2Fsc1t2YXJpYWJsZV0pIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuJCQubG9jYWxzW3ZhcmlhYmxlXS53YXRjaGVycy5wZXJtLnB1c2god2F0Y2hlcik7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgQmxvY2sjd2F0Y2hBcmdzXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBbYXJnc10gLSBBcmdzIHRvIHdhdGNoLlxyXG4gICAqIEBwYXJhbSB7V2F0Y2hlcn0gd2F0Y2hlciAtIENhbGxlZCB3aGVuIHdhdGNoZWQgYXJncyBhcmUgY2hhbmdlZC5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIGZvciB3YXRjaGluZyBmb3IgYXJncy4gSWYgbm8gYXJncyBwYXNzZWQgaW4gYXJndW1lbnRzXHJcbiAgICogYWxsIGFyZ3MgYXJlIHRvIGJlIHdhdGNoZWQuIE90aGVyd2lzZSBzcGVjaWZpZWQgYXJncyB3aWxsIGJlIHdhdGNoZWQuXHJcbiAgICogV2F0Y2hlcnMgc2hvdWxkIG5vdCBiZSBwdXQgaW5zaWRlIHRoZSBjb25zdHJ1Y3Rvci4gSXQgaXMgY29uc2lkZXJlZCBiZXN0XHJcbiAgICogcHJhY3RpY2UgdG8gZG8gaXQgaW5zaWRlIHRoZSB7QGxpbmsgQmxvY2sjYWZ0ZXJDb25zdHJ1Y3R9IG1ldGhvZC5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogY2xhc3MgTXlCbG9jayBleHRlbmRzIEJsb2NrIHtcclxuICAgKiAgIHN0YXRpYyB0ZW1wbGF0ZSA9ICc8ZGl2IC8+JztcclxuICAgKlxyXG4gICAqICAgYWZ0ZXJDb25zdHJ1Y3QoKSB7XHJcbiAgICogICAgIHRoaXMud2F0Y2hBcmdzKCdhJywgKCkgPT4ge30pO1xyXG4gICAqICAgICB0aGlzLndhdGNoQXJncygnYScsICdiJywgKCkgPT4ge30pO1xyXG4gICAqICAgICB0aGlzLndhdGNoQXJncygoKSA9PiB7fSk7XHJcbiAgICogICB9XHJcbiAgICogfVxyXG4gICAqL1xyXG4gIHdhdGNoQXJncygpIHtcclxuICAgIGNvbnN0IHdhdGNoZXIgPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdO1xyXG5cclxuICAgIGlmICghaXNGdW5jdGlvbih3YXRjaGVyKSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgcmV0dXJuIGl0ZXJhdGUodGhpcy4kJC5hcmdzLCAoeyB3YXRjaGVycyB9KSA9PiB7XHJcbiAgICAgICAgd2F0Y2hlcnMucGVybS5wdXNoKHdhdGNoZXIpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBpdGVyYXRlKGFyZ3VtZW50cywgKGFyZykgPT4ge1xyXG4gICAgICBpZiAoYXJnID09PSB3YXRjaGVyKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIXRoaXMuJCQuYXJnc1thcmddKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLiQkLmFyZ3NbYXJnXS53YXRjaGVycy5wZXJtLnB1c2god2F0Y2hlcik7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgQmxvY2sjd2F0Y2hHbG9iYWxcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IFtnbG9iYWxzXSAtIEdsb2JhbHMgdG8gd2F0Y2guXHJcbiAgICogQHBhcmFtIHtXYXRjaGVyfSB3YXRjaGVyIC0gQ2FsbGVkIHdoZW4gd2F0Y2hlZCBnbG9iYWxzIGFyZSBjaGFuZ2VkLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBNZXRob2QgZm9yIHdhdGNoaW5nIGZvciBnbG9iYWxzLiBJZiBubyBnbG9iYWxzIHBhc3NlZCBpbiBhcmd1bWVudHNcclxuICAgKiBhbGwgZ2xvYmFscyBhcmUgdG8gYmUgd2F0Y2hlZC4gT3RoZXJ3aXNlIHNwZWNpZmllZCBnbG9iYWxzIHdpbGwgYmUgd2F0Y2hlZC5cclxuICAgKiBXYXRjaGVycyBzaG91bGQgbm90IGJlIHB1dCBpbnNpZGUgdGhlIGNvbnN0cnVjdG9yLiBJdCBpcyBjb25zaWRlcmVkIGJlc3RcclxuICAgKiBwcmFjdGljZSB0byBkbyBpdCBpbnNpZGUgdGhlIHtAbGluayBCbG9jayNhZnRlckNvbnN0cnVjdH0gbWV0aG9kLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBjbGFzcyBNeUJsb2NrIGV4dGVuZHMgQmxvY2sge1xyXG4gICAqICAgc3RhdGljIHRlbXBsYXRlID0gJzxkaXYgLz4nO1xyXG4gICAqXHJcbiAgICogICBhZnRlckNvbnN0cnVjdCgpIHtcclxuICAgKiAgICAgdGhpcy53YXRjaEdsb2JhbCgnYScsICgpID0+IHt9KTtcclxuICAgKiAgICAgdGhpcy53YXRjaEdsb2JhbCgnYScsICdiJywgKCkgPT4ge30pO1xyXG4gICAqICAgICB0aGlzLndhdGNoR2xvYmFsKCgpID0+IHt9KTtcclxuICAgKiAgIH1cclxuICAgKiB9XHJcbiAgICovXHJcbiAgd2F0Y2hHbG9iYWxzKCkge1xyXG4gICAgY29uc3Qgd2F0Y2hlciA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV07XHJcblxyXG4gICAgaWYgKCFpc0Z1bmN0aW9uKHdhdGNoZXIpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICBmb3IgKGNvbnN0IGdsb2JhbCBpbiB0aGlzLiQkLmdsb2JhbCkge1xyXG4gICAgICAgIC8qIGVzbGludCBndWFyZC1mb3ItaW46IDAgKi9cclxuICAgICAgICB0aGlzLiQkLmdsb2JhbFtnbG9iYWxdLndhdGNoZXJzLnBlcm0ucHVzaCh3YXRjaGVyKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGl0ZXJhdGUoYXJndW1lbnRzLCAoZ2xvYmFsKSA9PiB7XHJcbiAgICAgIGlmIChnbG9iYWwgPT09IHdhdGNoZXIpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghdGhpcy4kJC5nbG9iYWxbZ2xvYmFsXSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy4kJC5nbG9iYWxbZ2xvYmFsXS53YXRjaGVycy5wZXJtLnB1c2god2F0Y2hlcik7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgQmxvY2sjd2F0Y2hMb2NhbHNcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IFtsb2NhbHNdIC0gTG9jYWxzIHRvIHdhdGNoLlxyXG4gICAqIEBwYXJhbSB7V2F0Y2hlcn0gd2F0Y2hlciAtIENhbGxlZCB3aGVuIHdhdGNoZWQgbG9jYWxzIGFyZSBjaGFuZ2VkLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBNZXRob2QgZm9yIHdhdGNoaW5nIGZvciBsb2NhbHMuIElmIG5vIGxvY2FscyBwYXNzZWQgaW4gYXJndW1lbnRzXHJcbiAgICogYWxsIGxvY2FscyBhcmUgdG8gYmUgd2F0Y2hlZC4gT3RoZXJ3aXNlIHNwZWNpZmllZCBsb2NhbHMgd2lsbCBiZSB3YXRjaGVkLlxyXG4gICAqIFdhdGNoZXJzIHNob3VsZCBub3QgYmUgcHV0IGluc2lkZSB0aGUgY29uc3RydWN0b3IuIEl0IGlzIGNvbnNpZGVyZWQgYmVzdFxyXG4gICAqIHByYWN0aWNlIHRvIGRvIGl0IGluc2lkZSB0aGUge0BsaW5rIEJsb2NrI2FmdGVyQ29uc3RydWN0fSBtZXRob2QuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIGNsYXNzIE15QmxvY2sgZXh0ZW5kcyBCbG9jayB7XHJcbiAgICogICBzdGF0aWMgdGVtcGxhdGUgPSAnPGRpdiAvPic7XHJcbiAgICpcclxuICAgKiAgIGFmdGVyQ29uc3RydWN0KCkge1xyXG4gICAqICAgICB0aGlzLndhdGNoTG9jYWxzKCdhJywgKCkgPT4ge30pO1xyXG4gICAqICAgICB0aGlzLndhdGNoTG9jYWxzKCdhJywgJ2InLCAoKSA9PiB7fSk7XHJcbiAgICogICAgIHRoaXMud2F0Y2hMb2NhbHMoKCkgPT4ge30pO1xyXG4gICAqICAgfVxyXG4gICAqIH1cclxuICAgKi9cclxuICB3YXRjaExvY2FscygpIHtcclxuICAgIGNvbnN0IHdhdGNoZXIgPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdO1xyXG5cclxuICAgIGlmICghaXNGdW5jdGlvbih3YXRjaGVyKSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgcmV0dXJuIGl0ZXJhdGUodGhpcy4kJC5sb2NhbHMsICh7IHdhdGNoZXJzIH0pID0+IHtcclxuICAgICAgICB3YXRjaGVycy5wZXJtLnB1c2god2F0Y2hlcik7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGl0ZXJhdGUoYXJndW1lbnRzLCAobG9jYWwpID0+IHtcclxuICAgICAgaWYgKGxvY2FsID09PSB3YXRjaGVyKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIXRoaXMuJCQubG9jYWxzW2xvY2FsXSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy4kJC5sb2NhbHNbbG9jYWxdLndhdGNoZXJzLnBlcm0ucHVzaCh3YXRjaGVyKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxucmVnaXN0ZXJCdWlsdElucyhCbG9ja3MsIEJsb2NrKTtcclxuXHJcbmNsYXNzIE1peGluIHtcclxuICBzdGF0aWMgZXZhbHVhdGUgPSB0cnVlO1xyXG5cclxuICBjb25zdHJ1Y3RvcihvcHRzKSB7XHJcbiAgICBjb25zdCB7XHJcbiAgICAgIHZhbHVlLFxyXG4gICAgICBlbGVtLFxyXG4gICAgICBtYXRjaCxcclxuICAgICAgcGFyZW50QmxvY2ssXHJcbiAgICAgIHBhcmVudFNjb3BlXHJcbiAgICB9ID0gb3B0cztcclxuXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XHJcbiAgICAgICQkOiB7XHJcbiAgICAgICAgdmFsdWU6IHtcclxuICAgICAgICAgIF92YWx1ZTogdmFsdWUsXHJcbiAgICAgICAgICBwYXJlbnQ6IHBhcmVudFNjb3BlLFxyXG4gICAgICAgICAgcGFyZW50QmxvY2ssXHJcbiAgICAgICAgICB3YXRjaGVyc1RvUmVtb3ZlOiBuZXcgQXJyKFtdKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5tYXRjaCA9IG5ldyBBcnIobWF0Y2gpLnNsaWNlKDEpLiQ7XHJcbiAgICB0aGlzLmVsZW0gPSBlbGVtO1xyXG5cclxuICAgIGlmIChuZXcgU3VwZXIodGhpcykucHJvdG8oKS4kLmNvbnN0cnVjdG9yLmV2YWx1YXRlKSB7XHJcbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLmV2YWx1YXRlQW5kV2F0Y2goKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgPT4ge1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSBuZXdWYWx1ZTtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIHRoaXMuYWZ0ZXJVcGRhdGUobmV3VmFsdWUsIG9sZFZhbHVlKTtcclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFVuY2F1Z2h0IGVycm9yIGluICR7IG5hbWUgfSNvblVwZGF0ZTpgLCBlcnIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0aGlzLmFmdGVyVXBkYXRlKHRoaXMudmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChwYXJlbnRCbG9jaykge1xyXG4gICAgICBwYXJlbnRCbG9jay4kJC5taXhpbnMucHVzaCh0aGlzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFmdGVyVXBkYXRlKCkge31cclxuXHJcbiAgYmVmb3JlUmVtb3ZlKCkge31cclxuXHJcbiAgZXZhbHVhdGVBbmRXYXRjaChjYWxsYmFjaykge1xyXG4gICAgY29uc3Qge1xyXG4gICAgICBfdmFsdWUsXHJcbiAgICAgIHBhcmVudFxyXG4gICAgfSA9IHRoaXMuJCQ7XHJcblxyXG4gICAgcmV0dXJuIHBhcmVudC4kJC5ldmFsdWF0ZShfdmFsdWUsIGNhbGxiYWNrLCB0aGlzKTtcclxuICB9XHJcblxyXG4gIGV2YWx1YXRlT25jZSgpIHtcclxuICAgIGNvbnN0IHtcclxuICAgICAgX3ZhbHVlLFxyXG4gICAgICBwYXJlbnRcclxuICAgIH0gPSB0aGlzLiQkO1xyXG5cclxuICAgIHJldHVybiBwYXJlbnQuJCQuZXZhbHVhdGUoX3ZhbHVlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgTWl4aW4jcmVtb3ZlXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBkZXNjcmlwdGlvbiBNZXRob2QgZm90IGZvcmNpbmcgdGhlIG1peGluIHRvIGJlIHJlbW92ZWQuXHJcbiAgICovXHJcbiAgcmVtb3ZlKGlzUGFyZW50U2lnbmFsKSB7XHJcbiAgICBjb25zdCB7XHJcbiAgICAgIHBhcmVudEJsb2NrLFxyXG4gICAgICB3YXRjaGVyc1RvUmVtb3ZlXHJcbiAgICB9ID0gdGhpcy4kJDtcclxuXHJcbiAgICByZW1vdmVXYXRjaGVycyh3YXRjaGVyc1RvUmVtb3ZlKTtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICB0aGlzLmJlZm9yZVJlbW92ZSgpO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuY2F1Z2h0IGVycm9yIGluIGJlZm9yZVJlbW92ZTonLCBlcnIpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghaXNQYXJlbnRTaWduYWwgJiYgcGFyZW50QmxvY2spIHtcclxuICAgICAgY29uc3QgaW5kZXggPSBwYXJlbnRCbG9jay4kJC5taXhpbnMuaW5kZXhPZih0aGlzKTtcclxuXHJcbiAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcclxuICAgICAgICBwYXJlbnRCbG9jay4kJC5taXhpbnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxucmVnaXN0ZXJCdWlsdElucyhNaXhpbnMsIE1peGluKTtcclxuXHJcbmZ1bmN0aW9uIGluaXRBcHAoKSB7XHJcbiAgY29uc3Qgcm9vdCA9IGZpbmQoJ2Qtcm9vdCcpLmZpcnN0KCk7XHJcblxyXG4gIGlmICghcm9vdC5sZW5ndGgpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcignTm8gZC1yb290IGVsZW1lbnQgaXMgZm91bmQhIChpbml0QXBwKScpO1xyXG4gIH1cclxuXHJcbiAgcmVnaXN0ZXJCbG9ja3MoQmxvY2ssIGJsb2Nrcyk7XHJcblxyXG4gIGl0ZXJhdGUoTWl4aW4sIChNaXhpbiwgbmFtZSkgPT4ge1xyXG4gICAgaWYgKG5hbWUgPT09ICdldmFsdWF0ZScpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghaXNGdW5jdGlvbihNaXhpbikpIHtcclxuICAgICAgY29uc29sZS53YXJuKGBUaGUgXCIkeyBuYW1lIH1cIiBtaXhpbiBpcyBub3QgYSBmdW5jdGlvbiBhbmQgd2lsbCBub3QgYmUgcmVnaXN0ZXJlZCAoaW5pdEFwcClgKTtcclxuXHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWF0dHJOYW1lLnRlc3QobmFtZSkpIHtcclxuICAgICAgY29uc29sZS53YXJuKGBOYW1lIFwiJHsgbmFtZSB9XCIgaXMgbm90IGFsbG93ZWQgZm9yIG1peGlucyBzbyB0aGUgbWl4aW4gd2lsbCBub3QgYmUgcmVnaXN0ZXJlZCAoaW5pdEFwcClgKTtcclxuXHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWlzSW5zdGFuY2VPZk1peGluKE1peGluKSkge1xyXG4gICAgICBjb25zb2xlLndhcm4oYFRoZSBcIiR7IG5hbWUgfVwiIG1peGluIGRvZXMgbm90IGV4dGVuZCBNaXhpbiBhbmQgd2lsbCBub3QgYmUgcmVnaXN0ZXJlZCAoaW5pdEFwcClgKTtcclxuXHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBtaXhpbnNbbmFtZV0gPSBNaXhpbjtcclxuXHJcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKE1peGluLCB7XHJcbiAgICAgIF9tYXRjaDogbmV3IFJlZ0V4cChgXiR7IG5hbWUgfSg/Oi0oW1xcXFxzXFxcXFNdKykpPyRgKVxyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGNvbnN0IGJsb2NrID0gcm9vdC5hdHRyKCdibG9jaycpO1xyXG5cclxuICBpZiAoIWJsb2Nrc1tibG9ja10pIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihgTm8gXCIkeyBibG9jayB9XCIgYmxvY2sgaXMgcmVnaXN0ZXJlZCEgKGluaXRBcHApYCk7XHJcbiAgfVxyXG5cclxuICBjb25zdCByZXBsYWNlbWVudCA9IGRvYy5jcmVhdGVDb21tZW50KCcgZC1yb290OiBzdGFydCAnKTtcclxuICBjb25zdCBwYXJlbnQgPSByb290LnBhcmVudCgpO1xyXG5cclxuICByZXBsYWNlbWVudC5hZGQoZG9jLmNyZWF0ZUNvbW1lbnQoJyBkLXJvb3Q6IGVuZCAnKSk7XHJcblxyXG4gIHJvb3QucmVwbGFjZShyZXBsYWNlbWVudCk7XHJcblxyXG4gIGNyZWF0ZUJsb2NrKHtcclxuICAgIG5vZGU6IHtcclxuICAgICAgbmFtZTogYmxvY2ssXHJcbiAgICAgIGF0dHJzOiB7fSxcclxuICAgICAgY2hpbGRyZW46IG5ldyBBcnIoW10pXHJcbiAgICB9LFxyXG4gICAgYWZ0ZXI6IHJlcGxhY2VtZW50LmZpcnN0KCksXHJcbiAgICBwYXJlbnRcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVnaXN0ZXJCbG9ja3MoQmxvY2ssIGJsb2Nrcykge1xyXG4gIGl0ZXJhdGUoQmxvY2ssIChCbG9jaywgbmFtZSkgPT4ge1xyXG4gICAgaWYgKFxyXG4gICAgICBuYW1lID09PSAnY29sbGFwc2VXaGl0ZVNwYWNlJ1xyXG4gICAgICB8fCBuYW1lID09PSAnZGVmYXVsdEFyZ3MnXHJcbiAgICAgIHx8IG5hbWUgPT09ICd0ZW1wbGF0ZSdcclxuICAgICAgfHwgbmFtZSA9PT0gJ3dyYXAnXHJcbiAgICApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghaXNGdW5jdGlvbihCbG9jaykpIHtcclxuICAgICAgY29uc29sZS53YXJuKGBUaGUgXCIkeyBuYW1lIH1cIiBibG9jayBpcyBub3QgYSBmdW5jdGlvbiBhbmQgd2lsbCBub3QgYmUgcmVnaXN0ZXJlZCAoaW5pdEFwcClgKTtcclxuXHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIXRhZ05hbWUudGVzdChuYW1lKSAmJiBuYW1lICE9PSAnI2QtaXRlbScpIHtcclxuICAgICAgY29uc29sZS53YXJuKGBOYW1lIFwiJHsgbmFtZSB9XCIgaXMgbm90IGFsbG93ZWQgZm9yIGJsb2NrcyBzbyB0aGUgYmxvY2sgd2lsbCBub3QgYmUgcmVnaXN0ZXJlZCAoaW5pdEFwcClgKTtcclxuXHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWlzSW5zdGFuY2VPZkJsb2NrKEJsb2NrKSkge1xyXG4gICAgICBjb25zb2xlLndhcm4oYFRoZSBcIiR7IG5hbWUgfVwiIGJsb2NrIGRvZXMgbm90IGV4dGVuZCBCbG9jayBhbmQgd2lsbCBub3QgYmUgcmVnaXN0ZXJlZCAoaW5pdEFwcClgKTtcclxuXHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjaGlsZHJlbiA9IE9iamVjdC5jcmVhdGUoYmxvY2tzKTtcclxuXHJcbiAgICBibG9ja3NbbmFtZV0gPSB7XHJcbiAgICAgIGJsb2NrOiBCbG9jayxcclxuICAgICAgaHRtbDogZGVlcENsb25lQ2hpbGRyZW4oXHJcbiAgICAgICAgbWFya3VwVG9KU09OKFxyXG4gICAgICAgICAgYCR7IEJsb2NrLnRlbXBsYXRlIHx8ICcnIH1gLFxyXG4gICAgICAgICAgQmxvY2suY29sbGFwc2VXaGl0ZVNwYWNlXHJcbiAgICAgICAgKVxyXG4gICAgICApLFxyXG4gICAgICBjaGlsZHJlblxyXG4gICAgfTtcclxuXHJcbiAgICByZWdpc3RlckJsb2NrcyhCbG9jaywgY2hpbGRyZW4pO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZWdpc3RlckJ1aWx0SW5zKHNldCwgcHJvdG8pIHtcclxuICBpdGVyYXRlKHNldCwgKHJlZ2lzdGVyKSA9PiB7XHJcbiAgICBjb25zdCB7XHJcbiAgICAgIG5hbWUsXHJcbiAgICAgIHZhbHVlXHJcbiAgICB9ID0gcmVnaXN0ZXIocHJvdG8sIGNyZWF0ZUJsb2NrKTtcclxuXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG8sIG5hbWUsIHtcclxuICAgICAgdmFsdWUsXHJcbiAgICAgIGVudW1lcmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVCbG9jayh7IG5vZGUsIGFmdGVyLCBwYXJlbnQsIHBhcmVudEJsb2NrLCBwYXJlbnRTY29wZSB9KSB7XHJcbiAgcGFyZW50U2NvcGUgPSAobm9kZSAmJiBub2RlLmJsb2NrKSB8fCBwYXJlbnRTY29wZTtcclxuXHJcbiAgY29uc3QgbmFtZSA9IChub2RlICYmIG5vZGUubmFtZSkgfHwgJ1Vua25vd25CbG9jayc7XHJcbiAgY29uc3QgYXJncyA9IChub2RlICYmIG5vZGUuYXR0cnMpIHx8IHt9O1xyXG4gIGNvbnN0IGNoaWxkcmVuID0gKG5vZGUgJiYgbm9kZS5jaGlsZHJlbikgfHwgbmV3IEFycihbXSk7XHJcbiAgY29uc3QgZWxlbSA9IHBhcmVudC5wcm9wKCduYW1lc3BhY2VVUkknKSA9PT0gc3ZnTlNcclxuICAgID8gZG9jLnN2ZygpXHJcbiAgICA6IG5ldyBFbGVtKGRvYy50ZW1wbGF0ZSgpLiRbMF0uY29udGVudCk7XHJcbiAgY29uc3QgbG9jYWxCbG9ja3MgPSBwYXJlbnRTY29wZSA/IHBhcmVudFNjb3BlLiQkLkJsb2NrLmNoaWxkcmVuIDogYmxvY2tzO1xyXG4gIGxldCBjb25zdHJ1Y3RvciA9IG5vZGUgJiYgbm9kZS5uYW1lICYmIGxvY2FsQmxvY2tzW25vZGUubmFtZV0gPyBsb2NhbEJsb2Nrc1tub2RlLm5hbWVdLmJsb2NrIDogbnVsbDtcclxuICBsZXQgZEJsb2NrTWF0Y2g7XHJcblxyXG4gIGlmICghY2hpbGRyZW4ubGVuZ3RoICYmIChkQmxvY2tNYXRjaCA9IG5hbWUubWF0Y2goL15kLWJsb2NrLShbXFxzXFxTXSspJC8pIHx8IG5hbWUgPT09ICdkLWJsb2NrJykpIHtcclxuICAgIGNvbnN0cnVjdG9yID0gYmxvY2tzWydkLWJsb2NrJ10uYmxvY2s7XHJcblxyXG4gICAgYXJncy5uYW1lID0gZEJsb2NrTWF0Y2ggPyBkQmxvY2tNYXRjaFsxXSA6IG51bGw7XHJcbiAgfVxyXG5cclxuICBpZiAoIWNvbnN0cnVjdG9yKSB7XHJcbiAgICBjb25zdCB7XHJcbiAgICAgIHZhbHVlLFxyXG4gICAgICBjaGlsZHJlblxyXG4gICAgfSA9IG5vZGU7XHJcblxyXG4gICAgaWYgKG5hbWUgPT09ICcjdGV4dCcgJiYgZXhwcmVzc2lvblJlZ0V4cC50ZXN0KHZhbHVlKSkge1xyXG4gICAgICByZXR1cm4gY3JlYXRlQmxvY2soe1xyXG4gICAgICAgIG5vZGU6IHtcclxuICAgICAgICAgIG5hbWU6ICdkLXRleHQnLFxyXG4gICAgICAgICAgYXR0cnM6IHsgdmFsdWUgfSxcclxuICAgICAgICAgIGNoaWxkcmVuOiBuZXcgQXJyKFtdKSxcclxuICAgICAgICAgIGJsb2NrOiBwYXJlbnRTY29wZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYWZ0ZXIsXHJcbiAgICAgICAgcGFyZW50LFxyXG4gICAgICAgIHBhcmVudEJsb2NrLFxyXG4gICAgICAgIHBhcmVudFNjb3BlXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGVsZW1lbnQgPSBlbGVtLmNyZWF0ZShuYW1lKTtcclxuICAgIGNvbnN0IGN1cnJlbnRNaXhpbnMgPSBuZXcgQXJyKFtdKTtcclxuXHJcbiAgICBjb25zdCBhdHRycyA9IG5ldyBTdXBlcihhcmdzKS5vYmplY3QoKG9iamVjdCwgdmFsdWUsIGF0dHIpID0+IHtcclxuICAgICAgY29uc3QgbWF0Y2ggPSBpdGVyYXRlKG1peGlucywgKE1peGluLCBuYW1lKSA9PiB7XHJcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBhdHRyLm1hdGNoKE1peGluLl9tYXRjaCk7XHJcblxyXG4gICAgICAgIGlmIChtYXRjaCkge1xyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbWF0Y2gsXHJcbiAgICAgICAgICAgIG5hbWVcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGlmIChtYXRjaCkge1xyXG4gICAgICAgIGN1cnJlbnRNaXhpbnMucHVzaCh7XHJcbiAgICAgICAgICBuYW1lOiBtYXRjaC5uYW1lLFxyXG4gICAgICAgICAgbWF0Y2g6IG1hdGNoLm1hdGNoLFxyXG4gICAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgICBlbGVtOiBlbGVtZW50LFxyXG4gICAgICAgICAgcGFyZW50QmxvY2ssXHJcbiAgICAgICAgICBwYXJlbnRTY29wZVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG9iamVjdFthdHRyXSA9IHBhcmVudFNjb3BlLiQkLmV2YWx1YXRlKHZhbHVlLCAodmFsdWUpID0+IHtcclxuICAgICAgICBlbGVtZW50LmF0dHIoYXR0ciwgdmFsdWUpO1xyXG4gICAgICB9LCBwYXJlbnRCbG9jayk7XHJcbiAgICB9KS4kO1xyXG5cclxuICAgIGlmICghaXNOaWwodmFsdWUpKSB7XHJcbiAgICAgIGVsZW1lbnQudGV4dCh2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGF0dHJzKSB7XHJcbiAgICAgIGVsZW1lbnQuYXR0cihhdHRycyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGFmdGVyLmxlbmd0aCkge1xyXG4gICAgICBlbGVtZW50Lmluc2VydEFmdGVyKGFmdGVyKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGVsZW1lbnQuaW50byhwYXJlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIGFmdGVyID0gbmV3IEVsZW0oKTtcclxuXHJcbiAgICBpZiAoY2hpbGRyZW4pIHtcclxuICAgICAgdHJhbnNmb3JtRElmQ2hpbGRyZW4oY2hpbGRyZW4pLmZvckVhY2goKGNoaWxkKSA9PiB7XHJcbiAgICAgICAgY29uc3QgYmxvY2sgPSBjcmVhdGVCbG9jayh7XHJcbiAgICAgICAgICBub2RlOiBjaGlsZCxcclxuICAgICAgICAgIGFmdGVyLFxyXG4gICAgICAgICAgcGFyZW50OiBlbGVtZW50LFxyXG4gICAgICAgICAgcGFyZW50QmxvY2ssXHJcbiAgICAgICAgICBwYXJlbnRTY29wZVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAoYmxvY2sgaW5zdGFuY2VvZiBCbG9jaykge1xyXG4gICAgICAgICAgYWZ0ZXIgPSBibG9jay4kJC5lbGVtcy5lbmQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGFmdGVyID0gYmxvY2s7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjdXJyZW50TWl4aW5zLmZvckVhY2goKG9wdHMpID0+IHtcclxuICAgICAgY3JlYXRlTWl4aW4ob3B0cyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gZWxlbWVudDtcclxuICB9XHJcblxyXG4gIGNvbnN0IGJsb2NrID0gbm9kZSAmJiBub2RlLm5hbWUgPyBsb2NhbEJsb2Nrc1tub2RlLm5hbWVdIDogbnVsbDtcclxuICBjb25zdCBibG9ja0luc3RhbmNlID0gbmV3IGNvbnN0cnVjdG9yKHtcclxuICAgIG5hbWUsXHJcbiAgICBhcmdzLFxyXG4gICAgY2hpbGRyZW4sXHJcbiAgICBibG9jayxcclxuICAgIHBhcmVudCxcclxuICAgIHBhcmVudEJsb2NrLFxyXG4gICAgcGFyZW50U2NvcGVcclxuICB9KTtcclxuXHJcbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoYmxvY2tJbnN0YW5jZSwge1xyXG4gICAgYXJnczoge1xyXG4gICAgICB2YWx1ZTogYmxvY2tJbnN0YW5jZS5hcmdzXHJcbiAgICB9LFxyXG4gICAgZ2xvYmFsOiB7XHJcbiAgICAgIHZhbHVlOiBibG9ja0luc3RhbmNlLmdsb2JhbFxyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICBsZXQgaHRtbCA9IG5hbWUgPT09ICdkLWVsZW1lbnRzJ1xyXG4gICAgPyBuZXcgQXJyKGJsb2NrSW5zdGFuY2UuYXJncy52YWx1ZSB8fCBbXSlcclxuICAgIDogZGVlcENsb25lQ2hpbGRyZW4oYmxvY2suaHRtbCwgYmxvY2tJbnN0YW5jZSk7XHJcblxyXG4gIGlmIChuYW1lID09PSAnZC1lbGVtZW50cycgJiYgcGFyZW50QmxvY2suJCQubmFtZSA9PT0gJyNkLWl0ZW0nKSB7XHJcbiAgICBodG1sID0gZGVlcENsb25lQ2hpbGRyZW4oaHRtbCwgcGFyZW50QmxvY2spO1xyXG4gIH1cclxuXHJcbiAgY29uc3Qge1xyXG4gICAgJCQsXHJcbiAgICBhcmdzOiBBcmdzLFxyXG4gICAgZ2xvYmFsLFxyXG4gICAgLi4ubG9jYWxzXHJcbiAgfSA9IGJsb2NrSW5zdGFuY2U7XHJcbiAgY29uc3QgZXZlbnR1YWxBcmdzID0ge1xyXG4gICAgLi4uY29uc3RydWN0b3IuZGVmYXVsdEFyZ3MsXHJcbiAgICAuLi5BcmdzXHJcbiAgfTtcclxuXHJcbiAgZGVsZXRlIGxvY2Fscy4kO1xyXG4gIGRlbGV0ZSBsb2NhbHMuJCQ7XHJcblxyXG4gICQkLmFyZ3MgPSBjb25zdHJ1Y3RQcml2YXRlU2NvcGUoZXZlbnR1YWxBcmdzKTtcclxuICAkJC5sb2NhbHMgPSBjb25zdHJ1Y3RQcml2YXRlU2NvcGUobG9jYWxzKTtcclxuICAkJC5nbG9iYWwgPSBjb25zdHJ1Y3RQcml2YXRlU2NvcGUoZ2xvYmFsLCAnZ2xvYmFsJywgcGFyZW50U2NvcGUpO1xyXG5cclxuICBpZiAobmFtZSA9PT0gJyNkLWl0ZW0nKSB7XHJcbiAgICBjb25zdCBzY29wZVZhbHVlcyA9IHtcclxuICAgICAgW25vZGUuaXRlbU5hbWVdOiBub2RlLml0ZW0sXHJcbiAgICAgIFtub2RlLmluZGV4TmFtZV06IG5vZGUuaW5kZXhcclxuICAgIH07XHJcbiAgICBsZXQgcGFyZW50ID0gYmxvY2tJbnN0YW5jZTtcclxuICAgIGxldCBzY29wZSA9IHBhcmVudFNjb3BlO1xyXG4gICAgbGV0IERJdGVtRm91bmQ7XHJcblxyXG4gICAgd2hpbGUgKCFESXRlbUZvdW5kICYmIChwYXJlbnQgPSBwYXJlbnQuJCQucGFyZW50QmxvY2spKSB7XHJcbiAgICAgIERJdGVtRm91bmQgPSBwYXJlbnQuJCQubmFtZSA9PT0gJyNkLWl0ZW0nO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChESXRlbUZvdW5kKSB7XHJcbiAgICAgIHNjb3BlID0gcGFyZW50LiQkLnNjb3BlO1xyXG4gICAgfVxyXG5cclxuICAgICQkLkJsb2NrID0gcGFyZW50U2NvcGUuJCQuQmxvY2s7XHJcbiAgICAkJC5wcml2YXRlU2NvcGUgPSBjb25zdHJ1Y3RQcml2YXRlU2NvcGUoc2NvcGVWYWx1ZXMpO1xyXG4gICAgY29uc3RydWN0UHVibGljU2NvcGUoJCQuc2NvcGUgPSBPYmplY3QuY3JlYXRlKHNjb3BlKSwgc2NvcGVWYWx1ZXMsICQkLnByaXZhdGVTY29wZSk7XHJcbiAgfVxyXG5cclxuICBpZiAobmFtZSA9PT0gJ2QtZWFjaCcpIHtcclxuICAgICQkLnNjb3BlID0gT2JqZWN0LmNyZWF0ZShwYXJlbnRTY29wZSk7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RQdWJsaWNTY29wZShBcmdzLCBldmVudHVhbEFyZ3MsICQkLmFyZ3MpO1xyXG4gIGNvbnN0cnVjdFB1YmxpY1Njb3BlKGdsb2JhbCwgZ2xvYmFsLCAkJC5nbG9iYWwpO1xyXG4gIGNvbnN0cnVjdFB1YmxpY1Njb3BlKGJsb2NrSW5zdGFuY2UsIGxvY2FscywgJCQubG9jYWxzKTtcclxuXHJcbiAgdHJ5IHtcclxuICAgIGJsb2NrSW5zdGFuY2UuYWZ0ZXJDb25zdHJ1Y3QoKTtcclxuICB9IGNhdGNoIChlcnIpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoYFVuY2F1Z2h0IGVycm9yIGluICR7IG5hbWUgfSNhZnRlckNvbnN0cnVjdDpgLCBlcnIpO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgZWxlbXMgPSBuZXcgRWxlbShbXHJcbiAgICAkJC5lbGVtcy5zdGFydCxcclxuICAgICQkLmVsZW1zLmVuZFxyXG4gIF0pO1xyXG5cclxuICBpZiAoYWZ0ZXIubGVuZ3RoKSB7XHJcbiAgICBlbGVtcy5pbnNlcnRBZnRlcihhZnRlcik7XHJcbiAgfSBlbHNlIHtcclxuICAgIGVsZW1zLmludG8ocGFyZW50KTtcclxuICB9XHJcblxyXG4gIGFmdGVyID0gJCQuZWxlbXMuc3RhcnQ7XHJcblxyXG4gIC8vIGNvbnNvbGUubG9nKGJsb2NrSW5zdGFuY2UpO1xyXG5cclxuICB0cmFuc2Zvcm1ESWZDaGlsZHJlbihodG1sKS5mb3JFYWNoKChjaGlsZCkgPT4ge1xyXG4gICAgY29uc3QgYmxvY2sgPSBjcmVhdGVCbG9jayh7XHJcbiAgICAgIG5vZGU6IGNoaWxkLFxyXG4gICAgICBhZnRlcixcclxuICAgICAgcGFyZW50LFxyXG4gICAgICBwYXJlbnRCbG9jazogYmxvY2tJbnN0YW5jZSxcclxuICAgICAgcGFyZW50U2NvcGVcclxuICAgIH0pO1xyXG5cclxuICAgIGlmIChibG9jayBpbnN0YW5jZW9mIEJsb2NrKSB7XHJcbiAgICAgIGNvbnN0IHsgZWxlbXMgfSA9IGJsb2NrLiQkO1xyXG5cclxuICAgICAgYWZ0ZXIgPSBlbGVtcy5lbmQ7XHJcblxyXG4gICAgICAkJC5lbGVtcy5jb250ZW50LmFkZChlbGVtcy5zdGFydCwgZWxlbXMuY29udGVudCwgZWxlbXMuZW5kKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGFmdGVyID0gYmxvY2s7XHJcblxyXG4gICAgICAkJC5lbGVtcy5jb250ZW50LmFkZChibG9jayk7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIHRyeSB7XHJcbiAgICBibG9ja0luc3RhbmNlLmFmdGVyUmVuZGVyKCk7XHJcbiAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKGBVbmNhdWdodCBlcnJvciBpbiAkeyBuYW1lIH0jYWZ0ZXJSZW5kZXI6YCwgZXJyKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBibG9ja0luc3RhbmNlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVNaXhpbih7IG5hbWUsIHZhbHVlLCBtYXRjaCwgZWxlbSwgcGFyZW50QmxvY2ssIHBhcmVudFNjb3BlIH0pIHtcclxuICBjb25zdCBNaXhpbiA9IG1peGluc1tuYW1lXTtcclxuXHJcbiAgbmV3IE1peGluKHtcclxuICAgIHZhbHVlLFxyXG4gICAgbWF0Y2gsXHJcbiAgICBlbGVtLFxyXG4gICAgcGFyZW50QmxvY2ssXHJcbiAgICBwYXJlbnRTY29wZVxyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkZWVwQ2xvbmVDaGlsZHJlbihjaGlsZHJlbiwgYmxvY2spIHtcclxuICByZXR1cm4gbmV3IEFycihjaGlsZHJlbiB8fCBbXSkubWFwKChjaGlsZCkgPT4ge1xyXG4gICAgY29uc3Qge1xyXG4gICAgICBuYW1lLFxyXG4gICAgICBhdHRycyxcclxuICAgICAgdmFsdWUsXHJcbiAgICAgIGNoaWxkcmVuXHJcbiAgICB9ID0gY2hpbGQ7XHJcbiAgICBjb25zdCBuZXdDaGlsZCA9IHtcclxuICAgICAgbmFtZSxcclxuICAgICAgdmFsdWUsXHJcbiAgICAgIGF0dHJzOiB7IC4uLmF0dHJzIH1cclxuICAgIH07XHJcblxyXG4gICAgaWYgKGJsb2NrKSB7XHJcbiAgICAgIG5ld0NoaWxkLmJsb2NrID0gYmxvY2s7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNoaWxkcmVuKSB7XHJcbiAgICAgIG5ld0NoaWxkLmNoaWxkcmVuID0gZGVlcENsb25lQ2hpbGRyZW4oY2hpbGRyZW4sIGJsb2NrKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3Q2hpbGQ7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRyYW5zZm9ybURJZkNoaWxkcmVuKGNoaWxkcmVuKSB7XHJcbiAgcmV0dXJuIG5ldyBBcnIoY2hpbGRyZW4gfHwgW10pXHJcbiAgICAuY29uY2F0KHt9KVxyXG4gICAgLm9iamVjdCgob2JqZWN0LCBjaGlsZCkgPT4ge1xyXG4gICAgICBjb25zdCB7IG5hbWUgfSA9IGNoaWxkO1xyXG4gICAgICBjb25zdCB7XHJcbiAgICAgICAgaHRtbCxcclxuICAgICAgICBpZkVsc2VcclxuICAgICAgfSA9IG9iamVjdDtcclxuXHJcbiAgICAgIGlmIChuYW1lICE9PSAnZC1lbHNlLWlmJyAmJiBuYW1lICE9PSAnZC1lbHNlJykge1xyXG4gICAgICAgIGlmIChpZkVsc2UpIHtcclxuICAgICAgICAgIGh0bWwucHVzaCh7XHJcbiAgICAgICAgICAgIG5hbWU6ICdkLWlmJyxcclxuICAgICAgICAgICAgYmxvY2s6IGlmRWxzZS4kWzBdLmJsb2NrLFxyXG4gICAgICAgICAgICBjaGlsZHJlbjogaWZFbHNlXHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBvYmplY3QuaWZFbHNlID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChuYW1lID09PSAnZC1pZicpIHtcclxuICAgICAgICAgIG9iamVjdC5pZkVsc2UgPSBuZXcgQXJyKFtjaGlsZF0pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoIWlzVW5kZWZpbmVkKG5hbWUpKSB7XHJcbiAgICAgICAgICBodG1sLnB1c2goY2hpbGQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAoaWZFbHNlIHx8IGh0bWwpLnB1c2goY2hpbGQpO1xyXG5cclxuICAgICAgICBpZiAobmFtZSA9PT0gJ2QtZWxzZScgJiYgaWZFbHNlKSB7XHJcbiAgICAgICAgICBodG1sLnB1c2goe1xyXG4gICAgICAgICAgICBuYW1lOiAnZC1pZicsXHJcbiAgICAgICAgICAgIGJsb2NrOiBpZkVsc2UuJFswXS5ibG9jayxcclxuICAgICAgICAgICAgY2hpbGRyZW46IGlmRWxzZVxyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgb2JqZWN0LmlmRWxzZSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LCB7XHJcbiAgICAgIGh0bWw6IG5ldyBBcnIoW10pLFxyXG4gICAgICBpZkVsc2U6IG51bGxcclxuICAgIH0pLiQuaHRtbDtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNJbnN0YW5jZU9mQmxvY2soYmxvY2spIHtcclxuICByZXR1cm4gaXNQcm90b3R5cGVPZi5jYWxsKEJsb2NrLCBibG9jaykgJiYgaXNQcm90b3R5cGVPZi5jYWxsKEJsb2NrLnByb3RvdHlwZSwgYmxvY2sucHJvdG90eXBlKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNJbnN0YW5jZU9mTWl4aW4obWl4aW4pIHtcclxuICByZXR1cm4gaXNQcm90b3R5cGVPZi5jYWxsKE1peGluLCBtaXhpbikgJiYgaXNQcm90b3R5cGVPZi5jYWxsKE1peGluLnByb3RvdHlwZSwgbWl4aW4ucHJvdG90eXBlKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVtb3ZlV2F0Y2hlcnMod2F0Y2hlcnNUb1JlbW92ZSkge1xyXG4gIHdhdGNoZXJzVG9SZW1vdmUuZm9yRWFjaCgoeyB3YXRjaGVyLCB3YXRjaGVycyB9KSA9PiB7XHJcbiAgICBjb25zdCBpbmRleCA9IHdhdGNoZXJzLmluZGV4T2Yod2F0Y2hlcik7XHJcblxyXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xyXG4gICAgICB3YXRjaGVycy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjb25zdHJ1Y3RQcml2YXRlU2NvcGUob2JqZWN0LCB0eXBlLCBwYXJlbnRTY29wZSkge1xyXG4gIGxldCBzY29wZSA9IHt9O1xyXG5cclxuICBpZiAodHlwZSA9PT0gJ2dsb2JhbCcpIHtcclxuICAgIHNjb3BlID0gT2JqZWN0LmNyZWF0ZShcclxuICAgICAgcGFyZW50U2NvcGVcclxuICAgICAgICA/IHBhcmVudFNjb3BlLiQkLmdsb2JhbFxyXG4gICAgICAgIDogbnVsbFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBuZXcgU3VwZXIob2JqZWN0KS5vYmplY3QoKHNjb3BlLCB2YWx1ZSwga2V5KSA9PiB7XHJcbiAgICBzY29wZVtrZXldID0ge1xyXG4gICAgICB2YWx1ZSxcclxuICAgICAgd2F0Y2hlcnM6IHtcclxuICAgICAgICB0ZW1wOiBuZXcgQXJyKFtdKSxcclxuICAgICAgICBwZXJtOiBuZXcgQXJyKFtdKVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH0sIHNjb3BlKS4kO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjb25zdHJ1Y3RQdWJsaWNTY29wZShzY29wZSwgc2NvcGVWYWx1ZXMsIHByaXZhdGVTY29wZSkge1xyXG4gIG5ldyBTdXBlcihzY29wZSkuZGVmaW5lKG5ldyBTdXBlcihzY29wZVZhbHVlcykubWFwKCh2YWx1ZSwga2V5KSA9PiB7XHJcbiAgICBjb25zdCBzY29wZSA9IHByaXZhdGVTY29wZVtrZXldO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGdldCgpIHtcclxuICAgICAgICBpZiAoZXZhbE1vZGUpIHtcclxuICAgICAgICAgIGlmIChnZXR0aW5nLmluZGV4T2Yoc2NvcGUud2F0Y2hlcnMudGVtcCkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgIGdldHRpbmcucHVzaChzY29wZS53YXRjaGVycy50ZW1wKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBzY29wZS52YWx1ZTtcclxuICAgICAgfSxcclxuICAgICAgc2V0KHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlID09PSBzY29wZS52YWx1ZSkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFjaGFuZ2VkKSB7XHJcbiAgICAgICAgICBjaGFuZ2VkID0gW107XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBvbGRUZW1wV2F0Y2hlcnMgPSBzY29wZS53YXRjaGVycy50ZW1wLnNsaWNlKCk7XHJcbiAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSBzY29wZS52YWx1ZTtcclxuXHJcbiAgICAgICAgc2NvcGUud2F0Y2hlcnMudGVtcCA9IG5ldyBBcnIoW10pO1xyXG4gICAgICAgIHNjb3BlLnZhbHVlID0gdmFsdWU7XHJcblxyXG4gICAgICAgIG9sZFRlbXBXYXRjaGVycy5mb3JFYWNoKCh3YXRjaGVyKSA9PiB7XHJcbiAgICAgICAgICB3YXRjaGVyLm9uUmVtb3ZlKCk7XHJcbiAgICAgICAgICB3YXRjaGVyKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY2hhbmdlZC5wdXNoKHtcclxuICAgICAgICAgIHNjb3BlLFxyXG4gICAgICAgICAgb2xkVmFsdWUsXHJcbiAgICAgICAgICB2YWx1ZVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgIGlmICghY2hhbmdlZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgY29uc3Qgd2FzID0gbmV3IEFycihbXSk7XHJcblxyXG4gICAgICAgICAgd2hpbGUgKGNoYW5nZWQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBjaGFuZ2VkLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgICAgY29uc3Qge1xyXG4gICAgICAgICAgICAgICAgc2NvcGUsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZSxcclxuICAgICAgICAgICAgICAgIG9sZFZhbHVlXHJcbiAgICAgICAgICAgICAgfSA9IGNoYW5nZWRbaV07XHJcblxyXG4gICAgICAgICAgICAgIHNjb3BlLndhdGNoZXJzLnBlcm0uZm9yRWFjaCgod2F0Y2hlcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHdhcy5pbmRleE9mKHdhdGNoZXIpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICB3YXRjaGVyKHZhbHVlLCBvbGRWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgIHdhcy5wdXNoKHdhdGNoZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICBjaGFuZ2VkLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGNoYW5nZWQgPSBudWxsO1xyXG4gICAgICAgIH0sIDApO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH0pLiQpO1xyXG59XHJcblxyXG5leHBvcnQgeyBCbG9jaywgTWl4aW4sIGluaXRBcHAgfTtcclxuIiwiLyoqXHJcbiAqIEBtb2R1bGUgY29uc3RhbnRzL2Zvcm1hdHNcclxuICogQHByaXZhdGVcclxuICogQGRlc2NyaXB0aW9uIEV4cG9ydHMgZGlmZmVyZW50IHR5cGVzIG9mIGZvcm1hdHRpbmcgZm9yIHtAbGluayBEYXRlI2Zvcm1hdH0uXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgU3VwZXIgfSBmcm9tICcuLi9TdXBlcic7XHJcbmltcG9ydCB7IFN0ciB9IGZyb20gJy4uL1N0cic7XHJcblxyXG5jb25zdCB6ZXJvID0gbmV3IFN0cignMCcpO1xyXG5jb25zdCBkYXlzT2ZUaGVXZWVrTmFtZXMgPSBbXHJcbiAgJ1N1bmRheScsXHJcbiAgJ01vbmRheScsXHJcbiAgJ1R1ZXNkYXknLFxyXG4gICdXZWRuZXNkYXknLFxyXG4gICdUaHVyc2RheScsXHJcbiAgJ0ZyaWRheScsXHJcbiAgJ1NhdHVyZGF5J1xyXG5dO1xyXG5jb25zdCBkYXlzT2ZUaGVXZWVrQWxpYXNlcyA9IG5ldyBTdXBlcihkYXlzT2ZUaGVXZWVrTmFtZXMpLm1hcCgodmFsdWUpID0+IHZhbHVlLnNsaWNlKDAsIDMpKS4kO1xyXG5jb25zdCBtb250aHNOYW1lcyA9IFtcclxuICAnSmFudWFyeScsXHJcbiAgJ0ZlYnJ1YXJ5JyxcclxuICAnTWFyY2gnLFxyXG4gICdBcHJpbCcsXHJcbiAgJ01heScsXHJcbiAgJ0p1bmUnLFxyXG4gICdKdWxlJyxcclxuICAnQXVndXN0JyxcclxuICAnU2VwdGVtYmVyJyxcclxuICAnT2N0b2JlcicsXHJcbiAgJ05vdmVtYmVyJyxcclxuICAnRGVjZW1iZXInXHJcbl07XHJcbmNvbnN0IG1vbnRoc0FsaWFzZXMgPSBuZXcgU3VwZXIobW9udGhzTmFtZXMpLm1hcCgodmFsdWUpID0+IHZhbHVlLnNsaWNlKDAsIDMpKS4kO1xyXG5cclxuLyoqXHJcbiAqIEBjYWxsYmFjayBtb2R1bGU6Y29uc3RhbnRzL2Zvcm1hdHN+bWF0Y2hDYWxsYmFja1xyXG4gKiBAcGFyYW0ge0RhdH0gZGF0ZSAtIEQtd3JhcCBvZiBhIGRhdGUgdG8gYXBwbHkgZm9ybWF0IHRvLlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nIC0gTWF0Y2hlZCBhcHBsaWVkIGV4cHJlc3Npb24uXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEB0eXBlZGVmIHtPYmplY3R9IG1vZHVsZTpjb25zdGFudHMvZm9ybWF0c35mb3JtYXRFeHByXHJcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBmb3JtYXQgLSBNYXRjaGVkIGZvcm1hdC5cclxuICogQHByb3BlcnR5IHttb2R1bGU6Y29uc3RhbnRzL2Zvcm1hdHN+bWF0Y2hDYWxsYmFja30gbWF0Y2ggLSBDYWxsYmFjayBpZiB0aGVyZSB3YXMgYSBtYXRjaC5cclxuICovXHJcblxyXG4vKipcclxuICogQHR5cGUge21vZHVsZTpjb25zdGFudHMvZm9ybWF0c35mb3JtYXRFeHByW119XHJcbiAqIEBkZXNjcmlwdGlvbiBBcnJheSBvZiBkaWZmZXJlbnQgZm9ybWF0cy5cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IFtcclxuICB7XHJcbiAgICBmb3JtYXQ6ICdjY2MnLFxyXG4gICAgbWF0Y2g6IChkYXRlLCB1dGMpID0+IHJvdW5kKGRhdGVbdXRjXSgnYycpLCAzKVxyXG4gIH0sXHJcbiAge1xyXG4gICAgZm9ybWF0OiAnYycsXHJcbiAgICBtYXRjaDogKGRhdGUsIHV0YykgPT4gZGF0ZVt1dGNdKCdjJylcclxuICB9LFxyXG4gIHtcclxuICAgIGZvcm1hdDogJ3NzJyxcclxuICAgIG1hdGNoOiAoZGF0ZSwgdXRjKSA9PiByb3VuZChkYXRlW3V0Y10oJ3MnKSwgMilcclxuICB9LFxyXG4gIHtcclxuICAgIGZvcm1hdDogJ3MnLFxyXG4gICAgbWF0Y2g6IChkYXRlLCB1dGMpID0+IGRhdGVbdXRjXSgncycpXHJcbiAgfSxcclxuICB7XHJcbiAgICBmb3JtYXQ6ICdtbScsXHJcbiAgICBtYXRjaDogKGRhdGUsIHV0YykgPT4gcm91bmQoZGF0ZVt1dGNdKCdtJyksIDIpXHJcbiAgfSxcclxuICB7XHJcbiAgICBmb3JtYXQ6ICdtJyxcclxuICAgIG1hdGNoOiAoZGF0ZSwgdXRjKSA9PiBkYXRlW3V0Y10oJ20nKVxyXG4gIH0sXHJcbiAge1xyXG4gICAgZm9ybWF0OiAnaGgnLFxyXG4gICAgbWF0Y2g6IChkYXRlLCB1dGMpID0+IHJvdW5kKGRhdGVbdXRjXSgnaCcpLCAyKVxyXG4gIH0sXHJcbiAge1xyXG4gICAgZm9ybWF0OiAnaCcsXHJcbiAgICBtYXRjaDogKGRhdGUsIHV0YykgPT4gZGF0ZVt1dGNdKCdoJylcclxuICB9LFxyXG4gIHtcclxuICAgIGZvcm1hdDogJ2RkZGQnLFxyXG4gICAgbWF0Y2g6IChkYXRlLCB1dGMpID0+IGRheXNPZlRoZVdlZWtOYW1lc1tkYXRlW3V0Y10oJ2R3JyldXHJcbiAgfSxcclxuICB7XHJcbiAgICBmb3JtYXQ6ICdkZGQnLFxyXG4gICAgbWF0Y2g6IChkYXRlLCB1dGMpID0+IGRheXNPZlRoZVdlZWtBbGlhc2VzW2RhdGVbdXRjXSgnZHcnKV1cclxuICB9LFxyXG4gIHtcclxuICAgIGZvcm1hdDogJ2RkJyxcclxuICAgIG1hdGNoOiAoZGF0ZSwgdXRjKSA9PiByb3VuZChkYXRlW3V0Y10oJ2QnKSwgMilcclxuICB9LFxyXG4gIHtcclxuICAgIGZvcm1hdDogJ2QnLFxyXG4gICAgbWF0Y2g6IChkYXRlLCB1dGMpID0+IGRhdGVbdXRjXSgnZCcpXHJcbiAgfSxcclxuICB7XHJcbiAgICBmb3JtYXQ6ICdNTU1NJyxcclxuICAgIG1hdGNoOiAoZGF0ZSwgdXRjKSA9PiBtb250aHNOYW1lc1tkYXRlW3V0Y10oJ00nKSAtIDFdXHJcbiAgfSxcclxuICB7XHJcbiAgICBmb3JtYXQ6ICdNTU0nLFxyXG4gICAgbWF0Y2g6IChkYXRlLCB1dGMpID0+IG1vbnRoc0FsaWFzZXNbZGF0ZVt1dGNdKCdNJykgLSAxXVxyXG4gIH0sXHJcbiAge1xyXG4gICAgZm9ybWF0OiAnTU0nLFxyXG4gICAgbWF0Y2g6IChkYXRlLCB1dGMpID0+IHJvdW5kKGRhdGVbdXRjXSgnTScpLCAyKVxyXG4gIH0sXHJcbiAge1xyXG4gICAgZm9ybWF0OiAnTScsXHJcbiAgICBtYXRjaDogKGRhdGUsIHV0YykgPT4gZGF0ZVt1dGNdKCdNJylcclxuICB9LFxyXG4gIHtcclxuICAgIGZvcm1hdDogJ3l5eXknLFxyXG4gICAgbWF0Y2g6IChkYXRlLCB1dGMpID0+IHJvdW5kKGRhdGVbdXRjXSgneScpLCA0KVxyXG4gIH0sXHJcbiAge1xyXG4gICAgZm9ybWF0OiAneXknLFxyXG4gICAgbWF0Y2g6IChkYXRlLCB1dGMpID0+IFN0cmluZyhkYXRlW3V0Y10oJ3knKSkuc2xpY2UoLTIpXHJcbiAgfSxcclxuICB7XHJcbiAgICBmb3JtYXQ6ICd5JyxcclxuICAgIG1hdGNoOiAoZGF0ZSwgdXRjKSA9PiBkYXRlW3V0Y10oJ3knKVxyXG4gIH1cclxuXTtcclxuXHJcbi8qKlxyXG4gKiBAZnVuY3Rpb24gcm91bmRcclxuICogQHByaXZhdGVcclxuICogQHBhcmFtIHtOdW1iZXJ9IG51bWJlciAtIE51bWJlciB0byByb3VuZC5cclxuICogQHBhcmFtIHtOdW1iZXJ9IGRpZ2l0cyAtIE51bWJlciBvZiB0aGUgZGlnaXRzIG9mIHRoZSBvdXRwdXQuXHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9IFN0cmluZyB3aXRoIG5lY2Vzc2FyeSBhZGRpdGlvbmFsIHN0YXJ0aW5nIHplcm9lcy5cclxuICovXHJcbmZ1bmN0aW9uIHJvdW5kKG51bWJlciwgZGlnaXRzKSB7XHJcbiAgY29uc3Qgc3RyaW5nID0gU3RyaW5nKG51bWJlcik7XHJcbiAgbGV0IHplcm9lcyA9IGRpZ2l0cyAtIHN0cmluZy5sZW5ndGg7XHJcblxyXG4gIHplcm9lcyA9IHplcm9lcyA8IDAgPyAwIDogemVyb2VzO1xyXG5cclxuICByZXR1cm4gemVyby5yZXBlYXQoemVyb2VzKS4kICsgc3RyaW5nO1xyXG59XHJcbiIsIi8qKlxyXG4gKiBAbW9kdWxlIERhdFxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAbWl4aW5cclxuICogQGRlc2NyaXB0aW9uIEV4cG9ydHMgRGF0IGNsYXNzLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IFN1cGVyIH0gZnJvbSAnLi9TdXBlcic7XHJcbmltcG9ydCB7IE51bSB9IGZyb20gJy4vTnVtJztcclxuaW1wb3J0IHsgU3RyIH0gZnJvbSAnLi9TdHInO1xyXG5pbXBvcnQgeyBzd2l0Y2hlciB9IGZyb20gJy4vU3dpdGNoZXInO1xyXG5pbXBvcnQgeyBjb25zdHJ1Y3RvcnMgfSBmcm9tICcuL2NvbnN0YW50cyc7XHJcbmltcG9ydCBmb3JtYXRzIGZyb20gJy4vY29uc3RhbnRzL2Zvcm1hdHMnO1xyXG5pbXBvcnQgeyBpc0RhdGUsIGl0ZXJhdGUsIFN5bWJvbCwgZGVmaW5lUHJvcGVydGllcyB9IGZyb20gJy4vaGVscGVycyc7XHJcblxyXG4vKipcclxuICogQHR5cGVkZWYgeyp9IERhdGVMaWtlXHJcbiAqIEBwdWJsaWNcclxuICovXHJcblxyXG4vKipcclxuICogQHR5cGVkZWYgeydjJ3wncyd8J20nfCdoJ3wnZCd8J3cnfCdNJ3wneSd9IEFkZFBlcmlvZFxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEB0eXBlZGVmIHsnYyd8J3MnfCdtJ3wnaCd8J2QnfCdkdyd8J00nfCd5J30gR2V0UGVyaW9kXHJcbiAqIEBwdWJsaWNcclxuICovXHJcblxyXG4vKipcclxuICogQHR5cGVkZWYgeydjJ3wncyd8J20nfCdoJ3wnZCd8J00nfCd5J30gT2ZPbmVQZXJpb2RcclxuICogQHB1YmxpY1xyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAdHlwZWRlZiB7J2MnfCdzJ3wnbSd8J2gnfCdkJ3wnTSd8J3knfSBTZXRQZXJpb2RcclxuICogQHB1YmxpY1xyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAdHlwZWRlZiB7J2NjYyd8J2MnfCdzcyd8J3MnfCdtbSd8J20nfCdoaCd8J2gnfCdkZGRkJ3wnZGRkJ3wnZGQnfCdkJ3wnTU1NTSd8J01NTSd8J01NJ3wnTSd8J3l5eXknfCd5eSd8J3knfSBGb3JtYXRcclxuICogQHB1YmxpY1xyXG4gKi9cclxuXHJcbmNvbnN0IGNvZWZmcyA9IHtcclxuICBjOiAxLFxyXG4gIHM6IDEwMDAsXHJcbiAgbTogNjAwMDAsXHJcbiAgaDogMzYwMDAwMCxcclxuICBkOiA4NjQwMDAwMCxcclxuICB3OiA2MDQ4MDAwMDAsXHJcbiAgTTogMjU5MjAwMDAwMCxcclxuICB5OiAzMTUzNjAwMDAwMFxyXG59O1xyXG5cclxuY29uc3QgZ2V0U3dpdGNoZXIgPSBzd2l0Y2hlcih7XHJcbiAgYzogKGRhdGUsIHV0YykgPT4gZGF0ZVtgJHsgdXRjIH1NaWxsaXNlY29uZHNgXSgpLFxyXG4gIHM6IChkYXRlLCB1dGMpID0+IGRhdGVbYCR7IHV0YyB9U2Vjb25kc2BdKCksXHJcbiAgbTogKGRhdGUsIHV0YykgPT4gZGF0ZVtgJHsgdXRjIH1NaW51dGVzYF0oKSxcclxuICBoOiAoZGF0ZSwgdXRjKSA9PiBkYXRlW2AkeyB1dGMgfUhvdXJzYF0oKSxcclxuICBkOiAoZGF0ZSwgdXRjKSA9PiBkYXRlW2AkeyB1dGMgfURhdGVgXSgpLFxyXG4gIGR3OiAoZGF0ZSwgdXRjKSA9PiBkYXRlW2AkeyB1dGMgfURheWBdKCksXHJcbiAgTTogKGRhdGUsIHV0YykgPT4gZGF0ZVtgJHsgdXRjIH1Nb250aGBdKCkgKyAxLFxyXG4gIHk6IChkYXRlLCB1dGMpID0+IGRhdGVbYCR7IHV0YyB9RnVsbFllYXJgXSgpXHJcbn0sICdlcXVhbHMnLCBOYU4pO1xyXG5jb25zdCBzZXRTd2l0Y2hlciA9IHN3aXRjaGVyKHtcclxuICBjOiAoZGF0ZSwgdmFsdWUsIHV0YykgPT4gZGF0ZVtgJHsgdXRjIH1NaWxsaXNlY29uZHNgXSh2YWx1ZSksXHJcbiAgczogKGRhdGUsIHZhbHVlLCB1dGMpID0+IGRhdGVbYCR7IHV0YyB9U2Vjb25kc2BdKHZhbHVlKSxcclxuICBtOiAoZGF0ZSwgdmFsdWUsIHV0YykgPT4gZGF0ZVtgJHsgdXRjIH1NaW51dGVzYF0odmFsdWUpLFxyXG4gIGg6IChkYXRlLCB2YWx1ZSwgdXRjKSA9PiBkYXRlW2AkeyB1dGMgfUhvdXJzYF0odmFsdWUpLFxyXG4gIGQ6IChkYXRlLCB2YWx1ZSwgdXRjKSA9PiBkYXRlW2AkeyB1dGMgfURhdGVgXSh2YWx1ZSksXHJcbiAgTTogKGRhdGUsIHZhbHVlLCB1dGMpID0+IGRhdGVbYCR7IHV0YyB9TW9udGhgXSh2YWx1ZSAtIDEpLFxyXG4gIHk6IChkYXRlLCB2YWx1ZSwgdXRjKSA9PiBkYXRlW2AkeyB1dGMgfUZ1bGxZZWFyYF0odmFsdWUpXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBjbGFzcyBEYXRcclxuICogQGV4dGVuZHMgU3VwZXJcclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0ge0RhdGV9IFtkYXRlID0gbmV3IERhdGUoKV0gLSBBIGRhdGUgdG8gd3JhcC5cclxuICogQHJldHVybnMge0RhdH0gSW5zdGFuY2Ugb2YgRGF0LlxyXG4gKiBAZGVzY3JpcHRpb24gV3JhcCBvZiBhIGRhdGUuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIGNvbnN0IGRhdGUgPSBuZXcgRGF0KG5ldyBEYXRlKCkpO1xyXG4gKi9cclxuY2xhc3MgRGF0IGV4dGVuZHMgU3VwZXIge1xyXG4gIGNvbnN0cnVjdG9yKGRhdGUgPSBuZXcgRGF0ZSgpKSB7XHJcbiAgICBzdXBlcihkYXRlKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBtZW1iZXIgRGF0IyRcclxuICAgICAqIEB0eXBlIHtEYXRlfVxyXG4gICAgICogQHB1YmxpY1xyXG4gICAgICogQGRlc2NyaXB0aW9uIE9yaWdpbmFsIGRhdGUuXHJcbiAgICAgKi9cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRGF0I2FkZFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge0FkZFBlcmlvZHxPYmplY3QuPEFkZFBlcmlvZCwgTnVtYmVyPn0gd2hhdCAtIFdoYXQgdG8gYWRkLlxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbbnVtYmVyXSAtIE51bWJlciBvZiB3aGF0IHRvIGFkZCBpZiB0aGUgZmlyc3QgYXJndW1lbnQgaXMgYSBwZXJpb2Qgc3RyaW5nLlxyXG4gICAqIEByZXR1cm5zIHtEYXR9IFJldHVybnMgdGhpcy5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIGZvciBhZGRpbmcgYW1vdW50cyBvZiB0aW1lIHRvIHRoZSBkYXRlLiBSZXR1cm5zIG5ldyBpbnN0YW5jZSBvZiBEYXQuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBEYXQobmV3IERhdGUoJzE5OTktMTItMzFUMjM6NTk6NTkuOTk5WicpKS5hZGQoJ2MnLCAyKS50b0lTT1N0cmluZygpOyAgICAgICAgIC8vICcyMDAwLTAxLTAxVDAwOjAwOjAwLjAwMVonXHJcbiAgICogbmV3IERhdChuZXcgRGF0ZSgnMTk5OS0xMi0zMVQyMzo1OTo1OS45OTlaJykpLmFkZCh7IGM6IDIsIGQ6IDUgfSkudG9JU09TdHJpbmcoKTsgLy8gJzIwMDAtMDEtMDZUMDA6MDA6MDAuMDAxWidcclxuICAgKi9cclxuICBhZGQod2hhdCwgbnVtYmVyKSB7XHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAyKSB7XHJcbiAgICAgIHdoYXQgPSB7IFt3aGF0XTogbnVtYmVyIH07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMudGltZSh0aGlzLnRpbWUoKSArIG5ldyBTdXBlcih3aGF0KS5zdW0oKHZhbHVlLCB3aGF0KSA9PiBjb2VmZnNbd2hhdF0gKiB2YWx1ZSkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBEYXQjZXhwaXJlc1xyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0geyp9IFt2YWx1ZSA9IHRoaXNdIC0gVmFsdWUgdG8gcmVzb2x2ZSBhZnRlciB0aGUgZGF0ZSBleHBpcmVzLlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBOZXcgaW5zdGFuY2Ugb2YgUHJvbWlzZS5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIGZvciBkZWZpbmluZyB3aGVuIHRoZSBkYXRlIGV4cGlyZXMuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBEYXQoKS5hZGQoJ2MnLCA1MDApLmV4cGlyZXMoJ0V4cGlyZWQnKS50aGVuKCh2YWx1ZSkgPT4ge1xyXG4gICAqICAgLy8gQWZ0ZXIgNTAwIG1pbGxpc2Vjb25kc1xyXG4gICAqICAgY29uc29sZS5sb2codmFsdWUpOyAvLyAnRXhwaXJlZCdcclxuICAgKiB9KTtcclxuICAgKi9cclxuICBleHBpcmVzKHZhbHVlKSB7XHJcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgdmFsdWUgPSB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXcgTnVtKHRoaXMuJCAtIG5vdygpKS50aW1lb3V0KHZhbHVlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRGF0I2Zvcm1hdFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nIC0gVGVtcGxhdGUgZm9yIHRoZSBvdXRwdXQuXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IFtwcmVmaXggPSAnJ10gLSBJZiBuZWVkZWQgW2FsbCBzcGVjaWFsIHN0cmluZ3Nde0BsaW5rIEZvcm1hdH1cclxuICAgKiBhcmUgdHJlYXRlZCBhcyB0aGV5IHNob3VsZCBiZSBwcmVmaXggd2l0aCBwcmVmaXguXHJcbiAgICogQHJldHVybnMge1N0cmluZ30gRm9ybWF0dGVkIHN0cmluZy5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIGZvciBjcmVhdGluZyBmb3JtYXR0ZWQgb3V0cHV0IGJhc2VkIG9uIGEgc3RyaW5nLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgRGF0KCcxOTk5LTEyLTMxVDIzOjU5OjU5Ljk5OVonKS5mb3JtYXQoJ1NlY29uZHM6ICRzcywgbWlsbGlzZWNvbmRzOiAkY2NjLicsICckJyk7XHJcbiAgICogLy8gJ1NlY29uZHM6IDU5LCBtaWxsaXNlY29uZHM6IDk5OS4nXHJcbiAgICovXHJcbiAgZm9ybWF0KHN0cmluZywgcHJlZml4ID0gJycpIHtcclxuICAgIHN0cmluZyA9IG5ldyBTdHIobmV3IFN1cGVyKHN0cmluZykuJCk7XHJcbiAgICBwcmVmaXggPSBTdHJpbmcobmV3IFN1cGVyKHByZWZpeCkuJCk7XHJcblxyXG4gICAgaXRlcmF0ZShmb3JtYXRzLCAoZm9ybWF0KSA9PiB7XHJcbiAgICAgIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlU3RyaW5nKHByZWZpeCArIGZvcm1hdC5mb3JtYXQsIGZvcm1hdC5tYXRjaCh0aGlzLCAnZ2V0JykpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHN0cmluZy4kO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBEYXQjZm9ybWF0VVRDXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmcgLSBTZWUge0BsaW5rIERhdCNmb3JtYXR9LlxyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbcHJlZml4ID0gJyddIC0gU2VlIHtAbGluayBEYXQjZm9ybWF0fS5cclxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSBGb3JtYXR0ZWQgc3RyaW5nLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBVVEMgdmVyc2lvbiBvZiB7QGxpbmsgRGF0I2Zvcm1hdH0uXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBEYXQoJzE5OTktMDctMDdUMDM6MDk6MDkuMDk5WicpLmZvcm1hdFVUQyhcclxuICAgKiAgIGBcclxuICAgKiAgICAgTWlsbGlzZWNvbmRzOiAkY2NjfCRjLlxyXG4gICAqICAgICBTZWNvbmRzOiAgICAgICRzc3wkcy5cclxuICAgKiAgICAgTWludXRlczogICAgICAkbW18JG0uXHJcbiAgICogICAgIEhvdXJzOiAgICAgICAgJGhofCRoLlxyXG4gICAqICAgICBEYXk6ICAgICAgICAgICRkZGRkfCRkZGR8JGRkfCRkLlxyXG4gICAqICAgICBNb250aDogICAgICAgICRNTU1NfCRNTU18JE1NfCRNLlxyXG4gICAqICAgICBZZWFyOiAgICAgICAgICR5eXl5fCR5eXwkeS5cclxuICAgKiAgIGAsXHJcbiAgICogICAnJCdcclxuICAgKiApO1xyXG4gICAqIC8vIE1pbGxpc2Vjb25kczogMDk5fDk5LlxyXG4gICAqIC8vIFNlY29uZHM6ICAgICAgMDl8OS5cclxuICAgKiAvLyBNaW51dGVzOiAgICAgIDA5fDkuXHJcbiAgICogLy8gSG91cnM6ICAgICAgICAwM3wzLlxyXG4gICAqIC8vIERheTogICAgICAgICAgRnJpZGF5fEZyaXwwN3w3LlxyXG4gICAqIC8vIE1vbnRoOiAgICAgICAgSnVseXxKdWx8MDd8Ny5cclxuICAgKiAvLyBZZWFyOiAgICAgICAgIDE5OTl8OTl8MTk5OS5cclxuICAgKi9cclxuICBmb3JtYXRVVEMoc3RyaW5nLCBwcmVmaXggPSAnJykge1xyXG4gICAgc3RyaW5nID0gbmV3IFN0cihuZXcgU3VwZXIoc3RyaW5nKS4kKTtcclxuICAgIHByZWZpeCA9IFN0cmluZyhuZXcgU3VwZXIocHJlZml4KS4kKTtcclxuXHJcbiAgICBpdGVyYXRlKGZvcm1hdHMsIChmb3JtYXQpID0+IHtcclxuICAgICAgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2VTdHJpbmcocHJlZml4ICsgZm9ybWF0LmZvcm1hdCwgZm9ybWF0Lm1hdGNoKHRoaXMsICdnZXRVVEMnKSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gc3RyaW5nLiQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIERhdCNnZXRcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtHZXRQZXJpb2R9IHdoYXQgLSBXaGF0IHRvIGdldC5cclxuICAgKiBAcmV0dXJucyB7TnVtYmVyfSBOdW1iZXIgb2Ygd2hhdCB0byBnZXQuXHJcbiAgICogQGRlc2NyaXB0aW9uIE1ldGhvZCBmb3IgZ2V0dGluZyB2YWx1ZXMgc3VjaCBhcyBzZWNvbmRzIG9yIG1pbnV0ZXMuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBEYXQobmV3IERhdGUoJzE5OTktMTItMzFUMjM6NTk6NTkuOTk5WicpKS5nZXQoJ3MnKTsgLy8gNTlcclxuICAgKi9cclxuICBnZXQod2hhdCkge1xyXG4gICAgcmV0dXJuIGdldFN3aXRjaGVyKHdoYXQsIFt0aGlzLiQsICdnZXQnXSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIERhdCNnZXRVVENcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtHZXRQZXJpb2R9IHdoYXQgLSBTZWUge0BsaW5rIERhdCNnZXR9LlxyXG4gICAqIEByZXR1cm5zIHtOdW1iZXJ9IE51bWJlciBvZiB3aGF0IHRvIGdldC5cclxuICAgKiBAZGVzY3JpcHRpb24gVVRDIHZlcnNpb24gb2Yge0BsaW5rIERhdCNnZXR9LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBjb25zdCBkYXRlID0gbmV3IERhdChuZXcgRGF0ZSgnMTk5OS0xMi0zMVQyMzo1OTo1OS45OTlaJykpO1xyXG4gICAqXHJcbiAgICogZGF0ZS5nZXRVVEMoJ2MnKTsgIC8vIDk5OVxyXG4gICAqIGRhdGUuZ2V0VVRDKCdzJyk7ICAvLyA1OVxyXG4gICAqIGRhdGUuZ2V0VVRDKCdtJyk7ICAvLyA1OVxyXG4gICAqIGRhdGUuZ2V0VVRDKCdoJyk7ICAvLyAyM1xyXG4gICAqIGRhdGUuZ2V0VVRDKCdkJyk7ICAvLyAzMVxyXG4gICAqIGRhdGUuZ2V0VVRDKCdkdycpOyAvLyA1XHJcbiAgICogZGF0ZS5nZXRVVEMoJ00nKTsgIC8vIDEyXHJcbiAgICogZGF0ZS5nZXRVVEMoJ3knKTsgIC8vIDE5OTlcclxuICAgKi9cclxuICBnZXRVVEMod2hhdCkge1xyXG4gICAgcmV0dXJuIGdldFN3aXRjaGVyKHdoYXQsIFt0aGlzLiQsICdnZXRVVEMnXSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIERhdCNpc0FmdGVyXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7RGF0ZUxpa2V9IGRhdGUgLSBEYXRlIHRvIGJlIGNvbXBhcmVkIHRvIHRoaXMgZGF0ZS5cclxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gSWYgdGhpcyBkYXRlIGlzIGFmdGVyIHRoZSBhcmd1bWVudCBvbmUuXHJcbiAgICogQGRlc2NyaXB0aW9uIEZpbmRzIG91dCBpZiB0aGlzIGRhdGUgaXMgYWZ0ZXIgdGhlIGFyZ3VtZW50IG9uZS5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogbmV3IERhdChuZXcgRGF0ZSgzMzMpKS5pc0FmdGVyKG5ldyBEYXRlKDMzNCkpOyAvLyBmYWxzZVxyXG4gICAqIG5ldyBEYXQobmV3IERhdGUoMzMzKSkuaXNBZnRlcihuZXcgRGF0ZSgzMzIpKTsgLy8gdHJ1ZVxyXG4gICAqL1xyXG4gIGlzQWZ0ZXIoZGF0ZSkge1xyXG4gICAgZGF0ZSA9IG5ldyBEYXRlKG5ldyBTdXBlcihkYXRlKS4kKTtcclxuXHJcbiAgICByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgPCB0aGlzLiQuZ2V0VGltZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBEYXQjaXNCZWZvcmVcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtEYXRlTGlrZX0gZGF0ZSAtIERhdGUgdG8gYmUgY29tcGFyZWQgdG8gdGhpcyBkYXRlLlxyXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBJZiB0aGlzIGRhdGUgaXMgYmVmb3JlIHRoZSBhcmd1bWVudCBvbmUuXHJcbiAgICogQGRlc2NyaXB0aW9uIEZpbmRzIG91dCBpZiB0aGlzIGRhdGUgaXMgYmVmb3JlIHRoZSBhcmd1bWVudCBvbmUuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBEYXQobmV3IERhdGUoMzMzKSkuaXNCZWZvcmUobmV3IERhdGUoMzM0KSk7IC8vIHRydWVcclxuICAgKiBuZXcgRGF0KG5ldyBEYXRlKDMzMykpLmlzQmVmb3JlKG5ldyBEYXRlKDMzMikpOyAvLyBmYWxzZVxyXG4gICAqL1xyXG4gIGlzQmVmb3JlKGRhdGUpIHtcclxuICAgIGRhdGUgPSBuZXcgRGF0ZShuZXcgU3VwZXIoZGF0ZSkuJCk7XHJcblxyXG4gICAgcmV0dXJuIGRhdGUuZ2V0VGltZSgpID4gdGhpcy4kLmdldFRpbWUoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRGF0I2lzQmV0d2VlblxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge0RhdGVMaWtlfSBkYXRlMSAtIFN0YXJ0IG9mIHRoZSByYW5nZS5cclxuICAgKiBAcGFyYW0ge0RhdGVMaWtlfSBkYXRlMiAtIEVuZCBvZiB0aGUgcmFuZ2UuXHJcbiAgICogQHJldHVybnMge0Jvb2xlYW59IElmIHRoaXMgZGF0ZSBpcyBhZnRlciBkYXRlMSBhbmQgYmVmb3JlIGRhdGUyLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBGaW5kcyBvdXQgaWYgdGhpcyBkYXRlIGlzIGFmdGVyIGRhdGUxIGFuZCBiZWZvcmUgZGF0ZTIuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBEYXQobmV3IERhdGUoMzMzKSkuaXNCZXR3ZWVuKG5ldyBEYXRlKDMzMiksIG5ldyBEYXRlKDMzNCkpOyAvLyB0cnVlXHJcbiAgICogbmV3IERhdChuZXcgRGF0ZSgzMzMpKS5pc0JldHdlZW4obmV3IERhdGUoMzM0KSwgbmV3IERhdGUoMzMyKSk7IC8vIGZhbHNlXHJcbiAgICovXHJcbiAgaXNCZXR3ZWVuKGRhdGUxLCBkYXRlMikge1xyXG4gICAgY29uc3QgdGltZSA9IHRoaXMuJC5nZXRUaW1lKCk7XHJcblxyXG4gICAgZGF0ZTEgPSBuZXcgRGF0ZShuZXcgU3VwZXIoZGF0ZTEpLiQpO1xyXG4gICAgZGF0ZTIgPSBuZXcgRGF0ZShuZXcgU3VwZXIoZGF0ZTIpLiQpO1xyXG5cclxuICAgIHJldHVybiB0aW1lID4gZGF0ZTEuZ2V0VGltZSgpICYmIHRpbWUgPCBkYXRlMi5nZXRUaW1lKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIERhdCNpc0ludmFsaWRcclxuICAgKiBAcHVibGljXHJcbiAgICogQHJldHVybnMge0Jvb2xlYW59IElmIHRoZSBkYXRlIGlzIGludmFsaWQuXHJcbiAgICogQGRlc2NyaXB0aW9uIFJldHVybnMgaWYgdGhlIGRhdGUgaXMgaW52YWxpZC5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogbmV3IERhdChuZXcgRGF0ZSgnYScpKS5pc0ludmFsaWQoKTsgLy8gdHJ1ZVxyXG4gICAqIG5ldyBEYXQobmV3IERhdGUoMSkpLmlzSW52YWxpZCgpOyAgIC8vIGZhbHNlXHJcbiAgICovXHJcbiAgaXNJbnZhbGlkKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuJC50b1N0cmluZygpID09PSAnSW52YWxpZCBEYXRlJztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRGF0I2lzUGFzc2VkXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBJZiB0aGUgZGF0ZSBpcyBwYXNzZWQuXHJcbiAgICogQGRlc2NyaXB0aW9uIFJldHVybnMgaWYgdGhlIGRhdGUgaXMgcGFzc2VkLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgRGF0KG5ldyBEYXRlKDEpKS5pc1Bhc3NlZCgpOyAvLyB0cnVlXHJcbiAgICovXHJcbiAgaXNQYXNzZWQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5pc0JlZm9yZShub3coKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIERhdCNvZk9uZVxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge09mT25lUGVyaW9kfSB3aGF0IC0gUGVyaW9kIHRvIGNoZWNrLlxyXG4gICAqIEBwYXJhbSB7RGF0ZUxpa2V9IGRhdGUgLSBEYXRlIHRvIGNoZWNrLlxyXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBJZiB0d28gZGF0ZXMgYXJlIG9mIG9uZSBzZWNvbmQsIG1pbnV0ZSBvciBzb21ldGhpbmcgZWxzZS5cclxuICAgKiBAZGVzY3JpcHRpb24gUmV0dXJucyBpZiB0d28gZGF0ZXMgYXJlIG9mIG9uZSBzZWNvbmQsIG1pbnV0ZSBvciBzb21ldGhpbmcgZWxzZS5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogbmV3IERhdChuZXcgRGF0ZSgnMTk5OS0xMi0zMVQyMzo1OTo1OS4wMDBaJykpLm9mT25lKCdzJywgbmV3IERhdGUoMTk5OS0xMi0zMVQyMzo1OTo1OS4zMzNaJykpOyAvLyB0cnVlXHJcbiAgICogbmV3IERhdChuZXcgRGF0ZSgnMTk5OS0xMi0zMVQyMzo1OTo1OS4wMDBaJykpLm9mT25lKCdzJywgbmV3IERhdGUoMTk5OS0xMi0zMVQyMzo1OTo1OC45OTlaJykpOyAvLyBmYWxzZVxyXG4gICAqL1xyXG4gIG9mT25lKHdoYXQsIGRhdGUpIHtcclxuICAgIGlmICghKHdoYXQgaW4gY29lZmZzKSB8fCB3aGF0ID09PSAndycpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGRhdGUgPSBuZXcgRGF0KG5ldyBEYXRlKGRhdGUpKTtcclxuXHJcbiAgICBsZXQgc3RhcnRlZDtcclxuXHJcbiAgICByZXR1cm4gaXRlcmF0ZShjb2VmZnMsIChjb2VmZiwgdykgPT4ge1xyXG4gICAgICBpZiAodyA9PT0gd2hhdCkge1xyXG4gICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIXN0YXJ0ZWQgfHwgdyA9PT0gJ3cnKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoc3RhcnRlZCAmJiB0aGlzLmdldCh3KSAhPT0gZGF0ZS5nZXQodykpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH0pICE9PSBmYWxzZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRGF0I3NldFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1NldFBlcmlvZHxPYmplY3QuPFNldFBlcmlvZCwgTnVtYmVyPn0gd2hhdCAtIFdoYXQgdG8gYWRkLlxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbbnVtYmVyXSAtIE51bWJlciBvZiB3aGF0IHRvIHNldCBpZiB0aGUgZmlyc3QgYXJndW1lbnQgaXMgYSBwZXJpb2Qgc3RyaW5nLlxyXG4gICAqIEByZXR1cm5zIHtEYXR9IFJldHVybnMgdGhpcy5cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIGZvciBzZXR0aW5nIHZhbHVlcyBzdWNoIGFzIHNlY29uZHMgb3IgbWludXRlcy5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogbmV3IERhdChuZXcgRGF0ZSgnMTk5OS0xMi0zMVQyMzo1OTo1OS45OTlaJykpLnNldCgncycsIDU4KS5nZXQoJ3MnKTsgICAgICAgICAgIC8vIDU4XHJcbiAgICogbmV3IERhdChuZXcgRGF0ZSgnMTk5OS0xMi0zMVQyMzo1OTo1OS45OTlaJykpLnNldCh7IGM6IDk5OCwgczogNTggfSkuZ2V0KCdjJyk7IC8vIDk5OFxyXG4gICAqL1xyXG4gIHNldCh3aGF0LCBudW1iZXIpIHtcclxuICAgIGNvbnN0IGRhdGUgPSB0aGlzLiQ7XHJcblxyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMikge1xyXG4gICAgICB3aGF0ID0geyBbd2hhdF06IG51bWJlciB9O1xyXG4gICAgfVxyXG5cclxuICAgIHdoYXQgPSBuZXcgU3VwZXIod2hhdCkuJDtcclxuXHJcbiAgICBpdGVyYXRlKHdoYXQsICh2YWx1ZSwgd2hhdCkgPT4ge1xyXG4gICAgICBzZXRTd2l0Y2hlcih3aGF0LCBbZGF0ZSwgdmFsdWUsICdzZXQnXSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRGF0I3NldFVUQ1xyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1NldFBlcmlvZHxPYmplY3QuPFNldFBlcmlvZCwgTnVtYmVyPn0gd2hhdCAtIFNlZSB7QGxpbmsgRGF0I3NldH0uXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtudW1iZXJdIC0gU2VlIHtAbGluayBEYXQjc2V0fS5cclxuICAgKiBAcmV0dXJucyB7RGF0fSBSZXR1cm5zIHRoaXMuXHJcbiAgICogQGRlc2NyaXB0aW9uIFVUQyB2ZXJzaW9uIG9mIHtAbGluayBEYXQjc2V0fS5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogY29uc3QgZGF0ZSA9IG5ldyBEYXQobmV3IERhdGUoJzE5OTktMTItMzFUMjM6NTk6NTkuOTk5WicpKTtcclxuICAgKlxyXG4gICAqIGRhdGUuc2V0VVRDKCdjY2MnLCA5OTgpLmdldFVUQygnY2NjJyk7IC8vIDk5OFxyXG4gICAqIGRhdGUuc2V0VVRDKHtcclxuICAgKiAgIHM6IDU4LFxyXG4gICAqICAgbTogNTgsXHJcbiAgICogICBoOiAyMlxyXG4gICAqIH0pO1xyXG4gICAqXHJcbiAgICogZGF0ZS5nZXRVVEMoJ3MnKTsgLy8gNThcclxuICAgKiBkYXRlLmdldFVUQygnbScpOyAvLyA1OFxyXG4gICAqIGRhdGUuZ2V0VVRDKCdoJyk7IC8vIDIzXHJcbiAgICovXHJcbiAgc2V0VVRDKHdoYXQsIG51bWJlcikge1xyXG4gICAgY29uc3QgZGF0ZSA9IHRoaXMuJDtcclxuXHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAyKSB7XHJcbiAgICAgIHdoYXQgPSB7IFt3aGF0XTogbnVtYmVyIH07XHJcbiAgICB9XHJcblxyXG4gICAgd2hhdCA9IG5ldyBTdXBlcih3aGF0KS4kO1xyXG5cclxuICAgIGl0ZXJhdGUod2hhdCwgKHZhbHVlLCB3aGF0KSA9PiB7XHJcbiAgICAgIHNldFN3aXRjaGVyKHdoYXQsIFtkYXRlLCB2YWx1ZSwgJ3NldFVUQyddKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBEYXQjc2V0VVRDXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbdGltZV0gLSBUaW1lIHRvIHNldC5cclxuICAgKiBAcmV0dXJucyB7RGF0fE51bWJlcn0gLSBJZiB0aGUgdGltZSBhcmd1bWVudCBpcyBwcmVzZW50IHRoaXMgaXMgcmV0dXJuZWQgb3RoZXJ3aXNlIHRoZSB0aW1lIGlzIHJldHVybmVkLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBTeW5vbnltIGZvciBib3RoXHJcbiAgICogW0RhdGUjZ2V0VGltZV17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRGF0ZS9nZXRUaW1lfSBhbmRcclxuICAgKiBbRGF0ZSNzZXRUaW1lXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9EYXRlL3NldFRpbWV9LlxyXG4gICAqL1xyXG4gIHRpbWUodGltZSkge1xyXG4gICAgY29uc3QgZGF0ZSA9IHRoaXMuJDtcclxuXHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICBkYXRlLnNldFRpbWUodGltZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGRhdGUuZ2V0VGltZSgpO1xyXG4gIH1cclxuXHJcbiAgdG9JU09TdHJpbmcoKSB7XHJcbiAgICByZXR1cm4gdGhpcy4kLnRvSVNPU3RyaW5nKCk7XHJcbiAgfVxyXG5cclxuICB0b0xvY2FsZVN0cmluZygpIHtcclxuICAgIHJldHVybiB0aGlzLiQudG9Mb2NhbGVTdHJpbmcoKTtcclxuICB9XHJcblxyXG4gIHRvU3RyaW5nKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuJC50b1N0cmluZygpO1xyXG4gIH1cclxuXHJcbiAgdmFsdWVPZigpIHtcclxuICAgIHJldHVybiB0aGlzLiQudmFsdWVPZigpO1xyXG4gIH1cclxufVxyXG5kZWZpbmVQcm9wZXJ0aWVzKERhdC5wcm90b3R5cGUsIHtcclxuICBbU3ltYm9sLnRvU3RyaW5nVGFnXTogJ0RhdCdcclxufSk7XHJcblxyXG5jb25zdHJ1Y3RvcnNbMV0ucHVzaCh7XHJcbiAgY2hlY2s6IGlzRGF0ZSxcclxuICBjbHM6IERhdFxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAZnVuY3Rpb24gbm93XHJcbiAqIEBwdWJsaWNcclxuICogQHJldHVybnMge051bWJlcn0gTnVtYmVyIG9mIG1pbGxpc2Vjb25kcy5cclxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9EYXRlL25vd1xyXG4gKiBAZGVzY3JpcHRpb24gU3lub255bSBmb3JcclxuICogW0RhdGUubm93XXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9EYXRlL25vd30uXHJcbiAqL1xyXG5mdW5jdGlvbiBub3coKSB7XHJcbiAgcmV0dXJuIERhdGUubm93KCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZnVuY3Rpb24gZGF0ZVxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7RGF0ZUxpa2V9IFtkYXRlID0gbmV3IERhdGUoKV0gLSBEYXRlLWxpa2UgdmFsdWUgdGhhdCBpcyBwYXNzZWQgdG8gdGhlIERhdGUgY29uc3RydWN0b3IuXHJcbiAqIEByZXR1cm5zIHtEYXR9IE5ldyBpbnN0YW5jZSBvZiBEYXQuXHJcbiAqIEBkZXNjcmlwdGlvbiBTeW5vbnltIGZvciBuZXcgRGF0KG5ldyBEYXRlKGRhdGUpKTtcclxuICovXHJcbmZ1bmN0aW9uIGRhdGUoZGF0ZSkge1xyXG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgcmV0dXJuIG5ldyBEYXQobmV3IERhdGUobm93KCkpKTtcclxuICB9XHJcblxyXG4gIGRhdGUgPSBuZXcgU3VwZXIoZGF0ZSkuJDtcclxuXHJcbiAgcmV0dXJuIG5ldyBEYXQobmV3IERhdGUoZGF0ZSkpO1xyXG59XHJcblxyXG5leHBvcnQgeyBEYXQsIG5vdywgZGF0ZSB9O1xyXG4iLCIvKipcclxuICogQG1vZHVsZSBoZWxwZXJzL2NvbnN0cnVjdFVSTFxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAZGVzY3JpcHRpb24gRXhwb3J0cyBjb25zdHJ1Y3RVUkwgbWV0aG9kLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEFyciB9IGZyb20gJy4uL0Fycic7XHJcbmltcG9ydCB7IFN0ciB9IGZyb20gJy4uL1N0cic7XHJcbmltcG9ydCB7IHN3aXRjaGVyIH0gZnJvbSAnLi4vU3dpdGNoZXInO1xyXG5pbXBvcnQgeyBpc0FycmF5LCBpc09iamVjdCwgaXNQbGFpbk9iamVjdCB9IGZyb20gJy4vY2hlY2tUeXBlcyc7XHJcbmltcG9ydCB7IGl0ZXJhdGUgfSBmcm9tICcuL2l0ZXJhdGUnO1xyXG5cclxuLyoqXHJcbiAqIEB0eXBlIHtSZWdFeHB9XHJcbiAqIEBkZXNjcmlwdGlvbiBBYnNvbHV0ZSBVUkwgcGF0dGVybi5cclxuICovXHJcbmNvbnN0IGFic29sdXRlVVJMUmVnZXhwID0gL14oKFthLXpdW2EtelxcZCtcXC0uXSo6KT9cXC9cXC98ZGF0YTpbYS16XStcXC9bYS16XSs7YmFzZTY0LCkvaTtcclxuY29uc3QgcXVlcnlTd2l0Y2hlciA9IHN3aXRjaGVyKCdjYWxsJywgKCkgPT4gbmV3IEFycihbXSkpXHJcbiAgLmNhc2UoaXNBcnJheSwgKHByZWZpeCwgcXVlcnkpID0+IHtcclxuICAgIGxldCBxdWVyeVBhcmFtcyA9IG5ldyBBcnIoW10pO1xyXG5cclxuICAgIGl0ZXJhdGUocXVlcnksICh2YWx1ZSkgPT4ge1xyXG4gICAgICBpZiAoaXNQbGFpbk9iamVjdCh2YWx1ZSkgfHwgaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICBxdWVyeVBhcmFtcyA9IHF1ZXJ5UGFyYW1zLmNvbmNhdChxdWVyeVN3aXRjaGVyKHZhbHVlLCBbYCR7IHByZWZpeCB9W11gXSkpO1xyXG5cclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHF1ZXJ5UGFyYW1zLnB1c2goe1xyXG4gICAgICAgIHBhcmFtOiBgJHsgcHJlZml4IH1bXWAsXHJcbiAgICAgICAgdmFsdWVcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gcXVlcnlQYXJhbXMuJDtcclxuICB9KVxyXG4gIC5jYXNlKGlzUGxhaW5PYmplY3QsIChwcmVmaXgsIHF1ZXJ5KSA9PiB7XHJcbiAgICBsZXQgcXVlcnlQYXJhbXMgPSBuZXcgQXJyKFtdKTtcclxuXHJcbiAgICBpdGVyYXRlKHF1ZXJ5LCAodmFsdWUsIHBhcmFtKSA9PiB7XHJcbiAgICAgIGlmIChpc1BsYWluT2JqZWN0KHZhbHVlKSB8fCBpc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgIHF1ZXJ5UGFyYW1zID0gcXVlcnlQYXJhbXMuY29uY2F0KHF1ZXJ5U3dpdGNoZXIodmFsdWUsIFtwcmVmaXggPyBgJHsgcHJlZml4IH1bJHsgcGFyYW0gfV1gIDogcGFyYW1dKSk7XHJcblxyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgcXVlcnlQYXJhbXMucHVzaCh7XHJcbiAgICAgICAgcGFyYW06IHByZWZpeCA/IGAkeyBwcmVmaXggfVskeyBwYXJhbSB9XWAgOiBwYXJhbSxcclxuICAgICAgICB2YWx1ZTogaXNPYmplY3QodmFsdWUpID8gSlNPTi5zdHJpbmdpZnkodmFsdWUpIDogU3RyaW5nKHZhbHVlKVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBxdWVyeVBhcmFtcy4kO1xyXG4gIH0pO1xyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvbiBjb25zdHJ1Y3RVUkxcclxuICogQHBhcmFtIHtTdHJpbmd9IGJhc2VVUkwgLSBCYXNlVVJMIG9mIHRoZSBvdXRwdXQgVVJMLlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsIC0gTWFpbiBwYXJ0IG9mIHRoZSBvdXRwdXQgVVJMLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIC0gUGFyYW1zIHRvIHJlcGxhY2UgaW4gdGhlIHVybCBleHByZXNzaW9ucyBsaWtlIFwiOnBhcmFtXCIuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBxdWVyeSAtIE9iamVjdCB3aXRoIHF1ZXJ5IHBhcmFtcy5cclxuICogQHBhcmFtIHtPYmplY3R9IFtoYXNoID0gJyddIC0gVVJMIGhhc2guXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBbZW5jb2RlT3B0aW9ucyA9IHt9XSAtIElmIHlvdSBuZWVkIHRvIGVuY29kZSBzb21ldGhpbmcuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBbZW5jb2RlT3B0aW9ucy5wYXJhbXMgPSB0cnVlXSAtIElmIHlvdSBuZWVkIHRvIGVuY29kZSBwYXJhbXMuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBbZW5jb2RlT3B0aW9ucy5xdWVyeSA9IHRydWVdIC0gSWYgeW91IG5lZWQgdG8gZW5jb2RlIHF1ZXJ5IHBhcmFtcy5cclxuICogQHJldHVybnMge1N0cmluZ30gQ29uc3RydWN0ZWQgVVJMLlxyXG4gKiBAZGVzY3JpcHRpb24gRnVuY3Rpb24gZm9yIGNvbnN0cnVjdGluZyBVUkwgZnJvbSB0aGUgYmFzZSBVUkwsIFVSTCwgcGFyYW1zIGFuZCBxdWVyeSBwYXJhbXMuXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCAoYmFzZVVSTCwgdXJsLCBwYXJhbXMsIHF1ZXJ5LCBoYXNoID0gJycsIGVuY29kZU9wdGlvbnMgPSB7fSkgPT4ge1xyXG4gIGNvbnN0IHtcclxuICAgIHBhcmFtczogZW5jb2RlUGFyYW1zID0gdHJ1ZSxcclxuICAgIHF1ZXJ5OiBlbmNvZGVRdWVyeSA9IHRydWVcclxuICB9ID0gZW5jb2RlT3B0aW9ucztcclxuICBsZXQgVVJMID0gaXNBYnNvbHV0ZSh1cmwpXHJcbiAgICA/IHVybFxyXG4gICAgOiBgJHsgU3RyaW5nKGJhc2VVUkwpLnJlcGxhY2UoL1xcLyskLywgJycpIH0vJHsgU3RyaW5nKHVybCkucmVwbGFjZSgvXlxcLysvLCAnJykgfWA7XHJcblxyXG4gIGl0ZXJhdGUocGFyYW1zLCAodmFsdWUsIHBhcmFtKSA9PiB7XHJcbiAgICBVUkwgPSBuZXcgU3RyKFVSTCkucmVwbGFjZVN0cmluZyhgOiR7IHBhcmFtIH1gLCBlbmNvZGUodmFsdWUsIGVuY29kZVBhcmFtcykpLiQ7XHJcbiAgfSk7XHJcblxyXG4gIGNvbnN0IHF1ZXJ5UGFyYW1zID0gcXVlcnlTd2l0Y2hlcihxdWVyeSwgWycnXSk7XHJcblxyXG4gIGlmIChxdWVyeVBhcmFtcy5sZW5ndGgpIHtcclxuICAgIFVSTCArPSAoVVJMLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgcXVlcnlQYXJhbXNcclxuICAgICAgLm1hcCgoeyBwYXJhbSwgdmFsdWUgfSkgPT4gYCR7IGVuY29kZShwYXJhbSwgZW5jb2RlUXVlcnkpIH09JHsgZW5jb2RlKHZhbHVlLCBlbmNvZGVRdWVyeSkgfWApXHJcbiAgICAgIC5qb2luKCcmJyk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gYCR7IFVSTCB9JHsgaGFzaCA/IGAjJHsgaGFzaCB9YCA6ICcnIH1gO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvbiBpc0Fic29sdXRlXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgLSBVUkwgdG8gY2hlY2sgaWYgaXQgaXMgYWJzb2x1dGUgb3Igbm90LlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gSWYgdGhlIGFyZ3VtZW50IFVSTCBpcyBhYnNvbHV0ZSBvciBub3QuXHJcbiAqL1xyXG5mdW5jdGlvbiBpc0Fic29sdXRlKHVybCkge1xyXG4gIHJldHVybiBhYnNvbHV0ZVVSTFJlZ2V4cC50ZXN0KHVybCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZnVuY3Rpb24gZW5jb2RlXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmcgLSBTdHJpbmcgdG8gZW5jb2RlIHVzaW5nIGVuY29kZVVSSUNvbXBvbmVudC5cclxuICogQHBhcmFtIHtCb29sZWFufSBpc0VuY29kZWQgLSBJZiB0aGUgc3RyaW5nIHNob3VsZCBiZSBlbmNvZGVkLlxyXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBFbmNvZGVkIHN0cmluZy5cclxuICovXHJcbmZ1bmN0aW9uIGVuY29kZShzdHJpbmcsIGlzRW5jb2RlZCkge1xyXG4gIHJldHVybiBpc0VuY29kZWQgPyBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5nKSA6IHN0cmluZztcclxufVxyXG4iLCIvKipcclxuICogQG1vZHVsZSBGZXRjaFxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAbWl4aW5cclxuICogQGRlc2NyaXB0aW9uIEV4cG9ydHMgRmV0Y2ggY2xhc3MuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgUHJvbWlzZSB9IGZyb20gJy4vUHJvbWlzZSc7XHJcbmltcG9ydCB7IFN1cGVyIH0gZnJvbSAnLi9TdXBlcic7XHJcbmltcG9ydCB7IEFyciB9IGZyb20gJy4vQXJyJztcclxuaW1wb3J0IHsgU3RyIH0gZnJvbSAnLi9TdHInO1xyXG5pbXBvcnQge1xyXG4gIGlzQXJyYXksIGlzRnVuY3Rpb24sIGlzU3RyaW5nLFxyXG4gIGFzc2lnbiwgU3ltYm9sLCB2YWxpZGF0ZSwgaXRlcmF0ZSwgZGVmaW5lUHJvcGVydGllc1xyXG59IGZyb20gJy4vaGVscGVycyc7XHJcbmltcG9ydCBjb25zdHJ1Y3RVUkwgZnJvbSAnLi9oZWxwZXJzL2NvbnN0cnVjdFVSTCc7XHJcbmltcG9ydCBwYXJzZUhlYWRlcnMgZnJvbSAnLi9oZWxwZXJzL3BhcnNlSGVhZGVycyc7XHJcbmltcG9ydCB0cmFuc2Zvcm1EYXRhIGZyb20gJy4vaGVscGVycy90cmFuc2Zvcm1EYXRhJztcclxuXHJcbi8qKlxyXG4gKiBAdHlwZWRlZiB7J2dldCd8J3Bvc3QnfCdkZWxldGUnfCdoZWFkJ3wncHV0J3wncGF0Y2gnfSBGZXRjaE1ldGhvZFxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEZldGNoQ29uZmlnXHJcbiAqIEBwdWJsaWNcclxuICogQHByb3BlcnR5IHtBcnJheS48QWZ0ZXJNaWRkbGV3YXJlfEZldGNoRXJyb3JBZnRlck1pZGRsZXdhcmU+fSBbYWZ0ZXJdXHJcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBbYXV0aF1cclxuICogQHByb3BlcnR5IHtTdHJpbmd9IFthdXRoLnVzZXJuYW1lXVxyXG4gKiBAcHJvcGVydHkge1N0cmluZ30gW2F1dGgucGFzc3dvcmRdXHJcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBbYmFzZVVSTF1cclxuICogQHByb3BlcnR5IHtBcnJheS48QmVmb3JlTWlkZGxld2FyZXxGZXRjaEVycm9yQmVmb3JlTWlkZGxld2FyZT59IFtiZWZvcmVdXHJcbiAqIEBwcm9wZXJ0eSB7Kn0gW2RhdGFdXHJcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxTdHJpbmcsIFN0cmluZ1tdPn0gW2hlYWRlcnNdXHJcbiAqIEBwcm9wZXJ0eSB7RmV0Y2hNZXRob2R9IFttZXRob2RdXHJcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBbcGFyYW1zXVxyXG4gKiBAcHJvcGVydHkge09iamVjdH0gW3F1ZXJ5XVxyXG4gKiBAcHJvcGVydHkge1N0cmluZ30gW3Jlc3BvbnNlVHlwZV1cclxuICogQHByb3BlcnR5IHtOdW1iZXJ9IFt0aW1lb3V0XVxyXG4gKiBAcHJvcGVydHkge1N0cmluZ30gW3VybF1cclxuICogQHByb3BlcnR5IHtCb29sZWFufSBbd2l0aENyZWRlbnRpYWxzXVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBGZXRjaFJlc3BvbnNlXHJcbiAqIEBwdWJsaWNcclxuICogQHByb3BlcnR5IHtGZXRjaENvbmZpZ30gY29uZmlnXHJcbiAqIEBwcm9wZXJ0eSB7Kn0gZGF0YVxyXG4gKiBAcHJvcGVydHkge09iamVjdC48U3RyaW5nLCBTdHJpbmc+fSBoZWFkZXJzXHJcbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBzdGF0dXNcclxuICogQHByb3BlcnR5IHtTdHJpbmd9IHN0YXR1c1RleHRcclxuICogQHByb3BlcnR5IHtYTUxIdHRwUmVxdWVzdH0geGhyXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEBjYWxsYmFjayBGZXRjaEFmdGVyTWlkZGxld2FyZVxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7RmV0Y2hSZXNwb25zZX0gY29uZmlnIC0gRmV0Y2ggcmVzcG9uc2UuXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEBjYWxsYmFjayBGZXRjaEVycm9yQWZ0ZXJNaWRkbGV3YXJlXHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIHtFcnJvcnwqfSBlcnIgLSBUaHJvd24gZXJyb3IuXHJcbiAqIEBwYXJhbSB7RmV0Y2hSZXNwb25zZX0gY29uZmlnIC0gRmV0Y2ggcmVzcG9uc2UuXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEBjYWxsYmFjayBGZXRjaEJlZm9yZU1pZGRsZXdhcmVcclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0ge0ZldGNoQ29uZmlnfSBjb25maWcgLSBGZXRjaCBjb25maWcuXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEBjYWxsYmFjayBGZXRjaEVycm9yQmVmb3JlTWlkZGxld2FyZVxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7RXJyb3J8Kn0gZXJyIC0gVGhyb3duIGVycm9yLlxyXG4gKiBAcGFyYW0ge0ZldGNoQ29uZmlnfSBjb25maWcgLSBGZXRjaCBjb25maWcuXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEBjYWxsYmFjayBGZXRjaENvbmZpZ0Z1bmN0aW9uXHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIHtGZXRjaENvbmZpZ30gY29uZmlnXHJcbiAqL1xyXG5cclxuY29uc3QgZGVmYXVsdHMgPSB7XHJcbiAgYWZ0ZXI6IFtdLFxyXG4gIGF1dGg6IHtcclxuICAgIHVzZXJuYW1lOiAnJyxcclxuICAgIHBhc3N3b3JkOiAnJ1xyXG4gIH0sXHJcbiAgYmFzZVVSTDogZ2xvYmFsLmxvY2F0aW9uLm9yaWdpbixcclxuICBiZWZvcmU6IFtdLFxyXG4gIGRhdGE6IG51bGwsXHJcbiAgaGVhZGVyczoge30sXHJcbiAgbWV0aG9kOiAnZ2V0JyxcclxuICBwYXJhbXM6IHt9LFxyXG4gIHF1ZXJ5OiB7fSxcclxuICByZXNwb25zZVR5cGU6ICcnLFxyXG4gIHRpbWVvdXQ6IDAsXHJcbiAgdXJsOiAnJyxcclxuICB3aXRoQ3JlZGVudGlhbHM6IGZhbHNlXHJcbn07XHJcbmNvbnN0IHVwbG9hZE1ldGhvZHMgPSBuZXcgQXJyKFsncG9zdCcsICdwdXQnXSk7XHJcblxyXG4vKipcclxuICogQGNsYXNzIEZldGNoXHJcbiAqIEBleHRlbmRzIEZ1bmN0aW9uXHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIHtGZXRjaENvbmZpZ30gW2NvbmZpZyA9IHt9XSAtIEEgbnVtYmVyIHRvIHdyYXAuXHJcbiAqIEByZXR1cm5zIHtGZXRjaH0gSW5zdGFuY2Ugb2YgRmV0Y2guXHJcbiAqIEFuIGluc3RhbmNlIG9mIEZldGNoIGlzIGEgZnVuY3Rpb24gdGhhdCBzaW1wbHkgY2FsbHMgI3JlcXVlc3Qgd2l0aCB0aGUgc2FtZSBhcmd1bWVudHMuXHJcbiAqIEBkZXNjcmlwdGlvbiBDbGFzcyBmb3IgZmV0Y2hpbmcgZGF0YS5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogY29uc3QgZmV0Y2ggPSBuZXcgRmV0Y2goKTtcclxuICpcclxuICogZmV0Y2goJy9kYXRhJykudGhlbigocmVzKSA9PiB7XHJcbiAqICAgY29uc29sZS5sb2cocmVzKTtcclxuICogfSk7XHJcbiAqL1xyXG5jbGFzcyBGZXRjaCBleHRlbmRzIEZ1bmN0aW9uIHtcclxuICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSkge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICBmdW5jdGlvbiBmZXRjaCgpIHtcclxuICAgICAgcmV0dXJuIGZldGNoLnJlcXVlc3QuYXBwbHkoZmV0Y2gsIGFyZ3VtZW50cyk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY29uZiA9IG5ldyBTdXBlcih7fSkuZGVlcEFzc2lnbihkZWZhdWx0cywgY29uZmlnKS4kO1xyXG5cclxuICAgIGlmIChjb25mLmJlZm9yZS5pbmRleE9mKGZldGNoQmVmb3JlTWlkZGxld2FyZSkgPT09IC0xKSB7XHJcbiAgICAgIGNvbmYuYmVmb3JlLnB1c2goZmV0Y2hCZWZvcmVNaWRkbGV3YXJlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBtZW1iZXIge0ZldGNoQ29uZmlnfSBGZXRjaCMkJFxyXG4gICAgICogQHR5cGUge0ZldGNoQ29uZmlnfVxyXG4gICAgICogQHB1YmxpY1xyXG4gICAgICogQGRlc2NyaXB0aW9uIEZldGNoIGNvbmZpZy5cclxuICAgICAqL1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZldGNoLCAnJCQnLCB7IHZhbHVlOiBjb25mIH0pO1xyXG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGZldGNoLCBGZXRjaC5wcm90b3R5cGUpO1xyXG5cclxuICAgIHJldHVybiBmZXRjaDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRmV0Y2gjYWZ0ZXJcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtGZXRjaEFmdGVyTWlkZGxld2FyZXxGZXRjaEVycm9yQWZ0ZXJNaWRkbGV3YXJlfSBtaWRkbGV3YXJlIC0gTWlkZGxld2FyZSB0byBhZGQuXHJcbiAgICogQHBhcmFtIHtCb29sZWFufCp9IFthZnRlckFsbCA9IHRydWVdIC0gQm9vbGVhbiBwYXJhbWV0ZXIgd2hlcmUgdG8gcHV0IHRoZSBtaWRkbGV3YXJlLlxyXG4gICAqIFRydXRoeSBwYXJhbWV0ZXIgc3RhbmRzIGZvciBcInRvIHRoZSBlbmRcIiBhbmQgZmFsc2V5IGZvciBcInRvIHRoZSBiZWdpbm5pbmdcIi5cclxuICAgKiBAcmV0dXJucyB7RmV0Y2h9IFJldHVybnMgdGhpcy5cclxuICAgKiBAZGVzY3JpcHRpb24gTWlkZGxld2FyZSB0aGF0IGlzIGNhbGxlZCBhZnRlciB0aGUgcmVxdWVzdC5cclxuICAgKiBJZiB0aGUgbWlkZGxld2FyZSBoYXMgMiBvciBsZXNzIGFyZ3VtZW50cyBpdCdzIHRyZWF0ZWQgYXMgc3VjY2VzcyBtaWRkbGV3YXJlIG90aGVyd2lzZSBhcyBhbiBlcnJvciBvbmUuXHJcbiAgICogSWYgdGhlIG1pZGRsZXdhcmUgcmV0dXJucyBhIHByb21pc2UgaXQgYmVjb21lcyBhIHBhcnQgb2YgdGhlIG1pZGRsZXdhcmUgY2hhaW4uXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIGNvbnN0IGZldGNoID0gbmV3IEZldGNoKClcclxuICAgKiAgIC5hZnRlcigoZXJyLCByZXMpID0+IHtcclxuICAgKiAgICAgY29uc29sZS5sb2coZXJyKTtcclxuICAgKlxyXG4gICAqICAgICB0aHJvdyBlcnI7XHJcbiAgICogICB9KVxyXG4gICAqICAgLmFmdGVyKChyZXMpID0+IHtcclxuICAgKiAgICAgcmVzLmpzb24gPSBEKHJlcy5kYXRhKS5wYXJzZUpTT04oKTpcclxuICAgKiAgIH0pO1xyXG4gICAqL1xyXG4gIGFmdGVyKG1pZGRsZXdhcmUsIGFmdGVyQWxsID0gdHJ1ZSkge1xyXG4gICAgdmFsaWRhdGUoW21pZGRsZXdhcmVdLCBbJ2Z1bmN0aW9uJ10sICdGZXRjaCNhZnRlcicpO1xyXG5cclxuICAgIGNvbnN0IHsgYWZ0ZXIgfSA9IHRoaXMuJCQ7XHJcblxyXG4gICAgaWYgKGFmdGVyQWxsKSB7XHJcbiAgICAgIGFmdGVyLnB1c2gobWlkZGxld2FyZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhZnRlci51bnNoaWZ0KG1pZGRsZXdhcmUpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBGZXRjaCNiZWZvcmVcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtGZXRjaEJlZm9yZU1pZGRsZXdhcmV8RmV0Y2hFcnJvckJlZm9yZU1pZGRsZXdhcmV9IG1pZGRsZXdhcmUgLSBNaWRkbGV3YXJlIHRvIGFkZC5cclxuICAgKiBAcGFyYW0ge0Jvb2xlYW58Kn0gW2JlZm9yZUFsbCA9IHRydWVdIC0gQm9vbGVhbiBwYXJhbWV0ZXIgd2hlcmUgdG8gcHV0IHRoZSBtaWRkbGV3YXJlLlxyXG4gICAqIFRydXRoeSBwYXJhbWV0ZXIgc3RhbmRzIGZvciBcInRvIHRoZSBiZWdpbm5pbmdcIiBhbmQgZmFsc2V5IGZvciBcInRvIHRoZSBlbmRcIi5cclxuICAgKiBAcmV0dXJucyB7RmV0Y2h9IFJldHVybnMgdGhpcy5cclxuICAgKiBAZGVzY3JpcHRpb24gTWlkZGxld2FyZSB0aGF0IGlzIGNhbGxlZCBiZWZvcmUgdGhlIHJlcXVlc3QuXHJcbiAgICogSWYgdGhlIG1pZGRsZXdhcmUgaGFzIDIgb3IgbGVzcyBhcmd1bWVudHMgaXQncyB0cmVhdGVkIGFzIHN1Y2Nlc3MgbWlkZGxld2FyZSBvdGhlcndpc2UgYXMgYW4gZXJyb3Igb25lLlxyXG4gICAqIElmIHRoZSBtaWRkbGV3YXJlIHJldHVybnMgYSBwcm9taXNlIGl0IGJlY29tZXMgYSBwYXJ0IG9mIHRoZSBtaWRkbGV3YXJlIGNoYWluLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBjb25zdCBmZXRjaCA9IG5ldyBGZXRjaCgpXHJcbiAgICogICAuYmVmb3JlKChlcnIsIHJlcSkgPT4ge1xyXG4gICAqICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAqXHJcbiAgICogICAgIHRocm93IGVycjtcclxuICAgKiAgIH0pXHJcbiAgICogICAuYmVmb3JlKChyZXEpID0+IHtcclxuICAgKiAgICAgaWYgKHJlcS51cmwgPT09ICcvdmVyeUxvbmdSZXF1ZXN0Jykge1xyXG4gICAqICAgICAgIHJlcS50aW1lb3V0ID0gMzAwMDA7XHJcbiAgICogICAgIH1cclxuICAgKiAgIH0pO1xyXG4gICAqL1xyXG4gIGJlZm9yZShtaWRkbGV3YXJlLCBiZWZvcmVBbGwgPSB0cnVlKSB7XHJcbiAgICB2YWxpZGF0ZShbbWlkZGxld2FyZV0sIFsnZnVuY3Rpb24nXSwgJ0ZldGNoI2JlZm9yZScpO1xyXG5cclxuICAgIGNvbnN0IHsgYmVmb3JlIH0gPSB0aGlzLiQkO1xyXG5cclxuICAgIGlmIChiZWZvcmVBbGwpIHtcclxuICAgICAgYmVmb3JlLnVuc2hpZnQobWlkZGxld2FyZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBiZWZvcmUucHVzaChtaWRkbGV3YXJlKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRmV0Y2gjY29uZmlnXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7U3RyaW5nfEZldGNoQ29uZmlnfEZldGNoQ29uZmlnRnVuY3Rpb259IFtwcm9wZXJ0eV0gLSBJZiBpdCdzIGEgZnVuY3Rpb25cclxuICAgKiBpdCdzIGNhbGxlZCB3aXRoIHRoZSBmZXRjaCBjb25maWcgYXJndW1lbnQsIGlmIGl0J3MgYSBzdHJpbmcgdGhlIHZhbHVlIGFyZ3VtZW50XHJcbiAgICogaXMgdXNlZCBmb3IgYXNzaWduaW5nIHRoaXMgcHJvcGVydHkgdG8gdGhlIGZldGNoIGNvbmZpZ1xyXG4gICAqIG90aGVyd2lzZSBpdCdzIGFzc2lnbmVkIHRvIHRoZSBmZXRjaCBjb25maWcuXHJcbiAgICogQHBhcmFtIHsqfSBbdmFsdWVdIC0gU2VlIHRoZSBwcm9wZXJ0eSBhcmd1bWVudC5cclxuICAgKiBAcmV0dXJucyB7RmV0Y2h8RmV0Y2hDb25maWd9IElmIHRoZSBhcmd1bWVudCBpcyBwcmVzZW50IHRoaXMgaXMgcmV0dXJuZWQgb3RoZXJ3aXNlIHRoZSBmZXRjaCBjb25maWcgaXMgcmV0dXJuZWQuXHJcbiAgICogQGRlc2NyaXB0aW9uIE1ldGhvZCBmb3IgZ2V0dGluZyBhbmQgc2V0dGluZyBjb25maWcuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIGNvbnN0IGZldGNoID0gbmV3IEZldGNoKCk7XHJcbiAgICpcclxuICAgKiBmZXRjaC5jb25maWcoeyBiYXNlVVJMOiA1MDAwIH0pO1xyXG4gICAqIGZldGNoLmNvbmZpZygpLnRpbWVvdXQ7IC8vIDUwMDBcclxuICAgKlxyXG4gICAqIGZldGNoLmNvbmZpZygoY29uZmlnKSA9PiB7XHJcbiAgICogICBjb25maWcuYmFzZVVSTCArPSAnL2FwaSc7XHJcbiAgICogfSk7XHJcbiAgICovXHJcbiAgY29uZmlnKHByb3BlcnR5LCB2YWx1ZSkge1xyXG4gICAgY29uc3QgY29uZiA9IHRoaXMuJCQ7XHJcblxyXG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgIHJldHVybiBjb25mO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChpc0Z1bmN0aW9uKHByb3BlcnR5KSkge1xyXG4gICAgICBwcm9wZXJ0eShjb25mKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDIpIHtcclxuICAgICAgICBwcm9wZXJ0eSA9IHsgW3Byb3BlcnR5XTogdmFsdWUgfTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbmV3IFN1cGVyKGNvbmYpLmRlZXBBc3NpZ24ocHJvcGVydHkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBGZXRjaCNkZWxldGVcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IFt1cmxdIC0gU2VlIHtAbGluayBGZXRjaCNyZXF1ZXN0fS5cclxuICAgKiBAcGFyYW0ge0ZldGNoQ29uZmlnfSBbY29uZmlnXSAtIFNlZSB7QGxpbmsgRmV0Y2gjcmVxdWVzdH0uXHJcbiAgICogQHJldHVybnMge1Byb21pc2UuPEZldGNoUmVzcG9uc2UsIEVycm9yPn0gU2VlIHtAbGluayBGZXRjaCNyZXF1ZXN0fS5cclxuICAgKiBAZGVzY3JpcHRpb24gU2hvcnRoYW5kIGZvciAjcmVxdWVzdCBmb3IgZGVsZXRlIHJlcXVlc3RzLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgRmV0Y2goKS5kZWxldGUoJy9kYXRhJykudGhlbigocmVzKSA9PiB7XHJcbiAgICogICBjb25zb2xlLmxvZyhyZXMpO1xyXG4gICAqIH0pO1xyXG4gICAqL1xyXG4gIGRlbGV0ZSh1cmwsIGNvbmZpZyA9IHt9KSB7XHJcbiAgICBpZiAoIWlzU3RyaW5nKHVybCkpIHtcclxuICAgICAgY29uZmlnID0gdXJsO1xyXG4gICAgICB1cmwgPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1cmwsIGFzc2lnbih7IG1ldGhvZDogJ2RlbGV0ZScgfSwgY29uZmlnKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEZldGNoI2dldFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1N0cmluZ30gW3VybF0gLSBTZWUge0BsaW5rIEZldGNoI3JlcXVlc3R9LlxyXG4gICAqIEBwYXJhbSB7RmV0Y2hDb25maWd9IFtjb25maWddIC0gU2VlIHtAbGluayBGZXRjaCNyZXF1ZXN0fS5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZS48RmV0Y2hSZXNwb25zZSwgRXJyb3I+fSBTZWUge0BsaW5rIEZldGNoI3JlcXVlc3R9LlxyXG4gICAqIEBkZXNjcmlwdGlvbiBTaG9ydGhhbmQgZm9yICNyZXF1ZXN0IGZvciBnZXQgcmVxdWVzdHMuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5ldyBGZXRjaCgpLmdldCgnL2RhdGEnKS50aGVuKChyZXMpID0+IHtcclxuICAgKiAgIGNvbnNvbGUubG9nKHJlcyk7XHJcbiAgICogfSk7XHJcbiAgICovXHJcbiAgZ2V0KHVybCwgY29uZmlnID0ge30pIHtcclxuICAgIGlmICghaXNTdHJpbmcodXJsKSkge1xyXG4gICAgICBjb25maWcgPSB1cmw7XHJcbiAgICAgIHVybCA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHVybCwgYXNzaWduKHsgbWV0aG9kOiAnZ2V0JyB9LCBjb25maWcpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRmV0Y2gjaGVhZFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1N0cmluZ30gW3VybF0gLSBTZWUge0BsaW5rIEZldGNoI3JlcXVlc3R9LlxyXG4gICAqIEBwYXJhbSB7RmV0Y2hDb25maWd9IFtjb25maWddIC0gU2VlIHtAbGluayBGZXRjaCNyZXF1ZXN0fS5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZS48RmV0Y2hSZXNwb25zZSwgRXJyb3I+fSBTZWUge0BsaW5rIEZldGNoI3JlcXVlc3R9LlxyXG4gICAqIEBkZXNjcmlwdGlvbiBTaG9ydGhhbmQgZm9yICNyZXF1ZXN0IGZvciBoZWFkIHJlcXVlc3RzLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgRmV0Y2goKS5oZWFkKCcvZGF0YScpLnRoZW4oKHJlcykgPT4ge1xyXG4gICAqICAgY29uc29sZS5sb2cocmVzKTtcclxuICAgKiB9KTtcclxuICAgKi9cclxuICBoZWFkKHVybCwgY29uZmlnID0ge30pIHtcclxuICAgIGlmICghaXNTdHJpbmcodXJsKSkge1xyXG4gICAgICBjb25maWcgPSB1cmw7XHJcbiAgICAgIHVybCA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHVybCwgYXNzaWduKHsgbWV0aG9kOiAnaGVhZCcgfSwgY29uZmlnKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEZldGNoI2hlYWRlcnNcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0LjxTdHJpbmcsIFN0cmluZ3xTdHJpbmdbXT59IGhlYWRlciAtIEEgaGVhZGVyIHN0cmluZyBvciBhbiBvYmplY3Qgb2YgdGhlIGZvbGxvd2luZyBmb3JtYXQ6XHJcbiAgICogeyBbaGVhZGVyXTogW3ZhbHVlMSwgdmFsdWUyLCAuLi5dIH0uXHJcbiAgICogQHBhcmFtIHtTdHJpbmd8U3RyaW5nW119IFt2YWx1ZV0gLSBIZWFkZXIgdmFsdWUuIElmIHRoZSBmaXJzdCBhcmd1bWVudCBpcyBhIHN0cmluZ1xyXG4gICAqIHRoaXMgaGFzIHRvIGJlIGEgaGVhZGVyIHZhbHVlIG9yIGFuIGFycmF5IG9mIGhlYWRlciB2YWx1ZXMuXHJcbiAgICogQHJldHVybnMge0ZldGNofSBSZXR1cm5zIHRoaXMuXHJcbiAgICogQGRlc2NyaXB0aW9uIE1ldGhvZCBmb3Igc2V0dGluZyByZXF1ZXN0IGhlYWRlcnMuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIGNvbnN0IGZldGNoID0gbmV3IEZldGNoKClcclxuICAgKiAgIC5oZWFkZXJzKCdIZWFkZXIxJywgJ1ZhbHVlJylcclxuICAgKiAgIC5oZWFkZXJzKCdIZWFkZXIyJywgWydWYWx1ZTEnLCAnVmFsdWUyJ10pXHJcbiAgICogICAuaGVhZGVycyh7XHJcbiAgICogICAgIEhlYWRlcjM6IFsnVmFsdWUxJywgJ1ZhbHVlMiddXHJcbiAgICogICB9KTtcclxuICAgKi9cclxuICBoZWFkZXJzKGhlYWRlciwgdmFsdWUpIHtcclxuICAgIGNvbnN0IHsgaGVhZGVycyB9ID0gdGhpcy4kJDtcclxuXHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAyKSB7XHJcbiAgICAgIGhlYWRlciA9IHsgW2hlYWRlcl06IHZhbHVlIH07XHJcbiAgICB9XHJcblxyXG4gICAgaXRlcmF0ZShoZWFkZXIsICh2YWx1ZSwgaGVhZGVyKSA9PiB7XHJcbiAgICAgIGNvbnN0IGFycmF5ID0gaGVhZGVyc1toZWFkZXJdIHx8IFtdO1xyXG4gICAgICBjb25zdCB0b1B1c2ggPSBpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW3ZhbHVlXTtcclxuXHJcbiAgICAgIChoZWFkZXJzW2hlYWRlcl0gPSBhcnJheSkucHVzaC5hcHBseShhcnJheSwgdG9QdXNoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBGZXRjaCNpbnN0YW5jZVxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge0ZldGNoQ29uZmlnfSBbY29uZmlnXSAtIE5ldyBjb25maWcgaWYgbmVlZGVkLlxyXG4gICAqIEByZXR1cm5zIHtGZXRjaH0gTmV3IGluc3RhbmNlIG9mIEZldGNoLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBNZXRob2QgZm9yIGNyZWF0aW5nIG5ldyBmZXRjaCBpbnN0YW5jZXMgYmFzZWQgb24gYWxyZWFkeSBleGlzdGVudC5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogY29uc3QgbWFpbkZldGNoID0gbmV3IEZldGNoKHtcclxuICAgKiAgIGJhc2VVUkw6ICcvL290aGVyLmRvbWFpbi5jb20vYXBpJyxcclxuICAgKiAgIHdpdGhDcmVkZW50aWFsczogdHJ1ZVxyXG4gICAqIH0pO1xyXG4gICAqXHJcbiAgICogY29uc3QgbG9uZ0ZldGNoID0gbWFpbkZldGNoLmluc3RhbmNlKHtcclxuICAgKiAgIHRpbWVvdXQ6IDEwMDAwXHJcbiAgICogfSk7XHJcbiAgICovXHJcbiAgaW5zdGFuY2UoY29uZmlnID0ge30pIHtcclxuICAgIGNvbnN0IGRhdGFDb25maWcgPSBuZXcgU3VwZXIoY29uZmlnKS5oYXNPd24oJ2RhdGEnKVxyXG4gICAgICA/IHsgZGF0YTogY29uZmlnLmRhdGEgfVxyXG4gICAgICA6IHt9O1xyXG5cclxuICAgIGRlbGV0ZSBjb25maWcuZGF0YTtcclxuXHJcbiAgICBjb25zdCBjb25mID0gbmV3IFN1cGVyKHt9KVxyXG4gICAgICAuZGVlcEFzc2lnbih0aGlzLiQkLCBjb25maWcpXHJcbiAgICAgIC5hc3NpZ24oZGF0YUNvbmZpZylcclxuICAgICAgLiQ7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBGZXRjaChjb25mKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRmV0Y2gjcGF0Y2hcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IFt1cmxdIC0gU2VlIHtAbGluayBGZXRjaCNyZXF1ZXN0fS5cclxuICAgKiBAcGFyYW0geyp9IFtkYXRhXSAtIEFkZGl0aW9uYWwgcGFyYW1ldGVyIGZvciB1cGxvYWRpbmcgZGF0YS5cclxuICAgKiBAcGFyYW0ge0ZldGNoQ29uZmlnfSBbY29uZmlnXSAtIFNlZSB7QGxpbmsgRmV0Y2gjcmVxdWVzdH0uXHJcbiAgICogQHJldHVybnMge1Byb21pc2UuPEZldGNoUmVzcG9uc2UsIEVycm9yPn0gU2VlIHtAbGluayBGZXRjaCNyZXF1ZXN0fS5cclxuICAgKiBAZGVzY3JpcHRpb24gU2hvcnRoYW5kIGZvciAjcmVxdWVzdCBmb3IgaGVhZCByZXF1ZXN0cy5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogbmV3IEZldGNoKCkucGF0Y2goJy9kYXRhJywgeyB1c2VyOiAnSm9obicgfSkudGhlbigocmVzKSA9PiB7XHJcbiAgICogICBjb25zb2xlLmxvZyhyZXMpO1xyXG4gICAqIH0pO1xyXG4gICAqL1xyXG4gIHBhdGNoKHVybCwgZGF0YSA9IHt9LCBjb25maWcgPSB7fSkge1xyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggJiYgIWlzU3RyaW5nKHVybCkpIHtcclxuICAgICAgY29uZmlnID0gZGF0YTtcclxuICAgICAgZGF0YSA9IHVybDtcclxuICAgICAgdXJsID0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXJsLCBhc3NpZ24oeyBtZXRob2Q6ICdwYXRjaCcsIGRhdGEgfSwgY29uZmlnKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEZldGNoI3Bvc3RcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IFt1cmxdIC0gU2VlIHtAbGluayBGZXRjaCNyZXF1ZXN0fS5cclxuICAgKiBAcGFyYW0geyp9IFtkYXRhXSAtIEFkZGl0aW9uYWwgcGFyYW1ldGVyIGZvciB1cGxvYWRpbmcgZGF0YS5cclxuICAgKiBAcGFyYW0ge0ZldGNoQ29uZmlnfSBbY29uZmlnXSAtIFNlZSB7QGxpbmsgRmV0Y2gjcmVxdWVzdH0uXHJcbiAgICogQHJldHVybnMge1Byb21pc2UuPEZldGNoUmVzcG9uc2UsIEVycm9yPn0gU2VlIHtAbGluayBGZXRjaCNyZXF1ZXN0fS5cclxuICAgKiBAZGVzY3JpcHRpb24gU2hvcnRoYW5kIGZvciAjcmVxdWVzdCBmb3IgaGVhZCByZXF1ZXN0cy5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogbmV3IEZldGNoKCkucG9zdCgnL2RhdGEnLCB7IHVzZXI6ICdKb2huJyB9KS50aGVuKChyZXMpID0+IHtcclxuICAgKiAgIGNvbnNvbGUubG9nKHJlcyk7XHJcbiAgICogfSk7XHJcbiAgICovXHJcbiAgcG9zdCh1cmwsIGRhdGEgPSB7fSwgY29uZmlnID0ge30pIHtcclxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICYmICFpc1N0cmluZyh1cmwpKSB7XHJcbiAgICAgIGNvbmZpZyA9IGRhdGE7XHJcbiAgICAgIGRhdGEgPSB1cmw7XHJcbiAgICAgIHVybCA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHVybCwgYXNzaWduKHsgbWV0aG9kOiAncG9zdCcsIGRhdGEgfSwgY29uZmlnKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIEZldGNoI3B1dFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1N0cmluZ30gW3VybF0gLSBTZWUge0BsaW5rIEZldGNoI3JlcXVlc3R9LlxyXG4gICAqIEBwYXJhbSB7Kn0gW2RhdGFdIC0gQWRkaXRpb25hbCBwYXJhbWV0ZXIgZm9yIHVwbG9hZGluZyBkYXRhLlxyXG4gICAqIEBwYXJhbSB7RmV0Y2hDb25maWd9IFtjb25maWddIC0gU2VlIHtAbGluayBGZXRjaCNyZXF1ZXN0fS5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZS48RmV0Y2hSZXNwb25zZSwgRXJyb3I+fSBTZWUge0BsaW5rIEZldGNoI3JlcXVlc3R9LlxyXG4gICAqIEBkZXNjcmlwdGlvbiBTaG9ydGhhbmQgZm9yICNyZXF1ZXN0IGZvciBoZWFkIHJlcXVlc3RzLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBuZXcgRmV0Y2goKS5wdXQoJy9kYXRhJywgeyB1c2VyOiAnSm9obicgfSkudGhlbigocmVzKSA9PiB7XHJcbiAgICogICBjb25zb2xlLmxvZyhyZXMpO1xyXG4gICAqIH0pO1xyXG4gICAqL1xyXG4gIHB1dCh1cmwsIGRhdGEgPSB7fSwgY29uZmlnID0ge30pIHtcclxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICYmICFpc1N0cmluZyh1cmwpKSB7XHJcbiAgICAgIGNvbmZpZyA9IGRhdGE7XHJcbiAgICAgIGRhdGEgPSB1cmw7XHJcbiAgICAgIHVybCA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHVybCwgYXNzaWduKHsgbWV0aG9kOiAncHV0JywgZGF0YSB9LCBjb25maWcpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgRmV0Y2gjcmVxdWVzdFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1N0cmluZ30gW3VybF0gLSBVUkwgZm9yIHRoZSByZXF1ZXN0LlxyXG4gICAqIEBwYXJhbSB7RmV0Y2hDb25maWd9IFtjb25maWddIC0gQWRkaXRpb25hbCBjb25maWcgZm9yIHRoaXMgcGFydGljdWxhciByZXF1ZXN0LlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlLjxGZXRjaFJlc3BvbnNlLCBFcnJvcj59IFByb21pc2UgdGhhdCBpcyByZXNvbHZlZCB3aXRoIHRoZSByZXF1ZXN0IHJlc3BvbnNlLlxyXG4gICAqIEBkZXNjcmlwdGlvbiBNYWluIGZ1bmN0aW9uIGZvciBtYWtpbmcgcmVxdWVzdHMuIEFsbCByZXF1ZXN0IG1ldGhvZHMgY2FsbCB0aGlzIG1ldGhvZFxyXG4gICAqIGluY2x1ZGluZyB0aGUgZmV0Y2ggaW5zdGFuY2UgaXRzZWxmLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiBjb25zdCBmZXRjaCA9IG5ldyBGZXRjaCgpO1xyXG4gICAqXHJcbiAgICogZmV0Y2gucmVxdWVzdCgnL2RhdGEnLCB7IHRpbWVvdXQ6IDEwMDAgfSkudGhlbigocmVzKSA9PiB7XHJcbiAgICogICBjb25zb2xlLmxvZyhyZXMpO1xyXG4gICAqIH0pO1xyXG4gICAqXHJcbiAgICogZmV0Y2gucmVxdWVzdCh7IHRpbWVvdXQ6IDEwMDAgfSkudGhlbigocmVzKSA9PiB7XHJcbiAgICogICBjb25zb2xlLmxvZyhyZXMpO1xyXG4gICAqIH0pO1xyXG4gICAqXHJcbiAgICogZmV0Y2gucmVxdWVzdCgpLnRoZW4oKHJlcykgPT4ge1xyXG4gICAqICAgY29uc29sZS5sb2cocmVzKTtcclxuICAgKiB9KTtcclxuICAgKi9cclxuICByZXF1ZXN0KHVybCwgY29uZmlnID0ge30pIHtcclxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmICFpc1N0cmluZyh1cmwpKSB7XHJcbiAgICAgIGNvbmZpZyA9IHVybDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBkYXRhQ29uZmlnID0gbmV3IFN1cGVyKGNvbmZpZykuaGFzT3duKCdkYXRhJylcclxuICAgICAgPyB7IGRhdGE6IGNvbmZpZy5kYXRhIH1cclxuICAgICAgOiB7fTtcclxuICAgIGNvbnN0IHVybENvbmZpZyA9IGlzU3RyaW5nKHVybClcclxuICAgICAgPyB7IHVybCB9XHJcbiAgICAgIDoge307XHJcblxyXG4gICAgZGVsZXRlIGNvbmZpZy5kYXRhO1xyXG5cclxuICAgIGNvbnN0IGNvbmYgPSBuZXcgU3VwZXIodGhpcy4kJClcclxuICAgICAgLmRlZXBDbG9uZSgpXHJcbiAgICAgIC5kZWVwQXNzaWduKHVybENvbmZpZywgY29uZmlnKVxyXG4gICAgICAuYXNzaWduKGRhdGFDb25maWcpXHJcbiAgICAgIC4kO1xyXG5cclxuICAgIGxldCB4aHI7XHJcbiAgICBsZXQgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xyXG5cclxuICAgIGl0ZXJhdGUoY29uZi5iZWZvcmUsIChtaWRkbGV3YXJlKSA9PiB7XHJcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgIGlmIChtaWRkbGV3YXJlLmxlbmd0aCA+PSAyKSB7XHJcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgICAgIHJlc29sdmUobWlkZGxld2FyZShjb25mKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0sIChlcnIpID0+IHtcclxuICAgICAgICBpZiAobWlkZGxld2FyZS5sZW5ndGggPCAyKSB7XHJcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgICAgcmVzb2x2ZShtaWRkbGV3YXJlKGVyciwgY29uZikpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oKCkgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBjb25zdCB7XHJcbiAgICAgICAgYWZ0ZXIsXHJcbiAgICAgICAgYXV0aDoge1xyXG4gICAgICAgICAgdXNlcm5hbWUsXHJcbiAgICAgICAgICBwYXNzd29yZFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGF0YSxcclxuICAgICAgICBoZWFkZXJzLFxyXG4gICAgICAgIG1ldGhvZCxcclxuICAgICAgICBvbnByb2dyZXNzLFxyXG4gICAgICAgIHJlc3BvbnNlVHlwZSxcclxuICAgICAgICB0aW1lb3V0LFxyXG4gICAgICAgIHVybCxcclxuICAgICAgICB3aXRoQ3JlZGVudGlhbHNcclxuICAgICAgfSA9IGNvbmY7XHJcblxyXG4gICAgICB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuXHJcbiAgICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlLCB1c2VybmFtZSwgcGFzc3dvcmQpO1xyXG5cclxuICAgICAgaXRlcmF0ZShoZWFkZXJzLCAodmFsdWUsIGhlYWRlcikgPT4ge1xyXG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGhlYWRlciwgdmFsdWUpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGlmIChvbnByb2dyZXNzKSB7XHJcbiAgICAgICAgaWYgKHVwbG9hZE1ldGhvZHMuaW5kZXhPZlN0cmljdChtZXRob2QpID09PSAtMSkge1xyXG4gICAgICAgICAgeGhyLm9ucHJvZ3Jlc3MgPSBvbnByb2dyZXNzO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB4aHIudXBsb2FkLm9ucHJvZ3Jlc3MgPSBvbnByb2dyZXNzO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgeGhyLm9uYWJvcnQgPSAoKSA9PiB7XHJcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignUmVxdWVzdCB3YXMgYWJvcnRlZCcpKTtcclxuXHJcbiAgICAgICAgeGhyID0gbnVsbDtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHhoci5vbmVycm9yID0gKCkgPT4ge1xyXG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ05ldHdvcmsgZXJyb3InKSk7XHJcblxyXG4gICAgICAgIHhociA9IG51bGw7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB4aHIub250aW1lb3V0ID0gKCkgPT4ge1xyXG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ1JlcXVlc3QgdGltZSBleGNlZWRlZCcpKTtcclxuXHJcbiAgICAgICAgeGhyID0gbnVsbDtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKCF4aHIgfHwgIXhoci5zdGF0dXMgfHwgeGhyLnJlYWR5U3RhdGUgIT09IDQpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0ge1xyXG4gICAgICAgICAgY29uZmlnOiBjb25mLFxyXG4gICAgICAgICAgZGF0YTogIXJlc3BvbnNlVHlwZSB8fCByZXNwb25zZVR5cGUgPT09ICd0ZXh0JyA/IHhoci5yZXNwb25zZVRleHQgOiB4aHIucmVzcG9uc2UsXHJcbiAgICAgICAgICBoZWFkZXJzOiBwYXJzZUhlYWRlcnMoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSxcclxuICAgICAgICAgIHN0YXR1czogeGhyLnN0YXR1cyA9PT0gMTIyMyA/IDIwNCA6IHhoci5zdGF0dXMsXHJcbiAgICAgICAgICBzdGF0dXNUZXh0OiB4aHIuc3RhdHVzID09PSAxMjIzID8gJ05vIENvbnRlbnQnIDogeGhyLnN0YXR1c1RleHQsXHJcbiAgICAgICAgICB4aHJcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBsZXQgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xyXG5cclxuICAgICAgICBpdGVyYXRlKGFmdGVyLCAobWlkZGxld2FyZSkgPT4ge1xyXG4gICAgICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChtaWRkbGV3YXJlLmxlbmd0aCA+PSAyKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgICAgICAgICByZXNvbHZlKG1pZGRsZXdhcmUocmVzcG9uc2UpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9LCAoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChtaWRkbGV3YXJlLmxlbmd0aCA8IDIpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgICAgICAgcmVzb2x2ZShtaWRkbGV3YXJlKGVyciwgcmVzcG9uc2UpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmVzb2x2ZShwcm9taXNlXHJcbiAgICAgICAgICAudGhlbigoKSA9PiByZXNwb25zZSlcclxuICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgZXJyLnJlc3BvbnNlID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRocm93IGVycjtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHhoci5yZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGU7XHJcbiAgICAgIHhoci50aW1lb3V0ID0gTnVtYmVyKHRpbWVvdXQpIHx8IDA7XHJcbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSAhIXdpdGhDcmVkZW50aWFscztcclxuXHJcbiAgICAgIHhoci5zZW5kKGRhdGEpO1xyXG4gICAgfSkpO1xyXG5cclxuICAgIHByb21pc2UuYWJvcnQgPSBmdW5jdGlvbiBhYm9ydCgpIHtcclxuICAgICAgaWYgKHhocikge1xyXG4gICAgICAgIHhoci5hYm9ydCgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHByb21pc2U7XHJcbiAgfVxyXG59XHJcblxyXG5kZWZpbmVQcm9wZXJ0aWVzKEZldGNoLnByb3RvdHlwZSwge1xyXG4gIFtTeW1ib2wudG9TdHJpbmdUYWddOiAnRmV0Y2gnXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvbiBmZXRjaEJlZm9yZU1pZGRsZXdhcmVcclxuICogQHByaXZhdGVcclxuICogQHBhcmFtIHtGZXRjaENvbmZpZ30gY29uZmlnXHJcbiAqIEBkZXNjcmlwdGlvbiBCdWlsdC1pbiBiZWZvcmUgbWlkZGxld2FyZSBmb3IgdXJsLCBkYXRhLCBtZXRob2QsIGhlYWRlcnMgY29uc3RydWN0aW9uLlxyXG4gKi9cclxuZnVuY3Rpb24gZmV0Y2hCZWZvcmVNaWRkbGV3YXJlKGNvbmZpZykge1xyXG4gIGNvbnN0IHtcclxuICAgIGJhc2VVUkwsXHJcbiAgICBkYXRhLFxyXG4gICAgaGVhZGVycyxcclxuICAgIG1ldGhvZCxcclxuICAgIHBhcmFtcyxcclxuICAgIHF1ZXJ5LFxyXG4gICAgdXJsXHJcbiAgfSA9IGNvbmZpZztcclxuICBjb25zdCBNRVRIT0QgPSBtZXRob2QudG9VcHBlckNhc2UoKTtcclxuXHJcbiAgY29uZmlnLm1ldGhvZCA9IE1FVEhPRDtcclxuICBjb25maWcudXJsID0gY29uc3RydWN0VVJMKGJhc2VVUkwsIHVybCwgcGFyYW1zLCBxdWVyeSk7XHJcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKGRhdGEsIE1FVEhPRCwgaGVhZGVycyk7XHJcbiAgY29uZmlnLmhlYWRlcnMgPSBuZXcgU3VwZXIoaGVhZGVycykub2JqZWN0KChoZWFkZXJzLCB2YWx1ZXMsIGhlYWRlcikgPT4ge1xyXG4gICAgaGVhZGVyID0gbmV3IFN0cihoZWFkZXIpXHJcbiAgICAgIC50b0NhcGl0YWxDYXNlKClcclxuICAgICAgLnJlcGxhY2UoL1xccysvZywgJy0nKVxyXG4gICAgICAuJDtcclxuXHJcbiAgICBoZWFkZXJzW2hlYWRlcl0gPSB2YWx1ZXMuam9pbignLCAnKTtcclxuICB9KS4kO1xyXG59XHJcblxyXG4vKipcclxuICogQGNvbnN0IHtGZXRjaH0gZmV0Y2hcclxuICogQHR5cGUge0ZldGNofVxyXG4gKiBAcHVibGljXHJcbiAqIEBkZXNjcmlwdGlvbiBFbXB0eSBpbnN0YW5jZSBvZiBGZXRjaC5cclxuICovXHJcbmNvbnN0IGZldGNoID0gbmV3IEZldGNoKCk7XHJcblxyXG5leHBvcnQgeyBGZXRjaCwgZmV0Y2ggfTtcclxuIiwiLyoqXHJcbiAqIEBtb2R1bGUgUm91dGVyXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBtaXhpblxyXG4gKiBAZGVzY3JpcHRpb24gRXhwb3J0cyBSb3V0ZXIuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQXJyIH0gZnJvbSAnLi9BcnInO1xyXG5pbXBvcnQgeyBFbGVtLCB3aW4gfSBmcm9tICcuL0VsZW0nO1xyXG5pbXBvcnQgeyBzZWxmIH0gZnJvbSAnLi9GdW5jJztcclxuaW1wb3J0IHsgU3RyIH0gZnJvbSAnLi9TdHInO1xyXG5pbXBvcnQgeyBTdXBlciB9IGZyb20gJy4vU3VwZXInO1xyXG5pbXBvcnQgeyBzd2l0Y2hlciB9IGZyb20gJy4vU3dpdGNoZXInO1xyXG5pbXBvcnQgeyBhc3NpZ24sIGlzTmlsLCBpc1JlZ0V4cCwgaXNTdHJpbmcgfSBmcm9tICcuL2hlbHBlcnMnO1xyXG5pbXBvcnQgY29uc3RydWN0VVJMIGZyb20gJy4vaGVscGVycy9jb25zdHJ1Y3RVUkwnO1xyXG5pbXBvcnQgcmVzb2x2ZVVSTCBmcm9tICcuL2hlbHBlcnMvcmVzb2x2ZVVSTCc7XHJcblxyXG5jb25zdCBSb3V0ZXMgPSBuZXcgQXJyKFtdKTtcclxuY29uc3Qgc3Vic2NyaWJlcnMgPSBuZXcgU3VwZXIoe30pO1xyXG5jb25zdCB7XHJcbiAgaGlzdG9yeSxcclxuICBsb2NhdGlvbixcclxuICBsb2NhdGlvbjoge1xyXG4gICAgb3JpZ2luLFxyXG4gICAgaHJlZlxyXG4gIH1cclxufSA9IGdsb2JhbDtcclxubGV0IGluaXRpYWxpemVkO1xyXG5sZXQgcHVzaGVkO1xyXG5sZXQgd2FzUm9vdDtcclxubGV0IHdhc0RlZmF1bHQ7XHJcbmxldCByb290Um91dGU7XHJcbmxldCByZWRpcmVjdFJvdXRlO1xyXG5sZXQgUmVkaXJlY3RSb3V0ZTtcclxubGV0IGRlZmF1bHRSb3V0ZTtcclxubGV0IERlZmF1bHRSb3V0ZTtcclxubGV0IGN1cnJlbnRSb3V0ZTtcclxubGV0IGN1cnJlbnRSb3V0ZVBhcmFtcztcclxuXHJcbmNvbnN0IHBhdGhTd2l0Y2hlciA9IHN3aXRjaGVyKCdjYWxsJywgKCkgPT4ge1xyXG4gIHRocm93IG5ldyBFcnJvcignU3RhdGUgcGF0aCBtdXN0IGJlIGEgc3RyaW5nLCBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBvciB1bmRlZmluZWQhIChhdCByZWdpc3RlclN0YXRlKScpO1xyXG59KVxyXG4gIC5jYXNlKGlzUmVnRXhwLCAocGF0aCkgPT4gKHtcclxuICAgIHBhdGg6IHBhdGguc291cmNlLnJlcGxhY2UoL1xcXFxcXC8vZywgJy8nKSxcclxuICAgIHVybDogcGF0aCxcclxuICAgIHBhcmFtczoge31cclxuICB9KSlcclxuICAuY2FzZShpc05pbCwgKCkgPT4gKHtcclxuICAgIHBhdGg6ICcvJyxcclxuICAgIHVybDogJy8nLFxyXG4gICAgcGFyYW1zOiB7fVxyXG4gIH0pKVxyXG4gIC5jYXNlKGlzU3RyaW5nLCAocGF0aCkgPT4ge1xyXG4gICAgaWYgKHBhdGguaW5kZXhPZignLycpKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignSWYgcm91dGUgcGF0aCBpcyBhIHN0cmluZyBpdCBtdXN0IHN0YXJ0IHdpdGggXCIvXCIhIChhdCByZWdpc3RlclN0YXRlKScpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGluZGV4ID0gcGF0aC5pbmRleE9mKCc/Jyk7XHJcbiAgICBjb25zdCBwYXJhbXMgPSBuZXcgU3VwZXIoe30pO1xyXG4gICAgbGV0IG5ld1VSTCA9ICcnO1xyXG4gICAgY29uc3QgbmV3UGF0aCA9IG5ldyBTdHIocGF0aClcclxuICAgICAgLnNsaWNlKDAsIGluZGV4ID09PSAtMSA/IHBhdGgubGVuZ3RoIDogaW5kZXgpXHJcbiAgICAgIC5yZXBsYWNlKC9eXFwvfFxcLyQvZylcclxuICAgICAgLnNwbGl0KC9cXC8vKVxyXG4gICAgICAubWFwKChwYXJ0LCBpLCBhcnJheSkgPT4ge1xyXG4gICAgICAgIGlmICghcGFydCAmJiBhcnJheS5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0lmIHJvdXRlIHBhdGggaXMgYSBzdHJpbmcgaXQgbXVzdCBub3QgY29udGFpbiBcIi8vXCIgb3IgZW5kIHdpdGggXCIvXCIhIChhdCBtYWtlUm91dGUpJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBpbmRleCA9IHBhcnQuaW5kZXhPZignOicpO1xyXG5cclxuICAgICAgICBpZiAoaW5kZXggPiAwKSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0lmIHJvdXRlIHBhdGggaXMgYSBzdHJpbmcgcmVzb3VyY2UgcGFydCBtdXN0IGJlIGVpdGhlciBhIHN0cmluZyBvciBhbiBVUkwgcGFyYW1ldGVyISAoYXQgbWFrZVJvdXRlKScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdXJsOiBwYXJ0LFxyXG4gICAgICAgICAgICB2YWx1ZTogcGFydFxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHtcclxuICAgICAgICAgIG5hbWUsXHJcbiAgICAgICAgICByZWdleHAgPSAvW14vXSovXHJcbiAgICAgICAgfSA9IHJlc29sdmVQYXJhbWV0ZXIoXHJcbiAgICAgICAgICBwYXJ0LnNsaWNlKDEpLFxyXG4gICAgICAgICAgJ1VSTCBwYXJhbWV0ZXIgbXVzdCBub3QgYmUgYW4gZW1wdHkgc3RyaW5nIG9yIGNvbnRhaW4gY2hhcmFjdGVycyBiZXNpZGVzIFwiYS16QS1aXyRcIiEgKGF0IG1ha2VSb3V0ZSknLFxyXG4gICAgICAgICAgJ1VSTCBwYXJhbWV0ZXIgcmVnZXhwIHZhbGlkYXRvciBtdXN0IGJlIHdpdGhpbiBwYXJlbnRoZXNlcyAoZS5nLiA6dXNlcklkKFxcXFxkKykgYW5kIG5vdCBjb250YWluIG9uZXMpISAoYXQgbWFrZVJvdXRlKSdcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBwYXJhbXMuJFtuYW1lXSA9IHBhcmFtcy5jb3VudDtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHR5cGU6ICdwYXJhbScsXHJcbiAgICAgICAgICB1cmw6IGA6JHsgbmFtZSB9YCxcclxuICAgICAgICAgIHZhbHVlOiByZWdleHBcclxuICAgICAgICB9O1xyXG4gICAgICB9KVxyXG4gICAgICAud29yZCgoeyB0eXBlLCB1cmwsIHZhbHVlIH0pID0+IHtcclxuICAgICAgICBsZXQgbmV3UGF0aDtcclxuXHJcbiAgICAgICAgaWYgKHR5cGUgPT09ICdwYXJhbScpIHtcclxuICAgICAgICAgIG5ld1BhdGggPSBgKCR7IHZhbHVlLnNvdXJjZS5yZXBsYWNlKC9cXFxcXFwvL2csICcvJykgfSlgO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBuZXdQYXRoID0gbmV3IFN0cih2YWx1ZSkuZXNjYXBlUmVnRXhwKCkuJDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG5ld1VSTCArPSBgLyR7IHVybCB9YDtcclxuXHJcbiAgICAgICAgcmV0dXJuIGAvJHsgbmV3UGF0aCB9YDtcclxuICAgICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcGF0aDogbmV3UGF0aCxcclxuICAgICAgdXJsOiBuZXdVUkwsXHJcbiAgICAgIHBhcmFtczogcGFyYW1zLiRcclxuICAgIH07XHJcbiAgfSk7XHJcblxyXG5jbGFzcyBSb3V0ZSB7XHJcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xyXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcblxyXG4gICAgY29uc3Qge1xyXG4gICAgICBuYW1lLFxyXG4gICAgICBwYXRoID0gJy8nLFxyXG4gICAgICBhYnN0cmFjdCA9IGZhbHNlLFxyXG4gICAgICBwYXJlbnQsXHJcbiAgICAgIGRlY29kZVF1ZXJ5ID0gdHJ1ZSxcclxuICAgICAgZW5jb2RlUXVlcnkgPSB0cnVlLFxyXG4gICAgICBkZWNvZGVQYXJhbXMgPSB0cnVlLFxyXG4gICAgICBlbmNvZGVQYXJhbXMgPSB0cnVlXHJcbiAgICB9ID0gb3B0aW9ucyB8fCB7fTtcclxuICAgIGNvbnN0IHtcclxuICAgICAgdXJsOiByZWxhdGl2ZVVSTCxcclxuICAgICAgcGF0aDogcmVsYXRpdmVQYXRoLFxyXG4gICAgICBwYXJhbXNcclxuICAgIH0gPSBwYXRoU3dpdGNoZXIocGF0aCk7XHJcbiAgICBjb25zdCBxdWVyeSA9IHt9O1xyXG5cclxuICAgIG5ldyBTdXBlcih0aGlzKS5hc3NpZ24oe1xyXG4gICAgICBuYW1lLFxyXG4gICAgICBwYXJlbnROYW1lOiBwYXJlbnQsXHJcbiAgICAgIGFic3RyYWN0OiAhIWFic3RyYWN0LFxyXG4gICAgICBjaGlsZHJlbjogbmV3IEFycihbXSksXHJcbiAgICAgIGRlY29kZVBhcmFtczogISFkZWNvZGVQYXJhbXMsXHJcbiAgICAgIGRlY29kZVF1ZXJ5OiAhIWRlY29kZVF1ZXJ5LFxyXG4gICAgICBlbmNvZGVQYXJhbXM6ICEhZW5jb2RlUGFyYW1zLFxyXG4gICAgICBlbmNvZGVRdWVyeTogISFlbmNvZGVRdWVyeSxcclxuICAgICAgcGFyYW1zLFxyXG4gICAgICBxdWVyeSxcclxuICAgICAgcmVsYXRpdmVQYXRoLFxyXG4gICAgICByZWxhdGl2ZVVSTFxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgaW5kZXggPSBpc1N0cmluZyhwYXRoKSA/IHBhdGguaW5kZXhPZignPycpIDogLTE7XHJcblxyXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xyXG4gICAgICBuZXcgU3RyKHBhdGgpXHJcbiAgICAgICAgLnJlcGxhY2UoLyYkLylcclxuICAgICAgICAuc2xpY2UoaW5kZXggKyAxKVxyXG4gICAgICAgIC5zcGxpdCgnJicpXHJcbiAgICAgICAgLmZvckVhY2goKHBhcmFtKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCB7XHJcbiAgICAgICAgICAgIG5hbWUsXHJcbiAgICAgICAgICAgIHJlZ2V4cCA9IC9bXFxzXFxTXSovXHJcbiAgICAgICAgICB9ID0gcmVzb2x2ZVBhcmFtZXRlcihcclxuICAgICAgICAgICAgcGFyYW0sXHJcbiAgICAgICAgICAgICdRdWVyeSBwYXJhbWV0ZXIgbXVzdCBub3QgYmUgYW4gZW1wdHkgc3RyaW5nIG9yIGNvbnRhaW4gY2hhcmFjdGVycyBiZXNpZGVzIFwiYS16QS1aXyRcIiEgKGF0IG1ha2VSb3V0ZSknLFxyXG4gICAgICAgICAgICAnUXVlcnkgcGFyYW1ldGVyIHJlZ2V4cCB2YWxpZGF0b3IgbXVzdCBiZSB3aXRoaW4gcGFyZW50aGVzZXMgKGUuZy4gOnVzZXJJZChcXFxcZCspKSBhbmQgbm90IGNvbnRhaW4gdGhlbSEgKGF0IG1ha2VSb3V0ZSknXHJcbiAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgIHF1ZXJ5W25hbWVdID0gbmV3IFJlZ0V4cChgXiR7IHJlZ2V4cC5zb3VyY2UucmVwbGFjZSgvXFxcXFxcLy9nLCAnLycpIH0kYCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG5hbWUgPT09IGRlZmF1bHRSb3V0ZSAmJiAoXHJcbiAgICAgICAgbmV3IFN1cGVyKHBhcmFtcykuY291bnRcclxuICAgICAgICB8fCBuZXcgU3VwZXIocXVlcnkpLmNvdW50XHJcbiAgICAgICkpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdEZWZhdWx0IHJvdXRlIG11c3Qgbm90IGhhdmUgVVJMIG9yIHF1ZXJ5IHBhcmFtcyEgKGF0IG1ha2VSb3V0ZSknKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IGJhc2VSb3V0ZSA9IG5ldyBSb3V0ZSgpO1xyXG5cclxuZnVuY3Rpb24gaW5pdFJvdXRlcigpIHtcclxuICBpZiAoaW5pdGlhbGl6ZWQpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGluaXRpYWxpemVkID0gdHJ1ZTtcclxuICBSZWRpcmVjdFJvdXRlID0gKFJvdXRlcy5maW5kKCh7IG5hbWUgfSkgPT4gbmFtZSA9PT0gcmVkaXJlY3RSb3V0ZSkgfHwge30pLnZhbHVlO1xyXG4gIERlZmF1bHRSb3V0ZSA9IChSb3V0ZXMuZmluZCgoeyBuYW1lIH0pID0+IG5hbWUgPT09IGRlZmF1bHRSb3V0ZSkgfHwge30pLnZhbHVlO1xyXG5cclxuICBpZiAocmVkaXJlY3RSb3V0ZSAmJiAhUmVkaXJlY3RSb3V0ZSkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKGBUaGVyZSBpcyBubyBzcGVjaWZpZWQgZmFsbGJhY2sgcm91dGUgKFwiJHsgcmVkaXJlY3RSb3V0ZSB9XCIpISAoYXQgaW5pdFJvdXRlcilgKTtcclxuICB9XHJcblxyXG4gIFJvdXRlc1xyXG4gICAgLmZvckVhY2goKHJvdXRlKSA9PiB7XHJcbiAgICAgIGNvbnN0IHtcclxuICAgICAgICBwYXJlbnROYW1lLFxyXG4gICAgICAgIG5hbWVcclxuICAgICAgfSA9IHJvdXRlO1xyXG4gICAgICBjb25zdCBQYXJlbnROYW1lID0gcGFyZW50TmFtZSB8fCByb290Um91dGU7XHJcbiAgICAgIGNvbnN0IHsgdmFsdWU6IHBhcmVudCB9ID0gUm91dGVzLmZpbmQoKHsgbmFtZSB9KSA9PiBuYW1lID09PSBQYXJlbnROYW1lKSB8fCB7fTtcclxuXHJcbiAgICAgIGlmICghcGFyZW50KSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBzdWNoIHBhcmVudCByb3V0ZSAoXCIkeyBQYXJlbnROYW1lIH1cIikgZm91bmQgZm9yIHRoZSByb3V0ZSAoXCIkeyBuYW1lIH1cIikhIChhdCBpbml0Um91dGVyKWApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIXBhcmVudC5hYnN0cmFjdCAmJiBuYW1lICE9PSByb290Um91dGUpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFBhcmVudCByb3V0ZSBtdXN0IGJlIGFic3RyYWN0IChmb3IgXCIkeyBuYW1lIH1cIikhIChhdCBpbml0Um91dGVyKWApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAobmFtZSAhPT0gcm9vdFJvdXRlKSB7XHJcbiAgICAgICAgcm91dGUucGFyZW50TmFtZSA9IFBhcmVudE5hbWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJvdXRlLnBhcmVudCA9IG5hbWUgPT09IHJvb3RSb3V0ZVxyXG4gICAgICAgID8gYmFzZVJvdXRlXHJcbiAgICAgICAgOiBwYXJlbnQ7XHJcbiAgICB9KVxyXG4gICAgLmZvckVhY2goKHJvdXRlKSA9PiB7XHJcbiAgICAgIGNvbnN0IHtcclxuICAgICAgICBuYW1lLFxyXG4gICAgICAgIHBhcmVudDoge1xyXG4gICAgICAgICAgcGFyYW1zOiBwYXJlbnRQYXJhbXMsXHJcbiAgICAgICAgICBxdWVyeTogcGFyZW50UXVlcnksXHJcbiAgICAgICAgICBwYXRoXHJcbiAgICAgICAgfSxcclxuICAgICAgICBwYXJhbXMsXHJcbiAgICAgICAgcXVlcnksXHJcbiAgICAgICAgcmVsYXRpdmVVUkwsXHJcbiAgICAgICAgcmVsYXRpdmVQYXRoXHJcbiAgICAgIH0gPSByb3V0ZTtcclxuICAgICAgbGV0IHByb3RvID0gcm91dGU7XHJcbiAgICAgIGxldCBjb3VudCA9IDA7XHJcbiAgICAgIGxldCBuZXdQYXRoID0gcmVsYXRpdmVQYXRoO1xyXG4gICAgICBsZXQgbmV3VVJMID0gJyc7XHJcblxyXG4gICAgICBpZiAoaXNSZWdFeHAocGF0aCkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VSTCByZWdleHAgcm91dGUgY2Fubm90IGJlIGV4dGVuZGVkISAoYXQgaW5pdFJvdXRlciknKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgd2hpbGUgKHByb3RvID0gcHJvdG8ucGFyZW50KSB7XHJcbiAgICAgICAgY291bnQgKz0gbmV3IFN1cGVyKHByb3RvLnBhcmFtcykuY291bnQ7XHJcbiAgICAgICAgbmV3UGF0aCA9IHByb3RvLnJlbGF0aXZlUGF0aCArIG5ld1BhdGg7XHJcbiAgICAgICAgbmV3VVJMID0gcHJvdG8ucmVsYXRpdmVVUkwgKyBuZXdVUkw7XHJcblxyXG4gICAgICAgIHByb3RvLmNoaWxkcmVuLnB1c2gocm91dGUpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBuZXdQYXRoID0gbmV3IFJlZ0V4cChgXiR7IG5ld1BhdGgucmVwbGFjZSgvXFwvKy9nLCAnLycpLnJlcGxhY2UoL1xcLyQvLCAnJykgfHwgJy8nIH0kYCk7XHJcbiAgICAgIG5ld1VSTCA9IGlzUmVnRXhwKHJlbGF0aXZlVVJMKVxyXG4gICAgICAgID8gbmV3UGF0aFxyXG4gICAgICAgIDogKG5ld1VSTCArIHJlbGF0aXZlVVJMKS5yZXBsYWNlKC9cXC8rL2csICcvJykucmVwbGFjZSgvXFwvJC8sICcnKSB8fCAnLyc7XHJcblxyXG4gICAgICBuZXcgU3VwZXIocXVlcnkpLnByb3RvKHBhcmVudFF1ZXJ5KTtcclxuICAgICAgbmV3IFN1cGVyKHBhcmFtcylcclxuICAgICAgICAucHJvdG8ocGFyZW50UGFyYW1zKVxyXG4gICAgICAgIC5mb3JFYWNoKCh2YWx1ZSwga2V5LCBwYXJhbXMpID0+IHtcclxuICAgICAgICAgIHBhcmFtc1trZXldICs9IGNvdW50O1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgaWYgKG5hbWUgPT09IGRlZmF1bHRSb3V0ZSAmJiAoXHJcbiAgICAgICAgICBuZXcgU3VwZXIocGFyYW1zKS5jb3VudFxyXG4gICAgICAgICAgfHwgbmV3IFN1cGVyKHF1ZXJ5KS5jb3VudFxyXG4gICAgICAgICkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RlZmF1bHQgcm91dGUgbXVzdCBub3QgaGF2ZSBVUkwgb3IgcXVlcnkgcGFyYW1zISAoYXQgaW5pdFJvdXRlciknKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcm91dGUudXJsID0gbmV3VVJMO1xyXG4gICAgICByb3V0ZS52YWxpZGF0ZVBhdGggPSBuZXdQYXRoO1xyXG4gICAgfSk7XHJcblxyXG4gIGNoYW5nZVJvdXRlKCk7XHJcblxyXG4gIHdpbi5vbih7XHJcbiAgICBwb3BzdGF0ZSgpIHtcclxuICAgICAgaWYgKGxvY2F0aW9uLmhyZWYgIT09IGhyZWYpIHtcclxuICAgICAgICBwdXNoZWQgPSB0cnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAocHVzaGVkKSB7XHJcbiAgICAgICAgY2hhbmdlUm91dGUoKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGNsaWNrKGUpIHtcclxuICAgICAgY29uc3QgY2xvc2VzdExpbmsgPSBuZXcgRWxlbShlLnRhcmdldCkuY2xvc2VzdCgnYScpO1xyXG5cclxuICAgICAgaWYgKGNsb3Nlc3RMaW5rLmxlbmd0aCAmJiBjbG9zZXN0TGluay5hdHRyKCd0YXJnZXQnKSAhPT0gJ19ibGFuaycpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgIGZvcndhcmQoY2xvc2VzdExpbmsuYXR0cignaHJlZicpIHx8ICcnLCB0cnVlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBtYWtlUm91dGUob3B0aW9ucykge1xyXG4gIGNvbnN0IHtcclxuICAgIG5hbWUsXHJcbiAgICBwYXRoLFxyXG4gICAgYWJzdHJhY3QsXHJcbiAgICByb290LFxyXG4gICAgZmFsbGJhY2tUbyxcclxuICAgIGRlZmF1bHQ6IGlzRGVmYXVsdFxyXG4gIH0gPSBvcHRpb25zIHx8IHt9O1xyXG5cclxuICBpZiAoaW5pdGlhbGl6ZWQpIHtcclxuICAgIGNvbnNvbGUud2FybignUm91dGVyIHdhcyBhbHJlYWR5IGluaXRpYWxpemVkIChhdCBtYWtlUm91dGUpJyk7XHJcblxyXG4gICAgcmV0dXJuIHNlbGY7XHJcbiAgfVxyXG5cclxuICBpZiAod2FzUm9vdCAmJiByb290KSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZXJlIGNhbid0IGJlIHR3byByb290IHJvdXRlcyAoXCIkeyByb290Um91dGUgfVwiIGFuZCBcIiR7IG5hbWUgfVwiKSEgKGF0IG1ha2VSb3V0ZSlgKTtcclxuICB9XHJcblxyXG4gIGlmICh3YXNEZWZhdWx0ICYmIGlzRGVmYXVsdCkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKGBUaGVyZSBjYW4ndCBiZSB0d28gZGVmYXVsdCByb3V0ZXMgKFwiJHsgZGVmYXVsdFJvdXRlIH1cIiBhbmQgXCIkeyBuYW1lIH1cIikhIChhdCBtYWtlUm91dGUpYCk7XHJcbiAgfVxyXG5cclxuICBpZiAoIW5hbWUpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcignU3RhdGUgbXVzdCBoYXZlIGEgbm9uLWVtcHR5IHN0cmluZyBcIm5hbWVcIiBwcm9wZXJ0eSEgKGF0IG1ha2VSb3V0ZSknKTtcclxuICB9XHJcblxyXG4gIGlmIChSb3V0ZXMuc29tZSgoeyBuYW1lOiBOYW1lIH0pID0+IE5hbWUgPT09IG5hbWUpKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1N0YXRlIG11c3QgaGF2ZSB1bmlxdWUgXCJuYW1lXCIgcHJvcGVydHkhIChhdCBtYWtlUm91dGUpJyk7XHJcbiAgfVxyXG5cclxuICBpZiAocm9vdCkge1xyXG4gICAgd2FzUm9vdCA9IHRydWU7XHJcbiAgICByb290Um91dGUgPSBuYW1lO1xyXG4gICAgb3B0aW9ucy5wYXJlbnQgPSBudWxsO1xyXG5cclxuICAgIGlmIChmYWxsYmFja1RvKSB7XHJcbiAgICAgIHJlZGlyZWN0Um91dGUgPSBmYWxsYmFja1RvO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYgKGlzRGVmYXVsdCkge1xyXG4gICAgd2FzRGVmYXVsdCA9IHRydWU7XHJcbiAgICBkZWZhdWx0Um91dGUgPSBuYW1lO1xyXG5cclxuICAgIGlmIChhYnN0cmFjdCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RlZmF1bHQgcm91dGUgY2FuXFwndCBiZSBhYnN0cmFjdCEgKGF0IG1ha2VSb3V0ZSknKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaXNSZWdFeHAocGF0aCkpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdEZWZhdWx0IHJvdXRlIGNhblxcJ3QgaGF2ZSBhIHJlZ2V4cCBwYXRoISAoYXQgbWFrZVJvdXRlKScpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29uc3Qgcm91dGUgPSBuZXcgUm91dGUob3B0aW9ucyk7XHJcblxyXG4gIFJvdXRlcy5wdXNoKHJvdXRlKTtcclxuXHJcbiAgbGV0IHVuc3Vic2NyaWJlO1xyXG4gIGxldCByb3V0ZUxvYWRlZDtcclxuXHJcbiAgcmV0dXJuIChCbG9jaykgPT4gKFxyXG4gICAgY2xhc3MgZXh0ZW5kcyBCbG9jayB7XHJcbiAgICAgIHN0YXRpYyB0ZW1wbGF0ZSA9IGA8ZGl2IGNsYXNzPVwiZHdheW5lLXJvdXRlIHJvdXRlLSR7IG5hbWUgfVwiIGQtc2hvdz1cIntfX2lzQ3VycmVudFJvdXRlX199XCI+JHsgQmxvY2sudGVtcGxhdGUgfTwvZGl2PmA7XHJcblxyXG4gICAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XHJcbiAgICAgICAgc3VwZXIob3B0cyk7XHJcblxyXG4gICAgICAgIGlmIChyb290KSB7XHJcbiAgICAgICAgICBpbml0Um91dGVyKCk7XHJcblxyXG4gICAgICAgICAgY29uc3Qgcm91dGVyID0ge1xyXG4gICAgICAgICAgICBidWlsZFVSTChuYW1lLCBvcHRpb25zID0ge30pIHtcclxuICAgICAgICAgICAgICBjb25zdCB7IHZhbHVlOiByb3V0ZSB9ID0gUm91dGVzLmZpbmQoKHsgbmFtZTogbiB9KSA9PiBuID09PSBuYW1lKSB8fCB7fTtcclxuXHJcbiAgICAgICAgICAgICAgaWYgKCFyb3V0ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGVyZSBhcmUgbm8gcm91dGVzIHdpdGggbmFtZSBcIiR7IG5hbWUgfVwiISAoYXQgcm91dGVyLmJ1aWxkVVJMKWApO1xyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgY29uc3Qge1xyXG4gICAgICAgICAgICAgICAgdXJsLFxyXG4gICAgICAgICAgICAgICAgZW5jb2RlUGFyYW1zLFxyXG4gICAgICAgICAgICAgICAgZW5jb2RlUXVlcnlcclxuICAgICAgICAgICAgICB9ID0gcm91dGU7XHJcblxyXG4gICAgICAgICAgICAgIGlmIChpc1JlZ0V4cCh1cmwpKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VSTCBjYW4gYmUgYnVpbHQgb25seSBmcm9tIHRoZSBzdHJpbmcgVVJMcyEgKGF0IHJvdXRlci5idWlsZFVSTCknKTtcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIGNvbnN0IHtcclxuICAgICAgICAgICAgICAgIHBhcmFtcyA9IHt9LFxyXG4gICAgICAgICAgICAgICAgcXVlcnkgPSB7fSxcclxuICAgICAgICAgICAgICAgIGhhc2ggPSAnJ1xyXG4gICAgICAgICAgICAgIH0gPSBvcHRpb25zO1xyXG5cclxuICAgICAgICAgICAgICByZXR1cm4gY29uc3RydWN0VVJMKG9yaWdpbiwgdXJsLCBwYXJhbXMsIHF1ZXJ5LCBoYXNoLCB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbXM6IGVuY29kZVBhcmFtcyxcclxuICAgICAgICAgICAgICAgIHF1ZXJ5OiBlbmNvZGVRdWVyeVxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnbyhuYW1lLCBvcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgZm9yd2FyZChyb3V0ZXIuYnVpbGRVUkwobmFtZSwgb3B0aW9ucyksIHRydWUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnb1RvVVJMKHVybCkge1xyXG4gICAgICAgICAgICAgIGZvcndhcmQodXJsLCB0cnVlKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcHVzaFVSTCh1cmwpIHtcclxuICAgICAgICAgICAgICBjaGFuZ2VIaXN0b3J5KHVybCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJlZGlyZWN0KG5hbWUsIG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICBmb3J3YXJkKHJvdXRlci5idWlsZFVSTChuYW1lLCBvcHRpb25zKSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJlZGlyZWN0VG9VUkwodXJsKSB7XHJcbiAgICAgICAgICAgICAgZm9yd2FyZCh1cmwpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByZXBsYWNlVVJMKHVybCkge1xyXG4gICAgICAgICAgICAgIGNoYW5nZUhpc3RvcnkodXJsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICB0aGlzLmdsb2JhbC5yb3V0ZXIgPSByb3V0ZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9faXNDdXJyZW50Um91dGVfXyA9IChcclxuICAgICAgICAgIHJvdXRlID09PSBjdXJyZW50Um91dGVcclxuICAgICAgICAgIHx8IHJvdXRlLmNoaWxkcmVuLmluZGV4T2YoY3VycmVudFJvdXRlKSAhPT0gLTFcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuYXJncy5yb3V0ZSA9IGN1cnJlbnRSb3V0ZVBhcmFtcztcclxuXHJcbiAgICAgICAgcm91dGVMb2FkZWQgPSBmYWxzZTtcclxuICAgICAgICB1bnN1YnNjcmliZSA9IHN1YnNjcmliZShuYW1lLCAoKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCBpc0N1cnJlbnRSb3V0ZSA9IChcclxuICAgICAgICAgICAgcm91dGUgPT09IGN1cnJlbnRSb3V0ZVxyXG4gICAgICAgICAgICB8fCByb3V0ZS5jaGlsZHJlbi5pbmRleE9mKGN1cnJlbnRSb3V0ZSkgIT09IC0xXHJcbiAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgIGlmIChpc0N1cnJlbnRSb3V0ZSkge1xyXG4gICAgICAgICAgICBjYWxsQmVmb3JlTG9hZCh0aGlzKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNhbGxCZWZvcmVMZWF2ZSh0aGlzKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB0aGlzLmFyZ3Mucm91dGUgPSBjdXJyZW50Um91dGVQYXJhbXM7XHJcbiAgICAgICAgICB0aGlzLl9faXNDdXJyZW50Um91dGVfXyA9IGlzQ3VycmVudFJvdXRlO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fX2lzQ3VycmVudFJvdXRlX18pIHtcclxuICAgICAgICAgIGNhbGxCZWZvcmVMb2FkKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgYmVmb3JlUmVtb3ZlKCkge1xyXG4gICAgICAgIHVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgdW5zdWJzY3JpYmUgPSBudWxsO1xyXG4gICAgICAgIGNhbGxCZWZvcmVMZWF2ZSh0aGlzKTtcclxuICAgICAgICBzdXBlci5iZWZvcmVSZW1vdmUoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICk7XHJcblxyXG4gIGZ1bmN0aW9uIGNhbGxCZWZvcmVMb2FkKHJvdXRlKSB7XHJcbiAgICBpZiAocm91dGUuYmVmb3JlTG9hZFJvdXRlICYmICFyb3V0ZUxvYWRlZCkge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHJvdXRlLmJlZm9yZUxvYWRSb3V0ZSgpO1xyXG4gICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGBVbmNhdWdodCBlcnJvciBpbiAkeyBuYW1lIH0jYmVmb3JlTGVhdmU6YCwgZXJyKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJvdXRlTG9hZGVkID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNhbGxCZWZvcmVMZWF2ZShyb3V0ZSkge1xyXG4gICAgaWYgKHJvdXRlLmJlZm9yZUxlYXZlUm91dGUgJiYgcm91dGVMb2FkZWQpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICByb3V0ZS5iZWZvcmVMZWF2ZVJvdXRlKCk7XHJcbiAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYFVuY2F1Z2h0IGVycm9yIGluICR7IG5hbWUgfSNiZWZvcmVMZWF2ZTpgLCBlcnIpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcm91dGVMb2FkZWQgPSBmYWxzZTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHN1YnNjcmliZShuYW1lLCBjYWxsYmFjaykge1xyXG4gIHN1YnNjcmliZXJzLiRbbmFtZV0gPSBjYWxsYmFjaztcclxuXHJcbiAgcmV0dXJuICgpID0+IHtcclxuICAgIHN1YnNjcmliZXJzLmRlbGV0ZShuYW1lKTtcclxuICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBmb3J3YXJkKHVybCwgcHVzaCkge1xyXG4gIGNoYW5nZUhpc3RvcnkodXJsLCBwdXNoKTtcclxuICBjaGFuZ2VSb3V0ZSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjaGFuZ2VSb3V0ZSgpIHtcclxuICBjb25zdCByb3V0ZSA9IGZpbmRSb3V0ZUJ5VVJMKCk7XHJcblxyXG4gIGlmIChyb3V0ZSkge1xyXG4gICAgKHtcclxuICAgICAgcm91dGU6IGN1cnJlbnRSb3V0ZSxcclxuICAgICAgLi4uY3VycmVudFJvdXRlUGFyYW1zXHJcbiAgICB9ID0gcm91dGUpO1xyXG4gICAgYXNzaWduKGN1cnJlbnRSb3V0ZVBhcmFtcywge1xyXG4gICAgICBuYW1lOiBjdXJyZW50Um91dGUubmFtZSxcclxuICAgICAgaG9zdDogbG9jYXRpb24uaG9zdCxcclxuICAgICAgaG9zdG5hbWU6IGxvY2F0aW9uLmhvc3RuYW1lLFxyXG4gICAgICBocmVmOiBsb2NhdGlvbi5ocmVmLFxyXG4gICAgICBvcmlnaW46IGxvY2F0aW9uLm9yaWdpbixcclxuICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLFxyXG4gICAgICBwb3J0OiBsb2NhdGlvbi5wb3J0LFxyXG4gICAgICBwcm90b2NvbDogbG9jYXRpb24ucHJvdG9jb2wsXHJcbiAgICAgIHNlYXJjaDogbG9jYXRpb24uc2VhcmNoXHJcbiAgICB9KTtcclxuICB9IGVsc2Uge1xyXG4gICAgaWYgKHJlZGlyZWN0Um91dGUpIHtcclxuICAgICAgY29uc3Qge1xyXG4gICAgICAgIHVybCxcclxuICAgICAgICBlbmNvZGVQYXJhbXMsXHJcbiAgICAgICAgZW5jb2RlUXVlcnlcclxuICAgICAgfSA9IFJlZGlyZWN0Um91dGU7XHJcblxyXG4gICAgICByZXR1cm4gZm9yd2FyZChjb25zdHJ1Y3RVUkwob3JpZ2luLCB1cmwsIHt9LCB7fSwgJycsIHtcclxuICAgICAgICBwYXJhbXM6IGVuY29kZVBhcmFtcyxcclxuICAgICAgICBxdWVyeTogZW5jb2RlUXVlcnlcclxuICAgICAgfSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGN1cnJlbnRSb3V0ZSA9IG51bGw7XHJcbiAgICBjdXJyZW50Um91dGVQYXJhbXMgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgc3Vic2NyaWJlcnMuZm9yRWFjaCgoY2FsbGJhY2spID0+IGNhbGxiYWNrKCkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmaW5kUm91dGVCeVVSTCgpIHtcclxuICBjb25zdCBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lIHx8ICcvJztcclxuICBjb25zdCBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2ggfHwgJyc7XHJcbiAgbGV0IHVybFBhcmFtcztcclxuXHJcbiAgUm91dGVzLnNvbWUoKHJvdXRlKSA9PiB7XHJcbiAgICBpZiAocm91dGUuYWJzdHJhY3QpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHtcclxuICAgICAgdXJsOiByb3V0ZVVSTCxcclxuICAgICAgdmFsaWRhdGVQYXRoLFxyXG4gICAgICBwYXJhbXMsXHJcbiAgICAgIHF1ZXJ5OiByZXF1aXJlZFF1ZXJ5LFxyXG4gICAgICBkZWNvZGVQYXJhbXMsXHJcbiAgICAgIGRlY29kZVF1ZXJ5XHJcbiAgICB9ID0gcm91dGU7XHJcbiAgICBjb25zdCByZXNvbHZlZCA9IHJlc29sdmVVUkwoZGVjb2RlUXVlcnkpO1xyXG4gICAgY29uc3QgcXVlcnkgPSBuZXcgU3VwZXIocmVzb2x2ZWQucXVlcnkpO1xyXG4gICAgY29uc3QgZXZlbnR1YWxQYXJhbXMgPSB7fTtcclxuICAgIGNvbnN0IG1hdGNoID0gKFxyXG4gICAgICAocGF0aG5hbWUucmVwbGFjZSgvXFwvJC8sICcnKSB8fCAnLycpICtcclxuICAgICAgKGlzUmVnRXhwKHJvdXRlVVJMKSA/IHNlYXJjaCA6ICcnKVxyXG4gICAgKS5tYXRjaCh2YWxpZGF0ZVBhdGgpO1xyXG5cclxuICAgIGlmICghbWF0Y2gpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8qIGVzbGludCBndWFyZC1mb3ItaW46IDAgKi9cclxuICAgIGZvciAoY29uc3QgcGFyYW0gaW4gcmVxdWlyZWRRdWVyeSkge1xyXG4gICAgICBpZiAoIXF1ZXJ5Lmhhc093bihwYXJhbSkgfHwgIXJlcXVpcmVkUXVlcnlbcGFyYW1dLnRlc3QocXVlcnkuJFtwYXJhbV0pKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbWF0Y2guc2hpZnQoKTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IHBhcmFtIGluIHBhcmFtcykge1xyXG4gICAgICBldmVudHVhbFBhcmFtc1twYXJhbV0gPSBkZWNvZGUobWF0Y2hbcGFyYW1zW3BhcmFtXV0sIGRlY29kZVBhcmFtcyk7XHJcbiAgICB9XHJcblxyXG4gICAgdXJsUGFyYW1zID0ge1xyXG4gICAgICByb3V0ZSxcclxuICAgICAgcGFyYW1zOiBldmVudHVhbFBhcmFtcyxcclxuICAgICAgcXVlcnk6IHF1ZXJ5LiQsXHJcbiAgICAgIGhhc2g6IHJlc29sdmVkLmhhc2hcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfSk7XHJcblxyXG4gIGlmICh1cmxQYXJhbXMpIHtcclxuICAgIHJldHVybiB1cmxQYXJhbXM7XHJcbiAgfVxyXG5cclxuICBpZiAoIWRlZmF1bHRSb3V0ZSkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIHJvdXRlOiBEZWZhdWx0Um91dGUsXHJcbiAgICBwYXJhbXM6IHt9LFxyXG4gICAgLi4ucmVzb2x2ZVVSTChEZWZhdWx0Um91dGUuZGVjb2RlUXVlcnkpXHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gZGVjb2RlKHN0cmluZywgZGVjb2RlUGFyYW1zKSB7XHJcbiAgcmV0dXJuIGRlY29kZVBhcmFtc1xyXG4gICAgPyBkZWNvZGVVUklDb21wb25lbnQoc3RyaW5nKVxyXG4gICAgOiBzdHJpbmc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNoYW5nZUhpc3RvcnkodXJsLCBwdXNoKSB7XHJcbiAgdHJ5IHtcclxuICAgIGhpc3RvcnlbcHVzaCA/ICdwdXNoU3RhdGUnIDogJ3JlcGxhY2VTdGF0ZSddKG51bGwsIG51bGwsIHVybCk7XHJcbiAgICBwdXNoZWQgPSB0cnVlO1xyXG4gIH0gY2F0Y2ggKGVycikge1xyXG4gICAgbG9jYXRpb24uaHJlZiA9IHVybDtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlc29sdmVQYXJhbWV0ZXIocGFyYW0sIG5hbWVFcnJvck5hbWUsIHZhbHVlRXJyb3JOYW1lKSB7XHJcbiAgY29uc3QgbmFtZU1hdGNoID0gcGFyYW0ubWF0Y2goL15bYS16XyRdKy9pKTtcclxuXHJcbiAgaWYgKCFuYW1lTWF0Y2gpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihuYW1lRXJyb3JOYW1lKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IG5hbWUgPSBuYW1lTWF0Y2hbMF07XHJcbiAgY29uc3QgdmFsdWUgPSBwYXJhbS5zbGljZShuYW1lLmxlbmd0aCk7XHJcbiAgbGV0IHJlZ2V4cDtcclxuXHJcbiAgaWYgKHZhbHVlICYmICh2YWx1ZS5pbmRleE9mKCcoJykgfHwgdmFsdWUuaW5kZXhPZignKScpICE9PSB2YWx1ZS5sZW5ndGggLSAxKSkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKHZhbHVlRXJyb3JOYW1lKTtcclxuICB9XHJcblxyXG4gIGlmICh2YWx1ZSkge1xyXG4gICAgcmVnZXhwID0gbmV3IFJlZ0V4cCh2YWx1ZS5zbGljZSgxLCAtMSkpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIG5hbWUsXHJcbiAgICByZWdleHBcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgeyBtYWtlUm91dGUgfTtcclxuIiwiLyogZXNsaW50IG5vLW5lc3RlZC10ZXJuYXJ5OiAwICovXHJcbi8qIGVzbGludCBuby1uZWdhdGVkLWNvbmRpdGlvbjogMCAqL1xyXG5leHBvcnQgZGVmYXVsdCB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHt9O1xyXG4iLCIvKipcclxuICogQG1vZHVsZSBjb25zdGFudHMvYXBwbGllZFJlZ0V4cHNcclxuICogQHByaXZhdGVcclxuICogQGRlc2NyaXB0aW9uIEV4cG9ydHMgZGlmZmVyZW50IHR5cGVzIG9mIHN5bnRheCBmb3Ige0BsaW5rIEVsZW0jYXBwbHl9LlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAY2FsbGJhY2sgbWF0Y2hBcHBsaWVkRXhwckNhbGxiYWNrXHJcbiAqIEBwYXJhbSB7RWxlbX0gZWxlbSAtIEQtZWxlbSBvZiBhbiBlbGVtZW50IHRvIGFwcGx5IGV4cHJlc3Npb24gdG8uXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmcgLSBNYXRjaGVkIGFwcGxpZWQgbmFtZS5cclxuICogQHBhcmFtIHtTdHJpbmd9IGFyZyAtIEFyZ3VtZW50IHdpdGhpbiB0aGUgcGFyZW50aGVzZXMuXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEB0eXBlIHtPYmplY3QuPFN0cmluZywgbWF0Y2hBcHBsaWVkRXhwckNhbGxiYWNrfE9iamVjdC48U3RyaW5nLCBtYXRjaEFwcGxpZWRFeHByQ2FsbGJhY2s+Pn1cclxuICogQGRlc2NyaXB0aW9uIE9iamVjdCBvZiBkaWZmZXJlbnQgdHlwZXMgb2Ygc3ludGF4LlxyXG4gKi9cclxuXHJcbmV4cG9ydCBjb25zdCBhcHBsaWVkUmVnRXhwcyA9IHtcclxuICAnIycoZWxlbSwgaWQpIHtcclxuICAgIGVsZW0uaWQoaWQpO1xyXG4gIH0sXHJcbiAgJy4nKGVsZW0sIGNscykge1xyXG4gICAgZWxlbS5hZGRDbGFzcyhjbHMpO1xyXG4gIH0sXHJcbiAgJChlbGVtLCBhdHRyLCB2YWx1ZSkge1xyXG4gICAgZWxlbS5hdHRyKGF0dHIsIHZhbHVlKTtcclxuICB9LFxyXG4gICdAJyhlbGVtLCBwcm9wLCB2YWx1ZSkge1xyXG4gICAgZWxlbS5jc3MocHJvcCwgdmFsdWUpO1xyXG4gIH0sXHJcbiAgJyYnKGVsZW0sIG5hbWUsIGh0bWwpIHtcclxuICAgIGVsZW0uaHRtbChodG1sKTtcclxuICB9LFxyXG4gICcqJyhlbGVtLCBuYW1lLCB0ZXh0KSB7XHJcbiAgICBlbGVtLnRleHQodGV4dCk7XHJcbiAgfSxcclxuICAnLSc6IHtcclxuICAgICcuJyhlbGVtLCBjbHMpIHtcclxuICAgICAgZWxlbS5yZW1vdmVDbGFzcyhjbHMpO1xyXG4gICAgfSxcclxuICAgICQoZWxlbSwgYXR0cikge1xyXG4gICAgICBlbGVtLnJlbW92ZUF0dHIoYXR0cik7XHJcbiAgICB9LFxyXG4gICAgJ0AnKGVsZW0sIHByb3ApIHtcclxuICAgICAgZWxlbS5yZW1vdmVDU1MocHJvcCk7XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG4iLCIvKipcclxuICogQG1vZHVsZSBjb25zdGFudHMvZWxlbWVudHNcclxuICogQHByaXZhdGVcclxuICogQGRlc2NyaXB0aW9uIEV4cG9ydHMgZGlmZmVyZW50IGNhbnZhcyBtZXRob2RzIGZvciB7QGxpbmsgRWxlbX0gZm9yIGNyZWF0aW5nIGh0bWwtZWxlbWVudHMuXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEBjb25zdFxyXG4gKiBAdHlwZSB7U3RyaW5nW119XHJcbiAqL1xyXG5leHBvcnQgY29uc3QgY2FudmFzR2V0TWV0aG9kcyA9IFtcclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNjcmVhdGVJbWFnZURhdGFcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi4qfSBhcmdzXHJcbiAgICogQHJldHVybnMge0ltYWdlRGF0YXx2b2lkfVxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvQVBJL0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC9jcmVhdGVJbWFnZURhdGFcclxuICAgKi9cclxuICAnY3JlYXRlSW1hZ2VEYXRhJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jY3JlYXRlTGluZWFyR3JhZGllbnRcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi4qfSBhcmdzXHJcbiAgICogQHJldHVybnMge0NhbnZhc0dyYWRpZW50fHZvaWR9XHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9BUEkvQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEL2NyZWF0ZUxpbmVhckdyYWRpZW50XHJcbiAgICovXHJcbiAgJ2NyZWF0ZUxpbmVhckdyYWRpZW50JyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jY3JlYXRlUGF0dGVyblxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLip9IGFyZ3NcclxuICAgKiBAcmV0dXJucyB7Q2FudmFzUGF0dGVybnx2b2lkfVxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvQVBJL0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC9jcmVhdGVQYXR0ZXJuXHJcbiAgICovXHJcbiAgJ2NyZWF0ZVBhdHRlcm4nLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNjcmVhdGVSYWRpYWxHcmFkaWVudFxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLip9IGFyZ3NcclxuICAgKiBAcmV0dXJucyB7Q2FudmFzR3JhZGllbnR8dm9pZH1cclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0FQSS9DYW52YXNSZW5kZXJpbmdDb250ZXh0MkQvY3JlYXRlUmFkaWFsR3JhZGllbnRcclxuICAgKi9cclxuICAnY3JlYXRlUmFkaWFsR3JhZGllbnQnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNnZXRJbWFnZURhdGFcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi4qfSBhcmdzXHJcbiAgICogQHJldHVybnMge0ltYWdlRGF0YXx2b2lkfVxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvQVBJL0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC9nZXRJbWFnZURhdGFcclxuICAgKi9cclxuICAnZ2V0SW1hZ2VEYXRhJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jZ2V0TGluZURhc2hcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi4qfSBhcmdzXHJcbiAgICogQHJldHVybnMge051bWJlcltdfHZvaWR9XHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9BUEkvQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEL2dldExpbmVEYXNoXHJcbiAgICovXHJcbiAgJ2dldExpbmVEYXNoJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jaXNQb2ludEluUGF0aFxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLip9IGFyZ3NcclxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbnx2b2lkfVxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvQVBJL0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC9pc1BvaW50SW5QYXRoXHJcbiAgICovXHJcbiAgJ2lzUG9pbnRJblBhdGgnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNpc1BvaW50SW5TdHJva2VcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi4qfSBhcmdzXHJcbiAgICogQHJldHVybnMge0Jvb2xlYW58dm9pZH1cclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0FQSS9DYW52YXNSZW5kZXJpbmdDb250ZXh0MkQvaXNQb2ludEluU3Ryb2tlXHJcbiAgICovXHJcbiAgJ2lzUG9pbnRJblN0cm9rZScsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI21lYXN1cmVUZXh0XHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uKn0gYXJnc1xyXG4gICAqIEByZXR1cm5zIHtUZXh0TWV0cmljc3x2b2lkfVxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvQVBJL0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC9tZWFzdXJlVGV4dFxyXG4gICAqL1xyXG4gICdtZWFzdXJlVGV4dCdcclxuXTtcclxuXHJcbmV4cG9ydCBjb25zdCBjYW52YXNSZXN0TWV0aG9kcyA9IFtcclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNhcmNcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi4qfSBhcmdzXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9BUEkvQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEL2FyY1xyXG4gICAqL1xyXG4gICdhcmMnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNhcmNUb1xyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLip9IGFyZ3NcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0FQSS9DYW52YXNSZW5kZXJpbmdDb250ZXh0MkQvYXJjVG9cclxuICAgKi9cclxuICAnYXJjVG8nLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNiZWdpblBhdGhcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi4qfSBhcmdzXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9BUEkvQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEL2JlZ2luUGF0aFxyXG4gICAqL1xyXG4gICdiZWdpblBhdGgnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNiZXppZXJDdXJ2ZVRvXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uKn0gYXJnc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvQVBJL0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC9iZXppZXJDdXJ2ZVRvXHJcbiAgICovXHJcbiAgJ2JlemllckN1cnZlVG8nLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNjbGVhclJlY3RcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi4qfSBhcmdzXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9BUEkvQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEL2NsZWFyUmVjdFxyXG4gICAqL1xyXG4gICdjbGVhclJlY3QnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNjbGlwXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uKn0gYXJnc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvQVBJL0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC9jbGlwXHJcbiAgICovXHJcbiAgJ2NsaXAnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNjbG9zZVBhdGhcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi4qfSBhcmdzXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9BUEkvQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEL2Nsb3NlUGF0aFxyXG4gICAqL1xyXG4gICdjbG9zZVBhdGgnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNkcmF3Rm9jdXNJZk5lZWRlZFxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLip9IGFyZ3NcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0FQSS9DYW52YXNSZW5kZXJpbmdDb250ZXh0MkQvZHJhd0ZvY3VzSWZOZWVkZWRcclxuICAgKi9cclxuICAnZHJhd0ZvY3VzSWZOZWVkZWQnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNkcmF3SW1hZ2VcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi4qfSBhcmdzXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9BUEkvQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEL2RyYXdJbWFnZVxyXG4gICAqL1xyXG4gICdkcmF3SW1hZ2UnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNlbGxpcHNlXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uKn0gYXJnc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvQVBJL0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC9lbGxpcHNlXHJcbiAgICovXHJcbiAgJ2VsbGlwc2UnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNmaWxsXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uKn0gYXJnc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvQVBJL0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC9maWxsXHJcbiAgICovXHJcbiAgJ2ZpbGwnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNmaWxsUmVjdFxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLip9IGFyZ3NcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0FQSS9DYW52YXNSZW5kZXJpbmdDb250ZXh0MkQvZmlsbFJlY3RcclxuICAgKi9cclxuICAnZmlsbFJlY3QnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNmaWxsVGV4dFxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLip9IGFyZ3NcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0FQSS9DYW52YXNSZW5kZXJpbmdDb250ZXh0MkQvZmlsbFRleHRcclxuICAgKi9cclxuICAnZmlsbFRleHQnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNsaW5lVG9cclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi4qfSBhcmdzXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9BUEkvQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEL2xpbmVUb1xyXG4gICAqL1xyXG4gICdsaW5lVG8nLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNtb3ZlVG9cclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi4qfSBhcmdzXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9BUEkvQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEL21vdmVUb1xyXG4gICAqL1xyXG4gICdtb3ZlVG8nLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNwdXRJbWFnZURhdGFcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi4qfSBhcmdzXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9BUEkvQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEL3B1dEltYWdlRGF0YVxyXG4gICAqL1xyXG4gICdwdXRJbWFnZURhdGEnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNxdWFkcmF0aWNDdXJ2ZVRvXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uKn0gYXJnc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvQVBJL0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC9xdWFkcmF0aWNDdXJ2ZVRvXHJcbiAgICovXHJcbiAgJ3F1YWRyYXRpY0N1cnZlVG8nLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNyZWN0XHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uKn0gYXJnc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvQVBJL0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC9yZWN0XHJcbiAgICovXHJcbiAgJ3JlY3QnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNyZXNldFRyYW5zZm9ybVxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLip9IGFyZ3NcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0FQSS9DYW52YXNSZW5kZXJpbmdDb250ZXh0MkQvcmVzZXRUcmFuc2Zvcm1cclxuICAgKi9cclxuICAncmVzZXRUcmFuc2Zvcm0nLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNyZXN0b3JlXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uKn0gYXJnc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvQVBJL0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC9yZXN0b3JlXHJcbiAgICovXHJcbiAgJ3Jlc3RvcmUnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNyb3RhdGVcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi4qfSBhcmdzXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9BUEkvQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEL3JvdGF0ZVxyXG4gICAqL1xyXG4gICdyb3RhdGUnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNzYXZlXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uKn0gYXJnc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvQVBJL0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC9zYXZlXHJcbiAgICovXHJcbiAgJ3NhdmUnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNzY2FsZVxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLip9IGFyZ3NcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0FQSS9DYW52YXNSZW5kZXJpbmdDb250ZXh0MkQvc2NhbGVcclxuICAgKi9cclxuICAnc2NhbGUnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNzZXRMaW5lRGFzaFxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLip9IGFyZ3NcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0FQSS9DYW52YXNSZW5kZXJpbmdDb250ZXh0MkQvc2V0TGluZURhc2hcclxuICAgKi9cclxuICAnc2V0TGluZURhc2gnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNzZXRUcmFuc2Zvcm1cclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi4qfSBhcmdzXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9BUEkvQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEL3NldFRyYW5zZm9ybVxyXG4gICAqL1xyXG4gICdzZXRUcmFuc2Zvcm0nLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNzdHJva2VcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi4qfSBhcmdzXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9BUEkvQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEL3N0cm9rZVxyXG4gICAqL1xyXG4gICdzdHJva2UnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNzdHJva2VSZWN0XHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uKn0gYXJnc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvQVBJL0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC9zdHJva2VSZWN0XHJcbiAgICovXHJcbiAgJ3N0cm9rZVJlY3QnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNzdHJva2VUZXh0XHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uKn0gYXJnc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvQVBJL0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC9zdHJva2VUZXh0XHJcbiAgICovXHJcbiAgJ3N0cm9rZVRleHQnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSN0cmFuc2Zvcm1cclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi4qfSBhcmdzXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9BUEkvQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEL3RyYW5zZm9ybVxyXG4gICAqL1xyXG4gICd0cmFuc2Zvcm0nLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSN0cmFuc2xhdGVcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi4qfSBhcmdzXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9BUEkvQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEL3RyYW5zbGF0ZVxyXG4gICAqL1xyXG4gICd0cmFuc2xhdGUnXHJcbl07XHJcbiIsIi8qKlxyXG4gKiBAbW9kdWxlIGNvbnN0YW50cy9jb25zdHJ1Y3RvcnNcclxuICogQHByaXZhdGVcclxuICogQGRlc2NyaXB0aW9uIEV4cG9ydHMgY29uc3RydWN0b3JzIGxldmVscy5cclxuICovXHJcblxyXG4vKipcclxuICogQGNvbnN0XHJcbiAqIEB0eXBlIHtBcnJheVtdfVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGNvbnN0cnVjdG9ycyA9IFtcclxuICBbXSxcclxuICBbXSxcclxuICBbXVxyXG5dO1xyXG4iLCIvKipcclxuICogQG1vZHVsZSBjb25zdGFudHMvZWxlbWVudHNcclxuICogQHByaXZhdGVcclxuICogQGRlc2NyaXB0aW9uIEV4cG9ydHMgbWV0aG9kcyBmb3Ige0BsaW5rIEVsZW19IGZvciBjcmVhdGluZyBodG1sLWVsZW1lbnRzLlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAY29uc3RcclxuICogQHR5cGUge1N0cmluZ1tdfVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGh0bWxFbGVtZW50cyA9IFtcclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNhXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnYScsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2FiYnJcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdhYmJyJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jYWRkcmVzc1xyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2FkZHJlc3MnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNhcmVhXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnYXJlYScsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2FydGljbGVcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdhcnRpY2xlJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jYXVkaW9cclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdhdWRpbycsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2JcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdiJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jYmFzZVxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2Jhc2UnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNiZGlcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdiZGknLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNiZG9cclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdiZG8nLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNibG9ja3F1b3RlXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnYmxvY2txdW90ZScsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2JvZHlcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdib2R5JyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jYnJcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdicicsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2J1dHRvblxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2J1dHRvbicsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2NhbnZhc1xyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2NhbnZhcycsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2NhcHRpb25cclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdjYXB0aW9uJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jY2l0ZVxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2NpdGUnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNjb2RlXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnY29kZScsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2NvbFxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2NvbCcsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2NvbGdyb3VwXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnY29sZ3JvdXAnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNjb250ZW50XHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnY29udGVudCcsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2RhdGFsaXN0XHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnZGF0YWxpc3QnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNkZFxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2RkJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jZGVsXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnZGVsJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jZGV0YWlsc1xyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2RldGFpbHMnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNkZm5cclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdkZm4nLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNkaWFsb2dcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdkaWFsb2cnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNkaXZcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdkaXYnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNkbFxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2RsJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jZHRcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdkdCcsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2VsZW1lbnRcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdlbGVtZW50JyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jZW1cclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdlbScsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2VtYmVkXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnZW1iZWQnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNmaWVsZHNldFxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2ZpZWxkc2V0JyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jZmlnY2FwdGlvblxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2ZpZ2NhcHRpb24nLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNmaWd1cmVcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdmaWd1cmUnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNmb290ZXJcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdmb290ZXInLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNmb3JtXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnZm9ybScsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2gxXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnaDEnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNoMlxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2gyJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jaDNcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdoMycsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2g0XHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnaDQnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNoNVxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2g1JyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jaDZcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdoNicsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2hlYWRcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdoZWFkJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jaGVhZGVyXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnaGVhZGVyJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jaGdyb3VwXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnaGdyb3VwJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jaHJcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdocicsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2lcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdpJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jaWZyYW1lXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnaWZyYW1lJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jaW1nXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnaW1nJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jaW5wdXRcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdpbnB1dCcsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2luc1xyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2lucycsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2tiZFxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2tiZCcsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2xhYmVsXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnbGFiZWwnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNsZWdlbmRcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdsZWdlbmQnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNsaVxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2xpJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jbGlua1xyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2xpbmsnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNtYWluXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnbWFpbicsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI21hcmtcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdtYXJrJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jbWVudVxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ21lbnUnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNtZW51aXRlbVxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ21lbnVpdGVtJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jbWV0YVxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ21ldGEnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNtZXRlclxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ21ldGVyJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jbmF2XHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnbmF2JyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jbm9zY3JpcHRcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdub3NjcmlwdCcsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI29sXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnb2wnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNvcHRncm91cFxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ29wdGdyb3VwJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jb3B0aW9uXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnb3B0aW9uJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jb3V0cHV0XHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnb3V0cHV0JyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jcFxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ3AnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNwYXJhbVxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ3BhcmFtJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jcHJlXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAncHJlJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jcHJvZ3Jlc3NcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdwcm9ncmVzcycsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI3FcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdxJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jcnBcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdycCcsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI3J0XHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAncnQnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNydGNcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdydGMnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNydWJ5XHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAncnVieScsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI3NcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdzJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jc2FtcFxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ3NhbXAnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNzY3JpcHRcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdzY3JpcHQnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNzZWN0aW9uXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnc2VjdGlvbicsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI3NlbGVjdFxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ3NlbGVjdCcsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI3NoYWRvd1xyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ3NoYWRvdycsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI3NtYWxsXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnc21hbGwnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNzb3VyY2VcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdzb3VyY2UnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNzcGFuXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnc3BhbicsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI3N0cm9uZ1xyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ3N0cm9uZycsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI3N0eWxlXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnc3R5bGUnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNzdWJcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdzdWInLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNzdW1tYXJ5XHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnc3VtbWFyeScsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI3N1cFxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ3N1cCcsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI3RhYmxlXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAndGFibGUnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSN0Ym9keVxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ3Rib2R5JyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jdGRcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICd0ZCcsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI3RlbXBsYXRlXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAndGVtcGxhdGUnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSN0ZXh0YXJlYVxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ3RleHRhcmVhJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jdGZvb3RcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICd0Zm9vdCcsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI3RoXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAndGgnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSN0aGVhZFxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ3RoZWFkJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jdGltZVxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ3RpbWUnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSN0aXRsZVxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ3RpdGxlJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jdHJcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICd0cicsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI3RyYWNrXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAndHJhY2snLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSN1XHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAndScsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI3VsXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAndWwnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSN2YXJcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICd2YXInLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSN2aWRlb1xyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ3ZpZGVvJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jd2JyXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnd2JyJ1xyXG5dO1xyXG5cclxuZXhwb3J0IGNvbnN0IHN2Z0VsZW1lbnRzID0gW1xyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2FsdEdseXBoXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnYWx0R2x5cGgnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNhbHRHbHlwaERlZlxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2FsdEdseXBoRGVmJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jYWx0R2x5cGhJdGVtXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnYWx0R2x5cGhJdGVtJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jYW5pbWF0ZVxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2FuaW1hdGUnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNhbmltYXRlQ29sb3JcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdhbmltYXRlQ29sb3InLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNhbmltYXRlTW90aW9uXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnYW5pbWF0ZU1vdGlvbicsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2FuaW1hdGVUcmFuc2Zvcm1cclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdhbmltYXRlVHJhbnNmb3JtJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jY2lyY2xlXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnY2lyY2xlJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jY2xpcFBhdGhcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdjbGlwUGF0aCcsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2NvbG9yUHJvZmlsZVxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2NvbG9yLXByb2ZpbGUnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNjdXJzb3JcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdjdXJzb3InLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNkZWZzXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnZGVmcycsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2Rlc2NcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdkZXNjJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jZGlzY2FyZFxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2Rpc2NhcmQnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNlbGxpcHNlXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnZWxsaXBzZScsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2ZlQmxlbmRcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdmZUJsZW5kJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jZmVDb2xvck1hdHJpeFxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2ZlQ29sb3JNYXRyaXgnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNmZUNvbXBvbmVudFRyYW5zZmVyXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnZmVDb21wb25lbnRUcmFuc2ZlcicsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2ZlQ29tcG9zaXRlXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnZmVDb21wb3NpdGUnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNmZUNvbnZvbHZlTWF0cml4XHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnZmVDb252b2x2ZU1hdHJpeCcsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2ZlRGlmZnVzZUxpZ2h0aW5nXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnZmVEaWZmdXNlTGlnaHRpbmcnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNmZURpc3BsYWNlbWVudE1hcFxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2ZlRGlzcGxhY2VtZW50TWFwJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jZmVEaXN0YW50TGlnaHRcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdmZURpc3RhbnRMaWdodCcsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2ZlRHJvcFNoYWRvd1xyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2ZlRHJvcFNoYWRvdycsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2ZlRmxvb2RcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdmZUZsb29kJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jZmVGdW5jQVxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2ZlRnVuY0EnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNmZUZ1bmNCXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnZmVGdW5jQicsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2ZlRnVuY0dcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdmZUZ1bmNHJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jZmVGdW5jUlxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2ZlRnVuY1InLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNmZUdhdXNzaWFuQmx1clxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2ZlR2F1c3NpYW5CbHVyJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jZmVJbWFnZVxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2ZlSW1hZ2UnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNmZU1lcmdlXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnZmVNZXJnZScsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2ZlTWVyZ2VOb2RlXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnZmVNZXJnZU5vZGUnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNmZU1vcnBob2xvZ3lcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdmZU1vcnBob2xvZ3knLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNmZU9mZnNldFxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2ZlT2Zmc2V0JyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jZmVQb2ludExpZ2h0XHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnZmVQb2ludExpZ2h0JyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jZmVTcGVjdWxhckxpZ2h0aW5nXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnZmVTcGVjdWxhckxpZ2h0aW5nJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jZmVTcG90TGlnaHRcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdmZVNwb3RMaWdodCcsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2ZlVGlsZVxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2ZlVGlsZScsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2ZlVHVyYnVsZW5jZVxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2ZlVHVyYnVsZW5jZScsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2ZvbnRcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdmb250JyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jZm9udEZhY2VcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdmb250LWZhY2UnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNmb250RmFjZUZvcm1hdFxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2ZvbnQtZmFjZS1mb3JtYXQnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNmb250RmFjZU5hbWVcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdmb250LWZhY2UtbmFtZScsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2ZvbnRGYWNlU3JjXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnZm9udC1mYWNlLXNyYycsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2ZvbnRGYWNlVXJpXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnZm9udC1mYWNlLXVyaScsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2ZvcmVpZ25PYmplY3RcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdmb3JlaWduT2JqZWN0JyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jZ1xyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2cnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNnbHlwaFxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2dseXBoJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jZ2x5cGhSZWZcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdnbHlwaFJlZicsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2hhdGNoXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnaGF0Y2gnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNoYXRjaHBhdGhcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdoYXRjaHBhdGgnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNoa2VyblxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ2hrZXJuJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jaW1hZ2VcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdpbWFnZScsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI2xpbmVcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdsaW5lJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jbGluZWFyR3JhZGllbnRcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdsaW5lYXJHcmFkaWVudCcsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI21hcmtlclxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ21hcmtlcicsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI21hc2tcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdtYXNrJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jbWVzaFxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ21lc2gnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNtZXNoZ3JhZGllbnRcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdtZXNoZ3JhZGllbnQnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNtZXNocGF0Y2hcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdtZXNocGF0Y2gnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNtZXNocm93XHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnbWVzaHJvdycsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI21ldGFkYXRhXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnbWV0YWRhdGEnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNtaXNzaW5nR2x5cGhcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdtaXNzaW5nLWdseXBoJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jbXBhdGhcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdtcGF0aCcsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI3BhdGhcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdwYXRoJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jcGF0dGVyblxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ3BhdHRlcm4nLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNwb2x5Z29uXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAncG9seWdvbicsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI3BvbHlsaW5lXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAncG9seWxpbmUnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNyYWRpYWxHcmFkaWVudFxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ3JhZGlhbEdyYWRpZW50JyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jcmVjdFxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ3JlY3QnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNzZXRcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdzZXQnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSNzb2xpZGNvbG9yXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAnc29saWRjb2xvcicsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI3N0b3BcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdzdG9wJyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jc3R5bGVcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICdzdHlsZScsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI3N2Z1xyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ3N2ZycsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI3N3aXRjaFxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ3N3aXRjaCcsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI3N5bWJvbFxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ3N5bWJvbCcsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI3RleHRQYXRoXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAndGV4dFBhdGgnLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSN0cmVmXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAndHJlZicsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI3RzcGFuXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAndHNwYW4nLFxyXG5cclxuICAvKipcclxuICAgKiBAbWVtYmVyIHtGdW5jdGlvbn0gRWxlbSN1bmtub3duXHJcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfSBhcHBsaWVkRXhwcmVzc2lvbnNcclxuICAgKiBAcmV0dXJucyB7RWxlbX1cclxuICAgKi9cclxuICAndW5rbm93bicsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI3VzZVxyXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gey4uLlN0cmluZ30gYXBwbGllZEV4cHJlc3Npb25zXHJcbiAgICogQHJldHVybnMge0VsZW19XHJcbiAgICovXHJcbiAgJ3VzZScsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBFbGVtI3ZpZXdcclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICd2aWV3JyxcclxuXHJcbiAgLyoqXHJcbiAgICogQG1lbWJlciB7RnVuY3Rpb259IEVsZW0jdmtlcm5cclxuICAgKiBAdHlwZSB7RnVuY3Rpb259XHJcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd9IGFwcGxpZWRFeHByZXNzaW9uc1xyXG4gICAqIEByZXR1cm5zIHtFbGVtfVxyXG4gICAqL1xyXG4gICd2a2VybidcclxuXTtcclxuXHJcbmV4cG9ydCBjb25zdCB2b2lkRWxlbWVudHMgPSBbXHJcbiAgJ2FyZWEnLFxyXG4gICdiYXNlJyxcclxuICAnYnInLFxyXG4gICdjb2wnLFxyXG4gICdjb21tYW5kJyxcclxuICAnZW1iZWQnLFxyXG4gICdocicsXHJcbiAgJ2ltZycsXHJcbiAgJ2lucHV0JyxcclxuICAna2V5Z2VuJyxcclxuICAnbGluaycsXHJcbiAgJ21ldGEnLFxyXG4gICdwYXJhbScsXHJcbiAgJ3NvdXJjZScsXHJcbiAgJ3RyYWNrJyxcclxuICAnd2JyJ1xyXG5dO1xyXG4iLCJleHBvcnQgY29uc3QgaHRtbEFsbG93ZWRUYWdTeW1ib2xzID0gJ1thLXpdW2EtelxcXFxkXFxcXC1fLjohQCNcXFxcJCVcXFxcXiYqKClcXFxcW1xcXFxde31cXFxcXFxcXD1cXCdcIl0qJztcclxuZXhwb3J0IGNvbnN0IGh0bWxBbGxvd2VkQXR0clN5bWJvbHMgPSAnW15cXFxcdTAwMDAtXFxcXHUwMDIwXFxcXHNcIlxcJz4vPV0rJztcclxuIiwiLyoqXHJcbiAqIEBtb2R1bGUgY29uc3RhbnRzL3JlZ2V4cFNwZWNpYWxDaGFyYWN0ZXJzXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBkZXNjcmlwdGlvbiBFeHBvcnRzIHNwZWNpYWwgY2hhcmFjdGVycyBmb3IgUmVnRXhwLlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAY29uc3RcclxuICogQG5hbWUgbW9kdWxlOmNvbnN0YW50cy9yZWdleHBTcGVjaWFsQ2hhcmFjdGVyc35yZWdleHBTcGVjaWFsQ2hhcmFjdGVyc1xyXG4gKiBAdHlwZSB7U3RyaW5nW119XHJcbiAqL1xyXG5leHBvcnQgY29uc3QgcmVnZXhwU3BlY2lhbENoYXJhY3RlcnMgPSBbXHJcbiAgJy4nLFxyXG4gICcrJywgJyonLCAnPycsXHJcbiAgJygnLCAnKScsXHJcbiAgJ1snLCAnXScsXHJcbiAgJ3snLCAnfScsXHJcbiAgJzwnLCAnPicsXHJcbiAgJ14nLCAnJCcsXHJcbiAgJyEnLFxyXG4gICc9JyxcclxuICAnOicsXHJcbiAgJy0nLFxyXG4gICd8JyxcclxuICAnLCcsXHJcbiAgJ1xcXFwnXHJcbl07XHJcbiIsIi8qKlxyXG4gKiBAbW9kdWxlIGNvbnN0YW50cy92YWxpZGF0ZUNoZWNrRXhwcmVzc2lvbnNcclxuICogQHByaXZhdGVcclxuICogQGRlc2NyaXB0aW9uIEV4cG9ydHMgZGlmZmVyZW50IHR5cGVzIG9mIHZhbGlkYXRlIGV4cHJlc3Npb25zIGZvciB7QGxpbmsgbW9kdWxlOmhlbHBlcnMvdmFsaWRhdGV9LlxyXG4gKi9cclxuXHJcbmltcG9ydCAqIGFzIG1ldGhvZHMgZnJvbSAnLi4vaGVscGVycy9jaGVja1R5cGVzJztcclxuXHJcbi8qKlxyXG4gKiBAY2FsbGJhY2sgY2hlY2tWYWxpZGl0eUNhbGxiYWNrXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBWYWx1ZSB0byBjaGVjay5cclxuICovXHJcblxyXG4vKipcclxuICogQHR5cGVkZWYge09iamVjdH0gdmFsaWRhdGVFeHByXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSB0ZXh0IC0gVGV4dCBvZiB0aGUgdGhyb3duIGVycm9yLlxyXG4gKiBAcHJvcGVydHkge0Vycm9yfSBlcnJvciAtIFR5cGUgb2YgdGhlIHRocm93biBlcnJvci5cclxuICogQHByb3BlcnR5IHtjaGVja1ZhbGlkaXR5Q2FsbGJhY2t9IGNoZWNrIC0gQ2FsbGJhY2sgZm9yIGNoZWNraW5nIHZhbHVlLlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAdHlwZSB7dmFsaWRhdGVFeHByW119XHJcbiAqIEBwcml2YXRlXHJcbiAqIEBkZXNjcmlwdGlvbiBPYmplY3Qgb2YgZGlmZmVyZW50IHR5cGVzIG9mIHZhbGlkYXRpb24uXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgdmFsaWRhdGVDaGVja0V4cHJlc3Npb25zID0ge1xyXG4gICc+MCc6IHtcclxuICAgIGNoZWNrOiAobikgPT4gbiA+IDAsXHJcbiAgICB0ZXh0OiAnJG4gYXJndW1lbnQgbXVzdCBiZSBwb3NpdGl2ZSEnLFxyXG4gICAgZXJyb3I6IFJhbmdlRXJyb3JcclxuICB9LFxyXG4gICc+PTAnOiB7XHJcbiAgICBjaGVjazogKG4pID0+IG4gPj0gMCxcclxuICAgIHRleHQ6ICckbiBhcmd1bWVudCBtdXN0IGJlIG5vbi1uZWdhdGl2ZSEnLFxyXG4gICAgZXJyb3I6IFJhbmdlRXJyb3JcclxuICB9LFxyXG4gICc8MCc6IHtcclxuICAgIGNoZWNrOiAobikgPT4gbiA8IDAsXHJcbiAgICB0ZXh0OiAnJG4gYXJndW1lbnQgbXVzdCBiZSBuZWdhdGl2ZSEnLFxyXG4gICAgZXJyb3I6IFJhbmdlRXJyb3JcclxuICB9LFxyXG4gICc8PTAnOiB7XHJcbiAgICBjaGVjazogKG4pID0+IG4gPD0gMCxcclxuICAgIHRleHQ6ICckbiBhcmd1bWVudCBtdXN0IGJlIG5vbi1wb3NpdGl2ZSEnLFxyXG4gICAgZXJyb3I6IFJhbmdlRXJyb3JcclxuICB9LFxyXG4gICchISc6IHtcclxuICAgIGNoZWNrOiAodikgPT4gIW1ldGhvZHMuaXNOaWwodiksXHJcbiAgICB0ZXh0OiAnJG4gYXJndW1lbnQgbXVzdCBiZSBub3QgbnVsbCBvciB1bmRlZmluZWQhJyxcclxuICAgIGVycm9yOiBUeXBlRXJyb3JcclxuICB9LFxyXG4gIGFycmF5OiB7XHJcbiAgICBjaGVjazogbWV0aG9kcy5pc0FycmF5LFxyXG4gICAgdGV4dDogJyRuIGFyZ3VtZW50IG11c3QgYmUgYW4gYXJyYXkhJyxcclxuICAgIGVycm9yOiBUeXBlRXJyb3JcclxuICB9LFxyXG4gICdhcnJheXx8ISc6IHtcclxuICAgIGNoZWNrOiAoYSkgPT4gbWV0aG9kcy5pc0FycmF5KGEpIHx8IG1ldGhvZHMuaXNOaWwoYSksXHJcbiAgICB0ZXh0OiAnJG4gYXJndW1lbnQgbXVzdCBiZSBhbiBhcnJheSwgb3IgdW5kZWZpbmVkLCBvciBudWxsIScsXHJcbiAgICBlcnJvcjogVHlwZUVycm9yXHJcbiAgfSxcclxuICBhcnJheUxpa2U6IHtcclxuICAgIGNoZWNrOiBtZXRob2RzLmlzQXJyYXlMaWtlLFxyXG4gICAgdGV4dDogJyRuIGFyZ3VtZW50IG11c3QgYmUgYXJyYXktbGlrZSEnLFxyXG4gICAgZXJyb3I6IFR5cGVFcnJvclxyXG4gIH0sXHJcbiAgJ2FycmF5TGlrZXx8ISc6IHtcclxuICAgIGNoZWNrOiAoYSkgPT4gbWV0aG9kcy5pc0FycmF5TGlrZShhKSB8fCBtZXRob2RzLmlzTmlsKGEpLFxyXG4gICAgdGV4dDogJyRuIGFyZ3VtZW50IG11c3QgYmUgYXJyYXktbGlrZSwgb3IgdW5kZWZpbmVkLCBvciBudWxsIScsXHJcbiAgICBlcnJvcjogVHlwZUVycm9yXHJcbiAgfSxcclxuICBkYXRlOiB7XHJcbiAgICBjaGVjazogbWV0aG9kcy5pc0RhdGUsXHJcbiAgICB0ZXh0OiAnJG4gYXJndW1lbnQgbXVzdCBiZSBhIGRhdGUhJyxcclxuICAgIGVycm9yOiBUeXBlRXJyb3JcclxuICB9LFxyXG4gICdkYXRlfHwhJzoge1xyXG4gICAgY2hlY2s6IChkKSA9PiBtZXRob2RzLmlzRGF0ZShkKSB8fCBtZXRob2RzLmlzTmlsKGQpLFxyXG4gICAgdGV4dDogJyRuIGFyZ3VtZW50IG11c3QgYmUgYSBkYXRlLCBvciB1bmRlZmluZWQsIG9yIG51bGwhJyxcclxuICAgIGVycm9yOiBUeXBlRXJyb3JcclxuICB9LFxyXG4gIGRhdGVMaWtlOiB7XHJcbiAgICBjaGVjazogbWV0aG9kcy5pc0RhdGVMaWtlLFxyXG4gICAgdGV4dDogJyRuIGFyZ3VtZW50IG11c3QgYmUgZGF0ZS1saWtlIScsXHJcbiAgICBlcnJvcjogVHlwZUVycm9yXHJcbiAgfSxcclxuICAnZGF0ZUxpa2V8fCEnOiB7XHJcbiAgICBjaGVjazogKGQpID0+IG1ldGhvZHMuaXNEYXRlTGlrZShkKSB8fCBtZXRob2RzLmlzTmlsKGQpLFxyXG4gICAgdGV4dDogJyRuIGFyZ3VtZW50IG11c3QgYmUgZGF0ZS1saWtlLCBvciB1bmRlZmluZWQsIG9yIG51bGwhJyxcclxuICAgIGVycm9yOiBUeXBlRXJyb3JcclxuICB9LFxyXG4gIGZ1bmN0aW9uOiB7XHJcbiAgICBjaGVjazogbWV0aG9kcy5pc0Z1bmN0aW9uLFxyXG4gICAgdGV4dDogJyRuIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbiEnLFxyXG4gICAgZXJyb3I6IFR5cGVFcnJvclxyXG4gIH0sXHJcbiAgJ2Z1bmN0aW9ufHwhJzoge1xyXG4gICAgY2hlY2s6IChmKSA9PiBtZXRob2RzLmlzRnVuY3Rpb24oZikgfHwgbWV0aG9kcy5pc05pbChmKSxcclxuICAgIHRleHQ6ICckbiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24sIG9yIHVuZGVmaW5lZCwgb3IgbnVsbCEnLFxyXG4gICAgZXJyb3I6IFR5cGVFcnJvclxyXG4gIH0sXHJcbiAgaW50OiB7XHJcbiAgICBjaGVjazogbWV0aG9kcy5pc0ludGVnZXIsXHJcbiAgICB0ZXh0OiAnJG4gYXJndW1lbnQgbXVzdCBiZSBhbiBpbnRlZ2VyIScsXHJcbiAgICBlcnJvcjogVHlwZUVycm9yXHJcbiAgfSxcclxuICAnaW50fHwhJzoge1xyXG4gICAgY2hlY2s6IChpKSA9PiBtZXRob2RzLmlzSW50ZWdlcihpKSB8fCBtZXRob2RzLmlzTmlsKGkpLFxyXG4gICAgdGV4dDogJyRuIGFyZ3VtZW50IG11c3QgYmUgYW4gaW50ZWdlciwgb3IgdW5kZWZpbmVkLCBvciBudWxsIScsXHJcbiAgICBlcnJvcjogVHlwZUVycm9yXHJcbiAgfSxcclxuICBpbnRMaWtlOiB7XHJcbiAgICBjaGVjazogbWV0aG9kcy5pc0ludGVnZXJMaWtlLFxyXG4gICAgdGV4dDogJyRuIGFyZ3VtZW50IG11c3QgYmUgaW50ZWdlci1saWtlIScsXHJcbiAgICBlcnJvcjogVHlwZUVycm9yXHJcbiAgfSxcclxuICAnaW50TGlrZXx8ISc6IHtcclxuICAgIGNoZWNrOiAoaSkgPT4gbWV0aG9kcy5pc0ludGVnZXJMaWtlKGkpIHx8IG1ldGhvZHMuaXNOaWwoaSksXHJcbiAgICB0ZXh0OiAnJG4gYXJndW1lbnQgbXVzdCBiZSBpbnRlZ2VyLWxpa2UsIG9yIHVuZGVmaW5lZCwgb3IgbnVsbCEnLFxyXG4gICAgZXJyb3I6IFR5cGVFcnJvclxyXG4gIH0sXHJcbiAgbnVtYmVyOiB7XHJcbiAgICBjaGVjazogbWV0aG9kcy5pc051bWJlcixcclxuICAgIHRleHQ6ICckbiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyIScsXHJcbiAgICBlcnJvcjogVHlwZUVycm9yXHJcbiAgfSxcclxuICAnbnVtYmVyfHwhJzoge1xyXG4gICAgY2hlY2s6IChuKSA9PiBtZXRob2RzLmlzTnVtYmVyKG4pIHx8IG1ldGhvZHMuaXNOaWwobiksXHJcbiAgICB0ZXh0OiAnJG4gYXJndW1lbnQgbXVzdCBiZSBhIG51bWJlciwgb3IgdW5kZWZpbmVkLCBvciBudWxsIScsXHJcbiAgICBlcnJvcjogVHlwZUVycm9yXHJcbiAgfSxcclxuICBudW1iZXJMaWtlOiB7XHJcbiAgICBjaGVjazogbWV0aG9kcy5pc051bWJlckxpa2UsXHJcbiAgICB0ZXh0OiAnJG4gYXJndW1lbnQgbXVzdCBiZSBudW1iZXItbGlrZSEnLFxyXG4gICAgZXJyb3I6IFR5cGVFcnJvclxyXG4gIH0sXHJcbiAgJ251bWJlckxpa2V8fCEnOiB7XHJcbiAgICBjaGVjazogKG4pID0+IG1ldGhvZHMuaXNOdW1iZXJMaWtlKG4pIHx8IG1ldGhvZHMuaXNOaWwobiksXHJcbiAgICB0ZXh0OiAnJG4gYXJndW1lbnQgbXVzdCBiZSBudW1iZXItbGlrZSwgb3IgdW5kZWZpbmVkLCBvciBudWxsIScsXHJcbiAgICBlcnJvcjogVHlwZUVycm9yXHJcbiAgfSxcclxuICBvYmplY3Q6IHtcclxuICAgIGNoZWNrOiBtZXRob2RzLmlzT2JqZWN0LFxyXG4gICAgdGV4dDogJyRuIGFyZ3VtZW50IG11c3QgYmUgYW4gb2JqZWN0IScsXHJcbiAgICBlcnJvcjogVHlwZUVycm9yXHJcbiAgfSxcclxuICAnb2JqZWN0fHwhJzoge1xyXG4gICAgY2hlY2s6IChvKSA9PiBtZXRob2RzLmlzT2JqZWN0KG8pIHx8IG1ldGhvZHMuaXNOaWwobyksXHJcbiAgICB0ZXh0OiAnJG4gYXJndW1lbnQgbXVzdCBiZSBhbiBvYmplY3QsIG9yIHVuZGVmaW5lZCwgb3IgbnVsbCEnLFxyXG4gICAgZXJyb3I6IFR5cGVFcnJvclxyXG4gIH0sXHJcbiAgcmVnZXhwOiB7XHJcbiAgICBjaGVjazogbWV0aG9kcy5pc1JlZ0V4cCxcclxuICAgIHRleHQ6ICckbiBhcmd1bWVudCBtdXN0IGJlIGEgcmVndWxhciBleHByZXNzaW9uIScsXHJcbiAgICBlcnJvcjogVHlwZUVycm9yXHJcbiAgfSxcclxuICAncmVnZXhwfHwhJzoge1xyXG4gICAgY2hlY2s6IChyKSA9PiBtZXRob2RzLmlzUmVnRXhwKHIpIHx8IG1ldGhvZHMuaXNOaWwociksXHJcbiAgICB0ZXh0OiAnJG4gYXJndW1lbnQgbXVzdCBiZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiwgb3IgdW5kZWZpbmVkLCBvciBudWxsIScsXHJcbiAgICBlcnJvcjogVHlwZUVycm9yXHJcbiAgfSxcclxuICBzdHJpbmc6IHtcclxuICAgIGNoZWNrOiBtZXRob2RzLmlzU3RyaW5nLFxyXG4gICAgdGV4dDogJyRuIGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmchJyxcclxuICAgIGVycm9yOiBUeXBlRXJyb3JcclxuICB9LFxyXG4gICdzdHJpbmd8fCEnOiB7XHJcbiAgICBjaGVjazogKHMpID0+IG1ldGhvZHMuaXNTdHJpbmcocykgfHwgbWV0aG9kcy5pc05pbChzKSxcclxuICAgIHRleHQ6ICckbiBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nLCBvciB1bmRlZmluZWQsIG9yIG51bGwhJyxcclxuICAgIGVycm9yOiBUeXBlRXJyb3JcclxuICB9XHJcbn07XHJcbiIsIi8qKlxyXG4gKiBAbW9kdWxlIGhlbHBlcnMvU3ltYm9sXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBkZXNjcmlwdGlvbiBFeHBvcnRzIFN5bWJvbCBjbGFzcy5cclxuICovXHJcblxyXG5leHBvcnQgY29uc3QgU3ltYm9sID0gZ2xvYmFsLlN5bWJvbCB8fCB7XHJcbiAgdG9TdHJpbmdUYWc6ICdTeW1ib2wudG9TdHJpbmdUYWcnLFxyXG4gIGl0ZXJhdG9yOiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KVxyXG59O1xyXG4iLCIvKipcclxuICogQG1vZHVsZSBQcm9taXNlXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBtaXhpblxyXG4gKiBAZGVzY3JpcHRpb24gRXhwb3J0cyBQcm9taXNlIGNsYXNzLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IGlzRnVuY3Rpb24sIGRlZmluZVByb3BlcnRpZXMsIFN5bWJvbCB9IGZyb20gJy4vaGVscGVycyc7XHJcblxyXG4vKipcclxuICogQGNhbGxiYWNrIG9uRnVsZmlsbGVkT3JSZWplY3RlZFxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBQcm9taXNlIHZhbHVlLlxyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHN1Y2Nlc3MgLSBJZiB0aGUgcHJldmlvdXMgcHJvbWlzZSBpcyBmdWxmaWxsZWQgaXQncyB0cnVlIGFuZCBmYWxzZSBpZiByZWplY3RlZC5cclxuICovXHJcblxyXG4vKipcclxuICogQGNhbGxiYWNrIG9uUmVqZWN0ZWRcclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0ge0Vycm9yfCp9IGVyciAtIFByb21pc2UgZXJyb3IuXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEBjYWxsYmFjayBvbkZ1bGZpbGxlZFxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBQcm9taXNlIHZhbHVlLlxyXG4gKi9cclxuXHJcbmNvbnN0IHNlY3JldCA9IHt9O1xyXG5jb25zdCBpdGVyYXRvciA9IFN5bWJvbC5pdGVyYXRvcjtcclxuXHJcbi8qKlxyXG4gKiBAY2xhc3MgUHJvbWlzZVxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIC0gRnVuY3Rpb24gdGhhdCB0YWtlcyB0d28gYXJndW1lbnRzOiByZXNvbHZlIGFuZCByZWplY3QgZnVuY3Rpb25zLlxyXG4gKiBDYWxsIHRoZSByZXNvbHZlIGZ1bmN0aW9uIHdoZW4geW91IG5lZWQgdG8gZnVsZmlsbCB0aGUgcHJvbWlzZSBhbmQgY2FsbCB0aGUgcmVqZWN0IG9uZVxyXG4gKiB3aGVuIHlvdSBuZWVkIHRvIHJlamVjdCBpdC5cclxuICogQHJldHVybnMge1Byb21pc2V9IEluc3RhbmNlIG9mIFByb21pc2UuXHJcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJvbWlzZVxyXG4gKiBAZGVzY3JpcHRpb24gQ2xhc3Mgd2l0aCBhbG1vc3QgaWRlbnRpY2FsIEFQSSB0b1xyXG4gKiBbRVM2IFByb21pc2Vde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1Byb21pc2V9LlxyXG4gKiBUaGVyZSBpcyBhIGNvdXBsZSBkaWZmZXJlbmNlczogc2V0IFByb21pc2Uub25FcnJvciB0byBhIGZ1bmN0aW9uIHdpdGggd2hpY2ggeW91IHdhbnQgdG9cclxuICogc3Vic2NyaWJlIHRvIGEgcHJvbWlzZSBlcnJvciBhbmQgc2V0IFByb21pc2Uub25VbmhhbmRsZWRSZWplY3Rpb24gdG8gYSBmdW5jdGlvbiB3aXRoIHdoaWNoXHJcbiAqIHlvdSB3YW50IHRvIHN1YnNjcmliZSB0byBhbiB1bmhhbmRsZWQgZXJyb3JcclxuICogKGRlZmF1bHRzIHRvIGNvbnNvbGUuZXJyb3IuYmluZChjb25zb2xlLCAnJXMgJW8nLCAnVW5jYXVnaHQgKGluIHByb21pc2UpJykpLlxyXG4gKi9cclxuY2xhc3MgUHJvbWlzZSB7XHJcbiAgc3RhdGljIG9uRXJyb3IgPSBudWxsO1xyXG4gIHN0YXRpYyBvblVuaGFuZGxlZFJlamVjdGlvbiA9IGNvbnNvbGUuZXJyb3IuYmluZChjb25zb2xlLCAnJXMgJW8nLCAnVW5jYXVnaHQgKGluIHByb21pc2UpJyk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGV4ZWN1dG9yKSB7XHJcbiAgICBpZiAoIWlzRnVuY3Rpb24oZXhlY3V0b3IpKSB7XHJcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFByb21pc2UgcmVzb2x2ZXIgJHsge30udG9TdHJpbmcuY2FsbChleGVjdXRvcikgfSBpcyBub3QgYSBmdW5jdGlvbmApO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBoaWRkZW5TdGF0dXM7XHJcbiAgICBsZXQgaGlkZGVuVmFsdWU7XHJcblxyXG4gICAgY29uc3RcdG9uRnVsZmlsbCA9IFtdO1xyXG4gICAgY29uc3Qgb25SZWplY3QgPSBbXTtcclxuICAgIGNvbnN0IHJlYWxQcm9taXNlID0gdGhpcztcclxuICAgIGNvbnN0IGhpZGRlblByb21pc2UgPSB7XHJcbiAgICAgIGhhbmRsZWQ6IGZhbHNlLFxyXG4gICAgICBnZXQgc3RhdHVzKCkge1xyXG4gICAgICAgIHJldHVybiBoaWRkZW5TdGF0dXM7XHJcbiAgICAgIH0sXHJcbiAgICAgIHNldCBzdGF0dXModmFsdWUpIHtcclxuICAgICAgICBoaWRkZW5TdGF0dXMgPSB2YWx1ZTtcclxuICAgICAgICByZWFsUHJvbWlzZS5zdGF0dXMgPSB2YWx1ZTtcclxuICAgICAgfSxcclxuICAgICAgZ2V0IHZhbHVlKCkge1xyXG4gICAgICAgIHJldHVybiBoaWRkZW5WYWx1ZTtcclxuICAgICAgfSxcclxuICAgICAgc2V0IHZhbHVlKHZhbCkge1xyXG4gICAgICAgIGhpZGRlblZhbHVlID0gdmFsO1xyXG4gICAgICAgIHJlYWxQcm9taXNlLnZhbHVlID0gdmFsO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGhpZGRlblByb21pc2Uuc3RhdHVzID0gJ3BlbmRpbmcnO1xyXG4gICAgaGlkZGVuUHJvbWlzZS52YWx1ZSA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEB0eXBlZGVmIHtPYmplY3R9IGhpZGRlblByb21pc2VcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW58T2JqZWN0fSBoYW5kbGVkIC0gSWYgdGhlIHByb21pc2UgaXMgaGFuZGxlZCBvciBub3QuXHJcbiAgICAgKiBAcHJvcGVydHkgeydwZW5kaW5nJ3wnZnVsZmlsbGVkJ3wncmVqZWN0ZWQnfSBzdGF0dXMgLSBTdGF0dXMgb2YgdGhlIHByb21pc2UuXHJcbiAgICAgKiBAcHJvcGVydHkgeyp9IHZhbHVlIC0gVmFsdWUgb2YgdGhlIHByb21pc2UuXHJcbiAgICAgKi9cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBtZW1iZXIge0Z1bmN0aW9ufSBoaWRkZW5Qcm9taXNlI2hhbmRsZVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqIEBwYXJhbSB7KCdyZWplY3QnfCdyZXNvbHZlJyl9IGV2ZW50IC0gVHlwZSBvZiB0aGUgZXZlbnQgdG8gaGFuZGxlLlxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciAtIEhhbmRsZXIgaXRzZWxmLlxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSAtIFJlc29sdmUgZnVuY3Rpb24uXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgLSBSZWplY3QgZnVuY3Rpb24uXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc2VjcmV0IC0gU2VjcmV0LlxyXG4gICAgICogQGRlc2NyaXB0aW9uIFByaXZhdGUgbWV0aG9kIGZvciBoYW5kbGluZyBwcm9taXNlcy5cclxuICAgICAqL1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQG1lbWJlciB7aGlkZGVuUHJvbWlzZX0gUHJvbWlzZSMkJFxyXG4gICAgICogQHByb3RlY3RlZFxyXG4gICAgICovXHJcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKHRoaXMuJCQgPSB7fSwge1xyXG4gICAgICAnZ2V0L3NldCBoYW5kbGVkJzoge1xyXG4gICAgICAgIGdldCgpIHtcclxuICAgICAgICAgIHJldHVybiBoaWRkZW5Qcm9taXNlLmhhbmRsZWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQoa2V5KSB7XHJcbiAgICAgICAgICBpZiAoa2V5ID09PSBzZWNyZXQpIHtcclxuICAgICAgICAgICAgaGlkZGVuUHJvbWlzZS5oYW5kbGVkID0gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIGhhbmRsZShzdGF0dXMsIGYsIHJlc29sdmUsIHJlamVjdCwga2V5KSB7XHJcbiAgICAgICAgaWYgKGtleSA9PT0gc2VjcmV0KSB7XHJcbiAgICAgICAgICBjb25zdCBwcm94eSA9IGlzRnVuY3Rpb24oZikgPyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICByZXNvbHZlKGYodmFsdWUpKTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gOiBudWxsO1xyXG5cclxuICAgICAgICAgIGlmIChzdGF0dXMgPT09ICdyZXNvbHZlJykge1xyXG4gICAgICAgICAgICBvbkZ1bGZpbGwucHVzaChwcm94eSB8fCAoKHZhbHVlKSA9PiByZXNvbHZlKHZhbHVlKSkpO1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChzdGF0dXMgPT09ICdyZWplY3QnKSB7XHJcbiAgICAgICAgICAgIG9uUmVqZWN0LnB1c2gocHJveHkgfHwgKChlcnIpID0+IHJlamVjdChlcnIpKSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICAnZ2V0IHN0YXR1cycoKSB7XHJcbiAgICAgICAgcmV0dXJuIGhpZGRlblByb21pc2Uuc3RhdHVzO1xyXG4gICAgICB9LFxyXG4gICAgICAnZ2V0IHZhbHVlJygpIHtcclxuICAgICAgICByZXR1cm4gaGlkZGVuUHJvbWlzZS52YWx1ZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgZXhlY3V0b3IocmVzb2x2ZSwgcmVqZWN0KTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICByZWplY3QoZXJyKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiByZWplY3QoZXJyKSB7XHJcbiAgICAgIGlmIChoaWRkZW5Qcm9taXNlLnN0YXR1cyA9PT0gJ3BlbmRpbmcnKSB7XHJcbiAgICAgICAgaGlkZGVuUHJvbWlzZS5zdGF0dXMgPSAncmVqZWN0ZWQnO1xyXG4gICAgICAgIGhpZGRlblByb21pc2UudmFsdWUgPSBlcnI7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSBvblJlamVjdC5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgaGlkZGVuUHJvbWlzZS5oYW5kbGVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICBvblJlamVjdFtpXShlcnIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qge1xyXG4gICAgICAgICAgb25VbmhhbmRsZWRSZWplY3Rpb24sXHJcbiAgICAgICAgICBvbkVycm9yXHJcbiAgICAgICAgfSA9IFByb21pc2U7XHJcblxyXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKG9uRXJyb3IpKSB7XHJcbiAgICAgICAgICBvbkVycm9yKGVycik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgIGlmICghaGlkZGVuUHJvbWlzZS5oYW5kbGVkICYmIGlzRnVuY3Rpb24ob25VbmhhbmRsZWRSZWplY3Rpb24pKSB7XHJcbiAgICAgICAgICAgIG9uVW5oYW5kbGVkUmVqZWN0aW9uKGVycik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSwgMSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiByZXNvbHZlKHZhbHVlKSB7XHJcbiAgICAgIGlmIChoaWRkZW5Qcm9taXNlLnN0YXR1cyA9PT0gJ3BlbmRpbmcnKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlICYmIGlzRnVuY3Rpb24odmFsdWUudGhlbikpIHtcclxuICAgICAgICAgIHJldHVybiB2YWx1ZS50aGVuKCh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcclxuICAgICAgICAgIH0sIChlcnIpID0+IHtcclxuICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGhpZGRlblByb21pc2Uuc3RhdHVzID0gJ2Z1bGZpbGxlZCc7XHJcbiAgICAgICAgaGlkZGVuUHJvbWlzZS52YWx1ZSA9IHZhbHVlO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0gb25GdWxmaWxsLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICBoaWRkZW5Qcm9taXNlLmhhbmRsZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgIG9uRnVsZmlsbFtpXSh2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIFByb21pc2UuYWxsXHJcbiAgICogQHBhcmFtIHsoQXJyYXl8SXRlcmFibGUpLjxQcm9taXNlfCo+fSBpdGVyYWJsZSAtIEl0ZXJhYmxlIG9iamVjdCAobGlrZSBhcnJheSkgb2YgcHJvbWlzZXNcclxuICAgKiBvciBhbnkgdmFsdWVzLlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBOZXcgaW5zdGFuY2Ugb2YgUHJvbWlzZS5cclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1Byb21pc2UvYWxsXHJcbiAgICovXHJcbiAgc3RhdGljIGFsbChpdGVyYWJsZSkge1xyXG4gICAgY29uc3QgYXJyYXkgPSBbXTtcclxuXHJcbiAgICBsZXQgdG9SZXNvbHZlID0gMDtcclxuXHJcbiAgICBpZiAoaXRlcmFibGVbaXRlcmF0b3JdKSB7XHJcbiAgICAgIGl0ZXJhYmxlID0gaXRlcmFibGVbaXRlcmF0b3JdKCk7XHJcblxyXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIGxldCBuZXh0O1xyXG4gICAgICAgIGxldCBpID0gMDtcclxuXHJcbiAgICAgICAgd2hpbGUgKCEobmV4dCA9IGl0ZXJhYmxlLm5leHQoKSkuZG9uZSkge1xyXG4gICAgICAgICAgY29uc3QgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlKTtcclxuXHJcbiAgICAgICAgICB0b1Jlc29sdmUrKztcclxuXHJcbiAgICAgICAgICAoKGkpID0+IHtcclxuICAgICAgICAgICAgcHJvbWlzZS50aGVuKCh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgIHRvUmVzb2x2ZS0tO1xyXG4gICAgICAgICAgICAgIGFycmF5W2ldID0gdmFsdWU7XHJcblxyXG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKG5leHQuZG9uZSAmJiAhdG9SZXNvbHZlKSB7XHJcbiAgICAgICAgICAgICAgICAgIHJlc29sdmUoYXJyYXkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0sIDEpO1xyXG4gICAgICAgICAgICB9LCByZWplY3QpO1xyXG4gICAgICAgICAgfSkoaSsrKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghaSkge1xyXG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShbXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBsZW5ndGggPSBpdGVyYWJsZS5sZW5ndGg7XHJcblxyXG4gICAgaWYgKCFsZW5ndGgpIHtcclxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShbXSk7XHJcbiAgICB9XHJcblxyXG4gICAgdG9SZXNvbHZlID0gbGVuZ3RoO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGl0ZXJhYmxlW2ldKTtcclxuXHJcbiAgICAgICAgcHJvbWlzZS50aGVuKCh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgdG9SZXNvbHZlLS07XHJcbiAgICAgICAgICBhcnJheVtpXSA9IHZhbHVlO1xyXG5cclxuICAgICAgICAgIGlmICghdG9SZXNvbHZlKSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUoYXJyYXkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sIHJlamVjdCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBQcm9taXNlLnJhY2VcclxuICAgKiBAcGFyYW0geyhBcnJheXxJdGVyYWJsZSkuPFByb21pc2V8Kj59IGl0ZXJhYmxlIC0gSXRlcmFibGUgb2JqZWN0IChsaWtlIGFycmF5KSBvZiBwcm9taXNlc1xyXG4gICAqIG9yIGFueSB2YWx1ZXMuXHJcbiAgICogQHJldHVybnMge1Byb21pc2V9IE5ldyBpbnN0YW5jZSBvZiBQcm9taXNlLlxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJvbWlzZS9yYWNlXHJcbiAgICovXHJcbiAgc3RhdGljIHJhY2UoaXRlcmFibGUpIHtcclxuICAgIGlmIChpdGVyYWJsZVtpdGVyYXRvcl0pIHtcclxuICAgICAgaXRlcmFibGUgPSBpdGVyYWJsZVtpdGVyYXRvcl0oKTtcclxuXHJcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgbGV0IG5leHQ7XHJcblxyXG4gICAgICAgIHdoaWxlICghKG5leHQgPSBpdGVyYWJsZS5uZXh0KCkpLmRvbmUpIHtcclxuICAgICAgICAgIG5leHQudmFsdWUudGhlbihyZXNvbHZlLCByZWplY3QpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IGl0ZXJhYmxlLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaXRlcmFibGVbaV0udGhlbihyZXNvbHZlLCByZWplY3QpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgUHJvbWlzZS5yZWplY3RcclxuICAgKiBAcGFyYW0geyp9IHZhbHVlIC0gVmFsdWUgdG8gcmVqZWN0LlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBOZXcgaW5zdGFuY2Ugb2YgUHJvbWlzZS5cclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1Byb21pc2UvcmVqZWN0XHJcbiAgICovXHJcbiAgc3RhdGljIHJlamVjdCh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgcmVqZWN0KHZhbHVlKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBQcm9taXNlLnJlc29sdmVcclxuICAgKiBAcGFyYW0ge1Byb21pc2V8VGhlbmFibGV8Kn0gdmFsdWUgLSBQcm9taXNlLCB0aGVuYWJsZSBvciBhbnkgdmFsdWUgdG8gcmVzb2x2ZS5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gTmV3IGluc3RhbmNlIG9mIFByb21pc2UuXHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9Qcm9taXNlL3Jlc29sdmVcclxuICAgKi9cclxuICBzdGF0aWMgcmVzb2x2ZSh2YWx1ZSkge1xyXG4gICAgaWYgKHZhbHVlICYmIGlzRnVuY3Rpb24odmFsdWUudGhlbikpIHtcclxuICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICByZXNvbHZlKHZhbHVlKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYWJvcnQoKSB7fVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIFByb21pc2UjY2F0Y2hcclxuICAgKiBAcGFyYW0ge29uUmVqZWN0ZWR9IG9uUmVqZWN0ZWQgLSBvblJlamVjdGVkIGNhbGxiYWNrLlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBOZXcgaW5zdGFuY2Ugb2YgUHJvbWlzZS5cclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1Byb21pc2UvY2F0Y2hcclxuICAgKi9cclxuICBjYXRjaChvblJlamVjdGVkKSB7XHJcbiAgICByZXR1cm4gdGhpcy50aGVuKG51bGwsIG9uUmVqZWN0ZWQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG1ldGhvZCBQcm9taXNlI2ZpbmFsbHlcclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtvbkZ1bGZpbGxlZE9yUmVqZWN0ZWR9IG9uRnVsZmlsbGVkT3JSZWplY3RlZCAtIG9uRnVsZmlsbGVkT3JSZWplY3RlZCBjYWxsYmFjay5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cclxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIGZvciBjYXRjaGluZyBib3RoIGZ1bGZpbGxlZCBhbmQgcmVqZWN0ZWQgcHJvbWlzZXMuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIHNwaW5uZXIuc2hvdygpO1xyXG4gICAqIGZldGNoRGF0YSgpXHJcbiAgICogICAudGhlbigoZGF0YSkgPT4ge1xyXG4gICAqICAgICAvLyBkbyBzb21ldGhpbmcgd2l0aCBkYXRhXHJcbiAgICogICB9KVxyXG4gICAqICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgKiAgICAgLy8gaGFuZGxlIGVycm9yIHNvbWVob3dcclxuICAgKiAgIH0pXHJcbiAgICogICAuZmluYWxseSgoKSA9PiB7XHJcbiAgICogICAgIHNwaW5uZXIuaGlkZSgpO1xyXG4gICAqICAgfSk7XHJcbiAgICovXHJcbiAgZmluYWxseShvbkZ1bGZpbGxlZE9yUmVqZWN0ZWQpIHtcclxuICAgIGNvbnN0IGlzRnVuYyA9IGlzRnVuY3Rpb24ob25GdWxmaWxsZWRPclJlamVjdGVkKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy50aGVuKCh2YWx1ZSkgPT4gKFxyXG4gICAgICBQcm9taXNlXHJcbiAgICAgICAgLnJlc29sdmUoXHJcbiAgICAgICAgICBpc0Z1bmNcclxuICAgICAgICAgICAgPyBvbkZ1bGZpbGxlZE9yUmVqZWN0ZWQodmFsdWUsIHRydWUpXHJcbiAgICAgICAgICAgIDogMFxyXG4gICAgICAgIClcclxuICAgICAgICAudGhlbigoKSA9PiB2YWx1ZSlcclxuICAgICksIChlcnIpID0+IChcclxuICAgICAgUHJvbWlzZVxyXG4gICAgICAgIC5yZXNvbHZlKFxyXG4gICAgICAgICAgaXNGdW5jXHJcbiAgICAgICAgICAgID8gb25GdWxmaWxsZWRPclJlamVjdGVkKGVyciwgZmFsc2UpXHJcbiAgICAgICAgICAgIDogMFxyXG4gICAgICAgIClcclxuICAgICAgICAudGhlbigoKSA9PiBQcm9taXNlLnJlamVjdChlcnIpKVxyXG4gICAgKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIFByb21pc2UjdGhlblxyXG4gICAqIEBwYXJhbSB7b25GdWxmaWxsZWR9IFtvbkZ1bGZpbGxlZF0gLSBvbkZ1bGZpbGxlZCBjYWxsYmFjay5cclxuICAgKiBAcGFyYW0ge29uUmVqZWN0ZWR9IFtvblJlamVjdGVkXSAtIG9uUmVqZWN0ZWQgY2FsbGJhY2suXHJcbiAgICogQHJldHVybnMge1Byb21pc2V9IE5ldyBpbnN0YW5jZSBvZiBQcm9taXNlLlxyXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJvbWlzZS90aGVuXHJcbiAgICovXHJcbiAgdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xyXG4gICAgY29uc3QgcHJvbWlzZSA9IHRoaXMuJCQ7XHJcblxyXG4gICAgaWYgKHByb21pc2Uuc3RhdHVzID09PSAncGVuZGluZycpIHtcclxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICBwcm9taXNlLmhhbmRsZSgncmVqZWN0Jywgb25SZWplY3RlZCwgcmVzb2x2ZSwgcmVqZWN0LCBzZWNyZXQpO1xyXG4gICAgICAgIHByb21pc2UuaGFuZGxlKCdyZXNvbHZlJywgb25GdWxmaWxsZWQsIHJlc29sdmUsIHJlamVjdCwgc2VjcmV0KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvbWlzZS5oYW5kbGVkID0gc2VjcmV0O1xyXG5cclxuICAgIGNvbnN0IHsgdmFsdWUgfSA9IHByb21pc2U7XHJcblxyXG4gICAgbGV0IG1ldGhvZDtcclxuICAgIGxldCBoYW5kbGVyO1xyXG5cclxuICAgIGlmIChwcm9taXNlLnN0YXR1cyA9PT0gJ2Z1bGZpbGxlZCcpIHtcclxuICAgICAgbWV0aG9kID0gJ3Jlc29sdmUnO1xyXG4gICAgICBoYW5kbGVyID0gb25GdWxmaWxsZWQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBtZXRob2QgPSAncmVqZWN0JztcclxuICAgICAgaGFuZGxlciA9IG9uUmVqZWN0ZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFpc0Z1bmN0aW9uKGhhbmRsZXIpKSB7XHJcbiAgICAgIHJldHVybiBQcm9taXNlW21ldGhvZF0odmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoaGFuZGxlcih2YWx1ZSkpO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZGVmaW5lUHJvcGVydGllcyhQcm9taXNlLnByb3RvdHlwZSwge1xyXG4gIFtTeW1ib2wudG9TdHJpbmdUYWddOiAnUHJvbWlzZSdcclxufSk7XHJcblxyXG5leHBvcnQgeyBQcm9taXNlIH07XHJcbiIsIi8qKlxyXG4gKiBAbW9kdWxlIGhlbHBlcnMvcGFyc2VIZWFkZXJzXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBkZXNjcmlwdGlvbiBFeHBvcnRzIHBhcnNlSGVhZGVycyBtZXRob2QuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgU3RyIH0gZnJvbSAnLi4vU3RyJztcclxuaW1wb3J0IHsgaXRlcmF0ZSB9IGZyb20gJy4vaXRlcmF0ZSc7XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uIHBhcnNlSGVhZGVyc1xyXG4gKiBAcGFyYW0ge1N0cmluZ30gcmF3SGVhZGVycyAtIFJhdyBoZWFkZXJzLlxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIG9iamVjdFxyXG4gKiBAZGVzY3JpcHRpb24gRnVuY3Rpb24gZm9yIHBhcnNpbmcgcmF3IGhlYWRlcnMuXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCAocmF3SGVhZGVycykgPT4ge1xyXG4gIGNvbnN0IGhlYWRlcnMgPSB7fTtcclxuXHJcbiAgaXRlcmF0ZSgocmF3SGVhZGVycyB8fCAnJykuc3BsaXQoJ1xcbicpLCAodmFsdWUpID0+IHtcclxuICAgIGNvbnN0IGluZGV4ID0gdmFsdWUuaW5kZXhPZignOicpO1xyXG4gICAgY29uc3Qga2V5ID0gbmV3IFN0cih2YWx1ZS5zdWJzdHJpbmcoMCwgaW5kZXgpKVxyXG4gICAgICAudHJpbSgpXHJcbiAgICAgIC50b0NhbWVsQ2FzZSgpLiQ7XHJcbiAgICBjb25zdCB2YWwgPSBuZXcgU3RyKHZhbHVlLnN1YnN0cmluZyhpbmRleCArIDEpKS50cmltKCkuJDtcclxuXHJcbiAgICBpZiAoa2V5KSB7XHJcbiAgICAgIGhlYWRlcnNba2V5XSA9IChoZWFkZXJzW2tleV0gPyBgJHsgaGVhZGVyc1trZXldIH0sIGAgOiAnJykgKyB2YWw7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiBoZWFkZXJzO1xyXG59O1xyXG4iLCIvKipcclxuICogQG1vZHVsZSBoZWxwZXJzL3RyYW5zZm9ybURhdGFcclxuICogQHByaXZhdGVcclxuICogQGRlc2NyaXB0aW9uIEV4cG9ydHMgdHJhbnNmb3JtRGF0YSBtZXRob2QuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQXJyIH0gZnJvbSAnLi4vQXJyJztcclxuaW1wb3J0IHsgU3VwZXIgfSBmcm9tICcuLi9TdXBlcic7XHJcbmltcG9ydCB7IGlzT2JqZWN0LCB0b1N0cmluZ1RhZyB9IGZyb20gJy4vJztcclxuXHJcbmNvbnN0IG5vdFRvVHJhbnNmb3JtID0gbmV3IEFycihbJ0Zvcm1EYXRhJywgJ0ZpbGUnLCAnQmxvYicsICdBcnJheUJ1ZmZlcicsICdTdHJpbmcnLCAnTnVtYmVyJ10pO1xyXG5jb25zdCB3aXRob3V0Qm9keSA9IG5ldyBBcnIoWydERUxFVEUnLCAnR0VUJywgJ0hFQUQnXSk7XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uIHRyYW5zZm9ybURhdGFcclxuICogQHBhcmFtIHsqfSBkYXRhIC0gRGF0YSB0byB0cmFuc2Zvcm1cclxuICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZCAtIEhUVFAgbWV0aG9kLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gaGVhZGVycyAtIE9iamVjdCB3aXRoIGhlYWRlcnMuXHJcbiAqIEByZXR1cm5zIHsqfSAtIFRyYW5zZm9ybWVkIGRhdGEuXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCAoZGF0YSwgbWV0aG9kLCBoZWFkZXJzKSA9PiB7XHJcbiAgZGF0YSA9IG5ldyBTdXBlcihkYXRhKS4kO1xyXG5cclxuICBpZiAod2l0aG91dEJvZHkuaW5kZXhPZlN0cmljdChtZXRob2QpICE9PSAtMSkge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG5cclxuICBpZiAoaXNPYmplY3QoZGF0YSkgJiYgbm90VG9UcmFuc2Zvcm0uaW5kZXhPZlN0cmljdCh0b1N0cmluZ1RhZyhkYXRhKSkgPT09IC0xKSB7XHJcbiAgICBpZiAoIWhlYWRlcnMuY29udGVudFR5cGUpIHtcclxuICAgICAgaGVhZGVycy5jb250ZW50VHlwZSA9IFsnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04J107XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG5ldyBTdXBlcihkYXRhKS5qc29uKCk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZGF0YTtcclxufTtcclxuIiwiLyoqXHJcbiAqIEBtb2R1bGUgaGVscGVycy9yZXNvbHZlVVJMXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBkZXNjcmlwdGlvbiBFeHBvcnRzIE9iamVjdC5hc3NpZ24tbGlrZSBtZXRob2QuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgU3RyIH0gZnJvbSAnLi4vU3RyJztcclxuXHJcbmNvbnN0IHsgbG9jYXRpb24gfSA9IGdsb2JhbDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IChkZWNvZGVRdWVyeSkgPT4ge1xyXG4gIGNvbnN0IHtcclxuICAgIHNlYXJjaDogcXVlcnksXHJcbiAgICBoYXNoXHJcbiAgfSA9IGxvY2F0aW9uO1xyXG4gIGNvbnN0IHBhcmFtcyA9IHtcclxuICAgIHF1ZXJ5OiB7fSxcclxuICAgIGhhc2g6IGhhc2gucmVwbGFjZSgvXiMvLCAnJylcclxuICB9O1xyXG5cclxuICBpZiAoIXF1ZXJ5KSB7XHJcbiAgICByZXR1cm4gcGFyYW1zO1xyXG4gIH1cclxuXHJcbiAgbmV3IFN0cihxdWVyeS5yZXBsYWNlKC9eXFw/LywgJycpKVxyXG4gICAgLnNwbGl0KCcmJylcclxuICAgIC5mb3JFYWNoKChyYXdQYXJhbSkgPT4ge1xyXG4gICAgICBsZXQgW3BhcmFtLCB2YWx1ZSA9ICcnXSA9IHJhd1BhcmFtLnNwbGl0KCc9Jyk7XHJcblxyXG4gICAgICBwYXJhbSA9IGRlY29kZVF1ZXJ5ID8gZGVjb2RlVVJJQ29tcG9uZW50KHBhcmFtKSA6IHBhcmFtO1xyXG4gICAgICB2YWx1ZSA9IGRlY29kZVF1ZXJ5ID8gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKSA6IHZhbHVlO1xyXG5cclxuICAgICAgaWYgKCEvXlteW10rLy50ZXN0KHBhcmFtKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IHBhcmFtTmFtZTtcclxuICAgICAgbGV0IHBhcmFtT2JqZWN0ID0gcGFyYW1zLnF1ZXJ5O1xyXG5cclxuICAgICAgbmV3IFN0cihwYXJhbSlcclxuICAgICAgICAubWF0Y2goL15bXltcXF1dKnxcXFtbXltcXF1dKl0vZylcclxuICAgICAgICAuZm9yRWFjaCgobmFtZSkgPT4ge1xyXG4gICAgICAgICAgaWYgKG5hbWUuaW5kZXhPZignWycpKSB7XHJcbiAgICAgICAgICAgIHBhcmFtTmFtZSA9IG5hbWU7XHJcblxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgbmFtZSA9IG5hbWUuc2xpY2UoMSwgLTEpO1xyXG5cclxuICAgICAgICAgIHBhcmFtT2JqZWN0ID0gcGFyYW1PYmplY3RbcGFyYW1OYW1lXSA9IHBhcmFtT2JqZWN0W3BhcmFtTmFtZV0gfHwgKG5hbWUgPyB7fSA6IFtdKTtcclxuICAgICAgICAgIHBhcmFtTmFtZSA9IG5hbWUgfHwgcGFyYW1PYmplY3QubGVuZ3RoO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgcGFyYW1PYmplY3RbcGFyYW1OYW1lXSA9IHZhbHVlO1xyXG4gICAgfSk7XHJcblxyXG4gIHJldHVybiBwYXJhbXM7XHJcbn07XHJcbiIsImltcG9ydCAqIGFzIHN0YXRpY3MgZnJvbSAnLi9saWIvYnJvd3Nlcic7XHJcbmltcG9ydCB7IGFzc2lnbiB9IGZyb20gJy4vbGliL2hlbHBlcnMvYXNzaWduJztcclxuXHJcbmNvbnN0IHsgRCB9ID0gc3RhdGljcztcclxuXHJcbmFzc2lnbihELCBzdGF0aWNzKTtcclxuXHJcbmRlbGV0ZSBELkQ7XHJcblxyXG5nbG9iYWwuRCA9IEQ7XHJcbiJdLCJuYW1lcyI6WyJ0b1N0cmluZ1RhZyIsIm9iamVjdCIsInRvU3RyaW5nIiwiY2FsbCIsInJlcGxhY2UiLCJpc0FycmF5IiwidmFsdWUiLCJpc0FycmF5TGlrZSIsImlzRnVuY3Rpb24iLCJsZW5ndGgiLCJpc0ludGVnZXIiLCJpc0Jvb2xlYW4iLCJpc0RhdGUiLCJpc0RhdGVMaWtlIiwiRGF0ZSIsImlzTmFOIiwiZ2V0VGltZSIsImlzRWxlbWVudCIsInRlc3QiLCJpc0Zpbml0ZSIsImlzTnVtYmVyIiwiTnVtYmVyIiwiSW5maW5pdHkiLCJpc0ludGVnZXJMaWtlIiwicGFyc2VJbnQiLCJpc051bGwiLCJpc05pbCIsImlzTnVtYmVyTGlrZSIsImlzT2JqZWN0IiwiT2JqZWN0IiwiaXNQbGFpbk9iamVjdCIsImlzUHJpbWl0aXZlIiwicHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsImNvbnN0cnVjdG9yIiwiaXNSZWdFeHAiLCJpc1N0cmluZyIsImlzU3ltYm9sIiwiaXNVbmRlZmluZWQiLCJEIiwiaSIsImNvbnN0cnVjdG9ycyIsImxldmVsQ29uc3RydWN0b3JzIiwiayIsImxlbiIsImNscyIsImNoZWNrIiwiaXRlcmF0ZSIsImNhbGxiYWNrIiwiYXJyYXkiLCJpdGVyYXRlZEtleXMiLCJpdGVyYXRlZCIsImtleSIsImhhc093blByb3BlcnR5IiwiYXNzaWduIiwidGFyZ2V0Iiwib2JqZWN0cyIsImFyZ3VtZW50cyIsInNvdXJjZSIsImluZGV4IiwiZHluYW1pY0RlZmluZVByb3BlcnRpZXMiLCJwcm9wZXJ0aWVzIiwicHJvcGVydHlHZW5lcmF0b3IiLCJuYW1lIiwiZGVmaW5lUHJvcGVydHkiLCJkZWZpbmVQcm9wZXJ0aWVzIiwibWV0aG9kIiwidW5kZWZpbmVkIiwiZ2V0Iiwic2V0IiwidG9BcnJheSIsImNyZWF0ZU5ld0FycmF5IiwicHVzaCIsInZhbGlkYXRlIiwiYXJncyIsIm9wdGlvbnMiLCJudW1iZXIiLCJjaGVja2VyIiwidmFsaWRhdGVDaGVja0V4cHJlc3Npb25zIiwiZXJyb3IiLCJ0ZXh0IiwibnVtYmVycyIsImNoYXIiLCJhbHBoYWJldCIsInN0cmluZyIsInJhbmdlcyIsInNwbGl0IiwicmFuZ2UiLCJFcnJvciIsInN0YXJ0IiwiY2hhckNvZGVBdCIsImVuZCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsIkFscGhhYmV0Iiwic3dpdGNoZXIiLCJjYXNlcyIsIm1vZGUiLCJkZWZhdWx0VmFsdWUiLCJTd2l0Y2hlciIsIndoZW4iLCJjb25kaXRpb24iLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJkZWVwQXNzaWduIiwiZGVlcENsb25lIiwiY2xvbmUiLCJjbG9uZVN3aXRjaGVyIiwiZGVlcEVxdWFsIiwibzEiLCJvMiIsInN0cmljdCIsIm1hdGNoIiwibGFzdEluZGV4IiwicDEiLCJwMiIsImtleXMiLCJkZWVwRXZlcnkiLCJuIiwidHJlZSIsIm5ld1RyZWUiLCJjb25jYXQiLCJkZWVwRmlsdGVyIiwibnVsIiwibyIsImZpbHRlcmVkIiwiZGVlcEZpbmQiLCJyZXN1bHQiLCJkZWVwRm9yRWFjaCIsImRlZXBGb3JFYWNoRW50cnkiLCJkZWVwRnJlZXplIiwiZnJlZXplIiwiZGVlcE1hcCIsImRlZXBSZWR1Y2UiLCJJViIsImRlZXBTb21lIiwieCIsImFwcGx5Iiwibm9vcCIsInByb3AiLCJzZWxmIiwicmFuZCIsIk1hdGgiLCJyYW5kb20iLCJmbG9vciIsImFzYyIsInkiLCJBcnIiLCJibG9iIiwiYmxvYlBhcnRzIiwiQmxvYk9iamVjdCIsIkJsb2IiLCJ0cmltIiwicGFyc2VKU09OIiwianNvbiIsIkpTT04iLCJwYXJzZSIsImRhdGVzIiwicGFyc2VkIiwidGhpcyIsImZpbmQiLCJtYXJrdXAiLCJlbGVtIiwibWF0Y2hlcyIsInJhd1RleHRTd2l0Y2hlciIsIlN1cGVyIiwiY29uc3RydWN0Q2xvc2VUYWdSZWdFeHAiLCJOT0RFX1JFR0VYX1NFVCIsIm1hcCIsInJlZ2V4IiwicmV0dXJuaW5nIiwiYXR0cnMiLCJzdGFydE1hcmt1cCIsImNsb3NlTWF0Y2giLCJzZWxmQ2xvc2luZyIsInNsaWNlIiwiVEFHX09QRU5fQ0xPU0UiLCJhdHRyIiwiQVRUUklCVVRFIiwibWluIiwiTmFOIiwidGFnTmFtZSIsIlJlZ0V4cCIsIm5lYXJTdHJpbmciLCJwYXJzZUNoYXJhY3RlckRhdGEiLCJpbm5lckhUTUwiLCJkaXYiLCJ0ZXh0Q29udGVudCIsImlubmVyVGV4dCIsInRvRmluZCIsImlzRWxlbSIsIkVsZW0iLCJpc1dpbmRvdyIsImlzSFRNTERvY3VtZW50IiwiaXNEb2N1bWVudEZyYWdtZW50IiwiaXNTdHlsZVJ1bGUiLCJpc0NvbW1lbnRPclRleHQiLCJ0YWciLCJnZXRFbGVtIiwiJCIsImVtcHR5RGl2IiwiZ2V0TmFtZSIsIm5vZGVOYW1lIiwidG9Mb3dlckNhc2UiLCJhZGREd2F5bmVEYXRhIiwid2luZG93c0R3YXluZURhdGEiLCJzb21lIiwiZWxlbWVudCIsImdldENvbnRleHQiLCJzZWxlY3RvciIsImJhc2UiLCJuYXRpdmVEb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJwYXJzZUhUTUwiLCJodG1sIiwiY29sbGFwc2VXaGl0ZVNwYWNlIiwibWFya3VwVG9KU09OIiwidGVtcGxhdGUiLCJkb2MiLCJjb250ZW50IiwiZm9yRWFjaCIsImZvckVhY2hOb2RlIiwibm9kZSIsInBhcmVudCIsImNoaWxkcmVuIiwicGFyZW50Tm9kZSIsImNyZWF0ZSIsInB4Iiwic2l6ZSIsInJlZ2lzdGVyREJsb2NrIiwiQmxvY2siLCJEQmxvY2siLCJlbGVtcyIsIiQkIiwiZm91bmQiLCJyZWdpc3RlckRFYWNoIiwiY3JlYXRlQmxvY2siLCJERWFjaCIsIm9wdHMiLCJpdGVtIiwiaXRlbU5hbWUiLCJpbmRleE5hbWUiLCJfdGhpcyIsInVpZCIsImNvbnN0cnVjdFZhbHVlcyIsIndhdGNoQXJncyIsInBhcmVudEVsZW0iLCJ1aWRzIiwic2NvcGUiLCJVSUQiLCIkdWlkcyIsIm5ld0tleXMiLCJuZXdVSURzIiwiZXZhbHVhdGUiLCJpdGVtcyIsInNwbGljZSIsIkl0ZW0iLCJyZW1vdmUiLCJhZnRlciIsImJsb2NrIiwic2hpZnQiLCJwcmV2IiwiaW5zZXJ0QWZ0ZXIiLCJ2YWx1ZXMiLCJyZWdpc3RlckRFbGVtZW50cyIsIkRFbGVtZW50cyIsIl90aGlzMiIsIm1peGlucyIsIndhdGNoZXJzVG9SZW1vdmUiLCJjaGlsZCIsIm1peGluIiwiZmlsdGVyIiwid2F0Y2hlcnMiLCJ3YXRjaGVyIiwiZm9yREVsZW1lbnRzIiwiaW5kZXhPZiIsIm5ld0NvbnRlbnQiLCJhZGQiLCJyZWdpc3RlckRJZiIsIkRJZiIsImNvbmQiLCJldmFsdWF0ZUFuZFdhdGNoIiwiaWYiLCJuZXdWYWx1ZSIsIkJvb2xlYW4iLCJyZWdpc3RlckRJdGVtIiwiREl0ZW0iLCJyZWdpc3RlckRTd2l0Y2giLCJEU3dpdGNoIiwid2FzRGVmYXVsdCIsInZhbCIsImVxdWFscyIsInJlZ2lzdGVyRFRleHQiLCJEVGV4dCIsInJlZ2lzdGVyREF0dHIiLCJNaXhpbiIsIkRBdHRyIiwib2xkVmFsdWUiLCJyZW1vdmVBdHRyIiwicmVnaXN0ZXJEQmluZCIsIkRCaW5kIiwib2ZmIiwib24iLCJyZWdpc3RlckRDbGFzcyIsIkRDbGFzcyIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJyZWdpc3RlckRFbGVtIiwiREVsZW0iLCJyZWdpc3RlckRIaWRlIiwiREhpZGUiLCJoaWRlIiwic2hvdyIsInJlZ2lzdGVyRE9uIiwiRE9uIiwiZXZhbHVhdGVPbmNlIiwicmVnaXN0ZXJEU2hvdyIsIkRTaG93IiwicmVnaXN0ZXJEU3R5bGUiLCJEU3R5bGUiLCJyZW1vdmVDU1MiLCJjc3MiLCJyZWdpc3RlckRWYWxpZGF0ZSIsIkRWYWxpZGF0ZSIsInZhbGlkYXRvciIsInJlZ2lzdGVyRFZhbHVlIiwiRFZhbHVlIiwiX3ZhbHVlIiwidHlwZSIsInByb3BTd2l0Y2hlciIsImluaXRpYWxTY29wZVZhbHVlIiwic2V0UHJvcCIsImluaXRpYWxFbGVtVmFsdWUiLCJnZXRQcm9wIiwibGlzdGVuZXJTd2l0Y2hlciIsImUiLCJzZXRWYWx1ZVN3aXRjaGVyIiwiZ2V0VmFsdWVTd2l0Y2hlciIsImluaXRBcHAiLCJyb290IiwiZmlyc3QiLCJibG9ja3MiLCJ3YXJuIiwiYXR0ck5hbWUiLCJpc0luc3RhbmNlT2ZNaXhpbiIsInJlcGxhY2VtZW50IiwiY3JlYXRlQ29tbWVudCIsInJlZ2lzdGVyQmxvY2tzIiwiaXNJbnN0YW5jZU9mQmxvY2siLCJkZWVwQ2xvbmVDaGlsZHJlbiIsInJlZ2lzdGVyQnVpbHRJbnMiLCJyZWdpc3RlciIsInBhcmVudEJsb2NrIiwicGFyZW50U2NvcGUiLCJzdmdOUyIsInN2ZyIsImxvY2FsQmxvY2tzIiwiZEJsb2NrTWF0Y2giLCJleHByZXNzaW9uUmVnRXhwIiwiY3VycmVudE1peGlucyIsIl9tYXRjaCIsImludG8iLCJibG9ja0luc3RhbmNlIiwiZ2xvYmFsIiwiQXJncyIsImxvY2FscyIsImV2ZW50dWFsQXJncyIsImRlZmF1bHRBcmdzIiwiY29uc3RydWN0UHJpdmF0ZVNjb3BlIiwic2NvcGVWYWx1ZXMiLCJESXRlbUZvdW5kIiwicHJpdmF0ZVNjb3BlIiwiYWZ0ZXJDb25zdHJ1Y3QiLCJlcnIiLCJhZnRlclJlbmRlciIsImNyZWF0ZU1peGluIiwibmV3Q2hpbGQiLCJ0cmFuc2Zvcm1ESWZDaGlsZHJlbiIsImlmRWxzZSIsImlzUHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJyZW1vdmVXYXRjaGVycyIsImNvbnN0cnVjdFB1YmxpY1Njb3BlIiwiZGVmaW5lIiwiZXZhbE1vZGUiLCJnZXR0aW5nIiwidGVtcCIsImNoYW5nZWQiLCJvbGRUZW1wV2F0Y2hlcnMiLCJvblJlbW92ZSIsIndhcyIsInBlcm0iLCJyb3VuZCIsImRpZ2l0cyIsInplcm9lcyIsInplcm8iLCJyZXBlYXQiLCJub3ciLCJkYXRlIiwiRGF0IiwiaXNBYnNvbHV0ZSIsInVybCIsImFic29sdXRlVVJMUmVnZXhwIiwiZW5jb2RlIiwiaXNFbmNvZGVkIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZmV0Y2hCZWZvcmVNaWRkbGV3YXJlIiwiY29uZmlnIiwiYmFzZVVSTCIsImRhdGEiLCJoZWFkZXJzIiwicGFyYW1zIiwicXVlcnkiLCJNRVRIT0QiLCJ0b1VwcGVyQ2FzZSIsImNvbnN0cnVjdFVSTCIsInRyYW5zZm9ybURhdGEiLCJoZWFkZXIiLCJTdHIiLCJ0b0NhcGl0YWxDYXNlIiwiam9pbiIsImluaXRSb3V0ZXIiLCJpbml0aWFsaXplZCIsIlJvdXRlcyIsInJlZGlyZWN0Um91dGUiLCJkZWZhdWx0Um91dGUiLCJSZWRpcmVjdFJvdXRlIiwicm91dGUiLCJwYXJlbnROYW1lIiwiUGFyZW50TmFtZSIsInJvb3RSb3V0ZSIsImFic3RyYWN0IiwiYmFzZVJvdXRlIiwicGFyZW50UGFyYW1zIiwicGFyZW50UXVlcnkiLCJwYXRoIiwicmVsYXRpdmVVUkwiLCJyZWxhdGl2ZVBhdGgiLCJjb3VudCIsIm5ld1BhdGgiLCJuZXdVUkwiLCJ2YWxpZGF0ZVBhdGgiLCJsb2NhdGlvbiIsImhyZWYiLCJwdXNoZWQiLCJjbG9zZXN0TGluayIsImNsb3Nlc3QiLCJwcmV2ZW50RGVmYXVsdCIsIm1ha2VSb3V0ZSIsImNhbGxCZWZvcmVMb2FkIiwiYmVmb3JlTG9hZFJvdXRlIiwicm91dGVMb2FkZWQiLCJjYWxsQmVmb3JlTGVhdmUiLCJiZWZvcmVMZWF2ZVJvdXRlIiwiZmFsbGJhY2tUbyIsImlzRGVmYXVsdCIsImRlZmF1bHQiLCJ3YXNSb290IiwiTmFtZSIsIlJvdXRlIiwidW5zdWJzY3JpYmUiLCJyb3V0ZXIiLCJlbmNvZGVQYXJhbXMiLCJlbmNvZGVRdWVyeSIsImhhc2giLCJvcmlnaW4iLCJidWlsZFVSTCIsIl9faXNDdXJyZW50Um91dGVfXyIsImN1cnJlbnRSb3V0ZSIsImN1cnJlbnRSb3V0ZVBhcmFtcyIsInN1YnNjcmliZSIsImlzQ3VycmVudFJvdXRlIiwiZGVsZXRlIiwiZm9yd2FyZCIsImNoYW5nZVJvdXRlIiwiZmluZFJvdXRlQnlVUkwiLCJob3N0IiwiaG9zdG5hbWUiLCJwYXRobmFtZSIsInBvcnQiLCJwcm90b2NvbCIsInNlYXJjaCIsInVybFBhcmFtcyIsInJvdXRlVVJMIiwicmVxdWlyZWRRdWVyeSIsImRlY29kZVBhcmFtcyIsImRlY29kZVF1ZXJ5IiwicmVzb2x2ZWQiLCJyZXNvbHZlVVJMIiwiZXZlbnR1YWxQYXJhbXMiLCJwYXJhbSIsImhhc093biIsImRlY29kZSIsIkRlZmF1bHRSb3V0ZSIsImRlY29kZVVSSUNvbXBvbmVudCIsImNoYW5nZUhpc3RvcnkiLCJyZXNvbHZlUGFyYW1ldGVyIiwibmFtZUVycm9yTmFtZSIsInZhbHVlRXJyb3JOYW1lIiwibmFtZU1hdGNoIiwicmVnZXhwIiwid2luZG93IiwiYXBwbGllZFJlZ0V4cHMiLCJpZCIsImNhbnZhc0dldE1ldGhvZHMiLCJjYW52YXNSZXN0TWV0aG9kcyIsImh0bWxFbGVtZW50cyIsInN2Z0VsZW1lbnRzIiwidm9pZEVsZW1lbnRzIiwiaHRtbEFsbG93ZWRUYWdTeW1ib2xzIiwiaHRtbEFsbG93ZWRBdHRyU3ltYm9scyIsInJlZ2V4cFNwZWNpYWxDaGFyYWN0ZXJzIiwiUmFuZ2VFcnJvciIsInYiLCJtZXRob2RzIiwiVHlwZUVycm9yIiwiYSIsImQiLCJmIiwiciIsInMiLCJTeW1ib2wiLCJjaGFycyIsIndvcmQiLCJ0b2tlbiIsImRlZiIsInJldCIsIkNhc2UiLCJjYXNlIiwiZXZlbnR1YWxDYXNlcyIsInNldFByb3RvdHlwZU9mIiwiRnVuY3Rpb24iLCJkZWVwIiwic3VtIiwiZnVuYyIsImRlc2NyaXB0b3JzIiwicHJvcGVydHkiLCJkZXNjcmlwdG9yIiwicHJvcHMiLCJnZXR0ZXIiLCJpc0Zyb3plbiIsInJlcGxhY2VyIiwic3BhY2UiLCJ1bnNoaWZ0Iiwic3RyaW5naWZ5IiwibWF4Iiwib2JqIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImlzQ29udGV4dE9iamVjdCIsInN0YXJ0S2V5Iiwic2V0dGVyIiwicmVkdWNlIiwic2VjcmV0IiwiaXRlcmF0b3IiLCJQcm9taXNlIiwiZXhlY3V0b3IiLCJyZWplY3QiLCJoaWRkZW5Qcm9taXNlIiwic3RhdHVzIiwib25SZWplY3QiLCJoYW5kbGVkIiwib25VbmhhbmRsZWRSZWplY3Rpb24iLCJvbkVycm9yIiwicmVzb2x2ZSIsInRoZW4iLCJvbkZ1bGZpbGwiLCJoaWRkZW5TdGF0dXMiLCJoaWRkZW5WYWx1ZSIsInJlYWxQcm9taXNlIiwicHJveHkiLCJvblJlamVjdGVkIiwib25GdWxmaWxsZWRPclJlamVjdGVkIiwiaXNGdW5jIiwib25GdWxmaWxsZWQiLCJwcm9taXNlIiwiaGFuZGxlIiwiaGFuZGxlciIsIml0ZXJhYmxlIiwidG9SZXNvbHZlIiwibmV4dCIsImRvbmUiLCJjb25zb2xlIiwiYmluZCIsIkZ1bmMiLCJjYWxsZWQiLCJjYW5CZUNhbGxlZCIsImJlZm9yZSIsInN5bmMiLCJjb250ZXh0TG9ja2VkIiwiY29udGV4dCIsIm1pZGRsZXdhcmUiLCJhZnRlckFsbCIsImJlZm9yZUFsbCIsImJpbmRDb250ZXh0IiwiYmluZEFyZ3MiLCJ0aW1lcyIsImxvY2tDb250ZXh0IiwibG9ja0FyZ3MiLCJhcmdzTG9ja2VkIiwibWFyayIsInRpbWUiLCJ0aW1lRW5kIiwidW5iaW5kQ29udGV4dCIsInVuYmluZEFyZ3MiLCJ0b1JhZGlhbiIsIlBJIiwidG9EZWdyZWUiLCJsbjIiLCJMTjIiLCJsbjEwIiwiTE4xMCIsIk51bSIsInRvRGVncmVlcyIsImFjb3MiLCJhc2luIiwiYXRhbiIsImFzRGVncmVlcyIsImNvcyIsImFib3J0IiwiY2xlYXJUaW1lb3V0IiwidGltZW91dCIsImFib3J0ZWQiLCJzZXRUaW1lb3V0IiwiaW50ZXJ2YWwiLCJsb2ciLCJwb3dlciIsInBvdyIsInNpbiIsInRhbiIsInJlaiIsImZyYWN0aW9uRGlnaXRzIiwidG9FeHBvbmVudGlhbCIsInRvRml4ZWQiLCJwcmVjaXNpb24iLCJ0b1ByZWNpc2lvbiIsImFicyIsInNxcnQiLCJjYnJ0IiwiY2VpbCIsImV4cCIsImxuIiwic2lnbiIsImtleU9mIiwia2V5T2ZTdHJpY3QiLCJzZXBhcmF0b3IiLCJwb3AiLCJyZXZlcnNlIiwicmFuZG9tSW5kZXgiLCJiZWdpbiIsImNvbXBhcmVGdW5jdGlvbiIsInNvcnQiLCJkZWxldGVDb3VudCIsIlVSTCIsInByb2dyZXNzIiwicmVhZGVyIiwiRmlsZVJlYWRlciIsInRvUmVqZWN0Iiwib25wcm9ncmVzcyIsIm9uZXJyb3IiLCJvbmxvYWQiLCJhbmNob3IiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJkYXRhVVJMIiwic2V0QXR0cmlidXRlIiwiY2xpY2siLCJjcmVhdGVPYmplY3RVUkwiLCJodG1sU3BlY2lhbHMiLCJyZWdleHBTcGVjaWFsc1JlZ2V4cCIsInNlYXJjaFN0cmluZyIsInBvc2l0aW9uIiwicmV2ZXJ0Iiwic3RhcnRzV2l0aCIsImVzY2FwZWQiLCJzeW1ib2wiLCJzZWFyY2hWYWx1ZSIsImZyb21JbmRleCIsImxhc3RJbmRleE9mIiwic3RyIiwiYmVnaW5TbGljZSIsImVuZFNsaWNlIiwic3Vic3RyIiwiaW5kZXhTdGFydCIsImluZGV4RW5kIiwic3Vic3RyaW5nIiwic3VibWl0U3RyaW5nIiwibm9kZVN3aXRjaGVyIiwiSW50ZXJuYWxQYXJzaW5nRXJyb3IiLCJQYXJzaW5nRXJyb3IiLCJ0aHJvd1VuZXhwZWN0ZWRFcnJvciIsImdsb2JhbEluZGV4IiwiZWxlbWVudHMiLCJldmVudFNlcGFyYXRvciIsInRleHRQcm9wZXJ0eSIsIk5vZGUiLCJwcm9wZXJ0eURlc2NyaXB0b3IiLCJjbGFzc2VzIiwiaW5wdXRFbGVtZW50cyIsInhtbE5TIiwieGxpbmtOUyIsInhodG1sTlMiLCJ0eXBlU3dpdGNoZXIiLCJucyIsImRvY3VtZW50RWxlbWVudCIsIm5hbWVzcGFjZVVSSSIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0ZVRleHROb2RlIiwicmVmU3dpdGNoZXIiLCJmaWx0ZXJTd2l0Y2hlciIsImlzIiwiaW5uZXJTd2l0Y2hlciIsInBhZGRpbmdzIiwiYm9yZGVycyIsIm91dGVyU3dpdGNoZXIiLCJhdHRyTlNTd2l0Y2hlciIsImxpc3QiLCJjbGFzc0xpc3QiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJzdHlsZSIsInNoZWV0IiwiY3NzUnVsZXMiLCJydWxlcyIsInRvSHlwaGVuQ2FzZSIsImluc2VydFJ1bGUiLCJkd2F5bmVEYXRhIiwic3RyaW5ncyIsImFwcGxpZWQiLCJzZXRBcHBsaWVkIiwibnAxIiwiYXR0cmlidXRlcyIsImdldEF0dHJpYnV0ZSIsImdldEF0dHJpYnV0ZU5TIiwic2V0QXR0cmlidXRlTlMiLCJfdGhpczQiLCJsb2FkIiwiaXNCcm9rZW4iLCJjYW52YXMiLCJ3aWR0aCIsImhlaWdodCIsImRyYXdJbWFnZSIsImJ5dGVTdHJpbmciLCJhdG9iIiwiYWIiLCJBcnJheUJ1ZmZlciIsImlhIiwiVWludDhBcnJheSIsImJsdXIiLCJwc2V1ZG8iLCJnZXRDb21wdXRlZFN0eWxlIiwicnVsZSIsImNoaWxkTm9kZXMiLCJjbGFzc05hbWUiLCJjbG9uZU5vZGUiLCJjb250YWlucyIsImFwcGxpZWRFeHByZXNzaW9ucyIsImdldFByb3BlcnR5VmFsdWUiLCJnZXRQcm9wZXJ0eVByaW9yaXR5IiwicmVtb3ZlUHJvcGVydHkiLCJzZXRQcm9wZXJ0eSIsImNzc1RleHQiLCJ0b0NhbWVsQ2FzZSIsImN0eCIsImRhdGFzZXQiLCJlbmNvZGVyT3B0aW9ucyIsInRvRGF0YVVSTCIsImRlbGV0ZVJ1bGUiLCJldmVudCIsImV2ZW50SW5pdCIsImRldGFpbHMiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImZpbmFsRXZlbnQiLCJFdmVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImZvY3VzIiwic2VsZWN0b3JUZXh0IiwiaGFzQXR0cmlidXRlIiwiaGFzQXR0cmlidXRlTlMiLCJjdXJyZW50RGlzcGxheSIsInByZXZpb3VzRGlzcGxheSIsImluc2VydEJlZm9yZSIsImFwcGVuZENoaWxkIiwiZmlyc3RDaGlsZCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsImNvbXBsZXRlIiwibmF0dXJhbFdpZHRoIiwibmF0dXJhbEhlaWdodCIsImltYWdlcyIsImFsbCIsIiRlbGVtIiwicmVtb3ZlTGlzdGVuZXJzIiwicHJvcGVyIiwiYnJva2VuIiwibmV4dFNpYmxpbmciLCJldmVudHMiLCJsaXN0ZW5lcnMiLCJyZW1vdmVMaXN0ZW5lciIsImxpc3RlbmVyIiwiYWxsTGlzdGVuZXJzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lcnMiLCJoYXMiLCJuZXdMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicHJldmlvdXNTaWJsaW5nIiwibGluayIsInJlbW92ZUNoaWxkIiwicmVtb3ZlQXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlTlMiLCIyIiwiMSIsImNyZWF0ZWQiLCJ0eHQiLCJfYXJndW1lbnRzNiIsImhhc0F0dHIiLCJoYXNDbGFzcyIsImxldmVsIiwidmFsaWRhdG9yV3JhcCIsImlucHV0IiwiZXJyb3JzIiwidmFsaWRpdHkiLCJ2YWxpZCIsInZhbGlkYXRpb25NZXNzYWdlIiwidmFsaWRhdG9ycyIsImZvcm1FcnJvcnMiLCJmb3JtIiwiaW5wdXRzIiwiZGlzcGF0Y2giLCJpbnB1dEVycm9yIiwiZXZlcnkiLCJpbm5lckhlaWdodCIsImNhbGNDU1MiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckJvdHRvbVdpZHRoIiwiYm94U2l6aW5nIiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJpbm5lcldpZHRoIiwiYm9yZGVyTGVmdFdpZHRoIiwiYm9yZGVyUmlnaHRXaWR0aCIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0Iiwib3V0ZXJIZWlnaHQiLCJtYXJnaW5Ub3AiLCJtYXJnaW5Cb3R0b20iLCJvdXRlcldpZHRoIiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0Iiwid2luIiwiYm9keSIsImhlYWQiLCJpbnB1dFZhbHVlIiwib25FdmFsRXJyb3IiLCJvcmlnaW5hbEFyZ3MiLCJleHByZXNzaW9uIiwib25DaGFuZ2UiLCJpbnN0YW5jZSIsImZvckRJdGVtIiwiZm9yREVhY2giLCJleHByIiwiRHdheW5lU3RvcmUiLCJzdG9yZSIsImxvY2FsV2F0Y2hlcnMiLCJuZXdSZXN1bHQiLCJ3YXRjaGVyQmxvY2siLCJpbmRleDEiLCJpbmRleDIiLCJhcmciLCJEd2F5bmVCbG9jayIsImlzUGFyZW50U2lnbmFsIiwiYmVmb3JlUmVtb3ZlIiwidmFyaWFibGUiLCJfdGhpczMiLCJfdGhpczUiLCJsb2NhbCIsIl90aGlzNiIsIkJsb2NrcyIsImFmdGVyVXBkYXRlIiwiTWl4aW5zIiwiZGF5c09mVGhlV2Vla05hbWVzIiwiZGF5c09mVGhlV2Vla0FsaWFzZXMiLCJtb250aHNOYW1lcyIsIm1vbnRoc0FsaWFzZXMiLCJ1dGMiLCJjb2VmZnMiLCJnZXRTd2l0Y2hlciIsInNldFN3aXRjaGVyIiwid2hhdCIsInByZWZpeCIsImZvcm1hdHMiLCJmb3JtYXQiLCJyZXBsYWNlU3RyaW5nIiwiZGF0ZTEiLCJkYXRlMiIsImlzQmVmb3JlIiwic3RhcnRlZCIsImNvZWZmIiwidyIsInNldFRpbWUiLCJ0b0lTT1N0cmluZyIsInRvTG9jYWxlU3RyaW5nIiwidmFsdWVPZiIsInF1ZXJ5U3dpdGNoZXIiLCJxdWVyeVBhcmFtcyIsImVuY29kZU9wdGlvbnMiLCJyYXdIZWFkZXJzIiwibm90VG9UcmFuc2Zvcm0iLCJ3aXRob3V0Qm9keSIsImluZGV4T2ZTdHJpY3QiLCJjb250ZW50VHlwZSIsImRlZmF1bHRzIiwidXBsb2FkTWV0aG9kcyIsIkZldGNoIiwiZmV0Y2giLCJyZXF1ZXN0IiwiY29uZiIsInRvUHVzaCIsImRhdGFDb25maWciLCJ1cmxDb25maWciLCJ4aHIiLCJhdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInJlc3BvbnNlVHlwZSIsIndpdGhDcmVkZW50aWFscyIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsInNldFJlcXVlc3RIZWFkZXIiLCJ1cGxvYWQiLCJvbmFib3J0Iiwib250aW1lb3V0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlIiwicmVzcG9uc2VUZXh0IiwicGFyc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic3RhdHVzVGV4dCIsImNhdGNoIiwic2VuZCIsInJhd1BhcmFtIiwicGFyYW1OYW1lIiwicGFyYW1PYmplY3QiLCJzdWJzY3JpYmVycyIsImhpc3RvcnkiLCJwYXRoU3dpdGNoZXIiLCJwYXJ0IiwiZXNjYXBlUmVnRXhwIiwic3RhdGljcyJdLCJtYXBwaW5ncyI6IndCQVlBLFNBQWdCQSxHQUFZQyxZQUNoQkMsU0FBU0MsS0FBS0YsR0FBUUcsUUFBUSxpQkFBa0IsSUNPNUQsUUFBZ0JDLEdBQVFDLFNBQ1EsVUFBdkJOLEVBQVlNLEdBZ0JyQixRQUFnQkMsR0FBWUQsT0FDckJBLEdBQVNFLEVBQVdGLFVBQ2hCLEtBR0hHLEdBQVNILEVBQU1HLGFBRWRDLEdBQVVELElBQVdBLEdBQVUsRUFjeEMsUUFBZ0JFLEdB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QVFBLFNBUUEsVUFRQSxPQVFBLE9BUUEsTUFRQSxXQVFBLFVBUUEsV0FRQSxLQVFBLE1BUUEsVUFRQSxNQVFBLFNBUUEsTUFRQSxLQVFBLEtBUUEsVUFRQSxLQVFBLFFBUUEsV0FRQSxhQVFBLFNBUUEsU0FRQSxPQVFBLEtBUUEsS0FRQSxLQVFBLEtBUUEsS0FRQSxLQVFBLE9BUUEsU0FRQSxTQVFBLEtBUUEsSUFRQSxTQVFBLE1BUUEsUUFRQSxNQVFBLE1BUUEsUUFRQSxTQVFBLEtBUUEsT0FRQSxPQVFBLE9BUUEsT0FRQSxXQVFBLE9BUUEsUUFRQSxNQVFBLFdBUUEsS0FRQSxXQVFBLFNBUUEsU0FRQSxJQVFBLFFBUUEsTUFRQSxXQVFBLElBUUEsS0FRQSxLQVFBLE1BUUEsT0FRQSxJQVFBLE9BUUEsU0FRQSxVQVFBLFNBUUEsU0FRQSxRQVFBLFNBUUEsT0FRQSxTQVFBLFFBUUEsTUFRQSxVQVFBLE1BUUEsUUFRQSxRQVFBLEtBUUEsV0FRQSxXQVFBLFFBUUEsS0FRQSxRQVFBLE9BUUEsUUFRQSxLQVFBLFFBUUEsSUFRQSxLQVFBLE1BUUEsUUFRQSxPQUdXQyxJQU9YLFdBUUEsY0FRQSxlQVFBLFVBUUEsZUFRQSxnQkFRQSxtQkFRQSxTQVFBLFdBUUEsZ0JBUUEsU0FRQSxPQVFBLE9BUUEsVUFRQSxVQVFBLFVBUUEsZ0JBUUEsc0JBUUEsY0FRQSxtQkFRQSxvQkFRQSxvQkFRQSxpQkFRQSxlQVFBLFVBUUEsVUFRQSxVQVFBLFVBUUEsVUFRQSxpQkFRQSxVQVFBLFVBUUEsY0FRQSxlQVFBLFdBUUEsZUFRQSxxQkFRQSxjQVFBLFNBUUEsZUFRQSxPQVFBLFlBUUEsbUJBUUEsaUJBUUEsZ0JBUUEsZ0JBUUEsZ0JBUUEsSUFRQSxRQVFBLFdBUUEsUUFRQSxZQVFBLFFBUUEsUUFRQSxPQVFBLGlCQVFBLFNBUUEsT0FRQSxPQVFBLGVBUUEsWUFRQSxVQVFBLFdBUUEsZ0JBUUEsUUFRQSxPQVFBLFVBUUEsVUFRQSxXQVFBLGlCQVFBLE9BUUEsTUFRQSxhQVFBLE9BUUEsUUFRQSxNQVFBLFNBUUEsU0FRQSxX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"}