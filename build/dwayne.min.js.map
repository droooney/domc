{"version":3,"file":"dwayne.min.js","sources":["../src/utils/array.js","../src/utils/object.js","../src/utils/defineProperty.js","../src/utils/toStringTag.js","../src/utils/is.js","../src/utils/escapeRegex.js","../src/utils/noop.js","../src/utils/toCase.js","../src/helpers/Elem/addAttr.js","../src/helpers/Elem/addCSSProp.js","../src/helpers/Elem/addDataAttr.js","../src/helpers/Elem/addNext.js","../src/helpers/Elem/addParent.js","../src/helpers/Elem/addPrev.js","../src/helpers/Elem/createHideStyleNode.js","../src/helpers/Elem/getAttrNS.js","../src/helpers/Elem/is.js","../src/helpers/Elem/getEvent.js","../src/helpers/Elem/hide.js","../src/helpers/Elem/matches.js","../src/helpers/Elem/remove.js","../src/helpers/Elem/show.js","../src/helpers/Elem/toElem.js","../src/find.js","../src/helpers/Block/calculateArgs.js","../src/helpers/Block/cleanProperty.js","../src/helpers/Block/constructMixinRegex.js","../src/helpers/Block/mixinMatch.js","../src/helpers/Block/transformRestAttrs.js","../src/helpers/Block/executeMixinWatchers.js","../src/helpers/Block/calculateAttrs.js","../src/helpers/Block/normalizeArgs.js","../src/helpers/Block/constructPrivateScope.js","../src/helpers/Block/removeWatcher.js","../src/helpers/Block/constructPublicScope.js","../src/helpers/Block/createBlock.js","../src/helpers/Block/isInstanceOf.js","../src/helpers/Block/remove.js","../src/helpers/Block/wrap.js","../src/mixins/d-style.js","../src/mixins/d-value.js","../src/insertTemplates.js","../src/initApp.js","../src/removeApp.js","../src/global.js","../src/utils/objectStatics.js","../src/constants.js","../src/Elem.js","../src/utils/setSymbolSpecies.js","../src/Mixin.js","../src/Block.js","../src/blocks/d-block.js","../src/blocks/d-item.js","../src/blocks/d-each.js","../src/blocks/d-elements.js","../src/blocks/d-if.js","../src/blocks/d-switch.js","../src/mixins/d-bind.js","../src/mixins/d-class.js","../src/mixins/d-elem.js","../src/mixins/d-hide.js","../src/mixins/d-node.js","../src/mixins/d-on.js","../src/mixins/d-show.js","../src/helpers/Block/registerBuiltins.js","../src/elems.js"],"sourcesContent":["export function collectFromArray(array, callback, initialValue = {}) {\n  iterateArray(array, (value, index) => {\n    callback(initialValue, value, index, array);\n  });\n\n  return initialValue;\n}\n\nexport function findInArray(array, callback) {\n  for (let i = 0, length = array.length; i < length; i++) {\n    const value = array[i];\n\n    if (callback(value, i, array)) {\n      return {\n        key: i,\n        value\n      };\n    }\n  }\n}\n\nexport function iterateArray(array, callback) {\n  for (let i = 0, length = array.length; i < length; i++) {\n    callback(array[i], i, array);\n  }\n}\n\nexport function removeArrayElem(array, elem) {\n  const index = array.indexOf(elem);\n\n  if (index !== -1) {\n    array.splice(index, 1);\n  }\n}\n\nexport function toObjectKeys(array) {\n  return collectFromArray(array, addKey);\n}\n\nfunction addKey(vars, variable) {\n  vars[variable] = true;\n}\n","import { iterateArray } from './array';\n\nconst {\n  hasOwnProperty: has\n} = {};\nconst { slice } = [];\n\nexport function assign(target) {\n  iterateArray(arguments, (source, index) => {\n    if (index) {\n      iterateObject(source, (value, key) => {\n        target[key] = value;\n      });\n    }\n  });\n\n  return target;\n}\n\nexport function collectFromObject(object, callback, initialValue = {}) {\n  iterateObject(object, (value, key) => {\n    callback(initialValue, value, key, object);\n  });\n\n  return initialValue;\n}\n\nexport function except(object) {\n  const newObject = {};\n  const paths = arguments::slice(1);\n\n  iterateObject(object, (value, key) => {\n    if (paths.indexOf(key) === -1) {\n      newObject[key] = value;\n    }\n  });\n\n  return newObject;\n}\n\nexport function hasOwnProperty(object, key) {\n  return object::has(key);\n}\n\nexport function iterateObject(object, callback) {\n  for (const key in object) {\n    if (hasOwnProperty(object, key)) {\n      callback(object[key], key, object);\n    }\n  }\n}\n\nexport function mapObject(object, callback) {\n  const newObject = {};\n\n  iterateObject(object, (value, key) => {\n    newObject[key] = callback(value, key, object);\n  });\n\n  return newObject;\n}\n","import { iterateObject } from './object';\n\n/**\n * @function defineProperties\n * @param {Object} target - Target to define properties for.\n * @param {Object} properties - Object with properties needed to be assign to the target.\n * @returns {void}\n * @description Function for defining properties of an object.\n */\nexport const { defineProperties } = Object;\n\nexport function definePrototypeProperties(target, properties) {\n  iterateObject(properties, (value, name) => {\n    Object.defineProperty(target, name, {\n      value,\n      writable: true,\n      enumerable: false,\n      configurable: true\n    });\n  });\n}\n\n/**\n * @function defineFrozenProperties\n * @param {Object} target - Target to define properties for.\n * @param {Object} properties - Object with properties needed to be assign to the target.\n * @returns {void}\n * @description Function for defining frozen properties of an object.\n */\nexport function defineFrozenProperties(target, properties) {\n  iterateObject(properties, (value, name) => {\n    Object.defineProperty(target, name, {\n      value,\n      writable: false,\n      enumerable: false,\n      configurable: false\n    });\n  });\n}\n","import { definePrototypeProperties } from './defineProperty';\nimport { Symbol } from '../constants';\n\nconst { toString } = {};\n\n/**\n * @function toStringTag\n * @param {*} object - Object to get toStringTag of.\n * @returns {String} Cut string.\n * @description Cut \"Type\" string from \"[object Type]\" string that gotten from {}.toString,call(object).\n */\nexport function toStringTag(object) {\n  return object::toString().slice(8, -1);\n}\n\nexport function setToStringTag(klass, tag) {\n  if (Symbol.toStringTag) {\n    definePrototypeProperties(klass.prototype, {\n      [Symbol.toStringTag]: tag\n    });\n  }\n}\n","/**\n * @module helpers/checkTypes\n * @private\n * @mixin\n * @description Exports is<Type> methods.\n */\n\nimport { toStringTag } from './toStringTag';\n\n/**\n * @function isArray\n * @public\n * @param {*} value - Value to check if it is an array.\n * @returns {Boolean} If the argument is an array or not.\n * \n * @example\n * isArray([]);                             // true\n * isArray(0);                              // true\n * isArray(document.querySelectorAll('*')); // false\n */\nexport const { isArray } = Array;\n\n/**\n * @function isFunction\n * @public\n * @param {*} value - Value to check if it is a function.\n * @returns {Boolean} If the argument is a function or not.\n * \n * @example\n * isFunction(() => {});            // true\n * \n * const func = () => {};\n * Object.setPrototypeOf(func, {});\n * isFunction(func);                // true\n */\nexport function isFunction(value) {\n  return toStringTag(value) === 'Function' || typeof value === 'function';\n}\n\n/**\n * @function isNil\n * @public\n * @param {*} value - Value to check if it is null or undefined.\n * @returns {Boolean} If the argument is null or undefined or not.\n *\n * @example\n * isNil(null);      // true\n * isNil(undefined); // true\n * isNil(false);     // false\n */\nexport function isNil(value) {\n  /* eslint eqeqeq: 0 */\n  return value == null;\n}\n\n/**\n * @function isString\n * @public\n * @param {*} value - Value to check if it is a string.\n * @returns {Boolean} If the argument is a string or not.\n *\n * @example\n * isString('0');             // true\n * isString(new String('0')); // true\n */\nexport function isString(value) {\n  return toStringTag(value) === 'String';\n}\n","const regexpSpecialCharacters = [\n  '.',\n  '+', '*', '?',\n  '(', ')',\n  '[', ']',\n  '{', '}',\n  '<', '>',\n  '^', '$',\n  '!',\n  '=',\n  ':',\n  '-',\n  '|',\n  ',',\n  '\\\\'\n];\nconst regexpSpecialsRegexp = new RegExp(\n  regexpSpecialCharacters\n    .map((s) => `\\\\${ s }`)\n    .join('|'),\n  'g'\n);\n\nexport function escapeRegex(string) {\n  return string.replace(regexpSpecialsRegexp, '\\\\$&');\n}\n","export function noop() {}\n","const DASHED_SYMBOL_REGEX = /-[a-z]/g;\nconst UPPERCASED_SYMBOL_REGEX = /[A-Z]/g;\n\nexport function toCamelCase(value) {\n  return value.replace(DASHED_SYMBOL_REGEX, capitalize);\n}\n\nexport function toHyphenCase(value) {\n  return value.replace(UPPERCASED_SYMBOL_REGEX, hyphenize);\n}\n\nfunction capitalize(match) {\n  return match[1].toUpperCase();\n}\n\nfunction hyphenize(match) {\n  return `-${ match[0].toLowerCase() }`;\n}\n","export function addAttr(attrs, attr) {\n  attrs[attr.name] = attr.value;\n}\n","import { toCamelCase } from '../../utils';\n\nconst CSS_PROP_VALUE_SEPARATOR_REGEX = /: /;\n\nexport function addCSSProp(css, value) {\n  if (value) {\n    const property = value.split(CSS_PROP_VALUE_SEPARATOR_REGEX);\n\n    css[toCamelCase(property[0])] = property[1];\n  }\n}\n","export function addDataAttr(data, value, key) {\n  data[key] = value;\n}\n","export function addNext(add, elem) {\n  add(elem.nextSibling);\n}\n","export function addParent(add, elem) {\n  add(elem.parentNode);\n}\n","export function addPrev(add, elem) {\n  add(elem.previousSibling);\n}\n","import { HIDE_CLASS } from '../../constants';\n\nexport function createHideStyleNode(head) {\n  const style = head.find(`style#${ HIDE_CLASS }`);\n\n  if (style.length) {\n    return;\n  }\n\n  head\n    .create('style')\n    .prop('id', HIDE_CLASS)\n    .text(`.${ HIDE_CLASS }{display:none !important;}`);\n}\n","import { Elem } from '../../Elem';\n\nconst X_LINK_ATTR_FIND_REGEX = /^xlink:\\w/;\nconst X_LINK_ATTR_REPLACE_REGEX = /^xlink:/;\nconst XML_NS = 'http://www.w3.org/2000/xmlns/';\nconst X_LINK_NS = 'http://www.w3.org/1999/xlink';\nconst Null = {\n  ns: null\n};\n\nexport function getAttrNS(attr, elem) {\n  const isXmlNs = attr === 'xmlns';\n\n  if (isXmlNs || attr === 'xmlns:xlink') {\n    if (elem.nodeName !== 'SVG') {\n      return Null;\n    }\n\n    return {\n      ns: XML_NS,\n      name: isXmlNs\n        ? 'xmlns'\n        : 'xlink'\n    };\n  }\n\n  if (X_LINK_ATTR_FIND_REGEX.test(attr)) {\n    if (!new Elem(elem).closest('svg').length) {\n      return Null;\n    }\n\n    return {\n      ns: X_LINK_NS,\n      name: attr.replace(X_LINK_ATTR_REPLACE_REGEX, '')\n    };\n  }\n\n  return Null;\n}\n","import { toStringTag, isArray } from '../../utils';\nimport { Elem } from '../../Elem';\n\nconst HTML_COLLECTION_REGEX = /^(HTMLCollection|NodeList)$/;\nconst DOCUMENT_REGEX = /Document$/;\nconst ELEMENT_REGEX = /Element$/;\n\nexport function isDocument(value) {\n  return DOCUMENT_REGEX.test(toStringTag(value));\n}\n\nexport function isElem(value) {\n  return value instanceof Elem;\n}\n\nexport function isElementsCollection(value) {\n  return (\n    HTML_COLLECTION_REGEX.test(toStringTag(value))\n    || isElem(value)\n    || isArray(value)\n  );\n}\n\nexport function isValidNode(value) {\n  const tag = toStringTag(value);\n\n  return (\n    ELEMENT_REGEX.test(tag)\n    || DOCUMENT_REGEX.test(tag)\n    || tag === 'Text'\n    || tag === 'DocumentFragment'\n    || tag === 'Comment'\n  );\n}\n","import { assign, toStringTag } from '../../utils';\nimport { isDocument } from './is';\n\nconst EVENT_REGEX = /Event$/;\n\nexport function getEvent(event, bubbles, cancelable, realDetails, elem) {\n  let finalEvent = event;\n\n  if (!EVENT_REGEX.test(toStringTag(finalEvent))) {\n    try {\n      finalEvent = new Event(finalEvent, { bubbles, cancelable });\n      assign(finalEvent, realDetails);\n    } catch (err) {\n      const document = isDocument(elem)\n        ? elem\n        : elem.ownerDocument;\n\n      finalEvent = document.createEvent('Event');\n      finalEvent.initEvent(event, bubbles, cancelable);\n\n      assign(finalEvent, realDetails);\n    }\n  }\n\n  return finalEvent;\n}\n","import { createHideStyleNode } from './createHideStyleNode';\nimport { HIDE_CLASS } from '../../constants';\nimport { Elem } from '../../Elem';\n\nexport function hide(elem) {\n  createHideStyleNode(new Elem(elem.ownerDocument.head));\n  new Elem(elem).addClass(HIDE_CLASS);\n}\n","import { isDocument } from './is';\n\nconst { indexOf } = [];\n\nexport function getMatchesFunction(elem) {\n  return (\n    elem.matches\n    || elem.matchesSelector\n    || elem.webkitMatchesSelector\n    || elem.mozMatchesSelector\n    || elem.msMatchesSelector\n    || elem.oMatchesSelector\n    || matches\n  );\n}\n\nfunction matches(selector) {\n  const document = isDocument(this)\n    ? this\n    : this.ownerDocument;\n\n  return document.querySelectorAll(selector)::indexOf(this) !== -1;\n}\n","export function remove(elem) {\n  const parent = elem.parentNode;\n\n  if (parent) {\n    parent.removeChild(elem);\n  }\n}\n","import { HIDE_CLASS } from '../../constants';\nimport { Elem } from '../../Elem';\n\nexport function show(elem) {\n  new Elem(elem).removeClass(HIDE_CLASS);\n}\n","import { isElem } from './is';\nimport { Elem } from '../../Elem';\n\nexport function toElem(elem) {\n  return isElem(elem)\n    ? elem\n    : new Elem(elem);\n}\n","import { Elem } from './Elem';\nimport { document } from './constants';\n\n/**\n * @function find\n * @public\n * @param {String} selector - Selector to find.\n * @param {Element|Node} [base = document] - Base to find in.\n * @returns {Elem} New instance of Elem.\n * @description Synonym for\n * [Document#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Document/querySelectorAll}.\n */\nexport function find(selector, base = document) {\n  return new Elem(base.querySelectorAll(String(selector)));\n}\n","import { iterateArray, iterateObject, keys } from '../../utils';\n\nexport function calculateArgs(args, argsObject) {\n  iterateArray(keys(argsObject), (arg) => {\n    if (!(arg in args)) {\n      argsObject[arg] = undefined;\n    }\n  });\n\n  iterateObject(args, (value, arg) => {\n    argsObject[arg] = value;\n  });\n}\n","export function cleanProperty(value, arg, object) {\n  delete object[arg];\n}\n","import { escapeRegex } from '../../utils';\n\nexport function constructMixinRegex(name) {\n  return new RegExp(`^${ escapeRegex(name) }(?:\\\\(([^\\\\)]*)\\\\))?(?:#([\\\\s\\\\S]*))?$`);\n}\n","const COMMA_REGEX = /,/;\n\nexport function mixinMatch(mixins, attr) {\n  let match;\n\n  /* eslint guard-for-in: 0 */\n  for (const name in mixins) {\n    const Mixin = mixins[name];\n    const localMatch = attr.match(Mixin._match);\n\n    if (localMatch) {\n      const argsMatch = localMatch[1];\n      let args;\n\n      if (argsMatch === '') {\n        args = [];\n      } else if (argsMatch) {\n        args = argsMatch.split(COMMA_REGEX);\n      }\n\n      match = {\n        args,\n        comment: localMatch[2],\n        Mixin,\n        name\n      };\n\n      break;\n    }\n  }\n\n  return match;\n}\n","import { collectFromObject, assign } from '../../utils';\nimport { D_REST_REGEX } from '../../constants';\nimport { mixinMatch } from './mixinMatch';\n\nexport function transformRestAttrs(attrs, mixins, mixinDefaultOpts) {\n  return collectFromObject(attrs, (eventualAttrs, value, attr) => {\n    if (D_REST_REGEX.test(attr)) {\n      return assign(eventualAttrs, transformRestAttrs(value, mixins, mixinDefaultOpts));\n    }\n\n    const match = mixinMatch(mixins, attr);\n\n    if (match) {\n      eventualAttrs[attr] = {\n        type: 'mixin',\n        dynamic: true,\n        opts: {\n          value,\n          ...match,\n          ...mixinDefaultOpts\n        },\n        value\n      };\n\n      return;\n    }\n\n    eventualAttrs[attr] = {\n      type: 'attr',\n      value\n    };\n  });\n}\n\nexport function transformRestArgs(args) {\n  return collectFromObject(args, addArgs);\n}\n\nfunction addArgs(args, value, arg) {\n  if (D_REST_REGEX.test(arg)) {\n    assign(args, transformRestArgs(value));\n  } else {\n    args[arg] = value;\n  }\n}\n","import { iterateArray } from '../../utils';\n\nexport function executeMixinWatchers(mixin, value) {\n  const oldValue = mixin.$$.value;\n\n  mixin.$$.value = value;\n\n  iterateArray(mixin.$$.watchers, (watcher) => {\n    watcher(value, oldValue);\n  });\n}\n","import { iterateObject, iterateArray } from '../../utils';\nimport { executeMixinWatchers } from './executeMixinWatchers';\n\nexport function calculateAttrs(normalizedAttrs, attrs, attrsObject, elem, firstTime) {\n  iterateObject(attrsObject, ({ type, value }, attr) => {\n    if (!attrs[attr]) {\n      if (type === 'attr') {\n        elem.removeAttr(attr);\n      } else {\n        value.$$.remove();\n      }\n\n      delete attrsObject[attr];\n    }\n  });\n\n  const mixins = [];\n\n  iterateObject(normalizedAttrs, ({ type, dynamic, value, opts }, attr) => {\n    let nextType;\n    let nextDynamic;\n    let nextValue;\n\n    if (attrsObject[attr]) {\n      const {\n        type: prevType,\n        value: prevValue,\n        dynamic: prevDynamic\n      } = attrsObject[attr];\n\n      if (type === 'attr') {\n        if (prevType === 'mixin') {\n          prevValue.$$.remove();\n        }\n\n        if (prevValue !== value) {\n          elem.attr(attr, value);\n        }\n\n        nextValue = value;\n      } else {\n        let mixin = prevValue;\n        let created;\n\n        if (prevType === 'attr') {\n          elem.removeAttr(attr);\n\n          created = true;\n          opts.dynamic = dynamic;\n          mixin = new opts.Mixin(opts);\n        } else {\n          mixin.$$.isDynamic = dynamic;\n        }\n\n        if (dynamic) {\n          executeMixinWatchers(mixin, value);\n        } else if (!mixin.$$.evaluated && opts.Mixin.evaluate) {\n          const newValue = mixin.$$.parentScope.$$.evaluate(\n            value,\n            constructMixinWatcher(mixin, attr, attrs),\n            mixin\n          );\n\n          mixin.$$.evaluated = true;\n\n          executeMixinWatchers(mixin, newValue);\n        } else if (prevDynamic && opts.Mixin.evaluate) {\n          executeMixinWatchers(mixin, mixin.$$.parentScope.$$.evaluate(value));\n        }\n\n        nextValue = mixin;\n\n        if (created) {\n          mixin.$$.setAfterUpdate();\n        }\n      }\n\n      nextType = type;\n      nextDynamic = dynamic;\n    } else {\n      if (type === 'attr') {\n        elem.attr(attr, value);\n\n        nextValue = value;\n      } else {\n        const buildMixin = () => {\n          opts.dynamic = dynamic;\n\n          const mixin = new opts.Mixin(opts);\n\n          if (!dynamic && opts.Mixin.evaluate) {\n            const {\n              parentScope,\n              value\n            } = opts;\n            const firstValue = parentScope.$$.evaluate(\n              value,\n              constructMixinWatcher(mixin, attr, attrs),\n              mixin\n            );\n\n            mixin.$$.evaluated = true;\n            mixin.$$.value = firstValue;\n          }\n\n          nextValue = mixin;\n          mixin.$$.setAfterUpdate();\n\n          return {\n            attr,\n            opts: {\n              type,\n              dynamic,\n              value: mixin\n            }\n          };\n        };\n\n        if (firstTime) {\n          mixins.push(buildMixin);\n        } else {\n          buildMixin();\n        }\n      }\n\n      nextType = type;\n      nextDynamic = dynamic;\n    }\n\n    attrsObject[attr] = {\n      type: nextType,\n      dynamic: nextDynamic,\n      value: nextValue\n    };\n  });\n\n  if (firstTime) {\n    return () => {\n      iterateArray(mixins, (buildMixin) => {\n        const {\n          attr,\n          opts\n        } = buildMixin();\n\n        attrsObject[attr] = opts;\n      });\n    };\n  }\n}\n\nfunction constructMixinWatcher(mixin, attr, attrs) {\n  return function (newValue) {\n    const {\n      type,\n      dynamic\n    } = attrs[attr];\n\n    if (type === 'mixin' && !dynamic) {\n      executeMixinWatchers(mixin, newValue);\n    }\n  };\n}\n","import { iterateArray, iterateObject } from '../../utils';\n\nexport function normalizeArgs(argsChain) {\n  const newArgs = {};\n\n  iterateArray(argsChain, (args) => {\n    iterateObject(args, (value, arg) => {\n      newArgs[arg] = value;\n    });\n  });\n\n  return newArgs;\n}\n","import { create, collectFromObject } from '../../utils';\n\nexport function constructPrivateScope(object, type, parentScope) {\n  let scope = {};\n\n  if (type === 'globals') {\n    scope = create(\n      parentScope\n        ? parentScope.$$.globals\n        : null\n    );\n  }\n\n  return collectFromObject(object, (scope, value, key) => {\n    scope[key] = {\n      value,\n      watchers: []\n    };\n  }, scope);\n}\n","import { removeArrayElem, iterateArray } from '../../utils';\n\nexport function removeTempWatcher(watcher) {\n  watcher();\n}\n\nexport function removeWatchers(watchersToRemove) {\n  iterateArray(watchersToRemove, removeWatcher);\n}\n\nfunction removeWatcher({ watcher, watchers }) {\n  removeArrayElem(watchers, watcher);\n}\n","import { defineProperties, mapObject, iterateArray } from '../../utils';\nimport { gettingVars, evalMode } from '../../Block';\nimport { removeTempWatcher } from './removeWatcher';\n\nexport function constructPublicScope(scope, scopeValues, privateScope) {\n  defineProperties(scope, mapObject(scopeValues, (value, key) => {\n    const scope = privateScope[key];\n\n    return {\n      configurable: false,\n      enumerable: true,\n      get() {\n        if (evalMode) {\n          if (gettingVars.indexOf(scope.watchers) === -1) {\n            gettingVars.push(scope.watchers);\n          }\n        }\n\n        return scope.value;\n      },\n      set(value) {\n        if (value === scope.value) {\n          return;\n        }\n\n        const oldTempWatchers = scope.watchers.slice();\n\n        scope.watchers = [];\n        scope.value = value;\n\n        iterateArray(oldTempWatchers, removeTempWatcher);\n      }\n    };\n  }));\n}\n","import {\n  except, create, assign,\n  iterateObject, iterateArray,\n  isNil\n} from '../../utils';\nimport { isDocument } from '../Elem';\nimport { Elem } from '../../Elem';\nimport {\n  SVG_NS, D_REST_REGEX\n} from '../../constants';\nimport { cleanProperty } from './cleanProperty';\nimport { transformRestAttrs } from './transformRestAttrs';\nimport { calculateAttrs } from './calculateAttrs';\nimport { normalizeArgs } from './normalizeArgs';\nimport { mixinMatch } from './mixinMatch';\nimport { constructPrivateScope } from './constructPrivateScope';\nimport { constructPublicScope } from './constructPublicScope';\nimport { Block } from '../../Block';\n\nconst NAMED_D_BLOCK_REGEX = /^d-block:([\\s\\S]+)$/;\nconst emptyArray = [];\n\nexport function createBlock({ node, parent, parentElem, parentBlock, parentScope, parentTemplate, prevBlock }) {\n  const doc = isDocument(parentElem[0])\n    ? parentElem\n    : new Elem(parentElem[0].ownerDocument);\n  const elem = parentElem[0].namespaceURI === SVG_NS\n    ? doc.create('svg')\n    : doc;\n  const localBlocks = parentTemplate ? parentTemplate.$$.ns._blocks : Block._blocks;\n  const localMixins = parentTemplate ? parentTemplate.$$.ns._mixins : Block._mixins;\n  const args = node.attrs || {};\n  const name = node.name || 'UnknownBlock';\n  let { children } = node;\n  let constructor = node.Constructor || (node.name && localBlocks[node.name]);\n  let dBlockMatch;\n  let dBlockName;\n  let dBlockArgs;\n\n  if (name === 'd-block' && args.name) {\n    dBlockArgs = except(args, 'name');\n  } else if (name === 'd-block' && args.Constructor) {\n    dBlockArgs = except(args, 'Constructor');\n  } else if ((dBlockMatch = name.match(NAMED_D_BLOCK_REGEX)) || name === 'd-block') {\n    constructor = Block._blocks['d-block'];\n    dBlockName = dBlockMatch ? dBlockMatch[1] : null;\n  }\n\n  let blockInstance;\n\n  if (constructor) {\n    try {\n      blockInstance = new constructor({\n        name,\n        args,\n        dBlockName,\n        dBlockArgs,\n        children,\n        parent,\n        parentElem,\n        parentBlock,\n        parentScope,\n        parentTemplate,\n        prevBlock\n      });\n    } catch (err) {\n      console.error(`Uncaught error in new ${ name }:`, err);\n      constructor = null;\n    }\n  }\n\n  if (!constructor) {\n    const { value } = node;\n\n    const element = elem.create(name);\n    const currentAttrs = create(null);\n    let attrs = create(null);\n    let wasDRest;\n    const attrsChain = [attrs];\n    const mixinDefaultOpts = {\n      elem: element,\n      parentBlock,\n      parentScope,\n      parentTemplate\n    };\n\n    iterateObject(args, (value, attr) => {\n      const isDRest = D_REST_REGEX.test(attr);\n      const localAttrs = isDRest || wasDRest\n        ? create(attrs)\n        : attrs;\n\n      if (attrs !== localAttrs) {\n        attrsChain.push(localAttrs);\n      }\n\n      attrs = localAttrs;\n\n      if (isDRest) {\n        const restAttrs = parentScope.$$.evaluate(value, (value) => {\n          iterateObject(localAttrs, cleanProperty);\n          assign(localAttrs, transformRestAttrs(\n            value,\n            localMixins,\n            mixinDefaultOpts\n          ));\n          calculateAttrs(normalizeArgs(attrsChain), attrs, currentAttrs, element, false);\n        }, parentBlock);\n\n        wasDRest = true;\n\n        return assign(localAttrs, transformRestAttrs(\n          restAttrs, localMixins, mixinDefaultOpts\n        ));\n      }\n\n      const match = mixinMatch(localMixins, attr);\n\n      wasDRest = false;\n\n      if (match) {\n        localAttrs[attr] = {\n          type: 'mixin',\n          dynamic: false,\n          opts: {\n            value,\n            ...match,\n            ...mixinDefaultOpts\n          },\n          value\n        };\n\n        return;\n      }\n\n      localAttrs[attr] = {\n        type: 'attr',\n        value: parentScope.$$.evaluate(value, (value) => {\n          localAttrs[attr] = {\n            type: 'attr',\n            value\n          };\n          calculateAttrs(normalizeArgs(attrsChain), attrs, currentAttrs, element, false);\n        }, parentBlock)\n      };\n    });\n\n    parentBlock.$$.mixinsToBuild.push(calculateAttrs(normalizeArgs(attrsChain), attrs, currentAttrs, element, true));\n\n    if (name === '#comment') {\n      element.text(value);\n    }\n\n    if (name === '#text') {\n      let text = parentScope.$$.evaluate(value, (value) => {\n        if (isNil(value)) {\n          value = '';\n        }\n\n        element.text(`${ value }`);\n      }, parentBlock);\n\n      if (isNil(text)) {\n        text = '';\n      }\n\n      element.text(`${ text }`);\n    }\n\n    const isParentBlock = parent instanceof Block;\n\n    if (prevBlock instanceof Block) {\n      prevBlock.$$.insertAfterIt(element, false);\n    } else if (prevBlock) {\n      element.insertAfter(prevBlock);\n\n      if (isParentBlock) {\n        parent.$$.addContent(element);\n      }\n    } else if (isParentBlock) {\n      parent.$$.insertInStartOfIt(element, false);\n    } else {\n      element.into(parentElem, false);\n    }\n\n    if (children) {\n      let prevBlock;\n      let parentElem = element;\n\n      if (name === 'template') {\n        parentElem = new Elem(element[0].content);\n      } else if (name === 'iframe') {\n        if ('src' in attrs) {\n          children = emptyArray;\n        } else {\n          const document = element[0].contentDocument;\n\n          new Elem(document.documentElement).remove();\n\n          parentElem = new Elem(document);\n        }\n      }\n\n      iterateArray(children, (child) => {\n        prevBlock = createBlock({\n          node: child,\n          parent: parentElem,\n          parentElem,\n          parentBlock,\n          parentScope,\n          parentTemplate,\n          prevBlock\n        });\n      });\n    }\n\n    return element;\n  }\n\n  const {\n    $$,\n    args: Args,\n    globals,\n    ...locals\n  } = blockInstance;\n\n  const html = name === 'd-elements'\n    ? Args.value || []\n    : constructor.template.value;\n\n  $$.args = constructPrivateScope(Args);\n  $$.locals = constructPrivateScope(locals);\n  $$.globals = constructPrivateScope(globals, 'globals', parentScope);\n\n  if (name === '#d-item') {\n    const scopeValues = {\n      [node.itemName]: node.item,\n      [node.indexName]: node.index\n    };\n    const scope = parentScope.$$.name === '#d-item'\n      ? parentScope.$$.scope\n      : parentScope;\n\n    $$.ns = parentScope.$$.ns;\n    $$.privateScope = constructPrivateScope(scopeValues);\n    constructPublicScope($$.scope = create(scope), scopeValues, $$.privateScope);\n  }\n\n  constructPublicScope(Args, Args, $$.args);\n  constructPublicScope(globals, globals, $$.globals);\n  constructPublicScope(blockInstance, locals, $$.locals);\n\n  try {\n    blockInstance.afterConstruct();\n  } catch (err) {\n    console.error(`Uncaught error in ${ name }#afterConstruct:`, err);\n  }\n\n  prevBlock = undefined;\n  parentScope = name === 'd-elements'\n    ? Args.parentScope\n    : blockInstance;\n  parentTemplate = name === 'd-elements'\n    ? Args.parentTemplate\n    : blockInstance;\n\n  iterateArray(html, (child) => {\n    prevBlock = createBlock({\n      node: child,\n      parent: blockInstance,\n      parentElem,\n      parentBlock: blockInstance,\n      parentScope,\n      parentTemplate,\n      prevBlock\n    });\n  });\n\n  blockInstance.$$.isRendered = true;\n\n  iterateArray(blockInstance.$$.mixinsToBuild, (executeBuilders) => {\n    executeBuilders();\n  });\n  blockInstance.$$.mixinsToBuild = [];\n\n  try {\n    blockInstance.afterRender();\n  } catch (err) {\n    console.error(`Uncaught error in ${ name }#afterRender:`, err);\n  }\n\n  return blockInstance;\n}\n","const { isPrototypeOf } = {};\n\nexport function isInstanceOf(Class, Subclass) {\n  return Class::isPrototypeOf(Subclass) && Class.prototype::isPrototypeOf(Subclass.prototype);\n}\n","export function removeWithParentSignal(child) {\n  child.$$.remove(true);\n}\n\nexport function remove(child) {\n  child.$$.remove();\n}\n","import { isInstanceOf } from './isInstanceOf';\nimport { Block } from '../../Block';\nimport { Mixin } from '../../Mixin';\n\nexport function wrapBlock(block, wrapper) {\n  const returnValue = wrapper(block);\n\n  return isInstanceOf(Block, returnValue)\n    ? returnValue\n    : block;\n}\n\nexport function wrapMixin(mixin, wrapper) {\n  const returnValue = wrapper(mixin);\n\n  return isInstanceOf(Mixin, returnValue)\n    ? returnValue\n    : mixin;\n}\n","import {\n  isString, iterateObject, keys,\n  collectFromObject, collectFromArray\n} from '../utils';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nconst CSS_STYLES_SEPARATOR_REGEX = /\\s*;\\s*/;\nconst CSS_STYLE_SEPARATOR_REGEX = /\\s*:\\s*/;\n\nrootMixins['d-style'] = class DStyle extends Mixin {\n  css = {};\n\n  afterUpdate(newValue, oldValue) {\n    const {\n      elem,\n      args,\n      css\n    } = this;\n\n    if (args) {\n      newValue = collectFromObject(args, (css, prop) => {\n        css[prop] = newValue;\n      });\n    }\n\n    if (isString(newValue)) {\n      newValue = collectFromArray(\n        newValue\n          .split(CSS_STYLES_SEPARATOR_REGEX)\n          .filter(Boolean)\n          .map(constructStyleFromString),\n        addCSSProp\n      );\n    }\n\n    iterateObject(css, (value, prop) => {\n      if (!newValue[prop]) {\n        elem.removeCSS(prop);\n      }\n    });\n    elem.css(newValue);\n\n    this.css = newValue;\n  }\n\n  beforeRemove(isElementRemoved) {\n    if (!isElementRemoved) {\n      const {\n        elem,\n        css\n      } = this;\n\n      elem.removeCSS.apply(elem, keys(css));\n    }\n  }\n};\n\nfunction addCSSProp(css, item) {\n  const [prop, value] = item;\n\n  css[prop] = value;\n}\n\nfunction constructStyleFromString(style) {\n  const split = style.split(CSS_STYLE_SEPARATOR_REGEX);\n\n  return [\n    split[0].trim(),\n    split[1].trim()\n  ];\n}\n","import {\n  isFunction, isNil,\n  collectFromArray\n} from '../utils';\nimport { Block } from '../Block';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-value'] = class DValue extends Mixin {\n  static evaluate = false;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      args,\n      parentTemplate,\n      elem\n    } = this;\n    const name = elem.name();\n    const type = elem.prop('type');\n    const value = this.evaluate();\n    let initialScopeValue = null;\n\n    this.prop = getProp(name, type, elem);\n    this.name = name;\n    this.type = type;\n    this.value = value;\n    this.options = elem.find('option');\n    this.scope = parentTemplate;\n\n    if (args) {\n      this.scope = value instanceof Block\n        ? value\n        : parentTemplate;\n      this.value = args[0];\n    }\n\n    if (!isFunction(this.value)) {\n      initialScopeValue = this.scope.$$.evaluate((scope) => scope[this.value], (newValue) => {\n        if (this.currentValue !== newValue) {\n          this.currentValue = newValue;\n          this.setProp(newValue);\n        }\n      }, this);\n    }\n\n    const initialElemValue = this.getProp(initialScopeValue, true);\n    const isInitialScopeValueNull = isNil(initialScopeValue);\n    const isCheckbox = type === 'checkbox';\n    const changeScope = () => {\n      this.currentValue = this.getProp(this.currentValue, false);\n      this.changeScope();\n    };\n\n    if (isInitialScopeValueNull || isCheckbox) {\n      this.currentValue = initialElemValue;\n      this.changeScope();\n\n      if (!isInitialScopeValueNull && isCheckbox) {\n        this.setProp(initialScopeValue);\n      }\n    } else {\n      this.currentValue = initialScopeValue;\n      this.setProp(initialScopeValue);\n    }\n\n    this.offElemListener = elem.on(getListenerName(name, type), changeScope);\n    this.offFormListener = elem.closest('form').on('reset', () => {\n      setTimeout(changeScope, 0);\n    });\n  }\n\n  changeScope() {\n    const {\n      scope,\n      value,\n      currentValue\n    } = this;\n\n    if (isFunction(value)) {\n      value(currentValue);\n    } else {\n      scope[value] = currentValue;\n    }\n  }\n\n  setProp(value) {\n    const {\n      elem,\n      name,\n      prop,\n      type,\n      node,\n      options\n    } = this;\n\n    if (prop === 'text') {\n      elem.text(value);\n    } else if (prop === 'multiple-select') {\n      options.forEach((option) => {\n        option.selected = value.indexOf(option.value) !== -1;\n      });\n    } else {\n      elem.prop(prop, getValueForSetting(name, value, type, node.value));\n    }\n  }\n\n  getProp(values, init) {\n    const {\n      elem,\n      name,\n      prop,\n      type,\n      node,\n      options\n    } = this;\n\n    return prop === 'text'\n      ? elem.text()\n      : getValueForGetting(name, elem.prop(prop), type, node.value, values, options, init, prop === 'multiple-select');\n  }\n\n  beforeRemove(isElementRemoved) {\n    if (!isElementRemoved) {\n      this.offElemListener();\n    }\n\n    this.offFormListener();\n  }\n};\n\nfunction getProp(name, type, elem) {\n  switch (name) {\n    case 'select': {\n      return elem.hasAttr('multiple')\n        ? 'multiple-select'\n        : 'value';\n    }\n\n    case 'input': {\n      if (type === 'file') {\n        return 'files';\n      }\n\n      return type === 'radio' || type === 'checkbox'\n        ? 'checked'\n        : 'value';\n    }\n\n    default: {\n      return elem.hasAttr('contentEditable')\n        ? 'text'\n        : 'value';\n    }\n  }\n}\n\nfunction getValueForSetting(name, value, type, inputValue) {\n  if (name !== 'input') {\n    return value;\n  }\n\n  const isRadio = type === 'radio';\n\n  if (!isRadio && type !== 'checkbox') {\n    return value;\n  }\n\n  return isRadio\n    ? value === inputValue\n    : value.indexOf(inputValue) !== -1;\n}\n\nfunction getValueForGetting(name, value, type, inputValue, values, options, init, isMultiple) {\n  switch (name) {\n    case 'select': {\n      if (!isMultiple) {\n        return value;\n      }\n\n      return collectFromArray(options, addValue, []);\n    }\n\n    case 'input': {\n      if (type !== 'radio' && type !== 'checkbox') {\n        return value;\n      }\n\n      if (type === 'radio') {\n        return value\n          ? inputValue\n          : null;\n      }\n\n      values = values || [];\n\n      if (!value && init) {\n        return values;\n      }\n\n      if (value) {\n        return values.indexOf(inputValue) === -1\n          ? values.concat(inputValue)\n          : values;\n      }\n\n      const index = values.indexOf(inputValue);\n\n      if (index !== -1) {\n        return [\n          ...values.slice(0, index),\n          ...values.slice(index + 1)\n        ];\n      }\n\n      return values;\n    }\n\n    default: {\n      return value;\n    }\n  }\n}\n\nfunction getListenerName(name, type) {\n  switch (name) {\n    case 'select': {\n      return 'change';\n    }\n\n    case 'input': {\n      return (\n        type === 'radio'\n        || type === 'checkbox'\n        || type === 'color'\n        || type === 'file'\n      )\n        ? 'change'\n        : 'change input';\n    }\n\n    default: {\n      return 'input';\n    }\n  }\n}\n\nfunction addValue(values, { selected, value }) {\n  if (selected && values.indexOf(value) === -1) {\n    values.push(value);\n  }\n}\n","import {\n  toObjectKeys,\n  assign, keys, create\n} from './utils';\n\nexport function insertTemplates(template, templates) {\n  const {\n    vars,\n    value\n  } = template;\n  const newTemplates = create(null);\n  const newVars = toObjectKeys(vars);\n\n  assign(newTemplates, templates);\n  iterateAndChangeChildren(value);\n\n  function iterateAndChangeChildren(nodes = []) {\n    for (let i = 0; i < nodes.length; i++) {\n      const {\n        name,\n        value,\n        children\n      } = nodes[i];\n\n      if (name === '#comment') {\n        const trimmed = value.trim();\n\n        if (newTemplates[trimmed]) {\n          const newTemplate = newTemplates[trimmed].value;\n\n          nodes.splice(i, 1, ...newTemplate);\n          assign(newVars, toObjectKeys(newTemplates[trimmed].vars));\n\n          i += newTemplate.length - 1;\n        }\n      } else {\n        iterateAndChangeChildren(children);\n      }\n    }\n  }\n\n  vars.length = 0;\n  vars.push(...keys(newVars));\n\n  return template;\n}\n","import { isArray, isString } from './utils';\nimport { createBlock, isInstanceOf } from './helpers/Block';\nimport { Block } from './Block';\nimport { Elem } from './Elem';\n\n/**\n * @function initApp\n * @public\n * @param {Template|ScopelessTemplate|String|typeof Block} block - Root template (may be scopeless),\n * string defining a name of the root block or a block subclass.\n * @param {Elem|Element} container - Container of the app.\n * @returns {void}\n * @description Method for initializing app.\n *\n * @example\n * import { initApp, doc } from 'dwayne';\n *\n * initApp(html`<App/>`, doc.create('div'));\n * initApp(htmlScopeless`<App/>`, doc.create('div'));\n * initApp('App', doc.create('div'));\n * initApp(App, doc.create('div'));\n */\nexport function initApp(block, container) {\n  const parentElem = new Elem(container).elem(0);\n\n  if (!parentElem.length) {\n    console.error('No valid element to insert the app into was given! (initApp)');\n\n    return;\n  }\n\n  if (parentElem.prop('DwayneRootBlock')) {\n    console.error('There already exists a Dwayne app inside the given element! (initApp)');\n\n    return;\n  }\n\n  if (isString(block)) {\n    block = {\n      vars: [],\n      value: [{\n        name: block\n      }]\n    };\n  }\n\n  if (isArray(block)) {\n    block = {\n      vars: [],\n      value: block\n    };\n  }\n\n  let Constructor;\n\n  if (isInstanceOf(Block, block)) {\n    Constructor = block;\n  } else {\n    Constructor = class RootBlock extends Block {\n      static template = block;\n    };\n  }\n\n  const rootBlock = createBlock({\n    node: {\n      name: '#RootBlock',\n      Constructor\n    },\n    parent: parentElem,\n    parentElem\n  });\n\n  parentElem\n    .prop('DwayneRootBlock', rootBlock)\n    .attr('dwayne-root', '');\n}\n","import { Block } from './Block';\nimport { Elem } from './Elem';\n\n/**\n * @function removeApp\n * @public\n * @param {Elem|Element} container - Container of the app.\n * @returns {void}\n * @description Method for removing app.\n *\n * @example\n * import { removeApp, find } from 'dwayne';\n *\n * removeApp(find('.root'));\n */\nexport function removeApp(container) {\n  const elem = new Elem(container).elem(0);\n\n  if (!elem.length) {\n    console.error('No valid element to remove the app from was given! (removeApp)');\n\n    return;\n  }\n\n  container = elem[0];\n\n  const { DwayneRootBlock } = container;\n\n  if (!(DwayneRootBlock instanceof Block)) {\n    console.error('No app registered inside the given element! (removeApp)');\n\n    return;\n  }\n\n  DwayneRootBlock.$$.remove();\n  elem.removeAttr('dwayne-root');\n\n  delete container.DwayneRootBlock;\n}\n","/* eslint no-nested-ternary: 0 */\n/* eslint no-negated-condition: 0 */\nexport default typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n","export const {\n  create,\n  keys,\n  getPrototypeOf: getProto\n} = Object;\n\nexport const setProto = Object.setPrototypeOf || ((target, proto) => {\n  /* eslint no-proto: 0 */\n  target.__proto__ = proto;\n});\n","import { create } from './utils/objectStatics';\n\nexport const HIDE_CLASS = '__dwayne-hidden__';\nexport const SVG_NS = 'http://www.w3.org/2000/svg';\nexport const D_REST_REGEX = /^d-rest(?:#|$)/;\n\nexport const rootBlocks = create(null);\nexport const rootMixins = create(null);\nexport const {\n  document = {},\n  Symbol = {}\n} = global;\n","import {\n  isNil, isString,\n  definePrototypeProperties,\n  collectFromArray, collectFromObject,\n  iterateArray, iterateObject,\n  toHyphenCase, setSymbolSpecies,\n  setToStringTag, setProto\n} from './utils';\nimport {\n  isDocument, isValidNode, getMatchesFunction,\n  addAttr, addCSSProp, addDataAttr,\n  addNext, addParent, addPrev,\n  toElem, isElementsCollection,\n  getAttrNS, getEvent, hide, show, remove\n} from './helpers/Elem';\nimport { SVG_NS } from './constants';\nimport { find } from './find';\n\n/**\n * @typedef {String} ElemEventString\n * @public\n * @description A string containing events separated by a comma with zero or more spaces or just spaces.\n */\n\n/**\n * @callback ElemListener\n * @public\n * @param {Event} e - Fired event.\n * @param {Element} elem - Element on which the listener was called.\n * @param {Number} index - Index of the element on which the listener was called.\n */\n\n/**\n * @callback ElemRemoveListeners\n * @public\n * @param {...ElemEventString} events - If at least one argument present only removes event listeners specified\n * by the events in the arguments.\n */\n\n/**\n * @callback IterationCallback\n * @public\n * @param {Element|Node} node - Iteration element.\n * @param {Number} index - Iteration index.\n * @param {Elem} elem - Initial set.\n */\n\n/**\n * @callback CollectCallback\n * @public\n * @param {AddCallback} add - Add element to the eventual set function.\n * @param {Element|Node} node - Iteration element.\n * @param {Number} index - Iteration index.\n * @param {Elem} elem - Initial set.\n */\n\n/**\n * @callback AddCallback\n * @public\n * @param {...(Element|Node|elem)} elem - Element to add.\n */\n\n/**\n * @callback ElemMethod\n * @public\n * @this Elem\n */\n\nconst EVENT_SEPARATOR_REGEX = /[,| ] */;\nconst CSS_STYLES_SEPARATOR_REGEX = /; ?/;\nconst CSS_IMPORTANT_REGEX = / ?!important$/;\nconst emptyCollection = [];\n\n/**\n * @class Elem\n * @extends Array.<Element|Node>\n * @public\n * @param {Element|Element[]} [elem = []] - An element or an array of elements to wrap.\n * @returns {Elem} Instance of Elem.\n * @description Wrap of an elements set.\n *\n * @example\n * new Elem(document.body);\n * new Elem(document.querySelectorAll('.cls'));\n * new Elem(document.getElementsByClassName('cls'));\n */\nclass Elem extends Array {\n  /**\n   * @method Elem.addMethods\n   * @public\n   * @param {String|Object.<String, ElemMethod>} methodName - Name of the method or object of\n   * method names and methods.\n   * @param {ElemMethod} [method] - If the first argument is a string this should be the method itself.\n   * @returns {typeof Elem}\n   */\n  static addMethods(methodName, method) {\n    if (arguments.length >= 2) {\n      methodName = { [methodName]: method };\n    }\n\n    definePrototypeProperties(this.prototype, methodName);\n\n    return this;\n  }\n\n  constructor(elem = emptyCollection) {\n    super();\n\n    if (!isElementsCollection(elem)) {\n      elem = [elem];\n    }\n\n    setProto(this, Elem.prototype);\n\n    iterateArray(elem, (elem) => {\n      if (!isElementsCollection(elem)) {\n        elem = [elem];\n      }\n\n      iterateArray(elem, (elem) => {\n        if (!this.includes(elem) && isValidNode(elem)) {\n          this.push(elem);\n        }\n      });\n    });\n  }\n\n  /**\n   * @method Elem#add\n   * @public\n   * @param {...(Elem|Element|Element[])} elements - Each argument is a Elem, or Element, or array of Elements.\n   * @returns {Elem} Returns this.\n   * @description Method for adding new elements to the set.\n   *\n   * @example\n   * elem1.find('.cls1')\n   *   .add(elem2.find('.cls2'))\n   *   .hide();\n   */\n  add(...elements) {\n    const elems = this.slice();\n\n    iterateArray(elements, (elem) => {\n      if (!isElementsCollection(elem)) {\n        elem = [elem];\n      }\n\n      iterateArray(elem, (elem) => {\n        if (!elems.includes(elem) && isValidNode(elem)) {\n          elems.push(elem);\n        }\n      });\n    });\n\n    return elems;\n  }\n\n  /**\n   * @method Elem#addClass\n   * @public\n   * @param {...String} classes - Classes to add.\n   * @returns {Elem} Returns this.\n   * @description Method for adding classes to the all the elements in the set.\n   *\n   * @example\n   * elem.addClass('red', 'round');\n   */\n  addClass(...classes) {\n    return this.forEach((elem) => {\n      const list = elem.classList;\n\n      iterateArray(classes, (cls) => list.add(cls));\n    });\n  }\n\n  /**\n   * @method Elem#attr\n   * @public\n   * @param {String|Object.<String, String>} [attr] - Name of the attribute to get or\n   * an object of the format { [attrName]: value, ... } to set attributes.\n   * @param {String} [value] - If the first argument is a string\n   * it should be a value to set for that attribute.\n   * @returns {Object|String|Elem} If no arguments passed, D-Wrap of attributes of the first element in the set\n   * returned, if 1 string argument is passed the value of the attribute of the first element in the set\n   * returned otherwise returns this.\n   * @description Method for getting/setting attributes.\n   *\n   * @example\n   * elem.attr('attr1', 'value1'); // attribute attr1 set to 'value1' and this returned\n   * elem.attr('attr1');           // 'value1'\n   * elem.attr({\n   *   attr1: 'value3',            // attribute attr1 set to 'value3'\n   *   attr2: 'value2'             // attribute attr2 set to 'value2'\n   * });                           // this returned\n   * elem.attr();                  // { attr1: 'value3', attr2: 'value2' }\n   */\n  attr(attr, value) {\n    const elem = this[0];\n\n    if (!arguments.length) {\n      if (!elem) {\n        return {};\n      }\n\n      return collectFromArray(elem.attributes, addAttr);\n    }\n\n    if (arguments.length <= 1 && isString(attr)) {\n      if (!elem) {\n        return null;\n      }\n\n      const {\n        ns,\n        name\n      } = getAttrNS(attr, elem);\n\n      return ns\n        ? elem.getAttributeNS(ns, name)\n        : elem.getAttribute(attr);\n    }\n\n    if (arguments.length >= 2) {\n      attr = { [attr]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(attr, (value, key) => {\n        if (isNil(value) || value === false) {\n          return new Elem(elem).removeAttr(key);\n        }\n\n        value = value === true ? '' : value;\n\n        const { ns } = getAttrNS(key, elem);\n\n        if (ns) {\n          elem.setAttributeNS(ns, key, value);\n        } else {\n          elem.setAttribute(key, value);\n        }\n      });\n    });\n  }\n\n  /**\n   * @method Elem#children\n   * @public\n   * @returns {Elem} D-Wrap of the children of the first element in the set.\n   * @description Method for getting element's children.\n   *\n   * @example\n   * const children = elem.children();\n   */\n  children() {\n    return new Elem(this.length ? this[0].childNodes : []);\n  }\n\n  /**\n   * @method Elem#closest\n   * @public\n   * @param {String} selector - See the link.\n   * @returns {Elem} Set of the closest elements.\n   * @description Synonym for\n   * [Element#closest]{@link https://developer.mozilla.org/en/docs/Web/API/Element/closest}.\n   */\n  closest(selector) {\n    return this.collect((add, elem) => {\n      while (elem) {\n        if (new Elem(elem).is(selector)) {\n          return add(elem);\n        }\n\n        elem = elem.parentNode;\n      }\n    });\n  }\n\n  /**\n   * @method Elem#collect\n   * @public\n   * @param {CollectCallback} callback - Called on each iteration.\n   * @returns {Elem} Returns eventual set.\n   * @description Method for collecting elements into a new set.\n   *\n   * @example\n   * const parents = elem.collect((add, elem) => {\n   *   add(elem.parentNode);\n   * });\n   */\n  collect(callback) {\n    const elements = [];\n    const cb = ::elements.push;\n\n    this.forEach((elem, index) => {\n      callback(cb, elem, index, this);\n    });\n\n    return new Elem(elements);\n  }\n\n  /**\n   * @method Elem#contains\n   * @public\n   * @param {Elem|Element} element - Element to find out if it's within the first element in the set.\n   * @returns {Boolean} Returns if the argument within this element.\n   * @description Method is extension for\n   * [Node#contains]{@link https://developer.mozilla.org/en/docs/Web/API/Node/contains}.\n   *\n   * @example\n   * elem.contains(elem2);   // true|false\n   */\n  contains(element) {\n    const parent = this[0];\n    const child = toElem(element)[0];\n\n    return !parent || !child\n      ? false\n      : parent.contains(child);\n  }\n\n  /**\n   * @method Elem#create\n   * @public\n   * @param {String} type - Type of created element. If type is \"#text\" a text node is created.\n   * If type is \"#comment\" a comment node is created.\n   * @returns {Elem} New instance of Elem - wrap of the created elements.\n   * @description Method for creating elements inside this element.\n   * If this element is not an Element the element is just created.\n   *\n   * @example\n   * elem.create('div');\n   */\n  create(type) {\n    return this.collect((add, elem) => {\n      let el = null;\n      const isText = type === '#text';\n      const document = isDocument(elem)\n        ? elem\n        : elem.ownerDocument;\n\n      if (isText || type === '#comment') {\n        el = isText\n          ? document.createTextNode('')\n          : document.createComment('');\n      } else {\n        el = type === 'svg'\n          ? document.createElementNS(SVG_NS, type)\n          : document.createElement(type);\n      }\n\n      if (!isDocument(elem)) {\n        new Elem(el).into(elem);\n      }\n\n      add(el);\n    });\n  }\n\n  /**\n   * @method Elem#css\n   * @public\n   * @param {String|Object.<String, String>} [property] - Name of the property to get or\n   * an object of the format { [property]: value, ... } to set styles.\n   * @param {String} [value] - If the first argument is a string it should be a value to set for that property.\n   * @returns {Object|String|Elem} If no arguments passed, D-Wrap of css styles of the element returned,\n   * if 1 string argument is passed the value of the property returned otherwise returns this.\n   * @description Method for getting/setting styles. Supports !important.\n   *\n   * @example\n   * elem.css('display', 'none'); // display set to 'none' and this returned\n   * elem.css('display');         // 'none'\n   * elem.css({\n   *   display: 'inline',         // display set to 'inline'\n   *   cursor: 'pointer'          // cursor set to 'pointer'\n   * });                          // this returned\n   * elem.css();                  // { display: 'none', cursor: 'pointer' }\n   */\n  css(property, value) {\n    const { style } = this[0] || {};\n\n    if (!arguments.length) {\n      if (!style) {\n        return {};\n      }\n\n      return collectFromArray(style.cssText.split(CSS_STYLES_SEPARATOR_REGEX), addCSSProp);\n    }\n\n    if (arguments.length <= 1 && isString(property)) {\n      if (!style) {\n        return '';\n      }\n\n      property = toHyphenCase(property);\n\n      return style.getPropertyValue(property) + (style.getPropertyPriority(property) ? ' !important' : '');\n    }\n\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(property, (value, property) => {\n        property = toHyphenCase(property);\n\n        if (isNil(value) || value === false) {\n          return new Elem(elem).removeCSS(property);\n        }\n\n        elem.style.removeProperty(property);\n        elem.style.setProperty(\n          property,\n          value.replace(CSS_IMPORTANT_REGEX, ''),\n          CSS_IMPORTANT_REGEX.test(value) ? 'important' : ''\n        );\n      });\n    });\n  }\n\n  /**\n   * @method Elem#data\n   * @public\n   * @param {String|Object.<String, String>} [key] - Name of the data attribute (without data- prefix)\n   * to get or an object of the format { [attrName]: value, ... } to set attributes.\n   * @param {String} [value] - If the first argument is a string it should be a value to set for that attribute.\n   * @returns {Object|String|Elem} If no arguments passed, D-Wrap of dataset of the element returned,\n   * if 1 string argument is passed the value of the data attribute returned otherwise returns this.\n   * @description Method for getting/setting data attributes. See\n   * [HTMLElement#dataset]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/dataset}.\n   *\n   * @example\n   * elem.data('someKey1', 'value'); // attribute data-some-key1 set to 'value1' and this returned\n   * elem.data('someKey1');          // 'value1'\n   * elem.data({\n   *   someKey1: 'value3',           // attribute data-some-key1 set to 'value3'\n   *   someKey2: 'value2'            // attribute data-some-key2 set to 'value2'\n   * });                             // this returned\n   * elem.data();                    // { someKey1: 'value3', someKey2: 'value2' }\n   */\n  data(key, value) {\n    const { dataset } = this[0] || {};\n\n    if (!arguments.length) {\n      if (!dataset) {\n        return {};\n      }\n\n      return collectFromObject(dataset, addDataAttr);\n    }\n\n    if (arguments.length === 1 && isString(key)) {\n      if (!dataset) {\n        return;\n      }\n\n      return dataset[key];\n    }\n\n    if (arguments.length >= 2) {\n      key = { [key]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(key, (value, key) => {\n        elem.dataset[key] = value;\n      });\n    });\n  }\n\n  /**\n   * @method Elem#dispatch\n   * @public\n   * @param {String|Event} event - Event or a string (new Event(event) is created).\n   * @param {Object} [details = {}] - Object that is assigned to the event.\n   * @returns {Elem} Returns this.\n   * @see https://developer.mozilla.org/en/docs/Web/API/Event/Event\n   * @description Synonym for\n   * [EventTarget#dispatchEvent]{@link https://developer.mozilla.org/en/docs/Web/API/EventTarget/dispatchEvent}.\n   *\n   * @example\n   * elem.dispatch('click');\n   * elem.dispatch('click', { bubbles: false, cancellable: false, data: 1 });\n   * elem.dispatch(new CustomEvent('custom-event'));\n   */\n  dispatch(event, details = {}) {\n    const {\n      bubbles = true,\n      cancelable = true,\n      ...realDetails\n    } = details;\n\n    return this.forEach((elem) => {\n      elem.dispatchEvent(getEvent(\n        event,\n        bubbles,\n        cancelable,\n        realDetails,\n        elem\n      ));\n    });\n  }\n\n  /**\n   * @method Elem#elem\n   * @public\n   * @param {Number} [index = 0] - Index of the element of the set to get. Negative index means elem.length + index.\n   * @returns {Elem} New instance of Elem.\n   *\n   * @example\n   * elem.elem(1); // a wrap of the element in the set that has index 1\n   * elem.elem();  // a wrap of the element in the set that has index 0\n   */\n  elem(index = 0) {\n    if (index < 0) {\n      index = this.length + index;\n    }\n\n    return new Elem(this[index]);\n  }\n\n  /**\n   * @method Elem#filter\n   * @public\n   * @param {IterationCallback|String} filter - Filter function or a selector.\n   * @returns {Elem} New instance of Elem.\n   * @description Method for filtering elements.\n   *\n   * @example\n   * elem.filter((elem) => new Elem(elem).closest('.parent'));\n   */\n  filter(filter) {\n    if (isString(filter)) {\n      const selector = filter;\n\n      filter = (elem) => (\n        new Elem(elem).is(selector)\n      );\n    }\n\n    return this.collect((add, elem, index) => {\n      if (filter(elem, index, this)) {\n        add(elem);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#find\n   * @public\n   * @param {String} selector - Selector to find.\n   * @returns {Elem} New instance of Elem.\n   * @description Synonym for\n   * [Element#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Element/querySelectorAll}.\n   */\n  find(selector) {\n    return this.collect((add, elem) => {\n      add(find(selector, elem));\n    });\n  }\n\n  /**\n   * @method Elem#forEach\n   * @public\n   * @param {IterationCallback} callback - Called on each iteration.\n   * @returns {Elem} Returns this.\n   * @description Method for iterating over the set.\n   *\n   * @example\n   * find('.cls').forEach((element, index, set) => {\n   *   // do something\n   * });\n   */\n  forEach(callback) {\n    iterateArray(this, (value, key) => {\n      callback(value, key, this);\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Elem#hasAttr\n   * @public\n   * @param {String} attr - Name of the attribute.\n   * @returns {Boolean} If the first element in the set has the attribute.\n   * @description Method that returns if the first element in the set has the attribute or not.\n   *\n   * @example\n   * elem.attr('attr', 'value').hasAttr('attr'); // true\n   * elem.removeAttr('attr').hasAttr('attr');    // false\n   */\n  hasAttr(attr) {\n    const elem = this[0];\n\n    if (!elem) {\n      return false;\n    }\n\n    const { ns } = getAttrNS(attr, elem);\n\n    return ns\n      ? elem.hasAttributeNS(ns, attr)\n      : elem.hasAttribute(attr);\n  }\n\n  /**\n   * @method Elem#hasClass\n   * @public\n   * @param {String} cls - Name of the class.\n   * @returns {Boolean} If the first element in the set has the class.\n   * @description Method that returns if the first element in the set has the class or not.\n   *\n   * @example\n   * elem.addClass('cls').hasClass('cls');    // true\n   * elem.removeClass('cls').hasClass('cls'); // false\n   */\n  hasClass(cls) {\n    const elem = this[0];\n\n    return elem\n      ? elem.classList.contains(cls)\n      : false;\n  }\n\n  /**\n   * @method Elem#hide\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Hides all elements in the set.\n   *\n   * @example\n   * elem.hide();\n   */\n  hide() {\n    return this.forEach(hide);\n  }\n\n  /**\n   * @method Elem#html\n   * @public\n   * @param {String|*} [html] - HTML to write instead of current HTML.\n   * @returns {Elem|String} If no arguments passed HTML of the first element in the set returned.\n   * Otherwise all elements HTML in the set are set to the html argument.\n   * @description Gets or sets HTML.\n   *\n   * @example\n   * elem.html('<div>1</div>');\n   * elem.html(); // '<div>1</div>'\n   */\n  html(html) {\n    if (!arguments.length) {\n      const elem = this[0];\n\n      return elem\n        ? elem.innerHTML\n        : '';\n    }\n\n    return this.forEach((elem) => {\n      elem.innerHTML = html;\n    });\n  }\n\n  /**\n   * @method Elem#includes\n   * @public\n   * @param {Element|node} elem - Element to search.\n   * @return {Boolean} If the element is in the set.\n   * @description The same as Array#includes.\n   */\n  includes(elem) {\n    return this.indexOf(elem) !== -1;\n  }\n\n  /**\n   * @method Elem#insertAfter\n   * @public\n   * @param {Elem|Element} element - Element to insert this element after.\n   * @returns {Elem} Returns this.\n   * @description Puts the elements from the set after the element specified by the argument.\n   * The elements remain in the same order.\n   *\n   * @example\n   * elem.insertAfter(elem2);\n   * elem.insertAfter(document.getElementById('id'));\n   * elem.insertAfter('#id div.c1');\n   */\n  insertAfter(element) {\n    element = toElem(element).elem(0);\n\n    let parent = element.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    element = element.next()[0];\n    parent = parent[0];\n\n    return this.forEach((elem) => {\n      if (elem === element) {\n        element = element.nextSibling;\n\n        return;\n      }\n\n      if (element) {\n        parent.insertBefore(elem, element);\n      } else {\n        parent.appendChild(elem);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#insertBefore\n   * @public\n   * @param {Elem|Element} element - Element to insert this element before.\n   * @returns {Elem} Returns this.\n   * @description Puts the elements from the set before the element specified by the argument.\n   * The elements remain in the same order.\n   *\n   * @example\n   * elem.insertBefore(elem2);\n   * elem.insertBefore(document.getElementById('id'));\n   * elem.insertBefore('#id div.c1');\n   */\n  insertBefore(element) {\n    element = toElem(element).elem(0);\n\n    let parent = element.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    element = element[0];\n    parent = parent[0];\n\n    return this.forEach((elem) => {\n      parent.insertBefore(elem, element);\n    });\n  }\n\n  /**\n   * @method Elem#into\n   * @public\n   * @param {Elem|Element} element - Element to put this elements into.\n   * @param {Boolean} end - If the elements should be inserted to the end. If false they are inserted to the start.\n   * @returns {Elem} Returns this.\n   * @description Method is similar to\n   * [Node#appendChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/appendChild}.\n   *\n   * @example\n   * elem.into(elem2);\n   * elem.into(document.getElementById('id'));\n   * elem.into('#id div.c1');\n   */\n  into(element, end = true) {\n    element = toElem(element)[0];\n\n    if (!element) {\n      return this;\n    }\n\n    if (!end && element.firstChild) {\n      for (let i = this.length - 1; i >= 0; i--) {\n        element.insertBefore(this[i], element.firstChild);\n      }\n\n      return this;\n    }\n\n    return this.forEach((elem) => {\n      element.appendChild(elem);\n    });\n  }\n\n  /**\n   * @method Elem#is\n   * @public\n   * @param {String} selector\n   * @returns {Boolean} If the first element in the set matches the selector.\n   * @description Synonym for\n   * [Element#matches]{@link https://developer.mozilla.org/en/docs/Web/API/Element/matches}.\n   *\n   * @example\n   * elem.addClass('cls');\n   * elem.is('.cls');         // true\n   *\n   * elem.removeClass('cls');\n   * elem.is('.cls');         // false\n   */\n  is(selector) {\n    if (!this.length) {\n      return false;\n    }\n\n    const elem = this[0];\n    const matches = getMatchesFunction(elem);\n\n    return elem::matches(selector);\n  }\n\n  /**\n   * @method Elem#name\n   * @public\n   * @returns {String|void} nodeName (lowercased) of the first element in the set.\n   * @description Method for getting name of the first element in the set.\n   *\n   * @example\n   * elem.create('div').name() // 'div'\n   */\n  name() {\n    const elem = this[0];\n\n    return elem\n      ? elem.nodeName.toLowerCase()\n      : undefined;\n  }\n\n  /**\n   * @method Elem#next\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Method for finding next element to each element in the set.\n   *\n   * @example\n   * elem.next(); // finds next element to each element in the set\n   */\n  next() {\n    return this.collect(addNext);\n  }\n\n  /**\n   * @method Elem#on\n   * @public\n   * @param {ElemEventString|Object.<ElemEventString|ElemListener>} event - Either a {@link ElemEventString} string\n   * or an object with event keys (a key is also ElemEventString) and listeners values.\n   * @param {ElemListener} [listener] - If the first argument is a string it must be a listener function for\n   * specified event(s).\n   * @returns {ElemRemoveListeners} Function that takes optional event argument.\n   * @description Adds event listeners for all the elements in the set.\n   *\n   * @example\n   * elem.on(\n   *   'change, input',\n   *   (e, elem, index) => console.log(elem.value)\n   * );\n   * elem.on(\n   *   'change, input',\n   *   (e, elem, index) => console.log(elem.value)\n   * );\n   * elem.on({\n   *   'change, input': (e, elem, index) => console.log(elem.value),\n   *   'blur': () => console.log('blur')\n   * });\n   *\n   * const removeListeners = elem.on({\n   *   'change, input': (e, elem, index) => console.log(elem.value),\n   *   'blur': () => console.log('blur')\n   * });\n   *\n   * removeListeners('click');\n   * removeListeners('blur, change');\n   * removeListeners('blur, change', 'input');\n   * removeListeners();\n   */\n  on(event, listener) {\n    if (isString(event)) {\n      event = { [event]: listener };\n    }\n\n    const newEvents = {};\n    const allListeners = {};\n\n    iterateObject(event, (listener, event) => {\n      iterateArray(event.split(EVENT_SEPARATOR_REGEX), (event) => {\n        (newEvents[event] = newEvents[event] || []).push(listener);\n      });\n    });\n\n    this.forEach((elem) => {\n      iterateObject(newEvents, (listeners, event) => {\n        iterateArray(listeners, (listener) => {\n          elem.addEventListener(event, listener, false);\n          (allListeners[event] = allListeners[event] || []).push(() => {\n            elem.removeEventListener(event, listener);\n          });\n        });\n      });\n    });\n\n    return function removeEventListeners(event) {\n      if (arguments.length) {\n        iterateArray(arguments, (event) => {\n          iterateArray(event.split(EVENT_SEPARATOR_REGEX), (event) => {\n            const removeListeners = allListeners[event];\n\n            if (removeListeners) {\n              iterateArray(removeListeners, (removeListener) => removeListener());\n\n              delete allListeners[event];\n            }\n          });\n        });\n      } else {\n        iterateObject(allListeners, (removeListeners, event) => {\n          iterateArray(removeListeners, (removeListener) => removeListener());\n\n          delete allListeners[event];\n        });\n      }\n    };\n  }\n\n  /**\n   * @method Elem#parent\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Method returns wrap of the set of the parent elements of each element in the set.\n   */\n  parent() {\n    return this.collect(addParent);\n  }\n\n  /**\n   * @method Elem#prev\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Method for finding previous element to each element in the set.\n   *\n   * @example\n   * elem.prev(); // finds previous element to each element in the set\n   */\n  prev() {\n    return this.collect(addPrev);\n  }\n\n  /**\n   * @method Elem#prop\n   * @public\n   * @param {String|Object.<String, *>} property - Either a string of a property or an assigned object.\n   * @param {*} [value] - If a property parameter is a string\n   * this has to be an assigned value if it's present.\n   * @returns {Elem|*} Returns this if it's setter or a value if getter.\n   * @description Method that is either a property getter for the first element in the set\n   * or a setter for every element in the set.\n   *\n   * @example\n   * elem.prop('draggable', false);\n   * elem.prop('draggable'); // false\n   */\n  prop(property, value) {\n    if (arguments.length <= 1 && isString(property)) {\n      return this[0] ? this[0][property] : undefined;\n    }\n\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(property, (value, prop) => {\n        elem[prop] = value;\n      });\n    });\n  }\n\n  /**\n   * @method Elem#remove\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Removes all the elements from the set from the document.\n   * Note: it doesn't remove them from the set so watch out for the memory leaks.\n   *\n   * @example\n   * elem.remove();\n   */\n  remove() {\n    return this.forEach(remove);\n  }\n\n  /**\n   * @method Elem#removeAttr\n   * @public\n   * @param {...String} attributes - Attributes to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the attributes from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeAttr('foo', 'bar', 'baz');\n   */\n  removeAttr(...attributes) {\n    return this.forEach((elem) => {\n      iterateArray(attributes, (attr) => {\n        const { ns } = getAttrNS(attr, elem);\n\n        if (ns) {\n          elem.removeAttributeNS(ns, attr);\n        } else {\n          elem.removeAttribute(attr);\n        }\n      });\n    });\n  }\n\n  /**\n   * @method Elem#removeClass\n   * @public\n   * @param {...String} classes - Classes to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the classes from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeClass('foo', 'bar', 'baz');\n   */\n  removeClass(...classes) {\n    return this.forEach((elem) => {\n      const list = elem.classList;\n\n      iterateArray(classes, (cls) => list.remove(cls));\n    });\n  }\n\n  /**\n   * @method Elem#removeCSS\n   * @public\n   * @param {...String} props - CSS properties to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the CSS properties from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeCSS('display', 'position', 'margin');\n   */\n  removeCSS(...props) {\n    return this.forEach((elem) => {\n      iterateArray(props, (css) => {\n        elem.style.removeProperty(toHyphenCase(css));\n      });\n    });\n  }\n\n  /**\n   * @method Elem#replace\n   * @public\n   * @param {Elem|Element} element - Element to replace the first element in the set\n   * with a set of elements specified by the argument (Element or Elem).\n   * @returns {Elem} Returns this.\n   * @description Method is similar to\n   * [Node#replaceChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/replaceChild}.\n   *\n   * @example\n   * elem.replace(elem2);\n   * elem.replace(document.getElementById('id'));\n   * elem.replace('#id div.c1');\n   */\n  replace(element) {\n    element = toElem(element);\n\n    const first = this.elem(0);\n    const parent = first.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    let elem = parent;\n    let method = 'into';\n    const next = first.next()[0];\n    const prev = first.prev()[0];\n\n    if (next) {\n      elem = next;\n      method = 'insertBefore';\n    } else if (prev) {\n      elem = prev;\n      method = 'insertAfter';\n    }\n\n    first.remove();\n\n    element[method](elem);\n  }\n\n  /**\n   * @method Elem#show\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Shows all elements in the set.\n   * If an element was hidden using {@link Elem#hide} previous display is set.\n   *\n   * @example\n   * elem.show();\n   */\n  show() {\n    return this.forEach(show);\n  }\n\n  /**\n   * @method Elem#slice\n   * @public\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\n   * @returns {Elem}\n   * @description The same as Array#slice but for Elem.\n   */\n  slice() {\n    return new Elem(super.slice.apply(this, arguments));\n  }\n\n  /**\n   * @method Elem#text\n   * @public\n   * @param {String|*} [text] - Text to write instead of current text.\n   * @returns {Elem|String} If no arguments passed text of the first element in the set returned.\n   * Otherwise all elements texts in the set are set to the text argument.\n   * @description Gets or sets text.\n   *\n   * @example\n   * elem.text('123');\n   * elem.text(); // '123'\n   */\n  text(text) {\n    if (!arguments.length) {\n      return this.prop('textContent');\n    }\n\n    return this.forEach((elem) => {\n      elem.textContent = text;\n    });\n  }\n\n  /**\n   * @method Elem#toggleAttr\n   * @public\n   * @param {String} attr - Attribute to toggle.\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the attribute\n   * with the '' value and if falsey method removes the attribute. If not present method adds\n   * the attribute if it doesn't exist and removes if it does.\n   * @returns {Elem} Returns this.\n   * @description Method for toggling attributes.\n   *\n   * @example\n   * elem.toggleAttr('attr');\n   * elem.toggleAttr('attr', someCondition);\n   */\n  toggleAttr(attr, condition) {\n    return this.forEach((elem) => {\n      elem = new Elem(elem);\n\n      if (arguments.length < 2 ? !elem.hasAttr(attr) : condition) {\n        elem.attr(attr, '');\n      } else {\n        elem.removeAttr(attr);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#toggleClass\n   * @public\n   * @param {String} cls - Class to toggle.\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the class\n   * and if falsey method removes the class. If not present method adds\n   * the class if it doesn't exist and removes if it does.\n   * @returns {Elem} Returns this.\n   * @description Method for toggling classes.\n   *\n   * @example\n   * elem.toggleClass('cls');\n   * elem.toggleClass('cls', someCondition);\n   */\n  toggleClass(cls, condition) {\n    return this.forEach((elem) => {\n      const { classList } = elem;\n\n      classList.toggle(cls, arguments.length < 2 ? !classList.contains(cls) : condition);\n    });\n  }\n}\n\nsetToStringTag(Elem, 'Elem');\nsetSymbolSpecies(Elem, Array);\n\nexport { Elem };\n","import { defineProperties } from './defineProperty';\nimport { Symbol } from '../constants';\n\nexport function setSymbolSpecies(klass, species) {\n  if (Symbol.species) {\n    defineProperties(klass, {\n      [Symbol.species]: {\n        get() {\n          return species;\n        }\n      }\n    });\n  }\n}\n","import {\n  defineFrozenProperties, getProto,\n  removeArrayElem, setToStringTag\n} from './utils';\nimport { wrapMixin, removeWatchers } from './helpers/Block';\n\nconst toStringTag = '[object Mixin]';\n\n/**\n * @class Mixin\n * @public\n * @param {Object} opts - Mixin options.\n * @returns {Mixin} Instance of Mixin.\n */\nclass Mixin {\n  /**\n   * @member {Boolean} [Mixin.evaluate = true]\n   * @type {Boolean}\n   * @public\n   * @description If the mixin value should be evaluated and watched or not.\n   */\n  static evaluate = true;\n\n  /**\n   * @method Mixin.wrap\n   * @public\n   * @param {...Wrapper} wrappers - Functions that return wrapped mixin.\n   * @returns {typeof Mixin} New mixin.\n   * @description Method for wrapping mixins.\n   * It is considered best practice to just extends the old mixin with a new one.\n   */\n  static wrap(...wrappers) {\n    return wrappers.reduce(wrapMixin, this);\n  }\n\n  constructor(opts) {\n    const {\n      name,\n      value,\n      dynamic,\n      elem,\n      args,\n      comment,\n      parentBlock,\n      parentScope,\n      parentTemplate\n    } = opts;\n    const watchersToRemove = [];\n    const watchers = [];\n    const { constructor } = getProto(this);\n    const afterUpdate = (newValue, oldValue) => {\n      this.$$.value = newValue;\n\n      try {\n        this.afterUpdate(newValue, oldValue);\n      } catch (err) {\n        console.error(`Uncaught error in ${ name }#afterUpdate:`, err);\n      }\n    };\n\n    defineFrozenProperties(this, {\n      /**\n       * @member {Object} Mixin#$$\n       * @type {Object}\n       * @protected\n       * @property {Function} Mixin#$$.evaluate - Evaluate function.\n       * @property {Boolean} Mixin#$$.isDynamic - If the mixin is dynamic.\n       * @property {Boolean} Mixin#$$.isRemoved - If the block is removed.\n       * @property {String} Mixin#$$.name - Mixin name.\n       * @property {Block|void} Mixin#$$.parentBlock - Parent block.\n       * @property {Block|void} Mixin#$$.parentScope - Parent scope.\n       * @property {Block|void} Mixin#$$.parentTemplate - Parent template.\n       * @property {Watcher[]} Block#$$.watchers - Temporary vars watchers.\n       * @property {Object[]} Block#$$.watchersToRemove - Watchers to remove before removing mixin.\n       */\n      $$: {\n        name,\n        _value: value,\n        value,\n        isDynamic: dynamic,\n        parentScope,\n        parentBlock,\n        parentTemplate,\n        watchers,\n        watchersToRemove,\n        isRemoved: false,\n        evaluate: (watcher) => {\n          const {\n            isDynamic,\n            value,\n            _value\n          } = this.$$;\n          const currentValue = isDynamic\n            ? value\n            : parentScope.$$.evaluate(_value);\n\n          if (watcher) {\n            watchers.push(watcher);\n          }\n\n          return currentValue;\n        },\n        remove: (isParentSignal) => {\n          isParentSignal = !!isParentSignal;\n          this.$$.isRemoved = true;\n\n          removeWatchers(watchersToRemove);\n\n          try {\n            this.beforeRemove(isParentSignal);\n          } catch (err) {\n            console.error(`Uncaught error in ${ name }#beforeRemove:`, err);\n          }\n\n          if (!isParentSignal) {\n            removeArrayElem(parentBlock.$$.mixins, this);\n          }\n        },\n        setAfterUpdate: () => {\n          if (constructor.evaluate) {\n            afterUpdate(this.$$.evaluate(afterUpdate));\n          }\n        }\n      }\n    });\n\n    /**\n     * @member {String[]} [Mixin#args]\n     * @type {String[]}\n     * @public\n     */\n    this.args = args;\n\n    /**\n     * @member {String} [Mixin#comment]\n     * @type {String}\n     * @public\n     */\n    this.comment = comment;\n\n    /**\n     * @member {Block} [Mixin#parentScope]\n     * @type {Block}\n     * @public\n     */\n    this.parentScope = parentScope;\n\n    /**\n     * @member {Block} [Mixin#parentTemplate]\n     * @type {Block}\n     * @public\n     */\n    this.parentTemplate = parentTemplate;\n\n    /**\n     * @member {Elem} Mixin#elem\n     * @type {Elem}\n     * @public\n     */\n    this.elem = elem;\n\n    /**\n     * @member {Element} Mixin#node\n     * @type {Element}\n     * @public\n     */\n    this.node = elem[0];\n\n    parentBlock.$$.mixins.push(this);\n  }\n\n  afterUpdate() {}\n\n  /**\n   * @method Mixin#beforeRemove\n   * @public\n   * @param {Boolean} isElementRemoved - If element removed as well.\n   * @description Is called before the mixin removal.\n   */\n  beforeRemove(isElementRemoved) {}\n\n  /**\n   * @method Block#evaluate\n   * @public\n   * @param {Watcher} [callback] - If present, callback which is called when the mixin value is changed.\n   * @returns {*} Evaluation result.\n   * @description Method for evaluating the mixin value and watching for the changes.\n   */\n  evaluate(callback) {\n    return this.$$.evaluate(callback);\n  }\n\n  toString() {\n    return toStringTag;\n  }\n}\n\nsetToStringTag(Mixin, 'Mixin');\n\nexport { Mixin };\n","import { Elem } from './Elem';\nimport {\n  defineFrozenProperties,\n  assign, iterateArray, iterateObject,\n  isFunction, isArray,\n  setToStringTag, hasOwnProperty,\n  removeArrayElem, create,\n  getProto, setProto\n} from './utils';\nimport {\n  constructMixinRegex, isInstanceOf, normalizeArgs,\n  removeWatchers, removeWithParentSignal, cleanProperty,\n  transformRestArgs, calculateArgs, wrapBlock\n} from './helpers/Block';\nimport {\n  D_REST_REGEX,\n  rootBlocks, rootMixins\n} from './constants';\nimport { Mixin } from './Mixin';\n\n/**\n * @typedef {Object} Template\n * @public\n * @property {String[]} vars - Template used vars.\n * @property {Object[]} value - Template itself.\n */\n\n/**\n * @typedef {Object[]} ScopelessTemplate\n * @public\n */\n\n/**\n * @typedef {Error} EvaluationError\n * @public\n * @property {Function} func - Function which caused eval error.\n * @property {String} original - Evaluated expression original js.\n * @property {Block} block - Block in context of which the expression has been evaluated with the error.\n */\n\n/**\n * @callback Watcher\n * @public\n * @param {*} newValue - New value.\n * @param {*} oldValue - Old value.\n */\n\n/**\n * @callback Wrapper\n * @public\n * @param {typeof Block|typeof Mixin} Block class to wrap.\n * @returns {typeof Block} New Block class.\n */\n\n/**\n * @callback AfterUpdate\n * @public\n * @param {*} newValue - New value.\n * @param {*} oldValue - Old value.\n * @param {Mixin} mixin - Mixin instance.\n */\n\n/**\n * @callback BlockRegisterHook\n * @public\n * @param {typeof Block} Block - Registering block.\n * @param {String} name - Block name.\n * @returns Return value is used for registering the block.\n * If Block subclass returned it's registered instead of the initial block, otherwise\n * the initial block is used.\n */\n\n/**\n * @callback MixinRegisterHook\n * @public\n * @param {typeof Mixin} Mixin - Registering mixin.\n * @param {String} name - Mixin name.\n * @returns Return value is used for registering the mixin.\n * If Mixin subclass returned it's registered instead of the initial mixin, otherwise\n * the initial mixin is used.\n */\n\n/**\n * @callback RemoveHook\n * @public\n */\n\nconst blockHooks = [];\nconst mixinHooks = [];\nconst TAG_NAME_REGEX = /^[a-z][a-z\\d\\-_.:!@#$%^&*()[\\]{}='\"\\\\]*$/i;\nconst ATTR_NAME_REGEX = /^[^\\u0000-\\u0020\\s'\">/=]+$/;\nconst toStringTag = '[object Block]';\nconst afterElem = new Elem();\nconst emptyObject = {};\nlet evalMode = false;\nlet gettingVars = [];\n\n/**\n * @class Block\n * @extends null\n * @public\n * @param {Object} opts - Block options.\n * @returns {Block} Instance of Block.\n *\n * @example\n * import { Block, initApp } from 'dwayne';\n *\n * class App extends Block {\n *   static template = '<Hello text=\"{text}\"/> ({ this.times })';\n *\n *   constructor(opts) {\n *     super(opts);\n *\n *     this.text = 'world';\n *     this.times = 0;\n *\n *     this.setInterval();\n *   }\n *\n *   setInterval() {\n *     this.interval = setInterval(() => {\n *       this.times++;\n *     });\n *   }\n *\n *   beforeRemove() {\n *     clearInterval(this.interval);\n *   }\n * }\n *\n * Block.block('App', App);\n * Block.block('Hello', html`Hello, {args.text}!`);\n *\n * initApp('App', document.getElementById('root'));\n */\nclass Block {\n  /**\n   * @member {Object.<String, typeof Block>} Block._blocks\n   * @type {Object.<String, typeof Block>}\n   * @protected\n   * @description Block namespace blocks.\n   */\n  static _blocks = create(rootBlocks);\n\n  /**\n   * @member {Object.<String, typeof Mixin>} Block._mixins\n   * @type {Object.<String, typeof Mixin>}\n   * @protected\n   * @description Block namespace mixins.\n   */\n  static _mixins = create(rootMixins);\n\n  /**\n   * @member {Object} [Block.defaultArgs = null]\n   * @type {Object}\n   * @public\n   * @description Block default args.\n   */\n  static defaultArgs = null;\n\n  /**\n   * @member {Object} [Block.defaultLocals = null]\n   * @type {Object}\n   * @public\n   * @description Block default locals.\n   */\n  static defaultLocals = null;\n\n  /**\n   * @member {Object} [Block.template = { vars: [], value: [] }]\n   * @type {Object}\n   * @public\n   * @description Block template.\n   */\n  static template = {\n    vars: [],\n    value: []\n  };\n\n  /**\n   * @method Block.onEvalError\n   * @public\n   * @param {EvaluationError} err - The method is called when an evaluation error occurs.\n   */\n  static onEvalError(err) {\n    console.error(`Eval error (evaluating \"${ err.original || err.func }\" in context of ${ err.block.$$.name }):`, err);\n  }\n\n  /**\n   * @method Block.beforeRegisterBlock\n   * @public\n   * @param {BlockRegisterHook} hook - Block register hook.\n   * @returns {RemoveHook}\n   */\n  static beforeRegisterBlock(hook) {\n    blockHooks.push(hook);\n\n    return () => {\n      removeArrayElem(blockHooks, hook);\n    };\n  }\n\n  /**\n   * @method Block.beforeRegisterMixin\n   * @public\n   * @param {MixinRegisterHook} hook - Mixin register hook.\n   * @returns {RemoveHook}\n   */\n  static beforeRegisterMixin(hook) {\n    mixinHooks.push(hook);\n\n    return () => {\n      removeArrayElem(mixinHooks, hook);\n    };\n  }\n\n  /**\n   * @method Block.block\n   * @public\n   * @param {String} name - Block or mixin name.\n   * @param {Template|ScopelessTemplate|typeof Block} Subclass - Subclass of Block or template string of it.\n   * @returns {typeof Block|undefined} Returns registered Block or undefined if the block hasn't been registered.\n   * @description Register block in the namespace of this.\n   */\n  static block(name, Subclass) {\n    if (isFunction(Subclass) && !isInstanceOf(Block, Subclass)) {\n      const constructor = Subclass;\n\n      Subclass = class extends Block {\n        static template = constructor.template;\n\n        constructor(opts) {\n          super(opts);\n          this::constructor(opts);\n        }\n      };\n    }\n\n    if (!isFunction(Subclass) && isArray(Subclass)) {\n      Subclass = class extends Block {\n        static template = {\n          vars: [],\n          value: Subclass\n        };\n      };\n    }\n\n    if (!isFunction(Subclass) && Subclass.vars && Subclass.value) {\n      Subclass = class extends Block {\n        static template = Subclass;\n      };\n    }\n\n    if (!isInstanceOf(Block, Subclass)) {\n      console.warn(`Block must be a template (array or an object from an html loader), a function or a class that extends Block class (name: \"${ name }\") (Block.block)`);\n\n      return;\n    }\n\n    if (rootBlocks[name]) {\n      console.warn(`The \"${ name }\" block is a built-in block so the block will not be registered (Block.block)`);\n\n      return;\n    }\n\n    if (!TAG_NAME_REGEX.test(name)) {\n      console.warn(`Name \"${ name }\" is not allowed for blocks so the block will not be registered (Block.block)`);\n\n      return;\n    }\n\n    if (!hasOwnProperty(this, '_blocks')) {\n      this._blocks = create(getProto(this)._blocks);\n    }\n\n    if (!hasOwnProperty(this, 'defaultLocals')) {\n      this.defaultLocals = {};\n    }\n\n    if (!hasOwnProperty(this, 'defaultArgs')) {\n      this.defaultArgs = create(null);\n    }\n\n    try {\n      Subclass = blockHooks.reduce((returnValue, hook) => {\n        const currentReturnValue = hook(returnValue, name, this);\n\n        return isInstanceOf(Block, currentReturnValue)\n          ? currentReturnValue\n          : returnValue;\n      }, Subclass);\n    } catch (err) {\n      console.error('Uncaught error in \"beforeRegisterBlock\" hook:', err);\n    }\n\n    if (isArray(Subclass.template)) {\n      Subclass.template = {\n        vars: [],\n        value: Subclass.template\n      };\n    }\n\n    Subclass._blocks = hasOwnProperty(Subclass, '_blocks')\n      ? Subclass._blocks\n      : create(this._blocks);\n    Subclass._mixins = hasOwnProperty(Subclass, '_mixins')\n      ? Subclass._mixins\n      : create(this._mixins);\n\n    if (hasOwnProperty(Subclass, 'defaultArgs')) {\n      setProto(Subclass.defaultArgs, null);\n    }\n\n    this._blocks[name] = Subclass;\n\n    return Subclass;\n  }\n\n  /**\n   * @method Block.get\n   * @public\n   * @param {String} name - Block name.\n   * @returns {typeof Block|undefined} Returns registered Block with specified name.\n   */\n  static get(name) {\n    return this._blocks[name];\n  }\n\n  /**\n   * @method Block.getMixin\n   * @public\n   * @param {String} name - Mixin name.\n   * @returns {typeof Mixin|undefined} Returns registered Mixin with specified name.\n   */\n  static getMixin(name) {\n    return this._mixins[name];\n  }\n\n  /**\n   * @method Block.mixin\n   * @public\n   * @param {String} name - Block or mixin name.\n   * @param {typeof Mixin|AfterUpdate} Subclass - Subclass of Mixin or AfterUpdate callback.\n   * @returns {typeof Mixin|undefined} Returns registered Block or undefined if the block hasn't been registered.\n   * @description Register mixin in the namespace of this.\n   */\n  static mixin(name, Subclass) {\n    if (isFunction(Subclass) && !isInstanceOf(Mixin, Subclass)) {\n      const afterUpdate = Subclass;\n\n      Subclass = class extends Mixin {\n        afterUpdate(newValue, oldValue) {\n          this::afterUpdate(newValue, oldValue, this);\n        }\n      };\n    }\n\n    if (!isInstanceOf(Mixin, Subclass)) {\n      console.warn(`The \"${ name }\" class does not extend Mixin or is not an afterUpdate function, so it will not be registered (Block.mixin)`);\n\n      return;\n    }\n\n    if (rootMixins[name] || name === 'd-rest') {\n      console.warn(`The \"${ name }\" mixin is a built-in mixin so the mixin will not be registered (Block.mixin)`);\n\n      return;\n    }\n\n    if (!ATTR_NAME_REGEX.test(name)) {\n      console.warn(`Name \"${ name }\" is not allowed for mixins so the mixin will not be registered (Block.mixin)`);\n\n      return;\n    }\n\n    if (!hasOwnProperty(this, '_mixins')) {\n      this._mixins = create(getProto(this)._mixins);\n    }\n\n    try {\n      Subclass = mixinHooks.reduce((returnValue, hook) => {\n        const currentReturnValue = hook(returnValue, name, this);\n\n        return isInstanceOf(Mixin, currentReturnValue)\n          ? currentReturnValue\n          : returnValue;\n      }, Subclass);\n    } catch (err) {\n      console.error('Uncaught error in \"beforeRegisterMixin\" hook:', err);\n    }\n\n    Subclass._match = constructMixinRegex(name);\n\n    this._mixins[name] = Subclass;\n\n    return Subclass;\n  }\n\n  /**\n   * @method Block.wrap\n   * @public\n   * @param {...Wrapper} wrappers - Functions that return wrapped block.\n   * @returns {typeof Block} New block.\n   * @description Method for wrapping blocks into another blocks.\n   * It is considered best practice to just extends the old block with a new one.\n   *\n   * @example\n   * class MyBlock extends Block {\n   *   static template = '<div>123</div>';\n   * }\n   *\n   * MyBlock.wrap((Block) => {\n   *   return class extends Block {\n   *     static template = `<section class=\"wrapper\">${ Block.template }</section>`;\n   *\n   *     constructor(opts) {\n   *       super(opts);\n   *\n   *       this.additionalVar = 'additional';\n   *     }\n   *   };\n   * });\n   */\n  static wrap(...wrappers) {\n    return wrappers.reduce(wrapBlock, this);\n  }\n\n  constructor(opts) {\n    const {\n      name,\n      args: originalArgs,\n      dBlockName,\n      dBlockArgs,\n      children,\n      parent,\n      parentElem,\n      parentBlock,\n      parentScope,\n      parentTemplate,\n      prevBlock\n    } = opts;\n    const watchersToRemove = [];\n    const { constructor } = getProto(this);\n    const childrenBlocks = [];\n    const mixins = [];\n    const isParentBlock = parent instanceof Block;\n\n    defineFrozenProperties(this, {\n      /**\n       * @member {Object} Block#$$\n       * @type {Object}\n       * @protected\n       * @property {Object} Block#$$.args - Private args scope.\n       * @property {Block[]} Block#$$.children - Child blocks.\n       * @property {Elem} Block#$$.content - Content elements.\n       * @property {Object|void} Block#$$.dBlockArgs - d-block args.\n       * @property {String|void} Block#$$.dBlockName - d-block name.\n       * @property {Block[]} Block#$$.dBlocks - d-block's within the block.\n       * @property {Function} Block#$$.evaluate - Evaluate function.\n       * @property {Object} Block#$$.globals - Private globals scope.\n       * @property {Object[]} Block#$$.htmlChildren - Block html children.\n       * @property {Boolean} Block#$$.isRemoved - If the block is removed.\n       * @property {Boolean} Block#$$.isRendered - If the block is rendered.\n       * @property {Object} Block#$$.locals - Private locals scope.\n       * @property {Mixin[]} Block#$$.mixins - Child mixins.\n       * @property {Function[]} Block#$$.mixinsToBuild - Pending mixins builders.\n       * @property {String} Block#$$.name - Block name.\n       * @property {typeof Block} Block#$$.ns - Block constructor.\n       * @property {Block|Elem|void} Block#$$.parent - Parent block or elem.\n       * @property {Block|void} Block#$$.parentBlock - Parent block.\n       * @property {Elem} parentElem - Parent element.\n       * @property {Block|void} Block#$$.parentScope - Parent scope.\n       * @property {Block|void} Block#$$.parentTemplate - Parent template.\n       * @property {Block|Elem|void} Block#$$.prevBlock - Parent template.\n       * @property {Watcher[]} Block#$$.watchers - Temporary vars watchers.\n       * @property {Object[]} Block#$$.watchersToRemove - Watchers to remove before removing the block.\n       */\n      $$: {\n        name,\n        dBlockName,\n        dBlockArgs,\n        dBlocks: [],\n        parent,\n        parentElem,\n        parentScope,\n        parentBlock,\n        parentTemplate,\n        content: new Elem(),\n        ns: constructor,\n        htmlChildren: children || [],\n        children: childrenBlocks,\n        mixins,\n        mixinsToBuild: [],\n        prevBlock,\n        watchersToRemove,\n        isRemoved: false,\n        isRendered: false,\n        evaluate: (func, onChange, targetBlock, forDElements, forDItem) => {\n          if (!isFunction(func)) {\n            return func;\n          }\n\n          forDElements = !!forDElements;\n          forDItem = !!forDItem;\n\n          const scope = name === '#d-item' && !forDItem\n            ? this.$$.scope\n            : this;\n          const { watchersToRemove } = targetBlock ? targetBlock.$$ : emptyObject;\n          const onChangeFlag = !!onChange;\n\n          const evaluate = () => {\n            let result;\n\n            if (onChangeFlag) {\n              evalMode = true;\n              gettingVars = [];\n            }\n\n            try {\n              result = func(scope);\n            } catch (err) {\n              err.func = func;\n              err.original = func.original;\n              err.block = this;\n\n              if (isFunction(constructor.onEvalError)) {\n                try {\n                  constructor.onEvalError(err);\n                } catch (e) {\n                  console.error(`Uncaught error in ${ name }.onEvalError:`, e);\n                }\n              }\n            }\n\n            if (onChangeFlag) {\n              const localWatchers = [];\n\n              iterateArray(gettingVars, (watchers) => {\n                const watcher = () => {\n                  iterateArray(localWatchers, (watcherBlock) => {\n                    const {\n                      watcher,\n                      watchers\n                    } = watcherBlock;\n\n                    removeArrayElem(watchersToRemove, watcherBlock);\n                    removeArrayElem(watchers, watcher);\n                  });\n\n                  const newResult = evaluate();\n\n                  if (newResult !== result && !targetBlock.$$.isRemoved && !this.$$.isRemoved) {\n                    onChange(newResult, result);\n                  }\n                };\n                const watcherBlock = {\n                  forDElements,\n                  watcher,\n                  watchers\n                };\n\n                localWatchers.push(watcherBlock);\n                watchersToRemove.push(watcherBlock);\n                watchers.push(watcher);\n              });\n\n              evalMode = false;\n              gettingVars = [];\n            }\n\n            return result;\n          };\n\n          return evaluate();\n        },\n        remove: (isParentSignal) => {\n          this.$$.isRemoved = true;\n\n          removeWatchers(watchersToRemove);\n\n          iterateArray(childrenBlocks, removeWithParentSignal);\n          iterateArray(mixins, removeWithParentSignal);\n\n          try {\n            this.beforeRemove();\n          } catch (err) {\n            console.error(`Uncaught error in ${ name }#beforeRemove:`, err);\n          }\n\n          if (!isParentSignal && isParentBlock) {\n            parent.$$.removeContent(this.$$.content);\n          }\n\n          if (!isParentSignal && parentBlock) {\n            removeArrayElem(parentBlock.$$.children, this);\n          }\n\n          this.$$.content.remove();\n        },\n        changeContent: (newContent) => {\n          this.$$.content = newContent;\n\n          if (this.$$.isRendered && !this.$$.isRemoved) {\n            try {\n              this.afterDOMChange();\n            } catch (err) {\n              console.error(`Uncaught error in ${ name }#afterDOMChange:`, err);\n            }\n          }\n        },\n        addContent: (contentToAdd, notRecursive) => {\n          const oldContent = this.$$.content;\n          const index = oldContent.indexOf(contentToAdd[0].previousSibling) + 1;\n          let newContent;\n\n          if (index === 0) {\n            newContent = contentToAdd.add(oldContent);\n          } else {\n            newContent = oldContent\n              .slice(0, index)\n              .add(contentToAdd, oldContent.slice(index));\n          }\n\n          this.$$.changeContent(newContent);\n\n          if (isParentBlock && !notRecursive) {\n            parent.$$.addContent(contentToAdd, notRecursive);\n          }\n        },\n        moveContent: (contentToMove, after) => {\n          const oldContent = this.$$.content;\n          const index = oldContent.indexOf(contentToMove[0]);\n          const indexToPut = oldContent.indexOf(after[0]) + 1;\n          let newContent;\n\n          if (indexToPut === 0) {\n            newContent = contentToMove.add(\n              oldContent.slice(indexToPut, index),\n              oldContent.slice(index + contentToMove.length)\n            );\n          } else if (index > indexToPut) {\n            newContent = oldContent\n              .slice(0, indexToPut)\n              .add(\n                contentToMove,\n                oldContent.slice(indexToPut, index),\n                oldContent.slice(index + contentToMove.length)\n              );\n          } else {\n            newContent = oldContent\n              .slice(0, index)\n              .add(\n                oldContent.slice(index + contentToMove.length, indexToPut),\n                contentToMove,\n                oldContent.slice(indexToPut)\n              );\n          }\n\n          this.$$.changeContent(newContent);\n\n          if (isParentBlock && indexToPut) {\n            parent.$$.moveContent(contentToMove, after);\n          }\n        },\n        removeContent: (contentToRemove) => {\n          this.$$.changeContent(this.$$.content.filter((elem) => (\n            contentToRemove.indexOf(elem) === -1\n          )));\n\n          if (isParentBlock) {\n            parent.$$.removeContent(contentToRemove);\n          }\n        },\n        insertInStartOfIt: (contentToInsert, moveFlag) => {\n          const { prevBlock } = this.$$;\n          let after = afterElem;\n\n          if (prevBlock instanceof Block) {\n            after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n          } else if (prevBlock) {\n            after = prevBlock;\n            contentToInsert.insertAfter(prevBlock);\n\n            if (isParentBlock) {\n              if (moveFlag) {\n                parent.$$.moveContent(contentToInsert, after);\n              } else {\n                parent.$$.addContent(contentToInsert, true);\n              }\n            }\n          } else if (isParentBlock) {\n            const { prevBlock } = parent.$$;\n\n            if (prevBlock) {\n              let notRecursive;\n\n              if (prevBlock instanceof Block) {\n                after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n                notRecursive = true;\n              } else {\n                after = prevBlock;\n                notRecursive = false;\n                contentToInsert.insertAfter(prevBlock);\n              }\n\n              if (moveFlag) {\n                parent.$$.moveContent(contentToInsert, after);\n              } else {\n                parent.$$.addContent(contentToInsert, notRecursive);\n              }\n            } else {\n              after = parent.$$.insertInStartOfIt(contentToInsert, moveFlag);\n            }\n          } else {\n            contentToInsert.into(parentElem, false);\n          }\n\n          if (moveFlag) {\n            this.$$.moveContent(contentToInsert, after);\n          } else {\n            this.$$.addContent(contentToInsert, true);\n          }\n\n          return after;\n        },\n        insertAfterIt: (contentToInsert, moveFlag) => {\n          const { prevBlock } = this.$$;\n          let after = afterElem;\n          let tryToAddOrMove;\n\n          if (this.$$.content.length) {\n            after = this.$$.content.elem(-1);\n            tryToAddOrMove = true;\n            contentToInsert.insertAfter(after);\n          } else if (prevBlock instanceof Block) {\n            after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n          } else if (prevBlock) {\n            after = prevBlock;\n            tryToAddOrMove = true;\n            contentToInsert.insertAfter(prevBlock);\n          } else if (isParentBlock) {\n            after = parent.$$.insertInStartOfIt(contentToInsert, moveFlag);\n          } else {\n            contentToInsert.into(parentElem, false);\n          }\n\n          if (isParentBlock && tryToAddOrMove) {\n            if (moveFlag) {\n              parent.$$.moveContent(contentToInsert, after);\n            } else {\n              parent.$$.addContent(contentToInsert);\n            }\n          }\n\n          return after;\n        }\n      }\n    });\n\n    iterateObject(constructor.defaultLocals, (value, variable) => {\n      this[variable] = value;\n    });\n    iterateArray(constructor.template.vars, (variable) => {\n      this[variable] = this[variable];\n    });\n\n    const argsObject = create(null);\n    const { defaultArgs } = constructor;\n    let args = create(defaultArgs || null);\n    let wasDRest;\n    const argsChain = [];\n\n    if (defaultArgs) {\n      argsChain.push(defaultArgs);\n    }\n\n    argsChain.push(args);\n\n    iterateObject(originalArgs, (value, arg) => {\n      const isDRest = D_REST_REGEX.test(arg);\n      const localArgs = isDRest || wasDRest\n        ? create(args)\n        : args;\n\n      if (args !== localArgs) {\n        argsChain.push(localArgs);\n      }\n\n      args = localArgs;\n\n      if (isDRest) {\n        const restArgs = parentScope.$$.evaluate(value, (value) => {\n          iterateObject(localArgs, cleanProperty);\n          assign(localArgs, transformRestArgs(value));\n          calculateArgs(normalizeArgs(argsChain), argsObject);\n        }, this);\n\n        wasDRest = true;\n\n        return assign(localArgs, transformRestArgs(restArgs));\n      }\n\n      const isDElements = name === 'd-elements';\n      const forDElements = isDElements && arg === 'value';\n\n      wasDRest = false;\n\n      localArgs[arg] = parentScope.$$.evaluate(value, (value) => {\n        localArgs[arg] = value;\n        calculateArgs(normalizeArgs(argsChain), argsObject);\n      }, this, forDElements, isDElements && parentBlock.$$.name === '#d-item');\n    });\n\n    defineFrozenProperties(this, {\n      /**\n       * @member {Object} Block#args\n       * @type {Object}\n       * @public\n       */\n      args: argsObject,\n\n      /**\n       * @member {Object} Block#globals\n       * @type {Object}\n       * @public\n       */\n      globals: create(\n        parentScope\n          ? parentScope.globals\n          : null\n      )\n    });\n\n    calculateArgs(normalizeArgs(argsChain), argsObject);\n\n    if (parentBlock) {\n      parentBlock.$$.children.push(this);\n    }\n  }\n\n  /**\n   * @method Block#afterConstruct\n   * @public\n   * @description Is called after block construction (including all scopes)\n   * but before rendering the block and its children.\n   */\n  afterConstruct() {}\n\n  /**\n   * @method Block#afterDOMChange\n   * @public\n   * @description Is called after block DOM structure has changed. Note that\n   * it's important not to modify the DOM structure within the block. You can only insert\n   * elements to empty elements (which Dwayne considers empty) and remove ones from them.\n   */\n  afterDOMChange() {}\n\n  /**\n   * @method Block#afterRender\n   * @public\n   * @description Is called after block has been rendered.\n   */\n  afterRender() {}\n\n  /**\n   * @method Block#beforeRemove\n   * @public\n   * @description Is called before the block removal.\n   */\n  beforeRemove() {}\n\n  /**\n   * @method Block#getDOM\n   * @public\n   * @returns {Elem}\n   * @description Returns DOM contents of the block.\n   */\n  getDOM() {\n    return this.$$.content.slice();\n  }\n\n  /**\n   * @method Block#getName\n   * @public\n   * @returns {String}\n   * @description Returns Block name.\n   */\n  getName() {\n    return this.$$.name;\n  }\n\n  /**\n   * @method Block#getParentElem\n   * @public\n   * @returns {Elem|void}\n   * @description Returns parent Elem.\n   */\n  getParentElem() {\n    return this.$$.parentElem.slice();\n  }\n\n  /**\n   * @method Block#getParentScope\n   * @public\n   * @returns {Block|void}\n   * @description Returns block in which template the block is located in.\n   */\n  getParentScope() {\n    return this.$$.parentScope;\n  }\n\n  /**\n   * @method Block#getParentTemplate\n   * @public\n   * @returns {Block|void}\n   * @description Returns block in which template the block is located in.\n   */\n  getParentTemplate() {\n    return this.$$.parentTemplate;\n  }\n\n  /**\n   * @method Block#evaluate\n   * @public\n   * @param {Function} func - Function to evaluate.\n   * @param {Watcher} [callback] - If present, callback which is called when the expression value is changed.\n   * @param {Block|Mixin} [target = this] - What block or mixin requests the value.\n   * @returns {*} Evaluation result.\n   * @description Method for evaluating an expression in context of the block and watching for the changes.\n   */\n  evaluate(func, callback, target = this) {\n    return this.$$.evaluate(func, callback, target);\n  }\n\n  toString() {\n    return toStringTag;\n  }\n}\n\nsetToStringTag(Block, 'Block');\nsetProto(Block.prototype, null);\n\nexport { Block, gettingVars, evalMode };\n","import { findInArray, isFunction } from '../utils';\nimport { Block } from '../Block';\nimport { rootBlocks } from '../constants';\n\nconst watchNameArgs = js`args.name`;\nconst watchConstructorArgs = js`args.Constructor`;\n\nclass DBlock extends Block {\n  static template = html`\n    <d-elements\n      value=\"{elems}\"\n      parentScope=\"{ParentScope}\"\n      parentTemplate=\"{ParentTemplate}\"\n    />\n  `;\n\n  afterConstruct(opts) {\n    const {\n      parentScope: {\n        $$: {\n          parentScope: parentParentScope,\n          parentTemplate: parentParentTemplate,\n          htmlChildren: children\n        }\n      },\n      htmlChildren: ownChildren,\n      parentScope,\n      parentTemplate,\n      dBlockName: DBlockName\n    } = this.$$;\n    const {\n      name,\n      Constructor\n    } = this.args;\n    let found;\n\n    this.ParentScope = parentScope;\n    this.ParentTemplate = parentTemplate;\n\n    if (name) {\n      this.constructDynamicNameBlock(\n        this.evaluate(watchNameArgs, this.constructDynamicNameBlock)\n      );\n\n      return;\n    }\n\n    if (Constructor) {\n      this.constructDynamicConstructorBlock(\n        this.evaluate(watchConstructorArgs, this.constructDynamicConstructorBlock)\n      );\n\n      return;\n    }\n\n    if (ownChildren.length) {\n      parentTemplate.$$.dBlocks.push(this);\n\n      return;\n    }\n\n    this.ParentScope = parentParentScope;\n    this.ParentTemplate = parentParentTemplate;\n\n    if (DBlockName) {\n      found = findInArray(children, ({ name: nodeName }) => nodeName === `d-block:${ DBlockName }`);\n\n      if (!found) {\n        found = findInArray(parentTemplate.$$.dBlocks, ({ $$: { dBlockName } }) => dBlockName === DBlockName);\n\n        if (found) {\n          this.ParentScope = parentTemplate;\n          this.ParentTemplate = parentTemplate;\n          found.value = {\n            children: found.value.$$.htmlChildren\n          };\n        }\n      }\n\n      this.elems = found\n        ? found.value.children\n        : null;\n    } else {\n      this.elems = children;\n    }\n  }\n\n  constructDynamicNameBlock = (name) => {\n    const {\n      htmlChildren,\n      dBlockArgs\n    } = this.$$;\n\n    this.elems = [{\n      name,\n      attrs: dBlockArgs,\n      children: htmlChildren\n    }];\n  };\n\n  constructDynamicConstructorBlock = (Constructor) => {\n    if (!isFunction(Constructor)) {\n      this.elems = null;\n\n      return;\n    }\n\n    const {\n      htmlChildren,\n      dBlockArgs\n    } = this.$$;\n\n    this.elems = [{\n      Constructor,\n      attrs: dBlockArgs,\n      children: htmlChildren\n    }];\n  };\n}\n\nrootBlocks['d-block'] = DBlock;\n\nexport { DBlock };\n","import { Block } from '../Block';\n\nconst template = html`\n  <d-elements\n    value=\"{$$.htmlChildren}\"\n    parentScope=\"{this}\"\n    parentTemplate=\"{$$.parentTemplate}\"\n  />\n`;\n\nclass DItem extends Block {\n  static template = template;\n}\n\nexport { DItem };\n","import {\n  assign, iterateArray, iterateObject,\n  isArray, isFunction\n} from '../utils';\nimport { remove, createBlock } from '../helpers/Block';\nimport { Block } from '../Block';\nimport { rootBlocks } from '../constants';\nimport { DItem } from './d-item';\n\nconst watchArgs = js`[\n  args.set,\n  args.filterBy,\n  args.sortBy\n]`;\n\nrootBlocks['d-each'] = class DEach extends Block {\n  static defaultArgs = {\n    uid(item, index) {\n      return index;\n    }\n  };\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      args: {\n        item: itemName = '$item',\n        index: indexName = '$index'\n      }\n    } = this;\n\n    assign(this.$$, {\n      itemsByUIDs: {},\n      itemName,\n      indexName\n    });\n  }\n\n  afterConstruct() {\n    this.evaluate(watchArgs, this.renderSet);\n    this.renderSet();\n  }\n\n  renderSet = () => {\n    const {\n      htmlChildren,\n      itemsByUIDs,\n      parentScope,\n      parentElem,\n      parentTemplate,\n      itemName,\n      indexName\n    } = this.$$;\n    const {\n      args: {\n        sortBy,\n        uid: UID\n      }\n    } = this;\n    const newItemsByUIDs = {};\n    const newUIDsCounter = {};\n    const newUIDs = {};\n    let {\n      set,\n      filterBy\n    } = this.args;\n    const isArr = isArray(set);\n    const iterate = isArr\n      ? iterateArray\n      : iterateObject;\n\n    if (isArr && isFunction(sortBy)) {\n      set = set\n        .slice()\n        .sort(sortBy);\n    }\n\n    if (isFunction(filterBy)) {\n      filterBy = [filterBy];\n    }\n\n    if (isArray(filterBy)) {\n      iterateArray(filterBy, (filter) => {\n        set = set.filter(filter);\n      });\n    }\n\n    iterate(set, (item, index) => {\n      const uid = UID(item, index, set, parentScope);\n\n      newUIDsCounter[uid] = (newUIDsCounter[uid] || 0) + 1;\n      newUIDs[index] = uid;\n    });\n\n    iterateObject(itemsByUIDs, (items, uid) => {\n      if (!newUIDsCounter[uid]) {\n        iterateArray(items, remove);\n\n        return;\n      }\n\n      iterateArray(items.splice(newUIDsCounter[uid]), remove);\n    });\n\n    let prevBlock;\n\n    iterate(set, (item, index) => {\n      const uid = newUIDs[index];\n      let block;\n\n      if (itemsByUIDs[uid] && itemsByUIDs[uid].length) {\n        block = itemsByUIDs[uid].shift();\n        block.$$.scope[indexName] = index;\n        block.$$.scope[itemName] = item;\n\n        if (block.$$.prevBlock !== prevBlock) {\n          const { content } = block.$$;\n\n          if (prevBlock) {\n            prevBlock.$$.insertAfterIt(content, true);\n          } else {\n            this.$$.insertInStartOfIt(content, true);\n          }\n        }\n      } else {\n        block = createBlock({\n          node: {\n            itemName,\n            indexName,\n            item,\n            index,\n            name: '#d-item',\n            Constructor: DItem,\n            children: htmlChildren\n          },\n          parent: this,\n          parentElem,\n          parentBlock: this,\n          parentScope,\n          parentTemplate,\n          prevBlock\n        });\n      }\n\n      (newItemsByUIDs[uid] = newItemsByUIDs[uid] || []).push(block);\n      block.$$.prevBlock = prevBlock;\n      prevBlock = block;\n    });\n\n    this.$$.itemsByUIDs = newItemsByUIDs;\n  };\n};\n","import { iterateArray, removeArrayElem } from '../utils';\nimport { removeWithParentSignal, createBlock } from '../helpers/Block';\nimport { Block } from '../Block';\nimport { Elem } from '../Elem';\nimport { rootBlocks } from '../constants';\n\nconst watchArgs = js`args.value`;\n\nrootBlocks['d-elements'] = class DElements extends Block {\n  afterConstruct() {\n    const { parentElem } = this.$$;\n    const {\n      parentScope,\n      parentTemplate\n    } = this.args;\n\n    this.$$.evaluate(watchArgs, (value) => {\n      const {\n        children,\n        mixins,\n        parent,\n        watchersToRemove,\n        content\n      } = this.$$;\n\n      iterateArray(children, removeWithParentSignal);\n      iterateArray(mixins, removeWithParentSignal);\n      content.remove();\n\n      if (parent instanceof Block) {\n        parent.$$.removeContent(content);\n      }\n\n      this.$$.children = [];\n      this.$$.mixins = [];\n      this.$$.watchersToRemove = watchersToRemove.filter(({ watchers, watcher, forDElements }) => {\n        if (forDElements) {\n          return true;\n        }\n\n        removeArrayElem(watchers, watcher);\n      });\n      this.$$.content = new Elem();\n\n      let prevBlock;\n\n      iterateArray(value || [], (child) => {\n        prevBlock = createBlock({\n          node: child,\n          parent: this,\n          parentElem,\n          parentBlock: this,\n          parentScope,\n          parentTemplate,\n          prevBlock\n        });\n      });\n      iterateArray(this.$$.mixinsToBuild, (executeBuilders) => {\n        executeBuilders();\n      });\n      this.$$.mixinsToBuild = [];\n    }, this, true);\n  }\n};\n","import { Block } from '../Block';\nimport { rootBlocks } from '../constants';\n\nconst watchArgs = js`args.if`;\n\nrootBlocks['d-if'] = class DIf extends Block {\n  static template = html`\n    <d-elements\n      value=\"{elems}\"\n      parentScope=\"{$$.parentScope}\"\n      parentTemplate=\"{$$.parentTemplate}\"\n    />\n  `;\n\n  afterConstruct() {\n    this.condition = false;\n    this.constructElems(this.evaluate(watchArgs, this.constructElems));\n  }\n\n  constructElems = (condition) => {\n    condition = !!condition;\n\n    if (this.condition !== condition) {\n      this.condition = condition;\n      this.elems = condition\n        ? this.$$.htmlChildren\n        : null;\n    }\n  };\n};\n","import { findInArray } from '../utils';\nimport { Block } from '../Block';\nimport { rootBlocks } from '../constants';\n\nconst watchArgs = js`[\n  args.value,\n  args.compareFn\n]`;\n\nrootBlocks['d-switch'] = class DSwitch extends Block {\n  static template = html`\n    <d-elements\n      value=\"{elems}\"\n      parentScope=\"{$$.parentScope}\"\n      parentTemplate=\"{$$.parentTemplate}\"\n    />\n  `;\n  static defaultArgs = {\n    compareFn(switchValue, caseValue) {\n      return (\n        switchValue === caseValue\n        || (switchValue !== switchValue && caseValue !== caseValue)\n      );\n    }\n  };\n\n  index = Infinity;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      $$: {\n        htmlChildren,\n        parentScope\n      },\n      args,\n      args: { value }\n    } = this;\n    let wasDefault = false;\n\n    this.values = htmlChildren\n      .filter(({ name }) => {\n        if (name !== 'd-case' && name !== 'd-default') {\n          return;\n        }\n\n        if (wasDefault) {\n          return;\n        }\n\n        if (name === 'd-default') {\n          wasDefault = true;\n        }\n\n        return true;\n      })\n      .map((child, i) => {\n        const {\n          name,\n          attrs = {},\n          children\n        } = child;\n        let val;\n\n        if (name !== 'd-default') {\n          val = parentScope.$$.evaluate(attrs.if, (newValue) => {\n            this.values[i].value = newValue;\n\n            if (i > this.index) {\n              return;\n            }\n\n            const found = findInArray(this.values, ({ name, value }) => (\n              name === 'd-default'\n              || this.args.compareFn(args.value, value)\n            ));\n\n            this.index = found\n              ? found.key\n              : Infinity;\n            this.elems = found\n              ? found.value.children\n              : null;\n          }, this);\n        }\n\n        if (this.index === Infinity && (\n          name === 'd-default'\n          || this.args.compareFn(value, val)\n        )) {\n          this.index = i;\n          this.elems = children;\n        }\n\n        return {\n          name,\n          children,\n          value: val\n        };\n      });\n  }\n\n  afterConstruct() {\n    this.evaluate(watchArgs, (args) => {\n      const newValue = args[0];\n      const compareFn = args[1];\n\n      this.index = Infinity;\n\n      this.values.some(({ name, value, children }, i) => {\n        if (\n          name === 'd-default'\n          || compareFn(newValue, value)\n        ) {\n          this.index = i;\n          this.elems = children;\n\n          return true;\n        }\n      });\n\n      if (this.index === Infinity) {\n        this.elems = null;\n      }\n    });\n  }\n};\n","import { isFunction, noop } from '../utils';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-bind'] = class DBind extends Mixin {\n  off = noop;\n\n  afterUpdate(value) {\n    this.off();\n\n    if (!isFunction(value)) {\n      return;\n    }\n\n    if (this.args) {\n      this.off = this.elem.on(this.args.join(','), value);\n    } else {\n      this.off = noop;\n\n      console.error('Provide \"d-bind\" mixin with an event names (like \"d-bind(click)\" or \"d-bind(keyup, keypress)\")!');\n    }\n  }\n\n  beforeRemove(isElementRemoved) {\n    if (!isElementRemoved) {\n      this.off();\n    }\n  }\n};\n","import {\n  isArray, isString,\n  iterateArray, iterateObject\n} from '../utils';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nconst EMPTY_SPACE_REGEX = /\\s+/;\n\nrootMixins['d-class'] = class DClass extends Mixin {\n  classes = [];\n\n  afterUpdate(newValue) {\n    const {\n      elem,\n      args,\n      classes\n    } = this;\n    const newClasses = [];\n\n    if (args) {\n      newValue = newValue\n        ? args\n        : [];\n    }\n\n    if (isString(newValue)) {\n      newValue = newValue.split(EMPTY_SPACE_REGEX);\n    }\n\n    if (isArray(newValue)) {\n      iterateArray(classes, (cls) => {\n        if (newValue.indexOf(cls) === -1) {\n          elem.removeClass(cls);\n        }\n      });\n      iterateArray(newValue, (cls) => {\n        if (isString(cls)) {\n          newClasses.push(cls);\n          elem.addClass(cls);\n        }\n      });\n    } else {\n      iterateArray(classes, (cls) => {\n        if (!newValue || !newValue[cls]) {\n          elem.removeClass(cls);\n        }\n      });\n      iterateObject(newValue, (val, cls) => {\n        if (val) {\n          newClasses.push(cls);\n          elem.addClass(cls);\n        }\n      });\n    }\n\n    this.classes = newClasses;\n  }\n\n  beforeRemove(isElementRemoved) {\n    if (!isElementRemoved) {\n      const {\n        elem,\n        classes\n      } = this;\n\n      elem.removeClass.apply(elem, classes);\n    }\n  }\n};\n","import { isFunction, isString } from '../utils';\nimport { Block } from '../Block';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-elem'] = class DElem extends Mixin {\n  static evaluate = false;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      args,\n      parentTemplate,\n      elem\n    } = this;\n    let scope = parentTemplate;\n    let value = this.evaluate();\n\n    if (args) {\n      scope = value instanceof Block\n        ? value\n        : parentTemplate;\n      value = args[0];\n    }\n\n    if (isFunction(value)) {\n      value(elem);\n    } else if (isString(value)) {\n      scope[value] = elem;\n    }\n  }\n};\n","import { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nclass DHide extends Mixin {\n  afterUpdate(value) {\n    const { elem } = this;\n\n    if (value) {\n      elem.hide();\n    } else {\n      elem.show();\n    }\n  }\n\n  beforeRemove(isElementRemoved) {\n    if (!isElementRemoved) {\n      this.elem.show();\n    }\n  }\n}\n\nrootMixins['d-hide'] = DHide;\n\nexport { DHide };\n","import { isFunction, isString } from '../utils';\nimport { Block } from '../Block';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-node'] = class DNode extends Mixin {\n  static evaluate = false;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      args,\n      parentTemplate,\n      node\n    } = this;\n    let scope = parentTemplate;\n    let value = this.evaluate();\n\n    if (args) {\n      scope = value instanceof Block\n        ? value\n        : parentTemplate;\n      value = args[0];\n    }\n\n    if (isFunction(value)) {\n      value(node);\n    } else if (isString(value)) {\n      scope[value] = node;\n    }\n  }\n};\n","import { noop } from '../utils';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-on'] = class DOn extends Mixin {\n  static evaluate = false;\n\n  constructor(opts) {\n    super(opts);\n\n    if (this.args) {\n      this.off = this.elem.on(this.args.join(','), () => {\n        this.evaluate();\n      });\n    } else {\n      this.off = noop;\n\n      console.error('Provide \"d-on\" mixin with an event names (like \"d-on(click)\" or \"d-on(keyup, keypress)\")!');\n    }\n  }\n\n  beforeRemove(isElementRemoved) {\n    if (!isElementRemoved) {\n      this.off();\n    }\n  }\n};\n","import { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-show'] = class DShow extends Mixin {\n  afterUpdate(value) {\n    const { elem } = this;\n\n    if (value) {\n      elem.show();\n    } else {\n      elem.hide();\n    }\n  }\n\n  beforeRemove(isElementRemoved) {\n    if (!isElementRemoved) {\n      this.elem.show();\n    }\n  }\n};\n","import { iterateObject } from '../../utils';\nimport { rootMixins } from '../../constants';\nimport { constructMixinRegex } from './constructMixinRegex';\n\niterateObject(rootMixins, (Mixin, name) => {\n  Mixin._match = constructMixinRegex(name);\n});\n","import { Elem } from './Elem';\nimport { createHideStyleNode } from './helpers/Elem';\nimport { document } from './constants';\n\n/**\n * @const {Elem} doc\n * @type {Elem}\n * @public\n * @description Elem instance of document.\n */\nexport const doc = new Elem(document);\n\n/**\n * @const {Elem} html\n * @type {Elem}\n * @public\n * @description Elem instance of document.documentElement.\n */\nexport const html = new Elem(document.documentElement);\n\n/**\n * @const {Elem} body\n * @type {Elem}\n * @public\n * @description Elem instance of document.body.\n */\nexport const body = new Elem(document.body);\n\n/**\n * @const {Elem} head\n * @type {Elem}\n * @public\n * @description Elem instance of document.head.\n */\nexport const head = new Elem(document.head);\n\ncreateHideStyleNode(head);\n"],"names":["collectFromArray","array","callback","initialValue","value","index","findInArray","i","length","iterateArray","removeArrayElem","elem","indexOf","splice","toObjectKeys","addKey","vars","variable","assign","target","arguments","source","key","collectFromObject","object","except","newObject","paths","slice","hasOwnProperty","has","iterateObject","mapObject","definePrototypeProperties","properties","name","defineProperty","defineFrozenProperties","toStringTag","toString","setToStringTag","klass","tag","Symbol","prototype","isFunction","isNil","isString","escapeRegex","string","replace","regexpSpecialsRegexp","noop","toCamelCase","DASHED_SYMBOL_REGEX","capitalize","toHyphenCase","UPPERCASED_SYMBOL_REGEX","hyphenize","match","toUpperCase","toLowerCase","addAttr","attrs","attr","addCSSProp","css","property","split","CSS_PROP_VALUE_SEPARATOR_REGEX","addDataAttr","data","addNext","add","nextSibling","addParent","parentNode","addPrev","previousSibling","createHideStyleNode","head","find","HIDE_CLASS","create","prop","text","getAttrNS","isXmlNs","nodeName","Null","XML_NS","X_LINK_ATTR_FIND_REGEX","test","Elem","closest","X_LINK_NS","X_LINK_ATTR_REPLACE_REGEX","isDocument","DOCUMENT_REGEX","isElem","isElementsCollection","HTML_COLLECTION_REGEX","isArray","isValidNode","ELEMENT_REGEX","getEvent","event","bubbles","cancelable","realDetails","finalEvent","EVENT_REGEX","Event","err","document","ownerDocument","createEvent","initEvent","hide","addClass","getMatchesFunction","matches","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","selector","this","querySelectorAll","remove","parent","removeChild","show","removeClass","toElem","base","String","calculateArgs","args","argsObject","keys","arg","undefined","cleanProperty","constructMixinRegex","RegExp","mixinMatch","mixins","Mixin","localMatch","_match","argsMatch","COMMA_REGEX","transformRestAttrs","mixinDefaultOpts","eventualAttrs","D_REST_REGEX","transformRestArgs","addArgs","executeMixinWatchers","mixin","oldValue","$$","watchers","watcher","calculateAttrs","normalizedAttrs","attrsObject","firstTime","type","removeAttr","dynamic","opts","nextType","nextDynamic","nextValue","prevType","prevValue","prevDynamic","created","isDynamic","evaluated","evaluate","newValue","parentScope","constructMixinWatcher","setAfterUpdate","buildMixin","firstValue","push","normalizeArgs","argsChain","newArgs","constructPrivateScope","scope","globals","removeTempWatcher","removeWatchers","watchersToRemove","removeWatcher","constructPublicScope","scopeValues","privateScope","evalMode","gettingVars","oldTempWatchers","createBlock","node","parentElem","parentBlock","parentTemplate","prevBlock","doc","namespaceURI","SVG_NS","localBlocks","ns","_blocks","Block","localMixins","_mixins","children","constructor","Constructor","dBlockMatch","dBlockName","dBlockArgs","NAMED_D_BLOCK_REGEX","blockInstance","error","element","currentAttrs","wasDRest","attrsChain","isDRest","localAttrs","restAttrs","mixinsToBuild","isParentBlock","insertAfterIt","insertAfter","addContent","insertInStartOfIt","into","content","emptyArray","contentDocument","documentElement","child","Args","locals","html","template","itemName","item","indexName","afterConstruct","isRendered","executeBuilders","afterRender","isInstanceOf","Class","Subclass","isPrototypeOf","removeWithParentSignal","wrapBlock","block","wrapper","returnValue","wrapMixin","constructStyleFromString","style","CSS_STYLE_SEPARATOR_REGEX","trim","getProp","hasAttr","getValueForSetting","inputValue","isRadio","getValueForGetting","values","options","init","isMultiple","addValue","concat","getListenerName","selected","insertTemplates","templates","iterateAndChangeChildren","nodes","trimmed","newTemplates","newTemplate","newVars","initApp","container","rootBlock","removeApp","DwayneRootBlock","defineProperties","Object","window","global","self","getProto","getPrototypeOf","setProto","setPrototypeOf","proto","__proto__","rootBlocks","rootMixins","Array","regexpSpecialCharacters","map","s","join","CSS_IMPORTANT_REGEX","emptyCollection","_this","includes","methodName","method","elems","elements","classes","forEach","list","classList","cls","attributes","getAttributeNS","getAttribute","setAttributeNS","setAttribute","childNodes","collect","is","cb","contains","el","isText","createTextNode","createComment","createElementNS","createElement","getPropertyValue","getPropertyPriority","removeCSS","removeProperty","setProperty","cssText","dataset","details","dispatchEvent","filter","hasAttributeNS","hasAttribute","innerHTML","next","insertBefore","appendChild","end","firstChild","listener","newEvents","allListeners","listeners","addEventListener","removeEventListener","removeListeners","removeListener","removeAttributeNS","removeAttribute","props","first","prev","babelHelpers.get","apply","textContent","condition","_arguments","toggle","_arguments2","species","comment","afterUpdate","_value","currentValue","isParentSignal","isRemoved","beforeRemove","wrappers","reduce","isElementRemoved","blockHooks","mixinHooks","TAG_NAME_REGEX","ATTR_NAME_REGEX","afterElem","emptyObject","originalArgs","childrenBlocks","func","onChange","targetBlock","forDElements","forDItem","_this7","onChangeFlag","result","original","onEvalError","e","localWatchers","watcherBlock","newResult","removeContent","newContent","afterDOMChange","contentToAdd","notRecursive","oldContent","changeContent","contentToMove","after","indexToPut","moveContent","contentToRemove","contentToInsert","moveFlag","tryToAddOrMove","defaultLocals","defaultArgs","localArgs","restArgs","isDElements","hook","warn","currentReturnValue","watchNameArgs","watchConstructorArgs","DBlock","constructDynamicNameBlock","htmlChildren","constructDynamicConstructorBlock","parentParentScope","parentParentTemplate","ownChildren","DBlockName","found","ParentScope","ParentTemplate","dBlocks","DItem","watchArgs","renderSet","_this2","itemsByUIDs","sortBy","UID","uid","newItemsByUIDs","newUIDsCounter","newUIDs","set","filterBy","isArr","iterate","sort","items","shift","constructElems","Infinity","wasDefault","val","if","compareFn","some","switchValue","caseValue","off","on","newClasses","DHide","Boolean","initialScopeValue","setProp","initialElemValue","isInitialScopeValueNull","isCheckbox","changeScope","offElemListener","offFormListener","option","body"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}