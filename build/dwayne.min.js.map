{"version":3,"file":"dwayne.min.js","sources":["../lib/helpers/toStringTag.js","../lib/helpers/checkTypes.js","../lib/D.js","../lib/helpers/iterate.js","../lib/helpers/assign.js","../lib/helpers/constructEvalFunction.js","../lib/helpers/defineProperty.js","../lib/helpers/toArray.js","../lib/helpers/validate.js","../lib/Alphabet.js","../lib/Switcher.js","../lib/Super.js","../lib/Func.js","../lib/Num.js","../lib/Arr.js","../lib/BlobObject.js","../lib/Str.js","../lib/helpers/markupToJSON.js","../lib/Elem.js","../lib/blocks/d-block.js","../lib/blocks/d-each.js","../lib/blocks/d-elements.js","../lib/blocks/d-if.js","../lib/blocks/d-item.js","../lib/blocks/d-switch.js","../lib/mixins/d-attr.js","../lib/mixins/d-bind.js","../lib/mixins/d-class.js","../lib/mixins/d-elem.js","../lib/mixins/d-hide.js","../lib/mixins/d-node.js","../lib/mixins/d-on.js","../lib/mixins/d-show.js","../lib/mixins/d-style.js","../lib/mixins/d-validate.js","../lib/mixins/d-value.js","../lib/helpers/parseJS.js","../lib/Block.js","../lib/constants/formats.js","../lib/Dat.js","../lib/helpers/constructURL.js","../lib/Fetch.js","../lib/Router.js","../lib/constants/global.js","../lib/constants/appliedRegExps.js","../lib/constants/canvasMethods.js","../lib/constants/constructors.js","../lib/constants/elements.js","../lib/constants/htmlAllowedTagSymbols.js","../lib/constants/regexpSpecialCharacters.js","../lib/constants/validateCheckExpressions.js","../lib/helpers/Symbol.js","../lib/Promise.js","../lib/helpers/parseHeaders.js","../lib/helpers/transformData.js","../lib/helpers/resolveURL.js","../browser.js"],"sourcesContent":["/**\n * @module helpers/toStringTag\n * @private\n * @description Exports toStringTag method.\n */\n\n/**\n * @function toStringTag\n * @param {*} object - Object to get toStringTag of.\n * @returns {String} Cut string.\n * @description Cut \"Type\" string from \"[object Type]\" string that gotten from {}.toString,call(object).\n */\nexport function toStringTag(object) {\n  return {}.toString.call(object).replace(/^\\[object |]$/g, '');\n}\n","/**\n * @module helpers/checkTypes\n * @private\n * @mixin\n * @description Exports is<Type> methods.\n */\n\nimport { toStringTag } from './toStringTag';\n\n/**\n * @function isArray\n * @public\n * @param {*} value - Value to check if it is an array.\n * @returns {Boolean} If the argument is an array or not.\n * \n * @example\n * isArray([]);                             // true\n * isArray(0);                              // true\n * isArray(document.querySelectorAll('*')); // false\n */\nexport function isArray(value) {\n  return toStringTag(value) === 'Array';\n}\n\n/**\n * @function isArrayLike\n * @public\n * @param {*} value - Value to check if it is array-like.\n * @returns {Boolean} If the argument is array-like or not.\n * @description Basically returns if the argument has non-negative integer \"length\" property and isn't a function.\n * \n * @example\n * isArrayLike([]);                             // true\n * isArrayLike('');                             // true\n * isArrayLike(() => {});                       // false\n * isArrayLike(document.querySelectorAll('*')); // true\n */\nexport function isArrayLike(value) {\n  if (!value || isFunction(value)) {\n    return false;\n  }\n  \n  const length = value.length;\n  \n  return isInteger(length) && length >= 0;\n}\n\n/**\n * @function isBoolean\n * @public\n * @param {*} value - Value to check if it is a boolean.\n * @returns {Boolean} If the argument is a boolean or not.\n * \n * @example\n * isBoolean(true);               // true\n * isBoolean(new Boolean(false)); // true\n * isBoolean(null);               // false\n */\nexport function isBoolean(value) {\n  return toStringTag(value) === 'Boolean';\n}\n\n/**\n * @function isDate\n * @public\n * @param {*} value - Value to check if it is a date.\n * @returns {Boolean} If the argument is a date or not.\n * \n * @example\n * isDate(new Date());                 // true\n * isDate('1999-12-31T23:59:59.999Z'); // false\n */\nexport function isDate(value) {\n  return toStringTag(value) === 'Date';\n}\n\n/**\n * @function isDateLike\n * @public\n * @param {*} value - Value to check if it is date-like.\n * @returns {Boolean} If the argument is date-like or not.\n * @description Basically returns if new Date(argument) is not invalid date.\n * \n * @example\n * isDateLike(new Date());                 // true\n * isDateLike('1999-12-31T23:59:59.999Z'); // true\n * isDateLike(0);                          // true\n */\nexport function isDateLike(value) {\n  value = new Date(value);\n  \n  return !isNaN(value.getTime());\n}\n\n/**\n * @function isElement\n * @public\n * @param {*} value - Value to check if it is an element.\n * @returns {Boolean} If the argument is element or not.\n *\n * @example\n * isElement(document.querySelector('html')); // true\n */\nexport function isElement(value) {\n  return /Element$/.test(toStringTag(value));\n}\n\n/**\n * @function isFinite\n * @public\n * @param {*} value - Value to check if it is finite.\n * @returns {Boolean} If the argument is finite or not.\n * \n * @example\n * isFinite(0);        // true\n * isFinite('0');      // false\n * isFinite(Infinity); // false\n * isFinite(NaN);      // false\n */\nexport function isFinite(value) {\n  if (!isNumber(value)) {\n    return false;\n  }\n  \n  value = Number(value);\n\n  return !isNaN(value) && value !== Infinity && value !== -Infinity;\n}\n\n/**\n * @function isFunction\n * @public\n * @param {*} value - Value to check if it is a function.\n * @returns {Boolean} If the argument is a function or not.\n * \n * @example\n * isFunction(() => {});            // true\n * \n * const func = () => {};\n * Object.setPrototypeOf(func, {});\n * isFunction(func);                // true\n */\nexport function isFunction(value) {\n  return toStringTag(value) === 'Function' || typeof value === 'function';\n}\n\n/**\n * @function isInteger\n * @public\n * @param {*} value - Value to check if it is an integer.\n * @returns {Boolean} If the argument is an integer or not.\n *\n * @example\n * isInteger(0);             // true\n * isInteger(0.1);           // false\n * isInteger(new Number(0)); // true\n * isInteger('0');           // false\n * isInteger(Infinity);      // false\n * isInteger(NaN);           // false\n */\nexport function isInteger(value) {\n  return isNumber(value) && value % 1 === 0;\n}\n\n/**\n * @function isIntegerLike\n * @public\n * @param {*} value - Value to check if it is integer-like.\n * @returns {Boolean} If the argument is integer-like or not.\n *\n * @example\n * isIntegerLike(0);             // true\n * isIntegerLike(new Number(0)); // true\n * isIntegerLike(0.1);           // false\n * isIntegerLike('0');           // true\n */\nexport function isIntegerLike(value) {\n  value = parseInt(Number(value));\n\n  return !!(value || value === 0);\n}\n\n/**\n * @function isNaN\n * @public\n * @param {*} value - Value to check if it is NaN.\n * @returns {Boolean} If the argument is NaN or not.\n *\n * @example\n * isNaN(0);               // false\n * isNaN('NaN');           // false\n * isNaN(NaN);             // true\n * isNaN(new Number(NaN)); // true\n */\nexport function isNaN(value) {\n  if (!isNumber(value)) {\n    return false;\n  }\n  \n  value = Number(value);\n\n  return value !== value;\n}\n\n/**\n * @function isNull\n * @public\n * @param {*} value - Value to check if it is null.\n * @returns {Boolean} If the argument is null or not.\n *\n * @example\n * isNull(null);      // true\n * isNull(undefined); // false\n */\nexport function isNull(value) {\n  return value === null;\n}\n\n/**\n * @function isNil\n * @public\n * @param {*} value - Value to check if it is null or undefined.\n * @returns {Boolean} If the argument is null or undefined or not.\n *\n * @example\n * isNil(null);      // true\n * isNil(undefined); // true\n * isNil(false);     // false\n */\nexport function isNil(value) {\n  return value === null || typeof value === 'undefined';\n}\n\n/**\n * @function isNumber\n * @public\n * @param {*} value - Value to check if it is a number.\n * @returns {Boolean} If the argument is a number or not.\n *\n * @example\n * isNumber(0);             // true\n * isNumber(new Number(0)); // true\n * isNumber(NaN);           // true\n * isNumber('0');           // false\n */\nexport function isNumber(value) {\n  return toStringTag(value) === 'Number';\n}\n\n/**\n * @function isNumberLike\n * @public\n * @param {*} value - Value to check if it is number-like.\n * @returns {Boolean} If the argument is number-like or not.\n *\n * @example\n * isNumberLike(0);          // true\n * isNumberLike('0');        // true\n * isNumberLike('Infinity'); // true\n * isNumberLike('NaN');      // true\n * isNumberLike(NaN);        // true\n */\nexport function isNumberLike(value) {\n  if (isNaN(value) || value === 'NaN') {\n    return true;\n  }\n  \n  value = Number(value);\n  \n  return !!(value || value === 0);\n}\n\n/**\n * @function isObject\n * @public\n * @param {*} value - Value to check if it is an object.\n * @returns {Boolean} If the argument is an object or not.\n *\n * @example\n * isObject({});   // true\n * isObject(1);    // false\n * isObject(null); // false\n */\nexport function isObject(value) {\n  return !!value && (toStringTag(value) === 'Object' || typeof value === 'object' || value instanceof Object);\n}\n\n/**\n * @function isPlainObject\n * @public\n * @param {*} value - Value to check if it is a plain object.\n * @returns {Boolean} If the argument is a plain object or not.\n *\n * @example\n * const obj = {};\n *\n * ifPlainObject(obj); // true\n *\n * Object.setPrototypeOf(object, null);\n *\n * ifPlainObject(obj); // true\n *\n * Object.setPrototypeOf(object, {});\n *\n * ifPlainObject(obj); // false\n */\nexport function isPlainObject(value) {\n  if (isPrimitive(value)) {\n    return false;\n  }\n\n  const proto = Object.getPrototypeOf(value);\n\n  if (isNull(proto)) {\n    return true;\n  }\n\n  const constructor = proto.constructor;\n\n  return isFunction(constructor) &&\n    constructor instanceof constructor &&\n    isNull(Object.getPrototypeOf(proto));\n}\n\n/**\n * @function isPrimitive\n * @public\n * @param {*} value - Value to check if it is primitive.\n * @returns {Boolean} If the argument is primitive or not.\n *\n * @example\n * isPrimitive(1);             // true\n * isPrimitive({});            // false\n * isPrimitive('');            // true\n * isPrimitive(new Number(0)); // false\n * isPrimitive(true);          // true\n * isPrimitive(Symbol('foo')); // true\n * isPrimitive(null);          // true\n * isPrimitive(undefined);     // true\n */\nexport function isPrimitive(value) {\n  return isNull(value) || /^(number|string|boolean|symbol|undefined)$/.test(typeof value);\n}\n\n/**\n * @function isRegExp\n * @public\n * @param {*} value - Value to check if it is a regular expression.\n * @returns {Boolean} If the argument is a regular expression or not.\n *\n * @example\n * isRegExp(/foo/);             // true\n * isRegExp('/foo/');           // false\n * isRegExp(new RegExp('foo')); // true\n */\nexport function isRegExp(value) {\n  return toStringTag(value) === 'RegExp';\n}\n\n/**\n * @function isString\n * @public\n * @param {*} value - Value to check if it is a string.\n * @returns {Boolean} If the argument is a string or not.\n *\n * @example\n * isString('0');             // true\n * isString(new String('0')); // true\n */\nexport function isString(value) {\n  return toStringTag(value) === 'String';\n}\n\n/**\n * @function isSymbol\n * @public\n * @param {*} value - Value to check if it is a symbol.\n * @returns {Boolean} If the argument is a symbol or not.\n *\n * @example\n * isSymbol(Symbol('1')); // true\n */\nexport function isSymbol(value) {\n  return toStringTag(value) === 'Symbol';\n}\n\n/**\n * @function isUndefined\n * @public\n * @param {*} value - Value to check if it is undefined.\n * @returns {Boolean} If the argument is undefined or not.\n *\n * @example\n * isUndefined(null);      // false\n * isUndefined(undefined); // true\n */\nexport function isUndefined(value) {\n  return typeof value === 'undefined';\n}\n","/**\n * @module D\n * @private\n * @description Exports D function.\n */\n\nimport { constructors } from './constants';\n\n/**\n * @function D\n * @public\n * @param {*} [value] - Any value.\n * @returns {DWrap} Wrap of the argument.\n * @description Function for creating a D-wrap of an object.\n *\n * @example\n * D({});            // Super\n * D(() => {});      // Func\n * D([]);            // Arr\n * D(1);             // Num\n * D('1');           // Str\n * D(new Date());    // Dat\n * D(document.body); // Elem\n */\nfunction D(value) {\n  for (let i = constructors.length - 1; i >= 0; i--) {\n    const levelConstructors = constructors[i];\n\n    for (let k = 0, len = levelConstructors.length; k < len; k++) {\n      const constructor = levelConstructors[k];\n\n      if (value instanceof constructor.cls) {\n        return value;\n      }\n\n      if (constructor.check(value)) {\n        return new constructor.cls(value);\n      }\n    }\n  }\n}\n\nexport * from './helpers/checkTypes';\nexport { D };\n","/**\n * @module helpers/iterate\n * @private\n * @description Exports iterate method.\n */\n\nimport { isArrayLike, isUndefined } from './checkTypes';\n\n/**\n * @callback IterationCallback\n * @param {*} value - Iteration value.\n * @param {String|Number} key - Iteration key.\n * @param {*} object - Initial iterable object.\n */\n\n/**\n * @function iterate\n * @param {(Object|Array|null|undefined)} object - Value to iterate over.\n * @param {IterationCallback} callback - Callback that is called on every iteration.\n * @returns {*} If callback returns not undefined then iterate returns this value.\n * @description Function for iterating over all types of values.\n */\nexport function iterate(object, callback) {\n  const array = isArrayLike(object);\n  const iteratedKeys = {};\n\n  let iterated = 0;\n\n  for (const key in object) {\n    if ({}.hasOwnProperty.call(iteratedKeys, key)) {\n      continue;\n    }\n\n    iteratedKeys[key] = true;\n\n    if ({}.hasOwnProperty.call(object, key)) {\n      if (array && iterated++ >= object.length) {\n        break;\n      }\n\n      const value = callback(object[key], array ? Number(key) : key, object);\n\n      if (!isUndefined(value)) {\n        return value;\n      }\n    }\n  }\n}\n","/**\n * @module helpers/assign\n * @private\n * @description Exports Object.assign-like method.\n */\n\nimport { iterate } from './iterate';\n\n/**\n * @const\n * @function assign\n * @param {Object} target - Object to assign rest of arguments to.\n * @param {...Object} objects - Objects that are assigned to the target.\n * @returns {Object} Target.\n */\nexport function assign(target, ...objects) {\n  iterate(arguments, (source, index) => {\n    if (index) {\n      iterate(source, (value, key) => {\n        target[key] = value;\n      });\n    }\n  });\n    \n  return target;\n}\n","/**\n * @module helpers/constructEvalFunction\n * @private\n * @description Exports constructEvalFunction method.\n */\n\n/**\n * @function constructEvalFunction\n * @param {String} code - JS code.\n * @param {String} original - Original JS code.\n * @returns {*} Eval function.\n * @description Function for constructing eval function.\n */\nexport function constructEvalFunction(code, original) {\n  let func;\n\n  try {\n    /* eslint no-new-func: 0 */\n    func = new Function('$', `return ${ code }`);\n    func.expression = code;\n    func.original = original;\n\n    return func;\n  } catch (err) {\n    throw new Error(`Syntax error (in \"${ code }\", original code: \"${ original }\")`);\n  }\n}\n","/**\n * @module helpers/defineProperty\n * @private\n * @description Exports defineProperty and dynamicDefineProperties methods.\n */\n\nimport { iterate } from './iterate';\n\n/**\n * @callback propertyGeneratorCallback\n * @param {String} name - Name of the property.\n * @param {Number} i - Index of the array.\n * @returns {*} Generated property.\n */\n\n/**\n * @function dynamicDefineProperties\n * @param {Object} target - Object to define properties for.\n * @param {Array} properties - Object which keys are properties.\n * @param {propertyGeneratorCallback} propertyGenerator - Callback for every property.\n * @returns {void}\n * @description Function for dynamic creating properties based on name of the method.\n */\nexport function dynamicDefineProperties(target, properties, propertyGenerator) {\n  iterate(properties, (name, i) => {\n    Object.defineProperty(target, name, {\n      value: propertyGenerator(name, i),\n      writable: true,\n      enumerable: false,\n      configurable: true\n    });\n  });\n}\n\n/**\n * @function defineProperties\n * @param {Object} target - Target to define properties for.\n * @param {Object} properties - Object with properties needed to be assign to the target.\n * @returns {void}\n * @description Function for defining properties of an object.\n */\nexport function defineProperties(target, properties) {\n  iterate(properties, (value, name) => {\n    if (/^get /.test(name)) {\n      Object.defineProperty(target, name.replace(/^get /, ''), {\n        get: value,\n        set: undefined,\n        enumerable: false,\n        configurable: true\n      });\n\n      return;\n    }\n\n    if (/^set /.test(name)) {\n      Object.defineProperty(target, name.replace(/^set /, ''), {\n        set: value,\n        get: undefined,\n        enumerable: false,\n        configurable: true\n      });\n\n      return;\n    }\n\n    if (/^get\\/set /.test(name)) {\n      Object.defineProperty(target, name.replace(/^get\\/set /, ''), {\n        get: value.get,\n        set: value.set,\n        enumerable: false,\n        configurable: true\n      });\n\n      return;\n    }\n\n    if (name !== 'Symbol.toStringTag') {\n      Object.defineProperty(target, name, {\n        value,\n        writable: true,\n        enumerable: false,\n        configurable: true\n      });\n    }\n  });\n}\n\n/**\n * @function defineUsualProperties\n * @param {Object} target - Target to define properties for.\n * @param {Object} properties - Object with properties needed to be assign to the target.\n * @returns {void}\n * @description Function for defining usual properties of an object.\n */\nexport function defineUsualProperties(target, properties) {\n  iterate(properties, (value, name) => {\n    Object.defineProperty(target, name, {\n      value,\n      writable: true,\n      enumerable: true,\n      configurable: true\n    });\n  });\n}\n\n/**\n * @function defineFrozenProperties\n * @param {Object} target - Target to define properties for.\n * @param {Object} properties - Object with properties needed to be assign to the target.\n * @returns {void}\n * @description Function for defining frozen properties of an object.\n */\nexport function defineFrozenProperties(target, properties) {\n  iterate(properties, (value, name) => {\n    Object.defineProperty(target, name, {\n      value,\n      writable: false,\n      enumerable: false,\n      configurable: false\n    });\n  });\n}\n","/**\n * @module helpers/toArray\n * @private\n * @description Exports toArray method.\n */\n\nimport { isArray, isArrayLike, isString } from './checkTypes';\nimport { iterate } from './iterate';\n\n/**\n * @function toArray\n * @param {*} value - Any value.\n * @param {Boolean} [createNewArray = false] - If it is needed to create new array.\n * @returns {Array} Create array.\n * @description Function for creating an array of any value.\n */\nexport function toArray(value, createNewArray) {\n  if (isArray(value) && !createNewArray) {\n    return value;\n  }\n\n  const array = [];\n\n  if (isArrayLike(value) && !isString(value)) {\n    iterate(value, (value) => {\n      array.push(value);\n    });\n  } else {\n    array.push(value);\n  }\n\n  return array;\n}\n","/**\n * @module helpers/validate\n * @private\n * @description Exports validate method.\n */\n\nimport { validateCheckExpressions } from '../constants';\nimport { iterate } from './iterate';\nimport { isArray } from './checkTypes';\n\nconst numbers = ['1st', '2nd', '3rd', '4th', '5th', '6th', '7th'];\n\n/**\n * @function validate\n * @private\n * @param {Object} args - Arguments of function.\n * @param {Object} options - Object with validate parameters.\n * @param {String} [name] - Name of the function what called validate.\n * @returns {void}\n * @description Function for checking arguments of other functions.\n */\nexport function validate(args, options, name) {\n  iterate(options, (array, number) => {\n    if (!isArray(array)) {\n      array = [array];\n    }\n\n    iterate(array, (checker) => {\n      checker = validateCheckExpressions[checker];\n\n      if (!checker.check(args[number])) {\n        throw new checker.error(checker.text.replace('$n', numbers[number]) + (name ? ` (at ${ name })` : ''));\n      }\n    });\n  });\n}\n","/**\n * @module Alphabet\n * @private\n * @mixin\n * @description Exports Alphabet class.\n */\n\nimport { isString, validate, defineProperties, Symbol } from './helpers';\n\n/**\n * @typedef {String} Char\n * @public\n * @description A string of one char.\n */\n\n/**\n * @class Alphabet\n * @public\n * @param {ArrayLike} alphabet - Alphabet to wrap.\n * @returns {Alphabet} Instance of Alphabet.\n * @description Class for alphabet manipulations: add, delete symbols, generate a token from an alphabet,\n * check if an alphabet contains a word.\n *\n * @example\n * new Alphabet(['a', 'b', 'c']);\n */\nclass Alphabet {\n  constructor(alphabet = []) {\n    const a = {};\n\n    for (let i = 0, length = alphabet.length; i < length; i++) {\n      const char = alphabet[i];\n\n      if (!check(char)) {\n        throw new Error('Each element of an array must be a single char! (in Alphabet)');\n      }\n\n      a[char] = char;\n    }\n\n    /**\n     * @member {Object} Alphabet#$$\n     * @public\n     * @description The alphabet.\n     */\n    Object.defineProperty(this, '$$', { value: a });\n  }\n\n  /**\n   * @method Alphabet#add\n   * @public\n   * @param {...Char} chars - Chars to add.\n   * @returns {Alphabet} Returns this.\n   * @description Method for adding new letters to the alphabet.\n   *\n   * @example\n   * const alphabet = new Alphabet(['a', 'b', 'c']);\n   *\n   * alphabet.add('d', 'e');\n   *\n   * alphabet.get().$; // ['a', 'b', 'c', 'd', 'e']\n   */\n  add(...chars) {\n    for (let i = 0, length = chars.length; i < length; i++) {\n      const char = chars[i];\n\n      if (!check(char)) {\n        throw new Error('Each argument must be a single char! (in Alphabet#add)');\n      }\n\n      this.$$[char] = char;\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Alphabet#contains\n   * @public\n   * @param {String} word - Word to check if it is in the alphabet or not.\n   * @returns {Boolean} If the word in the alphabet or not.\n   * @description Method that returns if a word is in alphabet or not.\n   *\n   * @example\n   * const alphabet = new Alphabet(['f', 'b', 'o', 'a', 'r']);\n   *\n   * alphabet.contains('foo'); // true\n   * alphabet.contains('bar'); // true\n   * alphabet.contains('baz'); // false\n   */\n  contains(word) {\n    validate([word], ['string'], 'Alphabet#contains');\n\n    const alphabet = this.$$;\n\n    for (let i = 0, length = word.length; i < length; i++) {\n      if (!alphabet[word[i]]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * @method Alphabet#delete\n   * @public\n   * @param {...Char} chars - Chars to delete.\n   * @returns {Alphabet} Returns this.\n   * @description Method for deleting letters from the alphabet.\n   *\n   * @example\n   * const alphabet = new Alphabet(['a', 'b', 'c', 'd']);\n   *\n   * alphabet.delete('a');\n   *\n   * alphabet.get().$; // ['b', 'c', 'd']\n   *\n   * alphabet.delete('b', 'd');\n   *\n   * alphabet.get().$; // ['c']\n   */\n  delete(...chars) {\n    for (let i = 0, length = chars.length; i < length; i++) {\n      const char = chars[i];\n\n      if (!check(char)) {\n        throw new Error('Each argument must be a single char! (in Alphabet#delete)');\n      }\n\n      delete this.$$[char];\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Alphabet#get\n   * @returns {Array} Wrap of an array of alphabet letters.\n   * @description Method for getting array of alphabet letters.\n   *\n   * @example\n   * new Alphabet(['a', 'b', 'c']).get().$; // ['a', 'b', 'c']\n   */\n  get() {\n    return Object.keys(this.$$);\n  }\n\n  /**\n   * @method Alphabet#token\n   * @public\n   * @param {Number} length - Token length.\n   * @returns {String} Token.\n   * @description Method for generating random token with given length.\n   *\n   * @example\n   * new Alphabet(['a', 'b', 'c']).token(4); // 'abcb'\n   */\n  token(length) {\n    validate([length], [['intLike', '>0']], 'Alphabet#token');\n\n    const alphabet = Object.keys(this.$$);\n    const len = alphabet.length;\n    let token = '';\n\n    for (let i = 0; i < length; i++) {\n      token += alphabet[Math.floor(Math.random() * len)];\n    }\n\n    return token;\n  }\n}\n\ndefineProperties(Alphabet.prototype, {\n  [Symbol.toStringTag]: 'Alphabet'\n});\n\nfunction check(char) {\n  return isString(char) && char.length === 1;\n}\n\n/**\n * @function alphabet\n * @public\n * @param {String} string - String to generate an alphabet from.\n * @returns {Alphabet} New instance of Alphabet.\n * @description Function for creating an alphabet from a string that has format like this:\n * '&lt;char1&gt;-&lt;char2&gt; &lt;char3&gt;-&lt;char4&gt;'\n *\n * @example\n * const a1 = alphabet('a-c 1-3');\n * const a2 = alphabet('5-5f-g');\n *\n * a1.get().$; // ['1', '2', '3', 'a', 'b', 'c']\n * a2.get().$; // ['5', 'f', 'g']\n */\nfunction alphabet(string) {\n  validate([string], ['string']);\n\n  const ranges = string.split(/([\\s\\S]-+[\\s\\S])?/g);\n  const length = ranges.length;\n  const alphabet = [];\n\n  for (let i = 0; i < length; i++) {\n    const range = ranges[i];\n\n    if (!range || range === ' ') {\n      continue;\n    }\n\n    if (/-/.test(range) && !/[\\s\\S]-+[\\s\\S]/.test(range)) {\n      throw new Error(`Wrong part of the string (${ range })! (in alphabet)`);\n    }\n\n    if (/-/.test(range)) {\n      const start = range.charCodeAt(0);\n      const end = range.charCodeAt(2);\n\n      if (start > end) {\n        throw new Error('Start of the range must be before its end! (in alphabet)');\n      }\n\n      for (let k = 0, len = end - start + 1; k < len; k++) {\n        alphabet.push(String.fromCharCode(start + k));\n      }\n\n      continue;\n    }\n\n    if (range.length === 1) {\n      alphabet.push(range);\n    }\n  }\n\n  return new Alphabet(alphabet);\n}\n\nexport { Alphabet, alphabet };\n","/**\n * @module Switcher\n * @private\n * @mixin\n * @description Exports Switcher class.\n */\n\nimport {\n  isArray, isFunction, isString, isUndefined,\n  iterate, Symbol, toArray, defineProperties\n} from './helpers';\n\n/**\n * @typedef {'boolean'|'equals'|'strictEquals'|'call'} SwitcherMode\n * @public\n * @description Enum type of switcher modes.\n */\n\n/**\n * @callback SwitcherCallCallback\n * @public\n * @param {*} value - Switcher value.\n * @returns {Boolean|*} On what the callback returns depends if the case is a match (truthy for the match).\n */\n\n/**\n * @callback SwitcherMatchCallback\n * @public\n * @param {...*} args - Arguments from the second argument that switcher was called with.\n * @param {*} value - Switcher value.\n * @param {*} matched - Switcher matched case.\n */\n\n/**\n * @class Switcher\n * @public\n * @param {Object} [cases = {}] - Object of cases.\n * @param {SwitcherMode} [mode = 'equals'] - Switcher mode.\n * @param {*} [defaultValue] - Switcher default value.\n * @returns {Switcher} - Instance of Switcher.\n * @description Switcher class for creating functions working similar to switch (value) {} construction,\n * but with the value assignment. Switcher instance is a function that accepts a value argument and an optional\n * args argument. Args with additional switcher value and matched case\n * are passed into the function of the matched case (if it is a function).\n *\n * @example\n * const switcher = new Switcher();\n * const switcher = new Switcher({\n *   case1: 'value1',\n *   case2: 'value2'\n * });\n * const switcher = new Switcher('strictEquals');\n * const switcher = new Switcher({\n *   case1: 'value1',\n *   case2: 'value2'\n * }, 'strictEquals');\n * const switcher = new Switcher('strictEquals', 'defaultValue');\n * const switcher = new Switcher({\n *   case1: 'value1',\n *   case2: 'value2'\n * }, 'strictEquals', 'defaultValue');\n *\n * // See [switcher]{@link switcher} examples for more information.\n */\nclass Switcher extends Function {\n  constructor(cases = {}, mode = 'equals', defaultValue) {\n    super();\n\n    if (isString(cases)) {\n      if (!isUndefined(arguments[1])) {\n        defaultValue = mode;\n      }\n\n      mode = cases;\n      cases = {};\n    }\n\n    const eventualCases = [];\n\n    iterate(cases, (value, Case) => {\n      eventualCases.push({ case: Case, value });\n    });\n\n    function switcher(value, args = []) {\n      const { mode, default: def, cases } = switcher.$$;\n\n      let ret = iterate(cases, ({ value: val, case: Case }) => {\n        if (\n          (mode === 'boolean' && Case) ||\n          /* eslint eqeqeq: 0 */\n          (mode === 'equals' && Case == value) ||\n          (mode === 'strictEquals' && Case === value) ||\n          (mode === 'call' && Case(value))\n        ) {\n          return { case: Case, value: val };\n        }\n      });\n\n      if (isUndefined(ret)) {\n        ret = { value: def };\n      }\n\n      if (!isFunction(ret.value)) {\n        return ret.value;\n      }\n\n      args = toArray(args, true);\n      args.push(value, ret.case);\n\n      return ret.value.apply(null, args);\n    }\n\n    /**\n     * @member Switcher#$$\n     * @type {Object}\n     * @protected\n     * @property {Array} cases - Array of cases.\n     * @property {SwitcherMode} mode - Switcher mode.\n     * @property {*} default - Switcher default value.\n     * @description Config parameters.\n     */\n    Object.defineProperty(switcher, '$$', {\n      value: {\n        cases: eventualCases,\n        mode,\n        default: defaultValue\n      }\n    });\n    Object.setPrototypeOf(switcher, Switcher.prototype);\n\n    return switcher;\n  }\n\n  /**\n   * @method Switcher#case\n   * @public\n   * @param {*|SwitcherCallCallback|Array.<*|SwitcherCallCallback>} cases - Case or an array of cases.\n   * @param {*|SwitcherMatchCallback} value - Value that has to be assigned or a function\n   * that is called with switcher value, if it's the case.\n   * @returns {Switcher} Returns this.\n   * @description Method for defining new cases.\n   *\n   * @example\n   * const sw = new Switcher()\n   *   .case(1, 'one')\n   *   .case(2, 'two');\n   *\n   * sw(1); // 'one'\n   * sw(2); // 'two'\n   */\n  case(cases, value) {\n    if (!isArray(cases)) {\n      cases = [cases];\n    }\n\n    iterate(cases, (Case) => {\n      this.$$.cases.push({ case: Case, value });\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Switcher#default\n   * @public\n   * @param {*} def - New default value.\n   * @returns {Switcher} Returns this.\n   * @description Method for redefining default switcher value.\n   *\n   * @example\n   * const sw = new Switcher()\n   *   .case(1, 'one')\n   *   .default('three');\n   *\n   * sw(1); // 'one'\n   * sw(2); // 'three'\n   */\n  default(def) {\n    this.$$.default = def;\n\n    return this;\n  }\n\n  /**\n   * @method Switcher#mode\n   * @public\n   * @param {SwitcherMode} mode - New switcher mode.\n   * @returns {Switcher} Returns this.\n   * @description Method for redefining switcher mode.\n   *\n   * @example\n   * const sw = new Switcher()\n   *   .mode('strictEquals')\n   *   .case(1, 'number')\n   *   .case('1', 'string');\n   *\n   * sw(1);   // 'number'\n   * sw('1'); // 'string'\n   */\n  mode(mode) {\n    this.$$.mode = mode;\n\n    return this;\n  }\n}\n\ndefineProperties(Switcher.prototype, {\n  [Symbol.toStringTag]: 'Switcher'\n});\n\n/**\n * @function switcher\n * @public\n * @param {Object} [cases = {}] - Object of cases.\n * @param {SwitcherMode} [mode = 'equals'] - Switcher mode.\n * @param {*} [defaultValue] - Switcher default value.\n * @returns {Switcher} New instance of Switcher.\n * @description Simple wrap of [new Switcher(...)]{@link Switcher}.\n * \n * @example\n * const sw = switcher({\n *   1: 'foo',\n *   2: 'bar'\n * });\n * sw(1); // 'foo'\n * sw(2); // 'bar'\n * sw(3); // undefined\n * \n * @example\n * const sw = switcher()\n *   .case([1, 2], 'foo')\n *   .case(3, 'bar');\n *   \n * sw(1); // 'foo'\n * sw(2); // 'foo'\n * sw(3); // 'bar'\n * \n * @example\n * const sw = switcher('call')\n *   .case(isArray, 'array')\n *   .case(isString, 'string')\n *   .case(isNumber, 'number')\n *   .default('rest');\n *   \n * sw([]);    // 'array'\n * sw('foo'); // 'string'\n * sw(123);   // 'number'\n * sw({});    // 'rest'\n * \n * @example\n * const sw = switcher({\n *   1: (value) => {\n *     console.log(value + 1);\n *   },\n *   2: () => {\n *     console.log(value - 1);\n *   }\n * });\n * \n * sw(1); // 2\n * sw(2); // 1\n * \n * @example\n * const sw = switcher({\n *   first: (array) => array[0],\n *   last: (array) => array[array.length - 1]\n * }, 'equals', (array, index) => array[index]);\n * const array = [1, 2, 3, 4];\n * \n * sw('first', [array]); // 1\n * sw('last', [array]);  // 4\n * sw(1, [array]);       // 2\n * sw(2, [array]);       // 3\n */\nfunction switcher(cases, mode, defaultValue) {\n  return new Switcher(...arguments);\n}\n\n/**\n * @function when\n * @public\n * @param {Boolean|*} condition - Condition used for returning the proper value.\n * @param {*} value1 - Value if the condition is truthy.\n * @param {*} value2 - Value if the condition is falsey.\n * @returns {*} value1 or value2.\n * @description Synonym for\n * [ternary operator]{@link https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference/Operators/Conditional_Operator}.\n * \n * @example\n * when(true, 'true', 'false'); // 'true'\n */\nfunction when(condition, value1, value2) {\n  return condition ? value1 : value2;\n}\n\nexport { Switcher, switcher, when };\n","/**\n * @module Super\n * @private\n * @mixin\n * @description Exports Super class.\n */\n\nimport { D } from './D';\nimport { switcher } from './Switcher';\nimport { constructors } from './constants/constructors';\nimport {\n  isArray, isArrayLike, isDate, isElement, isFunction, isNil, isNaN, isNull,\n  isObject, isPlainObject, isPrimitive, isRegExp, isString, isUndefined,\n  validate, toStringTag, iterate, Symbol, defineProperties\n} from './helpers';\n\n/**\n * @typedef {Super|Arr|Func|Elem|Str|Num|Dat|BlobObject} DWrap\n * @public\n * @description Any kind of D-Wrap.\n */\n\n/**\n * @typedef {String|Number|null} Key\n * @public\n * @description Key type used in many methods.\n */\n\n/**\n * @typedef {TreeElement[]} Tree\n * @public\n */\n\n/**\n * @typedef {Object} TreeElement\n * @public\n * @property {Key} key - Tree element key.\n * @property {*} value - Tree element value.\n * @description {@link Tree} element.\n */\n\n/**\n * @callback DeepIterationCallback\n * @public\n * @param {*} value - Current iteration value.\n * @param {String|Number} key - Current iteration key/index.\n * @param {*} object - Iteration object.\n * @param {Tree} tree - Tree of { key, value } elements.\n */\n\n/**\n * @callback DeepReduceCallback\n * @public\n * @param {*} previousValue - Previous value.\n * @param {*} value - Current iteration value.\n * @param {String|Number} key - Current iteration key/index.\n * @param {*} object - Iteration object.\n * @param {Tree} tree - Tree of { key, value } elements.\n */\n\n/**\n * @callback IterationCallback\n * @public\n * @param {*} value - Current iteration value.\n * @param {String|Number} key - Current iteration key/index.\n * @param {*} object - Iteration object.\n */\n\n/**\n * @callback JSONCallback\n * @public\n * @param {String|null} key - Current value.\n * @param {*} value - Current key.\n * @param {Object} object - Iteration object.\n */\n\n/**\n * @callback ObjectCallback\n * @public\n * @param {Object} newObject - The new object.\n * @param {*} value - Current iteration value.\n * @param {String|Number} key - Current iteration key/index.\n * @param {*} object - Iteration object.\n */\n\n/**\n * @callback ReduceCallback\n * @public\n * @param {*} previousValue - Previous value.\n * @param {*} value - Current iteration value.\n * @param {String|Number} key - Current iteration key/index.\n * @param {*} object - Iteration object.\n */\n\n/**\n * @callback SuperMethod\n * @public\n * @this {DWrap}\n */\n\nconst cloneSwitcher = switcher('call', (object) => object)\n  .case(\n    (object) => new Super(object) === object,\n    (object) => new (Object.getPrototypeOf(object).constructor)(new Super(object.$).deepClone().$)\n  )\n  .case(isElement, (object, deep) => object.clone(deep))\n  .case(isDate, (object) => new Date(object))\n  .case(isRegExp, (object) => new RegExp(object.source, object.toString().match(/[gimuy]*$/)[0]))\n  .case(isArray, () => [])\n  .case(isPlainObject, () => ({}));\n\n/**\n * @class Super\n * @public\n * @param {*} [object] - An object to wrap.\n * @returns {DWrap} Instance of Super.\n * @description Wrap of any value. And there is no way to create a nested wrap.\n *\n * @example\n * new Super({}); // Super\n */\nclass Super {\n  constructor(object) {\n    if (object instanceof Super) {\n      return object;\n    }\n\n    /**\n     * @member Super#$\n     * @type {*}\n     * @public\n     * @description Wrapped object.\n     */\n    Object.defineProperty(this, '$', { value: object });\n  }\n\n  /**\n   * @method Super.addStaticProperties\n   * @public\n   * @param {String|Object} property - Either a string of a property or an object\n   * with properties keys and values values.\n   * @param {Object} [value] - If a property parameter is a string this has to be a property value.\n   * @returns {this} Returns this.\n   * @description Sets static properties for DWrap constructors.\n   *\n   * @example\n   * Super.addStaticProperties('cool', 42);\n   * Super.addStaticProperties('superCool', 42*42);\n   */\n  static addStaticProperties(property, value) {\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    defineProperties(this, property);\n\n    return this;\n  }\n\n  /**\n   * @method Super.addInstanceProperties\n   * @public\n   * @param {String|Object} property - Either a string of a property or an object\n   * with properties keys and values values.\n   * @param {Object} [value] - If a property parameter is a string this has to be a property value.\n   * @returns {this} Returns this.\n   * @description Sets static properties for DWrap prototypes.\n   *\n   * @example\n   * Super.addInstanceProperties('cool', 42);\n   * Super.addInstanceProperties('superCool', 42*42);\n   */\n  static addInstanceProperties(property, value) {\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    defineProperties(this.prototype, property);\n\n    return this;\n  }\n\n  /**\n   * @method Super#assign\n   * @public\n   * @param {...(Object|Super|*)} objects - Objects to be assigned to the object.\n   * @returns {DWrap} Returns this.\n   * @description Synonym for\n   * [Object.assign]\n   * {@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign}.\n   *\n   * @example\n   * new Super({ a: 1, b: 2 }).assign({ a: 3 }, { c: 3, d: 4 }, { d: 5 }).$; // { a: 3, b: 2, c: 3, d: 5 }\n   */\n  assign(...objects) {\n    const object = this.$;\n\n    iterate(object && arguments, (o) => {\n      iterate(new Super(o).$, (value, key) => {\n        object[key] = value;\n      });\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Super#average\n   * @public\n   * @param {IterationCallback} [callback = null] - Callback that is passed to {@link Super#sum}.\n   * @returns {Number} Average value.\n   * @description Synonym for object.sum(callback) / object.count.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).average();                         // 2\n   * new Super({ a: 1, b: 2, c: 5 }).average((value) => value * value); // 10\n   */\n  average(callback = null) {\n    validate([callback], ['function||!'], 'Super#average');\n\n    return this.sum(callback) / this.count;\n  }\n\n  /**\n   * @method Super#call\n   * @public\n   * @param {SuperMethod} func - Function to be called with this context.\n   * @param {...*} args - Arguments to be called with.\n   * @returns {*} Return of function call.\n   * @description Synonym for func.call(DObject, ...args);\n   *\n   * @example\n   * new Super({ a: 1 }).call(function (b, c) {\n   *   return this.a + b + c;\n   * }, 2, 3); // 6\n   */\n  call(func, ...args) {\n    validate([func], ['function'], 'Super#call');\n\n    return func.apply(this, args);\n  }\n\n  /**\n   * @method Super#clone\n   * @returns {DWrap} New object.\n   * @description Method assigns properties of the object to an empty one and returns the new one.\n   *\n   * @example\n   * new Super({ a: 1, b: { c: 2 } }).clone().$; // { a: 1, b: { c: 2 } }\n   */\n  clone() {\n    const object = this.$;\n    const clone = cloneSwitcher(object, [object, false]);\n\n    if (clone !== object) {\n      iterate(object, (value, key) => {\n        clone[key] = value;\n      });\n    }\n\n    return new this.constructor(clone);\n  }\n\n  /**\n   * @member Super#count\n   * @type {Number}\n   * @public\n   * @readonly\n   * @description Returns number of own enumerable keys of the object.\n   *\n   * @example\n   * new Super({ a: 1, b: 2 }).count; // 2\n   */\n  get count() {\n    const object = this.$;\n\n    if (!isObject(object)) {\n      return 0;\n    }\n\n    return isArrayLike(object) ? object.length : Object.keys(object).length;\n  }\n\n  /**\n   * @method Super#create\n   * @public\n   * @param {Object} [descriptors] - Descriptors passed to Object.create.\n   * @returns {DWrap} New instance of D-Wrap.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create\n   * @description Synonym for\n   * [Object.create]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create}.\n   *\n   * @example\n   * new Super({}).create({\n   *   a: {\n   *     value: 1,\n   *     enumerable: false,\n   *     writable: true,\n   *     configurable: false\n   *   }\n   * }).$; // { a: 1 }\n   */\n  create(descriptors) {\n    return D(isPrimitive(this.$) ? undefined : Object.create(this.$, descriptors));\n  }\n\n  /**\n   * @method Super#deepAssign\n   * @public\n   * @param {...*} objects - Objects to be assigned to the object.\n   * @returns {DWrap} Returns this.\n   * @description Deep analogue of {@link Super#assign}.\n   *\n   * @example\n   * new Super({ a: 1 }).deepAssign(\n   *   {\n   *     b: {\n   *       c: 2\n   *     }\n   *   },\n   *   {\n   *     a: {\n   *       b: 1\n   *     }\n   *   },\n   *   {\n   *     a: {\n   *       c: {\n   *         d: 1\n   *       }\n   *     },\n   *     b: 2\n   *   },\n   *   null\n   * });\n   * // {\n   * //   a: {\n   * //     b: 1,\n   * //     c: {\n   * //       d: 1\n   * //     }\n   * //   },\n   * //   b: 2,\n   * // }\n   */\n  deepAssign(...objects) {\n    const object = this.$;\n\n    if (isPrimitive(object)) {\n      return this;\n    }\n\n    iterate(arguments, (o) => {\n      deepAssign(object, o);\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Super#deepClone\n   * @public\n   * @returns {DWrap} New instance of DWrap.\n   * @description Deep cloning method. Clones plain objects, arrays, regular expressions and elements, the rest stays the same.\n   *\n   * @example\n   * new Super({ a: 1, b: [2, 3], c: { d: 4 } }).deepClone().$;\n   * // {\n   * //   a: 1,\n   * //   b: [2, 3],\n   * //   c: { d: 4 }\n   * // }\n   */\n  deepClone() {\n    return new this.constructor(deepClone(this.$));\n  }\n\n  /**\n   * @method Super#deepEquals\n   * @public\n   * @param {*} [object] - Object to compare to.\n   * @returns {Boolean} - If the objects are deep equal or not.\n   * @description Method for deep comparison of two objects.\n   *\n   * @example\n   * new Super({ a: 1 }).deepEquals({ a: '1' }); // true\n   * new Super(/1/).deepEquals(/1/);             // true\n   */\n  deepEquals(object = null) {\n    return deepEqual(this.$, object, false);\n  }\n\n  /**\n   * @method Super#deepEvery\n   * @public\n   * @param {DeepIterationCallback} [callback = Boolean] - Called on each iteration.\n   * If returns truthy iteration goes on and if falsey it stops.\n   * @param {Number} [n = Infinity] - Iteration depth.\n   * @returns {Boolean} If all the callback calls returned truthy value.\n   * @description Returns boolean if all the callback calls returned truthy value.\n   * Otherwise false. Deep analogue of {@link Super#every}.\n   *\n   * @example\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepEvery((value) => value < 4); // true\n   * new Super({ a: {}, b: {}, c: {} }).deepEvery(() => false);              // true\n   */\n  deepEvery(callback, n) {\n    if (arguments.length === 1 && !isFunction(callback)) {\n      n = callback;\n      callback = Boolean;\n    } else if (arguments.length === 1) {\n      n = Infinity;\n    } else if (!arguments.length) {\n      n = Infinity;\n      callback = Boolean;\n    }\n\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepEvery');\n\n    n = Number(n);\n\n    return deepEvery(this.$, callback, n, [{ key: null, value: this.$ }]);\n  }\n\n  /**\n   * @method Super#deepFilter\n   * @public\n   * @param {DeepIterationCallback} [callback = Boolean] - Called on each iteration.\n   * If returns truthy the element is included and if falsey it's excluded.\n   * @param {Number} [n = Infinity] - Iteration depth.\n   * @returns {DWrap} New D-Wrap of filtered object.\n   * @description Returns filtered by the callback object. Deep analogue of {@link Super#filter}.\n   *\n   * @example\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFilter((value) => value%2).$;     // { a: 1, b: { d: 3 } }\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFilter((value) => value === 1).$; // { a: 1 }\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFilter((value) => value > 3).$;   // {}\n   */\n  deepFilter(callback, n) {\n    if (arguments.length === 1 && !isFunction(callback)) {\n      n = callback;\n      callback = Boolean;\n    } else if (arguments.length === 1) {\n      n = Infinity;\n    } else if (!arguments.length) {\n      n = Infinity;\n      callback = Boolean;\n    }\n\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepFilter');\n\n    const filtered = deepFilter(this.$, callback, n, [{ key: null, value: this.$ }]);\n\n    return D(isNil(filtered) ? filtered : filtered || {});\n  }\n\n  /**\n   * @method Super#deepFind\n   * @public\n   * @param {DeepIterationCallback} [callback = Boolean] - Called on each iteration.\n   * If returns truthy iteration stops and if falsey it continues.\n   * @param {Number} [n = Infinity] - Iteration depth.\n   * @returns {Tree|null} Tree of { key, value } if something found and null if not.\n   * @description Returns tree of the elements if something found and null if nothing found.\n   * Deep analogue of {@link Super#find}.\n   *\n   * @example\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFind((value) => value === 2);\n   * // [\n   * //   { key: 'c', value: 2 },\n   * //   { key: 'b', value: { c: 2, d: 3 } },\n   * //   { key: null, value: <initial object> }\n   * // ]\n   */\n  deepFind(callback, n) {\n    if (arguments.length === 1 && !isFunction(callback)) {\n      n = callback;\n      callback = Boolean;\n    } else if (arguments.length === 1) {\n      n = Infinity;\n    } else if (!arguments.length) {\n      n = Infinity;\n      callback = Boolean;\n    }\n\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepFind');\n\n    return deepFind(this.$, callback, n, [{ key: null, value: this.$ }]);\n  }\n\n  /**\n   * @method Super#deepForEach\n   * @public\n   * @param {DeepIterationCallback} callback - Called on each iteration.\n   * @param {Number} [n = Infinity] - Iteration depth.\n   * @returns {DWrap} Returns this.\n   * @description Method for iterating over any object. Deep analogue of {@link Super#forEach}.\n   *\n   * @example\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepForEach((value, key, object) => object[key] = value * value).$;\n   * // { a: 1, b: { c: 4, d: 9 } }\n   */\n  deepForEach(callback, n = Infinity) {\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepForEach');\n\n    n = Number(n);\n\n    deepForEach(this.$, callback, n, [{ key: null, value: this.$ }]);\n\n    return this;\n  }\n\n  /**\n   * @method Super#deepForEach\n   * @public\n   * @param {DeepIterationCallback} callback - Called on each iteration.\n   * @param {Number} [n = Infinity] - Iteration depth.\n   * @returns {DWrap} Returns this.\n   * @description Method for iterating over any object. Deep analogue of {@link Super#forEach}.\n   * Unlike {@link Super#deepForEach} the callback is called on every value of every object inside\n   *\n   * @example\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepForEach((value, key, object) => object[key] = value * value).$;\n   * // { a: 1, b: { c: 4, d: 9 } }\n   */\n  deepForEachEntry(callback, n = Infinity) {\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepForEach');\n\n    n = Number(n);\n\n    deepForEachEntry(this.$, callback, n, [{ key: null, value: this.$ }]);\n\n    return this;\n  }\n\n  /**\n   * @method Super#deepFreeze\n   * @public\n   * @returns {DWrap} Returns this.\n   * @description Deep analogue of {@link Super#freeze}.\n   *\n   * @example\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFreeze(); // Super\n   */\n  deepFreeze() {\n    deepFreeze(this.$);\n\n    return this;\n  }\n\n  /**\n   * @method Super#deepMap\n   * @public\n   * @param {DeepIterationCallback} callback - Called on each iteration.\n   * Return value is used for creating a new object.\n   * @param {Number} [n = Infinity] - Iteration depth.\n   * @returns {DWrap} D-Wrap of the new object.\n   * @description Returns a wrap of a new object using the callback. Deep analogue of {@link Super#map}.\n   *\n   * @example\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepMap((value) => value * value).$;\n   * // { a: 1, b: { c: 4, d: 9 } }\n   */\n  deepMap(callback, n = Infinity) {\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepMap');\n\n    n = Number(n);\n\n    return D(deepMap(this.$, callback, n, [{ key: null, value: this.$ }]));\n  }\n\n  /**\n   * @method Super#deepReduce\n   * @public\n   * @param {DeepReduceCallback} callback - Called on each iteration.\n   * Return value is passed to the next callback call.\n   * @param {Number} [n = Infinity] - Iteration depth.\n   * @param {*} [IV = <first value>|undefined] - Initial value.\n   * @returns {*} Modified IV.\n   * @description Returns modified IV. Deep analogue of {@link Super#reduce}.\n   *\n   * @example\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepReduce((sum, value) => sum + value * value, Infinity, 0); // 14\n   */\n  deepReduce(callback, n = Infinity, IV) {\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepReduce');\n\n    n = Number(n);\n\n    const object = this.$;\n    const tree = [{ key: null, value: this.$ }];\n\n    if (arguments.length < 3) {\n      return deepReduce(object, callback, n, false, undefined, tree).IV;\n    }\n\n    return deepReduce(object, callback, n, false, { IV }, tree).IV;\n  }\n\n  /**\n   * @method Super#deepSome\n   * @public\n   * @param {DeepIterationCallback} [callback = Boolean] - Called on each iteration.\n   * If returns truthy iteration stops and if falsey it continues.\n   * @param {Number} [n = Infinity] - Iteration depth.\n   * @returns {Boolean} If all the callback calls returned truthy value.\n   * @description Returns true if some of the callback calls returned truthy value.\n   * Otherwise false. Deep analogue of {@link Super#some}.\n   *\n   * @example\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepSome((value) => value > 4); // false\n   * new Super({ a: {}, b: {}, c: {} }).deepSome(() => true);               // false\n   */\n  deepSome(callback, n) {\n    if (arguments.length === 1 && !isFunction(callback)) {\n      n = callback;\n      callback = Boolean;\n    } else if (arguments.length === 1) {\n      n = Infinity;\n    } else if (!arguments.length) {\n      n = Infinity;\n      callback = Boolean;\n    }\n\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepSome');\n\n    n = Number(n);\n\n    return deepSome(this.$, callback, n, [{ key: null, value: this.$ }]);\n  }\n\n  /**\n   * @method Super#deepStrictEquals\n   * @public\n   * @param {*} [object] - Object to compare to.\n   * @returns {Boolean} - If the objects are deep strict equal or not.\n   * @description Method for deep strict comparison of two objects.\n   *\n   * @example\n   * new Super({ a: 1 }).deepStrictEquals({ a: '1' }); // false\n   * new Super(/1/).deepStrictEquals(/1/);             // true\n   */\n  deepStrictEquals(object = null) {\n    return deepEqual(this.$, object, true);\n  }\n\n  /**\n   * @method Super#define\n   * @param {String|Object} property - Either a string of a property or a descriptors object.\n   * @param {Object} [descriptor] - If a property parameter is a string this has to be a property descriptor.\n   * @returns {DWrap} Returns this.\n   * @description Synonym for both\n   * [Object.defineProperty]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty}\n   * and\n   * [Object.defineProperties]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties}.\n   *\n   * @example\n   * new Super({}).define('a', {\n   *   value: 1,\n   *   enumerable: false,\n   *   writable: true,\n   *   configurable: false\n   * }).$; // { a: 1 }\n   * new Super({}).define({\n   *   a: {\n   *     value: 1,\n   *     enumerable: false,\n   *     writable: true,\n   *     configurable: false\n   *   }\n   * }).$; // { a: 1 }\n   */\n  define(property, descriptor) {\n    if (arguments.length >= 2) {\n      property = { [property]: descriptor };\n    }\n\n    property = new Super(property).$;\n\n    if (isObject(this.$)) {\n      Object.defineProperties(this.$, property);\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Super#delete\n   * @public\n   * @param {...String} props - List of properties to delete.\n   * @returns {DWrap} Returns this.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/delete\n   * @description Synonym for multiple\n   * [\"delete\" operator]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/delete}.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).delete('c', 'a').$; // { b: 2 }\n   */\n  delete(...props) {\n    const object = this.$;\n\n    iterate(object && props, (property) => {\n      delete object[property];\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Super#equals\n   * @public\n   * @param {*} [object] - Object to compare.\n   * @returns {Boolean} If the objects are equal or not.\n   * @description Returns true if objects are equal using '==' operator and false if not. NaNs are considered to be equal.\n   *\n   * @example\n   * new Super(3).equals('3');   // true\n   * new Super(NaN).equals(NaN); // true\n   */\n  equals(object) {\n    const o = this.$;\n\n    object = new Super(object).$;\n\n    /* eslint eqeqeq: 0 */\n    return o == object || (isNaN(o) && isNaN(object));\n  }\n\n  /**\n   * @method Super#every\n   * @public\n   * @param {IterationCallback} [callback = Boolean] - Called on each iteration.\n   * If returns truthy iteration goes on and if falsey it stops.\n   * @returns {Boolean} If all the callback calls returned truthy value.\n   * @description Returns boolean if all the callback calls returned truthy value.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).every((value) => value < 4); // true\n   * new Super({}).every(() => false);                            // true\n   */\n  every(callback = Boolean) {\n    validate([callback], ['function'], 'Super#every');\n\n    return iterate(this.$, (value, key, object) => {\n      if (!callback(value, key, object)) {\n        return false;\n      }\n    }) !== false;\n  }\n\n  /**\n   * @method Super#except\n   * @public\n   * @param {...String} [props] - Props to filter.\n   * @returns {DWrap} New D-Wrap of filtered object.\n   * @description Returns filter by the props object.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).except('a', 'b').$; // { c: 3 }\n   * new Super(null).except('a').$;                      // {}\n   */\n  except(...props) {\n    return this.filter((value, key) => props.indexOf(key) === -1);\n  }\n\n  /**\n   * @method Super#filter\n   * @public\n   * @param {IterationCallback} [callback = Boolean] - Called on each iteration.\n   * If returns truthy the element is included and if falsey it's excluded.\n   * @returns {DWrap} New D-Wrap of filtered object.\n   * @description Returns filtered by the callback object.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).filter((value) => value%2).$; // { a: 1, c: 3 }\n   * new Super(null).filter((value) => value%2).$;                 // null\n   */\n  filter(callback = Boolean) {\n    validate([callback], ['function'], 'Super#filter');\n\n    const object = this.$;\n    const array = isArrayLike(object);\n\n    /* eslint no-nested-ternary: 0 */\n    const o = array ? [] : isNil(object) ? object : {};\n\n    iterate(object, (value, key) => {\n      if (callback(value, key, object)) {\n        if (array) {\n          o.push(value);\n        } else {\n          o[key] = value;\n        }\n      }\n    });\n\n    return D(o);\n  }\n\n  /**\n   * @method Super#find\n   * @public\n   * @param {IterationCallback} [callback = Boolean] - Called on each iteration.\n   * If returns truthy iteration stops and if falsey it continues.\n   * @returns {{ key: Key, value: * }|null} { key, value } if found and null if not.\n   * @description Returns found { key, value } if something found and null if nothing found.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).find((value) => value === 2); // { key: 'b', value: 2 }\n   * new Super([1, 2, 3]).find((value) => value === 2);            // { key: 1, value: 2 }\n   */\n  find(callback) {\n    validate([callback], ['function'], 'Super#find');\n\n    return iterate(this.$, (value, key, object) => {\n      if (callback(value, key, object)) {\n        return { key, value };\n      }\n    }) || null;\n  }\n\n  /**\n   * @method Super#forEach\n   * @public\n   * @param {IterationCallback} callback - Called on each iteration.\n   * @returns {DWrap} Returns this.\n   * @description Method for iterating over any object.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).forEach((value, key, object) => {\n   *   object[key] = value * value;\n   * }).$; // { a: 1, b: { c: 4, d: 5 } }\n   */\n  forEach(callback) {\n    validate([callback], ['function'], 'Super#forEach');\n\n    iterate(this.$, (value, key, object) => {\n      callback(value, key, object);\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Super#freeze\n   * @public\n   * @returns {DWrap} Returns this.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\n   * @description Synonym for\n   * [Object.freeze]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze}.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).freeze(); // Super\n   */\n  freeze() {\n    Object.freeze(this.$);\n\n    return this;\n  }\n\n  /**\n   * @method Super#get\n   * @public\n   * @param {String|Object.<String, Function>} property - Either a string of a property or a getters object.\n   * @param {Function} [getter] - If a property parameter is a string this has to be a getter function.\n   * @returns {DWrap} Returns this.\n   * @description Method for defining getters.\n   *\n   * @example\n   * const object1 = new Super({}).get('a', () => 1).$;\n   * object1.a; // 1\n   *\n   * const object2 = new Super({}).get({\n   *   a: () => 2\n   * }).$;\n   * object2.a; // 2\n   */\n  get(property, getter) {\n    if (arguments.length >= 2) {\n      property = { [property]: getter };\n    }\n\n    const object = this.$;\n\n    iterate(isObject(object) && new Super(property).$, (getter, property) => {\n      Object.defineProperty(object, property, { get: getter });\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Super#has\n   * @public\n   * @param {String|*} key - Property to check.\n   * @returns {Boolean} Returns true if the object has the key and false if not.\n   * @see https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/in\n   * @description Synonym for\n   * [\"in\" operator]{@link https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/in}.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).has('b'); // true\n   */\n  has(key) {\n    const object = this.$;\n\n    if (!isObject(object)) {\n      return false;\n    }\n\n    return key in object;\n  }\n\n  /**\n   * @method Super#hasOwn\n   * @public\n   * @param {String|*} key - Property to check.\n   * @returns {Boolean} Returns true if the object has its own key and false if not.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\n   * @description Synonym for\n   * [Object#hasOwnProperty]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty}.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).hasOwn('b');              // true\n   * new Super({ a: 1, b: 2, c: 3 }).hasOwn('hasOwnProperty'); // false\n   */\n  hasOwn(key) {\n    const object = this.$;\n\n    if (!isObject(object)) {\n      return false;\n    }\n\n    return {}.hasOwnProperty.call(object, key);\n  }\n\n  /**\n   * @method Super#instanceof\n   * @public\n   * @param {Function} constructor - Constructor to check.\n   * @returns {Boolean} If the object is an instance of constructor.\n   * @see https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/instanceof\n   * @description Synonym for\n   * [\"instanceof\" operator]{@link https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/instanceof}.\n   */\n  instanceof(constructor) {\n    return this.$ instanceof constructor;\n  }\n\n  /**\n   * @method Super#isFrozen\n   * @public\n   * @returns {Boolean} If the object is frozen.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n   * @description Synonym for\n   * [Object.isFrozen]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen}.\n   *\n   * @example\n   * new Super({}).freeze().isFrozen(); // true\n   */\n  isFrozen() {\n    return Object.isFrozen(this.$);\n  }\n\n  /**\n   * @method Super#json\n   * @public\n   * @param {JSONCallback|String[]} [replacer] - See the link.\n   * @param {String|Number} [space] - See the link.\n   * @returns {String} JSON string.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\n   * @description Synonym for\n   * [JSON.stringify]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify}.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).json(); // '{\"a\":1,\"b\":2,\"c\":3}'\n   * new Super({ a: 1, b: 2, c: 3 }).json('    ');\n   * // {\n   * //     \"a\": 1,\n   * //     \"b\": 2,\n   * //     \"c\": 3\n   * // }\n   * new Super({ a: 1, b: 2, c: 3 }).json((key, value) => {\n   *   if (typeof value === 'number') {\n   *     return value%2 ? key + value0 : undefined;\n   *   }\n   *\n   *   return value;\n   * }, 2);\n   * // {\n   * //   \"a\": \"a1\",\n   * //   \"c\": \"c3\"\n   * // }\n   */\n  json(replacer, space) {\n    if (arguments.length === 1 && !isFunction(replacer) && !isArray(replacer)) {\n      [].unshift.call(arguments, null);\n    }\n\n    [].unshift.call(arguments, this.$);\n\n    return JSON.stringify.apply(JSON, arguments);\n  }\n\n  /**\n   * @method Super#keyOf\n   * @public\n   * @param {*} value - Value to find.\n   * @returns {String|Number|null} A key or an index if found and null if not.\n   * @description Method for finding equal to the argument value in the object. NaNs are considered to be equal.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).keyOf(2);   // 'b'\n   * new Super({ a: 1, b: 2, c: 3 }).keyOf('2'); // 'b'\n   */\n  keyOf(value) {\n    const key = iterate(this.$, (val, key) => {\n      if (val == value || (isNaN(val) && isNaN(value))) {\n        return key;\n      }\n    });\n\n    return isUndefined(key) ? null : key;\n  }\n\n  /**\n   * @method Super#keyOfStrict\n   * @public\n   * @param {*} value - Value to find.\n   * @returns {String|Number|null} A key or an index if found and null if not.\n   * @description Method for finding strict equal to the argument value in the object. NaNs are considered to be equal.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).keyOfStrict(2);   // 'b'\n   * new Super({ a: 1, b: 2, c: 3 }).keyOfStrict('2'); // 'b'\n   */\n  keyOfStrict(value) {\n    const key = iterate(this.$, (val, key) => {\n      if (val === value || (isNaN(val) && isNaN(value))) {\n        return key;\n      }\n    });\n\n    return isUndefined(key) ? null : key;\n  }\n\n  /**\n   * @method Super#keys\n   * @public\n   * @returns {DWrap} A wrap of the keys array.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\n   * @description Synonym for\n   * [Object.keys]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/keys}.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).keys().$; // ['a', 'b', 'c']\n   * new Super(null).keys().$;                 // []\n   */\n  keys() {\n    const object = this.$;\n\n    return D(isObject(object) ? Object.keys(object) : []);\n  }\n\n  /**\n   * @method Super#map\n   * @public\n   * @param {IterationCallback} callback - Called on each iteration.\n   * Return value is used for creating a new object.\n   * @returns {DWrap} D-Wrap of the new object.\n   * @description Returns a wrap of a new object using the callback.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).map((value) => value * 2).$; // { a: 2, b: 4, c: 6 }\n   * new Super(null).map((value) => value * 2).$;                 // null\n   */\n  map(callback) {\n    validate([callback], ['function'], 'Super#map');\n\n    const object = this.$;\n    const o = isArrayLike(object) ? [] : isNull(object) ? null : {};\n\n    iterate(object, (value, key) => {\n      o[key] = callback(value, key, object);\n    });\n\n    return D(o);\n  }\n\n  /**\n   * @method Super#max\n   * @public\n   * @param {IterationCallback} callback - Called on each iteration.\n   * Return value is used for comparison with the previous max value.\n   * @returns {{key: Key, value: Number}} Object with max value and key of the max value.\n   * @description Method for finding max value in the object.\n   * If no callback is present comparison is between values of the object.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).max();                     // { key: 'c', value: 3 }\n   * new Super({ a: 1, b: 2, c: 3 }).max((value) => 4 - value); // { key: 'a', value: 3 }\n   * new Super({ a: 'a', b: 'b', c: 'c' }).max();               // { key: null, value: -Infinity }\n   */\n  max(callback = null) {\n    validate([callback], ['function||!'], 'Super#max');\n\n    return this.object((max, value, key, object) => {\n      const val = Number(callback ? callback(value, key, object) : value);\n\n      if (val > max.value) {\n        max.key = key;\n        max.value = val;\n      }\n    }, { key: null, value: -Infinity }).$;\n  }\n\n  /**\n   * @method Super#min\n   * @public\n   * @param {IterationCallback} callback - Called on each iteration.\n   * Return value is used for comparison with the previous min value.\n   * @returns {{key: Key, value: Number}} Object with min value and key of the min value.\n   * @description Method for finding min value in the object.\n   * If no callback is present comparison is between values of the object.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).min();                     // { key: 'a', value: 1 }\n   * new Super({ a: 1, b: 2, c: 3 }).min((value) => 4 - value); // { key: 'c', value: 1 }\n   * new Super({ a: 'a', b: 'b', c: 'c' }).min();               // { key: null, value: Infinity }\n   */\n  min(callback = null) {\n    validate([callback], ['function||!'], 'Super#min');\n\n    return this.object((min, value, key, object) => {\n      const val = Number(callback ? callback(value, key, object) : value);\n\n      if (val < min.value) {\n        min.key = key;\n        min.value = val;\n      }\n    }, { key: null, value: Infinity }).$;\n  }\n\n  /**\n   * @method Super#object\n   * @public\n   * @param {ObjectCallback} callback - Called on each iteration.\n   * @param {Object|*} [object = {}] - Object that is passed to the callback.\n   * @returns {DWrap} Wrap of the new object.\n   * @description Type of {@link Super#reduce}.\n   * The object is passed as an argument into the callback. The output is this object.\n   *\n   * @example\n   * new Super({ a: 1, b: 2 }).object((object, value, key) => {\n   *   object[key] = value;\n   *   object[key + key] = value * 2;\n   * }).$; // { a: 1, aa: 2, b: 2, bb: 4 }\n   */\n  object(callback, object = {}) {\n    validate([callback], ['function'], 'Super#object');\n\n    iterate(this.$, (value, key, obj) => {\n      callback(object, value, key, obj);\n    });\n\n    return D(object);\n  }\n\n  /**\n   * @method Super#prop\n   * @public\n   * @param {String|Object.<String, *>} property - Either a string of a property or an assigned object.\n   * @param {*} [value] - If a property parameter is a string\n   * this has to be an assigned value if it's present.\n   * @returns {DWrap|*} Returns this if it's a setter or a value if getter.\n   * @description Method for getting and setting properties.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).prop('a');              // 1\n   * new Super({ a: 1, b: 2, c: 3 }).prop('a', 7).$;         // { a: 7, b: 2, c: 3 }\n   * new Super({ a: 1, b: 2, c: 3 }).prop({ a: 7, b: 8 }).$; // { a: 7, b: 8, c: 3 }\n   */\n  prop(property, value) {\n    if (arguments.length <= 1 && isString(property)) {\n      return this.$ ? this.$[property] : undefined;\n    }\n\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    return this.assign(property);\n  }\n\n  /**\n   * @method Super#propertyDescriptor\n   * @public\n   * @param {String} property - Property of the object.\n   * @returns {Object|undefined} Property descriptor.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\n   * @descriptor Synonym for\n   * [Object.getOwnPropertyDescriptor]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor}.\n   *\n   * @example\n   * new Super({ a: 1 }).propertyDescriptor('a');\n   * // {\n   * //   value: 1,\n   * //   enumerable: true,\n   * //   writable: true,\n   * //   configurable: true\n   * // }\n   */\n  propertyDescriptor(property) {\n    const object = this.$;\n\n    return isObject(object) ? Object.getOwnPropertyDescriptor(object, property) : undefined;\n  }\n\n  /**\n   * @method Super#propertyNames\n   * @public\n   * @returns {DWrap} D-Wrap of the names array.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\n   * @descriptor Synonym for\n   * [Object.getOwnPropertyNames]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames}.\n   *\n   * @example\n   * new Super({ a: 1, b: 2 }).define('c', { value: 3 }).$; // ['a', 'b', 'c']\n   */\n  propertyNames() {\n    const object = this.$;\n\n    return D(isObject(object) ? Object.getOwnPropertyNames(object) : []);\n  }\n\n  /**\n   * @method Super#propertySymbols\n   * @public\n   * @returns {DWrap} D-Wrap of the names array.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\n   * @descriptor Synonym for\n   * [Object.getOwnPropertySymbols]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols}.\n   *\n   * @example\n   * new Super({ [Symbol('foo')]: 1 }).define(Symbol('bar'), { value: 2 }).$; // [Symbol('foo'), Symbol('bar')]\n   */\n  propertySymbols() {\n    const object = this.$;\n\n    return D(isObject(object) ? Object.getOwnPropertySymbols(object) : []);\n  }\n\n  /**\n   * @method Super#proto\n   * @public\n   * @param {*} [proto] - If it's present it's set as a prototype to the object.\n   * @returns {DWrap} In getter mode returns wrap of the prototype and in setter mode returns this.\n   * @description Synonym for both\n   * [Object.getPrototypeOf]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf}\n   * and\n   * [Object.setPrototypeOf]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf}.\n   */\n  proto(proto) {\n    const object = this.$;\n    const isContextObject = !isNil(object);\n\n    if (arguments.length) {\n      if (isContextObject && (isObject(proto) || isNull(proto))) {\n        Object.setPrototypeOf(object, proto);\n      }\n\n      return this;\n    }\n\n    return isContextObject ? new Super(Object.getPrototypeOf(object)) : new Super();\n  }\n\n  /**\n   * @method Super#reduce\n   * @public\n   * @param {ReduceCallback} callback - Called on each iteration.\n   * Return value is passed to the next callback call.\n   * @param {*} [IV = <first value>|undefined] - Initial value.\n   * @returns {*} Modified IV.\n   * @description Returns modified IV. If the second argument is not present first value in the object is taken\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).reduce((sum, value) => sum + value * value, 0); // 14\n   */\n  reduce(callback, IV) {\n    validate([callback], ['function'], 'Super#reduce');\n\n    const object = this.$;\n\n    let startKey;\n\n    if (arguments.length === 1) {\n      iterate(object, (value, key) => {\n        startKey = key;\n        IV = value;\n\n        return true;\n      });\n    }\n\n    iterate(object, (value, key) => {\n      if (key !== startKey) {\n        IV = callback(IV, value, key, object);\n      }\n    });\n\n    return IV;\n  }\n\n  /**\n   * @method Super#set\n   * @public\n   * @param {String|Object.<String, Function>} property - Either a string of a property or a setters object.\n   * @param {Function} [setter] - If a property parameter is a string this has to be a setter function.\n   * @returns {DWrap} Returns this.\n   * @description Method for defining setters.\n   *\n   * @example\n   * const object = new Super({})\n   *   .get('public', function () {\n   *     return this._private;\n   *   })\n   *   .set('public', function (value) {\n   *     if (typeof value === 'number') {\n   *       this._private = value;\n   *     }\n   *   });\n   * object.prop('public', '1').$; // { public: undefined }\n   * object.prop('public', 1).$;   // { public: 1, _private: 1 }\n   *\n   * new Super({}).set({\n   *   public(value) {\n   *     if (typeof value === 'number') {\n   *       this._private = value;\n   *     }\n   *   }\n   * });\n   */\n  set(property, setter) {\n    if (arguments.length >= 2) {\n      property = { [property]: setter };\n    }\n\n    const object = this.$;\n\n    iterate(isObject(object) && new Super(property).$, (setter, property) => {\n      Object.defineProperty(object, property, { set: setter });\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Super#some\n   * @public\n   * @param {IterationCallback} [callback = Boolean] - Called on each iteration.\n   * If returns truthy iteration stops and if falsey it continues.\n   * @returns {Boolean} If all the callback calls returned truthy value.\n   * @description Returns true if some of the callback calls returned truthy value. Otherwise false.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).some((value) => value > 4); // false\n   * new Super({}).some(() => true);                             // false\n   */\n  some(callback = Boolean) {\n    validate([callback], ['function'], 'Super#some');\n\n    return iterate(this.$, (value, key, object) => {\n      if (callback(value, key, object)) {\n        return true;\n      }\n    }) || false;\n  }\n\n  /**\n   * @method Super#strictEquals\n   * @public\n   * @param {*} [object] - Object to compare.\n   * @returns {Boolean} If the objects are equal or not.\n   * @description Returns true if objects are equal using '===' operator and false if not.\n   * NaNs are considered to be strict equal.\n   *\n   * @example\n   * new Super(3).strictEquals('3');   // false\n   * new Super(NaN).strictEquals(NaN); // true\n   */\n  strictEquals(object) {\n    const o = this.$;\n\n    object = new Super(object).$;\n\n    return o === object || (isNaN(o) && isNaN(object));\n  }\n\n  /**\n   * @method Super#sum\n   * @public\n   * @param {IterationCallback} [callback = null] - Called on each iteration.\n   * @returns {Number} Sum.\n   * @description Type of {@link Super#reduce}.\n   * If the callback is present it's used for summing. If not the value is used.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).sum();                         // 6\n   * new Super({ a: 1, b: 2, c: 3 }).sum((value) => value * value); // 14\n   */\n  sum(callback = null) {\n    validate([callback], ['function||!'], 'Super#sum');\n\n    return this.reduce((sum, value, key, object) => (\n      sum + Number(callback ? callback(value, key, object) : value)\n    ), 0);\n  }\n\n  toJSON() {\n    return this.$;\n  }\n\n  /**\n   * @member Super#toStringTag\n   * @type {String}\n   * @public\n   * @readonly\n   * @description Returns toString tag of the object.\n   *\n   * @example\n   * new Super({}).toStringTag; // 'Object'\n   * new Super([]).toStringTag; // 'Array'\n   * new Super(1).toStringTag;  // 'Number'\n   */\n  get toStringTag() {\n    return toStringTag(this.$);\n  }\n\n  /**\n   * @member Super#type\n   * @type {String}\n   * @public\n   * @readonly\n   * @description Synonym for\n   * [\"typeof\" operator]{@link https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/instanceof}..\n   *\n   * @example\n   * new Super({}).type;   // 'object'\n   * new Super(1).type;    // 'number'\n   * new Super('1').type;  // 'string'\n   * new Super(true).type; // 'boolean'\n   */\n  get type() {\n    return typeof this.$;\n  }\n\n  /**\n   * @method Super#value\n   * @public\n   * @param {String|Object.<String, *>} property - Either a string of a property or a values object.\n   * @param {Object.<String, *>} [value] - If a property parameter is a string this has to be a value to be set.\n   * @returns {DWrap} Returns this.\n   * @description Method for defining non-enumerable, non-writable, non-configurable values.\n   * Synonym for object.define(property, { value: value }).\n   *\n   * @example\n   * new Super({}).value('a', 1).$; // { a: 1 }\n   * new Super({}).value({\n   *   a: 1\n   * }).$;                          // { a: 1 }\n   */\n  value(property, value) {\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    const object = this.$;\n\n    iterate(isObject(object) && new Super(property).$, (value, property) => {\n      Object.defineProperty(object, property, { value });\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Super#values\n   * @public\n   * @returns {DWrap} A wrap of the values array.\n   * @description Returns D-Wrap of the values array.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).values().$; // [1, 2, 3]\n   * new Super(null).values().$;                 // []\n   */\n  values() {\n    const array = [];\n\n    iterate(this.$, (value) => {\n      array.push(value);\n    });\n\n    return D(array);\n  }\n\n  /**\n   * @method Super#word\n   * @public\n   * @param {IterationCallback} callback - Called on each iteration.\n   * @returns {String} Concatenated string.\n   * @description Type of {@link Super#reduce}.\n   * If the callback is present it's used for concatenating. If not the value is used.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).word();                         // '123'\n   * new Super({ a: 1, b: 2, c: 3 }).word((value) => value + value); // '112233'\n   */\n  word(callback = null) {\n    validate([callback], ['function||!'], 'Super#word');\n\n    return this.reduce((word, value, key, object) => (\n      word + String(callback ? callback(value, key, object) : value)\n    ), '');\n  }\n}\n\ndefineProperties(Super.prototype, {\n  [Symbol.toStringTag]: 'Super'\n});\n\n/**\n * @function deepAssign\n * @private\n * @param {*} target - Object to assign properties to.\n * @param {*} object - Object to assign properties from.\n * @returns {void}\n */\nfunction deepAssign(target, object) {\n  iterate(object, (value, key) => {\n    if (isPrimitive(target[key]) || !{}.hasOwnProperty.call(target, key)) {\n      target[key] = deepClone(value);\n\n      return;\n    }\n\n    if (!isPrimitive(target[key])) {\n      deepAssign(target[key], value);\n    }\n  });\n}\n\n/**\n * @function deepClone\n * @private\n * @param {*} object - Object to clone.\n * @description Does the deep cloning.\n */\nfunction deepClone(object) {\n  const clone = cloneSwitcher(object, [object, true]);\n\n  if (clone !== object) {\n    iterate(object, (value, key) => {\n      clone[key] = deepClone(value);\n    });\n  }\n\n  return clone;\n}\n\n/**\n * @function deepEqual\n * @private\n * @param {*} o1 - First object to compare.\n * @param {*} o2 - Second object to compare.\n * @param {Boolean} strict - If comparison should be strict or not.\n * @returns {Boolean} - If the object are deep equal or not.\n */\nfunction deepEqual(o1, o2, strict) {\n  if (o1 === o2) {\n    return true;\n  }\n\n  if (isNaN(o1) && isNaN(o2) && isPrimitive(o1) && isPrimitive(o2)) {\n    return true;\n  }\n\n  if (isNaN(o1) || isNaN(o2)) {\n    return false;\n  }\n\n  if (isPrimitive(o1) || isPrimitive(o2)) {\n    return strict ? o1 === o2 : o1 == o2;\n  }\n\n  if (isDate(o1) && isDate(o2)) {\n    return o1.getTime() === o2.getTime();\n  }\n\n  if (isDate(o1) || isDate(o2)) {\n    return false;\n  }\n\n  if (isRegExp(o1) && isRegExp(o2)) {\n    return o1.source === o2.source &&\n      o1.toString().match(/[gimuy]*$/)[0] === o2.toString().match(/[gimuy]*$/)[0] &&\n      o1.lastIndex === o2.lastIndex;\n  }\n\n  if (isRegExp(o1) || isRegExp(o2)) {\n    return false;\n  }\n\n  if ((!isPlainObject(o1) && !isArray(o1)) || (!isPlainObject(o2) && !isArray(o2))) {\n    return false;\n  }\n\n  const p1 = Object.getPrototypeOf(o1);\n  const p2 = Object.getPrototypeOf(o1);\n\n  if (Object.keys(o1).length !== Object.keys(o2).length) {\n    return false;\n  }\n\n  if (p1 && p2 && (toStringTag(p1.constructor) !== toStringTag(p2.constructor))) {\n    return false;\n  }\n\n  return iterate(o1, (value, key) => {\n    if (!(key in o2) || !deepEqual(value, o2[key], strict)) {\n      return false;\n    }\n  }) !== false;\n}\n\n/**\n * @function deepEvery\n * @private\n * @param {*} object - Object to iterate over.\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\n * If returns truthy the iteration goes on and if not it stops.\n * @param {Number} n - Depth of iteration.\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\n * @returns {Boolean} - If all the callback calls returned truthy value.\n */\nfunction deepEvery(object, callback, n, tree) {\n  const end = n === 1;\n\n  return iterate(object, (value, key, object) => {\n    const newTree = [{ key, value }].concat(tree);\n\n    if (\n      end || isPrimitive(value)\n        ? !callback(value, key, object, newTree)\n        : !deepEvery(value, callback, n - 1, newTree)\n    ) {\n      return false;\n    }\n  }) !== false;\n}\n\n/**\n * @function deepFilter\n * @private\n * @param {*} object - Object to iterate over.\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\n * If returns truthy the element is included in the output and if not it's excluded.\n * @param {Number} n - Depth of iteration.\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\n * @returns {*} Filtered object.\n */\nfunction deepFilter(object, callback, n, tree) {\n  const array = isArrayLike(object);\n  const nul = isNil(object);\n  const o = array ? [] : nul ? object : {};\n  const end = n === 1;\n\n  iterate(object, (value, key, object) => {\n    const newTree = [{ key, value }].concat(tree);\n\n    if ((end || isPrimitive(value)) && callback(value, key, object, newTree)) {\n      if (array) {\n        o.push(value);\n      } else {\n        o[key] = value;\n      }\n\n      return;\n    }\n\n    if (!end) {\n      const filtered = deepFilter(value, callback, n - 1, newTree);\n\n      if (filtered) {\n        if (array) {\n          o.push(filtered);\n        } else {\n          o[key] = filtered;\n        }\n      }\n    }\n  });\n\n  if (array) {\n    return o.length ? o : undefined;\n  }\n\n  if (!nul) {\n    return Object.keys(o).length ? o : undefined;\n  }\n\n  return o;\n}\n\n/**\n * @function deepFind\n * @private\n * @param {*} object - Object to iterate over.\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\n * If returns truthy the iteration stops and if not it continues.\n * @param {Number} n - Depth of iteration.\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\n * @returns {Tree|null} - If found the whole tree is returned and if not it's null what's returned.\n */\nfunction deepFind(object, callback, n, tree) {\n  const end = n === 1;\n\n  return iterate(object, (value, key, object) => {\n    const newTree = [{ key, value }].concat(tree);\n\n    if (end || isPrimitive(value)) {\n      if (callback(value, key, object, newTree)) {\n        return newTree;\n      }\n\n      return;\n    }\n\n    const result = deepFind(value, callback, n - 1, newTree);\n\n    if (result) {\n      return result;\n    }\n  }) || null;\n}\n\n/**\n * @function deepForEach\n * @private\n * @param {*} object - Object to iterate over.\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\n * @param {Number} n - Depth of iteration.\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\n * @returns {void}\n */\nfunction deepForEach(object, callback, n, tree) {\n  const end = n === 1;\n\n  iterate(object, (value, key, object) => {\n    const newTree = [{ key, value }].concat(tree);\n\n    if (end || isPrimitive(value)) {\n      callback(value, key, object, newTree);\n    } else {\n      deepForEach(value, callback, n - 1, newTree);\n    }\n  });\n}\n\n/**\n * @function deepForEachEntry\n * @private\n * @param {*} object - Object to iterate over.\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\n * @param {Number} n - Depth of iteration.\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\n * @returns {void}\n */\nfunction deepForEachEntry(object, callback, n, tree) {\n  const end = n === 1;\n\n  iterate(object, (value, key, object) => {\n    const newTree = [{ key, value }].concat(tree);\n\n    callback(value, key, object, newTree);\n\n    if (!end && !isPrimitive(value)) {\n      deepForEachEntry(value, callback, n - 1, newTree);\n    }\n  });\n}\n\n/**\n * @function deepFreeze\n * @private\n * @param {*} object - Object to freeze.\n * @returns {void}\n */\nfunction deepFreeze(object) {\n  Object.freeze(object);\n  iterate(object, deepFreeze);\n}\n\n/**\n * @function deepMap\n * @private\n * @param {*} object - Object to iterate over.\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\n * Returned value is used to create to new object.\n * @param {Number} n - Depth of iteration.\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\n * @returns {*} New object.\n */\nfunction deepMap(object, callback, n, tree) {\n  const o = isArrayLike(object) ? [] : isNil(object) ? object : {};\n  const end = n === 1;\n\n  iterate(object, (value, key, object) => {\n    const newTree = [{ key, value }].concat(tree);\n\n    o[key] = end || isPrimitive(value)\n      ? callback(value, key, object, newTree)\n      : deepMap(value, callback, n - 1, newTree);\n  });\n\n  return o;\n}\n\n/**\n * @function deepReduce\n * @private\n * @param {*} object - Object to iterate over.\n * @param {DeepReduceCallback} callback - Callback that is called on every element.\n * Returned value is used to create to new object.\n * @param {Number} n - Depth of iteration.\n * @param {Boolean} start - If callback was called already or not.\n * @param {{ IV: * }|undefined} IV - If callback was called already or not.\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\n * @returns {{ IV: * }} Transformed IV.\n */\nfunction deepReduce(object, callback, n, start, IV, tree) {\n  const end = n === 1;\n\n  iterate(object, (value, key, object) => {\n    if (!IV && (end || isPrimitive(value)) && !start) {\n      IV = { IV: value };\n      start = true;\n\n      return;\n    }\n\n    const newTree = [{ key, value }].concat(tree);\n\n    IV = end || isPrimitive(value)\n      ? { IV: callback(IV.IV, value, key, object, newTree) }\n      : deepReduce(value, callback, n - 1, start, IV, newTree);\n  });\n\n  return IV;\n}\n\n/**\n * @function deepSome\n * @private\n * @param {*} object - Object to iterate over.\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\n * If returns truthy the iteration stops and if not it continues.\n * @param {Number} n - Depth of iteration.\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\n * @returns {Boolean} - If some of the callback calls returned truthy value.\n */\nfunction deepSome(object, callback, n, tree) {\n  const end = n === 1;\n\n  return iterate(object, (value, key, object) => {\n    const newTree = [{ key, value }].concat(tree);\n\n    if (\n      end || isPrimitive(value)\n        ? callback(value, key, object, newTree)\n        : deepSome(value, callback, n - 1, newTree)\n    ) {\n      return true;\n    }\n  }) || false;\n}\n\nconstructors[0].push({\n  check: () => true,\n  cls: Super\n});\n\nexport { Super };\n","/**\n * @module Func\n * @private\n * @mixin\n * @description Exports Func class.\n */\n\nimport { Super } from './Super';\nimport { Promise } from './Promise';\nimport { constructors } from './constants';\nimport { isFunction, validate, toArray, Symbol, defineProperties, iterate } from './helpers';\n\n/**\n * @callback BeforeMiddleware\n * @param {Array} args - Previous arguments.\n * @param {Func} func - This function.\n * @returns {Array} - New arguments.\n */\n\n/**\n * @callback AfterMiddleware\n * @param {*} returnValue - Previous return value.\n * @param {Func} func - This function.\n * @returns {*} - New return value.\n */\n\n/**\n * @class Func\n * @extends Super\n * @public\n * @param {Function} [func = function () {}] - Function to wrap.\n * @returns {Func} Instance of Func.\n * @description A wrap of a function.\n *\n * @example\n * const func = new Func(Math.max);\n *\n * func(1, 4, -2, 5); // 5\n */\nclass Func extends Super {\n  constructor(func = () => {}) {\n    super();\n\n    function proxy() {\n      if (++proxy.$$.called < proxy.$$.canBeCalled) {\n        const { before, after, sync, contextLocked } = proxy.$$;\n        let { context, args } = proxy.$$;\n        let ret;\n\n        context = contextLocked ? context : context || this;\n        args = args.concat(toArray(arguments));\n\n        if (sync) {\n          iterate(before, (middleware) => {\n            args = middleware.call(context, toArray(args), proxy);\n          });\n\n          ret = func.apply(context, toArray(args));\n\n          iterate(after, (middleware) => {\n            ret = middleware.call(context, ret, proxy);\n          });\n\n          return ret;\n        }\n\n        let promise = Promise.resolve(args);\n\n        iterate(before, (middleware) => {\n          promise = promise.then((args) => middleware.call(context, toArray(args), proxy));\n        });\n\n        promise = promise.then((args) => func.apply(context, toArray(args)));\n\n        iterate(after, (middleware) => {\n          promise = promise.then((ret) => middleware.call(context, ret, proxy));\n        });\n\n        return promise;\n      }\n    }\n\n    /**\n     * @member {Object} Func#$$\n     * @type {Object}\n     * @protected\n     * @property {Array} after - After middleware array.\n     * @property {Array} args - Locked and bound arguments.\n     * @property {Array} argsLocked - Locked arguments.\n     * @property {Array} before - Before middleware array.\n     * @property {Number} called - How many times the function was called.\n     * @property {Number} canBeCalled - How many times the function can be actually called.\n     * @property {*} context - Locked or bound context.\n     * @property {Boolean} contextLocked - Is context locked or not.\n     * @property {Boolean} sync - Is function synchronous or not.\n     * @description Config parameters.\n     */\n    Object.defineProperty(proxy, '$$', {\n      value: {\n        after: [],\n        args: [],\n        argsLocked: [],\n        before: [],\n        called: 0,\n        canBeCalled: Infinity,\n        context: null,\n        contextLocked: false,\n        sync: true\n      }\n    });\n\n    /**\n     * @member {Function} Func#$\n     * @type {Function}\n     * @public\n     * @description Original function.\n     */\n    Object.defineProperty(proxy, '$', { value: func });\n    Object.setPrototypeOf(proxy, Func.prototype);\n\n    return proxy;\n  }\n\n  /**\n   * @method Func#after\n   * @public\n   * @param {AfterMiddleware} middleware - After middleware.\n   * @param {Boolean|*} [afterAll = true] - Boolean parameter where to put middleware.\n   * Truthy parameter stands for \"to the end\" and falsey for \"to the beginning\".\n   * @returns {Func} Returns this.\n   * @description Adds after middleware.\n   *\n   * @example\n   * const func = new Func((a) => a + 1)\n   *   .after((result) => result * result);\n   *\n   * func(4);  // 25\n   * func(-4); // 9\n   */\n  after(middleware, afterAll = true) {\n    validate([middleware], ['function'], 'Func#after');\n\n    const { after } = this.$$;\n\n    if (afterAll) {\n      after.push(middleware);\n    } else {\n      after.unshift(middleware);\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Func#apply\n   * @public\n   * @param {*} [context] - Context to call with.\n   * @param {(Array|Arguments)} [args] - Arguments to call with.\n   * @returns {*} Return of function call.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\n   * @description Synonym for\n   * [Function#apply]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Function/apply}.\n   */\n  apply(context, args) {\n    return (() => {}).apply.apply(this, arguments);\n  }\n\n  /**\n   * @method Func#async\n   * @public\n   * @param {Boolean|*} [condition] - If the function should be synchronous or not.\n   * @returns {Func} Returns this.\n   * @description If the function should be synchronous or not.\n   *\n   * @example\n   * const func = new Func((a) => a + 1).async();\n   *\n   * func(4).then((result) => {\n   *   console.log(result); // 5\n   * });\n   */\n  async(condition = true) {\n    this.$$.sync = !condition;\n\n    return this;\n  }\n\n  /**\n   * @method Func#before\n   * @public\n   * @param {BeforeMiddleware} middleware - Before middleware.\n   * @param {Boolean|*} [beforeAll = true] - Boolean parameter where to put middleware.\n   * Truthy parameter stands for \"to the beginning\" and falsey for \"to the end\".\n   * @returns {Func} Returns this.\n   * @description Adds before middleware.\n   *\n   * @example\n   * const func = new Func((a) => a + 1)\n   *   .before(([arg]) => [arg * arg]);\n   *\n   * func(4); // 17\n   * func(3); // 10\n   */\n  before(middleware, beforeAll = true) {\n    validate([middleware], ['function'], 'Func#before');\n\n    const { before } = this.$$;\n\n    if (beforeAll) {\n      before.unshift(middleware);\n    } else {\n      before.push(middleware);\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Func#bind\n   * @public\n   * @param {*} context - Context to bind.\n   * @param {...(Array|Arguments|*)} args - Arguments to bind.\n   * @returns {Func} Returns this.\n   * @description Composition of {@link Func#bindContext} and {@link Func#bindArgs}.\n   *\n   * @example\n   * const func = new Func(function (a, b) {\n   *   return this.a + a + b;\n   * }).bind({ a: 2 }, 1);\n   *\n   * func(1); // 4\n   * func(3); // 6\n   */\n  bind(context, ...args) {\n    return this\n      .bindContext(context)\n      .bindArgs(args);\n  }\n\n  /**\n   * @method Func#bindArgs\n   * @public\n   * @param {(Array|Arguments)} args - Arguments to bind.\n   * @returns {Func} Returns this.\n   * @description Binds arguments in addition to already locked and bound ones.\n   *\n   * @example\n   * const func = new Func((...args) => {\n   *   let sum = 0;\n   *\n   *   for (let i = 0; i < args.length; i++) {\n   *     sum += args[i];\n   *   }\n   *\n   *   return sum;\n   * });\n   *\n   * func(1, 2, 3); // 6\n   *\n   * func.bindArgs([4]);\n   *\n   * func(1, 2, 3); // 10\n   *\n   * func.bindArgs([5]);\n   *\n   * func(1, 2, 3); // 15\n   */\n  bindArgs(args) {\n    const func = this.$$;\n\n    func.args = func.args.concat(toArray(args));\n\n    return this;\n  }\n\n  /**\n   * @method Func#bindContext\n   * @public\n   * @param {*} context - Context to bind.\n   * @returns {Func} Returns this.\n   * @description Bind new context if it's not already locked.\n   *\n   * @example\n   * const func = new Func(function () {\n   *   return this.a;\n   * }).bindContext({ a: 1 });\n   *\n   * func(); // 1\n   *\n   * func.bindContext({ a: 2 });\n   *\n   * func(); // 2\n   */\n  bindContext(context) {\n    const func = this.$$;\n\n    if (!func.contextLocked) {\n      func.context = context;\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Func#call\n   * @public\n   * @param {*} [context] - Context to call with.\n   * @param {...*} [args] - Arguments to call with.\n   * @returns {*} Return of function call.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Function/call\n   * @description Synonym for\n   * [Function#call]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Function/call}.\n   */\n  call(context, ...args) {\n    return (() => {}).call.apply(this, arguments);\n  }\n\n  /**\n   * @member {Number} Func#called\n   * @public\n   * @readonly\n   * @description Returns how many times the function was called.\n   *\n   * @example\n   * const func = new Func((a) => a + 1);\n   *\n   * func();\n   * func();\n   *\n   * func.called // 2\n   */\n  get called() {\n    return this.$$.called;\n  }\n\n  /**\n   * @method Func#canBeCalled\n   * @public\n   * @param {Number} times - Number of maximum times the function is called (middlewares are also taken for a count).\n   * @returns {Func} Returns this.\n   * @description Method for limiting call times of function.\n   *\n   * @example\n   * const func = new Func((a) => a + 1)\n   *   .canBeCalled(1);\n   *\n   * func(1); // 2\n   * func(1); // undefined\n   */\n  canBeCalled(times) {\n    this.$$.canBeCalled = times;\n\n    return this;\n  }\n\n  /**\n   * @method Func#limitArgsTo\n   * @public\n   * @param {Number} number - Number of arguments to limit to.\n   * @returns {Func} Returns this.\n   * @description Built-in before middleware for limiting number of arguments\n   * that is put to the end of before middlewares.\n   *\n   * @example\n   * const func = new Func((a, b) => [a, b]);\n   *\n   * func(1, 2); // [1, 2]\n   *\n   * func.limitArgsTo(1);\n   *\n   * func(1, 2); // [1, undefined]\n   */\n  limitArgsTo(number) {\n    return this.before((args) => args.slice(0, number), false);\n  }\n\n  /**\n   * @method Func#lock\n   * @public\n   * @param {*} context - Context to lock.\n   * @param {(Array|Arguments|*)} args - Arguments to lock.\n   * @returns {Func} Returns this.\n   * @description Composition of {@link Func#lockContext} and {@link Func#lockArgs}.\n   *\n   * @example\n   * const func = new Func(function (a, b) {\n   *   return this.a + a + b;\n   * }).lock({ a: 2 }, [1]);\n   *\n   * func(1); // 4\n   * func(3); // 6\n   */\n  lock(context, args) {\n    return this\n      .lockContext(context)\n      .lockArgs(args);\n  }\n\n  /**\n   * @method Func#lockArgs\n   * @public\n   * @param {(Array|Arguments|*)} args - Arguments to lock.\n   * @returns {Func} Returns this.\n   * @description Erases bound arguments and adds new arguments to already locked ones.\n   *\n   * @example\n   * const func = new Func((...args) => {\n   *   let sum = 0;\n   *\n   *   for (let i = 0; i < args.length; i++) {\n   *     sum += args[i];\n   *   }\n   *\n   *   return sum;\n   * });\n   *\n   * func(1, 2, 3); // 6\n   *\n   * func.lockArgs([4]);\n   *\n   * func(1, 2, 3); // 10\n   *\n   * func.bindArgs([6, 7]);\n   * func.lockArgs([5]);\n   *\n   * func(1, 2, 3); // 15\n   */\n  lockArgs(args) {\n    const func = this.$$;\n\n    func.args = func.argsLocked = func.argsLocked.concat(toArray(args));\n\n    return this;\n  }\n\n  /**\n   * @method Func#lockContext\n   * @public\n   * @param {*} context - Context to lock.\n   * @returns {Func} Returns this.\n   * @description Locks context if it's not already locked.\n   *\n   * @example\n   * const func = new Func(function () {\n   *   return this.a;\n   * }).lockContext({ a: 1 });\n   *\n   * func(); // 1\n   *\n   * func.lockContext({ a: 2 });\n   *\n   * func(); // 1\n   */\n  lockContext(context) {\n    const func = this.$$;\n\n    if (!func.contextLocked) {\n      func.context = context;\n      func.contextLocked = true;\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Func#timing\n   * @public\n   * @param {String} mark - Argument that is passed to console.time() and console.timeEnd().\n   * By default name of the original function, or if it's not present, 'anonymous' is used.\n   * @returns {Func} Returns this.\n   * @description Built-in before and after middlewares for noting calling time.\n   * In case of asynchronous functions it notes time between calling function and resolving or rejecting the result.\n   *\n   * @example\n   * const func = new Func((a) => a + 1)\n   *   .timing('plus 1');\n   *\n   * func(2); // plus 1: 0.010ms\n   *\n   * const async = new Func(() => new Promise(() => {\n   *     setTimeout(resolve, 1000);\n   *   }))\n   *   .async()\n   *   .timing();\n   *\n   * async();\n   * // After 1 second...\n   * // anonymous: 1000.010ms\n   */\n  timing(mark) {\n    mark = arguments.length ? String(mark) : this.$.name || 'anonymous';\n\n    this.before((args) => {\n      console.time(mark);\n\n      return args;\n    }, false);\n\n    this.after((ret) => {\n      console.timeEnd(mark);\n\n      return ret;\n    }, false);\n\n    return this;\n  }\n\n  toString() {\n    return (() => {}).toString.call(this.$);\n  }\n\n  /**\n   * @method Func#unbind\n   * @public\n   * @returns {Func} Returns this.\n   * @description Composition of {@link Func#unbindContext} and {@link Func#unbindArgs}.\n   *\n   * @example\n   * const func = new Func(function (a) {\n   *   return this.foo + ' & ' +  a;\n   * }).bind({ foo: 2 }, 1);\n   *\n   * func(); // '2 & 1'\n   *\n   * func.unbind();\n   *\n   * func(); // 'undefined & undefined'\n   */\n  unbind() {\n    return this\n      .unbindContext()\n      .unbindArgs();\n  }\n\n  /**\n   * @method Func#unbindArgs\n   * @public\n   * @returns {Func} Returns this.\n   * @description Erases all bound arguments.\n   *\n   * @example\n   * const func = new Func((...args) => {\n   *   let sum = 0;\n   *\n   *   for (let i = 0; i < args.length; i++) {\n   *     sum += args[i];\n   *   }\n   *\n   *   return sum;\n   * }).bindArgs([4, 5]);\n   *\n   * func(1, 2, 3); // 15\n   *\n   * func.unbindArgs();\n   *\n   * func(1, 2, 3); // 6\n   */\n  unbindArgs() {\n    const func = this.$$;\n\n    func.args = func.argsLocked;\n\n    return this;\n  }\n\n  /**\n   * @method Func#unbindContext\n   * @public\n   * @returns {Func} Returns this.\n   * @description Erases context if it's not locked.\n   *\n   * @example\n   * const func = new Func(function () {\n   *   return this.foo;\n   * }).bindContext({ foo: 1 });\n   *\n   * func(); // 1\n   *\n   * func.unbindArgs();\n   *\n   * func(); // undefined\n   */\n  unbindContext() {\n    const func = this.$$;\n\n    if (!func.contextLocked) {\n      func.context = null;\n    }\n\n    return this;\n  }\n}\n\ndefineProperties(Func.prototype, {\n  [Symbol.toStringTag]: 'Func'\n});\n\nconstructors[1].push({\n  check: isFunction,\n  cls: Func\n});\n\n/**\n * @function method\n * @public\n * @param {String} method - Method to call.\n * @param {(Array|Arguments|*)} args - Arguments to call the method with.\n * @returns {Function} Function that calls stated method with given arguments.\n * @description Function that returns the function\n * that calls stated method of its first argument with given arguments.\n *\n * @example\n * [1.2345, 2.789, 3.14].map(method('toFixed', [2])); // ['1.23', '2.79', '3.14']\n */\nfunction method(method, args = []) {\n  return (x) => x[method].apply(x, toArray(args));\n}\n\n/**\n * @function noop\n * @public\n * @returns {void}\n * @description Empty function.\n */\nfunction noop() {}\n\n/**\n * @function prop\n * @public\n * @param {String} prop - Property to return.\n * @returns {Function} Function that returns given property of its first argument.\n * @description Function that return the function that returns given property of its first argument.\n *\n * @example\n * ['foo', '12', '7890'].map(prop('length')); // [3, 2, 4]\n */\nfunction prop(prop) {\n  return ({ [prop]: value }) => value;\n}\n\n/**\n * @function self\n * @public\n * @returns {*} First argument itself.\n * @description Function that returns the first argument.\n *\n * @example\n * [1, 2].map(self);                     // [1, 2]\n * [1, 3, NaN, 0, 7, null].filter(self); // [1, 3, 7]\n */\nfunction self() {\n  return arguments[0];\n}\n\nexport { Func, method, noop, prop, self };\n","/**\n * @module Num\n * @private\n * @mixin\n * @description Exports Num class.\n */\n\nimport { Super } from './Super';\nimport { Func } from './Func';\nimport { Promise } from './Promise';\nimport { constructors } from './constants';\nimport {\n  isNumber, isFinite, toArray,\n  defineProperties, validate, Symbol\n} from './helpers';\n\nconst toRadian = Math.PI / 180;\nconst toDegree = 180 / Math.PI;\nconst ln2 = Math.LN2;\nconst ln10 = Math.LN10;\n\n/**\n * @class Num\n * @extends Super\n * @public\n * @param {Number} [number = 0] - A number to wrap.\n * @returns {Num} Instance of Num.\n * @description Wrap of a number.\n *\n * @example\n * const num = new Num(1);\n */\nclass Num extends Super {\n  constructor(number = 0) {\n    super(+number);\n\n    /**\n     * @member Num#$\n     * @type {Number}\n     * @public\n     * @description Original number.\n     */\n  }\n\n  /**\n   * @member Num#abs\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/abs\n   * @description Synonym for\n   * [Math.abs]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/abs}.\n   *\n   * @example\n   * new Num(1).abs;  // 1\n   * new Num(-1).abs; // 1\n   */\n  get abs() {\n    return Math.abs(this.$);\n  }\n\n  /**\n   * @method Num#acos\n   * @public\n   * @param {Boolean|*} [toDegrees = false] If it is truthy the return value is transformed into degrees.\n   * @returns {Number} Arccosine of the number.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/acos\n   * @description Synonym for\n   * [Math.acos]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/acos}.\n   */\n  acos(toDegrees) {\n    return (toDegrees ? toDegree : 1) * Math.acos(this.$);\n  }\n\n  /**\n   * @member Num#acosh\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh\n   * @description Synonym for\n   * [Math.acosh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh}.\n   */\n  get acosh() {\n    const number = this.$;\n\n    return Math.log(number + Math.sqrt(number * number - 1));\n  }\n\n  /**\n   * @member Num#asinh\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh\n   * @description Synonym for\n   * [Math.asinh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh}.\n   */\n  get asinh() {\n    const number = this.$;\n\n    return Math.log(number + Math.sqrt(number * number + 1));\n  }\n\n  /**\n   * @method Num#asin\n   * @public\n   * @param {Boolean|*} [toDegrees = false] If it is truthy the return value is transformed into degrees.\n   * @returns {Number} Arcsine of the number.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/asin\n   * @description Synonym for\n   * [Math.asin]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/asin}.\n   */\n  asin(toDegrees) {\n    return (toDegrees ? toDegree : 1) * Math.asin(this.$);\n  }\n\n  /**\n   * @method Num#atan\n   * @public\n   * @param {Boolean|*} [toDegrees = false] If it is truthy the return value is transformed into degrees.\n   * @returns {Number} Arcsine of the number.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/atan\n   * @description Synonym for\n   * [Math.atan]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/atan}.\n   */\n  atan(toDegrees) {\n    return (toDegrees ? toDegree : 1) * Math.atan(this.$);\n  }\n\n  /**\n   * @member Num#atanh\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh\n   * @description Synonym for\n   * [Math.atanh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh}.\n   */\n  get atanh() {\n    const number = this.$;\n\n    return Math.log((1 + number) / (1 - number)) / 2;\n  }\n\n  /**\n   * @member Num#cbrt\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt\n   * @description Synonym for\n   * [Math.cbrt]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt}.\n   */\n  get cbrt() {\n    const cbrt = Math.pow(Math.abs(this.$), 1 / 3);\n\n    return this.$ > 0 ? cbrt : -cbrt;\n  }\n\n  /**\n   * @member Num#ceil\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil\n   * @description Synonym for\n   * [Math.ceil]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil}.\n   *\n   * @example\n   * new Num(1.1).ceil;  // 2\n   * new Num(-1.1).ceil; // -1\n   */\n  get ceil() {\n    return Math.ceil(this.$);\n  }\n\n  /**\n   * @method Num#cos\n   * @public\n   * @param {Boolean|*} [asDegrees = false] If it is truthy the number is treated as a degree value.\n   * @returns {Number} Cosine of the number.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cos\n   * @description Synonym for\n   * [Math.cos]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cos}.\n   */\n  cos(asDegrees) {\n    return Math.cos((asDegrees ? toRadian : 1) * this.$);\n  }\n\n  /**\n   * @member Num#cosh\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh\n   * @description Synonym for\n   * [Math.cosh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh}.\n   */\n  get cosh() {\n    const exp = this.exp;\n\n    return (exp + 1 / exp) / 2;\n  }\n\n  /**\n   * @member Num#cube\n   * @type {Number}\n   * @public\n   * @readonly\n   * @description Cube of the number.\n   *\n   * @example\n   * new Num(2).cube;  // 8\n   * new Num(-3).ceil; // -27\n   */\n  get cube() {\n    return this.$ * this.$ * this.$;\n  }\n\n  /**\n   * @member Num#exp\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/exp\n   * @description Synonym for\n   * [Math.exp]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/exp}.\n   */\n  get exp() {\n    return Math.exp(this.$);\n  }\n\n  /**\n   * @member Num#floor\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\n   * @description Synonym for\n   * [Math.floor]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/floor}.\n   *\n   * @example\n   * new Num(1.1).floor;  // 1\n   * new Num(-1.1).floor; // -2\n   */\n  get floor() {\n    return Math.floor(this.$);\n  }\n\n  /**\n   * @method Num#interval\n   * @public\n   * @param {Function} func - Function that is called every <number> milliseconds.\n   * @param {Array} [args] - Arguments passed to the function.\n   * @returns {Function} Function that aborts the interval. The context of the function (if it's not already bound)\n   * is the object with the abort method.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/setInterval\n   * @description Analogue of the\n   * [setInterval]{@link https://developer.mozilla.org/en/docs/Web/API/WindowTimers/setInterval}.\n   *\n   * @example\n   * const times = 0;\n   * new Num(50).interval(function () {\n   *   if (++times === 10) {\n   *     this.abort();\n   *   }\n   * });\n   */\n  interval(func, args = []) {\n    validate([func], ['function'], 'Num#interval');\n\n    func = new Func(func).bindContext({ abort });\n    args = toArray(args);\n\n    const number = this.$;\n\n    let aborted;\n    let timeout = setTimeout(function interval() {\n      if (!aborted) {\n        func.apply(null, args);\n\n        if (!aborted) {\n          timeout = setTimeout(interval, number);\n        }\n      }\n    }, 0);\n\n    return abort;\n\n    function abort() {\n      aborted = true;\n\n      return clearTimeout(timeout);\n    }\n  }\n\n  /**\n   * @member Num#ln\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log\n   * @description Synonym for\n   * [Math.log]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log}.\n   */\n  get ln() {\n    return Math.log(this.$);\n  }\n\n  /**\n   * @method Num#log\n   * @public\n   * @param {Number} number - Number to get logarithm of.\n   * @returns {Number} Logarithm of the argument number to the number base.\n   * @description Returns the logarithm of the argument number to the number base.\n   *\n   * @example\n   * new Num(2).log(16);  // 4\n   * new Num(3).log(243); // 5\n   */\n  log(number) {\n    return Math.log(number) / Math.log(this.$);\n  }\n\n  /**\n   * @member Num#log2\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log2\n   * @description Synonym for\n   * [Math.log2]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log2}.\n   */\n  get log2() {\n    return this.ln / ln2;\n  }\n\n  /**\n   * @member Num#log10\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log10\n   * @description Synonym for\n   * [Math.log10]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log10}.\n   */\n  get log10() {\n    return this.ln / ln10;\n  }\n\n  /**\n   * @method Num#pow\n   * @public\n   * @param {Number} power - Power the number should be raised to.\n   * @returns {Number} The number to the <power> power.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/pow\n   * @description Synonym for\n   * [Math.pow]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/pow}.\n   *\n   * @example\n   * new Num(4).pow(.5); // 2\n   * new Num(3).pow(2);  // 9\n   */\n  pow(power) {\n    return Math.pow(this.$, power);\n  }\n\n  /**\n   * @method Num#root\n   * @public\n   * @param {Number} power - Power the number should be raised to.\n   * @returns {Number} The <power> root of the number.\n   * @description Synonym for number.pow(1 / power);\n   *\n   * @example\n   * new Num(4).root(2);   // 0.5\n   * new Num(243).root(5); // 3\n   */\n  root(power) {\n    return Math.pow(this.$, 1 / power);\n  }\n\n  /**\n   * @member Num#round\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/round\n   * @description Synonym for\n   * [Math.round]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/round}.\n   *\n   * @example\n   * new Num(1.1).floor;  // 1\n   * new Num(-1.1).floor; // -1\n   * new Num(1.5).floor;  // 2\n   */\n  get round() {\n    return Math.round(this.$);\n  }\n\n  /**\n   * @member Num#sign\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n   * @description Synonym for\n   * [Math.sign]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sign}.\n   */\n  get sign() {\n    const number = this.$;\n\n    if (!number) {\n      return number;\n    }\n\n    return number > 0 ? 1 : -1;\n  }\n\n  /**\n   * @method Num#sin\n   * @public\n   * @param {Boolean|*} [asDegrees = false] If it is truthy the number is treated as a degree value.\n   * @returns {Number} Sine of the number.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sin\n   * @description Synonym for\n   * [Math.sin]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sin}.\n   */\n  sin(asDegrees) {\n    return Math.sin((asDegrees ? toRadian : 1) * this.$);\n  }\n\n  /**\n   * @member Num#sinh\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh\n   * @description Synonym for\n   * [Math.sinh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh}.\n   */\n  get sinh() {\n    const exp = this.exp;\n\n    return (exp - 1 / exp) / 2;\n  }\n\n  /**\n   * @member Num#sq\n   * @type {Number}\n   * @public\n   * @readonly\n   * @description The square of the number.\n   *\n   * @example\n   * new Num(2).sq;  // 4\n   * new Num(-3).sq; // 9\n   */\n  get sq() {\n    return this.$ * this.$;\n  }\n\n  /**\n   * @member Num#sqrt\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt\n   * @description Synonym for\n   * [Math.sqrt]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt}.\n   */\n  get sqrt() {\n    return Math.sqrt(this.$);\n  }\n\n  /**\n   * @method Num#tan\n   * @public\n   * @param {Boolean|*} [asDegrees = false] If it is truthy the number is treated as a degree value.\n   * @returns {Number} Tangent of the number.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/tan\n   * @description Synonym for\n   * [Math.tan]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/tan}.\n   */\n  tan(asDegrees) {\n    return Math.tan((asDegrees ? toRadian : 1) * this.$);\n  }\n\n  /**\n   * @member Num#tanh\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh\n   * @description Synonym for\n   * [Math.tanh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh}.\n   */\n  get tanh() {\n    const number = this.$;\n\n    if (!isFinite(number)) {\n      return this.sign;\n    }\n\n    const exp = Math.exp(2 * number);\n\n    return (exp - 1) / (exp + 1);\n  }\n\n  /**\n   * @method Num#timeout\n   * @public\n   * @param {*} [value] - Value to be resolved by the promise.\n   * @returns {Promise} Promise that could be aborted.\n   * @see https://developer.mozilla.org/en/docs/Web/API/WindowTimers/setTimeout\n   * @description Promise-based analogue of\n   * [setTimeout]{@link https://developer.mozilla.org/en/docs/Web/API/WindowTimers/setTimeout}.\n   *\n   * @example\n   * new Num(50).timeout('resolved').then((value) => {\n   *   console.log(value); // 'resolved'\n   * });\n   *\n   * const promise = new Num(50).timeout();\n   * promise.abort();\n   */\n  timeout(value) {\n    let timeout;\n    let reject;\n\n    const promise = new Promise((resolve, rej) => {\n      reject = rej;\n      timeout = setTimeout(resolve, this.$, value);\n    });\n\n    promise.abort = function abort() {\n      clearTimeout(timeout);\n\n      reject(new Error('Timeout was aborted'));\n\n      return this;\n    };\n\n    return promise;\n  }\n\n  /**\n   * @method Num#toBase\n   * @public\n   * @param {Number} [base = 10] - Base that the number should inverted to.\n   * @returns {String} A string representation of the number in <base> base.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toString\n   * @description Synonym for\n   * [Number#toString]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toString}.\n   *\n   * @example\n   * new Num(4).toBase(2); // 100\n   * new Num(3).toBase();  // 3\n   */\n  toBase(base = 10) {\n    return this.$.toString(base);\n  }\n\n  /**\n   * @method Num#toExponential\n   * @public\n   * @param {Number} [fractionDigits] - See the link.\n   * @returns {String} A string representation of the number in the exponential format.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential\n   * @description Synonym for\n   * [Number#toExponential]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential}.\n   */\n  toExponential(fractionDigits) {\n    return this.$.toExponential(fractionDigits);\n  }\n\n  /**\n   * @method Num#toFixed\n   * @public\n   * @param {Number} [digits = 0] - See the link.\n   * @returns {String} Fixed-point formatted number.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed\n   * @description Synonym for\n   * [Number#toFixed]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed}.\n   */\n  toFixed(digits) {\n    return this.$.toFixed(digits);\n  }\n\n  /**\n   * @method Num#toPrecision\n   * @public\n   * @param {Number} [precision] - See the link.\n   * @returns {String} A string representation of the number to the specified precision.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision\n   * @description Synonym for\n   * [Number#toPrecision]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision}.\n   */\n  toPrecision(precision) {\n    return this.$.toPrecision(precision);\n  }\n\n  valueOf() {\n    return Number(this.$);\n  }\n}\n\ndefineProperties(Num.prototype, {\n  [Symbol.toStringTag]: 'Num'\n});\n\nconstructors[1].push({\n  check: isNumber,\n  cls: Num\n});\n\n/**\n * @function rand\n * @public\n * @param {Number} [start = 0] - Start of the range.\n * @param {Number} [end = 1] - End of the range.\n * @returns {Number} Random number.\n * @description Returns a random number in the range specified by the arguments.\n *\n * @example\n * rand(1, 5); // 2.315\n * rand(1, 5); // 4.356763\n */\nfunction rand(start = 0, end = 1) {\n  return start + (end - start) * Math.random();\n}\n\n/**\n * @function random\n * @public\n * @param {Integer} start - Start of the range.\n * @param {Integer} end - End of the range.\n * @returns {Number} Random integer.\n * @description Returns a random integer number in the range specified by the arguments.\n *\n * @example\n * random(1, 5); // 3\n * random(1, 5); // 1\n */\nfunction random(start, end) {\n  validate([start, end], ['intLike', 'intLike'], 'random');\n\n  if (end <= start) {\n    throw new Error('The second argument must be greater than the first!', 'random');\n  }\n\n  return Math.floor(rand(start, end + 1));\n}\n\nexport { Num, rand, random };\n","/**\n * @module Arr\n * @private\n * @mixin\n * @description Exports Arr class.\n */\n\nimport { random } from './Num';\nimport { Super } from './Super';\nimport { constructors } from './constants';\nimport {\n  isArrayLike, isNaN, isNumber, isString,\n  toArray, validate, iterate as iterator, Symbol, defineProperties\n} from './helpers';\n\n/**\n * @typedef {Array|*} ArrayLike\n * @public\n * @description Array-like type.\n */\n\n/**\n * @callback ArrayCallback\n * @public\n * @param {Number} i - Iteration index.\n */\n\n/**\n * @callback IterateCallback\n * @public\n * @param {Number} i - Iteration index.\n */\n\n/**\n * @callback CompareFunction\n * @public\n * @param {*} x - First value to be compared.\n * @param {*} y - Second value to be compared.\n */\n\n/**\n * @class Arr\n * @extends Super\n * @public\n * @param {Array} [array = []] - An array to wrap.\n * @returns {Arr} Instance of Arr.\n * @description Wrap of an array.\n *\n * @example\n * new Arr([1, 2]);\n */\nclass Arr extends Super {\n  constructor(array = []) {\n    super(toArray(array instanceof Arr ? array.$ : array));\n\n    /**\n     * @member Arr#$\n     * @type {Array}\n     * @public\n     * @description Made array.\n     */\n  }\n\n  /**\n   * @method Arr#concat\n   * @public\n   * @param {...(Array|Arr|*)} values - Arrays or any other values to concat the array with.\n   * @returns {Arr} New instance of Arr.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\n   * @description Synonym for\n   * [Array#concat]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/concat}.\n   */\n  concat(...values) {\n    const array = toArray(this.$, true);\n\n    iterator(arguments, (value) => {\n      value = new Super(value).$;\n\n      if (isArrayLike(value) && !isString(value)) {\n        iterator(value, (value) => {\n          array.push(value);\n        });\n\n        return;\n      }\n\n      array.push(value);\n    });\n\n    return new this.constructor(array);\n  }\n\n  /**\n   * @member Arr#first\n   * @type {*}\n   * @public\n   * @readonly\n   * @description Returns the first element of the array.\n   *\n   * @example\n   * new Arr([1, 2, 3]).first; // 1\n   * new Arr([]).first;        // undefined\n   */\n  get first() {\n    return this.$[0];\n  }\n\n  /**\n   * @method Super#forEachReverse\n   * @public\n   * @param {IterationCallback} callback - Called on each iteration.\n   * @returns {Arr} Returns this.\n   * @description Method for iterating over any object.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).forEach((value, key, object) => {\n   *   object[key] = value * value;\n   * }).$; // { a: 1, b: { c: 4, d: 5 } }\n   */\n  forEachReverse(callback) {\n    validate([callback], ['function'], 'Arr#forEachReverse');\n\n    const array = this.$;\n\n    for (let i = array.length - 1; i >= 0; i--) {\n      callback(array[i], i, array);\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Arr#includes\n   * @public\n   * @param {*} value - Value to search.\n   * @returns {Boolean} If the array includes the value.\n   * @description Synonym for array.indexOfStrict(value) !== -1.\n   *\n   * @example\n   * new Arr([1, 2, 3]).includes(1);       // true\n   * new Arr([1, 2, 3]).includes('1');     // false\n   * new Arr([1, 2, 3]).includes(3);       // true\n   * new Arr([1, 2, NaN]).includes(NaN);   // true\n   */\n  includes(value) {\n    return this.indexOfStrict(value) !== -1;\n  }\n\n  /**\n   * @method Arr#indexOf\n   * @public\n   * @param {*} value - Value to search.\n   * @returns {Number} Index of the argument.\n   * @description Almost the same as {@link Super#keyOf}. The difference is that if the value is not found\n   * -1 returned instead of null and if found Number(key) returned.\n   *\n   * @example\n   * new Arr([1, 2, 3]).indexOf(1);       // 0\n   * new Arr([1, 2, 3]).indexOf('1');     // 0\n   * new Arr([1, 2, 3]).indexOf(3);       // -1\n   * new Arr([1, 2, NaN]).indexOf(NaN);   // 2\n   */\n  indexOf(value) {\n    const key = this.keyOf(value);\n\n    return key === null ? -1 : Number(key);\n  }\n\n  /**\n   * @method Arr#indexOfStrict\n   * @public\n   * @param {*} value - Value to search.\n   * @returns {Number} Index of the argument.\n   * @description Almost the same as {@link Super#keyOfStrict}. The difference is that if the value is not found\n   * -1 returned instead of null and if found Number(key) returned.\n   *\n   * @example\n   * new Arr([1, 2, 3]).indexOfStrict(1);       // 0\n   * new Arr([1, 2, 3]).indexOfStrict('1');     // -1\n   * new Arr([1, 2, 3]).indexOfStrict(3);       // -1\n   * new Arr([1, 2, NaN]).indexOfStrict(NaN);   // 2\n   */\n  indexOfStrict(value) {\n    const key = this.keyOfStrict(value);\n\n    return key === null ? -1 : Number(key);\n  }\n\n  /**\n   * @method Arr#join\n   * @public\n   * @param {String} [separator = ','] - See the link.\n   * @returns {String} - String of joined array.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/join\n   * @description Synonym for\n   * [Array#join]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/join}.\n   */\n  join(separator) {\n    return this.$.join.apply(this.$, arguments);\n  }\n\n  /**\n   * @member Arr#last\n   * @type {*}\n   * @public\n   * @readonly\n   * @description The last element of the array.\n   *\n   * @example\n   * new Arr([1, 2, 3]).last; // 3\n   * new Arr([]).last;        // undefined\n   */\n  get last() {\n    const array = this.$;\n\n    return array[array.length - 1];\n  }\n\n  /**\n   * @member Arr#length\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/length\n   * @description Synonym for\n   * [Array#length]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/length}.\n   */\n  get length() {\n    return this.$.length;\n  }\n\n  /**\n   * @method Arr#pop\n   * @public\n   * @returns {*} Returns deleted element.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\n   * @description Synonym for\n   * [Array#pop]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/pop}.\n   */\n  pop() {\n    return this.$.pop();\n  }\n\n  /**\n   * @method Arr#push\n   * @public\n   * @param {...*} values - See the link.\n   * @this {Arr}\n   * @returns {Arr} Returns this.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push\n   * @description Synonym for\n   * [Array#push]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push}\n   * besides returning this.\n   */\n  push(...values) {\n    this.$.push.apply(this.$, arguments);\n\n    return this;\n  }\n\n  /**\n   * @method Arr#pushArray\n   * @public\n   * @param {Array} array - Array to push.\n   * @this {Arr}\n   * @returns {Arr} Returns this.\n   * @description Method for pushing an array into another.\n   */\n  pushArray(array) {\n    this.$.push.apply(this.$, array);\n\n    return this;\n  }\n\n  /**\n   * @method Arr#random\n   * @public\n   * @returns {*} Random item of the array.\n   * @description Method for getting random items of the array.\n   *\n   * @example\n   * new Arr([1, 5, 3]).random(); // 3\n   * new Arr([1, 5, 3]).random(); // 5\n   */\n  random() {\n    return this.$[random(0, this.$.length - 1)];\n  }\n\n  /**\n   * @method Arr#reverse\n   * @public\n   * @returns {Arr} A wrap of the reversed array.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\n   * @description Synonym for\n   * [Array#reverse]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse}.\n   */\n  reverse() {\n    this.$.reverse();\n\n    return this;\n  }\n\n  /**\n   * @method Arr#shift\n   * @public\n   * @returns {*} Returns deleted element.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\n   * @description Synonym for\n   * [Array#shift]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/shift}.\n   */\n  shift() {\n    return this.$.shift();\n  }\n\n  /**\n   * @method Arr#shuffle\n   * @public\n   * @returns {Arr} Returns this.\n   * @description Method for shuffling.\n   *\n   * @example\n   * new Arr([1, 2, 3, 4]).shuffle().$; // [4, 2, 3, 1]\n   * new Arr([1, 2, 3, 4]).shuffle().$; // [1, 3, 4, 2]\n   */\n  shuffle() {\n    const length = this.$.length;\n\n    return this.forEach((value, index, array) => {\n      const randomIndex = index + Math.floor((length - index) * Math.random());\n\n      array[index] = array[randomIndex];\n      array[randomIndex] = value;\n    });\n  }\n\n  /**\n   * @method Arr#slice\n   * @public\n   * @param {Number} [begin = 0] - See the link.\n   * @param {Number} [end = array.length] - See the link.\n   * @returns {Arr} A wrap of a sliced array.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\n   * @description Synonym for\n   * [Array#slice]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/slice}.\n   */\n  slice(begin, end) {\n    return new this.constructor(this.$.slice.apply(this.$, arguments));\n  }\n\n  /**\n   * @method Arr#sort\n   * @public\n   * @param {CompareFunction} [compareFunction] - See the link.\n   * @returns {Arr} Returns this.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n   * @description Synonym for\n   * [Array#sort]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/sort}.\n   */\n  sort(compareFunction) {\n    validate([compareFunction], ['function||!'], 'Arr#sort');\n\n    this.$.sort(compareFunction);\n\n    return this;\n  }\n\n  /**\n   * @method Arr#sortAsc\n   * @public\n   * @returns {Arr} Returns this.\n   * @description Method for ascending sorting. Puts non-numbers first, then NaNs, then sorted values.\n   *\n   * @example\n   * new Arr([NaN, 1, -7, '100', 5]).sortAsc().$; // ['100', NaN, -7, 1, 5]\n   */\n  sortAsc() {\n    return this.sort(asc);\n  }\n\n  /**\n   * @method Arr#sortDesc\n   * @public\n   * @returns {Arr} Returns this.\n   * @description Method for descending sorting. Puts sorted values first, then NaNs, then non-numbers.\n   *\n   * @example\n   * new Arr([NaN, 1, -7, '100', 5]).sortDesc().$; // [5, 1, -7, NaN, '100']\n   */\n  sortDesc() {\n    return this.sort((y, x) => asc(x, y));\n  }\n\n  /**\n   * @method Arr#splice\n   * @public\n   * @param {Number} [start] - See the link.\n   * @param {Number} [deleteCount] - See the link.\n   * @param {...*} [items] - See the link.\n   * @returns {Arr} A wrap of return value of #splice call.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\n   * @description Synonym for\n   * [Array#splice]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/splice}.\n   */\n  splice(start, deleteCount, ...items) {\n    return new Arr(this.$.splice.apply(this.$, arguments));\n  }\n\n  /**\n   * @method Arr#string\n   * @public\n   * @returns {String} Concatenated array.\n   * @description Synonym for array.join('').\n   *\n   * @example\n   * new Arr([1, 2, 3]).string(); // '123'\n   */\n  string() {\n    return this.join('');\n  }\n\n  /**\n   * @method Arr#unshift\n   * @public\n   * @param {...*} [values] - See the link.\n   * @returns {Arr} Returns this.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\n   * @description Synonym for\n   * [Array#unshift]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift}\n   * besides returning this.\n   */\n  unshift(...values) {\n    this.$.unshift.apply(this.$, arguments);\n\n    return this;\n  }\n}\n\ndefineProperties(Arr.prototype, {\n  [Symbol.toStringTag]: 'Arr'\n});\n\n/**\n * @function asc\n * @private\n * @param {*} x - First value to be compared.\n * @param {*} y - Second value to be compared.\n * @returns {Number} Where to put the first element: before or after.\n */\nfunction asc(x, y) {\n  if (!isNumber(x) && !isNumber(y)) {\n    return 0;\n  }\n\n  if (!isNumber(x)) {\n    return -1;\n  }\n\n  if (!isNumber(y)) {\n    return 1;\n  }\n\n  if (isNaN(x) && isNaN(y)) {\n    return 0;\n  }\n\n  if (isNaN(x)) {\n    return -1;\n  }\n\n  if (isNaN(y)) {\n    return 1;\n  }\n\n  return x - y;\n}\n\nconstructors[1].push({\n  check: isArrayLike,\n  cls: Arr\n});\n\n/**\n * @function array\n * @public\n * @param {Number} number - Length of the array.\n * @param {ArrayCallback} [callback] - If it's present it has to be a function\n * that returns the element that is pushed to the new array.\n * @returns {Arr} New instance of Arr.\n * @description Method for creating new array from the length using optional callback.\n *\n * @example\n * array(3).$;               // [0, 1, 2]\n * array(3, (i) => i * 2).$; // [0, 2, 4]\n */\nfunction array(number, callback) {\n  validate([number, callback], [['intLike', '>=0'], 'function||!'], 'array');\n\n  const array = [];\n\n  for (let i = 0; i < number; i++) {\n    array.push(callback ? callback(i) : i);\n  }\n\n  return new Arr(array);\n}\n\n/**\n * @function iterate\n * @public\n * @param {Number} number - Number of iterations.\n * @param {IterateCallback} callback - Callback that is called on each iteration with the iteration index.\n * @returns {void}\n * @description Method for replacing for (...) construction.\n *\n * @example\n * iterate();\n */\nfunction iterate(number, callback) {\n  validate([number, callback], [['intLike', '>=0'], 'function'], 'iterate');\n\n  for (let i = 0; i < number; i++) {\n    callback(i);\n  }\n}\n\nexport { Arr, array, iterate };\n","/**\n * @module BlobObject\n * @private\n * @mixin\n * @description Exports BlobObject class.\n */\n\nimport { Super } from './Super';\nimport { Promise } from './Promise';\nimport { constructors } from './constants';\nimport {\n  isArray, isFunction,\n  toStringTag, Symbol, defineProperties\n} from './helpers';\n\n/**\n * @typedef {{ buffer: String, binary: String, dataURL: String, text: String }} methods\n * @private\n * @description List of read blob methods.\n */\nconst methods = {\n  buffer: 'ArrayBuffer',\n  binary: 'BinaryString',\n  dataURL: 'DataURL',\n  text: 'Text'\n};\nconst { URL } = global;\n\n/**\n * @typedef {('buffer'|'binary'|'dataURL'|'text')} ReadBlobMethod\n * @public\n * @description Enum type of read blob methods.\n */\n\n/**\n * @typedef {ArrayBuffer|ArrayBufferView|Blob|String} BlobParts\n * @public\n * @description Allowed blob parts.\n */\n\n/**\n * @callback ReaderEventListener\n * @public\n * @param {Event} e - Fired event.\n * @param {FileReader} reader - FileReader.\n */\n\n/**\n * @class BlobObject\n * @extends Super\n * @public\n * @param {Blob} blob - Blob to wrap.\n * @returns {BlobObject} Instance of BlobObject.\n * @description Wrap of a blob.\n *\n * @example\n * new BlobObject(new Blob(['{\"foo\":\"bar\"}'], { type: 'application/json' }));\n */\nclass BlobObject extends Super {\n  /**\n   * @member BlobObject#$\n   * @type {Blob}\n   * @public\n   * @description Original Blob.\n   */\n\n  /**\n   * @member {String} BlobObject#dataURL\n   * @type {String}\n   * @public\n   * @readonly\n   * @description Returns dataURL representation of the blob.\n   */\n  get dataURL() {\n    return URL.createObjectURL(this.$);\n  }\n\n  /**\n   * @method BlobObject#readAs\n   * @public\n   * @param {ReadBlobMethod} method - Method that is used for reading from blob.\n   * @param {ReaderEventListener} [progress] - Progress listener.\n   * @returns {Promise} Promise that could be aborted.\n   * @description Method for reading from blobs.\n   *\n   * @example\n   * new BlobObject(new Blob(['{\"foo\":\"bar\"}'], { type: 'application/json' }))\n   *   .readAs('text')\n   *   .then((value) => {\n   *     console.log(value); // '{\"foo\":\"bar\"}'\n   *   });\n   */\n  readAs(method, progress) {\n    if (!methods[method]) {\n      throw new Error('1st argument must be one of following values: buffer, binary, dataURL, text');\n    }\n\n    let reader = new FileReader();\n    let toReject;\n\n    if (isFunction(progress)) {\n      reader.onprogress = function (e) {\n        progress(e, this);\n      };\n    }\n\n    const promise = new Promise((resolve, reject) => {\n      toReject = reject;\n\n      reader.onerror = ({ target }) => {\n        if (reader) {\n          reject(target.error);\n        }\n      };\n\n      reader.onload = ({ target }) => {\n        resolve(target.result);\n      };\n\n      reader[`readAs${ methods[method] }`](this.$);\n    });\n\n    promise.abort = function abort() {\n      toReject(new Error('Reading was aborted'));\n\n      reader.abort();\n\n      reader = null;\n\n      return this;\n    };\n\n    return promise;\n  }\n\n  /**\n   * @method BlobObject#saveAs\n   * @public\n   * @param {String} [name] - Name that is used for saving file.\n   * @returns {BlobObject} Returns this.\n   * @description Method for saving blobs.\n   *\n   * @example\n   * new BlobObject(new Blob(['{\"foo\":\"bar\"}'], { type: 'application/json' }))\n   *   .saveAs('blob.json');\n   */\n  saveAs(name = 'download') {\n    const anchor = document.createElement('a');\n\n    anchor.href = this.dataURL;\n    anchor.setAttribute('download', name);\n    anchor.click();\n\n    return this;\n  }\n}\n\ndefineProperties(BlobObject.prototype, {\n  [Symbol.toStringTag]: 'BlobObject'\n});\n\nconstructors[1].push({\n  check: (blob) => /^(Blob|File)$/.test(toStringTag(blob)),\n  cls: BlobObject\n});\n\n/**\n * @function blob\n * @public\n * @param {(BlobParts[]|BlobParts)} blobParts - Blob parts that are passed to\n * [Blob]{@link https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob} constructor.\n * @param {Object} [options] - Options that are passed to\n * [Blob]{@link https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob} constructor.\n * @returns {BlobObject} New instance of BlobObject.\n * @description Function for creating blobs not involving BlobObject and Blob constructors.\n */\nfunction blob(blobParts, options = {}) {\n  if (!isArray(blobParts)) {\n    blobParts = [blobParts];\n  }\n\n  return new BlobObject(new Blob(blobParts, options));\n}\n\nexport { BlobObject, blob };\n","/**\n * @module Str\n * @private\n * @mixin\n * @description Exports Str class.\n */\n\nimport { D } from './D';\nimport { Super } from './Super';\nimport { constructors, regexpSpecialCharacters } from './constants';\nimport {\n  isFunction, isNumberLike, isObject, isString,\n  validate, Symbol, defineProperties, iterate\n} from './helpers';\n\nconst htmlSpecials = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;'\n};\nconst regexpSpecialsRegexp = new RegExp(\n  new Super(regexpSpecialCharacters)\n    .word((x) => `\\\\${ x }|`)\n    .replace(/\\|$/, ''),\n  'g'\n);\n\n/**\n * @class Str\n * @extends Super\n * @public\n * @param {String} [string = ''] - A string to wrap.\n * @returns {Str} Instance of Str.\n * @description Wrap of a string.\n *\n * @example\n * const s = new Num('1');\n */\nclass Str extends Super {\n  constructor(string = '') {\n    super(`${ string }`);\n\n    /**\n     * @member Str#$\n     * @type {String}\n     * @public\n     * @description Original string.\n     */\n  }\n\n  /**\n   * @method Str#capitalizeFirst\n   * @public\n   * @returns {Str} Capitalized string.\n   * @description Method capitalizing the first symbol.\n   *\n   * @example\n   * new Str('foo').capitalizeFirst().$; // 'Foo'\n   */\n  capitalizeFirst() {\n    const string = this.$;\n\n    return new Str(string.slice(0, 1).toUpperCase() + string.slice(1));\n  }\n\n  /**\n   * @method Str#endsWith\n   * @public\n   * @param {String} searchString - See the link.\n   * @param {Number} [position = string.length] - See the link.\n   * @returns {Boolean} If the string ends with the argument string.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\n   * @description Synonym for\n   * [String#endsWith]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith}.\n   */\n  endsWith(searchString, position) {\n    if (arguments.length < 2) {\n      position = this.$.length;\n    }\n\n    return this\n      .slice(0, position)\n      .revert()\n      .startsWith(new Str(searchString).revert().$);\n  }\n\n  /**\n   * @method Str#escapeHTML\n   * @public\n   * @returns {Str} New instance of Str.\n   * @description Methods escaping \"&\", \"<\" and \">\" symbols.\n   *\n   * @example\n   * new Str('\"1 < 2\" & \"7 > 4\" are true expressions.').escapeHTML().$;\n   * // '\"1 &lt; 2\" &amp \"7 &gt; 2\" are true expressions.'\n   */\n  escapeHTML() {\n    let string = this.$;\n\n    iterate(htmlSpecials, (escaped, symbol) => {\n      string = string.replace(new RegExp(symbol, 'g'), escaped);\n    });\n\n    return new Str(string);\n  }\n\n  /**\n   * @method Str#escapeRegExp\n   * @public\n   * @returns {Str} New instance of Str.\n   * @description Method escaping RegExp special characters.\n   *\n   * @example\n   * new Str('(213.98 - [] {})').escapeRegExp().$; // '\\(213\\.98 \\- \\[\\] \\{\\}\\)'\n   */\n  escapeRegExp() {\n    return this.replace(regexpSpecialsRegexp, '\\\\$&');\n  }\n\n  /**\n   * @method Str#in\n   * @public\n   * @param {*} object - Object to check the string as a property in.\n   * @returns {Boolean} If it is in the object or not.\n   * @description Returns string in object.\n   *\n   * @example\n   * new Str('a').in({ a: 1 }); // true\n   * new Str('toFixed').in(1);  // false\n   * new Str('a').in(null);     // false\n   */\n  in(object) {\n    if (!isObject(object)) {\n      return false;\n    }\n\n    return this.$ in object;\n  }\n\n  /**\n   * @method Str#indexOf\n   * @public\n   * @param {String} searchValue - See the link.\n   * @param {Number} [fromIndex = 0] - See the link.\n   * @returns {Number} Found index or -1.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\n   * @description Synonym for\n   * [String#indexOf]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf}.\n   */\n  indexOf(searchValue, fromIndex) {\n    return this.$.indexOf.apply(this.$, arguments);\n  }\n\n  /**\n   * @method Str#lastIndexOf\n   * @public\n   * @param {String} searchValue - See the link.\n   * @param {Number} [fromIndex = string.length] - See the link.\n   * @returns {Number} Found index or -1.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf\n   * @description Synonym for\n   * [String#lastIndexOf]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf}.\n   */\n  lastIndexOf(searchValue, fromIndex) {\n    return this.$.lastIndexOf.apply(this.$, arguments);\n  }\n\n  /**\n   * @member Str#length\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/length\n   * @description Synonym for\n   * [String#length]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/length}.\n   */\n  get length() {\n    return this.$.length;\n  }\n\n  /**\n   * @method Str#match\n   * @public\n   * @returns {Arr|Super} D-Wrap of found match.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/match\n   * @description Synonym for\n   * [String#match]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/match}.\n   */\n  match(regexp) {\n    return D(this.$.match.apply(this.$, arguments));\n  }\n\n  /**\n   * @method Str#repeat\n   * @public\n   * @param {Integer} times - Times to repeat the string.\n   * @returns {Str} New instance of Str.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\n   * @description Synonym for\n   * [String#repeat]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/repeat}.\n   *\n   * @example\n   * new Str('123').repeat(2).$; // '123123'\n   * new Str('123').repeat(0).$; // ''\n   */\n  repeat(times) {\n    validate([times], [['intLike', '>=0']], 'Str#repeat');\n\n    times = +times;\n\n    const string = this.$;\n\n    let s = '';\n\n    for (let i = 0; i < times; i++) {\n      s += string;\n    }\n\n    return new Str(s);\n  }\n\n  /**\n   * @method Str#replace\n   * @public\n   * @param {RegExp|String} regexp - See the link.\n   * @param {String|Function} [replacer = ''] - See the link.\n   * @returns {Str} New instance of Str.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/replace\n   * @description Synonym for\n   * [String#replace]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/replace}\n   * besides that replacer has a default value of ''.\n   */\n  replace(regexp, replacer = '') {\n    return new Str(this.$.replace(regexp, replacer));\n  }\n\n  /**\n   * @method Str#replaceString\n   * @public\n   * @param {String} string - String to replace.\n   * @param {String} [replacer = ''] - String to replace with.\n   * @returns {Str} New instance of Str.\n   * @description Method for global string replaceing.\n   *\n   * @example\n   * new Str('123123').replaceString('1', '4').$; // '423423'\n   * new Str('123123').replaceString('1').$;      // '2323'\n   */\n  replaceString(string, replacer = '') {\n    string = new Super(string).$;\n\n    validate([string], ['string'], 'Str#replaceString');\n\n    return new Str(this.$.split(string).join(replacer));\n  }\n\n  /**\n   * @method Str#revert\n   * @public\n   * @returns {Str} New instance of string.\n   * @description Method for reverting a string.\n   *\n   * @example\n   * new Str('1234').revert().$; // '4321'\n   */\n  revert() {\n    const string = this.$;\n    let str = '';\n\n    for (let i = string.length - 1; i >= 0; i--) {\n      str += string[i];\n    }\n\n    return new Str(str);\n  }\n\n  /**\n   * @method Str#search\n   * @public\n   * @param {RegExp} regexp - See the link.\n   * @returns {Number} Index of the first match, if found, and -1 if not.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/search\n   * @description Synonym for\n   * [String#search]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/search}.\n   */\n  search(regexp) {\n    validate([regexp], ['regexp']);\n\n    return this.$.search.apply(this.$, arguments);\n  }\n\n  /**\n   * @method Str#slice\n   * @public\n   * @param {Number} [beginSlice = 0] - See the link.\n   * @param {Number} [endSlice = string.length] - See the link.\n   * @returns {Str} New instance of Str.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/slice\n   * @description Synonym for\n   * [String#slice]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/slice}.\n   */\n  slice(beginSlice, endSlice) {\n    return new Str(this.$.slice.apply(this.$, arguments));\n  }\n\n  /**\n   * @method Str#split\n   * @public\n   * @param {RegExp|String} [separator] - See the link.\n   * @returns {Arr|Super} D-Wrap of the array.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/split\n   * @description Synonym for\n   * [String#split]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/split}.\n   */\n  split(separator) {\n    return D(this.$.split.apply(this.$, arguments));\n  }\n\n  /**\n   * @method Str#startsWith\n   * @public\n   * @param {String} searchString - See the link.\n   * @param {Number} [position = 0] - See the link.\n   * @returns {Boolean} If the string ends with the argument string.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\n   * @description Synonym for\n   * [String#startsWith]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith}.\n   */\n  startsWith(searchString, position = 0) {\n    return this.$.indexOf.apply(this.$, arguments) === position;\n  }\n\n  /**\n   * @method Str#substr\n   * @public\n   * @param {Number} [start = 0] - See the link.\n   * @param {Number} [length = string.length] - See the link.\n   * @returns {Str} New instance of Str.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/substr\n   * @description Synonym for\n   * [String#substr]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/substr}.\n   */\n  substr(start, length) {\n    return new Str(this.$.substr.apply(this.$, arguments));\n  }\n\n  /**\n   * @method Str#substring\n   * @public\n   * @param {Number} [indexStart = 0] - See the link.\n   * @param {Number} [indexEnd = string.length] - See the link.\n   * @returns {Str} New instance of Str.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/substring\n   * @description Synonym for\n   * [String#substring]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/substring}.\n   */\n  substring(indexStart, indexEnd) {\n    return new Str(this.$.substring.apply(this.$, arguments));\n  }\n\n  /**\n   * @method Str#toCamelCase\n   * @public\n   * @returns {Str} New instance of Str.\n   * @description Removes following regexp /\\s\\-_\\./ making the string camel cased.\n   *\n   * @example\n   * new Str('spinal-case').toCamelCase().$;  // 'spinalCase'\n   * new Str('_snake_case_').toCamelCase().$; // 'snakeCase'\n   */\n  toCamelCase() {\n    return new Str(trim(this.$)\n      .replace(/[\\s\\-_.]+/g, '-')\n      .replace(/-[^-]/g, (match) => match[1].toUpperCase())\n      .replace(/^[\\S]/, (match) => match.toLowerCase())\n    );\n  }\n\n  /**\n   * @method Str#toCapitalCase\n   * @public\n   * @returns {Str} New instance of Str.\n   * @description Removes following regexp /\\-_\\./ making the string capital letter cased.\n   *\n   * @example\n   * new Str('spinal-case').toCapitalCase().$;  // 'Spinal Case'\n   * new Str('_snake_case_').toCapitalCase().$; // 'Snake Case'\n   */\n  toCapitalCase() {\n    return new Str(trim(this.$)\n      .replace(/[\\s\\-_.]+/g, ' ')\n      .replace(/[\\S]/g, (match) => (\n        match.toLowerCase() === match ? match : ` ${ match }`\n      ))\n      .replace(/\\s[\\S]/g, (match) => match.toUpperCase())\n      .replace(/\\s+/g, ' ')\n      .replace(/^\\s/, '')\n      .replace(/^[\\S]/, (match) => match.toUpperCase())\n    );\n  }\n\n  /**\n   * @method Str#toDotCase\n   * @public\n   * @returns {Str} New instance of Str.\n   * @description Removes following regexp /\\-_\\./ making the string dot cased.\n   *\n   * @example\n   * new Str('spinal-case').toDotCase().$;  // 'spinal.case'\n   * new Str('_snake_case_').toDotCase().$; // 'snake.case'\n   */\n  toDotCase() {\n    return new Str(trim(this.$)\n      .replace(/[\\s\\-_.]+/g, '.')\n      .replace(/[^.]/g, (match) => (\n        match.toLowerCase() === match ? match : `.${ match }`\n      ))\n      .replace(/\\.+/g, '.')\n      .replace(/^\\./, '')\n      .toLowerCase()\n    );\n  }\n\n  /**\n   * @method Str#toHyphenCase\n   * @public\n   * @returns {Str} New instance of Str.\n   * @description Removes following regexp /\\s\\-_\\./ making the string camel cased.\n   *\n   * @example\n   * new Str('camelCase').toSpinalCase().$;    // 'camel-case'\n   * new Str('_snake_case_').toSpinalCase().$; // 'snake-case'\n   */\n  toHyphenCase() {\n    return new Str(trim(this.$)\n      .replace(/[\\s\\-_.]+/g, '-')\n      .replace(/[^-]/g, (match) => (\n        match.toLowerCase() === match ? match : `-${ match }`\n      ))\n      .replace(/-+/g, '-')\n      .replace(/^-/, '')\n      .toLowerCase()\n    );\n  }\n\n  /**\n   * @method Str#toLowerCase\n   * @public\n   * @returns {Str} New instance of Str.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase\n   * @description Synonym for\n   * [String#toLowerCase]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase}.\n   *\n   * @example\n   * new Str('UPPER-CASE').toLowerCase().$;  // 'upper-case'\n   */\n  toLowerCase() {\n    return new Str(this.$.toLowerCase());\n  }\n\n  /**\n   * @method Str#toSnakeCase\n   * @public\n   * @returns {Str} New instance of Str.\n   * @description Removes following regexp /\\s\\-\\./ making the string spinal cased.\n   *\n   * @example\n   * new Str('spinal-case').toSnakeCase().$; // 'spinal_case'\n   * new Str('camelCase').toSnakeCase().$;   // 'camel_case'\n   */\n  toSnakeCase() {\n    return new Str(trim(this.$)\n      .replace(/[\\s\\-_.]+/g, '_')\n      .replace(/[^_]/g, (match) => (\n        match.toLowerCase() === match ? match : `_${ match }`\n      ))\n      .replace(/_+/g, '_')\n      .replace(/^_/, '')\n      .toLowerCase()\n    );\n  }\n\n  /**\n   * @method Str#toSpaceCase\n   * @public\n   * @returns {Str} New instance of Str.\n   * @description Removes following regexp /\\-_\\./ making the string space cased.\n   *\n   * @example\n   * new Str('spinal-case').toSpaceCase().$;  // 'spinal case'\n   * new Str('_snake_case_').toSpaceCase().$; // 'snake case'\n   */\n  toSpaceCase() {\n    return new Str(trim(this.$)\n      .replace(/[\\s\\-_.]+/g, ' ')\n      .replace(/[\\S]/g, (match) => (\n        match.toLowerCase() === match ? match : ` ${ match }`\n      ))\n      .replace(/\\s+/g, ' ')\n      .replace(/^\\s/, '')\n      .toLowerCase()\n    );\n  }\n\n  toString() {\n    return this.$;\n  }\n\n  /**\n   * @method Str#toUpperCase\n   * @public\n   * @returns {Str} New instance of Str.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\n   * @description Synonym for\n   * [String#toUpperCase]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase}.\n   *\n   * @example\n   * new Str('lower-case').toUpperCase().$;  // 'LOWER-CASE'\n   */\n  toUpperCase() {\n    return new Str(this.$.toUpperCase());\n  }\n\n  /**\n   * @method Str#trim\n   * @public\n   * @returns {Str} New instance of Str.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trim\n   * @description Synonym for\n   * [String#trim]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trim}.\n   */\n  trim() {\n    return new Str(this.$.replace(/^[\\s\\ufeff\\u00a0]+|[\\s\\ufeff\\u00a0]+$/g, ''));\n  }\n\n  /**\n   * @method Str#trimLeft\n   * @public\n   * @returns {Str} New instance of Str.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trimLeft\n   * @description Synonym for\n   * [String#trimLeft]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trimLeft}.\n   */\n  trimLeft() {\n    return new Str(this.$.replace(/^[\\s\\ufeff\\u00a0]+/, ''));\n  }\n\n  /**\n   * @method Str#trimRight\n   * @public\n   * @returns {Str} New instance of Str.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trimRight\n   * @description Synonym for\n   * [String#trimRight]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trimRight}.\n   */\n  trimRight() {\n    return new Str(this.$.replace(/[\\s\\ufeff\\u00a0]+$/, ''));\n  }\n}\n\ndefineProperties(Str.prototype, {\n  [Symbol.toStringTag]: 'Str'\n});\n\nconstructors[2].push({\n  check: isString,\n  cls: Str\n});\n\nfunction trim(string) {\n  return string.replace(/^[\\s\\-_.]+|[\\s\\-_.]+$/g, '');\n}\n\n/**\n * @function parseJSON\n * @public\n * @param {String} [json = null] - String to parse.\n * @param {Object} [options] - Options.\n * @param {Boolean|*} [options.numbers] - If it is needed to parse number-like strings as numbers.\n * @param {Boolean|*} [options.dates] - If it is needed to parse date-like string as dates.\n * Date-like string is considered to match ^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\\dZ?$\n * @param {JSONCallback} [callback] - Callback that called on every iteration.\n * @returns {DWrap} D-Wrap of found match.\n * @description Method for parsing json.\n *\n * @example\n * parseJSON('{ \"a\": 1 }').$;                                           // { a: 1 }\n * parseJSON('{ \"a\": \"1\" }', { numbers: true }).$;                      // { numbers: true }\n * parseJSON('{ \"a\": \"1999-12-31T23:59:59.999Z\" }', { dates: true }).$; // { a: Date {...} }\n */\nfunction parseJSON(json = null, options = {}, callback) {\n  if (arguments.length <= 1) {\n    return D(JSON.parse(json));\n  }\n\n  if (isFunction(options)) {\n    callback = options;\n    options = {};\n  }\n\n  const { numbers, dates } = options;\n  const parsed = JSON.parse(json, function (key, value) {\n    if (dates && /^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\\dZ?$/.test(value)) {\n      value = new Date(value);\n    } else if (numbers && isNumberLike(value) && isString(value)) {\n      value = Number(value);\n    }\n\n    return callback ? callback.apply(this, arguments) : value;\n  });\n\n  return D(parsed);\n}\n\nexport { Str, parseJSON };\n","/**\n * @module helpers/markupToJSON\n * @private\n * @description Exports markupToJSON method.\n */\n\nimport { Arr } from '../Arr';\nimport { Str } from '../Str';\nimport { Super } from '../Super';\nimport { switcher } from '../Switcher';\nimport { htmlAllowedTagSymbols, htmlAllowedAttrSymbols, voidElements } from '../constants';\nimport { isUndefined } from './checkTypes';\n\n/**\n * @typedef {Object} MarkupElement\n * @property {'comment'|'text'|'element'} type - Type of the node.\n * @property {MarkupElement} parent - Type of the node.\n * @property {Object.<String, String>} attrs - Node attributes\n * @property {MarkupElement[]} children - Node children.\n */\n\nconst submitString = 'Please, submit an issue at https://github.com/dwaynejs/dwayne/issues/new, if needed.';\nconst NODE_REGEX_SET = new Super({\n  'tag-open': new RegExp(`<(${ htmlAllowedTagSymbols })\\\\s*`, 'i'),\n  'tag-close': constructCloseTagRegExp(htmlAllowedTagSymbols),\n  comment: /<!--((?:-[^\\->]|[^\\->])(?:-?[^-])*[^-]?|)-->/\n});\nconst TAG_OPEN_CLOSE = /^(\\/?)>/;\n// const ATTRIBUTE = /^([^\\u0000-\\u0020\\s\"'>\\/=]+)(?:\\s*=\\s*('[^']*'|\"[^\"]*\"|[^\\s\"'`<>=]+))?\\s*/;\nconst ATTRIBUTE = new RegExp(`^(${ htmlAllowedAttrSymbols })(?:\\\\s*=\\\\s*('[^']*'|\"[^\"]*\"|[^\\\\s\"'\\`<>=]+))?\\\\s*`);\nconst div = document.createElement('div');\nconst nodeSwitcher = switcher('strictEquals', (elem) => elem)\n  .case('tag-open', (elem, node) => {\n    const {\n      value: name,\n      selfClosing\n    } = node;\n\n    node = {\n      name,\n      attrs: new Super(node.attrs).map((value) => (\n        value === true\n          ? value\n          : parseCharacterData(value)\n      )).$,\n      parent: elem,\n      children: new Arr([])\n    };\n\n    elem.children.push(node);\n\n    if (!selfClosing && voidElements.indexOf(name) === -1) {\n      elem = node;\n    }\n\n    return elem;\n  })\n  .case('tag-close', (elem, node) => {\n    if (elem.name === node.value) {\n      elem = elem.parent;\n    }\n\n    return elem;\n  })\n  .case(['comment', 'text'], (elem, node, collapseWhiteSpace, type) => {\n    const element = {\n      name: `#${ type }`,\n      parent: elem,\n      value: node.value\n    };\n\n    if (type === 'text' && elem.name !== 'script' && elem.name !== 'style') {\n      element.value = parseCharacterData(element.value);\n\n      if (collapseWhiteSpace) {\n        element.value = new Str(element.value).trim().$;\n      }\n    }\n\n    if (!collapseWhiteSpace || !/^\\s*$/.test(element.value)) {\n      elem.children.push(element);\n    }\n\n    return elem;\n  });\nconst rawTextSwitcher = switcher('strictEquals', false)\n  .case(['title', 'textarea', 'style', 'script'], true);\n\nclass InternalParsingError {\n  constructor(index) {\n    this.index = index;\n  }\n}\n\nclass ParsingError extends Error {\n  type = 'PARSING_ERROR';\n}\n\n/**\n * @function markupToJSON\n * @private\n * @param {String} markup - Markup to parse to JSON.\n * @param {Boolean} [collapseWhiteSpace = false] - If the whitespace should be collapsed.\n * @returns {Arr.<MarkupElement>} Markup elements array.\n * @description Function for parsing html and xml to JSON.\n */\nexport default (markup, collapseWhiteSpace) => {\n  collapseWhiteSpace = !!collapseWhiteSpace;\n\n  const elements = new Arr([]);\n  const startMarkup = markup;\n  let found;\n  let globalIndex = 0;\n  let elem = {\n    name: null,\n    children: elements\n  };\n\n  while (markup.length) {\n    try {\n      found = find(markup, elem);\n    } catch (err) {\n      if (!(err instanceof InternalParsingError)) {\n        throwUnexpectedError();\n      }\n\n      throw new ParsingError(`Parsing error near index ${ nearString(startMarkup, globalIndex + err.index) }`);\n    }\n\n    const {\n      type,\n      attrs,\n      selfClosing,\n      index,\n      value\n    } = found;\n\n    globalIndex += index;\n\n    if (!index) {\n      throwUnexpectedError();\n    }\n\n    const node = {\n      type,\n      value\n    };\n\n    if (type === 'tag-open') {\n      node.attrs = attrs;\n      node.selfClosing = selfClosing;\n    }\n\n    elem = nodeSwitcher(node.type, [elem, node, collapseWhiteSpace]);\n\n    markup = markup.slice(index);\n  }\n\n  return elements;\n\n  function throwUnexpectedError() {\n    throw new ParsingError(`Unexpected parsing error near index ${ nearString(startMarkup, globalIndex) }. ${ submitString }`);\n  }\n};\n\nfunction find(markup, elem) {\n  const { name } = elem;\n  let matches;\n\n  if (rawTextSwitcher(name)) {\n    matches = new Super({\n      'tag-close': markup.match(constructCloseTagRegExp(name))\n    });\n  } else {\n    matches = NODE_REGEX_SET.map((regex) => (\n      markup.match(regex)\n    ));\n  }\n\n  let match;\n\n  if (\n    match = matches.find((match) => (\n      match && match.index === 0\n    ))\n  ) {\n    const returning = {\n      type: match.key,\n      index: match.value[0].length,\n      value: match.value[1]\n    };\n    const attrs = {};\n\n    if (match.key === 'tag-open') {\n      const startMarkup = markup;\n      let closeMatch;\n\n      returning.selfClosing = false;\n      returning.attrs = attrs;\n\n      while (\n        (markup = startMarkup.slice(returning.index)) &&\n        !(closeMatch = markup.match(TAG_OPEN_CLOSE))\n      ) {\n        const attr = markup.match(ATTRIBUTE);\n\n        if (!attr) {\n          returning.index += 1;\n\n          continue;\n        }\n\n        attrs[attr[1]] = isUndefined(attr[2])\n          ? true\n          : attr[2].replace(/^(\"|')|(\"|')$/g, '');\n        returning.index += attr[0].length;\n      }\n\n      if (closeMatch) {\n        returning.index += closeMatch[0].length;\n        returning.selfClosing = !!closeMatch[1];\n      }\n    }\n\n    return returning;\n  }\n\n  let { value: index } = matches.min((match) => (\n    match ? match.index : NaN\n  ));\n\n  if (index === Infinity) {\n    index = markup.length;\n  }\n\n  return {\n    type: 'text',\n    index,\n    value: markup.slice(0, index)\n  };\n}\n\nfunction constructCloseTagRegExp(tagName) {\n  return new RegExp(`</(${ tagName })\\\\s*>`, 'i');\n}\n\nfunction nearString(markup, index) {\n  return `${ index } (~~~ \"${ markup.slice(index, index + 15) }\" ~~~, the string itself is \"${ markup }\")`;\n}\n\nfunction parseCharacterData(string) {\n  return string.replace(/&(\\w+|#x?\\d+);/g, (match) => {\n    div.innerHTML = match;\n\n    return div.textContent || div.innerText;\n  });\n}\n","/**\n * @module Elem\n * @private\n * @mixin\n * @description Exports Elem class.\n */\n\nimport { Super } from './Super';\nimport { Arr, array, iterate as times } from './Arr';\nimport { blob } from './BlobObject';\nimport { method } from './Func';\nimport { Promise } from './Promise';\nimport { Str } from './Str';\nimport { switcher } from './Switcher';\nimport {\n  constructors, appliedRegExps, htmlElements, svgElements,\n  canvasGetMethods, canvasRestMethods\n} from './constants';\nimport {\n  isArray, isArrayLike, isElement, isFunction,\n  isInteger, isNil, isNumber, isNull, isString,\n  assign, dynamicDefineProperties, defineProperties, toArray,\n  validate, toStringTag, iterate, Symbol\n} from './helpers';\nimport markupToJSON from './helpers/markupToJSON';\n\n/**\n * @typedef {String} ElemEventString\n * @public\n * @description A string containing events separated by a comma with zero or more spaces or just spaces.\n */\n\n/**\n * @callback ElemValueCallback\n * @public\n * @param {String} value - Old value.\n * @param {Elem} elem - Current element.\n * @param {Number} index - Index in the set of the elements.\n */\n\n/**\n * @callback ElemSetOfCallback\n * @public\n * @param {Element} created - Created element.\n * @param {*} value - Value of the iterated element in the object.\n * @param {Key} key - Key of the iterated element in the object.\n * @param {*} object - Object that is iterated over.\n * @param {Element} elem - Current element.\n * @param {Number} index - Index of the current element.\n */\n\n/**\n * @callback ValidateCallback\n * @public\n * @param {*} value - Element value.\n * @param {Element} elem - Element to validate.\n * @param {Number} index - Index of the element.\n */\n\n/**\n * @callback CtxCallback\n * @public\n * @param {CanvasRenderingContext2D} ctx - Canvas rendering context.\n */\n\n/**\n * @callback ElemListener\n * @public\n * @param {Event} e - Fired event.\n * @param {Element} elem - Element on which the listener was called.\n * @param {Number} index - Index of the element on which the listener was called.\n */\n\n/**\n * @callback ElemRemoveListeners\n * @public\n * @param {...ElemEventString} events - If at least one argument present only removes event listeners specified\n * by the events in the arguments.\n */\n\nconst nativeDocument = global.document;\nconst emptyDiv = nativeDocument.createElement('div');\nconst eventSeparator = /(?:,| ) */;\nconst textProperty = new Super(Node.prototype).propertyDescriptor('textContent') ? 'textContent' : 'innerText';\nconst classes = {};\nconst attrs = {};\nconst windowsDwayneData = new Arr([]);\nconst inputElements = 'input, select, textarea, datalist, keygen, output';\nconst click = method('click');\nconst svgNS = 'http://www.w3.org/2000/svg';\nconst xmlNS = 'http://www.w3.org/2000/xmlns/';\nconst xlinkNS = 'http://www.w3.org/1999/xlink';\nconst xhtmlNS = 'http://www.w3.org/1999/xhtml';\nconst typeSwitcher = switcher('call', (elem, type) => {\n  const ns = type === 'svg'\n    ? svgNS\n    : elem.prop('namespaceURI') || nativeDocument.documentElement.namespaceURI || xhtmlNS;\n\n  return nativeDocument.createElementNS(ns, type);\n})\n  .case(\n    (type) => type === '#comment',\n    () => nativeDocument.createComment('')\n  )\n  .case(\n    (type) => type === '#text',\n    () => nativeDocument.createTextNode('')\n  );\nconst refSwitcher = switcher('strictEquals', 'href')\n  .case(\n    ['img', 'script', 'iframe', 'audio', 'video'],\n    'src'\n  )\n  .case(\n    'form',\n    'action'\n  );\nconst filterSwitcher = switcher('call', (selector) => selector)\n  .case(\n    isString,\n    (selector) => (\n      (elem) => new Elem(elem).is(selector)\n    )\n  )\n  .case(\n    [isArray, isElem],\n    (elems) => {\n      elems = new Arr(elems);\n\n      return (elem) => elems.indexOf(elem) !== -1;\n    }\n  );\nconst innerSwitcher = switcher('strictEquals', 0)\n  .case('padding-box', (paddings) => paddings)\n  .case('border-box', (paddings, borders) => paddings + borders);\nconst outerSwitcher = switcher('strictEquals', (borders, paddings) => borders + paddings)\n  .case('padding-box', (borders) => borders)\n  .case('border-box', 0);\nconst attrNSSwitcher = switcher('call', null)\n  .case((attr) => attr === 'xmlns' || attr === 'xmlns:xlink', (elem) => (\n    elem.name === 'svg'\n      ? xmlNS\n      : null\n  ))\n  .case((attr) => /^xlink:\\w/.test(attr), (elem) => (\n    elem.closest('svg').length\n      ? xlinkNS\n      : null\n  ));\n\n/**\n * @class Elem\n * @extends Arr\n * @public\n * @param {Element|Element[]} [elem = []] - An element or an array of elements to wrap.\n * @returns {Elem} Instance of Elem.\n * @description Wrap of an elements set. Also has all methods from from\n * [CanvasRenderingContext2D]{@link https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D}.\n * Getters methods return the same as methods from CanvasRenderingContext2D and the rest return this.\n * Work for the first canvas element in the set.\n *\n * @example\n * new Elem(document.body);\n * new Elem(document.querySelectorAll('.cls'));\n * new Elem(document.getElementsByClassName('cls'));\n */\nclass Elem extends Arr {\n  constructor(elem = []) {\n    super((() => {\n      let element = elem;\n\n      if (isArrayLike(element) && (\n        isWindow(element) ||\n        isHTMLDocument(element) ||\n        isDocumentFragment(element) ||\n        isElement(element) ||\n        isCommentOrText(element) ||\n        isStyleRule(element)\n      )) {\n        element = [element];\n      }\n\n      return new Arr(toArray(new Super(element).$, true)).object((elems, elem) => {\n        if (elems.indexOf(elem) === -1 && (\n          isElement(elem) ||\n          isWindow(elem) ||\n          isHTMLDocument(elem) ||\n          isDocumentFragment(elem) ||\n          isCommentOrText(elem) ||\n          isStyleRule(elem)\n        )) {\n          return elems.push(elem);\n        }\n\n        if (isElem(elem)) {\n          elems.push.apply(elems, elem.$);\n        }\n      }, []).$;\n    })());\n\n    this.$$ = elem;\n\n    this.forEach(addDwayneData);\n\n    /**\n     * @member {Array.<Node|Window>} Elem#$\n     * @type {Array.<Node|Window>}\n     * @public\n     * @description Constructed element set.\n     */\n\n    /**\n     * @member {*} Elem#$$\n     * @type {*}\n     * @public\n     * @description Initial element set.\n     */\n  }\n\n  /**\n   * @method Elem#add\n   * @public\n   * @param {...(String|Elem|Element|Element[])} elements - Each argument is a selector, or Elem, or Element, or array of Elements.\n   * @returns {Elem} Returns this.\n   * @description Method for adding new elements to the set.\n   *\n   * @example\n   * elem1.find('.cls1')\n   *   .add(elem2.find('.cls2'))\n   *   .hide();\n   */\n  add(...elements) {\n    iterate(arguments, (elem) => {\n      toFind(elem).forEach((elem) => {\n        if (this.indexOf(elem) === -1) {\n          this.push(elem);\n        }\n      });\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Elem#addClass\n   * @public\n   * @param {...String} classes - Classes to add.\n   * @returns {Elem} Returns this.\n   * @description Method for adding classes to the all the elements in the set.\n   *\n   * @example\n   * elem.addClass('red', 'round');\n   */\n  addClass(...classes) {\n    return this.forEach((elem) => {\n      const list = elem.classList;\n\n      iterate(isElement(elem) && arguments, (cls) => list.add(cls));\n    });\n  }\n\n  /**\n   * @method Elem#addComment\n   * @public\n   * @param {String} text - Text of comment to add.\n   * @param {Boolean} end - If the comment should be inserted to the end. If false it's inserted to the start.\n   * @returns {Elem} Returns this.\n   * @description Method for adding comment to all the elements in the set.\n   *\n   * @example\n   * elem.addHTML('<div>1</div>');\n   */\n  addComment(text, end = true) {\n    return this.forEach((elem) => {\n      if (isElement(elem)) {\n        elem.insertAdjacentHTML(end ? 'beforeend' : 'afterbegin', `<!--${ text }-->`);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#addHTML\n   * @public\n   * @param {String} html - HTML to add.\n   * @param {Boolean} end - If the HTML should be inserted to the end. If false it's inserted to the start.\n   * @returns {Elem} Returns this.\n   * @description Method for adding HTML to all the elements in the set.\n   *\n   * @example\n   * elem.addHTML('<div>1</div>');\n   */\n  addHTML(html, end = true) {\n    return this.forEach((elem) => {\n      if (isElement(elem)) {\n        elem.insertAdjacentHTML(end ? 'beforeend' : 'afterbegin', html);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#addRule\n   * @public\n   * @param {String} name - Name of the rule.\n   * @param {String} selector - Selector for the rule\n   * @param {Object.<String, String>} style - Style for the selector.\n   * @returns {Elem} Returns this.\n   * @description Method for adding css styles into the first style tag in the set.\n   * Note: style element should be inside the document.\n   *\n   * @example\n   * style.addRule('img-size', 'img.square', {\n   *   width: '40px !important',\n   *   height: '40px !important'\n   * });\n   */\n  addRule(name, selector, style) {\n    this.some((elem) => {\n      if (getName(elem) === 'style') {\n        const { sheet } = elem;\n        const { length } = sheet.cssRules;\n        const rules = new Super(style).word((value, property) => (\n          `${ new Str(property).toHyphenCase() }: ${ value };\\n`\n        ));\n\n        sheet.insertRule(\n          `${ selector } {${ rules && '\\n' }${ rules }}`,\n          length\n        );\n        sheet.cssRules[length].dwayneData = { name };\n\n        return true;\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Elem#addText\n   * @public\n   * @param {String} text - Text to add.\n   * @param {Boolean} end - If the text should be inserted to the end. If false it's inserted to the start.\n   * @returns {Elem} Returns this.\n   * @description Method for adding text to all the elements in the set.\n   *\n   * @example\n   * elem.addText('123');\n   */\n  addText(text, end = true) {\n    return this.forEach((elem) => {\n      new Elem(nativeDocument.createTextNode(text)).into(elem, end);\n    });\n  }\n\n  /**\n   * @method Elem#apply\n   * @public\n   * @param {...String} strings - Strings to apply.\n   * @returns {Elem} Returns this.\n   * @description Method that is a shorthand for many other methods.\n   * All shorthands can be separated with space and written within one string.\n   *\n   * @example\n   * elem.apply(\n   *   '#id .c1 .c2 @border(1px solid black) $disabled $attr(some value) *(Click me!)'\n   * );\n   * // shorthand for\n   * // elem\n   * //   .id('id')\n   * //   .addClass('c1', 'c2')\n   * //   .css('border', '1px solid black')\n   * //   .attr({\n   * //     attr, 'some value'\n   * //     disabled: ''\n   * //   })\n   * //   .text('Click me!');\n   * // There is a full list of possible types of syntax below...\n   *\n   * elem.apply('#id');                    // shorthand for elem.id('id');\n   * elem.apply('.c1 .c2');                // shorthand for elem.addClass('c1', 'c2');\n   * elem.apply('-.c1 -.c2');              // shorthand for elem.removeClass('c1', 'c2');\n   * elem.apply('-@float -@display');      // shorthand for elem.removeCSS('float', 'display');\n   * elem.apply('-$a1 -$a2');              // shorthand for elem.removeAttr('a1', 'a2');\n   * elem.apply('*(some text)');           // shorthand for elem.text('some text');\n   * elem.apply('&(<div>1</div>)');        // shorthand for elem.html('<div>1</div>');\n   * elem.apply('@float(right)');          // shorthand for elem.css('float', 'right');\n   * elem.apply('@transform(scale(5px))'); // shorthand for elem.css('transform', 'scale(5px)');\n   * elem.apply('@margin(2px 2px)');       // shorthand for elem.css('margin', '2px 2px');\n   * elem.apply('@marginLeft(2px)');       // shorthand for elem.css('marginLeft', '2px 2px');\n   * elem.apply('@margin-left(2px)');      // shorthand for elem.css('margin-left', '2px 2px');\n   * elem.apply('$attr(some value)');      // shorthand for elem.attr('attr', 'some value');\n   * elem.apply('$attr');                  // shorthand for elem.attr('attr', '');\n   */\n  apply(...strings) {\n    let applied;\n    let setApplied;\n    let callback;\n    let name;\n    let np1;\n    let slice;\n\n    new Str(new Arr(arguments).join(' '))\n      .split(/(\\s+)/)\n      .forEach((string) => {\n        if (!applied) {\n          np1 = string.slice(0, 1);\n          callback = appliedRegExps[np1];\n          slice = 1;\n\n          if (callback && !isFunction(callback)) {\n            callback = callback[string.slice(1, 2)];\n            slice = 2;\n          }\n\n          if (/^\\s+$/.test(string) || !callback) {\n            return;\n          }\n\n          name = string.slice(slice).match(/^[^()]+/);\n\n          if (!name && (np1 !== '*' && np1 !== '&')) {\n            return;\n          }\n\n          applied = {\n            name: name ? name[0] : '',\n            args: string.slice(slice + (name ? name[0] : '').length),\n            callback\n          };\n\n          setApplied = true;\n        }\n\n        if (!setApplied) {\n          applied.args += string;\n        }\n\n        if (!applied.args || /^\\([\\s\\S]+\\)$/.test(applied.args)) {\n          applied.callback(this, applied.name, applied.args.replace(/^\\(|\\)$/g, ''));\n          applied = null;\n        }\n\n        setApplied = false;\n      });\n\n    return this;\n  }\n\n  /**\n   * @method Elem#attr\n   * @public\n   * @param {String|Object.<String, String|ElemValueCallback>} [attr] - Name of the attribute to get or\n   * an object of the format { [attrName]: value, ... } to set attributes.\n   * @param {String|ElemValueCallback} [value] - If the first argument is a string\n   * it should be a value to set for that attribute.\n   * @returns {Super|String|Elem} If no arguments passed, D-Wrap of attributes of the first element in the set\n   * returned, if 1 string argument is passed the value of the attribute of the first element in the set\n   * returned otherwise returns this.\n   * @description Method for getting/setting attributes.\n   *\n   * @example\n   * elem.attr('attr1', 'value1'); // attribute attr1 set to 'value1' and this returned\n   * elem.attr('attr1');           // 'value1'\n   * elem.attr({\n   *   attr1: 'value3',            // attribute attr1 set to 'value3'\n   *   attr2: 'value2'             // attribute attr2 set to 'value2'\n   * });                           // this returned\n   * elem.attr().$;                // { attr1: 'value3', attr2: 'value2' }\n   */\n  attr(attr, value) {\n    const elem = getElem(this);\n\n    if (!arguments.length) {\n      return new Super(elem.attributes).object((o, attr) => {\n        o[attr.name] = attr.value;\n      });\n    }\n\n    if (arguments.length <= 1 && isString(attr)) {\n      const ns = attrNSSwitcher(attr, [new Elem(elem)]);\n\n      return isNull(ns)\n        ? elem.getAttribute(attr)\n        : elem.getAttributeNS(ns, attr);\n    }\n\n    if (arguments.length >= 2) {\n      attr = { [attr]: value };\n    }\n\n    return this.forEach((elem, index) => {\n      if (!isElement(elem)) {\n        return;\n      }\n\n      new Super(attr).forEach((value, key) => {\n        if (isNil(value) || value === false) {\n          return new Elem(elem).removeAttr(key);\n        }\n\n        if (isFunction(value)) {\n          value = value(new Elem(elem).attr(key), elem, index);\n        }\n\n        if (isNil(value) || value === false) {\n          return new Elem(elem).removeAttr(key);\n        }\n\n        value = value === true ? '' : value;\n\n        const ns = attrNSSwitcher(key, [new Elem(elem)]);\n\n        if (isNull(ns)) {\n          elem.setAttribute(key, value);\n        } else {\n          elem.setAttributeNS(ns, key, value);\n        }\n      });\n    });\n  }\n\n  /**\n   * @method Elem#blob\n   * @public\n   * @param {Object} [options = {}] - Options that are passed into {@link blob}.\n   * @returns {Promise.<BlobObject>} New instance of promise.\n   * @description Returns a {@link BlobObject} Promise. Works with image or canvas first element.\n   *\n   * @example\n   * image.blob().then((blob) => console.log(blob));  // BlobObject\n   * canvas.blob().then((blob) => console.log(blob)); // BlobObject\n   */\n  blob(options = {}) {\n    return new Promise((resolve, reject) => {\n      const elem = this.first();\n      const { name } = elem;\n\n      if (name !== 'img' && name !== 'canvas') {\n        reject(new Error('First element in the set isn\\'t an image or a canvas! (Elem#blob)'));\n      }\n\n      if (name === 'canvas') {\n        return resolve(elem);\n      }\n\n      elem\n        .load()\n        .then(() => {\n          if (elem.isBroken()) {\n            return reject(new Error('The image is broken! (Elem#blob)'));\n          }\n\n          const canvas = new Elem(nativeDocument).canvas();\n          const width = elem.width();\n          const height = elem.height();\n\n          canvas\n            .width(width)\n            .height(height)\n            .drawImage(elem.$[0], 0, 0);\n\n          resolve(canvas);\n        });\n    }).then((canvas) => {\n      const dataURL = canvas.dataURL();\n      const byteString = atob(dataURL.split(',')[1]);\n      const length = byteString.length;\n      const ab = new ArrayBuffer(length);\n      const ia = new Uint8Array(ab);\n\n      times(length, (i) => {\n        ia[i] = byteString.charCodeAt(i);\n      });\n\n      return blob(ab, options);\n    });\n  }\n\n  /**\n   * @method Elem#blur\n   * @returns {Elem} Returns this.\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLElement/blur\n   * @description Synonym for\n   * [HTMLElement#blur]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/blur}.\n   */\n  blur() {\n    return this.forEach((elem) => {\n      if (isElement(elem)) {\n        elem.blur();\n      }\n    });\n  }\n\n  /**\n   * @method Elem#calcCSS\n   * @param {String} [pseudo] - See the link.\n   * @returns {CSSStyleDeclaration} See the link.\n   * @see https://developer.mozilla.org/en/docs/Web/API/Window/getComputedStyle\n   * @description Synonym for\n   * [getComputedStyle]{@link https://developer.mozilla.org/en/docs/Web/API/Window/getComputedStyle}.\n   * Returns computed style for the first element in the set or undefined.\n   */\n  calcCSS(pseudo = null) {\n    return getComputedStyle(getElem(this), pseudo);\n  }\n\n  /**\n   * @method Elem#changeRule\n   * @public\n   * @param {String} name - Name of the rule.\n   * @param {Object.<String, String>} style - Style for the selector.\n   * @returns {Elem} Returns this.\n   * @description Method for changing css styles in the first style tag in the set.\n   * Note: style element should be inside the document.\n   *\n   * @example\n   * style.changeRule('img-size', {\n   *   width: '50px !important',\n   *   height: '50px !important'\n   * });\n   */\n  changeRule(name, style) {\n    this.some((elem) => {\n      if (getName(elem) === 'style') {\n        const { value: rule } = new Arr(elem.sheet.cssRules).find((rule) => rule.dwayneData && rule.dwayneData.name === name) || {};\n\n        if (rule) {\n          new Elem(rule).css(style);\n\n          return true;\n        }\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Elem#child\n   * @public\n   * @param {Number|String|Elem|Element|Element[]} element - If the argument is a number a wrap of the set of the children\n   * of this index of each element in the set returned otherwise an element to put into this element, a collection\n   * or a selector of it.\n   * @param {Boolean} end - If the elements should be inserted to the end. If false they are inserted to the start.\n   * @returns {Elem} Returns a wrap of children or inserted elements.\n   * @description Method is similar to\n   * [Node#appendChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/appendChild}.\n   *\n   * @example\n   * const child = elem.child(1);\n   *\n   * elem.child(elem2);\n   * elem.child(document.getElementById('id'));\n   * elem.child('#id div.c1');\n   */\n  child(element, end = true) {\n    if (isInteger(element) && element >= 0) {\n      return this.children().elem(element);\n    }\n\n    return toFind(element).into(this, end);\n  }\n\n  /**\n   * @method Elem#children\n   * @public\n   * @returns {Elem} D-Wrap of the children of the first element in the set.\n   * @description Method for getting element's children.\n   *\n   * @example\n   * const children = elem.children();\n   */\n  children() {\n    return new Elem(this.length ? this.$[0].childNodes : []);\n  }\n\n  /**\n   * @method Elem#class\n   * @public\n   * @param {String} [cls] - If it's present it has to contain class attribute to set.\n   * @returns {Arr|Elem} If the argument is present this returned otherwise a wrap of the classes array returned.\n   * @description Method for getting/setting classes.\n   *\n   * @example\n   * elem.class('c1 c2'); // class set to 'c1 c2'\n   * elem.class().$;      // ['c1', 'c2']\n   */\n  class(cls) {\n    if (!arguments.length) {\n      return new Arr(getElem(this).className.split(' '));\n    }\n\n    return this.forEach((elem) => {\n      if (isElement(elem)) {\n        elem.className = cls;\n      }\n    });\n  }\n\n  /**\n   * @method Elem#click\n   * @returns {Elem} Returns this.\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLElement/click\n   * @description Synonym for\n   * [HTMLElement#click]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/click}.\n   */\n  click() {\n    return this.forEach((elem) => {\n      if (isElement(elem)) {\n        elem.click();\n      }\n    });\n  }\n\n  /**\n   * @method Elem#clone\n   * @public\n   * @param {Boolean|*} [deep = false] - See thee link.\n   * @returns {Elem} New instance of Elem.\n   * @see https://developer.mozilla.org/en/docs/Web/API/Node/cloneNode\n   * @description Synonym for\n   * [Node#cloneNode]{@link https://developer.mozilla.org/en/docs/Web/API/Node/cloneNode}.\n   */\n  clone(deep = false) {\n    return this.object((elems, elem) => {\n      elems.add(elem.cloneNode(!!deep));\n    }, new Elem());\n  }\n\n  /**\n   * @method Elem#closest\n   * @public\n   * @param {String} selector - See the link.\n   * @returns {Elem} Set of the closest elements.\n   * @description Synonym for\n   * [Element#closest]{@link https://developer.mozilla.org/en/docs/Web/API/Element/closest}.\n   */\n  closest(selector) {\n    return this.object((elems, elem) => {\n      while (elem) {\n        if (new Elem(elem).is(selector)) {\n          return elems.add(elem);\n        }\n\n        elem = elem.parentNode;\n      }\n    }, new Elem());\n  }\n\n  /**\n   * @method Elem#contains\n   * @public\n   * @param {String|Elem|Element} element - Element to find out if it's within the first element\n   * in the set or a selector of it.\n   * @returns {Boolean} Returns if the argument within this element.\n   * @description Method is extension for\n   * [Node#contains]{@link https://developer.mozilla.org/en/docs/Web/API/Node/contains}.\n   *\n   * @example\n   * elem1.contains(elem2);   // true|false\n   * elem.contains(selector); // true|false\n   */\n  contains(element) {\n    element = toFind(element);\n\n    return getElem(this).contains(getElem(element));\n  }\n\n  /**\n   * @method Elem#create\n   * @public\n   * @param {String} type - Type of created element. If type is \"#text\" a text node is created.\n   * If type is \"#comment\" a comment node is created.\n   * @param {...String} appliedExpressions - Strings that are passed into {@link Elem#apply}.\n   * @returns {Elem} New instance of Elem - wrap of the created elements.\n   * @description Method for creating elements inside this element.\n   * If this element is not an Element the element is just created.\n   *\n   * @example\n   * elem.create('div', '#id .c1 .c2 *Some text*');\n   *\n   * // also there are shorthands for almost every HTML-element\n   * elem.div();\n   * elem.input('$type(checkbox) $name(country)');\n   */\n  create(type, ...appliedExpressions) {\n    return this.object((elems, elem) => {\n      const element = new Elem(typeSwitcher(type, [new Elem(elem)]));\n\n      element.into(elem);\n\n      elems.add(element.apply.apply(element, appliedExpressions));\n    }, new Elem());\n  }\n\n  /**\n   * @method Elem#createComment\n   * @public\n   * @param {String} text - Text of the comment.\n   * @returns {Elem} New instance of Elem - wrap of the created comments.\n   * @description Method for creating comments inside this element.\n   * If this element is not an Element the comment is just created.\n   *\n   * @example\n   * elem.createComment('comment');\n   */\n  createComment(text) {\n    return this\n      .create('#comment')\n      .text(text);\n  }\n\n  /**\n   * @method Elem#createText\n   * @public\n   * @param {String} text - Text.\n   * @returns {Elem} New instance of Elem - wrap of the created text nodes.\n   * @description Method for creating text nodes inside this element.\n   * If this element is not an Element the text node is just created.\n   *\n   * @example\n   * elem.createText('text');\n   */\n  createText(text) {\n    return this\n      .create('#text')\n      .text(text);\n  }\n\n  /**\n   * @method Elem#css\n   * @public\n   * @param {String|Object.<String, String|ElemValueCallback>} [property] - Name of the property to get or\n   * an object of the format { [property]: value, ... } to set styles.\n   * @param {String|ElemValueCallback} [value] - If the first argument is a string it should be a value to set for that property.\n   * @returns {Super|String|Elem} If no arguments passed, D-Wrap of css styles of the element returned,\n   * if 1 string argument is passed the value of the property returned otherwise returns this.\n   * @description Method for getting/setting styles. Supports !important.\n   *\n   * @example\n   * elem.css('display', 'none'); // display set to 'none' and this returned\n   * elem.css('display');         // 'none'\n   * elem.css({\n   *   display: 'inline',         // display set to 'inline'\n   *   cursor: 'pointer'          // cursor set to 'pointer'\n   * });                          // this returned\n   * elem.css().$;                // { display: 'none', cursor: 'pointer' }\n   */\n  css(property, value) {\n    let style = getElem(this).style;\n\n    if (isStyleRule(this.$[0])) {\n      style = this.$[0].style;\n    }\n\n    if (!arguments.length) {\n      return new Str(style.cssText)\n        .split(/; ?/)\n        .object((o, value) => {\n          if (value) {\n            property = value.split(/: /);\n\n            o[new Str(property[0]).toCamelCase().$] = property[1];\n          }\n        });\n    }\n\n    if (arguments.length <= 1 && isString(property)) {\n      property = new Str(property).toHyphenCase().$;\n\n      return style.getPropertyValue(property) + (style.getPropertyPriority(property) ? ' !important' : '');\n    }\n\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    return this.forEach((elem, index) => {\n      if (!isElement(elem) && !isStyleRule(elem)) {\n        return;\n      }\n\n      new Super(property).forEach((value, property) => {\n        if (isNil(value)) {\n          return new Elem(elem).removeCSS(property);\n        }\n\n        property = new Str(property).toHyphenCase().$;\n\n        if (isFunction(value)) {\n          value = value(new Elem(elem).css(property), elem, index);\n        }\n\n        if (isNil(value)) {\n          return new Elem(elem).removeAttr(key);\n        }\n\n        elem.style.removeProperty(property);\n        elem.style.setProperty(\n          property,\n          value.replace(/ ?!important$/, ''),\n          /!important$/.test(value) ? 'important' : ''\n        );\n      });\n    });\n  }\n\n  /**\n   * @method Elem#ctx\n   * @public\n   * @param {String|Object|CtxCallback} [property] - If present and object\n   * it's assigned to the canvas rendering context, if function\n   * it's called with canvas rendering context argument, if string\n   * the value from the second argument is used for assigning\n   * this property to canvas rendering context and if not present\n   * canvas rendering context returned.\n   * @param {*} [value] - See the property argument.\n   * @returns {CanvasRenderingContext2D|Elem}\n   * @description Rendering context of the first canvas in the set.\n   *\n   * @example\n   * canvas.ctx; // CanvasRenderingContext2D\n   */\n  ctx(property, value) {\n    let ctx;\n\n    this.some((elem) => {\n      if (getName(elem) === 'canvas') {\n        ctx = elem.dwayneData.ctx;\n\n        return true;\n      }\n    });\n\n    if (!arguments.length) {\n      return ctx;\n    }\n\n    if (!ctx) {\n      return this;\n    }\n\n    if (isFunction(property)) {\n      property(ctx);\n    } else {\n      if (arguments.length >= 2) {\n        property = { [property]: value };\n      }\n\n      assign(ctx, property);\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Elem#data\n   * @public\n   * @param {String|Object.<String, String|ElemValueCallback>} [key] - Name of the data attribute (without data- prefix)\n   * to get or an object of the format { [attrName]: value, ... } to set attributes.\n   * @param {String|ElemValueCallback} [value] - If the first argument is a string it should be a value to set for that attribute.\n   * @returns {Super|String|Elem} If no arguments passed, D-Wrap of dataset of the element returned,\n   * if 1 string argument is passed the value of the data attribute returned otherwise returns this.\n   * @description Method for getting/setting data attributes. See\n   * [HTMLElement#dataset]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/dataset}.\n   *\n   * @example\n   * elem.data('someKey1', 'value'); // attribute data-some-key1 set to 'value1' and this returned\n   * elem.data('someKey1');          // 'value1'\n   * elem.data({\n   *   someKey1: 'value3',           // attribute data-some-key1 set to 'value3'\n   *   someKey2: 'value2'            // attribute data-some-key2 set to 'value2'\n   * });                             // this returned\n   * elem.data().$;                  // { someKey1: 'value3', someKey2: 'value2' }\n   */\n  data(key, value) {\n    const dataset = getElem(this).dataset;\n\n    if (!arguments.length) {\n      return new Super(dataset).object((o, value, key) => {\n        o[key] = value;\n      });\n    }\n\n    if (arguments.length === 1 && isString(key)) {\n      return dataset[key];\n    }\n\n    if (arguments.length >= 2) {\n      key = { [key]: value };\n    }\n\n    return this.forEach((elem, index) => {\n      if (!isElement(elem)) {\n        return;\n      }\n\n      iterate(key, (value, key) => {\n        elem.dataset[key] = isFunction(value) ? value(elem.dataset[key], elem, index) : value;\n      });\n    });\n  }\n\n  /**\n   * @method Elem#dataURL\n   * @param {String} [type = 'image/png'] - See the link\n   * @param {Number} [encoderOptions = 0.92] - See the link.\n   * @returns {String} Data URL for the first canvas element in the set.\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/toDataURL\n   * @description Synonym for\n   * [HTMLCanvasElement#toDataURL]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/toDataURL}.\n   *\n   * @example\n   * canvas.dataURL();\n   */\n  dataURL(type, encoderOptions) {\n    const ctx = this.ctx();\n\n    if (!ctx) {\n      return '';\n    }\n\n    return ctx.canvas.toDataURL.apply(ctx.canvas, arguments);\n  }\n\n  /**\n   * @method Elem#deleteRule\n   * @public\n   * @param {String} name - Name of the rule.\n   * @returns {Elem} Returns this.\n   * @description Method for deleting css styles in a style tag.\n   * Note: style element should be inside the document.\n   *\n   * @example\n   * style.deleteRule('img-size');\n   */\n  deleteRule(name) {\n    this.some((elem) => {\n      if (getName(elem) === 'style') {\n        const rule = new Arr(elem.sheet.cssRules).find((rule) => rule.dwayneData && rule.dwayneData.name === name);\n\n        if (rule) {\n          elem.sheet.deleteRule(rule.key);\n\n          return true;\n        }\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Elem#dispatch\n   * @public\n   * @param {String|Event} event - Event or a string (new Event(event) is created).\n   * @param {Object} [eventInit = {}] - See the link.\n   * @param {Boolean} [eventInit.bubbles = true] - See the link.\n   * @param {Boolean} [eventInit.cancelable = true] - See the link.\n   * @param {Object} [details = {}] - Object that is assigned to the event.\n   * @returns {Elem} Returns this.\n   * @see https://developer.mozilla.org/en/docs/Web/API/Event/Event\n   * @description Synonym for\n   * [EventTarget#dispatchEvent]{@link https://developer.mozilla.org/en/docs/Web/API/EventTarget/dispatchEvent}.\n   *\n   * @example\n   * elem.dispatch('click');\n   * elem.dispatch('click', { bubbles: false, cancellable: false });\n   * elem.dispatch(new CustomEvent('custom-event'));\n   */\n  dispatch(event, eventInit = {}, details = {}) {\n    const { bubbles = true, cancelable = true } = eventInit || {};\n    let finalEvent = event;\n\n    if (!/Event$/.test(toStringTag(finalEvent))) {\n      try {\n        finalEvent = new Event(finalEvent, { bubbles, cancelable });\n      } catch (err) {\n        finalEvent = nativeDocument.createEvent('Event');\n        finalEvent.initEvent(event, bubbles, cancelable);\n      }\n\n      assign(finalEvent, details);\n    }\n\n    return this.forEach((elem) => {\n      if (isElement(elem)) {\n        elem.dispatchEvent(finalEvent);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#elem\n   * @public\n   * @param {Number} [index = 0] - Index of the element of the set to get. Negative index means elem.length + index.\n   * @returns {Elem} New instance of Elem.\n   *\n   * @example\n   * elem.elem(1); // a wrap of the element in the set that has index 1\n   * elem.elem();  // a wrap of the element in the set that has index 0\n   */\n  elem(index = 0) {\n    if (index < 0) {\n      index = this.length + index;\n    }\n\n    return new Elem(this.$[index]);\n  }\n\n  /**\n   * @method Elem#filter\n   * @public\n   * @param {String|Function|Element[]|Elem} [selector = Boolean] - If it's a string the method filters elements with the selector\n   * otherwise super.filter is called.\n   * @returns {Elem} New instance of Elem.\n   * @description Method for filtering elements.\n   *\n   * @example\n   * elem.filter((elem) => new Elem(elem).closest('.parent'));\n   * elem.filter(elemsInArray);\n   * elem.filter(elemsInElem);\n   * elem.filter('.child');\n   */\n  filter(selector = Boolean) {\n    return new Elem(super.filter(filterSwitcher(selector)));\n  }\n\n  /**\n   * @method Elem#find\n   * @public\n   * @param {String|Function} selector - Selector to find.\n   * @returns {Elem|{ key: Key, value: * }|null} New instance of Elem if selector is a string\n   * otherwise super.find is called.\n   * @description Synonym for\n   * [Element#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Element/querySelectorAll}.\n   */\n  find(selector) {\n    if (!isString(selector)) {\n      return super.find(selector);\n    }\n\n    return this.object((elems, elem) => {\n      elems.add(find(selector, elem));\n    }, new Elem());\n  }\n\n  /**\n   * @method Elem#first\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Synonym for elem.elem(0).\n   */\n  first() {\n    return this.elem(0);\n  }\n\n  /**\n   * @method Elem#firstChild\n   * @public\n   * @param {String} [selector = null] - If present, finds first child in every elem that matches the selector.\n   * If not, finds first child of each element in the set.\n   * @returns {Elem} New instance of Elem.\n   * @description Method for finding first children of each element in the set.\n   *\n   * @example\n   * elem.first();       // finds first child of each element in the elem set\n   * elem.first('.foo'); // find first child that has foo class of each element in the set\n   */\n  firstChild(selector = null) {\n    return this.object((elems, elem) => {\n      const { value: found } = new Elem(elem)\n        .children()\n        .find((elem) => new Elem(elem).is(selector)) || {};\n\n      elems.add(found);\n    }, new Elem());\n  }\n\n  /**\n   * @method Elem#focus\n   * @returns {Elem} Returns this.\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLElement/focus\n   * @description Synonym for\n   * [HTMLElement#focus]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/focus}.\n   */\n  focus() {\n    return this.forEach((elem) => {\n      if (isElement(elem)) {\n        elem.focus();\n      }\n    });\n  }\n\n  /**\n   * @method Elem#getRule\n   * @public\n   * @param {String} name - Name of the rule.\n   * @returns {{ selector: (String|void), rules: Object }} Set of the css rules.\n   * @description Method for getting set of the rules under the name.\n   * Note: style element should be inside the document.\n   *\n   * @example\n   * style.addRule('img-size', 'img.square', {\n   *   width: '40px',\n   *   height: '40px'\n   * });\n   * style.getRule('img-size');\n   * // {\n   * //   selector: 'img.square',\n   * //   rules: {\n   * //     width: '40px',\n   * //     height: '40px'\n   * //   }\n   * // }\n   */\n  getRule(name) {\n    let found = {\n      selector: undefined,\n      rules: {}\n    };\n\n    this.some((elem) => {\n      if (getName(elem) === 'style') {\n        const { value: rule } = new Arr(elem.sheet.cssRules).find((rule) => rule.dwayneData && rule.dwayneData.name === name) || {};\n\n        if (rule) {\n          found = {\n            selector: rule.selectorText,\n            rules: new Elem(rule).css().$\n          };\n\n          return true;\n        }\n      }\n    });\n\n    return found;\n  }\n\n  /**\n   * @method Elem#hasAttr\n   * @public\n   * @param {String} attr - Name of the attribute.\n   * @returns {Boolean} If the first element in the set has the attribute.\n   * @description Method that returns if the first element in the set has the attribute or not.\n   *\n   * @example\n   * elem.attr('attr', 'value').hasAttr('attr'); // true\n   * elem.removeAttr('attr').hasAttr('attr');    // false\n   */\n  hasAttr(attr) {\n    const elem = getElem(this);\n    const ns = attrNSSwitcher(attr, [new Elem(elem)]);\n\n    return isNull(ns)\n      ? elem.hasAttribute(attr)\n      : elem.hasAttributeNS(ns, attr);\n  }\n\n  /**\n   * @method Elem#hasClass\n   * @public\n   * @param {String} cls - Name of the class.\n   * @returns {Boolean} If the first element in the set has the class.\n   * @description Method that returns if the first element in the set has the class or not.\n   *\n   * @example\n   * elem.addClass('cls').hasClass('cls');    // true\n   * elem.removeClass('cls').hasClass('cls'); // false\n   */\n  hasClass(cls) {\n    return getElem(this).classList.contains(cls);\n  }\n\n  /**\n   * @method Elem#height\n   * @public\n   * @param {*|ElemValueCallback} [height] - Height to set.\n   * @returns {Elem|String} If no arguments passed height of the first element in the set returned.\n   * Otherwise all elements heights in the set are set to the height argument.\n   * @description Gets or sets height.\n   *\n   * @example\n   * elem.height(123);\n   * elem.height(); // 123\n   */\n  height(height) {\n    return this.prop.apply(this, new Arr(arguments).unshift('height').$);\n  }\n\n  /**\n   * @method Elem#hide\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Hides all elements in the set.\n   *\n   * @example\n   * elem.hide();\n   */\n  hide() {\n    return this.forEach((elem) => {\n      elem = new Elem(elem);\n\n      const currentDisplay = elem.css('display');\n\n      if (currentDisplay.indexOf('none')) {\n        elem.prop('dwayneData').previousDisplay = currentDisplay;\n      }\n\n      elem.css('display', 'none !important');\n    });\n  }\n\n  /**\n   * @method Elem#html\n   * @public\n   * @param {String|ElemValueCallback|*} [html] - HTML to write instead of current HTML.\n   * @returns {Elem|String} If no arguments passed HTML of the first element in the set returned.\n   * Otherwise all elements HTML in the set are set to the html argument.\n   * @description Gets or sets HTML.\n   *\n   * @example\n   * elem.html('<div>1</div>');\n   * elem.html(); // '<div>1</div>'\n   */\n  html(html) {\n    if (!arguments.length) {\n      return getElem(this).innerHTML;\n    }\n\n    return this.forEach((elem, index) => {\n      if (isElement(elem)) {\n        elem.innerHTML = isFunction(html) ? html(elem.innerHTML, elem, index) : html;\n      }\n    });\n  }\n\n  /**\n   * @method Elem#id\n   * @public\n   * @param {String|*} [id] - Id to set.\n   * @returns {Elem|String} If no arguments passed id of the first element in the set returned.\n   * Otherwise all elements ids in the set are set to the id argument.\n   * @description Gets id or sets ids.\n   *\n   * @example\n   * elem.id('unique');\n   * elem.id(); // 'unique'\n   */\n  id(id) {\n    if (!arguments.length) {\n      return getElem(this).id;\n    }\n\n    return this.forEach((elem) => {\n      if (isElement(elem)) {\n        elem.id = id;\n      }\n    });\n  }\n\n  /**\n   * @member {Number} Elem#innerHeight\n   * @type {Number}\n   * @public\n   * @readonly\n   * @description Getter for finding how much height content of the first element can be.\n   *\n   * @example\n   * elem.css({\n   *   boxSizing: 'border-box',\n   *   height: '200px',\n   *   paddingTop: '2px',\n   *   paddingBottom: '3px',\n   *   borderTop: '1px solid black',\n   *   borderBottom: '4px solid black'\n   * }).innerHeight; // 190\n   * elem\n   *   .css('box-sizing', 'content-box')\n   *   .innerHeight; // 200\n   * elem\n   *   .css('box-sizing', 'padding-box')\n   *   .innerHeight; // 195\n   */\n  get innerHeight() {\n    const elem = this.$[0];\n\n    if (isWindow(elem)) {\n      return elem.innerHeight;\n    }\n\n    const {\n      borderTopWidth,\n      borderBottomWidth,\n      boxSizing,\n      height,\n      paddingTop,\n      paddingBottom\n    } = this.calcCSS();\n    const borders = px(borderTopWidth) + px(borderBottomWidth);\n    const paddings = px(paddingTop) + px(paddingBottom);\n\n    return px(height) - innerSwitcher(boxSizing, [paddings, borders]);\n  }\n\n  /**\n   * @member {Number} Elem#innerWidth\n   * @type {Number}\n   * @public\n   * @readonly\n   * @description Getter for finding how much width content of the first element can be.\n   *\n   * @example\n   * elem.css({\n   *   boxSizing: 'border-box',\n   *   width: '200px',\n   *   paddingLeft: '2px',\n   *   paddingRight: '3px',\n   *   borderLeft: '1px solid black',\n   *   borderRight: '4px solid black'\n   * }).innerWidth; // 190\n   * elem\n   *   .css('box-sizing', 'content-box')\n   *   .innerWidth; // 200\n   * elem\n   *   .css('box-sizing', 'padding-box')\n   *   .innerWidth; // 195\n   */\n  get innerWidth() {\n    const elem = this.$[0];\n\n    if (isWindow(elem)) {\n      return elem.innerWidth;\n    }\n\n    const {\n      borderLeftWidth,\n      borderRightWidth,\n      boxSizing,\n      paddingLeft,\n      paddingRight,\n      width\n    } = this.calcCSS();\n    const borders = px(borderLeftWidth) + px(borderRightWidth);\n    const paddings = px(paddingLeft) + px(paddingRight);\n\n    return px(width) - innerSwitcher(boxSizing, [paddings, borders]);\n  }\n\n  /**\n   * @method Elem#insertAfter\n   * @public\n   * @param {String|Elem|Element} element - Element to insert this element after or a selector of it.\n   * @returns {Elem} Returns this.\n   * @description Puts the elements from the set after the element specified by the argument.\n   * The elements remain in the same order.\n   *\n   * @example\n   * elem.insertAfter(elem2);\n   * elem.insertAfter(document.getElementById('id'));\n   * elem.insertAfter('#id div.c1');\n   */\n  insertAfter(element) {\n    element = toFind(element).first();\n\n    let parent = element.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    element = element.next().$[0];\n    parent = parent.$[0];\n\n    return this.forEach((elem) => {\n      if (elem === element) {\n        element = element.nextSibling;\n\n        return;\n      }\n\n      if (element) {\n        parent.insertBefore(elem, element);\n      } else {\n        parent.appendChild(elem);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#insertBefore\n   * @public\n   * @param {String|Elem|Element} element - Element to insert this element before or a selector of it.\n   * @returns {Elem} Returns this.\n   * @description Puts the elements from the set before the element specified by the argument.\n   * The elements remain in the same order.\n   *\n   * @example\n   * elem.insertBefore(elem2);\n   * elem.insertBefore(document.getElementById('id'));\n   * elem.insertBefore('#id div.c1');\n   */\n  insertBefore(element) {\n    element = toFind(element).first();\n\n    let parent = element.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    element = element.$[0];\n    parent = parent.$[0];\n\n    return this.forEach((elem) => {\n      parent.insertBefore(elem, element);\n    });\n  }\n\n  /**\n   * @method Elem#into\n   * @public\n   * @param {String|Elem|Element} element - Element to put this elements into or a selector of it.\n   * @param {Boolean} end - If the elements should be inserted to the end. If false they are inserted to the start.\n   * @returns {Elem} Returns this.\n   * @description Method is similar to\n   * [Node#appendChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/appendChild}.\n   *\n   * @example\n   * elem.into(elem2);\n   * elem.into(document.getElementById('id'));\n   * elem.into('#id div.c1');\n   */\n  into(element, end = true) {\n    element = toFind(element).$[0];\n\n    if (\n      !element ||\n      isWindow(element) ||\n      isHTMLDocument(element) ||\n      isCommentOrText(element)\n    ) {\n      return this;\n    }\n\n    if (!end && element.firstChild) {\n      return this.forEachReverse((elem) => {\n        element.insertBefore(elem, element.firstChild);\n      });\n    }\n\n    return this.forEach((elem) => {\n      element.appendChild(elem);\n    });\n  }\n\n  /**\n   * @method Elem#is\n   * @public\n   * @param {String} selector\n   * @returns {Boolean} If the first element in the set matches the selector.\n   * If the selector is undefined or null always returns true. If it's not for not elements\n   * entries returns false.\n   * @description Synonym for\n   * [Element#matches]{@link https://developer.mozilla.org/en/docs/Web/API/Element/matches}.\n   *\n   * @example\n   * elem.addClass('cls');\n   * elem.is('.cls');         // true\n   *\n   * elem.removeClass('cls');\n   * elem.is('.cls');         // false\n   */\n  is(selector) {\n    if (isNull(selector)) {\n      return true;\n    }\n\n    const elem = getElem(this);\n    const matches = (\n      elem.matches ||\n      elem.matchesSelector ||\n      elem.webkitMatchesSelector ||\n      elem.mozMatchesSelector ||\n      elem.msMatchesSelector ||\n      elem.oMatchesSelector\n    );\n\n    if (!isElement(this.$[0])) {\n      return false;\n    }\n\n    try {\n      return matches.call(elem, selector);\n    } catch (err) {\n      console.error(`Selector '${ selector }' is not a valid selector (Elem#is)`);\n\n      return false;\n    }\n  }\n\n  /**\n   * @method Elem#isBroken\n   * @public\n   * @returns {Boolean} If the first image in the set is broken.\n   * @description Returns if the first element in the set is broken. Not image and not loaded image is considered proper.\n   *\n   * @example\n   * const img = elem.img().on({\n   *   'load': onload,\n   *   'error': onload\n   * });\n   *\n   * onload = () => {\n   *   console.log(img.isBroken()); // true\n   * };\n   *\n   * img.ref('/some/non-existent/site/not-found.png');\n   */\n  isBroken() {\n    let isBroken = false;\n\n    this.some((elem) => {\n      if (getName(elem) === 'img') {\n        isBroken = !!(elem.complete && (!elem.naturalWidth || !elem.naturalHeight));\n\n        return true;\n      }\n    });\n\n    return isBroken;\n  }\n\n  /**\n   * @method Elem#isWithinDocument\n   * @public\n   * @returns {Boolean} Returns if the first element in the set is within the document or not.\n   * @description Returns if the first element in the set is within the document or not.\n   *\n   * @example\n   * new Elem(document.body).isWithinDocument();  // true\n   * new Elem(document).div().isWithinDocument(); // false\n   */\n  isWithinDocument() {\n    return this.first().closest('html').length !== 0;\n  }\n\n  /**\n   * @method Elem#last\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Synonym for elem.elem(-1).\n   */\n  last() {\n    return this.elem(-1);\n  }\n\n  /**\n   * @method Elem#lastChild\n   * @public\n   * @param {String} [selector = null] - If present, finds last child in every elem that matches the selector.\n   * If not, finds last child of each element in the set.\n   * @returns {Elem} New instance of Elem.\n   * @description Method for finding last children of each element in the set.\n   *\n   * @example\n   * elem.last();       // finds last child of each element in the elem set\n   * elem.last('.foo'); // find last child that has 'foo' class of each element in the set\n   */\n  lastChild(selector = null) {\n    return this.object((elems, elem) => {\n      const { value: found } = new Elem(elem)\n        .children()\n        .reverse()\n        .find((elem) => new Elem(elem).is(selector)) || {};\n\n      elems.add(found);\n    }, new Elem());\n  }\n\n  /**\n   * @method Elem#load\n   * @public\n   * @returns {Promise.<{ proper: Elem, broken: Elem }>} Promise with broken and proper images.\n   * @description Loads each image in the set and puts it to the proper or broken array.\n   *\n   * @example\n   * images.load().then(({ broken }) => {\n   *   broken.filter('img').ref('/fallback.png');\n   * });\n   */\n  load() {\n    const images = {\n      proper: new Elem(),\n      broken: new Elem()\n    };\n\n    return Promise.all(\n      this\n        .filter((elem) => getName(elem) === 'img')\n        .map((elem) => {\n          const $elem = new Elem(elem);\n\n          if (elem.complete) {\n            images[$elem.isBroken() ? 'broken' : 'proper'].push(elem);\n\n            return;\n          }\n\n          return new Promise((resolve) => {\n            const removeListeners = $elem.on({\n              load() {\n                images.proper.add(elem);\n\n                removeListeners();\n                resolve();\n              },\n              error() {\n                images.broken.add(elem);\n\n                removeListeners();\n                resolve();\n              }\n            });\n          });\n        })\n        .$\n    ).then(() => images);\n  }\n\n  /**\n   * @method Elem#moveAttr\n   * @public\n   * @param {String} attr - Attribute to move to the first element.\n   * @param {String} [value = ''] - Value to set for the attribute. If not set attribute of the previous element or '' used.\n   * @returns {Elem} Returns this.\n   * @description Method for moving an attribute from previous element to the next one (first element in this set).\n   *\n   * @example\n   * elem1.moveAttr('attr', 'value');     // attribute 'attr' set to 'value' on elem1\n   * elem2.moveAttr('attr');              // attribute 'attr' removed from elem1. set to 'value' on elem2\n   * elem3.moveAttr('attr', 'new value'); // attribute 'attr' removed from elem2. set to 'new value' on elem3\n   */\n  moveAttr(attr, value = '') {\n    const prev = attrs[attr];\n    const elem = this.elem();\n\n    if (prev && elem.length) {\n      if (arguments.length < 2) {\n        value = prev.attr(attr);\n      }\n\n      prev.removeAttr(attr);\n    }\n\n    if (elem.length) {\n      attrs[attr] = elem.attr(attr, value);\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Elem#moveClass\n   * @public\n   * @param {String} cls - Class to move to the first element.\n   * @returns {Elem} Returns this.\n   * @description Method for moving a class from previous element to the next one (first element in this set).\n   *\n   * @example\n   * elem1.moveClass('cls'); // class 'cls' added to elem1\n   * elem2.moveClass('cls'); // class 'cls' removed from elem1. added to elem1\n   */\n  moveClass(cls) {\n    const prev = classes[cls];\n    const elem = this.elem();\n\n    if (prev && elem.length) {\n      prev.removeClass(cls);\n    }\n\n    if (elem.length) {\n      classes[cls] = elem.addClass(cls);\n    }\n\n    return this;\n  }\n\n  /**\n   * @member {String} Elem#name\n   * @type {String}\n   * @public\n   * @readonly\n   * @description nodeName (lowercased) of the first element in the set.\n   *\n   * @example\n   * const elem1 = elem.create('div');\n   * elem1.name // 'div'\n   */\n  get name() {\n    return getName(this.$[0]);\n  }\n\n  /**\n   * @method Elem#next\n   * @public\n   * @param {String} [selector = null] - If present, finds next element to every elem that matches the selector.\n   * If not, finds next element to each element in the set.\n   * @returns {Elem} New instance of Elem.\n   * @description Method for finding next element to each element in the set.\n   *\n   * @example\n   * elem.next();       // finds next element to each element in the set\n   * elem.next('.foo'); // finds next element to each element that has 'foo' class\n   */\n  next(selector = null) {\n    return this.object((elems, elem) => {\n      /* eslint no-cond-assign: 0 */\n      while (elem = elem.nextSibling) {\n        if (new Elem(elem).is(selector)) {\n          return elems.add(elem);\n        }\n      }\n    }, new Elem());\n  }\n\n  /**\n   * @method Elem#off\n   * @public\n   * @param {...ElemEventString} events - Events to remove.\n   * @returns {Elem} Returns this.\n   * @description Method that removes all the listeners from each element in the set specified by the events arguments.\n   *\n   * @example\n   * elem.off('click');\n   * elem.off('click, input');\n   * elem.off('click, input', 'focus');\n   */\n  off(...events) {\n    return this.forEach((elem) => {\n      const { listeners } = elem.dwayneData;\n\n      iterate(arguments, (event) => {\n        iterate(event.split(eventSeparator), (event) => {\n          (listeners[event] || new Super()).forEach(({ removeListener }) => removeListener());\n        });\n      });\n    });\n  }\n\n  /**\n   * @method Elem#on\n   * @public\n   * @param {ElemEventString|Object.<ElemEventString|ElemListener>} event - Either a {@link ElemEventString} string\n   * or an object with event keys (a key is also ElemEventString) and listeners values.\n   * @param {String} [selector = null] - Selector to filter event targets.\n   * @param {ElemListener} [listener] - If the first argument is a string it must be a listener function for\n   * specified event(s).\n   * @returns {ElemRemoveListeners} Function that takes optional event argument.\n   * @description Adds event listeners for all the elements in the set.\n   * For debugging: If you need to know what listeners are in work (and what selectors filter targets)\n   * you can look at the base property of the only dwayne listener that listens for the event\n   * and find all working listeners in listener.base.dwayneData.listeners[event].$.\n   *\n   * @example\n   * elem.on(\n   *   'change, input',\n   *   'input, select, textarea, datalist, keygen, output',\n   *   (e, elem, index) => console.log(elem.value)\n   * );\n   * elem.on(\n   *   'change, input',\n   *   (e, elem, index) => console.log(elem.value)\n   * );\n   * elem.on(\n   *   {\n   *     'change, input': (e, elem, index) => console.log(elem.value),\n   *     'blur': () => console.log('blur')\n   *   },\n   *   'input, select, textarea, datalist, keygen, output'\n   * );\n   *\n   * const removeListeners = elem.on({\n   *   'change, input': (e, elem, index) => console.log(elem.value),\n   *   'blur': () => console.log('blur')\n   * });\n   *\n   * removeListeners('click');\n   * removeListeners('blur, change');\n   * removeListeners('blur, change', 'input');\n   * removeListeners();\n   */\n  on(event, selector = null, listener) {\n    const allListeners = new Super({});\n\n    if (isFunction(selector)) {\n      listener = selector;\n      selector = null;\n    }\n\n    if (isString(event)) {\n      event = { [event]: listener };\n    }\n\n    event = new Super(event).object((listeners, listener, event) => {\n      iterate(event.split(eventSeparator), (event) => {\n        listeners[event] = listener;\n      });\n    });\n\n    this.forEach((elem) => {\n      if (!isElement(elem) && !isWindow(elem) && !isHTMLDocument(elem)) {\n        return;\n      }\n\n      const { listeners } = (windowsDwayneData.find(({ element }) => element === elem) || {}).value || elem.dwayneData;\n\n      event.forEach((listener, event) => {\n        const removeEventListeners = listeners[event] = listeners[event] || new Super({}).define('index', {\n          value: 0,\n          configurable: true,\n          writable: true\n        });\n        const index = removeEventListeners.prop('index');\n\n        if (!removeEventListeners.has('listener')) {\n          const newListener = (e) => {\n            removeEventListeners.forEach(({ selector, listener }) => {\n              if (new Elem(e.target).is(selector)) {\n                listener.call(elem, e, elem, index);\n              }\n            });\n          };\n\n          newListener.base = elem;\n\n          elem.addEventListener(event, newListener, false);\n          removeEventListeners.define('listener', {\n            value: newListener,\n            configurable: true,\n            writable: true\n          });\n        }\n\n        const removeListener = () => {\n          removeEventListeners.delete(index);\n\n          if (!removeEventListeners.count) {\n            elem.removeEventListener(event, removeEventListeners.prop('listener'), false);\n            removeEventListeners.delete('listener');\n          }\n        };\n\n        allListeners.prop(event, (allListeners.prop(event) || new Arr()).push(removeListener));\n\n        removeEventListeners.assign({\n          index: index + 1,\n          [index]: {\n            selector,\n            listener,\n            removeListener\n          }\n        });\n      });\n    });\n\n    return function removeEventListeners(event) {\n      if (arguments.length) {\n        iterate(arguments, (event) => {\n          iterate(event.split(eventSeparator), (event) => {\n            if (allListeners.has(event)) {\n              allListeners.prop(event).forEach((removeListener) => removeListener());\n              allListeners.delete(event);\n            }\n          });\n        });\n\n        return;\n      }\n\n      allListeners.forEach((removeListeners) => {\n        removeListeners.forEach((removeListener) => removeListener());\n      });\n    };\n  }\n\n  /**\n   * @member {Number} Elem#outerHeight\n   * @type {Number}\n   * @public\n   * @readonly\n   * @description Getter for finding how much height the element actually is.\n   *\n   * @example\n   * elem.css({\n   *   boxSizing: 'border-box',\n   *   height: '200px',\n   *   paddingTop: '2px',\n   *   paddingBottom: '3px',\n   *   borderTop: '1px solid black',\n   *   borderBottom: '4px solid black'\n   *   marginTop: '0px',\n   *   marginBottom: '5px'\n   * }).outerHeight; // 205\n   * elem\n   *   .css('box-sizing', 'content-box')\n   *   .outerHeight; // 215\n   * elem\n   *   .css('box-sizing', 'padding-box')\n   *   .outerHeight; // 210\n   */\n  get outerHeight() {\n    const elem = this.$[0];\n\n    if (isWindow(elem)) {\n      return elem.outerHeight;\n    }\n\n    const {\n      borderTopWidth,\n      borderBottomWidth,\n      boxSizing,\n      height,\n      marginTop,\n      marginBottom,\n      paddingTop,\n      paddingBottom\n    } = this.calcCSS();\n    const borders = px(borderTopWidth) + px(borderBottomWidth);\n    const paddings = px(paddingTop) + px(paddingBottom);\n\n    return px(height) + px(marginTop) + px(marginBottom) + outerSwitcher(boxSizing, [borders, paddings]);\n  }\n\n  /**\n   * @member {Number} Elem#outerWidth\n   * @type {Number}\n   * @public\n   * @readonly\n   * @description Getter for finding how much width the element actually is.\n   *\n   * @example\n   * elem.css({\n   *   boxSizing: 'border-box',\n   *   width: '200px',\n   *   paddingLeft: '2px',\n   *   paddingRight: '3px',\n   *   borderLeft: '1px solid black',\n   *   borderRight: '4px solid black'\n   *   marginLeft: '0px',\n   *   marginRight: '5px'\n   * }).outerWidth; // 205\n   * elem\n   *   .css('box-sizing', 'content-box')\n   *   .outerWidth; // 215\n   * elem\n   *   .css('box-sizing', 'padding-box')\n   *   .outerWidth; // 210\n   */\n  get outerWidth() {\n    const elem = this.$[0];\n\n    if (isWindow(elem)) {\n      return elem.outerWidth;\n    }\n\n    const {\n      borderLeftWidth,\n      borderRightWidth,\n      boxSizing,\n      marginLeft,\n      marginRight,\n      paddingLeft,\n      paddingRight,\n      width\n    } = this.calcCSS();\n    const borders = px(borderLeftWidth) + px(borderRightWidth);\n    const paddings = px(paddingLeft) + px(paddingRight);\n\n    return px(width) + px(marginLeft) + px(marginRight) + outerSwitcher(boxSizing, [borders, paddings]);\n  }\n\n  /**\n   * @method Elem#parent\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Method returns wrap of the set of the parent elements of each element in the set.\n   */\n  parent() {\n    return this.object((elems, elem) => elems.add(elem.parentNode), new Elem());\n  }\n\n  /**\n   * @method Elem#parentTree\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Returns wrap of all parents of each element in the set.\n   *\n   * @example\n   * elem.parentTree(); // Elem\n   */\n  parentTree() {\n    return this.object((elems, elem) => {\n      while (elem = elem.parentNode) {\n        elems.add(elem);\n      }\n    }, new Elem());\n  }\n\n  /**\n   * @method Elem#prev\n   * @public\n   * @param {String} [selector = null] - If present, finds previous element to every elem that matches the selector.\n   * If not, finds previous element to each element in the set.\n   * @returns {Elem} New instance of Elem.\n   * @description Method for finding previous element to each element in the set.\n   *\n   * @example\n   * elem.next();       // finds previous element to each element in the set\n   * elem.next('.foo'); // finds previous element to each element that has 'foo' class\n   */\n  prev(selector = null) {\n    return this.object((elems, elem) => {\n      /* eslint no-cond-assign: 0 */\n      while (elem = elem.previousSibling) {\n        if (new Elem(elem).is(selector)) {\n          return elems.add(elem);\n        }\n      }\n    }, new Elem());\n  }\n\n  /**\n   * @method Elem#prop\n   * @public\n   * @param {String|Object.<String, ElemValueCallback|*>} property - Either a string of a property or an assigned object.\n   * @param {ElemValueCallback|*} [value] - If a property parameter is a string\n   * this has to be an assigned value if it's present.\n   * @returns {Elem|*} Returns this if it's setter or a value if getter.\n   * @description Method that is either a property getter for the first element in the set\n   * or a setter for every element in the set.\n   *\n   * @example\n   * elem.prop('draggable', false);\n   * elem.prop('draggable'); // false\n   */\n  prop(property, value) {\n    if (arguments.length <= 1 && isString(property)) {\n      return this.$[0] ? this.$[0][property] : undefined;\n    }\n\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    return this.forEach((elem, index) => {\n      iterate(property, (value, prop) => {\n        elem[prop] = isFunction(value) ? value(elem[prop], elem, index) : value;\n      });\n    });\n  }\n\n  /**\n   * @method Elem#ref\n   * @public\n   * @param {String|ElemValueCallback} [link] - If it's present link to a resource.\n   * @returns {Elem|String} If the link argument isn't present it's a getter of the 'src' attribute\n   * for the one of following elements: img, script, iframe, audio, video; of the 'action' attribute\n   * for a form element and of the 'href' attribute for the rest. If it's present it's a setter\n   * of the same attribute for all the element in the set.\n   * @description Method for getting resources links and setting them.\n   *\n   * @example\n   * elem.ref('/some/cool/image.png');\n   * elem.ref(); // '/some/cool/image.png'\n   */\n  ref(link) {\n    if (!arguments.length) {\n      return this.attr(refSwitcher(this.name));\n    }\n\n    return this.forEach((elem) => {\n      elem = new Elem(elem);\n\n      elem.attr(refSwitcher(elem.name), link);\n    });\n  }\n\n  /**\n   * @method Elem#remove\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Removes all the elements from the set from the document.\n   * Note: it doesn't remove them from the set so watch out for the memory leaks.\n   *\n   * @example\n   * elem.remove();\n   */\n  remove() {\n    return this.forEach((elem) => {\n      const parent = elem.parentNode;\n\n      if (parent) {\n        parent.removeChild(elem);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#removeAttr\n   * @public\n   * @param {...String} attributes - Attributes to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the attributes from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeAttr('foo', 'bar', 'baz');\n   */\n  removeAttr(...attributes) {\n    return this.forEach((elem) => {\n      if (!isElement(elem)) {\n        return;\n      }\n\n      iterate(arguments, (attr) => {\n        const ns = attrNSSwitcher(attr, [new Elem(elem)]);\n\n        if (isNull(ns)) {\n          elem.removeAttribute(attr);\n        } else {\n          elem.removeAttributeNS(ns, attr);\n        }\n      });\n    });\n  }\n\n  /**\n   * @method Elem#removeClass\n   * @public\n   * @param {...String} classes - Classes to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the classes from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeClass('foo', 'bar', 'baz');\n   */\n  removeClass(...classes) {\n    return this.forEach((elem) => {\n      const list = elem.classList;\n\n      iterate(isElement(elem) && arguments, (cls) => list.remove(cls));\n    });\n  }\n\n  /**\n   * @method Elem#removeCSS\n   * @public\n   * @param {...String} props - CSS properties to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the CSS properties from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeCSS('display', 'position', 'margin');\n   */\n  removeCSS(...props) {\n    return this.forEach((elem) => {\n      if (!isElement(elem)) {\n        return;\n      }\n\n      iterate(arguments, (css) => {\n        elem.style.removeProperty(css);\n      });\n    });\n  }\n\n  /**\n   * @method Elem#replace\n   * @public\n   * @param {String|Elem|Element} element - Element to replace the first element in the set\n   * with a set of elements specified by the argument (Element, set of elements or a selector of them).\n   * @returns {Elem} Returns this.\n   * @description Method is similar to\n   * [Node#replaceChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/replaceChild}.\n   *\n   * @example\n   * elem.replace(elem2);\n   * elem.replace(document.getElementById('id'));\n   * elem.replace('#id div.c1');\n   */\n  replace(element) {\n    element = toFind(element);\n\n    const parent = this.first().parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    let elem = parent;\n    let method = 'into';\n    const next = this.next().first().$[0];\n    const prev = this.prev().first().$[0];\n\n    if (next) {\n      elem = next;\n      method = 'insertBefore';\n    } else if (prev) {\n      elem = prev;\n      method = 'insertAfter';\n    }\n\n    this.first().remove();\n\n    element[method](elem);\n  }\n\n  /**\n   * @method Elem#setOf\n   * @public\n   * @param {String} type - HTML element type.\n   * @param {Number|Object|Array.<*>} iterator - A number (how many elements to create inside each element),\n   * an object or an array to iterate over.\n   * @param {ElemSetOfCallback} callback\n   * @returns {Elem} New instance of Elem.\n   * @description Function for creating set of elements inside each element in the set based on an array or an object.\n   *\n   * @example\n   * table.setOf('tr', [[1, 2], [3, 4], [5, 6]], (row, array) => {\n   *   D(row).setOf('td', array, (col, number) => {\n   *     D(col).text(number);\n   *   });\n   * });\n   */\n  setOf(type, iterator, callback) {\n    validate({ 2: callback }, { 2: ['function'] }, 'Elem#setOf');\n\n    iterator = new Super(iterator).$;\n\n    if (isNumber(iterator)) {\n      try {\n        validate({ 1: iterator }, { 1: ['intLike', '>=0'] }, 'Elem#setOf');\n      } catch (e) {\n        throw new Error('2nd argument must be either or non-negative integer, or object! (at Elem#setOf)');\n      }\n\n      iterator = array(iterator).$;\n    }\n\n    return this.object((elems, elem, index) => {\n      iterate(iterator, (value, key) => {\n        const created = new Elem(elem).create(type);\n\n        callback(created.$[0], value, key, iterator, elem, index);\n\n        elems.add(created);\n      });\n    }, new Elem());\n  }\n\n  /**\n   * @method Elem#show\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Shows all elements in the set.\n   * If an element was hidden using {@link Elem#hide} previous display is set.\n   *\n   * @example\n   * elem.show();\n   */\n  show() {\n    return this.forEach((elem) => {\n      const { dwayneData } = elem;\n\n      elem = new Elem(elem);\n\n      if (elem.css('display').indexOf('none') === 0) {\n        elem.css('display', dwayneData.previousDisplay);\n      }\n\n      dwayneData.previousDisplay = '';\n    });\n  }\n\n  /**\n   * @method Elem#text\n   * @public\n   * @param {String|ElemValueCallback|*} [text] - Text to write instead of current text.\n   * @returns {Elem|String} If no arguments passed text of the first element in the set returned.\n   * Otherwise all elements texts in the set are set to the text argument.\n   * @description Gets or sets text.\n   *\n   * @example\n   * elem.text('123');\n   * elem.text(); // '123'\n   */\n  text(text) {\n    if (!arguments.length) {\n      return this.prop(textProperty);\n    }\n\n    return this.forEach((elem, index) => {\n      const txt = elem[textProperty];\n\n      new Elem(elem).prop(\n        textProperty,\n        isFunction(text)\n          ? text(txt, elem, index)\n          : text\n      );\n    });\n  }\n\n  /**\n   * @method Elem#toggleAttr\n   * @public\n   * @param {String} attr - Attribute to toggle.\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the attribute\n   * with the '' value and if falsey method removes the attribute. If not present method adds\n   * the attribute if it doesn't exist and removes if it does.\n   * @returns {Elem} Returns this.\n   * @description Method for toggling attributes.\n   *\n   * @example\n   * elem.toggleAttr('attr');\n   * elem.toggleAttr('attr', someCondition);\n   */\n  toggleAttr(attr, condition) {\n    return this.forEach((elem) => {\n      elem = new Elem(elem);\n\n      if (arguments.length < 2 ? !elem.hasAttr(attr) : condition) {\n        elem.attr(attr, '');\n      } else {\n        elem.removeAttr(attr);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#toggleAttr\n   * @public\n   * @param {String} cls - Class to toggle.\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the class\n   * and if falsey method removes the class. If not present method adds\n   * the class if it doesn't exist and removes if it does.\n   * @returns {Elem} Returns this.\n   * @description Method for toggling classes.\n   *\n   * @example\n   * elem.toggleClass('cls');\n   * elem.toggleClass('cls', someCondition);\n   */\n  toggleClass(cls, condition) {\n    return (arguments.length < 2 ? !this.hasClass(cls) : condition)\n      ? this.addClass(cls)\n      : this.removeClass(cls);\n  }\n\n  get toStringTag() {\n    return toStringTag(this.$$);\n  }\n\n  /**\n   * @method Elem#up\n   * @public\n   * @param {Integer} [level = 1] - What level up along the tree should be the parent.\n   * @returns {Elem} New instance of Elem.\n   * @description Creates a collection of parents of level &lt;level&gt;.\n   *\n   * @example\n   * elem.up();\n   * elem.up(2);\n   */\n  up(level = 1) {\n    validate([level], [['intLike', '>=0']], 'Elem#up');\n\n    level = Number(level);\n\n    return this.object((elems, elem) => {\n      let n = level;\n\n      while (n-- && elem) {\n        elem = elem.parentNode;\n      }\n\n      elems.add(elem);\n    }, new Elem());\n  }\n\n  /**\n   * @method Elem#validate\n   * @public\n   * @param {ValidateCallback} [validator] - If present, function that validates inputs.\n   * @returns {Elem|Object.<String, Error|*>|null}\n   * If a callback argument provided returns this. If no arguments provided returns either an object\n   * with input names keys and errors values or null if no errors found.\n   * @description If a callback argument provided adds it to the element validators list.\n   * If no arguments provided validates every input element in the set with its own functions.\n   * If an element is a form it validates all input elements inside it. After the validation\n   * fires 'validate' event with 'valid' and 'error' (if form it's errors) properties.\n   *\n   * @example\n   * form.on('input change', 'input', (value, input) => {\n   *   input = D(input);\n   *\n   *   if (Number(value) % 3) {\n   *     input.addClass('invalid');\n   *\n   *     throw new Error('The value should be divided by 3!');\n   *   }\n   *\n   *   input.removeClass('invalid');\n   * });\n   */\n  validate(validator) {\n    validate([validator], ['function||!'], 'Elem#validate');\n\n    if (validator) {\n      return this.forEach(({ dwayneData }) => {\n        dwayneData.validators.push(validator);\n      });\n    }\n\n    const errors = new Super({ errors: null });\n\n    this\n      .filter(`${ inputElements }, form`)\n      .forEach((elem, index) => {\n        if (getName(elem) === 'form') {\n          let formErrors = { errors: null };\n          const form = new Elem(elem);\n          const inputs = form.find(inputElements);\n\n          inputs.forEach((input, index) => {\n            validatorWrap(input, index, formErrors);\n          });\n\n          errors.deepAssign(formErrors);\n\n          formErrors = formErrors.errors;\n\n          form.dispatch('validate', {}, {\n            valid: !formErrors,\n            errors: formErrors\n          });\n\n          return inputs.forEach((input) => {\n            const inputError = (formErrors || {})[input.name];\n\n            new Elem(input).dispatch('validate', {}, {\n              valid: !inputError,\n              error: inputError || null\n            });\n          });\n        }\n\n        let inputError = { errors: null };\n\n        validatorWrap(elem, index, inputError);\n        errors.deepAssign(inputError);\n\n        inputError = (inputError.errors || {})[elem.name];\n\n        new Elem(elem).dispatch('validate', {}, {\n          valid: !inputError,\n          error: inputError || null\n        });\n      });\n\n    function validatorWrap(input, index, errors) {\n      try {\n        if (input.validity && !input.validity.valid) {\n          throw new Error(input.validationMessage);\n        }\n\n        input.dwayneData.validators.forEach((validator) => {\n          validator(input.value, input, index);\n        });\n      } catch (err) {\n        (errors.errors = errors.errors || {})[input.name] = err;\n      }\n    }\n\n    if (errors.every((error) => isNull(error))) {\n      return null;\n    }\n\n    return errors.$.errors;\n  }\n\n  /**\n   * @method Elem#width\n   * @public\n   * @param {*|ElemValueCallback} [width] - Width to set.\n   * @returns {Elem|String} If no arguments passed width of the first element in the set returned.\n   * Otherwise all elements widths in the set are set to the width argument.\n   * @description Gets or sets width.\n   *\n   * @example\n   * elem.width(123);\n   * elem.width(); // 123\n   */\n  width(width) {\n    return this.prop.apply(this, new Arr(arguments).unshift('width').$);\n  }\n}\n\ndefineProperties(Elem.prototype, {\n  [Symbol.toStringTag]: 'Elem'\n});\n\n/**\n * @const {Elem} win\n * @type {Elem}\n * @public\n * @description Elem instance of window.\n */\nconst win = new Elem(global);\n\n/**\n * @const {Elem} doc\n * @type {Elem}\n * @public\n * @description Elem instance of document.\n */\nconst doc = new Elem(nativeDocument);\n\n/**\n * @const {Elem} html\n * @type {Elem}\n * @public\n * @description Elem instance of document.documentElement.\n */\nconst html = new Elem(nativeDocument.documentElement);\n\n/**\n * @const {Elem} body\n * @type {Elem}\n * @public\n * @description Elem instance of document.body.\n */\nconst body = new Elem(nativeDocument.body);\n\n/**\n * @const {Elem} head\n * @type {Elem}\n * @public\n * @description Elem instance of document.head.\n */\nconst head = new Elem(nativeDocument.head);\n\nconst elements = new Arr(htmlElements).concat(svgElements).$;\nconst props = new Arr(elements).map((type) => new Str(type).toCamelCase().$).$;\n\ndynamicDefineProperties(Elem.prototype, props, (elem, i) => function () {\n  return this.create.apply(this, new Arr(arguments).unshift(elements[i]).$);\n});\n\ndynamicDefineProperties(Elem.prototype, canvasGetMethods, (method) => function () {\n  const ctx = this.ctx();\n\n  if (ctx) {\n    return ctx[method].apply(ctx, arguments);\n  }\n});\n\ndynamicDefineProperties(Elem.prototype, canvasRestMethods, (method) => function () {\n  const ctx = this.ctx();\n\n  if (ctx) {\n    ctx[method].apply(ctx, arguments);\n  }\n\n  return this;\n});\n\n/**\n * @function toFind\n * @private\n * @param {Element|Elem|String} elem - Element, selector of Elements or Elem.\n * @returns {Elem} Instance of Elem.\n */\nfunction toFind(elem) {\n  if (isElem(elem)) {\n    return elem;\n  }\n\n  if (isString(elem)) {\n    elem = find(elem);\n  }\n\n  return new Elem(elem);\n}\n\n/**\n * @function isElem\n * @private\n * @param {*} value - Value to check if it's Elem.\n * @returns {Boolean} If the value is Elem.\n * @description Returns if the value is Elem or not.\n */\nfunction isElem(value) {\n  return value instanceof Elem;\n}\n\n/**\n * @function isWindow\n * @private\n * @param {*} value - Value to check if it's Window.\n * @returns {Boolean} If the value is Window.\n * @description Returns if the value is Window or not.\n */\nfunction isWindow(value) {\n  return toStringTag(value) === 'Window';\n}\n\n/**\n * @function isHTMLDocument\n * @private\n * @param {*} value - Value to check if it's HTMLDocument.\n * @returns {Boolean} If the value is HTMLDocument.\n * @description Returns if the value is HTMLDocument or not.\n */\nfunction isHTMLDocument(value) {\n  return toStringTag(value) === 'HTMLDocument';\n}\n\n/**\n * @function isDocumentFragment\n * @private\n * @param {*} value - Value to check if it's a DocumentFragment.\n * @returns {Boolean} If the value is a DocumentFragment.\n * @description Returns if the value is a DocumentFragment or not.\n */\nfunction isDocumentFragment(value) {\n  return toStringTag(value) === 'DocumentFragment';\n}\n\n/**\n * @function isStyleRule\n * @private\n * @param {*} value - Value to check if it's a style rule.\n * @returns {Boolean} If the value is a style rule.\n * @description Returns if the value is a style rule or not.\n */\nfunction isStyleRule(value) {\n  return toStringTag(value) === 'CSSStyleRule';\n}\n\n/**\n * @function\n * @private\n * @param {*} value - Value to check if it's Comment or Text.\n * @returns {Boolean} If the value is HTMLDocument.\n * @description Returns if the value is Comment or Text or not.\n */\nfunction isCommentOrText(value) {\n  const tag = toStringTag(value);\n\n  return tag === 'Comment' || tag === 'Text';\n}\n\n/**\n * @function getElem\n * @private\n * @param {Elem} elem - Element to check.\n * @returns {Element} The argument or a fallback if needed.\n */\nfunction getElem(elem) {\n  return isElement(elem.$[0]) ? elem.$[0] : emptyDiv;\n}\n\n/**\n * @function getName\n * @private\n * @param {Element} [elem] - Element which name is needed to know.\n * @returns {String} Element name.\n */\nfunction getName(elem) {\n  return (elem && elem.nodeName && elem.nodeName.toLowerCase()) || '';\n}\n\n/**\n * @function addDwayneData\n * @private\n * @param {Element} elem - Element to add dwayneData to.\n * @returns {void}\n */\nfunction addDwayneData(elem) {\n  if (!{}.hasOwnProperty.call(elem, 'dwayneData') && !isWindow(elem)) {\n    /**\n     * @member Element#dwayneData\n     * @type {Object}\n     * @protected\n     * @property {String} previousDisplay - Parameter used for hiding/showing elements.\n     * @property {Object.<String, Super>} removeListeners - Parameter used for remove event listeners.\n     * @property {CanvasRenderingContext2D} [ctx] - Canvas rendering context.\n     * @property {Arr} validators - Validators assigned to element.\n     * @description D data.\n     */\n    Object.defineProperty(elem, 'dwayneData', {\n      value: {\n        previousDisplay: '',\n        listeners: {},\n        ctx: getName(elem) === 'canvas' && elem.getContext('2d'),\n        validators: new Arr([])\n      }\n    });\n  } else if (isWindow(elem) && !windowsDwayneData.some(({ element }) => element === elem)) {\n    windowsDwayneData.push({\n      element: elem,\n      listeners: {}\n    });\n  }\n}\n\nconstructors[2].push({\n  check: (elem) => (\n    isElement(elem) ||\n    isWindow(elem) ||\n    isHTMLDocument(elem) ||\n    isCommentOrText(elem) ||\n    isDocumentFragment(elem) ||\n    /^(HTMLCollection|NodeList)$/.test(toStringTag(elem))\n  ),\n  cls: Elem\n});\n\n/**\n * @function find\n * @public\n * @param {String} selector - Selector to find.\n * @param {Element} [base = document] - Base to find in.\n * @returns {Elem} New instance of Elem.\n * @description Synonym for\n * [Document#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Document/querySelectorAll}.\n */\nfunction find(selector, base = nativeDocument) {\n  return new Elem(\n    isElement(base) || isHTMLDocument(base)\n      ? base.querySelectorAll(String(selector))\n      : []\n  );\n}\n\n/**\n * @function parseHTML\n * @public\n * @param {String} html - HTML to parse.\n * @param {Boolean} [collapseWhiteSpace = false] - If the whitespace should be\n * collapsed during the parsing.\n * @returns {Elem} New instance of Elem.\n * @description Parses HTML and returns a wrap of #document-fragment containing the contents.\n *\n * @example\n * parseHTML('<div>123</div>'); // Elem\n */\nfunction parseHTML(html, collapseWhiteSpace) {\n  const json = markupToJSON(html, collapseWhiteSpace);\n  const template = doc.template();\n  const elem = new Elem(template.$[0].content);\n\n  json.forEach(function forEachNode(node) {\n    const {\n      name,\n      attrs,\n      value,\n      parent,\n      children\n    } = node;\n\n    const parentNode = parent.elem || elem;\n    const element = parentNode.create(name);\n\n    node.elem = element;\n\n    if (value) {\n      element.text(value);\n    }\n\n    if (attrs) {\n      element.attr(new Super(attrs).map((value) => (\n        value === true ? '' : value\n      )).$);\n    }\n\n    if (name === 'template') {\n      node.elem = new Elem(element.prop('content'));\n    }\n\n    if (children) {\n      children.forEach(forEachNode);\n    }\n  });\n\n  return new Elem(elem);\n}\n\n/**\n * @function px\n * @public\n * @param {String|Number} size - String containing pixels value or a number.\n * @returns {Number} Number of pixels.\n * @description Function for parsing pixel strings.\n *\n * @example\n * px('0px');  // 0\n * px('42px'); // 42\n */\nfunction px(size) {\n  return Number(String(size).replace(/px$/, ''));\n}\n\nexport { Elem, win, doc, html, body, head, find, parseHTML, px };\n","export function registerDBlock(Block) {\n  class DBlock extends Block {\n    static template = ''\n      + '<d-elements'\n      + '  value=\"{elems}\"'\n      + '  parentScope=\"{ParentScope}\"'\n      + '  parentTemplate=\"{ParentTemplate}\"'\n      + '/>';\n\n    afterConstruct() {\n      const {\n        parentScope: {\n          $$: {\n            parentScope: parentParentScope,\n            parentTemplate: parentParentTemplate,\n            argsChildren: children\n          }\n        },\n        argsChildren: ownChildren,\n        parentTemplate,\n        dBlockName\n      } = this.$$;\n      let found;\n\n      if (ownChildren.length) {\n        return;\n      }\n\n      this.ParentScope = parentParentScope;\n      this.ParentTemplate = parentParentTemplate;\n\n      if (dBlockName) {\n        found = children.find(({ name: nodeName }) => nodeName === `d-block:${ dBlockName }`);\n\n        if (!found) {\n          let parent = this;\n\n          /* eslint no-empty: 0 */\n          while (\n            (parent = parent.$$.parentScope)\n            && !(found = parent.$$.dBlocks.find(({ $$: { dBlockName: DBlockName } }) => DBlockName === dBlockName))\n            && parent.$$.parentScope.$$.name === '#d-item'\n          ) {}\n\n          if (found) {\n            this.ParentScope = parent;\n            this.ParentTemplate = parentTemplate;\n            found.value = {\n              children: found.value.$$.argsChildren\n            };\n          }\n        }\n\n        this.elems = found && found.value.children.length\n          ? found.value.children\n          : null;\n      } else {\n        this.elems = children;\n      }\n    }\n  }\n\n  return {\n    name: 'd-block',\n    value: DBlock\n  };\n}\n","import { Arr, array } from '../Arr';\nimport { Super } from '../Super';\nimport {\n  assign, iterate,\n  isArray, isFunction, isNumber\n} from '../helpers';\n\nexport function registerDEach(Block, createBlock) {\n  class DEach extends Block {\n    constructor(opts) {\n      super(opts);\n\n      const {\n        args: {\n          item: itemName = '$item',\n          index: indexName = '$index'\n        }\n      } = this;\n\n      assign(this.$$, {\n        uids: new Super({}),\n        items: new Arr([]),\n        UID: this.args.uid || undefined,\n        itemName,\n        indexName\n      });\n    }\n\n    afterRender() {\n      this.watch('args.set', 'args.sortBy', 'args.filterBy', () => {\n        const {\n          argsChildren,\n          uids,\n          parentScope,\n          parentElem,\n          parentTemplate,\n          scope,\n          itemName,\n          indexName,\n          UID\n        } = this.$$;\n        const {\n          args: { sortBy }\n        } = this;\n        const $uids = uids.$;\n        const newKeys = {};\n        const newUIDs = {};\n        let {\n          set,\n          filterBy\n        } = this.args;\n\n        if (isNumber(set)) {\n          set = array(set).$;\n        }\n\n        if (isArray(set) && isFunction(sortBy)) {\n          set = new Arr(set)\n            .slice()\n            .sort(sortBy)\n            .$;\n        }\n\n        if (isFunction(filterBy)) {\n          filterBy = [filterBy];\n        }\n\n        if (isArray(filterBy)) {\n          iterate(filterBy, (filter) => {\n            set = new Super(set).filter(filter).$;\n          });\n        }\n\n        new Super(set).forEach((item, index) => {\n          scope[itemName] = item;\n          scope[indexName] = index;\n\n          const uid = parentScope.$$.evaluate(UID, null, null, false, false, this);\n\n          newKeys[uid] = newKeys[uid] || {};\n          newKeys[uid][index] = true;\n          newUIDs[index] = uid;\n        });\n\n        scope[itemName] = null;\n        scope[indexName] = null;\n\n        uids.forEach((items, uid) => {\n          if (!newKeys[uid]) {\n            items.forEach((Item) => {\n              Item.$$.remove();\n            });\n\n            return;\n          }\n\n          items.splice(Object.keys(newKeys[uid]).length).forEach((Item) => {\n            Item.$$.remove();\n          });\n        });\n\n        let prevBlock;\n\n        new Super(set).forEach((item, index) => {\n          const uid = newUIDs[index];\n          let block;\n\n          if ($uids[uid] && $uids[uid].length) {\n            block = newKeys[uid][index] = uids.$[uid].shift();\n            block.$$.scope[indexName] = index;\n            block.$$.scope[itemName] = item;\n\n            if (block.$$.prevBlock !== prevBlock && prevBlock) {\n              prevBlock.$$.insertAfterIt(block.$$.content, true);\n            }\n          } else {\n            block = newKeys[uid][index] = createBlock({\n              node: {\n                itemName,\n                indexName,\n                item,\n                index,\n                name: '#d-item',\n                children: argsChildren\n              },\n              parent: this,\n              parentElem,\n              parentBlock: this,\n              parentScope,\n              parentTemplate,\n              prevBlock\n            });\n          }\n\n          block.$$.prevBlock = prevBlock;\n          prevBlock = block;\n        });\n\n        this.$$.uids = new Super(newKeys).map((items) => (\n          new Super(items).values()\n        ));\n      });\n    }\n  }\n\n  return {\n    name: 'd-each',\n    value: DEach\n  };\n}\n","import { Arr } from '../Arr';\nimport { Elem } from '../Elem';\n\nexport function registerDElements(Block, createBlock) {\n  class DElements extends Block {\n    afterConstruct() {\n      const { parentElem } = this.$$;\n      const {\n        parentScope,\n        parentTemplate\n      } = this.args;\n      let firstTime = true;\n\n      this.watch('args.value', () => {\n        if (firstTime) {\n          firstTime = false;\n\n          return;\n        }\n\n        const {\n          children,\n          mixins,\n          parent,\n          watchersToRemove,\n          content\n        } = this.$$;\n        const { value } = this.args;\n\n        children.forEach((child) => {\n          child.$$.remove(true);\n        });\n        mixins.forEach((mixin) => {\n          mixin.$$.remove(true);\n        });\n        content.remove();\n\n        if (parent instanceof Block) {\n          parent.$$.removeContent(content);\n        }\n\n        this.$$.children = new Arr([]);\n        this.$$.mixins = new Arr([]);\n        this.$$.watchersToRemove = watchersToRemove.filter(({ watchers, watcher, forDElements }) => {\n          if (forDElements) {\n            return true;\n          }\n\n          const index = watchers.indexOf(watcher);\n\n          if (index !== -1) {\n            watchers.splice(index, 1);\n          }\n        });\n        this.$$.content = new Elem();\n\n        let prevBlock;\n\n        new Arr(value || []).forEach((child) => {\n          prevBlock = createBlock({\n            node: child,\n            parent: this,\n            parentElem,\n            parentBlock: this,\n            parentScope,\n            parentTemplate,\n            prevBlock\n          });\n        });\n      });\n    }\n  }\n\n  return {\n    name: 'd-elements',\n    value: DElements\n  };\n}\n","export function registerDIf(Block) {\n  class DIf extends Block {\n    static template = ''\n      + '<d-elements'\n      + '  value=\"{elems}\"'\n      + '  parentScope=\"{$$.parentScope}\"'\n      + '  parentTemplate=\"{$$.parentTemplate}\"'\n      + '/>';\n\n    constructor(opts) {\n      super(opts);\n\n      const { parentScope } = this.$$;\n      let index = Infinity;\n      const values = this.$$.argsChildren.map((child, i) => {\n        const {\n          name,\n          attrs,\n          children\n        } = child;\n        let cond = attrs.if;\n\n        if (name !== 'd-else' && cond) {\n          cond = parentScope.$$.evaluate(cond, (newValue) => {\n            if (!!newValue === values.$[i]) {\n              return;\n            }\n\n            values.$[i] = !!newValue;\n\n            if (i > index) {\n              return;\n            }\n\n            if (i < index) {\n              index = i;\n              this.elems = children;\n\n              return;\n            }\n\n            const found = values.find(Boolean);\n\n            if (found) {\n              index = found.key;\n              this.elems = this.$$.argsChildren.$[found.key].children;\n            } else {\n              index = Infinity;\n              this.elems = null;\n            }\n          }, this);\n        } else {\n          cond = true;\n        }\n\n        if (cond && index === Infinity) {\n          index = i;\n          this.elems = children;\n        }\n\n        return !!cond;\n      });\n    }\n  }\n\n  return {\n    name: 'd-if',\n    value: DIf\n  };\n}\n","export function registerDItem(Block) {\n  class DItem extends Block {\n    static template = ''\n      + '<d-elements'\n      + '  value=\"{$$.argsChildren}\"'\n      + '  parentScope=\"{this}\"'\n      + '  parentTemplate=\"{$$.parentTemplate}\"'\n      + '/>';\n  }\n\n  return {\n    name: '#d-item',\n    value: DItem\n  };\n}\n","import { Arr } from '../Arr';\nimport { Super } from '../Super';\n\nexport function registerDSwitch(Block) {\n  class DSwitch extends Block {\n    static template = ''\n      + '<d-elements'\n      + '  value=\"{elems}\"'\n      + '  parentScope=\"{$$.parentScope}\"'\n      + '  parentTemplate=\"{$$.parentTemplate}\"'\n      + '/>';\n\n    index = Infinity;\n\n    constructor(opts) {\n      super(opts);\n\n      const {\n        $$: { parentScope },\n        args,\n        args: { value }\n      } = this;\n      let wasDefault;\n\n      this.values = this.$$.argsChildren.object((values, child, i) => {\n        const {\n          name,\n          attrs,\n          children\n        } = child;\n        let val = attrs.if;\n\n        if (wasDefault) {\n          return;\n        }\n\n        if (name !== 'd-case' && name !== 'd-default') {\n          return;\n        }\n\n        if (name === 'd-default') {\n          wasDefault = true;\n        }\n\n        if (name === 'd-default') {\n          val = args.value;\n        } else if (val) {\n          val = parentScope.$$.evaluate(val, (newValue) => {\n            if (this.equals(this.values.$[i].value, newValue)) {\n              return;\n            }\n\n            this.values.$[i].value = newValue;\n\n            if (i > this.index) {\n              return;\n            }\n\n            if (i < this.index) {\n              this.index = i;\n              this.elems = children;\n\n              return;\n            }\n\n            const found = this.values.find(({ value }) => (\n              this.equals(value, args.value)\n            ));\n\n            if (found) {\n              this.index = found.key;\n              this.elems = found.value.children;\n            } else {\n              this.index = Infinity;\n              this.elems = null;\n            }\n          }, this);\n        } else {\n          val = undefined;\n        }\n\n        if (this.equals(val, value) && this.index === Infinity) {\n          this.index = i;\n          this.elems = children;\n        }\n\n        values.push({\n          name,\n          children,\n          value: val\n        });\n      }, new Arr([]));\n    }\n\n    afterConstruct() {\n      let firstTime = true;\n\n      this.watch('args.value', () => {\n        if (firstTime) {\n          firstTime = false;\n\n          return;\n        }\n\n        const {\n          value: newValue\n        } = this.args;\n\n        this.index = Infinity;\n        this.values.forEach(({ name, value, children }, i) => {\n          const val = name === 'd-default'\n            ? newValue\n            : value;\n\n          if (this.equals(val, newValue) && this.index === Infinity) {\n            this.index = i;\n            this.elems = children;\n          }\n        });\n\n        if (this.index === Infinity) {\n          this.elems = null;\n        }\n      });\n    }\n\n    equals(value1, value2) {\n      return new Super(value1).equals(value2);\n    }\n  }\n\n  return {\n    name: 'd-switch',\n    value: DSwitch\n  };\n}\n","import { Super } from '../Super';\n\nexport function registerDAttr(Mixin) {\n  class DAttr extends Mixin {\n    attrs = {};\n\n    afterUpdate(newValue) {\n      const {\n        elem,\n        args,\n        attrs\n      } = this;\n\n      if (args) {\n        newValue = new Super(args).object((attrs, attr) => {\n          attrs[attr] = newValue;\n        });\n      }\n\n      newValue = new Super(newValue || {}).$;\n\n      new Super(attrs).forEach((value, prop) => {\n        if (!newValue[prop]) {\n          elem.removeAttr(prop);\n        }\n      });\n      elem.attr(newValue);\n\n      this.attrs = newValue;\n    }\n\n    beforeRemove() {\n      const {\n        elem,\n        attrs\n      } = this;\n\n      elem.removeAttr.apply(elem, new Super(attrs).keys().$);\n    }\n  }\n\n  return {\n    name: 'd-attr',\n    value: DAttr\n  };\n}\n\n","import { isFunction } from '../helpers';\n\nexport function registerDBind(Mixin) {\n  class DBind extends Mixin {\n    afterUpdate(value) {\n      if (this.off) {\n        this.off();\n      }\n\n      if (!isFunction(value)) {\n        return;\n      }\n\n      if (this.args) {\n        this.off = this.elem.on(this.args.join(','), value);\n      } else {\n        console.error('Provide \"d-bind\" mixin with an event names (like \"d-bind(click)\" or \"d-bind(keyup, keypress)\")!');\n      }\n    }\n\n    beforeRemove() {\n      const { off } = this;\n\n      if (off) {\n        off();\n      }\n    }\n  }\n\n  return {\n    name: 'd-bind',\n    value: DBind\n  };\n}\n","import { Super } from '../Super';\nimport { isArray, isString, iterate } from '../helpers';\n\nexport function registerDClass(Mixin) {\n  class DClass extends Mixin {\n    classes = [];\n\n    afterUpdate(newValue) {\n      const {\n        elem,\n        args,\n        classes\n      } = this;\n      const newClasses = [];\n\n      newValue = new Super(newValue).$;\n\n      if (args) {\n        newValue = newValue\n          ? args\n          : [];\n      }\n\n      if (isString(newValue)) {\n        newValue = newValue.split(/\\s+/);\n      }\n\n      if (isArray(newValue)) {\n        iterate(classes, (cls) => {\n          if (newValue.indexOf(cls) === -1) {\n            elem.removeClass(cls);\n          }\n        });\n        iterate(newValue, (cls) => {\n          if (isString(cls)) {\n            newClasses.push(cls);\n            elem.addClass(cls);\n          }\n        });\n      } else {\n        iterate(classes, (cls) => {\n          if (!newValue || !newValue[cls]) {\n            elem.removeClass(cls);\n          }\n        });\n        iterate(newValue, (val, cls) => {\n          if (val) {\n            newClasses.push(cls);\n            elem.addClass(cls);\n          }\n        });\n      }\n\n      this.classes = newClasses;\n    }\n\n    beforeRemove() {\n      const { elem } = this;\n\n      elem.removeClass.apply(elem, new Super(this.value).keys().$);\n    }\n  }\n\n  return {\n    name: 'd-class',\n    value: DClass\n  };\n}\n","import { isFunction, isString } from '../helpers';\n\nexport function registerDElem(Mixin, createBlock, Block) {\n  class DElem extends Mixin {\n    static evaluate = false;\n\n    constructor(opts) {\n      super(opts);\n\n      const {\n        args,\n        parentTemplate,\n        elem\n      } = this;\n      let scope = parentTemplate;\n      let value = this.evaluateOnce();\n\n      if (args) {\n        scope = value instanceof Block\n          ? value\n          : parentTemplate;\n        value = args[0];\n      }\n\n      if (isFunction(value)) {\n        value(elem);\n      } else if (isString(value)) {\n        scope[value] = elem;\n      }\n    }\n  }\n\n  return {\n    name: 'd-elem',\n    value: DElem\n  };\n}\n","export function registerDHide(Mixin) {\n  class DHide extends Mixin {\n    afterUpdate(value) {\n      const { elem } = this;\n\n      if (value) {\n        elem.hide();\n      } else {\n        elem.show();\n      }\n    }\n\n    beforeRemove() {\n      this.elem.show();\n    }\n  }\n\n  return {\n    name: 'd-hide',\n    value: DHide\n  };\n}\n","import { isFunction, isString } from '../helpers';\n\nexport function registerDNode(Mixin, createBlock, Block) {\n  class DNode extends Mixin {\n    static evaluate = false;\n\n    constructor(opts) {\n      super(opts);\n\n      const {\n        args,\n        parentTemplate,\n        node\n      } = this;\n      let scope = parentTemplate;\n      let value = this.evaluateOnce();\n\n      if (args) {\n        scope = value instanceof Block\n          ? value\n          : parentTemplate;\n        value = args[0];\n      }\n\n      if (isFunction(value)) {\n        value(node);\n      } else if (isString(value)) {\n        scope[value] = node;\n      }\n    }\n  }\n\n  return {\n    name: 'd-node',\n    value: DNode\n  };\n}\n","export function registerDOn(Mixin) {\n  class DOn extends Mixin {\n    static evaluate = false;\n\n    constructor(opts) {\n      super(opts);\n\n      if (this.args) {\n        this.off = this.elem.on(this.args.join(','), () => {\n          this.evaluateOnce();\n        });\n      } else {\n        console.error('Provide \"d-on\" mixin with an event names (like \"d-on(click)\" or \"d-on(keyup, keypress)\")!');\n      }\n    }\n\n    beforeRemove() {\n      const { off } = this;\n\n      if (off) {\n        off();\n      }\n    }\n  }\n\n  return {\n    name: 'd-on',\n    value: DOn\n  };\n}\n","export function registerDShow(Mixin) {\n  class DShow extends Mixin {\n    afterUpdate(value) {\n      const { elem } = this;\n\n      if (value) {\n        elem.show();\n      } else {\n        elem.hide();\n      }\n    }\n\n    beforeRemove() {\n      this.elem.show();\n    }\n  }\n\n  return {\n    name: 'd-show',\n    value: DShow\n  };\n}\n","import { Arr } from '../Arr';\nimport { Super } from '../Super';\nimport { isString } from '../helpers';\n\nexport function registerDStyle(Mixin) {\n  class DStyle extends Mixin {\n    css = {};\n\n    afterUpdate(newValue, oldValue) {\n      const {\n        elem,\n        args,\n        css\n      } = this;\n\n      if (args) {\n        newValue = new Super(args).object((css, prop) => {\n          css[prop] = newValue;\n        });\n      }\n\n      if (isString(newValue)) {\n        newValue = new Arr(newValue.split(/; ?/))\n          .filter()\n          .object((css, item) => {\n            const [prop, value] = item;\n\n            css[prop] = value;\n          });\n      }\n\n      newValue = new Super(newValue || {}).$;\n\n      new Super(css).forEach((value, prop) => {\n        if (!newValue[prop]) {\n          elem.removeCSS(prop);\n        }\n      });\n      elem.css(newValue);\n\n      this.css = newValue;\n    }\n\n    beforeRemove() {\n      const {\n        elem,\n        css\n      } = this;\n\n      elem.removeCSS.apply(elem, new Super(css).keys().$);\n    }\n  }\n\n  return {\n    name: 'd-style',\n    value: DStyle\n  };\n}\n","import { switcher } from '../Switcher';\nimport { isFunction } from '../helpers';\n\nconst listenerSwitcher = switcher('strictEquals', 'input')\n  .case('form', 'input, change')\n  .case('select', 'change')\n  .case('input', (type) => (\n    type === 'radio'\n    || type === 'checkbox'\n    || type === 'color'\n    || type === 'file'\n      ? 'change'\n      : 'change input'\n  ));\n\nexport function registerDValidate(Mixin) {\n  class DValidate extends Mixin {\n    static evaluate = false;\n\n    constructor(opts) {\n      super(opts);\n\n      const { elem } = this;\n      const validator = this.value = this.evaluateOnce();\n\n      if (isFunction(validator)) {\n        elem.validate(validator);\n      } else if (validator === true) {\n        this.off = elem.on(listenerSwitcher(elem.name, [elem.prop('type')]), () => {\n          elem.validate();\n        });\n      }\n    }\n\n    beforeRemove() {\n      const { value } = this;\n\n      if (isFunction(value)) {\n        const { validators } = this.node.dwayneData;\n        const index = validators.indexOf(value);\n\n        if (index !== -1) {\n          validators.splice(index, 1);\n        }\n      } else if (value === true) {\n        this.off();\n      }\n    }\n  }\n\n  return {\n    name: 'd-validate',\n    value: DValidate\n  };\n}\n","import { Arr } from '../Arr';\nimport { switcher } from '../Switcher';\nimport { isArray, isFunction, isNil, constructEvalFunction } from '../helpers';\n\nconst propSwitcher = switcher('strictEquals', (type, elem) => (\n  elem.hasAttr('contenteditable') || elem.hasAttr('contentEditable')\n    ? 'text'\n    : 'value'\n))\n  .case('select', (type, elem) => (\n    elem.hasAttr('multiple')\n      ? 'multiple-select'\n      : 'value'\n  ))\n  .case('input', (type) => {\n    if (type === 'file') {\n      return 'files';\n    }\n\n    return type === 'radio' || type === 'checkbox'\n      ? 'checked'\n      : 'value';\n  });\nconst setValueSwitcher = switcher('strictEquals', (value) => value)\n  .case('input', (value, type, inputValue) => {\n    if (type !== 'radio' && type !== 'checkbox') {\n      return value;\n    }\n\n    if (type === 'radio') {\n      return value === inputValue;\n    }\n\n    return value.indexOf(inputValue) !== -1;\n  });\nconst getValueSwitcher = switcher('strictEquals', (value) => value)\n  .case('select', (value, type, inputValue, values, elem, options, init, isMultiple) => {\n    if (!isMultiple) {\n      return value;\n    }\n\n    return options\n      .object((values, { selected, value }) => {\n        if (selected && values.indexOf(value) === -1) {\n          values.push(value);\n        }\n      }, [])\n      .$;\n  })\n  .case('input', (value, type, inputValue, values, elem, options, init) => {\n    if (type !== 'radio' && type !== 'checkbox') {\n      return value;\n    }\n\n    if (type === 'radio') {\n      return value\n        ? inputValue\n        : null;\n    }\n\n    if (!value && init) {\n      return values;\n    }\n\n    if (value) {\n      if (values) {\n        return values.indexOf(inputValue) === -1\n          ? new Arr(values).concat(inputValue).$\n          : values;\n      }\n\n      return [inputValue];\n    }\n\n    if (!isArray(values)) {\n      return [];\n    }\n\n    const index = values.indexOf(inputValue);\n\n    if (index !== -1) {\n      return [\n        ...new Arr(values).slice(0, index).$,\n        ...new Arr(values).slice(index + 1).$\n      ];\n    }\n\n    return values;\n  });\nconst listenerSwitcher = switcher('strictEquals', 'input')\n  .case('select', 'change')\n  .case('input', (type) => (\n    type === 'radio'\n    || type === 'checkbox'\n    || type === 'color'\n    || type === 'file'\n      ? 'change'\n      : 'change input'\n  ));\n\nexport function registerDValue(Mixin, createBlock, Block) {\n  class DValue extends Mixin {\n    static evaluate = false;\n\n    constructor(opts) {\n      super(opts);\n\n      const {\n        args,\n        parentTemplate,\n        elem,\n        node\n      } = this;\n      const name = elem.name;\n      const type = elem.prop('type');\n      const value = this.evaluateOnce();\n      let initialScopeValue = null;\n\n      this.prop = propSwitcher(name, [type, elem]);\n      this.name = name;\n      this.type = type;\n      this.value = value;\n      this.options = elem.find('option');\n      this.scope = parentTemplate;\n\n      if (args) {\n        this.name = args[0];\n        this.scope = value instanceof Block\n          ? value\n          : parentTemplate;\n      }\n\n      if (!isFunction(value)) {\n        initialScopeValue = this.scope.$$.evaluate(constructEvalFunction(`$.${ value }`, value), (newValue) => {\n          if (this.currentValue !== newValue) {\n            this.currentValue = newValue;\n            this.setProp(newValue);\n          }\n        }, this);\n      }\n\n      const initialElemValue = this.getProp(initialScopeValue, true);\n      const isInitialScopeValueNull = isNil(initialScopeValue);\n      const isCheckbox = type === 'checkbox';\n      const changeScope = () => {\n        this.currentValue = this.getProp(this.currentValue);\n        this.changeScope();\n      };\n\n      if (isInitialScopeValueNull || isCheckbox) {\n        this.currentValue = initialElemValue;\n        this.changeScope();\n\n        if (!isInitialScopeValueNull && isCheckbox) {\n          this.setProp(initialScopeValue);\n        }\n      } else {\n        this.currentValue = initialScopeValue;\n        this.setProp(initialScopeValue);\n      }\n\n      this.offElemListener = elem.on(listenerSwitcher(name, [type]), (e) => {\n        if (e.target === node) {\n          changeScope();\n        }\n      });\n      this.offFormListener = elem.closest('form').on('reset', () => {\n        setTimeout(changeScope, 0);\n      });\n    }\n\n    changeScope() {\n      const {\n        scope,\n        value,\n        currentValue\n      } = this;\n\n      if (isFunction(value)) {\n        value(currentValue);\n      } else {\n        scope[value] = currentValue;\n      }\n    }\n\n    setProp(value) {\n      const {\n        elem,\n        name,\n        prop,\n        type,\n        node,\n        options\n      } = this;\n\n      if (prop === 'text') {\n        elem.text(value);\n      } else if (prop === 'multiple-select') {\n        options.forEach((option) => {\n          option.selected = value.indexOf(option.value) !== -1;\n        });\n      } else {\n        elem.prop(prop, setValueSwitcher(name, [value, type, node.value]));\n      }\n    }\n\n    getProp(values, init) {\n      const {\n        elem,\n        name,\n        prop,\n        type,\n        node,\n        options\n      } = this;\n\n      return prop === 'text'\n        ? elem.text()\n        : getValueSwitcher(name, [elem.prop(prop), type, node.value, values, elem, options, init, prop === 'multiple-select']);\n    }\n\n    beforeRemove() {\n      this.offElemListener();\n      this.offFormListener();\n    }\n  }\n\n  return {\n    name: 'd-value',\n    value: DValue\n  };\n}\n","const emptySpaceRegExp = /^\\s+/;\nconst anyEmptySpaceRegExp = /\\s+/g;\nconst anyEscapedExpressionRegExp = /\\\\[\\s\\S]/g;\nconst anyDoubleQuoteRegExp = /\"/g;\nconst anyNewLineRegExp = /\\r\\n|\\r|\\n/g;\nconst anyCommaEmptySpace = /\\s*,\\s*/;\nconst properEscapedRegExp = /\\\\|u|n|f|r|t|b|v|`[0-7]/;\n\nconst thisRegExp = /^this(?![a-zA-Z_$])/;\nconst simpleExpressionRegExp = /^(?:true|false|null|undefined)(?![a-zA-Z_$])/;\nconst variableRegExp = /^[a-zA-Z_$][a-zA-Z0-9_$]*/;\nconst numberRegExp = /^(?:NaN|-?(?:(?:\\d+|\\d*\\.\\d+)(?:[E|e][+|-]?\\d+)?|Infinity))/;\nconst stringRegExp = /^(?:\"(?:(?:\\\\[\\s\\S])|[^\"\\n\\\\])*\"|'(?:(?:\\\\[\\s\\S])|[^'\\n\\\\])*')/;\nconst regexpRegExp = /^\\/(?:(?:\\\\[\\s\\S])|[^/\\n\\\\])+\\/[gimuy]*/;\nconst arrowFunctionRegExp = /^(?:(?:\\(\\s*((?:[a-zA-Z_$][a-zA-Z0-9_$]*\\s*,\\s*)?(?:[a-zA-Z_$][a-zA-Z0-9_$]*)?)\\s*\\))|([a-zA-Z_$][a-zA-Z0-9_$]*))\\s*=>/;\nconst templateStringContentRegExp = /^(?:(?:\\\\[\\s\\S])|\\$(?!\\{)|[^`$\\\\])+/;\nconst operatorRegExp = /^(?:(?:>>>|>>|<<)=?|&&|\\|\\||,|(?:\\+|-|\\*|\\/|%|&|\\||\\^|<|>|==|!=)=?|=)/;\nconst pointOperatorRegExp = /^\\.([a-zA-Z_$][a-zA-Z0-9_$]*)/;\nconst propertyRegExp = /^((?:\"(?:(?:\\\\[\\s\\S])|[^\"\\n\\\\])*\"|'(?:(?:\\\\[\\s\\S])|[^'\\n\\\\])*'|[a-zA-Z_$][a-zA-Z0-9_$]*))\\s*:/;\nconst shorthandPropertyRegExp = /^([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*(?=,|})(,?)/;\nconst unaryOperatorRegExp = /^(?:-|~|\\+|!)/;\nconst keywordsArray = [\n  'do',\n  'if',\n  'in',\n  'for',\n  'let',\n  'new',\n  'try',\n  'var',\n  'case',\n  'else',\n  'enum',\n  'null',\n  'this',\n  'true',\n  'void',\n  'with',\n  'break',\n  'catch',\n  'class',\n  'const',\n  'false',\n  'super',\n  'throw',\n  'while',\n  'yield',\n  'delete',\n  'export',\n  'import',\n  'public',\n  'return',\n  'static',\n  'switch',\n  'typeof',\n  'default',\n  'extends',\n  'finally',\n  'package',\n  'private',\n  'continue',\n  'debugger',\n  'function',\n  'arguments',\n  'interface',\n  'protected',\n  'implements',\n  'instanceof'\n];\nconst keywordsRegExp = new RegExp(`^(?:${ keywordsArray.join('|') })$`);\n\nconst EXPRESSION = 'expression';\nconst END_OF_FUNC_BODY = 'end of function body';\nconst submitString = 'Please, submit an issue at https://github.com/dwaynejs/dwayne/issues/new, if needed.';\n\nfunction parseJS(string, wholeString, curlyError) {\n  curlyError = !!curlyError;\n\n  const initialString = string;\n  const expected = {\n    expression: true,\n    closingExpressions: [],\n    functionScope: {}\n  };\n  const variables = {};\n  const { closingExpressions } = expected;\n  let expression = '';\n  let index = 0;\n\n  while (string.length) {\n    let spaceMatch;\n    let match;\n    let toConcat = '';\n    let matched;\n    let isEmptySpace;\n    let {\n      type: properType,\n      symbol: properSymbol\n    } = closingExpressions[closingExpressions.length - 1] || {};\n    const firstSymbol = string[0];\n\n    if ((spaceMatch = string.match(emptySpaceRegExp)) && !expected.templateString) {\n      isEmptySpace = true;\n      match = spaceMatch[0];\n    } else {\n      if (expected.expression) {\n        match = string.match(arrowFunctionRegExp);\n\n        if (match) {\n          const vars = (match[2] || match[1]).split(anyCommaEmptySpace);\n          const variables = [];\n          const newFunctionVars = Object.create(expected.functionScope);\n\n          for (let i = 0, length = vars.length; i < length; i++) {\n            const variable = vars[i];\n\n            if (variable) {\n              variables.push(variable);\n              newFunctionVars[variable] = true;\n            }\n          }\n\n          toConcat = `function(${ variables.join(',') }){return `;\n          expected.functionScope = newFunctionVars;\n          closingExpressions.push({\n            type: 'any',\n            symbol: END_OF_FUNC_BODY\n          }, {\n            type: 'any',\n            symbol: EXPRESSION\n          });\n        } else if (firstSymbol === '(') {\n          match = '(';\n          closingExpressions.push({\n            type: 'paren',\n            symbol: ')'\n          });\n        } else if (firstSymbol === '[') {\n          match = '[';\n          closingExpressions.push({\n            type: 'array',\n            symbol: ']'\n          });\n        } else if (firstSymbol === '`') {\n          match = '`';\n          toConcat = '(\"\"';\n          expected.templateString = true;\n          closingExpressions.push({\n            type: 'templateString',\n            symbol: '`'\n          });\n\n          delete expected.expression;\n        } else if (firstSymbol === '{') {\n          match = '{';\n          expected.objectProperty = true;\n          closingExpressions.push({\n            type: 'object',\n            symbol: '}'\n          });\n\n          delete expected.expression;\n        } else {\n          match = string.match(unaryOperatorRegExp);\n\n          if (match) {\n            toConcat = match[0].replace(anyEmptySpaceRegExp, ' ');\n          } else {\n            match = string.match(simpleExpressionRegExp);\n\n            if (!match) {\n              match = string.match(numberRegExp);\n\n              if (!match) {\n                match = string.match(stringRegExp);\n\n                if (!match) {\n                  match = string.match(regexpRegExp);\n\n                  if (!match) {\n                    match = string.match(thisRegExp);\n\n                    if (match) {\n                      toConcat = '$';\n                    } else {\n                      match = string.match(variableRegExp);\n\n                      if (match) {\n                        const variable = match[0];\n\n                        if (!expected.functionScope[variable]) {\n                          variables[variable] = true;\n                        }\n\n                        toConcat = getVariable(variable, expected.functionScope);\n                      }\n                    }\n                  }\n                }\n              }\n            }\n\n            if (match) {\n              expected.operator = true;\n              matched = EXPRESSION;\n\n              delete expected.expression;\n            }\n          }\n        }\n      } else if (expected.templateString) {\n        match = string.match(templateStringContentRegExp);\n\n        if (match) {\n          const string = match[0]\n            .replace(anyEscapedExpressionRegExp, (match) => {\n              const second = match[1];\n\n              return properEscapedRegExp.test(second)\n                ? match\n                : second;\n            })\n            .replace(anyDoubleQuoteRegExp, '\\\\\"')\n            .replace(anyNewLineRegExp, (match) => {\n              if (match === '\\r\\n') {\n                match = '\\\\r\\\\n';\n              } else if (match === '\\r') {\n                match = '\\\\r';\n              } else {\n                match = '\\\\n';\n              }\n\n              return `\"+\"${ match }\"+\"`;\n            });\n\n          toConcat = `+\"${ string }\"`;\n        } else if (firstSymbol === '`') {\n          match = '`';\n          matched = EXPRESSION;\n          toConcat = ')';\n          expected.operator = true;\n          closingExpressions.pop();\n\n          delete expected.templateString;\n        } else if (string.slice(0, 2) === '${') {\n          match = '${';\n          toConcat = '+(';\n          expected.expression = true;\n          closingExpressions.push({\n            type: 'templateString',\n            symbol: '}'\n          }, {\n            type: 'any',\n            symbol: EXPRESSION\n          });\n\n          delete expected.templateString;\n        }\n      } else if (expected.objectProperty) {\n        match = string.match(propertyRegExp);\n\n        if (match) {\n          if (keywordsRegExp.test(match[1])) {\n            match[1] = `\"${ match[1] }\"`;\n          }\n\n          toConcat = `${ match[1] }:`;\n          expected.expression = true;\n          closingExpressions.push({\n            type: 'any',\n            symbol: EXPRESSION\n          });\n\n          delete expected.objectProperty;\n        } else {\n          match = string.match(shorthandPropertyRegExp);\n\n          if (match) {\n            const variable = match[1];\n\n            if (!expected.functionScope[variable]) {\n              variables[variable] = true;\n            }\n\n            if (keywordsRegExp.test(variable)) {\n              match[1] = `\"${ variable }\"`;\n            }\n\n            toConcat = `${ match[1] }:${ getVariable(variable, expected.functionScope) }${ match[2] }`;\n\n            if (!match[2]) {\n              expected.operator = true;\n\n              delete expected.objectProperty;\n            }\n          }\n        }\n      } else if (expected.operator) {\n        if (firstSymbol === ')' || firstSymbol === ']' || firstSymbol === '}' || firstSymbol === ',') {\n          toConcat = closeFunctionBody(expected);\n\n          ({\n            type: properType,\n            symbol: properSymbol\n          } = closingExpressions[closingExpressions.length - 1] || {});\n        }\n\n        if (firstSymbol === '(') {\n          match = '(';\n          expected.expression = true;\n          closingExpressions.push({\n            type: 'call',\n            symbol: ')'\n          });\n\n          delete expected.operator;\n        } else if (firstSymbol === '?') {\n          match = '?';\n          expected.expression = true;\n          closingExpressions.push({\n            type: 'ternary',\n            symbol: ':'\n          }, {\n            type: 'any',\n            symbol: EXPRESSION\n          });\n\n          delete expected.operator;\n        } else if (firstSymbol === ':' && properSymbol === ':') {\n          match = ':';\n          expected.expression = true;\n          closingExpressions.pop();\n\n          delete expected.operator;\n        } else if (firstSymbol === '[') {\n          match = '[';\n          expected.expression = true;\n          closingExpressions.push({\n            type: 'property',\n            symbol: ']'\n          }, {\n            type: 'any',\n            symbol: EXPRESSION\n          });\n\n          delete expected.operator;\n        } else if (firstSymbol === '}' && properSymbol === '}' && properType === 'templateString') {\n          match = firstSymbol;\n          toConcat += ')';\n          expected.templateString = true;\n          closingExpressions.pop();\n\n          delete expected.operator;\n        } else if (firstSymbol === ']' && properSymbol === ']' && properType === 'property') {\n          match = firstSymbol;\n          toConcat += firstSymbol;\n          matched = EXPRESSION;\n          closingExpressions.pop();\n        } else if (firstSymbol === ')' && properSymbol === ')' && properType === 'paren') {\n          match = firstSymbol;\n          toConcat += firstSymbol;\n          matched = EXPRESSION;\n          closingExpressions.pop();\n        } else if (firstSymbol === ',' && properSymbol === '}' && properType === 'object') {\n          match = firstSymbol;\n          toConcat += firstSymbol;\n          matched = EXPRESSION;\n          expected.objectProperty = true;\n\n          delete expected.operator;\n        } else {\n          match = string.match(pointOperatorRegExp);\n\n          if (match) {\n            matched = EXPRESSION;\n\n            if (keywordsRegExp.test(match[1])) {\n              toConcat += `[\"${ match[1] }\"]`;\n            }\n          } else {\n            match = string.match(operatorRegExp);\n\n            if (match) {\n              toConcat += match[0].replace(anyEmptySpaceRegExp, ' ');\n              expected.expression = true;\n              closingExpressions.push({\n                type: 'any',\n                symbol: EXPRESSION\n              });\n\n              delete expected.operator;\n            }\n          }\n        }\n      }\n\n      if (!match) {\n        if (firstSymbol === ')' || firstSymbol === ']' || firstSymbol === '}') {\n          toConcat += closeFunctionBody(expected);\n\n          ({\n            type: properType,\n            symbol: properSymbol\n          } = closingExpressions[closingExpressions.length - 1] || {});\n        }\n\n        let closingBrace;\n\n        if (properSymbol === ')' && firstSymbol === ')' && properType === 'call') {\n          closingBrace = true;\n\n          delete expected.expression;\n        } else if (properSymbol === ']' && firstSymbol === ']' && properType === 'array') {\n          closingBrace = true;\n\n          delete expected.expression;\n        } else if (firstSymbol === '}' && properSymbol === '}' && properType === 'object') {\n          closingBrace = true;\n\n          delete expected.objectProperty;\n        }\n\n        if (closingBrace) {\n          match = firstSymbol;\n          toConcat += firstSymbol;\n          expected.operator = true;\n          matched = EXPRESSION;\n          closingExpressions.pop();\n        }\n      }\n\n      if (\n        matched === EXPRESSION\n        && closingExpressions.length\n        && closingExpressions[closingExpressions.length - 1].symbol === EXPRESSION\n      ) {\n        closingExpressions.pop();\n      }\n    }\n\n    const noMatch = !match || !match[0];\n    const curlyIndex = string.indexOf('}');\n\n    if (noMatch && (curlyIndex > 0 || curlyError)) {\n      const expressionString = curlyError\n        ? initialString\n        : initialString.slice(0, initialString.length - string.length + curlyIndex);\n\n      throw new Error(\n        `Syntax error near ~~~ \"${ initialString.slice(index, index + 15) }\" ~~~ (index: ${ index }, ${ constructErrorInfo(expressionString, wholeString, closingExpressions, curlyError) }`\n      );\n    } else if (noMatch && curlyIndex === 0) {\n      expression += toConcat;\n\n      break;\n    } else if (noMatch && curlyIndex === -1) {\n      return null;\n    }\n\n    match = typeof match === 'string' ? match : match[0];\n\n    if (!isEmptySpace) {\n      expression += toConcat || match;\n    }\n\n    string = string.slice(match.length);\n    index += match.length;\n  }\n\n  expression += closeFunctionBody(expected);\n\n  if (closingExpressions.length) {\n    const expressionString = initialString.slice(0, initialString.length - string.length);\n\n    throw new Error(`Unexpected end of input (${ constructErrorInfo(expressionString, wholeString, closingExpressions, curlyError) }`);\n  }\n\n  if (!string.length && !curlyError) {\n    return null;\n  }\n\n  return {\n    expression,\n    variables,\n    original: initialString.slice(0, index),\n    rest: string.slice(1)\n  };\n}\n\nfunction getVariable(name, functionScope) {\n  if (functionScope[name]) {\n    return name;\n  }\n\n  return keywordsRegExp.test(name)\n    ? `$[\"${ name }\"]`\n    : `$.${ name }`;\n}\n\nfunction closeFunctionBody(expected) {\n  const { closingExpressions } = expected;\n  let toConcat = '';\n\n  while (\n    closingExpressions[closingExpressions.length - 1]\n    && closingExpressions[closingExpressions.length - 1].symbol === END_OF_FUNC_BODY\n  ) {\n    toConcat += '}';\n    expected.functionScope = Object.getPrototypeOf(expected.functionScope);\n    closingExpressions.pop();\n\n    if (\n      closingExpressions.length\n      && closingExpressions[closingExpressions.length - 1].symbol === EXPRESSION\n    ) {\n      closingExpressions.pop();\n    }\n  }\n\n  return toConcat;\n}\n\nfunction constructErrorInfo(expressionString, wholeString, closingExpressions, curlyError) {\n  let { symbol: last } = closingExpressions[closingExpressions.length - 1] || {};\n  let wholeStringString = '';\n\n  if (last && last !== EXPRESSION && last !== END_OF_FUNC_BODY) {\n    last = `\"${ last }\"`;\n  }\n\n  if (!curlyError) {\n    wholeStringString = `, whole string: \"${ wholeString }\"`;\n  }\n\n  const lastString = last\n    ? `expected ${ last }, `\n    : '';\n\n  return `${ lastString }initial expression: \"${ expressionString }\"${ wholeStringString }). ${ submitString }`;\n}\n\nexport default parseJS;\n","/**\n * @module Block\n * @private\n * @mixin\n * @description Exports Block class.\n */\n\nimport { Arr } from './Arr';\nimport { doc, Elem } from './Elem';\nimport { Str } from './Str';\nimport { Super } from './Super';\nimport {\n  defineUsualProperties, defineFrozenProperties,\n  assign, constructEvalFunction, iterate, validate,\n  isFunction, isNil, isString\n} from './helpers';\nimport * as Blocks from './blocks';\nimport * as Mixins from './mixins';\nimport { htmlAllowedTagSymbols, htmlAllowedAttrSymbols } from './constants';\nimport markupToJSON from './helpers/markupToJSON';\nimport parseJS from './helpers/parseJS';\n\n/**\n * @typedef {Error} EvaluationError\n * @public\n * @property {String} expression - Expression which has been evaluated with the error.\n * @property {Block} block - Block in context of which the expression has been evaluated with the error.\n */\n\n/**\n * @callback Watcher\n * @public\n * @param {*} newValue - New value.\n * @param {*} oldValue - Old value.\n */\n\n/**\n * @callback VarsWatcher\n * @public\n */\n\n/**\n * @callback Wrapper\n * @public\n * @param {Block} Block class to wrap.\n * @returns {Block} New Block class.\n */\n\n/**\n * @callback AfterUpdate\n * @public\n * @param {*} newValue - New value.\n * @param {*} oldValue - Old value.\n * @param {*} mixin - Mixin instance.\n */\n\n/**\n * @callback BlockRegisterHook\n * @public\n * @param {Block} Block - Registering block.\n * @param {String} name - Block name.\n * @returns Return value is used for registering the block.\n * If Block subclass returned it's registered instead of the initial block, otherwise\n * the initial block is used.\n */\n\n/**\n * @callback MixinRegisterHook\n * @public\n * @param {Block} Mixin - Registering mixin.\n * @param {String} name - Mixin name.\n * @returns Return value is used for registering the mixin.\n * If Mixin subclass returned it's registered instead of the initial mixin, otherwise\n * the initial mixin is used.\n */\n\nconst rootBlocks = Object.create(null);\nconst rootMixins = Object.create(null);\nconst {\n  isPrototypeOf,\n  hasOwnProperty\n} = {};\nconst tagName = new RegExp(`^${ htmlAllowedTagSymbols }$`, 'i');\nconst attrName = new RegExp(`^${ htmlAllowedAttrSymbols }$`);\nconst svgNS = 'http://www.w3.org/2000/svg';\nconst curlyBracketRegExp = /\\{/;\nconst dRestRegExp = /^d-rest(?:#|$)/;\nconst afterElem = new Elem();\nlet evalMode;\nlet getting;\nlet changed;\n\n/**\n * @class Block\n * @public\n * @param {Object} opts - Element options.\n * @returns {Block} Instance of Block.\n * @description Class for dynamic templating.\n *\n * @example\n * import { D, Block, initApp } from 'dwayne';\n *\n * class App extends Block {\n *   static template = '<Hello text=\"{text}\"/>';\n *\n *   constructor(opts) {\n *     super(opts);\n *\n *     this.text = 'world (0)';\n *     this.times = 0;\n *\n *     this.setInterval();\n *   }\n *\n *   setInterval() {\n *     D(1000).interval(() => {\n *       this.text = `world (${ ++this.times })`;\n *     });\n *   }\n * }\n *\n * Block.block('App', App);\n * Block.block('Hello', 'Hello, {args.text}!');\n *\n * initApp('App', document.getElementById('root'));\n */\nclass Block {\n  static _blocks = Object.create(rootBlocks);\n  static _mixins = Object.create(rootMixins);\n\n  /**\n   * @member {Boolean} [Block.collapseWhiteSpace = true]\n   * @type {Boolean}\n   * @public\n   * @description If the whitespace between html elements and\n   * in the start and the end inside the tag should be omitted during parsing.\n   */\n  static collapseWhiteSpace = true;\n\n  /**\n   * @member {Object} [Block.defaultArgs = null]\n   * @type {Object}\n   * @public\n   * @description Block default args.\n   */\n  static defaultArgs = null;\n\n  /**\n   * @member {Object} [Block.defaultLocals = null]\n   * @type {Object}\n   * @public\n   * @description Block default locals.\n   */\n  static defaultLocals = null;\n\n  /**\n   * @member {String} [Block.template = '']\n   * @type {String}\n   * @public\n   * @description Block template.\n   */\n  static template = '';\n\n  /**\n   * @method Block.onEvalError\n   * @public\n   * @param {EvaluationError} err - The method is called when an evaluation error occurs.\n   */\n  static onEvalError(err) {\n    console.error(`Eval error (evaluating \"${ err.expression }\" in context of block \"${ err.block.$$.name }\"):`, err);\n  }\n\n  static getBlocks() {\n    return new Super({ ...this._blocks });\n  }\n\n  static getMixins() {\n    return new Super({ ...this._mixins });\n  }\n\n  /**\n   * @method Block.beforeRegisterBlock\n   * @public\n   * @param {BlockRegisterHook} hook - Block register hook.\n   */\n  static beforeRegisterBlock(hook) {\n    if (!new Super(this).hasOwn('_blockHooks')) {\n      this._blockHooks = new Arr([]);\n    }\n\n    this._blockHooks.push(hook);\n  }\n\n  /**\n   * @method Block.beforeRegisterMixin\n   * @public\n   * @param {MixinRegisterHook} hook - Mixin register hook.\n   */\n  static beforeRegisterMixin(hook) {\n    if (!new Super(this).hasOwn('_mixinHooks')) {\n      this._mixinHooks = new Arr([]);\n    }\n\n    this._mixinHooks.push(hook);\n  }\n\n  /**\n   * @method Block.block\n   * @public\n   * @param {String} name - Block or mixin name.\n   * @param {String|Block} Subclass - Subclass of Block or template string of it.\n   * @returns {void}\n   * @description Register block in the namespace of this.\n   */\n  static block(name, Subclass) {\n    const _this = new Super(this);\n\n    if (isString(Subclass)) {\n      Subclass = class extends Block {\n        static template = Subclass;\n      };\n    }\n\n    if (isFunction(Subclass) && !isInstanceOf(Block, Subclass)) {\n      const constructor = Subclass;\n\n      Subclass = class extends Block {\n        constructor(opts) {\n          super(opts);\n\n          constructor.call(this, opts);\n        }\n      };\n    }\n\n    if (!isFunction(Subclass)) {\n      console.warn(`Block must be a string (representing a block template), a function or a class that extends Block class (name: \"${ name }\") (Block.block)`);\n\n      return;\n    }\n\n    if (!isInstanceOf(Block, Subclass)) {\n      extendBlock(Subclass);\n    }\n\n    if (rootBlocks[name]) {\n      console.warn(`The \"${ name }\" block is a built-in block so the block will not be registered (Block.block)`);\n\n      return;\n    }\n\n    if (!tagName.test(name)) {\n      console.warn(`Name \"${ name }\" is not allowed for blocks so the block will not be registered (Block.block)`);\n\n      return;\n    }\n\n    if (!_this.hasOwn('_blocks')) {\n      this._blocks = Object.create(_this.proto().$._blocks);\n    }\n\n    let returnValue;\n\n    try {\n      returnValue = (this._blockHooks || new Arr([])).reduce((Subclass, hook) => {\n        const returnValue = hook(Subclass, name);\n\n        return isInstanceOf(Block, returnValue)\n          ? returnValue\n          : Subclass;\n      }, Subclass);\n    } catch (err) {\n      console.error(`Uncaught error in ${ this._name } \"beforeRegisterBlock\" hook:`, err);\n    }\n\n    if (isInstanceOf(Block, returnValue)) {\n      Subclass = returnValue;\n    }\n\n    const variables = {};\n\n    Subclass._name = name;\n    Subclass._html = transformDIfChildren(\n      transformJSExpressions(\n        markupToJSON(\n          `${ Subclass.template || '' }`,\n          Subclass.collapseWhiteSpace\n        ),\n        variables\n      )\n    );\n    Subclass._variables = new Super(variables)\n      .except('$$', '$')\n      .keys();\n\n    if (new Super(Subclass).hasOwn('defaultArgs')) {\n      new Super(Subclass.defaultArgs).proto(null);\n    }\n\n    this._blocks[name] = Subclass;\n  }\n\n  /**\n   * @method Block.mixin\n   * @public\n   * @param {String} name - Block or mixin name.\n   * @param {Mixin|AfterUpdate} Subclass - Subclass of Mixin or AfterUpdate callback.\n   * @returns {void}\n   * @description Register mixin in the namespace of this.\n   */\n  static mixin(name, Subclass) {\n    const _this = new Super(this);\n\n    if (isFunction(Subclass) && !isInstanceOf(Mixin, Subclass)) {\n      const afterUpdate = Subclass;\n\n      Subclass = class extends Mixin {\n        afterUpdate(newValue, oldValue) {\n          afterUpdate.call(this, newValue, oldValue, this);\n        }\n      };\n    }\n\n    if (!isInstanceOf(Mixin, Subclass)) {\n      console.warn(`The \"${ name }\" class does not extend Mixin and will not be registered (Block.mixin)`);\n\n      return;\n    }\n\n    if (rootMixins[name]) {\n      console.warn(`The \"${ name }\" mixin is a built-in mixin so the mixin will not be registered (Block.mixin)`);\n\n      return;\n    }\n\n    if (!attrName.test(name)) {\n      console.warn(`Name \"${ name }\" is not allowed for mixins so the mixin will not be registered (Block.mixin)`);\n\n      return;\n    }\n\n    if (!_this.hasOwn('_mixins')) {\n      this._mixins = Object.create(_this.proto().$._mixins);\n    }\n\n    let returnValue;\n\n    try {\n      returnValue = (this._mixinHooks || new Arr([])).reduce((Subclass, hook) => {\n        const returnValue = hook(Subclass, name);\n\n        return isInstanceOf(Mixin, returnValue)\n          ? returnValue\n          : Subclass;\n      }, Subclass);\n    } catch (err) {\n      console.error(`Uncaught error in ${ this._name } \"beforeRegisterMixin\" hook:`, err);\n    }\n\n    if (isInstanceOf(Mixin, returnValue)) {\n      Subclass = returnValue;\n    }\n\n    Subclass._name = name;\n    Subclass._match = constructMixinRegExp(name);\n\n    this._mixins[name] = Subclass;\n  }\n\n  /**\n   * @method Block.wrap\n   * @public\n   * @param {...Wrapper} wrappers - Functions that return wrapped block.\n   * @returns {Block} New block.\n   * @description Method for wrapping blocks into another blocks.\n   * It is considered best practice to just extends the old block with a new one.\n   *\n   * @example\n   * class MyBlock extends Block {\n   *   static template = '<div>123</div>';\n   * }\n   *\n   * MyBlock.wrap((Block) => {\n   *   return class extends Block {\n   *     static template = `<section class=\"wrapper\">${ Block.template }</section>`;\n   *\n   *     constructor(opts) {\n   *       super(opts);\n   *\n   *       this.additionalVar = 'additional';\n   *     }\n   *   };\n   * });\n   */\n  static wrap(...wrappers) {\n    return new Arr(arguments).reduce((block, wrapper) => {\n      const returnValue = wrapper(block);\n\n      return isInstanceOf(Block, returnValue)\n        ? returnValue\n        : block;\n    }, this);\n  }\n\n  constructor(opts) {\n    const {\n      name,\n      args: originalArgs,\n      dBlockName,\n      children,\n      parent,\n      parentElem,\n      parentBlock,\n      parentScope,\n      parentTemplate,\n      prevBlock\n    } = opts;\n    const watchersToRemove = new Arr([]);\n    const constructor = new Super(this).proto().$.constructor;\n    const childrenBlocks = new Arr([]);\n    const mixins = new Arr([]);\n    const isParentBlock = parent instanceof Block;\n\n    defineFrozenProperties(this, {\n      /**\n       * @member {Block} Block#$\n       * @type {Block}\n       * @public\n       * @description This.\n       */\n      $: this,\n\n      /**\n       * @member {Object} Block#$$\n       * @type {Object}\n       * @protected\n       * @property {Object} args - Private args scope.\n       * @property {Arr} argsChildren - Block args children.\n       * @property {Arr} children - Child blocks.\n       * @property {Arr} mixins - Child mixins.\n       * @property {Elem} parentElem - Parent element.\n       * @property {Elem} content - Content elements.\n       * @property {Function} evaluate - Evaluate function.\n       * @property {Object} globals - Private globals scope.\n       * @property {Object} locals - Private locals scope.\n       * @property {Arr} watchersToRemove - Watchers to remove before removing element.\n       */\n      $$: {\n        name,\n        dBlockName,\n        dBlocks: new Arr([]),\n        parent,\n        parentElem,\n        parentScope,\n        parentBlock,\n        parentTemplate,\n        content: new Elem(),\n        ns: constructor,\n        argsChildren: children || new Arr([]),\n        children: childrenBlocks,\n        mixins,\n        prevBlock,\n        watchersToRemove,\n        evaluate: (func, onChange, instance, forDElements, forDItem, forDEach) => {\n          if (!isFunction(func)) {\n            return func;\n          }\n\n          forDElements = !!forDElements;\n          forDItem = !!forDItem;\n\n          const scope = (name === '#d-item' && !forDItem) || forDEach\n            ? (forDEach || this).$$.scope\n            : this;\n          const { watchersToRemove } = instance ? instance.$$ : {};\n\n          /* eslint no-new-func: 0 */\n          const evaluate = () => {\n            let result;\n\n            if (onChange) {\n              evalMode = true;\n              getting = new Arr([]);\n            }\n\n            try {\n              result = func(scope);\n            } catch (err) {\n              err.expression = func.expression;\n              err.original = func.original;\n              err.block = this;\n\n              if (isFunction(constructor.onEvalError)) {\n                constructor.onEvalError(err);\n              }\n            }\n\n            if (onChange) {\n              const localWatchers = new Arr([]);\n\n              getting.forEach((watchers) => {\n                const watcher = () => {\n                  const newResult = evaluate();\n\n                  if (newResult !== result) {\n                    onChange(newResult, result);\n                  }\n                };\n                const watcherBlock = {\n                  forDElements,\n                  watcher,\n                  watchers\n                };\n\n                watcher.onRemove = () => {\n                  localWatchers.forEach((watcherBlock) => {\n                    const {\n                      watcher,\n                      watchers\n                    } = watcherBlock;\n                    const index1 = watchersToRemove.indexOf(watcherBlock);\n                    const index2 = watchers.indexOf(watcher);\n\n                    if (index1 !== -1) {\n                      watchersToRemove.splice(index1, 1);\n                    }\n\n                    if (index2 !== -1) {\n                      watchers.splice(index2, 1);\n                    }\n                  });\n                };\n\n                localWatchers.push(watcherBlock);\n                watchersToRemove.push(watcherBlock);\n                watchers.push(watcher);\n              });\n\n              evalMode = false;\n              getting = new Arr([]);\n            }\n\n            return result;\n          };\n\n          return evaluate();\n        },\n        remove: (isParentSignal) => {\n          removeWatchers(watchersToRemove);\n\n          childrenBlocks.forEach((child) => {\n            child.$$.remove(true);\n          });\n\n          mixins.forEach((mixin) => {\n            mixin.$$.remove(true);\n          });\n\n          try {\n            this.beforeRemove();\n          } catch (err) {\n            console.error(`Uncaught error in ${ name }#beforeRemove:`, err);\n          }\n\n          if (!isParentSignal && isParentBlock) {\n            parent.$$.removeContent(this.$$.content);\n          }\n\n          if (!isParentSignal && parentBlock) {\n            const index = parentBlock.$$.children.indexOf(this);\n\n            if (index !== -1) {\n              parentBlock.$$.children.splice(index, 1);\n            }\n          }\n\n          this.$$.content.remove();\n        },\n        addContent: (contentToAdd, notRecursive) => {\n          const index = this.$$.content.indexOf(contentToAdd.$[0].previousSibling) + 1;\n\n          if (index === 0) {\n            this.$$.content = contentToAdd\n              .slice()\n              .pushArray(this.$$.content.$);\n          } else {\n            this.$$.content = this.$$.content\n              .slice(0, index)\n              .pushArray(contentToAdd.$)\n              .pushArray(this.$$.content.slice(index).$);\n          }\n\n          if (isParentBlock && !notRecursive) {\n            parent.$$.addContent(contentToAdd);\n          }\n        },\n        moveContent: (contentToMove, after) => {\n          const index = this.$$.content.indexOf(contentToMove.$[0]);\n          const indexToPut = this.$$.content.indexOf(after.$[0]) + 1;\n\n          if (indexToPut === 0) {\n            this.$$.content = contentToMove\n              .slice()\n              .pushArray(this.$$.content.slice(indexToPut, index).$)\n              .pushArray(this.$$.content.slice(index + contentToMove.length).$);\n          } else if (index > indexToPut) {\n            this.$$.content = this.$$.content\n              .slice(0, indexToPut)\n              .pushArray(contentToMove.$)\n              .pushArray(this.$$.content.slice(indexToPut, index).$)\n              .pushArray(this.$$.content.slice(index + contentToMove.length).$);\n          } else {\n            this.$$.content = this.$$.content\n              .slice(0, index)\n              .pushArray(this.$$.content.slice(index + contentToMove.length, indexToPut).$)\n              .pushArray(contentToMove.$)\n              .pushArray(this.$$.content.slice(indexToPut).$);\n          }\n\n          if (isParentBlock && indexToPut) {\n            parent.$$.moveContent(contentToMove, after);\n          }\n        },\n        removeContent: (contentToRemove) => {\n          this.$$.content = this.$$.content.filter((elem) => (\n            contentToRemove.indexOf(elem) === -1\n          ));\n\n          if (isParentBlock) {\n            parent.$$.removeContent(contentToRemove);\n          }\n        },\n        insertInStartOfIt: (contentToInsert, moveFlag) => {\n          const { prevBlock } = this.$$;\n          let after = afterElem;\n\n          if (prevBlock instanceof Block) {\n            after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n          } else if (prevBlock) {\n            after = prevBlock;\n            contentToInsert.insertAfter(prevBlock);\n\n            if (isParentBlock) {\n              if (moveFlag) {\n                parent.$$.moveContent(contentToInsert, after);\n              } else {\n                parent.$$.addContent(contentToInsert, true);\n              }\n            }\n          } else if (isParentBlock) {\n            const { prevBlock } = parent.$$;\n\n            if (prevBlock) {\n              let notRecursive;\n\n              if (prevBlock instanceof Block) {\n                after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n                notRecursive = true;\n              } else {\n                after = prevBlock;\n                notRecursive = false;\n                contentToInsert.insertAfter(prevBlock);\n              }\n\n              if (moveFlag) {\n                parent.$$.moveContent(contentToInsert, after);\n              } else {\n                parent.$$.addContent(contentToInsert, notRecursive);\n              }\n            } else {\n              after = parent.$$.insertInStartOfIt(contentToInsert, moveFlag);\n            }\n          } else {\n            contentToInsert.into(parentElem, false);\n          }\n\n          if (moveFlag) {\n            this.$$.moveContent(contentToInsert, after);\n          } else {\n            this.$$.addContent(contentToInsert, true);\n          }\n\n          return after;\n        },\n        insertAfterIt: (contentToInsert, moveFlag) => {\n          const { prevBlock } = this.$$;\n          let after = afterElem;\n          let tryToAddOrMove;\n\n          if (this.$$.content.length) {\n            after = this.$$.content.last();\n            tryToAddOrMove = true;\n            contentToInsert.insertAfter(after);\n          } else if (prevBlock instanceof Block) {\n            after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n          } else if (prevBlock) {\n            after = prevBlock;\n            tryToAddOrMove = true;\n            contentToInsert.insertAfter(prevBlock);\n          } else if (isParentBlock) {\n            after = parent.$$.insertInStartOfIt(contentToInsert, moveFlag);\n          } else {\n            contentToInsert.into(parentElem, false);\n          }\n\n          if (isParentBlock && tryToAddOrMove) {\n            if (moveFlag) {\n              parent.$$.moveContent(contentToInsert, after);\n            } else {\n              parent.$$.addContent(contentToInsert);\n            }\n          }\n\n          return after;\n        }\n      }\n    });\n\n    iterate(constructor.defaultLocals, (value, variable) => {\n      this[variable] = value;\n    });\n    constructor._variables.forEach((variable) => {\n      this[variable] = this[variable];\n    });\n\n    const argsObject = Object.create(null);\n    const $argsObject = new Super(argsObject);\n    let args = Object.create(constructor.defaultArgs || null);\n    let wasDRest;\n\n    new Super(originalArgs).forEach((value, arg) => {\n      const isDRest = dRestRegExp.test(arg);\n      const localArgs = isDRest || wasDRest\n        ? Object.create(args)\n        : args;\n\n      args = localArgs;\n\n      if (isDRest) {\n        const restArgs = parentScope.$$.evaluate(value, (value) => {\n          iterate(localArgs, (value, arg) => {\n            delete localArgs[arg];\n          });\n          defineUsualProperties(localArgs, transformRestArgs(value));\n          calculateArgs(args, argsObject, $argsObject);\n        }, this);\n\n        wasDRest = true;\n\n        return defineUsualProperties(localArgs, transformRestArgs(restArgs));\n      }\n\n      const isDElements = name === 'd-elements';\n      const forDElements = isDElements && arg === 'value';\n\n      wasDRest = false;\n\n      if (name !== 'd-each' || arg !== 'uid') {\n        value = parentScope.$$.evaluate(value, (value) => {\n          localArgs[arg] = value;\n          calculateArgs(args, argsObject, $argsObject);\n        }, this, forDElements, isDElements && parentBlock.$$.name === '#d-item');\n      }\n\n      defineUsualProperties(localArgs, {\n        [arg]: value\n      });\n    });\n\n    defineFrozenProperties(this, {\n      /**\n       * @member {Object} Block#args\n       * @type {Object}\n       * @public\n       */\n      args: argsObject,\n\n      /**\n       * @member {Object} Block#globals\n       * @type {Object}\n       * @public\n       */\n      globals: Object.create(\n        parentScope\n          ? Object.create(parentScope.globals)\n          : null\n      ),\n\n      /**\n       * @member {Block|undefined} Block#parentScope\n       * @type {Block|undefined}\n       * @public\n       */\n      parentScope,\n\n      /**\n       * @member {Block|undefined} Block#parentTemplate\n       * @type {Block|undefined}\n       * @public\n       */\n      parentTemplate\n    });\n\n    calculateArgs(args, argsObject, $argsObject);\n\n    if (parentBlock) {\n      parentBlock.$$.children.push(this);\n    }\n  }\n\n  /**\n   * @method Block#afterConstruct\n   * @public\n   * @description Is called after block construction (including all scopes)\n   * but before rendering the block and its children.\n   */\n  afterConstruct() {}\n\n  /**\n   * @method Block#afterRender\n   * @public\n   * @description Is called after block has been rendered.\n   */\n  afterRender() {}\n\n  /**\n   * @method Block#afterRender\n   * @public\n   * @description Is called before the block removal.\n   */\n  beforeRemove() {}\n\n  /**\n   * @method Block#changeLocals\n   * @public\n   * @param {Object} locals - Object to assign to this.\n   * @description Method for simple assigning some locals to this.\n   */\n  changeLocals(locals) {\n    assign(this, locals);\n  }\n\n  /**\n   * @method Block#evaluateAndWatch\n   * @public\n   * @param {String} expression - Expression to evaluate.\n   * @param {Watcher} callback - Callback which is called when the expression value is changed.\n   * @returns {*} Evaluation result.\n   * @description Method for evaluating an expression in context of the block and watching for the changes.\n   */\n  evaluateAndWatch(expression, callback) {\n    validate([expression], ['string'], 'Block#evaluateAndWatch');\n\n    const {\n      expression: code,\n      original\n    } = parseJS(expression, expression, true);\n\n    const func = constructEvalFunction(code, original);\n\n    return this.$$.parentScope.$$.evaluate(func, callback, this);\n  }\n\n  /**\n   * @method Block#evaluateOnce\n   * @public\n   * @param {String} expression - Expression to evaluate.\n   * @returns {*} Evaluation result.\n   * @description Method for evaluating an expression in context of the block once.\n   */\n  evaluateOnce(expression) {\n    validate([expression], ['string'], 'Block#evaluateOnce');\n\n    const {\n      expression: code,\n      original\n    } = parseJS(expression, expression, true);\n\n    const func = constructEvalFunction(code, original);\n\n    return this.$$.parentScope.$$.evaluate(func);\n  }\n\n  /**\n   * @method Block#setGlobals\n   * @public\n   * @param {Object} globals - Object which keys are global vars and values are their values.\n   * @description Method for setting global variables (use only in constructor!).\n   */\n  setGlobals(globals) {\n    defineUsualProperties(this.globals, globals);\n  }\n\n  /**\n   * @method Block#watch\n   * @public\n   * @param {...('args'|'globals'|String)} [vars] - Vars to watch (args, globals or locals).\n   * If no specified all locals, args and globals are to be watched.\n   * If the 'args' string all args are to be watched.\n   * If the 'globals' string all globals are to be watched.\n   * @param {VarsWatcher} watcher - Called when watched vars are changed.\n   * @description Method for watching for vars. If no vars passed in arguments\n   * all vars are to be watched. If the 'args' string is in the arguments all args are to be watched.\n   * If the 'globals' string is in the arguments all globals are to be watched.\n   * Otherwise specified vars will be watched.\n   * Watchers should not be put inside the constructor. It is considered best\n   * practice to do it inside the {@link Block#afterConstruct} method.\n   * Note that these expressions (vars, i.e. \"args.arg\") are not to be\n   * evaluated so you cannot put there things like \"a[b]\" or any js code,\n   * only expressions like \"a\", \"b\", \"args.a\", \"args.b\" and \"globals.a\", \"globals.b\".\n   * Also note that if there are more than one var that are changed at once (synchronously)\n   * the watcher is called only once.\n   * Note that the watcher is executed right away because in most cases\n   * this behaviour is very convenient.\n   *\n   * @example\n   * class MyBlock extends Block {\n   *   static template = '<div />';\n   *\n   *   afterConstruct() {\n   *     this.watch('a', () => {});\n   *     this.watch('args.a', 'globals.r', () => {});\n   *     this.watch(() => {});\n   *   }\n   * }\n   */\n  watch(...vars) {\n    const oldWatcher = arguments[arguments.length - 1];\n\n    if (!isFunction(oldWatcher)) {\n      console.warn(`The last argument (watcher) wasn't specified (${ this.$$.name }#watch)`);\n\n      return;\n    }\n\n    const watcher = () => {\n      oldWatcher();\n    };\n\n    if (arguments.length === 1) {\n      watchForAllLocals(this, watcher);\n      watchForAllArgs(this, watcher);\n      watchForAllGlobals(this, watcher);\n\n      oldWatcher();\n\n      return;\n    }\n\n    iterate(arguments, (variable) => {\n      if (variable === oldWatcher) {\n        return;\n      }\n\n      variable = `${ variable }`;\n\n      if (variable === '$') {\n        return watchForAllLocals(this, watcher);\n      }\n\n      if (variable === 'args') {\n        return watchForAllArgs(this, watcher);\n      }\n\n      if (variable === 'globals') {\n        return watchForAllGlobals(this, watcher);\n      }\n\n      if (/^args\\./.test(variable)) {\n        variable = variable.replace(/^args\\./, '');\n\n        if (!this.$$.args[variable]) {\n          return;\n        }\n\n        this.$$.args[variable].watchers.perm.push(watcher);\n\n        return;\n      }\n\n      if (/^globals\\./.test(variable)) {\n        variable = variable.replace(/^globals\\./, '');\n\n        if (!this.$$.globals[variable]) {\n          return;\n        }\n\n        const { watchers } = this.$$.globals[variable];\n\n        watchers.perm.push(watcher);\n        this.$$.watchersToRemove.push({\n          watcher,\n          watchers\n        });\n\n        return;\n      }\n\n      if (!this.$$.locals[variable]) {\n        return;\n      }\n\n      this.$$.locals[variable].watchers.perm.push(watcher);\n    });\n\n    oldWatcher();\n  }\n}\n\nnew Super(Block.prototype).proto(null);\n\nregisterBuiltIns(Blocks, rootBlocks, Block);\n\nconst blocks = Block._blocks;\n\nclass Mixin {\n  static evaluate = true;\n\n  /**\n   * @method Mixin.wrap\n   * @public\n   * @param {...Wrapper} wrappers - Functions that return wrapped mixin.\n   * @returns {Mixin} New mixin.\n   * @description Method for wrapping mixins.\n   * It is considered best practice to just extends the old mixin with a new one.\n   */\n  static wrap(...wrappers) {\n    return new Arr(arguments).reduce((block, wrapper) => {\n      const returnValue = wrapper(block);\n\n      return isInstanceOf(Mixin, returnValue)\n        ? returnValue\n        : block;\n    }, this);\n  }\n\n  constructor(opts) {\n    const {\n      name,\n      value,\n      dynamic,\n      elem,\n      args,\n      comment,\n      parentBlock,\n      parentScope,\n      parentTemplate\n    } = opts;\n    const watchersToRemove = new Arr([]);\n    const watchers = new Arr([]);\n\n    defineFrozenProperties(this, {\n      $$: {\n        name,\n        _value: value,\n        value,\n        isDynamic: dynamic,\n        parentScope,\n        parentBlock,\n        parentTemplate,\n        watchers,\n        watchersToRemove,\n        evaluate: (watcher) => {\n          const {\n            isDynamic,\n            value,\n            _value\n          } = this.$$;\n          const currentValue = isDynamic\n            ? value\n            : parentScope.$$.evaluate(_value);\n\n          if (watcher) {\n            watchers.push(watcher);\n          }\n\n          return currentValue;\n        },\n        remove: (isParentSignal) => {\n          removeWatchers(watchersToRemove);\n\n          try {\n            this.beforeRemove();\n          } catch (err) {\n            console.error(`Uncaught error in ${ name }#beforeRemove:`, err);\n          }\n\n          if (!isParentSignal && parentBlock) {\n            const index = parentBlock.$$.mixins.indexOf(this);\n\n            if (index !== -1) {\n              parentBlock.$$.mixins.splice(index, 1);\n            }\n          }\n        }\n      }\n    });\n\n    this.args = args;\n    this.comment = comment;\n    this.parentScope = parentScope;\n    this.parentTemplate = parentTemplate;\n    this.elem = elem;\n    this.node = elem.$[0];\n\n    if (parentBlock) {\n      parentBlock.$$.mixins.push(this);\n    }\n  }\n\n  afterUpdate() {}\n\n  beforeRemove() {}\n\n  /**\n   * @method Block#evaluateAndWatch\n   * @public\n   * @param {Watcher} callback - Callback which is called when the mixin value is changed.\n   * @returns {*} Evaluation result.\n   * @description Method for evaluating the mixin value and watching for the changes.\n   */\n  evaluateAndWatch(callback) {\n    return this.$$.evaluate(callback);\n  }\n\n  /**\n   * @method Block#evaluateOnce\n   * @public\n   * @returns {*} Evaluation result.\n   * @description Method for evaluating the mixin value once.\n   */\n  evaluateOnce() {\n    return this.$$.evaluate();\n  }\n}\n\nregisterBuiltIns(Mixins, rootMixins, Mixin);\n\nconst mixins = Block._mixins;\n\nfunction initApp(block, node) {\n  if (!blocks[block]) {\n    throw new Error(`No \"${ block }\" block is registered! (initApp)`);\n  }\n\n  const parentElem = new Elem(node);\n\n  parentElem.html('');\n\n  if (!parentElem.length) {\n    throw new Error('No valid element to insert the app into was given! (initApp)');\n  }\n\n  parentElem.$[0].DwayneRootBlock = createBlock({\n    node: {\n      name: block,\n      attrs: {},\n      children: new Arr([])\n    },\n    parent: parentElem,\n    parentElem\n  });\n  parentElem.attr('dwayne-root', block);\n}\n\nfunction removeApp(node) {\n  const elem = new Elem(node);\n\n  elem.html('');\n\n  if (!elem.length) {\n    throw new Error('No valid element to remove the app from was given! (removeApp)');\n  }\n\n  node = elem.$[0];\n\n  if (!node.DwayneRootBlock) {\n    throw new Error('No app registered inside the given element! (removeApp)');\n  }\n\n  delete node.DwayneRootBlock.$$.remove();\n}\n\nfunction registerBuiltIns(set, scope, proto) {\n  iterate(set, (register) => {\n    const {\n      name,\n      value\n    } = register(proto, createBlock, Block);\n\n    if (proto === Block) {\n      const variables = {};\n\n      value._html = transformJSExpressions(\n        markupToJSON(\n          `${ value.template || '' }`,\n          value.collapseWhiteSpace\n        ),\n        variables\n      );\n      value._variables = new Super(variables)\n        .except('$$', '$')\n        .keys();\n    } else {\n      value._match = constructMixinRegExp(name);\n    }\n\n    scope[name] = value;\n  });\n}\n\nfunction createBlock({ node, parent, parentElem, parentBlock, parentScope, parentTemplate, prevBlock }) {\n  const elem = parentElem.prop('namespaceURI') === svgNS\n    ? doc.svg()\n    : new Elem(doc.template().$[0].content);\n  const localBlocks = parentScope ? parentScope.$$.ns._blocks : blocks;\n  const localMixins = parentScope ? parentScope.$$.ns._mixins : mixins;\n  let children = node.children || new Arr([]);\n  let args = node.attrs || {};\n  let name = node.name || 'UnknownBlock';\n  let constructor = node.name && localBlocks[node.name];\n  let dBlockMatch;\n  let dBlockName;\n  let dBlockArgs;\n  let dBlockChildren;\n  let dElementsName;\n\n  if (name === 'd-block' && args.name) {\n    name = 'd-elements';\n    constructor = localBlocks[name];\n    dElementsName = args.name;\n    dBlockArgs = new Super(args).except('name').$;\n    dBlockChildren = children;\n    children = new Arr([]);\n    args = {};\n  } else if (name === 'd-block' && hasOwnProperty.call(args, 'constructor')) {\n    name = 'UnknownBlock';\n    constructor = parentScope.$$.evaluate(args.constructor);\n\n    if (isFunction(constructor)) {\n      args = new Super(args).except('constructor').$;\n    } else {\n      constructor = null;\n    }\n  } else if ((dBlockMatch = name.match(/^d-block:([\\s\\S]+)$/)) || name === 'd-block') {\n    constructor = blocks['d-block'];\n    dBlockName = dBlockMatch ? dBlockMatch[1] : null;\n  }\n\n  let blockInstance;\n\n  if (constructor) {\n    try {\n      blockInstance = new constructor({\n        name,\n        args,\n        dBlockName,\n        children,\n        parent,\n        parentElem,\n        parentBlock,\n        parentScope,\n        parentTemplate,\n        prevBlock\n      });\n    } catch (err) {\n      console.error(`Uncaught error in new ${ name }:`, err);\n      constructor = null;\n    }\n  }\n\n  if (!constructor) {\n    const {\n      value,\n      children\n    } = node;\n\n    const element = elem.create(name);\n    const currentAttrs = Object.create(null);\n    let attrs = Object.create(null);\n    let wasDRest;\n    const mixinDefaultOpts = {\n      elem: element,\n      parentBlock,\n      parentScope,\n      parentTemplate\n    };\n\n    new Super(args).forEach((value, attr) => {\n      const isDRest = dRestRegExp.test(attr);\n      const localAttrs = isDRest || wasDRest\n        ? Object.create(attrs)\n        : attrs;\n\n      attrs = localAttrs;\n\n      if (isDRest) {\n        const restAttrs = parentScope.$$.evaluate(value, (value) => {\n          setTimeout(() => {\n            iterate(localAttrs, (value, arg) => {\n              delete localAttrs[arg];\n            });\n            assign(localAttrs, transformRestAttrs(\n              value, localMixins, mixinDefaultOpts\n            ));\n            calculateAttrs(attrs, currentAttrs, element, false);\n          }, 0);\n        }, parentBlock);\n\n        wasDRest = true;\n\n        return assign(localAttrs, transformRestAttrs(\n          restAttrs, localMixins, mixinDefaultOpts\n        ));\n      }\n\n      const match = mixinMatch(localMixins, attr);\n\n      wasDRest = false;\n\n      if (match) {\n        if (value === true) {\n          value = 'true';\n        }\n\n        localAttrs[attr] = {\n          type: 'mixin',\n          dynamic: false,\n          opts: {\n            value,\n            ...match,\n            ...mixinDefaultOpts\n          },\n          value\n        };\n\n        return;\n      }\n\n      localAttrs[attr] = {\n        type: 'attr',\n        value: parentScope.$$.evaluate(value, (value) => {\n          localAttrs[attr] = {\n            type: 'attr',\n            value\n          };\n          calculateAttrs(attrs, currentAttrs, element, false);\n        }, parentBlock)\n      };\n    });\n\n    const createMixins = calculateAttrs(attrs, currentAttrs, element, true);\n\n    if (name === '#comment') {\n      element.text(value);\n    }\n\n    if (name === '#text') {\n      if (isFunction(value)) {\n        let text = parentScope.$$.evaluate(value, (value) => {\n          if (isNil(value)) {\n            value = '';\n          }\n\n          element.text(`${ value }`);\n        }, parentBlock);\n\n        if (isNil(text)) {\n          text = '';\n        }\n\n        element.text(`${ text }`);\n      } else {\n        element.text(value);\n      }\n    }\n\n    if (children) {\n      const parentElem = name === 'template'\n        ? new Elem(element.$[0].content)\n        : element;\n      let prevBlock;\n\n      children.forEach((child) => {\n        prevBlock = createBlock({\n          node: child,\n          parent: parentElem,\n          parentElem,\n          parentBlock,\n          parentScope,\n          parentTemplate,\n          prevBlock\n        });\n      });\n    }\n\n    const isParentBlock = parent instanceof Block;\n\n    if (prevBlock instanceof Block) {\n      prevBlock.$$.insertAfterIt(element, false);\n    } else if (prevBlock) {\n      element.insertAfter(prevBlock);\n\n      if (isParentBlock) {\n        parent.$$.addContent(element);\n      }\n    } else if (isParentBlock) {\n      parent.$$.insertInStartOfIt(element, false);\n    } else {\n      element.into(parentElem, false);\n    }\n\n    createMixins();\n\n    return element;\n  }\n\n  const {\n    $$,\n    args: Args,\n    globals,\n    ...locals\n  } = blockInstance;\n\n  if (dBlockMatch || name === 'd-block') {\n    parentScope.$$.dBlocks.push(blockInstance);\n  }\n\n  if (dBlockArgs) {\n    node = {\n      attrs: dBlockArgs,\n      children: dBlockChildren\n    };\n    node.name = parentScope.$$.evaluate(dElementsName, (newName) => {\n      node.name = newName;\n\n      const html = new Arr([node]);\n\n      Args.value = newName === 'd-if'\n        ? transformDIfChildren(html)\n        : html;\n    }, blockInstance, true);\n\n    const html = new Arr([node]);\n\n    Args.value = node.name === 'd-if'\n      ? transformDIfChildren(html)\n      : html;\n    Args.parentScope = parentScope;\n  }\n\n  const html = name === 'd-elements'\n    ? new Arr(Args.value || [])\n    : constructor._html;\n\n  delete locals.$;\n  delete locals.parentScope;\n\n  $$.args = constructPrivateScope(Args);\n  $$.locals = constructPrivateScope(locals);\n  $$.globals = constructPrivateScope(globals, 'globals', parentScope);\n\n  if (name === '#d-item') {\n    const scopeValues = {\n      [node.itemName]: node.item,\n      [node.indexName]: node.index\n    };\n    const scope = parentScope.$$.name === '#d-item'\n      ? parentScope.$$.scope\n      : parentScope;\n\n    $$.ns = parentScope.$$.ns;\n    $$.privateScope = constructPrivateScope(scopeValues);\n    constructPublicScope($$.scope = Object.create(scope), scopeValues, $$.privateScope);\n  }\n\n  if (name === 'd-each') {\n    $$.scope = Object.create(parentScope.$$.name === '#d-item' ? parentScope.$$.scope : parentScope, {\n      [Args.item || '$item']: {\n        value: null,\n        writable: true\n      },\n      [Args.index || '$index']: {\n        value: null,\n        writable: true\n      }\n    });\n  }\n\n  constructPublicScope(Args, Args, $$.args);\n  constructPublicScope(globals, globals, $$.globals);\n  constructPublicScope(blockInstance, locals, $$.locals);\n\n  try {\n    blockInstance.afterConstruct();\n  } catch (err) {\n    console.error(`Uncaught error in ${ name }#afterConstruct:`, err);\n  }\n\n  prevBlock = undefined;\n  parentScope = name === 'd-elements'\n    ? Args.parentScope\n    : blockInstance;\n  parentTemplate = name === 'd-elements'\n    ? Args.parentTemplate\n    : blockInstance;\n\n  html.forEach((child) => {\n    prevBlock = createBlock({\n      node: child,\n      parent: blockInstance,\n      parentElem,\n      parentBlock: blockInstance,\n      parentScope,\n      parentTemplate,\n      prevBlock\n    });\n  });\n\n  try {\n    blockInstance.afterRender();\n  } catch (err) {\n    console.error(`Uncaught error in ${ name }#afterRender:`, err);\n  }\n\n  return blockInstance;\n}\n\nfunction createMixin({ name, Mixin, dynamic, value, args, comment, elem, parentBlock, parentScope, parentTemplate }) {\n  const mixin = new Mixin({\n    name,\n    value,\n    dynamic,\n    args,\n    comment,\n    elem,\n    parentBlock,\n    parentScope,\n    parentTemplate\n  });\n\n  if (Mixin.evaluate) {\n    const value = mixin.value = mixin.evaluateAndWatch((newValue, oldValue) => {\n      mixin.value = newValue;\n\n      try {\n        mixin.afterUpdate(newValue, oldValue);\n      } catch (err) {\n        console.error(`Uncaught error in ${ name }#afterUpdate:`, err);\n      }\n    });\n\n    mixin.afterUpdate(value);\n  }\n\n  return mixin;\n}\n\nfunction transformDIfChildren(children) {\n  return new Arr(children || [])\n    .concat({})\n    .object((object, child) => {\n      const { name } = child;\n      const {\n        html,\n        ifElse\n      } = object;\n\n      if (name !== 'd-else-if' && name !== 'd-else') {\n        if (ifElse) {\n          html.push({\n            name: 'd-if',\n            children: ifElse\n          });\n\n          object.ifElse = null;\n        }\n\n        if (name === 'd-if') {\n          object.ifElse = new Arr([child]);\n        } else if (name) {\n          html.push(child);\n        }\n      } else {\n        (ifElse || html).push(child);\n\n        if (name === 'd-else' && ifElse) {\n          html.push({\n            name: 'd-if',\n            children: ifElse\n          });\n\n          object.ifElse = null;\n        }\n      }\n\n      if (name) {\n        child.children = transformDIfChildren(child.children);\n      }\n    }, {\n      html: new Arr([]),\n      ifElse: null\n    }).$.html;\n}\n\nfunction transformJSExpressions(children, variables, exclude = {}) {\n  return new Arr(children || []).object((children, child) => {\n    const {\n      name,\n      attrs,\n      children: ownChildren,\n      value: initialValue\n    } = child;\n    const isDEach = name === 'd-each';\n    let { value } = child;\n    let excludeLocal = {};\n\n    if (isDEach) {\n      excludeLocal = {\n        [child.attrs.item || '$item']: true,\n        [child.attrs.index || '$index']: true\n      };\n    }\n\n    child.attrs = new Super(attrs).map((value, attr) => {\n      if (value === true) {\n        return true;\n      }\n\n      if (value[0] !== '{' || value[value.length - 1] !== '}') {\n        return value;\n      }\n\n      const parsed = parseJS(value.slice(1, -1), value, true);\n\n      if (!parsed) {\n        return value;\n      }\n\n      if (parsed.rest) {\n        throw new Error('Attribute, mixin and argument computed values must be of the format \"{<js_expression>}\"');\n      }\n\n      const isUID = attr === 'uid';\n\n      const usedVariables = new Super(parsed.variables).filter((value, variable) => {\n        if (isDEach && isUID && excludeLocal[variable]) {\n          return;\n        }\n\n        if (!exclude[variable]) {\n          return true;\n        }\n      }).$;\n\n      assign(variables, usedVariables);\n\n      return constructEvalFunction(parsed.expression, parsed.original);\n    }).$;\n\n    if (name !== '#text') {\n      exclude = {\n        ...exclude,\n        ...excludeLocal\n      };\n\n      if (ownChildren) {\n        child.children = transformJSExpressions(ownChildren, variables, exclude);\n      }\n\n      children.push(child);\n\n      return;\n    }\n\n    while (value.length) {\n      const match = value.match(curlyBracketRegExp);\n\n      if (!match) {\n        children.push({\n          name: '#text',\n          value\n        });\n\n        break;\n      }\n\n      const { index } = match;\n\n      if (index) {\n        children.push({\n          name: '#text',\n          value: value.slice(0, index)\n        });\n        value = value.slice(index);\n      }\n\n      const parsed = parseJS(value.slice(1), initialValue);\n\n      if (!parsed) {\n        children.push({\n          name: '#text',\n          value\n        });\n\n        break;\n      }\n\n      const usedVariables = new Super(parsed.variables).filter((value, variable) => {\n        if (!exclude[variable]) {\n          return true;\n        }\n      }).$;\n\n      assign(variables, usedVariables);\n\n      children.push({\n        name: '#text',\n        value: constructEvalFunction(parsed.expression, parsed.original)\n      });\n      value = parsed.rest;\n    }\n  }, new Arr([]));\n}\n\nfunction isInstanceOf(Class, Subclass) {\n  return isPrototypeOf.call(Class, Subclass) && isPrototypeOf.call(Class.prototype, Subclass.prototype);\n}\n\nfunction removeWatchers(watchersToRemove) {\n  watchersToRemove.forEach(({ watcher, watchers }) => {\n    const index = watchers.indexOf(watcher);\n\n    if (index !== -1) {\n      watchers.splice(index, 1);\n    }\n  });\n}\n\nfunction constructPrivateScope(object, type, parentScope) {\n  let scope = {};\n\n  if (type === 'globals') {\n    scope = Object.create(\n      parentScope\n        ? parentScope.$$.globals\n        : null\n    );\n  }\n\n  return new Super(object).object((scope, value, key) => {\n    scope[key] = {\n      value,\n      watchers: {\n        temp: new Arr([]),\n        perm: new Arr([])\n      }\n    };\n  }, scope).$;\n}\n\nfunction constructPublicScope(scope, scopeValues, privateScope) {\n  new Super(scope).define(new Super(scopeValues).map((value, key) => {\n    const scope = privateScope[key];\n\n    return {\n      configurable: false,\n      enumerable: true,\n      get() {\n        if (evalMode) {\n          if (getting.indexOf(scope.watchers.temp) === -1) {\n            getting.push(scope.watchers.temp);\n          }\n        }\n\n        return scope.value;\n      },\n      set(value) {\n        if (value === scope.value) {\n          return;\n        }\n\n        if (!changed) {\n          changed = [];\n        }\n\n        const oldTempWatchers = scope.watchers.temp.slice();\n        const oldValue = scope.value;\n\n        scope.watchers.temp = new Arr([]);\n        scope.value = value;\n\n        oldTempWatchers.forEach((watcher) => {\n          watcher.onRemove();\n          watcher();\n        });\n        changed.push({\n          scope,\n          oldValue,\n          value\n        });\n\n        setTimeout(() => {\n          if (!changed) {\n            return;\n          }\n\n          const was = new Arr([]);\n          const values = [];\n\n          for (let i = changed.length - 1; i >= 0; i--) {\n            const {\n              scope,\n              value,\n              oldValue\n            } = changed[i];\n\n            scope.watchers.perm.forEach((watcher) => {\n              const index = was.indexOf(watcher);\n\n              if (index === -1) {\n                was.push(watcher);\n                values.push({\n                  value,\n                  oldValue\n                });\n              } else {\n                values[index].oldValue = oldValue;\n              }\n            });\n\n            changed.splice(i, 1);\n          }\n\n          changed = null;\n\n          was.forEach((watcher, i) => {\n            const {\n              value,\n              oldValue\n            } = values[i];\n\n            watcher(value, oldValue);\n          });\n        }, 0);\n      }\n    };\n  }).$);\n}\n\nfunction watchForAllLocals(block, watcher) {\n  iterate(block.$$.locals, ({ watchers }) => {\n    watchers.perm.push(watcher);\n  });\n}\n\nfunction watchForAllGlobals(block, watcher) {\n  const {\n    globals,\n    watchersToRemove\n  } = block.$$;\n\n  for (const global in globals) {\n    /* eslint guard-for-in: 0 */\n    const watchers = globals[global].watchers.perm;\n\n    watchers.push(watcher);\n    watchersToRemove.push({\n      watcher,\n      watchers\n    });\n  }\n}\n\nfunction watchForAllArgs(block, watcher) {\n  iterate(block.$$.args, ({ watchers }) => {\n    watchers.perm.push(watcher);\n  });\n}\n\nfunction calculateArgs(args, argsObject, $argsObject) {\n  $argsObject.propertyNames().forEach((arg) => {\n    if (!(arg in args)) {\n      argsObject[arg] = undefined;\n    }\n  });\n\n  for (const arg in args) {\n    argsObject[arg] = args[arg];\n  }\n}\n\nfunction transformRestArgs(args) {\n  return new Super(args).object((args, value, arg) => {\n    if (dRestRegExp.test(arg)) {\n      assign(args, transformRestArgs(value));\n    } else {\n      args[arg] = value;\n    }\n  }).$;\n}\n\nfunction transformRestAttrs(attrs, mixins, mixinDefaultOpts) {\n  return new Super(attrs).object((eventualAttrs, value, attr) => {\n    if (dRestRegExp.test(attr)) {\n      return assign(eventualAttrs, transformRestAttrs(value, mixins, mixinDefaultOpts));\n    }\n\n    const match = mixinMatch(mixins, attr);\n\n    if (match) {\n      eventualAttrs[attr] = {\n        type: 'mixin',\n        dynamic: true,\n        opts: {\n          value,\n          ...match,\n          ...mixinDefaultOpts\n        },\n        value\n      };\n\n      return;\n    }\n\n    eventualAttrs[attr] = {\n      type: 'attr',\n      value\n    };\n  }).$;\n}\n\nfunction mixinMatch(mixins, attr) {\n  let match;\n\n  for (const name in mixins) {\n    const Mixin = mixins[name];\n    const localMatch = attr.match(Mixin._match);\n\n    if (localMatch) {\n      const argsMatch = localMatch[1];\n      let args;\n\n      if (/^\\s*$/.test(argsMatch)) {\n        args = [];\n      } else if (argsMatch) {\n        args = new Str(argsMatch)\n          .split(/,\\s*/)\n          .map((s) => new Str(s).trim().$)\n          .$;\n      }\n\n      match = {\n        args,\n        comment: localMatch[2],\n        Mixin,\n        name\n      };\n\n      break;\n    }\n  }\n\n  return match;\n}\n\nfunction calculateAttrs(attrs, attrsObject, elem, firstTime) {\n  iterate(attrsObject, ({ type, value }, attr) => {\n    if (!attrs[attr]) {\n      if (type === 'attr') {\n        elem.removeAttr(attr);\n      } else {\n        value.$$.remove();\n      }\n\n      delete attrsObject[attr];\n    }\n  });\n\n  const mixins = new Arr([]);\n\n  for (const attr in attrs) {\n    const {\n      type,\n      dynamic,\n      value,\n      opts\n    } = attrs[attr];\n    let nextType;\n    let nextDynamic;\n    let nextValue;\n\n    if (attrsObject[attr]) {\n      const {\n        type: prevType,\n        value: prevValue\n      } = attrsObject[attr];\n\n      if (type === 'attr') {\n        if (prevType === 'mixin') {\n          prevValue.$$.remove();\n        }\n\n        if (prevValue !== value) {\n          elem.attr(attr, value);\n        }\n\n        nextValue = value;\n      } else {\n        const mixin = prevValue;\n\n        if (prevType === 'attr') {\n          elem.removeAttr(attr);\n        }\n\n        mixin.$$.isDynamic = dynamic;\n\n        if (dynamic) {\n          executeMixinWatchers(mixin, value);\n        } else if (!mixin.$$.evaluated && opts.Mixin.evaluate) {\n          const newValue = mixin.$$.parentScope.$$.evaluate(value, (newValue) => {\n            const {\n              type,\n              dynamic\n            } = attrs[attr];\n\n            if (type === 'mixin' && !dynamic) {\n              executeMixinWatchers(mixin, newValue);\n            }\n          }, mixin);\n\n          mixin.$$.evaluated = true;\n\n          executeMixinWatchers(mixin, newValue);\n        }\n\n        nextValue = mixin;\n      }\n\n      nextType = type;\n      nextDynamic = dynamic;\n    } else {\n      if (type === 'attr') {\n        elem.attr(attr, value);\n\n        nextValue = value;\n      } else {\n        const buildMixin = () => {\n          opts.dynamic = dynamic;\n\n          const mixin = createMixin(opts);\n\n          if (!dynamic && opts.Mixin.evaluate) {\n            const {\n              parentScope,\n              value\n            } = opts;\n            const firstValue = parentScope.$$.evaluate(value, (newValue) => {\n              const {\n                type,\n                dynamic\n              } = attrs[attr];\n\n              if (type === 'mixin' && !dynamic) {\n                executeMixinWatchers(mixin, newValue);\n              }\n            }, mixin);\n\n            mixin.$$.evaluated = true;\n            mixin.$$.value = firstValue;\n          }\n\n          nextValue = mixin;\n\n          return {\n            attr,\n            opts: {\n              type,\n              dynamic,\n              value: mixin\n            }\n          };\n        };\n\n        if (firstTime) {\n          mixins.push(buildMixin);\n        } else {\n          buildMixin();\n        }\n      }\n\n      nextType = type;\n      nextDynamic = dynamic;\n    }\n\n    attrsObject[attr] = {\n      type: nextType,\n      dynamic: nextDynamic,\n      value: nextValue\n    };\n  }\n\n  if (firstTime) {\n    return () => {\n      mixins.forEach((buildMixin) => {\n        const {\n          attr,\n          opts\n        } = buildMixin();\n\n        attrsObject[attr] = opts;\n      });\n    };\n  }\n}\n\nfunction executeMixinWatchers(mixin, value) {\n  const oldValue = mixin.$$.value;\n\n  mixin.$$.value = value;\n\n  mixin.$$.watchers.forEach((watcher) => {\n    watcher(value, oldValue);\n  });\n}\n\nfunction constructMixinRegExp(name) {\n  return new RegExp(`^${ new Str(name).escapeRegExp().$ }(?:\\\\(([^\\\\)]*)\\\\))?(?:#([\\\\s\\\\S]*))?$`);\n}\n\nfunction extendBlock(cls) {\n  new Super(cls).proto(Block);\n  new Super(cls.prototype).proto(Block.prototype);\n}\n\nfunction insertTemplates(template, templates) {\n  const { vars, value } = template;\n  const newTemplates = Object.create(null);\n  const newVars = new Super(vars).object((vars, variable) => {\n    vars[variable] = true;\n  });\n\n  assign(newTemplates, templates);\n  iterate(value, forEachNode);\n\n  function forEachNode({ type, value, children }, index, tree) {\n    if (type === '#comment') {\n      value = new Str(value).trim().$;\n\n      if (newTemplates[value]) {\n        tree[index] = newTemplates[value].value;\n        newVars.assign(new Super(newTemplates[value].vars).object((vars, variable) => {\n          vars[variable] = true;\n        }).$);\n      }\n    } else {\n      iterate(children, forEachNode);\n    }\n  }\n\n  vars.length = 0;\n  new Arr(vars).pushArray(newVars.keys().$);\n\n  return template;\n}\n\nexport { Block, Mixin, initApp, removeApp, insertTemplates };\n","/**\n * @module constants/formats\n * @private\n * @description Exports different types of formatting for {@link Date#format}.\n */\n\nimport { Super } from '../Super';\nimport { Str } from '../Str';\n\nconst zero = new Str('0');\nconst daysOfTheWeekNames = [\n  'Sunday',\n  'Monday',\n  'Tuesday',\n  'Wednesday',\n  'Thursday',\n  'Friday',\n  'Saturday'\n];\nconst daysOfTheWeekAliases = new Super(daysOfTheWeekNames).map((value) => value.slice(0, 3)).$;\nconst monthsNames = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'Jule',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December'\n];\nconst monthsAliases = new Super(monthsNames).map((value) => value.slice(0, 3)).$;\n\n/**\n * @callback module:constants/formats~matchCallback\n * @param {Dat} date - D-wrap of a date to apply format to.\n * @param {String} string - Matched applied expression.\n */\n\n/**\n * @typedef {Object} module:constants/formats~formatExpr\n * @property {String} format - Matched format.\n * @property {module:constants/formats~matchCallback} match - Callback if there was a match.\n */\n\n/**\n * @type {module:constants/formats~formatExpr[]}\n * @description Array of different formats.\n */\nexport default [\n  {\n    format: 'ccc',\n    match: (date, utc) => round(date[utc]('c'), 3)\n  },\n  {\n    format: 'c',\n    match: (date, utc) => date[utc]('c')\n  },\n  {\n    format: 'ss',\n    match: (date, utc) => round(date[utc]('s'), 2)\n  },\n  {\n    format: 's',\n    match: (date, utc) => date[utc]('s')\n  },\n  {\n    format: 'mm',\n    match: (date, utc) => round(date[utc]('m'), 2)\n  },\n  {\n    format: 'm',\n    match: (date, utc) => date[utc]('m')\n  },\n  {\n    format: 'hh',\n    match: (date, utc) => round(date[utc]('h'), 2)\n  },\n  {\n    format: 'h',\n    match: (date, utc) => date[utc]('h')\n  },\n  {\n    format: 'dddd',\n    match: (date, utc) => daysOfTheWeekNames[date[utc]('dw')]\n  },\n  {\n    format: 'ddd',\n    match: (date, utc) => daysOfTheWeekAliases[date[utc]('dw')]\n  },\n  {\n    format: 'dd',\n    match: (date, utc) => round(date[utc]('d'), 2)\n  },\n  {\n    format: 'd',\n    match: (date, utc) => date[utc]('d')\n  },\n  {\n    format: 'MMMM',\n    match: (date, utc) => monthsNames[date[utc]('M') - 1]\n  },\n  {\n    format: 'MMM',\n    match: (date, utc) => monthsAliases[date[utc]('M') - 1]\n  },\n  {\n    format: 'MM',\n    match: (date, utc) => round(date[utc]('M'), 2)\n  },\n  {\n    format: 'M',\n    match: (date, utc) => date[utc]('M')\n  },\n  {\n    format: 'yyyy',\n    match: (date, utc) => round(date[utc]('y'), 4)\n  },\n  {\n    format: 'yy',\n    match: (date, utc) => String(date[utc]('y')).slice(-2)\n  },\n  {\n    format: 'y',\n    match: (date, utc) => date[utc]('y')\n  }\n];\n\n/**\n * @function round\n * @private\n * @param {Number} number - Number to round.\n * @param {Number} digits - Number of the digits of the output.\n * @returns {String} String with necessary additional starting zeroes.\n */\nfunction round(number, digits) {\n  const string = String(number);\n  let zeroes = digits - string.length;\n\n  zeroes = zeroes < 0 ? 0 : zeroes;\n\n  return zero.repeat(zeroes).$ + string;\n}\n","/**\n * @module Dat\n * @private\n * @mixin\n * @description Exports Dat class.\n */\n\nimport { Super } from './Super';\nimport { Num } from './Num';\nimport { Str } from './Str';\nimport { switcher } from './Switcher';\nimport { constructors } from './constants';\nimport formats from './constants/formats';\nimport { isDate, iterate, Symbol, defineProperties } from './helpers';\n\n/**\n * @typedef {*} DateLike\n * @public\n */\n\n/**\n * @typedef {'c'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} AddPeriod\n * @public\n */\n\n/**\n * @typedef {'c'|'s'|'m'|'h'|'d'|'dw'|'M'|'y'} GetPeriod\n * @public\n */\n\n/**\n * @typedef {'c'|'s'|'m'|'h'|'d'|'M'|'y'} OfOnePeriod\n * @public\n */\n\n/**\n * @typedef {'c'|'s'|'m'|'h'|'d'|'M'|'y'} SetPeriod\n * @public\n */\n\n/**\n * @typedef {'ccc'|'c'|'ss'|'s'|'mm'|'m'|'hh'|'h'|'dddd'|'ddd'|'dd'|'d'|'MMMM'|'MMM'|'MM'|'M'|'yyyy'|'yy'|'y'} Format\n * @public\n */\n\nconst coeffs = {\n  c: 1,\n  s: 1000,\n  m: 60000,\n  h: 3600000,\n  d: 86400000,\n  w: 604800000,\n  M: 2592000000,\n  y: 31536000000\n};\n\nconst getSwitcher = switcher({\n  c: (date, utc) => date[`${ utc }Milliseconds`](),\n  s: (date, utc) => date[`${ utc }Seconds`](),\n  m: (date, utc) => date[`${ utc }Minutes`](),\n  h: (date, utc) => date[`${ utc }Hours`](),\n  d: (date, utc) => date[`${ utc }Date`](),\n  dw: (date, utc) => date[`${ utc }Day`](),\n  M: (date, utc) => date[`${ utc }Month`]() + 1,\n  y: (date, utc) => date[`${ utc }FullYear`]()\n}, 'equals', NaN);\nconst setSwitcher = switcher({\n  c: (date, value, utc) => date[`${ utc }Milliseconds`](value),\n  s: (date, value, utc) => date[`${ utc }Seconds`](value),\n  m: (date, value, utc) => date[`${ utc }Minutes`](value),\n  h: (date, value, utc) => date[`${ utc }Hours`](value),\n  d: (date, value, utc) => date[`${ utc }Date`](value),\n  M: (date, value, utc) => date[`${ utc }Month`](value - 1),\n  y: (date, value, utc) => date[`${ utc }FullYear`](value)\n});\n\n/**\n * @class Dat\n * @extends Super\n * @public\n * @param {Date} [date = new Date()] - A date to wrap.\n * @returns {Dat} Instance of Dat.\n * @description Wrap of a date.\n *\n * @example\n * const date = new Dat(new Date());\n */\nclass Dat extends Super {\n  constructor(date = new Date()) {\n    super(date);\n\n    /**\n     * @member Dat#$\n     * @type {Date}\n     * @public\n     * @description Original date.\n     */\n  }\n\n  /**\n   * @method Dat#add\n   * @public\n   * @param {AddPeriod|Object.<AddPeriod, Number>} what - What to add.\n   * @param {Number} [number] - Number of what to add if the first argument is a period string.\n   * @returns {Dat} Returns this.\n   * @description Method for adding amounts of time to the date. Returns new instance of Dat.\n   *\n   * @example\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).add('c', 2).toISOString();         // '2000-01-01T00:00:00.001Z'\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).add({ c: 2, d: 5 }).toISOString(); // '2000-01-06T00:00:00.001Z'\n   */\n  add(what, number) {\n    if (arguments.length >= 2) {\n      what = { [what]: number };\n    }\n\n    return this.time(this.time() + new Super(what).sum((value, what) => coeffs[what] * value));\n  }\n\n  /**\n   * @method Dat#expires\n   * @public\n   * @param {*} [value = this] - Value to resolve after the date expires.\n   * @returns {Promise} New instance of Promise.\n   * @description Method for defining when the date expires.\n   *\n   * @example\n   * new Dat().add('c', 500).expires('Expired').then((value) => {\n   *   // After 500 milliseconds\n   *   console.log(value); // 'Expired'\n   * });\n   */\n  expires(value) {\n    if (!arguments.length) {\n      value = this;\n    }\n\n    return new Num(this.$ - now()).timeout(value);\n  }\n\n  /**\n   * @method Dat#format\n   * @public\n   * @param {String} string - Template for the output.\n   * @param {String} [prefix = ''] - If needed [all special strings]{@link Format}\n   * are treated as they should be prefix with prefix.\n   * @returns {String} Formatted string.\n   * @description Method for creating formatted output based on a string.\n   *\n   * @example\n   * new Dat('1999-12-31T23:59:59.999Z').format('Seconds: $ss, milliseconds: $ccc.', '$');\n   * // 'Seconds: 59, milliseconds: 999.'\n   */\n  format(string, prefix = '') {\n    string = new Str(new Super(string).$);\n    prefix = String(new Super(prefix).$);\n\n    iterate(formats, (format) => {\n      string = string.replaceString(prefix + format.format, format.match(this, 'get'));\n    });\n\n    return string.$;\n  }\n\n  /**\n   * @method Dat#formatUTC\n   * @public\n   * @param {String} string - See {@link Dat#format}.\n   * @param {String} [prefix = ''] - See {@link Dat#format}.\n   * @returns {String} Formatted string.\n   * @description UTC version of {@link Dat#format}.\n   *\n   * @example\n   * new Dat('1999-07-07T03:09:09.099Z').formatUTC(\n   *   `\n   *     Milliseconds: $ccc|$c.\n   *     Seconds:      $ss|$s.\n   *     Minutes:      $mm|$m.\n   *     Hours:        $hh|$h.\n   *     Day:          $dddd|$ddd|$dd|$d.\n   *     Month:        $MMMM|$MMM|$MM|$M.\n   *     Year:         $yyyy|$yy|$y.\n   *   `,\n   *   '$'\n   * );\n   * // Milliseconds: 099|99.\n   * // Seconds:      09|9.\n   * // Minutes:      09|9.\n   * // Hours:        03|3.\n   * // Day:          Friday|Fri|07|7.\n   * // Month:        July|Jul|07|7.\n   * // Year:         1999|99|1999.\n   */\n  formatUTC(string, prefix = '') {\n    string = new Str(new Super(string).$);\n    prefix = String(new Super(prefix).$);\n\n    iterate(formats, (format) => {\n      string = string.replaceString(prefix + format.format, format.match(this, 'getUTC'));\n    });\n\n    return string.$;\n  }\n\n  /**\n   * @method Dat#get\n   * @public\n   * @param {GetPeriod} what - What to get.\n   * @returns {Number} Number of what to get.\n   * @description Method for getting values such as seconds or minutes.\n   *\n   * @example\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).get('s'); // 59\n   */\n  get(what) {\n    return getSwitcher(what, [this.$, 'get']);\n  }\n\n  /**\n   * @method Dat#getUTC\n   * @public\n   * @param {GetPeriod} what - See {@link Dat#get}.\n   * @returns {Number} Number of what to get.\n   * @description UTC version of {@link Dat#get}.\n   *\n   * @example\n   * const date = new Dat(new Date('1999-12-31T23:59:59.999Z'));\n   *\n   * date.getUTC('c');  // 999\n   * date.getUTC('s');  // 59\n   * date.getUTC('m');  // 59\n   * date.getUTC('h');  // 23\n   * date.getUTC('d');  // 31\n   * date.getUTC('dw'); // 5\n   * date.getUTC('M');  // 12\n   * date.getUTC('y');  // 1999\n   */\n  getUTC(what) {\n    return getSwitcher(what, [this.$, 'getUTC']);\n  }\n\n  /**\n   * @method Dat#isAfter\n   * @public\n   * @param {DateLike} date - Date to be compared to this date.\n   * @returns {Boolean} If this date is after the argument one.\n   * @description Finds out if this date is after the argument one.\n   *\n   * @example\n   * new Dat(new Date(333)).isAfter(new Date(334)); // false\n   * new Dat(new Date(333)).isAfter(new Date(332)); // true\n   */\n  isAfter(date) {\n    date = new Date(new Super(date).$);\n\n    return date.getTime() < this.$.getTime();\n  }\n\n  /**\n   * @method Dat#isBefore\n   * @public\n   * @param {DateLike} date - Date to be compared to this date.\n   * @returns {Boolean} If this date is before the argument one.\n   * @description Finds out if this date is before the argument one.\n   *\n   * @example\n   * new Dat(new Date(333)).isBefore(new Date(334)); // true\n   * new Dat(new Date(333)).isBefore(new Date(332)); // false\n   */\n  isBefore(date) {\n    date = new Date(new Super(date).$);\n\n    return date.getTime() > this.$.getTime();\n  }\n\n  /**\n   * @method Dat#isBetween\n   * @public\n   * @param {DateLike} date1 - Start of the range.\n   * @param {DateLike} date2 - End of the range.\n   * @returns {Boolean} If this date is after date1 and before date2.\n   * @description Finds out if this date is after date1 and before date2.\n   *\n   * @example\n   * new Dat(new Date(333)).isBetween(new Date(332), new Date(334)); // true\n   * new Dat(new Date(333)).isBetween(new Date(334), new Date(332)); // false\n   */\n  isBetween(date1, date2) {\n    const time = this.$.getTime();\n\n    date1 = new Date(new Super(date1).$);\n    date2 = new Date(new Super(date2).$);\n\n    return time > date1.getTime() && time < date2.getTime();\n  }\n\n  /**\n   * @method Dat#isInvalid\n   * @public\n   * @returns {Boolean} If the date is invalid.\n   * @description Returns if the date is invalid.\n   *\n   * @example\n   * new Dat(new Date('a')).isInvalid(); // true\n   * new Dat(new Date(1)).isInvalid();   // false\n   */\n  isInvalid() {\n    return this.$.toString() === 'Invalid Date';\n  }\n\n  /**\n   * @method Dat#isPassed\n   * @public\n   * @returns {Boolean} If the date is passed.\n   * @description Returns if the date is passed.\n   *\n   * @example\n   * new Dat(new Date(1)).isPassed(); // true\n   */\n  isPassed() {\n    return this.isBefore(now());\n  }\n\n  /**\n   * @method Dat#ofOne\n   * @public\n   * @param {OfOnePeriod} what - Period to check.\n   * @param {DateLike} date - Date to check.\n   * @returns {Boolean} If two dates are of one second, minute or something else.\n   * @description Returns if two dates are of one second, minute or something else.\n   *\n   * @example\n   * new Dat(new Date('1999-12-31T23:59:59.000Z')).ofOne('s', new Date(1999-12-31T23:59:59.333Z')); // true\n   * new Dat(new Date('1999-12-31T23:59:59.000Z')).ofOne('s', new Date(1999-12-31T23:59:58.999Z')); // false\n   */\n  ofOne(what, date) {\n    if (!(what in coeffs) || what === 'w') {\n      return false;\n    }\n\n    date = new Dat(new Date(date));\n\n    let started;\n\n    return iterate(coeffs, (coeff, w) => {\n      if (w === what) {\n        started = true;\n      }\n\n      if (!started || w === 'w') {\n        return;\n      }\n\n      if (started && this.get(w) !== date.get(w)) {\n        return false;\n      }\n    }) !== false;\n  }\n\n  /**\n   * @method Dat#set\n   * @public\n   * @param {SetPeriod|Object.<SetPeriod, Number>} what - What to add.\n   * @param {Number} [number] - Number of what to set if the first argument is a period string.\n   * @returns {Dat} Returns this.\n   * @description Method for setting values such as seconds or minutes.\n   *\n   * @example\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).set('s', 58).get('s');           // 58\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).set({ c: 998, s: 58 }).get('c'); // 998\n   */\n  set(what, number) {\n    const date = this.$;\n\n    if (arguments.length >= 2) {\n      what = { [what]: number };\n    }\n\n    what = new Super(what).$;\n\n    iterate(what, (value, what) => {\n      setSwitcher(what, [date, value, 'set']);\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Dat#setUTC\n   * @public\n   * @param {SetPeriod|Object.<SetPeriod, Number>} what - See {@link Dat#set}.\n   * @param {Number} [number] - See {@link Dat#set}.\n   * @returns {Dat} Returns this.\n   * @description UTC version of {@link Dat#set}.\n   *\n   * @example\n   * const date = new Dat(new Date('1999-12-31T23:59:59.999Z'));\n   *\n   * date.setUTC('ccc', 998).getUTC('ccc'); // 998\n   * date.setUTC({\n   *   s: 58,\n   *   m: 58,\n   *   h: 22\n   * });\n   *\n   * date.getUTC('s'); // 58\n   * date.getUTC('m'); // 58\n   * date.getUTC('h'); // 23\n   */\n  setUTC(what, number) {\n    const date = this.$;\n\n    if (arguments.length >= 2) {\n      what = { [what]: number };\n    }\n\n    what = new Super(what).$;\n\n    iterate(what, (value, what) => {\n      setSwitcher(what, [date, value, 'setUTC']);\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Dat#setUTC\n   * @public\n   * @param {Number} [time] - Time to set.\n   * @returns {Dat|Number} - If the time argument is present this is returned otherwise the time is returned.\n   * @description Synonym for both\n   * [Date#getTime]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime} and\n   * [Date#setTime]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime}.\n   */\n  time(time) {\n    const date = this.$;\n\n    if (arguments.length) {\n      date.setTime(time);\n    }\n\n    return date.getTime();\n  }\n\n  toISOString() {\n    return this.$.toISOString();\n  }\n\n  toLocaleString() {\n    return this.$.toLocaleString();\n  }\n\n  toString() {\n    return this.$.toString();\n  }\n\n  valueOf() {\n    return this.$.valueOf();\n  }\n}\ndefineProperties(Dat.prototype, {\n  [Symbol.toStringTag]: 'Dat'\n});\n\nconstructors[1].push({\n  check: isDate,\n  cls: Dat\n});\n\n/**\n * @function now\n * @public\n * @returns {Number} Number of milliseconds.\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/now\n * @description Synonym for\n * [Date.now]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/now}.\n */\nfunction now() {\n  return Date.now();\n}\n\n/**\n * @function date\n * @public\n * @param {DateLike} [date = new Date()] - Date-like value that is passed to the Date constructor.\n * @returns {Dat} New instance of Dat.\n * @description Synonym for new Dat(new Date(date));\n */\nfunction date(date) {\n  if (!arguments.length) {\n    return new Dat(new Date(now()));\n  }\n\n  date = new Super(date).$;\n\n  return new Dat(new Date(date));\n}\n\nexport { Dat, now, date };\n","/**\n * @module helpers/constructURL\n * @private\n * @description Exports constructURL method.\n */\n\nimport { Arr } from '../Arr';\nimport { Str } from '../Str';\nimport { switcher } from '../Switcher';\nimport { isArray, isObject, isPlainObject } from './checkTypes';\nimport { iterate } from './iterate';\n\n/**\n * @type {RegExp}\n * @description Absolute URL pattern.\n */\nconst absoluteURLRegexp = /^(([a-z][a-z\\d+\\-.]*:)?\\/\\/|data:[a-z]+\\/[a-z]+;base64,)/i;\nconst querySwitcher = switcher('call', () => new Arr([]))\n  .case(isArray, (prefix, query) => {\n    let queryParams = new Arr([]);\n\n    iterate(query, (value) => {\n      if (isPlainObject(value) || isArray(value)) {\n        queryParams = queryParams.concat(querySwitcher(value, [`${ prefix }[]`]));\n\n        return;\n      }\n\n      queryParams.push({\n        param: `${ prefix }[]`,\n        value\n      });\n    });\n\n    return queryParams.$;\n  })\n  .case(isPlainObject, (prefix, query) => {\n    let queryParams = new Arr([]);\n\n    iterate(query, (value, param) => {\n      if (isPlainObject(value) || isArray(value)) {\n        queryParams = queryParams.concat(querySwitcher(value, [prefix ? `${ prefix }[${ param }]` : param]));\n\n        return;\n      }\n\n      queryParams.push({\n        param: prefix ? `${ prefix }[${ param }]` : param,\n        value: isObject(value) ? JSON.stringify(value) : String(value)\n      });\n    });\n\n    return queryParams.$;\n  });\n\n/**\n * @function constructURL\n * @param {String} baseURL - BaseURL of the output URL.\n * @param {String} url - Main part of the output URL.\n * @param {Object} params - Params to replace in the url expressions like \":param\".\n * @param {Object} query - Object with query params.\n * @param {Object} [hash = ''] - URL hash.\n * @param {Object} [encodeOptions = {}] - If you need to encode something.\n * @param {Object} [encodeOptions.params = true] - If you need to encode params.\n * @param {Object} [encodeOptions.query = true] - If you need to encode query params.\n * @returns {String} Constructed URL.\n * @description Function for constructing URL from the base URL, URL, params and query params.\n */\nexport default (baseURL, url, params, query, hash = '', encodeOptions = {}) => {\n  const {\n    params: encodeParams = true,\n    query: encodeQuery = true\n  } = encodeOptions;\n  let URL = isAbsolute(url)\n    ? url\n    : `${ String(baseURL).replace(/\\/+$/, '') }/${ String(url).replace(/^\\/+/, '') }`;\n\n  iterate(params, (value, param) => {\n    URL = new Str(URL).replaceString(`:${ param }`, encode(value, encodeParams)).$;\n  });\n\n  const queryParams = querySwitcher(query, ['']);\n\n  if (queryParams.length) {\n    URL += (URL.indexOf('?') === -1 ? '?' : '&') + queryParams\n      .map(({ param, value }) => `${ encode(param, encodeQuery) }=${ encode(value, encodeQuery) }`)\n      .join('&');\n  }\n\n  return `${ URL }${ hash ? `#${ hash }` : '' }`;\n};\n\n/**\n * @function isAbsolute\n * @param {String} url - URL to check if it is absolute or not.\n * @returns {Boolean} If the argument URL is absolute or not.\n */\nfunction isAbsolute(url) {\n  return absoluteURLRegexp.test(url);\n}\n\n/**\n * @function encode\n * @param {String} string - String to encode using encodeURIComponent.\n * @param {Boolean} isEncoded - If the string should be encoded.\n * @returns {String} Encoded string.\n */\nfunction encode(string, isEncoded) {\n  return isEncoded ? encodeURIComponent(string) : string;\n}\n","/**\n * @module Fetch\n * @private\n * @mixin\n * @description Exports Fetch class.\n */\n\nimport { Promise } from './Promise';\nimport { Super } from './Super';\nimport { Arr } from './Arr';\nimport { Str } from './Str';\nimport {\n  isArray, isFunction, isString,\n  assign, Symbol, validate, iterate, defineProperties\n} from './helpers';\nimport constructURL from './helpers/constructURL';\nimport parseHeaders from './helpers/parseHeaders';\nimport transformData from './helpers/transformData';\n\n/**\n * @typedef {'get'|'post'|'delete'|'head'|'put'|'patch'} FetchMethod\n * @public\n */\n\n/**\n * @typedef {Object} FetchConfig\n * @public\n * @property {Array.<AfterMiddleware|FetchErrorAfterMiddleware>} [after]\n * @property {Object} [auth]\n * @property {String} [auth.username]\n * @property {String} [auth.password]\n * @property {String} [baseURL]\n * @property {Array.<BeforeMiddleware|FetchErrorBeforeMiddleware>} [before]\n * @property {*} [data]\n * @property {Object.<String, String[]>} [headers]\n * @property {FetchMethod} [method]\n * @property {Object} [params]\n * @property {Object} [query]\n * @property {String} [responseType]\n * @property {Number} [timeout]\n * @property {String} [url]\n * @property {Boolean} [withCredentials]\n */\n\n/**\n * @typedef {Object} FetchResponse\n * @public\n * @property {FetchConfig} config\n * @property {*} data\n * @property {Object.<String, String>} headers\n * @property {Number} status\n * @property {String} statusText\n * @property {XMLHttpRequest} xhr\n */\n\n/**\n * @callback FetchAfterMiddleware\n * @public\n * @param {FetchResponse} config - Fetch response.\n */\n\n/**\n * @callback FetchErrorAfterMiddleware\n * @public\n * @param {Error|*} err - Thrown error.\n * @param {FetchResponse} config - Fetch response.\n */\n\n/**\n * @callback FetchBeforeMiddleware\n * @public\n * @param {FetchConfig} config - Fetch config.\n */\n\n/**\n * @callback FetchErrorBeforeMiddleware\n * @public\n * @param {Error|*} err - Thrown error.\n * @param {FetchConfig} config - Fetch config.\n */\n\n/**\n * @callback FetchConfigFunction\n * @public\n * @param {FetchConfig} config\n */\n\nconst defaults = {\n  after: [],\n  auth: {\n    username: '',\n    password: ''\n  },\n  baseURL: global.location.origin,\n  before: [],\n  data: null,\n  headers: {},\n  method: 'get',\n  params: {},\n  query: {},\n  responseType: '',\n  timeout: 0,\n  url: '',\n  withCredentials: false\n};\nconst uploadMethods = new Arr(['post', 'put']);\n\n/**\n * @class Fetch\n * @extends Function\n * @public\n * @param {FetchConfig} [config = {}] - A number to wrap.\n * @returns {Fetch} Instance of Fetch.\n * An instance of Fetch is a function that simply calls #request with the same arguments.\n * @description Class for fetching data.\n *\n * @example\n * const fetch = new Fetch();\n *\n * fetch('/data').then((res) => {\n *   console.log(res);\n * });\n */\nclass Fetch extends Function {\n  constructor(config = {}) {\n    super();\n\n    function fetch() {\n      return fetch.request.apply(fetch, arguments);\n    }\n\n    const conf = new Super({}).deepAssign(defaults, config).$;\n\n    if (conf.before.indexOf(fetchBeforeMiddleware) === -1) {\n      conf.before.push(fetchBeforeMiddleware);\n    }\n\n    /**\n     * @member {FetchConfig} Fetch#$$\n     * @type {FetchConfig}\n     * @public\n     * @description Fetch config.\n     */\n    Object.defineProperty(fetch, '$$', { value: conf });\n    Object.setPrototypeOf(fetch, Fetch.prototype);\n\n    return fetch;\n  }\n\n  /**\n   * @method Fetch#after\n   * @public\n   * @param {FetchAfterMiddleware|FetchErrorAfterMiddleware} middleware - Middleware to add.\n   * @param {Boolean|*} [afterAll = true] - Boolean parameter where to put the middleware.\n   * Truthy parameter stands for \"to the end\" and falsey for \"to the beginning\".\n   * @returns {Fetch} Returns this.\n   * @description Middleware that is called after the request.\n   * If the middleware has 2 or less arguments it's treated as success middleware otherwise as an error one.\n   * If the middleware returns a promise it becomes a part of the middleware chain.\n   *\n   * @example\n   * const fetch = new Fetch()\n   *   .after((err, res) => {\n   *     console.log(err);\n   *\n   *     throw err;\n   *   })\n   *   .after((res) => {\n   *     res.json = D(res.data).parseJSON():\n   *   });\n   */\n  after(middleware, afterAll = true) {\n    validate([middleware], ['function'], 'Fetch#after');\n\n    const { after } = this.$$;\n\n    if (afterAll) {\n      after.push(middleware);\n    } else {\n      after.unshift(middleware);\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Fetch#before\n   * @public\n   * @param {FetchBeforeMiddleware|FetchErrorBeforeMiddleware} middleware - Middleware to add.\n   * @param {Boolean|*} [beforeAll = true] - Boolean parameter where to put the middleware.\n   * Truthy parameter stands for \"to the beginning\" and falsey for \"to the end\".\n   * @returns {Fetch} Returns this.\n   * @description Middleware that is called before the request.\n   * If the middleware has 2 or less arguments it's treated as success middleware otherwise as an error one.\n   * If the middleware returns a promise it becomes a part of the middleware chain.\n   *\n   * @example\n   * const fetch = new Fetch()\n   *   .before((err, req) => {\n   *     console.log(err);\n   *\n   *     throw err;\n   *   })\n   *   .before((req) => {\n   *     if (req.url === '/veryLongRequest') {\n   *       req.timeout = 30000;\n   *     }\n   *   });\n   */\n  before(middleware, beforeAll = true) {\n    validate([middleware], ['function'], 'Fetch#before');\n\n    const { before } = this.$$;\n\n    if (beforeAll) {\n      before.unshift(middleware);\n    } else {\n      before.push(middleware);\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Fetch#config\n   * @public\n   * @param {String|FetchConfig|FetchConfigFunction} [property] - If it's a function\n   * it's called with the fetch config argument, if it's a string the value argument\n   * is used for assigning this property to the fetch config\n   * otherwise it's assigned to the fetch config.\n   * @param {*} [value] - See the property argument.\n   * @returns {Fetch|FetchConfig} If the argument is present this is returned otherwise the fetch config is returned.\n   * @description Method for getting and setting config.\n   *\n   * @example\n   * const fetch = new Fetch();\n   *\n   * fetch.config({ baseURL: 5000 });\n   * fetch.config().timeout; // 5000\n   *\n   * fetch.config((config) => {\n   *   config.baseURL += '/api';\n   * });\n   */\n  config(property, value) {\n    const conf = this.$$;\n\n    if (!arguments.length) {\n      return conf;\n    }\n\n    if (isFunction(property)) {\n      property(conf);\n    } else {\n      if (arguments.length >= 2) {\n        property = { [property]: value };\n      }\n\n      new Super(conf).deepAssign(property);\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Fetch#delete\n   * @public\n   * @param {String} [url] - See {@link Fetch#request}.\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\n   * @description Shorthand for #request for delete requests.\n   *\n   * @example\n   * new Fetch().delete('/data').then((res) => {\n   *   console.log(res);\n   * });\n   */\n  delete(url, config = {}) {\n    if (!isString(url)) {\n      config = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'delete' }, config));\n  }\n\n  /**\n   * @method Fetch#get\n   * @public\n   * @param {String} [url] - See {@link Fetch#request}.\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\n   * @description Shorthand for #request for get requests.\n   *\n   * @example\n   * new Fetch().get('/data').then((res) => {\n   *   console.log(res);\n   * });\n   */\n  get(url, config = {}) {\n    if (!isString(url)) {\n      config = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'get' }, config));\n  }\n\n  /**\n   * @method Fetch#head\n   * @public\n   * @param {String} [url] - See {@link Fetch#request}.\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\n   * @description Shorthand for #request for head requests.\n   *\n   * @example\n   * new Fetch().head('/data').then((res) => {\n   *   console.log(res);\n   * });\n   */\n  head(url, config = {}) {\n    if (!isString(url)) {\n      config = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'head' }, config));\n  }\n\n  /**\n   * @method Fetch#headers\n   * @public\n   * @param {String|Object.<String, String|String[]>} header - A header string or an object of the following format:\n   * { [header]: [value1, value2, ...] }.\n   * @param {String|String[]} [value] - Header value. If the first argument is a string\n   * this has to be a header value or an array of header values.\n   * @returns {Fetch} Returns this.\n   * @description Method for setting request headers.\n   *\n   * @example\n   * const fetch = new Fetch()\n   *   .headers('Header1', 'Value')\n   *   .headers('Header2', ['Value1', 'Value2'])\n   *   .headers({\n   *     Header3: ['Value1', 'Value2']\n   *   });\n   */\n  headers(header, value) {\n    const { headers } = this.$$;\n\n    if (arguments.length >= 2) {\n      header = { [header]: value };\n    }\n\n    iterate(header, (value, header) => {\n      const array = headers[header] || [];\n      const toPush = isArray(value) ? value : [value];\n\n      (headers[header] = array).push.apply(array, toPush);\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Fetch#instance\n   * @public\n   * @param {FetchConfig} [config] - New config if needed.\n   * @returns {Fetch} New instance of Fetch.\n   * @description Method for creating new fetch instances based on already existent.\n   *\n   * @example\n   * const mainFetch = new Fetch({\n   *   baseURL: '//other.domain.com/api',\n   *   withCredentials: true\n   * });\n   *\n   * const longFetch = mainFetch.instance({\n   *   timeout: 10000\n   * });\n   */\n  instance(config = {}) {\n    const dataConfig = new Super(config).hasOwn('data')\n      ? { data: config.data }\n      : {};\n\n    delete config.data;\n\n    const conf = new Super({})\n      .deepAssign(this.$$, config)\n      .assign(dataConfig)\n      .$;\n\n    return new Fetch(conf);\n  }\n\n  /**\n   * @method Fetch#patch\n   * @public\n   * @param {String} [url] - See {@link Fetch#request}.\n   * @param {*} [data] - Additional parameter for uploading data.\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\n   * @description Shorthand for #request for head requests.\n   *\n   * @example\n   * new Fetch().patch('/data', { user: 'John' }).then((res) => {\n   *   console.log(res);\n   * });\n   */\n  patch(url, data = {}, config = {}) {\n    if (arguments.length && !isString(url)) {\n      config = data;\n      data = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'patch', data }, config));\n  }\n\n  /**\n   * @method Fetch#post\n   * @public\n   * @param {String} [url] - See {@link Fetch#request}.\n   * @param {*} [data] - Additional parameter for uploading data.\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\n   * @description Shorthand for #request for head requests.\n   *\n   * @example\n   * new Fetch().post('/data', { user: 'John' }).then((res) => {\n   *   console.log(res);\n   * });\n   */\n  post(url, data = {}, config = {}) {\n    if (arguments.length && !isString(url)) {\n      config = data;\n      data = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'post', data }, config));\n  }\n\n  /**\n   * @method Fetch#put\n   * @public\n   * @param {String} [url] - See {@link Fetch#request}.\n   * @param {*} [data] - Additional parameter for uploading data.\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\n   * @description Shorthand for #request for head requests.\n   *\n   * @example\n   * new Fetch().put('/data', { user: 'John' }).then((res) => {\n   *   console.log(res);\n   * });\n   */\n  put(url, data = {}, config = {}) {\n    if (arguments.length && !isString(url)) {\n      config = data;\n      data = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'put', data }, config));\n  }\n\n  /**\n   * @method Fetch#request\n   * @public\n   * @param {String} [url] - URL for the request.\n   * @param {FetchConfig} [config] - Additional config for this particular request.\n   * @returns {Promise.<FetchResponse, Error>} Promise that is resolved with the request response.\n   * @description Main function for making requests. All request methods call this method\n   * including the fetch instance itself.\n   *\n   * @example\n   * const fetch = new Fetch();\n   *\n   * fetch.request('/data', { timeout: 1000 }).then((res) => {\n   *   console.log(res);\n   * });\n   *\n   * fetch.request({ timeout: 1000 }).then((res) => {\n   *   console.log(res);\n   * });\n   *\n   * fetch.request().then((res) => {\n   *   console.log(res);\n   * });\n   */\n  request(url, config = {}) {\n    if (arguments.length === 1 && !isString(url)) {\n      config = url;\n    }\n\n    const dataConfig = new Super(config).hasOwn('data')\n      ? { data: config.data }\n      : {};\n    const urlConfig = isString(url)\n      ? { url }\n      : {};\n\n    delete config.data;\n\n    const conf = new Super(this.$$)\n      .deepClone()\n      .deepAssign(urlConfig, config)\n      .assign(dataConfig)\n      .$;\n\n    let xhr;\n    let promise = Promise.resolve();\n\n    iterate(conf.before, (middleware) => {\n      promise = promise.then(() => {\n        if (middleware.length >= 2) {\n          return Promise.resolve();\n        }\n\n        return new Promise((resolve) => {\n          resolve(middleware(conf));\n        });\n      }, (err) => {\n        if (middleware.length < 2) {\n          return Promise.reject(err);\n        }\n\n        return new Promise((resolve) => {\n          resolve(middleware(err, conf));\n        });\n      });\n    });\n\n    promise = promise.then(() => new Promise((resolve, reject) => {\n      const {\n        after,\n        auth: {\n          username,\n          password\n        },\n        data,\n        headers,\n        method,\n        onprogress,\n        responseType,\n        timeout,\n        url,\n        withCredentials\n      } = conf;\n\n      xhr = new XMLHttpRequest();\n\n      xhr.open(method, url, true, username, password);\n\n      iterate(headers, (value, header) => {\n        xhr.setRequestHeader(header, value);\n      });\n\n      if (onprogress) {\n        if (uploadMethods.indexOfStrict(method) === -1) {\n          xhr.onprogress = onprogress;\n        } else {\n          xhr.upload.onprogress = onprogress;\n        }\n      }\n\n      xhr.onabort = () => {\n        const error = new Error('Request was aborted');\n\n        error.type = 'ABORT_ERROR';\n\n        reject(error);\n\n        xhr = null;\n      };\n\n      xhr.onerror = () => {\n        const error = new Error('Network error');\n\n        error.type = 'NETWORK_ERROR';\n\n        reject(error);\n\n        xhr = null;\n      };\n\n      xhr.ontimeout = () => {\n        const error = new Error('Request time exceeded');\n\n        error.type = 'TIMEOUT_ERROR';\n\n        reject(error);\n\n        xhr = null;\n      };\n\n      xhr.onreadystatechange = () => {\n        if (!xhr || !xhr.status || xhr.readyState !== 4) {\n          return;\n        }\n\n        const response = {\n          config: conf,\n          data: !responseType || responseType === 'text' ? xhr.responseText : xhr.response,\n          headers: parseHeaders(xhr.getAllResponseHeaders()),\n          status: xhr.status === 1223 ? 204 : xhr.status,\n          statusText: xhr.status === 1223 ? 'No Content' : xhr.statusText,\n          xhr\n        };\n\n        let promise = Promise.resolve();\n\n        iterate(after, (middleware) => {\n          promise = promise.then(() => {\n            if (middleware.length >= 2) {\n              return Promise.resolve();\n            }\n\n            return new Promise((resolve) => {\n              resolve(middleware(response));\n            });\n          }, (err) => {\n            if (middleware.length < 2) {\n              return Promise.reject(err);\n            }\n\n            return new Promise((resolve) => {\n              resolve(middleware(err, response));\n            });\n          });\n        });\n\n        resolve(promise\n          .then(() => response)\n          .catch((err) => {\n            try {\n              err.response = response;\n            } catch (e) {\n              throw err;\n            }\n\n            throw err;\n          })\n        );\n      };\n\n      xhr.responseType = responseType;\n      xhr.timeout = Number(timeout) || 0;\n      xhr.withCredentials = !!withCredentials;\n\n      xhr.send(data);\n    }));\n\n    promise.abort = function abort() {\n      if (xhr) {\n        xhr.abort();\n      }\n\n      return this;\n    };\n\n    return promise;\n  }\n}\n\ndefineProperties(Fetch.prototype, {\n  [Symbol.toStringTag]: 'Fetch'\n});\n\n/**\n * @function fetchBeforeMiddleware\n * @private\n * @param {FetchConfig} config\n * @description Built-in before middleware for url, data, method, headers construction.\n */\nfunction fetchBeforeMiddleware(config) {\n  const {\n    baseURL,\n    data,\n    headers,\n    method,\n    params,\n    query,\n    url\n  } = config;\n  const METHOD = method.toUpperCase();\n\n  config.method = METHOD;\n  config.url = constructURL(baseURL, url, params, query);\n  config.data = transformData(data, METHOD, headers);\n  config.headers = new Super(headers).object((headers, values, header) => {\n    header = new Str(header)\n      .toCapitalCase()\n      .replace(/\\s+/g, '-')\n      .$;\n\n    headers[header] = values.join(', ');\n  }).$;\n}\n\n/**\n * @const {Fetch} fetch\n * @type {Fetch}\n * @public\n * @description Empty instance of Fetch.\n */\nconst fetch = new Fetch();\n\nexport { Fetch, fetch };\n","/**\n * @module Router\n * @private\n * @mixin\n * @description Exports Router.\n */\n\nimport { Arr } from './Arr';\nimport { Elem, win } from './Elem';\nimport { self } from './Func';\nimport { Str } from './Str';\nimport { Super } from './Super';\nimport { switcher } from './Switcher';\nimport { assign, isNil, isRegExp, isString } from './helpers';\nimport constructURL from './helpers/constructURL';\nimport resolveURL from './helpers/resolveURL';\n\nconst Routes = new Arr([]);\nconst currentRoutes = new Arr([]);\nconst subscribers = {};\nconst {\n  history,\n  location,\n  location: {\n    href: initialURL\n  }\n} = global;\nlet initialized;\nlet pushed;\nlet wasRoot;\nlet wasDefault;\nlet rootRoute;\nlet redirectRoute;\nlet redirectRouteIsNeededToPush = false;\nlet RedirectRoute;\nlet defaultRoute;\nlet DefaultRoute;\nlet currentRoute;\nlet currentRouteParams;\n\nconst pathSwitcher = switcher('call', () => {\n  throw new Error('State path must be a string, a regular expression or undefined! (at registerState)');\n})\n  .case(isRegExp, (path) => ({\n    path: path.source.replace(/\\\\\\//g, '/'),\n    url: path,\n    params: {}\n  }))\n  .case(isNil, () => ({\n    path: '/',\n    url: '/',\n    params: {}\n  }))\n  .case(isString, (path) => {\n    if (path.indexOf('/')) {\n      throw new Error('If route path is a string it must start with \"/\"! (at registerState)');\n    }\n\n    const index = path.indexOf('?');\n    const params = new Super({});\n    let newURL = '';\n    const newPath = new Str(path)\n      .slice(0, index === -1 ? path.length : index)\n      .replace(/^\\/|\\/$/g)\n      .split(/\\//)\n      .map((part, i, array) => {\n        if (!part && array.length > 1) {\n          throw new Error('If route path is a string it must not contain \"//\" or end with \"/\"! (at makeRoute)');\n        }\n\n        const index = part.indexOf(':');\n\n        if (index > 0) {\n          throw new Error('If route path is a string resource part must be either a string or an URL parameter! (at makeRoute)');\n        }\n\n        if (index === -1) {\n          return {\n            url: part,\n            value: part\n          };\n        }\n\n        const {\n          name,\n          regexp = /[^/]*/\n        } = resolveParameter(\n          part.slice(1),\n          'URL parameter must not be an empty string or contain characters besides \"a-zA-Z_$\"! (at makeRoute)',\n          'URL parameter regexp validator must be within parentheses (e.g. :userId(\\\\d+) and not contain ones)! (at makeRoute)'\n        );\n\n        params.$[name] = params.count;\n\n        return {\n          type: 'param',\n          url: `:${ name }`,\n          value: regexp\n        };\n      })\n      .word(({ type, url, value }) => {\n        let newPath;\n\n        if (type === 'param') {\n          newPath = `(${ value.source.replace(/\\\\\\//g, '/') })`;\n        } else {\n          newPath = new Str(value).escapeRegExp().$;\n        }\n\n        newURL += `/${ url }`;\n\n        return `/${ newPath }`;\n      });\n\n    return {\n      path: newPath,\n      url: newURL,\n      params: params.$\n    };\n  });\n\nconst router = {\n  buildURL,\n  go,\n  goToURL,\n  pushURL,\n  redirect,\n  redirectToURL,\n  replaceURL\n};\n\nclass Route {\n  constructor(options) {\n    options = options || {};\n\n    const {\n      name,\n      path = '/',\n      abstract = false,\n      parent,\n      decodeQuery = true,\n      encodeQuery = true,\n      decodeParams = true,\n      encodeParams = true\n    } = options || {};\n    const {\n      url: relativeURL,\n      path: relativePath,\n      params\n    } = pathSwitcher(path);\n    const query = {};\n\n    new Super(this).assign({\n      name,\n      parentName: parent,\n      abstract: !!abstract,\n      children: new Arr([]),\n      decodeParams: !!decodeParams,\n      decodeQuery: !!decodeQuery,\n      encodeParams: !!encodeParams,\n      encodeQuery: !!encodeQuery,\n      params,\n      query,\n      relativePath,\n      relativeURL\n    });\n\n    const index = isString(path)\n      ? path.indexOf('?')\n      : -1;\n\n    if (index !== -1) {\n      new Str(path)\n        .replace(/&$/)\n        .slice(index + 1)\n        .split('&')\n        .forEach((param) => {\n          const {\n            name,\n            regexp = /[\\s\\S]*/\n          } = resolveParameter(\n            param,\n            'Query parameter must not be an empty string or contain characters besides \"a-zA-Z_$\"! (at makeRoute)',\n            'Query parameter regexp validator must be within parentheses (e.g. :userId(\\\\d+)) and not contain them! (at makeRoute)'\n          );\n\n          query[name] = new RegExp(`^${ regexp.source.replace(/\\\\\\//g, '/') }$`);\n        });\n    }\n\n    if (name === defaultRoute && (\n        new Super(params).count\n        || new Super(query).count\n      )) {\n      throw new Error('Default route must not have URL or query params! (at makeRoute)');\n    }\n  }\n}\n\nconst baseRoute = new Route();\n\nfunction initRouter() {\n  if (initialized) {\n    return;\n  }\n\n  initialized = true;\n  RedirectRoute = (Routes.find(({ name }) => name === redirectRoute) || {}).value;\n  DefaultRoute = (Routes.find(({ name }) => name === defaultRoute) || {}).value;\n\n  if (redirectRoute && !RedirectRoute) {\n    throw new Error(`There is no specified fallback route (\"${ redirectRoute }\")! (at initRouter)`);\n  }\n\n  Routes\n    .forEach((route) => {\n      const {\n        parentName,\n        name\n      } = route;\n      const ParentName = parentName || rootRoute;\n      const { value: parent } = Routes.find(({ name }) => name === ParentName) || {};\n\n      if (!parent) {\n        throw new Error(`No such parent route (\"${ ParentName }\") found for the route (\"${ name }\")! (at initRouter)`);\n      }\n\n      if (!parent.abstract && name !== rootRoute) {\n        throw new Error(`Parent route must be abstract (for \"${ name }\")! (at initRouter)`);\n      }\n\n      if (name !== rootRoute) {\n        route.parentName = ParentName;\n      }\n\n      route.parent = name === rootRoute\n        ? baseRoute\n        : parent;\n    })\n    .forEach((route) => {\n      const {\n        name,\n        parent: {\n          params: parentParams,\n          query: parentQuery,\n          path\n        },\n        params,\n        query,\n        relativeURL,\n        relativePath\n      } = route;\n      let proto = route;\n      let count = 0;\n      let newPath = relativePath;\n      let newURL = '';\n\n      if (isRegExp(path)) {\n        throw new Error('URL regexp route cannot be extended! (at initRouter)');\n      }\n\n      while (proto = proto.parent) {\n        count += new Super(proto.params).count;\n        newPath = proto.relativePath + newPath;\n        newURL = proto.relativeURL + newURL;\n\n        proto.children.push(route);\n      }\n\n      newPath = new RegExp(`^${ newPath.replace(/\\/+/g, '/').replace(/\\/$/, '') || '/' }$`);\n      newURL = isRegExp(relativeURL)\n        ? newPath\n        : (newURL + relativeURL).replace(/\\/+/g, '/').replace(/\\/$/, '') || '/';\n\n      new Super(query).proto(parentQuery);\n      new Super(params)\n        .proto(parentParams)\n        .forEach((value, key, params) => {\n          params[key] += count;\n        });\n\n      if (name === defaultRoute && (\n          new Super(params).count\n          || new Super(query).count\n        )) {\n        throw new Error('Default route must not have URL or query params! (at initRouter)');\n      }\n\n      route.url = newURL;\n      route.validatePath = newPath;\n    });\n\n  changeRoute();\n\n  win.on({\n    popstate() {\n      if (location.href !== initialURL) {\n        pushed = true;\n      }\n\n      if (pushed) {\n        changeRoute();\n      }\n    },\n    click(e) {\n      const closestLink = new Elem(e.target).closest('a');\n\n      if (closestLink.length && closestLink.attr('target') !== '_blank' && !closestLink.hasAttr('no-routing')) {\n        const push = !closestLink.hasAttr('replace');\n\n        e.preventDefault();\n\n        forward(closestLink.attr('href') || '', push);\n      }\n    }\n  });\n}\n\nfunction makeRoute(options) {\n  return (Block) => {\n    options = assign({}, options, Block.routerOptions);\n\n    const {\n      name,\n      path,\n      abstract,\n      root,\n      fallbackTo,\n      replace = true,\n      default: isDefault\n    } = options || {};\n\n    if (initialized) {\n      console.warn('Router was already initialized (at makeRoute)');\n\n      return self;\n    }\n\n    if (wasRoot && root) {\n      throw new Error(`There can't be two root routes (\"${ rootRoute }\" and \"${ name }\")! (at makeRoute)`);\n    }\n\n    if (wasDefault && isDefault) {\n      throw new Error(`There can't be two default routes (\"${ defaultRoute }\" and \"${ name }\")! (at makeRoute)`);\n    }\n\n    if (!name) {\n      throw new Error('State must have a non-empty string \"name\" property! (at makeRoute)');\n    }\n\n    if (Routes.some(({ name: Name }) => Name === name)) {\n      throw new Error('State must have unique \"name\" property! (at makeRoute)');\n    }\n\n    if (root) {\n      wasRoot = true;\n      rootRoute = name;\n      options.parent = null;\n\n      if (fallbackTo) {\n        redirectRoute = fallbackTo;\n        redirectRouteIsNeededToPush = !replace;\n      }\n    }\n\n    if (isDefault) {\n      wasDefault = true;\n      defaultRoute = name;\n\n      if (abstract) {\n        throw new Error('Default route can\\'t be abstract! (at makeRoute)');\n      }\n\n      if (isRegExp(path)) {\n        throw new Error('Default route can\\'t have a regexp path! (at makeRoute)');\n      }\n    }\n\n    const route = new Route(options);\n\n    Routes.push(route);\n\n    let unsubscribe;\n    let routeLoaded;\n\n    return class extends Block {\n      /* eslint prefer-template: 0 */\n      static template = '<d-if if=\"{__wasRouteActive__}\">'\n        + '<div'\n        + `  class=\"dwayne-route route-${ name + (abstract ? ' abstract-route' : '') }\"`\n        + '  d-class=\"{{ \\'active-route\\': __isCurrentRoute__ }}\"'\n        + '  d-show=\"{__isCurrentRoute__}\"'\n        + '>'\n        + Block.template\n        + '</div>'\n        + '</d-if>';\n\n      constructor(opts) {\n        super(opts);\n\n        if (root) {\n          initRouter();\n\n          this.globals.router = router;\n        }\n\n        this.__routerInstance__ = route;\n        this.__isCurrentRoute__ = currentRoutes.includes(route);\n        this.__wasRouteActive__ = this.__isCurrentRoute__;\n        this.args.route = currentRouteParams;\n\n        routeLoaded = false;\n        unsubscribe = subscribe(name, (action) => {\n          const isCurrentRoute = action !== 'leave';\n\n          this.__isCurrentRoute__ = isCurrentRoute;\n\n          if (isCurrentRoute) {\n            this.__wasRouteActive__ = true;\n            this.args.route = currentRouteParams;\n          }\n\n          if (action === 'load') {\n            callBeforeLoad(this);\n          } else if (action === 'leave') {\n            callBeforeLeave(this);\n          }\n        });\n\n        if (this.__isCurrentRoute__) {\n          callBeforeLoad(this);\n        }\n      }\n\n      beforeRemove() {\n        unsubscribe();\n        unsubscribe = null;\n        callBeforeLeave(this);\n        super.beforeRemove();\n      }\n    };\n\n    function callBeforeLoad(route) {\n      if (routeLoaded) {\n        return;\n      }\n\n      const block = {\n        $$: {\n          children: new Arr([route])\n        }\n      };\n      let wasRoute;\n\n      block.$$.children.forEach(function beforeLoad(block) {\n        if (block.__routerInstance__) {\n          if (wasRoute) {\n            return;\n          }\n\n          wasRoute = true;\n        }\n\n        const {\n          name,\n          children,\n          mixins\n        } = block.$$;\n\n        if (children) {\n          children.forEach(beforeLoad);\n        }\n\n        if (mixins) {\n          mixins.forEach(beforeLoad);\n        }\n\n        if (block.beforeLoadRoute) {\n          try {\n            block.beforeLoadRoute();\n          } catch (err) {\n            console.error(`Uncaught error in ${ name }#beforeLoad:`, err);\n          }\n        }\n      });\n\n      routeLoaded = true;\n    }\n\n    function callBeforeLeave(route) {\n      if (!routeLoaded) {\n        return;\n      }\n\n      const block = {\n        $$: {\n          children: new Arr([route])\n        }\n      };\n      let wasRoute;\n\n      block.$$.children.forEach(function beforeLeave(block) {\n        if (block.__routerInstance__) {\n          if (wasRoute) {\n            return;\n          }\n\n          wasRoute = true;\n        }\n\n        const {\n          name,\n          children,\n          mixins\n        } = block.$$;\n\n        if (children) {\n          children.forEach(beforeLeave);\n        }\n\n        if (mixins) {\n          mixins.forEach(beforeLeave);\n        }\n\n        if (block.beforeLeaveRoute) {\n          try {\n            block.beforeLeaveRoute();\n          } catch (err) {\n            console.error(`Uncaught error in ${ name }#beforeLeave:`, err);\n          }\n        }\n      });\n\n      routeLoaded = false;\n    }\n  };\n}\n\nfunction subscribe(name, callback) {\n  subscribers[name] = callback;\n\n  return () => {\n    delete subscribers[name];\n  };\n}\n\nfunction forward(url, push) {\n  changeHistory(url, push);\n  changeRoute();\n}\n\nfunction changeRoute() {\n  const route = findRouteByURL();\n\n  if (route) {\n    ({\n      route: currentRoute,\n      ...currentRouteParams\n    } = route);\n    assign(currentRouteParams, {\n      name: currentRoute.name,\n      host: location.host,\n      hostname: location.hostname,\n      href: location.href,\n      origin: location.origin,\n      pathname: location.pathname,\n      port: location.port,\n      protocol: location.protocol,\n      search: location.search\n    });\n  } else {\n    if (redirectRoute) {\n      const {\n        url,\n        encodeParams,\n        encodeQuery\n      } = RedirectRoute;\n\n      return forward(constructURL('', url, {}, {}, '', {\n        params: encodeParams,\n        query: encodeQuery\n      }), redirectRouteIsNeededToPush);\n    }\n\n    currentRoute = null;\n    currentRouteParams = null;\n  }\n\n  const routesToLeave = new Arr([]);\n  const routesToLoad = new Arr([]);\n  let parent;\n\n  while (currentRoutes.length && !parent) {\n    const route = currentRoutes.pop();\n\n    if (route.children.includes(currentRoute)) {\n      currentRoutes.push(route);\n      parent = route;\n    } else {\n      routesToLeave.push(route);\n    }\n  }\n\n  if (currentRoute) {\n    let currentParent = currentRoute;\n\n    while (currentParent !== parent && currentParent !== baseRoute) {\n      routesToLoad.unshift(currentParent);\n      currentParent = currentParent.parent;\n    }\n\n    currentRoutes.push(...routesToLoad.$);\n  }\n\n  routesToLeave.forEach(({ name }) => {\n    if (subscribers[name]) {\n      subscribers[name]('leave');\n    }\n  });\n  currentRoutes.forEach((route) => {\n    const { name } = route;\n\n    if (subscribers[name]) {\n      subscribers[name](\n        routesToLoad.includes(route)\n          ? 'load'\n          : 'update'\n      );\n    }\n  });\n}\n\nfunction findRouteByURL() {\n  const pathname = location.pathname || '/';\n  const search = location.search || '';\n  let urlParams;\n\n  Routes.some((route) => {\n    if (route.abstract) {\n      return;\n    }\n\n    const {\n      url: routeURL,\n      validatePath,\n      params,\n      query: requiredQuery,\n      decodeParams,\n      decodeQuery\n    } = route;\n    const resolved = resolveURL(decodeQuery);\n    const query = new Super(resolved.query);\n    const eventualParams = {};\n    const match = (\n      (pathname.replace(/\\/$/, '') || '/') +\n      (isRegExp(routeURL) ? search : '')\n    ).match(validatePath);\n\n    if (!match) {\n      return;\n    }\n\n    /* eslint guard-for-in: 0 */\n    for (const param in requiredQuery) {\n      if (!query.hasOwn(param) || !requiredQuery[param].test(query.$[param])) {\n        return;\n      }\n    }\n\n    match.shift();\n\n    for (const param in params) {\n      eventualParams[param] = decode(match[params[param]], decodeParams);\n    }\n\n    urlParams = {\n      route,\n      params: eventualParams,\n      query: query.$,\n      hash: resolved.hash\n    };\n\n    return true;\n  });\n\n  if (urlParams) {\n    return urlParams;\n  }\n\n  if (!defaultRoute) {\n    return;\n  }\n\n  return {\n    route: DefaultRoute,\n    params: {},\n    ...resolveURL(DefaultRoute.decodeQuery)\n  };\n}\n\nfunction decode(string, decodeParams) {\n  return decodeParams\n    ? decodeURIComponent(string)\n    : string;\n}\n\nfunction changeHistory(url, push) {\n  try {\n    history[push ? 'pushState' : 'replaceState'](null, null, url);\n    pushed = true;\n  } catch (err) {\n    location.href = url;\n  }\n}\n\nfunction resolveParameter(param, nameErrorName, valueErrorName) {\n  const nameMatch = param.match(/^[a-z_$]+/i);\n\n  if (!nameMatch) {\n    throw new Error(nameErrorName);\n  }\n\n  const name = nameMatch[0];\n  const value = param.slice(name.length);\n  let regexp;\n\n  if (value && (value.indexOf('(') || value.indexOf(')') !== value.length - 1)) {\n    throw new Error(valueErrorName);\n  }\n\n  if (value) {\n    regexp = new RegExp(value.slice(1, -1));\n  }\n\n  return {\n    name,\n    regexp\n  };\n}\n\nfunction buildURL(name, options = {}) {\n  const { value: route } = Routes.find(({ name: n }) => n === name) || {};\n\n  if (!route) {\n    throw new Error(`There are no routes with name \"${ name }\"! (at router.buildURL)`);\n  }\n\n  const {\n    url,\n    encodeParams,\n    encodeQuery\n  } = route;\n\n  if (isRegExp(url)) {\n    throw new Error('URL can be built only from the string URLs! (at router.buildURL)');\n  }\n\n  const {\n    params = {},\n    query = {},\n    hash = ''\n  } = options;\n\n  return constructURL('', url, params, query, hash, {\n    params: encodeParams,\n    query: encodeQuery\n  });\n}\n\nfunction go(name, options) {\n  forward(buildURL(name, options), true);\n}\n\nfunction goToURL(url) {\n  forward(url, true);\n}\n\nfunction pushURL(url) {\n  changeHistory(url, true);\n}\n\nfunction redirect(name, options) {\n  forward(buildURL(name, options));\n}\n\nfunction redirectToURL(url) {\n  forward(url);\n}\n\nfunction replaceURL(url) {\n  changeHistory(url);\n}\n\nexport { makeRoute, router };\n","/* eslint no-nested-ternary: 0 */\n/* eslint no-negated-condition: 0 */\nexport default typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n","/**\n * @module constants/appliedRegExps\n * @private\n * @description Exports different types of syntax for {@link Elem#apply}.\n */\n\n/**\n * @callback matchAppliedExprCallback\n * @param {Elem} elem - D-elem of an element to apply expression to.\n * @param {String} string - Matched applied name.\n * @param {String} arg - Argument within the parentheses.\n */\n\n/**\n * @type {Object.<String, matchAppliedExprCallback|Object.<String, matchAppliedExprCallback>>}\n * @description Object of different types of syntax.\n */\n\nexport const appliedRegExps = {\n  '#'(elem, id) {\n    elem.id(id);\n  },\n  '.'(elem, cls) {\n    elem.addClass(cls);\n  },\n  $(elem, attr, value) {\n    elem.attr(attr, value);\n  },\n  '@'(elem, prop, value) {\n    elem.css(prop, value);\n  },\n  '&'(elem, name, html) {\n    elem.html(html);\n  },\n  '*'(elem, name, text) {\n    elem.text(text);\n  },\n  '-': {\n    '.'(elem, cls) {\n      elem.removeClass(cls);\n    },\n    $(elem, attr) {\n      elem.removeAttr(attr);\n    },\n    '@'(elem, prop) {\n      elem.removeCSS(prop);\n    }\n  }\n};\n","/**\n * @module constants/elements\n * @private\n * @description Exports different canvas methods for {@link Elem} for creating html-elements.\n */\n\n/**\n * @const\n * @type {String[]}\n */\nexport const canvasGetMethods = [\n  /**\n   * @member {Function} Elem#createImageData\n   * @type {Function}\n   * @param {...*} args\n   * @returns {ImageData|void}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/createImageData\n   */\n  'createImageData',\n\n  /**\n   * @member {Function} Elem#createLinearGradient\n   * @type {Function}\n   * @param {...*} args\n   * @returns {CanvasGradient|void}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/createLinearGradient\n   */\n  'createLinearGradient',\n\n  /**\n   * @member {Function} Elem#createPattern\n   * @type {Function}\n   * @param {...*} args\n   * @returns {CanvasPattern|void}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/createPattern\n   */\n  'createPattern',\n\n  /**\n   * @member {Function} Elem#createRadialGradient\n   * @type {Function}\n   * @param {...*} args\n   * @returns {CanvasGradient|void}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/createRadialGradient\n   */\n  'createRadialGradient',\n\n  /**\n   * @member {Function} Elem#getImageData\n   * @type {Function}\n   * @param {...*} args\n   * @returns {ImageData|void}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/getImageData\n   */\n  'getImageData',\n\n  /**\n   * @member {Function} Elem#getLineDash\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Number[]|void}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/getLineDash\n   */\n  'getLineDash',\n\n  /**\n   * @member {Function} Elem#isPointInPath\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Boolean|void}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/isPointInPath\n   */\n  'isPointInPath',\n\n  /**\n   * @member {Function} Elem#isPointInStroke\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Boolean|void}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/isPointInStroke\n   */\n  'isPointInStroke',\n\n  /**\n   * @member {Function} Elem#measureText\n   * @type {Function}\n   * @param {...*} args\n   * @returns {TextMetrics|void}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/measureText\n   */\n  'measureText'\n];\n\nexport const canvasRestMethods = [\n  /**\n   * @member {Function} Elem#arc\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/arc\n   */\n  'arc',\n\n  /**\n   * @member {Function} Elem#arcTo\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/arcTo\n   */\n  'arcTo',\n\n  /**\n   * @member {Function} Elem#beginPath\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/beginPath\n   */\n  'beginPath',\n\n  /**\n   * @member {Function} Elem#bezierCurveTo\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo\n   */\n  'bezierCurveTo',\n\n  /**\n   * @member {Function} Elem#clearRect\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/clearRect\n   */\n  'clearRect',\n\n  /**\n   * @member {Function} Elem#clip\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/clip\n   */\n  'clip',\n\n  /**\n   * @member {Function} Elem#closePath\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/closePath\n   */\n  'closePath',\n\n  /**\n   * @member {Function} Elem#drawFocusIfNeeded\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/drawFocusIfNeeded\n   */\n  'drawFocusIfNeeded',\n\n  /**\n   * @member {Function} Elem#drawImage\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/drawImage\n   */\n  'drawImage',\n\n  /**\n   * @member {Function} Elem#ellipse\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/ellipse\n   */\n  'ellipse',\n\n  /**\n   * @member {Function} Elem#fill\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/fill\n   */\n  'fill',\n\n  /**\n   * @member {Function} Elem#fillRect\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/fillRect\n   */\n  'fillRect',\n\n  /**\n   * @member {Function} Elem#fillText\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/fillText\n   */\n  'fillText',\n\n  /**\n   * @member {Function} Elem#lineTo\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/lineTo\n   */\n  'lineTo',\n\n  /**\n   * @member {Function} Elem#moveTo\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/moveTo\n   */\n  'moveTo',\n\n  /**\n   * @member {Function} Elem#putImageData\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/putImageData\n   */\n  'putImageData',\n\n  /**\n   * @member {Function} Elem#quadraticCurveTo\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo\n   */\n  'quadraticCurveTo',\n\n  /**\n   * @member {Function} Elem#rect\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/rect\n   */\n  'rect',\n\n  /**\n   * @member {Function} Elem#resetTransform\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/resetTransform\n   */\n  'resetTransform',\n\n  /**\n   * @member {Function} Elem#restore\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/restore\n   */\n  'restore',\n\n  /**\n   * @member {Function} Elem#rotate\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/rotate\n   */\n  'rotate',\n\n  /**\n   * @member {Function} Elem#save\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/save\n   */\n  'save',\n\n  /**\n   * @member {Function} Elem#scale\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/scale\n   */\n  'scale',\n\n  /**\n   * @member {Function} Elem#setLineDash\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/setLineDash\n   */\n  'setLineDash',\n\n  /**\n   * @member {Function} Elem#setTransform\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/setTransform\n   */\n  'setTransform',\n\n  /**\n   * @member {Function} Elem#stroke\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/stroke\n   */\n  'stroke',\n\n  /**\n   * @member {Function} Elem#strokeRect\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/strokeRect\n   */\n  'strokeRect',\n\n  /**\n   * @member {Function} Elem#strokeText\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/strokeText\n   */\n  'strokeText',\n\n  /**\n   * @member {Function} Elem#transform\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/transform\n   */\n  'transform',\n\n  /**\n   * @member {Function} Elem#translate\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/translate\n   */\n  'translate'\n];\n","/**\n * @module constants/constructors\n * @private\n * @description Exports constructors levels.\n */\n\n/**\n * @const\n * @type {Array[]}\n */\nexport const constructors = [\n  [],\n  [],\n  []\n];\n","/**\n * @module constants/elements\n * @private\n * @description Exports methods for {@link Elem} for creating html-elements.\n */\n\n/**\n * @const\n * @type {String[]}\n */\nexport const htmlElements = [\n  /**\n   * @member {Function} Elem#a\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'a',\n\n  /**\n   * @member {Function} Elem#abbr\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'abbr',\n\n  /**\n   * @member {Function} Elem#address\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'address',\n\n  /**\n   * @member {Function} Elem#area\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'area',\n\n  /**\n   * @member {Function} Elem#article\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'article',\n\n  /**\n   * @member {Function} Elem#audio\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'audio',\n\n  /**\n   * @member {Function} Elem#b\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'b',\n\n  /**\n   * @member {Function} Elem#base\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'base',\n\n  /**\n   * @member {Function} Elem#bdi\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'bdi',\n\n  /**\n   * @member {Function} Elem#bdo\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'bdo',\n\n  /**\n   * @member {Function} Elem#blockquote\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'blockquote',\n\n  /**\n   * @member {Function} Elem#body\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'body',\n\n  /**\n   * @member {Function} Elem#br\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'br',\n\n  /**\n   * @member {Function} Elem#button\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'button',\n\n  /**\n   * @member {Function} Elem#canvas\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'canvas',\n\n  /**\n   * @member {Function} Elem#caption\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'caption',\n\n  /**\n   * @member {Function} Elem#cite\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'cite',\n\n  /**\n   * @member {Function} Elem#code\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'code',\n\n  /**\n   * @member {Function} Elem#col\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'col',\n\n  /**\n   * @member {Function} Elem#colgroup\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'colgroup',\n\n  /**\n   * @member {Function} Elem#content\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'content',\n\n  /**\n   * @member {Function} Elem#datalist\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'datalist',\n\n  /**\n   * @member {Function} Elem#dd\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'dd',\n\n  /**\n   * @member {Function} Elem#del\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'del',\n\n  /**\n   * @member {Function} Elem#details\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'details',\n\n  /**\n   * @member {Function} Elem#dfn\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'dfn',\n\n  /**\n   * @member {Function} Elem#dialog\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'dialog',\n\n  /**\n   * @member {Function} Elem#div\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'div',\n\n  /**\n   * @member {Function} Elem#dl\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'dl',\n\n  /**\n   * @member {Function} Elem#dt\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'dt',\n\n  /**\n   * @member {Function} Elem#element\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'element',\n\n  /**\n   * @member {Function} Elem#em\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'em',\n\n  /**\n   * @member {Function} Elem#embed\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'embed',\n\n  /**\n   * @member {Function} Elem#fieldset\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'fieldset',\n\n  /**\n   * @member {Function} Elem#figcaption\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'figcaption',\n\n  /**\n   * @member {Function} Elem#figure\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'figure',\n\n  /**\n   * @member {Function} Elem#footer\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'footer',\n\n  /**\n   * @member {Function} Elem#form\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'form',\n\n  /**\n   * @member {Function} Elem#h1\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'h1',\n\n  /**\n   * @member {Function} Elem#h2\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'h2',\n\n  /**\n   * @member {Function} Elem#h3\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'h3',\n\n  /**\n   * @member {Function} Elem#h4\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'h4',\n\n  /**\n   * @member {Function} Elem#h5\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'h5',\n\n  /**\n   * @member {Function} Elem#h6\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'h6',\n\n  /**\n   * @member {Function} Elem#head\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'head',\n\n  /**\n   * @member {Function} Elem#header\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'header',\n\n  /**\n   * @member {Function} Elem#hgroup\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'hgroup',\n\n  /**\n   * @member {Function} Elem#hr\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'hr',\n\n  /**\n   * @member {Function} Elem#i\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'i',\n\n  /**\n   * @member {Function} Elem#iframe\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'iframe',\n\n  /**\n   * @member {Function} Elem#img\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'img',\n\n  /**\n   * @member {Function} Elem#input\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'input',\n\n  /**\n   * @member {Function} Elem#ins\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'ins',\n\n  /**\n   * @member {Function} Elem#kbd\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'kbd',\n\n  /**\n   * @member {Function} Elem#label\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'label',\n\n  /**\n   * @member {Function} Elem#legend\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'legend',\n\n  /**\n   * @member {Function} Elem#li\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'li',\n\n  /**\n   * @member {Function} Elem#link\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'link',\n\n  /**\n   * @member {Function} Elem#main\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'main',\n\n  /**\n   * @member {Function} Elem#mark\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'mark',\n\n  /**\n   * @member {Function} Elem#menu\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'menu',\n\n  /**\n   * @member {Function} Elem#menuitem\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'menuitem',\n\n  /**\n   * @member {Function} Elem#meta\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'meta',\n\n  /**\n   * @member {Function} Elem#meter\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'meter',\n\n  /**\n   * @member {Function} Elem#nav\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'nav',\n\n  /**\n   * @member {Function} Elem#noscript\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'noscript',\n\n  /**\n   * @member {Function} Elem#ol\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'ol',\n\n  /**\n   * @member {Function} Elem#optgroup\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'optgroup',\n\n  /**\n   * @member {Function} Elem#option\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'option',\n\n  /**\n   * @member {Function} Elem#output\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'output',\n\n  /**\n   * @member {Function} Elem#p\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'p',\n\n  /**\n   * @member {Function} Elem#param\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'param',\n\n  /**\n   * @member {Function} Elem#pre\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'pre',\n\n  /**\n   * @member {Function} Elem#progress\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'progress',\n\n  /**\n   * @member {Function} Elem#q\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'q',\n\n  /**\n   * @member {Function} Elem#rp\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'rp',\n\n  /**\n   * @member {Function} Elem#rt\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'rt',\n\n  /**\n   * @member {Function} Elem#rtc\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'rtc',\n\n  /**\n   * @member {Function} Elem#ruby\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'ruby',\n\n  /**\n   * @member {Function} Elem#s\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  's',\n\n  /**\n   * @member {Function} Elem#samp\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'samp',\n\n  /**\n   * @member {Function} Elem#script\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'script',\n\n  /**\n   * @member {Function} Elem#section\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'section',\n\n  /**\n   * @member {Function} Elem#select\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'select',\n\n  /**\n   * @member {Function} Elem#shadow\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'shadow',\n\n  /**\n   * @member {Function} Elem#small\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'small',\n\n  /**\n   * @member {Function} Elem#source\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'source',\n\n  /**\n   * @member {Function} Elem#span\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'span',\n\n  /**\n   * @member {Function} Elem#strong\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'strong',\n\n  /**\n   * @member {Function} Elem#style\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'style',\n\n  /**\n   * @member {Function} Elem#sub\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'sub',\n\n  /**\n   * @member {Function} Elem#summary\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'summary',\n\n  /**\n   * @member {Function} Elem#sup\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'sup',\n\n  /**\n   * @member {Function} Elem#table\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'table',\n\n  /**\n   * @member {Function} Elem#tbody\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'tbody',\n\n  /**\n   * @member {Function} Elem#td\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'td',\n\n  /**\n   * @member {Function} Elem#template\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'template',\n\n  /**\n   * @member {Function} Elem#textarea\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'textarea',\n\n  /**\n   * @member {Function} Elem#tfoot\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'tfoot',\n\n  /**\n   * @member {Function} Elem#th\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'th',\n\n  /**\n   * @member {Function} Elem#thead\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'thead',\n\n  /**\n   * @member {Function} Elem#time\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'time',\n\n  /**\n   * @member {Function} Elem#title\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'title',\n\n  /**\n   * @member {Function} Elem#tr\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'tr',\n\n  /**\n   * @member {Function} Elem#track\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'track',\n\n  /**\n   * @member {Function} Elem#u\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'u',\n\n  /**\n   * @member {Function} Elem#ul\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'ul',\n\n  /**\n   * @member {Function} Elem#var\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'var',\n\n  /**\n   * @member {Function} Elem#video\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'video',\n\n  /**\n   * @member {Function} Elem#wbr\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'wbr'\n];\n\nexport const svgElements = [\n  /**\n   * @member {Function} Elem#altGlyph\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'altGlyph',\n\n  /**\n   * @member {Function} Elem#altGlyphDef\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'altGlyphDef',\n\n  /**\n   * @member {Function} Elem#altGlyphItem\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'altGlyphItem',\n\n  /**\n   * @member {Function} Elem#animate\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'animate',\n\n  /**\n   * @member {Function} Elem#animateColor\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'animateColor',\n\n  /**\n   * @member {Function} Elem#animateMotion\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'animateMotion',\n\n  /**\n   * @member {Function} Elem#animateTransform\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'animateTransform',\n\n  /**\n   * @member {Function} Elem#circle\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'circle',\n\n  /**\n   * @member {Function} Elem#clipPath\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'clipPath',\n\n  /**\n   * @member {Function} Elem#colorProfile\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'color-profile',\n\n  /**\n   * @member {Function} Elem#cursor\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'cursor',\n\n  /**\n   * @member {Function} Elem#defs\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'defs',\n\n  /**\n   * @member {Function} Elem#desc\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'desc',\n\n  /**\n   * @member {Function} Elem#discard\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'discard',\n\n  /**\n   * @member {Function} Elem#ellipse\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'ellipse',\n\n  /**\n   * @member {Function} Elem#feBlend\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feBlend',\n\n  /**\n   * @member {Function} Elem#feColorMatrix\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feColorMatrix',\n\n  /**\n   * @member {Function} Elem#feComponentTransfer\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feComponentTransfer',\n\n  /**\n   * @member {Function} Elem#feComposite\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feComposite',\n\n  /**\n   * @member {Function} Elem#feConvolveMatrix\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feConvolveMatrix',\n\n  /**\n   * @member {Function} Elem#feDiffuseLighting\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feDiffuseLighting',\n\n  /**\n   * @member {Function} Elem#feDisplacementMap\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feDisplacementMap',\n\n  /**\n   * @member {Function} Elem#feDistantLight\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feDistantLight',\n\n  /**\n   * @member {Function} Elem#feDropShadow\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feDropShadow',\n\n  /**\n   * @member {Function} Elem#feFlood\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feFlood',\n\n  /**\n   * @member {Function} Elem#feFuncA\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feFuncA',\n\n  /**\n   * @member {Function} Elem#feFuncB\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feFuncB',\n\n  /**\n   * @member {Function} Elem#feFuncG\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feFuncG',\n\n  /**\n   * @member {Function} Elem#feFuncR\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feFuncR',\n\n  /**\n   * @member {Function} Elem#feGaussianBlur\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feGaussianBlur',\n\n  /**\n   * @member {Function} Elem#feImage\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feImage',\n\n  /**\n   * @member {Function} Elem#feMerge\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feMerge',\n\n  /**\n   * @member {Function} Elem#feMergeNode\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feMergeNode',\n\n  /**\n   * @member {Function} Elem#feMorphology\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feMorphology',\n\n  /**\n   * @member {Function} Elem#feOffset\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feOffset',\n\n  /**\n   * @member {Function} Elem#fePointLight\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'fePointLight',\n\n  /**\n   * @member {Function} Elem#feSpecularLighting\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feSpecularLighting',\n\n  /**\n   * @member {Function} Elem#feSpotLight\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feSpotLight',\n\n  /**\n   * @member {Function} Elem#feTile\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feTile',\n\n  /**\n   * @member {Function} Elem#feTurbulence\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feTurbulence',\n\n  /**\n   * @member {Function} Elem#font\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'font',\n\n  /**\n   * @member {Function} Elem#fontFace\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'font-face',\n\n  /**\n   * @member {Function} Elem#fontFaceFormat\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'font-face-format',\n\n  /**\n   * @member {Function} Elem#fontFaceName\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'font-face-name',\n\n  /**\n   * @member {Function} Elem#fontFaceSrc\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'font-face-src',\n\n  /**\n   * @member {Function} Elem#fontFaceUri\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'font-face-uri',\n\n  /**\n   * @member {Function} Elem#foreignObject\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'foreignObject',\n\n  /**\n   * @member {Function} Elem#g\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'g',\n\n  /**\n   * @member {Function} Elem#glyph\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'glyph',\n\n  /**\n   * @member {Function} Elem#glyphRef\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'glyphRef',\n\n  /**\n   * @member {Function} Elem#hatch\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'hatch',\n\n  /**\n   * @member {Function} Elem#hatchpath\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'hatchpath',\n\n  /**\n   * @member {Function} Elem#hkern\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'hkern',\n\n  /**\n   * @member {Function} Elem#image\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'image',\n\n  /**\n   * @member {Function} Elem#line\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'line',\n\n  /**\n   * @member {Function} Elem#linearGradient\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'linearGradient',\n\n  /**\n   * @member {Function} Elem#marker\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'marker',\n\n  /**\n   * @member {Function} Elem#mask\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'mask',\n\n  /**\n   * @member {Function} Elem#mesh\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'mesh',\n\n  /**\n   * @member {Function} Elem#meshgradient\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'meshgradient',\n\n  /**\n   * @member {Function} Elem#meshpatch\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'meshpatch',\n\n  /**\n   * @member {Function} Elem#meshrow\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'meshrow',\n\n  /**\n   * @member {Function} Elem#metadata\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'metadata',\n\n  /**\n   * @member {Function} Elem#missingGlyph\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'missing-glyph',\n\n  /**\n   * @member {Function} Elem#mpath\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'mpath',\n\n  /**\n   * @member {Function} Elem#path\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'path',\n\n  /**\n   * @member {Function} Elem#pattern\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'pattern',\n\n  /**\n   * @member {Function} Elem#polygon\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'polygon',\n\n  /**\n   * @member {Function} Elem#polyline\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'polyline',\n\n  /**\n   * @member {Function} Elem#radialGradient\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'radialGradient',\n\n  /**\n   * @member {Function} Elem#rect\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'rect',\n\n  /**\n   * @member {Function} Elem#set\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'set',\n\n  /**\n   * @member {Function} Elem#solidcolor\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'solidcolor',\n\n  /**\n   * @member {Function} Elem#stop\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'stop',\n\n  /**\n   * @member {Function} Elem#style\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'style',\n\n  /**\n   * @member {Function} Elem#svg\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'svg',\n\n  /**\n   * @member {Function} Elem#switch\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'switch',\n\n  /**\n   * @member {Function} Elem#symbol\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'symbol',\n\n  /**\n   * @member {Function} Elem#textPath\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'textPath',\n\n  /**\n   * @member {Function} Elem#tref\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'tref',\n\n  /**\n   * @member {Function} Elem#tspan\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'tspan',\n\n  /**\n   * @member {Function} Elem#unknown\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'unknown',\n\n  /**\n   * @member {Function} Elem#use\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'use',\n\n  /**\n   * @member {Function} Elem#view\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'view',\n\n  /**\n   * @member {Function} Elem#vkern\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'vkern'\n];\n\nexport const voidElements = [\n  'area',\n  'base',\n  'br',\n  'col',\n  'command',\n  'embed',\n  'hr',\n  'img',\n  'input',\n  'keygen',\n  'link',\n  'meta',\n  'param',\n  'source',\n  'track',\n  'wbr',\n\n  'path',\n  'circle',\n  'ellipse',\n  'line',\n  'rect',\n  'use',\n  'stop',\n  'polyline',\n  'polygon'\n];\n","export const htmlAllowedTagSymbols = '[a-z][a-z\\\\d\\\\-_.:!@#\\\\$%\\\\^&*()\\\\[\\\\]{}\\\\\\\\=\\'\"]*';\nexport const htmlAllowedAttrSymbols = '[^\\\\u0000-\\\\u0020\\\\s\"\\'>/=]+';\n","/**\n * @module constants/regexpSpecialCharacters\n * @private\n * @description Exports special characters for RegExp.\n */\n\n/**\n * @const\n * @name module:constants/regexpSpecialCharacters~regexpSpecialCharacters\n * @type {String[]}\n */\nexport const regexpSpecialCharacters = [\n  '.',\n  '+', '*', '?',\n  '(', ')',\n  '[', ']',\n  '{', '}',\n  '<', '>',\n  '^', '$',\n  '!',\n  '=',\n  ':',\n  '-',\n  '|',\n  ',',\n  '\\\\'\n];\n","/**\n * @module constants/validateCheckExpressions\n * @private\n * @description Exports different types of validate expressions for {@link module:helpers/validate}.\n */\n\nimport * as methods from '../helpers/checkTypes';\n\n/**\n * @callback checkValidityCallback\n * @private\n * @param {*} value - Value to check.\n */\n\n/**\n * @typedef {Object} validateExpr\n * @private\n * @property {String} text - Text of the thrown error.\n * @property {Error} error - Type of the thrown error.\n * @property {checkValidityCallback} check - Callback for checking value.\n */\n\n/**\n * @type {validateExpr[]}\n * @private\n * @description Object of different types of validation.\n */\nexport const validateCheckExpressions = {\n  '>0': {\n    check: (n) => n > 0,\n    text: '$n argument must be positive!',\n    error: RangeError\n  },\n  '>=0': {\n    check: (n) => n >= 0,\n    text: '$n argument must be non-negative!',\n    error: RangeError\n  },\n  '<0': {\n    check: (n) => n < 0,\n    text: '$n argument must be negative!',\n    error: RangeError\n  },\n  '<=0': {\n    check: (n) => n <= 0,\n    text: '$n argument must be non-positive!',\n    error: RangeError\n  },\n  '!!': {\n    check: (v) => !methods.isNil(v),\n    text: '$n argument must be not null or undefined!',\n    error: TypeError\n  },\n  array: {\n    check: methods.isArray,\n    text: '$n argument must be an array!',\n    error: TypeError\n  },\n  'array||!': {\n    check: (a) => methods.isArray(a) || methods.isNil(a),\n    text: '$n argument must be an array, or undefined, or null!',\n    error: TypeError\n  },\n  arrayLike: {\n    check: methods.isArrayLike,\n    text: '$n argument must be array-like!',\n    error: TypeError\n  },\n  'arrayLike||!': {\n    check: (a) => methods.isArrayLike(a) || methods.isNil(a),\n    text: '$n argument must be array-like, or undefined, or null!',\n    error: TypeError\n  },\n  date: {\n    check: methods.isDate,\n    text: '$n argument must be a date!',\n    error: TypeError\n  },\n  'date||!': {\n    check: (d) => methods.isDate(d) || methods.isNil(d),\n    text: '$n argument must be a date, or undefined, or null!',\n    error: TypeError\n  },\n  dateLike: {\n    check: methods.isDateLike,\n    text: '$n argument must be date-like!',\n    error: TypeError\n  },\n  'dateLike||!': {\n    check: (d) => methods.isDateLike(d) || methods.isNil(d),\n    text: '$n argument must be date-like, or undefined, or null!',\n    error: TypeError\n  },\n  function: {\n    check: methods.isFunction,\n    text: '$n argument must be a function!',\n    error: TypeError\n  },\n  'function||!': {\n    check: (f) => methods.isFunction(f) || methods.isNil(f),\n    text: '$n argument must be a function, or undefined, or null!',\n    error: TypeError\n  },\n  int: {\n    check: methods.isInteger,\n    text: '$n argument must be an integer!',\n    error: TypeError\n  },\n  'int||!': {\n    check: (i) => methods.isInteger(i) || methods.isNil(i),\n    text: '$n argument must be an integer, or undefined, or null!',\n    error: TypeError\n  },\n  intLike: {\n    check: methods.isIntegerLike,\n    text: '$n argument must be integer-like!',\n    error: TypeError\n  },\n  'intLike||!': {\n    check: (i) => methods.isIntegerLike(i) || methods.isNil(i),\n    text: '$n argument must be integer-like, or undefined, or null!',\n    error: TypeError\n  },\n  number: {\n    check: methods.isNumber,\n    text: '$n argument must be a number!',\n    error: TypeError\n  },\n  'number||!': {\n    check: (n) => methods.isNumber(n) || methods.isNil(n),\n    text: '$n argument must be a number, or undefined, or null!',\n    error: TypeError\n  },\n  numberLike: {\n    check: methods.isNumberLike,\n    text: '$n argument must be number-like!',\n    error: TypeError\n  },\n  'numberLike||!': {\n    check: (n) => methods.isNumberLike(n) || methods.isNil(n),\n    text: '$n argument must be number-like, or undefined, or null!',\n    error: TypeError\n  },\n  object: {\n    check: methods.isObject,\n    text: '$n argument must be an object!',\n    error: TypeError\n  },\n  'object||!': {\n    check: (o) => methods.isObject(o) || methods.isNil(o),\n    text: '$n argument must be an object, or undefined, or null!',\n    error: TypeError\n  },\n  regexp: {\n    check: methods.isRegExp,\n    text: '$n argument must be a regular expression!',\n    error: TypeError\n  },\n  'regexp||!': {\n    check: (r) => methods.isRegExp(r) || methods.isNil(r),\n    text: '$n argument must be a regular expression, or undefined, or null!',\n    error: TypeError\n  },\n  string: {\n    check: methods.isString,\n    text: '$n argument must be a string!',\n    error: TypeError\n  },\n  'string||!': {\n    check: (s) => methods.isString(s) || methods.isNil(s),\n    text: '$n argument must be a string, or undefined, or null!',\n    error: TypeError\n  }\n};\n","/**\n * @module helpers/Symbol\n * @private\n * @description Exports Symbol class.\n */\n\nexport const Symbol = global.Symbol || {\n  toStringTag: 'Symbol.toStringTag',\n  iterator: Math.random().toString(36)\n};\n","/**\n * @module Promise\n * @private\n * @mixin\n * @description Exports Promise class.\n */\n\nimport { isFunction, defineProperties, Symbol } from './helpers';\n\n/**\n * @callback onFulfilledOrRejected\n * @public\n * @param {*} value - Promise value.\n * @param {Boolean} success - If the previous promise is fulfilled it's true and false if rejected.\n */\n\n/**\n * @callback onRejected\n * @public\n * @param {Error|*} err - Promise error.\n */\n\n/**\n * @callback onFulfilled\n * @public\n * @param {*} value - Promise value.\n */\n\nconst secret = {};\nconst iterator = Symbol.iterator;\n\n/**\n * @class Promise\n * @public\n * @param {Function} executor - Function that takes two arguments: resolve and reject functions.\n * Call the resolve function when you need to fulfill the promise and call the reject one\n * when you need to reject it.\n * @returns {Promise} Instance of Promise.\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\n * @description Class with almost identical API to\n * [ES6 Promise]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise}.\n * There is a couple differences: set Promise.onError to a function with which you want to\n * subscribe to a promise error and set Promise.onUnhandledRejection to a function with which\n * you want to subscribe to an unhandled error\n * (defaults to console.error.bind(console, '%s %o', 'Uncaught (in promise)')).\n */\nclass Promise {\n  static onError = null;\n  static onUnhandledRejection = console.error.bind(console, '%s %o', 'Uncaught (in promise)');\n\n  constructor(executor) {\n    if (!isFunction(executor)) {\n      throw new TypeError(`Promise resolver ${ {}.toString.call(executor) } is not a function`);\n    }\n\n    let hiddenStatus;\n    let hiddenValue;\n\n    const\tonFulfill = [];\n    const onReject = [];\n    const realPromise = this;\n    const hiddenPromise = {\n      handled: false,\n      get status() {\n        return hiddenStatus;\n      },\n      set status(value) {\n        hiddenStatus = value;\n        realPromise.status = value;\n      },\n      get value() {\n        return hiddenValue;\n      },\n      set value(val) {\n        hiddenValue = val;\n        realPromise.value = val;\n      }\n    };\n\n    hiddenPromise.status = 'pending';\n    hiddenPromise.value = undefined;\n\n    /**\n     * @typedef {Object} hiddenPromise\n     * @private\n     * @property {Boolean|Object} handled - If the promise is handled or not.\n     * @property {'pending'|'fulfilled'|'rejected'} status - Status of the promise.\n     * @property {*} value - Value of the promise.\n     */\n\n    /**\n     * @member {Function} hiddenPromise#handle\n     * @private\n     * @param {('reject'|'resolve')} event - Type of the event to handle.\n     * @param {Function} handler - Handler itself.\n     * @param {Function} resolve - Resolve function.\n     * @param {Function} reject - Reject function.\n     * @param {Object} secret - Secret.\n     * @description Private method for handling promises.\n     */\n\n    /**\n     * @member {hiddenPromise} Promise#$$\n     * @protected\n     */\n    defineProperties(this.$$ = {}, {\n      'get/set handled': {\n        get() {\n          return hiddenPromise.handled;\n        },\n        set(key) {\n          if (key === secret) {\n            hiddenPromise.handled = true;\n          }\n        }\n      },\n      handle(status, f, resolve, reject, key) {\n        if (key === secret) {\n          const proxy = isFunction(f) ? (value) => {\n            try {\n              resolve(f(value));\n            } catch (err) {\n              reject(err);\n            }\n          } : null;\n\n          if (status === 'resolve') {\n            onFulfill.push(proxy || ((value) => resolve(value)));\n          } else if (status === 'reject') {\n            onReject.push(proxy || ((err) => reject(err)));\n          }\n        }\n      },\n      'get status'() {\n        return hiddenPromise.status;\n      },\n      'get value'() {\n        return hiddenPromise.value;\n      }\n    });\n\n    try {\n      executor(resolve, reject);\n    } catch (err) {\n      reject(err);\n    }\n\n    function reject(err) {\n      if (hiddenPromise.status === 'pending') {\n        hiddenPromise.status = 'rejected';\n        hiddenPromise.value = err;\n\n        for (let i = 0, length = onReject.length; i < length; i++) {\n          hiddenPromise.handled = true;\n\n          onReject[i](err);\n        }\n\n        const {\n          onUnhandledRejection,\n          onError\n        } = Promise;\n\n        if (isFunction(onError)) {\n          onError(err);\n        }\n\n        setTimeout(() => {\n          if (!hiddenPromise.handled && isFunction(onUnhandledRejection)) {\n            onUnhandledRejection(err);\n          }\n        }, 1);\n      }\n    }\n\n    function resolve(value) {\n      if (hiddenPromise.status === 'pending') {\n        if (value && isFunction(value.then)) {\n          return value.then((value) => {\n            resolve(value);\n          }, (err) => {\n            reject(err);\n          });\n        }\n\n        hiddenPromise.status = 'fulfilled';\n        hiddenPromise.value = value;\n\n        for (let i = 0, length = onFulfill.length; i < length; i++) {\n          hiddenPromise.handled = true;\n\n          onFulfill[i](value);\n        }\n      }\n    }\n  }\n\n  /**\n   * @method Promise.all\n   * @param {(Array|Iterable).<Promise|*>} iterable - Iterable object (like array) of promises\n   * or any values.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\n   */\n  static all(iterable) {\n    const array = [];\n\n    let toResolve = 0;\n\n    if (iterable[iterator]) {\n      iterable = iterable[iterator]();\n\n      return new Promise((resolve, reject) => {\n        let next;\n        let i = 0;\n\n        while (!(next = iterable.next()).done) {\n          const promise = Promise.resolve(next.value);\n\n          toResolve++;\n\n          ((i) => {\n            promise.then((value) => {\n              toResolve--;\n              array[i] = value;\n\n              setTimeout(() => {\n                if (next.done && !toResolve) {\n                  resolve(array);\n                }\n              }, 1);\n            }, reject);\n          })(i++);\n        }\n\n        if (!i) {\n          return Promise.resolve([]);\n        }\n      });\n    }\n\n    const length = iterable.length;\n\n    if (!length) {\n      return Promise.resolve([]);\n    }\n\n    toResolve = length;\n\n    return new Promise((resolve, reject) => {\n      for (let i = 0; i < length; i++) {\n        const promise = Promise.resolve(iterable[i]);\n\n        promise.then((value) => {\n          toResolve--;\n          array[i] = value;\n\n          if (!toResolve) {\n            resolve(array);\n          }\n        }, reject);\n      }\n    });\n  }\n\n  /**\n   * @method Promise.race\n   * @param {(Array|Iterable).<Promise|*>} iterable - Iterable object (like array) of promises\n   * or any values.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\n   */\n  static race(iterable) {\n    if (iterable[iterator]) {\n      iterable = iterable[iterator]();\n\n      return new Promise((resolve, reject) => {\n        let next;\n\n        while (!(next = iterable.next()).done) {\n          next.value.then(resolve, reject);\n        }\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      for (let i = 0, length = iterable.length; i < length; i++) {\n        iterable[i].then(resolve, reject);\n      }\n    });\n  }\n\n  /**\n   * @method Promise.reject\n   * @param {*} value - Value to reject.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject\n   */\n  static reject(value) {\n    return new Promise((resolve, reject) => {\n      reject(value);\n    });\n  }\n\n  /**\n   * @method Promise.resolve\n   * @param {Promise|Thenable|*} value - Promise, thenable or any value to resolve.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\n   */\n  static resolve(value) {\n    if (value && isFunction(value.then)) {\n      return value;\n    }\n\n    return new Promise((resolve) => {\n      resolve(value);\n    });\n  }\n\n  abort() {}\n\n  /**\n   * @method Promise#catch\n   * @param {onRejected} onRejected - onRejected callback.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\n   */\n  catch(onRejected) {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * @method Promise#finally\n   * @public\n   * @param {onFulfilledOrRejected} onFulfilledOrRejected - onFulfilledOrRejected callback.\n   * @returns {Promise}\n   * @description Method for catching both fulfilled and rejected promises.\n   *\n   * @example\n   * spinner.show();\n   * fetchData()\n   *   .then((data) => {\n   *     // do something with data\n   *   })\n   *   .catch((err) => {\n   *     // handle error somehow\n   *   })\n   *   .finally(() => {\n   *     spinner.hide();\n   *   });\n   */\n  finally(onFulfilledOrRejected) {\n    const isFunc = isFunction(onFulfilledOrRejected);\n\n    return this.then((value) => (\n      Promise\n        .resolve(\n          isFunc\n            ? onFulfilledOrRejected(value, true)\n            : 0\n        )\n        .then(() => value)\n    ), (err) => (\n      Promise\n        .resolve(\n          isFunc\n            ? onFulfilledOrRejected(err, false)\n            : 0\n        )\n        .then(() => Promise.reject(err))\n    ));\n  }\n\n  /**\n   * @method Promise#then\n   * @param {onFulfilled} [onFulfilled] - onFulfilled callback.\n   * @param {onRejected} [onRejected] - onRejected callback.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\n   */\n  then(onFulfilled, onRejected) {\n    const promise = this.$$;\n\n    if (promise.status === 'pending') {\n      return new Promise((resolve, reject) => {\n        promise.handle('reject', onRejected, resolve, reject, secret);\n        promise.handle('resolve', onFulfilled, resolve, reject, secret);\n      });\n    }\n\n    promise.handled = secret;\n\n    const { value } = promise;\n\n    let method;\n    let handler;\n\n    if (promise.status === 'fulfilled') {\n      method = 'resolve';\n      handler = onFulfilled;\n    } else {\n      method = 'reject';\n      handler = onRejected;\n    }\n\n    if (!isFunction(handler)) {\n      return Promise[method](value);\n    }\n\n    try {\n      return Promise.resolve(handler(value));\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n}\n\ndefineProperties(Promise.prototype, {\n  [Symbol.toStringTag]: 'Promise'\n});\n\nexport { Promise };\n","/**\n * @module helpers/parseHeaders\n * @private\n * @description Exports parseHeaders method.\n */\n\nimport { Str } from '../Str';\nimport { iterate } from './iterate';\n\n/**\n * @function parseHeaders\n * @param {String} rawHeaders - Raw headers.\n * @returns {Object} Headers object\n * @description Function for parsing raw headers.\n */\nexport default (rawHeaders) => {\n  const headers = {};\n\n  iterate((rawHeaders || '').split('\\n'), (value) => {\n    const index = value.indexOf(':');\n    const key = new Str(value.substring(0, index))\n      .trim()\n      .toCamelCase().$;\n    const val = new Str(value.substring(index + 1)).trim().$;\n\n    if (key) {\n      headers[key] = (headers[key] ? `${ headers[key] }, ` : '') + val;\n    }\n  });\n\n  return headers;\n};\n","/**\n * @module helpers/transformData\n * @private\n * @description Exports transformData method.\n */\n\nimport { Arr } from '../Arr';\nimport { Super } from '../Super';\nimport { isObject, toStringTag } from './';\n\nconst notToTransform = new Arr(['FormData', 'File', 'Blob', 'ArrayBuffer', 'String', 'Number']);\nconst withoutBody = new Arr(['DELETE', 'GET', 'HEAD']);\n\n/**\n * @function transformData\n * @param {*} data - Data to transform\n * @param {String} method - HTTP method.\n * @param {Object} headers - Object with headers.\n * @returns {*} - Transformed data.\n */\nexport default (data, method, headers) => {\n  data = new Super(data).$;\n\n  if (withoutBody.indexOfStrict(method) !== -1) {\n    return null;\n  }\n\n  if (isObject(data) && notToTransform.indexOfStrict(toStringTag(data)) === -1) {\n    if (!headers.contentType) {\n      headers.contentType = ['application/json;charset=utf-8'];\n    }\n\n    return new Super(data).json();\n  }\n\n  return data;\n};\n","/**\n * @module helpers/resolveURL\n * @private\n * @description Exports Object.assign-like method.\n */\n\nimport { Str } from '../Str';\n\nconst { location } = global;\n\nexport default (decodeQuery) => {\n  const {\n    search: query,\n    hash\n  } = location;\n  const params = {\n    query: {},\n    hash: hash.replace(/^#/, '')\n  };\n\n  if (!query) {\n    return params;\n  }\n\n  new Str(query.replace(/^\\?/, ''))\n    .split('&')\n    .forEach((rawParam) => {\n      let [param, value = ''] = rawParam.split('=');\n\n      param = decodeQuery ? decodeURIComponent(param) : param;\n      value = decodeQuery ? decodeURIComponent(value) : value;\n\n      if (!/^[^[]+/.test(param)) {\n        return;\n      }\n\n      let paramName;\n      let paramObject = params.query;\n\n      new Str(param)\n        .match(/^[^[\\]]*|\\[[^[\\]]*]/g)\n        .forEach((name) => {\n          if (name.indexOf('[')) {\n            paramName = name;\n\n            return;\n          }\n\n          name = name.slice(1, -1);\n\n          paramObject = paramObject[paramName] = paramObject[paramName] || (name ? {} : []);\n          paramName = name || paramObject.length;\n        });\n\n      paramObject[paramName] = value;\n    });\n\n  return params;\n};\n","import * as statics from './lib/browser';\nimport { assign } from './lib/helpers/assign';\n\nconst { D } = statics;\n\nassign(D, statics);\n\ndelete D.D;\n\nglobal.D = D;\n"],"names":["toStringTag","object","toString","call","replace","isArray","value","isArrayLike","isFunction","length","isInteger","isBoolean","isDate","isDateLike","Date","isNaN","getTime","isElement","test","isFinite","isNumber","Number","Infinity","isIntegerLike","parseInt","isNull","isNil","isNumberLike","isObject","Object","isPlainObject","isPrimitive","proto","getPrototypeOf","constructor","isRegExp","isString","isSymbol","isUndefined","D","i","constructors","levelConstructors","k","len","cls","check","iterate","callback","array","iteratedKeys","iterated","key","hasOwnProperty","assign","target","objects","arguments","source","index","constructEvalFunction","code","original","func","Function","expression","err","Error","dynamicDefineProperties","properties","propertyGenerator","name","defineProperty","defineProperties","undefined","get","set","defineUsualProperties","defineFrozenProperties","toArray","createNewArray","push","validate","args","options","number","checker","validateCheckExpressions","error","text","numbers","char","alphabet","string","ranges","split","range","start","charCodeAt","end","String","fromCharCode","Alphabet","switcher","cases","mode","defaultValue","Switcher","when","condition","value1","value2","deepAssign","deepClone","clone","cloneSwitcher","deepEqual","o1","o2","strict","match","lastIndex","p1","p2","keys","deepEvery","n","tree","newTree","concat","deepFilter","nul","o","filtered","deepFind","result","deepForEach","deepForEachEntry","deepFreeze","freeze","deepMap","deepReduce","IV","deepSome","method","x","apply","noop","prop","self","rand","Math","random","floor","asc","y","Arr","blob","blobParts","BlobObject","Blob","trim","parseJSON","json","JSON","parse","dates","this","find","markup","elem","matches","rawTextSwitcher","Super","constructCloseTagRegExp","NODE_REGEX_SET","map","regex","returning","attrs","startMarkup","closeMatch","selfClosing","slice","TAG_OPEN_CLOSE","attr","ATTRIBUTE","min","NaN","tagName","RegExp","nearString","parseCharacterData","innerHTML","div","textContent","innerText","toFind","isElem","Elem","isWindow","isHTMLDocument","isDocumentFragment","isStyleRule","isCommentOrText","tag","getElem","$","emptyDiv","getName","nodeName","toLowerCase","addDwayneData","windowsDwayneData","some","element","getContext","selector","base","nativeDocument","querySelectorAll","parseHTML","html","collapseWhiteSpace","markupToJSON","template","doc","content","forEach","forEachNode","node","parent","children","parentNode","create","px","size","registerDBlock","Block","DBlock","$$","parentScope","parentParentScope","parentParentTemplate","parentTemplate","argsChildren","ownChildren","dBlockName","found","ParentScope","ParentTemplate","dBlocks","elems","registerDEach","createBlock","opts","item","itemName","indexName","_this","uid","watch","_this2","uids","parentElem","scope","UID","sortBy","$uids","newKeys","newUIDs","filterBy","sort","filter","evaluate","items","Item","remove","splice","prevBlock","block","shift","insertAfterIt","values","registerDElements","firstTime","mixins","watchersToRemove","child","mixin","removeContent","watchers","watcher","forDElements","indexOf","registerDIf","DIf","cond","if","newValue","Boolean","registerDItem","DItem","registerDSwitch","DSwitch","wasDefault","val","equals","registerDAttr","Mixin","removeAttr","registerDBind","off","on","join","registerDClass","classes","newClasses","removeClass","addClass","registerDElem","DElem","evaluateOnce","registerDHide","hide","show","registerDNode","DNode","registerDOn","DOn","registerDShow","registerDStyle","css","oldValue","removeCSS","registerDValidate","DValidate","validator","listenerSwitcher","validators","dwayneData","registerDValue","DValue","type","initialScopeValue","propSwitcher","currentValue","setProp","initialElemValue","getProp","isInitialScopeValueNull","isCheckbox","changeScope","offElemListener","e","offFormListener","closest","option","selected","setValueSwitcher","init","getValueSwitcher","parseJS","wholeString","curlyError","initialString","expected","variables","closingExpressions","spaceMatch","toConcat","matched","isEmptySpace","properType","properSymbol","symbol","firstSymbol","emptySpaceRegExp","templateString","arrowFunctionRegExp","vars","anyCommaEmptySpace","newFunctionVars","functionScope","variable","END_OF_FUNC_BODY","EXPRESSION","objectProperty","unaryOperatorRegExp","anyEmptySpaceRegExp","simpleExpressionRegExp","numberRegExp","stringRegExp","regexpRegExp","thisRegExp","variableRegExp","getVariable","operator","templateStringContentRegExp","anyEscapedExpressionRegExp","second","properEscapedRegExp","anyDoubleQuoteRegExp","anyNewLineRegExp","pop","propertyRegExp","keywordsRegExp","shorthandPropertyRegExp","closeFunctionBody","pointOperatorRegExp","operatorRegExp","closingBrace","noMatch","curlyIndex","expressionString","constructErrorInfo","last","wholeStringString","submitString","initApp","blocks","DwayneRootBlock","removeApp","registerBuiltIns","register","_html","transformJSExpressions","_variables","except","_match","constructMixinRegExp","parentBlock","svgNS","svg","localBlocks","ns","_blocks","localMixins","_mixins","dBlockMatch","dBlockArgs","dBlockChildren","dElementsName","blockInstance","currentAttrs","wasDRest","mixinDefaultOpts","isDRest","dRestRegExp","localAttrs","restAttrs","arg","transformRestAttrs","mixinMatch","createMixins","calculateAttrs","isParentBlock","insertAfter","addContent","insertInStartOfIt","into","Args","globals","locals","newName","transformDIfChildren","constructPrivateScope","scopeValues","privateScope","afterConstruct","afterRender","createMixin","dynamic","comment","evaluateAndWatch","afterUpdate","ifElse","exclude","initialValue","isDEach","excludeLocal","parsed","rest","isUID","usedVariables","curlyBracketRegExp","isInstanceOf","Class","Subclass","isPrototypeOf","prototype","removeWatchers","constructPublicScope","define","evalMode","getting","temp","changed","oldTempWatchers","onRemove","was","perm","watchForAllLocals","watchForAllGlobals","global","watchForAllArgs","calculateArgs","argsObject","$argsObject","propertyNames","transformRestArgs","eventualAttrs","localMatch","argsMatch","Str","s","attrsObject","nextType","nextDynamic","nextValue","prevType","prevValue","isDynamic","evaluated","buildMixin","firstValue","executeMixinWatchers","escapeRegExp","extendBlock","insertTemplates","templates","newTemplates","newVars","pushArray","round","digits","zeroes","zero","repeat","now","date","Dat","isAbsolute","url","absoluteURLRegexp","encode","isEncoded","encodeURIComponent","fetchBeforeMiddleware","config","baseURL","data","headers","params","query","METHOD","toUpperCase","constructURL","transformData","header","toCapitalCase","initRouter","initialized","Routes","redirectRoute","defaultRoute","RedirectRoute","route","parentName","ParentName","rootRoute","abstract","baseRoute","parentParams","parentQuery","path","relativeURL","relativePath","count","newPath","newURL","validatePath","location","href","initialURL","pushed","closestLink","hasAttr","preventDefault","makeRoute","callBeforeLoad","routeLoaded","wasRoute","beforeLoad","__routerInstance__","beforeLoadRoute","callBeforeLeave","beforeLeave","beforeLeaveRoute","routerOptions","root","fallbackTo","isDefault","default","warn","wasRoot","Route","unsubscribe","router","__isCurrentRoute__","currentRoutes","includes","__wasRouteActive__","currentRouteParams","subscribe","action","isCurrentRoute","subscribers","forward","changeRoute","findRouteByURL","currentRoute","host","hostname","origin","pathname","port","protocol","search","encodeParams","encodeQuery","redirectRouteIsNeededToPush","routesToLeave","routesToLoad","currentParent","unshift","urlParams","routeURL","requiredQuery","decodeParams","decodeQuery","resolved","resolveURL","eventualParams","param","hasOwn","decode","hash","DefaultRoute","decodeURIComponent","changeHistory","resolveParameter","nameErrorName","valueErrorName","nameMatch","regexp","buildURL","go","goToURL","pushURL","redirect","redirectToURL","replaceURL","window","appliedRegExps","id","canvasGetMethods","canvasRestMethods","htmlElements","svgElements","voidElements","htmlAllowedTagSymbols","regexpSpecialCharacters","RangeError","v","methods","TypeError","a","d","f","r","Symbol","chars","word","token","def","ret","Case","case","eventualCases","setPrototypeOf","deep","sum","descriptors","property","descriptor","props","getter","isFrozen","replacer","space","stringify","max","obj","getOwnPropertyDescriptor","getOwnPropertyNames","getOwnPropertySymbols","isContextObject","startKey","setter","reduce","secret","iterator","Promise","executor","reject","hiddenPromise","status","onReject","handled","onUnhandledRejection","onError","resolve","then","onFulfill","hiddenStatus","hiddenValue","realPromise","proxy","onRejected","onFulfilledOrRejected","isFunc","onFulfilled","promise","handle","handler","iterable","toResolve","next","done","console","bind","Func","called","canBeCalled","before","after","sync","contextLocked","context","middleware","afterAll","beforeAll","bindContext","bindArgs","times","lockContext","lockArgs","argsLocked","mark","time","timeEnd","unbindContext","unbindArgs","toRadian","PI","toDegree","ln2","LN2","ln10","LN10","Num","toDegrees","acos","asin","atan","asDegrees","cos","abort","clearTimeout","timeout","aborted","setTimeout","interval","log","power","pow","sin","tan","rej","fractionDigits","toExponential","toFixed","precision","toPrecision","abs","sqrt","cbrt","ceil","exp","ln","sign","indexOfStrict","keyOf","keyOfStrict","separator","reverse","randomIndex","begin","compareFunction","deleteCount","URL","progress","reader","FileReader","toReject","onprogress","onerror","onload","anchor","document","createElement","dataURL","setAttribute","click","createObjectURL","htmlSpecials","regexpSpecialsRegexp","searchString","position","revert","startsWith","escaped","searchValue","fromIndex","lastIndexOf","str","beginSlice","endSlice","substr","indexStart","indexEnd","substring","nodeSwitcher","InternalParsingError","ParsingError","throwUnexpectedError","globalIndex","elements","textProperty","Node","propertyDescriptor","inputElements","typeSwitcher","documentElement","namespaceURI","createElementNS","createComment","createTextNode","refSwitcher","filterSwitcher","is","innerSwitcher","paddings","borders","outerSwitcher","attrNSSwitcher","list","classList","add","insertAdjacentHTML","style","sheet","cssRules","rules","toHyphenCase","insertRule","strings","applied","setApplied","np1","attributes","getAttribute","getAttributeNS","setAttributeNS","_this4","first","load","isBroken","canvas","width","height","drawImage","byteString","atob","ab","ArrayBuffer","ia","Uint8Array","blur","pseudo","getComputedStyle","rule","childNodes","className","cloneNode","contains","appliedExpressions","getPropertyValue","getPropertyPriority","removeProperty","setProperty","cssText","toCamelCase","ctx","dataset","encoderOptions","toDataURL","deleteRule","event","eventInit","details","bubbles","cancelable","finalEvent","Event","createEvent","initEvent","dispatchEvent","focus","selectorText","hasAttribute","hasAttributeNS","currentDisplay","previousDisplay","nextSibling","insertBefore","appendChild","firstChild","forEachReverse","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","complete","naturalWidth","naturalHeight","images","all","$elem","removeListeners","proper","broken","prev","events","listeners","removeListener","listener","allListeners","removeEventListeners","has","newListener","addEventListener","delete","removeEventListener","previousSibling","link","removeChild","removeAttribute","removeAttributeNS","2","1","created","txt","_arguments6","hasClass","level","validatorWrap","input","errors","validity","valid","validationMessage","formErrors","form","inputs","dispatch","inputError","every","innerHeight","calcCSS","borderTopWidth","borderBottomWidth","boxSizing","paddingTop","paddingBottom","innerWidth","borderLeftWidth","borderRightWidth","paddingLeft","paddingRight","outerHeight","marginTop","marginBottom","outerWidth","marginLeft","marginRight","win","body","head","inputValue","isMultiple","keywordsArray","rootBlocks","rootMixins","attrName","afterElem","originalArgs","childrenBlocks","onChange","instance","forDItem","forDEach","onEvalError","localWatchers","newResult","watcherBlock","index1","index2","isParentSignal","beforeRemove","_this5","contentToAdd","notRecursive","contentToMove","indexToPut","moveContent","contentToRemove","contentToInsert","moveFlag","tryToAddOrMove","defaultLocals","defaultArgs","localArgs","restArgs","isDElements","hook","_blockHooks","_mixinHooks","returnValue","_name","wrappers","wrapper","oldWatcher","_this6","Blocks","_this7","_value","Mixins","daysOfTheWeekNames","daysOfTheWeekAliases","monthsNames","monthsAliases","utc","coeffs","getSwitcher","setSwitcher","what","prefix","formats","format","replaceString","date1","date2","isBefore","started","coeff","w","setTime","toISOString","toLocaleString","valueOf","querySwitcher","queryParams","encodeOptions","rawHeaders","notToTransform","withoutBody","contentType","defaults","uploadMethods","Fetch","fetch","request","conf","toPush","dataConfig","urlConfig","xhr","auth","username","password","responseType","withCredentials","XMLHttpRequest","open","setRequestHeader","upload","onabort","ontimeout","onreadystatechange","readyState","response","responseText","parseHeaders","getAllResponseHeaders","statusText","catch","send","rawParam","paramName","paramObject","history","pathSwitcher","part","statics"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}