{"version":3,"file":"dwayne.min.js","sources":["../lib/helpers/toStringTag.js","../lib/helpers/checkTypes.js","../lib/D.js","../lib/helpers/iterate.js","../lib/helpers/assign.js","../lib/helpers/defineProperty.js","../lib/helpers/toArray.js","../lib/helpers/validate.js","../lib/Alphabet.js","../lib/Switcher.js","../lib/Super.js","../lib/Func.js","../lib/Num.js","../lib/Arr.js","../lib/BlobObject.js","../lib/Str.js","../lib/helpers/markupToJSON.js","../lib/Elem.js","../lib/blocks/d-block.js","../lib/blocks/d-each.js","../lib/blocks/d-elements.js","../lib/blocks/d-if.js","../lib/blocks/d-item.js","../lib/blocks/d-switch.js","../lib/blocks/d-text.js","../lib/mixins/d-attr.js","../lib/mixins/d-bind.js","../lib/mixins/d-class.js","../lib/mixins/d-elem.js","../lib/mixins/d-hide.js","../lib/mixins/d-on.js","../lib/mixins/d-show.js","../lib/mixins/d-style.js","../lib/mixins/d-text.js","../lib/mixins/d-validate.js","../lib/mixins/d-value.js","../lib/Block.js","../lib/constants/formats.js","../lib/Dat.js","../lib/helpers/constructURL.js","../lib/Fetch.js","../lib/Router.js","../lib/constants/global.js","../lib/constants/appliedRegExps.js","../lib/constants/canvasMethods.js","../lib/constants/constructors.js","../lib/constants/elements.js","../lib/constants/htmlAllowedTagSymbols.js","../lib/constants/regexpSpecialCharacters.js","../lib/constants/validateCheckExpressions.js","../lib/helpers/Symbol.js","../lib/Promise.js","../lib/helpers/parseHeaders.js","../lib/helpers/transformData.js","../lib/helpers/resolveURL.js","../browser.js"],"sourcesContent":["/**\r\n * @module helpers/toStringTag\r\n * @private\r\n * @description Exports toStringTag method.\r\n */\r\n\r\n/**\r\n * @function toStringTag\r\n * @param {*} object - Object to get toStringTag of.\r\n * @returns {String} Cut string.\r\n * @description Cut \"Type\" string from \"[object Type]\" string that gotten from {}.toString,call(object).\r\n */\r\nexport function toStringTag(object) {\r\n  return {}.toString.call(object).replace(/^\\[object |]$/g, '');\r\n}\r\n","/**\r\n * @module helpers/checkTypes\r\n * @private\r\n * @mixin\r\n * @description Exports is<Type> methods.\r\n */\r\n\r\nimport { toStringTag } from './toStringTag';\r\n\r\n/**\r\n * @function isArray\r\n * @public\r\n * @param {*} value - Value to check if it is an array.\r\n * @returns {Boolean} If the argument is an array or not.\r\n * \r\n * @example\r\n * isArray([]);                             // true\r\n * isArray(0);                              // true\r\n * isArray(document.querySelectorAll('*')); // false\r\n */\r\nexport function isArray(value) {\r\n  return toStringTag(value) === 'Array';\r\n}\r\n\r\n/**\r\n * @function isArrayLike\r\n * @public\r\n * @param {*} value - Value to check if it is array-like.\r\n * @returns {Boolean} If the argument is array-like or not.\r\n * @description Basically returns if the argument has non-negative integer \"length\" property and isn't a function.\r\n * \r\n * @example\r\n * isArrayLike([]);                             // true\r\n * isArrayLike('');                             // true\r\n * isArrayLike(() => {});                       // false\r\n * isArrayLike(document.querySelectorAll('*')); // true\r\n */\r\nexport function isArrayLike(value) {\r\n  if (!value || isFunction(value)) {\r\n    return false;\r\n  }\r\n  \r\n  const length = value.length;\r\n  \r\n  return isInteger(length) && length >= 0;\r\n}\r\n\r\n/**\r\n * @function isBoolean\r\n * @public\r\n * @param {*} value - Value to check if it is a boolean.\r\n * @returns {Boolean} If the argument is a boolean or not.\r\n * \r\n * @example\r\n * isBoolean(true);               // true\r\n * isBoolean(new Boolean(false)); // true\r\n * isBoolean(null);               // false\r\n */\r\nexport function isBoolean(value) {\r\n  return toStringTag(value) === 'Boolean';\r\n}\r\n\r\n/**\r\n * @function isDate\r\n * @public\r\n * @param {*} value - Value to check if it is a date.\r\n * @returns {Boolean} If the argument is a date or not.\r\n * \r\n * @example\r\n * isDate(new Date());                 // true\r\n * isDate('1999-12-31T23:59:59.999Z'); // false\r\n */\r\nexport function isDate(value) {\r\n  return toStringTag(value) === 'Date';\r\n}\r\n\r\n/**\r\n * @function isDateLike\r\n * @public\r\n * @param {*} value - Value to check if it is date-like.\r\n * @returns {Boolean} If the argument is date-like or not.\r\n * @description Basically returns if new Date(argument) is not invalid date.\r\n * \r\n * @example\r\n * isDateLike(new Date());                 // true\r\n * isDateLike('1999-12-31T23:59:59.999Z'); // true\r\n * isDateLike(0);                          // true\r\n */\r\nexport function isDateLike(value) {\r\n  value = new Date(value);\r\n  \r\n  return !isNaN(value.getTime());\r\n}\r\n\r\n/**\r\n * @function isElement\r\n * @public\r\n * @param {*} value - Value to check if it is an element.\r\n * @returns {Boolean} If the argument is element or not.\r\n *\r\n * @example\r\n * isElement(document.querySelector('html')); // true\r\n */\r\nexport function isElement(value) {\r\n  return /Element$/.test(toStringTag(value));\r\n}\r\n\r\n/**\r\n * @function isFinite\r\n * @public\r\n * @param {*} value - Value to check if it is finite.\r\n * @returns {Boolean} If the argument is finite or not.\r\n * \r\n * @example\r\n * isFinite(0);        // true\r\n * isFinite('0');      // false\r\n * isFinite(Infinity); // false\r\n * isFinite(NaN);      // false\r\n */\r\nexport function isFinite(value) {\r\n  if (!isNumber(value)) {\r\n    return false;\r\n  }\r\n  \r\n  value = Number(value);\r\n\r\n  return !isNaN(value) && value !== Infinity && value !== -Infinity;\r\n}\r\n\r\n/**\r\n * @function isFunction\r\n * @public\r\n * @param {*} value - Value to check if it is a function.\r\n * @returns {Boolean} If the argument is a function or not.\r\n * \r\n * @example\r\n * isFunction(() => {});            // true\r\n * \r\n * const func = () => {};\r\n * Object.setPrototypeOf(func, {});\r\n * isFunction(func);                // true\r\n */\r\nexport function isFunction(value) {\r\n  return toStringTag(value) === 'Function' || typeof value === 'function';\r\n}\r\n\r\n/**\r\n * @function isInteger\r\n * @public\r\n * @param {*} value - Value to check if it is an integer.\r\n * @returns {Boolean} If the argument is an integer or not.\r\n *\r\n * @example\r\n * isInteger(0);             // true\r\n * isInteger(0.1);           // false\r\n * isInteger(new Number(0)); // true\r\n * isInteger('0');           // false\r\n * isInteger(Infinity);      // false\r\n * isInteger(NaN);           // false\r\n */\r\nexport function isInteger(value) {\r\n  return isNumber(value) && value % 1 === 0;\r\n}\r\n\r\n/**\r\n * @function isIntegerLike\r\n * @public\r\n * @param {*} value - Value to check if it is integer-like.\r\n * @returns {Boolean} If the argument is integer-like or not.\r\n *\r\n * @example\r\n * isIntegerLike(0);             // true\r\n * isIntegerLike(new Number(0)); // true\r\n * isIntegerLike(0.1);           // false\r\n * isIntegerLike('0');           // true\r\n */\r\nexport function isIntegerLike(value) {\r\n  value = parseInt(Number(value));\r\n\r\n  return !!(value || value === 0);\r\n}\r\n\r\n/**\r\n * @function isNaN\r\n * @public\r\n * @param {*} value - Value to check if it is NaN.\r\n * @returns {Boolean} If the argument is NaN or not.\r\n *\r\n * @example\r\n * isNaN(0);               // false\r\n * isNaN('NaN');           // false\r\n * isNaN(NaN);             // true\r\n * isNaN(new Number(NaN)); // true\r\n */\r\nexport function isNaN(value) {\r\n  if (!isNumber(value)) {\r\n    return false;\r\n  }\r\n  \r\n  value = Number(value);\r\n\r\n  return value !== value;\r\n}\r\n\r\n/**\r\n * @function isNull\r\n * @public\r\n * @param {*} value - Value to check if it is null.\r\n * @returns {Boolean} If the argument is null or not.\r\n *\r\n * @example\r\n * isNull(null);      // true\r\n * isNull(undefined); // false\r\n */\r\nexport function isNull(value) {\r\n  return value === null;\r\n}\r\n\r\n/**\r\n * @function isNil\r\n * @public\r\n * @param {*} value - Value to check if it is null or undefined.\r\n * @returns {Boolean} If the argument is null or undefined or not.\r\n *\r\n * @example\r\n * isNil(null);      // true\r\n * isNil(undefined); // true\r\n * isNil(false);     // false\r\n */\r\nexport function isNil(value) {\r\n  return value === null || typeof value === 'undefined';\r\n}\r\n\r\n/**\r\n * @function isNumber\r\n * @public\r\n * @param {*} value - Value to check if it is a number.\r\n * @returns {Boolean} If the argument is a number or not.\r\n *\r\n * @example\r\n * isNumber(0);             // true\r\n * isNumber(new Number(0)); // true\r\n * isNumber(NaN);           // true\r\n * isNumber('0');           // false\r\n */\r\nexport function isNumber(value) {\r\n  return toStringTag(value) === 'Number';\r\n}\r\n\r\n/**\r\n * @function isNumberLike\r\n * @public\r\n * @param {*} value - Value to check if it is number-like.\r\n * @returns {Boolean} If the argument is number-like or not.\r\n *\r\n * @example\r\n * isNumberLike(0);          // true\r\n * isNumberLike('0');        // true\r\n * isNumberLike('Infinity'); // true\r\n * isNumberLike('NaN');      // true\r\n * isNumberLike(NaN);        // true\r\n */\r\nexport function isNumberLike(value) {\r\n  if (isNaN(value) || value === 'NaN') {\r\n    return true;\r\n  }\r\n  \r\n  value = Number(value);\r\n  \r\n  return !!(value || value === 0);\r\n}\r\n\r\n/**\r\n * @function isObject\r\n * @public\r\n * @param {*} value - Value to check if it is an object.\r\n * @returns {Boolean} If the argument is an object or not.\r\n *\r\n * @example\r\n * isObject({});   // true\r\n * isObject(1);    // false\r\n * isObject(null); // false\r\n */\r\nexport function isObject(value) {\r\n  return !!value && (toStringTag(value) === 'Object' || typeof value === 'object' || value instanceof Object);\r\n}\r\n\r\n/**\r\n * @function isPlainObject\r\n * @public\r\n * @param {*} value - Value to check if it is a plain object.\r\n * @returns {Boolean} If the argument is a plain object or not.\r\n *\r\n * @example\r\n * const obj = {};\r\n *\r\n * ifPlainObject(obj); // true\r\n *\r\n * Object.setPrototypeOf(object, null);\r\n *\r\n * ifPlainObject(obj); // true\r\n *\r\n * Object.setPrototypeOf(object, {});\r\n *\r\n * ifPlainObject(obj); // false\r\n */\r\nexport function isPlainObject(value) {\r\n  if (isPrimitive(value)) {\r\n    return false;\r\n  }\r\n\r\n  const proto = Object.getPrototypeOf(value);\r\n\r\n  if (isNull(proto)) {\r\n    return true;\r\n  }\r\n\r\n  const constructor = proto.constructor;\r\n\r\n  return isFunction(constructor) &&\r\n    constructor instanceof constructor &&\r\n    isNull(Object.getPrototypeOf(proto));\r\n}\r\n\r\n/**\r\n * @function isPrimitive\r\n * @public\r\n * @param {*} value - Value to check if it is primitive.\r\n * @returns {Boolean} If the argument is primitive or not.\r\n *\r\n * @example\r\n * isPrimitive(1);             // true\r\n * isPrimitive({});            // false\r\n * isPrimitive('');            // true\r\n * isPrimitive(new Number(0)); // false\r\n * isPrimitive(true);          // true\r\n * isPrimitive(Symbol('foo')); // true\r\n * isPrimitive(null);          // true\r\n * isPrimitive(undefined);     // true\r\n */\r\nexport function isPrimitive(value) {\r\n  return isNull(value) || /^(number|string|boolean|symbol|undefined)$/.test(typeof value);\r\n}\r\n\r\n/**\r\n * @function isRegExp\r\n * @public\r\n * @param {*} value - Value to check if it is a regular expression.\r\n * @returns {Boolean} If the argument is a regular expression or not.\r\n *\r\n * @example\r\n * isRegExp(/foo/);             // true\r\n * isRegExp('/foo/');           // false\r\n * isRegExp(new RegExp('foo')); // true\r\n */\r\nexport function isRegExp(value) {\r\n  return toStringTag(value) === 'RegExp';\r\n}\r\n\r\n/**\r\n * @function isString\r\n * @public\r\n * @param {*} value - Value to check if it is a string.\r\n * @returns {Boolean} If the argument is a string or not.\r\n *\r\n * @example\r\n * isString('0');             // true\r\n * isString(new String('0')); // true\r\n */\r\nexport function isString(value) {\r\n  return toStringTag(value) === 'String';\r\n}\r\n\r\n/**\r\n * @function isSymbol\r\n * @public\r\n * @param {*} value - Value to check if it is a symbol.\r\n * @returns {Boolean} If the argument is a symbol or not.\r\n *\r\n * @example\r\n * isSymbol(Symbol('1')); // true\r\n */\r\nexport function isSymbol(value) {\r\n  return toStringTag(value) === 'Symbol';\r\n}\r\n\r\n/**\r\n * @function isUndefined\r\n * @public\r\n * @param {*} value - Value to check if it is undefined.\r\n * @returns {Boolean} If the argument is undefined or not.\r\n *\r\n * @example\r\n * isUndefined(null);      // false\r\n * isUndefined(undefined); // true\r\n */\r\nexport function isUndefined(value) {\r\n  return typeof value === 'undefined';\r\n}\r\n","/**\r\n * @module D\r\n * @private\r\n * @description Exports D function.\r\n */\r\n\r\nimport { constructors } from './constants';\r\n\r\n/**\r\n * @function D\r\n * @public\r\n * @param {*} [value] - Any value.\r\n * @returns {DWrap} Wrap of the argument.\r\n * @description Function for creating a D-wrap of an object.\r\n *\r\n * @example\r\n * D({});            // Super\r\n * D(() => {});      // Func\r\n * D([]);            // Arr\r\n * D(1);             // Num\r\n * D('1');           // Str\r\n * D(new Date());    // Dat\r\n * D(document.body); // Elem\r\n */\r\nfunction D(value) {\r\n  for (let i = constructors.length - 1; i >= 0; i--) {\r\n    const levelConstructors = constructors[i];\r\n\r\n    for (let k = 0, len = levelConstructors.length; k < len; k++) {\r\n      const constructor = levelConstructors[k];\r\n\r\n      if (value instanceof constructor.cls) {\r\n        return value;\r\n      }\r\n\r\n      if (constructor.check(value)) {\r\n        return new constructor.cls(value);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport * from './helpers/checkTypes';\r\nexport { D };\r\n","/**\r\n * @module helpers/iterate\r\n * @private\r\n * @description Exports iterate method.\r\n */\r\n\r\nimport { isArrayLike, isUndefined } from './checkTypes';\r\n\r\n/**\r\n * @callback IterationCallback\r\n * @param {*} value - Iteration value.\r\n * @param {String|Number} key - Iteration key.\r\n * @param {*} object - Initial iterable object.\r\n */\r\n\r\n/**\r\n * @function iterate\r\n * @param {(Object|Array|null|undefined)} object - Value to iterate over.\r\n * @param {IterationCallback} callback - Callback that is called on every iteration.\r\n * @returns {*} If callback returns not undefined then iterate returns this value.\r\n * @description Function for iterating over all types of values.\r\n */\r\nexport function iterate(object, callback) {\r\n  const array = isArrayLike(object);\r\n  const iteratedKeys = {};\r\n\r\n  let iterated = 0;\r\n\r\n  for (const key in object) {\r\n    if ({}.hasOwnProperty.call(iteratedKeys, key)) {\r\n      continue;\r\n    }\r\n\r\n    iteratedKeys[key] = true;\r\n\r\n    if ({}.hasOwnProperty.call(object, key)) {\r\n      if (array && iterated++ >= object.length) {\r\n        break;\r\n      }\r\n\r\n      const value = callback(object[key], array ? Number(key) : key, object);\r\n\r\n      if (!isUndefined(value)) {\r\n        return value;\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @module helpers/assign\r\n * @private\r\n * @description Exports Object.assign-like method.\r\n */\r\n\r\nimport { iterate } from './iterate';\r\n\r\n/**\r\n * @const\r\n * @function assign\r\n * @param {Object} target - Object to assign rest of arguments to.\r\n * @param {...Object} objects - Objects that are assigned to the target.\r\n * @returns {Object} Target.\r\n */\r\nexport function assign(target, ...objects) {\r\n  iterate(arguments, (source, index) => {\r\n    if (index) {\r\n      iterate(source, (value, key) => {\r\n        target[key] = value;\r\n      });\r\n    }\r\n  });\r\n    \r\n  return target;\r\n}\r\n","/**\r\n * @module helpers/defineProperty\r\n * @private\r\n * @description Exports defineProperty and dynamicDefineProperties methods.\r\n */\r\n\r\nimport { iterate } from './iterate';\r\n\r\n/**\r\n * @callback propertyGeneratorCallback\r\n * @param {String} name - Name of the property.\r\n * @param {Number} i - Index of the array.\r\n * @returns {*} Generated property.\r\n */\r\n\r\n/**\r\n * @function dynamicDefineProperties\r\n * @param {Object} target - Object to define properties for.\r\n * @param {Array} properties - Object which keys are properties.\r\n * @param {propertyGeneratorCallback} propertyGenerator - Callback for every property.\r\n * @returns {void}\r\n * @description Function for dynamic creating properties based on name of the method.\r\n */\r\nexport function dynamicDefineProperties(target, properties, propertyGenerator) {\r\n  iterate(properties, (name, i) => {\r\n    Object.defineProperty(target, name, {\r\n      value: propertyGenerator(name, i),\r\n      writable: true,\r\n      enumerable: false,\r\n      configurable: true\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * @function defineProperties\r\n * @param {Object} target - Target to define properties for.\r\n * @param {Object} properties - Object with properties needed to be assign to the target.\r\n * @returns {void}\r\n * @description Function for defining properties of an object.\r\n */\r\nexport function defineProperties(target, properties) {\r\n  iterate(properties, (method, name) => {\r\n    if (/^get /.test(name)) {\r\n      Object.defineProperty(target, name.replace(/^get /, ''), {\r\n        get: method,\r\n        set: undefined,\r\n        enumerable: false,\r\n        configurable: true\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    if (/^set /.test(name)) {\r\n      Object.defineProperty(target, name.replace(/^set /, ''), {\r\n        set: method,\r\n        get: undefined,\r\n        enumerable: false,\r\n        configurable: true\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    if (/^get\\/set /.test(name)) {\r\n      Object.defineProperty(target, name.replace(/^get\\/set /, ''), {\r\n        get: method.get,\r\n        set: method.set,\r\n        enumerable: false,\r\n        configurable: true\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    if (name !== 'Symbol.toStringTag') {\r\n      Object.defineProperty(target, name, {\r\n        value: method,\r\n        writable: true,\r\n        enumerable: false,\r\n        configurable: true\r\n      });\r\n    }\r\n  });\r\n}\r\n","/**\r\n * @module helpers/toArray\r\n * @private\r\n * @description Exports toArray method.\r\n */\r\n\r\nimport { isArray, isArrayLike, isString } from './checkTypes';\r\nimport { iterate } from './iterate';\r\n\r\n/**\r\n * @function toArray\r\n * @param {*} value - Any value.\r\n * @param {Boolean} [createNewArray = false] - If it is needed to create new array.\r\n * @returns {Array} Create array.\r\n * @description Function for creating an array of any value.\r\n */\r\nexport function toArray(value, createNewArray) {\r\n  if (isArray(value) && !createNewArray) {\r\n    return value;\r\n  }\r\n\r\n  const array = [];\r\n\r\n  if (isArrayLike(value) && !isString(value)) {\r\n    iterate(value, (value) => {\r\n      array.push(value);\r\n    });\r\n  } else {\r\n    array.push(value);\r\n  }\r\n\r\n  return array;\r\n}\r\n","/**\r\n * @module helpers/validate\r\n * @private\r\n * @description Exports validate method.\r\n */\r\n\r\nimport { validateCheckExpressions } from '../constants';\r\nimport { iterate } from './iterate';\r\nimport { isArray } from './checkTypes';\r\n\r\nconst numbers = ['1st', '2nd', '3rd', '4th', '5th', '6th', '7th'];\r\n\r\n/**\r\n * @function validate\r\n * @private\r\n * @param {Object} args - Arguments of function.\r\n * @param {Object} options - Object with validate parameters.\r\n * @param {String} [name] - Name of the function what called validate.\r\n * @returns {void}\r\n * @description Function for checking arguments of other functions.\r\n */\r\nexport function validate(args, options, name) {\r\n  iterate(options, (array, number) => {\r\n    if (!isArray(array)) {\r\n      array = [array];\r\n    }\r\n\r\n    iterate(array, (checker) => {\r\n      checker = validateCheckExpressions[checker];\r\n\r\n      if (!checker.check(args[number])) {\r\n        throw new checker.error(checker.text.replace('$n', numbers[number]) + (name ? ` (at ${ name })` : ''));\r\n      }\r\n    });\r\n  });\r\n}\r\n","/**\r\n * @module Alphabet\r\n * @private\r\n * @mixin\r\n * @description Exports Alphabet class.\r\n */\r\n\r\nimport { isString, validate, defineProperties, Symbol } from './helpers';\r\n\r\n/**\r\n * @typedef {String} Char\r\n * @public\r\n * @description A string of one char.\r\n */\r\n\r\n/**\r\n * @class Alphabet\r\n * @public\r\n * @param {ArrayLike} alphabet - Alphabet to wrap.\r\n * @returns {Alphabet} Instance of Alphabet.\r\n * @description Class for alphabet manipulations: add, delete symbols, generate a token from an alphabet,\r\n * check if an alphabet contains a word.\r\n *\r\n * @example\r\n * new Alphabet(['a', 'b', 'c']);\r\n */\r\nclass Alphabet {\r\n  constructor(alphabet = []) {\r\n    const a = {};\r\n\r\n    for (let i = 0, length = alphabet.length; i < length; i++) {\r\n      const char = alphabet[i];\r\n\r\n      if (!check(char)) {\r\n        throw new Error('Each element of an array must be a single char! (in Alphabet)');\r\n      }\r\n\r\n      a[char] = char;\r\n    }\r\n\r\n    /**\r\n     * @member {Object} Alphabet#$$\r\n     * @public\r\n     * @description The alphabet.\r\n     */\r\n    Object.defineProperty(this, '$$', { value: a });\r\n  }\r\n\r\n  /**\r\n   * @method Alphabet#add\r\n   * @public\r\n   * @param {...Char} chars - Chars to add.\r\n   * @returns {Alphabet} Returns this.\r\n   * @description Method for adding new letters to the alphabet.\r\n   *\r\n   * @example\r\n   * const alphabet = new Alphabet(['a', 'b', 'c']);\r\n   *\r\n   * alphabet.add('d', 'e');\r\n   *\r\n   * alphabet.get().$; // ['a', 'b', 'c', 'd', 'e']\r\n   */\r\n  add(...chars) {\r\n    for (let i = 0, length = chars.length; i < length; i++) {\r\n      const char = chars[i];\r\n\r\n      if (!check(char)) {\r\n        throw new Error('Each argument must be a single char! (in Alphabet#add)');\r\n      }\r\n\r\n      this.$$[char] = char;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Alphabet#contains\r\n   * @public\r\n   * @param {String} word - Word to check if it is in the alphabet or not.\r\n   * @returns {Boolean} If the word in the alphabet or not.\r\n   * @description Method that returns if a word is in alphabet or not.\r\n   *\r\n   * @example\r\n   * const alphabet = new Alphabet(['f', 'b', 'o', 'a', 'r']);\r\n   *\r\n   * alphabet.contains('foo'); // true\r\n   * alphabet.contains('bar'); // true\r\n   * alphabet.contains('baz'); // false\r\n   */\r\n  contains(word) {\r\n    validate([word], ['string'], 'Alphabet#contains');\r\n\r\n    const alphabet = this.$$;\r\n\r\n    for (let i = 0, length = word.length; i < length; i++) {\r\n      if (!alphabet[word[i]]) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @method Alphabet#delete\r\n   * @public\r\n   * @param {...Char} chars - Chars to delete.\r\n   * @returns {Alphabet} Returns this.\r\n   * @description Method for deleting letters from the alphabet.\r\n   *\r\n   * @example\r\n   * const alphabet = new Alphabet(['a', 'b', 'c', 'd']);\r\n   *\r\n   * alphabet.delete('a');\r\n   *\r\n   * alphabet.get().$; // ['b', 'c', 'd']\r\n   *\r\n   * alphabet.delete('b', 'd');\r\n   *\r\n   * alphabet.get().$; // ['c']\r\n   */\r\n  delete(...chars) {\r\n    for (let i = 0, length = chars.length; i < length; i++) {\r\n      const char = chars[i];\r\n\r\n      if (!check(char)) {\r\n        throw new Error('Each argument must be a single char! (in Alphabet#delete)');\r\n      }\r\n\r\n      delete this.$$[char];\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Alphabet#get\r\n   * @returns {Array} Wrap of an array of alphabet letters.\r\n   * @description Method for getting array of alphabet letters.\r\n   *\r\n   * @example\r\n   * new Alphabet(['a', 'b', 'c']).get().$; // ['a', 'b', 'c']\r\n   */\r\n  get() {\r\n    return Object.keys(this.$$);\r\n  }\r\n\r\n  /**\r\n   * @method Alphabet#token\r\n   * @public\r\n   * @param {Number} length - Token length.\r\n   * @returns {String} Token.\r\n   * @description Method for generating random token with given length.\r\n   *\r\n   * @example\r\n   * new Alphabet(['a', 'b', 'c']).token(4); // 'abcb'\r\n   */\r\n  token(length) {\r\n    validate([length], [['intLike', '>0']], 'Alphabet#token');\r\n\r\n    const alphabet = Object.keys(this.$$);\r\n    const len = alphabet.length;\r\n    let token = '';\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      token += alphabet[Math.floor(Math.random() * len)];\r\n    }\r\n\r\n    return token;\r\n  }\r\n}\r\n\r\ndefineProperties(Alphabet.prototype, {\r\n  [Symbol.toStringTag]: 'Alphabet'\r\n});\r\n\r\nfunction check(char) {\r\n  return isString(char) && char.length === 1;\r\n}\r\n\r\n/**\r\n * @function alphabet\r\n * @public\r\n * @param {String} string - String to generate an alphabet from.\r\n * @returns {Alphabet} New instance of Alphabet.\r\n * @description Function for creating an alphabet from a string that has format like this:\r\n * '&lt;char1&gt;-&lt;char2&gt; &lt;char3&gt;-&lt;char4&gt;'\r\n *\r\n * @example\r\n * const a1 = alphabet('a-c 1-3');\r\n * const a2 = alphabet('5-5f-g');\r\n *\r\n * a1.get().$; // ['1', '2', '3', 'a', 'b', 'c']\r\n * a2.get().$; // ['5', 'f', 'g']\r\n */\r\nfunction alphabet(string) {\r\n  validate([string], ['string']);\r\n\r\n  const ranges = string.split(/([\\s\\S]-+[\\s\\S])?/g);\r\n  const length = ranges.length;\r\n  const alphabet = [];\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    const range = ranges[i];\r\n\r\n    if (!range || range === ' ') {\r\n      continue;\r\n    }\r\n\r\n    if (/-/.test(range) && !/[\\s\\S]-+[\\s\\S]/.test(range)) {\r\n      throw new Error(`Wrong part of the string (${ range })! (in alphabet)`);\r\n    }\r\n\r\n    if (/-/.test(range)) {\r\n      const start = range.charCodeAt(0);\r\n      const end = range.charCodeAt(2);\r\n\r\n      if (start > end) {\r\n        throw new Error('Start of the range must be before its end! (in alphabet)');\r\n      }\r\n\r\n      for (let k = 0, len = end - start + 1; k < len; k++) {\r\n        alphabet.push(String.fromCharCode(start + k));\r\n      }\r\n\r\n      continue;\r\n    }\r\n\r\n    if (range.length === 1) {\r\n      alphabet.push(range);\r\n    }\r\n  }\r\n\r\n  return new Alphabet(alphabet);\r\n}\r\n\r\nexport { Alphabet, alphabet };\r\n","/**\r\n * @module Switcher\r\n * @private\r\n * @mixin\r\n * @description Exports Switcher class.\r\n */\r\n\r\nimport {\r\n  isArray, isFunction, isString, isUndefined,\r\n  iterate, Symbol, toArray, defineProperties\r\n} from './helpers';\r\n\r\n/**\r\n * @typedef {'boolean'|'equals'|'strictEquals'|'call'} SwitcherMode\r\n * @public\r\n * @description Enum type of switcher modes.\r\n */\r\n\r\n/**\r\n * @callback SwitcherCallCallback\r\n * @public\r\n * @param {*} value - Switcher value.\r\n * @returns {Boolean|*} On what the callback returns depends if the case is a match (truthy for the match).\r\n */\r\n\r\n/**\r\n * @callback SwitcherMatchCallback\r\n * @public\r\n * @param {...*} args - Arguments from the second argument that switcher was called with.\r\n * @param {*} value - Switcher value.\r\n * @param {*} matched - Switcher matched case.\r\n */\r\n\r\n/**\r\n * @class Switcher\r\n * @public\r\n * @param {Object} [cases = {}] - Object of cases.\r\n * @param {SwitcherMode} [mode = 'equals'] - Switcher mode.\r\n * @param {*} [defaultValue] - Switcher default value.\r\n * @returns {Switcher} - Instance of Switcher.\r\n * @description Switcher class for creating functions working similar to switch (value) {} construction,\r\n * but with the value assignment. Switcher instance is a function that accepts a value argument and an optional\r\n * args argument. Args with additional switcher value and matched case\r\n * are passed into the function of the matched case (if it is a function).\r\n *\r\n * @example\r\n * const switcher = new Switcher();\r\n * const switcher = new Switcher({\r\n *   case1: 'value1',\r\n *   case2: 'value2'\r\n * });\r\n * const switcher = new Switcher('strictEquals');\r\n * const switcher = new Switcher({\r\n *   case1: 'value1',\r\n *   case2: 'value2'\r\n * }, 'strictEquals');\r\n * const switcher = new Switcher('strictEquals', 'defaultValue');\r\n * const switcher = new Switcher({\r\n *   case1: 'value1',\r\n *   case2: 'value2'\r\n * }, 'strictEquals', 'defaultValue');\r\n *\r\n * // See [switcher]{@link switcher} examples for more information.\r\n */\r\nclass Switcher extends Function {\r\n  constructor(cases = {}, mode = 'equals', defaultValue) {\r\n    super();\r\n\r\n    if (isString(cases)) {\r\n      if (!isUndefined(arguments[1])) {\r\n        defaultValue = mode;\r\n      }\r\n\r\n      mode = cases;\r\n      cases = {};\r\n    }\r\n\r\n    const eventualCases = [];\r\n\r\n    iterate(cases, (value, Case) => {\r\n      eventualCases.push({ case: Case, value });\r\n    });\r\n\r\n    function switcher(value, args = []) {\r\n      const { mode, default: def, cases } = switcher.$$;\r\n\r\n      let ret = iterate(cases, ({ value: val, case: Case }) => {\r\n        if (\r\n          (mode === 'boolean' && Case) ||\r\n          /* eslint eqeqeq: 0 */\r\n          (mode === 'equals' && Case == value) ||\r\n          (mode === 'strictEquals' && Case === value) ||\r\n          (mode === 'call' && Case(value))\r\n        ) {\r\n          return { case: Case, value: val };\r\n        }\r\n      });\r\n\r\n      if (isUndefined(ret)) {\r\n        ret = { value: def };\r\n      }\r\n\r\n      if (!isFunction(ret.value)) {\r\n        return ret.value;\r\n      }\r\n\r\n      args = toArray(args, true);\r\n      args.push(value, ret.case);\r\n\r\n      return ret.value.apply(null, args);\r\n    }\r\n\r\n    /**\r\n     * @member Switcher#$$\r\n     * @type {Object}\r\n     * @protected\r\n     * @property {Array} cases - Array of cases.\r\n     * @property {SwitcherMode} mode - Switcher mode.\r\n     * @property {*} default - Switcher default value.\r\n     * @description Config parameters.\r\n     */\r\n    Object.defineProperty(switcher, '$$', {\r\n      value: {\r\n        cases: eventualCases,\r\n        mode,\r\n        default: defaultValue\r\n      }\r\n    });\r\n    Object.setPrototypeOf(switcher, Switcher.prototype);\r\n\r\n    return switcher;\r\n  }\r\n\r\n  /**\r\n   * @method Switcher#case\r\n   * @public\r\n   * @param {*|SwitcherCallCallback|Array.<*|SwitcherCallCallback>} cases - Case or an array of cases.\r\n   * @param {*|SwitcherMatchCallback} value - Value that has to be assigned or a function\r\n   * that is called with switcher value, if it's the case.\r\n   * @returns {Switcher} Returns this.\r\n   * @description Method for defining new cases.\r\n   *\r\n   * @example\r\n   * const sw = new Switcher()\r\n   *   .case(1, 'one')\r\n   *   .case(2, 'two');\r\n   *\r\n   * sw(1); // 'one'\r\n   * sw(2); // 'two'\r\n   */\r\n  case(cases, value) {\r\n    if (!isArray(cases)) {\r\n      cases = [cases];\r\n    }\r\n\r\n    iterate(cases, (Case) => {\r\n      this.$$.cases.push({ case: Case, value });\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Switcher#default\r\n   * @public\r\n   * @param {*} def - New default value.\r\n   * @returns {Switcher} Returns this.\r\n   * @description Method for redefining default switcher value.\r\n   *\r\n   * @example\r\n   * const sw = new Switcher()\r\n   *   .case(1, 'one')\r\n   *   .default('three');\r\n   *\r\n   * sw(1); // 'one'\r\n   * sw(2); // 'three'\r\n   */\r\n  default(def) {\r\n    this.$$.default = def;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Switcher#mode\r\n   * @public\r\n   * @param {SwitcherMode} mode - New switcher mode.\r\n   * @returns {Switcher} Returns this.\r\n   * @description Method for redefining switcher mode.\r\n   *\r\n   * @example\r\n   * const sw = new Switcher()\r\n   *   .mode('strictEquals')\r\n   *   .case(1, 'number')\r\n   *   .case('1', 'string');\r\n   *\r\n   * sw(1);   // 'number'\r\n   * sw('1'); // 'string'\r\n   */\r\n  mode(mode) {\r\n    this.$$.mode = mode;\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\ndefineProperties(Switcher.prototype, {\r\n  [Symbol.toStringTag]: 'Switcher'\r\n});\r\n\r\n/**\r\n * @function switcher\r\n * @public\r\n * @param {Object} [cases = {}] - Object of cases.\r\n * @param {SwitcherMode} [mode = 'equals'] - Switcher mode.\r\n * @param {*} [defaultValue] - Switcher default value.\r\n * @returns {Switcher} New instance of Switcher.\r\n * @description Simple wrap of [new Switcher(...)]{@link Switcher}.\r\n * \r\n * @example\r\n * const sw = switcher({\r\n *   1: 'foo',\r\n *   2: 'bar'\r\n * });\r\n * sw(1); // 'foo'\r\n * sw(2); // 'bar'\r\n * sw(3); // undefined\r\n * \r\n * @example\r\n * const sw = switcher()\r\n *   .case([1, 2], 'foo')\r\n *   .case(3, 'bar');\r\n *   \r\n * sw(1); // 'foo'\r\n * sw(2); // 'foo'\r\n * sw(3); // 'bar'\r\n * \r\n * @example\r\n * const sw = switcher('call')\r\n *   .case(isArray, 'array')\r\n *   .case(isString, 'string')\r\n *   .case(isNumber, 'number')\r\n *   .default('rest');\r\n *   \r\n * sw([]);    // 'array'\r\n * sw('foo'); // 'string'\r\n * sw(123);   // 'number'\r\n * sw({});    // 'rest'\r\n * \r\n * @example\r\n * const sw = switcher({\r\n *   1: (value) => {\r\n *     console.log(value + 1);\r\n *   },\r\n *   2: () => {\r\n *     console.log(value - 1);\r\n *   }\r\n * });\r\n * \r\n * sw(1); // 2\r\n * sw(2); // 1\r\n * \r\n * @example\r\n * const sw = switcher({\r\n *   first: (array) => array[0],\r\n *   last: (array) => array[array.length - 1]\r\n * }, 'equals', (array, index) => array[index]);\r\n * const array = [1, 2, 3, 4];\r\n * \r\n * sw('first', [array]); // 1\r\n * sw('last', [array]);  // 4\r\n * sw(1, [array]);       // 2\r\n * sw(2, [array]);       // 3\r\n */\r\nfunction switcher(cases, mode, defaultValue) {\r\n  return new Switcher(...arguments);\r\n}\r\n\r\n/**\r\n * @function when\r\n * @public\r\n * @param {Boolean|*} condition - Condition used for returning the proper value.\r\n * @param {*} value1 - Value if the condition is truthy.\r\n * @param {*} value2 - Value if the condition is falsey.\r\n * @returns {*} value1 or value2.\r\n * @description Synonym for\r\n * [ternary operator]{@link https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference/Operators/Conditional_Operator}.\r\n * \r\n * @example\r\n * when(true, 'true', 'false'); // 'true'\r\n */\r\nfunction when(condition, value1, value2) {\r\n  return condition ? value1 : value2;\r\n}\r\n\r\nexport { Switcher, switcher, when };\r\n","/**\r\n * @module Super\r\n * @private\r\n * @mixin\r\n * @description Exports Super class.\r\n */\r\n\r\nimport { D } from './D';\r\nimport { switcher } from './Switcher';\r\nimport { constructors } from './constants/constructors';\r\nimport {\r\n  isArray, isArrayLike, isDate, isElement, isFunction, isNil, isNaN, isNull,\r\n  isObject, isPlainObject, isPrimitive, isRegExp, isString, isUndefined,\r\n  validate, toStringTag, iterate, Symbol, defineProperties\r\n} from './helpers';\r\n\r\n/**\r\n * @typedef {Super|Arr|Func|Elem|Str|Num|Dat|BlobObject} DWrap\r\n * @public\r\n * @description Any kind of D-Wrap.\r\n */\r\n\r\n/**\r\n * @typedef {String|Number|null} Key\r\n * @public\r\n * @description Key type used in many methods.\r\n */\r\n\r\n/**\r\n * @typedef {TreeElement[]} Tree\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {Object} TreeElement\r\n * @public\r\n * @property {Key} key - Tree element key.\r\n * @property {*} value - Tree element value.\r\n * @description {@link Tree} element.\r\n */\r\n\r\n/**\r\n * @callback DeepIterationCallback\r\n * @public\r\n * @param {*} value - Current iteration value.\r\n * @param {String|Number} key - Current iteration key/index.\r\n * @param {*} object - Iteration object.\r\n * @param {Tree} tree - Tree of { key, value } elements.\r\n */\r\n\r\n/**\r\n * @callback DeepReduceCallback\r\n * @public\r\n * @param {*} previousValue - Previous value.\r\n * @param {*} value - Current iteration value.\r\n * @param {String|Number} key - Current iteration key/index.\r\n * @param {*} object - Iteration object.\r\n * @param {Tree} tree - Tree of { key, value } elements.\r\n */\r\n\r\n/**\r\n * @callback IterationCallback\r\n * @public\r\n * @param {*} value - Current iteration value.\r\n * @param {String|Number} key - Current iteration key/index.\r\n * @param {*} object - Iteration object.\r\n */\r\n\r\n/**\r\n * @callback JSONCallback\r\n * @public\r\n * @param {String|null} key - Current value.\r\n * @param {*} value - Current key.\r\n * @param {Object} object - Iteration object.\r\n */\r\n\r\n/**\r\n * @callback ObjectCallback\r\n * @public\r\n * @param {Object} newObject - The new object.\r\n * @param {*} value - Current iteration value.\r\n * @param {String|Number} key - Current iteration key/index.\r\n * @param {*} object - Iteration object.\r\n */\r\n\r\n/**\r\n * @callback ReduceCallback\r\n * @public\r\n * @param {*} previousValue - Previous value.\r\n * @param {*} value - Current iteration value.\r\n * @param {String|Number} key - Current iteration key/index.\r\n * @param {*} object - Iteration object.\r\n */\r\n\r\n/**\r\n * @callback SuperMethod\r\n * @public\r\n * @this {DWrap}\r\n */\r\n\r\nconst cloneSwitcher = switcher('call', (object) => object)\r\n  .case(\r\n    (object) => new Super(object) === object,\r\n    (object) => new (Object.getPrototypeOf(object).constructor)(new Super(object.$).deepClone().$)\r\n  )\r\n  .case(isElement, (object, deep) => object.clone(deep))\r\n  .case(isDate, (object) => new Date(object))\r\n  .case(isRegExp, (object) => new RegExp(object.source, object.toString().match(/[gimuy]*$/)[0]))\r\n  .case(isArray, () => [])\r\n  .case(isPlainObject, () => ({}));\r\n\r\n/**\r\n * @class Super\r\n * @public\r\n * @param {*} [object] - An object to wrap.\r\n * @returns {DWrap} Instance of Super.\r\n * @description Wrap of any value. And there is no way to create a nested wrap.\r\n *\r\n * @example\r\n * new Super({}); // Super\r\n */\r\nclass Super {\r\n  constructor(object) {\r\n    if (object instanceof Super) {\r\n      return object;\r\n    }\r\n\r\n    /**\r\n     * @member Super#$\r\n     * @type {*}\r\n     * @public\r\n     * @description Wrapped object.\r\n     */\r\n    Object.defineProperty(this, '$', { value: object });\r\n  }\r\n\r\n  /**\r\n   * @method Super.addStaticProperties\r\n   * @public\r\n   * @param {String|Object} property - Either a string of a property or an object\r\n   * with properties keys and values values.\r\n   * @param {Object} [value] - If a property parameter is a string this has to be a property value.\r\n   * @returns {this} Returns this.\r\n   * @description Sets static properties for DWrap constructors.\r\n   *\r\n   * @example\r\n   * Super.addStaticProperties('cool', 42);\r\n   * Super.addStaticProperties('superCool', 42*42);\r\n   */\r\n  static addStaticProperties(property, value) {\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: value };\r\n    }\r\n\r\n    defineProperties(this, property);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super.addInstanceProperties\r\n   * @public\r\n   * @param {String|Object} property - Either a string of a property or an object\r\n   * with properties keys and values values.\r\n   * @param {Object} [value] - If a property parameter is a string this has to be a property value.\r\n   * @returns {this} Returns this.\r\n   * @description Sets static properties for DWrap prototypes.\r\n   *\r\n   * @example\r\n   * Super.addInstanceProperties('cool', 42);\r\n   * Super.addInstanceProperties('superCool', 42*42);\r\n   */\r\n  static addInstanceProperties(property, value) {\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: value };\r\n    }\r\n\r\n    defineProperties(this.prototype, property);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#assign\r\n   * @public\r\n   * @param {...(Object|Super|*)} objects - Objects to be assigned to the object.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Synonym for\r\n   * [Object.assign]\r\n   * {@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2 }).assign({ a: 3 }, { c: 3, d: 4 }, { d: 5 }).$; // { a: 3, b: 2, c: 3, d: 5 }\r\n   */\r\n  assign(...objects) {\r\n    const object = this.$;\r\n\r\n    iterate(object && arguments, (o) => {\r\n      iterate(new Super(o).$, (value, key) => {\r\n        object[key] = value;\r\n      });\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#average\r\n   * @public\r\n   * @param {IterationCallback} [callback = null] - Callback that is passed to {@link Super#sum}.\r\n   * @returns {Number} Average value.\r\n   * @description Synonym for object.sum(callback) / object.count.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).average();                         // 2\r\n   * new Super({ a: 1, b: 2, c: 5 }).average((value) => value * value); // 10\r\n   */\r\n  average(callback = null) {\r\n    validate([callback], ['function||!'], 'Super#average');\r\n\r\n    return this.sum(callback) / this.count;\r\n  }\r\n\r\n  /**\r\n   * @method Super#call\r\n   * @public\r\n   * @param {SuperMethod} func - Function to be called with this context.\r\n   * @param {...*} args - Arguments to be called with.\r\n   * @returns {*} Return of function call.\r\n   * @description Synonym for func.call(DObject, ...args);\r\n   *\r\n   * @example\r\n   * new Super({ a: 1 }).call(function (b, c) {\r\n   *   return this.a + b + c;\r\n   * }, 2, 3); // 6\r\n   */\r\n  call(func, ...args) {\r\n    validate([func], ['function'], 'Super#call');\r\n\r\n    return func.apply(this, args);\r\n  }\r\n\r\n  /**\r\n   * @method Super#clone\r\n   * @returns {DWrap} New object.\r\n   * @description Method assigns properties of the object to an empty one and returns the new one.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2 } }).clone().$; // { a: 1, b: { c: 2 } }\r\n   */\r\n  clone() {\r\n    const object = this.$;\r\n    const clone = cloneSwitcher(object, [object, false]);\r\n\r\n    if (clone !== object) {\r\n      iterate(object, (value, key) => {\r\n        clone[key] = value;\r\n      });\r\n    }\r\n\r\n    return new this.constructor(clone);\r\n  }\r\n\r\n  /**\r\n   * @member Super#count\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description Returns number of own enumerable keys of the object.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2 }).count; // 2\r\n   */\r\n  get count() {\r\n    const object = this.$;\r\n\r\n    if (!isObject(object)) {\r\n      return 0;\r\n    }\r\n\r\n    return isArrayLike(object) ? object.length : Object.keys(object).length;\r\n  }\r\n\r\n  /**\r\n   * @method Super#create\r\n   * @public\r\n   * @param {Object} [descriptors] - Descriptors passed to Object.create.\r\n   * @returns {DWrap} New instance of D-Wrap.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create\r\n   * @description Synonym for\r\n   * [Object.create]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create}.\r\n   *\r\n   * @example\r\n   * new Super({}).create({\r\n   *   a: {\r\n   *     value: 1,\r\n   *     enumerable: false,\r\n   *     writable: true,\r\n   *     configurable: false\r\n   *   }\r\n   * }).$; // { a: 1 }\r\n   */\r\n  create(descriptors) {\r\n    return D(isPrimitive(this.$) ? undefined : Object.create(this.$, descriptors));\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepAssign\r\n   * @public\r\n   * @param {...*} objects - Objects to be assigned to the object.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Deep analogue of {@link Super#assign}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1 }).deepAssign(\r\n   *   {\r\n   *     b: {\r\n   *       c: 2\r\n   *     }\r\n   *   },\r\n   *   {\r\n   *     a: {\r\n   *       b: 1\r\n   *     }\r\n   *   },\r\n   *   {\r\n   *     a: {\r\n   *       c: {\r\n   *         d: 1\r\n   *       }\r\n   *     },\r\n   *     b: 2\r\n   *   },\r\n   *   null\r\n   * });\r\n   * // {\r\n   * //   a: {\r\n   * //     b: 1,\r\n   * //     c: {\r\n   * //       d: 1\r\n   * //     }\r\n   * //   },\r\n   * //   b: 2,\r\n   * // }\r\n   */\r\n  deepAssign(...objects) {\r\n    const object = this.$;\r\n\r\n    if (isPrimitive(object)) {\r\n      return this;\r\n    }\r\n\r\n    iterate(arguments, (o) => {\r\n      deepAssign(object, o);\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepClone\r\n   * @public\r\n   * @returns {DWrap} New instance of DWrap.\r\n   * @description Deep cloning method. Clones plain objects, arrays, regular expressions and elements, the rest stays the same.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: [2, 3], c: { d: 4 } }).deepClone().$;\r\n   * // {\r\n   * //   a: 1,\r\n   * //   b: [2, 3],\r\n   * //   c: { d: 4 }\r\n   * // }\r\n   */\r\n  deepClone() {\r\n    return new this.constructor(deepClone(this.$));\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepEquals\r\n   * @public\r\n   * @param {*} [object] - Object to compare to.\r\n   * @returns {Boolean} - If the objects are deep equal or not.\r\n   * @description Method for deep comparison of two objects.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1 }).deepEquals({ a: '1' }); // true\r\n   * new Super(/1/).deepEquals(/1/);             // true\r\n   */\r\n  deepEquals(object = null) {\r\n    return deepEqual(this.$, object, false);\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepEvery\r\n   * @public\r\n   * @param {DeepIterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy iteration goes on and if falsey it stops.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {Boolean} If all the callback calls returned truthy value.\r\n   * @description Returns boolean if all the callback calls returned truthy value.\r\n   * Otherwise false. Deep analogue of {@link Super#every}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepEvery((value) => value < 4); // true\r\n   * new Super({ a: {}, b: {}, c: {} }).deepEvery(() => false);              // true\r\n   */\r\n  deepEvery(callback, n) {\r\n    if (arguments.length === 1 && !isFunction(callback)) {\r\n      n = callback;\r\n      callback = Boolean;\r\n    } else if (arguments.length === 1) {\r\n      n = Infinity;\r\n    } else if (!arguments.length) {\r\n      n = Infinity;\r\n      callback = Boolean;\r\n    }\r\n\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepEvery');\r\n\r\n    n = Number(n);\r\n\r\n    return deepEvery(this.$, callback, n, [{ key: null, value: this.$ }]);\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepFilter\r\n   * @public\r\n   * @param {DeepIterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy the element is included and if falsey it's excluded.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {DWrap} New D-Wrap of filtered object.\r\n   * @description Returns filtered by the callback object. Deep analogue of {@link Super#filter}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFilter((value) => value%2).$;     // { a: 1, b: { d: 3 } }\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFilter((value) => value === 1).$; // { a: 1 }\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFilter((value) => value > 3).$;   // {}\r\n   */\r\n  deepFilter(callback, n) {\r\n    if (arguments.length === 1 && !isFunction(callback)) {\r\n      n = callback;\r\n      callback = Boolean;\r\n    } else if (arguments.length === 1) {\r\n      n = Infinity;\r\n    } else if (!arguments.length) {\r\n      n = Infinity;\r\n      callback = Boolean;\r\n    }\r\n\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepFilter');\r\n\r\n    const filtered = deepFilter(this.$, callback, n, [{ key: null, value: this.$ }]);\r\n\r\n    return D(isNil(filtered) ? filtered : filtered || {});\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepFind\r\n   * @public\r\n   * @param {DeepIterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy iteration stops and if falsey it continues.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {Tree|null} Tree of { key, value } if something found and null if not.\r\n   * @description Returns tree of the elements if something found and null if nothing found.\r\n   * Deep analogue of {@link Super#find}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFind((value) => value === 2);\r\n   * // [\r\n   * //   { key: 'c', value: 2 },\r\n   * //   { key: 'b', value: { c: 2, d: 3 } },\r\n   * //   { key: null, value: <initial object> }\r\n   * // ]\r\n   */\r\n  deepFind(callback, n) {\r\n    if (arguments.length === 1 && !isFunction(callback)) {\r\n      n = callback;\r\n      callback = Boolean;\r\n    } else if (arguments.length === 1) {\r\n      n = Infinity;\r\n    } else if (!arguments.length) {\r\n      n = Infinity;\r\n      callback = Boolean;\r\n    }\r\n\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepFind');\r\n\r\n    return deepFind(this.$, callback, n, [{ key: null, value: this.$ }]);\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepForEach\r\n   * @public\r\n   * @param {DeepIterationCallback} callback - Called on each iteration.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Method for iterating over any object. Deep analogue of {@link Super#forEach}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepForEach((value, key, object) => object[key] = value * value).$;\r\n   * // { a: 1, b: { c: 4, d: 9 } }\r\n   */\r\n  deepForEach(callback, n = Infinity) {\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepForEach');\r\n\r\n    n = Number(n);\r\n\r\n    deepForEach(this.$, callback, n, [{ key: null, value: this.$ }]);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepForEach\r\n   * @public\r\n   * @param {DeepIterationCallback} callback - Called on each iteration.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Method for iterating over any object. Deep analogue of {@link Super#forEach}.\r\n   * Unlike {@link Super#deepForEach} the callback is called on every value of every object inside\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepForEach((value, key, object) => object[key] = value * value).$;\r\n   * // { a: 1, b: { c: 4, d: 9 } }\r\n   */\r\n  deepForEachEntry(callback, n = Infinity) {\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepForEach');\r\n\r\n    n = Number(n);\r\n\r\n    deepForEachEntry(this.$, callback, n, [{ key: null, value: this.$ }]);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepFreeze\r\n   * @public\r\n   * @returns {DWrap} Returns this.\r\n   * @description Deep analogue of {@link Super#freeze}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFreeze(); // Super\r\n   */\r\n  deepFreeze() {\r\n    deepFreeze(this.$);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepMap\r\n   * @public\r\n   * @param {DeepIterationCallback} callback - Called on each iteration.\r\n   * Return value is used for creating a new object.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {DWrap} D-Wrap of the new object.\r\n   * @description Returns a wrap of a new object using the callback. Deep analogue of {@link Super#map}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepMap((value) => value * value).$;\r\n   * // { a: 1, b: { c: 4, d: 9 } }\r\n   */\r\n  deepMap(callback, n = Infinity) {\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepMap');\r\n\r\n    n = Number(n);\r\n\r\n    return D(deepMap(this.$, callback, n, [{ key: null, value: this.$ }]));\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepReduce\r\n   * @public\r\n   * @param {DeepReduceCallback} callback - Called on each iteration.\r\n   * Return value is passed to the next callback call.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @param {*} [IV = <first value>|undefined] - Initial value.\r\n   * @returns {*} Modified IV.\r\n   * @description Returns modified IV. Deep analogue of {@link Super#reduce}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepReduce((sum, value) => sum + value * value, Infinity, 0); // 14\r\n   */\r\n  deepReduce(callback, n = Infinity, IV) {\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepReduce');\r\n\r\n    n = Number(n);\r\n\r\n    const object = this.$;\r\n    const tree = [{ key: null, value: this.$ }];\r\n\r\n    if (arguments.length < 3) {\r\n      return deepReduce(object, callback, n, false, undefined, tree).IV;\r\n    }\r\n\r\n    return deepReduce(object, callback, n, false, { IV }, tree).IV;\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepSome\r\n   * @public\r\n   * @param {DeepIterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy iteration stops and if falsey it continues.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {Boolean} If all the callback calls returned truthy value.\r\n   * @description Returns true if some of the callback calls returned truthy value.\r\n   * Otherwise false. Deep analogue of {@link Super#some}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepSome((value) => value > 4); // false\r\n   * new Super({ a: {}, b: {}, c: {} }).deepSome(() => true);               // false\r\n   */\r\n  deepSome(callback, n) {\r\n    if (arguments.length === 1 && !isFunction(callback)) {\r\n      n = callback;\r\n      callback = Boolean;\r\n    } else if (arguments.length === 1) {\r\n      n = Infinity;\r\n    } else if (!arguments.length) {\r\n      n = Infinity;\r\n      callback = Boolean;\r\n    }\r\n\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepSome');\r\n\r\n    n = Number(n);\r\n\r\n    return deepSome(this.$, callback, n, [{ key: null, value: this.$ }]);\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepStrictEquals\r\n   * @public\r\n   * @param {*} [object] - Object to compare to.\r\n   * @returns {Boolean} - If the objects are deep strict equal or not.\r\n   * @description Method for deep strict comparison of two objects.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1 }).deepStrictEquals({ a: '1' }); // false\r\n   * new Super(/1/).deepStrictEquals(/1/);             // true\r\n   */\r\n  deepStrictEquals(object = null) {\r\n    return deepEqual(this.$, object, true);\r\n  }\r\n\r\n  /**\r\n   * @method Super#define\r\n   * @param {String|Object} property - Either a string of a property or a descriptors object.\r\n   * @param {Object} [descriptor] - If a property parameter is a string this has to be a property descriptor.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Synonym for both\r\n   * [Object.defineProperty]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty}\r\n   * and\r\n   * [Object.defineProperties]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties}.\r\n   *\r\n   * @example\r\n   * new Super({}).define('a', {\r\n   *   value: 1,\r\n   *   enumerable: false,\r\n   *   writable: true,\r\n   *   configurable: false\r\n   * }).$; // { a: 1 }\r\n   * new Super({}).define({\r\n   *   a: {\r\n   *     value: 1,\r\n   *     enumerable: false,\r\n   *     writable: true,\r\n   *     configurable: false\r\n   *   }\r\n   * }).$; // { a: 1 }\r\n   */\r\n  define(property, descriptor) {\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: descriptor };\r\n    }\r\n\r\n    property = new Super(property).$;\r\n\r\n    if (isObject(this.$)) {\r\n      Object.defineProperties(this.$, property);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#delete\r\n   * @public\r\n   * @param {...String} props - List of properties to delete.\r\n   * @returns {DWrap} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/delete\r\n   * @description Synonym for multiple\r\n   * [\"delete\" operator]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/delete}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).delete('c', 'a').$; // { b: 2 }\r\n   */\r\n  delete(...props) {\r\n    const object = this.$;\r\n\r\n    iterate(object && props, (property) => {\r\n      delete object[property];\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#equals\r\n   * @public\r\n   * @param {*} [object] - Object to compare.\r\n   * @returns {Boolean} If the objects are equal or not.\r\n   * @description Returns true if objects are equal using '==' operator and false if not. NaNs are considered to be equal.\r\n   *\r\n   * @example\r\n   * new Super(3).equals('3');   // true\r\n   * new Super(NaN).equals(NaN); // true\r\n   */\r\n  equals(object) {\r\n    const o = this.$;\r\n\r\n    object = new Super(object).$;\r\n\r\n    /* eslint eqeqeq: 0 */\r\n    return o == object || (isNaN(o) && isNaN(object));\r\n  }\r\n\r\n  /**\r\n   * @method Super#every\r\n   * @public\r\n   * @param {IterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy iteration goes on and if falsey it stops.\r\n   * @returns {Boolean} If all the callback calls returned truthy value.\r\n   * @description Returns boolean if all the callback calls returned truthy value.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).every((value) => value < 4); // true\r\n   * new Super({}).every(() => false);                            // true\r\n   */\r\n  every(callback = Boolean) {\r\n    validate([callback], ['function'], 'Super#every');\r\n\r\n    return iterate(this.$, (value, key, object) => {\r\n      if (!callback(value, key, object)) {\r\n        return false;\r\n      }\r\n    }) !== false;\r\n  }\r\n\r\n  /**\r\n   * @method Super#filter\r\n   * @public\r\n   * @param {IterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy the element is included and if falsey it's excluded.\r\n   * @returns {DWrap} New D-Wrap of filtered object.\r\n   * @description Returns filtered by the callback object.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).filter((value) => value%2).$; // { a: 1, c: 3 }\r\n   * new Super(null).filter((value) => value%2).$;                 // null\r\n   */\r\n  filter(callback = Boolean) {\r\n    validate([callback], ['function'], 'Super#filter');\r\n\r\n    const object = this.$;\r\n    const array = isArrayLike(object);\r\n\r\n    /* eslint no-nested-ternary: 0 */\r\n    const o = array ? [] : isNil(object) ? object : {};\r\n\r\n    iterate(object, (value, key) => {\r\n      if (callback(value, key, object)) {\r\n        if (array) {\r\n          o.push(value);\r\n        } else {\r\n          o[key] = value;\r\n        }\r\n      }\r\n    });\r\n\r\n    return D(o);\r\n  }\r\n\r\n  /**\r\n   * @method Super#find\r\n   * @public\r\n   * @param {IterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy iteration stops and if falsey it continues.\r\n   * @returns {{ key: Key, value: * }|null} { key, value } if found and null if not.\r\n   * @description Returns found { key, value } if something found and null if nothing found.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).find((value) => value === 2); // { key: 'b', value: 2 }\r\n   * new Super([1, 2, 3]).find((value) => value === 2);            // { key: 1, value: 2 }\r\n   */\r\n  find(callback) {\r\n    validate([callback], ['function'], 'Super#find');\r\n\r\n    return iterate(this.$, (value, key, object) => {\r\n      if (callback(value, key, object)) {\r\n        return { key, value };\r\n      }\r\n    }) || null;\r\n  }\r\n\r\n  /**\r\n   * @method Super#forEach\r\n   * @public\r\n   * @param {IterationCallback} callback - Called on each iteration.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Method for iterating over any object.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).forEach((value, key, object) => {\r\n   *   object[key] = value * value;\r\n   * }).$; // { a: 1, b: { c: 4, d: 5 } }\r\n   */\r\n  forEach(callback) {\r\n    validate([callback], ['function'], 'Super#forEach');\r\n\r\n    iterate(this.$, (value, key, object) => {\r\n      callback(value, key, object);\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#freeze\r\n   * @public\r\n   * @returns {DWrap} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\r\n   * @description Synonym for\r\n   * [Object.freeze]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).freeze(); // Super\r\n   */\r\n  freeze() {\r\n    Object.freeze(this.$);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#get\r\n   * @public\r\n   * @param {String|Object.<String, Function>} property - Either a string of a property or a getters object.\r\n   * @param {Function} [getter] - If a property parameter is a string this has to be a getter function.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Method for defining getters.\r\n   *\r\n   * @example\r\n   * const object1 = new Super({}).get('a', () => 1).$;\r\n   * object1.a; // 1\r\n   *\r\n   * const object2 = new Super({}).get({\r\n   *   a: () => 2\r\n   * }).$;\r\n   * object2.a; // 2\r\n   */\r\n  get(property, getter) {\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: getter };\r\n    }\r\n\r\n    const object = this.$;\r\n\r\n    iterate(isObject(object) && new Super(property).$, (getter, property) => {\r\n      Object.defineProperty(object, property, { get: getter });\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#has\r\n   * @public\r\n   * @param {String|*} key - Property to check.\r\n   * @returns {Boolean} Returns true if the object has the key and false if not.\r\n   * @see https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/in\r\n   * @description Synonym for\r\n   * [\"in\" operator]{@link https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/in}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).has('b'); // true\r\n   */\r\n  has(key) {\r\n    const object = this.$;\r\n\r\n    if (!isObject(object)) {\r\n      return false;\r\n    }\r\n\r\n    return key in object;\r\n  }\r\n\r\n  /**\r\n   * @method Super#hasOwn\r\n   * @public\r\n   * @param {String|*} key - Property to check.\r\n   * @returns {Boolean} Returns true if the object has its own key and false if not.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\r\n   * @description Synonym for\r\n   * [Object#hasOwnProperty]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).hasOwn('b');              // true\r\n   * new Super({ a: 1, b: 2, c: 3 }).hasOwn('hasOwnProperty'); // false\r\n   */\r\n  hasOwn(key) {\r\n    const object = this.$;\r\n\r\n    if (!isObject(object)) {\r\n      return false;\r\n    }\r\n\r\n    return {}.hasOwnProperty.call(object, key);\r\n  }\r\n\r\n  /**\r\n   * @method Super#instanceof\r\n   * @public\r\n   * @param {Function} constructor - Constructor to check.\r\n   * @returns {Boolean} If the object is an instance of constructor.\r\n   * @see https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/instanceof\r\n   * @description Synonym for\r\n   * [\"instanceof\" operator]{@link https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/instanceof}.\r\n   */\r\n  instanceof(constructor) {\r\n    return this.$ instanceof constructor;\r\n  }\r\n\r\n  /**\r\n   * @method Super#isFrozen\r\n   * @public\r\n   * @returns {Boolean} If the object is frozen.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\r\n   * @description Synonym for\r\n   * [Object.isFrozen]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen}.\r\n   *\r\n   * @example\r\n   * new Super({}).freeze().isFrozen(); // true\r\n   */\r\n  isFrozen() {\r\n    return Object.isFrozen(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Super#json\r\n   * @public\r\n   * @param {JSONCallback|String[]} [replacer] - See the link.\r\n   * @param {String|Number} [space] - See the link.\r\n   * @returns {String} JSON string.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\r\n   * @description Synonym for\r\n   * [JSON.stringify]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).json(); // '{\"a\":1,\"b\":2,\"c\":3}'\r\n   * new Super({ a: 1, b: 2, c: 3 }).json('    ');\r\n   * // {\r\n   * //     \"a\": 1,\r\n   * //     \"b\": 2,\r\n   * //     \"c\": 3\r\n   * // }\r\n   * new Super({ a: 1, b: 2, c: 3 }).json((key, value) => {\r\n   *   if (typeof value === 'number') {\r\n   *     return value%2 ? key + value0 : undefined;\r\n   *   }\r\n   *\r\n   *   return value;\r\n   * }, 2);\r\n   * // {\r\n   * //   \"a\": \"a1\",\r\n   * //   \"c\": \"c3\"\r\n   * // }\r\n   */\r\n  json(replacer, space) {\r\n    if (arguments.length === 1 && !isFunction(replacer) && !isArray(replacer)) {\r\n      [].unshift.call(arguments, null);\r\n    }\r\n\r\n    [].unshift.call(arguments, this.$);\r\n\r\n    return JSON.stringify.apply(JSON, arguments);\r\n  }\r\n\r\n  /**\r\n   * @method Super#keyOf\r\n   * @public\r\n   * @param {*} value - Value to find.\r\n   * @returns {String|Number|null} A key or an index if found and null if not.\r\n   * @description Method for finding equal to the argument value in the object. NaNs are considered to be equal.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).keyOf(2);   // 'b'\r\n   * new Super({ a: 1, b: 2, c: 3 }).keyOf('2'); // 'b'\r\n   */\r\n  keyOf(value) {\r\n    const key = iterate(this.$, (val, key) => {\r\n      if (val == value || (isNaN(val) && isNaN(value))) {\r\n        return key;\r\n      }\r\n    });\r\n\r\n    return isUndefined(key) ? null : key;\r\n  }\r\n\r\n  /**\r\n   * @method Super#keyOfStrict\r\n   * @public\r\n   * @param {*} value - Value to find.\r\n   * @returns {String|Number|null} A key or an index if found and null if not.\r\n   * @description Method for finding strict equal to the argument value in the object. NaNs are considered to be equal.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).keyOfStrict(2);   // 'b'\r\n   * new Super({ a: 1, b: 2, c: 3 }).keyOfStrict('2'); // 'b'\r\n   */\r\n  keyOfStrict(value) {\r\n    const key = iterate(this.$, (val, key) => {\r\n      if (val === value || (isNaN(val) && isNaN(value))) {\r\n        return key;\r\n      }\r\n    });\r\n\r\n    return isUndefined(key) ? null : key;\r\n  }\r\n\r\n  /**\r\n   * @method Super#keys\r\n   * @public\r\n   * @returns {DWrap} A wrap of the keys array.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\r\n   * @description Synonym for\r\n   * [Object.keys]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/keys}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).keys().$; // ['a', 'b', 'c']\r\n   * new Super(null).keys().$;                 // []\r\n   */\r\n  keys() {\r\n    const object = this.$;\r\n\r\n    return D(isObject(object) ? Object.keys(object) : []);\r\n  }\r\n\r\n  /**\r\n   * @method Super#map\r\n   * @public\r\n   * @param {IterationCallback} callback - Called on each iteration.\r\n   * Return value is used for creating a new object.\r\n   * @returns {DWrap} D-Wrap of the new object.\r\n   * @description Returns a wrap of a new object using the callback.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).map((value) => value * 2).$; // { a: 2, b: 4, c: 6 }\r\n   * new Super(null).map((value) => value * 2).$;                 // null\r\n   */\r\n  map(callback) {\r\n    validate([callback], ['function'], 'Super#map');\r\n\r\n    const object = this.$;\r\n    const o = isArrayLike(object) ? [] : isNull(object) ? null : {};\r\n\r\n    iterate(object, (value, key) => {\r\n      o[key] = callback(value, key, object);\r\n    });\r\n\r\n    return D(o);\r\n  }\r\n\r\n  /**\r\n   * @method Super#max\r\n   * @public\r\n   * @param {IterationCallback} callback - Called on each iteration.\r\n   * Return value is used for comparison with the previous max value.\r\n   * @returns {{key: Key, value: Number}} Object with max value and key of the max value.\r\n   * @description Method for finding max value in the object.\r\n   * If no callback is present comparison is between values of the object.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).max();                     // { key: 'c', value: 3 }\r\n   * new Super({ a: 1, b: 2, c: 3 }).max((value) => 4 - value); // { key: 'a', value: 3 }\r\n   * new Super({ a: 'a', b: 'b', c: 'c' }).max();               // { key: null, value: -Infinity }\r\n   */\r\n  max(callback = null) {\r\n    validate([callback], ['function||!'], 'Super#max');\r\n\r\n    return this.object((max, value, key, object) => {\r\n      const val = Number(callback ? callback(value, key, object) : value);\r\n\r\n      if (val > max.value) {\r\n        max.key = key;\r\n        max.value = val;\r\n      }\r\n    }, { key: null, value: -Infinity }).$;\r\n  }\r\n\r\n  /**\r\n   * @method Super#min\r\n   * @public\r\n   * @param {IterationCallback} callback - Called on each iteration.\r\n   * Return value is used for comparison with the previous min value.\r\n   * @returns {{key: Key, value: Number}} Object with min value and key of the min value.\r\n   * @description Method for finding min value in the object.\r\n   * If no callback is present comparison is between values of the object.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).min();                     // { key: 'a', value: 1 }\r\n   * new Super({ a: 1, b: 2, c: 3 }).min((value) => 4 - value); // { key: 'c', value: 1 }\r\n   * new Super({ a: 'a', b: 'b', c: 'c' }).min();               // { key: null, value: Infinity }\r\n   */\r\n  min(callback = null) {\r\n    validate([callback], ['function||!'], 'Super#min');\r\n\r\n    return this.object((min, value, key, object) => {\r\n      const val = Number(callback ? callback(value, key, object) : value);\r\n\r\n      if (val < min.value) {\r\n        min.key = key;\r\n        min.value = val;\r\n      }\r\n    }, { key: null, value: Infinity }).$;\r\n  }\r\n\r\n  /**\r\n   * @method Super#object\r\n   * @public\r\n   * @param {ObjectCallback} callback - Called on each iteration.\r\n   * @param {Object|*} [object = {}] - Object that is passed to the callback.\r\n   * @returns {DWrap} Wrap of the new object.\r\n   * @description Type of {@link Super#reduce}.\r\n   * The object is passed as an argument into the callback. The output is this object.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2 }).object((object, value, key) => {\r\n   *   object[key] = value;\r\n   *   object[key + key] = value * 2;\r\n   * }).$; // { a: 1, aa: 2, b: 2, bb: 4 }\r\n   */\r\n  object(callback, object = {}) {\r\n    validate([callback], ['function'], 'Super#object');\r\n\r\n    iterate(this.$, (value, key, obj) => {\r\n      callback(object, value, key, obj);\r\n    });\r\n\r\n    return D(object);\r\n  }\r\n\r\n  /**\r\n   * @method Super#prop\r\n   * @public\r\n   * @param {String|Object.<String, *>} property - Either a string of a property or an assigned object.\r\n   * @param {*} [value] - If a property parameter is a string\r\n   * this has to be an assigned value if it's present.\r\n   * @returns {DWrap|*} Returns this if it's a setter or a value if getter.\r\n   * @description Method for getting and setting properties.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).prop('a');              // 1\r\n   * new Super({ a: 1, b: 2, c: 3 }).prop('a', 7).$;         // { a: 7, b: 2, c: 3 }\r\n   * new Super({ a: 1, b: 2, c: 3 }).prop({ a: 7, b: 8 }).$; // { a: 7, b: 8, c: 3 }\r\n   */\r\n  prop(property, value) {\r\n    if (arguments.length <= 1 && isString(property)) {\r\n      return this.$ ? this.$[property] : undefined;\r\n    }\r\n\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: value };\r\n    }\r\n\r\n    return this.assign(property);\r\n  }\r\n\r\n  /**\r\n   * @method Super#propertyDescriptor\r\n   * @public\r\n   * @param {String} property - Property of the object.\r\n   * @returns {Object|undefined} Property descriptor.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\r\n   * @descriptor Synonym for\r\n   * [Object.getOwnPropertyDescriptor]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1 }).propertyDescriptor('a');\r\n   * // {\r\n   * //   value: 1,\r\n   * //   enumerable: true,\r\n   * //   writable: true,\r\n   * //   configurable: true\r\n   * // }\r\n   */\r\n  propertyDescriptor(property) {\r\n    const object = this.$;\r\n\r\n    return isObject(object) ? Object.getOwnPropertyDescriptor(object, property) : undefined;\r\n  }\r\n\r\n  /**\r\n   * @method Super#propertyNames\r\n   * @public\r\n   * @returns {DWrap} D-Wrap of the names array.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\r\n   * @descriptor Synonym for\r\n   * [Object.getOwnPropertyNames]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2 }).define('c', { value: 3 }).$; // ['a', 'b', 'c']\r\n   */\r\n  propertyNames() {\r\n    const object = this.$;\r\n\r\n    return D(isObject(object) ? Object.getOwnPropertyNames(object) : []);\r\n  }\r\n\r\n  /**\r\n   * @method Super#propertySymbols\r\n   * @public\r\n   * @returns {DWrap} D-Wrap of the names array.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\r\n   * @descriptor Synonym for\r\n   * [Object.getOwnPropertySymbols]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols}.\r\n   *\r\n   * @example\r\n   * new Super({ [Symbol('foo')]: 1 }).define(Symbol('bar'), { value: 2 }).$; // [Symbol('foo'), Symbol('bar')]\r\n   */\r\n  propertySymbols() {\r\n    const object = this.$;\r\n\r\n    return D(isObject(object) ? Object.getOwnPropertySymbols(object) : []);\r\n  }\r\n\r\n  /**\r\n   * @method Super#proto\r\n   * @public\r\n   * @param {*} [proto] - If it's present it's set as a prototype to the object.\r\n   * @returns {DWrap} In getter mode returns wrap of the prototype and in setter mode returns this.\r\n   * @description Synonym for both\r\n   * [Object.getPrototypeOf]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf}\r\n   * and\r\n   * [Object.setPrototypeOf]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf}.\r\n   */\r\n  proto(proto) {\r\n    const object = this.$;\r\n    const isContextObject = !isNil(object);\r\n\r\n    if (arguments.length) {\r\n      if (isContextObject && (isObject(proto) || isNull(proto))) {\r\n        Object.setPrototypeOf(object, proto);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    return isContextObject ? new Super(Object.getPrototypeOf(object)) : new Super();\r\n  }\r\n\r\n  /**\r\n   * @method Super#reduce\r\n   * @public\r\n   * @param {ReduceCallback} callback - Called on each iteration.\r\n   * Return value is passed to the next callback call.\r\n   * @param {*} [IV = <first value>|undefined] - Initial value.\r\n   * @returns {*} Modified IV.\r\n   * @description Returns modified IV. If the second argument is not present first value in the object is taken\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).reduce((sum, value) => sum + value * value, 0); // 14\r\n   */\r\n  reduce(callback, IV) {\r\n    validate([callback], ['function'], 'Super#reduce');\r\n\r\n    const object = this.$;\r\n\r\n    let startKey;\r\n\r\n    if (arguments.length === 1) {\r\n      iterate(object, (value, key) => {\r\n        startKey = key;\r\n        IV = value;\r\n\r\n        return true;\r\n      });\r\n    }\r\n\r\n    iterate(object, (value, key) => {\r\n      if (key !== startKey) {\r\n        IV = callback(IV, value, key, object);\r\n      }\r\n    });\r\n\r\n    return IV;\r\n  }\r\n\r\n  /**\r\n   * @method Super#set\r\n   * @public\r\n   * @param {String|Object.<String, Function>} property - Either a string of a property or a setters object.\r\n   * @param {Function} [setter] - If a property parameter is a string this has to be a setter function.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Method for defining setters.\r\n   *\r\n   * @example\r\n   * const object = new Super({})\r\n   *   .get('public', function () {\r\n   *     return this._private;\r\n   *   })\r\n   *   .set('public', function (value) {\r\n   *     if (typeof value === 'number') {\r\n   *       this._private = value;\r\n   *     }\r\n   *   });\r\n   * object.prop('public', '1').$; // { public: undefined }\r\n   * object.prop('public', 1).$;   // { public: 1, _private: 1 }\r\n   *\r\n   * new Super({}).set({\r\n   *   public(value) {\r\n   *     if (typeof value === 'number') {\r\n   *       this._private = value;\r\n   *     }\r\n   *   }\r\n   * });\r\n   */\r\n  set(property, setter) {\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: setter };\r\n    }\r\n\r\n    const object = this.$;\r\n\r\n    iterate(isObject(object) && new Super(property).$, (setter, property) => {\r\n      Object.defineProperty(object, property, { set: setter });\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#some\r\n   * @public\r\n   * @param {IterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy iteration stops and if falsey it continues.\r\n   * @returns {Boolean} If all the callback calls returned truthy value.\r\n   * @description Returns true if some of the callback calls returned truthy value. Otherwise false.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).some((value) => value > 4); // false\r\n   * new Super({}).some(() => true);                             // false\r\n   */\r\n  some(callback = Boolean) {\r\n    validate([callback], ['function'], 'Super#some');\r\n\r\n    return iterate(this.$, (value, key, object) => {\r\n      if (callback(value, key, object)) {\r\n        return true;\r\n      }\r\n    }) || false;\r\n  }\r\n\r\n  /**\r\n   * @method Super#strictEquals\r\n   * @public\r\n   * @param {*} [object] - Object to compare.\r\n   * @returns {Boolean} If the objects are equal or not.\r\n   * @description Returns true if objects are equal using '===' operator and false if not.\r\n   * NaNs are considered to be strict equal.\r\n   *\r\n   * @example\r\n   * new Super(3).strictEquals('3');   // false\r\n   * new Super(NaN).strictEquals(NaN); // true\r\n   */\r\n  strictEquals(object) {\r\n    const o = this.$;\r\n\r\n    object = new Super(object).$;\r\n\r\n    return o === object || (isNaN(o) && isNaN(object));\r\n  }\r\n\r\n  /**\r\n   * @method Super#sum\r\n   * @public\r\n   * @param {IterationCallback} [callback = null] - Called on each iteration.\r\n   * @returns {Number} Sum.\r\n   * @description Type of {@link Super#reduce}.\r\n   * If the callback is present it's used for summing. If not the value is used.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).sum();                         // 6\r\n   * new Super({ a: 1, b: 2, c: 3 }).sum((value) => value * value); // 14\r\n   */\r\n  sum(callback = null) {\r\n    validate([callback], ['function||!'], 'Super#sum');\r\n\r\n    return this.reduce((sum, value, key, object) => (\r\n      sum + Number(callback ? callback(value, key, object) : value)\r\n    ), 0);\r\n  }\r\n\r\n  toJSON() {\r\n    return this.$;\r\n  }\r\n\r\n  /**\r\n   * @member Super#toStringTag\r\n   * @type {String}\r\n   * @public\r\n   * @readonly\r\n   * @description Returns toString tag of the object.\r\n   *\r\n   * @example\r\n   * new Super({}).toStringTag; // 'Object'\r\n   * new Super([]).toStringTag; // 'Array'\r\n   * new Super(1).toStringTag;  // 'Number'\r\n   */\r\n  get toStringTag() {\r\n    return toStringTag(this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Super#type\r\n   * @type {String}\r\n   * @public\r\n   * @readonly\r\n   * @description Synonym for\r\n   * [\"typeof\" operator]{@link https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/instanceof}..\r\n   *\r\n   * @example\r\n   * new Super({}).type;   // 'object'\r\n   * new Super(1).type;    // 'number'\r\n   * new Super('1').type;  // 'string'\r\n   * new Super(true).type; // 'boolean'\r\n   */\r\n  get type() {\r\n    return typeof this.$;\r\n  }\r\n\r\n  /**\r\n   * @method Super#value\r\n   * @public\r\n   * @param {String|Object.<String, *>} property - Either a string of a property or a values object.\r\n   * @param {Object.<String, *>} [value] - If a property parameter is a string this has to be a value to be set.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Method for defining non-enumerable, non-writable, non-configurable values.\r\n   * Synonym for object.define(property, { value: value }).\r\n   *\r\n   * @example\r\n   * new Super({}).value('a', 1).$; // { a: 1 }\r\n   * new Super({}).value({\r\n   *   a: 1\r\n   * }).$;                          // { a: 1 }\r\n   */\r\n  value(property, value) {\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: value };\r\n    }\r\n\r\n    const object = this.$;\r\n\r\n    iterate(isObject(object) && new Super(property).$, (value, property) => {\r\n      Object.defineProperty(object, property, { value });\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#values\r\n   * @public\r\n   * @returns {DWrap} A wrap of the values array.\r\n   * @description Returns D-Wrap of the values array.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).values().$; // [1, 2, 3]\r\n   * new Super(null).values().$;                 // []\r\n   */\r\n  values() {\r\n    const array = [];\r\n\r\n    iterate(this.$, (value) => {\r\n      array.push(value);\r\n    });\r\n\r\n    return D(array);\r\n  }\r\n\r\n  /**\r\n   * @method Super#word\r\n   * @public\r\n   * @param {IterationCallback} callback - Called on each iteration.\r\n   * @returns {String} Concatenated string.\r\n   * @description Type of {@link Super#reduce}.\r\n   * If the callback is present it's used for concatenating. If not the value is used.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).word();                         // '123'\r\n   * new Super({ a: 1, b: 2, c: 3 }).word((value) => value + value); // '112233'\r\n   */\r\n  word(callback = null) {\r\n    validate([callback], ['function||!'], 'Super#word');\r\n\r\n    return this.reduce((word, value, key, object) => (\r\n      word + String(callback ? callback(value, key, object) : value)\r\n    ), '');\r\n  }\r\n}\r\n\r\ndefineProperties(Super.prototype, {\r\n  [Symbol.toStringTag]: 'Super'\r\n});\r\n\r\n/**\r\n * @function deepAssign\r\n * @private\r\n * @param {*} target - Object to assign properties to.\r\n * @param {*} object - Object to assign properties from.\r\n * @returns {void}\r\n */\r\nfunction deepAssign(target, object) {\r\n  iterate(object, (value, key) => {\r\n    if (isPrimitive(target[key]) || !{}.hasOwnProperty.call(target, key)) {\r\n      target[key] = deepClone(value);\r\n\r\n      return;\r\n    }\r\n\r\n    if (!isPrimitive(target[key])) {\r\n      deepAssign(target[key], value);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @function deepClone\r\n * @private\r\n * @param {*} object - Object to clone.\r\n * @description Does the deep cloning.\r\n */\r\nfunction deepClone(object) {\r\n  const clone = cloneSwitcher(object, [object, true]);\r\n\r\n  if (clone !== object) {\r\n    iterate(object, (value, key) => {\r\n      clone[key] = deepClone(value);\r\n    });\r\n  }\r\n\r\n  return clone;\r\n}\r\n\r\n/**\r\n * @function deepEqual\r\n * @private\r\n * @param {*} o1 - First object to compare.\r\n * @param {*} o2 - Second object to compare.\r\n * @param {Boolean} strict - If comparison should be strict or not.\r\n * @returns {Boolean} - If the object are deep equal or not.\r\n */\r\nfunction deepEqual(o1, o2, strict) {\r\n  if (o1 === o2) {\r\n    return true;\r\n  }\r\n\r\n  if (isNaN(o1) && isNaN(o2) && isPrimitive(o1) && isPrimitive(o2)) {\r\n    return true;\r\n  }\r\n\r\n  if (isNaN(o1) || isNaN(o2)) {\r\n    return false;\r\n  }\r\n\r\n  if (isPrimitive(o1) || isPrimitive(o2)) {\r\n    return strict ? o1 === o2 : o1 == o2;\r\n  }\r\n\r\n  if (isDate(o1) && isDate(o2)) {\r\n    return o1.getTime() === o2.getTime();\r\n  }\r\n\r\n  if (isDate(o1) || isDate(o2)) {\r\n    return false;\r\n  }\r\n\r\n  if (isRegExp(o1) && isRegExp(o2)) {\r\n    return o1.source === o2.source &&\r\n      o1.toString().match(/[gimuy]*$/)[0] === o2.toString().match(/[gimuy]*$/)[0] &&\r\n      o1.lastIndex === o2.lastIndex;\r\n  }\r\n\r\n  if (isRegExp(o1) || isRegExp(o2)) {\r\n    return false;\r\n  }\r\n\r\n  if ((!isPlainObject(o1) && !isArray(o1)) || (!isPlainObject(o2) && !isArray(o2))) {\r\n    return false;\r\n  }\r\n\r\n  const p1 = Object.getPrototypeOf(o1);\r\n  const p2 = Object.getPrototypeOf(o1);\r\n\r\n  if (Object.keys(o1).length !== Object.keys(o2).length) {\r\n    return false;\r\n  }\r\n\r\n  if (p1 && p2 && (toStringTag(p1.constructor) !== toStringTag(p2.constructor))) {\r\n    return false;\r\n  }\r\n\r\n  return iterate(o1, (value, key) => {\r\n    if (!(key in o2) || !deepEqual(value, o2[key], strict)) {\r\n      return false;\r\n    }\r\n  }) !== false;\r\n}\r\n\r\n/**\r\n * @function deepEvery\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * If returns truthy the iteration goes on and if not it stops.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {Boolean} - If all the callback calls returned truthy value.\r\n */\r\nfunction deepEvery(object, callback, n, tree) {\r\n  const end = n === 1;\r\n\r\n  return iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    if (\r\n      end || isPrimitive(value)\r\n        ? !callback(value, key, object, newTree)\r\n        : !deepEvery(value, callback, n - 1, newTree)\r\n    ) {\r\n      return false;\r\n    }\r\n  }) !== false;\r\n}\r\n\r\n/**\r\n * @function deepFilter\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * If returns truthy the element is included in the output and if not it's excluded.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {*} Filtered object.\r\n */\r\nfunction deepFilter(object, callback, n, tree) {\r\n  const array = isArrayLike(object);\r\n  const nul = isNil(object);\r\n  const o = array ? [] : nul ? object : {};\r\n  const end = n === 1;\r\n\r\n  iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    if ((end || isPrimitive(value)) && callback(value, key, object, newTree)) {\r\n      if (array) {\r\n        o.push(value);\r\n      } else {\r\n        o[key] = value;\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (!end) {\r\n      const filtered = deepFilter(value, callback, n - 1, newTree);\r\n\r\n      if (filtered) {\r\n        if (array) {\r\n          o.push(filtered);\r\n        } else {\r\n          o[key] = filtered;\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  if (array) {\r\n    return o.length ? o : undefined;\r\n  }\r\n\r\n  if (!nul) {\r\n    return Object.keys(o).length ? o : undefined;\r\n  }\r\n\r\n  return o;\r\n}\r\n\r\n/**\r\n * @function deepFind\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * If returns truthy the iteration stops and if not it continues.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {Tree|null} - If found the whole tree is returned and if not it's null what's returned.\r\n */\r\nfunction deepFind(object, callback, n, tree) {\r\n  const end = n === 1;\r\n\r\n  return iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    if (end || isPrimitive(value)) {\r\n      if (callback(value, key, object, newTree)) {\r\n        return newTree;\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    const result = deepFind(value, callback, n - 1, newTree);\r\n\r\n    if (result) {\r\n      return result;\r\n    }\r\n  }) || null;\r\n}\r\n\r\n/**\r\n * @function deepForEach\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {void}\r\n */\r\nfunction deepForEach(object, callback, n, tree) {\r\n  const end = n === 1;\r\n\r\n  iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    if (end || isPrimitive(value)) {\r\n      callback(value, key, object, newTree);\r\n    } else {\r\n      deepForEach(value, callback, n - 1, newTree);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @function deepForEachEntry\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {void}\r\n */\r\nfunction deepForEachEntry(object, callback, n, tree) {\r\n  const end = n === 1;\r\n\r\n  iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    callback(value, key, object, newTree);\r\n\r\n    if (!end && !isPrimitive(value)) {\r\n      deepForEachEntry(value, callback, n - 1, newTree);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @function deepFreeze\r\n * @private\r\n * @param {*} object - Object to freeze.\r\n * @returns {void}\r\n */\r\nfunction deepFreeze(object) {\r\n  Object.freeze(object);\r\n  iterate(object, deepFreeze);\r\n}\r\n\r\n/**\r\n * @function deepMap\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * Returned value is used to create to new object.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {*} New object.\r\n */\r\nfunction deepMap(object, callback, n, tree) {\r\n  const o = isArrayLike(object) ? [] : isNil(object) ? object : {};\r\n  const end = n === 1;\r\n\r\n  iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    o[key] = end || isPrimitive(value)\r\n      ? callback(value, key, object, newTree)\r\n      : deepMap(value, callback, n - 1, newTree);\r\n  });\r\n\r\n  return o;\r\n}\r\n\r\n/**\r\n * @function deepReduce\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepReduceCallback} callback - Callback that is called on every element.\r\n * Returned value is used to create to new object.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Boolean} start - If callback was called already or not.\r\n * @param {{ IV: * }|undefined} IV - If callback was called already or not.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {{ IV: * }} Transformed IV.\r\n */\r\nfunction deepReduce(object, callback, n, start, IV, tree) {\r\n  const end = n === 1;\r\n\r\n  iterate(object, (value, key, object) => {\r\n    if (!IV && (end || isPrimitive(value)) && !start) {\r\n      IV = { IV: value };\r\n      start = true;\r\n\r\n      return;\r\n    }\r\n\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    IV = end || isPrimitive(value)\r\n      ? { IV: callback(IV.IV, value, key, object, newTree) }\r\n      : deepReduce(value, callback, n - 1, start, IV, newTree);\r\n  });\r\n\r\n  return IV;\r\n}\r\n\r\n/**\r\n * @function deepSome\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * If returns truthy the iteration stops and if not it continues.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {Boolean} - If some of the callback calls returned truthy value.\r\n */\r\nfunction deepSome(object, callback, n, tree) {\r\n  const end = n === 1;\r\n\r\n  return iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    if (\r\n      end || isPrimitive(value)\r\n        ? callback(value, key, object, newTree)\r\n        : deepSome(value, callback, n - 1, newTree)\r\n    ) {\r\n      return true;\r\n    }\r\n  }) || false;\r\n}\r\n\r\nconstructors[0].push({\r\n  check: () => true,\r\n  cls: Super\r\n});\r\n\r\nexport { Super };\r\n","/**\r\n * @module Func\r\n * @private\r\n * @mixin\r\n * @description Exports Func class.\r\n */\r\n\r\nimport { Super } from './Super';\r\nimport { Promise } from './Promise';\r\nimport { constructors } from './constants';\r\nimport { isFunction, validate, toArray, Symbol, defineProperties, iterate } from './helpers';\r\n\r\n/**\r\n * @callback BeforeMiddleware\r\n * @param {Array} args - Previous arguments.\r\n * @param {Func} func - This function.\r\n * @returns {Array} - New arguments.\r\n */\r\n\r\n/**\r\n * @callback AfterMiddleware\r\n * @param {*} returnValue - Previous return value.\r\n * @param {Func} func - This function.\r\n * @returns {*} - New return value.\r\n */\r\n\r\n/**\r\n * @class Func\r\n * @extends Super\r\n * @public\r\n * @param {Function} [func = function () {}] - Function to wrap.\r\n * @returns {Func} Instance of Func.\r\n * @description A wrap of a function.\r\n *\r\n * @example\r\n * const func = new Func(Math.max);\r\n *\r\n * func(1, 4, -2, 5); // 5\r\n */\r\nclass Func extends Super {\r\n  constructor(func = () => {}) {\r\n    super();\r\n\r\n    function proxy() {\r\n      if (++proxy.$$.called < proxy.$$.canBeCalled) {\r\n        const { before, after, sync, contextLocked } = proxy.$$;\r\n        let { context, args } = proxy.$$;\r\n        let ret;\r\n\r\n        context = contextLocked ? context : context || this;\r\n        args = args.concat(toArray(arguments));\r\n\r\n        if (sync) {\r\n          iterate(before, (middleware) => {\r\n            args = middleware.call(context, toArray(args), proxy);\r\n          });\r\n\r\n          ret = func.apply(context, toArray(args));\r\n\r\n          iterate(after, (middleware) => {\r\n            ret = middleware.call(context, ret, proxy);\r\n          });\r\n\r\n          return ret;\r\n        }\r\n\r\n        let promise = Promise.resolve(args);\r\n\r\n        iterate(before, (middleware) => {\r\n          promise = promise.then((args) => middleware.call(context, toArray(args), proxy));\r\n        });\r\n\r\n        promise = promise.then((args) => func.apply(context, toArray(args)));\r\n\r\n        iterate(after, (middleware) => {\r\n          promise = promise.then((ret) => middleware.call(context, ret, proxy));\r\n        });\r\n\r\n        return promise;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @member {Object} Func#$$\r\n     * @type {Object}\r\n     * @protected\r\n     * @property {Array} after - After middleware array.\r\n     * @property {Array} args - Locked and bound arguments.\r\n     * @property {Array} argsLocked - Locked arguments.\r\n     * @property {Array} before - Before middleware array.\r\n     * @property {Number} called - How many times the function was called.\r\n     * @property {Number} canBeCalled - How many times the function can be actually called.\r\n     * @property {*} context - Locked or bound context.\r\n     * @property {Boolean} contextLocked - Is context locked or not.\r\n     * @property {Boolean} sync - Is function synchronous or not.\r\n     * @description Config parameters.\r\n     */\r\n    Object.defineProperty(proxy, '$$', {\r\n      value: {\r\n        after: [],\r\n        args: [],\r\n        argsLocked: [],\r\n        before: [],\r\n        called: 0,\r\n        canBeCalled: Infinity,\r\n        context: null,\r\n        contextLocked: false,\r\n        sync: true\r\n      }\r\n    });\r\n\r\n    /**\r\n     * @member {Function} Func#$\r\n     * @type {Function}\r\n     * @public\r\n     * @description Original function.\r\n     */\r\n    Object.defineProperty(proxy, '$', { value: func });\r\n    Object.setPrototypeOf(proxy, Func.prototype);\r\n\r\n    return proxy;\r\n  }\r\n\r\n  /**\r\n   * @method Func#after\r\n   * @public\r\n   * @param {AfterMiddleware} middleware - After middleware.\r\n   * @param {Boolean|*} [afterAll = true] - Boolean parameter where to put middleware.\r\n   * Truthy parameter stands for \"to the end\" and falsey for \"to the beginning\".\r\n   * @returns {Func} Returns this.\r\n   * @description Adds after middleware.\r\n   *\r\n   * @example\r\n   * const func = new Func((a) => a + 1)\r\n   *   .after((result) => result * result);\r\n   *\r\n   * func(4);  // 25\r\n   * func(-4); // 9\r\n   */\r\n  after(middleware, afterAll = true) {\r\n    validate([middleware], ['function'], 'Func#after');\r\n\r\n    const { after } = this.$$;\r\n\r\n    if (afterAll) {\r\n      after.push(middleware);\r\n    } else {\r\n      after.unshift(middleware);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#apply\r\n   * @public\r\n   * @param {*} [context] - Context to call with.\r\n   * @param {(Array|Arguments)} [args] - Arguments to call with.\r\n   * @returns {*} Return of function call.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\r\n   * @description Synonym for\r\n   * [Function#apply]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Function/apply}.\r\n   */\r\n  apply(context, args) {\r\n    return (() => {}).apply.apply(this, arguments);\r\n  }\r\n\r\n  /**\r\n   * @method Func#async\r\n   * @public\r\n   * @param {Boolean|*} [condition] - If the function should be synchronous or not.\r\n   * @returns {Func} Returns this.\r\n   * @description If the function should be synchronous or not.\r\n   *\r\n   * @example\r\n   * const func = new Func((a) => a + 1).async();\r\n   *\r\n   * func(4).then((result) => {\r\n   *   console.log(result); // 5\r\n   * });\r\n   */\r\n  async(condition = true) {\r\n    this.$$.sync = !condition;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#before\r\n   * @public\r\n   * @param {BeforeMiddleware} middleware - Before middleware.\r\n   * @param {Boolean|*} [beforeAll = true] - Boolean parameter where to put middleware.\r\n   * Truthy parameter stands for \"to the beginning\" and falsey for \"to the end\".\r\n   * @returns {Func} Returns this.\r\n   * @description Adds before middleware.\r\n   *\r\n   * @example\r\n   * const func = new Func((a) => a + 1)\r\n   *   .before(([arg]) => [arg * arg]);\r\n   *\r\n   * func(4); // 17\r\n   * func(3); // 10\r\n   */\r\n  before(middleware, beforeAll = true) {\r\n    validate([middleware], ['function'], 'Func#before');\r\n\r\n    const { before } = this.$$;\r\n\r\n    if (beforeAll) {\r\n      before.unshift(middleware);\r\n    } else {\r\n      before.push(middleware);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#bind\r\n   * @public\r\n   * @param {*} context - Context to bind.\r\n   * @param {...(Array|Arguments|*)} args - Arguments to bind.\r\n   * @returns {Func} Returns this.\r\n   * @description Composition of {@link Func#bindContext} and {@link Func#bindArgs}.\r\n   *\r\n   * @example\r\n   * const func = new Func(function (a, b) {\r\n   *   return this.a + a + b;\r\n   * }).bind({ a: 2 }, 1);\r\n   *\r\n   * func(1); // 4\r\n   * func(3); // 6\r\n   */\r\n  bind(context, ...args) {\r\n    return this\r\n      .bindContext(context)\r\n      .bindArgs(args);\r\n  }\r\n\r\n  /**\r\n   * @method Func#bindArgs\r\n   * @public\r\n   * @param {(Array|Arguments)} args - Arguments to bind.\r\n   * @returns {Func} Returns this.\r\n   * @description Binds arguments in addition to already locked and bound ones.\r\n   *\r\n   * @example\r\n   * const func = new Func((...args) => {\r\n   *   let sum = 0;\r\n   *\r\n   *   for (let i = 0; i < args.length; i++) {\r\n   *     sum += args[i];\r\n   *   }\r\n   *\r\n   *   return sum;\r\n   * });\r\n   *\r\n   * func(1, 2, 3); // 6\r\n   *\r\n   * func.bindArgs([4]);\r\n   *\r\n   * func(1, 2, 3); // 10\r\n   *\r\n   * func.bindArgs([5]);\r\n   *\r\n   * func(1, 2, 3); // 15\r\n   */\r\n  bindArgs(args) {\r\n    const func = this.$$;\r\n\r\n    func.args = func.args.concat(toArray(args));\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#bindContext\r\n   * @public\r\n   * @param {*} context - Context to bind.\r\n   * @returns {Func} Returns this.\r\n   * @description Bind new context if it's not already locked.\r\n   *\r\n   * @example\r\n   * const func = new Func(function () {\r\n   *   return this.a;\r\n   * }).bindContext({ a: 1 });\r\n   *\r\n   * func(); // 1\r\n   *\r\n   * func.bindContext({ a: 2 });\r\n   *\r\n   * func(); // 2\r\n   */\r\n  bindContext(context) {\r\n    const func = this.$$;\r\n\r\n    if (!func.contextLocked) {\r\n      func.context = context;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#call\r\n   * @public\r\n   * @param {*} [context] - Context to call with.\r\n   * @param {...*} [args] - Arguments to call with.\r\n   * @returns {*} Return of function call.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Function/call\r\n   * @description Synonym for\r\n   * [Function#call]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Function/call}.\r\n   */\r\n  call(context, ...args) {\r\n    return (() => {}).call.apply(this, arguments);\r\n  }\r\n\r\n  /**\r\n   * @member {Number} Func#called\r\n   * @public\r\n   * @readonly\r\n   * @description Returns how many times the function was called.\r\n   *\r\n   * @example\r\n   * const func = new Func((a) => a + 1);\r\n   *\r\n   * func();\r\n   * func();\r\n   *\r\n   * func.called // 2\r\n   */\r\n  get called() {\r\n    return this.$$.called;\r\n  }\r\n\r\n  /**\r\n   * @method Func#canBeCalled\r\n   * @public\r\n   * @param {Number} times - Number of maximum times the function is called (middlewares are also taken for a count).\r\n   * @returns {Func} Returns this.\r\n   * @description Method for limiting call times of function.\r\n   *\r\n   * @example\r\n   * const func = new Func((a) => a + 1)\r\n   *   .canBeCalled(1);\r\n   *\r\n   * func(1); // 2\r\n   * func(1); // undefined\r\n   */\r\n  canBeCalled(times) {\r\n    this.$$.canBeCalled = times;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#limitArgsTo\r\n   * @public\r\n   * @param {Number} number - Number of arguments to limit to.\r\n   * @returns {Func} Returns this.\r\n   * @description Built-in before middleware for limiting number of arguments\r\n   * that is put to the end of before middlewares.\r\n   *\r\n   * @example\r\n   * const func = new Func((a, b) => [a, b]);\r\n   *\r\n   * func(1, 2); // [1, 2]\r\n   *\r\n   * func.limitArgsTo(1);\r\n   *\r\n   * func(1, 2); // [1, undefined]\r\n   */\r\n  limitArgsTo(number) {\r\n    return this.before((args) => args.slice(0, number), false);\r\n  }\r\n\r\n  /**\r\n   * @method Func#lock\r\n   * @public\r\n   * @param {*} context - Context to lock.\r\n   * @param {(Array|Arguments|*)} args - Arguments to lock.\r\n   * @returns {Func} Returns this.\r\n   * @description Composition of {@link Func#lockContext} and {@link Func#lockArgs}.\r\n   *\r\n   * @example\r\n   * const func = new Func(function (a, b) {\r\n   *   return this.a + a + b;\r\n   * }).lock({ a: 2 }, [1]);\r\n   *\r\n   * func(1); // 4\r\n   * func(3); // 6\r\n   */\r\n  lock(context, args) {\r\n    return this\r\n      .lockContext(context)\r\n      .lockArgs(args);\r\n  }\r\n\r\n  /**\r\n   * @method Func#lockArgs\r\n   * @public\r\n   * @param {(Array|Arguments|*)} args - Arguments to lock.\r\n   * @returns {Func} Returns this.\r\n   * @description Erases bound arguments and adds new arguments to already locked ones.\r\n   *\r\n   * @example\r\n   * const func = new Func((...args) => {\r\n   *   let sum = 0;\r\n   *\r\n   *   for (let i = 0; i < args.length; i++) {\r\n   *     sum += args[i];\r\n   *   }\r\n   *\r\n   *   return sum;\r\n   * });\r\n   *\r\n   * func(1, 2, 3); // 6\r\n   *\r\n   * func.lockArgs([4]);\r\n   *\r\n   * func(1, 2, 3); // 10\r\n   *\r\n   * func.bindArgs([6, 7]);\r\n   * func.lockArgs([5]);\r\n   *\r\n   * func(1, 2, 3); // 15\r\n   */\r\n  lockArgs(args) {\r\n    const func = this.$$;\r\n\r\n    func.args = func.argsLocked = func.argsLocked.concat(toArray(args));\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#lockContext\r\n   * @public\r\n   * @param {*} context - Context to lock.\r\n   * @returns {Func} Returns this.\r\n   * @description Locks context if it's not already locked.\r\n   *\r\n   * @example\r\n   * const func = new Func(function () {\r\n   *   return this.a;\r\n   * }).lockContext({ a: 1 });\r\n   *\r\n   * func(); // 1\r\n   *\r\n   * func.lockContext({ a: 2 });\r\n   *\r\n   * func(); // 1\r\n   */\r\n  lockContext(context) {\r\n    const func = this.$$;\r\n\r\n    if (!func.contextLocked) {\r\n      func.context = context;\r\n      func.contextLocked = true;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#timing\r\n   * @public\r\n   * @param {String} mark - Argument that is passed to console.time() and console.timeEnd().\r\n   * By default name of the original function, or if it's not present, 'anonymous' is used.\r\n   * @returns {Func} Returns this.\r\n   * @description Built-in before and after middlewares for noting calling time.\r\n   * In case of asynchronous functions it notes time between calling function and resolving or rejecting the result.\r\n   *\r\n   * @example\r\n   * const func = new Func((a) => a + 1)\r\n   *   .timing('plus 1');\r\n   *\r\n   * func(2); // plus 1: 0.010ms\r\n   *\r\n   * const async = new Func(() => new Promise(() => {\r\n   *     setTimeout(resolve, 1000);\r\n   *   }))\r\n   *   .async()\r\n   *   .timing();\r\n   *\r\n   * async();\r\n   * // After 1 second...\r\n   * // anonymous: 1000.010ms\r\n   */\r\n  timing(mark) {\r\n    mark = arguments.length ? String(mark) : this.$.name || 'anonymous';\r\n\r\n    this.before((args) => {\r\n      console.time(mark);\r\n\r\n      return args;\r\n    }, false);\r\n\r\n    this.after((ret) => {\r\n      console.timeEnd(mark);\r\n\r\n      return ret;\r\n    }, false);\r\n\r\n    return this;\r\n  }\r\n\r\n  toString() {\r\n    return (() => {}).toString.call(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Func#unbind\r\n   * @public\r\n   * @returns {Func} Returns this.\r\n   * @description Composition of {@link Func#unbindContext} and {@link Func#unbindArgs}.\r\n   *\r\n   * @example\r\n   * const func = new Func(function (a) {\r\n   *   return this.foo + ' & ' +  a;\r\n   * }).bind({ foo: 2 }, 1);\r\n   *\r\n   * func(); // '2 & 1'\r\n   *\r\n   * func.unbind();\r\n   *\r\n   * func(); // 'undefined & undefined'\r\n   */\r\n  unbind() {\r\n    return this\r\n      .unbindContext()\r\n      .unbindArgs();\r\n  }\r\n\r\n  /**\r\n   * @method Func#unbindArgs\r\n   * @public\r\n   * @returns {Func} Returns this.\r\n   * @description Erases all bound arguments.\r\n   *\r\n   * @example\r\n   * const func = new Func((...args) => {\r\n   *   let sum = 0;\r\n   *\r\n   *   for (let i = 0; i < args.length; i++) {\r\n   *     sum += args[i];\r\n   *   }\r\n   *\r\n   *   return sum;\r\n   * }).bindArgs([4, 5]);\r\n   *\r\n   * func(1, 2, 3); // 15\r\n   *\r\n   * func.unbindArgs();\r\n   *\r\n   * func(1, 2, 3); // 6\r\n   */\r\n  unbindArgs() {\r\n    const func = this.$$;\r\n\r\n    func.args = func.argsLocked;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#unbindContext\r\n   * @public\r\n   * @returns {Func} Returns this.\r\n   * @description Erases context if it's not locked.\r\n   *\r\n   * @example\r\n   * const func = new Func(function () {\r\n   *   return this.foo;\r\n   * }).bindContext({ foo: 1 });\r\n   *\r\n   * func(); // 1\r\n   *\r\n   * func.unbindArgs();\r\n   *\r\n   * func(); // undefined\r\n   */\r\n  unbindContext() {\r\n    const func = this.$$;\r\n\r\n    if (!func.contextLocked) {\r\n      func.context = null;\r\n    }\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\ndefineProperties(Func.prototype, {\r\n  [Symbol.toStringTag]: 'Func'\r\n});\r\n\r\nconstructors[1].push({\r\n  check: isFunction,\r\n  cls: Func\r\n});\r\n\r\n/**\r\n * @function method\r\n * @public\r\n * @param {String} method - Method to call.\r\n * @param {(Array|Arguments|*)} args - Arguments to call the method with.\r\n * @returns {Function} Function that calls stated method with given arguments.\r\n * @description Function that returns the function\r\n * that calls stated method of its first argument with given arguments.\r\n *\r\n * @example\r\n * [1.2345, 2.789, 3.14].map(method('toFixed', [2])); // ['1.23', '2.79', '3.14']\r\n */\r\nfunction method(method, args = []) {\r\n  return (x) => x[method].apply(x, toArray(args));\r\n}\r\n\r\n/**\r\n * @function noop\r\n * @public\r\n * @returns {void}\r\n * @description Empty function.\r\n */\r\nfunction noop() {}\r\n\r\n/**\r\n * @function prop\r\n * @public\r\n * @param {String} prop - Property to return.\r\n * @returns {Function} Function that returns given property of its first argument.\r\n * @description Function that return the function that returns given property of its first argument.\r\n *\r\n * @example\r\n * ['foo', '12', '7890'].map(prop('length')); // [3, 2, 4]\r\n */\r\nfunction prop(prop) {\r\n  return ({ [prop]: value }) => value;\r\n}\r\n\r\n/**\r\n * @function self\r\n * @public\r\n * @returns {*} First argument itself.\r\n * @description Function that returns the first argument.\r\n *\r\n * @example\r\n * [1, 2].map(self);                     // [1, 2]\r\n * [1, 3, NaN, 0, 7, null].filter(self); // [1, 3, 7]\r\n */\r\nfunction self() {\r\n  return arguments[0];\r\n}\r\n\r\nexport { Func, method, noop, prop, self };\r\n","/**\r\n * @module Num\r\n * @private\r\n * @mixin\r\n * @description Exports Num class.\r\n */\r\n\r\nimport { Super } from './Super';\r\nimport { Func } from './Func';\r\nimport { Promise } from './Promise';\r\nimport { constructors } from './constants';\r\nimport {\r\n  isNumber, isFinite, toArray,\r\n  defineProperties, validate, Symbol\r\n} from './helpers';\r\n\r\nconst toRadian = Math.PI / 180;\r\nconst toDegree = 180 / Math.PI;\r\nconst ln2 = Math.LN2;\r\nconst ln10 = Math.LN10;\r\n\r\n/**\r\n * @class Num\r\n * @extends Super\r\n * @public\r\n * @param {Number} [number = 0] - A number to wrap.\r\n * @returns {Num} Instance of Num.\r\n * @description Wrap of a number.\r\n *\r\n * @example\r\n * const num = new Num(1);\r\n */\r\nclass Num extends Super {\r\n  constructor(number = 0) {\r\n    super(+number);\r\n\r\n    /**\r\n     * @member Num#$\r\n     * @type {Number}\r\n     * @public\r\n     * @description Original number.\r\n     */\r\n  }\r\n\r\n  /**\r\n   * @member Num#abs\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/abs\r\n   * @description Synonym for\r\n   * [Math.abs]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/abs}.\r\n   *\r\n   * @example\r\n   * new Num(1).abs;  // 1\r\n   * new Num(-1).abs; // 1\r\n   */\r\n  get abs() {\r\n    return Math.abs(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Num#acos\r\n   * @public\r\n   * @param {Boolean|*} [toDegrees = false] If it is truthy the return value is transformed into degrees.\r\n   * @returns {Number} Arccosine of the number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/acos\r\n   * @description Synonym for\r\n   * [Math.acos]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/acos}.\r\n   */\r\n  acos(toDegrees) {\r\n    return (toDegrees ? toDegree : 1) * Math.acos(this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#acosh\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh\r\n   * @description Synonym for\r\n   * [Math.acosh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh}.\r\n   */\r\n  get acosh() {\r\n    const number = this.$;\r\n\r\n    return Math.log(number + Math.sqrt(number * number - 1));\r\n  }\r\n\r\n  /**\r\n   * @member Num#asinh\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh\r\n   * @description Synonym for\r\n   * [Math.asinh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh}.\r\n   */\r\n  get asinh() {\r\n    const number = this.$;\r\n\r\n    return Math.log(number + Math.sqrt(number * number + 1));\r\n  }\r\n\r\n  /**\r\n   * @method Num#asin\r\n   * @public\r\n   * @param {Boolean|*} [toDegrees = false] If it is truthy the return value is transformed into degrees.\r\n   * @returns {Number} Arcsine of the number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/asin\r\n   * @description Synonym for\r\n   * [Math.asin]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/asin}.\r\n   */\r\n  asin(toDegrees) {\r\n    return (toDegrees ? toDegree : 1) * Math.asin(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Num#atan\r\n   * @public\r\n   * @param {Boolean|*} [toDegrees = false] If it is truthy the return value is transformed into degrees.\r\n   * @returns {Number} Arcsine of the number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/atan\r\n   * @description Synonym for\r\n   * [Math.atan]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/atan}.\r\n   */\r\n  atan(toDegrees) {\r\n    return (toDegrees ? toDegree : 1) * Math.atan(this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#atanh\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh\r\n   * @description Synonym for\r\n   * [Math.atanh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh}.\r\n   */\r\n  get atanh() {\r\n    const number = this.$;\r\n\r\n    return Math.log((1 + number) / (1 - number)) / 2;\r\n  }\r\n\r\n  /**\r\n   * @member Num#cbrt\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt\r\n   * @description Synonym for\r\n   * [Math.cbrt]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt}.\r\n   */\r\n  get cbrt() {\r\n    const cbrt = Math.pow(Math.abs(this.$), 1 / 3);\r\n\r\n    return this.$ > 0 ? cbrt : -cbrt;\r\n  }\r\n\r\n  /**\r\n   * @member Num#ceil\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil\r\n   * @description Synonym for\r\n   * [Math.ceil]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil}.\r\n   *\r\n   * @example\r\n   * new Num(1.1).ceil;  // 2\r\n   * new Num(-1.1).ceil; // -1\r\n   */\r\n  get ceil() {\r\n    return Math.ceil(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Num#cos\r\n   * @public\r\n   * @param {Boolean|*} [asDegrees = false] If it is truthy the number is treated as a degree value.\r\n   * @returns {Number} Cosine of the number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cos\r\n   * @description Synonym for\r\n   * [Math.cos]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cos}.\r\n   */\r\n  cos(asDegrees) {\r\n    return Math.cos((asDegrees ? toRadian : 1) * this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#cosh\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh\r\n   * @description Synonym for\r\n   * [Math.cosh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh}.\r\n   */\r\n  get cosh() {\r\n    const exp = this.exp;\r\n\r\n    return (exp + 1 / exp) / 2;\r\n  }\r\n\r\n  /**\r\n   * @member Num#cube\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description Cube of the number.\r\n   *\r\n   * @example\r\n   * new Num(2).cube;  // 8\r\n   * new Num(-3).ceil; // -27\r\n   */\r\n  get cube() {\r\n    return this.$ * this.$ * this.$;\r\n  }\r\n\r\n  /**\r\n   * @member Num#exp\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/exp\r\n   * @description Synonym for\r\n   * [Math.exp]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/exp}.\r\n   */\r\n  get exp() {\r\n    return Math.exp(this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#floor\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\r\n   * @description Synonym for\r\n   * [Math.floor]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/floor}.\r\n   *\r\n   * @example\r\n   * new Num(1.1).floor;  // 1\r\n   * new Num(-1.1).floor; // -2\r\n   */\r\n  get floor() {\r\n    return Math.floor(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Num#interval\r\n   * @public\r\n   * @param {Function} func - Function that is called every <number> milliseconds.\r\n   * @param {Array} [args] - Arguments passed to the function.\r\n   * @returns {Function} Function that aborts the interval. The context of the function (if it's not already bound)\r\n   * is the object with the abort method.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/setInterval\r\n   * @description Analogue of the\r\n   * [setInterval]{@link https://developer.mozilla.org/en/docs/Web/API/WindowTimers/setInterval}.\r\n   *\r\n   * @example\r\n   * const times = 0;\r\n   * new Num(50).interval(function () {\r\n   *   if (++times === 10) {\r\n   *     this.abort();\r\n   *   }\r\n   * });\r\n   */\r\n  interval(func, args = []) {\r\n    validate([func], ['function'], 'Num#interval');\r\n\r\n    func = new Func(func).bindContext({ abort });\r\n    args = toArray(args);\r\n\r\n    const number = this.$;\r\n\r\n    let aborted;\r\n    let timeout = setTimeout(function interval() {\r\n      if (!aborted) {\r\n        func.apply(null, args);\r\n\r\n        if (!aborted) {\r\n          timeout = setTimeout(interval, number);\r\n        }\r\n      }\r\n    }, 0);\r\n\r\n    return abort;\r\n\r\n    function abort() {\r\n      aborted = true;\r\n\r\n      return clearTimeout(timeout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @member Num#ln\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log\r\n   * @description Synonym for\r\n   * [Math.log]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log}.\r\n   */\r\n  get ln() {\r\n    return Math.log(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Num#log\r\n   * @public\r\n   * @param {Number} number - Number to get logarithm of.\r\n   * @returns {Number} Logarithm of the argument number to the number base.\r\n   * @description Returns the logarithm of the argument number to the number base.\r\n   *\r\n   * @example\r\n   * new Num(2).log(16);  // 4\r\n   * new Num(3).log(243); // 5\r\n   */\r\n  log(number) {\r\n    return Math.log(number) / Math.log(this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#log2\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log2\r\n   * @description Synonym for\r\n   * [Math.log2]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log2}.\r\n   */\r\n  get log2() {\r\n    return this.ln / ln2;\r\n  }\r\n\r\n  /**\r\n   * @member Num#log10\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log10\r\n   * @description Synonym for\r\n   * [Math.log10]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log10}.\r\n   */\r\n  get log10() {\r\n    return this.ln / ln10;\r\n  }\r\n\r\n  /**\r\n   * @method Num#pow\r\n   * @public\r\n   * @param {Number} power - Power the number should be raised to.\r\n   * @returns {Number} The number to the <power> power.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/pow\r\n   * @description Synonym for\r\n   * [Math.pow]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/pow}.\r\n   *\r\n   * @example\r\n   * new Num(4).pow(.5); // 2\r\n   * new Num(3).pow(2);  // 9\r\n   */\r\n  pow(power) {\r\n    return Math.pow(this.$, power);\r\n  }\r\n\r\n  /**\r\n   * @method Num#root\r\n   * @public\r\n   * @param {Number} power - Power the number should be raised to.\r\n   * @returns {Number} The <power> root of the number.\r\n   * @description Synonym for number.pow(1 / power);\r\n   *\r\n   * @example\r\n   * new Num(4).root(2);   // 0.5\r\n   * new Num(243).root(5); // 3\r\n   */\r\n  root(power) {\r\n    return Math.pow(this.$, 1 / power);\r\n  }\r\n\r\n  /**\r\n   * @member Num#round\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/round\r\n   * @description Synonym for\r\n   * [Math.round]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/round}.\r\n   *\r\n   * @example\r\n   * new Num(1.1).floor;  // 1\r\n   * new Num(-1.1).floor; // -1\r\n   * new Num(1.5).floor;  // 2\r\n   */\r\n  get round() {\r\n    return Math.round(this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#sign\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\r\n   * @description Synonym for\r\n   * [Math.sign]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sign}.\r\n   */\r\n  get sign() {\r\n    const number = this.$;\r\n\r\n    if (!number) {\r\n      return number;\r\n    }\r\n\r\n    return number > 0 ? 1 : -1;\r\n  }\r\n\r\n  /**\r\n   * @method Num#sin\r\n   * @public\r\n   * @param {Boolean|*} [asDegrees = false] If it is truthy the number is treated as a degree value.\r\n   * @returns {Number} Sine of the number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sin\r\n   * @description Synonym for\r\n   * [Math.sin]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sin}.\r\n   */\r\n  sin(asDegrees) {\r\n    return Math.sin((asDegrees ? toRadian : 1) * this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#sinh\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh\r\n   * @description Synonym for\r\n   * [Math.sinh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh}.\r\n   */\r\n  get sinh() {\r\n    const exp = this.exp;\r\n\r\n    return (exp - 1 / exp) / 2;\r\n  }\r\n\r\n  /**\r\n   * @member Num#sq\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description The square of the number.\r\n   *\r\n   * @example\r\n   * new Num(2).sq;  // 4\r\n   * new Num(-3).sq; // 9\r\n   */\r\n  get sq() {\r\n    return this.$ * this.$;\r\n  }\r\n\r\n  /**\r\n   * @member Num#sqrt\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt\r\n   * @description Synonym for\r\n   * [Math.sqrt]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt}.\r\n   */\r\n  get sqrt() {\r\n    return Math.sqrt(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Num#tan\r\n   * @public\r\n   * @param {Boolean|*} [asDegrees = false] If it is truthy the number is treated as a degree value.\r\n   * @returns {Number} Tangent of the number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/tan\r\n   * @description Synonym for\r\n   * [Math.tan]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/tan}.\r\n   */\r\n  tan(asDegrees) {\r\n    return Math.tan((asDegrees ? toRadian : 1) * this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#tanh\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh\r\n   * @description Synonym for\r\n   * [Math.tanh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh}.\r\n   */\r\n  get tanh() {\r\n    const number = this.$;\r\n\r\n    if (!isFinite(number)) {\r\n      return this.sign;\r\n    }\r\n\r\n    const exp = Math.exp(2 * number);\r\n\r\n    return (exp - 1) / (exp + 1);\r\n  }\r\n\r\n  /**\r\n   * @method Num#timeout\r\n   * @public\r\n   * @param {*} [value] - Value to be resolved by the promise.\r\n   * @returns {Promise} Promise that could be aborted.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/WindowTimers/setTimeout\r\n   * @description Promise-based analogue of\r\n   * [setTimeout]{@link https://developer.mozilla.org/en/docs/Web/API/WindowTimers/setTimeout}.\r\n   *\r\n   * @example\r\n   * new Num(50).timeout('resolved').then((value) => {\r\n   *   console.log(value); // 'resolved'\r\n   * });\r\n   *\r\n   * const promise = new Num(50).timeout();\r\n   * promise.abort();\r\n   */\r\n  timeout(value) {\r\n    let timeout;\r\n    let reject;\r\n\r\n    const promise = new Promise((resolve, rej) => {\r\n      reject = rej;\r\n      timeout = setTimeout(resolve, this.$, value);\r\n    });\r\n\r\n    promise.abort = function abort() {\r\n      clearTimeout(timeout);\r\n\r\n      reject(new Error('Timeout was aborted'));\r\n\r\n      return this;\r\n    };\r\n\r\n    return promise;\r\n  }\r\n\r\n  /**\r\n   * @method Num#toBase\r\n   * @public\r\n   * @param {Number} [base = 10] - Base that the number should inverted to.\r\n   * @returns {String} A string representation of the number in <base> base.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toString\r\n   * @description Synonym for\r\n   * [Number#toString]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toString}.\r\n   *\r\n   * @example\r\n   * new Num(4).toBase(2); // 100\r\n   * new Num(3).toBase();  // 3\r\n   */\r\n  toBase(base = 10) {\r\n    return this.$.toString(base);\r\n  }\r\n\r\n  /**\r\n   * @method Num#toExponential\r\n   * @public\r\n   * @param {Number} [fractionDigits] - See the link.\r\n   * @returns {String} A string representation of the number in the exponential format.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential\r\n   * @description Synonym for\r\n   * [Number#toExponential]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential}.\r\n   */\r\n  toExponential(fractionDigits) {\r\n    return this.$.toExponential(fractionDigits);\r\n  }\r\n\r\n  /**\r\n   * @method Num#toFixed\r\n   * @public\r\n   * @param {Number} [digits = 0] - See the link.\r\n   * @returns {String} Fixed-point formatted number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed\r\n   * @description Synonym for\r\n   * [Number#toFixed]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed}.\r\n   */\r\n  toFixed(digits) {\r\n    return this.$.toFixed(digits);\r\n  }\r\n\r\n  /**\r\n   * @method Num#toPrecision\r\n   * @public\r\n   * @param {Number} [precision] - See the link.\r\n   * @returns {String} A string representation of the number to the specified precision.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision\r\n   * @description Synonym for\r\n   * [Number#toPrecision]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision}.\r\n   */\r\n  toPrecision(precision) {\r\n    return this.$.toPrecision(precision);\r\n  }\r\n\r\n  valueOf() {\r\n    return Number(this.$);\r\n  }\r\n}\r\n\r\ndefineProperties(Num.prototype, {\r\n  [Symbol.toStringTag]: 'Num'\r\n});\r\n\r\nconstructors[1].push({\r\n  check: isNumber,\r\n  cls: Num\r\n});\r\n\r\n/**\r\n * @function rand\r\n * @public\r\n * @param {Number} [start = 0] - Start of the range.\r\n * @param {Number} [end = 1] - End of the range.\r\n * @returns {Number} Random number.\r\n * @description Returns a random number in the range specified by the arguments.\r\n *\r\n * @example\r\n * rand(1, 5); // 2.315\r\n * rand(1, 5); // 4.356763\r\n */\r\nfunction rand(start = 0, end = 1) {\r\n  return start + (end - start) * Math.random();\r\n}\r\n\r\n/**\r\n * @function random\r\n * @public\r\n * @param {Integer} start - Start of the range.\r\n * @param {Integer} end - End of the range.\r\n * @returns {Number} Random integer.\r\n * @description Returns a random integer number in the range specified by the arguments.\r\n *\r\n * @example\r\n * random(1, 5); // 3\r\n * random(1, 5); // 1\r\n */\r\nfunction random(start, end) {\r\n  validate([start, end], ['intLike', 'intLike'], 'random');\r\n\r\n  if (end <= start) {\r\n    throw new Error('The second argument must be greater than the first!', 'random');\r\n  }\r\n\r\n  return Math.floor(rand(start, end + 1));\r\n}\r\n\r\nexport { Num, rand, random };\r\n","/**\r\n * @module Arr\r\n * @private\r\n * @mixin\r\n * @description Exports Arr class.\r\n */\r\n\r\nimport { random } from './Num';\r\nimport { Super } from './Super';\r\nimport { constructors } from './constants';\r\nimport {\r\n  isArrayLike, isNaN, isNumber, isString,\r\n  toArray, validate, iterate as iterator, Symbol, defineProperties\r\n} from './helpers';\r\n\r\n/**\r\n * @typedef {Array|*} ArrayLike\r\n * @public\r\n * @description Array-like type.\r\n */\r\n\r\n/**\r\n * @callback ArrayCallback\r\n * @public\r\n * @param {Number} i - Iteration index.\r\n */\r\n\r\n/**\r\n * @callback IterateCallback\r\n * @public\r\n * @param {Number} i - Iteration index.\r\n */\r\n\r\n/**\r\n * @callback CompareFunction\r\n * @public\r\n * @param {*} x - First value to be compared.\r\n * @param {*} y - Second value to be compared.\r\n */\r\n\r\n/**\r\n * @class Arr\r\n * @extends Super\r\n * @public\r\n * @param {Array} [array = []] - An array to wrap.\r\n * @returns {Arr} Instance of Arr.\r\n * @description Wrap of an array.\r\n *\r\n * @example\r\n * new Arr([1, 2]);\r\n */\r\nclass Arr extends Super {\r\n  constructor(array = []) {\r\n    super(toArray(array instanceof Arr ? array.$ : array));\r\n\r\n    /**\r\n     * @member Arr#$\r\n     * @type {Array}\r\n     * @public\r\n     * @description Made array.\r\n     */\r\n  }\r\n\r\n  /**\r\n   * @method Arr#concat\r\n   * @public\r\n   * @param {...(Array|Arr|*)} values - Arrays or any other values to concat the array with.\r\n   * @returns {Arr} New instance of Arr.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\r\n   * @description Synonym for\r\n   * [Array#concat]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/concat}.\r\n   */\r\n  concat(...values) {\r\n    const array = toArray(this.$, true);\r\n\r\n    iterator(arguments, (value) => {\r\n      value = new Super(value).$;\r\n\r\n      if (isArrayLike(value) && !isString(value)) {\r\n        iterator(value, (value) => {\r\n          array.push(value);\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      array.push(value);\r\n    });\r\n\r\n    return new this.constructor(array);\r\n  }\r\n\r\n  /**\r\n   * @member Arr#first\r\n   * @type {*}\r\n   * @public\r\n   * @readonly\r\n   * @description Returns the first element of the array.\r\n   *\r\n   * @example\r\n   * new Arr([1, 2, 3]).first; // 1\r\n   * new Arr([]).first;        // undefined\r\n   */\r\n  get first() {\r\n    return this.$[0];\r\n  }\r\n\r\n  /**\r\n   * @method Arr#indexOf\r\n   * @public\r\n   * @param {*} value - Value to search.\r\n   * @returns {Number} Index of the argument.\r\n   * @description Almost the same as {@link Super#keyOf}. The difference is that if the value is not found\r\n   * -1 returned instead of null and if found Number(key) returned.\r\n   *\r\n   * @example\r\n   * new Arr([1, 2, 3]).indexOf(1);       // 0\r\n   * new Arr([1, 2, 3]).indexOf('1');     // 0\r\n   * new Arr([1, 2, 3]).indexOf(3);       // -1\r\n   * new Arr([1, 2, NaN]).indexOf(NaN);   // 2\r\n   */\r\n  indexOf(value) {\r\n    const key = this.keyOf(value);\r\n\r\n    return key === null ? -1 : Number(key);\r\n  }\r\n\r\n  /**\r\n   * @method Arr#indexOfStrict\r\n   * @public\r\n   * @param {*} value - Value to search.\r\n   * @returns {Number} Index of the argument.\r\n   * @description Almost the same as {@link Super#keyOfStrict}. The difference is that if the value is not found\r\n   * -1 returned instead of null and if found Number(key) returned.\r\n   *\r\n   * @example\r\n   * new Arr([1, 2, 3]).indexOfStrict(1);       // 0\r\n   * new Arr([1, 2, 3]).indexOfStrict('1');     // -1\r\n   * new Arr([1, 2, 3]).indexOfStrict(3);       // -1\r\n   * new Arr([1, 2, NaN]).indexOfStrict(NaN);   // 2\r\n   */\r\n  indexOfStrict(value) {\r\n    const key = this.keyOfStrict(value);\r\n\r\n    return key === null ? -1 : Number(key);\r\n  }\r\n\r\n  /**\r\n   * @method Arr#join\r\n   * @public\r\n   * @param {String} [separator = ','] - See the link.\r\n   * @returns {String} - String of joined array.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/join\r\n   * @description Synonym for\r\n   * [Array#join]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/join}.\r\n   */\r\n  join(separator) {\r\n    return this.$.join.apply(this.$, arguments);\r\n  }\r\n\r\n  /**\r\n   * @member Arr#last\r\n   * @type {*}\r\n   * @public\r\n   * @readonly\r\n   * @description The last element of the array.\r\n   *\r\n   * @example\r\n   * new Arr([1, 2, 3]).last; // 3\r\n   * new Arr([]).last;        // undefined\r\n   */\r\n  get last() {\r\n    const array = this.$;\r\n\r\n    return array[array.length - 1];\r\n  }\r\n\r\n  /**\r\n   * @member Arr#length\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/length\r\n   * @description Synonym for\r\n   * [Array#length]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/length}.\r\n   */\r\n  get length() {\r\n    return this.$.length;\r\n  }\r\n\r\n  /**\r\n   * @method Arr#pop\r\n   * @public\r\n   * @returns {*} Returns deleted element.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\r\n   * @description Synonym for\r\n   * [Array#pop]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/pop}.\r\n   */\r\n  pop() {\r\n    return this.$.pop();\r\n  }\r\n\r\n  /**\r\n   * @method Arr#push\r\n   * @public\r\n   * @param {...*} values See the link.\r\n   * @this {Arr}\r\n   * @returns {Arr} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push\r\n   * @description Synonym for\r\n   * [Array#push]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push}\r\n   * besides returning this.\r\n   */\r\n  push(...values) {\r\n    this.$.push.apply(this.$, arguments);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Arr#random\r\n   * @public\r\n   * @returns {*} Random item of the array.\r\n   * @description Method for getting random items of the array.\r\n   *\r\n   * @example\r\n   * new Arr([1, 5, 3]).random(); // 3\r\n   * new Arr([1, 5, 3]).random(); // 5\r\n   */\r\n  random() {\r\n    return this.$[random(0, this.$.length - 1)];\r\n  }\r\n\r\n  /**\r\n   * @method Arr#reverse\r\n   * @public\r\n   * @returns {Arr} A wrap of the reversed array.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\r\n   * @description Synonym for\r\n   * [Array#reverse]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse}.\r\n   */\r\n  reverse() {\r\n    this.$.reverse();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Arr#shift\r\n   * @public\r\n   * @returns {*} Returns deleted element.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\r\n   * @description Synonym for\r\n   * [Array#shift]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/shift}.\r\n   */\r\n  shift() {\r\n    return this.$.shift();\r\n  }\r\n\r\n  /**\r\n   * @method Arr#shuffle\r\n   * @public\r\n   * @returns {Arr} Returns this.\r\n   * @description Method for shuffling.\r\n   *\r\n   * @example\r\n   * new Arr([1, 2, 3, 4]).shuffle().$; // [4, 2, 3, 1]\r\n   * new Arr([1, 2, 3, 4]).shuffle().$; // [1, 3, 4, 2]\r\n   */\r\n  shuffle() {\r\n    const length = this.$.length;\r\n\r\n    return this.forEach((value, index, array) => {\r\n      const randomIndex = index + Math.floor((length - index) * Math.random());\r\n\r\n      array[index] = array[randomIndex];\r\n      array[randomIndex] = value;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Arr#slice\r\n   * @public\r\n   * @param {Number} [begin = 0] - See the link.\r\n   * @param {Number} [end = array.length] - See the link.\r\n   * @returns {Arr} A wrap of a sliced array.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\r\n   * @description Synonym for\r\n   * [Array#slice]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/slice}.\r\n   */\r\n  slice(begin, end) {\r\n    return new this.constructor(this.$.slice.apply(this.$, arguments));\r\n  }\r\n\r\n  /**\r\n   * @method Arr#sort\r\n   * @public\r\n   * @param {CompareFunction} [compareFunction] - See the link.\r\n   * @returns {Arr} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\r\n   * @description Synonym for\r\n   * [Array#sort]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/sort}.\r\n   */\r\n  sort(compareFunction) {\r\n    validate([compareFunction], ['function||!'], 'Arr#sort');\r\n\r\n    this.$.sort(compareFunction);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Arr#sortAsc\r\n   * @public\r\n   * @returns {Arr} Returns this.\r\n   * @description Method for ascending sorting. Puts non-numbers first, then NaNs, then sorted values.\r\n   *\r\n   * @example\r\n   * new Arr([NaN, 1, -7, '100', 5]).sortAsc().$; // ['100', NaN, -7, 1, 5]\r\n   */\r\n  sortAsc() {\r\n    return this.sort(asc);\r\n  }\r\n\r\n  /**\r\n   * @method Arr#sortDesc\r\n   * @public\r\n   * @returns {Arr} Returns this.\r\n   * @description Method for descending sorting. Puts sorted values first, then NaNs, then non-numbers.\r\n   *\r\n   * @example\r\n   * new Arr([NaN, 1, -7, '100', 5]).sortDesc().$; // [5, 1, -7, NaN, '100']\r\n   */\r\n  sortDesc() {\r\n    return this.sort((y, x) => asc(x, y));\r\n  }\r\n\r\n  /**\r\n   * @method Arr#splice\r\n   * @public\r\n   * @param {Number} [start] - See the link.\r\n   * @param {Number} [deleteCount] - See the link.\r\n   * @param {...*} [items] - See the link.\r\n   * @returns {Arr} A wrap of return value of #splice call.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\r\n   * @description Synonym for\r\n   * [Array#splice]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/splice}.\r\n   */\r\n  splice(start, deleteCount, ...items) {\r\n    return new Arr(this.$.splice.apply(this.$, arguments));\r\n  }\r\n\r\n  /**\r\n   * @method Arr#string\r\n   * @public\r\n   * @returns {String} Concatenated array.\r\n   * @description Synonym for array.join('').\r\n   *\r\n   * @example\r\n   * new Arr([1, 2, 3]).string(); // '123'\r\n   */\r\n  string() {\r\n    return this.join('');\r\n  }\r\n\r\n  /**\r\n   * @method Arr#unshift\r\n   * @public\r\n   * @param {...*} [values] - See the link.\r\n   * @returns {Arr} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\r\n   * @description Synonym for\r\n   * [Array#unshift]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift}\r\n   * besides returning this.\r\n   */\r\n  unshift(...values) {\r\n    this.$.unshift.apply(this.$, arguments);\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\ndefineProperties(Arr.prototype, {\r\n  [Symbol.toStringTag]: 'Arr'\r\n});\r\n\r\n/**\r\n * @function asc\r\n * @private\r\n * @param {*} x - First value to be compared.\r\n * @param {*} y - Second value to be compared.\r\n * @returns {Number} Where to put the first element: before or after.\r\n */\r\nfunction asc(x, y) {\r\n  if (!isNumber(x) && !isNumber(y)) {\r\n    return 0;\r\n  }\r\n\r\n  if (!isNumber(x)) {\r\n    return -1;\r\n  }\r\n\r\n  if (!isNumber(y)) {\r\n    return 1;\r\n  }\r\n\r\n  if (isNaN(x) && isNaN(y)) {\r\n    return 0;\r\n  }\r\n\r\n  if (isNaN(x)) {\r\n    return -1;\r\n  }\r\n\r\n  if (isNaN(y)) {\r\n    return 1;\r\n  }\r\n\r\n  return x - y;\r\n}\r\n\r\nconstructors[1].push({\r\n  check: isArrayLike,\r\n  cls: Arr\r\n});\r\n\r\n/**\r\n * @function array\r\n * @public\r\n * @param {Number} number - Length of the array.\r\n * @param {ArrayCallback} [callback] - If it's present it has to be a function\r\n * that returns the element that is pushed to the new array.\r\n * @returns {Arr} New instance of Arr.\r\n * @description Method for creating new array from the length using optional callback.\r\n *\r\n * @example\r\n * array(3).$;               // [0, 1, 2]\r\n * array(3, (i) => i * 2).$; // [0, 2, 4]\r\n */\r\nfunction array(number, callback) {\r\n  validate([number, callback], [['intLike', '>=0'], 'function||!'], 'array');\r\n\r\n  const array = [];\r\n\r\n  for (let i = 0; i < number; i++) {\r\n    array.push(callback ? callback(i) : i);\r\n  }\r\n\r\n  return new Arr(array);\r\n}\r\n\r\n/**\r\n * @function iterate\r\n * @public\r\n * @param {Number} number - Number of iterations.\r\n * @param {IterateCallback} callback - Callback that is called on each iteration with the iteration index.\r\n * @returns {void}\r\n * @description Method for replacing for (...) construction.\r\n *\r\n * @example\r\n * iterate();\r\n */\r\nfunction iterate(number, callback) {\r\n  validate([number, callback], [['intLike', '>=0'], 'function'], 'iterate');\r\n\r\n  for (let i = 0; i < number; i++) {\r\n    callback(i);\r\n  }\r\n}\r\n\r\nexport { Arr, array, iterate };\r\n","/**\r\n * @module BlobObject\r\n * @private\r\n * @mixin\r\n * @description Exports BlobObject class.\r\n */\r\n\r\nimport { Super } from './Super';\r\nimport { Promise } from './Promise';\r\nimport { constructors } from './constants';\r\nimport {\r\n  isArray, isFunction,\r\n  toStringTag, Symbol, defineProperties\r\n} from './helpers';\r\n\r\n/**\r\n * @typedef {{ buffer: String, binary: String, dataURL: String, text: String }} methods\r\n * @private\r\n * @description List of read blob methods.\r\n */\r\nconst methods = {\r\n  buffer: 'ArrayBuffer',\r\n  binary: 'BinaryString',\r\n  dataURL: 'DataURL',\r\n  text: 'Text'\r\n};\r\nconst { URL } = global;\r\n\r\n/**\r\n * @typedef {('buffer'|'binary'|'dataURL'|'text')} ReadBlobMethod\r\n * @public\r\n * @description Enum type of read blob methods.\r\n */\r\n\r\n/**\r\n * @typedef {ArrayBuffer|ArrayBufferView|Blob|String} BlobParts\r\n * @public\r\n * @description Allowed blob parts.\r\n */\r\n\r\n/**\r\n * @callback ReaderEventListener\r\n * @public\r\n * @param {Event} e - Fired event.\r\n * @param {FileReader} reader - FileReader.\r\n */\r\n\r\n/**\r\n * @class BlobObject\r\n * @extends Super\r\n * @public\r\n * @param {Blob} blob - Blob to wrap.\r\n * @returns {BlobObject} Instance of BlobObject.\r\n * @description Wrap of a blob.\r\n *\r\n * @example\r\n * new BlobObject(new Blob(['{\"foo\":\"bar\"}'], { type: 'application/json' }));\r\n */\r\nclass BlobObject extends Super {\r\n  /**\r\n   * @member BlobObject#$\r\n   * @type {Blob}\r\n   * @public\r\n   * @description Original Blob.\r\n   */\r\n\r\n  /**\r\n   * @member {String} BlobObject#dataURL\r\n   * @type {String}\r\n   * @public\r\n   * @readonly\r\n   * @description Returns dataURL representation of the blob.\r\n   */\r\n  get dataURL() {\r\n    return URL.createObjectURL(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method BlobObject#readAs\r\n   * @public\r\n   * @param {ReadBlobMethod} method - Method that is used for reading from blob.\r\n   * @param {ReaderEventListener} [progress] - Progress listener.\r\n   * @returns {Promise} Promise that could be aborted.\r\n   * @description Method for reading from blobs.\r\n   *\r\n   * @example\r\n   * new BlobObject(new Blob(['{\"foo\":\"bar\"}'], { type: 'application/json' }))\r\n   *   .readAs('text')\r\n   *   .then((value) => {\r\n   *     console.log(value); // '{\"foo\":\"bar\"}'\r\n   *   });\r\n   */\r\n  readAs(method, progress) {\r\n    if (!methods[method]) {\r\n      throw new Error('1st argument must be one of following values: buffer, binary, dataURL, text');\r\n    }\r\n\r\n    let reader = new FileReader();\r\n    let toReject;\r\n\r\n    if (isFunction(progress)) {\r\n      reader.onprogress = function (e) {\r\n        progress(e, this);\r\n      };\r\n    }\r\n\r\n    const promise = new Promise((resolve, reject) => {\r\n      toReject = reject;\r\n\r\n      reader.onerror = ({ target }) => {\r\n        if (reader) {\r\n          reject(target.error);\r\n        }\r\n      };\r\n\r\n      reader.onload = ({ target }) => {\r\n        resolve(target.result);\r\n      };\r\n\r\n      reader[`readAs${ methods[method] }`](this.$);\r\n    });\r\n\r\n    promise.abort = function abort() {\r\n      toReject(new Error('Reading was aborted'));\r\n\r\n      reader.abort();\r\n\r\n      reader = null;\r\n\r\n      return this;\r\n    };\r\n\r\n    return promise;\r\n  }\r\n\r\n  /**\r\n   * @method BlobObject#saveAs\r\n   * @public\r\n   * @param {String} [name] - Name that is used for saving file.\r\n   * @returns {BlobObject} Returns this.\r\n   * @description Method for saving blobs.\r\n   *\r\n   * @example\r\n   * new BlobObject(new Blob(['{\"foo\":\"bar\"}'], { type: 'application/json' }))\r\n   *   .saveAs('blob.json');\r\n   */\r\n  saveAs(name = 'download') {\r\n    const anchor = document.createElement('a');\r\n\r\n    anchor.href = this.dataURL;\r\n    anchor.setAttribute('download', name);\r\n    anchor.click();\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\ndefineProperties(BlobObject.prototype, {\r\n  [Symbol.toStringTag]: 'BlobObject'\r\n});\r\n\r\nconstructors[1].push({\r\n  check: (blob) => /^(Blob|File)$/.test(toStringTag(blob)),\r\n  cls: BlobObject\r\n});\r\n\r\n/**\r\n * @function blob\r\n * @public\r\n * @param {(BlobParts[]|BlobParts)} blobParts - Blob parts that are passed to\r\n * [Blob]{@link https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob} constructor.\r\n * @param {Object} [options] - Options that are passed to\r\n * [Blob]{@link https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob} constructor.\r\n * @returns {BlobObject} New instance of BlobObject.\r\n * @description Function for creating blobs not involving BlobObject and Blob constructors.\r\n */\r\nfunction blob(blobParts, options = {}) {\r\n  if (!isArray(blobParts)) {\r\n    blobParts = [blobParts];\r\n  }\r\n\r\n  return new BlobObject(new Blob(blobParts, options));\r\n}\r\n\r\nexport { BlobObject, blob };\r\n","/**\r\n * @module Str\r\n * @private\r\n * @mixin\r\n * @description Exports Str class.\r\n */\r\n\r\nimport { D } from './D';\r\nimport { Super } from './Super';\r\nimport { constructors, regexpSpecialCharacters } from './constants';\r\nimport {\r\n  isFunction, isNumberLike, isObject, isString,\r\n  validate, Symbol, defineProperties, iterate\r\n} from './helpers';\r\n\r\nconst htmlSpecials = {\r\n  '&': '&amp;',\r\n  '<': '&lt;',\r\n  '>': '&gt;'\r\n};\r\nconst regexpSpecialsRegexp = new RegExp(\r\n  new Super(regexpSpecialCharacters)\r\n    .word((x) => `\\\\${ x }|`)\r\n    .replace(/\\|$/, ''),\r\n  'g'\r\n);\r\n\r\n/**\r\n * @class Str\r\n * @extends Super\r\n * @public\r\n * @param {String} [string = ''] - A string to wrap.\r\n * @returns {Str} Instance of Str.\r\n * @description Wrap of a string.\r\n *\r\n * @example\r\n * const s = new Num('1');\r\n */\r\nclass Str extends Super {\r\n  constructor(string = '') {\r\n    super(`${ string }`);\r\n\r\n    /**\r\n     * @member Str#$\r\n     * @type {String}\r\n     * @public\r\n     * @description Original string.\r\n     */\r\n  }\r\n\r\n  /**\r\n   * @method Str#capitalizeFirst\r\n   * @public\r\n   * @returns {Str} Capitalized string.\r\n   * @description Method capitalizing the first symbol.\r\n   *\r\n   * @example\r\n   * new Str('foo').capitalizeFirst().$; // 'Foo'\r\n   */\r\n  capitalizeFirst() {\r\n    const string = this.$;\r\n\r\n    return new Str(string.slice(0, 1).toUpperCase() + string.slice(1));\r\n  }\r\n\r\n  /**\r\n   * @method Str#endsWith\r\n   * @public\r\n   * @param {String} searchString - See the link.\r\n   * @param {Number} [position = string.length] - See the link.\r\n   * @returns {Boolean} If the string ends with the argument string.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\r\n   * @description Synonym for\r\n   * [String#endsWith]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith}.\r\n   */\r\n  endsWith(searchString, position) {\r\n    if (arguments.length < 2) {\r\n      position = this.$.length;\r\n    }\r\n\r\n    return this\r\n      .slice(0, position)\r\n      .revert()\r\n      .startsWith(new Str(searchString).revert().$);\r\n  }\r\n\r\n  /**\r\n   * @method Str#escapeHTML\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Methods escaping \"&\", \"<\" and \">\" symbols.\r\n   *\r\n   * @example\r\n   * new Str('\"1 < 2\" & \"7 > 4\" are true expressions.').escapeHTML().$;\r\n   * // '\"1 &lt; 2\" &amp \"7 &gt; 2\" are true expressions.'\r\n   */\r\n  escapeHTML() {\r\n    let string = this.$;\r\n\r\n    iterate(htmlSpecials, (escaped, symbol) => {\r\n      string = string.replace(new RegExp(symbol, 'g'), escaped);\r\n    });\r\n\r\n    return new Str(string);\r\n  }\r\n\r\n  /**\r\n   * @method Str#escapeRegExp\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Method escaping RegExp special characters.\r\n   *\r\n   * @example\r\n   * new Str('(213.98 - [] {})').escapeRegExp().$; // '\\(213\\.98 \\- \\[\\] \\{\\}\\)'\r\n   */\r\n  escapeRegExp() {\r\n    return this.replace(regexpSpecialsRegexp, '\\\\$&');\r\n  }\r\n\r\n  /**\r\n   * @method Str#in\r\n   * @public\r\n   * @param {*} object - Object to check the string as a property in.\r\n   * @returns {Boolean} If it is in the object or not.\r\n   * @description Returns string in object.\r\n   *\r\n   * @example\r\n   * new Str('a').in({ a: 1 }); // true\r\n   * new Str('toFixed').in(1);  // false\r\n   * new Str('a').in(null);     // false\r\n   */\r\n  in(object) {\r\n    if (!isObject(object)) {\r\n      return false;\r\n    }\r\n\r\n    return this.$ in object;\r\n  }\r\n\r\n  /**\r\n   * @method Str#indexOf\r\n   * @public\r\n   * @param {String} searchValue - See the link.\r\n   * @param {Number} [fromIndex = 0] - See the link.\r\n   * @returns {Number} Found index or -1.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\r\n   * @description Synonym for\r\n   * [String#indexOf]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf}.\r\n   */\r\n  indexOf(searchValue, fromIndex) {\r\n    return this.$.indexOf.apply(this.$, arguments);\r\n  }\r\n\r\n  /**\r\n   * @method Str#lastIndexOf\r\n   * @public\r\n   * @param {String} searchValue - See the link.\r\n   * @param {Number} [fromIndex = string.length] - See the link.\r\n   * @returns {Number} Found index or -1.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf\r\n   * @description Synonym for\r\n   * [String#lastIndexOf]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf}.\r\n   */\r\n  lastIndexOf(searchValue, fromIndex) {\r\n    return this.$.lastIndexOf.apply(this.$, arguments);\r\n  }\r\n\r\n  /**\r\n   * @member Str#length\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/length\r\n   * @description Synonym for\r\n   * [String#length]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/length}.\r\n   */\r\n  get length() {\r\n    return this.$.length;\r\n  }\r\n\r\n  /**\r\n   * @method Str#match\r\n   * @public\r\n   * @returns {Arr|Super} D-Wrap of found match.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/match\r\n   * @description Synonym for\r\n   * [String#match]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/match}.\r\n   */\r\n  match(regexp) {\r\n    return D(this.$.match.apply(this.$, arguments));\r\n  }\r\n\r\n  /**\r\n   * @method Str#repeat\r\n   * @public\r\n   * @param {Integer} times - Times to repeat the string.\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\r\n   * @description Synonym for\r\n   * [String#repeat]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/repeat}.\r\n   *\r\n   * @example\r\n   * new Str('123').repeat(2).$; // '123123'\r\n   * new Str('123').repeat(0).$; // ''\r\n   */\r\n  repeat(times) {\r\n    validate([times], [['intLike', '>=0']], 'Str#repeat');\r\n\r\n    times = +times;\r\n\r\n    const string = this.$;\r\n\r\n    let s = '';\r\n\r\n    for (let i = 0; i < times; i++) {\r\n      s += string;\r\n    }\r\n\r\n    return new Str(s);\r\n  }\r\n\r\n  /**\r\n   * @method Str#replace\r\n   * @public\r\n   * @param {RegExp|String} regexp - See the link.\r\n   * @param {String|Function} [replacer = ''] - See the link.\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/replace\r\n   * @description Synonym for\r\n   * [String#replace]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/replace}\r\n   * besides that replacer has a default value of ''.\r\n   */\r\n  replace(regexp, replacer = '') {\r\n    return new Str(this.$.replace(regexp, replacer));\r\n  }\r\n\r\n  /**\r\n   * @method Str#replaceString\r\n   * @public\r\n   * @param {String} string - String to replace.\r\n   * @param {String} [replacer = ''] - String to replace with.\r\n   * @returns {Str} New instance of Str.\r\n   * @description Method for global string replaceing.\r\n   *\r\n   * @example\r\n   * new Str('123123').replaceString('1', '4').$; // '423423'\r\n   * new Str('123123').replaceString('1').$;      // '2323'\r\n   */\r\n  replaceString(string, replacer = '') {\r\n    string = new Super(string).$;\r\n\r\n    validate([string], ['string'], 'Str#replaceString');\r\n\r\n    return new Str(this.$.split(string).join(replacer));\r\n  }\r\n\r\n  /**\r\n   * @method Str#revert\r\n   * @public\r\n   * @returns {Str} New instance of string.\r\n   * @description Method for reverting a string.\r\n   *\r\n   * @example\r\n   * new Str('1234').revert().$; // '4321'\r\n   */\r\n  revert() {\r\n    const string = this.$;\r\n    let str = '';\r\n\r\n    for (let i = string.length - 1; i >= 0; i--) {\r\n      str += string[i];\r\n    }\r\n\r\n    return new Str(str);\r\n  }\r\n\r\n  /**\r\n   * @method Str#search\r\n   * @public\r\n   * @param {RegExp} regexp - See the link.\r\n   * @returns {Number} Index of the first match, if found, and -1 if not.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/search\r\n   * @description Synonym for\r\n   * [String#search]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/search}.\r\n   */\r\n  search(regexp) {\r\n    validate([regexp], ['regexp']);\r\n\r\n    return this.$.search.apply(this.$, arguments);\r\n  }\r\n\r\n  /**\r\n   * @method Str#slice\r\n   * @public\r\n   * @param {Number} [beginSlice = 0] - See the link.\r\n   * @param {Number} [endSlice = string.length] - See the link.\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/slice\r\n   * @description Synonym for\r\n   * [String#slice]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/slice}.\r\n   */\r\n  slice(beginSlice, endSlice) {\r\n    return new Str(this.$.slice.apply(this.$, arguments));\r\n  }\r\n\r\n  /**\r\n   * @method Str#split\r\n   * @public\r\n   * @param {RegExp|String} [separator] - See the link.\r\n   * @returns {Arr|Super} D-Wrap of the array.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/split\r\n   * @description Synonym for\r\n   * [String#split]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/split}.\r\n   */\r\n  split(separator) {\r\n    return D(this.$.split.apply(this.$, arguments));\r\n  }\r\n\r\n  /**\r\n   * @method Str#startsWith\r\n   * @public\r\n   * @param {String} searchString - See the link.\r\n   * @param {Number} [position = 0] - See the link.\r\n   * @returns {Boolean} If the string ends with the argument string.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\r\n   * @description Synonym for\r\n   * [String#startsWith]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith}.\r\n   */\r\n  startsWith(searchString, position = 0) {\r\n    return this.$.indexOf.apply(this.$, arguments) === position;\r\n  }\r\n\r\n  /**\r\n   * @method Str#substr\r\n   * @public\r\n   * @param {Number} [start = 0] - See the link.\r\n   * @param {Number} [length = string.length] - See the link.\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/substr\r\n   * @description Synonym for\r\n   * [String#substr]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/substr}.\r\n   */\r\n  substr(start, length) {\r\n    return new Str(this.$.substr.apply(this.$, arguments));\r\n  }\r\n\r\n  /**\r\n   * @method Str#substring\r\n   * @public\r\n   * @param {Number} [indexStart = 0] - See the link.\r\n   * @param {Number} [indexEnd = string.length] - See the link.\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/substring\r\n   * @description Synonym for\r\n   * [String#substring]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/substring}.\r\n   */\r\n  substring(indexStart, indexEnd) {\r\n    return new Str(this.$.substring.apply(this.$, arguments));\r\n  }\r\n\r\n  /**\r\n   * @method Str#toCamelCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Removes following regexp /\\s\\-_\\./ making the string camel cased.\r\n   *\r\n   * @example\r\n   * new Str('spinal-case').toCamelCase().$;  // 'spinalCase'\r\n   * new Str('_snake_case_').toCamelCase().$; // 'snakeCase'\r\n   */\r\n  toCamelCase() {\r\n    return new Str(trim(this.$)\r\n      .replace(/[\\s\\-_.]+/g, '-')\r\n      .replace(/-[^-]/g, (match) => match[1].toUpperCase())\r\n      .replace(/^[\\S]/, (match) => match.toLowerCase())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @method Str#toCapitalCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Removes following regexp /\\-_\\./ making the string capital letter cased.\r\n   *\r\n   * @example\r\n   * new Str('spinal-case').toCapitalCase().$;  // 'Spinal Case'\r\n   * new Str('_snake_case_').toCapitalCase().$; // 'Snake Case'\r\n   */\r\n  toCapitalCase() {\r\n    return new Str(trim(this.$)\r\n      .replace(/[\\s\\-_.]+/g, ' ')\r\n      .replace(/[\\S]/g, (match) => (\r\n        match.toLowerCase() === match ? match : ` ${ match }`\r\n      ))\r\n      .replace(/\\s[\\S]/g, (match) => match.toUpperCase())\r\n      .replace(/\\s+/g, ' ')\r\n      .replace(/^\\s/, '')\r\n      .replace(/^[\\S]/, (match) => match.toUpperCase())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @method Str#toDotCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Removes following regexp /\\-_\\./ making the string dot cased.\r\n   *\r\n   * @example\r\n   * new Str('spinal-case').toDotCase().$;  // 'spinal.case'\r\n   * new Str('_snake_case_').toDotCase().$; // 'snake.case'\r\n   */\r\n  toDotCase() {\r\n    return new Str(trim(this.$)\r\n      .replace(/[\\s\\-_.]+/g, '.')\r\n      .replace(/[^.]/g, (match) => (\r\n        match.toLowerCase() === match ? match : `.${ match }`\r\n      ))\r\n      .replace(/\\.+/g, '.')\r\n      .replace(/^\\./, '')\r\n      .toLowerCase()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @method Str#toHyphenCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Removes following regexp /\\s\\-_\\./ making the string camel cased.\r\n   *\r\n   * @example\r\n   * new Str('camelCase').toSpinalCase().$;    // 'camel-case'\r\n   * new Str('_snake_case_').toSpinalCase().$; // 'snake-case'\r\n   */\r\n  toHyphenCase() {\r\n    return new Str(trim(this.$)\r\n      .replace(/[\\s\\-_.]+/g, '-')\r\n      .replace(/[^-]/g, (match) => (\r\n        match.toLowerCase() === match ? match : `-${ match }`\r\n      ))\r\n      .replace(/-+/g, '-')\r\n      .replace(/^-/, '')\r\n      .toLowerCase()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @method Str#toLowerCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase\r\n   * @description Synonym for\r\n   * [String#toLowerCase]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase}.\r\n   *\r\n   * @example\r\n   * new Str('UPPER-CASE').toLowerCase().$;  // 'upper-case'\r\n   */\r\n  toLowerCase() {\r\n    return new Str(this.$.toLowerCase());\r\n  }\r\n\r\n  /**\r\n   * @method Str#toSnakeCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Removes following regexp /\\s\\-\\./ making the string spinal cased.\r\n   *\r\n   * @example\r\n   * new Str('spinal-case').toSnakeCase().$; // 'spinal_case'\r\n   * new Str('camelCase').toSnakeCase().$;   // 'camel_case'\r\n   */\r\n  toSnakeCase() {\r\n    return new Str(trim(this.$)\r\n      .replace(/[\\s\\-_.]+/g, '_')\r\n      .replace(/[^_]/g, (match) => (\r\n        match.toLowerCase() === match ? match : `_${ match }`\r\n      ))\r\n      .replace(/_+/g, '_')\r\n      .replace(/^_/, '')\r\n      .toLowerCase()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @method Str#toSpaceCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Removes following regexp /\\-_\\./ making the string space cased.\r\n   *\r\n   * @example\r\n   * new Str('spinal-case').toSpaceCase().$;  // 'spinal case'\r\n   * new Str('_snake_case_').toSpaceCase().$; // 'snake case'\r\n   */\r\n  toSpaceCase() {\r\n    return new Str(trim(this.$)\r\n      .replace(/[\\s\\-_.]+/g, ' ')\r\n      .replace(/[\\S]/g, (match) => (\r\n        match.toLowerCase() === match ? match : ` ${ match }`\r\n      ))\r\n      .replace(/\\s+/g, ' ')\r\n      .replace(/^\\s/, '')\r\n      .toLowerCase()\r\n    );\r\n  }\r\n\r\n  toString() {\r\n    return this.$;\r\n  }\r\n\r\n  /**\r\n   * @method Str#toUpperCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\r\n   * @description Synonym for\r\n   * [String#toUpperCase]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase}.\r\n   *\r\n   * @example\r\n   * new Str('lower-case').toUpperCase().$;  // 'LOWER-CASE'\r\n   */\r\n  toUpperCase() {\r\n    return new Str(this.$.toUpperCase());\r\n  }\r\n\r\n  /**\r\n   * @method Str#trim\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trim\r\n   * @description Synonym for\r\n   * [String#trim]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trim}.\r\n   */\r\n  trim() {\r\n    return new Str(this.$.replace(/^[\\s\\ufeff\\u00a0]+|[\\s\\ufeff\\u00a0]+$/g, ''));\r\n  }\r\n\r\n  /**\r\n   * @method Str#trimLeft\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trimLeft\r\n   * @description Synonym for\r\n   * [String#trimLeft]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trimLeft}.\r\n   */\r\n  trimLeft() {\r\n    return new Str(this.$.replace(/^[\\s\\ufeff\\u00a0]+/, ''));\r\n  }\r\n\r\n  /**\r\n   * @method Str#trimRight\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trimRight\r\n   * @description Synonym for\r\n   * [String#trimRight]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trimRight}.\r\n   */\r\n  trimRight() {\r\n    return new Str(this.$.replace(/[\\s\\ufeff\\u00a0]+$/, ''));\r\n  }\r\n}\r\n\r\ndefineProperties(Str.prototype, {\r\n  [Symbol.toStringTag]: 'Str'\r\n});\r\n\r\nconstructors[2].push({\r\n  check: isString,\r\n  cls: Str\r\n});\r\n\r\nfunction trim(string) {\r\n  return string.replace(/^[\\s\\-_.]+|[\\s\\-_.]+$/g, '');\r\n}\r\n\r\n/**\r\n * @function parseJSON\r\n * @public\r\n * @param {String} [json = null] - String to parse.\r\n * @param {Object} [options] - Options.\r\n * @param {Boolean|*} [options.numbers] - If it is needed to parse number-like strings as numbers.\r\n * @param {Boolean|*} [options.dates] - If it is needed to parse date-like string as dates.\r\n * Date-like string is considered to match ^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\\dZ?$\r\n * @param {JSONCallback} [callback] - Callback that called on every iteration.\r\n * @returns {DWrap} D-Wrap of found match.\r\n * @description Method for parsing json.\r\n *\r\n * @example\r\n * parseJSON('{ \"a\": 1 }').$;                                           // { a: 1 }\r\n * parseJSON('{ \"a\": \"1\" }', { numbers: true }).$;                      // { numbers: true }\r\n * parseJSON('{ \"a\": \"1999-12-31T23:59:59.999Z\" }', { dates: true }).$; // { a: Date {...} }\r\n */\r\nfunction parseJSON(json = null, options = {}, callback) {\r\n  if (arguments.length <= 1) {\r\n    return D(JSON.parse(json));\r\n  }\r\n\r\n  if (isFunction(options)) {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n\r\n  const { numbers, dates } = options;\r\n  const parsed = JSON.parse(json, function (key, value) {\r\n    if (dates && /^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\\dZ?$/.test(value)) {\r\n      value = new Date(value);\r\n    } else if (numbers && isNumberLike(value) && isString(value)) {\r\n      value = Number(value);\r\n    }\r\n\r\n    return callback ? callback.apply(this, arguments) : value;\r\n  });\r\n\r\n  return D(parsed);\r\n}\r\n\r\nexport { Str, parseJSON };\r\n","/**\r\n * @module helpers/markupToJSON\r\n * @private\r\n * @description Exports markupToJSON method.\r\n */\r\n\r\nimport { Arr } from '../Arr';\r\nimport { Str } from '../Str';\r\nimport { Super } from '../Super';\r\nimport { switcher } from '../Switcher';\r\nimport { htmlAllowedTagSymbols, htmlAllowedAttrSymbols, voidElements } from '../constants';\r\n\r\n/**\r\n * @typedef {Object} MarkupElement\r\n * @property {'comment'|'text'|'element'} type - Type of the node.\r\n * @property {MarkupElement} parent - Type of the node.\r\n * @property {Object.<String, String>} attrs - Node attributes\r\n * @property {MarkupElement[]} children - Node children.\r\n */\r\n\r\nconst submitString = 'Please, submit an issue at https://github.com/dwaynejs/dwayne/issues.';\r\nconst NODE_REGEX_SET = new Super({\r\n  'tag-open': new RegExp(`<(${ htmlAllowedTagSymbols })\\\\s*`, 'i'),\r\n  'tag-close': constructCloseTagRegExp(htmlAllowedTagSymbols),\r\n  comment: /<!--((?:-[^\\->]|[^\\->])(?:-?[^-])*[^-]?|)-->/\r\n});\r\nconst TAG_OPEN_CLOSE = /^(\\/?)>/;\r\n// const ATTRIBUTE = /^([^\\u0000-\\u0020\\s\"'>\\/=]+)(?:\\s*=\\s*('[^']*'|\"[^\"]*\"|[^\\s\"'`<>=]+))?\\s*/;\r\nconst ATTRIBUTE = new RegExp(`^(${ htmlAllowedAttrSymbols })(?:\\\\s*=\\\\s*('[^']*'|\"[^\"]*\"|[^\\\\s\"'\\`<>=]+))?\\\\s*`);\r\nconst div = document.createElement('div');\r\nconst nodeSwitcher = switcher('strictEquals', (elem) => elem)\r\n  .case('tag-open', (elem, node) => {\r\n    const {\r\n      value: name,\r\n      selfClosing\r\n    } = node;\r\n\r\n    node = {\r\n      name,\r\n      attrs: new Super(node.attrs).map((value) => (\r\n        parseCharacterData(value)\r\n      )).$,\r\n      parent: elem,\r\n      children: new Arr([])\r\n    };\r\n\r\n    elem.children.push(node);\r\n\r\n    if (!selfClosing && voidElements.indexOf(name) === -1) {\r\n      elem = node;\r\n    }\r\n\r\n    return elem;\r\n  })\r\n  .case('tag-close', (elem, node) => {\r\n    if (elem.name === node.value) {\r\n      elem = elem.parent;\r\n    }\r\n\r\n    return elem;\r\n  })\r\n  .case(['comment', 'text'], (elem, node, collapseWhiteSpace, type) => {\r\n    const element = {\r\n      name: `#${ type }`,\r\n      parent: elem,\r\n      value: node.value\r\n    };\r\n\r\n    if (type === 'text' && elem.name !== 'script' && elem.name !== 'style') {\r\n      element.value = parseCharacterData(element.value);\r\n\r\n      if (collapseWhiteSpace) {\r\n        element.value = new Str(element.value).trim().$;\r\n      }\r\n    }\r\n\r\n    if (!collapseWhiteSpace || !/^\\s*$/.test(element.value)) {\r\n      elem.children.push(element);\r\n    }\r\n\r\n    return elem;\r\n  });\r\nconst rawTextSwitcher = switcher('strictEquals', false)\r\n  .case(['title', 'textarea', 'style', 'script'], true);\r\n\r\nclass InternalParsingError {\r\n  constructor(index) {\r\n    this.index = index;\r\n  }\r\n}\r\n\r\nclass ParsingError extends Error {\r\n  type = 'PARSING_ERROR';\r\n}\r\n\r\n/**\r\n * @function markupToJSON\r\n * @private\r\n * @param {String} markup - Markup to parse to JSON.\r\n * @param {Boolean} [collapseWhiteSpace = false] - If the whitespace should be collapsed.\r\n * @returns {Arr.<MarkupElement>} Markup elements array.\r\n * @description Function for parsing html and xml to JSON.\r\n */\r\nexport default (markup, collapseWhiteSpace) => {\r\n  collapseWhiteSpace = !!collapseWhiteSpace;\r\n\r\n  const elements = new Arr([]);\r\n  const startMarkup = markup;\r\n  let found;\r\n  let globalIndex = 0;\r\n  let elem = {\r\n    name: null,\r\n    children: elements\r\n  };\r\n\r\n  while (markup.length) {\r\n    try {\r\n      found = find(markup, elem);\r\n    } catch (err) {\r\n      if (!(err instanceof InternalParsingError)) {\r\n        throwUnexpectedError();\r\n      }\r\n\r\n      throw new ParsingError(`Parsing error near index ${ nearString(startMarkup, globalIndex + err.index) }`);\r\n    }\r\n\r\n    const {\r\n      type,\r\n      attrs,\r\n      selfClosing,\r\n      index,\r\n      value\r\n    } = found;\r\n\r\n    globalIndex += index;\r\n\r\n    if (!index) {\r\n      throwUnexpectedError();\r\n    }\r\n\r\n    const node = {\r\n      type,\r\n      value\r\n    };\r\n\r\n    if (type === 'tag-open') {\r\n      node.attrs = attrs;\r\n      node.selfClosing = selfClosing;\r\n    }\r\n\r\n    elem = nodeSwitcher(node.type, [elem, node, collapseWhiteSpace]);\r\n\r\n    markup = markup.slice(index);\r\n  }\r\n\r\n  return elements;\r\n\r\n  function throwUnexpectedError() {\r\n    throw new ParsingError(`Unexpected parsing error near index ${ nearString(startMarkup, globalIndex) }. ${ submitString }`);\r\n  }\r\n};\r\n\r\nfunction find(markup, elem) {\r\n  const { name } = elem;\r\n  let matches;\r\n\r\n  if (rawTextSwitcher(name)) {\r\n    matches = new Super({\r\n      'tag-close': markup.match(constructCloseTagRegExp(name))\r\n    });\r\n  } else {\r\n    matches = NODE_REGEX_SET.map((regex) => (\r\n      markup.match(regex)\r\n    ));\r\n  }\r\n\r\n  let match;\r\n\r\n  if (\r\n    match = matches.find((match) => (\r\n      match && match.index === 0\r\n    ))\r\n  ) {\r\n    const returning = {\r\n      type: match.key,\r\n      index: match.value[0].length,\r\n      value: match.value[1]\r\n    };\r\n    const attrs = {};\r\n\r\n    if (match.key === 'tag-open') {\r\n      const startMarkup = markup;\r\n      let closeMatch;\r\n\r\n      returning.selfClosing = false;\r\n      returning.attrs = attrs;\r\n\r\n      while (\r\n        (markup = startMarkup.slice(returning.index)) &&\r\n        !(closeMatch = markup.match(TAG_OPEN_CLOSE))\r\n      ) {\r\n        const attr = markup.match(ATTRIBUTE);\r\n\r\n        if (!attr) {\r\n          returning.index += 1;\r\n\r\n          continue;\r\n        }\r\n\r\n        attrs[attr[1]] = (attr[2] || '').replace(/^(\"|')|(\"|')$/g, '');\r\n        returning.index += attr[0].length;\r\n      }\r\n\r\n      if (closeMatch) {\r\n        returning.index += closeMatch[0].length;\r\n        returning.selfClosing = !!closeMatch[1];\r\n      }\r\n    }\r\n\r\n    return returning;\r\n  }\r\n\r\n  let { value: index } = matches.min((match) => (\r\n    match ? match.index : NaN\r\n  ));\r\n\r\n  if (index === Infinity) {\r\n    index = markup.length;\r\n  }\r\n\r\n  return {\r\n    type: 'text',\r\n    index,\r\n    value: markup.slice(0, index)\r\n  };\r\n}\r\n\r\nfunction constructCloseTagRegExp(tagName) {\r\n  return new RegExp(`</(${ tagName })\\\\s*>`, 'i');\r\n}\r\n\r\nfunction nearString(markup, index) {\r\n  return `${ index } (~~~ \"${ markup.slice(index, index + 15) }\" ~~~, the string itself is \"${ markup }\")`;\r\n}\r\n\r\nfunction parseCharacterData(string) {\r\n  return string.replace(/&(\\w+|#x?\\d+);/g, (match) => {\r\n    div.innerHTML = match;\r\n\r\n    return div.textContent || div.innerText;\r\n  });\r\n}\r\n","/**\r\n * @module Elem\r\n * @private\r\n * @mixin\r\n * @description Exports Elem class.\r\n */\r\n\r\nimport { Super } from './Super';\r\nimport { Arr, array, iterate as times } from './Arr';\r\nimport { blob } from './BlobObject';\r\nimport { method } from './Func';\r\nimport { Promise } from './Promise';\r\nimport { Str } from './Str';\r\nimport { switcher } from './Switcher';\r\nimport {\r\n  constructors, appliedRegExps, htmlElements, svgElements,\r\n  canvasGetMethods, canvasRestMethods\r\n} from './constants';\r\nimport {\r\n  isArray, isArrayLike, isElement, isFunction,\r\n  isInteger, isNil, isNumber, isNull, isString,\r\n  assign, dynamicDefineProperties, defineProperties, toArray,\r\n  validate, toStringTag, iterate, Symbol\r\n} from './helpers';\r\nimport markupToJSON from './helpers/markupToJSON';\r\n\r\n/**\r\n * @typedef {String} ElemEventString\r\n * @public\r\n * @description A string containing events separated by a comma with zero or more spaces or just spaces.\r\n */\r\n\r\n/**\r\n * @callback ElemValueCallback\r\n * @public\r\n * @param {String} value - Old value.\r\n * @param {Elem} elem - Current element.\r\n * @param {Number} index - Index in the set of the elements.\r\n */\r\n\r\n/**\r\n * @callback ElemSetOfCallback\r\n * @public\r\n * @param {Element} created - Created element.\r\n * @param {*} value - Value of the iterated element in the object.\r\n * @param {Key} key - Key of the iterated element in the object.\r\n * @param {*} object - Object that is iterated over.\r\n * @param {Element} elem - Current element.\r\n * @param {Number} index - Index of the current element.\r\n */\r\n\r\n/**\r\n * @callback ValidateCallback\r\n * @public\r\n * @param {*} value - Element value.\r\n * @param {Element} elem - Element to validate.\r\n * @param {Number} index - Index of the element.\r\n */\r\n\r\n/**\r\n * @callback CtxCallback\r\n * @public\r\n * @param {CanvasRenderingContext2D} ctx - Canvas rendering context.\r\n */\r\n\r\n/**\r\n * @callback ElemListener\r\n * @public\r\n * @param {Event} e - Fired event.\r\n * @param {Element} elem - Element on which the listener was called.\r\n * @param {Number} index - Index of the element on which the listener was called.\r\n */\r\n\r\n/**\r\n * @callback ElemRemoveListeners\r\n * @public\r\n * @param {...ElemEventString} events - If at least one argument present only removes event listeners specified\r\n * by the events in the arguments.\r\n */\r\n\r\nconst nativeDocument = global.document;\r\nconst emptyDiv = nativeDocument.createElement('div');\r\nconst eventSeparator = /(,| ) */;\r\nconst textProperty = new Super(Node.prototype).propertyDescriptor('textContent') ? 'textContent' : 'innerText';\r\nconst classes = {};\r\nconst attrs = {};\r\nconst windowsDwayneData = new Arr([]);\r\nconst inputElements = 'input, select, textarea, datalist, keygen, output';\r\nconst click = method('click');\r\nconst svgNS = 'http://www.w3.org/2000/svg';\r\nconst xmlNS = 'http://www.w3.org/2000/xmlns/';\r\nconst xlinkNS = 'http://www.w3.org/1999/xlink';\r\nconst xhtmlNS = 'http://www.w3.org/1999/xhtml';\r\nconst typeSwitcher = switcher('call', (elem, type) => {\r\n  const ns = type === 'svg'\r\n    ? svgNS\r\n    : elem.prop('namespaceURI') || nativeDocument.documentElement.namespaceURI || xhtmlNS;\r\n\r\n  return nativeDocument.createElementNS(ns, type);\r\n})\r\n  .case(\r\n    (type) => type === '#comment',\r\n    () => nativeDocument.createComment('')\r\n  )\r\n  .case(\r\n    (type) => type === '#text',\r\n    () => nativeDocument.createTextNode('')\r\n  );\r\nconst refSwitcher = switcher('strictEquals', 'href')\r\n  .case(\r\n    ['img', 'script', 'iframe', 'audio', 'video'],\r\n    'src'\r\n  )\r\n  .case(\r\n    'form',\r\n    'action'\r\n  );\r\nconst filterSwitcher = switcher('call', (selector) => selector)\r\n  .case(\r\n    isString,\r\n    (selector) => (\r\n      (elem) => new Elem(elem).is(selector)\r\n    )\r\n  )\r\n  .case(\r\n    [isArray, isElem],\r\n    (elems) => {\r\n      elems = new Arr(elems);\r\n\r\n      return (elem) => elems.indexOf(elem) !== -1;\r\n    }\r\n  );\r\nconst innerSwitcher = switcher('strictEquals', 0)\r\n  .case('padding-box', (paddings) => paddings)\r\n  .case('border-box', (paddings, borders) => paddings + borders);\r\nconst outerSwitcher = switcher('strictEquals', (borders, paddings) => borders + paddings)\r\n  .case('padding-box', (borders) => borders)\r\n  .case('border-box', 0);\r\nconst attrNSSwitcher = switcher('call', null)\r\n  .case((attr) => attr === 'xmlns' || attr === 'xmlns:xlink', (elem) => (\r\n    elem.name === 'svg'\r\n      ? xmlNS\r\n      : null\r\n  ))\r\n  .case((attr) => /^xlink:\\w/.test(attr), (elem) => (\r\n    elem.closest('svg').length\r\n      ? xlinkNS\r\n      : null\r\n  ));\r\n\r\n/**\r\n * @class Elem\r\n * @extends Arr\r\n * @public\r\n * @param {Element|Element[]} [elem = []] - An element or an array of elements to wrap.\r\n * @returns {Elem} Instance of Elem.\r\n * @description Wrap of an elements set. Also has all methods from from\r\n * [CanvasRenderingContext2D]{@link https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D}.\r\n * Getters methods return the same as methods from CanvasRenderingContext2D and the rest return this.\r\n * Work for the first canvas element in the set.\r\n *\r\n * @example\r\n * new Elem(document.body);\r\n * new Elem(document.querySelectorAll('.cls'));\r\n * new Elem(document.getElementsByClassName('cls'));\r\n */\r\nclass Elem extends Arr {\r\n  constructor(elem = []) {\r\n    super((() => {\r\n      let element = elem;\r\n\r\n      if (isArrayLike(element) && (\r\n        isWindow(element) ||\r\n        isHTMLDocument(element) ||\r\n        isDocumentFragment(element) ||\r\n        isElement(element) ||\r\n        isCommentOrText(element) ||\r\n        isStyleRule(element)\r\n      )) {\r\n        element = [element];\r\n      }\r\n\r\n      return new Arr(toArray(new Super(element).$, true)).object((elems, elem) => {\r\n        if (elems.indexOf(elem) === -1 && (\r\n          isElement(elem) ||\r\n          isWindow(elem) ||\r\n          isHTMLDocument(elem) ||\r\n          isDocumentFragment(elem) ||\r\n          isCommentOrText(elem) ||\r\n          isStyleRule(elem)\r\n        )) {\r\n          return elems.push(elem);\r\n        }\r\n\r\n        if (isElem(elem)) {\r\n          elems.push.apply(elems, elem.$);\r\n        }\r\n      }, []).$;\r\n    })());\r\n\r\n    this.$$ = elem;\r\n\r\n    this.forEach(addDwayneData);\r\n\r\n    /**\r\n     * @member {Array.<Node|Window>} Elem#$\r\n     * @type {Array.<Node|Window>}\r\n     * @public\r\n     * @description Constructed element set.\r\n     */\r\n\r\n    /**\r\n     * @member {*} Elem#$$\r\n     * @type {*}\r\n     * @public\r\n     * @description Initial element set.\r\n     */\r\n  }\r\n\r\n  /**\r\n   * @method Elem#add\r\n   * @public\r\n   * @param {...(String|Elem|Element|Element[])} elements - Each argument is a selector, or Elem, or Element, or array of Elements.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for adding new elements to the set.\r\n   *\r\n   * @example\r\n   * elem1.find('.cls1')\r\n   *   .add(elem2.find('.cls2'))\r\n   *   .hide();\r\n   */\r\n  add(...elements) {\r\n    iterate(arguments, (elem) => {\r\n      toFind(elem).forEach((elem) => {\r\n        if (this.indexOf(elem) === -1) {\r\n          this.push(elem);\r\n        }\r\n      });\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#addClass\r\n   * @public\r\n   * @param {...String} classes - Classes to add.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for adding classes to the all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.addClass('red', 'round');\r\n   */\r\n  addClass(...classes) {\r\n    return this.forEach((elem) => {\r\n      const list = elem.classList;\r\n\r\n      iterate(isElement(elem) && arguments, (cls) => list.add(cls));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#addComment\r\n   * @public\r\n   * @param {String} text - Text of comment to add.\r\n   * @param {Boolean} end - If the comment should be inserted to the end. If false it's inserted to the start.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for adding comment to all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.addHTML('<div>1</div>');\r\n   */\r\n  addComment(text, end = true) {\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.insertAdjacentHTML(end ? 'beforeend' : 'afterbegin', `<!--${ text }-->`);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#addHTML\r\n   * @public\r\n   * @param {String} html - HTML to add.\r\n   * @param {Boolean} end - If the HTML should be inserted to the end. If false it's inserted to the start.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for adding HTML to all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.addHTML('<div>1</div>');\r\n   */\r\n  addHTML(html, end = true) {\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.insertAdjacentHTML(end ? 'beforeend' : 'afterbegin', html);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#addRule\r\n   * @public\r\n   * @param {String} name - Name of the rule.\r\n   * @param {String} selector - Selector for the rule\r\n   * @param {Object.<String, String>} style - Style for the selector.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for adding css styles into the first style tag in the set.\r\n   * Note: style element should be inside the document.\r\n   *\r\n   * @example\r\n   * style.addRule('img-size', 'img.square', {\r\n   *   width: '40px !important',\r\n   *   height: '40px !important'\r\n   * });\r\n   */\r\n  addRule(name, selector, style) {\r\n    this.some((elem) => {\r\n      if (getName(elem) === 'style') {\r\n        const { sheet } = elem;\r\n        const { length } = sheet.cssRules;\r\n        const rules = new Super(style).word((value, property) => (\r\n          `${ new Str(property).toHyphenCase() }: ${ value };\\n`\r\n        ));\r\n\r\n        sheet.insertRule(\r\n          `${ selector } {${ rules && '\\n' }${ rules }}`,\r\n          length\r\n        );\r\n        sheet.cssRules[length].dwayneData = { name };\r\n\r\n        return true;\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#addText\r\n   * @public\r\n   * @param {String} text - Text to add.\r\n   * @param {Boolean} end - If the text should be inserted to the end. If false it's inserted to the start.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for adding text to all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.addText('123');\r\n   */\r\n  addText(text, end = true) {\r\n    return this.forEach((elem) => {\r\n      new Elem(nativeDocument.createTextNode(text)).into(elem, end);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#apply\r\n   * @public\r\n   * @param {...String} strings - Strings to apply.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method that is a shorthand for many other methods.\r\n   * All shorthands can be separated with space and written within one string.\r\n   *\r\n   * @example\r\n   * elem.apply(\r\n   *   '#id .c1 .c2 @border(1px solid black) $disabled $attr(some value) *(Click me!)'\r\n   * );\r\n   * // shorthand for\r\n   * // elem\r\n   * //   .id('id')\r\n   * //   .addClass('c1', 'c2')\r\n   * //   .css('border', '1px solid black')\r\n   * //   .attr({\r\n   * //     attr, 'some value'\r\n   * //     disabled: ''\r\n   * //   })\r\n   * //   .text('Click me!');\r\n   * // There is a full list of possible types of syntax below...\r\n   *\r\n   * elem.apply('#id');                    // shorthand for elem.id('id');\r\n   * elem.apply('.c1 .c2');                // shorthand for elem.addClass('c1', 'c2');\r\n   * elem.apply('-.c1 -.c2');              // shorthand for elem.removeClass('c1', 'c2');\r\n   * elem.apply('-@float -@display');      // shorthand for elem.removeCSS('float', 'display');\r\n   * elem.apply('-$a1 -$a2');              // shorthand for elem.removeAttr('a1', 'a2');\r\n   * elem.apply('*(some text)');           // shorthand for elem.text('some text');\r\n   * elem.apply('&(<div>1</div>)');        // shorthand for elem.html('<div>1</div>');\r\n   * elem.apply('@float(right)');          // shorthand for elem.css('float', 'right');\r\n   * elem.apply('@transform(scale(5px))'); // shorthand for elem.css('transform', 'scale(5px)');\r\n   * elem.apply('@margin(2px 2px)');       // shorthand for elem.css('margin', '2px 2px');\r\n   * elem.apply('@marginLeft(2px)');       // shorthand for elem.css('marginLeft', '2px 2px');\r\n   * elem.apply('@margin-left(2px)');      // shorthand for elem.css('margin-left', '2px 2px');\r\n   * elem.apply('$attr(some value)');      // shorthand for elem.attr('attr', 'some value');\r\n   * elem.apply('$attr');                  // shorthand for elem.attr('attr', '');\r\n   */\r\n  apply(...strings) {\r\n    let applied;\r\n    let setApplied;\r\n    let callback;\r\n    let name;\r\n    let np1;\r\n    let slice;\r\n\r\n    new Str(new Arr(arguments).join(' '))\r\n      .split(/(\\s+)/)\r\n      .forEach((string) => {\r\n        if (!applied) {\r\n          np1 = string.slice(0, 1);\r\n          callback = appliedRegExps[np1];\r\n          slice = 1;\r\n\r\n          if (callback && !isFunction(callback)) {\r\n            callback = callback[string.slice(1, 2)];\r\n            slice = 2;\r\n          }\r\n\r\n          if (/^\\s+$/.test(string) || !callback) {\r\n            return;\r\n          }\r\n\r\n          name = string.slice(slice).match(/^[^()]+/);\r\n\r\n          if (!name && (np1 !== '*' && np1 !== '&')) {\r\n            return;\r\n          }\r\n\r\n          applied = {\r\n            name: name ? name[0] : '',\r\n            args: string.slice(slice + (name ? name[0] : '').length),\r\n            callback\r\n          };\r\n\r\n          setApplied = true;\r\n        }\r\n\r\n        if (!setApplied) {\r\n          applied.args += string;\r\n        }\r\n\r\n        if (!applied.args || /^\\([\\s\\S]+\\)$/.test(applied.args)) {\r\n          applied.callback(this, applied.name, applied.args.replace(/^\\(|\\)$/g, ''));\r\n          applied = null;\r\n        }\r\n\r\n        setApplied = false;\r\n      });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#attr\r\n   * @public\r\n   * @param {String|Object.<String, String|ElemValueCallback>} [attr] - Name of the attribute to get or\r\n   * an object of the format { [attrName]: value, ... } to set attributes.\r\n   * @param {String|ElemValueCallback} [value] - If the first argument is a string\r\n   * it should be a value to set for that attribute.\r\n   * @returns {Super|String|Elem} If no arguments passed, D-Wrap of attributes of the first element in the set\r\n   * returned, if 1 string argument is passed the value of the attribute of the first element in the set\r\n   * returned otherwise returns this.\r\n   * @description Method for getting/setting attributes.\r\n   *\r\n   * @example\r\n   * elem.attr('attr1', 'value1'); // attribute attr1 set to 'value1' and this returned\r\n   * elem.attr('attr1');           // 'value1'\r\n   * elem.attr({\r\n   *   attr1: 'value3',            // attribute attr1 set to 'value3'\r\n   *   attr2: 'value2'             // attribute attr2 set to 'value2'\r\n   * });                           // this returned\r\n   * elem.attr().$;                // { attr1: 'value3', attr2: 'value2' }\r\n   */\r\n  attr(attr, value) {\r\n    const elem = getElem(this);\r\n\r\n    if (!arguments.length) {\r\n      return new Super(elem.attributes).object((o, attr) => {\r\n        o[attr.name] = attr.value;\r\n      });\r\n    }\r\n\r\n    if (arguments.length <= 1 && isString(attr)) {\r\n      const ns = attrNSSwitcher(attr, [new Elem(elem)]);\r\n\r\n      return isNull(ns)\r\n        ? elem.getAttribute(attr)\r\n        : elem.getAttributeNS(ns, attr);\r\n    }\r\n\r\n    if (arguments.length >= 2) {\r\n      attr = { [attr]: value };\r\n    }\r\n\r\n    return this.forEach((elem, index) => {\r\n      if (!isElement(elem)) {\r\n        return;\r\n      }\r\n\r\n      new Super(attr).forEach((value, key) => {\r\n        if (isNil(value)) {\r\n          return new Elem(elem).removeAttr(key);\r\n        }\r\n\r\n        if (isFunction(value)) {\r\n          value = value(new Elem(elem).attr(key), elem, index);\r\n        }\r\n\r\n        if (isNil(value)) {\r\n          return new Elem(elem).removeAttr(key);\r\n        }\r\n\r\n        const ns = attrNSSwitcher(key, [new Elem(elem)]);\r\n\r\n        if (isNull(ns)) {\r\n          elem.setAttribute(key, value);\r\n        } else {\r\n          elem.setAttributeNS(ns, key, value);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#blob\r\n   * @public\r\n   * @param {Object} [options = {}] - Options that are passed into {@link blob}.\r\n   * @returns {Promise.<BlobObject>} New instance of promise.\r\n   * @description Returns a {@link BlobObject} Promise. Works with image or canvas first element.\r\n   *\r\n   * @example\r\n   * image.blob().then((blob) => console.log(blob));  // BlobObject\r\n   * canvas.blob().then((blob) => console.log(blob)); // BlobObject\r\n   */\r\n  blob(options = {}) {\r\n    return new Promise((resolve, reject) => {\r\n      const elem = this.first();\r\n      const { name } = elem;\r\n\r\n      if (name !== 'img' && name !== 'canvas') {\r\n        reject(new Error('First element in the set isn\\'t an image or a canvas! (Elem#blob)'));\r\n      }\r\n\r\n      if (name === 'canvas') {\r\n        return resolve(elem);\r\n      }\r\n\r\n      elem\r\n        .load()\r\n        .then(() => {\r\n          if (elem.isBroken()) {\r\n            return reject(new Error('The image is broken! (Elem#blob)'));\r\n          }\r\n\r\n          const canvas = new Elem(nativeDocument).canvas();\r\n          const width = elem.width();\r\n          const height = elem.height();\r\n\r\n          canvas\r\n            .width(width)\r\n            .height(height)\r\n            .drawImage(elem.$[0], 0, 0);\r\n\r\n          resolve(canvas);\r\n        });\r\n    }).then((canvas) => {\r\n      const dataURL = canvas.dataURL();\r\n      const byteString = atob(dataURL.split(',')[1]);\r\n      const length = byteString.length;\r\n      const ab = new ArrayBuffer(length);\r\n      const ia = new Uint8Array(ab);\r\n\r\n      times(length, (i) => {\r\n        ia[i] = byteString.charCodeAt(i);\r\n      });\r\n\r\n      return blob(ab, options);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#blur\r\n   * @returns {Elem} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLElement/blur\r\n   * @description Synonym for\r\n   * [HTMLElement#blur]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/blur}.\r\n   */\r\n  blur() {\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.blur();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#calcCSS\r\n   * @param {String} [pseudo] - See the link.\r\n   * @returns {CSSStyleDeclaration} See the link.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/Window/getComputedStyle\r\n   * @description Synonym for\r\n   * [getComputedStyle]{@link https://developer.mozilla.org/en/docs/Web/API/Window/getComputedStyle}.\r\n   * Returns computed style for the first element in the set or undefined.\r\n   */\r\n  calcCSS(pseudo = null) {\r\n    return getComputedStyle(getElem(this), pseudo);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#changeRule\r\n   * @public\r\n   * @param {String} name - Name of the rule.\r\n   * @param {Object.<String, String>} style - Style for the selector.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for changing css styles in the first style tag in the set.\r\n   * Note: style element should be inside the document.\r\n   *\r\n   * @example\r\n   * style.changeRule('img-size', {\r\n   *   width: '50px !important',\r\n   *   height: '50px !important'\r\n   * });\r\n   */\r\n  changeRule(name, style) {\r\n    this.some((elem) => {\r\n      if (getName(elem) === 'style') {\r\n        const { value: rule } = new Arr(elem.sheet.cssRules).find((rule) => rule.dwayneData && rule.dwayneData.name === name) || {};\r\n\r\n        if (rule) {\r\n          new Elem(rule).css(style);\r\n\r\n          return true;\r\n        }\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#child\r\n   * @public\r\n   * @param {Number|String|Elem|Element|Element[]} element - If the argument is a number a wrap of the set of the children\r\n   * of this index of each element in the set returned otherwise an element to put into this element, a collection\r\n   * or a selector of it.\r\n   * @param {Boolean} end - If the elements should be inserted to the end. If false they are inserted to the start.\r\n   * @returns {Elem} Returns a wrap of children or inserted elements.\r\n   * @description Method is similar to\r\n   * [Node#appendChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/appendChild}.\r\n   *\r\n   * @example\r\n   * const child = elem.child(1);\r\n   *\r\n   * elem.child(elem2);\r\n   * elem.child(document.getElementById('id'));\r\n   * elem.child('#id div.c1');\r\n   */\r\n  child(element, end = true) {\r\n    if (isInteger(element) && element >= 0) {\r\n      return this.children().elem(element);\r\n    }\r\n\r\n    return toFind(element).into(this, end);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#children\r\n   * @public\r\n   * @returns {Elem} D-Wrap of the children of the first element in the set.\r\n   * @description Method for getting element's children.\r\n   *\r\n   * @example\r\n   * const children = elem.children();\r\n   */\r\n  children() {\r\n    return new Elem(this.length ? this.$[0].childNodes : []);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#class\r\n   * @public\r\n   * @param {String} [cls] - If it's present it has to contain class attribute to set.\r\n   * @returns {Arr|Elem} If the argument is present this returned otherwise a wrap of the classes array returned.\r\n   * @description Method for getting/setting classes.\r\n   *\r\n   * @example\r\n   * elem.class('c1 c2'); // class set to 'c1 c2'\r\n   * elem.class().$;      // ['c1', 'c2']\r\n   */\r\n  class(cls) {\r\n    if (!arguments.length) {\r\n      return new Arr(getElem(this).className.split(' '));\r\n    }\r\n\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.className = cls;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#click\r\n   * @returns {Elem} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLElement/click\r\n   * @description Synonym for\r\n   * [HTMLElement#click]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/click}.\r\n   */\r\n  click() {\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.click();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#clone\r\n   * @public\r\n   * @param {Boolean|*} [deep = false] - See thee link.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/Node/cloneNode\r\n   * @description Synonym for\r\n   * [Node#cloneNode]{@link https://developer.mozilla.org/en/docs/Web/API/Node/cloneNode}.\r\n   */\r\n  clone(deep = false) {\r\n    return this.object((elems, elem) => {\r\n      elems.add(elem.cloneNode(!!deep));\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#closest\r\n   * @public\r\n   * @param {String} selector - See the link.\r\n   * @returns {Elem} Set of the closest elements.\r\n   * @description Synonym for\r\n   * [Element#closest]{@link https://developer.mozilla.org/en/docs/Web/API/Element/closest}.\r\n   */\r\n  closest(selector) {\r\n    return this.object((elems, elem) => {\r\n      while (elem) {\r\n        if (new Elem(elem).is(selector)) {\r\n          return elems.add(elem);\r\n        }\r\n\r\n        elem = elem.parentNode;\r\n      }\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#contains\r\n   * @public\r\n   * @param {String|Elem|Element} element - Element to find out if it's within the first element\r\n   * in the set or a selector of it.\r\n   * @returns {Boolean} Returns if the argument within this element.\r\n   * @description Method is extension for\r\n   * [Node#contains]{@link https://developer.mozilla.org/en/docs/Web/API/Node/contains}.\r\n   *\r\n   * @example\r\n   * elem1.contains(elem2);   // true|false\r\n   * elem.contains(selector); // true|false\r\n   */\r\n  contains(element) {\r\n    element = toFind(element);\r\n\r\n    return getElem(this).contains(getElem(element));\r\n  }\r\n\r\n  /**\r\n   * @method Elem#create\r\n   * @public\r\n   * @param {String} type - Type of created element. If type is \"#text\" a text node is created.\r\n   * If type is \"#comment\" a comment node is created.\r\n   * @param {...String} appliedExpressions - Strings that are passed into {@link Elem#apply}.\r\n   * @returns {Elem} New instance of Elem - wrap of the created elements.\r\n   * @description Method for creating elements inside this element.\r\n   * If this element is not an Element the element is just created.\r\n   *\r\n   * @example\r\n   * elem.create('div', '#id .c1 .c2 *Some text*');\r\n   *\r\n   * // also there are shorthands for almost every HTML-element\r\n   * elem.div();\r\n   * elem.input('$type(checkbox) $name(country)');\r\n   */\r\n  create(type, ...appliedExpressions) {\r\n    return this.object((elems, elem) => {\r\n      const element = new Elem(typeSwitcher(type, [new Elem(elem)]));\r\n\r\n      element.into(elem);\r\n\r\n      elems.add(element.apply.apply(element, appliedExpressions));\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#createComment\r\n   * @public\r\n   * @param {String} text - Text of the comment.\r\n   * @returns {Elem} New instance of Elem - wrap of the created comments.\r\n   * @description Method for creating comments inside this element.\r\n   * If this element is not an Element the comment is just created.\r\n   *\r\n   * @example\r\n   * elem.createComment('comment');\r\n   */\r\n  createComment(text) {\r\n    return this\r\n      .create('#comment')\r\n      .text(text);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#createText\r\n   * @public\r\n   * @param {String} text - Text.\r\n   * @returns {Elem} New instance of Elem - wrap of the created text nodes.\r\n   * @description Method for creating text nodes inside this element.\r\n   * If this element is not an Element the text node is just created.\r\n   *\r\n   * @example\r\n   * elem.createText('text');\r\n   */\r\n  createText(text) {\r\n    return this\r\n      .create('#text')\r\n      .text(text);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#css\r\n   * @public\r\n   * @param {String|Object.<String, String|ElemValueCallback>} [property] - Name of the property to get or\r\n   * an object of the format { [property]: value, ... } to set styles.\r\n   * @param {String|ElemValueCallback} [value] - If the first argument is a string it should be a value to set for that property.\r\n   * @returns {Super|String|Elem} If no arguments passed, D-Wrap of css styles of the element returned,\r\n   * if 1 string argument is passed the value of the property returned otherwise returns this.\r\n   * @description Method for getting/setting styles. Supports !important.\r\n   *\r\n   * @example\r\n   * elem.css('display', 'none'); // display set to 'none' and this returned\r\n   * elem.css('display');         // 'none'\r\n   * elem.css({\r\n   *   display: 'inline',         // display set to 'inline'\r\n   *   cursor: 'pointer'          // cursor set to 'pointer'\r\n   * });                          // this returned\r\n   * elem.css().$;                // { display: 'none', cursor: 'pointer' }\r\n   */\r\n  css(property, value) {\r\n    let style = getElem(this).style;\r\n\r\n    if (isStyleRule(this.$[0])) {\r\n      style = this.$[0].style;\r\n    }\r\n\r\n    if (!arguments.length) {\r\n      return new Str(style.cssText)\r\n        .split(/; ?/)\r\n        .object((o, value) => {\r\n          if (value) {\r\n            property = value.split(/: /);\r\n\r\n            o[new Str(property[0]).toCamelCase().$] = property[1];\r\n          }\r\n        });\r\n    }\r\n\r\n    if (arguments.length <= 1 && isString(property)) {\r\n      property = new Str(property).toHyphenCase().$;\r\n\r\n      return style.getPropertyValue(property) + (style.getPropertyPriority(property) ? ' !important' : '');\r\n    }\r\n\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: value };\r\n    }\r\n\r\n    return this.forEach((elem, index) => {\r\n      if (!isElement(elem) && !isStyleRule(elem)) {\r\n        return;\r\n      }\r\n\r\n      new Super(property).forEach((value, property) => {\r\n        if (isNil(value)) {\r\n          return new Elem(elem).removeCSS(property);\r\n        }\r\n\r\n        property = new Str(property).toHyphenCase().$;\r\n\r\n        if (isFunction(value)) {\r\n          value = value(new Elem(elem).css(property), elem, index);\r\n        }\r\n\r\n        if (isNil(value)) {\r\n          return new Elem(elem).removeAttr(key);\r\n        }\r\n\r\n        elem.style.removeProperty(property);\r\n        elem.style.setProperty(\r\n          property,\r\n          value.replace(/ ?!important$/, ''),\r\n          /!important$/.test(value) ? 'important' : ''\r\n        );\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#ctx\r\n   * @public\r\n   * @param {String|Object|CtxCallback} [property] - If present and object\r\n   * it's assigned to the canvas rendering context, if function\r\n   * it's called with canvas rendering context argument, if string\r\n   * the value from the second argument is used for assigning\r\n   * this property to canvas rendering context and if not present\r\n   * canvas rendering context returned.\r\n   * @param {*} [value] - See the property argument.\r\n   * @returns {CanvasRenderingContext2D|Elem}\r\n   * @description Rendering context of the first canvas in the set.\r\n   *\r\n   * @example\r\n   * canvas.ctx; // CanvasRenderingContext2D\r\n   */\r\n  ctx(property, value) {\r\n    let ctx;\r\n\r\n    this.some((elem) => {\r\n      if (getName(elem) === 'canvas') {\r\n        ctx = elem.dwayneData.ctx;\r\n\r\n        return true;\r\n      }\r\n    });\r\n\r\n    if (!arguments.length) {\r\n      return ctx;\r\n    }\r\n\r\n    if (!ctx) {\r\n      return this;\r\n    }\r\n\r\n    if (isFunction(property)) {\r\n      property(ctx);\r\n    } else {\r\n      if (arguments.length >= 2) {\r\n        property = { [property]: value };\r\n      }\r\n\r\n      assign(ctx, property);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#data\r\n   * @public\r\n   * @param {String|Object.<String, String|ElemValueCallback>} [key] - Name of the data attribute (without data- prefix)\r\n   * to get or an object of the format { [attrName]: value, ... } to set attributes.\r\n   * @param {String|ElemValueCallback} [value] - If the first argument is a string it should be a value to set for that attribute.\r\n   * @returns {Super|String|Elem} If no arguments passed, D-Wrap of dataset of the element returned,\r\n   * if 1 string argument is passed the value of the data attribute returned otherwise returns this.\r\n   * @description Method for getting/setting data attributes. See\r\n   * [HTMLElement#dataset]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/dataset}.\r\n   *\r\n   * @example\r\n   * elem.data('someKey1', 'value'); // attribute data-some-key1 set to 'value1' and this returned\r\n   * elem.data('someKey1');          // 'value1'\r\n   * elem.data({\r\n   *   someKey1: 'value3',           // attribute data-some-key1 set to 'value3'\r\n   *   someKey2: 'value2'            // attribute data-some-key2 set to 'value2'\r\n   * });                             // this returned\r\n   * elem.data().$;                  // { someKey1: 'value3', someKey2: 'value2' }\r\n   */\r\n  data(key, value) {\r\n    const dataset = getElem(this).dataset;\r\n\r\n    if (!arguments.length) {\r\n      return new Super(dataset).object((o, value, key) => {\r\n        o[key] = value;\r\n      });\r\n    }\r\n\r\n    if (arguments.length === 1 && isString(key)) {\r\n      return dataset[key];\r\n    }\r\n\r\n    if (arguments.length >= 2) {\r\n      key = { [key]: value };\r\n    }\r\n\r\n    return this.forEach((elem, index) => {\r\n      if (!isElement(elem)) {\r\n        return;\r\n      }\r\n\r\n      iterate(key, (value, key) => {\r\n        elem.dataset[key] = isFunction(value) ? value(elem.dataset[key], elem, index) : value;\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#dataURL\r\n   * @param {String} [type = 'image/png'] - See the link\r\n   * @param {Number} [encoderOptions = 0.92] - See the link.\r\n   * @returns {String} Data URL for the first canvas element in the set.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/toDataURL\r\n   * @description Synonym for\r\n   * [HTMLCanvasElement#toDataURL]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/toDataURL}.\r\n   *\r\n   * @example\r\n   * canvas.dataURL();\r\n   */\r\n  dataURL(type, encoderOptions) {\r\n    const ctx = this.ctx();\r\n\r\n    if (!ctx) {\r\n      return '';\r\n    }\r\n\r\n    return ctx.canvas.toDataURL.apply(ctx.canvas, arguments);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#deleteRule\r\n   * @public\r\n   * @param {String} name - Name of the rule.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for deleting css styles in a style tag.\r\n   * Note: style element should be inside the document.\r\n   *\r\n   * @example\r\n   * style.deleteRule('img-size');\r\n   */\r\n  deleteRule(name) {\r\n    this.some((elem) => {\r\n      if (getName(elem) === 'style') {\r\n        const rule = new Arr(elem.sheet.cssRules).find((rule) => rule.dwayneData && rule.dwayneData.name === name);\r\n\r\n        if (rule) {\r\n          elem.sheet.deleteRule(rule.key);\r\n\r\n          return true;\r\n        }\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#dispatch\r\n   * @public\r\n   * @param {String|Event} event - Event or a string (new Event(event) is created).\r\n   * @param {Object} [eventInit = {}] - See the link.\r\n   * @param {Boolean} [eventInit.bubbles = true] - See the link.\r\n   * @param {Boolean} [eventInit.cancelable = true] - See the link.\r\n   * @param {Object} [details = {}] - Object that is assigned to the event.\r\n   * @returns {Elem} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/Event/Event\r\n   * @description Synonym for\r\n   * [EventTarget#dispatchEvent]{@link https://developer.mozilla.org/en/docs/Web/API/EventTarget/dispatchEvent}.\r\n   *\r\n   * @example\r\n   * elem.dispatch('click');\r\n   * elem.dispatch('click', { bubbles: false, cancellable: false });\r\n   * elem.dispatch(new CustomEvent('custom-event'));\r\n   */\r\n  dispatch(event, eventInit = {}, details = {}) {\r\n    const { bubbles = true, cancelable = true } = eventInit || {};\r\n    let finalEvent = event;\r\n\r\n    if (!/Event$/.test(toStringTag(finalEvent))) {\r\n      try {\r\n        finalEvent = new Event(finalEvent, { bubbles, cancelable });\r\n      } catch (err) {\r\n        finalEvent = nativeDocument.createEvent('Event');\r\n        finalEvent.initEvent(event, bubbles, cancelable);\r\n      }\r\n\r\n      assign(finalEvent, details);\r\n    }\r\n\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.dispatchEvent(finalEvent);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#elem\r\n   * @public\r\n   * @param {Number} [index = 0] - Index of the element of the set to get. Negative index means elem.length + index.\r\n   * @returns {Elem} New instance of Elem.\r\n   *\r\n   * @example\r\n   * elem.elem(1); // a wrap of the element in the set that has index 1\r\n   * elem.elem();  // a wrap of the element in the set that has index 0\r\n   */\r\n  elem(index = 0) {\r\n    if (index < 0) {\r\n      index = this.length + index;\r\n    }\r\n\r\n    return new Elem(this.$[index]);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#filter\r\n   * @public\r\n   * @param {String|Function|Element[]|Elem} [selector = Boolean] - If it's a string the method filters elements with the selector\r\n   * otherwise super.filter is called.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Method for filtering elements.\r\n   *\r\n   * @example\r\n   * elem.filter((elem) => new Elem(elem).closest('.parent'));\r\n   * elem.filter(elemsInArray);\r\n   * elem.filter(elemsInElem);\r\n   * elem.filter('.child');\r\n   */\r\n  filter(selector = Boolean) {\r\n    return new Elem(super.filter(filterSwitcher(selector)));\r\n  }\r\n\r\n  /**\r\n   * @method Elem#find\r\n   * @public\r\n   * @param {String|Function} selector - Selector to find.\r\n   * @returns {Elem|{ key: Key, value: * }|null} New instance of Elem if selector is a string\r\n   * otherwise super.find is called.\r\n   * @description Synonym for\r\n   * [Element#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Element/querySelectorAll}.\r\n   */\r\n  find(selector) {\r\n    if (!isString(selector)) {\r\n      return super.find(selector);\r\n    }\r\n\r\n    return this.object((elems, elem) => {\r\n      elems.add(find(selector, elem));\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#first\r\n   * @public\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Synonym for elem.elem(0).\r\n   */\r\n  first() {\r\n    return this.elem(0);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#firstChild\r\n   * @public\r\n   * @param {String} [selector = null] - If present, finds first child in every elem that matches the selector.\r\n   * If not, finds first child of each element in the set.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Method for finding first children of each element in the set.\r\n   *\r\n   * @example\r\n   * elem.first();       // finds first child of each element in the elem set\r\n   * elem.first('.foo'); // find first child that has foo class of each element in the set\r\n   */\r\n  firstChild(selector = null) {\r\n    return this.object((elems, elem) => {\r\n      const { value: found } = new Elem(elem)\r\n        .children()\r\n        .find((elem) => new Elem(elem).is(selector)) || {};\r\n\r\n      elems.add(found);\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#focus\r\n   * @returns {Elem} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLElement/focus\r\n   * @description Synonym for\r\n   * [HTMLElement#focus]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/focus}.\r\n   */\r\n  focus() {\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#getRule\r\n   * @public\r\n   * @param {String} name - Name of the rule.\r\n   * @returns {{ selector: (String|void), rules: Object }} Set of the css rules.\r\n   * @description Method for getting set of the rules under the name.\r\n   * Note: style element should be inside the document.\r\n   *\r\n   * @example\r\n   * style.addRule('img-size', 'img.square', {\r\n   *   width: '40px',\r\n   *   height: '40px'\r\n   * });\r\n   * style.getRule('img-size');\r\n   * // {\r\n   * //   selector: 'img.square',\r\n   * //   rules: {\r\n   * //     width: '40px',\r\n   * //     height: '40px'\r\n   * //   }\r\n   * // }\r\n   */\r\n  getRule(name) {\r\n    let found = {\r\n      selector: undefined,\r\n      rules: {}\r\n    };\r\n\r\n    this.some((elem) => {\r\n      if (getName(elem) === 'style') {\r\n        const { value: rule } = new Arr(elem.sheet.cssRules).find((rule) => rule.dwayneData && rule.dwayneData.name === name) || {};\r\n\r\n        if (rule) {\r\n          found = {\r\n            selector: rule.selectorText,\r\n            rules: new Elem(rule).css().$\r\n          };\r\n\r\n          return true;\r\n        }\r\n      }\r\n    });\r\n\r\n    return found;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#hasAttr\r\n   * @public\r\n   * @param {String} attr - Name of the attribute.\r\n   * @returns {Boolean} If the first element in the set has the attribute.\r\n   * @description Method that returns if the first element in the set has the attribute or not.\r\n   *\r\n   * @example\r\n   * elem.attr('attr', 'value').hasAttr('attr'); // true\r\n   * elem.removeAttr('attr').hasAttr('attr');    // false\r\n   */\r\n  hasAttr(attr) {\r\n    const elem = getElem(this);\r\n    const ns = attrNSSwitcher(attr, [new Elem(elem)]);\r\n\r\n    return isNull(ns)\r\n      ? elem.hasAttribute(attr)\r\n      : elem.hasAttributeNS(ns, attr);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#hasClass\r\n   * @public\r\n   * @param {String} cls - Name of the class.\r\n   * @returns {Boolean} If the first element in the set has the class.\r\n   * @description Method that returns if the first element in the set has the class or not.\r\n   *\r\n   * @example\r\n   * elem.addClass('cls').hasClass('cls');    // true\r\n   * elem.removeClass('cls').hasClass('cls'); // false\r\n   */\r\n  hasClass(cls) {\r\n    return getElem(this).classList.contains(cls);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#height\r\n   * @public\r\n   * @param {*|ElemValueCallback} [height] - Height to set.\r\n   * @returns {Elem|String} If no arguments passed height of the first element in the set returned.\r\n   * Otherwise all elements heights in the set are set to the height argument.\r\n   * @description Gets or sets height.\r\n   *\r\n   * @example\r\n   * elem.height(123);\r\n   * elem.height(); // 123\r\n   */\r\n  height(height) {\r\n    return this.prop.apply(this, new Arr(arguments).unshift('height').$);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#hide\r\n   * @public\r\n   * @returns {Elem} Returns this.\r\n   * @description Hides all elements in the set.\r\n   *\r\n   * @example\r\n   * elem.hide();\r\n   */\r\n  hide() {\r\n    return this.forEach((elem) => {\r\n      elem = new Elem(elem);\r\n\r\n      const currentDisplay = elem.css('display');\r\n\r\n      if (currentDisplay.indexOf('none')) {\r\n        elem.prop('dwayneData').previousDisplay = currentDisplay;\r\n      }\r\n\r\n      elem.css('display', 'none !important');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#html\r\n   * @public\r\n   * @param {String|ElemValueCallback|*} [html] - HTML to write instead of current HTML.\r\n   * @returns {Elem|String} If no arguments passed HTML of the first element in the set returned.\r\n   * Otherwise all elements HTML in the set are set to the html argument.\r\n   * @description Gets or sets HTML.\r\n   *\r\n   * @example\r\n   * elem.html('<div>1</div>');\r\n   * elem.html(); // '<div>1</div>'\r\n   */\r\n  html(html) {\r\n    if (!arguments.length) {\r\n      return getElem(this).innerHTML;\r\n    }\r\n\r\n    return this.forEach((elem, index) => {\r\n      if (isElement(elem)) {\r\n        elem.innerHTML = isFunction(html) ? html(elem.innerHTML, elem, index) : html;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#id\r\n   * @public\r\n   * @param {String|*} [id] - Id to set.\r\n   * @returns {Elem|String} If no arguments passed id of the first element in the set returned.\r\n   * Otherwise all elements ids in the set are set to the id argument.\r\n   * @description Gets id or sets ids.\r\n   *\r\n   * @example\r\n   * elem.id('unique');\r\n   * elem.id(); // 'unique'\r\n   */\r\n  id(id) {\r\n    if (!arguments.length) {\r\n      return getElem(this).id;\r\n    }\r\n\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.id = id;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @member {Number} Elem#innerHeight\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description Getter for finding how much height content of the first element can be.\r\n   *\r\n   * @example\r\n   * elem.css({\r\n   *   boxSizing: 'border-box',\r\n   *   height: '200px',\r\n   *   paddingTop: '2px',\r\n   *   paddingBottom: '3px',\r\n   *   borderTop: '1px solid black',\r\n   *   borderBottom: '4px solid black'\r\n   * }).innerHeight; // 190\r\n   * elem\r\n   *   .css('box-sizing', 'content-box')\r\n   *   .innerHeight; // 200\r\n   * elem\r\n   *   .css('box-sizing', 'padding-box')\r\n   *   .innerHeight; // 195\r\n   */\r\n  get innerHeight() {\r\n    const elem = this.$[0];\r\n\r\n    if (isWindow(elem)) {\r\n      return elem.innerHeight;\r\n    }\r\n\r\n    const {\r\n      borderTopWidth,\r\n      borderBottomWidth,\r\n      boxSizing,\r\n      height,\r\n      paddingTop,\r\n      paddingBottom\r\n    } = this.calcCSS();\r\n    const borders = px(borderTopWidth) + px(borderBottomWidth);\r\n    const paddings = px(paddingTop) + px(paddingBottom);\r\n\r\n    return px(height) - innerSwitcher(boxSizing, [paddings, borders]);\r\n  }\r\n\r\n  /**\r\n   * @member {Number} Elem#innerWidth\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description Getter for finding how much width content of the first element can be.\r\n   *\r\n   * @example\r\n   * elem.css({\r\n   *   boxSizing: 'border-box',\r\n   *   width: '200px',\r\n   *   paddingLeft: '2px',\r\n   *   paddingRight: '3px',\r\n   *   borderLeft: '1px solid black',\r\n   *   borderRight: '4px solid black'\r\n   * }).innerWidth; // 190\r\n   * elem\r\n   *   .css('box-sizing', 'content-box')\r\n   *   .innerWidth; // 200\r\n   * elem\r\n   *   .css('box-sizing', 'padding-box')\r\n   *   .innerWidth; // 195\r\n   */\r\n  get innerWidth() {\r\n    const elem = this.$[0];\r\n\r\n    if (isWindow(elem)) {\r\n      return elem.innerWidth;\r\n    }\r\n\r\n    const {\r\n      borderLeftWidth,\r\n      borderRightWidth,\r\n      boxSizing,\r\n      paddingLeft,\r\n      paddingRight,\r\n      width\r\n    } = this.calcCSS();\r\n    const borders = px(borderLeftWidth) + px(borderRightWidth);\r\n    const paddings = px(paddingLeft) + px(paddingRight);\r\n\r\n    return px(width) - innerSwitcher(boxSizing, [paddings, borders]);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#insertAfter\r\n   * @public\r\n   * @param {String|Elem|Element} element - Element to insert this element after or a selector of it.\r\n   * @returns {Elem} Returns this.\r\n   * @description Puts the elements from the set after the element specified by the argument.\r\n   * The elements remain in the same order.\r\n   *\r\n   * @example\r\n   * elem.insertAfter(elem2);\r\n   * elem.insertAfter(document.getElementById('id'));\r\n   * elem.insertAfter('#id div.c1');\r\n   */\r\n  insertAfter(element) {\r\n    element = toFind(element).first();\r\n\r\n    let parent = element.parent();\r\n\r\n    if (!parent.length) {\r\n      return this;\r\n    }\r\n\r\n    element = element.next().$[0];\r\n    parent = parent.$[0];\r\n\r\n    return this.forEach((elem) => {\r\n      if (element) {\r\n        parent.insertBefore(elem, element);\r\n      } else {\r\n        parent.appendChild(elem);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#insertBefore\r\n   * @public\r\n   * @param {String|Elem|Element} element - Element to insert this element before or a selector of it.\r\n   * @returns {Elem} Returns this.\r\n   * @description Puts the elements from the set before the element specified by the argument.\r\n   * The elements remain in the same order.\r\n   *\r\n   * @example\r\n   * elem.insertBefore(elem2);\r\n   * elem.insertBefore(document.getElementById('id'));\r\n   * elem.insertBefore('#id div.c1');\r\n   */\r\n  insertBefore(element) {\r\n    element = toFind(element).first();\r\n\r\n    let parent = element.parent();\r\n\r\n    if (!parent.length) {\r\n      return this;\r\n    }\r\n\r\n    element = element.$[0];\r\n    parent = parent.$[0];\r\n\r\n    return this.forEach((elem) => {\r\n      parent.insertBefore(elem, element);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#into\r\n   * @public\r\n   * @param {String|Elem|Element} element - Element to put this elements into or a selector of it.\r\n   * @param {Boolean} end - If the elements should be inserted to the end. If false they are inserted to the start.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method is similar to\r\n   * [Node#appendChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/appendChild}.\r\n   *\r\n   * @example\r\n   * elem.into(elem2);\r\n   * elem.into(document.getElementById('id'));\r\n   * elem.into('#id div.c1');\r\n   */\r\n  into(element, end = true) {\r\n    element = toFind(element).$[0];\r\n\r\n    if (\r\n      !element ||\r\n      isWindow(element) ||\r\n      isHTMLDocument(element) ||\r\n      isCommentOrText(element)\r\n    ) {\r\n      return this;\r\n    }\r\n\r\n    if (!end && element.firstChild) {\r\n      return this\r\n        .slice()\r\n        .reverse()\r\n        .forEach((elem) => {\r\n          element.insertBefore(elem, element.firstChild);\r\n        });\r\n    }\r\n\r\n    return this.forEach((elem) => {\r\n      element.appendChild(elem);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#is\r\n   * @public\r\n   * @param {String} selector\r\n   * @returns {Boolean} If the first element in the set matches the selector.\r\n   * If the selector is undefined or null always returns true. If it's not for not elements\r\n   * entries returns false.\r\n   * @description Synonym for\r\n   * [Element#matches]{@link https://developer.mozilla.org/en/docs/Web/API/Element/matches}.\r\n   *\r\n   * @example\r\n   * elem.addClass('cls');\r\n   * elem.is('.cls');         // true\r\n   *\r\n   * elem.removeClass('cls');\r\n   * elem.is('.cls');         // false\r\n   */\r\n  is(selector) {\r\n    if (isNull(selector)) {\r\n      return true;\r\n    }\r\n\r\n    const elem = getElem(this);\r\n    const matches = (\r\n      elem.matches ||\r\n      elem.matchesSelector ||\r\n      elem.webkitMatchesSelector ||\r\n      elem.mozMatchesSelector ||\r\n      elem.msMatchesSelector ||\r\n      elem.oMatchesSelector\r\n    );\r\n\r\n    if (!isElement(this.$[0])) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      return matches.call(elem, selector);\r\n    } catch (err) {\r\n      console.error(`Selector '${ selector }' is not a valid selector (Elem#is)`);\r\n\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method Elem#isBroken\r\n   * @public\r\n   * @returns {Boolean} If the first image in the set is broken.\r\n   * @description Returns if the first element in the set is broken. Not image and not loaded image is considered proper.\r\n   *\r\n   * @example\r\n   * const img = elem.img().on({\r\n   *   'load': onload,\r\n   *   'error': onload\r\n   * });\r\n   *\r\n   * onload = () => {\r\n   *   console.log(img.isBroken()); // true\r\n   * };\r\n   *\r\n   * img.ref('/some/non-existent/site/not-found.png');\r\n   */\r\n  isBroken() {\r\n    let isBroken = false;\r\n\r\n    this.some((elem) => {\r\n      if (getName(elem) === 'img') {\r\n        isBroken = !!(elem.complete && (!elem.naturalWidth || !elem.naturalHeight));\r\n\r\n        return true;\r\n      }\r\n    });\r\n\r\n    return isBroken;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#isWithinDocument\r\n   * @public\r\n   * @returns {Boolean} Returns if the first element in the set is within the document or not.\r\n   * @description Returns if the first element in the set is within the document or not.\r\n   *\r\n   * @example\r\n   * new Elem(document.body).isWithinDocument();  // true\r\n   * new Elem(document).div().isWithinDocument(); // false\r\n   */\r\n  isWithinDocument() {\r\n    return this.first().closest('html').length !== 0;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#last\r\n   * @public\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Synonym for elem.elem(-1).\r\n   */\r\n  last() {\r\n    return this.elem(-1);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#lastChild\r\n   * @public\r\n   * @param {String} [selector = null] - If present, finds last child in every elem that matches the selector.\r\n   * If not, finds last child of each element in the set.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Method for finding last children of each element in the set.\r\n   *\r\n   * @example\r\n   * elem.last();       // finds last child of each element in the elem set\r\n   * elem.last('.foo'); // find last child that has 'foo' class of each element in the set\r\n   */\r\n  lastChild(selector = null) {\r\n    return this.object((elems, elem) => {\r\n      const { value: found } = new Elem(elem)\r\n        .children()\r\n        .reverse()\r\n        .find((elem) => new Elem(elem).is(selector)) || {};\r\n\r\n      elems.add(found);\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#load\r\n   * @public\r\n   * @returns {Promise.<{ proper: Elem, broken: Elem }>} Promise with broken and proper images.\r\n   * @description Loads each image in the set and puts it to the proper or broken array.\r\n   *\r\n   * @example\r\n   * images.load().then(({ broken }) => {\r\n   *   broken.filter('img').ref('/fallback.png');\r\n   * });\r\n   */\r\n  load() {\r\n    const images = {\r\n      proper: new Elem(),\r\n      broken: new Elem()\r\n    };\r\n\r\n    return Promise.all(\r\n      this\r\n        .filter((elem) => getName(elem) === 'img')\r\n        .map((elem) => {\r\n          const $elem = new Elem(elem);\r\n\r\n          if (elem.complete) {\r\n            images[$elem.isBroken() ? 'broken' : 'proper'].push(elem);\r\n\r\n            return;\r\n          }\r\n\r\n          return new Promise((resolve) => {\r\n            const removeListeners = $elem.on({\r\n              load() {\r\n                images.proper.add(elem);\r\n\r\n                removeListeners();\r\n                resolve();\r\n              },\r\n              error() {\r\n                images.broken.add(elem);\r\n\r\n                removeListeners();\r\n                resolve();\r\n              }\r\n            });\r\n          });\r\n        })\r\n        .$\r\n    ).then(() => images);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#moveAttr\r\n   * @public\r\n   * @param {String} attr - Attribute to move to the first element.\r\n   * @param {String} [value = ''] - Value to set for the attribute. If not set attribute of the previous element or '' used.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for moving an attribute from previous element to the next one (first element in this set).\r\n   *\r\n   * @example\r\n   * elem1.moveAttr('attr', 'value');     // attribute 'attr' set to 'value' on elem1\r\n   * elem2.moveAttr('attr');              // attribute 'attr' removed from elem1. set to 'value' on elem2\r\n   * elem3.moveAttr('attr', 'new value'); // attribute 'attr' removed from elem2. set to 'new value' on elem3\r\n   */\r\n  moveAttr(attr, value = '') {\r\n    const prev = attrs[attr];\r\n    const elem = this.elem();\r\n\r\n    if (prev && elem.length) {\r\n      if (arguments.length < 2) {\r\n        value = prev.attr(attr);\r\n      }\r\n\r\n      prev.removeAttr(attr);\r\n    }\r\n\r\n    if (elem.length) {\r\n      attrs[attr] = elem.attr(attr, value);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#moveClass\r\n   * @public\r\n   * @param {String} cls - Class to move to the first element.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for moving a class from previous element to the next one (first element in this set).\r\n   *\r\n   * @example\r\n   * elem1.moveClass('cls'); // class 'cls' added to elem1\r\n   * elem2.moveClass('cls'); // class 'cls' removed from elem1. added to elem1\r\n   */\r\n  moveClass(cls) {\r\n    const prev = classes[cls];\r\n    const elem = this.elem();\r\n\r\n    if (prev && elem.length) {\r\n      prev.removeClass(cls);\r\n    }\r\n\r\n    if (elem.length) {\r\n      classes[cls] = elem.addClass(cls);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @member {String} Elem#name\r\n   * @type {String}\r\n   * @public\r\n   * @readonly\r\n   * @description nodeName (lowercased) of the first element in the set.\r\n   *\r\n   * @example\r\n   * const elem1 = elem.create('div');\r\n   * elem1.name // 'div'\r\n   */\r\n  get name() {\r\n    return getName(this.$[0]);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#next\r\n   * @public\r\n   * @param {String} [selector = null] - If present, finds next element to every elem that matches the selector.\r\n   * If not, finds next element to each element in the set.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Method for finding next element to each element in the set.\r\n   *\r\n   * @example\r\n   * elem.next();       // finds next element to each element in the set\r\n   * elem.next('.foo'); // finds next element to each element that has 'foo' class\r\n   */\r\n  next(selector = null) {\r\n    return this.object((elems, elem) => {\r\n      /* eslint no-cond-assign: 0 */\r\n      while (elem = elem.nextSibling) {\r\n        if (new Elem(elem).is(selector)) {\r\n          return elems.add(elem);\r\n        }\r\n      }\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#off\r\n   * @public\r\n   * @param {...ElemEventString} events - Events to remove.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method that removes all the listeners from each element in the set specified by the events arguments.\r\n   *\r\n   * @example\r\n   * elem.off('click');\r\n   * elem.off('click, input');\r\n   * elem.off('click, input', 'focus');\r\n   */\r\n  off(...events) {\r\n    return this.forEach((elem) => {\r\n      const { listeners } = elem.dwayneData;\r\n\r\n      iterate(arguments, (event) => {\r\n        iterate(event.split(eventSeparator), (event) => {\r\n          (listeners[event] || new Super()).forEach(({ removeListener }) => removeListener());\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#on\r\n   * @public\r\n   * @param {ElemEventString|Object.<ElemEventString|ElemListener>} event - Either a {@link ElemEventString} string\r\n   * or an object with event keys (a key is also ElemEventString) and listeners values.\r\n   * @param {String} [selector = null] - Selector to filter event targets.\r\n   * @param {ElemListener} [listener] - If the first argument is a string it must be a listener function for\r\n   * specified event(s).\r\n   * @returns {ElemRemoveListeners} Function that takes optional event argument.\r\n   * @description Adds event listeners for all the elements in the set.\r\n   * For debugging: If you need to know what listeners are in work (and what selectors filter targets)\r\n   * you can look at the base property of the only dwayne listener that listens for the event\r\n   * and find all working listeners in listener.base.dwayneData.listeners[event].$.\r\n   *\r\n   * @example\r\n   * elem.on(\r\n   *   'change, input',\r\n   *   'input, select, textarea, datalist, keygen, output',\r\n   *   (e, elem, index) => console.log(elem.value)\r\n   * );\r\n   * elem.on(\r\n   *   'change, input',\r\n   *   (e, elem, index) => console.log(elem.value)\r\n   * );\r\n   * elem.on(\r\n   *   {\r\n   *     'change, input': (e, elem, index) => console.log(elem.value),\r\n   *     'blur': () => console.log('blur')\r\n   *   },\r\n   *   'input, select, textarea, datalist, keygen, output'\r\n   * );\r\n   *\r\n   * const removeListeners = elem.on({\r\n   *   'change, input': (e, elem, index) => console.log(elem.value),\r\n   *   'blur': () => console.log('blur')\r\n   * });\r\n   *\r\n   * removeListeners('click');\r\n   * removeListeners('blur, change');\r\n   * removeListeners('blur, change', 'input');\r\n   * removeListeners();\r\n   */\r\n  on(event, selector = null, listener) {\r\n    const allListeners = new Super({});\r\n\r\n    if (isFunction(selector)) {\r\n      listener = selector;\r\n      selector = null;\r\n    }\r\n\r\n    if (isString(event)) {\r\n      event = { [event]: listener };\r\n    }\r\n\r\n    event = new Super(event).object((listeners, listener, event) => {\r\n      iterate(event.split(eventSeparator), (event) => {\r\n        listeners[event] = listener;\r\n      });\r\n    });\r\n\r\n    this.forEach((elem) => {\r\n      if (!isElement(elem) && !isWindow(elem) && !isHTMLDocument(elem)) {\r\n        return;\r\n      }\r\n\r\n      const { listeners } = (windowsDwayneData.find(({ element }) => element === elem) || {}).value || elem.dwayneData;\r\n\r\n      event.forEach((listener, event) => {\r\n        const removeEventListeners = listeners[event] = listeners[event] || new Super({}).define('index', {\r\n          value: 0,\r\n          configurable: true,\r\n          writable: true\r\n        });\r\n        const index = removeEventListeners.prop('index');\r\n\r\n        if (!removeEventListeners.has('listener')) {\r\n          const newListener = (e) => {\r\n            removeEventListeners.forEach(({ selector, listener }) => {\r\n              if (new Elem(e.target).is(selector)) {\r\n                listener.call(elem, e, elem, index);\r\n              }\r\n            });\r\n          };\r\n\r\n          newListener.base = elem;\r\n\r\n          elem.addEventListener(event, newListener, false);\r\n          removeEventListeners.define('listener', {\r\n            value: newListener,\r\n            configurable: true,\r\n            writable: true\r\n          });\r\n        }\r\n\r\n        const removeListener = () => {\r\n          removeEventListeners.delete(index);\r\n\r\n          if (!removeEventListeners.count) {\r\n            elem.removeEventListener(event, removeEventListeners.prop('listener'), false);\r\n            removeEventListeners.delete('listener');\r\n          }\r\n        };\r\n\r\n        allListeners.prop(event, (allListeners.prop(event) || new Arr()).push(removeListener));\r\n\r\n        removeEventListeners.assign({\r\n          index: index + 1,\r\n          [index]: {\r\n            selector,\r\n            listener,\r\n            removeListener\r\n          }\r\n        });\r\n      });\r\n    });\r\n\r\n    return function removeEventListeners(event) {\r\n      if (arguments.length) {\r\n        iterate(arguments, (event) => {\r\n          iterate(event.split(eventSeparator), (event) => {\r\n            if (allListeners.has(event)) {\r\n              allListeners.prop(event).forEach((removeListener) => removeListener());\r\n              allListeners.delete(event);\r\n            }\r\n          });\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      allListeners.forEach((removeListeners) => {\r\n        removeListeners.forEach((removeListener) => removeListener());\r\n      });\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @member {Number} Elem#outerHeight\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description Getter for finding how much height the element actually is.\r\n   *\r\n   * @example\r\n   * elem.css({\r\n   *   boxSizing: 'border-box',\r\n   *   height: '200px',\r\n   *   paddingTop: '2px',\r\n   *   paddingBottom: '3px',\r\n   *   borderTop: '1px solid black',\r\n   *   borderBottom: '4px solid black'\r\n   *   marginTop: '0px',\r\n   *   marginBottom: '5px'\r\n   * }).outerHeight; // 205\r\n   * elem\r\n   *   .css('box-sizing', 'content-box')\r\n   *   .outerHeight; // 215\r\n   * elem\r\n   *   .css('box-sizing', 'padding-box')\r\n   *   .outerHeight; // 210\r\n   */\r\n  get outerHeight() {\r\n    const elem = this.$[0];\r\n\r\n    if (isWindow(elem)) {\r\n      return elem.outerHeight;\r\n    }\r\n\r\n    const {\r\n      borderTopWidth,\r\n      borderBottomWidth,\r\n      boxSizing,\r\n      height,\r\n      marginTop,\r\n      marginBottom,\r\n      paddingTop,\r\n      paddingBottom\r\n    } = this.calcCSS();\r\n    const borders = px(borderTopWidth) + px(borderBottomWidth);\r\n    const paddings = px(paddingTop) + px(paddingBottom);\r\n\r\n    return px(height) + px(marginTop) + px(marginBottom) + outerSwitcher(boxSizing, [borders, paddings]);\r\n  }\r\n\r\n  /**\r\n   * @member {Number} Elem#outerWidth\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description Getter for finding how much width the element actually is.\r\n   *\r\n   * @example\r\n   * elem.css({\r\n   *   boxSizing: 'border-box',\r\n   *   width: '200px',\r\n   *   paddingLeft: '2px',\r\n   *   paddingRight: '3px',\r\n   *   borderLeft: '1px solid black',\r\n   *   borderRight: '4px solid black'\r\n   *   marginLeft: '0px',\r\n   *   marginRight: '5px'\r\n   * }).outerWidth; // 205\r\n   * elem\r\n   *   .css('box-sizing', 'content-box')\r\n   *   .outerWidth; // 215\r\n   * elem\r\n   *   .css('box-sizing', 'padding-box')\r\n   *   .outerWidth; // 210\r\n   */\r\n  get outerWidth() {\r\n    const elem = this.$[0];\r\n\r\n    if (isWindow(elem)) {\r\n      return elem.outerWidth;\r\n    }\r\n\r\n    const {\r\n      borderLeftWidth,\r\n      borderRightWidth,\r\n      boxSizing,\r\n      marginLeft,\r\n      marginRight,\r\n      paddingLeft,\r\n      paddingRight,\r\n      width\r\n    } = this.calcCSS();\r\n    const borders = px(borderLeftWidth) + px(borderRightWidth);\r\n    const paddings = px(paddingLeft) + px(paddingRight);\r\n\r\n    return px(width) + px(marginLeft) + px(marginRight) + outerSwitcher(boxSizing, [borders, paddings]);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#parent\r\n   * @public\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Method returns wrap of the set of the parent elements of each element in the set.\r\n   */\r\n  parent() {\r\n    return this.object((elems, elem) => elems.add(elem.parentNode), new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#parentTree\r\n   * @public\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Returns wrap of all parents of each element in the set.\r\n   *\r\n   * @example\r\n   * elem.parentTree(); // Elem\r\n   */\r\n  parentTree() {\r\n    return this.object((elems, elem) => {\r\n      while (elem = elem.parentNode) {\r\n        elems.add(elem);\r\n      }\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#prev\r\n   * @public\r\n   * @param {String} [selector = null] - If present, finds previous element to every elem that matches the selector.\r\n   * If not, finds previous element to each element in the set.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Method for finding previous element to each element in the set.\r\n   *\r\n   * @example\r\n   * elem.next();       // finds previous element to each element in the set\r\n   * elem.next('.foo'); // finds previous element to each element that has 'foo' class\r\n   */\r\n  prev(selector = null) {\r\n    return this.object((elems, elem) => {\r\n      /* eslint no-cond-assign: 0 */\r\n      while (elem = elem.previousSibling) {\r\n        if (new Elem(elem).is(selector)) {\r\n          return elems.add(elem);\r\n        }\r\n      }\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#prop\r\n   * @public\r\n   * @param {String|Object.<String, ElemValueCallback|*>} property - Either a string of a property or an assigned object.\r\n   * @param {ElemValueCallback|*} [value] - If a property parameter is a string\r\n   * this has to be an assigned value if it's present.\r\n   * @returns {Elem|*} Returns this if it's setter or a value if getter.\r\n   * @description Method that is either a property getter for the first element in the set\r\n   * or a setter for every element in the set.\r\n   *\r\n   * @example\r\n   * elem.prop('draggable', false);\r\n   * elem.prop('draggable'); // false\r\n   */\r\n  prop(property, value) {\r\n    if (arguments.length <= 1 && isString(property)) {\r\n      return this.$[0] ? this.$[0][property] : undefined;\r\n    }\r\n\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: value };\r\n    }\r\n\r\n    return this.forEach((elem, index) => {\r\n      iterate(property, (value, prop) => {\r\n        elem[prop] = isFunction(value) ? value(elem[prop], elem, index) : value;\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#ref\r\n   * @public\r\n   * @param {String|ElemValueCallback} [link] - If it's present link to a resource.\r\n   * @returns {Elem|String} If the link argument isn't present it's a getter of the 'src' attribute\r\n   * for the one of following elements: img, script, iframe, audio, video; of the 'action' attribute\r\n   * for a form element and of the 'href' attribute for the rest. If it's present it's a setter\r\n   * of the same attribute for all the element in the set.\r\n   * @description Method for getting resources links and setting them.\r\n   *\r\n   * @example\r\n   * elem.ref('/some/cool/image.png');\r\n   * elem.ref(); // '/some/cool/image.png'\r\n   */\r\n  ref(link) {\r\n    if (!arguments.length) {\r\n      return this.attr(refSwitcher(this.name));\r\n    }\r\n\r\n    return this.forEach((elem) => {\r\n      elem = new Elem(elem);\r\n\r\n      elem.attr(refSwitcher(elem.name), link);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#remove\r\n   * @public\r\n   * @returns {Elem} Returns this.\r\n   * @description Removes all the elements from the set from the document.\r\n   * Note: it doesn't remove them from the set so watch out for the memory leaks.\r\n   *\r\n   * @example\r\n   * elem.remove();\r\n   */\r\n  remove() {\r\n    return this.forEach((elem) => {\r\n      const parent = elem.parentNode;\r\n\r\n      if (parent) {\r\n        parent.removeChild(elem);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#removeAttr\r\n   * @public\r\n   * @param {...String} attributes - Attributes to remove.\r\n   * @returns {Elem} Returns this.\r\n   * @description Removes all the attributes from arguments from all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.removeAttr('foo', 'bar', 'baz');\r\n   */\r\n  removeAttr(...attributes) {\r\n    return this.forEach((elem) => {\r\n      if (!isElement(elem)) {\r\n        return;\r\n      }\r\n\r\n      iterate(arguments, (attr) => {\r\n        const ns = attrNSSwitcher(attr, [new Elem(elem)]);\r\n\r\n        if (isNull(ns)) {\r\n          elem.removeAttribute(attr);\r\n        } else {\r\n          elem.removeAttributeNS(ns, attr);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#removeClass\r\n   * @public\r\n   * @param {...String} classes - Classes to remove.\r\n   * @returns {Elem} Returns this.\r\n   * @description Removes all the classes from arguments from all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.removeClass('foo', 'bar', 'baz');\r\n   */\r\n  removeClass(...classes) {\r\n    return this.forEach((elem) => {\r\n      const list = elem.classList;\r\n\r\n      iterate(isElement(elem) && arguments, (cls) => list.remove(cls));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#removeCSS\r\n   * @public\r\n   * @param {...String} props - CSS properties to remove.\r\n   * @returns {Elem} Returns this.\r\n   * @description Removes all the CSS properties from arguments from all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.removeCSS('display', 'position', 'margin');\r\n   */\r\n  removeCSS(...props) {\r\n    return this.forEach((elem) => {\r\n      if (!isElement(elem)) {\r\n        return;\r\n      }\r\n\r\n      iterate(arguments, (css) => {\r\n        elem.style.removeProperty(css);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#replace\r\n   * @public\r\n   * @param {String|Elem|Element} element - Element to replace the first element in the set\r\n   * with a set of elements specified by the argument (Element, set of elements or a selector of them).\r\n   * @returns {Elem} Returns this.\r\n   * @description Method is similar to\r\n   * [Node#replaceChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/replaceChild}.\r\n   *\r\n   * @example\r\n   * elem.replace(elem2);\r\n   * elem.replace(document.getElementById('id'));\r\n   * elem.replace('#id div.c1');\r\n   */\r\n  replace(element) {\r\n    element = toFind(element);\r\n\r\n    const parent = this.first().parent();\r\n\r\n    if (!parent.length) {\r\n      return this;\r\n    }\r\n\r\n    let elem = parent;\r\n    let method = 'into';\r\n    const next = this.next().first().$[0];\r\n    const prev = this.prev().first().$[0];\r\n\r\n    if (next) {\r\n      elem = next;\r\n      method = 'insertBefore';\r\n    } else if (prev) {\r\n      elem = prev;\r\n      method = 'insertAfter';\r\n    }\r\n\r\n    this.first().remove();\r\n\r\n    element[method](elem);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#setOf\r\n   * @public\r\n   * @param {String} type - HTML element type.\r\n   * @param {Number|Object|Array.<*>} iterator - A number (how many elements to create inside each element),\r\n   * an object or an array to iterate over.\r\n   * @param {ElemSetOfCallback} callback\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Function for creating set of elements inside each element in the set based on an array or an object.\r\n   *\r\n   * @example\r\n   * table.setOf('tr', [[1, 2], [3, 4], [5, 6]], (row, array) => {\r\n   *   D(row).setOf('td', array, (col, number) => {\r\n   *     D(col).text(number);\r\n   *   });\r\n   * });\r\n   */\r\n  setOf(type, iterator, callback) {\r\n    validate({ 2: callback }, { 2: ['function'] }, 'Elem#setOf');\r\n\r\n    iterator = new Super(iterator).$;\r\n\r\n    if (isNumber(iterator)) {\r\n      try {\r\n        validate({ 1: iterator }, { 1: ['intLike', '>=0'] }, 'Elem#setOf');\r\n      } catch (e) {\r\n        throw new Error('2nd argument must be either or non-negative integer, or object! (at Elem#setOf)');\r\n      }\r\n\r\n      iterator = array(iterator).$;\r\n    }\r\n\r\n    return this.object((elems, elem, index) => {\r\n      iterate(iterator, (value, key) => {\r\n        const created = new Elem(elem).create(type);\r\n\r\n        callback(created.$[0], value, key, iterator, elem, index);\r\n\r\n        elems.add(created);\r\n      });\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#show\r\n   * @public\r\n   * @returns {Elem} Returns this.\r\n   * @description Shows all elements in the set.\r\n   * If an element was hidden using {@link Elem#hide} previous display is set.\r\n   *\r\n   * @example\r\n   * elem.show();\r\n   */\r\n  show() {\r\n    return this.forEach((elem) => {\r\n      const { dwayneData } = elem;\r\n\r\n      elem = new Elem(elem);\r\n\r\n      if (elem.css('display').indexOf('none') === 0) {\r\n        elem.css('display', dwayneData.previousDisplay);\r\n      }\r\n\r\n      dwayneData.previousDisplay = '';\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#text\r\n   * @public\r\n   * @param {String|ElemValueCallback|*} [text] - Text to write instead of current text.\r\n   * @returns {Elem|String} If no arguments passed text of the first element in the set returned.\r\n   * Otherwise all elements texts in the set are set to the text argument.\r\n   * @description Gets or sets text.\r\n   *\r\n   * @example\r\n   * elem.text('123');\r\n   * elem.text(); // '123'\r\n   */\r\n  text(text) {\r\n    if (!arguments.length) {\r\n      return this.prop(textProperty);\r\n    }\r\n\r\n    return this.forEach((elem, index) => {\r\n      const txt = elem[textProperty];\r\n\r\n      new Elem(elem).prop(\r\n        textProperty,\r\n        isFunction(text)\r\n          ? text(txt, elem, index)\r\n          : text\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#toggleAttr\r\n   * @public\r\n   * @param {String} attr - Attribute to toggle.\r\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the attribute\r\n   * with the '' value and if falsey method removes the attribute. If not present method adds\r\n   * the attribute if it doesn't exist and removes if it does.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for toggling attributes.\r\n   *\r\n   * @example\r\n   * elem.toggleAttr('attr');\r\n   * elem.toggleAttr('attr', someCondition);\r\n   */\r\n  toggleAttr(attr, condition) {\r\n    return this.forEach((elem) => {\r\n      elem = new Elem(elem);\r\n\r\n      if (arguments.length < 2 ? !elem.hasAttr(attr) : condition) {\r\n        elem.attr(attr, '');\r\n      } else {\r\n        elem.removeAttr(attr);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#toggleAttr\r\n   * @public\r\n   * @param {String} cls - Class to toggle.\r\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the class\r\n   * and if falsey method removes the class. If not present method adds\r\n   * the class if it doesn't exist and removes if it does.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for toggling classes.\r\n   *\r\n   * @example\r\n   * elem.toggleClass('cls');\r\n   * elem.toggleClass('cls', someCondition);\r\n   */\r\n  toggleClass(cls, condition) {\r\n    return (arguments.length < 2 ? !this.hasClass(cls) : condition)\r\n      ? this.addClass(cls)\r\n      : this.removeClass(cls);\r\n  }\r\n\r\n  get toStringTag() {\r\n    return toStringTag(this.$$);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#up\r\n   * @public\r\n   * @param {Integer} [level = 1] - What level up along the tree should be the parent.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Creates a collection of parents of level &lt;level&gt;.\r\n   *\r\n   * @example\r\n   * elem.up();\r\n   * elem.up(2);\r\n   */\r\n  up(level = 1) {\r\n    validate([level], [['intLike', '>=0']], 'Elem#up');\r\n\r\n    level = Number(level);\r\n\r\n    return this.object((elems, elem) => {\r\n      let n = level;\r\n\r\n      while (n-- && elem) {\r\n        elem = elem.parentNode;\r\n      }\r\n\r\n      elems.add(elem);\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#validate\r\n   * @public\r\n   * @param {ValidateCallback} [validator] - If present, function that validates inputs.\r\n   * @returns {Elem|Object.<String, Error|*>|null}\r\n   * If a callback argument provided returns this. If no arguments provided returns either an object\r\n   * with input names keys and errors values or null if no errors found.\r\n   * @description If a callback argument provided adds it to the element validators list.\r\n   * If no arguments provided validates every input element in the set with its own functions.\r\n   * If an element is a form it validates all input elements inside it. After the validation\r\n   * fires 'validate' event with 'valid' and 'error' (if form it's errors) properties.\r\n   *\r\n   * @example\r\n   * form.on('input change', 'input', (value, input) => {\r\n   *   input = D(input);\r\n   *\r\n   *   if (Number(value) % 3) {\r\n   *     input.addClass('invalid');\r\n   *\r\n   *     throw new Error('The value should be divided by 3!');\r\n   *   }\r\n   *\r\n   *   input.removeClass('invalid');\r\n   * });\r\n   */\r\n  validate(validator) {\r\n    validate([validator], ['function||!'], 'Elem#validate');\r\n\r\n    if (validator) {\r\n      return this.forEach(({ dwayneData }) => {\r\n        dwayneData.validators.push(validator);\r\n      });\r\n    }\r\n\r\n    const errors = new Super({ errors: null });\r\n\r\n    this\r\n      .filter(`${ inputElements }, form`)\r\n      .forEach((elem, index) => {\r\n        if (getName(elem) === 'form') {\r\n          let formErrors = { errors: null };\r\n          const form = new Elem(elem);\r\n          const inputs = form.find(inputElements);\r\n\r\n          inputs.forEach((input, index) => {\r\n            validatorWrap(input, index, formErrors);\r\n          });\r\n\r\n          errors.deepAssign(formErrors);\r\n\r\n          formErrors = formErrors.errors;\r\n\r\n          form.dispatch('validate', {}, {\r\n            valid: !formErrors,\r\n            errors: formErrors\r\n          });\r\n\r\n          return inputs.forEach((input) => {\r\n            const inputError = (formErrors || {})[input.name];\r\n\r\n            new Elem(input).dispatch('validate', {}, {\r\n              valid: !inputError,\r\n              error: inputError || null\r\n            });\r\n          });\r\n        }\r\n\r\n        let inputError = { errors: null };\r\n\r\n        validatorWrap(elem, index, inputError);\r\n        errors.deepAssign(inputError);\r\n\r\n        inputError = (inputError.errors || {})[elem.name];\r\n\r\n        new Elem(elem).dispatch('validate', {}, {\r\n          valid: !inputError,\r\n          error: inputError || null\r\n        });\r\n      });\r\n\r\n    function validatorWrap(input, index, errors) {\r\n      try {\r\n        if (input.validity && !input.validity.valid) {\r\n          throw new Error(input.validationMessage);\r\n        }\r\n\r\n        input.dwayneData.validators.forEach((validator) => {\r\n          validator(input.value, input, index);\r\n        });\r\n      } catch (err) {\r\n        (errors.errors = errors.errors || {})[input.name] = err;\r\n      }\r\n    }\r\n\r\n    if (errors.every((error) => isNull(error))) {\r\n      return null;\r\n    }\r\n\r\n    return errors.$.errors;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#width\r\n   * @public\r\n   * @param {*|ElemValueCallback} [width] - Width to set.\r\n   * @returns {Elem|String} If no arguments passed width of the first element in the set returned.\r\n   * Otherwise all elements widths in the set are set to the width argument.\r\n   * @description Gets or sets width.\r\n   *\r\n   * @example\r\n   * elem.width(123);\r\n   * elem.width(); // 123\r\n   */\r\n  width(width) {\r\n    return this.prop.apply(this, new Arr(arguments).unshift('width').$);\r\n  }\r\n}\r\n\r\ndefineProperties(Elem.prototype, {\r\n  [Symbol.toStringTag]: 'Elem'\r\n});\r\n\r\n/**\r\n * @const {Elem} win\r\n * @type {Elem}\r\n * @public\r\n * @description Elem instance of window.\r\n */\r\nconst win = new Elem(global);\r\n\r\n/**\r\n * @const {Elem} doc\r\n * @type {Elem}\r\n * @public\r\n * @description Elem instance of document.\r\n */\r\nconst doc = new Elem(nativeDocument);\r\n\r\n/**\r\n * @const {Elem} html\r\n * @type {Elem}\r\n * @public\r\n * @description Elem instance of document.documentElement.\r\n */\r\nconst html = new Elem(nativeDocument.documentElement);\r\n\r\n/**\r\n * @const {Elem} body\r\n * @type {Elem}\r\n * @public\r\n * @description Elem instance of document.body.\r\n */\r\nconst body = new Elem(nativeDocument.body);\r\n\r\n/**\r\n * @const {Elem} head\r\n * @type {Elem}\r\n * @public\r\n * @description Elem instance of document.head.\r\n */\r\nconst head = new Elem(nativeDocument.head);\r\n\r\nconst elements = new Arr(htmlElements).concat(svgElements).$;\r\nconst props = new Arr(elements).map((type) => new Str(type).toCamelCase().$).$;\r\n\r\ndynamicDefineProperties(Elem.prototype, props, (elem, i) => function () {\r\n  return this.create.apply(this, new Arr(arguments).unshift(elements[i]).$);\r\n});\r\n\r\ndynamicDefineProperties(Elem.prototype, canvasGetMethods, (method) => function () {\r\n  const ctx = this.ctx();\r\n\r\n  if (ctx) {\r\n    return ctx[method].apply(ctx, arguments);\r\n  }\r\n});\r\n\r\ndynamicDefineProperties(Elem.prototype, canvasRestMethods, (method) => function () {\r\n  const ctx = this.ctx();\r\n\r\n  if (ctx) {\r\n    ctx[method].apply(ctx, arguments);\r\n  }\r\n\r\n  return this;\r\n});\r\n\r\n/**\r\n * @function toFind\r\n * @private\r\n * @param {Element|Elem|String} elem - Element, selector of Elements or Elem.\r\n * @returns {Elem} Instance of Elem.\r\n */\r\nfunction toFind(elem) {\r\n  if (isElem(elem)) {\r\n    return elem;\r\n  }\r\n\r\n  if (isString(elem)) {\r\n    elem = find(elem);\r\n  }\r\n\r\n  return new Elem(elem);\r\n}\r\n\r\n/**\r\n * @function isElem\r\n * @private\r\n * @param {*} value - Value to check if it's Elem.\r\n * @returns {Boolean} If the value is Elem.\r\n * @description Returns if the value is Elem or not.\r\n */\r\nfunction isElem(value) {\r\n  return value instanceof Elem;\r\n}\r\n\r\n/**\r\n * @function isWindow\r\n * @private\r\n * @param {*} value - Value to check if it's Window.\r\n * @returns {Boolean} If the value is Window.\r\n * @description Returns if the value is Window or not.\r\n */\r\nfunction isWindow(value) {\r\n  return toStringTag(value) === 'Window';\r\n}\r\n\r\n/**\r\n * @function isHTMLDocument\r\n * @private\r\n * @param {*} value - Value to check if it's HTMLDocument.\r\n * @returns {Boolean} If the value is HTMLDocument.\r\n * @description Returns if the value is HTMLDocument or not.\r\n */\r\nfunction isHTMLDocument(value) {\r\n  return toStringTag(value) === 'HTMLDocument';\r\n}\r\n\r\n/**\r\n * @function isDocumentFragment\r\n * @private\r\n * @param {*} value - Value to check if it's a DocumentFragment.\r\n * @returns {Boolean} If the value is a DocumentFragment.\r\n * @description Returns if the value is a DocumentFragment or not.\r\n */\r\nfunction isDocumentFragment(value) {\r\n  return toStringTag(value) === 'DocumentFragment';\r\n}\r\n\r\n/**\r\n * @function isStyleRule\r\n * @private\r\n * @param {*} value - Value to check if it's a style rule.\r\n * @returns {Boolean} If the value is a style rule.\r\n * @description Returns if the value is a style rule or not.\r\n */\r\nfunction isStyleRule(value) {\r\n  return toStringTag(value) === 'CSSStyleRule';\r\n}\r\n\r\n/**\r\n * @function\r\n * @private\r\n * @param {*} value - Value to check if it's Comment or Text.\r\n * @returns {Boolean} If the value is HTMLDocument.\r\n * @description Returns if the value is Comment or Text or not.\r\n */\r\nfunction isCommentOrText(value) {\r\n  const tag = toStringTag(value);\r\n\r\n  return tag === 'Comment' || tag === 'Text';\r\n}\r\n\r\n/**\r\n * @function getElem\r\n * @private\r\n * @param {Elem} elem - Element to check.\r\n * @returns {Element} The argument or a fallback if needed.\r\n */\r\nfunction getElem(elem) {\r\n  return isElement(elem.$[0]) ? elem.$[0] : emptyDiv;\r\n}\r\n\r\n/**\r\n * @function getName\r\n * @private\r\n * @param {Element} [elem] - Element which name is needed to know.\r\n * @returns {String} Element name.\r\n */\r\nfunction getName(elem) {\r\n  return (elem && elem.nodeName && elem.nodeName.toLowerCase()) || '';\r\n}\r\n\r\n/**\r\n * @function addDwayneData\r\n * @private\r\n * @param {Element} elem - Element to add dwayneData to.\r\n * @returns {void}\r\n */\r\nfunction addDwayneData(elem) {\r\n  if (!{}.hasOwnProperty.call(elem, 'dwayneData') && !isWindow(elem)) {\r\n    /**\r\n     * @member Element#dwayneData\r\n     * @type {Object}\r\n     * @protected\r\n     * @property {String} previousDisplay - Parameter used for hiding/showing elements.\r\n     * @property {Object.<String, Super>} removeListeners - Parameter used for remove event listeners.\r\n     * @property {CanvasRenderingContext2D} [ctx] - Canvas rendering context.\r\n     * @property {Arr} validators - Validators assigned to element.\r\n     * @description D data.\r\n     */\r\n    Object.defineProperty(elem, 'dwayneData', {\r\n      value: {\r\n        previousDisplay: '',\r\n        listeners: {},\r\n        ctx: getName(elem) === 'canvas' && elem.getContext('2d'),\r\n        validators: new Arr([])\r\n      }\r\n    });\r\n  } else if (isWindow(elem) && !windowsDwayneData.some(({ element }) => element === elem)) {\r\n    windowsDwayneData.push({\r\n      element: elem,\r\n      listeners: {}\r\n    });\r\n  }\r\n}\r\n\r\nconstructors[2].push({\r\n  check: (elem) => (\r\n    isElement(elem) ||\r\n    isWindow(elem) ||\r\n    isHTMLDocument(elem) ||\r\n    isCommentOrText(elem) ||\r\n    isDocumentFragment(elem) ||\r\n    /^(HTMLCollection|NodeList)$/.test(toStringTag(elem))\r\n  ),\r\n  cls: Elem\r\n});\r\n\r\n/**\r\n * @function find\r\n * @public\r\n * @param {String} selector - Selector to find.\r\n * @param {Element} [base = document] - Base to find in.\r\n * @returns {Elem} New instance of Elem.\r\n * @description Synonym for\r\n * [Document#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Document/querySelectorAll}.\r\n */\r\nfunction find(selector, base = nativeDocument) {\r\n  return new Elem(\r\n    isElement(base) || isHTMLDocument(base)\r\n      ? base.querySelectorAll(String(selector))\r\n      : []\r\n  );\r\n}\r\n\r\n/**\r\n * @function parseHTML\r\n * @public\r\n * @param {String} html - HTML to parse.\r\n * @param {Boolean} [collapseWhiteSpace = false] - If the whitespace should be\r\n * collapsed during the parsing.\r\n * @returns {Elem} New instance of Elem.\r\n * @description Parses HTML and returns a wrap of #document-fragment containing the contents.\r\n *\r\n * @example\r\n * parseHTML('<div>123</div>'); // Elem\r\n */\r\nfunction parseHTML(html, collapseWhiteSpace) {\r\n  const json = markupToJSON(html, collapseWhiteSpace);\r\n  const template = doc.template();\r\n  const elem = new Elem(template.$[0].content);\r\n\r\n  json.forEach(function forEachNode(node) {\r\n    const {\r\n      name,\r\n      attrs,\r\n      value,\r\n      parent,\r\n      children\r\n    } = node;\r\n\r\n    const parentNode = parent.elem || elem;\r\n    const element = parentNode.create(name);\r\n\r\n    node.elem = element;\r\n\r\n    if (value) {\r\n      element.text(value);\r\n    }\r\n\r\n    if (attrs) {\r\n      element.attr(attrs);\r\n    }\r\n\r\n    if (name === 'template') {\r\n      node.elem = new Elem(element.prop('content'));\r\n    }\r\n\r\n    if (children) {\r\n      children.forEach(forEachNode);\r\n    }\r\n  });\r\n\r\n  return new Elem(elem);\r\n}\r\n\r\n/**\r\n * @function px\r\n * @public\r\n * @param {String|Number} size - String containing pixels value or a number.\r\n * @returns {Number} Number of pixels.\r\n * @description Function for parsing pixel strings.\r\n *\r\n * @example\r\n * px('0px');  // 0\r\n * px('42px'); // 42\r\n */\r\nfunction px(size) {\r\n  return Number(String(size).replace(/px$/, ''));\r\n}\r\n\r\nexport { Elem, win, doc, html, body, head, find, parseHTML, px };\r\n","export function registerDBlock(Block) {\r\n  class DBlock extends Block {\r\n    static template = '<d-elements value=\"{elems}\" />';\r\n\r\n    elems = null;\r\n\r\n    afterConstruct() {\r\n      const { children } = this.$$.parent;\r\n      const { name } = this.args;\r\n      let found;\r\n\r\n      if (name) {\r\n        found = children.find(({ name: nodeName }) => nodeName === `d-block-${ name }`);\r\n\r\n        if (found && found.value.children.length) {\r\n          this.elems = found.value.children;\r\n        }\r\n      } else {\r\n        this.elems = children;\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-block',\r\n    value: DBlock\r\n  };\r\n}\r\n","import { Arr } from '../Arr';\r\nimport { Elem } from '../Elem';\r\nimport { Super } from '../Super';\r\nimport { assign } from '../helpers';\r\n\r\nexport function registerDEach(Block, createBlock) {\r\n  class DEach extends Block {\r\n    constructor(opts) {\r\n      super(opts);\r\n\r\n      const {\r\n        args: {\r\n          item: itemName = '$item',\r\n          index: indexName = '$index'\r\n        }\r\n      } = this;\r\n\r\n      assign(this.$$, {\r\n        uids: new Super({}),\r\n        items: new Arr([]),\r\n        UID: String(this.args.uid),\r\n        itemName,\r\n        indexName\r\n      });\r\n    }\r\n\r\n    afterRender() {\r\n      this.constructValues(this.args.set);\r\n      this.watchArgs('set', (set) => {\r\n        this.constructValues(set);\r\n      });\r\n    }\r\n\r\n    constructValues(set) {\r\n      const {\r\n        elems: {\r\n          start,\r\n          parent: parentElem\r\n        },\r\n        uids,\r\n        parent,\r\n        scope,\r\n        itemName,\r\n        indexName,\r\n        UID\r\n      } = this.$$;\r\n      const { children } = this;\r\n      const $uids = uids.$;\r\n      const newKeys = {};\r\n      const newUIDs = {};\r\n\r\n      new Super(set).forEach((item, index) => {\r\n        scope[itemName] = item;\r\n        scope[indexName] = index;\r\n\r\n        const uid = parent.$$.evaluate(String(UID), null, null, false, false, this);\r\n\r\n        newKeys[uid] = newKeys[uid] || {};\r\n        newKeys[uid][index] = true;\r\n        newUIDs[index] = uid;\r\n      });\r\n\r\n      scope[itemName] = null;\r\n      scope[indexName] = null;\r\n\r\n      uids.forEach((items, uid) => {\r\n        if (!newKeys[uid]) {\r\n          items.forEach((Item) => {\r\n            Item.remove();\r\n          });\r\n\r\n          return;\r\n        }\r\n\r\n        items.splice(Object.keys(newKeys[uid]).length).forEach((Item) => {\r\n          Item.remove();\r\n        });\r\n      });\r\n\r\n      let after = start;\r\n\r\n      new Super(set).forEach((item, index) => {\r\n        const uid = newUIDs[index];\r\n        let block;\r\n\r\n        if ($uids[uid] && $uids[uid].length) {\r\n          block = newKeys[uid][index] = uids.$[uid].shift();\r\n          block.$$.scope[indexName] = index;\r\n          block.$$.scope[itemName] = item;\r\n        } else {\r\n          block = newKeys[uid][index] = createBlock({\r\n            node: {\r\n              itemName,\r\n              indexName,\r\n              item,\r\n              index,\r\n              name: '#d-item',\r\n              block: parent,\r\n              children\r\n            },\r\n            after,\r\n            parent: parentElem,\r\n            parentBlock: this,\r\n            parentScope: parent\r\n          });\r\n        }\r\n\r\n        const {\r\n          start,\r\n          end\r\n        } = block.$$.elems;\r\n\r\n        if (start.prev().$[0] !== after.$[0]) {\r\n          const { content } = block.$$.elems;\r\n\r\n          new Elem([\r\n            start,\r\n            content,\r\n            end\r\n          ]).insertAfter(after);\r\n        }\r\n\r\n        after = end;\r\n      });\r\n\r\n      this.$$.uids = new Super(newKeys).map((items) => (\r\n        new Super(items).values()\r\n      ));\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-each',\r\n    value: DEach\r\n  };\r\n}\r\n","import { Arr } from '../Arr';\r\nimport { Elem } from '../Elem';\r\n\r\nexport function registerDElements(Block, createBlock) {\r\n  class DElements extends Block {\r\n    afterConstruct() {\r\n      this.watchArgs('value', (value) => {\r\n        const {\r\n          children,\r\n          mixins,\r\n          watchersToRemove,\r\n          elems: {\r\n            start,\r\n            content,\r\n            parent\r\n          }\r\n        } = this.$$;\r\n        let after = start;\r\n\r\n        children.forEach((child) => {\r\n          child.remove(true);\r\n        });\r\n        mixins.forEach((mixin) => {\r\n          mixin.remove(true);\r\n        });\r\n        content.remove();\r\n\r\n        this.$$.children = new Arr([]);\r\n        this.$$.mixins = new Arr([]);\r\n        this.$$.watchersToRemove = watchersToRemove.filter(({ watchers, watcher, forDElements }) => {\r\n          if (forDElements) {\r\n            return true;\r\n          }\r\n\r\n          const index = watchers.indexOf(watcher);\r\n\r\n          if (index !== -1) {\r\n            watchers.splice(index, 1);\r\n          }\r\n        });\r\n\r\n        const newContent = new Elem();\r\n\r\n        new Arr(value || []).forEach((child) => {\r\n          const block = createBlock({\r\n            node: child,\r\n            after,\r\n            parent,\r\n            parentBlock: this,\r\n            parentScope: this\r\n          });\r\n\r\n          if (block instanceof Block) {\r\n            const { elems } = block.$$;\r\n\r\n            after = elems.end;\r\n\r\n            newContent.add(elems.start, elems.content, elems.end);\r\n          } else {\r\n            after = block;\r\n\r\n            newContent.add(block);\r\n          }\r\n        });\r\n\r\n        this.$$.elems.content = newContent;\r\n      });\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-elements',\r\n    value: DElements\r\n  };\r\n}\r\n","export function registerDIf(Block) {\r\n  class DIf extends Block {\r\n    static template = '<d-elements value=\"{elems}\"/>';\r\n\r\n    index = Infinity;\r\n    elems = null;\r\n    values = this.children.map((child, i) => {\r\n      const {\r\n        name,\r\n        attrs,\r\n        children\r\n      } = child;\r\n      const cond = this.evaluateAndWatch(name === 'd-else' ? '{true}' : attrs.if || '{true}', (newValue) => {\r\n        if (!!newValue === this.values.$[i]) {\r\n          return;\r\n        }\r\n\r\n        this.values.$[i] = !!newValue;\r\n\r\n        if (i > this.index) {\r\n          return;\r\n        }\r\n\r\n        if (i < this.index) {\r\n          this.index = i;\r\n          this.elems = children;\r\n\r\n          return;\r\n        }\r\n\r\n        const found = this.values.find(Boolean);\r\n\r\n        if (found) {\r\n          this.index = found.key;\r\n          this.elems = this.children.$[found.key].children;\r\n        } else {\r\n          this.index = Infinity;\r\n          this.elems = null;\r\n        }\r\n      });\r\n\r\n      if (cond && this.index === Infinity) {\r\n        this.index = i;\r\n        this.elems = children;\r\n      }\r\n\r\n      return cond;\r\n    });\r\n  }\r\n\r\n  return {\r\n    name: 'd-if',\r\n    value: DIf\r\n  };\r\n}\r\n","export function registerDItem(Block) {\r\n  class DItem extends Block {\r\n    static template = '<d-elements value=\"{children}\"/>';\r\n  }\r\n\r\n  return {\r\n    name: '#d-item',\r\n    value: DItem\r\n  };\r\n}\r\n","import { Arr } from '../Arr';\r\nimport { Super } from '../Super';\r\n\r\nexport function registerDSwitch(Block) {\r\n  class DSwitch extends Block {\r\n    static template = '<d-elements value=\"{elems}\"/>';\r\n\r\n    index = Infinity;\r\n    elems = null;\r\n\r\n    constructor(opts) {\r\n      super(opts);\r\n\r\n      const {\r\n        args,\r\n        args: { value }\r\n      } = this;\r\n      let wasDefault;\r\n\r\n      this.values = this.children.object((values, child, i) => {\r\n        const {\r\n          name,\r\n          attrs,\r\n          children\r\n        } = child;\r\n\r\n        if (wasDefault) {\r\n          return;\r\n        }\r\n\r\n        if (name !== 'd-case' && name !== 'd-default') {\r\n          return;\r\n        }\r\n\r\n        if (name === 'd-default') {\r\n          wasDefault = true;\r\n        }\r\n\r\n        let val;\r\n\r\n        if (name === 'd-default') {\r\n          val = args.value;\r\n        } else {\r\n          val = this.evaluateAndWatch(attrs.if || '{undefined}', (newValue) => {\r\n            if (this.equals(this.values.$[i].value, newValue)) {\r\n              return;\r\n            }\r\n\r\n            this.values.$[i].value = newValue;\r\n\r\n            if (i > this.index) {\r\n              return;\r\n            }\r\n\r\n            if (i < this.index) {\r\n              this.index = i;\r\n              this.elems = children;\r\n\r\n              return;\r\n            }\r\n\r\n            const found = this.values.find(({ value }) => (\r\n              this.equals(value, args.value)\r\n            ));\r\n\r\n            if (found) {\r\n              this.index = found.key;\r\n              this.elems = found.value.children;\r\n            } else {\r\n              this.index = Infinity;\r\n              this.elems = null;\r\n            }\r\n          });\r\n        }\r\n\r\n        if (this.equals(val, value) && this.index === Infinity) {\r\n          this.index = i;\r\n          this.elems = children;\r\n        }\r\n\r\n        values.push({\r\n          name,\r\n          children,\r\n          value: val\r\n        });\r\n      }, new Arr([]));\r\n    }\r\n\r\n    afterConstruct() {\r\n      this.watchArgs('value', (newValue) => {\r\n        this.index = Infinity;\r\n        this.values.forEach(({ name, value, children }, i) => {\r\n          const val = name === 'd-default'\r\n            ? newValue\r\n            : value;\r\n\r\n          if (this.equals(val, newValue) && this.index === Infinity) {\r\n            this.index = i;\r\n            this.elems = children;\r\n          }\r\n        });\r\n\r\n        if (this.index === Infinity) {\r\n          this.elems = null;\r\n        }\r\n      });\r\n    }\r\n\r\n    equals(value1, value2) {\r\n      return new Super(value1).equals(value2);\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-switch',\r\n    value: DSwitch\r\n  };\r\n}\r\n","import { isNil } from '../helpers';\r\n\r\nexport function registerDText(Block) {\r\n  class DText extends Block {\r\n    static template = '<d-elements value=\"{[{ name: \\'#text\\', value: text }]}\"/>';\r\n\r\n    text = '';\r\n\r\n    afterConstruct() {\r\n      this.text = isNil(this.args.value) ? '' : this.args.value;\r\n\r\n      this.watchArgs('value', (newValue) => {\r\n        this.text = isNil(newValue) ? '' : newValue;\r\n      });\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-text',\r\n    value: DText\r\n  };\r\n}\r\n","import { Super } from '../Super';\r\n\r\nexport function registerDAttr(Mixin) {\r\n  class DAttr extends Mixin {\r\n    afterUpdate(newValue, oldValue) {\r\n      const { elem } = this;\r\n\r\n      newValue = new Super(newValue).$;\r\n\r\n      new Super(oldValue).forEach((value, prop) => {\r\n        if (!newValue[prop]) {\r\n          elem.removeAttr(prop);\r\n        }\r\n      });\r\n      elem.attr(newValue);\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-attr',\r\n    value: DAttr\r\n  };\r\n}\r\n\r\n","import { isFunction } from '../helpers';\r\n\r\nexport function registerDBind(Mixin) {\r\n  class DBind extends Mixin {\r\n    afterUpdate(value) {\r\n      if (this.off) {\r\n        this.off();\r\n      }\r\n\r\n      if (!isFunction(value)) {\r\n        return;\r\n      }\r\n\r\n      this.off = this.elem.on(this.match[0], value);\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-bind',\r\n    value: DBind\r\n  };\r\n}\r\n","import { Super } from '../Super';\r\nimport { isArray, isString, iterate } from '../helpers';\r\n\r\nexport function registerDClass(Mixin) {\r\n  class DClass extends Mixin {\r\n    classes = [];\r\n\r\n    afterUpdate(newValue) {\r\n      const {\r\n        elem,\r\n        classes\r\n      } = this;\r\n      const newClasses = [];\r\n\r\n      newValue = new Super(newValue).$;\r\n\r\n      if (isString(newValue)) {\r\n        newValue = newValue.split(/\\s+/);\r\n      }\r\n\r\n      if (isArray(newValue)) {\r\n        iterate(classes, (cls) => {\r\n          if (newValue.indexOf(cls) === -1) {\r\n            elem.removeClass(cls);\r\n          }\r\n        });\r\n        iterate(newValue, (cls) => {\r\n          if (isString(cls)) {\r\n            newClasses.push(cls);\r\n            elem.addClass(cls);\r\n          }\r\n        });\r\n      } else {\r\n        iterate(classes, (cls) => {\r\n          if (!newValue || !newValue[cls]) {\r\n            elem.removeClass(cls);\r\n          }\r\n        });\r\n        iterate(newValue, (val, cls) => {\r\n          if (val) {\r\n            newClasses.push(cls);\r\n            elem.addClass(cls);\r\n          }\r\n        });\r\n      }\r\n\r\n      this.classes = newClasses;\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-class',\r\n    value: DClass\r\n  };\r\n}\r\n","import { isFunction, isString } from '../helpers';\r\n\r\nexport function registerDElem(Mixin) {\r\n  class DElem extends Mixin {\r\n    static evaluate = false;\r\n\r\n    constructor(opts) {\r\n      super(opts);\r\n\r\n      const {\r\n        block,\r\n        elem\r\n      } = this;\r\n      const value = this.evaluateOnce();\r\n\r\n      if (isFunction(value)) {\r\n        value(elem);\r\n      } else if (isString(value)) {\r\n        block[value] = elem;\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-elem',\r\n    value: DElem\r\n  };\r\n}\r\n","export function registerDHide(Mixin) {\r\n  class DHide extends Mixin {\r\n    afterUpdate(value) {\r\n      const { elem } = this;\r\n\r\n      if (value) {\r\n        elem.hide();\r\n      } else {\r\n        elem.show();\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-hide',\r\n    value: DHide\r\n  };\r\n}\r\n","export function registerDOn(Mixin) {\r\n  class DOn extends Mixin {\r\n    static evaluate = false;\r\n\r\n    constructor(opts) {\r\n      super(opts);\r\n\r\n      this.elem.on(this.match[0], () => {\r\n        this.evaluateOnce();\r\n      });\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-on',\r\n    value: DOn\r\n  };\r\n}\r\n","export function registerDShow(Mixin) {\r\n  class DShow extends Mixin {\r\n    afterUpdate(value) {\r\n      const { elem } = this;\r\n\r\n      if (value) {\r\n        elem.show();\r\n      } else {\r\n        elem.hide();\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-show',\r\n    value: DShow\r\n  };\r\n}\r\n","import { Super } from '../Super';\r\n\r\nexport function registerDStyle(Mixin) {\r\n  class DStyle extends Mixin {\r\n    afterUpdate(newValue, oldValue) {\r\n      const { elem } = this;\r\n\r\n      newValue = new Super(newValue).$;\r\n\r\n      new Super(oldValue).forEach((value, prop) => {\r\n        if (!newValue[prop]) {\r\n          elem.removeCSS(prop);\r\n        }\r\n      });\r\n      elem.css(newValue);\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-style',\r\n    value: DStyle\r\n  };\r\n}\r\n","import { isNil } from '../helpers';\r\n\r\nexport function registerDText(Mixin) {\r\n  class DText extends Mixin {\r\n    afterUpdate(value) {\r\n      this.elem.text(\r\n        isNil(value)\r\n          ? ''\r\n          : `${ value }`\r\n      );\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-text',\r\n    value: DText\r\n  };\r\n}\r\n","import { switcher } from '../Switcher';\nimport { isFunction } from '../helpers';\n\nconst listenerSwitcher = switcher('strictEquals', 'input')\n  .case('form', 'input, change')\n  .case('select', 'change')\n  .case('input', (type) => (\n    type === 'radio'\n    || type === 'checkbox'\n    || type === 'color'\n    || type === 'file'\n      ? 'change'\n      : 'input'\n  ));\n\nexport function registerDValidate(Mixin) {\n  class DValidate extends Mixin {\n    static evaluate = false;\n\n    constructor(opts) {\n      super(opts);\n\n      const { elem } = this;\n      const validator = this.evaluateOnce();\n\n      if (isFunction(validator)) {\n        elem.validate(validator);\n      } else if (validator === true) {\n        elem.on(listenerSwitcher(elem.name, [elem.prop('type')]), () => {\n          elem.validate();\n        });\n      }\n    }\n  }\n\n  return {\n    name: 'd-validate',\n    value: DValidate\n  };\n}\n","import { Arr } from '../Arr';\r\nimport { switcher } from '../Switcher';\r\nimport { isArray, isFunction, isNil } from '../helpers';\r\n\r\nconst propSwitcher = switcher('strictEquals', (type, elem) => (\r\n  elem.hasAttr('contenteditable') || elem.hasAttr('contentEditable')\r\n    ? 'text'\r\n    : 'value'\r\n))\r\n  .case('select', (type, elem) => (\r\n    elem.hasAttr('multiple')\r\n      ? 'multiple-select'\r\n      : 'value'\r\n  ))\r\n  .case('input', (type) => {\r\n    if (type === 'file') {\r\n      return 'files';\r\n    }\r\n\r\n    return type === 'radio' || type === 'checkbox'\r\n      ? 'checked'\r\n      : 'value';\r\n  });\r\nconst setValueSwitcher = switcher('strictEquals', (value) => value)\r\n  .case('input', (value, type, inputValue) => {\r\n    if (type !== 'radio' && type !== 'checkbox') {\r\n      return value;\r\n    }\r\n\r\n    if (type === 'radio') {\r\n      return value === inputValue;\r\n    }\r\n\r\n    return value.indexOf(inputValue) !== -1;\r\n  });\r\nconst getValueSwitcher = switcher('strictEquals', (value) => value)\r\n  .case('select', (value, type, inputValue, values, elem, options) => {\r\n    if (!elem.hasAttr('multiple')) {\r\n      return value;\r\n    }\r\n\r\n    return options\r\n      .object((values, { selected, value }) => {\r\n        if (selected && values.indexOf(value) === -1) {\r\n          values.push(value);\r\n        }\r\n      }, [])\r\n      .$;\r\n  })\r\n  .case('input', (value, type, inputValue, values, elem, options, init) => {\r\n    if (type !== 'radio' && type !== 'checkbox') {\r\n      return value;\r\n    }\r\n\r\n    if (type === 'radio') {\r\n      return value\r\n        ? inputValue\r\n        : null;\r\n    }\r\n\r\n    if (!value && init) {\r\n      return values;\r\n    }\r\n\r\n    if (value) {\r\n      if (values) {\r\n        return values.indexOf(inputValue) === -1\r\n          ? new Arr(values).concat(inputValue).$\r\n          : values;\r\n      }\r\n\r\n      return [inputValue];\r\n    }\r\n\r\n    if (!isArray(values)) {\r\n      return [];\r\n    }\r\n\r\n    const index = values.indexOf(inputValue);\r\n\r\n    if (index !== -1) {\r\n      return [\r\n        ...new Arr(values).slice(0, index).$,\r\n        ...new Arr(values).slice(index + 1).$\r\n      ];\r\n    }\r\n\r\n    return values;\r\n  });\r\nconst listenerSwitcher = switcher('strictEquals', 'input')\r\n  .case('select', 'change')\r\n  .case('input', (type) => (\r\n    type === 'radio'\r\n    || type === 'checkbox'\r\n    || type === 'color'\r\n    || type === 'file'\r\n      ? 'change'\r\n      : 'input'\r\n  ));\r\n\r\nexport function registerDValue(Mixin) {\r\n  class DValue extends Mixin {\r\n    static evaluate = false;\r\n\r\n    constructor(opts) {\r\n      super(opts);\r\n\r\n      const {\r\n        $$: { _value },\r\n        block,\r\n        elem,\r\n        node\r\n      } = this;\r\n      const name = elem.name;\r\n      const type = elem.prop('type');\r\n      const value = this.evaluateOnce();\r\n      let initialScopeValue = null;\r\n\r\n      this.prop = propSwitcher(name, [type, elem]);\r\n      this.name = name;\r\n      this.type = type;\r\n      this.value = value;\r\n      this.options = elem.find('option');\r\n\r\n      if (!isFunction(value)) {\r\n        initialScopeValue = block.$$.evaluate(`{${ _value }}`, (newValue) => {\r\n          this.currentValue = newValue;\r\n          this.setProp(newValue);\r\n        }, this);\r\n      }\r\n\r\n      const initialElemValue = this.getProp(initialScopeValue, true);\r\n      const isInitialScopeValueNull = isNil(initialScopeValue);\r\n      const isCheckbox = type === 'checkbox';\r\n\r\n      if (isInitialScopeValueNull || isCheckbox) {\r\n        this.currentValue = initialElemValue;\r\n        this.changeScope();\r\n\r\n        if (!isInitialScopeValueNull && isCheckbox) {\r\n          this.setProp(initialScopeValue);\r\n        }\r\n      } else {\r\n        this.currentValue = initialScopeValue;\r\n        this.setProp(initialScopeValue);\r\n      }\r\n\r\n      elem.on(listenerSwitcher(name, [type]), (e) => {\r\n        if (e.target === node) {\r\n          this.currentValue = this.getProp(this.currentValue);\r\n          this.changeScope();\r\n        }\r\n      });\r\n    }\r\n\r\n    changeScope() {\r\n      const {\r\n        block,\r\n        value,\r\n        currentValue\r\n      } = this;\r\n\r\n      if (isFunction(value)) {\r\n        value(currentValue);\r\n      } else {\r\n        block[value] = currentValue;\r\n      }\r\n    }\r\n\r\n    setProp(value) {\r\n      const {\r\n        elem,\r\n        name,\r\n        prop,\r\n        type,\r\n        node,\r\n        options\r\n      } = this;\r\n\r\n      if (prop === 'text') {\r\n        elem.text(value);\r\n      } else if (prop === 'multiple-select') {\r\n        options.forEach((option) => {\r\n          option.selected = value.indexOf(option.value) !== -1;\r\n        });\r\n      } else {\r\n        elem.prop(prop, setValueSwitcher(name, [value, type, node.value]));\r\n      }\r\n    }\r\n\r\n    getProp(values, init) {\r\n      const {\r\n        elem,\r\n        name,\r\n        prop,\r\n        type,\r\n        node,\r\n        options\r\n      } = this;\r\n\r\n      return prop === 'text'\r\n        ? elem.text()\r\n        : getValueSwitcher(name, [elem.prop(prop), type, node.value, values, elem, options, init]);\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-value',\r\n    value: DValue\r\n  };\r\n}\r\n","/**\r\n * @module Block\r\n * @private\r\n * @mixin\r\n * @description Exports Block class.\r\n */\r\n\r\nimport { Arr } from './Arr';\r\nimport { doc, Elem } from './Elem';\r\nimport { Str } from './Str';\r\nimport { Super } from './Super';\r\nimport {\r\n  iterate, validate,\r\n  isFunction, isNil, isUndefined\r\n} from './helpers';\r\nimport * as Blocks from './blocks';\r\nimport * as Mixins from './mixins';\r\nimport { htmlAllowedTagSymbols, htmlAllowedAttrSymbols } from './constants';\r\nimport markupToJSON from './helpers/markupToJSON';\r\n\r\n/**\r\n * @callback Watcher\r\n * @param {*} newValue - New value.\r\n * @param {*} oldValue - Old value.\r\n */\r\n\r\n/**\r\n * @callback Wrapper\r\n * @param {Block} Block class to wrap.\r\n * @returns {Block} New Block class.\r\n */\r\n\r\nconst rootBlocks = Object.create(null);\r\nconst rootMixins = Object.create(null);\r\nconst isPrototypeOf = {}.isPrototypeOf;\r\nconst tagName = new RegExp(`^${ htmlAllowedTagSymbols }$`, 'i');\r\nconst attrName = new RegExp(`^${ htmlAllowedAttrSymbols }$`);\r\nconst expressionRegExp = /^\\{[\\s\\S]+\\}$/;\r\nconst { document } = global;\r\nconst svgNS = 'http://www.w3.org/2000/svg';\r\nlet onEvalError = (err) => {\r\n  console.error(`Eval error (evaluating \"${ err.expression }\" in context of block \"${ err.block.$$.name }\"):`, err);\r\n};\r\nlet evalMode;\r\nlet getting;\r\nlet changed;\r\n\r\n/**\r\n * @class Block\r\n * @public\r\n * @param {Object} opts - Element options.\r\n * @returns {Block} Instance of Block.\r\n * @description Class for dynamic templating.\r\n *\r\n * @example\r\n * import { D, Block, initApp, registerBlock } from 'dwayne';\r\n *\r\n * class App extends Block {\r\n *   static template = '<Hello text=\"{text}\"/>';\r\n *\r\n *   constructor(args, children) {\r\n *     super(args, children);\r\n *\r\n *     this.text = 'world (0)';\r\n *     this.times = 0;\r\n *\r\n *     this.setInterval();\r\n *   }\r\n *\r\n *   setInterval() {\r\n *     D(1000).interval(() => {\r\n *       this.text = `world (${ ++this.times })`;\r\n *     });\r\n *   }\r\n * }\r\n *\r\n * class Hello extends Block {\r\n *   static template = 'Hello, <d-text value=\"{args.text}\"/>!';\r\n * }\r\n *\r\n * Block.App = App;\r\n * Block.Hello = Hello;\r\n *\r\n * initApp();\r\n */\r\nclass Block {\r\n  static _blocks = Object.create(rootBlocks);\r\n  static _mixins = Object.create(rootMixins);\r\n\r\n  /**\r\n   * @member {Boolean} [Block.collapseWhiteSpace = true]\r\n   * @type {Boolean}\r\n   * @public\r\n   * @description If the whitespace between html elements and\r\n   * in the start and the end inside the tag should be omitted during parsing.\r\n   */\r\n  static collapseWhiteSpace = true;\r\n\r\n  static get onEvalError() {\r\n    return onEvalError;\r\n  }\r\n\r\n  static set onEvalError(listener) {\r\n    if (isFunction(listener)) {\r\n      onEvalError = listener;\r\n    } else {\r\n      onEvalError = null;\r\n    }\r\n  }\r\n\r\n  static getBlocks() {\r\n    return new Super({ ...this._blocks });\r\n  }\r\n\r\n  static getMixins() {\r\n    return new Super({ ...this._mixins });\r\n  }\r\n\r\n  /**\r\n   * @method Block.register\r\n   * @public\r\n   * @param {String} name - Block or mixin name.\r\n   * @param {Block|Mixin} Subclass - Subclass of Block or Mixin.\r\n   * @returns {void}\r\n   * @description Register block or mixin in the namespace of this.\r\n   */\r\n  static register(name, Subclass) {\r\n    const _this = new Super(this);\r\n\r\n    if (!_this.hasOwn('_blocks')) {\r\n      Subclass._blocks = Object.create(_this.proto().$._blocks);\r\n    }\r\n\r\n    if (!_this.hasOwn('_mixins')) {\r\n      Subclass._mixins = Object.create(_this.proto().$._mixins);\r\n    }\r\n\r\n    const {\r\n      _blocks,\r\n      _mixins\r\n    } = this;\r\n\r\n    if (!isInstanceOfBlock(Subclass) && !isInstanceOfMixin(Subclass)) {\r\n      console.warn(`The \"${ name }\" class does not extend Block or Mixin and will not be registered (Block.register)`);\r\n\r\n      return;\r\n    }\r\n\r\n    if (isInstanceOfBlock(Subclass)) {\r\n      if (rootBlocks[name]) {\r\n        console.warn(`The \"${ name }\" block is a built-in block so the block will not be registered (Block.register)`);\r\n\r\n        return;\r\n      }\r\n\r\n      if (!tagName.test(name)) {\r\n        console.warn(`Name \"${ name }\" is not allowed for blocks so the block will not be registered (Block.register)`);\r\n\r\n        return;\r\n      }\r\n\r\n      Subclass._html = deepCloneChildren(\r\n        markupToJSON(\r\n          `${ Subclass.template || '' }`,\r\n          Subclass.collapseWhiteSpace\r\n        )\r\n      );\r\n\r\n      _blocks[name] = Subclass;\r\n    } else {\r\n      if (rootMixins[name]) {\r\n        console.warn(`The \"${ name }\" mixin is a built-in mixin so the mixin will not be registered (Block.register)`);\r\n\r\n        return;\r\n      }\r\n\r\n      if (!attrName.test(name)) {\r\n        console.warn(`Name \"${ name }\" is not allowed for mixins so the mixin will not be registered (Block.register)`);\r\n\r\n        return;\r\n      }\r\n\r\n      Subclass._match = new RegExp(`^${ new Str(name).escapeRegExp().$ }(?:-([\\\\s\\\\S]+))?$`);\r\n\r\n      _mixins[name] = Subclass;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @member {String} Block.template\r\n   * @type {String}\r\n   * @public\r\n   * @description Block template.\r\n   */\r\n\r\n  /**\r\n   * @method Block.wrap\r\n   * @public\r\n   * @param {Wrapper} func - Function that returns wrapped block.\r\n   * @returns {Block} New block.\r\n   * @description Method for wrapping blocks into another blocks.\r\n   * It is considered best practice to just extends the old block with a new one.\r\n   *\r\n   * @example\r\n   * class MyBlock extends Block {\r\n   *   static template = '<div>123</div>';\r\n   * }\r\n   *\r\n   * MyBlock.wrap((Block) => {\r\n   *   return class extends Block {\r\n   *     static template = `<section class=\"wrapper\">${ Block.template }</section>`;\r\n   *\r\n   *     constructor() {\r\n   *       this.additionalVar = 'additional';\r\n   *     }\r\n   *   };\r\n   * });\r\n   */\r\n  static wrap(func) {\r\n    validate([func], ['function']);\r\n\r\n    return func(this);\r\n  }\r\n\r\n  constructor(opts) {\r\n    const {\r\n      name,\r\n      args: originalArgs,\r\n      children,\r\n      parent,\r\n      parentBlock,\r\n      parentScope\r\n    } = opts;\r\n    const watchersToRemove = new Arr([]);\r\n\r\n    Object.defineProperties(this, {\r\n      /**\r\n       * @member {Block} Block#$\r\n       * @type {Block}\r\n       * @public\r\n       * @description This.\r\n       */\r\n      $: {\r\n        value: this\r\n      },\r\n\r\n      /**\r\n       * @member {Object} Block#$$\r\n       * @type {Object}\r\n       * @protected\r\n       * @property {Object} args - Private args scope.\r\n       * @property {Arr} children - Child blocks.\r\n       * @property {Arr} mixins - Child mixins.\r\n       * @property {Object} elems - Elements connected to the block.\r\n       * @property {Elem} elems.parent - Parent element.\r\n       * @property {Elem} elems.start - Start comment block.\r\n       * @property {Elem} elems.end - End comment block.\r\n       * @property {Elem} elems.content - Content elements.\r\n       * @property {Function} evaluate - Evaluate function.\r\n       * @property {Object} global - Private global scope.\r\n       * @property {Object} locals - Private locals scope.\r\n       * @property {Arr} watchersToRemove - Watchers to remove before removing element.\r\n       */\r\n      $$: {\r\n        value: {\r\n          name,\r\n          parent: parentScope,\r\n          parentBlock,\r\n          ns: new Super(this).proto().$.constructor,\r\n          children: new Arr([]),\r\n          mixins: new Arr([]),\r\n          elems: {\r\n            start: doc.createComment(` ${ name }: start `),\r\n            end: doc.createComment(` ${ name }: end `),\r\n            content: new Elem(),\r\n            parent\r\n          },\r\n          watchersToRemove,\r\n          evaluate: (expression, onChange, instance, forDElements, forDItem, forDEach) => {\r\n            if (!expressionRegExp.test(expression)) {\r\n              return expression || true;\r\n            }\r\n\r\n            forDElements = !!forDElements;\r\n            forDItem = !!forDItem;\r\n            expression = expression.replace(/^\\{|\\}$/g, '');\r\n\r\n            const store = (name === '#d-item' && !forDItem) || forDEach\r\n              ? (forDEach || this).$$.scope\r\n              : this;\r\n\r\n            /* eslint no-new-func: 0 */\r\n            const { watchersToRemove } = instance ? instance.$$ : {};\r\n            const func = new Function(\r\n              '',\r\n              'with(document.DwayneStore){$$.expr=eval(\"$$.expr=\"+$$.expr);return $$.expr}'\r\n            );\r\n\r\n            return evaluate.call(this);\r\n\r\n            function evaluate() {\r\n              let result;\r\n\r\n              if (onChange) {\r\n                evalMode = true;\r\n                getting = new Arr([]);\r\n              }\r\n\r\n              store.$$.expr = expression;\r\n              document.DwayneStore = store;\r\n\r\n              try {\r\n                result = func();\r\n              } catch (err) {\r\n                if (onEvalError) {\r\n                  err.expression = expression;\r\n                  err.block = this;\r\n                  onEvalError(err);\r\n                }\r\n              }\r\n\r\n              if (onChange) {\r\n                const localWatchers = new Arr([]);\r\n\r\n                getting.forEach((watchers) => {\r\n                  const watcher = () => {\r\n                    const newResult = evaluate.call(this);\r\n\r\n                    if (newResult !== result) {\r\n                      onChange(newResult, result);\r\n                    }\r\n                  };\r\n                  const watcherBlock = {\r\n                    forDElements,\r\n                    watcher,\r\n                    watchers\r\n                  };\r\n\r\n                  watcher.onRemove = () => {\r\n                    localWatchers.forEach((watcherBlock) => {\r\n                      const {\r\n                        watcher,\r\n                        watchers\r\n                      } = watcherBlock;\r\n                      const index1 = watchersToRemove.indexOf(watcherBlock);\r\n                      const index2 = watchers.indexOf(watcher);\r\n\r\n                      if (index1 !== -1) {\r\n                        watchersToRemove.splice(index1, 1);\r\n                      }\r\n\r\n                      if (index2 !== -1) {\r\n                        watchers.splice(index2, 1);\r\n                      }\r\n                    });\r\n                  };\r\n\r\n                  localWatchers.push(watcherBlock);\r\n                  watchersToRemove.push(watcherBlock);\r\n                  watchers.push(watcher);\r\n                });\r\n\r\n                evalMode = false;\r\n                getting = new Arr([]);\r\n              }\r\n\r\n              store.$$.expr = null;\r\n              document.DwayneStore = null;\r\n\r\n              return result;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    const args = new Super(originalArgs).map((value, arg) => {\r\n      if (name === 'd-each' && (\r\n        arg === 'item'\r\n        || arg === 'index'\r\n        || arg === 'uid'\r\n      )) {\r\n        return value;\r\n      }\r\n\r\n      const forDElements = name === 'd-elements' && arg === 'value';\r\n\r\n      return parentScope.$$.evaluate(value, (value) => {\r\n        this.args[arg] = value;\r\n      }, this, forDElements, forDElements && parentBlock.$$.name === '#d-item');\r\n    }).$;\r\n\r\n    this.args = args;\r\n    this.children = children || new Arr([]);\r\n    this.global = Object.create(\r\n      parentScope\r\n        ? Object.create(parentScope.global)\r\n        : null\r\n    );\r\n\r\n    this.$$.elems.start.$[0].DwayneBlock = this;\r\n    this.$$.elems.end.$[0].DwayneBlock = this;\r\n\r\n    if (parentBlock) {\r\n      parentBlock.$$.children.push(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method Block#afterConstruct\r\n   * @public\r\n   * @description Is called after block construction (including all scopes)\r\n   * but before rendering the block and its children.\r\n   */\r\n  afterConstruct() {}\r\n\r\n  /**\r\n   * @method Block#afterRender\r\n   * @public\r\n   * @description Is called after block has been rendered.\r\n   */\r\n  afterRender() {}\r\n\r\n  /**\r\n   * @method Block#afterRender\r\n   * @public\r\n   * @description Is called before the block removal.\r\n   */\r\n  beforeRemove() {}\r\n\r\n  evaluateAndWatch(expression, callback) {\r\n    return this.$$.parent.$$.evaluate(expression, callback, this);\r\n  }\r\n\r\n  evaluateOnce(expression) {\r\n    return this.$$.parent.$$.evaluate(expression);\r\n  }\r\n\r\n  /**\r\n   * @method Block#remove\r\n   * @public\r\n   * @description Method fot forcing the block to be removed. Calls\r\n   * remove method for all of its child blocks and calls beforeRemove function.\r\n   */\r\n  remove(isParentSignal) {\r\n    const {\r\n      name,\r\n      parentBlock,\r\n      children,\r\n      mixins,\r\n      elems: {\r\n        start,\r\n        content,\r\n        end\r\n      },\r\n      watchersToRemove\r\n    } = this.$$;\r\n\r\n    removeWatchers(watchersToRemove);\r\n\r\n    children.forEach((child) => {\r\n      child.remove(true);\r\n    });\r\n\r\n    mixins.forEach((mixin) => {\r\n      mixin.remove(true);\r\n    });\r\n\r\n    try {\r\n      this.beforeRemove();\r\n    } catch (err) {\r\n      console.error(`Uncaught error in ${ name }#beforeRemove:`, err);\r\n    }\r\n\r\n    if (!isParentSignal && parentBlock) {\r\n      const index = parentBlock.$$.children.indexOf(this);\r\n\r\n      if (index !== -1) {\r\n        parentBlock.$$.children.splice(index, 1);\r\n      }\r\n    }\r\n\r\n    new Elem([\r\n      start,\r\n      content,\r\n      end\r\n    ]).remove();\r\n  }\r\n\r\n  /**\r\n   * @method Block#watch\r\n   * @public\r\n   * @param {...String} [args] - Vars to watch (args, global or local).\r\n   * @param {Watcher} watcher - Called when watched vars are changed.\r\n   * @description Method for watching for vars. If no vars passed in arguments\r\n   * all vars are to be watched. Otherwise specified vars will be watched.\r\n   * Watchers should not be put inside the constructor. It is considered best\r\n   * practice to do it inside the {@link Block#afterConstruct} method.\r\n   * Note that these expressions (vars, i.e. \"args.arg\") are not to be\r\n   * evaluated so you cannot put there things like \"a[b]\" or any js code,\r\n   * only expressions like \"a\", \"b\", \"args.a\", \"args.b\" and \"global.a\", \"global.b\".\r\n   *\r\n   * @example\r\n   * class MyBlock extends Block {\r\n   *   static template = '<div />';\r\n   *\r\n   *   afterConstruct() {\r\n   *     this.watch('a', () => {});\r\n   *     this.watch('args.a', 'global.r', () => {});\r\n   *     this.watch(() => {});\r\n   *   }\r\n   * }\r\n   */\r\n  watch() {\r\n    const watcher = arguments[arguments.length - 1];\r\n\r\n    if (!isFunction(watcher)) {\r\n      return;\r\n    }\r\n\r\n    if (arguments.length === 1) {\r\n      for (const global in this.$$.global) {\r\n        /* eslint guard-for-in: 0 */\r\n        this.$$.global[global].watchers.perm.push(watcher);\r\n      }\r\n\r\n      iterate(this.$$.args, ({ watchers }) => {\r\n        watchers.perm.push(watcher);\r\n      });\r\n\r\n      return iterate(this.$$.locals, ({ watchers }) => {\r\n        watchers.perm.push(watcher);\r\n      });\r\n    }\r\n\r\n    iterate(arguments, (variable) => {\r\n      if (variable === watcher) {\r\n        return;\r\n      }\r\n\r\n      variable = `${ variable }`;\r\n\r\n      if (/^args\\./.test(variable)) {\r\n        variable = variable.replace(/^args\\./, '');\r\n\r\n        if (!this.$$.args[variable]) {\r\n          return;\r\n        }\r\n\r\n        this.$$.args[variable].watchers.perm.push(watcher);\r\n\r\n        return;\r\n      }\r\n\r\n      if (/^global\\./.test(variable)) {\r\n        variable = variable.replace(/^global\\./, '');\r\n\r\n        if (!this.$$.global[variable]) {\r\n          return;\r\n        }\r\n\r\n        this.$$.global[variable].watchers.perm.push(watcher);\r\n\r\n        return;\r\n      }\r\n\r\n      if (!this.$$.locals[variable]) {\r\n        return;\r\n      }\r\n\r\n      this.$$.locals[variable].watchers.perm.push(watcher);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Block#watchArgs\r\n   * @public\r\n   * @param {...String} [args] - Args to watch.\r\n   * @param {Watcher} watcher - Called when watched args are changed.\r\n   * @description Method for watching for args. If no args passed in arguments\r\n   * all args are to be watched. Otherwise specified args will be watched.\r\n   * Watchers should not be put inside the constructor. It is considered best\r\n   * practice to do it inside the {@link Block#afterConstruct} method.\r\n   *\r\n   * @example\r\n   * class MyBlock extends Block {\r\n   *   static template = '<div />';\r\n   *\r\n   *   afterConstruct() {\r\n   *     this.watchArgs('a', () => {});\r\n   *     this.watchArgs('a', 'b', () => {});\r\n   *     this.watchArgs(() => {});\r\n   *   }\r\n   * }\r\n   */\r\n  watchArgs() {\r\n    const watcher = arguments[arguments.length - 1];\r\n\r\n    if (!isFunction(watcher)) {\r\n      return;\r\n    }\r\n\r\n    if (arguments.length === 1) {\r\n      return iterate(this.$$.args, ({ watchers }) => {\r\n        watchers.perm.push(watcher);\r\n      });\r\n    }\r\n\r\n    iterate(arguments, (arg) => {\r\n      if (arg === watcher) {\r\n        return;\r\n      }\r\n\r\n      if (!this.$$.args[arg]) {\r\n        return;\r\n      }\r\n\r\n      this.$$.args[arg].watchers.perm.push(watcher);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Block#watchGlobal\r\n   * @public\r\n   * @param {...String} [globals] - Globals to watch.\r\n   * @param {Watcher} watcher - Called when watched globals are changed.\r\n   * @description Method for watching for globals. If no globals passed in arguments\r\n   * all globals are to be watched. Otherwise specified globals will be watched.\r\n   * Watchers should not be put inside the constructor. It is considered best\r\n   * practice to do it inside the {@link Block#afterConstruct} method.\r\n   *\r\n   * @example\r\n   * class MyBlock extends Block {\r\n   *   static template = '<div />';\r\n   *\r\n   *   afterConstruct() {\r\n   *     this.watchGlobal('a', () => {});\r\n   *     this.watchGlobal('a', 'b', () => {});\r\n   *     this.watchGlobal(() => {});\r\n   *   }\r\n   * }\r\n   */\r\n  watchGlobals() {\r\n    const watcher = arguments[arguments.length - 1];\r\n\r\n    if (!isFunction(watcher)) {\r\n      return;\r\n    }\r\n\r\n    if (arguments.length === 1) {\r\n      for (const global in this.$$.global) {\r\n        /* eslint guard-for-in: 0 */\r\n        this.$$.global[global].watchers.perm.push(watcher);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    iterate(arguments, (global) => {\r\n      if (global === watcher) {\r\n        return;\r\n      }\r\n\r\n      if (!this.$$.global[global]) {\r\n        return;\r\n      }\r\n\r\n      this.$$.global[global].watchers.perm.push(watcher);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Block#watchLocals\r\n   * @public\r\n   * @param {...String} [locals] - Locals to watch.\r\n   * @param {Watcher} watcher - Called when watched locals are changed.\r\n   * @description Method for watching for locals. If no locals passed in arguments\r\n   * all locals are to be watched. Otherwise specified locals will be watched.\r\n   * Watchers should not be put inside the constructor. It is considered best\r\n   * practice to do it inside the {@link Block#afterConstruct} method.\r\n   *\r\n   * @example\r\n   * class MyBlock extends Block {\r\n   *   static template = '<div />';\r\n   *\r\n   *   afterConstruct() {\r\n   *     this.watchLocals('a', () => {});\r\n   *     this.watchLocals('a', 'b', () => {});\r\n   *     this.watchLocals(() => {});\r\n   *   }\r\n   * }\r\n   */\r\n  watchLocals() {\r\n    const watcher = arguments[arguments.length - 1];\r\n\r\n    if (!isFunction(watcher)) {\r\n      return;\r\n    }\r\n\r\n    if (arguments.length === 1) {\r\n      return iterate(this.$$.locals, ({ watchers }) => {\r\n        watchers.perm.push(watcher);\r\n      });\r\n    }\r\n\r\n    iterate(arguments, (local) => {\r\n      if (local === watcher) {\r\n        return;\r\n      }\r\n\r\n      if (!this.$$.locals[local]) {\r\n        return;\r\n      }\r\n\r\n      this.$$.locals[local].watchers.perm.push(watcher);\r\n    });\r\n  }\r\n}\r\n\r\nregisterBuiltIns(Blocks, rootBlocks, Block);\r\n\r\nconst blocks = Block._blocks;\r\n\r\nclass Mixin {\r\n  static evaluate = true;\r\n\r\n  constructor(opts) {\r\n    const {\r\n      name,\r\n      value,\r\n      elem,\r\n      match,\r\n      parentBlock,\r\n      parentScope\r\n    } = opts;\r\n\r\n    Object.defineProperties(this, {\r\n      $$: {\r\n        value: {\r\n          name,\r\n          _value: value,\r\n          parent: parentScope,\r\n          parentBlock,\r\n          watchersToRemove: new Arr([])\r\n        }\r\n      }\r\n    });\r\n\r\n    this.match = new Arr(match).slice(1).$;\r\n    this.block = parentScope;\r\n    this.elem = elem;\r\n    this.node = elem.$[0];\r\n\r\n    if (parentBlock) {\r\n      parentBlock.$$.mixins.push(this);\r\n    }\r\n  }\r\n\r\n  afterUpdate() {}\r\n\r\n  beforeRemove() {}\r\n\r\n  evaluateAndWatch(callback) {\r\n    const {\r\n      _value,\r\n      parent\r\n    } = this.$$;\r\n\r\n    return parent.$$.evaluate(_value, callback, this);\r\n  }\r\n\r\n  evaluateOnce() {\r\n    const {\r\n      _value,\r\n      parent\r\n    } = this.$$;\r\n\r\n    return parent.$$.evaluate(_value);\r\n  }\r\n\r\n  /**\r\n   * @method Mixin#remove\r\n   * @public\r\n   * @description Method fot forcing the mixin to be removed.\r\n   */\r\n  remove(isParentSignal) {\r\n    const {\r\n      name,\r\n      parentBlock,\r\n      watchersToRemove\r\n    } = this.$$;\r\n\r\n    removeWatchers(watchersToRemove);\r\n\r\n    try {\r\n      this.beforeRemove();\r\n    } catch (err) {\r\n      console.error(`Uncaught error in ${ name }#beforeRemove:`, err);\r\n    }\r\n\r\n    if (!isParentSignal && parentBlock) {\r\n      const index = parentBlock.$$.mixins.indexOf(this);\r\n\r\n      if (index !== -1) {\r\n        parentBlock.$$.mixins.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nregisterBuiltIns(Mixins, rootMixins, Mixin);\r\n\r\nconst mixins = Block._mixins;\r\n\r\nfunction initApp(block, node) {\r\n  if (!blocks[block]) {\r\n    throw new Error(`No \"${ block }\" block is registered! (initApp)`);\r\n  }\r\n\r\n  const start = doc.createComment(' d-root: start ');\r\n  const end = doc.createComment(' d-root: end ');\r\n  const parent = new Elem(node);\r\n\r\n  parent.html('');\r\n\r\n  new Elem([\r\n    start,\r\n    end\r\n  ]).into(parent);\r\n\r\n  createBlock({\r\n    node: {\r\n      name: block,\r\n      attrs: {},\r\n      children: new Arr([])\r\n    },\r\n    after: start,\r\n    parent\r\n  });\r\n}\r\n\r\nfunction registerBuiltIns(set, scope, proto) {\r\n  iterate(set, (register) => {\r\n    const {\r\n      name,\r\n      value\r\n    } = register(proto, createBlock);\r\n\r\n    if (proto === Block) {\r\n      value._html = deepCloneChildren(\r\n        markupToJSON(\r\n          `${ value.template || '' }`,\r\n          value.collapseWhiteSpace\r\n        )\r\n      );\r\n    } else {\r\n      value._match = new RegExp(`^${ new Str(name).escapeRegExp().$ }(?:-([\\\\s\\\\S]+))?$`);\r\n    }\r\n\r\n    scope[name] = value;\r\n  });\r\n}\r\n\r\nfunction createBlock({ node, after, parent, parentBlock, parentScope }) {\r\n  parentScope = (node && node.block) || parentScope;\r\n\r\n  const name = (node && node.name) || 'UnknownBlock';\r\n  const args = (node && node.attrs) || {};\r\n  const children = (node && node.children) || new Arr([]);\r\n  const elem = parent.prop('namespaceURI') === svgNS\r\n    ? doc.svg()\r\n    : new Elem(doc.template().$[0].content);\r\n  const localBlocks = parentScope ? parentScope.$$.ns._blocks : blocks;\r\n  const localMixins = parentScope ? parentScope.$$.ns._mixins : mixins;\r\n  let constructor = node && node.name && localBlocks[node.name];\r\n  let dBlockMatch;\r\n\r\n  if (!children.length && ((dBlockMatch = name.match(/^d-block-([\\s\\S]+)$/)) || name === 'd-block')) {\r\n    constructor = blocks['d-block'];\r\n    args.name = dBlockMatch ? dBlockMatch[1] : '{null}';\r\n  }\r\n\r\n  if (!constructor) {\r\n    const {\r\n      value,\r\n      children\r\n    } = node;\r\n\r\n    if (name === '#text' && expressionRegExp.test(value)) {\r\n      return createBlock({\r\n        node: {\r\n          name: 'd-text',\r\n          attrs: { value },\r\n          children: new Arr([]),\r\n          block: parentScope\r\n        },\r\n        after,\r\n        parent,\r\n        parentBlock,\r\n        parentScope\r\n      });\r\n    }\r\n\r\n    const element = elem.create(name);\r\n    const currentMixins = new Arr([]);\r\n\r\n    const attrs = new Super(args).object((object, value, attr) => {\r\n      let match;\r\n\r\n      for (const name in localMixins) {\r\n        const Mixin = localMixins[name];\r\n        const localMatch = attr.match(Mixin._match);\r\n\r\n        if (localMatch) {\r\n          match = {\r\n            match: localMatch,\r\n            Mixin,\r\n            name\r\n          };\r\n\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (match) {\r\n        currentMixins.push({\r\n          name: match.name,\r\n          Mixin: match.Mixin,\r\n          match: match.match,\r\n          value,\r\n          elem: element,\r\n          parentBlock,\r\n          parentScope\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      if (!value) {\r\n        object[attr] = '';\r\n\r\n        return;\r\n      }\r\n\r\n      object[attr] = parentScope.$$.evaluate(value, (value) => {\r\n        element.attr(attr, value);\r\n      }, parentBlock);\r\n    }).$;\r\n\r\n    if (!isNil(value)) {\r\n      element.text(value);\r\n    }\r\n\r\n    if (attrs) {\r\n      element.attr(attrs);\r\n    }\r\n\r\n    if (after.length) {\r\n      element.insertAfter(after);\r\n    } else {\r\n      element.into(parent);\r\n    }\r\n\r\n    after = new Elem();\r\n\r\n    if (children) {\r\n      transformDIfChildren(children).forEach((child) => {\r\n        const block = createBlock({\r\n          node: child,\r\n          after,\r\n          parent: element,\r\n          parentBlock,\r\n          parentScope\r\n        });\r\n\r\n        if (block instanceof Block) {\r\n          after = block.$$.elems.end;\r\n        } else {\r\n          after = block;\r\n        }\r\n      });\r\n    }\r\n\r\n    currentMixins.forEach((opts) => {\r\n      createMixin(opts);\r\n    });\r\n\r\n    return element;\r\n  }\r\n\r\n  const blockInstance = new constructor({\r\n    name,\r\n    args,\r\n    children,\r\n    parent,\r\n    parentBlock,\r\n    parentScope\r\n  });\r\n\r\n  Object.defineProperties(blockInstance, {\r\n    args: {\r\n      value: blockInstance.args\r\n    },\r\n    global: {\r\n      value: blockInstance.global\r\n    }\r\n  });\r\n\r\n  let html = name === 'd-elements'\r\n    ? new Arr(blockInstance.args.value || [])\r\n    : deepCloneChildren(constructor._html, blockInstance);\r\n\r\n  if (name === 'd-elements' && parentBlock.$$.name === '#d-item') {\r\n    html = deepCloneChildren(html, parentBlock);\r\n  }\r\n\r\n  const {\r\n    $$,\r\n    args: Args,\r\n    global,\r\n    ...locals\r\n  } = blockInstance;\r\n\r\n  delete locals.$;\r\n  delete locals.$$;\r\n\r\n  $$.args = constructPrivateScope(Args);\r\n  $$.locals = constructPrivateScope(locals);\r\n  $$.global = constructPrivateScope(global, 'global', parentScope);\r\n\r\n  if (name === '#d-item') {\r\n    const scopeValues = {\r\n      [node.itemName]: node.item,\r\n      [node.indexName]: node.index\r\n    };\r\n    let parent = blockInstance;\r\n    let scope = parentScope;\r\n    let DItemFound;\r\n\r\n    while (!DItemFound && (parent = parent.$$.parentBlock)) {\r\n      DItemFound = parent.$$.name === '#d-item';\r\n    }\r\n\r\n    if (DItemFound) {\r\n      scope = parent.$$.scope;\r\n    }\r\n\r\n    $$.ns = parentScope.$$.ns;\r\n    $$.privateScope = constructPrivateScope(scopeValues);\r\n    constructPublicScope($$.scope = Object.create(scope), scopeValues, $$.privateScope);\r\n  }\r\n\r\n  if (name === 'd-each') {\r\n    $$.scope = Object.create(parentScope);\r\n  }\r\n\r\n  constructPublicScope(Args, Args, $$.args);\r\n  constructPublicScope(global, global, $$.global);\r\n  constructPublicScope(blockInstance, locals, $$.locals);\r\n\r\n  try {\r\n    blockInstance.afterConstruct();\r\n  } catch (err) {\r\n    console.error(`Uncaught error in ${ name }#afterConstruct:`, err);\r\n  }\r\n\r\n  const elems = new Elem([\r\n    $$.elems.start,\r\n    $$.elems.end\r\n  ]);\r\n\r\n  if (after.length) {\r\n    elems.insertAfter(after);\r\n  } else {\r\n    elems.into(parent);\r\n  }\r\n\r\n  after = $$.elems.start;\r\n\r\n  transformDIfChildren(html).forEach((child) => {\r\n    const block = createBlock({\r\n      node: child,\r\n      after,\r\n      parent,\r\n      parentBlock: blockInstance,\r\n      parentScope\r\n    });\r\n\r\n    if (block instanceof Block) {\r\n      const { elems } = block.$$;\r\n\r\n      after = elems.end;\r\n\r\n      $$.elems.content.add(elems.start, elems.content, elems.end);\r\n    } else {\r\n      after = block;\r\n\r\n      $$.elems.content.add(block);\r\n    }\r\n  });\r\n\r\n  try {\r\n    blockInstance.afterRender();\r\n  } catch (err) {\r\n    console.error(`Uncaught error in ${ name }#afterRender:`, err);\r\n  }\r\n\r\n  return blockInstance;\r\n}\r\n\r\nfunction createMixin({ name, Mixin, value, match, elem, parentBlock, parentScope }) {\r\n  const mixin = new Mixin({\r\n    name,\r\n    value,\r\n    match,\r\n    elem,\r\n    parentBlock,\r\n    parentScope\r\n  });\r\n\r\n  if (Mixin.evaluate) {\r\n    const value = mixin.value = mixin.evaluateAndWatch((newValue, oldValue) => {\r\n      mixin.value = newValue;\r\n\r\n      try {\r\n        mixin.afterUpdate(newValue, oldValue);\r\n      } catch (err) {\r\n        console.error(`Uncaught error in ${ name }#afterUpdate:`, err);\r\n      }\r\n    });\r\n\r\n    mixin.afterUpdate(value);\r\n  }\r\n}\r\n\r\nfunction deepCloneChildren(children, block) {\r\n  return new Arr(children || []).map((child) => {\r\n    const {\r\n      name,\r\n      attrs,\r\n      value,\r\n      children\r\n    } = child;\r\n    const newChild = {\r\n      name,\r\n      value,\r\n      attrs: { ...attrs }\r\n    };\r\n\r\n    if (block) {\r\n      newChild.block = block;\r\n    }\r\n\r\n    if (children) {\r\n      newChild.children = deepCloneChildren(children, block);\r\n    }\r\n\r\n    return newChild;\r\n  });\r\n}\r\n\r\nfunction transformDIfChildren(children) {\r\n  return new Arr(children || [])\r\n    .concat({})\r\n    .object((object, child) => {\r\n      const { name } = child;\r\n      const {\r\n        html,\r\n        ifElse\r\n      } = object;\r\n\r\n      if (name !== 'd-else-if' && name !== 'd-else') {\r\n        if (ifElse) {\r\n          html.push({\r\n            name: 'd-if',\r\n            block: ifElse.$[0].block,\r\n            children: ifElse\r\n          });\r\n\r\n          object.ifElse = null;\r\n        }\r\n\r\n        if (name === 'd-if') {\r\n          object.ifElse = new Arr([child]);\r\n        } else if (!isUndefined(name)) {\r\n          html.push(child);\r\n        }\r\n      } else {\r\n        (ifElse || html).push(child);\r\n\r\n        if (name === 'd-else' && ifElse) {\r\n          html.push({\r\n            name: 'd-if',\r\n            block: ifElse.$[0].block,\r\n            children: ifElse\r\n          });\r\n\r\n          object.ifElse = null;\r\n        }\r\n      }\r\n    }, {\r\n      html: new Arr([]),\r\n      ifElse: null\r\n    }).$.html;\r\n}\r\n\r\nfunction isInstanceOfBlock(block) {\r\n  return isPrototypeOf.call(Block, block) && isPrototypeOf.call(Block.prototype, block.prototype);\r\n}\r\n\r\nfunction isInstanceOfMixin(mixin) {\r\n  return isPrototypeOf.call(Mixin, mixin) && isPrototypeOf.call(Mixin.prototype, mixin.prototype);\r\n}\r\n\r\nfunction removeWatchers(watchersToRemove) {\r\n  watchersToRemove.forEach(({ watcher, watchers }) => {\r\n    const index = watchers.indexOf(watcher);\r\n\r\n    if (index !== -1) {\r\n      watchers.splice(index, 1);\r\n    }\r\n  });\r\n}\r\n\r\nfunction constructPrivateScope(object, type, parentScope) {\r\n  let scope = {};\r\n\r\n  if (type === 'global') {\r\n    scope = Object.create(\r\n      parentScope\r\n        ? parentScope.$$.global\r\n        : null\r\n    );\r\n  }\r\n\r\n  return new Super(object).object((scope, value, key) => {\r\n    scope[key] = {\r\n      value,\r\n      watchers: {\r\n        temp: new Arr([]),\r\n        perm: new Arr([])\r\n      }\r\n    };\r\n  }, scope).$;\r\n}\r\n\r\nfunction constructPublicScope(scope, scopeValues, privateScope) {\r\n  new Super(scope).define(new Super(scopeValues).map((value, key) => {\r\n    const scope = privateScope[key];\r\n\r\n    return {\r\n      get() {\r\n        if (evalMode) {\r\n          if (getting.indexOf(scope.watchers.temp) === -1) {\r\n            getting.push(scope.watchers.temp);\r\n          }\r\n        }\r\n\r\n        return scope.value;\r\n      },\r\n      set(value) {\r\n        if (value === scope.value) {\r\n          return;\r\n        }\r\n\r\n        if (!changed) {\r\n          changed = [];\r\n        }\r\n\r\n        const oldTempWatchers = scope.watchers.temp.slice();\r\n        const oldValue = scope.value;\r\n\r\n        scope.watchers.temp = new Arr([]);\r\n        scope.value = value;\r\n\r\n        oldTempWatchers.forEach((watcher) => {\r\n          watcher.onRemove();\r\n          watcher();\r\n        });\r\n        changed.push({\r\n          scope,\r\n          oldValue,\r\n          value\r\n        });\r\n\r\n        setTimeout(() => {\r\n          if (!changed) {\r\n            return;\r\n          }\r\n\r\n          const was = new Arr([]);\r\n          const values = [];\r\n\r\n          for (let i = changed.length - 1; i >= 0; i--) {\r\n            const {\r\n              scope,\r\n              value,\r\n              oldValue\r\n            } = changed[i];\r\n\r\n            scope.watchers.perm.forEach((watcher) => {\r\n              const index = was.indexOf(watcher);\r\n\r\n              if (index === -1) {\r\n                was.push(watcher);\r\n                values.push({\r\n                  value,\r\n                  oldValue\r\n                });\r\n              } else {\r\n                values[index].oldValue = oldValue;\r\n              }\r\n            });\r\n\r\n            changed.splice(i, 1);\r\n          }\r\n\r\n          changed = null;\r\n\r\n          was.forEach((watcher, i) => {\r\n            const {\r\n              value,\r\n              oldValue\r\n            } = values[i];\r\n\r\n            watcher(value, oldValue);\r\n          });\r\n        }, 0);\r\n      }\r\n    };\r\n  }).$);\r\n}\r\n\r\nexport { Block, Mixin, initApp };\r\n","/**\r\n * @module constants/formats\r\n * @private\r\n * @description Exports different types of formatting for {@link Date#format}.\r\n */\r\n\r\nimport { Super } from '../Super';\r\nimport { Str } from '../Str';\r\n\r\nconst zero = new Str('0');\r\nconst daysOfTheWeekNames = [\r\n  'Sunday',\r\n  'Monday',\r\n  'Tuesday',\r\n  'Wednesday',\r\n  'Thursday',\r\n  'Friday',\r\n  'Saturday'\r\n];\r\nconst daysOfTheWeekAliases = new Super(daysOfTheWeekNames).map((value) => value.slice(0, 3)).$;\r\nconst monthsNames = [\r\n  'January',\r\n  'February',\r\n  'March',\r\n  'April',\r\n  'May',\r\n  'June',\r\n  'Jule',\r\n  'August',\r\n  'September',\r\n  'October',\r\n  'November',\r\n  'December'\r\n];\r\nconst monthsAliases = new Super(monthsNames).map((value) => value.slice(0, 3)).$;\r\n\r\n/**\r\n * @callback module:constants/formats~matchCallback\r\n * @param {Dat} date - D-wrap of a date to apply format to.\r\n * @param {String} string - Matched applied expression.\r\n */\r\n\r\n/**\r\n * @typedef {Object} module:constants/formats~formatExpr\r\n * @property {String} format - Matched format.\r\n * @property {module:constants/formats~matchCallback} match - Callback if there was a match.\r\n */\r\n\r\n/**\r\n * @type {module:constants/formats~formatExpr[]}\r\n * @description Array of different formats.\r\n */\r\nexport default [\r\n  {\r\n    format: 'ccc',\r\n    match: (date, utc) => round(date[utc]('c'), 3)\r\n  },\r\n  {\r\n    format: 'c',\r\n    match: (date, utc) => date[utc]('c')\r\n  },\r\n  {\r\n    format: 'ss',\r\n    match: (date, utc) => round(date[utc]('s'), 2)\r\n  },\r\n  {\r\n    format: 's',\r\n    match: (date, utc) => date[utc]('s')\r\n  },\r\n  {\r\n    format: 'mm',\r\n    match: (date, utc) => round(date[utc]('m'), 2)\r\n  },\r\n  {\r\n    format: 'm',\r\n    match: (date, utc) => date[utc]('m')\r\n  },\r\n  {\r\n    format: 'hh',\r\n    match: (date, utc) => round(date[utc]('h'), 2)\r\n  },\r\n  {\r\n    format: 'h',\r\n    match: (date, utc) => date[utc]('h')\r\n  },\r\n  {\r\n    format: 'dddd',\r\n    match: (date, utc) => daysOfTheWeekNames[date[utc]('dw')]\r\n  },\r\n  {\r\n    format: 'ddd',\r\n    match: (date, utc) => daysOfTheWeekAliases[date[utc]('dw')]\r\n  },\r\n  {\r\n    format: 'dd',\r\n    match: (date, utc) => round(date[utc]('d'), 2)\r\n  },\r\n  {\r\n    format: 'd',\r\n    match: (date, utc) => date[utc]('d')\r\n  },\r\n  {\r\n    format: 'MMMM',\r\n    match: (date, utc) => monthsNames[date[utc]('M') - 1]\r\n  },\r\n  {\r\n    format: 'MMM',\r\n    match: (date, utc) => monthsAliases[date[utc]('M') - 1]\r\n  },\r\n  {\r\n    format: 'MM',\r\n    match: (date, utc) => round(date[utc]('M'), 2)\r\n  },\r\n  {\r\n    format: 'M',\r\n    match: (date, utc) => date[utc]('M')\r\n  },\r\n  {\r\n    format: 'yyyy',\r\n    match: (date, utc) => round(date[utc]('y'), 4)\r\n  },\r\n  {\r\n    format: 'yy',\r\n    match: (date, utc) => String(date[utc]('y')).slice(-2)\r\n  },\r\n  {\r\n    format: 'y',\r\n    match: (date, utc) => date[utc]('y')\r\n  }\r\n];\r\n\r\n/**\r\n * @function round\r\n * @private\r\n * @param {Number} number - Number to round.\r\n * @param {Number} digits - Number of the digits of the output.\r\n * @returns {String} String with necessary additional starting zeroes.\r\n */\r\nfunction round(number, digits) {\r\n  const string = String(number);\r\n  let zeroes = digits - string.length;\r\n\r\n  zeroes = zeroes < 0 ? 0 : zeroes;\r\n\r\n  return zero.repeat(zeroes).$ + string;\r\n}\r\n","/**\r\n * @module Dat\r\n * @private\r\n * @mixin\r\n * @description Exports Dat class.\r\n */\r\n\r\nimport { Super } from './Super';\r\nimport { Num } from './Num';\r\nimport { Str } from './Str';\r\nimport { switcher } from './Switcher';\r\nimport { constructors } from './constants';\r\nimport formats from './constants/formats';\r\nimport { isDate, iterate, Symbol, defineProperties } from './helpers';\r\n\r\n/**\r\n * @typedef {*} DateLike\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {'c'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} AddPeriod\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {'c'|'s'|'m'|'h'|'d'|'dw'|'M'|'y'} GetPeriod\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {'c'|'s'|'m'|'h'|'d'|'M'|'y'} OfOnePeriod\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {'c'|'s'|'m'|'h'|'d'|'M'|'y'} SetPeriod\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {'ccc'|'c'|'ss'|'s'|'mm'|'m'|'hh'|'h'|'dddd'|'ddd'|'dd'|'d'|'MMMM'|'MMM'|'MM'|'M'|'yyyy'|'yy'|'y'} Format\r\n * @public\r\n */\r\n\r\nconst coeffs = {\r\n  c: 1,\r\n  s: 1000,\r\n  m: 60000,\r\n  h: 3600000,\r\n  d: 86400000,\r\n  w: 604800000,\r\n  M: 2592000000,\r\n  y: 31536000000\r\n};\r\n\r\nconst getSwitcher = switcher({\r\n  c: (date, utc) => date[`${ utc }Milliseconds`](),\r\n  s: (date, utc) => date[`${ utc }Seconds`](),\r\n  m: (date, utc) => date[`${ utc }Minutes`](),\r\n  h: (date, utc) => date[`${ utc }Hours`](),\r\n  d: (date, utc) => date[`${ utc }Date`](),\r\n  dw: (date, utc) => date[`${ utc }Day`](),\r\n  M: (date, utc) => date[`${ utc }Month`]() + 1,\r\n  y: (date, utc) => date[`${ utc }FullYear`]()\r\n}, 'equals', NaN);\r\nconst setSwitcher = switcher({\r\n  c: (date, value, utc) => date[`${ utc }Milliseconds`](value),\r\n  s: (date, value, utc) => date[`${ utc }Seconds`](value),\r\n  m: (date, value, utc) => date[`${ utc }Minutes`](value),\r\n  h: (date, value, utc) => date[`${ utc }Hours`](value),\r\n  d: (date, value, utc) => date[`${ utc }Date`](value),\r\n  M: (date, value, utc) => date[`${ utc }Month`](value - 1),\r\n  y: (date, value, utc) => date[`${ utc }FullYear`](value)\r\n});\r\n\r\n/**\r\n * @class Dat\r\n * @extends Super\r\n * @public\r\n * @param {Date} [date = new Date()] - A date to wrap.\r\n * @returns {Dat} Instance of Dat.\r\n * @description Wrap of a date.\r\n *\r\n * @example\r\n * const date = new Dat(new Date());\r\n */\r\nclass Dat extends Super {\r\n  constructor(date = new Date()) {\r\n    super(date);\r\n\r\n    /**\r\n     * @member Dat#$\r\n     * @type {Date}\r\n     * @public\r\n     * @description Original date.\r\n     */\r\n  }\r\n\r\n  /**\r\n   * @method Dat#add\r\n   * @public\r\n   * @param {AddPeriod|Object.<AddPeriod, Number>} what - What to add.\r\n   * @param {Number} [number] - Number of what to add if the first argument is a period string.\r\n   * @returns {Dat} Returns this.\r\n   * @description Method for adding amounts of time to the date. Returns new instance of Dat.\r\n   *\r\n   * @example\r\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).add('c', 2).toISOString();         // '2000-01-01T00:00:00.001Z'\r\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).add({ c: 2, d: 5 }).toISOString(); // '2000-01-06T00:00:00.001Z'\r\n   */\r\n  add(what, number) {\r\n    if (arguments.length >= 2) {\r\n      what = { [what]: number };\r\n    }\r\n\r\n    return this.time(this.time() + new Super(what).sum((value, what) => coeffs[what] * value));\r\n  }\r\n\r\n  /**\r\n   * @method Dat#expires\r\n   * @public\r\n   * @param {*} [value = this] - Value to resolve after the date expires.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @description Method for defining when the date expires.\r\n   *\r\n   * @example\r\n   * new Dat().add('c', 500).expires('Expired').then((value) => {\r\n   *   // After 500 milliseconds\r\n   *   console.log(value); // 'Expired'\r\n   * });\r\n   */\r\n  expires(value) {\r\n    if (!arguments.length) {\r\n      value = this;\r\n    }\r\n\r\n    return new Num(this.$ - now()).timeout(value);\r\n  }\r\n\r\n  /**\r\n   * @method Dat#format\r\n   * @public\r\n   * @param {String} string - Template for the output.\r\n   * @param {String} [prefix = ''] - If needed [all special strings]{@link Format}\r\n   * are treated as they should be prefix with prefix.\r\n   * @returns {String} Formatted string.\r\n   * @description Method for creating formatted output based on a string.\r\n   *\r\n   * @example\r\n   * new Dat('1999-12-31T23:59:59.999Z').format('Seconds: $ss, milliseconds: $ccc.', '$');\r\n   * // 'Seconds: 59, milliseconds: 999.'\r\n   */\r\n  format(string, prefix = '') {\r\n    string = new Str(new Super(string).$);\r\n    prefix = String(new Super(prefix).$);\r\n\r\n    iterate(formats, (format) => {\r\n      string = string.replaceString(prefix + format.format, format.match(this, 'get'));\r\n    });\r\n\r\n    return string.$;\r\n  }\r\n\r\n  /**\r\n   * @method Dat#formatUTC\r\n   * @public\r\n   * @param {String} string - See {@link Dat#format}.\r\n   * @param {String} [prefix = ''] - See {@link Dat#format}.\r\n   * @returns {String} Formatted string.\r\n   * @description UTC version of {@link Dat#format}.\r\n   *\r\n   * @example\r\n   * new Dat('1999-07-07T03:09:09.099Z').formatUTC(\r\n   *   `\r\n   *     Milliseconds: $ccc|$c.\r\n   *     Seconds:      $ss|$s.\r\n   *     Minutes:      $mm|$m.\r\n   *     Hours:        $hh|$h.\r\n   *     Day:          $dddd|$ddd|$dd|$d.\r\n   *     Month:        $MMMM|$MMM|$MM|$M.\r\n   *     Year:         $yyyy|$yy|$y.\r\n   *   `,\r\n   *   '$'\r\n   * );\r\n   * // Milliseconds: 099|99.\r\n   * // Seconds:      09|9.\r\n   * // Minutes:      09|9.\r\n   * // Hours:        03|3.\r\n   * // Day:          Friday|Fri|07|7.\r\n   * // Month:        July|Jul|07|7.\r\n   * // Year:         1999|99|1999.\r\n   */\r\n  formatUTC(string, prefix = '') {\r\n    string = new Str(new Super(string).$);\r\n    prefix = String(new Super(prefix).$);\r\n\r\n    iterate(formats, (format) => {\r\n      string = string.replaceString(prefix + format.format, format.match(this, 'getUTC'));\r\n    });\r\n\r\n    return string.$;\r\n  }\r\n\r\n  /**\r\n   * @method Dat#get\r\n   * @public\r\n   * @param {GetPeriod} what - What to get.\r\n   * @returns {Number} Number of what to get.\r\n   * @description Method for getting values such as seconds or minutes.\r\n   *\r\n   * @example\r\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).get('s'); // 59\r\n   */\r\n  get(what) {\r\n    return getSwitcher(what, [this.$, 'get']);\r\n  }\r\n\r\n  /**\r\n   * @method Dat#getUTC\r\n   * @public\r\n   * @param {GetPeriod} what - See {@link Dat#get}.\r\n   * @returns {Number} Number of what to get.\r\n   * @description UTC version of {@link Dat#get}.\r\n   *\r\n   * @example\r\n   * const date = new Dat(new Date('1999-12-31T23:59:59.999Z'));\r\n   *\r\n   * date.getUTC('c');  // 999\r\n   * date.getUTC('s');  // 59\r\n   * date.getUTC('m');  // 59\r\n   * date.getUTC('h');  // 23\r\n   * date.getUTC('d');  // 31\r\n   * date.getUTC('dw'); // 5\r\n   * date.getUTC('M');  // 12\r\n   * date.getUTC('y');  // 1999\r\n   */\r\n  getUTC(what) {\r\n    return getSwitcher(what, [this.$, 'getUTC']);\r\n  }\r\n\r\n  /**\r\n   * @method Dat#isAfter\r\n   * @public\r\n   * @param {DateLike} date - Date to be compared to this date.\r\n   * @returns {Boolean} If this date is after the argument one.\r\n   * @description Finds out if this date is after the argument one.\r\n   *\r\n   * @example\r\n   * new Dat(new Date(333)).isAfter(new Date(334)); // false\r\n   * new Dat(new Date(333)).isAfter(new Date(332)); // true\r\n   */\r\n  isAfter(date) {\r\n    date = new Date(new Super(date).$);\r\n\r\n    return date.getTime() < this.$.getTime();\r\n  }\r\n\r\n  /**\r\n   * @method Dat#isBefore\r\n   * @public\r\n   * @param {DateLike} date - Date to be compared to this date.\r\n   * @returns {Boolean} If this date is before the argument one.\r\n   * @description Finds out if this date is before the argument one.\r\n   *\r\n   * @example\r\n   * new Dat(new Date(333)).isBefore(new Date(334)); // true\r\n   * new Dat(new Date(333)).isBefore(new Date(332)); // false\r\n   */\r\n  isBefore(date) {\r\n    date = new Date(new Super(date).$);\r\n\r\n    return date.getTime() > this.$.getTime();\r\n  }\r\n\r\n  /**\r\n   * @method Dat#isBetween\r\n   * @public\r\n   * @param {DateLike} date1 - Start of the range.\r\n   * @param {DateLike} date2 - End of the range.\r\n   * @returns {Boolean} If this date is after date1 and before date2.\r\n   * @description Finds out if this date is after date1 and before date2.\r\n   *\r\n   * @example\r\n   * new Dat(new Date(333)).isBetween(new Date(332), new Date(334)); // true\r\n   * new Dat(new Date(333)).isBetween(new Date(334), new Date(332)); // false\r\n   */\r\n  isBetween(date1, date2) {\r\n    const time = this.$.getTime();\r\n\r\n    date1 = new Date(new Super(date1).$);\r\n    date2 = new Date(new Super(date2).$);\r\n\r\n    return time > date1.getTime() && time < date2.getTime();\r\n  }\r\n\r\n  /**\r\n   * @method Dat#isInvalid\r\n   * @public\r\n   * @returns {Boolean} If the date is invalid.\r\n   * @description Returns if the date is invalid.\r\n   *\r\n   * @example\r\n   * new Dat(new Date('a')).isInvalid(); // true\r\n   * new Dat(new Date(1)).isInvalid();   // false\r\n   */\r\n  isInvalid() {\r\n    return this.$.toString() === 'Invalid Date';\r\n  }\r\n\r\n  /**\r\n   * @method Dat#isPassed\r\n   * @public\r\n   * @returns {Boolean} If the date is passed.\r\n   * @description Returns if the date is passed.\r\n   *\r\n   * @example\r\n   * new Dat(new Date(1)).isPassed(); // true\r\n   */\r\n  isPassed() {\r\n    return this.isBefore(now());\r\n  }\r\n\r\n  /**\r\n   * @method Dat#ofOne\r\n   * @public\r\n   * @param {OfOnePeriod} what - Period to check.\r\n   * @param {DateLike} date - Date to check.\r\n   * @returns {Boolean} If two dates are of one second, minute or something else.\r\n   * @description Returns if two dates are of one second, minute or something else.\r\n   *\r\n   * @example\r\n   * new Dat(new Date('1999-12-31T23:59:59.000Z')).ofOne('s', new Date(1999-12-31T23:59:59.333Z')); // true\r\n   * new Dat(new Date('1999-12-31T23:59:59.000Z')).ofOne('s', new Date(1999-12-31T23:59:58.999Z')); // false\r\n   */\r\n  ofOne(what, date) {\r\n    if (!(what in coeffs) || what === 'w') {\r\n      return false;\r\n    }\r\n\r\n    date = new Dat(new Date(date));\r\n\r\n    let started;\r\n\r\n    return iterate(coeffs, (coeff, w) => {\r\n      if (w === what) {\r\n        started = true;\r\n      }\r\n\r\n      if (!started || w === 'w') {\r\n        return;\r\n      }\r\n\r\n      if (started && this.get(w) !== date.get(w)) {\r\n        return false;\r\n      }\r\n    }) !== false;\r\n  }\r\n\r\n  /**\r\n   * @method Dat#set\r\n   * @public\r\n   * @param {SetPeriod|Object.<SetPeriod, Number>} what - What to add.\r\n   * @param {Number} [number] - Number of what to set if the first argument is a period string.\r\n   * @returns {Dat} Returns this.\r\n   * @description Method for setting values such as seconds or minutes.\r\n   *\r\n   * @example\r\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).set('s', 58).get('s');           // 58\r\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).set({ c: 998, s: 58 }).get('c'); // 998\r\n   */\r\n  set(what, number) {\r\n    const date = this.$;\r\n\r\n    if (arguments.length >= 2) {\r\n      what = { [what]: number };\r\n    }\r\n\r\n    what = new Super(what).$;\r\n\r\n    iterate(what, (value, what) => {\r\n      setSwitcher(what, [date, value, 'set']);\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Dat#setUTC\r\n   * @public\r\n   * @param {SetPeriod|Object.<SetPeriod, Number>} what - See {@link Dat#set}.\r\n   * @param {Number} [number] - See {@link Dat#set}.\r\n   * @returns {Dat} Returns this.\r\n   * @description UTC version of {@link Dat#set}.\r\n   *\r\n   * @example\r\n   * const date = new Dat(new Date('1999-12-31T23:59:59.999Z'));\r\n   *\r\n   * date.setUTC('ccc', 998).getUTC('ccc'); // 998\r\n   * date.setUTC({\r\n   *   s: 58,\r\n   *   m: 58,\r\n   *   h: 22\r\n   * });\r\n   *\r\n   * date.getUTC('s'); // 58\r\n   * date.getUTC('m'); // 58\r\n   * date.getUTC('h'); // 23\r\n   */\r\n  setUTC(what, number) {\r\n    const date = this.$;\r\n\r\n    if (arguments.length >= 2) {\r\n      what = { [what]: number };\r\n    }\r\n\r\n    what = new Super(what).$;\r\n\r\n    iterate(what, (value, what) => {\r\n      setSwitcher(what, [date, value, 'setUTC']);\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Dat#setUTC\r\n   * @public\r\n   * @param {Number} [time] - Time to set.\r\n   * @returns {Dat|Number} - If the time argument is present this is returned otherwise the time is returned.\r\n   * @description Synonym for both\r\n   * [Date#getTime]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime} and\r\n   * [Date#setTime]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime}.\r\n   */\r\n  time(time) {\r\n    const date = this.$;\r\n\r\n    if (arguments.length) {\r\n      date.setTime(time);\r\n    }\r\n\r\n    return date.getTime();\r\n  }\r\n\r\n  toISOString() {\r\n    return this.$.toISOString();\r\n  }\r\n\r\n  toLocaleString() {\r\n    return this.$.toLocaleString();\r\n  }\r\n\r\n  toString() {\r\n    return this.$.toString();\r\n  }\r\n\r\n  valueOf() {\r\n    return this.$.valueOf();\r\n  }\r\n}\r\ndefineProperties(Dat.prototype, {\r\n  [Symbol.toStringTag]: 'Dat'\r\n});\r\n\r\nconstructors[1].push({\r\n  check: isDate,\r\n  cls: Dat\r\n});\r\n\r\n/**\r\n * @function now\r\n * @public\r\n * @returns {Number} Number of milliseconds.\r\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/now\r\n * @description Synonym for\r\n * [Date.now]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/now}.\r\n */\r\nfunction now() {\r\n  return Date.now();\r\n}\r\n\r\n/**\r\n * @function date\r\n * @public\r\n * @param {DateLike} [date = new Date()] - Date-like value that is passed to the Date constructor.\r\n * @returns {Dat} New instance of Dat.\r\n * @description Synonym for new Dat(new Date(date));\r\n */\r\nfunction date(date) {\r\n  if (!arguments.length) {\r\n    return new Dat(new Date(now()));\r\n  }\r\n\r\n  date = new Super(date).$;\r\n\r\n  return new Dat(new Date(date));\r\n}\r\n\r\nexport { Dat, now, date };\r\n","/**\r\n * @module helpers/constructURL\r\n * @private\r\n * @description Exports constructURL method.\r\n */\r\n\r\nimport { Arr } from '../Arr';\r\nimport { Str } from '../Str';\r\nimport { switcher } from '../Switcher';\r\nimport { isArray, isObject, isPlainObject } from './checkTypes';\r\nimport { iterate } from './iterate';\r\n\r\n/**\r\n * @type {RegExp}\r\n * @description Absolute URL pattern.\r\n */\r\nconst absoluteURLRegexp = /^(([a-z][a-z\\d+\\-.]*:)?\\/\\/|data:[a-z]+\\/[a-z]+;base64,)/i;\r\nconst querySwitcher = switcher('call', () => new Arr([]))\r\n  .case(isArray, (prefix, query) => {\r\n    let queryParams = new Arr([]);\r\n\r\n    iterate(query, (value) => {\r\n      if (isPlainObject(value) || isArray(value)) {\r\n        queryParams = queryParams.concat(querySwitcher(value, [`${ prefix }[]`]));\r\n\r\n        return;\r\n      }\r\n\r\n      queryParams.push({\r\n        param: `${ prefix }[]`,\r\n        value\r\n      });\r\n    });\r\n\r\n    return queryParams.$;\r\n  })\r\n  .case(isPlainObject, (prefix, query) => {\r\n    let queryParams = new Arr([]);\r\n\r\n    iterate(query, (value, param) => {\r\n      if (isPlainObject(value) || isArray(value)) {\r\n        queryParams = queryParams.concat(querySwitcher(value, [prefix ? `${ prefix }[${ param }]` : param]));\r\n\r\n        return;\r\n      }\r\n\r\n      queryParams.push({\r\n        param: prefix ? `${ prefix }[${ param }]` : param,\r\n        value: isObject(value) ? JSON.stringify(value) : String(value)\r\n      });\r\n    });\r\n\r\n    return queryParams.$;\r\n  });\r\n\r\n/**\r\n * @function constructURL\r\n * @param {String} baseURL - BaseURL of the output URL.\r\n * @param {String} url - Main part of the output URL.\r\n * @param {Object} params - Params to replace in the url expressions like \":param\".\r\n * @param {Object} query - Object with query params.\r\n * @param {Object} [hash = ''] - URL hash.\r\n * @param {Object} [encodeOptions = {}] - If you need to encode something.\r\n * @param {Object} [encodeOptions.params = true] - If you need to encode params.\r\n * @param {Object} [encodeOptions.query = true] - If you need to encode query params.\r\n * @returns {String} Constructed URL.\r\n * @description Function for constructing URL from the base URL, URL, params and query params.\r\n */\r\nexport default (baseURL, url, params, query, hash = '', encodeOptions = {}) => {\r\n  const {\r\n    params: encodeParams = true,\r\n    query: encodeQuery = true\r\n  } = encodeOptions;\r\n  let URL = isAbsolute(url)\r\n    ? url\r\n    : `${ String(baseURL).replace(/\\/+$/, '') }/${ String(url).replace(/^\\/+/, '') }`;\r\n\r\n  iterate(params, (value, param) => {\r\n    URL = new Str(URL).replaceString(`:${ param }`, encode(value, encodeParams)).$;\r\n  });\r\n\r\n  const queryParams = querySwitcher(query, ['']);\r\n\r\n  if (queryParams.length) {\r\n    URL += (URL.indexOf('?') === -1 ? '?' : '&') + queryParams\r\n      .map(({ param, value }) => `${ encode(param, encodeQuery) }=${ encode(value, encodeQuery) }`)\r\n      .join('&');\r\n  }\r\n\r\n  return `${ URL }${ hash ? `#${ hash }` : '' }`;\r\n};\r\n\r\n/**\r\n * @function isAbsolute\r\n * @param {String} url - URL to check if it is absolute or not.\r\n * @returns {Boolean} If the argument URL is absolute or not.\r\n */\r\nfunction isAbsolute(url) {\r\n  return absoluteURLRegexp.test(url);\r\n}\r\n\r\n/**\r\n * @function encode\r\n * @param {String} string - String to encode using encodeURIComponent.\r\n * @param {Boolean} isEncoded - If the string should be encoded.\r\n * @returns {String} Encoded string.\r\n */\r\nfunction encode(string, isEncoded) {\r\n  return isEncoded ? encodeURIComponent(string) : string;\r\n}\r\n","/**\r\n * @module Fetch\r\n * @private\r\n * @mixin\r\n * @description Exports Fetch class.\r\n */\r\n\r\nimport { Promise } from './Promise';\r\nimport { Super } from './Super';\r\nimport { Arr } from './Arr';\r\nimport { Str } from './Str';\r\nimport {\r\n  isArray, isFunction, isString,\r\n  assign, Symbol, validate, iterate, defineProperties\r\n} from './helpers';\r\nimport constructURL from './helpers/constructURL';\r\nimport parseHeaders from './helpers/parseHeaders';\r\nimport transformData from './helpers/transformData';\r\n\r\n/**\r\n * @typedef {'get'|'post'|'delete'|'head'|'put'|'patch'} FetchMethod\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {Object} FetchConfig\r\n * @public\r\n * @property {Array.<AfterMiddleware|FetchErrorAfterMiddleware>} [after]\r\n * @property {Object} [auth]\r\n * @property {String} [auth.username]\r\n * @property {String} [auth.password]\r\n * @property {String} [baseURL]\r\n * @property {Array.<BeforeMiddleware|FetchErrorBeforeMiddleware>} [before]\r\n * @property {*} [data]\r\n * @property {Object.<String, String[]>} [headers]\r\n * @property {FetchMethod} [method]\r\n * @property {Object} [params]\r\n * @property {Object} [query]\r\n * @property {String} [responseType]\r\n * @property {Number} [timeout]\r\n * @property {String} [url]\r\n * @property {Boolean} [withCredentials]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FetchResponse\r\n * @public\r\n * @property {FetchConfig} config\r\n * @property {*} data\r\n * @property {Object.<String, String>} headers\r\n * @property {Number} status\r\n * @property {String} statusText\r\n * @property {XMLHttpRequest} xhr\r\n */\r\n\r\n/**\r\n * @callback FetchAfterMiddleware\r\n * @public\r\n * @param {FetchResponse} config - Fetch response.\r\n */\r\n\r\n/**\r\n * @callback FetchErrorAfterMiddleware\r\n * @public\r\n * @param {Error|*} err - Thrown error.\r\n * @param {FetchResponse} config - Fetch response.\r\n */\r\n\r\n/**\r\n * @callback FetchBeforeMiddleware\r\n * @public\r\n * @param {FetchConfig} config - Fetch config.\r\n */\r\n\r\n/**\r\n * @callback FetchErrorBeforeMiddleware\r\n * @public\r\n * @param {Error|*} err - Thrown error.\r\n * @param {FetchConfig} config - Fetch config.\r\n */\r\n\r\n/**\r\n * @callback FetchConfigFunction\r\n * @public\r\n * @param {FetchConfig} config\r\n */\r\n\r\nconst defaults = {\r\n  after: [],\r\n  auth: {\r\n    username: '',\r\n    password: ''\r\n  },\r\n  baseURL: global.location.origin,\r\n  before: [],\r\n  data: null,\r\n  headers: {},\r\n  method: 'get',\r\n  params: {},\r\n  query: {},\r\n  responseType: '',\r\n  timeout: 0,\r\n  url: '',\r\n  withCredentials: false\r\n};\r\nconst uploadMethods = new Arr(['post', 'put']);\r\n\r\n/**\r\n * @class Fetch\r\n * @extends Function\r\n * @public\r\n * @param {FetchConfig} [config = {}] - A number to wrap.\r\n * @returns {Fetch} Instance of Fetch.\r\n * An instance of Fetch is a function that simply calls #request with the same arguments.\r\n * @description Class for fetching data.\r\n *\r\n * @example\r\n * const fetch = new Fetch();\r\n *\r\n * fetch('/data').then((res) => {\r\n *   console.log(res);\r\n * });\r\n */\r\nclass Fetch extends Function {\r\n  constructor(config = {}) {\r\n    super();\r\n\r\n    function fetch() {\r\n      return fetch.request.apply(fetch, arguments);\r\n    }\r\n\r\n    const conf = new Super({}).deepAssign(defaults, config).$;\r\n\r\n    if (conf.before.indexOf(fetchBeforeMiddleware) === -1) {\r\n      conf.before.push(fetchBeforeMiddleware);\r\n    }\r\n\r\n    /**\r\n     * @member {FetchConfig} Fetch#$$\r\n     * @type {FetchConfig}\r\n     * @public\r\n     * @description Fetch config.\r\n     */\r\n    Object.defineProperty(fetch, '$$', { value: conf });\r\n    Object.setPrototypeOf(fetch, Fetch.prototype);\r\n\r\n    return fetch;\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#after\r\n   * @public\r\n   * @param {FetchAfterMiddleware|FetchErrorAfterMiddleware} middleware - Middleware to add.\r\n   * @param {Boolean|*} [afterAll = true] - Boolean parameter where to put the middleware.\r\n   * Truthy parameter stands for \"to the end\" and falsey for \"to the beginning\".\r\n   * @returns {Fetch} Returns this.\r\n   * @description Middleware that is called after the request.\r\n   * If the middleware has 2 or less arguments it's treated as success middleware otherwise as an error one.\r\n   * If the middleware returns a promise it becomes a part of the middleware chain.\r\n   *\r\n   * @example\r\n   * const fetch = new Fetch()\r\n   *   .after((err, res) => {\r\n   *     console.log(err);\r\n   *\r\n   *     throw err;\r\n   *   })\r\n   *   .after((res) => {\r\n   *     res.json = D(res.data).parseJSON():\r\n   *   });\r\n   */\r\n  after(middleware, afterAll = true) {\r\n    validate([middleware], ['function'], 'Fetch#after');\r\n\r\n    const { after } = this.$$;\r\n\r\n    if (afterAll) {\r\n      after.push(middleware);\r\n    } else {\r\n      after.unshift(middleware);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#before\r\n   * @public\r\n   * @param {FetchBeforeMiddleware|FetchErrorBeforeMiddleware} middleware - Middleware to add.\r\n   * @param {Boolean|*} [beforeAll = true] - Boolean parameter where to put the middleware.\r\n   * Truthy parameter stands for \"to the beginning\" and falsey for \"to the end\".\r\n   * @returns {Fetch} Returns this.\r\n   * @description Middleware that is called before the request.\r\n   * If the middleware has 2 or less arguments it's treated as success middleware otherwise as an error one.\r\n   * If the middleware returns a promise it becomes a part of the middleware chain.\r\n   *\r\n   * @example\r\n   * const fetch = new Fetch()\r\n   *   .before((err, req) => {\r\n   *     console.log(err);\r\n   *\r\n   *     throw err;\r\n   *   })\r\n   *   .before((req) => {\r\n   *     if (req.url === '/veryLongRequest') {\r\n   *       req.timeout = 30000;\r\n   *     }\r\n   *   });\r\n   */\r\n  before(middleware, beforeAll = true) {\r\n    validate([middleware], ['function'], 'Fetch#before');\r\n\r\n    const { before } = this.$$;\r\n\r\n    if (beforeAll) {\r\n      before.unshift(middleware);\r\n    } else {\r\n      before.push(middleware);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#config\r\n   * @public\r\n   * @param {String|FetchConfig|FetchConfigFunction} [property] - If it's a function\r\n   * it's called with the fetch config argument, if it's a string the value argument\r\n   * is used for assigning this property to the fetch config\r\n   * otherwise it's assigned to the fetch config.\r\n   * @param {*} [value] - See the property argument.\r\n   * @returns {Fetch|FetchConfig} If the argument is present this is returned otherwise the fetch config is returned.\r\n   * @description Method for getting and setting config.\r\n   *\r\n   * @example\r\n   * const fetch = new Fetch();\r\n   *\r\n   * fetch.config({ baseURL: 5000 });\r\n   * fetch.config().timeout; // 5000\r\n   *\r\n   * fetch.config((config) => {\r\n   *   config.baseURL += '/api';\r\n   * });\r\n   */\r\n  config(property, value) {\r\n    const conf = this.$$;\r\n\r\n    if (!arguments.length) {\r\n      return conf;\r\n    }\r\n\r\n    if (isFunction(property)) {\r\n      property(conf);\r\n    } else {\r\n      if (arguments.length >= 2) {\r\n        property = { [property]: value };\r\n      }\r\n\r\n      new Super(conf).deepAssign(property);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#delete\r\n   * @public\r\n   * @param {String} [url] - See {@link Fetch#request}.\r\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\r\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\r\n   * @description Shorthand for #request for delete requests.\r\n   *\r\n   * @example\r\n   * new Fetch().delete('/data').then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  delete(url, config = {}) {\r\n    if (!isString(url)) {\r\n      config = url;\r\n      url = undefined;\r\n    }\r\n\r\n    return this.request(url, assign({ method: 'delete' }, config));\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#get\r\n   * @public\r\n   * @param {String} [url] - See {@link Fetch#request}.\r\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\r\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\r\n   * @description Shorthand for #request for get requests.\r\n   *\r\n   * @example\r\n   * new Fetch().get('/data').then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  get(url, config = {}) {\r\n    if (!isString(url)) {\r\n      config = url;\r\n      url = undefined;\r\n    }\r\n\r\n    return this.request(url, assign({ method: 'get' }, config));\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#head\r\n   * @public\r\n   * @param {String} [url] - See {@link Fetch#request}.\r\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\r\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\r\n   * @description Shorthand for #request for head requests.\r\n   *\r\n   * @example\r\n   * new Fetch().head('/data').then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  head(url, config = {}) {\r\n    if (!isString(url)) {\r\n      config = url;\r\n      url = undefined;\r\n    }\r\n\r\n    return this.request(url, assign({ method: 'head' }, config));\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#headers\r\n   * @public\r\n   * @param {String|Object.<String, String|String[]>} header - A header string or an object of the following format:\r\n   * { [header]: [value1, value2, ...] }.\r\n   * @param {String|String[]} [value] - Header value. If the first argument is a string\r\n   * this has to be a header value or an array of header values.\r\n   * @returns {Fetch} Returns this.\r\n   * @description Method for setting request headers.\r\n   *\r\n   * @example\r\n   * const fetch = new Fetch()\r\n   *   .headers('Header1', 'Value')\r\n   *   .headers('Header2', ['Value1', 'Value2'])\r\n   *   .headers({\r\n   *     Header3: ['Value1', 'Value2']\r\n   *   });\r\n   */\r\n  headers(header, value) {\r\n    const { headers } = this.$$;\r\n\r\n    if (arguments.length >= 2) {\r\n      header = { [header]: value };\r\n    }\r\n\r\n    iterate(header, (value, header) => {\r\n      const array = headers[header] || [];\r\n      const toPush = isArray(value) ? value : [value];\r\n\r\n      (headers[header] = array).push.apply(array, toPush);\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#instance\r\n   * @public\r\n   * @param {FetchConfig} [config] - New config if needed.\r\n   * @returns {Fetch} New instance of Fetch.\r\n   * @description Method for creating new fetch instances based on already existent.\r\n   *\r\n   * @example\r\n   * const mainFetch = new Fetch({\r\n   *   baseURL: '//other.domain.com/api',\r\n   *   withCredentials: true\r\n   * });\r\n   *\r\n   * const longFetch = mainFetch.instance({\r\n   *   timeout: 10000\r\n   * });\r\n   */\r\n  instance(config = {}) {\r\n    const dataConfig = new Super(config).hasOwn('data')\r\n      ? { data: config.data }\r\n      : {};\r\n\r\n    delete config.data;\r\n\r\n    const conf = new Super({})\r\n      .deepAssign(this.$$, config)\r\n      .assign(dataConfig)\r\n      .$;\r\n\r\n    return new Fetch(conf);\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#patch\r\n   * @public\r\n   * @param {String} [url] - See {@link Fetch#request}.\r\n   * @param {*} [data] - Additional parameter for uploading data.\r\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\r\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\r\n   * @description Shorthand for #request for head requests.\r\n   *\r\n   * @example\r\n   * new Fetch().patch('/data', { user: 'John' }).then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  patch(url, data = {}, config = {}) {\r\n    if (arguments.length && !isString(url)) {\r\n      config = data;\r\n      data = url;\r\n      url = undefined;\r\n    }\r\n\r\n    return this.request(url, assign({ method: 'patch', data }, config));\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#post\r\n   * @public\r\n   * @param {String} [url] - See {@link Fetch#request}.\r\n   * @param {*} [data] - Additional parameter for uploading data.\r\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\r\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\r\n   * @description Shorthand for #request for head requests.\r\n   *\r\n   * @example\r\n   * new Fetch().post('/data', { user: 'John' }).then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  post(url, data = {}, config = {}) {\r\n    if (arguments.length && !isString(url)) {\r\n      config = data;\r\n      data = url;\r\n      url = undefined;\r\n    }\r\n\r\n    return this.request(url, assign({ method: 'post', data }, config));\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#put\r\n   * @public\r\n   * @param {String} [url] - See {@link Fetch#request}.\r\n   * @param {*} [data] - Additional parameter for uploading data.\r\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\r\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\r\n   * @description Shorthand for #request for head requests.\r\n   *\r\n   * @example\r\n   * new Fetch().put('/data', { user: 'John' }).then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  put(url, data = {}, config = {}) {\r\n    if (arguments.length && !isString(url)) {\r\n      config = data;\r\n      data = url;\r\n      url = undefined;\r\n    }\r\n\r\n    return this.request(url, assign({ method: 'put', data }, config));\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#request\r\n   * @public\r\n   * @param {String} [url] - URL for the request.\r\n   * @param {FetchConfig} [config] - Additional config for this particular request.\r\n   * @returns {Promise.<FetchResponse, Error>} Promise that is resolved with the request response.\r\n   * @description Main function for making requests. All request methods call this method\r\n   * including the fetch instance itself.\r\n   *\r\n   * @example\r\n   * const fetch = new Fetch();\r\n   *\r\n   * fetch.request('/data', { timeout: 1000 }).then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   *\r\n   * fetch.request({ timeout: 1000 }).then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   *\r\n   * fetch.request().then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  request(url, config = {}) {\r\n    if (arguments.length === 1 && !isString(url)) {\r\n      config = url;\r\n    }\r\n\r\n    const dataConfig = new Super(config).hasOwn('data')\r\n      ? { data: config.data }\r\n      : {};\r\n    const urlConfig = isString(url)\r\n      ? { url }\r\n      : {};\r\n\r\n    delete config.data;\r\n\r\n    const conf = new Super(this.$$)\r\n      .deepClone()\r\n      .deepAssign(urlConfig, config)\r\n      .assign(dataConfig)\r\n      .$;\r\n\r\n    let xhr;\r\n    let promise = Promise.resolve();\r\n\r\n    iterate(conf.before, (middleware) => {\r\n      promise = promise.then(() => {\r\n        if (middleware.length >= 2) {\r\n          return Promise.resolve();\r\n        }\r\n\r\n        return new Promise((resolve) => {\r\n          resolve(middleware(conf));\r\n        });\r\n      }, (err) => {\r\n        if (middleware.length < 2) {\r\n          return Promise.reject(err);\r\n        }\r\n\r\n        return new Promise((resolve) => {\r\n          resolve(middleware(err, conf));\r\n        });\r\n      });\r\n    });\r\n\r\n    promise = promise.then(() => new Promise((resolve, reject) => {\r\n      const {\r\n        after,\r\n        auth: {\r\n          username,\r\n          password\r\n        },\r\n        data,\r\n        headers,\r\n        method,\r\n        onprogress,\r\n        responseType,\r\n        timeout,\r\n        url,\r\n        withCredentials\r\n      } = conf;\r\n\r\n      xhr = new XMLHttpRequest();\r\n\r\n      xhr.open(method, url, true, username, password);\r\n\r\n      iterate(headers, (value, header) => {\r\n        xhr.setRequestHeader(header, value);\r\n      });\r\n\r\n      if (onprogress) {\r\n        if (uploadMethods.indexOfStrict(method) === -1) {\r\n          xhr.onprogress = onprogress;\r\n        } else {\r\n          xhr.upload.onprogress = onprogress;\r\n        }\r\n      }\r\n\r\n      xhr.onabort = () => {\r\n        const error = new Error('Request was aborted');\r\n\r\n        error.type = 'ABORT_ERROR';\r\n\r\n        reject(error);\r\n\r\n        xhr = null;\r\n      };\r\n\r\n      xhr.onerror = () => {\r\n        const error = new Error('Network error');\r\n\r\n        error.type = 'NETWORK_ERROR';\r\n\r\n        reject(error);\r\n\r\n        xhr = null;\r\n      };\r\n\r\n      xhr.ontimeout = () => {\r\n        const error = new Error('Request time exceeded');\r\n\r\n        error.type = 'TIMEOUT_ERROR';\r\n\r\n        reject(error);\r\n\r\n        xhr = null;\r\n      };\r\n\r\n      xhr.onreadystatechange = () => {\r\n        if (!xhr || !xhr.status || xhr.readyState !== 4) {\r\n          return;\r\n        }\r\n\r\n        const response = {\r\n          config: conf,\r\n          data: !responseType || responseType === 'text' ? xhr.responseText : xhr.response,\r\n          headers: parseHeaders(xhr.getAllResponseHeaders()),\r\n          status: xhr.status === 1223 ? 204 : xhr.status,\r\n          statusText: xhr.status === 1223 ? 'No Content' : xhr.statusText,\r\n          xhr\r\n        };\r\n\r\n        let promise = Promise.resolve();\r\n\r\n        iterate(after, (middleware) => {\r\n          promise = promise.then(() => {\r\n            if (middleware.length >= 2) {\r\n              return Promise.resolve();\r\n            }\r\n\r\n            return new Promise((resolve) => {\r\n              resolve(middleware(response));\r\n            });\r\n          }, (err) => {\r\n            if (middleware.length < 2) {\r\n              return Promise.reject(err);\r\n            }\r\n\r\n            return new Promise((resolve) => {\r\n              resolve(middleware(err, response));\r\n            });\r\n          });\r\n        });\r\n\r\n        resolve(promise\r\n          .then(() => response)\r\n          .catch((err) => {\r\n            try {\r\n              err.response = response;\r\n            } catch (e) {\r\n              throw err;\r\n            }\r\n\r\n            throw err;\r\n          })\r\n        );\r\n      };\r\n\r\n      xhr.responseType = responseType;\r\n      xhr.timeout = Number(timeout) || 0;\r\n      xhr.withCredentials = !!withCredentials;\r\n\r\n      xhr.send(data);\r\n    }));\r\n\r\n    promise.abort = function abort() {\r\n      if (xhr) {\r\n        xhr.abort();\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\n    return promise;\r\n  }\r\n}\r\n\r\ndefineProperties(Fetch.prototype, {\r\n  [Symbol.toStringTag]: 'Fetch'\r\n});\r\n\r\n/**\r\n * @function fetchBeforeMiddleware\r\n * @private\r\n * @param {FetchConfig} config\r\n * @description Built-in before middleware for url, data, method, headers construction.\r\n */\r\nfunction fetchBeforeMiddleware(config) {\r\n  const {\r\n    baseURL,\r\n    data,\r\n    headers,\r\n    method,\r\n    params,\r\n    query,\r\n    url\r\n  } = config;\r\n  const METHOD = method.toUpperCase();\r\n\r\n  config.method = METHOD;\r\n  config.url = constructURL(baseURL, url, params, query);\r\n  config.data = transformData(data, METHOD, headers);\r\n  config.headers = new Super(headers).object((headers, values, header) => {\r\n    header = new Str(header)\r\n      .toCapitalCase()\r\n      .replace(/\\s+/g, '-')\r\n      .$;\r\n\r\n    headers[header] = values.join(', ');\r\n  }).$;\r\n}\r\n\r\n/**\r\n * @const {Fetch} fetch\r\n * @type {Fetch}\r\n * @public\r\n * @description Empty instance of Fetch.\r\n */\r\nconst fetch = new Fetch();\r\n\r\nexport { Fetch, fetch };\r\n","/**\n * @module Router\n * @private\n * @mixin\n * @description Exports Router.\n */\n\nimport { Arr } from './Arr';\nimport { Elem, win } from './Elem';\nimport { self } from './Func';\nimport { Str } from './Str';\nimport { Super } from './Super';\nimport { switcher } from './Switcher';\nimport { assign, isNil, isRegExp, isString } from './helpers';\nimport constructURL from './helpers/constructURL';\nimport resolveURL from './helpers/resolveURL';\n\nconst Routes = new Arr([]);\nconst currentRoutes = new Arr([]);\nconst subscribers = new Super({});\nconst {\n  history,\n  location,\n  location: {\n    origin,\n    href\n  }\n} = global;\nlet initialized;\nlet pushed;\nlet wasRoot;\nlet wasDefault;\nlet rootRoute;\nlet redirectRoute;\nlet RedirectRoute;\nlet defaultRoute;\nlet DefaultRoute;\nlet currentRoute;\nlet currentRouteParams;\n\nconst pathSwitcher = switcher('call', () => {\n  throw new Error('State path must be a string, a regular expression or undefined! (at registerState)');\n})\n  .case(isRegExp, (path) => ({\n    path: path.source.replace(/\\\\\\//g, '/'),\n    url: path,\n    params: {}\n  }))\n  .case(isNil, () => ({\n    path: '/',\n    url: '/',\n    params: {}\n  }))\n  .case(isString, (path) => {\n    if (path.indexOf('/')) {\n      throw new Error('If route path is a string it must start with \"/\"! (at registerState)');\n    }\n\n    const index = path.indexOf('?');\n    const params = new Super({});\n    let newURL = '';\n    const newPath = new Str(path)\n      .slice(0, index === -1 ? path.length : index)\n      .replace(/^\\/|\\/$/g)\n      .split(/\\//)\n      .map((part, i, array) => {\n        if (!part && array.length > 1) {\n          throw new Error('If route path is a string it must not contain \"//\" or end with \"/\"! (at makeRoute)');\n        }\n\n        const index = part.indexOf(':');\n\n        if (index > 0) {\n          throw new Error('If route path is a string resource part must be either a string or an URL parameter! (at makeRoute)');\n        }\n\n        if (index === -1) {\n          return {\n            url: part,\n            value: part\n          };\n        }\n\n        const {\n          name,\n          regexp = /[^/]*/\n        } = resolveParameter(\n          part.slice(1),\n          'URL parameter must not be an empty string or contain characters besides \"a-zA-Z_$\"! (at makeRoute)',\n          'URL parameter regexp validator must be within parentheses (e.g. :userId(\\\\d+) and not contain ones)! (at makeRoute)'\n        );\n\n        params.$[name] = params.count;\n\n        return {\n          type: 'param',\n          url: `:${ name }`,\n          value: regexp\n        };\n      })\n      .word(({ type, url, value }) => {\n        let newPath;\n\n        if (type === 'param') {\n          newPath = `(${ value.source.replace(/\\\\\\//g, '/') })`;\n        } else {\n          newPath = new Str(value).escapeRegExp().$;\n        }\n\n        newURL += `/${ url }`;\n\n        return `/${ newPath }`;\n      });\n\n    return {\n      path: newPath,\n      url: newURL,\n      params: params.$\n    };\n  });\n\nclass Route {\n  constructor(options) {\n    options = options || {};\n\n    const {\n      name,\n      path = '/',\n      abstract = false,\n      parent,\n      decodeQuery = true,\n      encodeQuery = true,\n      decodeParams = true,\n      encodeParams = true\n    } = options || {};\n    const {\n      url: relativeURL,\n      path: relativePath,\n      params\n    } = pathSwitcher(path);\n    const query = {};\n\n    new Super(this).assign({\n      name,\n      parentName: parent,\n      abstract: !!abstract,\n      children: new Arr([]),\n      decodeParams: !!decodeParams,\n      decodeQuery: !!decodeQuery,\n      encodeParams: !!encodeParams,\n      encodeQuery: !!encodeQuery,\n      params,\n      query,\n      relativePath,\n      relativeURL\n    });\n\n    const index = isString(path) ? path.indexOf('?') : -1;\n\n    if (index !== -1) {\n      new Str(path)\n        .replace(/&$/)\n        .slice(index + 1)\n        .split('&')\n        .forEach((param) => {\n          const {\n            name,\n            regexp = /[\\s\\S]*/\n          } = resolveParameter(\n            param,\n            'Query parameter must not be an empty string or contain characters besides \"a-zA-Z_$\"! (at makeRoute)',\n            'Query parameter regexp validator must be within parentheses (e.g. :userId(\\\\d+)) and not contain them! (at makeRoute)'\n          );\n\n          query[name] = new RegExp(`^${ regexp.source.replace(/\\\\\\//g, '/') }$`);\n        });\n    }\n\n    if (name === defaultRoute && (\n        new Super(params).count\n        || new Super(query).count\n      )) {\n      throw new Error('Default route must not have URL or query params! (at makeRoute)');\n    }\n  }\n}\n\nconst baseRoute = new Route();\n\nfunction initRouter() {\n  if (initialized) {\n    return;\n  }\n\n  initialized = true;\n  RedirectRoute = (Routes.find(({ name }) => name === redirectRoute) || {}).value;\n  DefaultRoute = (Routes.find(({ name }) => name === defaultRoute) || {}).value;\n\n  if (redirectRoute && !RedirectRoute) {\n    throw new Error(`There is no specified fallback route (\"${ redirectRoute }\")! (at initRouter)`);\n  }\n\n  Routes\n    .forEach((route) => {\n      const {\n        parentName,\n        name\n      } = route;\n      const ParentName = parentName || rootRoute;\n      const { value: parent } = Routes.find(({ name }) => name === ParentName) || {};\n\n      if (!parent) {\n        throw new Error(`No such parent route (\"${ ParentName }\") found for the route (\"${ name }\")! (at initRouter)`);\n      }\n\n      if (!parent.abstract && name !== rootRoute) {\n        throw new Error(`Parent route must be abstract (for \"${ name }\")! (at initRouter)`);\n      }\n\n      if (name !== rootRoute) {\n        route.parentName = ParentName;\n      }\n\n      route.parent = name === rootRoute\n        ? baseRoute\n        : parent;\n    })\n    .forEach((route) => {\n      const {\n        name,\n        parent: {\n          params: parentParams,\n          query: parentQuery,\n          path\n        },\n        params,\n        query,\n        relativeURL,\n        relativePath\n      } = route;\n      let proto = route;\n      let count = 0;\n      let newPath = relativePath;\n      let newURL = '';\n\n      if (isRegExp(path)) {\n        throw new Error('URL regexp route cannot be extended! (at initRouter)');\n      }\n\n      while (proto = proto.parent) {\n        count += new Super(proto.params).count;\n        newPath = proto.relativePath + newPath;\n        newURL = proto.relativeURL + newURL;\n\n        proto.children.push(route);\n      }\n\n      newPath = new RegExp(`^${ newPath.replace(/\\/+/g, '/').replace(/\\/$/, '') || '/' }$`);\n      newURL = isRegExp(relativeURL)\n        ? newPath\n        : (newURL + relativeURL).replace(/\\/+/g, '/').replace(/\\/$/, '') || '/';\n\n      new Super(query).proto(parentQuery);\n      new Super(params)\n        .proto(parentParams)\n        .forEach((value, key, params) => {\n          params[key] += count;\n        });\n\n      if (name === defaultRoute && (\n          new Super(params).count\n          || new Super(query).count\n        )) {\n        throw new Error('Default route must not have URL or query params! (at initRouter)');\n      }\n\n      route.url = newURL;\n      route.validatePath = newPath;\n    });\n\n  changeRoute();\n\n  win.on({\n    popstate() {\n      if (location.href !== href) {\n        pushed = true;\n      }\n\n      if (pushed) {\n        changeRoute();\n      }\n    },\n    click(e) {\n      const closestLink = new Elem(e.target).closest('a');\n\n      if (closestLink.length && closestLink.attr('target') !== '_blank') {\n        const push = !closestLink.hasAttr('replace');\n\n        e.preventDefault();\n\n        forward(closestLink.attr('href') || '', push);\n      }\n    }\n  });\n}\n\nfunction makeRoute(options) {\n  return (Block) => {\n    options = assign({}, options, Block.routerOptions);\n\n    const {\n      name,\n      path,\n      abstract,\n      root,\n      fallbackTo,\n      default: isDefault\n    } = options || {};\n\n    if (initialized) {\n      console.warn('Router was already initialized (at makeRoute)');\n\n      return self;\n    }\n\n    if (wasRoot && root) {\n      throw new Error(`There can't be two root routes (\"${ rootRoute }\" and \"${ name }\")! (at makeRoute)`);\n    }\n\n    if (wasDefault && isDefault) {\n      throw new Error(`There can't be two default routes (\"${ defaultRoute }\" and \"${ name }\")! (at makeRoute)`);\n    }\n\n    if (!name) {\n      throw new Error('State must have a non-empty string \"name\" property! (at makeRoute)');\n    }\n\n    if (Routes.some(({ name: Name }) => Name === name)) {\n      throw new Error('State must have unique \"name\" property! (at makeRoute)');\n    }\n\n    if (root) {\n      wasRoot = true;\n      rootRoute = name;\n      options.parent = null;\n\n      if (fallbackTo) {\n        redirectRoute = fallbackTo;\n      }\n    }\n\n    if (isDefault) {\n      wasDefault = true;\n      defaultRoute = name;\n\n      if (abstract) {\n        throw new Error('Default route can\\'t be abstract! (at makeRoute)');\n      }\n\n      if (isRegExp(path)) {\n        throw new Error('Default route can\\'t have a regexp path! (at makeRoute)');\n      }\n    }\n\n    const route = new Route(options);\n\n    Routes.push(route);\n\n    let unsubscribe;\n    let routeLoaded;\n\n    return class extends Block {\n      /* eslint prefer-template: 0 */\n      static template = '<div'\n        + ` class=\"dwayne-route route-${ name }\"`\n        + ' d-class=\"{{ \\'active-route\\': __isCurrentRoute__ }}\"'\n        + ' d-show=\"{__isCurrentRoute__}\"'\n        + '>'\n        + Block.template\n        + '</div>';\n\n      constructor(opts) {\n        super(opts);\n\n        if (root) {\n          initRouter();\n\n          const router = {\n            buildURL(name, options = {}) {\n              const { value: route } = Routes.find(({ name: n }) => n === name) || {};\n\n              if (!route) {\n                throw new Error(`There are no routes with name \"${ name }\"! (at router.buildURL)`);\n              }\n\n              const {\n                url,\n                encodeParams,\n                encodeQuery\n              } = route;\n\n              if (isRegExp(url)) {\n                throw new Error('URL can be built only from the string URLs! (at router.buildURL)');\n              }\n\n              const {\n                params = {},\n                query = {},\n                hash = ''\n              } = options;\n\n              return constructURL(origin, url, params, query, hash, {\n                params: encodeParams,\n                query: encodeQuery\n              });\n            },\n            go(name, options) {\n              forward(router.buildURL(name, options), true);\n            },\n            goToURL(url) {\n              forward(url, true);\n            },\n            pushURL(url) {\n              changeHistory(url, true);\n            },\n            redirect(name, options) {\n              forward(router.buildURL(name, options));\n            },\n            redirectToURL(url) {\n              forward(url);\n            },\n            replaceURL(url) {\n              changeHistory(url);\n            }\n          };\n\n          this.global.router = router;\n        }\n\n        this.__routerInstance__ = route;\n        this.__isCurrentRoute__ = (\n          route === currentRoute\n          || route.children.indexOf(currentRoute) !== -1\n        );\n        this.args.route = currentRouteParams;\n\n        routeLoaded = false;\n        unsubscribe = subscribe(name, () => {\n          const isCurrentRoute = (\n            route === currentRoute\n            || route.children.indexOf(currentRoute) !== -1\n          );\n\n          if (isCurrentRoute) {\n            callBeforeLoad(this);\n          } else {\n            callBeforeLeave(this);\n          }\n\n          if (route === currentRoute) {\n            this.args.route = currentRouteParams;\n          }\n\n          this.__isCurrentRoute__ = isCurrentRoute;\n        });\n\n        if (this.__isCurrentRoute__) {\n          callBeforeLoad(this);\n        }\n      }\n\n      beforeRemove() {\n        unsubscribe();\n        unsubscribe = null;\n        callBeforeLeave(this);\n        super.beforeRemove();\n      }\n    };\n\n    function callBeforeLoad(route) {\n      if (routeLoaded) {\n        return;\n      }\n\n      const block = {\n        $$: {\n          children: new Arr([route])\n        }\n      };\n\n      block.$$.children.forEach(function beforeLoad(block) {\n        const route = block.__routerInstance__;\n\n        if (route) {\n          const index = currentRoutes.indexOf(block);\n          const isCurrentRoute = (\n            route === currentRoute\n            || route.children.indexOf(currentRoute) !== -1\n          );\n\n          if (index !== -1 || !isCurrentRoute) {\n            return;\n          }\n\n          currentRoutes.push(block);\n        }\n\n        const {\n          name,\n          children,\n          mixins\n        } = block.$$;\n\n        if (children) {\n          children.forEach(beforeLoad);\n        }\n\n        if (mixins) {\n          mixins.forEach(beforeLoad);\n        }\n\n        if (block.beforeLoadRoute) {\n          try {\n            block.beforeLoadRoute();\n          } catch (err) {\n            console.error(`Uncaught error in ${ name }#beforeLeave:`, err);\n          }\n        }\n      });\n\n      routeLoaded = true;\n    }\n\n    function callBeforeLeave(route) {\n      if (!routeLoaded) {\n        return;\n      }\n\n      const block = {\n        $$: {\n          children: new Arr([route])\n        }\n      };\n\n      block.$$.children.forEach(function beforeLeave(block) {\n        const route = block.__routerInstance__;\n\n        if (route) {\n          const index = currentRoutes.indexOf(block);\n          const isCurrentRoute = (\n            route === currentRoute\n            || route.children.indexOf(currentRoute) !== -1\n          );\n\n          if (index === -1 || isCurrentRoute) {\n            return;\n          }\n\n          currentRoutes.splice(index, 1);\n        }\n\n        const {\n          name,\n          children,\n          mixins\n        } = block.$$;\n\n        if (children) {\n          children.forEach(beforeLeave);\n        }\n\n        if (mixins) {\n          mixins.forEach(beforeLeave);\n        }\n\n        if (block.beforeLeaveRoute) {\n          try {\n            block.beforeLeaveRoute();\n          } catch (err) {\n            console.error(`Uncaught error in ${ name }#beforeLeave:`, err);\n          }\n        }\n      });\n\n      routeLoaded = false;\n    }\n  };\n}\n\nfunction subscribe(name, callback) {\n  subscribers.$[name] = callback;\n\n  return () => {\n    subscribers.delete(name);\n  };\n}\n\nfunction forward(url, push) {\n  changeHistory(url, push);\n  changeRoute();\n}\n\nfunction changeRoute() {\n  const route = findRouteByURL();\n\n  if (route) {\n    ({\n      route: currentRoute,\n      ...currentRouteParams\n    } = route);\n    assign(currentRouteParams, {\n      name: currentRoute.name,\n      host: location.host,\n      hostname: location.hostname,\n      href: location.href,\n      origin: location.origin,\n      pathname: location.pathname,\n      port: location.port,\n      protocol: location.protocol,\n      search: location.search\n    });\n  } else {\n    if (redirectRoute) {\n      const {\n        url,\n        encodeParams,\n        encodeQuery\n      } = RedirectRoute;\n\n      return forward(constructURL(origin, url, {}, {}, '', {\n        params: encodeParams,\n        query: encodeQuery\n      }));\n    }\n\n    currentRoute = null;\n    currentRouteParams = null;\n  }\n\n  subscribers.forEach((callback) => callback());\n}\n\nfunction findRouteByURL() {\n  const pathname = location.pathname || '/';\n  const search = location.search || '';\n  let urlParams;\n\n  Routes.some((route) => {\n    if (route.abstract) {\n      return;\n    }\n\n    const {\n      url: routeURL,\n      validatePath,\n      params,\n      query: requiredQuery,\n      decodeParams,\n      decodeQuery\n    } = route;\n    const resolved = resolveURL(decodeQuery);\n    const query = new Super(resolved.query);\n    const eventualParams = {};\n    const match = (\n      (pathname.replace(/\\/$/, '') || '/') +\n      (isRegExp(routeURL) ? search : '')\n    ).match(validatePath);\n\n    if (!match) {\n      return;\n    }\n\n    /* eslint guard-for-in: 0 */\n    for (const param in requiredQuery) {\n      if (!query.hasOwn(param) || !requiredQuery[param].test(query.$[param])) {\n        return;\n      }\n    }\n\n    match.shift();\n\n    for (const param in params) {\n      eventualParams[param] = decode(match[params[param]], decodeParams);\n    }\n\n    urlParams = {\n      route,\n      params: eventualParams,\n      query: query.$,\n      hash: resolved.hash\n    };\n\n    return true;\n  });\n\n  if (urlParams) {\n    return urlParams;\n  }\n\n  if (!defaultRoute) {\n    return;\n  }\n\n  return {\n    route: DefaultRoute,\n    params: {},\n    ...resolveURL(DefaultRoute.decodeQuery)\n  };\n}\n\nfunction decode(string, decodeParams) {\n  return decodeParams\n    ? decodeURIComponent(string)\n    : string;\n}\n\nfunction changeHistory(url, push) {\n  try {\n    history[push ? 'pushState' : 'replaceState'](null, null, url);\n    pushed = true;\n  } catch (err) {\n    location.href = url;\n  }\n}\n\nfunction resolveParameter(param, nameErrorName, valueErrorName) {\n  const nameMatch = param.match(/^[a-z_$]+/i);\n\n  if (!nameMatch) {\n    throw new Error(nameErrorName);\n  }\n\n  const name = nameMatch[0];\n  const value = param.slice(name.length);\n  let regexp;\n\n  if (value && (value.indexOf('(') || value.indexOf(')') !== value.length - 1)) {\n    throw new Error(valueErrorName);\n  }\n\n  if (value) {\n    regexp = new RegExp(value.slice(1, -1));\n  }\n\n  return {\n    name,\n    regexp\n  };\n}\n\nexport { makeRoute };\n","/* eslint no-nested-ternary: 0 */\r\n/* eslint no-negated-condition: 0 */\r\nexport default typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\r\n","/**\r\n * @module constants/appliedRegExps\r\n * @private\r\n * @description Exports different types of syntax for {@link Elem#apply}.\r\n */\r\n\r\n/**\r\n * @callback matchAppliedExprCallback\r\n * @param {Elem} elem - D-elem of an element to apply expression to.\r\n * @param {String} string - Matched applied name.\r\n * @param {String} arg - Argument within the parentheses.\r\n */\r\n\r\n/**\r\n * @type {Object.<String, matchAppliedExprCallback|Object.<String, matchAppliedExprCallback>>}\r\n * @description Object of different types of syntax.\r\n */\r\n\r\nexport const appliedRegExps = {\r\n  '#'(elem, id) {\r\n    elem.id(id);\r\n  },\r\n  '.'(elem, cls) {\r\n    elem.addClass(cls);\r\n  },\r\n  $(elem, attr, value) {\r\n    elem.attr(attr, value);\r\n  },\r\n  '@'(elem, prop, value) {\r\n    elem.css(prop, value);\r\n  },\r\n  '&'(elem, name, html) {\r\n    elem.html(html);\r\n  },\r\n  '*'(elem, name, text) {\r\n    elem.text(text);\r\n  },\r\n  '-': {\r\n    '.'(elem, cls) {\r\n      elem.removeClass(cls);\r\n    },\r\n    $(elem, attr) {\r\n      elem.removeAttr(attr);\r\n    },\r\n    '@'(elem, prop) {\r\n      elem.removeCSS(prop);\r\n    }\r\n  }\r\n};\r\n","/**\r\n * @module constants/elements\r\n * @private\r\n * @description Exports different canvas methods for {@link Elem} for creating html-elements.\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {String[]}\r\n */\r\nexport const canvasGetMethods = [\r\n  /**\r\n   * @member {Function} Elem#createImageData\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {ImageData|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/createImageData\r\n   */\r\n  'createImageData',\r\n\r\n  /**\r\n   * @member {Function} Elem#createLinearGradient\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {CanvasGradient|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/createLinearGradient\r\n   */\r\n  'createLinearGradient',\r\n\r\n  /**\r\n   * @member {Function} Elem#createPattern\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {CanvasPattern|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/createPattern\r\n   */\r\n  'createPattern',\r\n\r\n  /**\r\n   * @member {Function} Elem#createRadialGradient\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {CanvasGradient|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/createRadialGradient\r\n   */\r\n  'createRadialGradient',\r\n\r\n  /**\r\n   * @member {Function} Elem#getImageData\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {ImageData|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/getImageData\r\n   */\r\n  'getImageData',\r\n\r\n  /**\r\n   * @member {Function} Elem#getLineDash\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Number[]|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/getLineDash\r\n   */\r\n  'getLineDash',\r\n\r\n  /**\r\n   * @member {Function} Elem#isPointInPath\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Boolean|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/isPointInPath\r\n   */\r\n  'isPointInPath',\r\n\r\n  /**\r\n   * @member {Function} Elem#isPointInStroke\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Boolean|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/isPointInStroke\r\n   */\r\n  'isPointInStroke',\r\n\r\n  /**\r\n   * @member {Function} Elem#measureText\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {TextMetrics|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/measureText\r\n   */\r\n  'measureText'\r\n];\r\n\r\nexport const canvasRestMethods = [\r\n  /**\r\n   * @member {Function} Elem#arc\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/arc\r\n   */\r\n  'arc',\r\n\r\n  /**\r\n   * @member {Function} Elem#arcTo\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/arcTo\r\n   */\r\n  'arcTo',\r\n\r\n  /**\r\n   * @member {Function} Elem#beginPath\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/beginPath\r\n   */\r\n  'beginPath',\r\n\r\n  /**\r\n   * @member {Function} Elem#bezierCurveTo\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo\r\n   */\r\n  'bezierCurveTo',\r\n\r\n  /**\r\n   * @member {Function} Elem#clearRect\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/clearRect\r\n   */\r\n  'clearRect',\r\n\r\n  /**\r\n   * @member {Function} Elem#clip\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/clip\r\n   */\r\n  'clip',\r\n\r\n  /**\r\n   * @member {Function} Elem#closePath\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/closePath\r\n   */\r\n  'closePath',\r\n\r\n  /**\r\n   * @member {Function} Elem#drawFocusIfNeeded\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/drawFocusIfNeeded\r\n   */\r\n  'drawFocusIfNeeded',\r\n\r\n  /**\r\n   * @member {Function} Elem#drawImage\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/drawImage\r\n   */\r\n  'drawImage',\r\n\r\n  /**\r\n   * @member {Function} Elem#ellipse\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/ellipse\r\n   */\r\n  'ellipse',\r\n\r\n  /**\r\n   * @member {Function} Elem#fill\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/fill\r\n   */\r\n  'fill',\r\n\r\n  /**\r\n   * @member {Function} Elem#fillRect\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/fillRect\r\n   */\r\n  'fillRect',\r\n\r\n  /**\r\n   * @member {Function} Elem#fillText\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/fillText\r\n   */\r\n  'fillText',\r\n\r\n  /**\r\n   * @member {Function} Elem#lineTo\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/lineTo\r\n   */\r\n  'lineTo',\r\n\r\n  /**\r\n   * @member {Function} Elem#moveTo\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/moveTo\r\n   */\r\n  'moveTo',\r\n\r\n  /**\r\n   * @member {Function} Elem#putImageData\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/putImageData\r\n   */\r\n  'putImageData',\r\n\r\n  /**\r\n   * @member {Function} Elem#quadraticCurveTo\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo\r\n   */\r\n  'quadraticCurveTo',\r\n\r\n  /**\r\n   * @member {Function} Elem#rect\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/rect\r\n   */\r\n  'rect',\r\n\r\n  /**\r\n   * @member {Function} Elem#resetTransform\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/resetTransform\r\n   */\r\n  'resetTransform',\r\n\r\n  /**\r\n   * @member {Function} Elem#restore\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/restore\r\n   */\r\n  'restore',\r\n\r\n  /**\r\n   * @member {Function} Elem#rotate\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/rotate\r\n   */\r\n  'rotate',\r\n\r\n  /**\r\n   * @member {Function} Elem#save\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/save\r\n   */\r\n  'save',\r\n\r\n  /**\r\n   * @member {Function} Elem#scale\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/scale\r\n   */\r\n  'scale',\r\n\r\n  /**\r\n   * @member {Function} Elem#setLineDash\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/setLineDash\r\n   */\r\n  'setLineDash',\r\n\r\n  /**\r\n   * @member {Function} Elem#setTransform\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/setTransform\r\n   */\r\n  'setTransform',\r\n\r\n  /**\r\n   * @member {Function} Elem#stroke\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/stroke\r\n   */\r\n  'stroke',\r\n\r\n  /**\r\n   * @member {Function} Elem#strokeRect\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/strokeRect\r\n   */\r\n  'strokeRect',\r\n\r\n  /**\r\n   * @member {Function} Elem#strokeText\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/strokeText\r\n   */\r\n  'strokeText',\r\n\r\n  /**\r\n   * @member {Function} Elem#transform\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/transform\r\n   */\r\n  'transform',\r\n\r\n  /**\r\n   * @member {Function} Elem#translate\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/translate\r\n   */\r\n  'translate'\r\n];\r\n","/**\r\n * @module constants/constructors\r\n * @private\r\n * @description Exports constructors levels.\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {Array[]}\r\n */\r\nexport const constructors = [\r\n  [],\r\n  [],\r\n  []\r\n];\r\n","/**\r\n * @module constants/elements\r\n * @private\r\n * @description Exports methods for {@link Elem} for creating html-elements.\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {String[]}\r\n */\r\nexport const htmlElements = [\r\n  /**\r\n   * @member {Function} Elem#a\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'a',\r\n\r\n  /**\r\n   * @member {Function} Elem#abbr\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'abbr',\r\n\r\n  /**\r\n   * @member {Function} Elem#address\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'address',\r\n\r\n  /**\r\n   * @member {Function} Elem#area\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'area',\r\n\r\n  /**\r\n   * @member {Function} Elem#article\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'article',\r\n\r\n  /**\r\n   * @member {Function} Elem#audio\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'audio',\r\n\r\n  /**\r\n   * @member {Function} Elem#b\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'b',\r\n\r\n  /**\r\n   * @member {Function} Elem#base\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'base',\r\n\r\n  /**\r\n   * @member {Function} Elem#bdi\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'bdi',\r\n\r\n  /**\r\n   * @member {Function} Elem#bdo\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'bdo',\r\n\r\n  /**\r\n   * @member {Function} Elem#blockquote\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'blockquote',\r\n\r\n  /**\r\n   * @member {Function} Elem#body\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'body',\r\n\r\n  /**\r\n   * @member {Function} Elem#br\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'br',\r\n\r\n  /**\r\n   * @member {Function} Elem#button\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'button',\r\n\r\n  /**\r\n   * @member {Function} Elem#canvas\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'canvas',\r\n\r\n  /**\r\n   * @member {Function} Elem#caption\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'caption',\r\n\r\n  /**\r\n   * @member {Function} Elem#cite\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'cite',\r\n\r\n  /**\r\n   * @member {Function} Elem#code\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'code',\r\n\r\n  /**\r\n   * @member {Function} Elem#col\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'col',\r\n\r\n  /**\r\n   * @member {Function} Elem#colgroup\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'colgroup',\r\n\r\n  /**\r\n   * @member {Function} Elem#content\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'content',\r\n\r\n  /**\r\n   * @member {Function} Elem#datalist\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'datalist',\r\n\r\n  /**\r\n   * @member {Function} Elem#dd\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'dd',\r\n\r\n  /**\r\n   * @member {Function} Elem#del\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'del',\r\n\r\n  /**\r\n   * @member {Function} Elem#details\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'details',\r\n\r\n  /**\r\n   * @member {Function} Elem#dfn\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'dfn',\r\n\r\n  /**\r\n   * @member {Function} Elem#dialog\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'dialog',\r\n\r\n  /**\r\n   * @member {Function} Elem#div\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'div',\r\n\r\n  /**\r\n   * @member {Function} Elem#dl\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'dl',\r\n\r\n  /**\r\n   * @member {Function} Elem#dt\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'dt',\r\n\r\n  /**\r\n   * @member {Function} Elem#element\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'element',\r\n\r\n  /**\r\n   * @member {Function} Elem#em\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'em',\r\n\r\n  /**\r\n   * @member {Function} Elem#embed\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'embed',\r\n\r\n  /**\r\n   * @member {Function} Elem#fieldset\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'fieldset',\r\n\r\n  /**\r\n   * @member {Function} Elem#figcaption\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'figcaption',\r\n\r\n  /**\r\n   * @member {Function} Elem#figure\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'figure',\r\n\r\n  /**\r\n   * @member {Function} Elem#footer\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'footer',\r\n\r\n  /**\r\n   * @member {Function} Elem#form\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'form',\r\n\r\n  /**\r\n   * @member {Function} Elem#h1\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'h1',\r\n\r\n  /**\r\n   * @member {Function} Elem#h2\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'h2',\r\n\r\n  /**\r\n   * @member {Function} Elem#h3\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'h3',\r\n\r\n  /**\r\n   * @member {Function} Elem#h4\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'h4',\r\n\r\n  /**\r\n   * @member {Function} Elem#h5\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'h5',\r\n\r\n  /**\r\n   * @member {Function} Elem#h6\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'h6',\r\n\r\n  /**\r\n   * @member {Function} Elem#head\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'head',\r\n\r\n  /**\r\n   * @member {Function} Elem#header\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'header',\r\n\r\n  /**\r\n   * @member {Function} Elem#hgroup\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'hgroup',\r\n\r\n  /**\r\n   * @member {Function} Elem#hr\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'hr',\r\n\r\n  /**\r\n   * @member {Function} Elem#i\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'i',\r\n\r\n  /**\r\n   * @member {Function} Elem#iframe\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'iframe',\r\n\r\n  /**\r\n   * @member {Function} Elem#img\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'img',\r\n\r\n  /**\r\n   * @member {Function} Elem#input\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'input',\r\n\r\n  /**\r\n   * @member {Function} Elem#ins\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'ins',\r\n\r\n  /**\r\n   * @member {Function} Elem#kbd\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'kbd',\r\n\r\n  /**\r\n   * @member {Function} Elem#label\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'label',\r\n\r\n  /**\r\n   * @member {Function} Elem#legend\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'legend',\r\n\r\n  /**\r\n   * @member {Function} Elem#li\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'li',\r\n\r\n  /**\r\n   * @member {Function} Elem#link\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'link',\r\n\r\n  /**\r\n   * @member {Function} Elem#main\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'main',\r\n\r\n  /**\r\n   * @member {Function} Elem#mark\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'mark',\r\n\r\n  /**\r\n   * @member {Function} Elem#menu\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'menu',\r\n\r\n  /**\r\n   * @member {Function} Elem#menuitem\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'menuitem',\r\n\r\n  /**\r\n   * @member {Function} Elem#meta\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'meta',\r\n\r\n  /**\r\n   * @member {Function} Elem#meter\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'meter',\r\n\r\n  /**\r\n   * @member {Function} Elem#nav\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'nav',\r\n\r\n  /**\r\n   * @member {Function} Elem#noscript\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'noscript',\r\n\r\n  /**\r\n   * @member {Function} Elem#ol\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'ol',\r\n\r\n  /**\r\n   * @member {Function} Elem#optgroup\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'optgroup',\r\n\r\n  /**\r\n   * @member {Function} Elem#option\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'option',\r\n\r\n  /**\r\n   * @member {Function} Elem#output\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'output',\r\n\r\n  /**\r\n   * @member {Function} Elem#p\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'p',\r\n\r\n  /**\r\n   * @member {Function} Elem#param\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'param',\r\n\r\n  /**\r\n   * @member {Function} Elem#pre\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'pre',\r\n\r\n  /**\r\n   * @member {Function} Elem#progress\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'progress',\r\n\r\n  /**\r\n   * @member {Function} Elem#q\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'q',\r\n\r\n  /**\r\n   * @member {Function} Elem#rp\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'rp',\r\n\r\n  /**\r\n   * @member {Function} Elem#rt\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'rt',\r\n\r\n  /**\r\n   * @member {Function} Elem#rtc\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'rtc',\r\n\r\n  /**\r\n   * @member {Function} Elem#ruby\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'ruby',\r\n\r\n  /**\r\n   * @member {Function} Elem#s\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  's',\r\n\r\n  /**\r\n   * @member {Function} Elem#samp\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'samp',\r\n\r\n  /**\r\n   * @member {Function} Elem#script\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'script',\r\n\r\n  /**\r\n   * @member {Function} Elem#section\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'section',\r\n\r\n  /**\r\n   * @member {Function} Elem#select\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'select',\r\n\r\n  /**\r\n   * @member {Function} Elem#shadow\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'shadow',\r\n\r\n  /**\r\n   * @member {Function} Elem#small\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'small',\r\n\r\n  /**\r\n   * @member {Function} Elem#source\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'source',\r\n\r\n  /**\r\n   * @member {Function} Elem#span\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'span',\r\n\r\n  /**\r\n   * @member {Function} Elem#strong\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'strong',\r\n\r\n  /**\r\n   * @member {Function} Elem#style\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'style',\r\n\r\n  /**\r\n   * @member {Function} Elem#sub\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'sub',\r\n\r\n  /**\r\n   * @member {Function} Elem#summary\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'summary',\r\n\r\n  /**\r\n   * @member {Function} Elem#sup\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'sup',\r\n\r\n  /**\r\n   * @member {Function} Elem#table\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'table',\r\n\r\n  /**\r\n   * @member {Function} Elem#tbody\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'tbody',\r\n\r\n  /**\r\n   * @member {Function} Elem#td\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'td',\r\n\r\n  /**\r\n   * @member {Function} Elem#template\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'template',\r\n\r\n  /**\r\n   * @member {Function} Elem#textarea\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'textarea',\r\n\r\n  /**\r\n   * @member {Function} Elem#tfoot\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'tfoot',\r\n\r\n  /**\r\n   * @member {Function} Elem#th\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'th',\r\n\r\n  /**\r\n   * @member {Function} Elem#thead\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'thead',\r\n\r\n  /**\r\n   * @member {Function} Elem#time\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'time',\r\n\r\n  /**\r\n   * @member {Function} Elem#title\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'title',\r\n\r\n  /**\r\n   * @member {Function} Elem#tr\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'tr',\r\n\r\n  /**\r\n   * @member {Function} Elem#track\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'track',\r\n\r\n  /**\r\n   * @member {Function} Elem#u\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'u',\r\n\r\n  /**\r\n   * @member {Function} Elem#ul\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'ul',\r\n\r\n  /**\r\n   * @member {Function} Elem#var\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'var',\r\n\r\n  /**\r\n   * @member {Function} Elem#video\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'video',\r\n\r\n  /**\r\n   * @member {Function} Elem#wbr\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'wbr'\r\n];\r\n\r\nexport const svgElements = [\r\n  /**\r\n   * @member {Function} Elem#altGlyph\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'altGlyph',\r\n\r\n  /**\r\n   * @member {Function} Elem#altGlyphDef\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'altGlyphDef',\r\n\r\n  /**\r\n   * @member {Function} Elem#altGlyphItem\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'altGlyphItem',\r\n\r\n  /**\r\n   * @member {Function} Elem#animate\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'animate',\r\n\r\n  /**\r\n   * @member {Function} Elem#animateColor\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'animateColor',\r\n\r\n  /**\r\n   * @member {Function} Elem#animateMotion\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'animateMotion',\r\n\r\n  /**\r\n   * @member {Function} Elem#animateTransform\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'animateTransform',\r\n\r\n  /**\r\n   * @member {Function} Elem#circle\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'circle',\r\n\r\n  /**\r\n   * @member {Function} Elem#clipPath\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'clipPath',\r\n\r\n  /**\r\n   * @member {Function} Elem#colorProfile\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'color-profile',\r\n\r\n  /**\r\n   * @member {Function} Elem#cursor\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'cursor',\r\n\r\n  /**\r\n   * @member {Function} Elem#defs\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'defs',\r\n\r\n  /**\r\n   * @member {Function} Elem#desc\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'desc',\r\n\r\n  /**\r\n   * @member {Function} Elem#discard\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'discard',\r\n\r\n  /**\r\n   * @member {Function} Elem#ellipse\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'ellipse',\r\n\r\n  /**\r\n   * @member {Function} Elem#feBlend\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feBlend',\r\n\r\n  /**\r\n   * @member {Function} Elem#feColorMatrix\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feColorMatrix',\r\n\r\n  /**\r\n   * @member {Function} Elem#feComponentTransfer\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feComponentTransfer',\r\n\r\n  /**\r\n   * @member {Function} Elem#feComposite\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feComposite',\r\n\r\n  /**\r\n   * @member {Function} Elem#feConvolveMatrix\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feConvolveMatrix',\r\n\r\n  /**\r\n   * @member {Function} Elem#feDiffuseLighting\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feDiffuseLighting',\r\n\r\n  /**\r\n   * @member {Function} Elem#feDisplacementMap\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feDisplacementMap',\r\n\r\n  /**\r\n   * @member {Function} Elem#feDistantLight\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feDistantLight',\r\n\r\n  /**\r\n   * @member {Function} Elem#feDropShadow\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feDropShadow',\r\n\r\n  /**\r\n   * @member {Function} Elem#feFlood\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feFlood',\r\n\r\n  /**\r\n   * @member {Function} Elem#feFuncA\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feFuncA',\r\n\r\n  /**\r\n   * @member {Function} Elem#feFuncB\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feFuncB',\r\n\r\n  /**\r\n   * @member {Function} Elem#feFuncG\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feFuncG',\r\n\r\n  /**\r\n   * @member {Function} Elem#feFuncR\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feFuncR',\r\n\r\n  /**\r\n   * @member {Function} Elem#feGaussianBlur\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feGaussianBlur',\r\n\r\n  /**\r\n   * @member {Function} Elem#feImage\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feImage',\r\n\r\n  /**\r\n   * @member {Function} Elem#feMerge\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feMerge',\r\n\r\n  /**\r\n   * @member {Function} Elem#feMergeNode\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feMergeNode',\r\n\r\n  /**\r\n   * @member {Function} Elem#feMorphology\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feMorphology',\r\n\r\n  /**\r\n   * @member {Function} Elem#feOffset\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feOffset',\r\n\r\n  /**\r\n   * @member {Function} Elem#fePointLight\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'fePointLight',\r\n\r\n  /**\r\n   * @member {Function} Elem#feSpecularLighting\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feSpecularLighting',\r\n\r\n  /**\r\n   * @member {Function} Elem#feSpotLight\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feSpotLight',\r\n\r\n  /**\r\n   * @member {Function} Elem#feTile\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feTile',\r\n\r\n  /**\r\n   * @member {Function} Elem#feTurbulence\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feTurbulence',\r\n\r\n  /**\r\n   * @member {Function} Elem#font\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'font',\r\n\r\n  /**\r\n   * @member {Function} Elem#fontFace\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'font-face',\r\n\r\n  /**\r\n   * @member {Function} Elem#fontFaceFormat\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'font-face-format',\r\n\r\n  /**\r\n   * @member {Function} Elem#fontFaceName\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'font-face-name',\r\n\r\n  /**\r\n   * @member {Function} Elem#fontFaceSrc\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'font-face-src',\r\n\r\n  /**\r\n   * @member {Function} Elem#fontFaceUri\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'font-face-uri',\r\n\r\n  /**\r\n   * @member {Function} Elem#foreignObject\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'foreignObject',\r\n\r\n  /**\r\n   * @member {Function} Elem#g\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'g',\r\n\r\n  /**\r\n   * @member {Function} Elem#glyph\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'glyph',\r\n\r\n  /**\r\n   * @member {Function} Elem#glyphRef\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'glyphRef',\r\n\r\n  /**\r\n   * @member {Function} Elem#hatch\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'hatch',\r\n\r\n  /**\r\n   * @member {Function} Elem#hatchpath\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'hatchpath',\r\n\r\n  /**\r\n   * @member {Function} Elem#hkern\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'hkern',\r\n\r\n  /**\r\n   * @member {Function} Elem#image\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'image',\r\n\r\n  /**\r\n   * @member {Function} Elem#line\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'line',\r\n\r\n  /**\r\n   * @member {Function} Elem#linearGradient\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'linearGradient',\r\n\r\n  /**\r\n   * @member {Function} Elem#marker\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'marker',\r\n\r\n  /**\r\n   * @member {Function} Elem#mask\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'mask',\r\n\r\n  /**\r\n   * @member {Function} Elem#mesh\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'mesh',\r\n\r\n  /**\r\n   * @member {Function} Elem#meshgradient\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'meshgradient',\r\n\r\n  /**\r\n   * @member {Function} Elem#meshpatch\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'meshpatch',\r\n\r\n  /**\r\n   * @member {Function} Elem#meshrow\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'meshrow',\r\n\r\n  /**\r\n   * @member {Function} Elem#metadata\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'metadata',\r\n\r\n  /**\r\n   * @member {Function} Elem#missingGlyph\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'missing-glyph',\r\n\r\n  /**\r\n   * @member {Function} Elem#mpath\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'mpath',\r\n\r\n  /**\r\n   * @member {Function} Elem#path\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'path',\r\n\r\n  /**\r\n   * @member {Function} Elem#pattern\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'pattern',\r\n\r\n  /**\r\n   * @member {Function} Elem#polygon\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'polygon',\r\n\r\n  /**\r\n   * @member {Function} Elem#polyline\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'polyline',\r\n\r\n  /**\r\n   * @member {Function} Elem#radialGradient\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'radialGradient',\r\n\r\n  /**\r\n   * @member {Function} Elem#rect\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'rect',\r\n\r\n  /**\r\n   * @member {Function} Elem#set\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'set',\r\n\r\n  /**\r\n   * @member {Function} Elem#solidcolor\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'solidcolor',\r\n\r\n  /**\r\n   * @member {Function} Elem#stop\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'stop',\r\n\r\n  /**\r\n   * @member {Function} Elem#style\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'style',\r\n\r\n  /**\r\n   * @member {Function} Elem#svg\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'svg',\r\n\r\n  /**\r\n   * @member {Function} Elem#switch\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'switch',\r\n\r\n  /**\r\n   * @member {Function} Elem#symbol\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'symbol',\r\n\r\n  /**\r\n   * @member {Function} Elem#textPath\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'textPath',\r\n\r\n  /**\r\n   * @member {Function} Elem#tref\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'tref',\r\n\r\n  /**\r\n   * @member {Function} Elem#tspan\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'tspan',\r\n\r\n  /**\r\n   * @member {Function} Elem#unknown\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'unknown',\r\n\r\n  /**\r\n   * @member {Function} Elem#use\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'use',\r\n\r\n  /**\r\n   * @member {Function} Elem#view\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'view',\r\n\r\n  /**\r\n   * @member {Function} Elem#vkern\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'vkern'\r\n];\r\n\r\nexport const voidElements = [\r\n  'area',\r\n  'base',\r\n  'br',\r\n  'col',\r\n  'command',\r\n  'embed',\r\n  'hr',\r\n  'img',\r\n  'input',\r\n  'keygen',\r\n  'link',\r\n  'meta',\r\n  'param',\r\n  'source',\r\n  'track',\r\n  'wbr'\r\n];\r\n","export const htmlAllowedTagSymbols = '[a-z][a-z\\\\d\\\\-_.:!@#\\\\$%\\\\^&*()\\\\[\\\\]{}\\\\\\\\=\\'\"]*';\r\nexport const htmlAllowedAttrSymbols = '[^\\\\u0000-\\\\u0020\\\\s\"\\'>/=]+';\r\n","/**\r\n * @module constants/regexpSpecialCharacters\r\n * @private\r\n * @description Exports special characters for RegExp.\r\n */\r\n\r\n/**\r\n * @const\r\n * @name module:constants/regexpSpecialCharacters~regexpSpecialCharacters\r\n * @type {String[]}\r\n */\r\nexport const regexpSpecialCharacters = [\r\n  '.',\r\n  '+', '*', '?',\r\n  '(', ')',\r\n  '[', ']',\r\n  '{', '}',\r\n  '<', '>',\r\n  '^', '$',\r\n  '!',\r\n  '=',\r\n  ':',\r\n  '-',\r\n  '|',\r\n  ',',\r\n  '\\\\'\r\n];\r\n","/**\r\n * @module constants/validateCheckExpressions\r\n * @private\r\n * @description Exports different types of validate expressions for {@link module:helpers/validate}.\r\n */\r\n\r\nimport * as methods from '../helpers/checkTypes';\r\n\r\n/**\r\n * @callback checkValidityCallback\r\n * @private\r\n * @param {*} value - Value to check.\r\n */\r\n\r\n/**\r\n * @typedef {Object} validateExpr\r\n * @private\r\n * @property {String} text - Text of the thrown error.\r\n * @property {Error} error - Type of the thrown error.\r\n * @property {checkValidityCallback} check - Callback for checking value.\r\n */\r\n\r\n/**\r\n * @type {validateExpr[]}\r\n * @private\r\n * @description Object of different types of validation.\r\n */\r\nexport const validateCheckExpressions = {\r\n  '>0': {\r\n    check: (n) => n > 0,\r\n    text: '$n argument must be positive!',\r\n    error: RangeError\r\n  },\r\n  '>=0': {\r\n    check: (n) => n >= 0,\r\n    text: '$n argument must be non-negative!',\r\n    error: RangeError\r\n  },\r\n  '<0': {\r\n    check: (n) => n < 0,\r\n    text: '$n argument must be negative!',\r\n    error: RangeError\r\n  },\r\n  '<=0': {\r\n    check: (n) => n <= 0,\r\n    text: '$n argument must be non-positive!',\r\n    error: RangeError\r\n  },\r\n  '!!': {\r\n    check: (v) => !methods.isNil(v),\r\n    text: '$n argument must be not null or undefined!',\r\n    error: TypeError\r\n  },\r\n  array: {\r\n    check: methods.isArray,\r\n    text: '$n argument must be an array!',\r\n    error: TypeError\r\n  },\r\n  'array||!': {\r\n    check: (a) => methods.isArray(a) || methods.isNil(a),\r\n    text: '$n argument must be an array, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  arrayLike: {\r\n    check: methods.isArrayLike,\r\n    text: '$n argument must be array-like!',\r\n    error: TypeError\r\n  },\r\n  'arrayLike||!': {\r\n    check: (a) => methods.isArrayLike(a) || methods.isNil(a),\r\n    text: '$n argument must be array-like, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  date: {\r\n    check: methods.isDate,\r\n    text: '$n argument must be a date!',\r\n    error: TypeError\r\n  },\r\n  'date||!': {\r\n    check: (d) => methods.isDate(d) || methods.isNil(d),\r\n    text: '$n argument must be a date, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  dateLike: {\r\n    check: methods.isDateLike,\r\n    text: '$n argument must be date-like!',\r\n    error: TypeError\r\n  },\r\n  'dateLike||!': {\r\n    check: (d) => methods.isDateLike(d) || methods.isNil(d),\r\n    text: '$n argument must be date-like, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  function: {\r\n    check: methods.isFunction,\r\n    text: '$n argument must be a function!',\r\n    error: TypeError\r\n  },\r\n  'function||!': {\r\n    check: (f) => methods.isFunction(f) || methods.isNil(f),\r\n    text: '$n argument must be a function, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  int: {\r\n    check: methods.isInteger,\r\n    text: '$n argument must be an integer!',\r\n    error: TypeError\r\n  },\r\n  'int||!': {\r\n    check: (i) => methods.isInteger(i) || methods.isNil(i),\r\n    text: '$n argument must be an integer, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  intLike: {\r\n    check: methods.isIntegerLike,\r\n    text: '$n argument must be integer-like!',\r\n    error: TypeError\r\n  },\r\n  'intLike||!': {\r\n    check: (i) => methods.isIntegerLike(i) || methods.isNil(i),\r\n    text: '$n argument must be integer-like, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  number: {\r\n    check: methods.isNumber,\r\n    text: '$n argument must be a number!',\r\n    error: TypeError\r\n  },\r\n  'number||!': {\r\n    check: (n) => methods.isNumber(n) || methods.isNil(n),\r\n    text: '$n argument must be a number, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  numberLike: {\r\n    check: methods.isNumberLike,\r\n    text: '$n argument must be number-like!',\r\n    error: TypeError\r\n  },\r\n  'numberLike||!': {\r\n    check: (n) => methods.isNumberLike(n) || methods.isNil(n),\r\n    text: '$n argument must be number-like, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  object: {\r\n    check: methods.isObject,\r\n    text: '$n argument must be an object!',\r\n    error: TypeError\r\n  },\r\n  'object||!': {\r\n    check: (o) => methods.isObject(o) || methods.isNil(o),\r\n    text: '$n argument must be an object, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  regexp: {\r\n    check: methods.isRegExp,\r\n    text: '$n argument must be a regular expression!',\r\n    error: TypeError\r\n  },\r\n  'regexp||!': {\r\n    check: (r) => methods.isRegExp(r) || methods.isNil(r),\r\n    text: '$n argument must be a regular expression, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  string: {\r\n    check: methods.isString,\r\n    text: '$n argument must be a string!',\r\n    error: TypeError\r\n  },\r\n  'string||!': {\r\n    check: (s) => methods.isString(s) || methods.isNil(s),\r\n    text: '$n argument must be a string, or undefined, or null!',\r\n    error: TypeError\r\n  }\r\n};\r\n","/**\r\n * @module helpers/Symbol\r\n * @private\r\n * @description Exports Symbol class.\r\n */\r\n\r\nexport const Symbol = global.Symbol || {\r\n  toStringTag: 'Symbol.toStringTag',\r\n  iterator: Math.random().toString(36)\r\n};\r\n","/**\r\n * @module Promise\r\n * @private\r\n * @mixin\r\n * @description Exports Promise class.\r\n */\r\n\r\nimport { isFunction, defineProperties, Symbol } from './helpers';\r\n\r\n/**\r\n * @callback onFulfilledOrRejected\r\n * @public\r\n * @param {*} value - Promise value.\r\n * @param {Boolean} success - If the previous promise is fulfilled it's true and false if rejected.\r\n */\r\n\r\n/**\r\n * @callback onRejected\r\n * @public\r\n * @param {Error|*} err - Promise error.\r\n */\r\n\r\n/**\r\n * @callback onFulfilled\r\n * @public\r\n * @param {*} value - Promise value.\r\n */\r\n\r\nconst secret = {};\r\nconst iterator = Symbol.iterator;\r\n\r\n/**\r\n * @class Promise\r\n * @public\r\n * @param {Function} executor - Function that takes two arguments: resolve and reject functions.\r\n * Call the resolve function when you need to fulfill the promise and call the reject one\r\n * when you need to reject it.\r\n * @returns {Promise} Instance of Promise.\r\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\r\n * @description Class with almost identical API to\r\n * [ES6 Promise]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise}.\r\n * There is a couple differences: set Promise.onError to a function with which you want to\r\n * subscribe to a promise error and set Promise.onUnhandledRejection to a function with which\r\n * you want to subscribe to an unhandled error\r\n * (defaults to console.error.bind(console, '%s %o', 'Uncaught (in promise)')).\r\n */\r\nclass Promise {\r\n  static onError = null;\r\n  static onUnhandledRejection = console.error.bind(console, '%s %o', 'Uncaught (in promise)');\r\n\r\n  constructor(executor) {\r\n    if (!isFunction(executor)) {\r\n      throw new TypeError(`Promise resolver ${ {}.toString.call(executor) } is not a function`);\r\n    }\r\n\r\n    let hiddenStatus;\r\n    let hiddenValue;\r\n\r\n    const\tonFulfill = [];\r\n    const onReject = [];\r\n    const realPromise = this;\r\n    const hiddenPromise = {\r\n      handled: false,\r\n      get status() {\r\n        return hiddenStatus;\r\n      },\r\n      set status(value) {\r\n        hiddenStatus = value;\r\n        realPromise.status = value;\r\n      },\r\n      get value() {\r\n        return hiddenValue;\r\n      },\r\n      set value(val) {\r\n        hiddenValue = val;\r\n        realPromise.value = val;\r\n      }\r\n    };\r\n\r\n    hiddenPromise.status = 'pending';\r\n    hiddenPromise.value = undefined;\r\n\r\n    /**\r\n     * @typedef {Object} hiddenPromise\r\n     * @private\r\n     * @property {Boolean|Object} handled - If the promise is handled or not.\r\n     * @property {'pending'|'fulfilled'|'rejected'} status - Status of the promise.\r\n     * @property {*} value - Value of the promise.\r\n     */\r\n\r\n    /**\r\n     * @member {Function} hiddenPromise#handle\r\n     * @private\r\n     * @param {('reject'|'resolve')} event - Type of the event to handle.\r\n     * @param {Function} handler - Handler itself.\r\n     * @param {Function} resolve - Resolve function.\r\n     * @param {Function} reject - Reject function.\r\n     * @param {Object} secret - Secret.\r\n     * @description Private method for handling promises.\r\n     */\r\n\r\n    /**\r\n     * @member {hiddenPromise} Promise#$$\r\n     * @protected\r\n     */\r\n    defineProperties(this.$$ = {}, {\r\n      'get/set handled': {\r\n        get() {\r\n          return hiddenPromise.handled;\r\n        },\r\n        set(key) {\r\n          if (key === secret) {\r\n            hiddenPromise.handled = true;\r\n          }\r\n        }\r\n      },\r\n      handle(status, f, resolve, reject, key) {\r\n        if (key === secret) {\r\n          const proxy = isFunction(f) ? (value) => {\r\n            try {\r\n              resolve(f(value));\r\n            } catch (err) {\r\n              reject(err);\r\n            }\r\n          } : null;\r\n\r\n          if (status === 'resolve') {\r\n            onFulfill.push(proxy || ((value) => resolve(value)));\r\n          } else if (status === 'reject') {\r\n            onReject.push(proxy || ((err) => reject(err)));\r\n          }\r\n        }\r\n      },\r\n      'get status'() {\r\n        return hiddenPromise.status;\r\n      },\r\n      'get value'() {\r\n        return hiddenPromise.value;\r\n      }\r\n    });\r\n\r\n    try {\r\n      executor(resolve, reject);\r\n    } catch (err) {\r\n      reject(err);\r\n    }\r\n\r\n    function reject(err) {\r\n      if (hiddenPromise.status === 'pending') {\r\n        hiddenPromise.status = 'rejected';\r\n        hiddenPromise.value = err;\r\n\r\n        for (let i = 0, length = onReject.length; i < length; i++) {\r\n          hiddenPromise.handled = true;\r\n\r\n          onReject[i](err);\r\n        }\r\n\r\n        const {\r\n          onUnhandledRejection,\r\n          onError\r\n        } = Promise;\r\n\r\n        if (isFunction(onError)) {\r\n          onError(err);\r\n        }\r\n\r\n        setTimeout(() => {\r\n          if (!hiddenPromise.handled && isFunction(onUnhandledRejection)) {\r\n            onUnhandledRejection(err);\r\n          }\r\n        }, 1);\r\n      }\r\n    }\r\n\r\n    function resolve(value) {\r\n      if (hiddenPromise.status === 'pending') {\r\n        if (value && isFunction(value.then)) {\r\n          return value.then((value) => {\r\n            resolve(value);\r\n          }, (err) => {\r\n            reject(err);\r\n          });\r\n        }\r\n\r\n        hiddenPromise.status = 'fulfilled';\r\n        hiddenPromise.value = value;\r\n\r\n        for (let i = 0, length = onFulfill.length; i < length; i++) {\r\n          hiddenPromise.handled = true;\r\n\r\n          onFulfill[i](value);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method Promise.all\r\n   * @param {(Array|Iterable).<Promise|*>} iterable - Iterable object (like array) of promises\r\n   * or any values.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\r\n   */\r\n  static all(iterable) {\r\n    const array = [];\r\n\r\n    let toResolve = 0;\r\n\r\n    if (iterable[iterator]) {\r\n      iterable = iterable[iterator]();\r\n\r\n      return new Promise((resolve, reject) => {\r\n        let next;\r\n        let i = 0;\r\n\r\n        while (!(next = iterable.next()).done) {\r\n          const promise = Promise.resolve(next.value);\r\n\r\n          toResolve++;\r\n\r\n          ((i) => {\r\n            promise.then((value) => {\r\n              toResolve--;\r\n              array[i] = value;\r\n\r\n              setTimeout(() => {\r\n                if (next.done && !toResolve) {\r\n                  resolve(array);\r\n                }\r\n              }, 1);\r\n            }, reject);\r\n          })(i++);\r\n        }\r\n\r\n        if (!i) {\r\n          return Promise.resolve([]);\r\n        }\r\n      });\r\n    }\r\n\r\n    const length = iterable.length;\r\n\r\n    if (!length) {\r\n      return Promise.resolve([]);\r\n    }\r\n\r\n    toResolve = length;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      for (let i = 0; i < length; i++) {\r\n        const promise = Promise.resolve(iterable[i]);\r\n\r\n        promise.then((value) => {\r\n          toResolve--;\r\n          array[i] = value;\r\n\r\n          if (!toResolve) {\r\n            resolve(array);\r\n          }\r\n        }, reject);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Promise.race\r\n   * @param {(Array|Iterable).<Promise|*>} iterable - Iterable object (like array) of promises\r\n   * or any values.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\r\n   */\r\n  static race(iterable) {\r\n    if (iterable[iterator]) {\r\n      iterable = iterable[iterator]();\r\n\r\n      return new Promise((resolve, reject) => {\r\n        let next;\r\n\r\n        while (!(next = iterable.next()).done) {\r\n          next.value.then(resolve, reject);\r\n        }\r\n      });\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      for (let i = 0, length = iterable.length; i < length; i++) {\r\n        iterable[i].then(resolve, reject);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Promise.reject\r\n   * @param {*} value - Value to reject.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject\r\n   */\r\n  static reject(value) {\r\n    return new Promise((resolve, reject) => {\r\n      reject(value);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Promise.resolve\r\n   * @param {Promise|Thenable|*} value - Promise, thenable or any value to resolve.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\r\n   */\r\n  static resolve(value) {\r\n    if (value && isFunction(value.then)) {\r\n      return value;\r\n    }\r\n\r\n    return new Promise((resolve) => {\r\n      resolve(value);\r\n    });\r\n  }\r\n\r\n  abort() {}\r\n\r\n  /**\r\n   * @method Promise#catch\r\n   * @param {onRejected} onRejected - onRejected callback.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\r\n   */\r\n  catch(onRejected) {\r\n    return this.then(null, onRejected);\r\n  }\r\n\r\n  /**\r\n   * @method Promise#finally\r\n   * @public\r\n   * @param {onFulfilledOrRejected} onFulfilledOrRejected - onFulfilledOrRejected callback.\r\n   * @returns {Promise}\r\n   * @description Method for catching both fulfilled and rejected promises.\r\n   *\r\n   * @example\r\n   * spinner.show();\r\n   * fetchData()\r\n   *   .then((data) => {\r\n   *     // do something with data\r\n   *   })\r\n   *   .catch((err) => {\r\n   *     // handle error somehow\r\n   *   })\r\n   *   .finally(() => {\r\n   *     spinner.hide();\r\n   *   });\r\n   */\r\n  finally(onFulfilledOrRejected) {\r\n    const isFunc = isFunction(onFulfilledOrRejected);\r\n\r\n    return this.then((value) => (\r\n      Promise\r\n        .resolve(\r\n          isFunc\r\n            ? onFulfilledOrRejected(value, true)\r\n            : 0\r\n        )\r\n        .then(() => value)\r\n    ), (err) => (\r\n      Promise\r\n        .resolve(\r\n          isFunc\r\n            ? onFulfilledOrRejected(err, false)\r\n            : 0\r\n        )\r\n        .then(() => Promise.reject(err))\r\n    ));\r\n  }\r\n\r\n  /**\r\n   * @method Promise#then\r\n   * @param {onFulfilled} [onFulfilled] - onFulfilled callback.\r\n   * @param {onRejected} [onRejected] - onRejected callback.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\r\n   */\r\n  then(onFulfilled, onRejected) {\r\n    const promise = this.$$;\r\n\r\n    if (promise.status === 'pending') {\r\n      return new Promise((resolve, reject) => {\r\n        promise.handle('reject', onRejected, resolve, reject, secret);\r\n        promise.handle('resolve', onFulfilled, resolve, reject, secret);\r\n      });\r\n    }\r\n\r\n    promise.handled = secret;\r\n\r\n    const { value } = promise;\r\n\r\n    let method;\r\n    let handler;\r\n\r\n    if (promise.status === 'fulfilled') {\r\n      method = 'resolve';\r\n      handler = onFulfilled;\r\n    } else {\r\n      method = 'reject';\r\n      handler = onRejected;\r\n    }\r\n\r\n    if (!isFunction(handler)) {\r\n      return Promise[method](value);\r\n    }\r\n\r\n    try {\r\n      return Promise.resolve(handler(value));\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n  }\r\n}\r\n\r\ndefineProperties(Promise.prototype, {\r\n  [Symbol.toStringTag]: 'Promise'\r\n});\r\n\r\nexport { Promise };\r\n","/**\r\n * @module helpers/parseHeaders\r\n * @private\r\n * @description Exports parseHeaders method.\r\n */\r\n\r\nimport { Str } from '../Str';\r\nimport { iterate } from './iterate';\r\n\r\n/**\r\n * @function parseHeaders\r\n * @param {String} rawHeaders - Raw headers.\r\n * @returns {Object} Headers object\r\n * @description Function for parsing raw headers.\r\n */\r\nexport default (rawHeaders) => {\r\n  const headers = {};\r\n\r\n  iterate((rawHeaders || '').split('\\n'), (value) => {\r\n    const index = value.indexOf(':');\r\n    const key = new Str(value.substring(0, index))\r\n      .trim()\r\n      .toCamelCase().$;\r\n    const val = new Str(value.substring(index + 1)).trim().$;\r\n\r\n    if (key) {\r\n      headers[key] = (headers[key] ? `${ headers[key] }, ` : '') + val;\r\n    }\r\n  });\r\n\r\n  return headers;\r\n};\r\n","/**\r\n * @module helpers/transformData\r\n * @private\r\n * @description Exports transformData method.\r\n */\r\n\r\nimport { Arr } from '../Arr';\r\nimport { Super } from '../Super';\r\nimport { isObject, toStringTag } from './';\r\n\r\nconst notToTransform = new Arr(['FormData', 'File', 'Blob', 'ArrayBuffer', 'String', 'Number']);\r\nconst withoutBody = new Arr(['DELETE', 'GET', 'HEAD']);\r\n\r\n/**\r\n * @function transformData\r\n * @param {*} data - Data to transform\r\n * @param {String} method - HTTP method.\r\n * @param {Object} headers - Object with headers.\r\n * @returns {*} - Transformed data.\r\n */\r\nexport default (data, method, headers) => {\r\n  data = new Super(data).$;\r\n\r\n  if (withoutBody.indexOfStrict(method) !== -1) {\r\n    return null;\r\n  }\r\n\r\n  if (isObject(data) && notToTransform.indexOfStrict(toStringTag(data)) === -1) {\r\n    if (!headers.contentType) {\r\n      headers.contentType = ['application/json;charset=utf-8'];\r\n    }\r\n\r\n    return new Super(data).json();\r\n  }\r\n\r\n  return data;\r\n};\r\n","/**\r\n * @module helpers/resolveURL\r\n * @private\r\n * @description Exports Object.assign-like method.\r\n */\r\n\r\nimport { Str } from '../Str';\r\n\r\nconst { location } = global;\r\n\r\nexport default (decodeQuery) => {\r\n  const {\r\n    search: query,\r\n    hash\r\n  } = location;\r\n  const params = {\r\n    query: {},\r\n    hash: hash.replace(/^#/, '')\r\n  };\r\n\r\n  if (!query) {\r\n    return params;\r\n  }\r\n\r\n  new Str(query.replace(/^\\?/, ''))\r\n    .split('&')\r\n    .forEach((rawParam) => {\r\n      let [param, value = ''] = rawParam.split('=');\r\n\r\n      param = decodeQuery ? decodeURIComponent(param) : param;\r\n      value = decodeQuery ? decodeURIComponent(value) : value;\r\n\r\n      if (!/^[^[]+/.test(param)) {\r\n        return;\r\n      }\r\n\r\n      let paramName;\r\n      let paramObject = params.query;\r\n\r\n      new Str(param)\r\n        .match(/^[^[\\]]*|\\[[^[\\]]*]/g)\r\n        .forEach((name) => {\r\n          if (name.indexOf('[')) {\r\n            paramName = name;\r\n\r\n            return;\r\n          }\r\n\r\n          name = name.slice(1, -1);\r\n\r\n          paramObject = paramObject[paramName] = paramObject[paramName] || (name ? {} : []);\r\n          paramName = name || paramObject.length;\r\n        });\r\n\r\n      paramObject[paramName] = value;\r\n    });\r\n\r\n  return params;\r\n};\r\n","import * as statics from './lib/browser';\r\nimport { assign } from './lib/helpers/assign';\r\n\r\nconst { D } = statics;\r\n\r\nassign(D, statics);\r\n\r\ndelete D.D;\r\n\r\nglobal.D = D;\r\n"],"names":["toStringTag","object","toString","call","replace","isArray","value","isArrayLike","isFunction","length","isInteger","isBoolean","isDate","isDateLike","Date","isNaN","getTime","isElement","test","isFinite","isNumber","Number","Infinity","isIntegerLike","parseInt","isNull","isNil","isNumberLike","isObject","Object","isPlainObject","isPrimitive","proto","getPrototypeOf","constructor","isRegExp","isString","isSymbol","isUndefined","D","i","constructors","levelConstructors","k","len","cls","check","iterate","callback","array","iteratedKeys","iterated","key","hasOwnProperty","assign","target","objects","arguments","source","index","dynamicDefineProperties","properties","propertyGenerator","name","defineProperty","defineProperties","method","undefined","get","set","toArray","createNewArray","push","validate","args","options","number","checker","validateCheckExpressions","error","text","numbers","char","alphabet","string","ranges","split","range","Error","start","charCodeAt","end","String","fromCharCode","Alphabet","switcher","cases","mode","defaultValue","Switcher","when","condition","value1","value2","deepAssign","deepClone","clone","cloneSwitcher","deepEqual","o1","o2","strict","match","lastIndex","p1","p2","keys","deepEvery","n","tree","newTree","concat","deepFilter","nul","o","filtered","deepFind","result","deepForEach","deepForEachEntry","deepFreeze","freeze","deepMap","deepReduce","IV","deepSome","x","apply","noop","prop","self","rand","Math","random","floor","asc","y","Arr","blob","blobParts","BlobObject","Blob","trim","parseJSON","json","JSON","parse","dates","parsed","this","find","markup","elem","matches","rawTextSwitcher","Super","constructCloseTagRegExp","NODE_REGEX_SET","map","regex","returning","attrs","startMarkup","closeMatch","selfClosing","slice","TAG_OPEN_CLOSE","attr","ATTRIBUTE","min","NaN","tagName","RegExp","nearString","parseCharacterData","innerHTML","div","textContent","innerText","toFind","isElem","Elem","isWindow","isHTMLDocument","isDocumentFragment","isStyleRule","isCommentOrText","tag","getElem","$","emptyDiv","getName","nodeName","toLowerCase","addDwayneData","windowsDwayneData","some","element","getContext","selector","base","nativeDocument","querySelectorAll","parseHTML","html","collapseWhiteSpace","markupToJSON","template","doc","content","forEach","forEachNode","node","parent","children","parentNode","create","px","size","registerDBlock","Block","DBlock","elems","$$","found","registerDEach","createBlock","DEach","opts","item","itemName","indexName","_this","uid","constructValues","watchArgs","parentElem","uids","scope","UID","$uids","newKeys","newUIDs","evaluate","items","splice","Item","remove","after","block","shift","prev","insertAfter","values","registerDElements","DElements","_this2","mixins","watchersToRemove","child","mixin","filter","watchers","watcher","forDElements","indexOf","newContent","add","registerDIf","DIf","cond","evaluateAndWatch","if","newValue","Boolean","registerDItem","DItem","registerDSwitch","DSwitch","wasDefault","val","equals","registerDText","DText","registerDAttr","Mixin","DAttr","oldValue","removeAttr","registerDBind","DBind","off","on","registerDClass","DClass","classes","newClasses","removeClass","addClass","registerDElem","DElem","evaluateOnce","registerDHide","DHide","hide","show","registerDOn","DOn","registerDShow","DShow","registerDStyle","DStyle","removeCSS","css","registerDValidate","DValidate","validator","listenerSwitcher","registerDValue","DValue","_value","type","initialScopeValue","propSwitcher","currentValue","setProp","initialElemValue","getProp","isInitialScopeValueNull","isCheckbox","changeScope","e","option","selected","setValueSwitcher","init","getValueSwitcher","initApp","blocks","createComment","into","registerBuiltIns","register","_html","deepCloneChildren","_match","Str","escapeRegExp","parentBlock","parentScope","svgNS","svg","localBlocks","ns","_blocks","localMixins","_mixins","dBlockMatch","expressionRegExp","currentMixins","localMatch","blockInstance","global","Args","locals","constructPrivateScope","scopeValues","DItemFound","privateScope","afterConstruct","err","afterRender","createMixin","afterUpdate","newChild","transformDIfChildren","ifElse","isInstanceOfBlock","isPrototypeOf","prototype","isInstanceOfMixin","removeWatchers","constructPublicScope","define","evalMode","getting","temp","changed","oldTempWatchers","onRemove","was","perm","round","digits","zeroes","zero","repeat","now","date","Dat","isAbsolute","url","absoluteURLRegexp","encode","isEncoded","encodeURIComponent","fetchBeforeMiddleware","config","baseURL","data","headers","params","query","METHOD","toUpperCase","constructURL","transformData","header","toCapitalCase","join","initRouter","initialized","Routes","redirectRoute","defaultRoute","RedirectRoute","route","parentName","ParentName","rootRoute","abstract","baseRoute","parentParams","parentQuery","path","relativeURL","relativePath","count","newPath","newURL","validatePath","location","href","pushed","closestLink","closest","hasAttr","preventDefault","makeRoute","callBeforeLoad","routeLoaded","beforeLoad","__routerInstance__","currentRoutes","isCurrentRoute","currentRoute","beforeLoadRoute","callBeforeLeave","beforeLeave","beforeLeaveRoute","routerOptions","root","fallbackTo","isDefault","default","warn","wasRoot","Name","Route","unsubscribe","router","encodeParams","encodeQuery","hash","origin","buildURL","__isCurrentRoute__","currentRouteParams","subscribe","delete","forward","changeRoute","findRouteByURL","host","hostname","pathname","port","protocol","search","urlParams","routeURL","requiredQuery","decodeParams","decodeQuery","resolved","resolveURL","eventualParams","param","hasOwn","decode","DefaultRoute","decodeURIComponent","changeHistory","resolveParameter","nameErrorName","valueErrorName","nameMatch","regexp","window","appliedRegExps","id","canvasGetMethods","canvasRestMethods","htmlElements","svgElements","voidElements","htmlAllowedTagSymbols","htmlAllowedAttrSymbols","regexpSpecialCharacters","RangeError","v","methods","TypeError","a","d","f","r","s","Symbol","chars","word","token","def","ret","Case","case","eventualCases","setPrototypeOf","Function","deep","sum","func","descriptors","property","descriptor","props","getter","isFrozen","replacer","space","unshift","stringify","max","obj","getOwnPropertyDescriptor","getOwnPropertyNames","getOwnPropertySymbols","isContextObject","startKey","setter","reduce","secret","iterator","Promise","executor","reject","hiddenPromise","status","onReject","handled","onUnhandledRejection","onError","resolve","then","onFulfill","hiddenStatus","hiddenValue","realPromise","proxy","onRejected","onFulfilledOrRejected","isFunc","onFulfilled","promise","handle","handler","iterable","toResolve","next","done","console","bind","Func","called","canBeCalled","before","sync","contextLocked","context","middleware","afterAll","beforeAll","bindContext","bindArgs","times","lockContext","lockArgs","argsLocked","mark","time","timeEnd","unbindContext","unbindArgs","toRadian","PI","toDegree","ln2","LN2","ln10","LN10","Num","toDegrees","acos","asin","atan","asDegrees","cos","abort","clearTimeout","timeout","aborted","setTimeout","interval","log","power","pow","sin","tan","rej","fractionDigits","toExponential","toFixed","precision","toPrecision","abs","sqrt","cbrt","ceil","exp","ln","sign","keyOf","keyOfStrict","separator","pop","reverse","randomIndex","begin","compareFunction","sort","deleteCount","URL","progress","reader","FileReader","toReject","onprogress","onerror","onload","anchor","document","createElement","dataURL","setAttribute","click","createObjectURL","htmlSpecials","regexpSpecialsRegexp","searchString","position","revert","startsWith","escaped","symbol","searchValue","fromIndex","lastIndexOf","str","beginSlice","endSlice","substr","indexStart","indexEnd","substring","submitString","nodeSwitcher","InternalParsingError","ParsingError","throwUnexpectedError","globalIndex","elements","eventSeparator","textProperty","Node","propertyDescriptor","inputElements","xmlNS","xlinkNS","xhtmlNS","typeSwitcher","documentElement","namespaceURI","createElementNS","createTextNode","refSwitcher","filterSwitcher","is","innerSwitcher","paddings","borders","outerSwitcher","attrNSSwitcher","list","classList","insertAdjacentHTML","style","sheet","cssRules","rules","toHyphenCase","insertRule","dwayneData","strings","applied","setApplied","np1","attributes","getAttribute","getAttributeNS","setAttributeNS","_this4","first","load","isBroken","canvas","width","height","drawImage","byteString","atob","ab","ArrayBuffer","ia","Uint8Array","blur","pseudo","getComputedStyle","rule","childNodes","className","cloneNode","contains","appliedExpressions","getPropertyValue","getPropertyPriority","removeProperty","setProperty","cssText","toCamelCase","ctx","dataset","encoderOptions","toDataURL","deleteRule","event","eventInit","details","bubbles","cancelable","finalEvent","Event","createEvent","initEvent","dispatchEvent","focus","selectorText","hasAttribute","hasAttributeNS","currentDisplay","previousDisplay","insertBefore","appendChild","firstChild","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","complete","naturalWidth","naturalHeight","images","all","$elem","removeListeners","proper","broken","nextSibling","events","listeners","removeListener","listener","allListeners","removeEventListeners","has","newListener","addEventListener","removeEventListener","previousSibling","link","removeChild","removeAttribute","removeAttributeNS","2","1","created","txt","_arguments6","hasClass","level","validatorWrap","input","errors","validity","valid","validationMessage","validators","formErrors","form","inputs","dispatch","inputError","every","innerHeight","calcCSS","borderTopWidth","borderBottomWidth","boxSizing","paddingTop","paddingBottom","innerWidth","borderLeftWidth","borderRightWidth","paddingLeft","paddingRight","outerHeight","marginTop","marginBottom","outerWidth","marginLeft","marginRight","win","body","head","inputValue","rootBlocks","rootMixins","attrName","onEvalError","expression","originalArgs","onChange","instance","forDItem","forDEach","expr","DwayneStore","store","localWatchers","newResult","watcherBlock","index1","index2","arg","DwayneBlock","Subclass","isParentSignal","beforeRemove","variable","_this5","_this6","local","_this7","Blocks","Mixins","daysOfTheWeekNames","daysOfTheWeekAliases","monthsNames","monthsAliases","utc","coeffs","getSwitcher","setSwitcher","what","prefix","formats","format","replaceString","date1","date2","isBefore","started","coeff","w","setTime","toISOString","toLocaleString","valueOf","querySwitcher","queryParams","encodeOptions","rawHeaders","notToTransform","withoutBody","indexOfStrict","contentType","defaults","uploadMethods","Fetch","fetch","request","conf","toPush","dataConfig","urlConfig","xhr","auth","username","password","responseType","withCredentials","XMLHttpRequest","open","setRequestHeader","upload","onabort","ontimeout","onreadystatechange","readyState","response","responseText","parseHeaders","getAllResponseHeaders","statusText","catch","send","rawParam","paramName","paramObject","subscribers","history","pathSwitcher","part","statics"],"mappings":"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","preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}