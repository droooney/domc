{"version":3,"file":"dwayne.min.js","sources":["../lib/helpers/toStringTag.js","../lib/helpers/checkTypes.js","../lib/D.js","../lib/helpers/iterate.js","../lib/helpers/assign.js","../lib/helpers/defineProperty.js","../lib/helpers/toArray.js","../lib/helpers/validate.js","../lib/Alphabet.js","../lib/Switcher.js","../lib/Super.js","../lib/Func.js","../lib/Num.js","../lib/Arr.js","../lib/BlobObject.js","../lib/Str.js","../lib/helpers/markupToJSON.js","../lib/Elem.js","../lib/blocks/d-block.js","../lib/blocks/d-each.js","../lib/blocks/d-elements.js","../lib/blocks/d-if.js","../lib/blocks/d-item.js","../lib/blocks/d-switch.js","../lib/blocks/d-text.js","../lib/mixins/d-attr.js","../lib/mixins/d-bind.js","../lib/mixins/d-class.js","../lib/mixins/d-elem.js","../lib/mixins/d-hide.js","../lib/mixins/d-on.js","../lib/mixins/d-show.js","../lib/mixins/d-style.js","../lib/mixins/d-text.js","../lib/mixins/d-validate.js","../lib/mixins/d-value.js","../lib/Block.js","../lib/constants/formats.js","../lib/Dat.js","../lib/helpers/constructURL.js","../lib/Fetch.js","../lib/Router.js","../lib/constants/global.js","../lib/constants/appliedRegExps.js","../lib/constants/canvasMethods.js","../lib/constants/constructors.js","../lib/constants/elements.js","../lib/constants/htmlAllowedTagSymbols.js","../lib/constants/regexpSpecialCharacters.js","../lib/constants/validateCheckExpressions.js","../lib/helpers/Symbol.js","../lib/Promise.js","../lib/helpers/parseHeaders.js","../lib/helpers/transformData.js","../lib/helpers/resolveURL.js","../browser.js"],"sourcesContent":["/**\r\n * @module helpers/toStringTag\r\n * @private\r\n * @description Exports toStringTag method.\r\n */\r\n\r\n/**\r\n * @function toStringTag\r\n * @param {*} object - Object to get toStringTag of.\r\n * @returns {String} Cut string.\r\n * @description Cut \"Type\" string from \"[object Type]\" string that gotten from {}.toString,call(object).\r\n */\r\nexport function toStringTag(object) {\r\n  return {}.toString.call(object).replace(/^\\[object |]$/g, '');\r\n}\r\n","/**\r\n * @module helpers/checkTypes\r\n * @private\r\n * @mixin\r\n * @description Exports is<Type> methods.\r\n */\r\n\r\nimport { toStringTag } from './toStringTag';\r\n\r\n/**\r\n * @function isArray\r\n * @public\r\n * @param {*} value - Value to check if it is an array.\r\n * @returns {Boolean} If the argument is an array or not.\r\n * \r\n * @example\r\n * isArray([]);                             // true\r\n * isArray(0);                              // true\r\n * isArray(document.querySelectorAll('*')); // false\r\n */\r\nexport function isArray(value) {\r\n  return toStringTag(value) === 'Array';\r\n}\r\n\r\n/**\r\n * @function isArrayLike\r\n * @public\r\n * @param {*} value - Value to check if it is array-like.\r\n * @returns {Boolean} If the argument is array-like or not.\r\n * @description Basically returns if the argument has non-negative integer \"length\" property and isn't a function.\r\n * \r\n * @example\r\n * isArrayLike([]);                             // true\r\n * isArrayLike('');                             // true\r\n * isArrayLike(() => {});                       // false\r\n * isArrayLike(document.querySelectorAll('*')); // true\r\n */\r\nexport function isArrayLike(value) {\r\n  if (!value || isFunction(value)) {\r\n    return false;\r\n  }\r\n  \r\n  const length = value.length;\r\n  \r\n  return isInteger(length) && length >= 0;\r\n}\r\n\r\n/**\r\n * @function isBoolean\r\n * @public\r\n * @param {*} value - Value to check if it is a boolean.\r\n * @returns {Boolean} If the argument is a boolean or not.\r\n * \r\n * @example\r\n * isBoolean(true);               // true\r\n * isBoolean(new Boolean(false)); // true\r\n * isBoolean(null);               // false\r\n */\r\nexport function isBoolean(value) {\r\n  return toStringTag(value) === 'Boolean';\r\n}\r\n\r\n/**\r\n * @function isDate\r\n * @public\r\n * @param {*} value - Value to check if it is a date.\r\n * @returns {Boolean} If the argument is a date or not.\r\n * \r\n * @example\r\n * isDate(new Date());                 // true\r\n * isDate('1999-12-31T23:59:59.999Z'); // false\r\n */\r\nexport function isDate(value) {\r\n  return toStringTag(value) === 'Date';\r\n}\r\n\r\n/**\r\n * @function isDateLike\r\n * @public\r\n * @param {*} value - Value to check if it is date-like.\r\n * @returns {Boolean} If the argument is date-like or not.\r\n * @description Basically returns if new Date(argument) is not invalid date.\r\n * \r\n * @example\r\n * isDateLike(new Date());                 // true\r\n * isDateLike('1999-12-31T23:59:59.999Z'); // true\r\n * isDateLike(0);                          // true\r\n */\r\nexport function isDateLike(value) {\r\n  value = new Date(value);\r\n  \r\n  return !isNaN(value.getTime());\r\n}\r\n\r\n/**\r\n * @function isElement\r\n * @public\r\n * @param {*} value - Value to check if it is an element.\r\n * @returns {Boolean} If the argument is element or not.\r\n *\r\n * @example\r\n * isElement(document.querySelector('html')); // true\r\n */\r\nexport function isElement(value) {\r\n  return /Element$/.test(toStringTag(value));\r\n}\r\n\r\n/**\r\n * @function isFinite\r\n * @public\r\n * @param {*} value - Value to check if it is finite.\r\n * @returns {Boolean} If the argument is finite or not.\r\n * \r\n * @example\r\n * isFinite(0);        // true\r\n * isFinite('0');      // false\r\n * isFinite(Infinity); // false\r\n * isFinite(NaN);      // false\r\n */\r\nexport function isFinite(value) {\r\n  if (!isNumber(value)) {\r\n    return false;\r\n  }\r\n  \r\n  value = Number(value);\r\n\r\n  return !isNaN(value) && value !== Infinity && value !== -Infinity;\r\n}\r\n\r\n/**\r\n * @function isFunction\r\n * @public\r\n * @param {*} value - Value to check if it is a function.\r\n * @returns {Boolean} If the argument is a function or not.\r\n * \r\n * @example\r\n * isFunction(() => {});            // true\r\n * \r\n * const func = () => {};\r\n * Object.setPrototypeOf(func, {});\r\n * isFunction(func);                // true\r\n */\r\nexport function isFunction(value) {\r\n  return toStringTag(value) === 'Function' || typeof value === 'function';\r\n}\r\n\r\n/**\r\n * @function isInteger\r\n * @public\r\n * @param {*} value - Value to check if it is an integer.\r\n * @returns {Boolean} If the argument is an integer or not.\r\n *\r\n * @example\r\n * isInteger(0);             // true\r\n * isInteger(0.1);           // false\r\n * isInteger(new Number(0)); // true\r\n * isInteger('0');           // false\r\n * isInteger(Infinity);      // false\r\n * isInteger(NaN);           // false\r\n */\r\nexport function isInteger(value) {\r\n  return isNumber(value) && value % 1 === 0;\r\n}\r\n\r\n/**\r\n * @function isIntegerLike\r\n * @public\r\n * @param {*} value - Value to check if it is integer-like.\r\n * @returns {Boolean} If the argument is integer-like or not.\r\n *\r\n * @example\r\n * isIntegerLike(0);             // true\r\n * isIntegerLike(new Number(0)); // true\r\n * isIntegerLike(0.1);           // false\r\n * isIntegerLike('0');           // true\r\n */\r\nexport function isIntegerLike(value) {\r\n  value = parseInt(Number(value));\r\n\r\n  return !!(value || value === 0);\r\n}\r\n\r\n/**\r\n * @function isNaN\r\n * @public\r\n * @param {*} value - Value to check if it is NaN.\r\n * @returns {Boolean} If the argument is NaN or not.\r\n *\r\n * @example\r\n * isNaN(0);               // false\r\n * isNaN('NaN');           // false\r\n * isNaN(NaN);             // true\r\n * isNaN(new Number(NaN)); // true\r\n */\r\nexport function isNaN(value) {\r\n  if (!isNumber(value)) {\r\n    return false;\r\n  }\r\n  \r\n  value = Number(value);\r\n\r\n  return value !== value;\r\n}\r\n\r\n/**\r\n * @function isNull\r\n * @public\r\n * @param {*} value - Value to check if it is null.\r\n * @returns {Boolean} If the argument is null or not.\r\n *\r\n * @example\r\n * isNull(null);      // true\r\n * isNull(undefined); // false\r\n */\r\nexport function isNull(value) {\r\n  return value === null;\r\n}\r\n\r\n/**\r\n * @function isNil\r\n * @public\r\n * @param {*} value - Value to check if it is null or undefined.\r\n * @returns {Boolean} If the argument is null or undefined or not.\r\n *\r\n * @example\r\n * isNil(null);      // true\r\n * isNil(undefined); // true\r\n * isNil(false);     // false\r\n */\r\nexport function isNil(value) {\r\n  return value === null || typeof value === 'undefined';\r\n}\r\n\r\n/**\r\n * @function isNumber\r\n * @public\r\n * @param {*} value - Value to check if it is a number.\r\n * @returns {Boolean} If the argument is a number or not.\r\n *\r\n * @example\r\n * isNumber(0);             // true\r\n * isNumber(new Number(0)); // true\r\n * isNumber(NaN);           // true\r\n * isNumber('0');           // false\r\n */\r\nexport function isNumber(value) {\r\n  return toStringTag(value) === 'Number';\r\n}\r\n\r\n/**\r\n * @function isNumberLike\r\n * @public\r\n * @param {*} value - Value to check if it is number-like.\r\n * @returns {Boolean} If the argument is number-like or not.\r\n *\r\n * @example\r\n * isNumberLike(0);          // true\r\n * isNumberLike('0');        // true\r\n * isNumberLike('Infinity'); // true\r\n * isNumberLike('NaN');      // true\r\n * isNumberLike(NaN);        // true\r\n */\r\nexport function isNumberLike(value) {\r\n  if (isNaN(value) || value === 'NaN') {\r\n    return true;\r\n  }\r\n  \r\n  value = Number(value);\r\n  \r\n  return !!(value || value === 0);\r\n}\r\n\r\n/**\r\n * @function isObject\r\n * @public\r\n * @param {*} value - Value to check if it is an object.\r\n * @returns {Boolean} If the argument is an object or not.\r\n *\r\n * @example\r\n * isObject({});   // true\r\n * isObject(1);    // false\r\n * isObject(null); // false\r\n */\r\nexport function isObject(value) {\r\n  return !!value && (toStringTag(value) === 'Object' || typeof value === 'object' || value instanceof Object);\r\n}\r\n\r\n/**\r\n * @function isPlainObject\r\n * @public\r\n * @param {*} value - Value to check if it is a plain object.\r\n * @returns {Boolean} If the argument is a plain object or not.\r\n *\r\n * @example\r\n * const obj = {};\r\n *\r\n * ifPlainObject(obj); // true\r\n *\r\n * Object.setPrototypeOf(object, null);\r\n *\r\n * ifPlainObject(obj); // true\r\n *\r\n * Object.setPrototypeOf(object, {});\r\n *\r\n * ifPlainObject(obj); // false\r\n */\r\nexport function isPlainObject(value) {\r\n  if (isPrimitive(value)) {\r\n    return false;\r\n  }\r\n\r\n  const proto = Object.getPrototypeOf(value);\r\n\r\n  if (isNull(proto)) {\r\n    return true;\r\n  }\r\n\r\n  const constructor = proto.constructor;\r\n\r\n  return isFunction(constructor) &&\r\n    constructor instanceof constructor &&\r\n    isNull(Object.getPrototypeOf(proto));\r\n}\r\n\r\n/**\r\n * @function isPrimitive\r\n * @public\r\n * @param {*} value - Value to check if it is primitive.\r\n * @returns {Boolean} If the argument is primitive or not.\r\n *\r\n * @example\r\n * isPrimitive(1);             // true\r\n * isPrimitive({});            // false\r\n * isPrimitive('');            // true\r\n * isPrimitive(new Number(0)); // false\r\n * isPrimitive(true);          // true\r\n * isPrimitive(Symbol('foo')); // true\r\n * isPrimitive(null);          // true\r\n * isPrimitive(undefined);     // true\r\n */\r\nexport function isPrimitive(value) {\r\n  return isNull(value) || /^(number|string|boolean|symbol|undefined)$/.test(typeof value);\r\n}\r\n\r\n/**\r\n * @function isRegExp\r\n * @public\r\n * @param {*} value - Value to check if it is a regular expression.\r\n * @returns {Boolean} If the argument is a regular expression or not.\r\n *\r\n * @example\r\n * isRegExp(/foo/);             // true\r\n * isRegExp('/foo/');           // false\r\n * isRegExp(new RegExp('foo')); // true\r\n */\r\nexport function isRegExp(value) {\r\n  return toStringTag(value) === 'RegExp';\r\n}\r\n\r\n/**\r\n * @function isString\r\n * @public\r\n * @param {*} value - Value to check if it is a string.\r\n * @returns {Boolean} If the argument is a string or not.\r\n *\r\n * @example\r\n * isString('0');             // true\r\n * isString(new String('0')); // true\r\n */\r\nexport function isString(value) {\r\n  return toStringTag(value) === 'String';\r\n}\r\n\r\n/**\r\n * @function isSymbol\r\n * @public\r\n * @param {*} value - Value to check if it is a symbol.\r\n * @returns {Boolean} If the argument is a symbol or not.\r\n *\r\n * @example\r\n * isSymbol(Symbol('1')); // true\r\n */\r\nexport function isSymbol(value) {\r\n  return toStringTag(value) === 'Symbol';\r\n}\r\n\r\n/**\r\n * @function isUndefined\r\n * @public\r\n * @param {*} value - Value to check if it is undefined.\r\n * @returns {Boolean} If the argument is undefined or not.\r\n *\r\n * @example\r\n * isUndefined(null);      // false\r\n * isUndefined(undefined); // true\r\n */\r\nexport function isUndefined(value) {\r\n  return typeof value === 'undefined';\r\n}\r\n","/**\r\n * @module D\r\n * @private\r\n * @description Exports D function.\r\n */\r\n\r\nimport { constructors } from './constants';\r\n\r\n/**\r\n * @function D\r\n * @public\r\n * @param {*} [value] - Any value.\r\n * @returns {DWrap} Wrap of the argument.\r\n * @description Function for creating a D-wrap of an object.\r\n *\r\n * @example\r\n * D({});            // Super\r\n * D(() => {});      // Func\r\n * D([]);            // Arr\r\n * D(1);             // Num\r\n * D('1');           // Str\r\n * D(new Date());    // Dat\r\n * D(document.body); // Elem\r\n */\r\nfunction D(value) {\r\n  for (let i = constructors.length - 1; i >= 0; i--) {\r\n    const levelConstructors = constructors[i];\r\n\r\n    for (let k = 0, len = levelConstructors.length; k < len; k++) {\r\n      const constructor = levelConstructors[k];\r\n\r\n      if (value instanceof constructor.cls) {\r\n        return value;\r\n      }\r\n\r\n      if (constructor.check(value)) {\r\n        return new constructor.cls(value);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport * from './helpers/checkTypes';\r\nexport { D };\r\n","/**\r\n * @module helpers/iterate\r\n * @private\r\n * @description Exports iterate method.\r\n */\r\n\r\nimport { isArrayLike, isUndefined } from './checkTypes';\r\n\r\n/**\r\n * @callback IterationCallback\r\n * @param {*} value - Iteration value.\r\n * @param {String|Number} key - Iteration key.\r\n * @param {*} object - Initial iterable object.\r\n */\r\n\r\n/**\r\n * @function iterate\r\n * @param {(Object|Array|null|undefined)} object - Value to iterate over.\r\n * @param {IterationCallback} callback - Callback that is called on every iteration.\r\n * @returns {*} If callback returns not undefined then iterate returns this value.\r\n * @description Function for iterating over all types of values.\r\n */\r\nexport function iterate(object, callback) {\r\n  const array = isArrayLike(object);\r\n  const iteratedKeys = {};\r\n\r\n  let iterated = 0;\r\n\r\n  for (const key in object) {\r\n    if ({}.hasOwnProperty.call(iteratedKeys, key)) {\r\n      continue;\r\n    }\r\n\r\n    iteratedKeys[key] = true;\r\n\r\n    if ({}.hasOwnProperty.call(object, key)) {\r\n      if (array && iterated++ >= object.length) {\r\n        break;\r\n      }\r\n\r\n      const value = callback(object[key], array ? Number(key) : key, object);\r\n\r\n      if (!isUndefined(value)) {\r\n        return value;\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @module helpers/assign\r\n * @private\r\n * @description Exports Object.assign-like method.\r\n */\r\n\r\nimport { iterate } from './iterate';\r\n\r\n/**\r\n * @const\r\n * @function assign\r\n * @param {Object} target - Object to assign rest of arguments to.\r\n * @param {...Object} objects - Objects that are assigned to the target.\r\n * @returns {Object} Target.\r\n */\r\nexport function assign(target, ...objects) {\r\n  iterate(arguments, (source, index) => {\r\n    if (index) {\r\n      iterate(source, (value, key) => {\r\n        target[key] = value;\r\n      });\r\n    }\r\n  });\r\n    \r\n  return target;\r\n}\r\n","/**\r\n * @module helpers/defineProperty\r\n * @private\r\n * @description Exports defineProperty and dynamicDefineProperties methods.\r\n */\r\n\r\nimport { iterate } from './iterate';\r\n\r\n/**\r\n * @callback propertyGeneratorCallback\r\n * @param {String} name - Name of the property.\r\n * @param {Number} i - Index of the array.\r\n * @returns {*} Generated property.\r\n */\r\n\r\n/**\r\n * @function dynamicDefineProperties\r\n * @param {Object} target - Object to define properties for.\r\n * @param {Array} properties - Object which keys are properties.\r\n * @param {propertyGeneratorCallback} propertyGenerator - Callback for every property.\r\n * @returns {void}\r\n * @description Function for dynamic creating properties based on name of the method.\r\n */\r\nexport function dynamicDefineProperties(target, properties, propertyGenerator) {\r\n  iterate(properties, (name, i) => {\r\n    Object.defineProperty(target, name, {\r\n      value: propertyGenerator(name, i),\r\n      writable: true,\r\n      enumerable: false,\r\n      configurable: true\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * @function defineProperties\r\n * @param {Object} target - Target to define properties for.\r\n * @param {Object} properties - Object with properties needed to be assign to the target.\r\n * @returns {void}\r\n * @description Function for defining properties of an object.\r\n */\r\nexport function defineProperties(target, properties) {\r\n  iterate(properties, (method, name) => {\r\n    if (/^get /.test(name)) {\r\n      Object.defineProperty(target, name.replace(/^get /, ''), {\r\n        get: method,\r\n        set: undefined,\r\n        enumerable: false,\r\n        configurable: true\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    if (/^set /.test(name)) {\r\n      Object.defineProperty(target, name.replace(/^set /, ''), {\r\n        set: method,\r\n        get: undefined,\r\n        enumerable: false,\r\n        configurable: true\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    if (/^get\\/set /.test(name)) {\r\n      Object.defineProperty(target, name.replace(/^get\\/set /, ''), {\r\n        get: method.get,\r\n        set: method.set,\r\n        enumerable: false,\r\n        configurable: true\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    if (name !== 'Symbol.toStringTag') {\r\n      Object.defineProperty(target, name, {\r\n        value: method,\r\n        writable: true,\r\n        enumerable: false,\r\n        configurable: true\r\n      });\r\n    }\r\n  });\r\n}\r\n","/**\r\n * @module helpers/toArray\r\n * @private\r\n * @description Exports toArray method.\r\n */\r\n\r\nimport { isArray, isArrayLike, isString } from './checkTypes';\r\nimport { iterate } from './iterate';\r\n\r\n/**\r\n * @function toArray\r\n * @param {*} value - Any value.\r\n * @param {Boolean} [createNewArray = false] - If it is needed to create new array.\r\n * @returns {Array} Create array.\r\n * @description Function for creating an array of any value.\r\n */\r\nexport function toArray(value, createNewArray) {\r\n  if (isArray(value) && !createNewArray) {\r\n    return value;\r\n  }\r\n\r\n  const array = [];\r\n\r\n  if (isArrayLike(value) && !isString(value)) {\r\n    iterate(value, (value) => {\r\n      array.push(value);\r\n    });\r\n  } else {\r\n    array.push(value);\r\n  }\r\n\r\n  return array;\r\n}\r\n","/**\r\n * @module helpers/validate\r\n * @private\r\n * @description Exports validate method.\r\n */\r\n\r\nimport { validateCheckExpressions } from '../constants';\r\nimport { iterate } from './iterate';\r\nimport { isArray } from './checkTypes';\r\n\r\nconst numbers = ['1st', '2nd', '3rd', '4th', '5th', '6th', '7th'];\r\n\r\n/**\r\n * @function validate\r\n * @private\r\n * @param {Object} args - Arguments of function.\r\n * @param {Object} options - Object with validate parameters.\r\n * @param {String} [name] - Name of the function what called validate.\r\n * @returns {void}\r\n * @description Function for checking arguments of other functions.\r\n */\r\nexport function validate(args, options, name) {\r\n  iterate(options, (array, number) => {\r\n    if (!isArray(array)) {\r\n      array = [array];\r\n    }\r\n\r\n    iterate(array, (checker) => {\r\n      checker = validateCheckExpressions[checker];\r\n\r\n      if (!checker.check(args[number])) {\r\n        throw new checker.error(checker.text.replace('$n', numbers[number]) + (name ? ` (at ${ name })` : ''));\r\n      }\r\n    });\r\n  });\r\n}\r\n","/**\r\n * @module Alphabet\r\n * @private\r\n * @mixin\r\n * @description Exports Alphabet class.\r\n */\r\n\r\nimport { isString, validate, defineProperties, Symbol } from './helpers';\r\n\r\n/**\r\n * @typedef {String} Char\r\n * @public\r\n * @description A string of one char.\r\n */\r\n\r\n/**\r\n * @class Alphabet\r\n * @public\r\n * @param {ArrayLike} alphabet - Alphabet to wrap.\r\n * @returns {Alphabet} Instance of Alphabet.\r\n * @description Class for alphabet manipulations: add, delete symbols, generate a token from an alphabet,\r\n * check if an alphabet contains a word.\r\n *\r\n * @example\r\n * new Alphabet(['a', 'b', 'c']);\r\n */\r\nclass Alphabet {\r\n  constructor(alphabet = []) {\r\n    const a = {};\r\n\r\n    for (let i = 0, length = alphabet.length; i < length; i++) {\r\n      const char = alphabet[i];\r\n\r\n      if (!check(char)) {\r\n        throw new Error('Each element of an array must be a single char! (in Alphabet)');\r\n      }\r\n\r\n      a[char] = char;\r\n    }\r\n\r\n    /**\r\n     * @member {Object} Alphabet#$$\r\n     * @public\r\n     * @description The alphabet.\r\n     */\r\n    Object.defineProperty(this, '$$', { value: a });\r\n  }\r\n\r\n  /**\r\n   * @method Alphabet#add\r\n   * @public\r\n   * @param {...Char} chars - Chars to add.\r\n   * @returns {Alphabet} Returns this.\r\n   * @description Method for adding new letters to the alphabet.\r\n   *\r\n   * @example\r\n   * const alphabet = new Alphabet(['a', 'b', 'c']);\r\n   *\r\n   * alphabet.add('d', 'e');\r\n   *\r\n   * alphabet.get().$; // ['a', 'b', 'c', 'd', 'e']\r\n   */\r\n  add(...chars) {\r\n    for (let i = 0, length = chars.length; i < length; i++) {\r\n      const char = chars[i];\r\n\r\n      if (!check(char)) {\r\n        throw new Error('Each argument must be a single char! (in Alphabet#add)');\r\n      }\r\n\r\n      this.$$[char] = char;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Alphabet#contains\r\n   * @public\r\n   * @param {String} word - Word to check if it is in the alphabet or not.\r\n   * @returns {Boolean} If the word in the alphabet or not.\r\n   * @description Method that returns if a word is in alphabet or not.\r\n   *\r\n   * @example\r\n   * const alphabet = new Alphabet(['f', 'b', 'o', 'a', 'r']);\r\n   *\r\n   * alphabet.contains('foo'); // true\r\n   * alphabet.contains('bar'); // true\r\n   * alphabet.contains('baz'); // false\r\n   */\r\n  contains(word) {\r\n    validate([word], ['string'], 'Alphabet#contains');\r\n\r\n    const alphabet = this.$$;\r\n\r\n    for (let i = 0, length = word.length; i < length; i++) {\r\n      if (!alphabet[word[i]]) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @method Alphabet#delete\r\n   * @public\r\n   * @param {...Char} chars - Chars to delete.\r\n   * @returns {Alphabet} Returns this.\r\n   * @description Method for deleting letters from the alphabet.\r\n   *\r\n   * @example\r\n   * const alphabet = new Alphabet(['a', 'b', 'c', 'd']);\r\n   *\r\n   * alphabet.delete('a');\r\n   *\r\n   * alphabet.get().$; // ['b', 'c', 'd']\r\n   *\r\n   * alphabet.delete('b', 'd');\r\n   *\r\n   * alphabet.get().$; // ['c']\r\n   */\r\n  delete(...chars) {\r\n    for (let i = 0, length = chars.length; i < length; i++) {\r\n      const char = chars[i];\r\n\r\n      if (!check(char)) {\r\n        throw new Error('Each argument must be a single char! (in Alphabet#delete)');\r\n      }\r\n\r\n      delete this.$$[char];\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Alphabet#get\r\n   * @returns {Array} Wrap of an array of alphabet letters.\r\n   * @description Method for getting array of alphabet letters.\r\n   *\r\n   * @example\r\n   * new Alphabet(['a', 'b', 'c']).get().$; // ['a', 'b', 'c']\r\n   */\r\n  get() {\r\n    return Object.keys(this.$$);\r\n  }\r\n\r\n  /**\r\n   * @method Alphabet#token\r\n   * @public\r\n   * @param {Number} length - Token length.\r\n   * @returns {String} Token.\r\n   * @description Method for generating random token with given length.\r\n   *\r\n   * @example\r\n   * new Alphabet(['a', 'b', 'c']).token(4); // 'abcb'\r\n   */\r\n  token(length) {\r\n    validate([length], [['intLike', '>0']], 'Alphabet#token');\r\n\r\n    const alphabet = Object.keys(this.$$);\r\n    const len = alphabet.length;\r\n    let token = '';\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      token += alphabet[Math.floor(Math.random() * len)];\r\n    }\r\n\r\n    return token;\r\n  }\r\n}\r\n\r\ndefineProperties(Alphabet.prototype, {\r\n  [Symbol.toStringTag]: 'Alphabet'\r\n});\r\n\r\nfunction check(char) {\r\n  return isString(char) && char.length === 1;\r\n}\r\n\r\n/**\r\n * @function alphabet\r\n * @public\r\n * @param {String} string - String to generate an alphabet from.\r\n * @returns {Alphabet} New instance of Alphabet.\r\n * @description Function for creating an alphabet from a string that has format like this:\r\n * '&lt;char1&gt;-&lt;char2&gt; &lt;char3&gt;-&lt;char4&gt;'\r\n *\r\n * @example\r\n * const a1 = alphabet('a-c 1-3');\r\n * const a2 = alphabet('5-5f-g');\r\n *\r\n * a1.get().$; // ['1', '2', '3', 'a', 'b', 'c']\r\n * a2.get().$; // ['5', 'f', 'g']\r\n */\r\nfunction alphabet(string) {\r\n  validate([string], ['string']);\r\n\r\n  const ranges = string.split(/([\\s\\S]-+[\\s\\S])?/g);\r\n  const length = ranges.length;\r\n  const alphabet = [];\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    const range = ranges[i];\r\n\r\n    if (!range || range === ' ') {\r\n      continue;\r\n    }\r\n\r\n    if (/-/.test(range) && !/[\\s\\S]-+[\\s\\S]/.test(range)) {\r\n      throw new Error(`Wrong part of the string (${ range })! (in alphabet)`);\r\n    }\r\n\r\n    if (/-/.test(range)) {\r\n      const start = range.charCodeAt(0);\r\n      const end = range.charCodeAt(2);\r\n\r\n      if (start > end) {\r\n        throw new Error('Start of the range must be before its end! (in alphabet)');\r\n      }\r\n\r\n      for (let k = 0, len = end - start + 1; k < len; k++) {\r\n        alphabet.push(String.fromCharCode(start + k));\r\n      }\r\n\r\n      continue;\r\n    }\r\n\r\n    if (range.length === 1) {\r\n      alphabet.push(range);\r\n    }\r\n  }\r\n\r\n  return new Alphabet(alphabet);\r\n}\r\n\r\nexport { Alphabet, alphabet };\r\n","/**\r\n * @module Switcher\r\n * @private\r\n * @mixin\r\n * @description Exports Switcher class.\r\n */\r\n\r\nimport {\r\n  isArray, isFunction, isString, isUndefined,\r\n  iterate, Symbol, toArray, defineProperties\r\n} from './helpers';\r\n\r\n/**\r\n * @typedef {'boolean'|'equals'|'strictEquals'|'call'} SwitcherMode\r\n * @public\r\n * @description Enum type of switcher modes.\r\n */\r\n\r\n/**\r\n * @callback SwitcherCallCallback\r\n * @public\r\n * @param {*} value - Switcher value.\r\n * @returns {Boolean|*} On what the callback returns depends if the case is a match (truthy for the match).\r\n */\r\n\r\n/**\r\n * @callback SwitcherMatchCallback\r\n * @public\r\n * @param {...*} args - Arguments from the second argument that switcher was called with.\r\n * @param {*} value - Switcher value.\r\n * @param {*} matched - Switcher matched case.\r\n */\r\n\r\n/**\r\n * @class Switcher\r\n * @public\r\n * @param {Object} [cases = {}] - Object of cases.\r\n * @param {SwitcherMode} [mode = 'equals'] - Switcher mode.\r\n * @param {*} [defaultValue] - Switcher default value.\r\n * @returns {Switcher} - Instance of Switcher.\r\n * @description Switcher class for creating functions working similar to switch (value) {} construction,\r\n * but with the value assignment. Switcher instance is a function that accepts a value argument and an optional\r\n * args argument. Args with additional switcher value and matched case\r\n * are passed into the function of the matched case (if it is a function).\r\n *\r\n * @example\r\n * const switcher = new Switcher();\r\n * const switcher = new Switcher({\r\n *   case1: 'value1',\r\n *   case2: 'value2'\r\n * });\r\n * const switcher = new Switcher('strictEquals');\r\n * const switcher = new Switcher({\r\n *   case1: 'value1',\r\n *   case2: 'value2'\r\n * }, 'strictEquals');\r\n * const switcher = new Switcher('strictEquals', 'defaultValue');\r\n * const switcher = new Switcher({\r\n *   case1: 'value1',\r\n *   case2: 'value2'\r\n * }, 'strictEquals', 'defaultValue');\r\n *\r\n * // See [switcher]{@link switcher} examples for more information.\r\n */\r\nclass Switcher extends Function {\r\n  constructor(cases = {}, mode = 'equals', defaultValue) {\r\n    super();\r\n\r\n    if (isString(cases)) {\r\n      if (!isUndefined(arguments[1])) {\r\n        defaultValue = mode;\r\n      }\r\n\r\n      mode = cases;\r\n      cases = {};\r\n    }\r\n\r\n    const eventualCases = [];\r\n\r\n    iterate(cases, (value, Case) => {\r\n      eventualCases.push({ case: Case, value });\r\n    });\r\n\r\n    function switcher(value, args = []) {\r\n      const { mode, default: def, cases } = switcher.$$;\r\n\r\n      let ret = iterate(cases, ({ value: val, case: Case }) => {\r\n        if (\r\n          (mode === 'boolean' && Case) ||\r\n          /* eslint eqeqeq: 0 */\r\n          (mode === 'equals' && Case == value) ||\r\n          (mode === 'strictEquals' && Case === value) ||\r\n          (mode === 'call' && Case(value))\r\n        ) {\r\n          return { case: Case, value: val };\r\n        }\r\n      });\r\n\r\n      if (isUndefined(ret)) {\r\n        ret = { value: def };\r\n      }\r\n\r\n      if (!isFunction(ret.value)) {\r\n        return ret.value;\r\n      }\r\n\r\n      args = toArray(args, true);\r\n      args.push(value, ret.case);\r\n\r\n      return ret.value.apply(null, args);\r\n    }\r\n\r\n    /**\r\n     * @member Switcher#$$\r\n     * @type {Object}\r\n     * @protected\r\n     * @property {Array} cases - Array of cases.\r\n     * @property {SwitcherMode} mode - Switcher mode.\r\n     * @property {*} default - Switcher default value.\r\n     * @description Config parameters.\r\n     */\r\n    Object.defineProperty(switcher, '$$', {\r\n      value: {\r\n        cases: eventualCases,\r\n        mode,\r\n        default: defaultValue\r\n      }\r\n    });\r\n    Object.setPrototypeOf(switcher, Switcher.prototype);\r\n\r\n    return switcher;\r\n  }\r\n\r\n  /**\r\n   * @method Switcher#case\r\n   * @public\r\n   * @param {*|SwitcherCallCallback|Array.<*|SwitcherCallCallback>} cases - Case or an array of cases.\r\n   * @param {*|SwitcherMatchCallback} value - Value that has to be assigned or a function\r\n   * that is called with switcher value, if it's the case.\r\n   * @returns {Switcher} Returns this.\r\n   * @description Method for defining new cases.\r\n   *\r\n   * @example\r\n   * const sw = new Switcher()\r\n   *   .case(1, 'one')\r\n   *   .case(2, 'two');\r\n   *\r\n   * sw(1); // 'one'\r\n   * sw(2); // 'two'\r\n   */\r\n  case(cases, value) {\r\n    if (!isArray(cases)) {\r\n      cases = [cases];\r\n    }\r\n\r\n    iterate(cases, (Case) => {\r\n      this.$$.cases.push({ case: Case, value });\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Switcher#default\r\n   * @public\r\n   * @param {*} def - New default value.\r\n   * @returns {Switcher} Returns this.\r\n   * @description Method for redefining default switcher value.\r\n   *\r\n   * @example\r\n   * const sw = new Switcher()\r\n   *   .case(1, 'one')\r\n   *   .default('three');\r\n   *\r\n   * sw(1); // 'one'\r\n   * sw(2); // 'three'\r\n   */\r\n  default(def) {\r\n    this.$$.default = def;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Switcher#mode\r\n   * @public\r\n   * @param {SwitcherMode} mode - New switcher mode.\r\n   * @returns {Switcher} Returns this.\r\n   * @description Method for redefining switcher mode.\r\n   *\r\n   * @example\r\n   * const sw = new Switcher()\r\n   *   .mode('strictEquals')\r\n   *   .case(1, 'number')\r\n   *   .case('1', 'string');\r\n   *\r\n   * sw(1);   // 'number'\r\n   * sw('1'); // 'string'\r\n   */\r\n  mode(mode) {\r\n    this.$$.mode = mode;\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\ndefineProperties(Switcher.prototype, {\r\n  [Symbol.toStringTag]: 'Switcher'\r\n});\r\n\r\n/**\r\n * @function switcher\r\n * @public\r\n * @param {Object} [cases = {}] - Object of cases.\r\n * @param {SwitcherMode} [mode = 'equals'] - Switcher mode.\r\n * @param {*} [defaultValue] - Switcher default value.\r\n * @returns {Switcher} New instance of Switcher.\r\n * @description Simple wrap of [new Switcher(...)]{@link Switcher}.\r\n * \r\n * @example\r\n * const sw = switcher({\r\n *   1: 'foo',\r\n *   2: 'bar'\r\n * });\r\n * sw(1); // 'foo'\r\n * sw(2); // 'bar'\r\n * sw(3); // undefined\r\n * \r\n * @example\r\n * const sw = switcher()\r\n *   .case([1, 2], 'foo')\r\n *   .case(3, 'bar');\r\n *   \r\n * sw(1); // 'foo'\r\n * sw(2); // 'foo'\r\n * sw(3); // 'bar'\r\n * \r\n * @example\r\n * const sw = switcher('call')\r\n *   .case(isArray, 'array')\r\n *   .case(isString, 'string')\r\n *   .case(isNumber, 'number')\r\n *   .default('rest');\r\n *   \r\n * sw([]);    // 'array'\r\n * sw('foo'); // 'string'\r\n * sw(123);   // 'number'\r\n * sw({});    // 'rest'\r\n * \r\n * @example\r\n * const sw = switcher({\r\n *   1: (value) => {\r\n *     console.log(value + 1);\r\n *   },\r\n *   2: () => {\r\n *     console.log(value - 1);\r\n *   }\r\n * });\r\n * \r\n * sw(1); // 2\r\n * sw(2); // 1\r\n * \r\n * @example\r\n * const sw = switcher({\r\n *   first: (array) => array[0],\r\n *   last: (array) => array[array.length - 1]\r\n * }, 'equals', (array, index) => array[index]);\r\n * const array = [1, 2, 3, 4];\r\n * \r\n * sw('first', [array]); // 1\r\n * sw('last', [array]);  // 4\r\n * sw(1, [array]);       // 2\r\n * sw(2, [array]);       // 3\r\n */\r\nfunction switcher(cases, mode, defaultValue) {\r\n  return new Switcher(...arguments);\r\n}\r\n\r\n/**\r\n * @function when\r\n * @public\r\n * @param {Boolean|*} condition - Condition used for returning the proper value.\r\n * @param {*} value1 - Value if the condition is truthy.\r\n * @param {*} value2 - Value if the condition is falsey.\r\n * @returns {*} value1 or value2.\r\n * @description Synonym for\r\n * [ternary operator]{@link https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference/Operators/Conditional_Operator}.\r\n * \r\n * @example\r\n * when(true, 'true', 'false'); // 'true'\r\n */\r\nfunction when(condition, value1, value2) {\r\n  return condition ? value1 : value2;\r\n}\r\n\r\nexport { Switcher, switcher, when };\r\n","/**\r\n * @module Super\r\n * @private\r\n * @mixin\r\n * @description Exports Super class.\r\n */\r\n\r\nimport { D } from './D';\r\nimport { switcher } from './Switcher';\r\nimport { constructors } from './constants/constructors';\r\nimport {\r\n  isArray, isArrayLike, isDate, isElement, isFunction, isNil, isNaN, isNull,\r\n  isObject, isPlainObject, isPrimitive, isRegExp, isString, isUndefined,\r\n  validate, toStringTag, iterate, Symbol, defineProperties\r\n} from './helpers';\r\n\r\n/**\r\n * @typedef {Super|Arr|Func|Elem|Str|Num|Dat|BlobObject} DWrap\r\n * @public\r\n * @description Any kind of D-Wrap.\r\n */\r\n\r\n/**\r\n * @typedef {String|Number|null} Key\r\n * @public\r\n * @description Key type used in many methods.\r\n */\r\n\r\n/**\r\n * @typedef {TreeElement[]} Tree\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {Object} TreeElement\r\n * @public\r\n * @property {Key} key - Tree element key.\r\n * @property {*} value - Tree element value.\r\n * @description {@link Tree} element.\r\n */\r\n\r\n/**\r\n * @callback DeepIterationCallback\r\n * @public\r\n * @param {*} value - Current iteration value.\r\n * @param {String|Number} key - Current iteration key/index.\r\n * @param {*} object - Iteration object.\r\n * @param {Tree} tree - Tree of { key, value } elements.\r\n */\r\n\r\n/**\r\n * @callback DeepReduceCallback\r\n * @public\r\n * @param {*} previousValue - Previous value.\r\n * @param {*} value - Current iteration value.\r\n * @param {String|Number} key - Current iteration key/index.\r\n * @param {*} object - Iteration object.\r\n * @param {Tree} tree - Tree of { key, value } elements.\r\n */\r\n\r\n/**\r\n * @callback IterationCallback\r\n * @public\r\n * @param {*} value - Current iteration value.\r\n * @param {String|Number} key - Current iteration key/index.\r\n * @param {*} object - Iteration object.\r\n */\r\n\r\n/**\r\n * @callback JSONCallback\r\n * @public\r\n * @param {String|null} key - Current value.\r\n * @param {*} value - Current key.\r\n * @param {Object} object - Iteration object.\r\n */\r\n\r\n/**\r\n * @callback ObjectCallback\r\n * @public\r\n * @param {Object} newObject - The new object.\r\n * @param {*} value - Current iteration value.\r\n * @param {String|Number} key - Current iteration key/index.\r\n * @param {*} object - Iteration object.\r\n */\r\n\r\n/**\r\n * @callback ReduceCallback\r\n * @public\r\n * @param {*} previousValue - Previous value.\r\n * @param {*} value - Current iteration value.\r\n * @param {String|Number} key - Current iteration key/index.\r\n * @param {*} object - Iteration object.\r\n */\r\n\r\n/**\r\n * @callback SuperMethod\r\n * @public\r\n * @this {DWrap}\r\n */\r\n\r\nconst cloneSwitcher = switcher('call', (object) => object)\r\n  .case(\r\n    (object) => new Super(object) === object,\r\n    (object) => new (Object.getPrototypeOf(object).constructor)(new Super(object.$).deepClone().$)\r\n  )\r\n  .case(isElement, (object, deep) => object.clone(deep))\r\n  .case(isDate, (object) => new Date(object))\r\n  .case(isRegExp, (object) => new RegExp(object.source, object.toString().match(/[gimuy]*$/)[0]))\r\n  .case(isArray, () => [])\r\n  .case(isPlainObject, () => ({}));\r\n\r\n/**\r\n * @class Super\r\n * @public\r\n * @param {*} [object] - An object to wrap.\r\n * @returns {DWrap} Instance of Super.\r\n * @description Wrap of any value. And there is no way to create a nested wrap.\r\n *\r\n * @example\r\n * new Super({}); // Super\r\n */\r\nclass Super {\r\n  constructor(object) {\r\n    if (object instanceof Super) {\r\n      return object;\r\n    }\r\n\r\n    /**\r\n     * @member Super#$\r\n     * @type {*}\r\n     * @public\r\n     * @description Wrapped object.\r\n     */\r\n    Object.defineProperty(this, '$', { value: object });\r\n  }\r\n\r\n  /**\r\n   * @method Super.addStaticProperties\r\n   * @public\r\n   * @param {String|Object} property - Either a string of a property or an object\r\n   * with properties keys and values values.\r\n   * @param {Object} [value] - If a property parameter is a string this has to be a property value.\r\n   * @returns {this} Returns this.\r\n   * @description Sets static properties for DWrap constructors.\r\n   *\r\n   * @example\r\n   * Super.addStaticProperties('cool', 42);\r\n   * Super.addStaticProperties('superCool', 42*42);\r\n   */\r\n  static addStaticProperties(property, value) {\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: value };\r\n    }\r\n\r\n    defineProperties(this, property);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super.addInstanceProperties\r\n   * @public\r\n   * @param {String|Object} property - Either a string of a property or an object\r\n   * with properties keys and values values.\r\n   * @param {Object} [value] - If a property parameter is a string this has to be a property value.\r\n   * @returns {this} Returns this.\r\n   * @description Sets static properties for DWrap prototypes.\r\n   *\r\n   * @example\r\n   * Super.addInstanceProperties('cool', 42);\r\n   * Super.addInstanceProperties('superCool', 42*42);\r\n   */\r\n  static addInstanceProperties(property, value) {\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: value };\r\n    }\r\n\r\n    defineProperties(this.prototype, property);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#assign\r\n   * @public\r\n   * @param {...(Object|Super|*)} objects - Objects to be assigned to the object.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Synonym for\r\n   * [Object.assign]\r\n   * {@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2 }).assign({ a: 3 }, { c: 3, d: 4 }, { d: 5 }).$; // { a: 3, b: 2, c: 3, d: 5 }\r\n   */\r\n  assign(...objects) {\r\n    const object = this.$;\r\n\r\n    iterate(object && arguments, (o) => {\r\n      iterate(new Super(o).$, (value, key) => {\r\n        object[key] = value;\r\n      });\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#average\r\n   * @public\r\n   * @param {IterationCallback} [callback = null] - Callback that is passed to {@link Super#sum}.\r\n   * @returns {Number} Average value.\r\n   * @description Synonym for object.sum(callback) / object.count.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).average();                         // 2\r\n   * new Super({ a: 1, b: 2, c: 5 }).average((value) => value * value); // 10\r\n   */\r\n  average(callback = null) {\r\n    validate([callback], ['function||!'], 'Super#average');\r\n\r\n    return this.sum(callback) / this.count;\r\n  }\r\n\r\n  /**\r\n   * @method Super#call\r\n   * @public\r\n   * @param {SuperMethod} func - Function to be called with this context.\r\n   * @param {...*} args - Arguments to be called with.\r\n   * @returns {*} Return of function call.\r\n   * @description Synonym for func.call(DObject, ...args);\r\n   *\r\n   * @example\r\n   * new Super({ a: 1 }).call(function (b, c) {\r\n   *   return this.a + b + c;\r\n   * }, 2, 3); // 6\r\n   */\r\n  call(func, ...args) {\r\n    validate([func], ['function'], 'Super#call');\r\n\r\n    return func.apply(this, args);\r\n  }\r\n\r\n  /**\r\n   * @method Super#clone\r\n   * @returns {DWrap} New object.\r\n   * @description Method assigns properties of the object to an empty one and returns the new one.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2 } }).clone().$; // { a: 1, b: { c: 2 } }\r\n   */\r\n  clone() {\r\n    const object = this.$;\r\n    const clone = cloneSwitcher(object, [object, false]);\r\n\r\n    if (clone !== object) {\r\n      iterate(object, (value, key) => {\r\n        clone[key] = value;\r\n      });\r\n    }\r\n\r\n    return new this.constructor(clone);\r\n  }\r\n\r\n  /**\r\n   * @member Super#count\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description Returns number of own enumerable keys of the object.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2 }).count; // 2\r\n   */\r\n  get count() {\r\n    const object = this.$;\r\n\r\n    if (!isObject(object)) {\r\n      return 0;\r\n    }\r\n\r\n    return isArrayLike(object) ? object.length : Object.keys(object).length;\r\n  }\r\n\r\n  /**\r\n   * @method Super#create\r\n   * @public\r\n   * @param {Object} [descriptors] - Descriptors passed to Object.create.\r\n   * @returns {DWrap} New instance of D-Wrap.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create\r\n   * @description Synonym for\r\n   * [Object.create]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create}.\r\n   *\r\n   * @example\r\n   * new Super({}).create({\r\n   *   a: {\r\n   *     value: 1,\r\n   *     enumerable: false,\r\n   *     writable: true,\r\n   *     configurable: false\r\n   *   }\r\n   * }).$; // { a: 1 }\r\n   */\r\n  create(descriptors) {\r\n    return D(isPrimitive(this.$) ? undefined : Object.create(this.$, descriptors));\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepAssign\r\n   * @public\r\n   * @param {...*} objects - Objects to be assigned to the object.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Deep analogue of {@link Super#assign}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1 }).deepAssign(\r\n   *   {\r\n   *     b: {\r\n   *       c: 2\r\n   *     }\r\n   *   },\r\n   *   {\r\n   *     a: {\r\n   *       b: 1\r\n   *     }\r\n   *   },\r\n   *   {\r\n   *     a: {\r\n   *       c: {\r\n   *         d: 1\r\n   *       }\r\n   *     },\r\n   *     b: 2\r\n   *   },\r\n   *   null\r\n   * });\r\n   * // {\r\n   * //   a: {\r\n   * //     b: 1,\r\n   * //     c: {\r\n   * //       d: 1\r\n   * //     }\r\n   * //   },\r\n   * //   b: 2,\r\n   * // }\r\n   */\r\n  deepAssign(...objects) {\r\n    const object = this.$;\r\n\r\n    if (isPrimitive(object)) {\r\n      return this;\r\n    }\r\n\r\n    iterate(arguments, (o) => {\r\n      deepAssign(object, o);\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepClone\r\n   * @public\r\n   * @returns {DWrap} New instance of DWrap.\r\n   * @description Deep cloning method. Clones plain objects, arrays, regular expressions and elements, the rest stays the same.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: [2, 3], c: { d: 4 } }).deepClone().$;\r\n   * // {\r\n   * //   a: 1,\r\n   * //   b: [2, 3],\r\n   * //   c: { d: 4 }\r\n   * // }\r\n   */\r\n  deepClone() {\r\n    return new this.constructor(deepClone(this.$));\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepEquals\r\n   * @public\r\n   * @param {*} [object] - Object to compare to.\r\n   * @returns {Boolean} - If the objects are deep equal or not.\r\n   * @description Method for deep comparison of two objects.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1 }).deepEquals({ a: '1' }); // true\r\n   * new Super(/1/).deepEquals(/1/);             // true\r\n   */\r\n  deepEquals(object = null) {\r\n    return deepEqual(this.$, object, false);\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepEvery\r\n   * @public\r\n   * @param {DeepIterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy iteration goes on and if falsey it stops.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {Boolean} If all the callback calls returned truthy value.\r\n   * @description Returns boolean if all the callback calls returned truthy value.\r\n   * Otherwise false. Deep analogue of {@link Super#every}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepEvery((value) => value < 4); // true\r\n   * new Super({ a: {}, b: {}, c: {} }).deepEvery(() => false);              // true\r\n   */\r\n  deepEvery(callback, n) {\r\n    if (arguments.length === 1 && !isFunction(callback)) {\r\n      n = callback;\r\n      callback = Boolean;\r\n    } else if (arguments.length === 1) {\r\n      n = Infinity;\r\n    } else if (!arguments.length) {\r\n      n = Infinity;\r\n      callback = Boolean;\r\n    }\r\n\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepEvery');\r\n\r\n    n = Number(n);\r\n\r\n    return deepEvery(this.$, callback, n, [{ key: null, value: this.$ }]);\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepFilter\r\n   * @public\r\n   * @param {DeepIterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy the element is included and if falsey it's excluded.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {DWrap} New D-Wrap of filtered object.\r\n   * @description Returns filtered by the callback object. Deep analogue of {@link Super#filter}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFilter((value) => value%2).$;     // { a: 1, b: { d: 3 } }\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFilter((value) => value === 1).$; // { a: 1 }\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFilter((value) => value > 3).$;   // {}\r\n   */\r\n  deepFilter(callback, n) {\r\n    if (arguments.length === 1 && !isFunction(callback)) {\r\n      n = callback;\r\n      callback = Boolean;\r\n    } else if (arguments.length === 1) {\r\n      n = Infinity;\r\n    } else if (!arguments.length) {\r\n      n = Infinity;\r\n      callback = Boolean;\r\n    }\r\n\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepFilter');\r\n\r\n    const filtered = deepFilter(this.$, callback, n, [{ key: null, value: this.$ }]);\r\n\r\n    return D(isNil(filtered) ? filtered : filtered || {});\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepFind\r\n   * @public\r\n   * @param {DeepIterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy iteration stops and if falsey it continues.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {Tree|null} Tree of { key, value } if something found and null if not.\r\n   * @description Returns tree of the elements if something found and null if nothing found.\r\n   * Deep analogue of {@link Super#find}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFind((value) => value === 2);\r\n   * // [\r\n   * //   { key: 'c', value: 2 },\r\n   * //   { key: 'b', value: { c: 2, d: 3 } },\r\n   * //   { key: null, value: <initial object> }\r\n   * // ]\r\n   */\r\n  deepFind(callback, n) {\r\n    if (arguments.length === 1 && !isFunction(callback)) {\r\n      n = callback;\r\n      callback = Boolean;\r\n    } else if (arguments.length === 1) {\r\n      n = Infinity;\r\n    } else if (!arguments.length) {\r\n      n = Infinity;\r\n      callback = Boolean;\r\n    }\r\n\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepFind');\r\n\r\n    return deepFind(this.$, callback, n, [{ key: null, value: this.$ }]);\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepForEach\r\n   * @public\r\n   * @param {DeepIterationCallback} callback - Called on each iteration.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Method for iterating over any object. Deep analogue of {@link Super#forEach}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepForEach((value, key, object) => object[key] = value * value).$;\r\n   * // { a: 1, b: { c: 4, d: 9 } }\r\n   */\r\n  deepForEach(callback, n = Infinity) {\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepForEach');\r\n\r\n    n = Number(n);\r\n\r\n    deepForEach(this.$, callback, n, [{ key: null, value: this.$ }]);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepForEach\r\n   * @public\r\n   * @param {DeepIterationCallback} callback - Called on each iteration.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Method for iterating over any object. Deep analogue of {@link Super#forEach}.\r\n   * Unlike {@link Super#deepForEach} the callback is called on every value of every object inside\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepForEach((value, key, object) => object[key] = value * value).$;\r\n   * // { a: 1, b: { c: 4, d: 9 } }\r\n   */\r\n  deepForEachEntry(callback, n = Infinity) {\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepForEach');\r\n\r\n    n = Number(n);\r\n\r\n    deepForEachEntry(this.$, callback, n, [{ key: null, value: this.$ }]);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepFreeze\r\n   * @public\r\n   * @returns {DWrap} Returns this.\r\n   * @description Deep analogue of {@link Super#freeze}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFreeze(); // Super\r\n   */\r\n  deepFreeze() {\r\n    deepFreeze(this.$);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepMap\r\n   * @public\r\n   * @param {DeepIterationCallback} callback - Called on each iteration.\r\n   * Return value is used for creating a new object.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {DWrap} D-Wrap of the new object.\r\n   * @description Returns a wrap of a new object using the callback. Deep analogue of {@link Super#map}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepMap((value) => value * value).$;\r\n   * // { a: 1, b: { c: 4, d: 9 } }\r\n   */\r\n  deepMap(callback, n = Infinity) {\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepMap');\r\n\r\n    n = Number(n);\r\n\r\n    return D(deepMap(this.$, callback, n, [{ key: null, value: this.$ }]));\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepReduce\r\n   * @public\r\n   * @param {DeepReduceCallback} callback - Called on each iteration.\r\n   * Return value is passed to the next callback call.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @param {*} [IV = <first value>|undefined] - Initial value.\r\n   * @returns {*} Modified IV.\r\n   * @description Returns modified IV. Deep analogue of {@link Super#reduce}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepReduce((sum, value) => sum + value * value, Infinity, 0); // 14\r\n   */\r\n  deepReduce(callback, n = Infinity, IV) {\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepReduce');\r\n\r\n    n = Number(n);\r\n\r\n    const object = this.$;\r\n    const tree = [{ key: null, value: this.$ }];\r\n\r\n    if (arguments.length < 3) {\r\n      return deepReduce(object, callback, n, false, undefined, tree).IV;\r\n    }\r\n\r\n    return deepReduce(object, callback, n, false, { IV }, tree).IV;\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepSome\r\n   * @public\r\n   * @param {DeepIterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy iteration stops and if falsey it continues.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {Boolean} If all the callback calls returned truthy value.\r\n   * @description Returns true if some of the callback calls returned truthy value.\r\n   * Otherwise false. Deep analogue of {@link Super#some}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepSome((value) => value > 4); // false\r\n   * new Super({ a: {}, b: {}, c: {} }).deepSome(() => true);               // false\r\n   */\r\n  deepSome(callback, n) {\r\n    if (arguments.length === 1 && !isFunction(callback)) {\r\n      n = callback;\r\n      callback = Boolean;\r\n    } else if (arguments.length === 1) {\r\n      n = Infinity;\r\n    } else if (!arguments.length) {\r\n      n = Infinity;\r\n      callback = Boolean;\r\n    }\r\n\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepSome');\r\n\r\n    n = Number(n);\r\n\r\n    return deepSome(this.$, callback, n, [{ key: null, value: this.$ }]);\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepStrictEquals\r\n   * @public\r\n   * @param {*} [object] - Object to compare to.\r\n   * @returns {Boolean} - If the objects are deep strict equal or not.\r\n   * @description Method for deep strict comparison of two objects.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1 }).deepStrictEquals({ a: '1' }); // false\r\n   * new Super(/1/).deepStrictEquals(/1/);             // true\r\n   */\r\n  deepStrictEquals(object = null) {\r\n    return deepEqual(this.$, object, true);\r\n  }\r\n\r\n  /**\r\n   * @method Super#define\r\n   * @param {String|Object} property - Either a string of a property or a descriptors object.\r\n   * @param {Object} [descriptor] - If a property parameter is a string this has to be a property descriptor.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Synonym for both\r\n   * [Object.defineProperty]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty}\r\n   * and\r\n   * [Object.defineProperties]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties}.\r\n   *\r\n   * @example\r\n   * new Super({}).define('a', {\r\n   *   value: 1,\r\n   *   enumerable: false,\r\n   *   writable: true,\r\n   *   configurable: false\r\n   * }).$; // { a: 1 }\r\n   * new Super({}).define({\r\n   *   a: {\r\n   *     value: 1,\r\n   *     enumerable: false,\r\n   *     writable: true,\r\n   *     configurable: false\r\n   *   }\r\n   * }).$; // { a: 1 }\r\n   */\r\n  define(property, descriptor) {\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: descriptor };\r\n    }\r\n\r\n    property = new Super(property).$;\r\n\r\n    if (isObject(this.$)) {\r\n      Object.defineProperties(this.$, property);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#delete\r\n   * @public\r\n   * @param {...String} props - List of properties to delete.\r\n   * @returns {DWrap} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/delete\r\n   * @description Synonym for multiple\r\n   * [\"delete\" operator]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/delete}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).delete('c', 'a').$; // { b: 2 }\r\n   */\r\n  delete(...props) {\r\n    const object = this.$;\r\n\r\n    iterate(object && props, (property) => {\r\n      delete object[property];\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#equals\r\n   * @public\r\n   * @param {*} [object] - Object to compare.\r\n   * @returns {Boolean} If the objects are equal or not.\r\n   * @description Returns true if objects are equal using '==' operator and false if not. NaNs are considered to be equal.\r\n   *\r\n   * @example\r\n   * new Super(3).equals('3');   // true\r\n   * new Super(NaN).equals(NaN); // true\r\n   */\r\n  equals(object) {\r\n    const o = this.$;\r\n\r\n    object = new Super(object).$;\r\n\r\n    /* eslint eqeqeq: 0 */\r\n    return o == object || (isNaN(o) && isNaN(object));\r\n  }\r\n\r\n  /**\r\n   * @method Super#every\r\n   * @public\r\n   * @param {IterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy iteration goes on and if falsey it stops.\r\n   * @returns {Boolean} If all the callback calls returned truthy value.\r\n   * @description Returns boolean if all the callback calls returned truthy value.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).every((value) => value < 4); // true\r\n   * new Super({}).every(() => false);                            // true\r\n   */\r\n  every(callback = Boolean) {\r\n    validate([callback], ['function'], 'Super#every');\r\n\r\n    return iterate(this.$, (value, key, object) => {\r\n      if (!callback(value, key, object)) {\r\n        return false;\r\n      }\r\n    }) !== false;\r\n  }\r\n\r\n  /**\r\n   * @method Super#filter\r\n   * @public\r\n   * @param {IterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy the element is included and if falsey it's excluded.\r\n   * @returns {DWrap} New D-Wrap of filtered object.\r\n   * @description Returns filtered by the callback object.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).filter((value) => value%2).$; // { a: 1, c: 3 }\r\n   * new Super(null).filter((value) => value%2).$;                 // null\r\n   */\r\n  filter(callback = Boolean) {\r\n    validate([callback], ['function'], 'Super#filter');\r\n\r\n    const object = this.$;\r\n    const array = isArrayLike(object);\r\n\r\n    /* eslint no-nested-ternary: 0 */\r\n    const o = array ? [] : isNil(object) ? object : {};\r\n\r\n    iterate(object, (value, key) => {\r\n      if (callback(value, key, object)) {\r\n        if (array) {\r\n          o.push(value);\r\n        } else {\r\n          o[key] = value;\r\n        }\r\n      }\r\n    });\r\n\r\n    return D(o);\r\n  }\r\n\r\n  /**\r\n   * @method Super#find\r\n   * @public\r\n   * @param {IterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy iteration stops and if falsey it continues.\r\n   * @returns {{ key: Key, value: * }|null} { key, value } if found and null if not.\r\n   * @description Returns found { key, value } if something found and null if nothing found.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).find((value) => value === 2); // { key: 'b', value: 2 }\r\n   * new Super([1, 2, 3]).find((value) => value === 2);            // { key: 1, value: 2 }\r\n   */\r\n  find(callback) {\r\n    validate([callback], ['function'], 'Super#find');\r\n\r\n    return iterate(this.$, (value, key, object) => {\r\n      if (callback(value, key, object)) {\r\n        return { key, value };\r\n      }\r\n    }) || null;\r\n  }\r\n\r\n  /**\r\n   * @method Super#forEach\r\n   * @public\r\n   * @param {IterationCallback} callback - Called on each iteration.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Method for iterating over any object.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).forEach((value, key, object) => {\r\n   *   object[key] = value * value;\r\n   * }).$; // { a: 1, b: { c: 4, d: 5 } }\r\n   */\r\n  forEach(callback) {\r\n    validate([callback], ['function'], 'Super#forEach');\r\n\r\n    iterate(this.$, (value, key, object) => {\r\n      callback(value, key, object);\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#freeze\r\n   * @public\r\n   * @returns {DWrap} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\r\n   * @description Synonym for\r\n   * [Object.freeze]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).freeze(); // Super\r\n   */\r\n  freeze() {\r\n    Object.freeze(this.$);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#get\r\n   * @public\r\n   * @param {String|Object.<String, Function>} property - Either a string of a property or a getters object.\r\n   * @param {Function} [getter] - If a property parameter is a string this has to be a getter function.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Method for defining getters.\r\n   *\r\n   * @example\r\n   * const object1 = new Super({}).get('a', () => 1).$;\r\n   * object1.a; // 1\r\n   *\r\n   * const object2 = new Super({}).get({\r\n   *   a: () => 2\r\n   * }).$;\r\n   * object2.a; // 2\r\n   */\r\n  get(property, getter) {\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: getter };\r\n    }\r\n\r\n    const object = this.$;\r\n\r\n    iterate(isObject(object) && new Super(property).$, (getter, property) => {\r\n      Object.defineProperty(object, property, { get: getter });\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#has\r\n   * @public\r\n   * @param {String|*} key - Property to check.\r\n   * @returns {Boolean} Returns true if the object has the key and false if not.\r\n   * @see https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/in\r\n   * @description Synonym for\r\n   * [\"in\" operator]{@link https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/in}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).has('b'); // true\r\n   */\r\n  has(key) {\r\n    const object = this.$;\r\n\r\n    if (!isObject(object)) {\r\n      return false;\r\n    }\r\n\r\n    return key in object;\r\n  }\r\n\r\n  /**\r\n   * @method Super#hasOwn\r\n   * @public\r\n   * @param {String|*} key - Property to check.\r\n   * @returns {Boolean} Returns true if the object has its own key and false if not.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\r\n   * @description Synonym for\r\n   * [Object#hasOwnProperty]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).hasOwn('b');              // true\r\n   * new Super({ a: 1, b: 2, c: 3 }).hasOwn('hasOwnProperty'); // false\r\n   */\r\n  hasOwn(key) {\r\n    const object = this.$;\r\n\r\n    if (!isObject(object)) {\r\n      return false;\r\n    }\r\n\r\n    return {}.hasOwnProperty.call(object, key);\r\n  }\r\n\r\n  /**\r\n   * @method Super#instanceof\r\n   * @public\r\n   * @param {Function} constructor - Constructor to check.\r\n   * @returns {Boolean} If the object is an instance of constructor.\r\n   * @see https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/instanceof\r\n   * @description Synonym for\r\n   * [\"instanceof\" operator]{@link https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/instanceof}.\r\n   */\r\n  instanceof(constructor) {\r\n    return this.$ instanceof constructor;\r\n  }\r\n\r\n  /**\r\n   * @method Super#isFrozen\r\n   * @public\r\n   * @returns {Boolean} If the object is frozen.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\r\n   * @description Synonym for\r\n   * [Object.isFrozen]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen}.\r\n   *\r\n   * @example\r\n   * new Super({}).freeze().isFrozen(); // true\r\n   */\r\n  isFrozen() {\r\n    return Object.isFrozen(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Super#json\r\n   * @public\r\n   * @param {JSONCallback|String[]} [replacer] - See the link.\r\n   * @param {String|Number} [space] - See the link.\r\n   * @returns {String} JSON string.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\r\n   * @description Synonym for\r\n   * [JSON.stringify]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).json(); // '{\"a\":1,\"b\":2,\"c\":3}'\r\n   * new Super({ a: 1, b: 2, c: 3 }).json('    ');\r\n   * // {\r\n   * //     \"a\": 1,\r\n   * //     \"b\": 2,\r\n   * //     \"c\": 3\r\n   * // }\r\n   * new Super({ a: 1, b: 2, c: 3 }).json((key, value) => {\r\n   *   if (typeof value === 'number') {\r\n   *     return value%2 ? key + value0 : undefined;\r\n   *   }\r\n   *\r\n   *   return value;\r\n   * }, 2);\r\n   * // {\r\n   * //   \"a\": \"a1\",\r\n   * //   \"c\": \"c3\"\r\n   * // }\r\n   */\r\n  json(replacer, space) {\r\n    if (arguments.length === 1 && !isFunction(replacer) && !isArray(replacer)) {\r\n      [].unshift.call(arguments, null);\r\n    }\r\n\r\n    [].unshift.call(arguments, this.$);\r\n\r\n    return JSON.stringify.apply(JSON, arguments);\r\n  }\r\n\r\n  /**\r\n   * @method Super#keyOf\r\n   * @public\r\n   * @param {*} value - Value to find.\r\n   * @returns {String|Number|null} A key or an index if found and null if not.\r\n   * @description Method for finding equal to the argument value in the object. NaNs are considered to be equal.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).keyOf(2);   // 'b'\r\n   * new Super({ a: 1, b: 2, c: 3 }).keyOf('2'); // 'b'\r\n   */\r\n  keyOf(value) {\r\n    const key = iterate(this.$, (val, key) => {\r\n      if (val == value || (isNaN(val) && isNaN(value))) {\r\n        return key;\r\n      }\r\n    });\r\n\r\n    return isUndefined(key) ? null : key;\r\n  }\r\n\r\n  /**\r\n   * @method Super#keyOfStrict\r\n   * @public\r\n   * @param {*} value - Value to find.\r\n   * @returns {String|Number|null} A key or an index if found and null if not.\r\n   * @description Method for finding strict equal to the argument value in the object. NaNs are considered to be equal.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).keyOfStrict(2);   // 'b'\r\n   * new Super({ a: 1, b: 2, c: 3 }).keyOfStrict('2'); // 'b'\r\n   */\r\n  keyOfStrict(value) {\r\n    const key = iterate(this.$, (val, key) => {\r\n      if (val === value || (isNaN(val) && isNaN(value))) {\r\n        return key;\r\n      }\r\n    });\r\n\r\n    return isUndefined(key) ? null : key;\r\n  }\r\n\r\n  /**\r\n   * @method Super#keys\r\n   * @public\r\n   * @returns {DWrap} A wrap of the keys array.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\r\n   * @description Synonym for\r\n   * [Object.keys]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/keys}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).keys().$; // ['a', 'b', 'c']\r\n   * new Super(null).keys().$;                 // []\r\n   */\r\n  keys() {\r\n    const object = this.$;\r\n\r\n    return D(isObject(object) ? Object.keys(object) : []);\r\n  }\r\n\r\n  /**\r\n   * @method Super#map\r\n   * @public\r\n   * @param {IterationCallback} callback - Called on each iteration.\r\n   * Return value is used for creating a new object.\r\n   * @returns {DWrap} D-Wrap of the new object.\r\n   * @description Returns a wrap of a new object using the callback.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).map((value) => value * 2).$; // { a: 2, b: 4, c: 6 }\r\n   * new Super(null).map((value) => value * 2).$;                 // null\r\n   */\r\n  map(callback) {\r\n    validate([callback], ['function'], 'Super#map');\r\n\r\n    const object = this.$;\r\n    const o = isArrayLike(object) ? [] : isNull(object) ? null : {};\r\n\r\n    iterate(object, (value, key) => {\r\n      o[key] = callback(value, key, object);\r\n    });\r\n\r\n    return D(o);\r\n  }\r\n\r\n  /**\r\n   * @method Super#max\r\n   * @public\r\n   * @param {IterationCallback} callback - Called on each iteration.\r\n   * Return value is used for comparison with the previous max value.\r\n   * @returns {{key: Key, value: Number}} Object with max value and key of the max value.\r\n   * @description Method for finding max value in the object.\r\n   * If no callback is present comparison is between values of the object.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).max();                     // { key: 'c', value: 3 }\r\n   * new Super({ a: 1, b: 2, c: 3 }).max((value) => 4 - value); // { key: 'a', value: 3 }\r\n   * new Super({ a: 'a', b: 'b', c: 'c' }).max();               // { key: null, value: -Infinity }\r\n   */\r\n  max(callback = null) {\r\n    validate([callback], ['function||!'], 'Super#max');\r\n\r\n    return this.object((max, value, key, object) => {\r\n      const val = Number(callback ? callback(value, key, object) : value);\r\n\r\n      if (val > max.value) {\r\n        max.key = key;\r\n        max.value = val;\r\n      }\r\n    }, { key: null, value: -Infinity }).$;\r\n  }\r\n\r\n  /**\r\n   * @method Super#min\r\n   * @public\r\n   * @param {IterationCallback} callback - Called on each iteration.\r\n   * Return value is used for comparison with the previous min value.\r\n   * @returns {{key: Key, value: Number}} Object with min value and key of the min value.\r\n   * @description Method for finding min value in the object.\r\n   * If no callback is present comparison is between values of the object.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).min();                     // { key: 'a', value: 1 }\r\n   * new Super({ a: 1, b: 2, c: 3 }).min((value) => 4 - value); // { key: 'c', value: 1 }\r\n   * new Super({ a: 'a', b: 'b', c: 'c' }).min();               // { key: null, value: Infinity }\r\n   */\r\n  min(callback = null) {\r\n    validate([callback], ['function||!'], 'Super#min');\r\n\r\n    return this.object((min, value, key, object) => {\r\n      const val = Number(callback ? callback(value, key, object) : value);\r\n\r\n      if (val < min.value) {\r\n        min.key = key;\r\n        min.value = val;\r\n      }\r\n    }, { key: null, value: Infinity }).$;\r\n  }\r\n\r\n  /**\r\n   * @method Super#object\r\n   * @public\r\n   * @param {ObjectCallback} callback - Called on each iteration.\r\n   * @param {Object|*} [object = {}] - Object that is passed to the callback.\r\n   * @returns {DWrap} Wrap of the new object.\r\n   * @description Type of {@link Super#reduce}.\r\n   * The object is passed as an argument into the callback. The output is this object.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2 }).object((object, value, key) => {\r\n   *   object[key] = value;\r\n   *   object[key + key] = value * 2;\r\n   * }).$; // { a: 1, aa: 2, b: 2, bb: 4 }\r\n   */\r\n  object(callback, object = {}) {\r\n    validate([callback], ['function'], 'Super#object');\r\n\r\n    iterate(this.$, (value, key, obj) => {\r\n      callback(object, value, key, obj);\r\n    });\r\n\r\n    return D(object);\r\n  }\r\n\r\n  /**\r\n   * @method Super#prop\r\n   * @public\r\n   * @param {String|Object.<String, *>} property - Either a string of a property or an assigned object.\r\n   * @param {*} [value] - If a property parameter is a string\r\n   * this has to be an assigned value if it's present.\r\n   * @returns {DWrap|*} Returns this if it's a setter or a value if getter.\r\n   * @description Method for getting and setting properties.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).prop('a');              // 1\r\n   * new Super({ a: 1, b: 2, c: 3 }).prop('a', 7).$;         // { a: 7, b: 2, c: 3 }\r\n   * new Super({ a: 1, b: 2, c: 3 }).prop({ a: 7, b: 8 }).$; // { a: 7, b: 8, c: 3 }\r\n   */\r\n  prop(property, value) {\r\n    if (arguments.length <= 1 && isString(property)) {\r\n      return this.$ ? this.$[property] : undefined;\r\n    }\r\n\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: value };\r\n    }\r\n\r\n    return this.assign(property);\r\n  }\r\n\r\n  /**\r\n   * @method Super#propertyDescriptor\r\n   * @public\r\n   * @param {String} property - Property of the object.\r\n   * @returns {Object|undefined} Property descriptor.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\r\n   * @descriptor Synonym for\r\n   * [Object.getOwnPropertyDescriptor]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1 }).propertyDescriptor('a');\r\n   * // {\r\n   * //   value: 1,\r\n   * //   enumerable: true,\r\n   * //   writable: true,\r\n   * //   configurable: true\r\n   * // }\r\n   */\r\n  propertyDescriptor(property) {\r\n    const object = this.$;\r\n\r\n    return isObject(object) ? Object.getOwnPropertyDescriptor(object, property) : undefined;\r\n  }\r\n\r\n  /**\r\n   * @method Super#propertyNames\r\n   * @public\r\n   * @returns {DWrap} D-Wrap of the names array.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\r\n   * @descriptor Synonym for\r\n   * [Object.getOwnPropertyNames]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2 }).define('c', { value: 3 }).$; // ['a', 'b', 'c']\r\n   */\r\n  propertyNames() {\r\n    const object = this.$;\r\n\r\n    return D(isObject(object) ? Object.getOwnPropertyNames(object) : []);\r\n  }\r\n\r\n  /**\r\n   * @method Super#propertySymbols\r\n   * @public\r\n   * @returns {DWrap} D-Wrap of the names array.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\r\n   * @descriptor Synonym for\r\n   * [Object.getOwnPropertySymbols]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols}.\r\n   *\r\n   * @example\r\n   * new Super({ [Symbol('foo')]: 1 }).define(Symbol('bar'), { value: 2 }).$; // [Symbol('foo'), Symbol('bar')]\r\n   */\r\n  propertySymbols() {\r\n    const object = this.$;\r\n\r\n    return D(isObject(object) ? Object.getOwnPropertySymbols(object) : []);\r\n  }\r\n\r\n  /**\r\n   * @method Super#proto\r\n   * @public\r\n   * @param {*} [proto] - If it's present it's set as a prototype to the object.\r\n   * @returns {DWrap} In getter mode returns wrap of the prototype and in setter mode returns this.\r\n   * @description Synonym for both\r\n   * [Object.getPrototypeOf]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf}\r\n   * and\r\n   * [Object.setPrototypeOf]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf}.\r\n   */\r\n  proto(proto) {\r\n    const object = this.$;\r\n    const isContextObject = !isNil(object);\r\n\r\n    if (arguments.length) {\r\n      if (isContextObject && (isObject(proto) || isNull(proto))) {\r\n        Object.setPrototypeOf(object, proto);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    return isContextObject ? new Super(Object.getPrototypeOf(object)) : new Super();\r\n  }\r\n\r\n  /**\r\n   * @method Super#reduce\r\n   * @public\r\n   * @param {ReduceCallback} callback - Called on each iteration.\r\n   * Return value is passed to the next callback call.\r\n   * @param {*} [IV = <first value>|undefined] - Initial value.\r\n   * @returns {*} Modified IV.\r\n   * @description Returns modified IV. If the second argument is not present first value in the object is taken\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).reduce((sum, value) => sum + value * value, 0); // 14\r\n   */\r\n  reduce(callback, IV) {\r\n    validate([callback], ['function'], 'Super#reduce');\r\n\r\n    const object = this.$;\r\n\r\n    let startKey;\r\n\r\n    if (arguments.length === 1) {\r\n      iterate(object, (value, key) => {\r\n        startKey = key;\r\n        IV = value;\r\n\r\n        return true;\r\n      });\r\n    }\r\n\r\n    iterate(object, (value, key) => {\r\n      if (key !== startKey) {\r\n        IV = callback(IV, value, key, object);\r\n      }\r\n    });\r\n\r\n    return IV;\r\n  }\r\n\r\n  /**\r\n   * @method Super#set\r\n   * @public\r\n   * @param {String|Object.<String, Function>} property - Either a string of a property or a setters object.\r\n   * @param {Function} [setter] - If a property parameter is a string this has to be a setter function.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Method for defining setters.\r\n   *\r\n   * @example\r\n   * const object = new Super({})\r\n   *   .get('public', function () {\r\n   *     return this._private;\r\n   *   })\r\n   *   .set('public', function (value) {\r\n   *     if (typeof value === 'number') {\r\n   *       this._private = value;\r\n   *     }\r\n   *   });\r\n   * object.prop('public', '1').$; // { public: undefined }\r\n   * object.prop('public', 1).$;   // { public: 1, _private: 1 }\r\n   *\r\n   * new Super({}).set({\r\n   *   public(value) {\r\n   *     if (typeof value === 'number') {\r\n   *       this._private = value;\r\n   *     }\r\n   *   }\r\n   * });\r\n   */\r\n  set(property, setter) {\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: setter };\r\n    }\r\n\r\n    const object = this.$;\r\n\r\n    iterate(isObject(object) && new Super(property).$, (setter, property) => {\r\n      Object.defineProperty(object, property, { set: setter });\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#some\r\n   * @public\r\n   * @param {IterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy iteration stops and if falsey it continues.\r\n   * @returns {Boolean} If all the callback calls returned truthy value.\r\n   * @description Returns true if some of the callback calls returned truthy value. Otherwise false.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).some((value) => value > 4); // false\r\n   * new Super({}).some(() => true);                             // false\r\n   */\r\n  some(callback = Boolean) {\r\n    validate([callback], ['function'], 'Super#some');\r\n\r\n    return iterate(this.$, (value, key, object) => {\r\n      if (callback(value, key, object)) {\r\n        return true;\r\n      }\r\n    }) || false;\r\n  }\r\n\r\n  /**\r\n   * @method Super#strictEquals\r\n   * @public\r\n   * @param {*} [object] - Object to compare.\r\n   * @returns {Boolean} If the objects are equal or not.\r\n   * @description Returns true if objects are equal using '===' operator and false if not.\r\n   * NaNs are considered to be strict equal.\r\n   *\r\n   * @example\r\n   * new Super(3).strictEquals('3');   // false\r\n   * new Super(NaN).strictEquals(NaN); // true\r\n   */\r\n  strictEquals(object) {\r\n    const o = this.$;\r\n\r\n    object = new Super(object).$;\r\n\r\n    return o === object || (isNaN(o) && isNaN(object));\r\n  }\r\n\r\n  /**\r\n   * @method Super#sum\r\n   * @public\r\n   * @param {IterationCallback} [callback = null] - Called on each iteration.\r\n   * @returns {Number} Sum.\r\n   * @description Type of {@link Super#reduce}.\r\n   * If the callback is present it's used for summing. If not the value is used.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).sum();                         // 6\r\n   * new Super({ a: 1, b: 2, c: 3 }).sum((value) => value * value); // 14\r\n   */\r\n  sum(callback = null) {\r\n    validate([callback], ['function||!'], 'Super#sum');\r\n\r\n    return this.reduce((sum, value, key, object) => (\r\n      sum + Number(callback ? callback(value, key, object) : value)\r\n    ), 0);\r\n  }\r\n\r\n  toJSON() {\r\n    return this.$;\r\n  }\r\n\r\n  /**\r\n   * @member Super#toStringTag\r\n   * @type {String}\r\n   * @public\r\n   * @readonly\r\n   * @description Returns toString tag of the object.\r\n   *\r\n   * @example\r\n   * new Super({}).toStringTag; // 'Object'\r\n   * new Super([]).toStringTag; // 'Array'\r\n   * new Super(1).toStringTag;  // 'Number'\r\n   */\r\n  get toStringTag() {\r\n    return toStringTag(this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Super#type\r\n   * @type {String}\r\n   * @public\r\n   * @readonly\r\n   * @description Synonym for\r\n   * [\"typeof\" operator]{@link https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/instanceof}..\r\n   *\r\n   * @example\r\n   * new Super({}).type;   // 'object'\r\n   * new Super(1).type;    // 'number'\r\n   * new Super('1').type;  // 'string'\r\n   * new Super(true).type; // 'boolean'\r\n   */\r\n  get type() {\r\n    return typeof this.$;\r\n  }\r\n\r\n  /**\r\n   * @method Super#value\r\n   * @public\r\n   * @param {String|Object.<String, *>} property - Either a string of a property or a values object.\r\n   * @param {Object.<String, *>} [value] - If a property parameter is a string this has to be a value to be set.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Method for defining non-enumerable, non-writable, non-configurable values.\r\n   * Synonym for object.define(property, { value: value }).\r\n   *\r\n   * @example\r\n   * new Super({}).value('a', 1).$; // { a: 1 }\r\n   * new Super({}).value({\r\n   *   a: 1\r\n   * }).$;                          // { a: 1 }\r\n   */\r\n  value(property, value) {\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: value };\r\n    }\r\n\r\n    const object = this.$;\r\n\r\n    iterate(isObject(object) && new Super(property).$, (value, property) => {\r\n      Object.defineProperty(object, property, { value });\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#values\r\n   * @public\r\n   * @returns {DWrap} A wrap of the values array.\r\n   * @description Returns D-Wrap of the values array.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).values().$; // [1, 2, 3]\r\n   * new Super(null).values().$;                 // []\r\n   */\r\n  values() {\r\n    const array = [];\r\n\r\n    iterate(this.$, (value) => {\r\n      array.push(value);\r\n    });\r\n\r\n    return D(array);\r\n  }\r\n\r\n  /**\r\n   * @method Super#word\r\n   * @public\r\n   * @param {IterationCallback} callback - Called on each iteration.\r\n   * @returns {String} Concatenated string.\r\n   * @description Type of {@link Super#reduce}.\r\n   * If the callback is present it's used for concatenating. If not the value is used.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).word();                         // '123'\r\n   * new Super({ a: 1, b: 2, c: 3 }).word((value) => value + value); // '112233'\r\n   */\r\n  word(callback = null) {\r\n    validate([callback], ['function||!'], 'Super#word');\r\n\r\n    return this.reduce((word, value, key, object) => (\r\n      word + String(callback ? callback(value, key, object) : value)\r\n    ), '');\r\n  }\r\n}\r\n\r\ndefineProperties(Super.prototype, {\r\n  [Symbol.toStringTag]: 'Super'\r\n});\r\n\r\n/**\r\n * @function deepAssign\r\n * @private\r\n * @param {*} target - Object to assign properties to.\r\n * @param {*} object - Object to assign properties from.\r\n * @returns {void}\r\n */\r\nfunction deepAssign(target, object) {\r\n  iterate(object, (value, key) => {\r\n    if (isPrimitive(target[key]) || !{}.hasOwnProperty.call(target, key)) {\r\n      target[key] = deepClone(value);\r\n\r\n      return;\r\n    }\r\n\r\n    if (!isPrimitive(target[key])) {\r\n      deepAssign(target[key], value);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @function deepClone\r\n * @private\r\n * @param {*} object - Object to clone.\r\n * @description Does the deep cloning.\r\n */\r\nfunction deepClone(object) {\r\n  const clone = cloneSwitcher(object, [object, true]);\r\n\r\n  if (clone !== object) {\r\n    iterate(object, (value, key) => {\r\n      clone[key] = deepClone(value);\r\n    });\r\n  }\r\n\r\n  return clone;\r\n}\r\n\r\n/**\r\n * @function deepEqual\r\n * @private\r\n * @param {*} o1 - First object to compare.\r\n * @param {*} o2 - Second object to compare.\r\n * @param {Boolean} strict - If comparison should be strict or not.\r\n * @returns {Boolean} - If the object are deep equal or not.\r\n */\r\nfunction deepEqual(o1, o2, strict) {\r\n  if (o1 === o2) {\r\n    return true;\r\n  }\r\n\r\n  if (isNaN(o1) && isNaN(o2) && isPrimitive(o1) && isPrimitive(o2)) {\r\n    return true;\r\n  }\r\n\r\n  if (isNaN(o1) || isNaN(o2)) {\r\n    return false;\r\n  }\r\n\r\n  if (isPrimitive(o1) || isPrimitive(o2)) {\r\n    return strict ? o1 === o2 : o1 == o2;\r\n  }\r\n\r\n  if (isDate(o1) && isDate(o2)) {\r\n    return o1.getTime() === o2.getTime();\r\n  }\r\n\r\n  if (isDate(o1) || isDate(o2)) {\r\n    return false;\r\n  }\r\n\r\n  if (isRegExp(o1) && isRegExp(o2)) {\r\n    return o1.source === o2.source &&\r\n      o1.toString().match(/[gimuy]*$/)[0] === o2.toString().match(/[gimuy]*$/)[0] &&\r\n      o1.lastIndex === o2.lastIndex;\r\n  }\r\n\r\n  if (isRegExp(o1) || isRegExp(o2)) {\r\n    return false;\r\n  }\r\n\r\n  if ((!isPlainObject(o1) && !isArray(o1)) || (!isPlainObject(o2) && !isArray(o2))) {\r\n    return false;\r\n  }\r\n\r\n  const p1 = Object.getPrototypeOf(o1);\r\n  const p2 = Object.getPrototypeOf(o1);\r\n\r\n  if (Object.keys(o1).length !== Object.keys(o2).length) {\r\n    return false;\r\n  }\r\n\r\n  if (p1 && p2 && (toStringTag(p1.constructor) !== toStringTag(p2.constructor))) {\r\n    return false;\r\n  }\r\n\r\n  return iterate(o1, (value, key) => {\r\n    if (!(key in o2) || !deepEqual(value, o2[key], strict)) {\r\n      return false;\r\n    }\r\n  }) !== false;\r\n}\r\n\r\n/**\r\n * @function deepEvery\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * If returns truthy the iteration goes on and if not it stops.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {Boolean} - If all the callback calls returned truthy value.\r\n */\r\nfunction deepEvery(object, callback, n, tree) {\r\n  const end = n === 1;\r\n\r\n  return iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    if (\r\n      end || isPrimitive(value)\r\n        ? !callback(value, key, object, newTree)\r\n        : !deepEvery(value, callback, n - 1, newTree)\r\n    ) {\r\n      return false;\r\n    }\r\n  }) !== false;\r\n}\r\n\r\n/**\r\n * @function deepFilter\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * If returns truthy the element is included in the output and if not it's excluded.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {*} Filtered object.\r\n */\r\nfunction deepFilter(object, callback, n, tree) {\r\n  const array = isArrayLike(object);\r\n  const nul = isNil(object);\r\n  const o = array ? [] : nul ? object : {};\r\n  const end = n === 1;\r\n\r\n  iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    if ((end || isPrimitive(value)) && callback(value, key, object, newTree)) {\r\n      if (array) {\r\n        o.push(value);\r\n      } else {\r\n        o[key] = value;\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (!end) {\r\n      const filtered = deepFilter(value, callback, n - 1, newTree);\r\n\r\n      if (filtered) {\r\n        if (array) {\r\n          o.push(filtered);\r\n        } else {\r\n          o[key] = filtered;\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  if (array) {\r\n    return o.length ? o : undefined;\r\n  }\r\n\r\n  if (!nul) {\r\n    return Object.keys(o).length ? o : undefined;\r\n  }\r\n\r\n  return o;\r\n}\r\n\r\n/**\r\n * @function deepFind\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * If returns truthy the iteration stops and if not it continues.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {Tree|null} - If found the whole tree is returned and if not it's null what's returned.\r\n */\r\nfunction deepFind(object, callback, n, tree) {\r\n  const end = n === 1;\r\n\r\n  return iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    if (end || isPrimitive(value)) {\r\n      if (callback(value, key, object, newTree)) {\r\n        return newTree;\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    const result = deepFind(value, callback, n - 1, newTree);\r\n\r\n    if (result) {\r\n      return result;\r\n    }\r\n  }) || null;\r\n}\r\n\r\n/**\r\n * @function deepForEach\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {void}\r\n */\r\nfunction deepForEach(object, callback, n, tree) {\r\n  const end = n === 1;\r\n\r\n  iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    if (end || isPrimitive(value)) {\r\n      callback(value, key, object, newTree);\r\n    } else {\r\n      deepForEach(value, callback, n - 1, newTree);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @function deepForEachEntry\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {void}\r\n */\r\nfunction deepForEachEntry(object, callback, n, tree) {\r\n  const end = n === 1;\r\n\r\n  iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    callback(value, key, object, newTree);\r\n\r\n    if (!end && !isPrimitive(value)) {\r\n      deepForEachEntry(value, callback, n - 1, newTree);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @function deepFreeze\r\n * @private\r\n * @param {*} object - Object to freeze.\r\n * @returns {void}\r\n */\r\nfunction deepFreeze(object) {\r\n  Object.freeze(object);\r\n  iterate(object, deepFreeze);\r\n}\r\n\r\n/**\r\n * @function deepMap\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * Returned value is used to create to new object.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {*} New object.\r\n */\r\nfunction deepMap(object, callback, n, tree) {\r\n  const o = isArrayLike(object) ? [] : isNil(object) ? object : {};\r\n  const end = n === 1;\r\n\r\n  iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    o[key] = end || isPrimitive(value)\r\n      ? callback(value, key, object, newTree)\r\n      : deepMap(value, callback, n - 1, newTree);\r\n  });\r\n\r\n  return o;\r\n}\r\n\r\n/**\r\n * @function deepReduce\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepReduceCallback} callback - Callback that is called on every element.\r\n * Returned value is used to create to new object.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Boolean} start - If callback was called already or not.\r\n * @param {{ IV: * }|undefined} IV - If callback was called already or not.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {{ IV: * }} Transformed IV.\r\n */\r\nfunction deepReduce(object, callback, n, start, IV, tree) {\r\n  const end = n === 1;\r\n\r\n  iterate(object, (value, key, object) => {\r\n    if (!IV && (end || isPrimitive(value)) && !start) {\r\n      IV = { IV: value };\r\n      start = true;\r\n\r\n      return;\r\n    }\r\n\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    IV = end || isPrimitive(value)\r\n      ? { IV: callback(IV.IV, value, key, object, newTree) }\r\n      : deepReduce(value, callback, n - 1, start, IV, newTree);\r\n  });\r\n\r\n  return IV;\r\n}\r\n\r\n/**\r\n * @function deepSome\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * If returns truthy the iteration stops and if not it continues.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {Boolean} - If some of the callback calls returned truthy value.\r\n */\r\nfunction deepSome(object, callback, n, tree) {\r\n  const end = n === 1;\r\n\r\n  return iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    if (\r\n      end || isPrimitive(value)\r\n        ? callback(value, key, object, newTree)\r\n        : deepSome(value, callback, n - 1, newTree)\r\n    ) {\r\n      return true;\r\n    }\r\n  }) || false;\r\n}\r\n\r\nconstructors[0].push({\r\n  check: () => true,\r\n  cls: Super\r\n});\r\n\r\nexport { Super };\r\n","/**\r\n * @module Func\r\n * @private\r\n * @mixin\r\n * @description Exports Func class.\r\n */\r\n\r\nimport { Super } from './Super';\r\nimport { Promise } from './Promise';\r\nimport { constructors } from './constants';\r\nimport { isFunction, validate, toArray, Symbol, defineProperties, iterate } from './helpers';\r\n\r\n/**\r\n * @callback BeforeMiddleware\r\n * @param {Array} args - Previous arguments.\r\n * @param {Func} func - This function.\r\n * @returns {Array} - New arguments.\r\n */\r\n\r\n/**\r\n * @callback AfterMiddleware\r\n * @param {*} returnValue - Previous return value.\r\n * @param {Func} func - This function.\r\n * @returns {*} - New return value.\r\n */\r\n\r\n/**\r\n * @class Func\r\n * @extends Super\r\n * @public\r\n * @param {Function} [func = function () {}] - Function to wrap.\r\n * @returns {Func} Instance of Func.\r\n * @description A wrap of a function.\r\n *\r\n * @example\r\n * const func = new Func(Math.max);\r\n *\r\n * func(1, 4, -2, 5); // 5\r\n */\r\nclass Func extends Super {\r\n  constructor(func = () => {}) {\r\n    super();\r\n\r\n    function proxy() {\r\n      if (++proxy.$$.called < proxy.$$.canBeCalled) {\r\n        const { before, after, sync, contextLocked } = proxy.$$;\r\n        let { context, args } = proxy.$$;\r\n        let ret;\r\n\r\n        context = contextLocked ? context : context || this;\r\n        args = args.concat(toArray(arguments));\r\n\r\n        if (sync) {\r\n          iterate(before, (middleware) => {\r\n            args = middleware.call(context, toArray(args), proxy);\r\n          });\r\n\r\n          ret = func.apply(context, toArray(args));\r\n\r\n          iterate(after, (middleware) => {\r\n            ret = middleware.call(context, ret, proxy);\r\n          });\r\n\r\n          return ret;\r\n        }\r\n\r\n        let promise = Promise.resolve(args);\r\n\r\n        iterate(before, (middleware) => {\r\n          promise = promise.then((args) => middleware.call(context, toArray(args), proxy));\r\n        });\r\n\r\n        promise = promise.then((args) => func.apply(context, toArray(args)));\r\n\r\n        iterate(after, (middleware) => {\r\n          promise = promise.then((ret) => middleware.call(context, ret, proxy));\r\n        });\r\n\r\n        return promise;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @member {Object} Func#$$\r\n     * @type {Object}\r\n     * @protected\r\n     * @property {Array} after - After middleware array.\r\n     * @property {Array} args - Locked and bound arguments.\r\n     * @property {Array} argsLocked - Locked arguments.\r\n     * @property {Array} before - Before middleware array.\r\n     * @property {Number} called - How many times the function was called.\r\n     * @property {Number} canBeCalled - How many times the function can be actually called.\r\n     * @property {*} context - Locked or bound context.\r\n     * @property {Boolean} contextLocked - Is context locked or not.\r\n     * @property {Boolean} sync - Is function synchronous or not.\r\n     * @description Config parameters.\r\n     */\r\n    Object.defineProperty(proxy, '$$', {\r\n      value: {\r\n        after: [],\r\n        args: [],\r\n        argsLocked: [],\r\n        before: [],\r\n        called: 0,\r\n        canBeCalled: Infinity,\r\n        context: null,\r\n        contextLocked: false,\r\n        sync: true\r\n      }\r\n    });\r\n\r\n    /**\r\n     * @member {Function} Func#$\r\n     * @type {Function}\r\n     * @public\r\n     * @description Original function.\r\n     */\r\n    Object.defineProperty(proxy, '$', { value: func });\r\n    Object.setPrototypeOf(proxy, Func.prototype);\r\n\r\n    return proxy;\r\n  }\r\n\r\n  /**\r\n   * @method Func#after\r\n   * @public\r\n   * @param {AfterMiddleware} middleware - After middleware.\r\n   * @param {Boolean|*} [afterAll = true] - Boolean parameter where to put middleware.\r\n   * Truthy parameter stands for \"to the end\" and falsey for \"to the beginning\".\r\n   * @returns {Func} Returns this.\r\n   * @description Adds after middleware.\r\n   *\r\n   * @example\r\n   * const func = new Func((a) => a + 1)\r\n   *   .after((result) => result * result);\r\n   *\r\n   * func(4);  // 25\r\n   * func(-4); // 9\r\n   */\r\n  after(middleware, afterAll = true) {\r\n    validate([middleware], ['function'], 'Func#after');\r\n\r\n    const { after } = this.$$;\r\n\r\n    if (afterAll) {\r\n      after.push(middleware);\r\n    } else {\r\n      after.unshift(middleware);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#apply\r\n   * @public\r\n   * @param {*} [context] - Context to call with.\r\n   * @param {(Array|Arguments)} [args] - Arguments to call with.\r\n   * @returns {*} Return of function call.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\r\n   * @description Synonym for\r\n   * [Function#apply]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Function/apply}.\r\n   */\r\n  apply(context, args) {\r\n    return (() => {}).apply.apply(this, arguments);\r\n  }\r\n\r\n  /**\r\n   * @method Func#async\r\n   * @public\r\n   * @param {Boolean|*} [condition] - If the function should be synchronous or not.\r\n   * @returns {Func} Returns this.\r\n   * @description If the function should be synchronous or not.\r\n   *\r\n   * @example\r\n   * const func = new Func((a) => a + 1).async();\r\n   *\r\n   * func(4).then((result) => {\r\n   *   console.log(result); // 5\r\n   * });\r\n   */\r\n  async(condition = true) {\r\n    this.$$.sync = !condition;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#before\r\n   * @public\r\n   * @param {BeforeMiddleware} middleware - Before middleware.\r\n   * @param {Boolean|*} [beforeAll = true] - Boolean parameter where to put middleware.\r\n   * Truthy parameter stands for \"to the beginning\" and falsey for \"to the end\".\r\n   * @returns {Func} Returns this.\r\n   * @description Adds before middleware.\r\n   *\r\n   * @example\r\n   * const func = new Func((a) => a + 1)\r\n   *   .before(([arg]) => [arg * arg]);\r\n   *\r\n   * func(4); // 17\r\n   * func(3); // 10\r\n   */\r\n  before(middleware, beforeAll = true) {\r\n    validate([middleware], ['function'], 'Func#before');\r\n\r\n    const { before } = this.$$;\r\n\r\n    if (beforeAll) {\r\n      before.unshift(middleware);\r\n    } else {\r\n      before.push(middleware);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#bind\r\n   * @public\r\n   * @param {*} context - Context to bind.\r\n   * @param {...(Array|Arguments|*)} args - Arguments to bind.\r\n   * @returns {Func} Returns this.\r\n   * @description Composition of {@link Func#bindContext} and {@link Func#bindArgs}.\r\n   *\r\n   * @example\r\n   * const func = new Func(function (a, b) {\r\n   *   return this.a + a + b;\r\n   * }).bind({ a: 2 }, 1);\r\n   *\r\n   * func(1); // 4\r\n   * func(3); // 6\r\n   */\r\n  bind(context, ...args) {\r\n    return this\r\n      .bindContext(context)\r\n      .bindArgs(args);\r\n  }\r\n\r\n  /**\r\n   * @method Func#bindArgs\r\n   * @public\r\n   * @param {(Array|Arguments)} args - Arguments to bind.\r\n   * @returns {Func} Returns this.\r\n   * @description Binds arguments in addition to already locked and bound ones.\r\n   *\r\n   * @example\r\n   * const func = new Func((...args) => {\r\n   *   let sum = 0;\r\n   *\r\n   *   for (let i = 0; i < args.length; i++) {\r\n   *     sum += args[i];\r\n   *   }\r\n   *\r\n   *   return sum;\r\n   * });\r\n   *\r\n   * func(1, 2, 3); // 6\r\n   *\r\n   * func.bindArgs([4]);\r\n   *\r\n   * func(1, 2, 3); // 10\r\n   *\r\n   * func.bindArgs([5]);\r\n   *\r\n   * func(1, 2, 3); // 15\r\n   */\r\n  bindArgs(args) {\r\n    const func = this.$$;\r\n\r\n    func.args = func.args.concat(toArray(args));\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#bindContext\r\n   * @public\r\n   * @param {*} context - Context to bind.\r\n   * @returns {Func} Returns this.\r\n   * @description Bind new context if it's not already locked.\r\n   *\r\n   * @example\r\n   * const func = new Func(function () {\r\n   *   return this.a;\r\n   * }).bindContext({ a: 1 });\r\n   *\r\n   * func(); // 1\r\n   *\r\n   * func.bindContext({ a: 2 });\r\n   *\r\n   * func(); // 2\r\n   */\r\n  bindContext(context) {\r\n    const func = this.$$;\r\n\r\n    if (!func.contextLocked) {\r\n      func.context = context;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#call\r\n   * @public\r\n   * @param {*} [context] - Context to call with.\r\n   * @param {...*} [args] - Arguments to call with.\r\n   * @returns {*} Return of function call.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Function/call\r\n   * @description Synonym for\r\n   * [Function#call]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Function/call}.\r\n   */\r\n  call(context, ...args) {\r\n    return (() => {}).call.apply(this, arguments);\r\n  }\r\n\r\n  /**\r\n   * @member {Number} Func#called\r\n   * @public\r\n   * @readonly\r\n   * @description Returns how many times the function was called.\r\n   *\r\n   * @example\r\n   * const func = new Func((a) => a + 1);\r\n   *\r\n   * func();\r\n   * func();\r\n   *\r\n   * func.called // 2\r\n   */\r\n  get called() {\r\n    return this.$$.called;\r\n  }\r\n\r\n  /**\r\n   * @method Func#canBeCalled\r\n   * @public\r\n   * @param {Number} times - Number of maximum times the function is called (middlewares are also taken for a count).\r\n   * @returns {Func} Returns this.\r\n   * @description Method for limiting call times of function.\r\n   *\r\n   * @example\r\n   * const func = new Func((a) => a + 1)\r\n   *   .canBeCalled(1);\r\n   *\r\n   * func(1); // 2\r\n   * func(1); // undefined\r\n   */\r\n  canBeCalled(times) {\r\n    this.$$.canBeCalled = times;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#limitArgsTo\r\n   * @public\r\n   * @param {Number} number - Number of arguments to limit to.\r\n   * @returns {Func} Returns this.\r\n   * @description Built-in before middleware for limiting number of arguments\r\n   * that is put to the end of before middlewares.\r\n   *\r\n   * @example\r\n   * const func = new Func((a, b) => [a, b]);\r\n   *\r\n   * func(1, 2); // [1, 2]\r\n   *\r\n   * func.limitArgsTo(1);\r\n   *\r\n   * func(1, 2); // [1, undefined]\r\n   */\r\n  limitArgsTo(number) {\r\n    return this.before((args) => args.slice(0, number), false);\r\n  }\r\n\r\n  /**\r\n   * @method Func#lock\r\n   * @public\r\n   * @param {*} context - Context to lock.\r\n   * @param {(Array|Arguments|*)} args - Arguments to lock.\r\n   * @returns {Func} Returns this.\r\n   * @description Composition of {@link Func#lockContext} and {@link Func#lockArgs}.\r\n   *\r\n   * @example\r\n   * const func = new Func(function (a, b) {\r\n   *   return this.a + a + b;\r\n   * }).lock({ a: 2 }, [1]);\r\n   *\r\n   * func(1); // 4\r\n   * func(3); // 6\r\n   */\r\n  lock(context, args) {\r\n    return this\r\n      .lockContext(context)\r\n      .lockArgs(args);\r\n  }\r\n\r\n  /**\r\n   * @method Func#lockArgs\r\n   * @public\r\n   * @param {(Array|Arguments|*)} args - Arguments to lock.\r\n   * @returns {Func} Returns this.\r\n   * @description Erases bound arguments and adds new arguments to already locked ones.\r\n   *\r\n   * @example\r\n   * const func = new Func((...args) => {\r\n   *   let sum = 0;\r\n   *\r\n   *   for (let i = 0; i < args.length; i++) {\r\n   *     sum += args[i];\r\n   *   }\r\n   *\r\n   *   return sum;\r\n   * });\r\n   *\r\n   * func(1, 2, 3); // 6\r\n   *\r\n   * func.lockArgs([4]);\r\n   *\r\n   * func(1, 2, 3); // 10\r\n   *\r\n   * func.bindArgs([6, 7]);\r\n   * func.lockArgs([5]);\r\n   *\r\n   * func(1, 2, 3); // 15\r\n   */\r\n  lockArgs(args) {\r\n    const func = this.$$;\r\n\r\n    func.args = func.argsLocked = func.argsLocked.concat(toArray(args));\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#lockContext\r\n   * @public\r\n   * @param {*} context - Context to lock.\r\n   * @returns {Func} Returns this.\r\n   * @description Locks context if it's not already locked.\r\n   *\r\n   * @example\r\n   * const func = new Func(function () {\r\n   *   return this.a;\r\n   * }).lockContext({ a: 1 });\r\n   *\r\n   * func(); // 1\r\n   *\r\n   * func.lockContext({ a: 2 });\r\n   *\r\n   * func(); // 1\r\n   */\r\n  lockContext(context) {\r\n    const func = this.$$;\r\n\r\n    if (!func.contextLocked) {\r\n      func.context = context;\r\n      func.contextLocked = true;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#timing\r\n   * @public\r\n   * @param {String} mark - Argument that is passed to console.time() and console.timeEnd().\r\n   * By default name of the original function, or if it's not present, 'anonymous' is used.\r\n   * @returns {Func} Returns this.\r\n   * @description Built-in before and after middlewares for noting calling time.\r\n   * In case of asynchronous functions it notes time between calling function and resolving or rejecting the result.\r\n   *\r\n   * @example\r\n   * const func = new Func((a) => a + 1)\r\n   *   .timing('plus 1');\r\n   *\r\n   * func(2); // plus 1: 0.010ms\r\n   *\r\n   * const async = new Func(() => new Promise(() => {\r\n   *     setTimeout(resolve, 1000);\r\n   *   }))\r\n   *   .async()\r\n   *   .timing();\r\n   *\r\n   * async();\r\n   * // After 1 second...\r\n   * // anonymous: 1000.010ms\r\n   */\r\n  timing(mark) {\r\n    mark = arguments.length ? String(mark) : this.$.name || 'anonymous';\r\n\r\n    this.before((args) => {\r\n      console.time(mark);\r\n\r\n      return args;\r\n    }, false);\r\n\r\n    this.after((ret) => {\r\n      console.timeEnd(mark);\r\n\r\n      return ret;\r\n    }, false);\r\n\r\n    return this;\r\n  }\r\n\r\n  toString() {\r\n    return (() => {}).toString.call(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Func#unbind\r\n   * @public\r\n   * @returns {Func} Returns this.\r\n   * @description Composition of {@link Func#unbindContext} and {@link Func#unbindArgs}.\r\n   *\r\n   * @example\r\n   * const func = new Func(function (a) {\r\n   *   return this.foo + ' & ' +  a;\r\n   * }).bind({ foo: 2 }, 1);\r\n   *\r\n   * func(); // '2 & 1'\r\n   *\r\n   * func.unbind();\r\n   *\r\n   * func(); // 'undefined & undefined'\r\n   */\r\n  unbind() {\r\n    return this\r\n      .unbindContext()\r\n      .unbindArgs();\r\n  }\r\n\r\n  /**\r\n   * @method Func#unbindArgs\r\n   * @public\r\n   * @returns {Func} Returns this.\r\n   * @description Erases all bound arguments.\r\n   *\r\n   * @example\r\n   * const func = new Func((...args) => {\r\n   *   let sum = 0;\r\n   *\r\n   *   for (let i = 0; i < args.length; i++) {\r\n   *     sum += args[i];\r\n   *   }\r\n   *\r\n   *   return sum;\r\n   * }).bindArgs([4, 5]);\r\n   *\r\n   * func(1, 2, 3); // 15\r\n   *\r\n   * func.unbindArgs();\r\n   *\r\n   * func(1, 2, 3); // 6\r\n   */\r\n  unbindArgs() {\r\n    const func = this.$$;\r\n\r\n    func.args = func.argsLocked;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#unbindContext\r\n   * @public\r\n   * @returns {Func} Returns this.\r\n   * @description Erases context if it's not locked.\r\n   *\r\n   * @example\r\n   * const func = new Func(function () {\r\n   *   return this.foo;\r\n   * }).bindContext({ foo: 1 });\r\n   *\r\n   * func(); // 1\r\n   *\r\n   * func.unbindArgs();\r\n   *\r\n   * func(); // undefined\r\n   */\r\n  unbindContext() {\r\n    const func = this.$$;\r\n\r\n    if (!func.contextLocked) {\r\n      func.context = null;\r\n    }\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\ndefineProperties(Func.prototype, {\r\n  [Symbol.toStringTag]: 'Func'\r\n});\r\n\r\nconstructors[1].push({\r\n  check: isFunction,\r\n  cls: Func\r\n});\r\n\r\n/**\r\n * @function method\r\n * @public\r\n * @param {String} method - Method to call.\r\n * @param {(Array|Arguments|*)} args - Arguments to call the method with.\r\n * @returns {Function} Function that calls stated method with given arguments.\r\n * @description Function that returns the function\r\n * that calls stated method of its first argument with given arguments.\r\n *\r\n * @example\r\n * [1.2345, 2.789, 3.14].map(method('toFixed', [2])); // ['1.23', '2.79', '3.14']\r\n */\r\nfunction method(method, args = []) {\r\n  return (x) => x[method].apply(x, toArray(args));\r\n}\r\n\r\n/**\r\n * @function noop\r\n * @public\r\n * @returns {void}\r\n * @description Empty function.\r\n */\r\nfunction noop() {}\r\n\r\n/**\r\n * @function prop\r\n * @public\r\n * @param {String} prop - Property to return.\r\n * @returns {Function} Function that returns given property of its first argument.\r\n * @description Function that return the function that returns given property of its first argument.\r\n *\r\n * @example\r\n * ['foo', '12', '7890'].map(prop('length')); // [3, 2, 4]\r\n */\r\nfunction prop(prop) {\r\n  return ({ [prop]: value }) => value;\r\n}\r\n\r\n/**\r\n * @function self\r\n * @public\r\n * @returns {*} First argument itself.\r\n * @description Function that returns the first argument.\r\n *\r\n * @example\r\n * [1, 2].map(self);                     // [1, 2]\r\n * [1, 3, NaN, 0, 7, null].filter(self); // [1, 3, 7]\r\n */\r\nfunction self() {\r\n  return arguments[0];\r\n}\r\n\r\nexport { Func, method, noop, prop, self };\r\n","/**\r\n * @module Num\r\n * @private\r\n * @mixin\r\n * @description Exports Num class.\r\n */\r\n\r\nimport { Super } from './Super';\r\nimport { Func } from './Func';\r\nimport { Promise } from './Promise';\r\nimport { constructors } from './constants';\r\nimport {\r\n  isNumber, isFinite, toArray,\r\n  defineProperties, validate, Symbol\r\n} from './helpers';\r\n\r\nconst toRadian = Math.PI / 180;\r\nconst toDegree = 180 / Math.PI;\r\nconst ln2 = Math.LN2;\r\nconst ln10 = Math.LN10;\r\n\r\n/**\r\n * @class Num\r\n * @extends Super\r\n * @public\r\n * @param {Number} [number = 0] - A number to wrap.\r\n * @returns {Num} Instance of Num.\r\n * @description Wrap of a number.\r\n *\r\n * @example\r\n * const num = new Num(1);\r\n */\r\nclass Num extends Super {\r\n  constructor(number = 0) {\r\n    super(+number);\r\n\r\n    /**\r\n     * @member Num#$\r\n     * @type {Number}\r\n     * @public\r\n     * @description Original number.\r\n     */\r\n  }\r\n\r\n  /**\r\n   * @member Num#abs\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/abs\r\n   * @description Synonym for\r\n   * [Math.abs]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/abs}.\r\n   *\r\n   * @example\r\n   * new Num(1).abs;  // 1\r\n   * new Num(-1).abs; // 1\r\n   */\r\n  get abs() {\r\n    return Math.abs(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Num#acos\r\n   * @public\r\n   * @param {Boolean|*} [toDegrees = false] If it is truthy the return value is transformed into degrees.\r\n   * @returns {Number} Arccosine of the number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/acos\r\n   * @description Synonym for\r\n   * [Math.acos]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/acos}.\r\n   */\r\n  acos(toDegrees) {\r\n    return (toDegrees ? toDegree : 1) * Math.acos(this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#acosh\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh\r\n   * @description Synonym for\r\n   * [Math.acosh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh}.\r\n   */\r\n  get acosh() {\r\n    const number = this.$;\r\n\r\n    return Math.log(number + Math.sqrt(number * number - 1));\r\n  }\r\n\r\n  /**\r\n   * @member Num#asinh\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh\r\n   * @description Synonym for\r\n   * [Math.asinh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh}.\r\n   */\r\n  get asinh() {\r\n    const number = this.$;\r\n\r\n    return Math.log(number + Math.sqrt(number * number + 1));\r\n  }\r\n\r\n  /**\r\n   * @method Num#asin\r\n   * @public\r\n   * @param {Boolean|*} [toDegrees = false] If it is truthy the return value is transformed into degrees.\r\n   * @returns {Number} Arcsine of the number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/asin\r\n   * @description Synonym for\r\n   * [Math.asin]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/asin}.\r\n   */\r\n  asin(toDegrees) {\r\n    return (toDegrees ? toDegree : 1) * Math.asin(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Num#atan\r\n   * @public\r\n   * @param {Boolean|*} [toDegrees = false] If it is truthy the return value is transformed into degrees.\r\n   * @returns {Number} Arcsine of the number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/atan\r\n   * @description Synonym for\r\n   * [Math.atan]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/atan}.\r\n   */\r\n  atan(toDegrees) {\r\n    return (toDegrees ? toDegree : 1) * Math.atan(this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#atanh\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh\r\n   * @description Synonym for\r\n   * [Math.atanh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh}.\r\n   */\r\n  get atanh() {\r\n    const number = this.$;\r\n\r\n    return Math.log((1 + number) / (1 - number)) / 2;\r\n  }\r\n\r\n  /**\r\n   * @member Num#cbrt\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt\r\n   * @description Synonym for\r\n   * [Math.cbrt]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt}.\r\n   */\r\n  get cbrt() {\r\n    const cbrt = Math.pow(Math.abs(this.$), 1 / 3);\r\n\r\n    return this.$ > 0 ? cbrt : -cbrt;\r\n  }\r\n\r\n  /**\r\n   * @member Num#ceil\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil\r\n   * @description Synonym for\r\n   * [Math.ceil]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil}.\r\n   *\r\n   * @example\r\n   * new Num(1.1).ceil;  // 2\r\n   * new Num(-1.1).ceil; // -1\r\n   */\r\n  get ceil() {\r\n    return Math.ceil(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Num#cos\r\n   * @public\r\n   * @param {Boolean|*} [asDegrees = false] If it is truthy the number is treated as a degree value.\r\n   * @returns {Number} Cosine of the number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cos\r\n   * @description Synonym for\r\n   * [Math.cos]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cos}.\r\n   */\r\n  cos(asDegrees) {\r\n    return Math.cos((asDegrees ? toRadian : 1) * this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#cosh\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh\r\n   * @description Synonym for\r\n   * [Math.cosh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh}.\r\n   */\r\n  get cosh() {\r\n    const exp = this.exp;\r\n\r\n    return (exp + 1 / exp) / 2;\r\n  }\r\n\r\n  /**\r\n   * @member Num#cube\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description Cube of the number.\r\n   *\r\n   * @example\r\n   * new Num(2).cube;  // 8\r\n   * new Num(-3).ceil; // -27\r\n   */\r\n  get cube() {\r\n    return this.$ * this.$ * this.$;\r\n  }\r\n\r\n  /**\r\n   * @member Num#exp\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/exp\r\n   * @description Synonym for\r\n   * [Math.exp]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/exp}.\r\n   */\r\n  get exp() {\r\n    return Math.exp(this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#floor\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\r\n   * @description Synonym for\r\n   * [Math.floor]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/floor}.\r\n   *\r\n   * @example\r\n   * new Num(1.1).floor;  // 1\r\n   * new Num(-1.1).floor; // -2\r\n   */\r\n  get floor() {\r\n    return Math.floor(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Num#interval\r\n   * @public\r\n   * @param {Function} func - Function that is called every <number> milliseconds.\r\n   * @param {Array} [args] - Arguments passed to the function.\r\n   * @returns {Function} Function that aborts the interval. The context of the function (if it's not already bound)\r\n   * is the object with the abort method.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/setInterval\r\n   * @description Analogue of the\r\n   * [setInterval]{@link https://developer.mozilla.org/en/docs/Web/API/WindowTimers/setInterval}.\r\n   *\r\n   * @example\r\n   * const times = 0;\r\n   * new Num(50).interval(function () {\r\n   *   if (++times === 10) {\r\n   *     this.abort();\r\n   *   }\r\n   * });\r\n   */\r\n  interval(func, args = []) {\r\n    validate([func], ['function'], 'Num#interval');\r\n\r\n    func = new Func(func).bindContext({ abort });\r\n    args = toArray(args);\r\n\r\n    const number = this.$;\r\n\r\n    let aborted;\r\n    let timeout = setTimeout(function interval() {\r\n      if (!aborted) {\r\n        func.apply(null, args);\r\n\r\n        if (!aborted) {\r\n          timeout = setTimeout(interval, number);\r\n        }\r\n      }\r\n    }, 0);\r\n\r\n    return abort;\r\n\r\n    function abort() {\r\n      aborted = true;\r\n\r\n      return clearTimeout(timeout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @member Num#ln\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log\r\n   * @description Synonym for\r\n   * [Math.log]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log}.\r\n   */\r\n  get ln() {\r\n    return Math.log(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Num#log\r\n   * @public\r\n   * @param {Number} number - Number to get logarithm of.\r\n   * @returns {Number} Logarithm of the argument number to the number base.\r\n   * @description Returns the logarithm of the argument number to the number base.\r\n   *\r\n   * @example\r\n   * new Num(2).log(16);  // 4\r\n   * new Num(3).log(243); // 5\r\n   */\r\n  log(number) {\r\n    return Math.log(number) / Math.log(this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#log2\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log2\r\n   * @description Synonym for\r\n   * [Math.log2]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log2}.\r\n   */\r\n  get log2() {\r\n    return this.ln / ln2;\r\n  }\r\n\r\n  /**\r\n   * @member Num#log10\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log10\r\n   * @description Synonym for\r\n   * [Math.log10]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log10}.\r\n   */\r\n  get log10() {\r\n    return this.ln / ln10;\r\n  }\r\n\r\n  /**\r\n   * @method Num#pow\r\n   * @public\r\n   * @param {Number} power - Power the number should be raised to.\r\n   * @returns {Number} The number to the <power> power.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/pow\r\n   * @description Synonym for\r\n   * [Math.pow]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/pow}.\r\n   *\r\n   * @example\r\n   * new Num(4).pow(.5); // 2\r\n   * new Num(3).pow(2);  // 9\r\n   */\r\n  pow(power) {\r\n    return Math.pow(this.$, power);\r\n  }\r\n\r\n  /**\r\n   * @method Num#root\r\n   * @public\r\n   * @param {Number} power - Power the number should be raised to.\r\n   * @returns {Number} The <power> root of the number.\r\n   * @description Synonym for number.pow(1 / power);\r\n   *\r\n   * @example\r\n   * new Num(4).root(2);   // 0.5\r\n   * new Num(243).root(5); // 3\r\n   */\r\n  root(power) {\r\n    return Math.pow(this.$, 1 / power);\r\n  }\r\n\r\n  /**\r\n   * @member Num#round\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/round\r\n   * @description Synonym for\r\n   * [Math.round]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/round}.\r\n   *\r\n   * @example\r\n   * new Num(1.1).floor;  // 1\r\n   * new Num(-1.1).floor; // -1\r\n   * new Num(1.5).floor;  // 2\r\n   */\r\n  get round() {\r\n    return Math.round(this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#sign\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\r\n   * @description Synonym for\r\n   * [Math.sign]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sign}.\r\n   */\r\n  get sign() {\r\n    const number = this.$;\r\n\r\n    if (!number) {\r\n      return number;\r\n    }\r\n\r\n    return number > 0 ? 1 : -1;\r\n  }\r\n\r\n  /**\r\n   * @method Num#sin\r\n   * @public\r\n   * @param {Boolean|*} [asDegrees = false] If it is truthy the number is treated as a degree value.\r\n   * @returns {Number} Sine of the number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sin\r\n   * @description Synonym for\r\n   * [Math.sin]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sin}.\r\n   */\r\n  sin(asDegrees) {\r\n    return Math.sin((asDegrees ? toRadian : 1) * this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#sinh\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh\r\n   * @description Synonym for\r\n   * [Math.sinh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh}.\r\n   */\r\n  get sinh() {\r\n    const exp = this.exp;\r\n\r\n    return (exp - 1 / exp) / 2;\r\n  }\r\n\r\n  /**\r\n   * @member Num#sq\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description The square of the number.\r\n   *\r\n   * @example\r\n   * new Num(2).sq;  // 4\r\n   * new Num(-3).sq; // 9\r\n   */\r\n  get sq() {\r\n    return this.$ * this.$;\r\n  }\r\n\r\n  /**\r\n   * @member Num#sqrt\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt\r\n   * @description Synonym for\r\n   * [Math.sqrt]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt}.\r\n   */\r\n  get sqrt() {\r\n    return Math.sqrt(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Num#tan\r\n   * @public\r\n   * @param {Boolean|*} [asDegrees = false] If it is truthy the number is treated as a degree value.\r\n   * @returns {Number} Tangent of the number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/tan\r\n   * @description Synonym for\r\n   * [Math.tan]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/tan}.\r\n   */\r\n  tan(asDegrees) {\r\n    return Math.tan((asDegrees ? toRadian : 1) * this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#tanh\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh\r\n   * @description Synonym for\r\n   * [Math.tanh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh}.\r\n   */\r\n  get tanh() {\r\n    const number = this.$;\r\n\r\n    if (!isFinite(number)) {\r\n      return this.sign;\r\n    }\r\n\r\n    const exp = Math.exp(2 * number);\r\n\r\n    return (exp - 1) / (exp + 1);\r\n  }\r\n\r\n  /**\r\n   * @method Num#timeout\r\n   * @public\r\n   * @param {*} [value] - Value to be resolved by the promise.\r\n   * @returns {Promise} Promise that could be aborted.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/WindowTimers/setTimeout\r\n   * @description Promise-based analogue of\r\n   * [setTimeout]{@link https://developer.mozilla.org/en/docs/Web/API/WindowTimers/setTimeout}.\r\n   *\r\n   * @example\r\n   * new Num(50).timeout('resolved').then((value) => {\r\n   *   console.log(value); // 'resolved'\r\n   * });\r\n   *\r\n   * const promise = new Num(50).timeout();\r\n   * promise.abort();\r\n   */\r\n  timeout(value) {\r\n    let timeout;\r\n    let reject;\r\n\r\n    const promise = new Promise((resolve, rej) => {\r\n      reject = rej;\r\n      timeout = setTimeout(resolve, this.$, value);\r\n    });\r\n\r\n    promise.abort = function abort() {\r\n      clearTimeout(timeout);\r\n\r\n      reject(new Error('Timeout was aborted'));\r\n\r\n      return this;\r\n    };\r\n\r\n    return promise;\r\n  }\r\n\r\n  /**\r\n   * @method Num#toBase\r\n   * @public\r\n   * @param {Number} [base = 10] - Base that the number should inverted to.\r\n   * @returns {String} A string representation of the number in <base> base.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toString\r\n   * @description Synonym for\r\n   * [Number#toString]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toString}.\r\n   *\r\n   * @example\r\n   * new Num(4).toBase(2); // 100\r\n   * new Num(3).toBase();  // 3\r\n   */\r\n  toBase(base = 10) {\r\n    return this.$.toString(base);\r\n  }\r\n\r\n  /**\r\n   * @method Num#toExponential\r\n   * @public\r\n   * @param {Number} [fractionDigits] - See the link.\r\n   * @returns {String} A string representation of the number in the exponential format.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential\r\n   * @description Synonym for\r\n   * [Number#toExponential]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential}.\r\n   */\r\n  toExponential(fractionDigits) {\r\n    return this.$.toExponential(fractionDigits);\r\n  }\r\n\r\n  /**\r\n   * @method Num#toFixed\r\n   * @public\r\n   * @param {Number} [digits = 0] - See the link.\r\n   * @returns {String} Fixed-point formatted number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed\r\n   * @description Synonym for\r\n   * [Number#toFixed]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed}.\r\n   */\r\n  toFixed(digits) {\r\n    return this.$.toFixed(digits);\r\n  }\r\n\r\n  /**\r\n   * @method Num#toPrecision\r\n   * @public\r\n   * @param {Number} [precision] - See the link.\r\n   * @returns {String} A string representation of the number to the specified precision.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision\r\n   * @description Synonym for\r\n   * [Number#toPrecision]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision}.\r\n   */\r\n  toPrecision(precision) {\r\n    return this.$.toPrecision(precision);\r\n  }\r\n\r\n  valueOf() {\r\n    return Number(this.$);\r\n  }\r\n}\r\n\r\ndefineProperties(Num.prototype, {\r\n  [Symbol.toStringTag]: 'Num'\r\n});\r\n\r\nconstructors[1].push({\r\n  check: isNumber,\r\n  cls: Num\r\n});\r\n\r\n/**\r\n * @function rand\r\n * @public\r\n * @param {Number} [start = 0] - Start of the range.\r\n * @param {Number} [end = 1] - End of the range.\r\n * @returns {Number} Random number.\r\n * @description Returns a random number in the range specified by the arguments.\r\n *\r\n * @example\r\n * rand(1, 5); // 2.315\r\n * rand(1, 5); // 4.356763\r\n */\r\nfunction rand(start = 0, end = 1) {\r\n  return start + (end - start) * Math.random();\r\n}\r\n\r\n/**\r\n * @function random\r\n * @public\r\n * @param {Integer} start - Start of the range.\r\n * @param {Integer} end - End of the range.\r\n * @returns {Number} Random integer.\r\n * @description Returns a random integer number in the range specified by the arguments.\r\n *\r\n * @example\r\n * random(1, 5); // 3\r\n * random(1, 5); // 1\r\n */\r\nfunction random(start, end) {\r\n  validate([start, end], ['intLike', 'intLike'], 'random');\r\n\r\n  if (end <= start) {\r\n    throw new Error('The second argument must be greater than the first!', 'random');\r\n  }\r\n\r\n  return Math.floor(rand(start, end + 1));\r\n}\r\n\r\nexport { Num, rand, random };\r\n","/**\r\n * @module Arr\r\n * @private\r\n * @mixin\r\n * @description Exports Arr class.\r\n */\r\n\r\nimport { random } from './Num';\r\nimport { Super } from './Super';\r\nimport { constructors } from './constants';\r\nimport {\r\n  isArrayLike, isNaN, isNumber, isString,\r\n  toArray, validate, iterate as iterator, Symbol, defineProperties\r\n} from './helpers';\r\n\r\n/**\r\n * @typedef {Array|*} ArrayLike\r\n * @public\r\n * @description Array-like type.\r\n */\r\n\r\n/**\r\n * @callback ArrayCallback\r\n * @public\r\n * @param {Number} i - Iteration index.\r\n */\r\n\r\n/**\r\n * @callback IterateCallback\r\n * @public\r\n * @param {Number} i - Iteration index.\r\n */\r\n\r\n/**\r\n * @callback CompareFunction\r\n * @public\r\n * @param {*} x - First value to be compared.\r\n * @param {*} y - Second value to be compared.\r\n */\r\n\r\n/**\r\n * @class Arr\r\n * @extends Super\r\n * @public\r\n * @param {Array} [array = []] - An array to wrap.\r\n * @returns {Arr} Instance of Arr.\r\n * @description Wrap of an array.\r\n *\r\n * @example\r\n * new Arr([1, 2]);\r\n */\r\nclass Arr extends Super {\r\n  constructor(array = []) {\r\n    super(toArray(array instanceof Arr ? array.$ : array));\r\n\r\n    /**\r\n     * @member Arr#$\r\n     * @type {Array}\r\n     * @public\r\n     * @description Made array.\r\n     */\r\n  }\r\n\r\n  /**\r\n   * @method Arr#concat\r\n   * @public\r\n   * @param {...(Array|Arr|*)} values - Arrays or any other values to concat the array with.\r\n   * @returns {Arr} New instance of Arr.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\r\n   * @description Synonym for\r\n   * [Array#concat]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/concat}.\r\n   */\r\n  concat(...values) {\r\n    const array = toArray(this.$, true);\r\n\r\n    iterator(arguments, (value) => {\r\n      value = new Super(value).$;\r\n\r\n      if (isArrayLike(value) && !isString(value)) {\r\n        iterator(value, (value) => {\r\n          array.push(value);\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      array.push(value);\r\n    });\r\n\r\n    return new this.constructor(array);\r\n  }\r\n\r\n  /**\r\n   * @member Arr#first\r\n   * @type {*}\r\n   * @public\r\n   * @readonly\r\n   * @description Returns the first element of the array.\r\n   *\r\n   * @example\r\n   * new Arr([1, 2, 3]).first; // 1\r\n   * new Arr([]).first;        // undefined\r\n   */\r\n  get first() {\r\n    return this.$[0];\r\n  }\r\n\r\n  /**\r\n   * @method Arr#indexOf\r\n   * @public\r\n   * @param {*} value - Value to search.\r\n   * @returns {Number} Index of the argument.\r\n   * @description Almost the same as {@link Super#keyOf}. The difference is that if the value is not found\r\n   * -1 returned instead of null and if found Number(key) returned.\r\n   *\r\n   * @example\r\n   * new Arr([1, 2, 3]).indexOf(1);       // 0\r\n   * new Arr([1, 2, 3]).indexOf('1');     // 0\r\n   * new Arr([1, 2, 3]).indexOf(3);       // -1\r\n   * new Arr([1, 2, NaN]).indexOf(NaN);   // 2\r\n   */\r\n  indexOf(value) {\r\n    const key = this.keyOf(value);\r\n\r\n    return key === null ? -1 : Number(key);\r\n  }\r\n\r\n  /**\r\n   * @method Arr#indexOfStrict\r\n   * @public\r\n   * @param {*} value - Value to search.\r\n   * @returns {Number} Index of the argument.\r\n   * @description Almost the same as {@link Super#keyOfStrict}. The difference is that if the value is not found\r\n   * -1 returned instead of null and if found Number(key) returned.\r\n   *\r\n   * @example\r\n   * new Arr([1, 2, 3]).indexOfStrict(1);       // 0\r\n   * new Arr([1, 2, 3]).indexOfStrict('1');     // -1\r\n   * new Arr([1, 2, 3]).indexOfStrict(3);       // -1\r\n   * new Arr([1, 2, NaN]).indexOfStrict(NaN);   // 2\r\n   */\r\n  indexOfStrict(value) {\r\n    const key = this.keyOfStrict(value);\r\n\r\n    return key === null ? -1 : Number(key);\r\n  }\r\n\r\n  /**\r\n   * @method Arr#join\r\n   * @public\r\n   * @param {String} [separator = ','] - See the link.\r\n   * @returns {String} - String of joined array.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/join\r\n   * @description Synonym for\r\n   * [Array#join]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/join}.\r\n   */\r\n  join(separator) {\r\n    return this.$.join.apply(this.$, arguments);\r\n  }\r\n\r\n  /**\r\n   * @member Arr#last\r\n   * @type {*}\r\n   * @public\r\n   * @readonly\r\n   * @description The last element of the array.\r\n   *\r\n   * @example\r\n   * new Arr([1, 2, 3]).last; // 3\r\n   * new Arr([]).last;        // undefined\r\n   */\r\n  get last() {\r\n    const array = this.$;\r\n\r\n    return array[array.length - 1];\r\n  }\r\n\r\n  /**\r\n   * @member Arr#length\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/length\r\n   * @description Synonym for\r\n   * [Array#length]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/length}.\r\n   */\r\n  get length() {\r\n    return this.$.length;\r\n  }\r\n\r\n  /**\r\n   * @method Arr#pop\r\n   * @public\r\n   * @returns {*} Returns deleted element.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\r\n   * @description Synonym for\r\n   * [Array#pop]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/pop}.\r\n   */\r\n  pop() {\r\n    return this.$.pop();\r\n  }\r\n\r\n  /**\r\n   * @method Arr#push\r\n   * @public\r\n   * @param {...*} values See the link.\r\n   * @this {Arr}\r\n   * @returns {Arr} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push\r\n   * @description Synonym for\r\n   * [Array#push]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push}\r\n   * besides returning this.\r\n   */\r\n  push(...values) {\r\n    this.$.push.apply(this.$, arguments);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Arr#random\r\n   * @public\r\n   * @returns {*} Random item of the array.\r\n   * @description Method for getting random items of the array.\r\n   *\r\n   * @example\r\n   * new Arr([1, 5, 3]).random(); // 3\r\n   * new Arr([1, 5, 3]).random(); // 5\r\n   */\r\n  random() {\r\n    return this.$[random(0, this.$.length - 1)];\r\n  }\r\n\r\n  /**\r\n   * @method Arr#reverse\r\n   * @public\r\n   * @returns {Arr} A wrap of the reversed array.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\r\n   * @description Synonym for\r\n   * [Array#reverse]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse}.\r\n   */\r\n  reverse() {\r\n    this.$.reverse();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Arr#shift\r\n   * @public\r\n   * @returns {*} Returns deleted element.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\r\n   * @description Synonym for\r\n   * [Array#shift]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/shift}.\r\n   */\r\n  shift() {\r\n    return this.$.shift();\r\n  }\r\n\r\n  /**\r\n   * @method Arr#shuffle\r\n   * @public\r\n   * @returns {Arr} Returns this.\r\n   * @description Method for shuffling.\r\n   *\r\n   * @example\r\n   * new Arr([1, 2, 3, 4]).shuffle().$; // [4, 2, 3, 1]\r\n   * new Arr([1, 2, 3, 4]).shuffle().$; // [1, 3, 4, 2]\r\n   */\r\n  shuffle() {\r\n    const length = this.$.length;\r\n\r\n    return this.forEach((value, index, array) => {\r\n      const randomIndex = index + Math.floor((length - index) * Math.random());\r\n\r\n      array[index] = array[randomIndex];\r\n      array[randomIndex] = value;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Arr#slice\r\n   * @public\r\n   * @param {Number} [begin = 0] - See the link.\r\n   * @param {Number} [end = array.length] - See the link.\r\n   * @returns {Arr} A wrap of a sliced array.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\r\n   * @description Synonym for\r\n   * [Array#slice]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/slice}.\r\n   */\r\n  slice(begin, end) {\r\n    return new this.constructor(this.$.slice.apply(this.$, arguments));\r\n  }\r\n\r\n  /**\r\n   * @method Arr#sort\r\n   * @public\r\n   * @param {CompareFunction} [compareFunction] - See the link.\r\n   * @returns {Arr} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\r\n   * @description Synonym for\r\n   * [Array#sort]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/sort}.\r\n   */\r\n  sort(compareFunction) {\r\n    validate([compareFunction], ['function||!'], 'Arr#sort');\r\n\r\n    this.$.sort(compareFunction);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Arr#sortAsc\r\n   * @public\r\n   * @returns {Arr} Returns this.\r\n   * @description Method for ascending sorting. Puts non-numbers first, then NaNs, then sorted values.\r\n   *\r\n   * @example\r\n   * new Arr([NaN, 1, -7, '100', 5]).sortAsc().$; // ['100', NaN, -7, 1, 5]\r\n   */\r\n  sortAsc() {\r\n    return this.sort(asc);\r\n  }\r\n\r\n  /**\r\n   * @method Arr#sortDesc\r\n   * @public\r\n   * @returns {Arr} Returns this.\r\n   * @description Method for descending sorting. Puts sorted values first, then NaNs, then non-numbers.\r\n   *\r\n   * @example\r\n   * new Arr([NaN, 1, -7, '100', 5]).sortDesc().$; // [5, 1, -7, NaN, '100']\r\n   */\r\n  sortDesc() {\r\n    return this.sort((y, x) => asc(x, y));\r\n  }\r\n\r\n  /**\r\n   * @method Arr#splice\r\n   * @public\r\n   * @param {Number} [start] - See the link.\r\n   * @param {Number} [deleteCount] - See the link.\r\n   * @param {...*} [items] - See the link.\r\n   * @returns {Arr} A wrap of return value of #splice call.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\r\n   * @description Synonym for\r\n   * [Array#splice]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/splice}.\r\n   */\r\n  splice(start, deleteCount, ...items) {\r\n    return new Arr(this.$.splice.apply(this.$, arguments));\r\n  }\r\n\r\n  /**\r\n   * @method Arr#string\r\n   * @public\r\n   * @returns {String} Concatenated array.\r\n   * @description Synonym for array.join('').\r\n   *\r\n   * @example\r\n   * new Arr([1, 2, 3]).string(); // '123'\r\n   */\r\n  string() {\r\n    return this.join('');\r\n  }\r\n\r\n  /**\r\n   * @method Arr#unshift\r\n   * @public\r\n   * @param {...*} [values] - See the link.\r\n   * @returns {Arr} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\r\n   * @description Synonym for\r\n   * [Array#unshift]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift}\r\n   * besides returning this.\r\n   */\r\n  unshift(...values) {\r\n    this.$.unshift.apply(this.$, arguments);\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\ndefineProperties(Arr.prototype, {\r\n  [Symbol.toStringTag]: 'Arr'\r\n});\r\n\r\n/**\r\n * @function asc\r\n * @private\r\n * @param {*} x - First value to be compared.\r\n * @param {*} y - Second value to be compared.\r\n * @returns {Number} Where to put the first element: before or after.\r\n */\r\nfunction asc(x, y) {\r\n  if (!isNumber(x) && !isNumber(y)) {\r\n    return 0;\r\n  }\r\n\r\n  if (!isNumber(x)) {\r\n    return -1;\r\n  }\r\n\r\n  if (!isNumber(y)) {\r\n    return 1;\r\n  }\r\n\r\n  if (isNaN(x) && isNaN(y)) {\r\n    return 0;\r\n  }\r\n\r\n  if (isNaN(x)) {\r\n    return -1;\r\n  }\r\n\r\n  if (isNaN(y)) {\r\n    return 1;\r\n  }\r\n\r\n  return x - y;\r\n}\r\n\r\nconstructors[1].push({\r\n  check: isArrayLike,\r\n  cls: Arr\r\n});\r\n\r\n/**\r\n * @function array\r\n * @public\r\n * @param {Number} number - Length of the array.\r\n * @param {ArrayCallback} [callback] - If it's present it has to be a function\r\n * that returns the element that is pushed to the new array.\r\n * @returns {Arr} New instance of Arr.\r\n * @description Method for creating new array from the length using optional callback.\r\n *\r\n * @example\r\n * array(3).$;               // [0, 1, 2]\r\n * array(3, (i) => i * 2).$; // [0, 2, 4]\r\n */\r\nfunction array(number, callback) {\r\n  validate([number, callback], [['intLike', '>=0'], 'function||!'], 'array');\r\n\r\n  const array = [];\r\n\r\n  for (let i = 0; i < number; i++) {\r\n    array.push(callback ? callback(i) : i);\r\n  }\r\n\r\n  return new Arr(array);\r\n}\r\n\r\n/**\r\n * @function iterate\r\n * @public\r\n * @param {Number} number - Number of iterations.\r\n * @param {IterateCallback} callback - Callback that is called on each iteration with the iteration index.\r\n * @returns {void}\r\n * @description Method for replacing for (...) construction.\r\n *\r\n * @example\r\n * iterate();\r\n */\r\nfunction iterate(number, callback) {\r\n  validate([number, callback], [['intLike', '>=0'], 'function'], 'iterate');\r\n\r\n  for (let i = 0; i < number; i++) {\r\n    callback(i);\r\n  }\r\n}\r\n\r\nexport { Arr, array, iterate };\r\n","/**\r\n * @module BlobObject\r\n * @private\r\n * @mixin\r\n * @description Exports BlobObject class.\r\n */\r\n\r\nimport { Super } from './Super';\r\nimport { Promise } from './Promise';\r\nimport { constructors } from './constants';\r\nimport {\r\n  isArray, isFunction,\r\n  toStringTag, Symbol, defineProperties\r\n} from './helpers';\r\n\r\n/**\r\n * @typedef {{ buffer: String, binary: String, dataURL: String, text: String }} methods\r\n * @private\r\n * @description List of read blob methods.\r\n */\r\nconst methods = {\r\n  buffer: 'ArrayBuffer',\r\n  binary: 'BinaryString',\r\n  dataURL: 'DataURL',\r\n  text: 'Text'\r\n};\r\nconst { URL } = global;\r\n\r\n/**\r\n * @typedef {('buffer'|'binary'|'dataURL'|'text')} ReadBlobMethod\r\n * @public\r\n * @description Enum type of read blob methods.\r\n */\r\n\r\n/**\r\n * @typedef {ArrayBuffer|ArrayBufferView|Blob|String} BlobParts\r\n * @public\r\n * @description Allowed blob parts.\r\n */\r\n\r\n/**\r\n * @callback ReaderEventListener\r\n * @public\r\n * @param {Event} e - Fired event.\r\n * @param {FileReader} reader - FileReader.\r\n */\r\n\r\n/**\r\n * @class BlobObject\r\n * @extends Super\r\n * @public\r\n * @param {Blob} blob - Blob to wrap.\r\n * @returns {BlobObject} Instance of BlobObject.\r\n * @description Wrap of a blob.\r\n *\r\n * @example\r\n * new BlobObject(new Blob(['{\"foo\":\"bar\"}'], { type: 'application/json' }));\r\n */\r\nclass BlobObject extends Super {\r\n  /**\r\n   * @member BlobObject#$\r\n   * @type {Blob}\r\n   * @public\r\n   * @description Original Blob.\r\n   */\r\n\r\n  /**\r\n   * @member {String} BlobObject#dataURL\r\n   * @type {String}\r\n   * @public\r\n   * @readonly\r\n   * @description Returns dataURL representation of the blob.\r\n   */\r\n  get dataURL() {\r\n    return URL.createObjectURL(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method BlobObject#readAs\r\n   * @public\r\n   * @param {ReadBlobMethod} method - Method that is used for reading from blob.\r\n   * @param {ReaderEventListener} [progress] - Progress listener.\r\n   * @returns {Promise} Promise that could be aborted.\r\n   * @description Method for reading from blobs.\r\n   *\r\n   * @example\r\n   * new BlobObject(new Blob(['{\"foo\":\"bar\"}'], { type: 'application/json' }))\r\n   *   .readAs('text')\r\n   *   .then((value) => {\r\n   *     console.log(value); // '{\"foo\":\"bar\"}'\r\n   *   });\r\n   */\r\n  readAs(method, progress) {\r\n    if (!methods[method]) {\r\n      throw new Error('1st argument must be one of following values: buffer, binary, dataURL, text');\r\n    }\r\n\r\n    let reader = new FileReader();\r\n    let toReject;\r\n\r\n    if (isFunction(progress)) {\r\n      reader.onprogress = function (e) {\r\n        progress(e, this);\r\n      };\r\n    }\r\n\r\n    const promise = new Promise((resolve, reject) => {\r\n      toReject = reject;\r\n\r\n      reader.onerror = ({ target }) => {\r\n        if (reader) {\r\n          reject(target.error);\r\n        }\r\n      };\r\n\r\n      reader.onload = ({ target }) => {\r\n        resolve(target.result);\r\n      };\r\n\r\n      reader[`readAs${ methods[method] }`](this.$);\r\n    });\r\n\r\n    promise.abort = function abort() {\r\n      toReject(new Error('Reading was aborted'));\r\n\r\n      reader.abort();\r\n\r\n      reader = null;\r\n\r\n      return this;\r\n    };\r\n\r\n    return promise;\r\n  }\r\n\r\n  /**\r\n   * @method BlobObject#saveAs\r\n   * @public\r\n   * @param {String} [name] - Name that is used for saving file.\r\n   * @returns {BlobObject} Returns this.\r\n   * @description Method for saving blobs.\r\n   *\r\n   * @example\r\n   * new BlobObject(new Blob(['{\"foo\":\"bar\"}'], { type: 'application/json' }))\r\n   *   .saveAs('blob.json');\r\n   */\r\n  saveAs(name = 'download') {\r\n    const anchor = document.createElement('a');\r\n\r\n    anchor.href = this.dataURL;\r\n    anchor.setAttribute('download', name);\r\n    anchor.click();\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\ndefineProperties(BlobObject.prototype, {\r\n  [Symbol.toStringTag]: 'BlobObject'\r\n});\r\n\r\nconstructors[1].push({\r\n  check: (blob) => /^(Blob|File)$/.test(toStringTag(blob)),\r\n  cls: BlobObject\r\n});\r\n\r\n/**\r\n * @function blob\r\n * @public\r\n * @param {(BlobParts[]|BlobParts)} blobParts - Blob parts that are passed to\r\n * [Blob]{@link https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob} constructor.\r\n * @param {Object} [options] - Options that are passed to\r\n * [Blob]{@link https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob} constructor.\r\n * @returns {BlobObject} New instance of BlobObject.\r\n * @description Function for creating blobs not involving BlobObject and Blob constructors.\r\n */\r\nfunction blob(blobParts, options = {}) {\r\n  if (!isArray(blobParts)) {\r\n    blobParts = [blobParts];\r\n  }\r\n\r\n  return new BlobObject(new Blob(blobParts, options));\r\n}\r\n\r\nexport { BlobObject, blob };\r\n","/**\r\n * @module Str\r\n * @private\r\n * @mixin\r\n * @description Exports Str class.\r\n */\r\n\r\nimport { D } from './D';\r\nimport { Super } from './Super';\r\nimport { constructors, regexpSpecialCharacters } from './constants';\r\nimport {\r\n  isFunction, isNumberLike, isObject, isString,\r\n  validate, Symbol, defineProperties, iterate\r\n} from './helpers';\r\n\r\nconst htmlSpecials = {\r\n  '&': '&amp;',\r\n  '<': '&lt;',\r\n  '>': '&gt;'\r\n};\r\nconst regexpSpecialsRegexp = new RegExp(\r\n  new Super(regexpSpecialCharacters)\r\n    .word((x) => `\\\\${ x }|`)\r\n    .replace(/\\|$/, ''),\r\n  'g'\r\n);\r\n\r\n/**\r\n * @class Str\r\n * @extends Super\r\n * @public\r\n * @param {String} [string = ''] - A string to wrap.\r\n * @returns {Str} Instance of Str.\r\n * @description Wrap of a string.\r\n *\r\n * @example\r\n * const s = new Num('1');\r\n */\r\nclass Str extends Super {\r\n  constructor(string = '') {\r\n    super(`${ string }`);\r\n\r\n    /**\r\n     * @member Str#$\r\n     * @type {String}\r\n     * @public\r\n     * @description Original string.\r\n     */\r\n  }\r\n\r\n  /**\r\n   * @method Str#capitalizeFirst\r\n   * @public\r\n   * @returns {Str} Capitalized string.\r\n   * @description Method capitalizing the first symbol.\r\n   *\r\n   * @example\r\n   * new Str('foo').capitalizeFirst().$; // 'Foo'\r\n   */\r\n  capitalizeFirst() {\r\n    const string = this.$;\r\n\r\n    return new Str(string.slice(0, 1).toUpperCase() + string.slice(1));\r\n  }\r\n\r\n  /**\r\n   * @method Str#endsWith\r\n   * @public\r\n   * @param {String} searchString - See the link.\r\n   * @param {Number} [position = string.length] - See the link.\r\n   * @returns {Boolean} If the string ends with the argument string.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\r\n   * @description Synonym for\r\n   * [String#endsWith]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith}.\r\n   */\r\n  endsWith(searchString, position) {\r\n    if (arguments.length < 2) {\r\n      position = this.$.length;\r\n    }\r\n\r\n    return this\r\n      .slice(0, position)\r\n      .revert()\r\n      .startsWith(new Str(searchString).revert().$);\r\n  }\r\n\r\n  /**\r\n   * @method Str#escapeHTML\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Methods escaping \"&\", \"<\" and \">\" symbols.\r\n   *\r\n   * @example\r\n   * new Str('\"1 < 2\" & \"7 > 4\" are true expressions.').escapeHTML().$;\r\n   * // '\"1 &lt; 2\" &amp \"7 &gt; 2\" are true expressions.'\r\n   */\r\n  escapeHTML() {\r\n    let string = this.$;\r\n\r\n    iterate(htmlSpecials, (escaped, symbol) => {\r\n      string = string.replace(new RegExp(symbol, 'g'), escaped);\r\n    });\r\n\r\n    return new Str(string);\r\n  }\r\n\r\n  /**\r\n   * @method Str#escapeRegExp\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Method escaping RegExp special characters.\r\n   *\r\n   * @example\r\n   * new Str('(213.98 - [] {})').escapeRegExp().$; // '\\(213\\.98 \\- \\[\\] \\{\\}\\)'\r\n   */\r\n  escapeRegExp() {\r\n    return this.replace(regexpSpecialsRegexp, '\\\\$&');\r\n  }\r\n\r\n  /**\r\n   * @method Str#in\r\n   * @public\r\n   * @param {*} object - Object to check the string as a property in.\r\n   * @returns {Boolean} If it is in the object or not.\r\n   * @description Returns string in object.\r\n   *\r\n   * @example\r\n   * new Str('a').in({ a: 1 }); // true\r\n   * new Str('toFixed').in(1);  // false\r\n   * new Str('a').in(null);     // false\r\n   */\r\n  in(object) {\r\n    if (!isObject(object)) {\r\n      return false;\r\n    }\r\n\r\n    return this.$ in object;\r\n  }\r\n\r\n  /**\r\n   * @method Str#indexOf\r\n   * @public\r\n   * @param {String} searchValue - See the link.\r\n   * @param {Number} [fromIndex = 0] - See the link.\r\n   * @returns {Number} Found index or -1.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\r\n   * @description Synonym for\r\n   * [String#indexOf]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf}.\r\n   */\r\n  indexOf(searchValue, fromIndex) {\r\n    return this.$.indexOf.apply(this.$, arguments);\r\n  }\r\n\r\n  /**\r\n   * @method Str#lastIndexOf\r\n   * @public\r\n   * @param {String} searchValue - See the link.\r\n   * @param {Number} [fromIndex = string.length] - See the link.\r\n   * @returns {Number} Found index or -1.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf\r\n   * @description Synonym for\r\n   * [String#lastIndexOf]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf}.\r\n   */\r\n  lastIndexOf(searchValue, fromIndex) {\r\n    return this.$.lastIndexOf.apply(this.$, arguments);\r\n  }\r\n\r\n  /**\r\n   * @member Str#length\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/length\r\n   * @description Synonym for\r\n   * [String#length]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/length}.\r\n   */\r\n  get length() {\r\n    return this.$.length;\r\n  }\r\n\r\n  /**\r\n   * @method Str#match\r\n   * @public\r\n   * @returns {Arr|Super} D-Wrap of found match.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/match\r\n   * @description Synonym for\r\n   * [String#match]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/match}.\r\n   */\r\n  match(regexp) {\r\n    return D(this.$.match.apply(this.$, arguments));\r\n  }\r\n\r\n  /**\r\n   * @method Str#repeat\r\n   * @public\r\n   * @param {Integer} times - Times to repeat the string.\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\r\n   * @description Synonym for\r\n   * [String#repeat]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/repeat}.\r\n   *\r\n   * @example\r\n   * new Str('123').repeat(2).$; // '123123'\r\n   * new Str('123').repeat(0).$; // ''\r\n   */\r\n  repeat(times) {\r\n    validate([times], [['intLike', '>=0']], 'Str#repeat');\r\n\r\n    times = +times;\r\n\r\n    const string = this.$;\r\n\r\n    let s = '';\r\n\r\n    for (let i = 0; i < times; i++) {\r\n      s += string;\r\n    }\r\n\r\n    return new Str(s);\r\n  }\r\n\r\n  /**\r\n   * @method Str#replace\r\n   * @public\r\n   * @param {RegExp|String} regexp - See the link.\r\n   * @param {String|Function} [replacer = ''] - See the link.\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/replace\r\n   * @description Synonym for\r\n   * [String#replace]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/replace}\r\n   * besides that replacer has a default value of ''.\r\n   */\r\n  replace(regexp, replacer = '') {\r\n    return new Str(this.$.replace(regexp, replacer));\r\n  }\r\n\r\n  /**\r\n   * @method Str#replaceString\r\n   * @public\r\n   * @param {String} string - String to replace.\r\n   * @param {String} [replacer = ''] - String to replace with.\r\n   * @returns {Str} New instance of Str.\r\n   * @description Method for global string replaceing.\r\n   *\r\n   * @example\r\n   * new Str('123123').replaceString('1', '4').$; // '423423'\r\n   * new Str('123123').replaceString('1').$;      // '2323'\r\n   */\r\n  replaceString(string, replacer = '') {\r\n    string = new Super(string).$;\r\n\r\n    validate([string], ['string'], 'Str#replaceString');\r\n\r\n    return new Str(this.$.split(string).join(replacer));\r\n  }\r\n\r\n  /**\r\n   * @method Str#revert\r\n   * @public\r\n   * @returns {Str} New instance of string.\r\n   * @description Method for reverting a string.\r\n   *\r\n   * @example\r\n   * new Str('1234').revert().$; // '4321'\r\n   */\r\n  revert() {\r\n    const string = this.$;\r\n    let str = '';\r\n\r\n    for (let i = string.length - 1; i >= 0; i--) {\r\n      str += string[i];\r\n    }\r\n\r\n    return new Str(str);\r\n  }\r\n\r\n  /**\r\n   * @method Str#search\r\n   * @public\r\n   * @param {RegExp} regexp - See the link.\r\n   * @returns {Number} Index of the first match, if found, and -1 if not.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/search\r\n   * @description Synonym for\r\n   * [String#search]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/search}.\r\n   */\r\n  search(regexp) {\r\n    validate([regexp], ['regexp']);\r\n\r\n    return this.$.search.apply(this.$, arguments);\r\n  }\r\n\r\n  /**\r\n   * @method Str#slice\r\n   * @public\r\n   * @param {Number} [beginSlice = 0] - See the link.\r\n   * @param {Number} [endSlice = string.length] - See the link.\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/slice\r\n   * @description Synonym for\r\n   * [String#slice]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/slice}.\r\n   */\r\n  slice(beginSlice, endSlice) {\r\n    return new Str(this.$.slice.apply(this.$, arguments));\r\n  }\r\n\r\n  /**\r\n   * @method Str#split\r\n   * @public\r\n   * @param {RegExp|String} [separator] - See the link.\r\n   * @returns {Arr|Super} D-Wrap of the array.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/split\r\n   * @description Synonym for\r\n   * [String#split]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/split}.\r\n   */\r\n  split(separator) {\r\n    return D(this.$.split.apply(this.$, arguments));\r\n  }\r\n\r\n  /**\r\n   * @method Str#startsWith\r\n   * @public\r\n   * @param {String} searchString - See the link.\r\n   * @param {Number} [position = 0] - See the link.\r\n   * @returns {Boolean} If the string ends with the argument string.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\r\n   * @description Synonym for\r\n   * [String#startsWith]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith}.\r\n   */\r\n  startsWith(searchString, position = 0) {\r\n    return this.$.indexOf.apply(this.$, arguments) === position;\r\n  }\r\n\r\n  /**\r\n   * @method Str#substr\r\n   * @public\r\n   * @param {Number} [start = 0] - See the link.\r\n   * @param {Number} [length = string.length] - See the link.\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/substr\r\n   * @description Synonym for\r\n   * [String#substr]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/substr}.\r\n   */\r\n  substr(start, length) {\r\n    return new Str(this.$.substr.apply(this.$, arguments));\r\n  }\r\n\r\n  /**\r\n   * @method Str#substring\r\n   * @public\r\n   * @param {Number} [indexStart = 0] - See the link.\r\n   * @param {Number} [indexEnd = string.length] - See the link.\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/substring\r\n   * @description Synonym for\r\n   * [String#substring]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/substring}.\r\n   */\r\n  substring(indexStart, indexEnd) {\r\n    return new Str(this.$.substring.apply(this.$, arguments));\r\n  }\r\n\r\n  /**\r\n   * @method Str#toCamelCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Removes following regexp /\\s\\-_\\./ making the string camel cased.\r\n   *\r\n   * @example\r\n   * new Str('spinal-case').toCamelCase().$;  // 'spinalCase'\r\n   * new Str('_snake_case_').toCamelCase().$; // 'snakeCase'\r\n   */\r\n  toCamelCase() {\r\n    return new Str(trim(this.$)\r\n      .replace(/[\\s\\-_.]+/g, '-')\r\n      .replace(/-[^-]/g, (match) => match[1].toUpperCase())\r\n      .replace(/^[\\S]/, (match) => match.toLowerCase())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @method Str#toCapitalCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Removes following regexp /\\-_\\./ making the string capital letter cased.\r\n   *\r\n   * @example\r\n   * new Str('spinal-case').toCapitalCase().$;  // 'Spinal Case'\r\n   * new Str('_snake_case_').toCapitalCase().$; // 'Snake Case'\r\n   */\r\n  toCapitalCase() {\r\n    return new Str(trim(this.$)\r\n      .replace(/[\\s\\-_.]+/g, ' ')\r\n      .replace(/[\\S]/g, (match) => (\r\n        match.toLowerCase() === match ? match : ` ${ match }`\r\n      ))\r\n      .replace(/\\s[\\S]/g, (match) => match.toUpperCase())\r\n      .replace(/\\s+/g, ' ')\r\n      .replace(/^\\s/, '')\r\n      .replace(/^[\\S]/, (match) => match.toUpperCase())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @method Str#toDotCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Removes following regexp /\\-_\\./ making the string dot cased.\r\n   *\r\n   * @example\r\n   * new Str('spinal-case').toDotCase().$;  // 'spinal.case'\r\n   * new Str('_snake_case_').toDotCase().$; // 'snake.case'\r\n   */\r\n  toDotCase() {\r\n    return new Str(trim(this.$)\r\n      .replace(/[\\s\\-_.]+/g, '.')\r\n      .replace(/[^.]/g, (match) => (\r\n        match.toLowerCase() === match ? match : `.${ match }`\r\n      ))\r\n      .replace(/\\.+/g, '.')\r\n      .replace(/^\\./, '')\r\n      .toLowerCase()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @method Str#toHyphenCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Removes following regexp /\\s\\-_\\./ making the string camel cased.\r\n   *\r\n   * @example\r\n   * new Str('camelCase').toSpinalCase().$;    // 'camel-case'\r\n   * new Str('_snake_case_').toSpinalCase().$; // 'snake-case'\r\n   */\r\n  toHyphenCase() {\r\n    return new Str(trim(this.$)\r\n      .replace(/[\\s\\-_.]+/g, '-')\r\n      .replace(/[^-]/g, (match) => (\r\n        match.toLowerCase() === match ? match : `-${ match }`\r\n      ))\r\n      .replace(/-+/g, '-')\r\n      .replace(/^-/, '')\r\n      .toLowerCase()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @method Str#toLowerCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase\r\n   * @description Synonym for\r\n   * [String#toLowerCase]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase}.\r\n   *\r\n   * @example\r\n   * new Str('UPPER-CASE').toLowerCase().$;  // 'upper-case'\r\n   */\r\n  toLowerCase() {\r\n    return new Str(this.$.toLowerCase());\r\n  }\r\n\r\n  /**\r\n   * @method Str#toSnakeCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Removes following regexp /\\s\\-\\./ making the string spinal cased.\r\n   *\r\n   * @example\r\n   * new Str('spinal-case').toSnakeCase().$; // 'spinal_case'\r\n   * new Str('camelCase').toSnakeCase().$;   // 'camel_case'\r\n   */\r\n  toSnakeCase() {\r\n    return new Str(trim(this.$)\r\n      .replace(/[\\s\\-_.]+/g, '_')\r\n      .replace(/[^_]/g, (match) => (\r\n        match.toLowerCase() === match ? match : `_${ match }`\r\n      ))\r\n      .replace(/_+/g, '_')\r\n      .replace(/^_/, '')\r\n      .toLowerCase()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @method Str#toSpaceCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Removes following regexp /\\-_\\./ making the string space cased.\r\n   *\r\n   * @example\r\n   * new Str('spinal-case').toSpaceCase().$;  // 'spinal case'\r\n   * new Str('_snake_case_').toSpaceCase().$; // 'snake case'\r\n   */\r\n  toSpaceCase() {\r\n    return new Str(trim(this.$)\r\n      .replace(/[\\s\\-_.]+/g, ' ')\r\n      .replace(/[\\S]/g, (match) => (\r\n        match.toLowerCase() === match ? match : ` ${ match }`\r\n      ))\r\n      .replace(/\\s+/g, ' ')\r\n      .replace(/^\\s/, '')\r\n      .toLowerCase()\r\n    );\r\n  }\r\n\r\n  toString() {\r\n    return this.$;\r\n  }\r\n\r\n  /**\r\n   * @method Str#toUpperCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\r\n   * @description Synonym for\r\n   * [String#toUpperCase]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase}.\r\n   *\r\n   * @example\r\n   * new Str('lower-case').toUpperCase().$;  // 'LOWER-CASE'\r\n   */\r\n  toUpperCase() {\r\n    return new Str(this.$.toUpperCase());\r\n  }\r\n\r\n  /**\r\n   * @method Str#trim\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trim\r\n   * @description Synonym for\r\n   * [String#trim]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trim}.\r\n   */\r\n  trim() {\r\n    return new Str(this.$.replace(/^[\\s\\ufeff\\u00a0]+|[\\s\\ufeff\\u00a0]+$/g, ''));\r\n  }\r\n\r\n  /**\r\n   * @method Str#trimLeft\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trimLeft\r\n   * @description Synonym for\r\n   * [String#trimLeft]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trimLeft}.\r\n   */\r\n  trimLeft() {\r\n    return new Str(this.$.replace(/^[\\s\\ufeff\\u00a0]+/, ''));\r\n  }\r\n\r\n  /**\r\n   * @method Str#trimRight\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trimRight\r\n   * @description Synonym for\r\n   * [String#trimRight]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trimRight}.\r\n   */\r\n  trimRight() {\r\n    return new Str(this.$.replace(/[\\s\\ufeff\\u00a0]+$/, ''));\r\n  }\r\n}\r\n\r\ndefineProperties(Str.prototype, {\r\n  [Symbol.toStringTag]: 'Str'\r\n});\r\n\r\nconstructors[2].push({\r\n  check: isString,\r\n  cls: Str\r\n});\r\n\r\nfunction trim(string) {\r\n  return string.replace(/^[\\s\\-_.]+|[\\s\\-_.]+$/g, '');\r\n}\r\n\r\n/**\r\n * @function parseJSON\r\n * @public\r\n * @param {String} [json = null] - String to parse.\r\n * @param {Object} [options] - Options.\r\n * @param {Boolean|*} [options.numbers] - If it is needed to parse number-like strings as numbers.\r\n * @param {Boolean|*} [options.dates] - If it is needed to parse date-like string as dates.\r\n * Date-like string is considered to match ^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\\dZ?$\r\n * @param {JSONCallback} [callback] - Callback that called on every iteration.\r\n * @returns {DWrap} D-Wrap of found match.\r\n * @description Method for parsing json.\r\n *\r\n * @example\r\n * parseJSON('{ \"a\": 1 }').$;                                           // { a: 1 }\r\n * parseJSON('{ \"a\": \"1\" }', { numbers: true }).$;                      // { numbers: true }\r\n * parseJSON('{ \"a\": \"1999-12-31T23:59:59.999Z\" }', { dates: true }).$; // { a: Date {...} }\r\n */\r\nfunction parseJSON(json = null, options = {}, callback) {\r\n  if (arguments.length <= 1) {\r\n    return D(JSON.parse(json));\r\n  }\r\n\r\n  if (isFunction(options)) {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n\r\n  const { numbers, dates } = options;\r\n  const parsed = JSON.parse(json, function (key, value) {\r\n    if (dates && /^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\\dZ?$/.test(value)) {\r\n      value = new Date(value);\r\n    } else if (numbers && isNumberLike(value) && isString(value)) {\r\n      value = Number(value);\r\n    }\r\n\r\n    return callback ? callback.apply(this, arguments) : value;\r\n  });\r\n\r\n  return D(parsed);\r\n}\r\n\r\nexport { Str, parseJSON };\r\n","/**\r\n * @module helpers/markupToJSON\r\n * @private\r\n * @description Exports markupToJSON method.\r\n */\r\n\r\nimport { Arr } from '../Arr';\r\nimport { Str } from '../Str';\r\nimport { Super } from '../Super';\r\nimport { switcher } from '../Switcher';\r\nimport { htmlAllowedTagSymbols, htmlAllowedAttrSymbols, voidElements } from '../constants';\r\n\r\n/**\r\n * @typedef {Object} MarkupElement\r\n * @property {'comment'|'text'|'element'} type - Type of the node.\r\n * @property {MarkupElement} parent - Type of the node.\r\n * @property {Object.<String, String>} attrs - Node attributes\r\n * @property {MarkupElement[]} children - Node children.\r\n */\r\n\r\nconst submitString = 'Please, submit an issue at https://github.com/dwaynejs/dwayne/issues.';\r\nconst NODE_REGEX_SET = new Super({\r\n  'tag-open': new RegExp(`<(${ htmlAllowedTagSymbols })\\\\s*`, 'i'),\r\n  'tag-close': constructCloseTagRegExp(htmlAllowedTagSymbols),\r\n  comment: /<!--((?:-[^\\->]|[^\\->])(?:-?[^-])*[^-]?|)-->/\r\n});\r\nconst TAG_OPEN_CLOSE = /^(\\/?)>/;\r\n// const ATTRIBUTE = /^([^\\u0000-\\u0020\\s\"'>\\/=]+)(?:\\s*=\\s*('[^']*'|\"[^\"]*\"|[^\\s\"'`<>=]+))?\\s*/;\r\nconst ATTRIBUTE = new RegExp(`^(${ htmlAllowedAttrSymbols })(?:\\\\s*=\\\\s*('[^']*'|\"[^\"]*\"|[^\\\\s\"'\\`<>=]+))?\\\\s*`);\r\nconst div = document.createElement('div');\r\nconst nodeSwitcher = switcher('strictEquals', (elem) => elem)\r\n  .case('tag-open', (elem, node) => {\r\n    const {\r\n      value: name,\r\n      selfClosing\r\n    } = node;\r\n\r\n    node = {\r\n      name,\r\n      attrs: new Super(node.attrs).map((value) => (\r\n        parseCharacterData(value)\r\n      )).$,\r\n      parent: elem,\r\n      children: new Arr([])\r\n    };\r\n\r\n    elem.children.push(node);\r\n\r\n    if (!selfClosing && voidElements.indexOf(name) === -1) {\r\n      elem = node;\r\n    }\r\n\r\n    return elem;\r\n  })\r\n  .case('tag-close', (elem, node) => {\r\n    if (elem.name === node.value) {\r\n      elem = elem.parent;\r\n    }\r\n\r\n    return elem;\r\n  })\r\n  .case(['comment', 'text'], (elem, node, collapseWhiteSpace, type) => {\r\n    const element = {\r\n      name: `#${ type }`,\r\n      parent: elem,\r\n      value: node.value\r\n    };\r\n\r\n    if (type === 'text' && elem.name !== 'script' && elem.name !== 'style') {\r\n      element.value = parseCharacterData(element.value);\r\n\r\n      if (collapseWhiteSpace) {\r\n        element.value = new Str(element.value).trim().$;\r\n      }\r\n    }\r\n\r\n    if (!collapseWhiteSpace || !/^\\s*$/.test(element.value)) {\r\n      elem.children.push(element);\r\n    }\r\n\r\n    return elem;\r\n  });\r\nconst rawTextSwitcher = switcher('strictEquals', false)\r\n  .case(['title', 'textarea', 'style', 'script'], true);\r\n\r\nclass InternalParsingError {\r\n  constructor(index) {\r\n    this.index = index;\r\n  }\r\n}\r\n\r\nclass ParsingError extends Error {\r\n  type = 'PARSING_ERROR';\r\n}\r\n\r\n/**\r\n * @function markupToJSON\r\n * @private\r\n * @param {String} markup - Markup to parse to JSON.\r\n * @param {Boolean} [collapseWhiteSpace = false] - If the whitespace should be collapsed.\r\n * @returns {Arr.<MarkupElement>} Markup elements array.\r\n * @description Function for parsing html and xml to JSON.\r\n */\r\nexport default (markup, collapseWhiteSpace) => {\r\n  collapseWhiteSpace = !!collapseWhiteSpace;\r\n\r\n  const elements = new Arr([]);\r\n  const startMarkup = markup;\r\n  let found;\r\n  let globalIndex = 0;\r\n  let elem = {\r\n    name: null,\r\n    children: elements\r\n  };\r\n\r\n  while (markup.length) {\r\n    try {\r\n      found = find(markup, elem);\r\n    } catch (err) {\r\n      if (!(err instanceof InternalParsingError)) {\r\n        throwUnexpectedError();\r\n      }\r\n\r\n      throw new ParsingError(`Parsing error near index ${ nearString(startMarkup, globalIndex + err.index) }`);\r\n    }\r\n\r\n    const {\r\n      type,\r\n      attrs,\r\n      selfClosing,\r\n      index,\r\n      value\r\n    } = found;\r\n\r\n    globalIndex += index;\r\n\r\n    if (!index) {\r\n      throwUnexpectedError();\r\n    }\r\n\r\n    const node = {\r\n      type,\r\n      value\r\n    };\r\n\r\n    if (type === 'tag-open') {\r\n      node.attrs = attrs;\r\n      node.selfClosing = selfClosing;\r\n    }\r\n\r\n    elem = nodeSwitcher(node.type, [elem, node, collapseWhiteSpace]);\r\n\r\n    markup = markup.slice(index);\r\n  }\r\n\r\n  return elements;\r\n\r\n  function throwUnexpectedError() {\r\n    throw new ParsingError(`Unexpected parsing error near index ${ nearString(startMarkup, globalIndex) }. ${ submitString }`);\r\n  }\r\n};\r\n\r\nfunction find(markup, elem) {\r\n  const { name } = elem;\r\n  let matches;\r\n\r\n  if (rawTextSwitcher(name)) {\r\n    matches = new Super({\r\n      'tag-close': markup.match(constructCloseTagRegExp(name))\r\n    });\r\n  } else {\r\n    matches = NODE_REGEX_SET.map((regex) => (\r\n      markup.match(regex)\r\n    ));\r\n  }\r\n\r\n  let match;\r\n\r\n  if (\r\n    match = matches.find((match) => (\r\n      match && match.index === 0\r\n    ))\r\n  ) {\r\n    const returning = {\r\n      type: match.key,\r\n      index: match.value[0].length,\r\n      value: match.value[1]\r\n    };\r\n    const attrs = {};\r\n\r\n    if (match.key === 'tag-open') {\r\n      const startMarkup = markup;\r\n      let closeMatch;\r\n\r\n      returning.selfClosing = false;\r\n      returning.attrs = attrs;\r\n\r\n      while (\r\n        (markup = startMarkup.slice(returning.index)) &&\r\n        !(closeMatch = markup.match(TAG_OPEN_CLOSE))\r\n      ) {\r\n        const attr = markup.match(ATTRIBUTE);\r\n\r\n        if (!attr) {\r\n          returning.index += 1;\r\n\r\n          continue;\r\n        }\r\n\r\n        attrs[attr[1]] = (attr[2] || '').replace(/^(\"|')|(\"|')$/g, '');\r\n        returning.index += attr[0].length;\r\n      }\r\n\r\n      if (closeMatch) {\r\n        returning.index += closeMatch[0].length;\r\n        returning.selfClosing = !!closeMatch[1];\r\n      }\r\n    }\r\n\r\n    return returning;\r\n  }\r\n\r\n  let { value: index } = matches.min((match) => (\r\n    match ? match.index : NaN\r\n  ));\r\n\r\n  if (index === Infinity) {\r\n    index = markup.length;\r\n  }\r\n\r\n  return {\r\n    type: 'text',\r\n    index,\r\n    value: markup.slice(0, index)\r\n  };\r\n}\r\n\r\nfunction constructCloseTagRegExp(tagName) {\r\n  return new RegExp(`</(${ tagName })\\\\s*>`, 'i');\r\n}\r\n\r\nfunction nearString(markup, index) {\r\n  return `${ index } (~~~ \"${ markup.slice(index, index + 15) }\" ~~~, the string itself is \"${ markup }\")`;\r\n}\r\n\r\nfunction parseCharacterData(string) {\r\n  return string.replace(/&(\\w+|#x?\\d+);/g, (match) => {\r\n    div.innerHTML = match;\r\n\r\n    return div.textContent || div.innerText;\r\n  });\r\n}\r\n","/**\r\n * @module Elem\r\n * @private\r\n * @mixin\r\n * @description Exports Elem class.\r\n */\r\n\r\nimport { Super } from './Super';\r\nimport { Arr, array, iterate as times } from './Arr';\r\nimport { blob } from './BlobObject';\r\nimport { method } from './Func';\r\nimport { Promise } from './Promise';\r\nimport { Str } from './Str';\r\nimport { switcher } from './Switcher';\r\nimport {\r\n  constructors, appliedRegExps, htmlElements, svgElements,\r\n  canvasGetMethods, canvasRestMethods\r\n} from './constants';\r\nimport {\r\n  isArray, isArrayLike, isElement, isFunction,\r\n  isInteger, isNil, isNumber, isNull, isString,\r\n  assign, dynamicDefineProperties, defineProperties, toArray,\r\n  validate, toStringTag, iterate, Symbol\r\n} from './helpers';\r\nimport markupToJSON from './helpers/markupToJSON';\r\n\r\n/**\r\n * @typedef {String} ElemEventString\r\n * @public\r\n * @description A string containing events separated by a comma with zero or more spaces or just spaces.\r\n */\r\n\r\n/**\r\n * @callback ElemValueCallback\r\n * @public\r\n * @param {String} value - Old value.\r\n * @param {Elem} elem - Current element.\r\n * @param {Number} index - Index in the set of the elements.\r\n */\r\n\r\n/**\r\n * @callback ElemSetOfCallback\r\n * @public\r\n * @param {Element} created - Created element.\r\n * @param {*} value - Value of the iterated element in the object.\r\n * @param {Key} key - Key of the iterated element in the object.\r\n * @param {*} object - Object that is iterated over.\r\n * @param {Element} elem - Current element.\r\n * @param {Number} index - Index of the current element.\r\n */\r\n\r\n/**\r\n * @callback ValidateCallback\r\n * @public\r\n * @param {*} value - Element value.\r\n * @param {Element} elem - Element to validate.\r\n * @param {Number} index - Index of the element.\r\n */\r\n\r\n/**\r\n * @callback CtxCallback\r\n * @public\r\n * @param {CanvasRenderingContext2D} ctx - Canvas rendering context.\r\n */\r\n\r\n/**\r\n * @callback ElemListener\r\n * @public\r\n * @param {Event} e - Fired event.\r\n * @param {Element} elem - Element on which the listener was called.\r\n * @param {Number} index - Index of the element on which the listener was called.\r\n */\r\n\r\n/**\r\n * @callback ElemRemoveListeners\r\n * @public\r\n * @param {...ElemEventString} events - If at least one argument present only removes event listeners specified\r\n * by the events in the arguments.\r\n */\r\n\r\nconst nativeDocument = global.document;\r\nconst emptyDiv = nativeDocument.createElement('div');\r\nconst eventSeparator = /(,| ) */;\r\nconst textProperty = new Super(Node.prototype).propertyDescriptor('textContent') ? 'textContent' : 'innerText';\r\nconst classes = {};\r\nconst attrs = {};\r\nconst windowsDwayneData = new Arr([]);\r\nconst inputElements = 'input, select, textarea, datalist, keygen, output';\r\nconst click = method('click');\r\nconst svgNS = 'http://www.w3.org/2000/svg';\r\nconst xmlNS = 'http://www.w3.org/2000/xmlns/';\r\nconst xlinkNS = 'http://www.w3.org/1999/xlink';\r\nconst xhtmlNS = 'http://www.w3.org/1999/xhtml';\r\nconst typeSwitcher = switcher('call', (elem, type) => {\r\n  const ns = type === 'svg'\r\n    ? svgNS\r\n    : elem.prop('namespaceURI') || nativeDocument.documentElement.namespaceURI || xhtmlNS;\r\n\r\n  return nativeDocument.createElementNS(ns, type);\r\n})\r\n  .case(\r\n    (type) => type === '#comment',\r\n    () => nativeDocument.createComment('')\r\n  )\r\n  .case(\r\n    (type) => type === '#text',\r\n    () => nativeDocument.createTextNode('')\r\n  );\r\nconst refSwitcher = switcher('strictEquals', 'href')\r\n  .case(\r\n    ['img', 'script', 'iframe', 'audio', 'video'],\r\n    'src'\r\n  )\r\n  .case(\r\n    'form',\r\n    'action'\r\n  );\r\nconst filterSwitcher = switcher('call', (selector) => selector)\r\n  .case(\r\n    isString,\r\n    (selector) => (\r\n      (elem) => new Elem(elem).is(selector)\r\n    )\r\n  )\r\n  .case(\r\n    [isArray, isElem],\r\n    (elems) => {\r\n      elems = new Arr(elems);\r\n\r\n      return (elem) => elems.indexOf(elem) !== -1;\r\n    }\r\n  );\r\nconst innerSwitcher = switcher('strictEquals', 0)\r\n  .case('padding-box', (paddings) => paddings)\r\n  .case('border-box', (paddings, borders) => paddings + borders);\r\nconst outerSwitcher = switcher('strictEquals', (borders, paddings) => borders + paddings)\r\n  .case('padding-box', (borders) => borders)\r\n  .case('border-box', 0);\r\nconst attrNSSwitcher = switcher('call', null)\r\n  .case((attr) => attr === 'xmlns' || attr === 'xmlns:xlink', (elem) => (\r\n    elem.name === 'svg'\r\n      ? xmlNS\r\n      : null\r\n  ))\r\n  .case((attr) => /^xlink:\\w/.test(attr), (elem) => (\r\n    elem.closest('svg').length\r\n      ? xlinkNS\r\n      : null\r\n  ));\r\n\r\n/**\r\n * @class Elem\r\n * @extends Arr\r\n * @public\r\n * @param {Element|Element[]} [elem = []] - An element or an array of elements to wrap.\r\n * @returns {Elem} Instance of Elem.\r\n * @description Wrap of an elements set. Also has all methods from from\r\n * [CanvasRenderingContext2D]{@link https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D}.\r\n * Getters methods return the same as methods from CanvasRenderingContext2D and the rest return this.\r\n * Work for the first canvas element in the set.\r\n *\r\n * @example\r\n * new Elem(document.body);\r\n * new Elem(document.querySelectorAll('.cls'));\r\n * new Elem(document.getElementsByClassName('cls'));\r\n */\r\nclass Elem extends Arr {\r\n  constructor(elem = []) {\r\n    super((() => {\r\n      let element = elem;\r\n\r\n      if (isArrayLike(element) && (\r\n        isWindow(element) ||\r\n        isHTMLDocument(element) ||\r\n        isDocumentFragment(element) ||\r\n        isElement(element) ||\r\n        isCommentOrText(element) ||\r\n        isStyleRule(element)\r\n      )) {\r\n        element = [element];\r\n      }\r\n\r\n      return new Arr(toArray(new Super(element).$, true)).object((elems, elem) => {\r\n        if (elems.indexOf(elem) === -1 && (\r\n          isElement(elem) ||\r\n          isWindow(elem) ||\r\n          isHTMLDocument(elem) ||\r\n          isDocumentFragment(elem) ||\r\n          isCommentOrText(elem) ||\r\n          isStyleRule(elem)\r\n        )) {\r\n          return elems.push(elem);\r\n        }\r\n\r\n        if (isElem(elem)) {\r\n          elems.push.apply(elems, elem.$);\r\n        }\r\n      }, []).$;\r\n    })());\r\n\r\n    this.$$ = elem;\r\n\r\n    this.forEach(addDwayneData);\r\n\r\n    /**\r\n     * @member {Array.<Node|Window>} Elem#$\r\n     * @type {Array.<Node|Window>}\r\n     * @public\r\n     * @description Constructed element set.\r\n     */\r\n\r\n    /**\r\n     * @member {*} Elem#$$\r\n     * @type {*}\r\n     * @public\r\n     * @description Initial element set.\r\n     */\r\n  }\r\n\r\n  /**\r\n   * @method Elem#add\r\n   * @public\r\n   * @param {...(String|Elem|Element|Element[])} elements - Each argument is a selector, or Elem, or Element, or array of Elements.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for adding new elements to the set.\r\n   *\r\n   * @example\r\n   * elem1.find('.cls1')\r\n   *   .add(elem2.find('.cls2'))\r\n   *   .hide();\r\n   */\r\n  add(...elements) {\r\n    iterate(arguments, (elem) => {\r\n      toFind(elem).forEach((elem) => {\r\n        if (this.indexOf(elem) === -1) {\r\n          this.push(elem);\r\n        }\r\n      });\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#addClass\r\n   * @public\r\n   * @param {...String} classes - Classes to add.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for adding classes to the all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.addClass('red', 'round');\r\n   */\r\n  addClass(...classes) {\r\n    return this.forEach((elem) => {\r\n      const list = elem.classList;\r\n\r\n      iterate(isElement(elem) && arguments, (cls) => list.add(cls));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#addComment\r\n   * @public\r\n   * @param {String} text - Text of comment to add.\r\n   * @param {Boolean} end - If the comment should be inserted to the end. If false it's inserted to the start.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for adding comment to all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.addHTML('<div>1</div>');\r\n   */\r\n  addComment(text, end = true) {\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.insertAdjacentHTML(end ? 'beforeend' : 'afterbegin', `<!--${ text }-->`);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#addHTML\r\n   * @public\r\n   * @param {String} html - HTML to add.\r\n   * @param {Boolean} end - If the HTML should be inserted to the end. If false it's inserted to the start.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for adding HTML to all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.addHTML('<div>1</div>');\r\n   */\r\n  addHTML(html, end = true) {\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.insertAdjacentHTML(end ? 'beforeend' : 'afterbegin', html);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#addRule\r\n   * @public\r\n   * @param {String} name - Name of the rule.\r\n   * @param {String} selector - Selector for the rule\r\n   * @param {Object.<String, String>} style - Style for the selector.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for adding css styles into the first style tag in the set.\r\n   * Note: style element should be inside the document.\r\n   *\r\n   * @example\r\n   * style.addRule('img-size', 'img.square', {\r\n   *   width: '40px !important',\r\n   *   height: '40px !important'\r\n   * });\r\n   */\r\n  addRule(name, selector, style) {\r\n    this.some((elem) => {\r\n      if (getName(elem) === 'style') {\r\n        const { sheet } = elem;\r\n        const { length } = sheet.cssRules;\r\n        const rules = new Super(style).word((value, property) => (\r\n          `${ new Str(property).toHyphenCase() }: ${ value };\\n`\r\n        ));\r\n\r\n        sheet.insertRule(\r\n          `${ selector } {${ rules && '\\n' }${ rules }}`,\r\n          length\r\n        );\r\n        sheet.cssRules[length].dwayneData = { name };\r\n\r\n        return true;\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#addText\r\n   * @public\r\n   * @param {String} text - Text to add.\r\n   * @param {Boolean} end - If the text should be inserted to the end. If false it's inserted to the start.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for adding text to all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.addText('123');\r\n   */\r\n  addText(text, end = true) {\r\n    return this.forEach((elem) => {\r\n      new Elem(nativeDocument.createTextNode(text)).into(elem, end);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#apply\r\n   * @public\r\n   * @param {...String} strings - Strings to apply.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method that is a shorthand for many other methods.\r\n   * All shorthands can be separated with space and written within one string.\r\n   *\r\n   * @example\r\n   * elem.apply(\r\n   *   '#id .c1 .c2 @border(1px solid black) $disabled $attr(some value) *(Click me!)'\r\n   * );\r\n   * // shorthand for\r\n   * // elem\r\n   * //   .id('id')\r\n   * //   .addClass('c1', 'c2')\r\n   * //   .css('border', '1px solid black')\r\n   * //   .attr({\r\n   * //     attr, 'some value'\r\n   * //     disabled: ''\r\n   * //   })\r\n   * //   .text('Click me!');\r\n   * // There is a full list of possible types of syntax below...\r\n   *\r\n   * elem.apply('#id');                    // shorthand for elem.id('id');\r\n   * elem.apply('.c1 .c2');                // shorthand for elem.addClass('c1', 'c2');\r\n   * elem.apply('-.c1 -.c2');              // shorthand for elem.removeClass('c1', 'c2');\r\n   * elem.apply('-@float -@display');      // shorthand for elem.removeCSS('float', 'display');\r\n   * elem.apply('-$a1 -$a2');              // shorthand for elem.removeAttr('a1', 'a2');\r\n   * elem.apply('*(some text)');           // shorthand for elem.text('some text');\r\n   * elem.apply('&(<div>1</div>)');        // shorthand for elem.html('<div>1</div>');\r\n   * elem.apply('@float(right)');          // shorthand for elem.css('float', 'right');\r\n   * elem.apply('@transform(scale(5px))'); // shorthand for elem.css('transform', 'scale(5px)');\r\n   * elem.apply('@margin(2px 2px)');       // shorthand for elem.css('margin', '2px 2px');\r\n   * elem.apply('@marginLeft(2px)');       // shorthand for elem.css('marginLeft', '2px 2px');\r\n   * elem.apply('@margin-left(2px)');      // shorthand for elem.css('margin-left', '2px 2px');\r\n   * elem.apply('$attr(some value)');      // shorthand for elem.attr('attr', 'some value');\r\n   * elem.apply('$attr');                  // shorthand for elem.attr('attr', '');\r\n   */\r\n  apply(...strings) {\r\n    let applied;\r\n    let setApplied;\r\n    let callback;\r\n    let name;\r\n    let np1;\r\n    let slice;\r\n\r\n    new Str(new Arr(arguments).join(' '))\r\n      .split(/(\\s+)/)\r\n      .forEach((string) => {\r\n        if (!applied) {\r\n          np1 = string.slice(0, 1);\r\n          callback = appliedRegExps[np1];\r\n          slice = 1;\r\n\r\n          if (callback && !isFunction(callback)) {\r\n            callback = callback[string.slice(1, 2)];\r\n            slice = 2;\r\n          }\r\n\r\n          if (/^\\s+$/.test(string) || !callback) {\r\n            return;\r\n          }\r\n\r\n          name = string.slice(slice).match(/^[^()]+/);\r\n\r\n          if (!name && (np1 !== '*' && np1 !== '&')) {\r\n            return;\r\n          }\r\n\r\n          applied = {\r\n            name: name ? name[0] : '',\r\n            args: string.slice(slice + (name ? name[0] : '').length),\r\n            callback\r\n          };\r\n\r\n          setApplied = true;\r\n        }\r\n\r\n        if (!setApplied) {\r\n          applied.args += string;\r\n        }\r\n\r\n        if (!applied.args || /^\\([\\s\\S]+\\)$/.test(applied.args)) {\r\n          applied.callback(this, applied.name, applied.args.replace(/^\\(|\\)$/g, ''));\r\n          applied = null;\r\n        }\r\n\r\n        setApplied = false;\r\n      });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#attr\r\n   * @public\r\n   * @param {String|Object.<String, String|ElemValueCallback>} [attr] - Name of the attribute to get or\r\n   * an object of the format { [attrName]: value, ... } to set attributes.\r\n   * @param {String|ElemValueCallback} [value] - If the first argument is a string\r\n   * it should be a value to set for that attribute.\r\n   * @returns {Super|String|Elem} If no arguments passed, D-Wrap of attributes of the first element in the set\r\n   * returned, if 1 string argument is passed the value of the attribute of the first element in the set\r\n   * returned otherwise returns this.\r\n   * @description Method for getting/setting attributes.\r\n   *\r\n   * @example\r\n   * elem.attr('attr1', 'value1'); // attribute attr1 set to 'value1' and this returned\r\n   * elem.attr('attr1');           // 'value1'\r\n   * elem.attr({\r\n   *   attr1: 'value3',            // attribute attr1 set to 'value3'\r\n   *   attr2: 'value2'             // attribute attr2 set to 'value2'\r\n   * });                           // this returned\r\n   * elem.attr().$;                // { attr1: 'value3', attr2: 'value2' }\r\n   */\r\n  attr(attr, value) {\r\n    const elem = getElem(this);\r\n\r\n    if (!arguments.length) {\r\n      return new Super(elem.attributes).object((o, attr) => {\r\n        o[attr.name] = attr.value;\r\n      });\r\n    }\r\n\r\n    if (arguments.length <= 1 && isString(attr)) {\r\n      const ns = attrNSSwitcher(attr, [new Elem(elem)]);\r\n\r\n      return isNull(ns)\r\n        ? elem.getAttribute(attr)\r\n        : elem.getAttributeNS(ns, attr);\r\n    }\r\n\r\n    if (arguments.length >= 2) {\r\n      attr = { [attr]: value };\r\n    }\r\n\r\n    return this.forEach((elem, index) => {\r\n      if (!isElement(elem)) {\r\n        return;\r\n      }\r\n\r\n      new Super(attr).forEach((value, key) => {\r\n        value = isFunction(value)\r\n          ? value(new Elem(elem).attr(key), elem, index)\r\n          : value;\r\n\r\n        if (isNil(value)) {\r\n          return new Elem(elem).removeAttr(key);\r\n        }\r\n\r\n        const ns = attrNSSwitcher(key, [new Elem(elem)]);\r\n\r\n        if (isNull(ns)) {\r\n          elem.setAttribute(key, value);\r\n        } else {\r\n          elem.setAttributeNS(ns, key, value);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#blob\r\n   * @public\r\n   * @param {Object} [options = {}] - Options that are passed into {@link blob}.\r\n   * @returns {Promise.<BlobObject>} New instance of promise.\r\n   * @description Returns a {@link BlobObject} Promise. Works with image or canvas first element.\r\n   *\r\n   * @example\r\n   * image.blob().then((blob) => console.log(blob));  // BlobObject\r\n   * canvas.blob().then((blob) => console.log(blob)); // BlobObject\r\n   */\r\n  blob(options = {}) {\r\n    return new Promise((resolve, reject) => {\r\n      const elem = this.first();\r\n      const { name } = elem;\r\n\r\n      if (name !== 'img' && name !== 'canvas') {\r\n        reject(new Error('First element in the set isn\\'t an image or a canvas! (Elem#blob)'));\r\n      }\r\n\r\n      if (name === 'canvas') {\r\n        return resolve(elem);\r\n      }\r\n\r\n      elem\r\n        .load()\r\n        .then(() => {\r\n          if (elem.isBroken()) {\r\n            return reject(new Error('The image is broken! (Elem#blob)'));\r\n          }\r\n\r\n          const canvas = new Elem(nativeDocument).canvas();\r\n          const width = elem.width();\r\n          const height = elem.height();\r\n\r\n          canvas\r\n            .width(width)\r\n            .height(height)\r\n            .drawImage(elem.$[0], 0, 0);\r\n\r\n          resolve(canvas);\r\n        });\r\n    }).then((canvas) => {\r\n      const dataURL = canvas.dataURL();\r\n      const byteString = atob(dataURL.split(',')[1]);\r\n      const length = byteString.length;\r\n      const ab = new ArrayBuffer(length);\r\n      const ia = new Uint8Array(ab);\r\n\r\n      times(length, (i) => {\r\n        ia[i] = byteString.charCodeAt(i);\r\n      });\r\n\r\n      return blob(ab, options);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#blur\r\n   * @returns {Elem} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLElement/blur\r\n   * @description Synonym for\r\n   * [HTMLElement#blur]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/blur}.\r\n   */\r\n  blur() {\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.blur();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#calcCSS\r\n   * @param {String} [pseudo] - See the link.\r\n   * @returns {CSSStyleDeclaration} See the link.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/Window/getComputedStyle\r\n   * @description Synonym for\r\n   * [getComputedStyle]{@link https://developer.mozilla.org/en/docs/Web/API/Window/getComputedStyle}.\r\n   * Returns computed style for the first element in the set or undefined.\r\n   */\r\n  calcCSS(pseudo = null) {\r\n    return getComputedStyle(getElem(this), pseudo);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#changeRule\r\n   * @public\r\n   * @param {String} name - Name of the rule.\r\n   * @param {Object.<String, String>} style - Style for the selector.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for changing css styles in the first style tag in the set.\r\n   * Note: style element should be inside the document.\r\n   *\r\n   * @example\r\n   * style.changeRule('img-size', {\r\n   *   width: '50px !important',\r\n   *   height: '50px !important'\r\n   * });\r\n   */\r\n  changeRule(name, style) {\r\n    this.some((elem) => {\r\n      if (getName(elem) === 'style') {\r\n        const { value: rule } = new Arr(elem.sheet.cssRules).find((rule) => rule.dwayneData && rule.dwayneData.name === name) || {};\r\n\r\n        if (rule) {\r\n          new Elem(rule).css(style);\r\n\r\n          return true;\r\n        }\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#child\r\n   * @public\r\n   * @param {Number|String|Elem|Element|Element[]} element - If the argument is a number a wrap of the set of the children\r\n   * of this index of each element in the set returned otherwise an element to put into this element, a collection\r\n   * or a selector of it.\r\n   * @param {Boolean} end - If the elements should be inserted to the end. If false they are inserted to the start.\r\n   * @returns {Elem} Returns a wrap of children or inserted elements.\r\n   * @description Method is similar to\r\n   * [Node#appendChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/appendChild}.\r\n   *\r\n   * @example\r\n   * const child = elem.child(1);\r\n   *\r\n   * elem.child(elem2);\r\n   * elem.child(document.getElementById('id'));\r\n   * elem.child('#id div.c1');\r\n   */\r\n  child(element, end = true) {\r\n    if (isInteger(element) && element >= 0) {\r\n      return this.children().elem(element);\r\n    }\r\n\r\n    return toFind(element).into(this, end);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#children\r\n   * @public\r\n   * @returns {Elem} D-Wrap of the children of the first element in the set.\r\n   * @description Method for getting element's children.\r\n   *\r\n   * @example\r\n   * const children = elem.children();\r\n   */\r\n  children() {\r\n    return new Elem(this.length ? this.$[0].childNodes : []);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#class\r\n   * @public\r\n   * @param {String} [cls] - If it's present it has to contain class attribute to set.\r\n   * @returns {Arr|Elem} If the argument is present this returned otherwise a wrap of the classes array returned.\r\n   * @description Method for getting/setting classes.\r\n   *\r\n   * @example\r\n   * elem.class('c1 c2'); // class set to 'c1 c2'\r\n   * elem.class().$;      // ['c1', 'c2']\r\n   */\r\n  class(cls) {\r\n    if (!arguments.length) {\r\n      return new Arr(getElem(this).className.split(' '));\r\n    }\r\n\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.className = cls;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#click\r\n   * @returns {Elem} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLElement/click\r\n   * @description Synonym for\r\n   * [HTMLElement#click]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/click}.\r\n   */\r\n  click() {\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.click();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#clone\r\n   * @public\r\n   * @param {Boolean|*} [deep = false] - See thee link.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/Node/cloneNode\r\n   * @description Synonym for\r\n   * [Node#cloneNode]{@link https://developer.mozilla.org/en/docs/Web/API/Node/cloneNode}.\r\n   */\r\n  clone(deep = false) {\r\n    return this.object((elems, elem) => {\r\n      elems.add(elem.cloneNode(!!deep));\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#closest\r\n   * @public\r\n   * @param {String} selector - See the link.\r\n   * @returns {Elem} Set of the closest elements.\r\n   * @description Synonym for\r\n   * [Element#closest]{@link https://developer.mozilla.org/en/docs/Web/API/Element/closest}.\r\n   */\r\n  closest(selector) {\r\n    return this.object((elems, elem) => {\r\n      while (elem) {\r\n        if (new Elem(elem).is(selector)) {\r\n          return elems.add(elem);\r\n        }\r\n\r\n        elem = elem.parentNode;\r\n      }\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#contains\r\n   * @public\r\n   * @param {String|Elem|Element} element - Element to find out if it's within the first element\r\n   * in the set or a selector of it.\r\n   * @returns {Boolean} Returns if the argument within this element.\r\n   * @description Method is extension for\r\n   * [Node#contains]{@link https://developer.mozilla.org/en/docs/Web/API/Node/contains}.\r\n   *\r\n   * @example\r\n   * elem1.contains(elem2);   // true|false\r\n   * elem.contains(selector); // true|false\r\n   */\r\n  contains(element) {\r\n    element = toFind(element);\r\n\r\n    return getElem(this).contains(getElem(element));\r\n  }\r\n\r\n  /**\r\n   * @method Elem#create\r\n   * @public\r\n   * @param {String} type - Type of created element. If type is \"#text\" a text node is created.\r\n   * If type is \"#comment\" a comment node is created.\r\n   * @param {...String} appliedExpressions - Strings that are passed into {@link Elem#apply}.\r\n   * @returns {Elem} New instance of Elem - wrap of the created elements.\r\n   * @description Method for creating elements inside this element.\r\n   * If this element is not an Element the element is just created.\r\n   *\r\n   * @example\r\n   * elem.create('div', '#id .c1 .c2 *Some text*');\r\n   *\r\n   * // also there are shorthands for almost every HTML-element\r\n   * elem.div();\r\n   * elem.input('$type(checkbox) $name(country)');\r\n   */\r\n  create(type, ...appliedExpressions) {\r\n    return this.object((elems, elem) => {\r\n      const element = new Elem(typeSwitcher(type, [new Elem(elem)]));\r\n\r\n      element.into(elem);\r\n\r\n      elems.add(element.apply.apply(element, appliedExpressions));\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#createComment\r\n   * @public\r\n   * @param {String} text - Text of the comment.\r\n   * @returns {Elem} New instance of Elem - wrap of the created comments.\r\n   * @description Method for creating comments inside this element.\r\n   * If this element is not an Element the comment is just created.\r\n   *\r\n   * @example\r\n   * elem.createComment('comment');\r\n   */\r\n  createComment(text) {\r\n    return this\r\n      .create('#comment')\r\n      .text(text);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#createText\r\n   * @public\r\n   * @param {String} text - Text.\r\n   * @returns {Elem} New instance of Elem - wrap of the created text nodes.\r\n   * @description Method for creating text nodes inside this element.\r\n   * If this element is not an Element the text node is just created.\r\n   *\r\n   * @example\r\n   * elem.createText('text');\r\n   */\r\n  createText(text) {\r\n    return this\r\n      .create('#text')\r\n      .text(text);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#css\r\n   * @public\r\n   * @param {String|Object.<String, String|ElemValueCallback>} [property] - Name of the property to get or\r\n   * an object of the format { [property]: value, ... } to set styles.\r\n   * @param {String|ElemValueCallback} [value] - If the first argument is a string it should be a value to set for that property.\r\n   * @returns {Super|String|Elem} If no arguments passed, D-Wrap of css styles of the element returned,\r\n   * if 1 string argument is passed the value of the property returned otherwise returns this.\r\n   * @description Method for getting/setting styles. Supports !important.\r\n   *\r\n   * @example\r\n   * elem.css('display', 'none'); // display set to 'none' and this returned\r\n   * elem.css('display');         // 'none'\r\n   * elem.css({\r\n   *   display: 'inline',         // display set to 'inline'\r\n   *   cursor: 'pointer'          // cursor set to 'pointer'\r\n   * });                          // this returned\r\n   * elem.css().$;                // { display: 'none', cursor: 'pointer' }\r\n   */\r\n  css(property, value) {\r\n    let style = getElem(this).style;\r\n\r\n    if (isStyleRule(this.$[0])) {\r\n      style = this.$[0].style;\r\n    }\r\n\r\n    if (!arguments.length) {\r\n      return new Str(style.cssText)\r\n        .split(/; ?/)\r\n        .object((o, value) => {\r\n          if (value) {\r\n            property = value.split(/: /);\r\n\r\n            o[new Str(property[0]).toCamelCase().$] = property[1];\r\n          }\r\n        });\r\n    }\r\n\r\n    if (arguments.length <= 1 && isString(property)) {\r\n      property = new Str(property).toHyphenCase().$;\r\n\r\n      return style.getPropertyValue(property) + (style.getPropertyPriority(property) ? ' !important' : '');\r\n    }\r\n\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: value };\r\n    }\r\n\r\n    return this.forEach((elem, index) => {\r\n      if (!isElement(elem) && !isStyleRule(elem)) {\r\n        return;\r\n      }\r\n\r\n      new Super(property).forEach((value, property) => {\r\n        property = new Str(property).toHyphenCase().$;\r\n\r\n        if (isFunction(value)) {\r\n          value = value(new Elem(elem).css(property), elem, index);\r\n        }\r\n\r\n        elem.style.removeProperty(property);\r\n        elem.style.setProperty(\r\n          property,\r\n          value.replace(/ ?!important$/, ''),\r\n          /!important$/.test(value) ? 'important' : ''\r\n        );\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#ctx\r\n   * @public\r\n   * @param {String|Object|CtxCallback} [property] - If present and object\r\n   * it's assigned to the canvas rendering context, if function\r\n   * it's called with canvas rendering context argument, if string\r\n   * the value from the second argument is used for assigning\r\n   * this property to canvas rendering context and if not present\r\n   * canvas rendering context returned.\r\n   * @param {*} [value] - See the property argument.\r\n   * @returns {CanvasRenderingContext2D|Elem}\r\n   * @description Rendering context of the first canvas in the set.\r\n   *\r\n   * @example\r\n   * canvas.ctx; // CanvasRenderingContext2D\r\n   */\r\n  ctx(property, value) {\r\n    let ctx;\r\n\r\n    this.some((elem) => {\r\n      if (getName(elem) === 'canvas') {\r\n        ctx = elem.dwayneData.ctx;\r\n\r\n        return true;\r\n      }\r\n    });\r\n\r\n    if (!arguments.length) {\r\n      return ctx;\r\n    }\r\n\r\n    if (!ctx) {\r\n      return this;\r\n    }\r\n\r\n    if (isFunction(property)) {\r\n      property(ctx);\r\n    } else {\r\n      if (arguments.length >= 2) {\r\n        property = { [property]: value };\r\n      }\r\n\r\n      assign(ctx, property);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#data\r\n   * @public\r\n   * @param {String|Object.<String, String|ElemValueCallback>} [key] - Name of the data attribute (without data- prefix)\r\n   * to get or an object of the format { [attrName]: value, ... } to set attributes.\r\n   * @param {String|ElemValueCallback} [value] - If the first argument is a string it should be a value to set for that attribute.\r\n   * @returns {Super|String|Elem} If no arguments passed, D-Wrap of dataset of the element returned,\r\n   * if 1 string argument is passed the value of the data attribute returned otherwise returns this.\r\n   * @description Method for getting/setting data attributes. See\r\n   * [HTMLElement#dataset]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/dataset}.\r\n   *\r\n   * @example\r\n   * elem.data('someKey1', 'value'); // attribute data-some-key1 set to 'value1' and this returned\r\n   * elem.data('someKey1');          // 'value1'\r\n   * elem.data({\r\n   *   someKey1: 'value3',           // attribute data-some-key1 set to 'value3'\r\n   *   someKey2: 'value2'            // attribute data-some-key2 set to 'value2'\r\n   * });                             // this returned\r\n   * elem.data().$;                  // { someKey1: 'value3', someKey2: 'value2' }\r\n   */\r\n  data(key, value) {\r\n    const dataset = getElem(this).dataset;\r\n\r\n    if (!arguments.length) {\r\n      return new Super(dataset).object((o, value, key) => {\r\n        o[key] = value;\r\n      });\r\n    }\r\n\r\n    if (arguments.length === 1 && isString(key)) {\r\n      return dataset[key];\r\n    }\r\n\r\n    if (arguments.length >= 2) {\r\n      key = { [key]: value };\r\n    }\r\n\r\n    return this.forEach((elem, index) => {\r\n      if (!isElement(elem)) {\r\n        return;\r\n      }\r\n\r\n      iterate(key, (value, key) => {\r\n        elem.dataset[key] = isFunction(value) ? value(elem.dataset[key], elem, index) : value;\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#dataURL\r\n   * @param {String} [type = 'image/png'] - See the link\r\n   * @param {Number} [encoderOptions = 0.92] - See the link.\r\n   * @returns {String} Data URL for the first canvas element in the set.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/toDataURL\r\n   * @description Synonym for\r\n   * [HTMLCanvasElement#toDataURL]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/toDataURL}.\r\n   *\r\n   * @example\r\n   * canvas.dataURL();\r\n   */\r\n  dataURL(type, encoderOptions) {\r\n    const ctx = this.ctx();\r\n\r\n    if (!ctx) {\r\n      return '';\r\n    }\r\n\r\n    return ctx.canvas.toDataURL.apply(ctx.canvas, arguments);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#deleteRule\r\n   * @public\r\n   * @param {String} name - Name of the rule.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for deleting css styles in a style tag.\r\n   * Note: style element should be inside the document.\r\n   *\r\n   * @example\r\n   * style.deleteRule('img-size');\r\n   */\r\n  deleteRule(name) {\r\n    this.some((elem) => {\r\n      if (getName(elem) === 'style') {\r\n        const rule = new Arr(elem.sheet.cssRules).find((rule) => rule.dwayneData && rule.dwayneData.name === name);\r\n\r\n        if (rule) {\r\n          elem.sheet.deleteRule(rule.key);\r\n\r\n          return true;\r\n        }\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#dispatch\r\n   * @public\r\n   * @param {String|Event} event - Event or a string (new Event(event) is created).\r\n   * @param {Object} [eventInit = {}] - See the link.\r\n   * @param {Boolean} [eventInit.bubbles = true] - See the link.\r\n   * @param {Boolean} [eventInit.cancelable = true] - See the link.\r\n   * @param {Object} [details = {}] - Object that is assigned to the event.\r\n   * @returns {Elem} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/Event/Event\r\n   * @description Synonym for\r\n   * [EventTarget#dispatchEvent]{@link https://developer.mozilla.org/en/docs/Web/API/EventTarget/dispatchEvent}.\r\n   *\r\n   * @example\r\n   * elem.dispatch('click');\r\n   * elem.dispatch('click', { bubbles: false, cancellable: false });\r\n   * elem.dispatch(new CustomEvent('custom-event'));\r\n   */\r\n  dispatch(event, eventInit = {}, details = {}) {\r\n    const { bubbles = true, cancelable = true } = eventInit || {};\r\n    let finalEvent = event;\r\n\r\n    if (!/Event$/.test(toStringTag(finalEvent))) {\r\n      try {\r\n        finalEvent = new Event(finalEvent, { bubbles, cancelable });\r\n      } catch (err) {\r\n        finalEvent = nativeDocument.createEvent('Event');\r\n        finalEvent.initEvent(event, bubbles, cancelable);\r\n      }\r\n\r\n      assign(finalEvent, details);\r\n    }\r\n\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.dispatchEvent(finalEvent);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#elem\r\n   * @public\r\n   * @param {Number} [index = 0] - Index of the element of the set to get. Negative index means elem.length + index.\r\n   * @returns {Elem} New instance of Elem.\r\n   *\r\n   * @example\r\n   * elem.elem(1); // a wrap of the element in the set that has index 1\r\n   * elem.elem();  // a wrap of the element in the set that has index 0\r\n   */\r\n  elem(index = 0) {\r\n    if (index < 0) {\r\n      index = this.length + index;\r\n    }\r\n\r\n    return new Elem(this.$[index]);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#filter\r\n   * @public\r\n   * @param {String|Function|Element[]|Elem} [selector = Boolean] - If it's a string the method filters elements with the selector\r\n   * otherwise super.filter is called.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Method for filtering elements.\r\n   *\r\n   * @example\r\n   * elem.filter((elem) => new Elem(elem).closest('.parent'));\r\n   * elem.filter(elemsInArray);\r\n   * elem.filter(elemsInElem);\r\n   * elem.filter('.child');\r\n   */\r\n  filter(selector = Boolean) {\r\n    return new Elem(super.filter(filterSwitcher(selector)));\r\n  }\r\n\r\n  /**\r\n   * @method Elem#find\r\n   * @public\r\n   * @param {String|Function} selector - Selector to find.\r\n   * @returns {Elem|{ key: Key, value: * }|null} New instance of Elem if selector is a string\r\n   * otherwise super.find is called.\r\n   * @description Synonym for\r\n   * [Element#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Element/querySelectorAll}.\r\n   */\r\n  find(selector) {\r\n    if (!isString(selector)) {\r\n      return super.find(selector);\r\n    }\r\n\r\n    return this.object((elems, elem) => {\r\n      elems.add(find(selector, elem));\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#first\r\n   * @public\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Synonym for elem.elem(0).\r\n   */\r\n  first() {\r\n    return this.elem(0);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#firstChild\r\n   * @public\r\n   * @param {String} [selector = null] - If present, finds first child in every elem that matches the selector.\r\n   * If not, finds first child of each element in the set.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Method for finding first children of each element in the set.\r\n   *\r\n   * @example\r\n   * elem.first();       // finds first child of each element in the elem set\r\n   * elem.first('.foo'); // find first child that has foo class of each element in the set\r\n   */\r\n  firstChild(selector = null) {\r\n    return this.object((elems, elem) => {\r\n      const { value: found } = new Elem(elem)\r\n        .children()\r\n        .find((elem) => new Elem(elem).is(selector)) || {};\r\n\r\n      elems.add(found);\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#focus\r\n   * @returns {Elem} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLElement/focus\r\n   * @description Synonym for\r\n   * [HTMLElement#focus]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/focus}.\r\n   */\r\n  focus() {\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#getRule\r\n   * @public\r\n   * @param {String} name - Name of the rule.\r\n   * @returns {{ selector: (String|void), rules: Object }} Set of the css rules.\r\n   * @description Method for getting set of the rules under the name.\r\n   * Note: style element should be inside the document.\r\n   *\r\n   * @example\r\n   * style.addRule('img-size', 'img.square', {\r\n   *   width: '40px',\r\n   *   height: '40px'\r\n   * });\r\n   * style.getRule('img-size');\r\n   * // {\r\n   * //   selector: 'img.square',\r\n   * //   rules: {\r\n   * //     width: '40px',\r\n   * //     height: '40px'\r\n   * //   }\r\n   * // }\r\n   */\r\n  getRule(name) {\r\n    let found = {\r\n      selector: undefined,\r\n      rules: {}\r\n    };\r\n\r\n    this.some((elem) => {\r\n      if (getName(elem) === 'style') {\r\n        const { value: rule } = new Arr(elem.sheet.cssRules).find((rule) => rule.dwayneData && rule.dwayneData.name === name) || {};\r\n\r\n        if (rule) {\r\n          found = {\r\n            selector: rule.selectorText,\r\n            rules: new Elem(rule).css().$\r\n          };\r\n\r\n          return true;\r\n        }\r\n      }\r\n    });\r\n\r\n    return found;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#hasAttr\r\n   * @public\r\n   * @param {String} attr - Name of the attribute.\r\n   * @returns {Boolean} If the first element in the set has the attribute.\r\n   * @description Method that returns if the first element in the set has the attribute or not.\r\n   *\r\n   * @example\r\n   * elem.attr('attr', 'value').hasAttr('attr'); // true\r\n   * elem.removeAttr('attr').hasAttr('attr');    // false\r\n   */\r\n  hasAttr(attr) {\r\n    const elem = getElem(this);\r\n    const ns = attrNSSwitcher(attr, [new Elem(elem)]);\r\n\r\n    return isNull(ns)\r\n      ? elem.hasAttribute(attr)\r\n      : elem.hasAttributeNS(ns, attr);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#hasClass\r\n   * @public\r\n   * @param {String} cls - Name of the class.\r\n   * @returns {Boolean} If the first element in the set has the class.\r\n   * @description Method that returns if the first element in the set has the class or not.\r\n   *\r\n   * @example\r\n   * elem.addClass('cls').hasClass('cls');    // true\r\n   * elem.removeClass('cls').hasClass('cls'); // false\r\n   */\r\n  hasClass(cls) {\r\n    return getElem(this).classList.contains(cls);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#height\r\n   * @public\r\n   * @param {*|ElemValueCallback} [height] - Height to set.\r\n   * @returns {Elem|String} If no arguments passed height of the first element in the set returned.\r\n   * Otherwise all elements heights in the set are set to the height argument.\r\n   * @description Gets or sets height.\r\n   *\r\n   * @example\r\n   * elem.height(123);\r\n   * elem.height(); // 123\r\n   */\r\n  height(height) {\r\n    return this.prop.apply(this, new Arr(arguments).unshift('height').$);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#hide\r\n   * @public\r\n   * @returns {Elem} Returns this.\r\n   * @description Hides all elements in the set.\r\n   *\r\n   * @example\r\n   * elem.hide();\r\n   */\r\n  hide() {\r\n    return this.forEach((elem) => {\r\n      elem = new Elem(elem);\r\n\r\n      const currentDisplay = elem.css('display');\r\n\r\n      if (currentDisplay.indexOf('none')) {\r\n        elem.prop('dwayneData').previousDisplay = currentDisplay;\r\n      }\r\n\r\n      elem.css('display', 'none !important');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#html\r\n   * @public\r\n   * @param {String|ElemValueCallback|*} [html] - HTML to write instead of current HTML.\r\n   * @returns {Elem|String} If no arguments passed HTML of the first element in the set returned.\r\n   * Otherwise all elements HTML in the set are set to the html argument.\r\n   * @description Gets or sets HTML.\r\n   *\r\n   * @example\r\n   * elem.html('<div>1</div>');\r\n   * elem.html(); // '<div>1</div>'\r\n   */\r\n  html(html) {\r\n    if (!arguments.length) {\r\n      return getElem(this).innerHTML;\r\n    }\r\n\r\n    return this.forEach((elem, index) => {\r\n      if (isElement(elem)) {\r\n        elem.innerHTML = isFunction(html) ? html(elem.innerHTML, elem, index) : html;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#id\r\n   * @public\r\n   * @param {String|*} [id] - Id to set.\r\n   * @returns {Elem|String} If no arguments passed id of the first element in the set returned.\r\n   * Otherwise all elements ids in the set are set to the id argument.\r\n   * @description Gets id or sets ids.\r\n   *\r\n   * @example\r\n   * elem.id('unique');\r\n   * elem.id(); // 'unique'\r\n   */\r\n  id(id) {\r\n    if (!arguments.length) {\r\n      return getElem(this).id;\r\n    }\r\n\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.id = id;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @member {Number} Elem#innerHeight\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description Getter for finding how much height content of the first element can be.\r\n   *\r\n   * @example\r\n   * elem.css({\r\n   *   boxSizing: 'border-box',\r\n   *   height: '200px',\r\n   *   paddingTop: '2px',\r\n   *   paddingBottom: '3px',\r\n   *   borderTop: '1px solid black',\r\n   *   borderBottom: '4px solid black'\r\n   * }).innerHeight; // 190\r\n   * elem\r\n   *   .css('box-sizing', 'content-box')\r\n   *   .innerHeight; // 200\r\n   * elem\r\n   *   .css('box-sizing', 'padding-box')\r\n   *   .innerHeight; // 195\r\n   */\r\n  get innerHeight() {\r\n    const elem = this.$[0];\r\n\r\n    if (isWindow(elem)) {\r\n      return elem.innerHeight;\r\n    }\r\n\r\n    const {\r\n      borderTopWidth,\r\n      borderBottomWidth,\r\n      boxSizing,\r\n      height,\r\n      paddingTop,\r\n      paddingBottom\r\n    } = this.calcCSS();\r\n    const borders = px(borderTopWidth) + px(borderBottomWidth);\r\n    const paddings = px(paddingTop) + px(paddingBottom);\r\n\r\n    return px(height) - innerSwitcher(boxSizing, [paddings, borders]);\r\n  }\r\n\r\n  /**\r\n   * @member {Number} Elem#innerWidth\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description Getter for finding how much width content of the first element can be.\r\n   *\r\n   * @example\r\n   * elem.css({\r\n   *   boxSizing: 'border-box',\r\n   *   width: '200px',\r\n   *   paddingLeft: '2px',\r\n   *   paddingRight: '3px',\r\n   *   borderLeft: '1px solid black',\r\n   *   borderRight: '4px solid black'\r\n   * }).innerWidth; // 190\r\n   * elem\r\n   *   .css('box-sizing', 'content-box')\r\n   *   .innerWidth; // 200\r\n   * elem\r\n   *   .css('box-sizing', 'padding-box')\r\n   *   .innerWidth; // 195\r\n   */\r\n  get innerWidth() {\r\n    const elem = this.$[0];\r\n\r\n    if (isWindow(elem)) {\r\n      return elem.innerWidth;\r\n    }\r\n\r\n    const {\r\n      borderLeftWidth,\r\n      borderRightWidth,\r\n      boxSizing,\r\n      paddingLeft,\r\n      paddingRight,\r\n      width\r\n    } = this.calcCSS();\r\n    const borders = px(borderLeftWidth) + px(borderRightWidth);\r\n    const paddings = px(paddingLeft) + px(paddingRight);\r\n\r\n    return px(width) - innerSwitcher(boxSizing, [paddings, borders]);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#insertAfter\r\n   * @public\r\n   * @param {String|Elem|Element} element - Element to insert this element after or a selector of it.\r\n   * @returns {Elem} Returns this.\r\n   * @description Puts the elements from the set after the element specified by the argument.\r\n   * The elements remain in the same order.\r\n   *\r\n   * @example\r\n   * elem.insertAfter(elem2);\r\n   * elem.insertAfter(document.getElementById('id'));\r\n   * elem.insertAfter('#id div.c1');\r\n   */\r\n  insertAfter(element) {\r\n    element = toFind(element).first();\r\n\r\n    let parent = element.parent();\r\n\r\n    if (!parent.length) {\r\n      return this;\r\n    }\r\n\r\n    element = element.next().$[0];\r\n    parent = parent.$[0];\r\n\r\n    return this.forEach((elem) => {\r\n      if (element) {\r\n        parent.insertBefore(elem, element);\r\n      } else {\r\n        parent.appendChild(elem);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#insertBefore\r\n   * @public\r\n   * @param {String|Elem|Element} element - Element to insert this element before or a selector of it.\r\n   * @returns {Elem} Returns this.\r\n   * @description Puts the elements from the set before the element specified by the argument.\r\n   * The elements remain in the same order.\r\n   *\r\n   * @example\r\n   * elem.insertBefore(elem2);\r\n   * elem.insertBefore(document.getElementById('id'));\r\n   * elem.insertBefore('#id div.c1');\r\n   */\r\n  insertBefore(element) {\r\n    element = toFind(element).first();\r\n\r\n    let parent = element.parent();\r\n\r\n    if (!parent.length) {\r\n      return this;\r\n    }\r\n\r\n    element = element.$[0];\r\n    parent = parent.$[0];\r\n\r\n    return this.forEach((elem) => {\r\n      parent.insertBefore(elem, element);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#into\r\n   * @public\r\n   * @param {String|Elem|Element} element - Element to put this elements into or a selector of it.\r\n   * @param {Boolean} end - If the elements should be inserted to the end. If false they are inserted to the start.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method is similar to\r\n   * [Node#appendChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/appendChild}.\r\n   *\r\n   * @example\r\n   * elem.into(elem2);\r\n   * elem.into(document.getElementById('id'));\r\n   * elem.into('#id div.c1');\r\n   */\r\n  into(element, end = true) {\r\n    element = toFind(element).$[0];\r\n\r\n    if (\r\n      !element ||\r\n      isWindow(element) ||\r\n      isHTMLDocument(element) ||\r\n      isCommentOrText(element)\r\n    ) {\r\n      return this;\r\n    }\r\n\r\n    if (!end && element.firstChild) {\r\n      return this\r\n        .slice()\r\n        .reverse()\r\n        .forEach((elem) => {\r\n          element.insertBefore(elem, element.firstChild);\r\n        });\r\n    }\r\n\r\n    return this.forEach((elem) => {\r\n      element.appendChild(elem);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#is\r\n   * @public\r\n   * @param {String} selector\r\n   * @returns {Boolean} If the first element in the set matches the selector.\r\n   * If the selector is undefined or null always returns true. If it's not for not elements\r\n   * entries returns false.\r\n   * @description Synonym for\r\n   * [Element#matches]{@link https://developer.mozilla.org/en/docs/Web/API/Element/matches}.\r\n   *\r\n   * @example\r\n   * elem.addClass('cls');\r\n   * elem.is('.cls');         // true\r\n   *\r\n   * elem.removeClass('cls');\r\n   * elem.is('.cls');         // false\r\n   */\r\n  is(selector) {\r\n    if (isNull(selector)) {\r\n      return true;\r\n    }\r\n\r\n    const elem = getElem(this);\r\n    const matches = (\r\n      elem.matches ||\r\n      elem.matchesSelector ||\r\n      elem.webkitMatchesSelector ||\r\n      elem.mozMatchesSelector ||\r\n      elem.msMatchesSelector ||\r\n      elem.oMatchesSelector\r\n    );\r\n\r\n    if (!isElement(this.$[0])) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      return matches.call(elem, selector);\r\n    } catch (err) {\r\n      console.error(`Selector '${ selector }' is not a valid selector (Elem#is)`);\r\n\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method Elem#isBroken\r\n   * @public\r\n   * @returns {Boolean} If the first image in the set is broken.\r\n   * @description Returns if the first element in the set is broken. Not image and not loaded image is considered proper.\r\n   *\r\n   * @example\r\n   * const img = elem.img().on({\r\n   *   'load': onload,\r\n   *   'error': onload\r\n   * });\r\n   *\r\n   * onload = () => {\r\n   *   console.log(img.isBroken()); // true\r\n   * };\r\n   *\r\n   * img.ref('/some/non-existent/site/not-found.png');\r\n   */\r\n  isBroken() {\r\n    let isBroken = false;\r\n\r\n    this.some((elem) => {\r\n      if (getName(elem) === 'img') {\r\n        isBroken = !!(elem.complete && (!elem.naturalWidth || !elem.naturalHeight));\r\n\r\n        return true;\r\n      }\r\n    });\r\n\r\n    return isBroken;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#isWithinDocument\r\n   * @public\r\n   * @returns {Boolean} Returns if the first element in the set is within the document or not.\r\n   * @description Returns if the first element in the set is within the document or not.\r\n   *\r\n   * @example\r\n   * new Elem(document.body).isWithinDocument();  // true\r\n   * new Elem(document).div().isWithinDocument(); // false\r\n   */\r\n  isWithinDocument() {\r\n    return this.first().closest('html').length !== 0;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#last\r\n   * @public\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Synonym for elem.elem(-1).\r\n   */\r\n  last() {\r\n    return this.elem(-1);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#lastChild\r\n   * @public\r\n   * @param {String} [selector = null] - If present, finds last child in every elem that matches the selector.\r\n   * If not, finds last child of each element in the set.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Method for finding last children of each element in the set.\r\n   *\r\n   * @example\r\n   * elem.last();       // finds last child of each element in the elem set\r\n   * elem.last('.foo'); // find last child that has 'foo' class of each element in the set\r\n   */\r\n  lastChild(selector = null) {\r\n    return this.object((elems, elem) => {\r\n      const { value: found } = new Elem(elem)\r\n        .children()\r\n        .reverse()\r\n        .find((elem) => new Elem(elem).is(selector)) || {};\r\n\r\n      elems.add(found);\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#load\r\n   * @public\r\n   * @returns {Promise.<{ proper: Elem, broken: Elem }>} Promise with broken and proper images.\r\n   * @description Loads each image in the set and puts it to the proper or broken array.\r\n   *\r\n   * @example\r\n   * images.load().then(({ broken }) => {\r\n   *   broken.filter('img').ref('/fallback.png');\r\n   * });\r\n   */\r\n  load() {\r\n    const images = {\r\n      proper: new Elem(),\r\n      broken: new Elem()\r\n    };\r\n\r\n    return Promise.all(\r\n      this\r\n        .filter((elem) => getName(elem) === 'img')\r\n        .map((elem) => {\r\n          const $elem = new Elem(elem);\r\n\r\n          if (elem.complete) {\r\n            images[$elem.isBroken() ? 'broken' : 'proper'].push(elem);\r\n\r\n            return;\r\n          }\r\n\r\n          return new Promise((resolve) => {\r\n            const removeListeners = $elem.on({\r\n              load() {\r\n                images.proper.add(elem);\r\n\r\n                removeListeners();\r\n                resolve();\r\n              },\r\n              error() {\r\n                images.broken.add(elem);\r\n\r\n                removeListeners();\r\n                resolve();\r\n              }\r\n            });\r\n          });\r\n        })\r\n        .$\r\n    ).then(() => images);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#moveAttr\r\n   * @public\r\n   * @param {String} attr - Attribute to move to the first element.\r\n   * @param {String} [value = ''] - Value to set for the attribute. If not set attribute of the previous element or '' used.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for moving an attribute from previous element to the next one (first element in this set).\r\n   *\r\n   * @example\r\n   * elem1.moveAttr('attr', 'value');     // attribute 'attr' set to 'value' on elem1\r\n   * elem2.moveAttr('attr');              // attribute 'attr' removed from elem1. set to 'value' on elem2\r\n   * elem3.moveAttr('attr', 'new value'); // attribute 'attr' removed from elem2. set to 'new value' on elem3\r\n   */\r\n  moveAttr(attr, value = '') {\r\n    const prev = attrs[attr];\r\n    const elem = this.elem();\r\n\r\n    if (prev && elem.length) {\r\n      if (arguments.length < 2) {\r\n        value = prev.attr(attr);\r\n      }\r\n\r\n      prev.removeAttr(attr);\r\n    }\r\n\r\n    if (elem.length) {\r\n      attrs[attr] = elem.attr(attr, value);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#moveClass\r\n   * @public\r\n   * @param {String} cls - Class to move to the first element.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for moving a class from previous element to the next one (first element in this set).\r\n   *\r\n   * @example\r\n   * elem1.moveClass('cls'); // class 'cls' added to elem1\r\n   * elem2.moveClass('cls'); // class 'cls' removed from elem1. added to elem1\r\n   */\r\n  moveClass(cls) {\r\n    const prev = classes[cls];\r\n    const elem = this.elem();\r\n\r\n    if (prev && elem.length) {\r\n      prev.removeClass(cls);\r\n    }\r\n\r\n    if (elem.length) {\r\n      classes[cls] = elem.addClass(cls);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @member {String} Elem#name\r\n   * @type {String}\r\n   * @public\r\n   * @readonly\r\n   * @description nodeName (lowercased) of the first element in the set.\r\n   *\r\n   * @example\r\n   * const elem1 = elem.create('div');\r\n   * elem1.name // 'div'\r\n   */\r\n  get name() {\r\n    return getName(this.$[0]);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#next\r\n   * @public\r\n   * @param {String} [selector = null] - If present, finds next element to every elem that matches the selector.\r\n   * If not, finds next element to each element in the set.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Method for finding next element to each element in the set.\r\n   *\r\n   * @example\r\n   * elem.next();       // finds next element to each element in the set\r\n   * elem.next('.foo'); // finds next element to each element that has 'foo' class\r\n   */\r\n  next(selector = null) {\r\n    return this.object((elems, elem) => {\r\n      /* eslint no-cond-assign: 0 */\r\n      while (elem = elem.nextSibling) {\r\n        if (new Elem(elem).is(selector)) {\r\n          return elems.add(elem);\r\n        }\r\n      }\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#off\r\n   * @public\r\n   * @param {...ElemEventString} events - Events to remove.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method that removes all the listeners from each element in the set specified by the events arguments.\r\n   *\r\n   * @example\r\n   * elem.off('click');\r\n   * elem.off('click, input');\r\n   * elem.off('click, input', 'focus');\r\n   */\r\n  off(...events) {\r\n    return this.forEach((elem) => {\r\n      const { listeners } = elem.dwayneData;\r\n\r\n      iterate(arguments, (event) => {\r\n        iterate(event.split(eventSeparator), (event) => {\r\n          (listeners[event] || new Super()).forEach(({ removeListener }) => removeListener());\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#on\r\n   * @public\r\n   * @param {ElemEventString|Object.<ElemEventString|ElemListener>} event - Either a {@link ElemEventString} string\r\n   * or an object with event keys (a key is also ElemEventString) and listeners values.\r\n   * @param {String} [selector = null] - Selector to filter event targets.\r\n   * @param {ElemListener} [listener] - If the first argument is a string it must be a listener function for\r\n   * specified event(s).\r\n   * @returns {ElemRemoveListeners} Function that takes optional event argument.\r\n   * @description Adds event listeners for all the elements in the set.\r\n   * For debugging: If you need to know what listeners are in work (and what selectors filter targets)\r\n   * you can look at the base property of the only dwayne listener that listens for the event\r\n   * and find all working listeners in listener.base.dwayneData.listeners[event].$.\r\n   *\r\n   * @example\r\n   * elem.on(\r\n   *   'change, input',\r\n   *   'input, select, textarea, datalist, keygen, output',\r\n   *   (e, elem, index) => console.log(elem.value)\r\n   * );\r\n   * elem.on(\r\n   *   'change, input',\r\n   *   (e, elem, index) => console.log(elem.value)\r\n   * );\r\n   * elem.on(\r\n   *   {\r\n   *     'change, input': (e, elem, index) => console.log(elem.value),\r\n   *     'blur': () => console.log('blur')\r\n   *   },\r\n   *   'input, select, textarea, datalist, keygen, output'\r\n   * );\r\n   *\r\n   * const removeListeners = elem.on({\r\n   *   'change, input': (e, elem, index) => console.log(elem.value),\r\n   *   'blur': () => console.log('blur')\r\n   * });\r\n   *\r\n   * removeListeners('click');\r\n   * removeListeners('blur, change');\r\n   * removeListeners('blur, change', 'input');\r\n   * removeListeners();\r\n   */\r\n  on(event, selector = null, listener) {\r\n    const allListeners = new Super({});\r\n\r\n    if (isFunction(selector)) {\r\n      listener = selector;\r\n      selector = null;\r\n    }\r\n\r\n    if (isString(event)) {\r\n      event = { [event]: listener };\r\n    }\r\n\r\n    event = new Super(event).object((listeners, listener, event) => {\r\n      iterate(event.split(eventSeparator), (event) => {\r\n        listeners[event] = listener;\r\n      });\r\n    });\r\n\r\n    this.forEach((elem) => {\r\n      if (!isElement(elem) && !isWindow(elem) && !isHTMLDocument(elem)) {\r\n        return;\r\n      }\r\n\r\n      const { listeners } = (windowsDwayneData.find(({ element }) => element === elem) || {}).value || elem.dwayneData;\r\n\r\n      event.forEach((listener, event) => {\r\n        const removeEventListeners = listeners[event] = listeners[event] || new Super({}).define('index', {\r\n          value: 0,\r\n          configurable: true,\r\n          writable: true\r\n        });\r\n        const index = removeEventListeners.prop('index');\r\n\r\n        if (!removeEventListeners.has('listener')) {\r\n          const newListener = (e) => {\r\n            removeEventListeners.forEach(({ selector, listener }) => {\r\n              if (new Elem(e.target).is(selector)) {\r\n                listener.call(elem, e, elem, index);\r\n              }\r\n            });\r\n          };\r\n\r\n          newListener.base = elem;\r\n\r\n          elem.addEventListener(event, newListener, false);\r\n          removeEventListeners.define('listener', {\r\n            value: newListener,\r\n            configurable: true,\r\n            writable: true\r\n          });\r\n        }\r\n\r\n        const removeListener = () => {\r\n          removeEventListeners.delete(index);\r\n\r\n          if (!removeEventListeners.count) {\r\n            elem.removeEventListener(event, removeEventListeners.prop('listener'), false);\r\n            removeEventListeners.delete('listener');\r\n          }\r\n        };\r\n\r\n        allListeners.prop(event, (allListeners.prop(event) || new Arr()).push(removeListener));\r\n\r\n        removeEventListeners.assign({\r\n          index: index + 1,\r\n          [index]: {\r\n            selector,\r\n            listener,\r\n            removeListener\r\n          }\r\n        });\r\n      });\r\n    });\r\n\r\n    return function removeEventListeners(event) {\r\n      if (arguments.length) {\r\n        iterate(arguments, (event) => {\r\n          iterate(event.split(eventSeparator), (event) => {\r\n            if (allListeners.has(event)) {\r\n              allListeners.prop(event).forEach((removeListener) => removeListener());\r\n              allListeners.delete(event);\r\n            }\r\n          });\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      allListeners.forEach((removeListeners) => {\r\n        removeListeners.forEach((removeListener) => removeListener());\r\n      });\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @member {Number} Elem#outerHeight\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description Getter for finding how much height the element actually is.\r\n   *\r\n   * @example\r\n   * elem.css({\r\n   *   boxSizing: 'border-box',\r\n   *   height: '200px',\r\n   *   paddingTop: '2px',\r\n   *   paddingBottom: '3px',\r\n   *   borderTop: '1px solid black',\r\n   *   borderBottom: '4px solid black'\r\n   *   marginTop: '0px',\r\n   *   marginBottom: '5px'\r\n   * }).outerHeight; // 205\r\n   * elem\r\n   *   .css('box-sizing', 'content-box')\r\n   *   .outerHeight; // 215\r\n   * elem\r\n   *   .css('box-sizing', 'padding-box')\r\n   *   .outerHeight; // 210\r\n   */\r\n  get outerHeight() {\r\n    const elem = this.$[0];\r\n\r\n    if (isWindow(elem)) {\r\n      return elem.outerHeight;\r\n    }\r\n\r\n    const {\r\n      borderTopWidth,\r\n      borderBottomWidth,\r\n      boxSizing,\r\n      height,\r\n      marginTop,\r\n      marginBottom,\r\n      paddingTop,\r\n      paddingBottom\r\n    } = this.calcCSS();\r\n    const borders = px(borderTopWidth) + px(borderBottomWidth);\r\n    const paddings = px(paddingTop) + px(paddingBottom);\r\n\r\n    return px(height) + px(marginTop) + px(marginBottom) + outerSwitcher(boxSizing, [borders, paddings]);\r\n  }\r\n\r\n  /**\r\n   * @member {Number} Elem#outerWidth\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description Getter for finding how much width the element actually is.\r\n   *\r\n   * @example\r\n   * elem.css({\r\n   *   boxSizing: 'border-box',\r\n   *   width: '200px',\r\n   *   paddingLeft: '2px',\r\n   *   paddingRight: '3px',\r\n   *   borderLeft: '1px solid black',\r\n   *   borderRight: '4px solid black'\r\n   *   marginLeft: '0px',\r\n   *   marginRight: '5px'\r\n   * }).outerWidth; // 205\r\n   * elem\r\n   *   .css('box-sizing', 'content-box')\r\n   *   .outerWidth; // 215\r\n   * elem\r\n   *   .css('box-sizing', 'padding-box')\r\n   *   .outerWidth; // 210\r\n   */\r\n  get outerWidth() {\r\n    const elem = this.$[0];\r\n\r\n    if (isWindow(elem)) {\r\n      return elem.outerWidth;\r\n    }\r\n\r\n    const {\r\n      borderLeftWidth,\r\n      borderRightWidth,\r\n      boxSizing,\r\n      marginLeft,\r\n      marginRight,\r\n      paddingLeft,\r\n      paddingRight,\r\n      width\r\n    } = this.calcCSS();\r\n    const borders = px(borderLeftWidth) + px(borderRightWidth);\r\n    const paddings = px(paddingLeft) + px(paddingRight);\r\n\r\n    return px(width) + px(marginLeft) + px(marginRight) + outerSwitcher(boxSizing, [borders, paddings]);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#parent\r\n   * @public\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Method returns wrap of the set of the parent elements of each element in the set.\r\n   */\r\n  parent() {\r\n    return this.object((elems, elem) => elems.add(elem.parentNode), new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#parentTree\r\n   * @public\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Returns wrap of all parents of each element in the set.\r\n   *\r\n   * @example\r\n   * elem.parentTree(); // Elem\r\n   */\r\n  parentTree() {\r\n    return this.object((elems, elem) => {\r\n      while (elem = elem.parentNode) {\r\n        elems.add(elem);\r\n      }\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#prev\r\n   * @public\r\n   * @param {String} [selector = null] - If present, finds previous element to every elem that matches the selector.\r\n   * If not, finds previous element to each element in the set.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Method for finding previous element to each element in the set.\r\n   *\r\n   * @example\r\n   * elem.next();       // finds previous element to each element in the set\r\n   * elem.next('.foo'); // finds previous element to each element that has 'foo' class\r\n   */\r\n  prev(selector = null) {\r\n    return this.object((elems, elem) => {\r\n      /* eslint no-cond-assign: 0 */\r\n      while (elem = elem.previousSibling) {\r\n        if (new Elem(elem).is(selector)) {\r\n          return elems.add(elem);\r\n        }\r\n      }\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#prop\r\n   * @public\r\n   * @param {String|Object.<String, ElemValueCallback|*>} property - Either a string of a property or an assigned object.\r\n   * @param {ElemValueCallback|*} [value] - If a property parameter is a string\r\n   * this has to be an assigned value if it's present.\r\n   * @returns {Elem|*} Returns this if it's setter or a value if getter.\r\n   * @description Method that is either a property getter for the first element in the set\r\n   * or a setter for every element in the set.\r\n   *\r\n   * @example\r\n   * elem.prop('draggable', false);\r\n   * elem.prop('draggable'); // false\r\n   */\r\n  prop(property, value) {\r\n    if (arguments.length <= 1 && isString(property)) {\r\n      return this.$[0] ? this.$[0][property] : undefined;\r\n    }\r\n\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: value };\r\n    }\r\n\r\n    return this.forEach((elem, index) => {\r\n      iterate(property, (value, prop) => {\r\n        elem[prop] = isFunction(value) ? value(elem[prop], elem, index) : value;\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#ref\r\n   * @public\r\n   * @param {String|ElemValueCallback} [link] - If it's present link to a resource.\r\n   * @returns {Elem|String} If the link argument isn't present it's a getter of the 'src' attribute\r\n   * for the one of following elements: img, script, iframe, audio, video; of the 'action' attribute\r\n   * for a form element and of the 'href' attribute for the rest. If it's present it's a setter\r\n   * of the same attribute for all the element in the set.\r\n   * @description Method for getting resources links and setting them.\r\n   *\r\n   * @example\r\n   * elem.ref('/some/cool/image.png');\r\n   * elem.ref(); // '/some/cool/image.png'\r\n   */\r\n  ref(link) {\r\n    if (!arguments.length) {\r\n      return this.attr(refSwitcher(this.name));\r\n    }\r\n\r\n    return this.forEach((elem) => {\r\n      elem = new Elem(elem);\r\n\r\n      elem.attr(refSwitcher(elem.name), link);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#remove\r\n   * @public\r\n   * @returns {Elem} Returns this.\r\n   * @description Removes all the elements from the set from the document.\r\n   * Note: it doesn't remove them from the set so watch out for the memory leaks.\r\n   *\r\n   * @example\r\n   * elem.remove();\r\n   */\r\n  remove() {\r\n    return this.forEach((elem) => {\r\n      const parent = elem.parentNode;\r\n\r\n      if (parent) {\r\n        parent.removeChild(elem);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#removeAttr\r\n   * @public\r\n   * @param {...String} attributes - Attributes to remove.\r\n   * @returns {Elem} Returns this.\r\n   * @description Removes all the attributes from arguments from all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.removeAttr('foo', 'bar', 'baz');\r\n   */\r\n  removeAttr(...attributes) {\r\n    return this.forEach((elem) => {\r\n      if (!isElement(elem)) {\r\n        return;\r\n      }\r\n\r\n      iterate(arguments, (attr) => {\r\n        const ns = attrNSSwitcher(attr, [new Elem(elem)]);\r\n\r\n        if (isNull(ns)) {\r\n          elem.removeAttribute(attr);\r\n        } else {\r\n          elem.removeAttributeNS(ns, attr);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#removeClass\r\n   * @public\r\n   * @param {...String} classes - Classes to remove.\r\n   * @returns {Elem} Returns this.\r\n   * @description Removes all the classes from arguments from all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.removeClass('foo', 'bar', 'baz');\r\n   */\r\n  removeClass(...classes) {\r\n    return this.forEach((elem) => {\r\n      const list = elem.classList;\r\n\r\n      iterate(isElement(elem) && arguments, (cls) => list.remove(cls));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#removeCSS\r\n   * @public\r\n   * @param {...String} props - CSS properties to remove.\r\n   * @returns {Elem} Returns this.\r\n   * @description Removes all the CSS properties from arguments from all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.removeCSS('display', 'position', 'margin');\r\n   */\r\n  removeCSS(...props) {\r\n    return this.forEach((elem) => {\r\n      if (!isElement(elem)) {\r\n        return;\r\n      }\r\n\r\n      iterate(arguments, (css) => {\r\n        elem.style.removeProperty(css);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#replace\r\n   * @public\r\n   * @param {String|Elem|Element} element - Element to replace the first element in the set\r\n   * with a set of elements specified by the argument (Element, set of elements or a selector of them).\r\n   * @returns {Elem} Returns this.\r\n   * @description Method is similar to\r\n   * [Node#replaceChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/replaceChild}.\r\n   *\r\n   * @example\r\n   * elem.replace(elem2);\r\n   * elem.replace(document.getElementById('id'));\r\n   * elem.replace('#id div.c1');\r\n   */\r\n  replace(element) {\r\n    element = toFind(element);\r\n\r\n    const parent = this.first().parent();\r\n\r\n    if (!parent.length) {\r\n      return this;\r\n    }\r\n\r\n    let elem = parent;\r\n    let method = 'into';\r\n    const next = this.next().first().$[0];\r\n    const prev = this.prev().first().$[0];\r\n\r\n    if (next) {\r\n      elem = next;\r\n      method = 'insertBefore';\r\n    } else if (prev) {\r\n      elem = prev;\r\n      method = 'insertAfter';\r\n    }\r\n\r\n    this.first().remove();\r\n\r\n    element[method](elem);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#setOf\r\n   * @public\r\n   * @param {String} type - HTML element type.\r\n   * @param {Number|Object|Array.<*>} iterator - A number (how many elements to create inside each element),\r\n   * an object or an array to iterate over.\r\n   * @param {ElemSetOfCallback} callback\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Function for creating set of elements inside each element in the set based on an array or an object.\r\n   *\r\n   * @example\r\n   * table.setOf('tr', [[1, 2], [3, 4], [5, 6]], (row, array) => {\r\n   *   D(row).setOf('td', array, (col, number) => {\r\n   *     D(col).text(number);\r\n   *   });\r\n   * });\r\n   */\r\n  setOf(type, iterator, callback) {\r\n    validate({ 2: callback }, { 2: ['function'] }, 'Elem#setOf');\r\n\r\n    iterator = new Super(iterator).$;\r\n\r\n    if (isNumber(iterator)) {\r\n      try {\r\n        validate({ 1: iterator }, { 1: ['intLike', '>=0'] }, 'Elem#setOf');\r\n      } catch (e) {\r\n        throw new Error('2nd argument must be either or non-negative integer, or object! (at Elem#setOf)');\r\n      }\r\n\r\n      iterator = array(iterator).$;\r\n    }\r\n\r\n    return this.object((elems, elem, index) => {\r\n      iterate(iterator, (value, key) => {\r\n        const created = new Elem(elem).create(type);\r\n\r\n        callback(created.$[0], value, key, iterator, elem, index);\r\n\r\n        elems.add(created);\r\n      });\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#show\r\n   * @public\r\n   * @returns {Elem} Returns this.\r\n   * @description Shows all elements in the set.\r\n   * If an element was hidden using {@link Elem#hide} previous display is set.\r\n   *\r\n   * @example\r\n   * elem.show();\r\n   */\r\n  show() {\r\n    return this.forEach((elem) => {\r\n      const { dwayneData } = elem;\r\n\r\n      elem = new Elem(elem);\r\n\r\n      if (elem.css('display').indexOf('none') === 0) {\r\n        elem.css('display', dwayneData.previousDisplay);\r\n      }\r\n\r\n      dwayneData.previousDisplay = '';\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#text\r\n   * @public\r\n   * @param {String|ElemValueCallback|*} [text] - Text to write instead of current text.\r\n   * @returns {Elem|String} If no arguments passed text of the first element in the set returned.\r\n   * Otherwise all elements texts in the set are set to the text argument.\r\n   * @description Gets or sets text.\r\n   *\r\n   * @example\r\n   * elem.text('123');\r\n   * elem.text(); // '123'\r\n   */\r\n  text(text) {\r\n    if (!arguments.length) {\r\n      return this.prop(textProperty);\r\n    }\r\n\r\n    return this.forEach((elem, index) => {\r\n      const txt = elem[textProperty];\r\n\r\n      new Elem(elem).prop(\r\n        textProperty,\r\n        isFunction(text)\r\n          ? text(txt, elem, index)\r\n          : text\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#toggleAttr\r\n   * @public\r\n   * @param {String} attr - Attribute to toggle.\r\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the attribute\r\n   * with the '' value and if falsey method removes the attribute. If not present method adds\r\n   * the attribute if it doesn't exist and removes if it does.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for toggling attributes.\r\n   *\r\n   * @example\r\n   * elem.toggleAttr('attr');\r\n   * elem.toggleAttr('attr', someCondition);\r\n   */\r\n  toggleAttr(attr, condition) {\r\n    return this.forEach((elem) => {\r\n      elem = new Elem(elem);\r\n\r\n      if (arguments.length < 2 ? !elem.hasAttr(attr) : condition) {\r\n        elem.attr(attr, '');\r\n      } else {\r\n        elem.removeAttr(attr);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#toggleAttr\r\n   * @public\r\n   * @param {String} cls - Class to toggle.\r\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the class\r\n   * and if falsey method removes the class. If not present method adds\r\n   * the class if it doesn't exist and removes if it does.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for toggling classes.\r\n   *\r\n   * @example\r\n   * elem.toggleClass('cls');\r\n   * elem.toggleClass('cls', someCondition);\r\n   */\r\n  toggleClass(cls, condition) {\r\n    return (arguments.length < 2 ? !this.hasClass(cls) : condition)\r\n      ? this.addClass(cls)\r\n      : this.removeClass(cls);\r\n  }\r\n\r\n  get toStringTag() {\r\n    return toStringTag(this.$$);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#up\r\n   * @public\r\n   * @param {Integer} [level = 1] - What level up along the tree should be the parent.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Creates a collection of parents of level &lt;level&gt;.\r\n   *\r\n   * @example\r\n   * elem.up();\r\n   * elem.up(2);\r\n   */\r\n  up(level = 1) {\r\n    validate([level], [['intLike', '>=0']], 'Elem#up');\r\n\r\n    level = Number(level);\r\n\r\n    return this.object((elems, elem) => {\r\n      let n = level;\r\n\r\n      while (n-- && elem) {\r\n        elem = elem.parentNode;\r\n      }\r\n\r\n      elems.add(elem);\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#validate\r\n   * @public\r\n   * @param {ValidateCallback} [validator] - If present, function that validates inputs.\r\n   * @returns {Elem|Object.<String, Error|*>|null}\r\n   * If a callback argument provided returns this. If no arguments provided returns either an object\r\n   * with input names keys and errors values or null if no errors found.\r\n   * @description If a callback argument provided adds it to the element validators list.\r\n   * If no arguments provided validates every input element in the set with its own functions.\r\n   * If an element is a form it validates all input elements inside it. After the validation\r\n   * fires 'validate' event with 'valid' and 'error' (if form it's errors) properties.\r\n   *\r\n   * @example\r\n   * form.on('input change', 'input', (value, input) => {\r\n   *   input = D(input);\r\n   *\r\n   *   if (Number(value) % 3) {\r\n   *     input.addClass('invalid');\r\n   *\r\n   *     throw new Error('The value should be divided by 3!');\r\n   *   }\r\n   *\r\n   *   input.removeClass('invalid');\r\n   * });\r\n   */\r\n  validate(validator) {\r\n    validate([validator], ['function||!'], 'Elem#validate');\r\n\r\n    if (validator) {\r\n      return this.forEach(({ dwayneData }) => {\r\n        dwayneData.validators.push(validator);\r\n      });\r\n    }\r\n\r\n    const errors = new Super({ errors: null });\r\n\r\n    this\r\n      .filter(`${ inputElements }, form`)\r\n      .forEach((elem, index) => {\r\n        if (getName(elem) === 'form') {\r\n          let formErrors = { errors: null };\r\n          const form = new Elem(elem);\r\n          const inputs = form.find(inputElements);\r\n\r\n          inputs.forEach((input, index) => {\r\n            validatorWrap(input, index, formErrors);\r\n          });\r\n\r\n          errors.deepAssign(formErrors);\r\n\r\n          formErrors = formErrors.errors;\r\n\r\n          form.dispatch('validate', {}, {\r\n            valid: !formErrors,\r\n            errors: formErrors\r\n          });\r\n\r\n          return inputs.forEach((input) => {\r\n            const inputError = (formErrors || {})[input.name];\r\n\r\n            new Elem(input).dispatch('validate', {}, {\r\n              valid: !inputError,\r\n              error: inputError || null\r\n            });\r\n          });\r\n        }\r\n\r\n        let inputError = { errors: null };\r\n\r\n        validatorWrap(elem, index, inputError);\r\n        errors.deepAssign(inputError);\r\n\r\n        inputError = (inputError.errors || {})[elem.name];\r\n\r\n        new Elem(elem).dispatch('validate', {}, {\r\n          valid: !inputError,\r\n          error: inputError || null\r\n        });\r\n      });\r\n\r\n    function validatorWrap(input, index, errors) {\r\n      try {\r\n        if (input.validity && !input.validity.valid) {\r\n          throw new Error(input.validationMessage);\r\n        }\r\n\r\n        input.dwayneData.validators.forEach((validator) => {\r\n          validator(input.value, input, index);\r\n        });\r\n      } catch (err) {\r\n        (errors.errors = errors.errors || {})[input.name] = err;\r\n      }\r\n    }\r\n\r\n    if (errors.every((error) => isNull(error))) {\r\n      return null;\r\n    }\r\n\r\n    return errors.$.errors;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#width\r\n   * @public\r\n   * @param {*|ElemValueCallback} [width] - Width to set.\r\n   * @returns {Elem|String} If no arguments passed width of the first element in the set returned.\r\n   * Otherwise all elements widths in the set are set to the width argument.\r\n   * @description Gets or sets width.\r\n   *\r\n   * @example\r\n   * elem.width(123);\r\n   * elem.width(); // 123\r\n   */\r\n  width(width) {\r\n    return this.prop.apply(this, new Arr(arguments).unshift('width').$);\r\n  }\r\n}\r\n\r\ndefineProperties(Elem.prototype, {\r\n  [Symbol.toStringTag]: 'Elem'\r\n});\r\n\r\n/**\r\n * @const {Elem} win\r\n * @type {Elem}\r\n * @public\r\n * @description Elem instance of window.\r\n */\r\nconst win = new Elem(global);\r\n\r\n/**\r\n * @const {Elem} doc\r\n * @type {Elem}\r\n * @public\r\n * @description Elem instance of document.\r\n */\r\nconst doc = new Elem(nativeDocument);\r\n\r\n/**\r\n * @const {Elem} html\r\n * @type {Elem}\r\n * @public\r\n * @description Elem instance of document.documentElement.\r\n */\r\nconst html = new Elem(nativeDocument.documentElement);\r\n\r\n/**\r\n * @const {Elem} body\r\n * @type {Elem}\r\n * @public\r\n * @description Elem instance of document.body.\r\n */\r\nconst body = new Elem(nativeDocument.body);\r\n\r\n/**\r\n * @const {Elem} head\r\n * @type {Elem}\r\n * @public\r\n * @description Elem instance of document.head.\r\n */\r\nconst head = new Elem(nativeDocument.head);\r\n\r\nconst elements = new Arr(htmlElements).concat(svgElements).$;\r\nconst props = new Arr(elements).map((type) => new Str(type).toCamelCase().$).$;\r\n\r\ndynamicDefineProperties(Elem.prototype, props, (elem, i) => function () {\r\n  return this.create.apply(this, new Arr(arguments).unshift(elements[i]).$);\r\n});\r\n\r\ndynamicDefineProperties(Elem.prototype, canvasGetMethods, (method) => function () {\r\n  const ctx = this.ctx();\r\n\r\n  if (ctx) {\r\n    return ctx[method].apply(ctx, arguments);\r\n  }\r\n});\r\n\r\ndynamicDefineProperties(Elem.prototype, canvasRestMethods, (method) => function () {\r\n  const ctx = this.ctx();\r\n\r\n  if (ctx) {\r\n    ctx[method].apply(ctx, arguments);\r\n  }\r\n\r\n  return this;\r\n});\r\n\r\n/**\r\n * @function toFind\r\n * @private\r\n * @param {Element|Elem|String} elem - Element, selector of Elements or Elem.\r\n * @returns {Elem} Instance of Elem.\r\n */\r\nfunction toFind(elem) {\r\n  if (isElem(elem)) {\r\n    return elem;\r\n  }\r\n\r\n  if (isString(elem)) {\r\n    elem = find(elem);\r\n  }\r\n\r\n  return new Elem(elem);\r\n}\r\n\r\n/**\r\n * @function isElem\r\n * @private\r\n * @param {*} value - Value to check if it's Elem.\r\n * @returns {Boolean} If the value is Elem.\r\n * @description Returns if the value is Elem or not.\r\n */\r\nfunction isElem(value) {\r\n  return value instanceof Elem;\r\n}\r\n\r\n/**\r\n * @function isWindow\r\n * @private\r\n * @param {*} value - Value to check if it's Window.\r\n * @returns {Boolean} If the value is Window.\r\n * @description Returns if the value is Window or not.\r\n */\r\nfunction isWindow(value) {\r\n  return toStringTag(value) === 'Window';\r\n}\r\n\r\n/**\r\n * @function isHTMLDocument\r\n * @private\r\n * @param {*} value - Value to check if it's HTMLDocument.\r\n * @returns {Boolean} If the value is HTMLDocument.\r\n * @description Returns if the value is HTMLDocument or not.\r\n */\r\nfunction isHTMLDocument(value) {\r\n  return toStringTag(value) === 'HTMLDocument';\r\n}\r\n\r\n/**\r\n * @function isDocumentFragment\r\n * @private\r\n * @param {*} value - Value to check if it's a DocumentFragment.\r\n * @returns {Boolean} If the value is a DocumentFragment.\r\n * @description Returns if the value is a DocumentFragment or not.\r\n */\r\nfunction isDocumentFragment(value) {\r\n  return toStringTag(value) === 'DocumentFragment';\r\n}\r\n\r\n/**\r\n * @function isStyleRule\r\n * @private\r\n * @param {*} value - Value to check if it's a style rule.\r\n * @returns {Boolean} If the value is a style rule.\r\n * @description Returns if the value is a style rule or not.\r\n */\r\nfunction isStyleRule(value) {\r\n  return toStringTag(value) === 'CSSStyleRule';\r\n}\r\n\r\n/**\r\n * @function\r\n * @private\r\n * @param {*} value - Value to check if it's Comment or Text.\r\n * @returns {Boolean} If the value is HTMLDocument.\r\n * @description Returns if the value is Comment or Text or not.\r\n */\r\nfunction isCommentOrText(value) {\r\n  const tag = toStringTag(value);\r\n\r\n  return tag === 'Comment' || tag === 'Text';\r\n}\r\n\r\n/**\r\n * @function getElem\r\n * @private\r\n * @param {Elem} elem - Element to check.\r\n * @returns {Element} The argument or a fallback if needed.\r\n */\r\nfunction getElem(elem) {\r\n  return isElement(elem.$[0]) ? elem.$[0] : emptyDiv;\r\n}\r\n\r\n/**\r\n * @function getName\r\n * @private\r\n * @param {Element} [elem] - Element which name is needed to know.\r\n * @returns {String} Element name.\r\n */\r\nfunction getName(elem) {\r\n  return (elem && elem.nodeName && elem.nodeName.toLowerCase()) || '';\r\n}\r\n\r\n/**\r\n * @function addDwayneData\r\n * @private\r\n * @param {Element} elem - Element to add dwayneData to.\r\n * @returns {void}\r\n */\r\nfunction addDwayneData(elem) {\r\n  if (!{}.hasOwnProperty.call(elem, 'dwayneData') && !isWindow(elem)) {\r\n    /**\r\n     * @member Element#dwayneData\r\n     * @type {Object}\r\n     * @protected\r\n     * @property {String} previousDisplay - Parameter used for hiding/showing elements.\r\n     * @property {Object.<String, Super>} removeListeners - Parameter used for remove event listeners.\r\n     * @property {CanvasRenderingContext2D} [ctx] - Canvas rendering context.\r\n     * @property {Arr} validators - Validators assigned to element.\r\n     * @description D data.\r\n     */\r\n    Object.defineProperty(elem, 'dwayneData', {\r\n      value: {\r\n        previousDisplay: '',\r\n        listeners: {},\r\n        ctx: getName(elem) === 'canvas' && elem.getContext('2d'),\r\n        validators: new Arr([])\r\n      }\r\n    });\r\n  } else if (isWindow(elem) && !windowsDwayneData.some(({ element }) => element === elem)) {\r\n    windowsDwayneData.push({\r\n      element: elem,\r\n      listeners: {}\r\n    });\r\n  }\r\n}\r\n\r\nconstructors[2].push({\r\n  check: (elem) => (\r\n    isElement(elem) ||\r\n    isWindow(elem) ||\r\n    isHTMLDocument(elem) ||\r\n    isCommentOrText(elem) ||\r\n    isDocumentFragment(elem) ||\r\n    /^(HTMLCollection|NodeList)$/.test(toStringTag(elem))\r\n  ),\r\n  cls: Elem\r\n});\r\n\r\n/**\r\n * @function find\r\n * @public\r\n * @param {String} selector - Selector to find.\r\n * @param {Element} [base = document] - Base to find in.\r\n * @returns {Elem} New instance of Elem.\r\n * @description Synonym for\r\n * [Document#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Document/querySelectorAll}.\r\n */\r\nfunction find(selector, base = nativeDocument) {\r\n  return new Elem(\r\n    isElement(base) || isHTMLDocument(base)\r\n      ? base.querySelectorAll(String(selector))\r\n      : []\r\n  );\r\n}\r\n\r\n/**\r\n * @function parseHTML\r\n * @public\r\n * @param {String} html - HTML to parse.\r\n * @param {Boolean} [collapseWhiteSpace = false] - If the whitespace should be\r\n * collapsed during the parsing.\r\n * @returns {Elem} New instance of Elem.\r\n * @description Parses HTML and returns a wrap of #document-fragment containing the contents.\r\n *\r\n * @example\r\n * parseHTML('<div>123</div>'); // Elem\r\n */\r\nfunction parseHTML(html, collapseWhiteSpace) {\r\n  const json = markupToJSON(html, collapseWhiteSpace);\r\n  const template = doc.template();\r\n  const elem = new Elem(template.$[0].content);\r\n\r\n  json.forEach(function forEachNode(node) {\r\n    const {\r\n      name,\r\n      attrs,\r\n      value,\r\n      parent,\r\n      children\r\n    } = node;\r\n\r\n    const parentNode = parent.elem || elem;\r\n    const element = parentNode.create(name);\r\n\r\n    node.elem = element;\r\n\r\n    if (value) {\r\n      element.text(value);\r\n    }\r\n\r\n    if (attrs) {\r\n      element.attr(attrs);\r\n    }\r\n\r\n    if (name === 'template') {\r\n      node.elem = new Elem(element.prop('content'));\r\n    }\r\n\r\n    if (children) {\r\n      children.forEach(forEachNode);\r\n    }\r\n  });\r\n\r\n  return new Elem(elem);\r\n}\r\n\r\n/**\r\n * @function px\r\n * @public\r\n * @param {String|Number} size - String containing pixels value or a number.\r\n * @returns {Number} Number of pixels.\r\n * @description Function for parsing pixel strings.\r\n *\r\n * @example\r\n * px('0px');  // 0\r\n * px('42px'); // 42\r\n */\r\nfunction px(size) {\r\n  return Number(String(size).replace(/px$/, ''));\r\n}\r\n\r\nexport { Elem, win, doc, html, body, head, find, parseHTML, px };\r\n","export function registerDBlock(Block) {\r\n  class DBlock extends Block {\r\n    static template = '<d-elements value=\"{elems}\" />';\r\n\r\n    elems = null;\r\n\r\n    afterConstruct() {\r\n      const { children } = this.$$.parent;\r\n      const { name } = this.args;\r\n      let found;\r\n\r\n      if (name) {\r\n        found = children.find(({ name: nodeName }) => nodeName === `d-block-${ name }`);\r\n\r\n        if (found && found.value.children.length) {\r\n          this.elems = found.value.children;\r\n        }\r\n      } else {\r\n        this.elems = children;\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-block',\r\n    value: DBlock\r\n  };\r\n}\r\n","import { Arr } from '../Arr';\r\nimport { Elem } from '../Elem';\r\nimport { Super } from '../Super';\r\nimport { assign } from '../helpers';\r\n\r\nexport function registerDEach(Block, createBlock) {\r\n  class DEach extends Block {\r\n    constructor(opts) {\r\n      super(opts);\r\n\r\n      const {\r\n        args: {\r\n          item: itemName = '$item',\r\n          index: indexName = '$index'\r\n        }\r\n      } = this;\r\n\r\n      assign(this.$$, {\r\n        uids: new Super({}),\r\n        items: new Arr([]),\r\n        UID: String(this.args.uid),\r\n        itemName,\r\n        indexName\r\n      });\r\n    }\r\n\r\n    afterRender() {\r\n      this.constructValues(this.args.set);\r\n      this.watchArgs('set', (set) => {\r\n        this.constructValues(set);\r\n      });\r\n    }\r\n\r\n    constructValues(set) {\r\n      const {\r\n        elems: {\r\n          start,\r\n          parent: parentElem\r\n        },\r\n        uids,\r\n        parent,\r\n        scope,\r\n        itemName,\r\n        indexName,\r\n        UID\r\n      } = this.$$;\r\n      const { children } = this;\r\n      const $uids = uids.$;\r\n      const newKeys = {};\r\n      const newUIDs = {};\r\n\r\n      new Super(set).forEach((item, index) => {\r\n        scope[itemName] = item;\r\n        scope[indexName] = index;\r\n\r\n        const uid = parent.$$.evaluate(String(UID), null, null, false, false, this);\r\n\r\n        newKeys[uid] = newKeys[uid] || {};\r\n        newKeys[uid][index] = true;\r\n        newUIDs[index] = uid;\r\n      });\r\n\r\n      scope[itemName] = null;\r\n      scope[indexName] = null;\r\n\r\n      uids.forEach((items, uid) => {\r\n        if (!newKeys[uid]) {\r\n          items.forEach((Item) => {\r\n            Item.remove();\r\n          });\r\n\r\n          return;\r\n        }\r\n\r\n        items.splice(Object.keys(newKeys[uid]).length).forEach((Item) => {\r\n          Item.remove();\r\n        });\r\n      });\r\n\r\n      let after = start;\r\n\r\n      new Super(set).forEach((item, index) => {\r\n        const uid = newUIDs[index];\r\n        let block;\r\n\r\n        if ($uids[uid] && $uids[uid].length) {\r\n          block = newKeys[uid][index] = uids.$[uid].shift();\r\n          block.$$.scope[indexName] = index;\r\n          block.$$.scope[itemName] = item;\r\n        } else {\r\n          block = newKeys[uid][index] = createBlock({\r\n            node: {\r\n              itemName,\r\n              indexName,\r\n              item,\r\n              index,\r\n              name: '#d-item',\r\n              block: parent,\r\n              children\r\n            },\r\n            after,\r\n            parent: parentElem,\r\n            parentBlock: this,\r\n            parentScope: parent\r\n          });\r\n        }\r\n\r\n        const {\r\n          start,\r\n          end\r\n        } = block.$$.elems;\r\n\r\n        if (start.prev().$[0] !== after.$[0]) {\r\n          const { content } = block.$$.elems;\r\n\r\n          new Elem([\r\n            start,\r\n            content,\r\n            end\r\n          ]).insertAfter(after);\r\n        }\r\n\r\n        after = end;\r\n      });\r\n\r\n      this.$$.uids = new Super(newKeys).map((items) => (\r\n        new Super(items).values()\r\n      ));\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-each',\r\n    value: DEach\r\n  };\r\n}\r\n","import { Arr } from '../Arr';\r\nimport { Elem } from '../Elem';\r\n\r\nexport function registerDElements(Block, createBlock) {\r\n  class DElements extends Block {\r\n    afterConstruct() {\r\n      this.watchArgs('value', (value) => {\r\n        const {\r\n          children,\r\n          mixins,\r\n          watchersToRemove,\r\n          elems: {\r\n            start,\r\n            content,\r\n            parent\r\n          }\r\n        } = this.$$;\r\n        let after = start;\r\n\r\n        children.forEach((child) => {\r\n          child.remove(true);\r\n        });\r\n        mixins.forEach((mixin) => {\r\n          mixin.remove(true);\r\n        });\r\n        content.remove();\r\n\r\n        this.$$.children = new Arr([]);\r\n        this.$$.mixins = new Arr([]);\r\n        this.$$.watchersToRemove = watchersToRemove.filter(({ watchers, watcher, forDElements }) => {\r\n          if (forDElements) {\r\n            return true;\r\n          }\r\n\r\n          const index = watchers.indexOf(watcher);\r\n\r\n          if (index !== -1) {\r\n            watchers.splice(index, 1);\r\n          }\r\n        });\r\n\r\n        const newContent = new Elem();\r\n\r\n        new Arr(value || []).forEach((child) => {\r\n          const block = createBlock({\r\n            node: child,\r\n            after,\r\n            parent,\r\n            parentBlock: this,\r\n            parentScope: this\r\n          });\r\n\r\n          if (block instanceof Block) {\r\n            const { elems } = block.$$;\r\n\r\n            after = elems.end;\r\n\r\n            newContent.add(elems.start, elems.content, elems.end);\r\n          } else {\r\n            after = block;\r\n\r\n            newContent.add(block);\r\n          }\r\n        });\r\n\r\n        this.$$.elems.content = newContent;\r\n      });\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-elements',\r\n    value: DElements\r\n  };\r\n}\r\n","export function registerDIf(Block) {\r\n  class DIf extends Block {\r\n    static template = '<d-elements value=\"{elems}\"/>';\r\n\r\n    index = Infinity;\r\n    elems = null;\r\n    values = this.children.map((child, i) => {\r\n      const {\r\n        name,\r\n        attrs,\r\n        children\r\n      } = child;\r\n      const cond = this.evaluateAndWatch(name === 'd-else' ? '{true}' : attrs.if || '{true}', (newValue) => {\r\n        if (!!newValue === this.values.$[i]) {\r\n          return;\r\n        }\r\n\r\n        this.values.$[i] = !!newValue;\r\n\r\n        if (i > this.index) {\r\n          return;\r\n        }\r\n\r\n        if (i < this.index) {\r\n          this.index = i;\r\n          this.elems = children;\r\n\r\n          return;\r\n        }\r\n\r\n        const found = this.values.find(Boolean);\r\n\r\n        if (found) {\r\n          this.index = found.key;\r\n          this.elems = this.children.$[found.key].children;\r\n        } else {\r\n          this.index = Infinity;\r\n          this.elems = null;\r\n        }\r\n      });\r\n\r\n      if (cond && this.index === Infinity) {\r\n        this.index = i;\r\n        this.elems = children;\r\n      }\r\n\r\n      return cond;\r\n    });\r\n  }\r\n\r\n  return {\r\n    name: 'd-if',\r\n    value: DIf\r\n  };\r\n}\r\n","export function registerDItem(Block) {\r\n  class DItem extends Block {\r\n    static template = '<d-elements value=\"{children}\"/>';\r\n  }\r\n\r\n  return {\r\n    name: '#d-item',\r\n    value: DItem\r\n  };\r\n}\r\n","import { Arr } from '../Arr';\r\nimport { Super } from '../Super';\r\n\r\nexport function registerDSwitch(Block) {\r\n  class DSwitch extends Block {\r\n    static template = '<d-elements value=\"{elems}\"/>';\r\n\r\n    index = Infinity;\r\n    elems = null;\r\n\r\n    constructor(opts) {\r\n      super(opts);\r\n\r\n      const {\r\n        args,\r\n        args: { value }\r\n      } = this;\r\n      let wasDefault;\r\n\r\n      this.values = this.children.object((values, child, i) => {\r\n        const {\r\n          name,\r\n          attrs,\r\n          children\r\n        } = child;\r\n\r\n        if (wasDefault) {\r\n          return;\r\n        }\r\n\r\n        if (name !== 'd-case' && name !== 'd-default') {\r\n          return;\r\n        }\r\n\r\n        if (name === 'd-default') {\r\n          wasDefault = true;\r\n        }\r\n\r\n        let val;\r\n\r\n        if (name === 'd-default') {\r\n          val = args.value;\r\n        } else {\r\n          val = this.evaluateAndWatch(attrs.if || '{undefined}', (newValue) => {\r\n            if (this.equals(this.values.$[i].value, newValue)) {\r\n              return;\r\n            }\r\n\r\n            this.values.$[i].value = newValue;\r\n\r\n            if (i > this.index) {\r\n              return;\r\n            }\r\n\r\n            if (i < this.index) {\r\n              this.index = i;\r\n              this.elems = children;\r\n\r\n              return;\r\n            }\r\n\r\n            const found = this.values.find(({ value }) => (\r\n              this.equals(value, args.value)\r\n            ));\r\n\r\n            if (found) {\r\n              this.index = found.key;\r\n              this.elems = found.value.children;\r\n            } else {\r\n              this.index = Infinity;\r\n              this.elems = null;\r\n            }\r\n          });\r\n        }\r\n\r\n        if (this.equals(val, value) && this.index === Infinity) {\r\n          this.index = i;\r\n          this.elems = children;\r\n        }\r\n\r\n        values.push({\r\n          name,\r\n          children,\r\n          value: val\r\n        });\r\n      }, new Arr([]));\r\n    }\r\n\r\n    afterConstruct() {\r\n      this.watchArgs('value', (newValue) => {\r\n        this.index = Infinity;\r\n        this.values.forEach(({ name, value, children }, i) => {\r\n          const val = name === 'd-default'\r\n            ? newValue\r\n            : value;\r\n\r\n          if (this.equals(val, newValue) && this.index === Infinity) {\r\n            this.index = i;\r\n            this.elems = children;\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    equals(value1, value2) {\r\n      return new Super(value1).equals(value2);\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-switch',\r\n    value: DSwitch\r\n  };\r\n}\r\n","import { isNil } from '../helpers';\r\n\r\nexport function registerDText(Block) {\r\n  class DText extends Block {\r\n    static template = '<d-elements value=\"{[{ name: \\'#text\\', value: text }]}\"/>';\r\n\r\n    text = '';\r\n\r\n    afterConstruct() {\r\n      this.text = isNil(this.args.value) ? '' : this.args.value;\r\n\r\n      this.watchArgs('value', (newValue) => {\r\n        this.text = isNil(newValue) ? '' : newValue;\r\n      });\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-text',\r\n    value: DText\r\n  };\r\n}\r\n","import { Super } from '../Super';\r\n\r\nexport function registerDAttr(Mixin) {\r\n  class DAttr extends Mixin {\r\n    afterUpdate(newValue, oldValue) {\r\n      const { elem } = this;\r\n\r\n      newValue = new Super(newValue).$;\r\n\r\n      new Super(oldValue).forEach((value, prop) => {\r\n        if (!newValue[prop]) {\r\n          elem.removeAttr(prop);\r\n        }\r\n      });\r\n      elem.attr(newValue);\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-attr',\r\n    value: DAttr\r\n  };\r\n}\r\n\r\n","import { isFunction } from '../helpers';\r\n\r\nexport function registerDBind(Mixin) {\r\n  class DBind extends Mixin {\r\n    afterUpdate(value) {\r\n      if (this.off) {\r\n        this.off();\r\n      }\r\n\r\n      if (!isFunction(value)) {\r\n        return;\r\n      }\r\n\r\n      this.off = this.elem.on(this.match[0], value);\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-bind',\r\n    value: DBind\r\n  };\r\n}\r\n","import { Super } from '../Super';\nimport { isArray, isString, iterate } from '../helpers';\n\nexport function registerDClass(Mixin) {\n  class DClass extends Mixin {\n    classes = [];\n\n    afterUpdate(newValue) {\n      const {\n        elem,\n        classes\n      } = this;\n      const newClasses = [];\n\n      newValue = new Super(newValue).$;\n\n      if (isString(newValue)) {\n        newValue = newValue.split(/\\s+/);\n      }\n\n      if (isArray(newValue)) {\n        iterate(classes, (cls) => {\n          if (newValue.indexOf(cls) === -1) {\n            elem.removeClass(cls);\n          }\n        });\n        iterate(newValue, (cls) => {\n          if (isString(cls)) {\n            newClasses.push(cls);\n            elem.addClass(cls);\n          }\n        });\n      } else {\n        iterate(classes, (cls) => {\n          if (!newValue[cls]) {\n            elem.removeClass(cls);\n          }\n        });\n        iterate(newValue, (val, cls) => {\n          if (val) {\n            newClasses.push(cls);\n            elem.addClass(cls);\n          }\n        });\n      }\n\n      this.classes = newClasses;\n    }\n  }\n\n  return {\n    name: 'd-class',\n    value: DClass\n  };\n}\n","import { isFunction, isString } from '../helpers';\n\nexport function registerDElem(Mixin) {\n  class DElem extends Mixin {\n    static evaluate = false;\n\n    constructor(opts) {\n      super(opts);\n\n      const { parent } = this.$$;\n      const value = this.evaluateOnce();\n\n      if (isFunction(value)) {\n        value(this.elem);\n      } else if (isString(value)) {\n        parent[value] = this.elem;\n      }\n    }\n  }\n\n  return {\n    name: 'd-elem',\n    value: DElem\n  };\n}\n","export function registerDHide(Mixin) {\r\n  class DHide extends Mixin {\r\n    afterUpdate(value) {\r\n      const { elem } = this;\r\n\r\n      if (value) {\r\n        elem.hide();\r\n      } else {\r\n        elem.show();\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-hide',\r\n    value: DHide\r\n  };\r\n}\r\n","export function registerDOn(Mixin) {\r\n  class DOn extends Mixin {\r\n    static evaluate = false;\r\n\r\n    constructor(opts) {\r\n      super(opts);\r\n\r\n      this.elem.on(this.match[0], () => {\r\n        this.evaluateOnce();\r\n      });\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-on',\r\n    value: DOn\r\n  };\r\n}\r\n","export function registerDShow(Mixin) {\r\n  class DShow extends Mixin {\r\n    afterUpdate(value) {\r\n      const { elem } = this;\r\n\r\n      if (value) {\r\n        elem.show();\r\n      } else {\r\n        elem.hide();\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-show',\r\n    value: DShow\r\n  };\r\n}\r\n","import { Super } from '../Super';\r\n\r\nexport function registerDStyle(Mixin) {\r\n  class DStyle extends Mixin {\r\n    afterUpdate(newValue, oldValue) {\r\n      const { elem } = this;\r\n\r\n      newValue = new Super(newValue).$;\r\n\r\n      new Super(oldValue).forEach((value, prop) => {\r\n        if (!newValue[prop]) {\r\n          elem.removeCSS(prop);\r\n        }\r\n      });\r\n      elem.css(newValue);\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-style',\r\n    value: DStyle\r\n  };\r\n}\r\n","import { isNil } from '../helpers';\r\n\r\nexport function registerDText(Mixin) {\r\n  class DText extends Mixin {\r\n    afterUpdate(value) {\r\n      this.elem.text(\r\n        isNil(value)\r\n          ? ''\r\n          : `${ value }`\r\n      );\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-text',\r\n    value: DText\r\n  };\r\n}\r\n","import { switcher } from '../Switcher';\r\nimport { isFunction } from '../helpers';\r\n\r\nconst listenerSwitcher = switcher('strictEquals', 'input')\r\n  .case('form', 'input, change')\r\n  .case('select', 'change')\r\n  .case('input', (type) => (\r\n    type === 'radio'\r\n    || type === 'checkbox'\r\n    || type === 'color'\r\n    || type === 'file'\r\n      ? 'change'\r\n      : 'input'\r\n  ));\r\n\r\nexport function registerDValidate(Mixin) {\r\n  class DValidate extends Mixin {\r\n    static evaluate = false;\r\n\r\n    constructor(opts) {\r\n      super(opts);\r\n\r\n      const {\r\n        elem,\r\n        match\r\n      } = this;\r\n      const validator = this.evaluateOnce();\r\n\r\n      if (isFunction(validator)) {\r\n        elem.validate(validator);\r\n      }\r\n\r\n      if (validator === true && match === 'on-change' && elem.$$.dwayneData.validators.length === 1) {\r\n        elem.on(listenerSwitcher(elem.name, [elem.prop('type')]), () => {\r\n          elem.validate();\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-validate',\r\n    value: DValidate\r\n  };\r\n}\r\n","import { Arr } from '../Arr';\nimport { switcher } from '../Switcher';\nimport { isArray, isNil } from '../helpers';\n\nconst propSwitcher = switcher('strictEquals', (type, elem) => (\n  elem.hasAttr('contenteditable') || elem.hasAttr('contentEditable')\n    ? 'text'\n    : 'value'\n))\n  .case('input', (type) => {\n    if (type === 'file') {\n      return 'files';\n    }\n\n    return type === 'radio' || type === 'checkbox'\n      ? 'checked'\n      : 'value';\n  });\nconst setValueSwitcher = switcher('strictEquals', (value) => value)\n  .case('input', (value, type, inputValue) => {\n    if (type !== 'radio' && type !== 'checkbox') {\n      return value;\n    }\n\n    if (type === 'radio') {\n      return value === inputValue;\n    }\n\n    return value.indexOf(inputValue) !== -1;\n  });\nconst getValueSwitcher = switcher('strictEquals', (value) => value)\n  .case('input', (value, type, inputValue, values) => {\n    if (type !== 'radio' && type !== 'checkbox') {\n      return value;\n    }\n\n    if (type === 'radio') {\n      return value\n        ? inputValue\n        : null;\n    }\n\n    if (value) {\n      if (values) {\n        return values.indexOf(inputValue) === -1\n          ? new Arr(values).concat(inputValue).$\n          : values;\n      }\n\n      return [inputValue];\n    }\n\n    if (!isArray(values)) {\n      return [];\n    }\n\n    const index = values.indexOf(inputValue);\n\n    if (index !== -1) {\n      return [\n        ...new Arr(values).slice(0, index).$,\n        ...new Arr(values).slice(index + 1).$\n      ];\n    }\n\n    return values;\n  });\nconst listenerSwitcher = switcher('strictEquals', 'input')\n  .case('select', 'change')\n  .case('input', (type) => (\n    type === 'radio'\n    || type === 'checkbox'\n    || type === 'color'\n    || type === 'file'\n      ? 'change'\n      : 'input'\n  ));\n\nexport function registerDValue(Mixin) {\n  class DValue extends Mixin {\n    static evaluate = false;\n\n    constructor(opts) {\n      super(opts);\n\n      const {\n        $$: {\n          _value,\n          parent\n        },\n        elem\n      } = this;\n      const type = elem.prop('type');\n\n      this.prop = propSwitcher(elem.name, [type, elem]);\n      this.type = type;\n\n      const initialScopeValue = parent.$$.evaluate(`{${ _value }}`, (newValue) => {\n        this.setProp(newValue);\n      }, this);\n      const initialElemValue = this.getProp(initialScopeValue);\n\n      if (isNil(initialScopeValue) || type === 'checkbox') {\n        parent[_value] = initialElemValue;\n      } else {\n        this.setProp(initialScopeValue);\n      }\n\n      elem.on(listenerSwitcher(elem.name, [type]), (e) => {\n        if (e.target === elem.$[0]) {\n          parent[_value] = this.getProp(parent[_value]);\n        }\n      });\n    }\n\n    setProp(value) {\n      const {\n        elem,\n        prop,\n        type\n      } = this;\n\n      if (prop === 'text') {\n        elem.text(value);\n      } else {\n        elem.prop(prop, setValueSwitcher(elem.name, [value, type, elem.$[0].value]));\n      }\n    }\n\n    getProp(values) {\n      const {\n        elem,\n        prop,\n        type\n      } = this;\n\n      return prop === 'text'\n        ? elem.text()\n        : getValueSwitcher(elem.name, [elem.prop(prop), type, elem.$[0].value, values]);\n    }\n  }\n\n  return {\n    name: 'd-value',\n    value: DValue\n  };\n}\n","/**\r\n * @module Block\r\n * @private\r\n * @mixin\r\n * @description Exports Block class.\r\n */\r\n\r\nimport { Arr } from './Arr';\r\nimport { find, doc, Elem } from './Elem';\r\nimport { Super } from './Super';\r\nimport {\r\n  iterate, defineProperties, validate,\r\n  isFunction, isNil, isUndefined\r\n} from './helpers';\r\nimport * as Blocks from './blocks';\r\nimport * as Mixins from './mixins';\r\nimport { htmlAllowedTagSymbols, htmlAllowedAttrSymbols } from './constants';\r\nimport markupToJSON from './helpers/markupToJSON';\r\n\r\n/**\r\n * @callback Watcher\r\n * @param {*} newValue - New value.\r\n * @param {*} oldValue - Old value.\r\n */\r\n\r\n/**\r\n * @callback Wrapper\r\n * @param {Block} Block class to wrap.\r\n * @returns {Block} New Block class.\r\n */\r\n\r\nconst blocks = Object.create(null);\r\nconst mixins = Object.create(null);\r\nconst isPrototypeOf = {}.isPrototypeOf;\r\nconst tagName = new RegExp(`^${ htmlAllowedTagSymbols }$`, 'i');\r\nconst attrName = new RegExp(`^${ htmlAllowedAttrSymbols }$`);\r\nconst expressionRegExp = /^\\{[\\s\\S]+\\}$/;\r\nconst { document } = global;\r\nconst svgNS = 'http://www.w3.org/2000/svg';\r\nlet onEvalError;\r\nlet evalMode;\r\nlet getting;\r\nlet changed;\r\n\r\n/**\r\n * @class Block\r\n * @public\r\n * @param {Object} opts - Element options.\r\n * @returns {Block} Instance of Block.\r\n * @description Class for dynamic templating.\r\n *\r\n * @example\r\n * import { D, Block, initApp, registerBlock } from 'dwayne';\r\n *\r\n * class App extends Block {\r\n *   static template = '<Hello text=\"{text}\"/>';\r\n *\r\n *   constructor(args, children) {\r\n *     super(args, children);\r\n *\r\n *     this.text = 'world (0)';\r\n *     this.times = 0;\r\n *\r\n *     this.setInterval();\r\n *   }\r\n *\r\n *   setInterval() {\r\n *     D(1000).interval(() => {\r\n *       this.text = `world (${ ++this.times })`;\r\n *     });\r\n *   }\r\n * }\r\n *\r\n * class Hello extends Block {\r\n *   static template = 'Hello, <d-text value=\"{args.text}\"/>!';\r\n * }\r\n *\r\n * Block.App = App;\r\n * Block.Hello = Hello;\r\n *\r\n * initApp();\r\n */\r\nclass Block {\r\n  /**\r\n   * @member {Boolean} [Block.collapseWhiteSpace = true]\r\n   * @type {Boolean}\r\n   * @public\r\n   * @description If the whitespace between html elements and\r\n   * in the start and the end inside the tag should be omitted during parsing.\r\n   */\r\n  static collapseWhiteSpace = true;\r\n\r\n  /**\r\n   * @member {Object} [Block.defaultArgs = true]\r\n   * @type {Object}\r\n   * @public\r\n   * @description Provide default args if that args may not appear in the args\r\n   * (using \"d-rest\") but you use them in your template and want them to be watched.\r\n   */\r\n  static defaultArgs = {};\r\n\r\n  static get onEvalError() {\r\n    return onEvalError;\r\n  }\r\n\r\n  static set onEvalError(listener) {\r\n    if (isFunction(listener)) {\r\n      onEvalError = listener;\r\n    } else {\r\n      onEvalError = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method Block.wrap\r\n   * @public\r\n   * @param {Wrapper} func - Function that returns wrapped block.\r\n   * @returns {Block} New block.\r\n   * @description Method for wrapping blocks into another blocks.\r\n   * It is considered best practice to just extends the old block with a new one.\r\n   *\r\n   * @example\r\n   * class MyBlock extends Block {\r\n   *   static template = '<div>123</div>';\r\n   * }\r\n   *\r\n   * MyBlock.wrap((Block) => {\r\n   *   return class extends Block {\r\n   *     static template = `<section class=\"wrapper\">${ Block.template }</section>`;\r\n   *\r\n   *     constructor() {\r\n   *       this.additionalVar = 'additional';\r\n   *     }\r\n   *   };\r\n   * });\r\n   */\r\n  static wrap(func) {\r\n    validate([func], ['function']);\r\n\r\n    return func(this);\r\n  }\r\n\r\n  constructor(opts) {\r\n    const {\r\n      name,\r\n      args: originalArgs,\r\n      children,\r\n      block,\r\n      parent,\r\n      parentBlock,\r\n      parentScope\r\n    } = opts;\r\n    const watchersToRemove = new Arr([]);\r\n\r\n    Object.defineProperties(this, {\r\n      /**\r\n       * @member {Block} Block#$\r\n       * @type {Block}\r\n       * @public\r\n       * @description This.\r\n       */\r\n      $: {\r\n        value: this\r\n      },\r\n\r\n      /**\r\n       * @member {Object} Block#$$\r\n       * @type {Object}\r\n       * @protected\r\n       * @property {Object} args - Private args scope.\r\n       * @property {Arr} children - Child blocks.\r\n       * @property {Arr} mixins - Child mixins.\r\n       * @property {Object} elems - Elements connected to the block.\r\n       * @property {Elem} elems.parent - Parent element.\r\n       * @property {Elem} elems.start - Start comment block.\r\n       * @property {Elem} elems.end - End comment block.\r\n       * @property {Elem} elems.content - Content elements.\r\n       * @property {Function} evaluate - Evaluate function.\r\n       * @property {Object} global - Private global scope.\r\n       * @property {Object} locals - Private locals scope.\r\n       * @property {Arr} watchersToRemove - Watchers to remove before removing element.\r\n       */\r\n      $$: {\r\n        value: {\r\n          name,\r\n          parent: parentScope,\r\n          parentBlock,\r\n          children: new Arr([]),\r\n          mixins: new Arr([]),\r\n          Block: block,\r\n          elems: {\r\n            start: doc.createComment(` ${ name }: start `),\r\n            end: doc.createComment(` ${ name }: end `),\r\n            content: new Elem(),\r\n            parent\r\n          },\r\n          watchersToRemove,\r\n          evaluate: (expression, onChange, instance, forDElements, forDItem, forDEach) => {\r\n            if (!expressionRegExp.test(expression)) {\r\n              return expression || true;\r\n            }\r\n\r\n            forDElements = !!forDElements;\r\n            forDItem = !!forDItem;\r\n            expression = expression.replace(/^\\{|\\}$/g, '');\r\n\r\n            const store = (name === '#d-item' && !forDItem) || forDEach\r\n              ? (forDEach || this).$$.scope\r\n              : this;\r\n\r\n            /* eslint no-new-func: 0 */\r\n            const { watchersToRemove } = instance ? instance.$$ : {};\r\n            const func = new Function(\r\n              '',\r\n              'with(document.DwayneStore){$$.expr=eval(\"$$.expr=\"+$$.expr);return $$.expr}'\r\n            );\r\n\r\n            return evaluate.call(this);\r\n\r\n            function evaluate() {\r\n              let result;\r\n\r\n              if (onChange) {\r\n                evalMode = true;\r\n                getting = new Arr([]);\r\n              }\r\n\r\n              store.$$.expr = expression;\r\n              document.DwayneStore = store;\r\n\r\n              try {\r\n                result = func();\r\n              } catch (err) {\r\n                if (onEvalError) {\r\n                  onEvalError(err);\r\n                }\r\n              }\r\n\r\n              if (onChange) {\r\n                const localWatchers = new Arr([]);\r\n\r\n                getting.forEach((watchers) => {\r\n                  const watcher = () => {\r\n                    const newResult = evaluate.call(this);\r\n\r\n                    if (newResult !== result) {\r\n                      onChange(newResult, result);\r\n                    }\r\n                  };\r\n                  const watcherBlock = {\r\n                    forDElements,\r\n                    watcher,\r\n                    watchers\r\n                  };\r\n\r\n                  watcher.onRemove = () => {\r\n                    localWatchers.forEach((watcherBlock) => {\r\n                      const {\r\n                        watcher,\r\n                        watchers\r\n                      } = watcherBlock;\r\n                      const index1 = watchersToRemove.indexOf(watcherBlock);\r\n                      const index2 = watchers.indexOf(watcher);\r\n\r\n                      if (index1 !== -1) {\r\n                        watchersToRemove.splice(index1, 1);\r\n                      }\r\n\r\n                      if (index2 !== -1) {\r\n                        watchers.splice(index2, 1);\r\n                      }\r\n                    });\r\n                  };\r\n\r\n                  localWatchers.push(watcherBlock);\r\n                  watchersToRemove.push(watcherBlock);\r\n                  watchers.push(watcher);\r\n                });\r\n\r\n                evalMode = false;\r\n                getting = new Arr([]);\r\n              }\r\n\r\n              store.$$.expr = null;\r\n              document.DwayneStore = null;\r\n\r\n              return result;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    const args = new Super(originalArgs).map((value, arg) => {\r\n      if (name === 'd-each' && (\r\n        arg === 'item'\r\n        || arg === 'index'\r\n        || arg === 'uid'\r\n      )) {\r\n        return value;\r\n      }\r\n\r\n      const forDElements = name === 'd-elements' && arg === 'value';\r\n\r\n      return parentScope.$$.evaluate(value, (value) => {\r\n        this.args[arg] = value;\r\n      }, this, forDElements, forDElements && parentBlock.$$.name === '#d-item');\r\n    }).$;\r\n\r\n    this.args = args;\r\n    this.children = children || new Arr([]);\r\n    this.global = Object.create(\r\n      parentScope\r\n        ? Object.create(parentScope.global)\r\n        : null\r\n    );\r\n\r\n    this.$$.elems.start.$[0].DwayneBlock = this;\r\n    this.$$.elems.end.$[0].DwayneBlock = this;\r\n\r\n    if (parentBlock) {\r\n      parentBlock.$$.children.push(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method Block#afterConstruct\r\n   * @public\r\n   * @description Is called after block construction (including all scopes)\r\n   * but before rendering the block and its children.\r\n   */\r\n  afterConstruct() {}\r\n\r\n  /**\r\n   * @method Block#afterRender\r\n   * @public\r\n   * @description Is called after block has been rendered.\r\n   */\r\n  afterRender() {}\r\n\r\n  /**\r\n   * @method Block#afterRender\r\n   * @public\r\n   * @description Is called before the block removal.\r\n   */\r\n  beforeRemove() {}\r\n\r\n  evaluateAndWatch(expression, callback) {\r\n    return this.$$.parent.$$.evaluate(expression, callback, this);\r\n  }\r\n\r\n  evaluateOnce(expression) {\r\n    return this.$$.parent.$$.evaluate(expression);\r\n  }\r\n\r\n  /**\r\n   * @method Block#remove\r\n   * @public\r\n   * @description Method fot forcing the block to be removed. Calls\r\n   * remove method for all of its child blocks and calls beforeRemove function.\r\n   */\r\n  remove(isParentSignal) {\r\n    const {\r\n      parentBlock,\r\n      children,\r\n      mixins,\r\n      elems: {\r\n        start,\r\n        content,\r\n        end\r\n      },\r\n      watchersToRemove\r\n    } = this.$$;\r\n\r\n    removeWatchers(watchersToRemove);\r\n\r\n    children.forEach((child) => {\r\n      child.remove(true);\r\n    });\r\n\r\n    mixins.forEach((mixin) => {\r\n      mixin.remove(true);\r\n    });\r\n\r\n    try {\r\n      this.beforeRemove();\r\n    } catch (err) {\r\n      console.error('Uncaught error in beforeRemove:', err);\r\n    }\r\n\r\n    if (!isParentSignal && parentBlock) {\r\n      const index = parentBlock.$$.children.indexOf(this);\r\n\r\n      if (index !== -1) {\r\n        parentBlock.$$.children.splice(index, 1);\r\n      }\r\n    }\r\n\r\n    new Elem([\r\n      start,\r\n      content,\r\n      end\r\n    ]).remove();\r\n  }\r\n\r\n  /**\r\n   * @method Block#watch\r\n   * @public\r\n   * @param {...String} [args] - Vars to watch (args, global or local).\r\n   * @param {Watcher} watcher - Called when watched vars are changed.\r\n   * @description Method for watching for vars. If no vars passed in arguments\r\n   * all vars are to be watched. Otherwise specified vars will be watched.\r\n   * Watchers should not be put inside the constructor. It is considered best\r\n   * practice to do it inside the {@link Block#afterConstruct} method.\r\n   * Note that these expressions (vars, i.e. \"args.arg\") are not to be\r\n   * evaluated so you cannot put there things like \"a[b]\" or any js code,\r\n   * only expressions like \"a\", \"b\", \"args.a\", \"args.b\" and \"global.a\", \"global.b\".\r\n   *\r\n   * @example\r\n   * class MyBlock extends Block {\r\n   *   static template = '<div />';\r\n   *\r\n   *   afterConstruct() {\r\n   *     this.watch('a', () => {});\r\n   *     this.watch('args.a', 'global.r', () => {});\r\n   *     this.watch(() => {});\r\n   *   }\r\n   * }\r\n   */\r\n  watch() {\r\n    const watcher = arguments[arguments.length - 1];\r\n\r\n    if (!isFunction(watcher)) {\r\n      return;\r\n    }\r\n\r\n    if (arguments.length === 1) {\r\n      for (const global in this.$$.global) {\r\n        /* eslint guard-for-in: 0 */\r\n        this.$$.global[global].watchers.perm.push(watcher);\r\n      }\r\n\r\n      iterate(this.$$.args, ({ watchers }) => {\r\n        watchers.perm.push(watcher);\r\n      });\r\n\r\n      return iterate(this.$$.locals, ({ watchers }) => {\r\n        watchers.perm.push(watcher);\r\n      });\r\n    }\r\n\r\n    iterate(arguments, (variable) => {\r\n      if (variable === watcher) {\r\n        return;\r\n      }\r\n\r\n      variable = `${ variable }`;\r\n\r\n      if (/^args\\./.test(variable)) {\r\n        variable = variable.replace(/^args\\./, '');\r\n\r\n        if (!this.$$.args[variable]) {\r\n          return;\r\n        }\r\n\r\n        this.$$.args[variable].watchers.perm.push(watcher);\r\n\r\n        return;\r\n      }\r\n\r\n      if (/^global\\./.test(variable)) {\r\n        variable = variable.replace(/^global\\./, '');\r\n\r\n        if (!this.$$.global[variable]) {\r\n          return;\r\n        }\r\n\r\n        this.$$.global[variable].watchers.perm.push(watcher);\r\n\r\n        return;\r\n      }\r\n\r\n      if (!this.$$.locals[variable]) {\r\n        return;\r\n      }\r\n\r\n      this.$$.locals[variable].watchers.perm.push(watcher);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Block#watchArgs\r\n   * @public\r\n   * @param {...String} [args] - Args to watch.\r\n   * @param {Watcher} watcher - Called when watched args are changed.\r\n   * @description Method for watching for args. If no args passed in arguments\r\n   * all args are to be watched. Otherwise specified args will be watched.\r\n   * Watchers should not be put inside the constructor. It is considered best\r\n   * practice to do it inside the {@link Block#afterConstruct} method.\r\n   *\r\n   * @example\r\n   * class MyBlock extends Block {\r\n   *   static template = '<div />';\r\n   *\r\n   *   afterConstruct() {\r\n   *     this.watchArgs('a', () => {});\r\n   *     this.watchArgs('a', 'b', () => {});\r\n   *     this.watchArgs(() => {});\r\n   *   }\r\n   * }\r\n   */\r\n  watchArgs() {\r\n    const watcher = arguments[arguments.length - 1];\r\n\r\n    if (!isFunction(watcher)) {\r\n      return;\r\n    }\r\n\r\n    if (arguments.length === 1) {\r\n      return iterate(this.$$.args, ({ watchers }) => {\r\n        watchers.perm.push(watcher);\r\n      });\r\n    }\r\n\r\n    iterate(arguments, (arg) => {\r\n      if (arg === watcher) {\r\n        return;\r\n      }\r\n\r\n      if (!this.$$.args[arg]) {\r\n        return;\r\n      }\r\n\r\n      this.$$.args[arg].watchers.perm.push(watcher);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Block#watchGlobal\r\n   * @public\r\n   * @param {...String} [globals] - Globals to watch.\r\n   * @param {Watcher} watcher - Called when watched globals are changed.\r\n   * @description Method for watching for globals. If no globals passed in arguments\r\n   * all globals are to be watched. Otherwise specified globals will be watched.\r\n   * Watchers should not be put inside the constructor. It is considered best\r\n   * practice to do it inside the {@link Block#afterConstruct} method.\r\n   *\r\n   * @example\r\n   * class MyBlock extends Block {\r\n   *   static template = '<div />';\r\n   *\r\n   *   afterConstruct() {\r\n   *     this.watchGlobal('a', () => {});\r\n   *     this.watchGlobal('a', 'b', () => {});\r\n   *     this.watchGlobal(() => {});\r\n   *   }\r\n   * }\r\n   */\r\n  watchGlobals() {\r\n    const watcher = arguments[arguments.length - 1];\r\n\r\n    if (!isFunction(watcher)) {\r\n      return;\r\n    }\r\n\r\n    if (arguments.length === 1) {\r\n      for (const global in this.$$.global) {\r\n        /* eslint guard-for-in: 0 */\r\n        this.$$.global[global].watchers.perm.push(watcher);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    iterate(arguments, (global) => {\r\n      if (global === watcher) {\r\n        return;\r\n      }\r\n\r\n      if (!this.$$.global[global]) {\r\n        return;\r\n      }\r\n\r\n      this.$$.global[global].watchers.perm.push(watcher);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Block#watchLocals\r\n   * @public\r\n   * @param {...String} [locals] - Locals to watch.\r\n   * @param {Watcher} watcher - Called when watched locals are changed.\r\n   * @description Method for watching for locals. If no locals passed in arguments\r\n   * all locals are to be watched. Otherwise specified locals will be watched.\r\n   * Watchers should not be put inside the constructor. It is considered best\r\n   * practice to do it inside the {@link Block#afterConstruct} method.\r\n   *\r\n   * @example\r\n   * class MyBlock extends Block {\r\n   *   static template = '<div />';\r\n   *\r\n   *   afterConstruct() {\r\n   *     this.watchLocals('a', () => {});\r\n   *     this.watchLocals('a', 'b', () => {});\r\n   *     this.watchLocals(() => {});\r\n   *   }\r\n   * }\r\n   */\r\n  watchLocals() {\r\n    const watcher = arguments[arguments.length - 1];\r\n\r\n    if (!isFunction(watcher)) {\r\n      return;\r\n    }\r\n\r\n    if (arguments.length === 1) {\r\n      return iterate(this.$$.locals, ({ watchers }) => {\r\n        watchers.perm.push(watcher);\r\n      });\r\n    }\r\n\r\n    iterate(arguments, (local) => {\r\n      if (local === watcher) {\r\n        return;\r\n      }\r\n\r\n      if (!this.$$.locals[local]) {\r\n        return;\r\n      }\r\n\r\n      this.$$.locals[local].watchers.perm.push(watcher);\r\n    });\r\n  }\r\n}\r\n\r\nregisterBuiltIns(Blocks, Block);\r\n\r\nclass Mixin {\r\n  static evaluate = true;\r\n\r\n  constructor(opts) {\r\n    const {\r\n      value,\r\n      elem,\r\n      match,\r\n      parentBlock,\r\n      parentScope\r\n    } = opts;\r\n\r\n    Object.defineProperties(this, {\r\n      $$: {\r\n        value: {\r\n          _value: value,\r\n          parent: parentScope,\r\n          parentBlock,\r\n          watchersToRemove: new Arr([])\r\n        }\r\n      }\r\n    });\r\n\r\n    this.match = new Arr(match).slice(1).$;\r\n    this.elem = elem;\r\n\r\n    if (new Super(this).proto().$.constructor.evaluate) {\r\n      this.value = this.evaluateAndWatch((newValue, oldValue) => {\r\n        this.value = newValue;\r\n\r\n        try {\r\n          this.afterUpdate(newValue, oldValue);\r\n        } catch (err) {\r\n          console.error(`Uncaught error in ${ name }#onUpdate:`, err);\r\n        }\r\n      });\r\n\r\n      this.afterUpdate(this.value);\r\n    }\r\n\r\n    if (parentBlock) {\r\n      parentBlock.$$.mixins.push(this);\r\n    }\r\n  }\r\n\r\n  afterUpdate() {}\r\n\r\n  beforeRemove() {}\r\n\r\n  evaluateAndWatch(callback) {\r\n    const {\r\n      _value,\r\n      parent\r\n    } = this.$$;\r\n\r\n    return parent.$$.evaluate(_value, callback, this);\r\n  }\r\n\r\n  evaluateOnce() {\r\n    const {\r\n      _value,\r\n      parent\r\n    } = this.$$;\r\n\r\n    return parent.$$.evaluate(_value);\r\n  }\r\n\r\n  /**\r\n   * @method Mixin#remove\r\n   * @public\r\n   * @description Method fot forcing the mixin to be removed.\r\n   */\r\n  remove(isParentSignal) {\r\n    const {\r\n      parentBlock,\r\n      watchersToRemove\r\n    } = this.$$;\r\n\r\n    removeWatchers(watchersToRemove);\r\n\r\n    try {\r\n      this.beforeRemove();\r\n    } catch (err) {\r\n      console.error('Uncaught error in beforeRemove:', err);\r\n    }\r\n\r\n    if (!isParentSignal && parentBlock) {\r\n      const index = parentBlock.$$.mixins.indexOf(this);\r\n\r\n      if (index !== -1) {\r\n        parentBlock.$$.mixins.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nregisterBuiltIns(Mixins, Mixin);\r\n\r\nfunction initApp() {\r\n  const root = find('d-root').first();\r\n\r\n  if (!root.length) {\r\n    throw new Error('No d-root element is found! (initApp)');\r\n  }\r\n\r\n  registerBlocks(Block, blocks);\r\n\r\n  iterate(Mixin, (Mixin, name) => {\r\n    if (name === 'evaluate') {\r\n      return;\r\n    }\r\n\r\n    if (!isFunction(Mixin)) {\r\n      console.warn(`The \"${ name }\" mixin is not a function and will not be registered (initApp)`);\r\n\r\n      return;\r\n    }\r\n\r\n    if (!attrName.test(name)) {\r\n      console.warn(`Name \"${ name }\" is not allowed for mixins so the mixin will not be registered (initApp)`);\r\n\r\n      return;\r\n    }\r\n\r\n    if (!isInstanceOfMixin(Mixin)) {\r\n      console.warn(`The \"${ name }\" mixin does not extend Mixin and will not be registered (initApp)`);\r\n\r\n      return;\r\n    }\r\n\r\n    mixins[name] = Mixin;\r\n\r\n    defineProperties(Mixin, {\r\n      _match: new RegExp(`^${ name }(?:-([\\\\s\\\\S]+))?$`)\r\n    });\r\n  });\r\n\r\n  const block = root.attr('block');\r\n\r\n  if (!blocks[block]) {\r\n    throw new Error(`No \"${ block }\" block is registered! (initApp)`);\r\n  }\r\n\r\n  const replacement = doc.createComment(' d-root: start ');\r\n  const parent = root.parent();\r\n\r\n  replacement.add(doc.createComment(' d-root: end '));\r\n\r\n  root.replace(replacement);\r\n\r\n  createBlock({\r\n    node: {\r\n      name: block,\r\n      attrs: {},\r\n      children: new Arr([])\r\n    },\r\n    after: replacement.first(),\r\n    parent\r\n  });\r\n}\r\n\r\nfunction registerBlocks(Block, blocks) {\r\n  iterate(Block, (Block, name) => {\r\n    if (\r\n      name === 'collapseWhiteSpace'\r\n      || name === 'defaultArgs'\r\n      || name === 'template'\r\n      || name === 'wrap'\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (!isFunction(Block)) {\r\n      console.warn(`The \"${ name }\" block is not a function and will not be registered (initApp)`);\r\n\r\n      return;\r\n    }\r\n\r\n    if (!tagName.test(name) && name !== '#d-item') {\r\n      console.warn(`Name \"${ name }\" is not allowed for blocks so the block will not be registered (initApp)`);\r\n\r\n      return;\r\n    }\r\n\r\n    if (!isInstanceOfBlock(Block)) {\r\n      console.warn(`The \"${ name }\" block does not extend Block and will not be registered (initApp)`);\r\n\r\n      return;\r\n    }\r\n\r\n    const children = Object.create(blocks);\r\n\r\n    blocks[name] = {\r\n      block: Block,\r\n      html: deepCloneChildren(\r\n        markupToJSON(\r\n          `${ Block.template || '' }`,\r\n          Block.collapseWhiteSpace\r\n        )\r\n      ),\r\n      children\r\n    };\r\n\r\n    registerBlocks(Block, children);\r\n  });\r\n}\r\n\r\nfunction registerBuiltIns(set, proto) {\r\n  iterate(set, (register) => {\r\n    const {\r\n      name,\r\n      value\r\n    } = register(proto, createBlock);\r\n\r\n    Object.defineProperty(proto, name, {\r\n      value,\r\n      enumerable: true\r\n    });\r\n  });\r\n}\r\n\r\nfunction createBlock({ node, after, parent, parentBlock, parentScope }) {\r\n  parentScope = (node && node.block) || parentScope;\r\n\r\n  const name = (node && node.name) || 'UnknownBlock';\r\n  const args = (node && node.attrs) || {};\r\n  const children = (node && node.children) || new Arr([]);\r\n  const elem = parent.prop('namespaceURI') === svgNS\r\n    ? doc.svg()\r\n    : new Elem(doc.template().$[0].content);\r\n  const localBlocks = parentScope ? parentScope.$$.Block.children : blocks;\r\n  let constructor = node && node.name && localBlocks[node.name] ? localBlocks[node.name].block : null;\r\n  let dBlockMatch;\r\n\r\n  if (!children.length && (dBlockMatch = name.match(/^d-block-([\\s\\S]+)$/) || name === 'd-block')) {\r\n    constructor = blocks['d-block'].block;\r\n\r\n    args.name = dBlockMatch ? dBlockMatch[1] : null;\r\n  }\r\n\r\n  if (!constructor) {\r\n    const {\r\n      value,\r\n      children\r\n    } = node;\r\n\r\n    if (name === '#text' && expressionRegExp.test(value)) {\r\n      return createBlock({\r\n        node: {\r\n          name: 'd-text',\r\n          attrs: { value },\r\n          children: new Arr([]),\r\n          block: parentScope\r\n        },\r\n        after,\r\n        parent,\r\n        parentBlock,\r\n        parentScope\r\n      });\r\n    }\r\n\r\n    const element = elem.create(name);\r\n    const currentMixins = new Arr([]);\r\n\r\n    const attrs = new Super(args).object((object, value, attr) => {\r\n      const match = iterate(mixins, (Mixin, name) => {\r\n        const match = attr.match(Mixin._match);\r\n\r\n        if (match) {\r\n          return {\r\n            match,\r\n            name\r\n          };\r\n        }\r\n      });\r\n\r\n      if (match) {\r\n        currentMixins.push({\r\n          name: match.name,\r\n          match: match.match,\r\n          value,\r\n          elem: element,\r\n          parentBlock,\r\n          parentScope\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      object[attr] = parentScope.$$.evaluate(value, (value) => {\r\n        element.attr(attr, value);\r\n      }, parentBlock);\r\n    }).$;\r\n\r\n    if (!isNil(value)) {\r\n      element.text(value);\r\n    }\r\n\r\n    if (attrs) {\r\n      element.attr(attrs);\r\n    }\r\n\r\n    if (after.length) {\r\n      element.insertAfter(after);\r\n    } else {\r\n      element.into(parent);\r\n    }\r\n\r\n    after = new Elem();\r\n\r\n    if (children) {\r\n      transformDIfChildren(children).forEach((child) => {\r\n        const block = createBlock({\r\n          node: child,\r\n          after,\r\n          parent: element,\r\n          parentBlock,\r\n          parentScope\r\n        });\r\n\r\n        if (block instanceof Block) {\r\n          after = block.$$.elems.end;\r\n        } else {\r\n          after = block;\r\n        }\r\n      });\r\n    }\r\n\r\n    currentMixins.forEach((opts) => {\r\n      createMixin(opts);\r\n    });\r\n\r\n    return element;\r\n  }\r\n\r\n  const block = node && node.name ? localBlocks[node.name] : null;\r\n  const blockInstance = new constructor({\r\n    name,\r\n    args,\r\n    children,\r\n    block,\r\n    parent,\r\n    parentBlock,\r\n    parentScope\r\n  });\r\n\r\n  Object.defineProperties(blockInstance, {\r\n    args: {\r\n      value: blockInstance.args\r\n    },\r\n    global: {\r\n      value: blockInstance.global\r\n    }\r\n  });\r\n\r\n  let html = name === 'd-elements'\r\n    ? new Arr(blockInstance.args.value || [])\r\n    : deepCloneChildren(block.html, blockInstance);\r\n\r\n  if (name === 'd-elements' && parentBlock.$$.name === '#d-item') {\r\n    html = deepCloneChildren(html, parentBlock);\r\n  }\r\n\r\n  const {\r\n    $$,\r\n    args: Args,\r\n    global,\r\n    ...locals\r\n  } = blockInstance;\r\n  const eventualArgs = {\r\n    ...constructor.defaultArgs,\r\n    ...Args\r\n  };\r\n\r\n  delete locals.$;\r\n  delete locals.$$;\r\n\r\n  $$.args = constructPrivateScope(eventualArgs);\r\n  $$.locals = constructPrivateScope(locals);\r\n  $$.global = constructPrivateScope(global, 'global', parentScope);\r\n\r\n  if (name === '#d-item') {\r\n    const scopeValues = {\r\n      [node.itemName]: node.item,\r\n      [node.indexName]: node.index\r\n    };\r\n    let parent = blockInstance;\r\n    let scope = parentScope;\r\n    let DItemFound;\r\n\r\n    while (!DItemFound && (parent = parent.$$.parentBlock)) {\r\n      DItemFound = parent.$$.name === '#d-item';\r\n    }\r\n\r\n    if (DItemFound) {\r\n      scope = parent.$$.scope;\r\n    }\r\n\r\n    $$.Block = parentScope.$$.Block;\r\n    $$.privateScope = constructPrivateScope(scopeValues);\r\n    constructPublicScope($$.scope = Object.create(scope), scopeValues, $$.privateScope);\r\n  }\r\n\r\n  if (name === 'd-each') {\r\n    $$.scope = Object.create(parentScope);\r\n  }\r\n\r\n  constructPublicScope(Args, eventualArgs, $$.args);\r\n  constructPublicScope(global, global, $$.global);\r\n  constructPublicScope(blockInstance, locals, $$.locals);\r\n\r\n  try {\r\n    blockInstance.afterConstruct();\r\n  } catch (err) {\r\n    console.error(`Uncaught error in ${ name }#afterConstruct:`, err);\r\n  }\r\n\r\n  const elems = new Elem([\r\n    $$.elems.start,\r\n    $$.elems.end\r\n  ]);\r\n\r\n  if (after.length) {\r\n    elems.insertAfter(after);\r\n  } else {\r\n    elems.into(parent);\r\n  }\r\n\r\n  after = $$.elems.start;\r\n\r\n  // console.log(blockInstance);\r\n\r\n  transformDIfChildren(html).forEach((child) => {\r\n    const block = createBlock({\r\n      node: child,\r\n      after,\r\n      parent,\r\n      parentBlock: blockInstance,\r\n      parentScope\r\n    });\r\n\r\n    if (block instanceof Block) {\r\n      const { elems } = block.$$;\r\n\r\n      after = elems.end;\r\n\r\n      $$.elems.content.add(elems.start, elems.content, elems.end);\r\n    } else {\r\n      after = block;\r\n\r\n      $$.elems.content.add(block);\r\n    }\r\n  });\r\n\r\n  try {\r\n    blockInstance.afterRender();\r\n  } catch (err) {\r\n    console.error(`Uncaught error in ${ name }#afterRender:`, err);\r\n  }\r\n\r\n  return blockInstance;\r\n}\r\n\r\nfunction createMixin({ name, value, match, elem, parentBlock, parentScope }) {\r\n  const Mixin = mixins[name];\r\n\r\n  new Mixin({\r\n    value,\r\n    match,\r\n    elem,\r\n    parentBlock,\r\n    parentScope\r\n  });\r\n}\r\n\r\nfunction deepCloneChildren(children, block) {\r\n  return new Arr(children || []).map((child) => {\r\n    const {\r\n      name,\r\n      attrs,\r\n      value,\r\n      children\r\n    } = child;\r\n    const newChild = {\r\n      name,\r\n      value,\r\n      attrs: { ...attrs }\r\n    };\r\n\r\n    if (block) {\r\n      newChild.block = block;\r\n    }\r\n\r\n    if (children) {\r\n      newChild.children = deepCloneChildren(children, block);\r\n    }\r\n\r\n    return newChild;\r\n  });\r\n}\r\n\r\nfunction transformDIfChildren(children) {\r\n  return new Arr(children || [])\r\n    .concat({})\r\n    .object((object, child) => {\r\n      const { name } = child;\r\n      const {\r\n        html,\r\n        ifElse\r\n      } = object;\r\n\r\n      if (name !== 'd-else-if' && name !== 'd-else') {\r\n        if (ifElse) {\r\n          html.push({\r\n            name: 'd-if',\r\n            block: ifElse.$[0].block,\r\n            children: ifElse\r\n          });\r\n\r\n          object.ifElse = null;\r\n        }\r\n\r\n        if (name === 'd-if') {\r\n          object.ifElse = new Arr([child]);\r\n        } else if (!isUndefined(name)) {\r\n          html.push(child);\r\n        }\r\n      } else {\r\n        (ifElse || html).push(child);\r\n\r\n        if (name === 'd-else' && ifElse) {\r\n          html.push({\r\n            name: 'd-if',\r\n            block: ifElse.$[0].block,\r\n            children: ifElse\r\n          });\r\n\r\n          object.ifElse = null;\r\n        }\r\n      }\r\n    }, {\r\n      html: new Arr([]),\r\n      ifElse: null\r\n    }).$.html;\r\n}\r\n\r\nfunction isInstanceOfBlock(block) {\r\n  return isPrototypeOf.call(Block, block) && isPrototypeOf.call(Block.prototype, block.prototype);\r\n}\r\n\r\nfunction isInstanceOfMixin(mixin) {\r\n  return isPrototypeOf.call(Mixin, mixin) && isPrototypeOf.call(Mixin.prototype, mixin.prototype);\r\n}\r\n\r\nfunction removeWatchers(watchersToRemove) {\r\n  watchersToRemove.forEach(({ watcher, watchers }) => {\r\n    const index = watchers.indexOf(watcher);\r\n\r\n    if (index !== -1) {\r\n      watchers.splice(index, 1);\r\n    }\r\n  });\r\n}\r\n\r\nfunction constructPrivateScope(object, type, parentScope) {\r\n  let scope = {};\r\n\r\n  if (type === 'global') {\r\n    scope = Object.create(\r\n      parentScope\r\n        ? parentScope.$$.global\r\n        : null\r\n    );\r\n  }\r\n\r\n  return new Super(object).object((scope, value, key) => {\r\n    scope[key] = {\r\n      value,\r\n      watchers: {\r\n        temp: new Arr([]),\r\n        perm: new Arr([])\r\n      }\r\n    };\r\n  }, scope).$;\r\n}\r\n\r\nfunction constructPublicScope(scope, scopeValues, privateScope) {\r\n  new Super(scope).define(new Super(scopeValues).map((value, key) => {\r\n    const scope = privateScope[key];\r\n\r\n    return {\r\n      get() {\r\n        if (evalMode) {\r\n          if (getting.indexOf(scope.watchers.temp) === -1) {\r\n            getting.push(scope.watchers.temp);\r\n          }\r\n        }\r\n\r\n        return scope.value;\r\n      },\r\n      set(value) {\r\n        if (value === scope.value) {\r\n          return;\r\n        }\r\n\r\n        if (!changed) {\r\n          changed = [];\r\n        }\r\n\r\n        const oldTempWatchers = scope.watchers.temp.slice();\r\n        const oldValue = scope.value;\r\n\r\n        scope.watchers.temp = new Arr([]);\r\n        scope.value = value;\r\n\r\n        oldTempWatchers.forEach((watcher) => {\r\n          watcher.onRemove();\r\n          watcher();\r\n        });\r\n        changed.push({\r\n          scope,\r\n          oldValue,\r\n          value\r\n        });\r\n\r\n        setTimeout(() => {\r\n          if (!changed) {\r\n            return;\r\n          }\r\n\r\n          const was = new Arr([]);\r\n\r\n          while (changed.length) {\r\n            for (let i = changed.length - 1; i >= 0; i--) {\r\n              const {\r\n                scope,\r\n                value,\r\n                oldValue\r\n              } = changed[i];\r\n\r\n              scope.watchers.perm.forEach((watcher) => {\r\n                if (was.indexOf(watcher) === -1) {\r\n                  watcher(value, oldValue);\r\n                  was.push(watcher);\r\n                }\r\n              });\r\n\r\n              changed.splice(i, 1);\r\n            }\r\n          }\r\n\r\n          changed = null;\r\n        }, 0);\r\n      }\r\n    };\r\n  }).$);\r\n}\r\n\r\nexport { Block, Mixin, initApp };\r\n","/**\r\n * @module constants/formats\r\n * @private\r\n * @description Exports different types of formatting for {@link Date#format}.\r\n */\r\n\r\nimport { Super } from '../Super';\r\nimport { Str } from '../Str';\r\n\r\nconst zero = new Str('0');\r\nconst daysOfTheWeekNames = [\r\n  'Sunday',\r\n  'Monday',\r\n  'Tuesday',\r\n  'Wednesday',\r\n  'Thursday',\r\n  'Friday',\r\n  'Saturday'\r\n];\r\nconst daysOfTheWeekAliases = new Super(daysOfTheWeekNames).map((value) => value.slice(0, 3)).$;\r\nconst monthsNames = [\r\n  'January',\r\n  'February',\r\n  'March',\r\n  'April',\r\n  'May',\r\n  'June',\r\n  'Jule',\r\n  'August',\r\n  'September',\r\n  'October',\r\n  'November',\r\n  'December'\r\n];\r\nconst monthsAliases = new Super(monthsNames).map((value) => value.slice(0, 3)).$;\r\n\r\n/**\r\n * @callback module:constants/formats~matchCallback\r\n * @param {Dat} date - D-wrap of a date to apply format to.\r\n * @param {String} string - Matched applied expression.\r\n */\r\n\r\n/**\r\n * @typedef {Object} module:constants/formats~formatExpr\r\n * @property {String} format - Matched format.\r\n * @property {module:constants/formats~matchCallback} match - Callback if there was a match.\r\n */\r\n\r\n/**\r\n * @type {module:constants/formats~formatExpr[]}\r\n * @description Array of different formats.\r\n */\r\nexport default [\r\n  {\r\n    format: 'ccc',\r\n    match: (date, utc) => round(date[utc]('c'), 3)\r\n  },\r\n  {\r\n    format: 'c',\r\n    match: (date, utc) => date[utc]('c')\r\n  },\r\n  {\r\n    format: 'ss',\r\n    match: (date, utc) => round(date[utc]('s'), 2)\r\n  },\r\n  {\r\n    format: 's',\r\n    match: (date, utc) => date[utc]('s')\r\n  },\r\n  {\r\n    format: 'mm',\r\n    match: (date, utc) => round(date[utc]('m'), 2)\r\n  },\r\n  {\r\n    format: 'm',\r\n    match: (date, utc) => date[utc]('m')\r\n  },\r\n  {\r\n    format: 'hh',\r\n    match: (date, utc) => round(date[utc]('h'), 2)\r\n  },\r\n  {\r\n    format: 'h',\r\n    match: (date, utc) => date[utc]('h')\r\n  },\r\n  {\r\n    format: 'dddd',\r\n    match: (date, utc) => daysOfTheWeekNames[date[utc]('dw')]\r\n  },\r\n  {\r\n    format: 'ddd',\r\n    match: (date, utc) => daysOfTheWeekAliases[date[utc]('dw')]\r\n  },\r\n  {\r\n    format: 'dd',\r\n    match: (date, utc) => round(date[utc]('d'), 2)\r\n  },\r\n  {\r\n    format: 'd',\r\n    match: (date, utc) => date[utc]('d')\r\n  },\r\n  {\r\n    format: 'MMMM',\r\n    match: (date, utc) => monthsNames[date[utc]('M') - 1]\r\n  },\r\n  {\r\n    format: 'MMM',\r\n    match: (date, utc) => monthsAliases[date[utc]('M') - 1]\r\n  },\r\n  {\r\n    format: 'MM',\r\n    match: (date, utc) => round(date[utc]('M'), 2)\r\n  },\r\n  {\r\n    format: 'M',\r\n    match: (date, utc) => date[utc]('M')\r\n  },\r\n  {\r\n    format: 'yyyy',\r\n    match: (date, utc) => round(date[utc]('y'), 4)\r\n  },\r\n  {\r\n    format: 'yy',\r\n    match: (date, utc) => String(date[utc]('y')).slice(-2)\r\n  },\r\n  {\r\n    format: 'y',\r\n    match: (date, utc) => date[utc]('y')\r\n  }\r\n];\r\n\r\n/**\r\n * @function round\r\n * @private\r\n * @param {Number} number - Number to round.\r\n * @param {Number} digits - Number of the digits of the output.\r\n * @returns {String} String with necessary additional starting zeroes.\r\n */\r\nfunction round(number, digits) {\r\n  const string = String(number);\r\n  let zeroes = digits - string.length;\r\n\r\n  zeroes = zeroes < 0 ? 0 : zeroes;\r\n\r\n  return zero.repeat(zeroes).$ + string;\r\n}\r\n","/**\r\n * @module Dat\r\n * @private\r\n * @mixin\r\n * @description Exports Dat class.\r\n */\r\n\r\nimport { Super } from './Super';\r\nimport { Num } from './Num';\r\nimport { Str } from './Str';\r\nimport { switcher } from './Switcher';\r\nimport { constructors } from './constants';\r\nimport formats from './constants/formats';\r\nimport { isDate, iterate, Symbol, defineProperties } from './helpers';\r\n\r\n/**\r\n * @typedef {*} DateLike\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {'c'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} AddPeriod\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {'c'|'s'|'m'|'h'|'d'|'dw'|'M'|'y'} GetPeriod\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {'c'|'s'|'m'|'h'|'d'|'M'|'y'} OfOnePeriod\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {'c'|'s'|'m'|'h'|'d'|'M'|'y'} SetPeriod\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {'ccc'|'c'|'ss'|'s'|'mm'|'m'|'hh'|'h'|'dddd'|'ddd'|'dd'|'d'|'MMMM'|'MMM'|'MM'|'M'|'yyyy'|'yy'|'y'} Format\r\n * @public\r\n */\r\n\r\nconst coeffs = {\r\n  c: 1,\r\n  s: 1000,\r\n  m: 60000,\r\n  h: 3600000,\r\n  d: 86400000,\r\n  w: 604800000,\r\n  M: 2592000000,\r\n  y: 31536000000\r\n};\r\n\r\nconst getSwitcher = switcher({\r\n  c: (date, utc) => date[`${ utc }Milliseconds`](),\r\n  s: (date, utc) => date[`${ utc }Seconds`](),\r\n  m: (date, utc) => date[`${ utc }Minutes`](),\r\n  h: (date, utc) => date[`${ utc }Hours`](),\r\n  d: (date, utc) => date[`${ utc }Date`](),\r\n  dw: (date, utc) => date[`${ utc }Day`](),\r\n  M: (date, utc) => date[`${ utc }Month`]() + 1,\r\n  y: (date, utc) => date[`${ utc }FullYear`]()\r\n}, 'equals', NaN);\r\nconst setSwitcher = switcher({\r\n  c: (date, value, utc) => date[`${ utc }Milliseconds`](value),\r\n  s: (date, value, utc) => date[`${ utc }Seconds`](value),\r\n  m: (date, value, utc) => date[`${ utc }Minutes`](value),\r\n  h: (date, value, utc) => date[`${ utc }Hours`](value),\r\n  d: (date, value, utc) => date[`${ utc }Date`](value),\r\n  M: (date, value, utc) => date[`${ utc }Month`](value - 1),\r\n  y: (date, value, utc) => date[`${ utc }FullYear`](value)\r\n});\r\n\r\n/**\r\n * @class Dat\r\n * @extends Super\r\n * @public\r\n * @param {Date} [date = new Date()] - A date to wrap.\r\n * @returns {Dat} Instance of Dat.\r\n * @description Wrap of a date.\r\n *\r\n * @example\r\n * const date = new Dat(new Date());\r\n */\r\nclass Dat extends Super {\r\n  constructor(date = new Date()) {\r\n    super(date);\r\n\r\n    /**\r\n     * @member Dat#$\r\n     * @type {Date}\r\n     * @public\r\n     * @description Original date.\r\n     */\r\n  }\r\n\r\n  /**\r\n   * @method Dat#add\r\n   * @public\r\n   * @param {AddPeriod|Object.<AddPeriod, Number>} what - What to add.\r\n   * @param {Number} [number] - Number of what to add if the first argument is a period string.\r\n   * @returns {Dat} Returns this.\r\n   * @description Method for adding amounts of time to the date. Returns new instance of Dat.\r\n   *\r\n   * @example\r\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).add('c', 2).toISOString();         // '2000-01-01T00:00:00.001Z'\r\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).add({ c: 2, d: 5 }).toISOString(); // '2000-01-06T00:00:00.001Z'\r\n   */\r\n  add(what, number) {\r\n    if (arguments.length >= 2) {\r\n      what = { [what]: number };\r\n    }\r\n\r\n    return this.time(this.time() + new Super(what).sum((value, what) => coeffs[what] * value));\r\n  }\r\n\r\n  /**\r\n   * @method Dat#expires\r\n   * @public\r\n   * @param {*} [value = this] - Value to resolve after the date expires.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @description Method for defining when the date expires.\r\n   *\r\n   * @example\r\n   * new Dat().add('c', 500).expires('Expired').then((value) => {\r\n   *   // After 500 milliseconds\r\n   *   console.log(value); // 'Expired'\r\n   * });\r\n   */\r\n  expires(value) {\r\n    if (!arguments.length) {\r\n      value = this;\r\n    }\r\n\r\n    return new Num(this.$ - now()).timeout(value);\r\n  }\r\n\r\n  /**\r\n   * @method Dat#format\r\n   * @public\r\n   * @param {String} string - Template for the output.\r\n   * @param {String} [prefix = ''] - If needed [all special strings]{@link Format}\r\n   * are treated as they should be prefix with prefix.\r\n   * @returns {String} Formatted string.\r\n   * @description Method for creating formatted output based on a string.\r\n   *\r\n   * @example\r\n   * new Dat('1999-12-31T23:59:59.999Z').format('Seconds: $ss, milliseconds: $ccc.', '$');\r\n   * // 'Seconds: 59, milliseconds: 999.'\r\n   */\r\n  format(string, prefix = '') {\r\n    string = new Str(new Super(string).$);\r\n    prefix = String(new Super(prefix).$);\r\n\r\n    iterate(formats, (format) => {\r\n      string = string.replaceString(prefix + format.format, format.match(this, 'get'));\r\n    });\r\n\r\n    return string.$;\r\n  }\r\n\r\n  /**\r\n   * @method Dat#formatUTC\r\n   * @public\r\n   * @param {String} string - See {@link Dat#format}.\r\n   * @param {String} [prefix = ''] - See {@link Dat#format}.\r\n   * @returns {String} Formatted string.\r\n   * @description UTC version of {@link Dat#format}.\r\n   *\r\n   * @example\r\n   * new Dat('1999-07-07T03:09:09.099Z').formatUTC(\r\n   *   `\r\n   *     Milliseconds: $ccc|$c.\r\n   *     Seconds:      $ss|$s.\r\n   *     Minutes:      $mm|$m.\r\n   *     Hours:        $hh|$h.\r\n   *     Day:          $dddd|$ddd|$dd|$d.\r\n   *     Month:        $MMMM|$MMM|$MM|$M.\r\n   *     Year:         $yyyy|$yy|$y.\r\n   *   `,\r\n   *   '$'\r\n   * );\r\n   * // Milliseconds: 099|99.\r\n   * // Seconds:      09|9.\r\n   * // Minutes:      09|9.\r\n   * // Hours:        03|3.\r\n   * // Day:          Friday|Fri|07|7.\r\n   * // Month:        July|Jul|07|7.\r\n   * // Year:         1999|99|1999.\r\n   */\r\n  formatUTC(string, prefix = '') {\r\n    string = new Str(new Super(string).$);\r\n    prefix = String(new Super(prefix).$);\r\n\r\n    iterate(formats, (format) => {\r\n      string = string.replaceString(prefix + format.format, format.match(this, 'getUTC'));\r\n    });\r\n\r\n    return string.$;\r\n  }\r\n\r\n  /**\r\n   * @method Dat#get\r\n   * @public\r\n   * @param {GetPeriod} what - What to get.\r\n   * @returns {Number} Number of what to get.\r\n   * @description Method for getting values such as seconds or minutes.\r\n   *\r\n   * @example\r\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).get('s'); // 59\r\n   */\r\n  get(what) {\r\n    return getSwitcher(what, [this.$, 'get']);\r\n  }\r\n\r\n  /**\r\n   * @method Dat#getUTC\r\n   * @public\r\n   * @param {GetPeriod} what - See {@link Dat#get}.\r\n   * @returns {Number} Number of what to get.\r\n   * @description UTC version of {@link Dat#get}.\r\n   *\r\n   * @example\r\n   * const date = new Dat(new Date('1999-12-31T23:59:59.999Z'));\r\n   *\r\n   * date.getUTC('c');  // 999\r\n   * date.getUTC('s');  // 59\r\n   * date.getUTC('m');  // 59\r\n   * date.getUTC('h');  // 23\r\n   * date.getUTC('d');  // 31\r\n   * date.getUTC('dw'); // 5\r\n   * date.getUTC('M');  // 12\r\n   * date.getUTC('y');  // 1999\r\n   */\r\n  getUTC(what) {\r\n    return getSwitcher(what, [this.$, 'getUTC']);\r\n  }\r\n\r\n  /**\r\n   * @method Dat#isAfter\r\n   * @public\r\n   * @param {DateLike} date - Date to be compared to this date.\r\n   * @returns {Boolean} If this date is after the argument one.\r\n   * @description Finds out if this date is after the argument one.\r\n   *\r\n   * @example\r\n   * new Dat(new Date(333)).isAfter(new Date(334)); // false\r\n   * new Dat(new Date(333)).isAfter(new Date(332)); // true\r\n   */\r\n  isAfter(date) {\r\n    date = new Date(new Super(date).$);\r\n\r\n    return date.getTime() < this.$.getTime();\r\n  }\r\n\r\n  /**\r\n   * @method Dat#isBefore\r\n   * @public\r\n   * @param {DateLike} date - Date to be compared to this date.\r\n   * @returns {Boolean} If this date is before the argument one.\r\n   * @description Finds out if this date is before the argument one.\r\n   *\r\n   * @example\r\n   * new Dat(new Date(333)).isBefore(new Date(334)); // true\r\n   * new Dat(new Date(333)).isBefore(new Date(332)); // false\r\n   */\r\n  isBefore(date) {\r\n    date = new Date(new Super(date).$);\r\n\r\n    return date.getTime() > this.$.getTime();\r\n  }\r\n\r\n  /**\r\n   * @method Dat#isBetween\r\n   * @public\r\n   * @param {DateLike} date1 - Start of the range.\r\n   * @param {DateLike} date2 - End of the range.\r\n   * @returns {Boolean} If this date is after date1 and before date2.\r\n   * @description Finds out if this date is after date1 and before date2.\r\n   *\r\n   * @example\r\n   * new Dat(new Date(333)).isBetween(new Date(332), new Date(334)); // true\r\n   * new Dat(new Date(333)).isBetween(new Date(334), new Date(332)); // false\r\n   */\r\n  isBetween(date1, date2) {\r\n    const time = this.$.getTime();\r\n\r\n    date1 = new Date(new Super(date1).$);\r\n    date2 = new Date(new Super(date2).$);\r\n\r\n    return time > date1.getTime() && time < date2.getTime();\r\n  }\r\n\r\n  /**\r\n   * @method Dat#isInvalid\r\n   * @public\r\n   * @returns {Boolean} If the date is invalid.\r\n   * @description Returns if the date is invalid.\r\n   *\r\n   * @example\r\n   * new Dat(new Date('a')).isInvalid(); // true\r\n   * new Dat(new Date(1)).isInvalid();   // false\r\n   */\r\n  isInvalid() {\r\n    return this.$.toString() === 'Invalid Date';\r\n  }\r\n\r\n  /**\r\n   * @method Dat#isPassed\r\n   * @public\r\n   * @returns {Boolean} If the date is passed.\r\n   * @description Returns if the date is passed.\r\n   *\r\n   * @example\r\n   * new Dat(new Date(1)).isPassed(); // true\r\n   */\r\n  isPassed() {\r\n    return this.isBefore(now());\r\n  }\r\n\r\n  /**\r\n   * @method Dat#ofOne\r\n   * @public\r\n   * @param {OfOnePeriod} what - Period to check.\r\n   * @param {DateLike} date - Date to check.\r\n   * @returns {Boolean} If two dates are of one second, minute or something else.\r\n   * @description Returns if two dates are of one second, minute or something else.\r\n   *\r\n   * @example\r\n   * new Dat(new Date('1999-12-31T23:59:59.000Z')).ofOne('s', new Date(1999-12-31T23:59:59.333Z')); // true\r\n   * new Dat(new Date('1999-12-31T23:59:59.000Z')).ofOne('s', new Date(1999-12-31T23:59:58.999Z')); // false\r\n   */\r\n  ofOne(what, date) {\r\n    if (!(what in coeffs) || what === 'w') {\r\n      return false;\r\n    }\r\n\r\n    date = new Dat(new Date(date));\r\n\r\n    let started;\r\n\r\n    return iterate(coeffs, (coeff, w) => {\r\n      if (w === what) {\r\n        started = true;\r\n      }\r\n\r\n      if (!started || w === 'w') {\r\n        return;\r\n      }\r\n\r\n      if (started && this.get(w) !== date.get(w)) {\r\n        return false;\r\n      }\r\n    }) !== false;\r\n  }\r\n\r\n  /**\r\n   * @method Dat#set\r\n   * @public\r\n   * @param {SetPeriod|Object.<SetPeriod, Number>} what - What to add.\r\n   * @param {Number} [number] - Number of what to set if the first argument is a period string.\r\n   * @returns {Dat} Returns this.\r\n   * @description Method for setting values such as seconds or minutes.\r\n   *\r\n   * @example\r\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).set('s', 58).get('s');           // 58\r\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).set({ c: 998, s: 58 }).get('c'); // 998\r\n   */\r\n  set(what, number) {\r\n    const date = this.$;\r\n\r\n    if (arguments.length >= 2) {\r\n      what = { [what]: number };\r\n    }\r\n\r\n    what = new Super(what).$;\r\n\r\n    iterate(what, (value, what) => {\r\n      setSwitcher(what, [date, value, 'set']);\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Dat#setUTC\r\n   * @public\r\n   * @param {SetPeriod|Object.<SetPeriod, Number>} what - See {@link Dat#set}.\r\n   * @param {Number} [number] - See {@link Dat#set}.\r\n   * @returns {Dat} Returns this.\r\n   * @description UTC version of {@link Dat#set}.\r\n   *\r\n   * @example\r\n   * const date = new Dat(new Date('1999-12-31T23:59:59.999Z'));\r\n   *\r\n   * date.setUTC('ccc', 998).getUTC('ccc'); // 998\r\n   * date.setUTC({\r\n   *   s: 58,\r\n   *   m: 58,\r\n   *   h: 22\r\n   * });\r\n   *\r\n   * date.getUTC('s'); // 58\r\n   * date.getUTC('m'); // 58\r\n   * date.getUTC('h'); // 23\r\n   */\r\n  setUTC(what, number) {\r\n    const date = this.$;\r\n\r\n    if (arguments.length >= 2) {\r\n      what = { [what]: number };\r\n    }\r\n\r\n    what = new Super(what).$;\r\n\r\n    iterate(what, (value, what) => {\r\n      setSwitcher(what, [date, value, 'setUTC']);\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Dat#setUTC\r\n   * @public\r\n   * @param {Number} [time] - Time to set.\r\n   * @returns {Dat|Number} - If the time argument is present this is returned otherwise the time is returned.\r\n   * @description Synonym for both\r\n   * [Date#getTime]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime} and\r\n   * [Date#setTime]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime}.\r\n   */\r\n  time(time) {\r\n    const date = this.$;\r\n\r\n    if (arguments.length) {\r\n      date.setTime(time);\r\n    }\r\n\r\n    return date.getTime();\r\n  }\r\n\r\n  toISOString() {\r\n    return this.$.toISOString();\r\n  }\r\n\r\n  toLocaleString() {\r\n    return this.$.toLocaleString();\r\n  }\r\n\r\n  toString() {\r\n    return this.$.toString();\r\n  }\r\n\r\n  valueOf() {\r\n    return this.$.valueOf();\r\n  }\r\n}\r\ndefineProperties(Dat.prototype, {\r\n  [Symbol.toStringTag]: 'Dat'\r\n});\r\n\r\nconstructors[1].push({\r\n  check: isDate,\r\n  cls: Dat\r\n});\r\n\r\n/**\r\n * @function now\r\n * @public\r\n * @returns {Number} Number of milliseconds.\r\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/now\r\n * @description Synonym for\r\n * [Date.now]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/now}.\r\n */\r\nfunction now() {\r\n  return Date.now();\r\n}\r\n\r\n/**\r\n * @function date\r\n * @public\r\n * @param {DateLike} [date = new Date()] - Date-like value that is passed to the Date constructor.\r\n * @returns {Dat} New instance of Dat.\r\n * @description Synonym for new Dat(new Date(date));\r\n */\r\nfunction date(date) {\r\n  if (!arguments.length) {\r\n    return new Dat(new Date(now()));\r\n  }\r\n\r\n  date = new Super(date).$;\r\n\r\n  return new Dat(new Date(date));\r\n}\r\n\r\nexport { Dat, now, date };\r\n","/**\r\n * @module helpers/constructURL\r\n * @private\r\n * @description Exports constructURL method.\r\n */\r\n\r\nimport { Arr } from '../Arr';\r\nimport { Str } from '../Str';\r\nimport { switcher } from '../Switcher';\r\nimport { isArray, isObject, isPlainObject } from './checkTypes';\r\nimport { iterate } from './iterate';\r\n\r\n/**\r\n * @type {RegExp}\r\n * @description Absolute URL pattern.\r\n */\r\nconst absoluteURLRegexp = /^(([a-z][a-z\\d+\\-.]*:)?\\/\\/|data:[a-z]+\\/[a-z]+;base64,)/i;\r\nconst querySwitcher = switcher('call', () => new Arr([]))\r\n  .case(isArray, (prefix, query) => {\r\n    let queryParams = new Arr([]);\r\n\r\n    iterate(query, (value) => {\r\n      if (isPlainObject(value) || isArray(value)) {\r\n        queryParams = queryParams.concat(querySwitcher(value, [`${ prefix }[]`]));\r\n\r\n        return;\r\n      }\r\n\r\n      queryParams.push({\r\n        param: `${ prefix }[]`,\r\n        value\r\n      });\r\n    });\r\n\r\n    return queryParams.$;\r\n  })\r\n  .case(isPlainObject, (prefix, query) => {\r\n    let queryParams = new Arr([]);\r\n\r\n    iterate(query, (value, param) => {\r\n      if (isPlainObject(value) || isArray(value)) {\r\n        queryParams = queryParams.concat(querySwitcher(value, [prefix ? `${ prefix }[${ param }]` : param]));\r\n\r\n        return;\r\n      }\r\n\r\n      queryParams.push({\r\n        param: prefix ? `${ prefix }[${ param }]` : param,\r\n        value: isObject(value) ? JSON.stringify(value) : String(value)\r\n      });\r\n    });\r\n\r\n    return queryParams.$;\r\n  });\r\n\r\n/**\r\n * @function constructURL\r\n * @param {String} baseURL - BaseURL of the output URL.\r\n * @param {String} url - Main part of the output URL.\r\n * @param {Object} params - Params to replace in the url expressions like \":param\".\r\n * @param {Object} query - Object with query params.\r\n * @param {Object} [hash = ''] - URL hash.\r\n * @param {Object} [encodeOptions = {}] - If you need to encode something.\r\n * @param {Object} [encodeOptions.params = true] - If you need to encode params.\r\n * @param {Object} [encodeOptions.query = true] - If you need to encode query params.\r\n * @returns {String} Constructed URL.\r\n * @description Function for constructing URL from the base URL, URL, params and query params.\r\n */\r\nexport default (baseURL, url, params, query, hash = '', encodeOptions = {}) => {\r\n  const {\r\n    params: encodeParams = true,\r\n    query: encodeQuery = true\r\n  } = encodeOptions;\r\n  let URL = isAbsolute(url)\r\n    ? url\r\n    : `${ String(baseURL).replace(/\\/+$/, '') }/${ String(url).replace(/^\\/+/, '') }`;\r\n\r\n  iterate(params, (value, param) => {\r\n    URL = new Str(URL).replaceString(`:${ param }`, encode(value, encodeParams)).$;\r\n  });\r\n\r\n  const queryParams = querySwitcher(query, ['']);\r\n\r\n  if (queryParams.length) {\r\n    URL += (URL.indexOf('?') === -1 ? '?' : '&') + queryParams\r\n      .map(({ param, value }) => `${ encode(param, encodeQuery) }=${ encode(value, encodeQuery) }`)\r\n      .join('&');\r\n  }\r\n\r\n  return `${ URL }${ hash ? `#${ hash }` : '' }`;\r\n};\r\n\r\n/**\r\n * @function isAbsolute\r\n * @param {String} url - URL to check if it is absolute or not.\r\n * @returns {Boolean} If the argument URL is absolute or not.\r\n */\r\nfunction isAbsolute(url) {\r\n  return absoluteURLRegexp.test(url);\r\n}\r\n\r\n/**\r\n * @function encode\r\n * @param {String} string - String to encode using encodeURIComponent.\r\n * @param {Boolean} isEncoded - If the string should be encoded.\r\n * @returns {String} Encoded string.\r\n */\r\nfunction encode(string, isEncoded) {\r\n  return isEncoded ? encodeURIComponent(string) : string;\r\n}\r\n","/**\r\n * @module Fetch\r\n * @private\r\n * @mixin\r\n * @description Exports Fetch class.\r\n */\r\n\r\nimport { Promise } from './Promise';\r\nimport { Super } from './Super';\r\nimport { Arr } from './Arr';\r\nimport { Str } from './Str';\r\nimport {\r\n  isArray, isFunction, isString,\r\n  assign, Symbol, validate, iterate, defineProperties\r\n} from './helpers';\r\nimport constructURL from './helpers/constructURL';\r\nimport parseHeaders from './helpers/parseHeaders';\r\nimport transformData from './helpers/transformData';\r\n\r\n/**\r\n * @typedef {'get'|'post'|'delete'|'head'|'put'|'patch'} FetchMethod\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {Object} FetchConfig\r\n * @public\r\n * @property {Array.<AfterMiddleware|FetchErrorAfterMiddleware>} [after]\r\n * @property {Object} [auth]\r\n * @property {String} [auth.username]\r\n * @property {String} [auth.password]\r\n * @property {String} [baseURL]\r\n * @property {Array.<BeforeMiddleware|FetchErrorBeforeMiddleware>} [before]\r\n * @property {*} [data]\r\n * @property {Object.<String, String[]>} [headers]\r\n * @property {FetchMethod} [method]\r\n * @property {Object} [params]\r\n * @property {Object} [query]\r\n * @property {String} [responseType]\r\n * @property {Number} [timeout]\r\n * @property {String} [url]\r\n * @property {Boolean} [withCredentials]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FetchResponse\r\n * @public\r\n * @property {FetchConfig} config\r\n * @property {*} data\r\n * @property {Object.<String, String>} headers\r\n * @property {Number} status\r\n * @property {String} statusText\r\n * @property {XMLHttpRequest} xhr\r\n */\r\n\r\n/**\r\n * @callback FetchAfterMiddleware\r\n * @public\r\n * @param {FetchResponse} config - Fetch response.\r\n */\r\n\r\n/**\r\n * @callback FetchErrorAfterMiddleware\r\n * @public\r\n * @param {Error|*} err - Thrown error.\r\n * @param {FetchResponse} config - Fetch response.\r\n */\r\n\r\n/**\r\n * @callback FetchBeforeMiddleware\r\n * @public\r\n * @param {FetchConfig} config - Fetch config.\r\n */\r\n\r\n/**\r\n * @callback FetchErrorBeforeMiddleware\r\n * @public\r\n * @param {Error|*} err - Thrown error.\r\n * @param {FetchConfig} config - Fetch config.\r\n */\r\n\r\n/**\r\n * @callback FetchConfigFunction\r\n * @public\r\n * @param {FetchConfig} config\r\n */\r\n\r\nconst defaults = {\r\n  after: [],\r\n  auth: {\r\n    username: '',\r\n    password: ''\r\n  },\r\n  baseURL: global.location.origin,\r\n  before: [],\r\n  data: null,\r\n  headers: {},\r\n  method: 'get',\r\n  params: {},\r\n  query: {},\r\n  responseType: '',\r\n  timeout: 0,\r\n  url: '',\r\n  withCredentials: false\r\n};\r\nconst uploadMethods = new Arr(['post', 'put']);\r\n\r\n/**\r\n * @class Fetch\r\n * @extends Function\r\n * @public\r\n * @param {FetchConfig} [config = {}] - A number to wrap.\r\n * @returns {Fetch} Instance of Fetch.\r\n * An instance of Fetch is a function that simply calls #request with the same arguments.\r\n * @description Class for fetching data.\r\n *\r\n * @example\r\n * const fetch = new Fetch();\r\n *\r\n * fetch('/data').then((res) => {\r\n *   console.log(res);\r\n * });\r\n */\r\nclass Fetch extends Function {\r\n  constructor(config = {}) {\r\n    super();\r\n\r\n    function fetch() {\r\n      return fetch.request.apply(fetch, arguments);\r\n    }\r\n\r\n    const conf = new Super({}).deepAssign(defaults, config).$;\r\n\r\n    if (conf.before.indexOf(fetchBeforeMiddleware) === -1) {\r\n      conf.before.push(fetchBeforeMiddleware);\r\n    }\r\n\r\n    /**\r\n     * @member {FetchConfig} Fetch#$$\r\n     * @type {FetchConfig}\r\n     * @public\r\n     * @description Fetch config.\r\n     */\r\n    Object.defineProperty(fetch, '$$', { value: conf });\r\n    Object.setPrototypeOf(fetch, Fetch.prototype);\r\n\r\n    return fetch;\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#after\r\n   * @public\r\n   * @param {FetchAfterMiddleware|FetchErrorAfterMiddleware} middleware - Middleware to add.\r\n   * @param {Boolean|*} [afterAll = true] - Boolean parameter where to put the middleware.\r\n   * Truthy parameter stands for \"to the end\" and falsey for \"to the beginning\".\r\n   * @returns {Fetch} Returns this.\r\n   * @description Middleware that is called after the request.\r\n   * If the middleware has 2 or less arguments it's treated as success middleware otherwise as an error one.\r\n   * If the middleware returns a promise it becomes a part of the middleware chain.\r\n   *\r\n   * @example\r\n   * const fetch = new Fetch()\r\n   *   .after((err, res) => {\r\n   *     console.log(err);\r\n   *\r\n   *     throw err;\r\n   *   })\r\n   *   .after((res) => {\r\n   *     res.json = D(res.data).parseJSON():\r\n   *   });\r\n   */\r\n  after(middleware, afterAll = true) {\r\n    validate([middleware], ['function'], 'Fetch#after');\r\n\r\n    const { after } = this.$$;\r\n\r\n    if (afterAll) {\r\n      after.push(middleware);\r\n    } else {\r\n      after.unshift(middleware);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#before\r\n   * @public\r\n   * @param {FetchBeforeMiddleware|FetchErrorBeforeMiddleware} middleware - Middleware to add.\r\n   * @param {Boolean|*} [beforeAll = true] - Boolean parameter where to put the middleware.\r\n   * Truthy parameter stands for \"to the beginning\" and falsey for \"to the end\".\r\n   * @returns {Fetch} Returns this.\r\n   * @description Middleware that is called before the request.\r\n   * If the middleware has 2 or less arguments it's treated as success middleware otherwise as an error one.\r\n   * If the middleware returns a promise it becomes a part of the middleware chain.\r\n   *\r\n   * @example\r\n   * const fetch = new Fetch()\r\n   *   .before((err, req) => {\r\n   *     console.log(err);\r\n   *\r\n   *     throw err;\r\n   *   })\r\n   *   .before((req) => {\r\n   *     if (req.url === '/veryLongRequest') {\r\n   *       req.timeout = 30000;\r\n   *     }\r\n   *   });\r\n   */\r\n  before(middleware, beforeAll = true) {\r\n    validate([middleware], ['function'], 'Fetch#before');\r\n\r\n    const { before } = this.$$;\r\n\r\n    if (beforeAll) {\r\n      before.unshift(middleware);\r\n    } else {\r\n      before.push(middleware);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#config\r\n   * @public\r\n   * @param {String|FetchConfig|FetchConfigFunction} [property] - If it's a function\r\n   * it's called with the fetch config argument, if it's a string the value argument\r\n   * is used for assigning this property to the fetch config\r\n   * otherwise it's assigned to the fetch config.\r\n   * @param {*} [value] - See the property argument.\r\n   * @returns {Fetch|FetchConfig} If the argument is present this is returned otherwise the fetch config is returned.\r\n   * @description Method for getting and setting config.\r\n   *\r\n   * @example\r\n   * const fetch = new Fetch();\r\n   *\r\n   * fetch.config({ baseURL: 5000 });\r\n   * fetch.config().timeout; // 5000\r\n   *\r\n   * fetch.config((config) => {\r\n   *   config.baseURL += '/api';\r\n   * });\r\n   */\r\n  config(property, value) {\r\n    const conf = this.$$;\r\n\r\n    if (!arguments.length) {\r\n      return conf;\r\n    }\r\n\r\n    if (isFunction(property)) {\r\n      property(conf);\r\n    } else {\r\n      if (arguments.length >= 2) {\r\n        property = { [property]: value };\r\n      }\r\n\r\n      new Super(conf).deepAssign(property);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#delete\r\n   * @public\r\n   * @param {String} [url] - See {@link Fetch#request}.\r\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\r\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\r\n   * @description Shorthand for #request for delete requests.\r\n   *\r\n   * @example\r\n   * new Fetch().delete('/data').then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  delete(url, config = {}) {\r\n    if (!isString(url)) {\r\n      config = url;\r\n      url = undefined;\r\n    }\r\n\r\n    return this.request(url, assign({ method: 'delete' }, config));\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#get\r\n   * @public\r\n   * @param {String} [url] - See {@link Fetch#request}.\r\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\r\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\r\n   * @description Shorthand for #request for get requests.\r\n   *\r\n   * @example\r\n   * new Fetch().get('/data').then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  get(url, config = {}) {\r\n    if (!isString(url)) {\r\n      config = url;\r\n      url = undefined;\r\n    }\r\n\r\n    return this.request(url, assign({ method: 'get' }, config));\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#head\r\n   * @public\r\n   * @param {String} [url] - See {@link Fetch#request}.\r\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\r\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\r\n   * @description Shorthand for #request for head requests.\r\n   *\r\n   * @example\r\n   * new Fetch().head('/data').then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  head(url, config = {}) {\r\n    if (!isString(url)) {\r\n      config = url;\r\n      url = undefined;\r\n    }\r\n\r\n    return this.request(url, assign({ method: 'head' }, config));\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#headers\r\n   * @public\r\n   * @param {String|Object.<String, String|String[]>} header - A header string or an object of the following format:\r\n   * { [header]: [value1, value2, ...] }.\r\n   * @param {String|String[]} [value] - Header value. If the first argument is a string\r\n   * this has to be a header value or an array of header values.\r\n   * @returns {Fetch} Returns this.\r\n   * @description Method for setting request headers.\r\n   *\r\n   * @example\r\n   * const fetch = new Fetch()\r\n   *   .headers('Header1', 'Value')\r\n   *   .headers('Header2', ['Value1', 'Value2'])\r\n   *   .headers({\r\n   *     Header3: ['Value1', 'Value2']\r\n   *   });\r\n   */\r\n  headers(header, value) {\r\n    const { headers } = this.$$;\r\n\r\n    if (arguments.length >= 2) {\r\n      header = { [header]: value };\r\n    }\r\n\r\n    iterate(header, (value, header) => {\r\n      const array = headers[header] || [];\r\n      const toPush = isArray(value) ? value : [value];\r\n\r\n      (headers[header] = array).push.apply(array, toPush);\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#instance\r\n   * @public\r\n   * @param {FetchConfig} [config] - New config if needed.\r\n   * @returns {Fetch} New instance of Fetch.\r\n   * @description Method for creating new fetch instances based on already existent.\r\n   *\r\n   * @example\r\n   * const mainFetch = new Fetch({\r\n   *   baseURL: '//other.domain.com/api',\r\n   *   withCredentials: true\r\n   * });\r\n   *\r\n   * const longFetch = mainFetch.instance({\r\n   *   timeout: 10000\r\n   * });\r\n   */\r\n  instance(config = {}) {\r\n    const dataConfig = new Super(config).hasOwn('data')\r\n      ? { data: config.data }\r\n      : {};\r\n\r\n    delete config.data;\r\n\r\n    const conf = new Super({})\r\n      .deepAssign(this.$$, config)\r\n      .assign(dataConfig)\r\n      .$;\r\n\r\n    return new Fetch(conf);\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#patch\r\n   * @public\r\n   * @param {String} [url] - See {@link Fetch#request}.\r\n   * @param {*} [data] - Additional parameter for uploading data.\r\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\r\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\r\n   * @description Shorthand for #request for head requests.\r\n   *\r\n   * @example\r\n   * new Fetch().patch('/data', { user: 'John' }).then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  patch(url, data = {}, config = {}) {\r\n    if (arguments.length && !isString(url)) {\r\n      config = data;\r\n      data = url;\r\n      url = undefined;\r\n    }\r\n\r\n    return this.request(url, assign({ method: 'patch', data }, config));\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#post\r\n   * @public\r\n   * @param {String} [url] - See {@link Fetch#request}.\r\n   * @param {*} [data] - Additional parameter for uploading data.\r\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\r\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\r\n   * @description Shorthand for #request for head requests.\r\n   *\r\n   * @example\r\n   * new Fetch().post('/data', { user: 'John' }).then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  post(url, data = {}, config = {}) {\r\n    if (arguments.length && !isString(url)) {\r\n      config = data;\r\n      data = url;\r\n      url = undefined;\r\n    }\r\n\r\n    return this.request(url, assign({ method: 'post', data }, config));\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#put\r\n   * @public\r\n   * @param {String} [url] - See {@link Fetch#request}.\r\n   * @param {*} [data] - Additional parameter for uploading data.\r\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\r\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\r\n   * @description Shorthand for #request for head requests.\r\n   *\r\n   * @example\r\n   * new Fetch().put('/data', { user: 'John' }).then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  put(url, data = {}, config = {}) {\r\n    if (arguments.length && !isString(url)) {\r\n      config = data;\r\n      data = url;\r\n      url = undefined;\r\n    }\r\n\r\n    return this.request(url, assign({ method: 'put', data }, config));\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#request\r\n   * @public\r\n   * @param {String} [url] - URL for the request.\r\n   * @param {FetchConfig} [config] - Additional config for this particular request.\r\n   * @returns {Promise.<FetchResponse, Error>} Promise that is resolved with the request response.\r\n   * @description Main function for making requests. All request methods call this method\r\n   * including the fetch instance itself.\r\n   *\r\n   * @example\r\n   * const fetch = new Fetch();\r\n   *\r\n   * fetch.request('/data', { timeout: 1000 }).then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   *\r\n   * fetch.request({ timeout: 1000 }).then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   *\r\n   * fetch.request().then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  request(url, config = {}) {\r\n    if (arguments.length === 1 && !isString(url)) {\r\n      config = url;\r\n    }\r\n\r\n    const dataConfig = new Super(config).hasOwn('data')\r\n      ? { data: config.data }\r\n      : {};\r\n    const urlConfig = isString(url)\r\n      ? { url }\r\n      : {};\r\n\r\n    delete config.data;\r\n\r\n    const conf = new Super(this.$$)\r\n      .deepClone()\r\n      .deepAssign(urlConfig, config)\r\n      .assign(dataConfig)\r\n      .$;\r\n\r\n    let xhr;\r\n    let promise = Promise.resolve();\r\n\r\n    iterate(conf.before, (middleware) => {\r\n      promise = promise.then(() => {\r\n        if (middleware.length >= 2) {\r\n          return Promise.resolve();\r\n        }\r\n\r\n        return new Promise((resolve) => {\r\n          resolve(middleware(conf));\r\n        });\r\n      }, (err) => {\r\n        if (middleware.length < 2) {\r\n          return Promise.reject(err);\r\n        }\r\n\r\n        return new Promise((resolve) => {\r\n          resolve(middleware(err, conf));\r\n        });\r\n      });\r\n    });\r\n\r\n    promise = promise.then(() => new Promise((resolve, reject) => {\r\n      const {\r\n        after,\r\n        auth: {\r\n          username,\r\n          password\r\n        },\r\n        data,\r\n        headers,\r\n        method,\r\n        onprogress,\r\n        responseType,\r\n        timeout,\r\n        url,\r\n        withCredentials\r\n      } = conf;\r\n\r\n      xhr = new XMLHttpRequest();\r\n\r\n      xhr.open(method, url, true, username, password);\r\n\r\n      iterate(headers, (value, header) => {\r\n        xhr.setRequestHeader(header, value);\r\n      });\r\n\r\n      if (onprogress) {\r\n        if (uploadMethods.indexOfStrict(method) === -1) {\r\n          xhr.onprogress = onprogress;\r\n        } else {\r\n          xhr.upload.onprogress = onprogress;\r\n        }\r\n      }\r\n\r\n      xhr.onabort = () => {\r\n        reject(new Error('Request was aborted'));\r\n\r\n        xhr = null;\r\n      };\r\n\r\n      xhr.onerror = () => {\r\n        reject(new Error('Network error'));\r\n\r\n        xhr = null;\r\n      };\r\n\r\n      xhr.ontimeout = () => {\r\n        reject(new Error('Request time exceeded'));\r\n\r\n        xhr = null;\r\n      };\r\n\r\n      xhr.onreadystatechange = () => {\r\n        if (!xhr || !xhr.status || xhr.readyState !== 4) {\r\n          return;\r\n        }\r\n\r\n        const response = {\r\n          config: conf,\r\n          data: !responseType || responseType === 'text' ? xhr.responseText : xhr.response,\r\n          headers: parseHeaders(xhr.getAllResponseHeaders()),\r\n          status: xhr.status === 1223 ? 204 : xhr.status,\r\n          statusText: xhr.status === 1223 ? 'No Content' : xhr.statusText,\r\n          xhr\r\n        };\r\n\r\n        let promise = Promise.resolve();\r\n\r\n        iterate(after, (middleware) => {\r\n          promise = promise.then(() => {\r\n            if (middleware.length >= 2) {\r\n              return Promise.resolve();\r\n            }\r\n\r\n            return new Promise((resolve) => {\r\n              resolve(middleware(response));\r\n            });\r\n          }, (err) => {\r\n            if (middleware.length < 2) {\r\n              return Promise.reject(err);\r\n            }\r\n\r\n            return new Promise((resolve) => {\r\n              resolve(middleware(err, response));\r\n            });\r\n          });\r\n        });\r\n\r\n        resolve(promise\r\n          .then(() => response)\r\n          .catch((err) => {\r\n            try {\r\n              err.response = response;\r\n            } catch (e) {\r\n              throw err;\r\n            }\r\n\r\n            throw err;\r\n          })\r\n        );\r\n      };\r\n\r\n      xhr.responseType = responseType;\r\n      xhr.timeout = Number(timeout) || 0;\r\n      xhr.withCredentials = !!withCredentials;\r\n\r\n      xhr.send(data);\r\n    }));\r\n\r\n    promise.abort = function abort() {\r\n      if (xhr) {\r\n        xhr.abort();\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\n    return promise;\r\n  }\r\n}\r\n\r\ndefineProperties(Fetch.prototype, {\r\n  [Symbol.toStringTag]: 'Fetch'\r\n});\r\n\r\n/**\r\n * @function fetchBeforeMiddleware\r\n * @private\r\n * @param {FetchConfig} config\r\n * @description Built-in before middleware for url, data, method, headers construction.\r\n */\r\nfunction fetchBeforeMiddleware(config) {\r\n  const {\r\n    baseURL,\r\n    data,\r\n    headers,\r\n    method,\r\n    params,\r\n    query,\r\n    url\r\n  } = config;\r\n  const METHOD = method.toUpperCase();\r\n\r\n  config.method = METHOD;\r\n  config.url = constructURL(baseURL, url, params, query);\r\n  config.data = transformData(data, METHOD, headers);\r\n  config.headers = new Super(headers).object((headers, values, header) => {\r\n    header = new Str(header)\r\n      .toCapitalCase()\r\n      .replace(/\\s+/g, '-')\r\n      .$;\r\n\r\n    headers[header] = values.join(', ');\r\n  }).$;\r\n}\r\n\r\n/**\r\n * @const {Fetch} fetch\r\n * @type {Fetch}\r\n * @public\r\n * @description Empty instance of Fetch.\r\n */\r\nconst fetch = new Fetch();\r\n\r\nexport { Fetch, fetch };\r\n","/**\r\n * @module Router\r\n * @private\r\n * @mixin\r\n * @description Exports Router.\r\n */\r\n\r\nimport { Arr } from './Arr';\r\nimport { Elem, win } from './Elem';\r\nimport { self } from './Func';\r\nimport { Str } from './Str';\r\nimport { Super } from './Super';\r\nimport { switcher } from './Switcher';\r\nimport { assign, isNil, isRegExp, isString } from './helpers';\r\nimport constructURL from './helpers/constructURL';\r\nimport resolveURL from './helpers/resolveURL';\r\n\r\nconst Routes = new Arr([]);\r\nconst subscribers = new Super({});\r\nconst {\r\n  history,\r\n  location,\r\n  location: {\r\n    origin,\r\n    href\r\n  }\r\n} = global;\r\nlet initialized;\r\nlet pushed;\r\nlet wasRoot;\r\nlet wasDefault;\r\nlet rootRoute;\r\nlet redirectRoute;\r\nlet RedirectRoute;\r\nlet defaultRoute;\r\nlet DefaultRoute;\r\nlet currentRoute;\r\nlet currentRouteParams;\r\n\r\nconst pathSwitcher = switcher('call', () => {\r\n  throw new Error('State path must be a string, a regular expression or undefined! (at registerState)');\r\n})\r\n  .case(isRegExp, (path) => ({\r\n    path: path.source.replace(/\\\\\\//g, '/'),\r\n    url: path,\r\n    params: {}\r\n  }))\r\n  .case(isNil, () => ({\r\n    path: '/',\r\n    url: '/',\r\n    params: {}\r\n  }))\r\n  .case(isString, (path) => {\r\n    if (path.indexOf('/')) {\r\n      throw new Error('If route path is a string it must start with \"/\"! (at registerState)');\r\n    }\r\n\r\n    const index = path.indexOf('?');\r\n    const params = new Super({});\r\n    let newURL = '';\r\n    const newPath = new Str(path)\r\n      .slice(0, index === -1 ? path.length : index)\r\n      .replace(/^\\/|\\/$/g)\r\n      .split(/\\//)\r\n      .map((part, i, array) => {\r\n        if (!part && array.length > 1) {\r\n          throw new Error('If route path is a string it must not contain \"//\" or end with \"/\"! (at makeRoute)');\r\n        }\r\n\r\n        const index = part.indexOf(':');\r\n\r\n        if (index > 0) {\r\n          throw new Error('If route path is a string resource part must be either a string or an URL parameter! (at makeRoute)');\r\n        }\r\n\r\n        if (index === -1) {\r\n          return {\r\n            url: part,\r\n            value: part\r\n          };\r\n        }\r\n\r\n        const {\r\n          name,\r\n          regexp = /[^/]*/\r\n        } = resolveParameter(\r\n          part.slice(1),\r\n          'URL parameter must not be an empty string or contain characters besides \"a-zA-Z_$\"! (at makeRoute)',\r\n          'URL parameter regexp validator must be within parentheses (e.g. :userId(\\\\d+) and not contain ones)! (at makeRoute)'\r\n        );\r\n\r\n        params.$[name] = params.count;\r\n\r\n        return {\r\n          type: 'param',\r\n          url: `:${ name }`,\r\n          value: regexp\r\n        };\r\n      })\r\n      .word(({ type, url, value }) => {\r\n        let newPath;\r\n\r\n        if (type === 'param') {\r\n          newPath = `(${ value.source.replace(/\\\\\\//g, '/') })`;\r\n        } else {\r\n          newPath = new Str(value).escapeRegExp().$;\r\n        }\r\n\r\n        newURL += `/${ url }`;\r\n\r\n        return `/${ newPath }`;\r\n      });\r\n\r\n    return {\r\n      path: newPath,\r\n      url: newURL,\r\n      params: params.$\r\n    };\r\n  });\r\n\r\nclass Route {\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    const {\r\n      name,\r\n      path = '/',\r\n      abstract = false,\r\n      parent,\r\n      decodeQuery = true,\r\n      encodeQuery = true,\r\n      decodeParams = true,\r\n      encodeParams = true\r\n    } = options || {};\r\n    const {\r\n      url: relativeURL,\r\n      path: relativePath,\r\n      params\r\n    } = pathSwitcher(path);\r\n    const query = {};\r\n\r\n    new Super(this).assign({\r\n      name,\r\n      parentName: parent,\r\n      abstract: !!abstract,\r\n      children: new Arr([]),\r\n      decodeParams: !!decodeParams,\r\n      decodeQuery: !!decodeQuery,\r\n      encodeParams: !!encodeParams,\r\n      encodeQuery: !!encodeQuery,\r\n      params,\r\n      query,\r\n      relativePath,\r\n      relativeURL\r\n    });\r\n\r\n    const index = isString(path) ? path.indexOf('?') : -1;\r\n\r\n    if (index !== -1) {\r\n      new Str(path)\r\n        .replace(/&$/)\r\n        .slice(index + 1)\r\n        .split('&')\r\n        .forEach((param) => {\r\n          const {\r\n            name,\r\n            regexp = /[\\s\\S]*/\r\n          } = resolveParameter(\r\n            param,\r\n            'Query parameter must not be an empty string or contain characters besides \"a-zA-Z_$\"! (at makeRoute)',\r\n            'Query parameter regexp validator must be within parentheses (e.g. :userId(\\\\d+)) and not contain them! (at makeRoute)'\r\n          );\r\n\r\n          query[name] = new RegExp(`^${ regexp.source.replace(/\\\\\\//g, '/') }$`);\r\n        });\r\n    }\r\n\r\n    if (name === defaultRoute && (\r\n        new Super(params).count\r\n        || new Super(query).count\r\n      )) {\r\n      throw new Error('Default route must not have URL or query params! (at makeRoute)');\r\n    }\r\n  }\r\n}\r\n\r\nconst baseRoute = new Route();\r\n\r\nfunction initRouter() {\r\n  if (initialized) {\r\n    return;\r\n  }\r\n\r\n  initialized = true;\r\n  RedirectRoute = (Routes.find(({ name }) => name === redirectRoute) || {}).value;\r\n  DefaultRoute = (Routes.find(({ name }) => name === defaultRoute) || {}).value;\r\n\r\n  if (redirectRoute && !RedirectRoute) {\r\n    throw new Error(`There is no specified fallback route (\"${ redirectRoute }\")! (at initRouter)`);\r\n  }\r\n\r\n  Routes\r\n    .forEach((route) => {\r\n      const {\r\n        parentName,\r\n        name\r\n      } = route;\r\n      const ParentName = parentName || rootRoute;\r\n      const { value: parent } = Routes.find(({ name }) => name === ParentName) || {};\r\n\r\n      if (!parent) {\r\n        throw new Error(`No such parent route (\"${ ParentName }\") found for the route (\"${ name }\")! (at initRouter)`);\r\n      }\r\n\r\n      if (!parent.abstract && name !== rootRoute) {\r\n        throw new Error(`Parent route must be abstract (for \"${ name }\")! (at initRouter)`);\r\n      }\r\n\r\n      if (name !== rootRoute) {\r\n        route.parentName = ParentName;\r\n      }\r\n\r\n      route.parent = name === rootRoute\r\n        ? baseRoute\r\n        : parent;\r\n    })\r\n    .forEach((route) => {\r\n      const {\r\n        name,\r\n        parent: {\r\n          params: parentParams,\r\n          query: parentQuery,\r\n          path\r\n        },\r\n        params,\r\n        query,\r\n        relativeURL,\r\n        relativePath\r\n      } = route;\r\n      let proto = route;\r\n      let count = 0;\r\n      let newPath = relativePath;\r\n      let newURL = '';\r\n\r\n      if (isRegExp(path)) {\r\n        throw new Error('URL regexp route cannot be extended! (at initRouter)');\r\n      }\r\n\r\n      while (proto = proto.parent) {\r\n        count += new Super(proto.params).count;\r\n        newPath = proto.relativePath + newPath;\r\n        newURL = proto.relativeURL + newURL;\r\n\r\n        proto.children.push(route);\r\n      }\r\n\r\n      newPath = new RegExp(`^${ newPath.replace(/\\/+/g, '/').replace(/\\/$/, '') || '/' }$`);\r\n      newURL = isRegExp(relativeURL)\r\n        ? newPath\r\n        : (newURL + relativeURL).replace(/\\/+/g, '/').replace(/\\/$/, '') || '/';\r\n\r\n      new Super(query).proto(parentQuery);\r\n      new Super(params)\r\n        .proto(parentParams)\r\n        .forEach((value, key, params) => {\r\n          params[key] += count;\r\n        });\r\n\r\n      if (name === defaultRoute && (\r\n          new Super(params).count\r\n          || new Super(query).count\r\n        )) {\r\n        throw new Error('Default route must not have URL or query params! (at initRouter)');\r\n      }\r\n\r\n      route.url = newURL;\r\n      route.validatePath = newPath;\r\n    });\r\n\r\n  changeRoute();\r\n\r\n  win.on({\r\n    popstate() {\r\n      if (location.href !== href) {\r\n        pushed = true;\r\n      }\r\n\r\n      if (pushed) {\r\n        changeRoute();\r\n      }\r\n    },\r\n    click(e) {\r\n      const closestLink = new Elem(e.target).closest('a');\r\n\r\n      if (closestLink.length && closestLink.attr('target') !== '_blank') {\r\n        e.preventDefault();\r\n\r\n        forward(closestLink.attr('href') || '', true);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nfunction makeRoute(options) {\r\n  const {\r\n    name,\r\n    path,\r\n    abstract,\r\n    root,\r\n    fallbackTo,\r\n    default: isDefault\r\n  } = options || {};\r\n\r\n  if (initialized) {\r\n    console.warn('Router was already initialized (at makeRoute)');\r\n\r\n    return self;\r\n  }\r\n\r\n  if (wasRoot && root) {\r\n    throw new Error(`There can't be two root routes (\"${ rootRoute }\" and \"${ name }\")! (at makeRoute)`);\r\n  }\r\n\r\n  if (wasDefault && isDefault) {\r\n    throw new Error(`There can't be two default routes (\"${ defaultRoute }\" and \"${ name }\")! (at makeRoute)`);\r\n  }\r\n\r\n  if (!name) {\r\n    throw new Error('State must have a non-empty string \"name\" property! (at makeRoute)');\r\n  }\r\n\r\n  if (Routes.some(({ name: Name }) => Name === name)) {\r\n    throw new Error('State must have unique \"name\" property! (at makeRoute)');\r\n  }\r\n\r\n  if (root) {\r\n    wasRoot = true;\r\n    rootRoute = name;\r\n    options.parent = null;\r\n\r\n    if (fallbackTo) {\r\n      redirectRoute = fallbackTo;\r\n    }\r\n  }\r\n\r\n  if (isDefault) {\r\n    wasDefault = true;\r\n    defaultRoute = name;\r\n\r\n    if (abstract) {\r\n      throw new Error('Default route can\\'t be abstract! (at makeRoute)');\r\n    }\r\n\r\n    if (isRegExp(path)) {\r\n      throw new Error('Default route can\\'t have a regexp path! (at makeRoute)');\r\n    }\r\n  }\r\n\r\n  const route = new Route(options);\r\n\r\n  Routes.push(route);\r\n\r\n  let unsubscribe;\r\n  let routeLoaded;\r\n\r\n  return (Block) => (\r\n    class extends Block {\r\n      static template = `<div class=\"dwayne-route route-${ name }\" d-show=\"{__isCurrentRoute__}\">${ Block.template }</div>`;\r\n\r\n      constructor(opts) {\r\n        super(opts);\r\n\r\n        if (root) {\r\n          initRouter();\r\n\r\n          const router = {\r\n            buildURL(name, options = {}) {\r\n              const { value: route } = Routes.find(({ name: n }) => n === name) || {};\r\n\r\n              if (!route) {\r\n                throw new Error(`There are no routes with name \"${ name }\"! (at router.buildURL)`);\r\n              }\r\n\r\n              const {\r\n                url,\r\n                encodeParams,\r\n                encodeQuery\r\n              } = route;\r\n\r\n              if (isRegExp(url)) {\r\n                throw new Error('URL can be built only from the string URLs! (at router.buildURL)');\r\n              }\r\n\r\n              const {\r\n                params = {},\r\n                query = {},\r\n                hash = ''\r\n              } = options;\r\n\r\n              return constructURL(origin, url, params, query, hash, {\r\n                params: encodeParams,\r\n                query: encodeQuery\r\n              });\r\n            },\r\n            go(name, options) {\r\n              forward(router.buildURL(name, options), true);\r\n            },\r\n            goToURL(url) {\r\n              forward(url, true);\r\n            },\r\n            pushURL(url) {\r\n              changeHistory(url, true);\r\n            },\r\n            redirect(name, options) {\r\n              forward(router.buildURL(name, options));\r\n            },\r\n            redirectToURL(url) {\r\n              forward(url);\r\n            },\r\n            replaceURL(url) {\r\n              changeHistory(url);\r\n            }\r\n          };\r\n\r\n          this.global.router = router;\r\n        }\r\n\r\n        this.__isCurrentRoute__ = (\r\n          route === currentRoute\r\n          || route.children.indexOf(currentRoute) !== -1\r\n        );\r\n        this.args.route = currentRouteParams;\r\n\r\n        routeLoaded = false;\r\n        unsubscribe = subscribe(name, () => {\r\n          const isCurrentRoute = (\r\n            route === currentRoute\r\n            || route.children.indexOf(currentRoute) !== -1\r\n          );\r\n\r\n          if (isCurrentRoute) {\r\n            callBeforeLoad(this);\r\n          } else {\r\n            callBeforeLeave(this);\r\n          }\r\n\r\n          this.args.route = currentRouteParams;\r\n          this.__isCurrentRoute__ = isCurrentRoute;\r\n        });\r\n\r\n        if (this.__isCurrentRoute__) {\r\n          callBeforeLoad(this);\r\n        }\r\n      }\r\n\r\n      beforeRemove() {\r\n        unsubscribe();\r\n        unsubscribe = null;\r\n        callBeforeLeave(this);\r\n        super.beforeRemove();\r\n      }\r\n    }\r\n  );\r\n\r\n  function callBeforeLoad(route) {\r\n    if (route.beforeLoadRoute && !routeLoaded) {\r\n      try {\r\n        route.beforeLoadRoute();\r\n      } catch (err) {\r\n        console.error(`Uncaught error in ${ name }#beforeLeave:`, err);\r\n      }\r\n    }\r\n\r\n    routeLoaded = true;\r\n  }\r\n\r\n  function callBeforeLeave(route) {\r\n    if (route.beforeLeaveRoute && routeLoaded) {\r\n      try {\r\n        route.beforeLeaveRoute();\r\n      } catch (err) {\r\n        console.error(`Uncaught error in ${ name }#beforeLeave:`, err);\r\n      }\r\n    }\r\n\r\n    routeLoaded = false;\r\n  }\r\n}\r\n\r\nfunction subscribe(name, callback) {\r\n  subscribers.$[name] = callback;\r\n\r\n  return () => {\r\n    subscribers.delete(name);\r\n  };\r\n}\r\n\r\nfunction forward(url, push) {\r\n  changeHistory(url, push);\r\n  changeRoute();\r\n}\r\n\r\nfunction changeRoute() {\r\n  const route = findRouteByURL();\r\n\r\n  if (route) {\r\n    ({\r\n      route: currentRoute,\r\n      ...currentRouteParams\r\n    } = route);\r\n    assign(currentRouteParams, {\r\n      name: currentRoute.name,\r\n      host: location.host,\r\n      hostname: location.hostname,\r\n      href: location.href,\r\n      origin: location.origin,\r\n      pathname: location.pathname,\r\n      port: location.port,\r\n      protocol: location.protocol,\r\n      search: location.search\r\n    });\r\n  } else {\r\n    if (redirectRoute) {\r\n      const {\r\n        url,\r\n        encodeParams,\r\n        encodeQuery\r\n      } = RedirectRoute;\r\n\r\n      return forward(constructURL(origin, url, {}, {}, '', {\r\n        params: encodeParams,\r\n        query: encodeQuery\r\n      }));\r\n    }\r\n\r\n    currentRoute = null;\r\n    currentRouteParams = null;\r\n  }\r\n\r\n  subscribers.forEach((callback) => callback());\r\n}\r\n\r\nfunction findRouteByURL() {\r\n  const pathname = location.pathname || '/';\r\n  const search = location.search || '';\r\n  let urlParams;\r\n\r\n  Routes.some((route) => {\r\n    if (route.abstract) {\r\n      return;\r\n    }\r\n\r\n    const {\r\n      url: routeURL,\r\n      validatePath,\r\n      params,\r\n      query: requiredQuery,\r\n      decodeParams,\r\n      decodeQuery\r\n    } = route;\r\n    const resolved = resolveURL(decodeQuery);\r\n    const query = new Super(resolved.query);\r\n    const eventualParams = {};\r\n    const match = (\r\n      (pathname.replace(/\\/$/, '') || '/') +\r\n      (isRegExp(routeURL) ? search : '')\r\n    ).match(validatePath);\r\n\r\n    if (!match) {\r\n      return;\r\n    }\r\n\r\n    /* eslint guard-for-in: 0 */\r\n    for (const param in requiredQuery) {\r\n      if (!query.hasOwn(param) || !requiredQuery[param].test(query.$[param])) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    match.shift();\r\n\r\n    for (const param in params) {\r\n      eventualParams[param] = decode(match[params[param]], decodeParams);\r\n    }\r\n\r\n    urlParams = {\r\n      route,\r\n      params: eventualParams,\r\n      query: query.$,\r\n      hash: resolved.hash\r\n    };\r\n\r\n    return true;\r\n  });\r\n\r\n  if (urlParams) {\r\n    return urlParams;\r\n  }\r\n\r\n  if (!defaultRoute) {\r\n    return;\r\n  }\r\n\r\n  return {\r\n    route: DefaultRoute,\r\n    params: {},\r\n    ...resolveURL(DefaultRoute.decodeQuery)\r\n  };\r\n}\r\n\r\nfunction decode(string, decodeParams) {\r\n  return decodeParams\r\n    ? decodeURIComponent(string)\r\n    : string;\r\n}\r\n\r\nfunction changeHistory(url, push) {\r\n  try {\r\n    history[push ? 'pushState' : 'replaceState'](null, null, url);\r\n    pushed = true;\r\n  } catch (err) {\r\n    location.href = url;\r\n  }\r\n}\r\n\r\nfunction resolveParameter(param, nameErrorName, valueErrorName) {\r\n  const nameMatch = param.match(/^[a-z_$]+/i);\r\n\r\n  if (!nameMatch) {\r\n    throw new Error(nameErrorName);\r\n  }\r\n\r\n  const name = nameMatch[0];\r\n  const value = param.slice(name.length);\r\n  let regexp;\r\n\r\n  if (value && (value.indexOf('(') || value.indexOf(')') !== value.length - 1)) {\r\n    throw new Error(valueErrorName);\r\n  }\r\n\r\n  if (value) {\r\n    regexp = new RegExp(value.slice(1, -1));\r\n  }\r\n\r\n  return {\r\n    name,\r\n    regexp\r\n  };\r\n}\r\n\r\nexport { makeRoute };\r\n","/* eslint no-nested-ternary: 0 */\r\n/* eslint no-negated-condition: 0 */\r\nexport default typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\r\n","/**\r\n * @module constants/appliedRegExps\r\n * @private\r\n * @description Exports different types of syntax for {@link Elem#apply}.\r\n */\r\n\r\n/**\r\n * @callback matchAppliedExprCallback\r\n * @param {Elem} elem - D-elem of an element to apply expression to.\r\n * @param {String} string - Matched applied name.\r\n * @param {String} arg - Argument within the parentheses.\r\n */\r\n\r\n/**\r\n * @type {Object.<String, matchAppliedExprCallback|Object.<String, matchAppliedExprCallback>>}\r\n * @description Object of different types of syntax.\r\n */\r\n\r\nexport const appliedRegExps = {\r\n  '#'(elem, id) {\r\n    elem.id(id);\r\n  },\r\n  '.'(elem, cls) {\r\n    elem.addClass(cls);\r\n  },\r\n  $(elem, attr, value) {\r\n    elem.attr(attr, value);\r\n  },\r\n  '@'(elem, prop, value) {\r\n    elem.css(prop, value);\r\n  },\r\n  '&'(elem, name, html) {\r\n    elem.html(html);\r\n  },\r\n  '*'(elem, name, text) {\r\n    elem.text(text);\r\n  },\r\n  '-': {\r\n    '.'(elem, cls) {\r\n      elem.removeClass(cls);\r\n    },\r\n    $(elem, attr) {\r\n      elem.removeAttr(attr);\r\n    },\r\n    '@'(elem, prop) {\r\n      elem.removeCSS(prop);\r\n    }\r\n  }\r\n};\r\n","/**\r\n * @module constants/elements\r\n * @private\r\n * @description Exports different canvas methods for {@link Elem} for creating html-elements.\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {String[]}\r\n */\r\nexport const canvasGetMethods = [\r\n  /**\r\n   * @member {Function} Elem#createImageData\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {ImageData|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/createImageData\r\n   */\r\n  'createImageData',\r\n\r\n  /**\r\n   * @member {Function} Elem#createLinearGradient\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {CanvasGradient|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/createLinearGradient\r\n   */\r\n  'createLinearGradient',\r\n\r\n  /**\r\n   * @member {Function} Elem#createPattern\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {CanvasPattern|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/createPattern\r\n   */\r\n  'createPattern',\r\n\r\n  /**\r\n   * @member {Function} Elem#createRadialGradient\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {CanvasGradient|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/createRadialGradient\r\n   */\r\n  'createRadialGradient',\r\n\r\n  /**\r\n   * @member {Function} Elem#getImageData\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {ImageData|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/getImageData\r\n   */\r\n  'getImageData',\r\n\r\n  /**\r\n   * @member {Function} Elem#getLineDash\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Number[]|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/getLineDash\r\n   */\r\n  'getLineDash',\r\n\r\n  /**\r\n   * @member {Function} Elem#isPointInPath\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Boolean|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/isPointInPath\r\n   */\r\n  'isPointInPath',\r\n\r\n  /**\r\n   * @member {Function} Elem#isPointInStroke\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Boolean|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/isPointInStroke\r\n   */\r\n  'isPointInStroke',\r\n\r\n  /**\r\n   * @member {Function} Elem#measureText\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {TextMetrics|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/measureText\r\n   */\r\n  'measureText'\r\n];\r\n\r\nexport const canvasRestMethods = [\r\n  /**\r\n   * @member {Function} Elem#arc\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/arc\r\n   */\r\n  'arc',\r\n\r\n  /**\r\n   * @member {Function} Elem#arcTo\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/arcTo\r\n   */\r\n  'arcTo',\r\n\r\n  /**\r\n   * @member {Function} Elem#beginPath\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/beginPath\r\n   */\r\n  'beginPath',\r\n\r\n  /**\r\n   * @member {Function} Elem#bezierCurveTo\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo\r\n   */\r\n  'bezierCurveTo',\r\n\r\n  /**\r\n   * @member {Function} Elem#clearRect\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/clearRect\r\n   */\r\n  'clearRect',\r\n\r\n  /**\r\n   * @member {Function} Elem#clip\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/clip\r\n   */\r\n  'clip',\r\n\r\n  /**\r\n   * @member {Function} Elem#closePath\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/closePath\r\n   */\r\n  'closePath',\r\n\r\n  /**\r\n   * @member {Function} Elem#drawFocusIfNeeded\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/drawFocusIfNeeded\r\n   */\r\n  'drawFocusIfNeeded',\r\n\r\n  /**\r\n   * @member {Function} Elem#drawImage\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/drawImage\r\n   */\r\n  'drawImage',\r\n\r\n  /**\r\n   * @member {Function} Elem#ellipse\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/ellipse\r\n   */\r\n  'ellipse',\r\n\r\n  /**\r\n   * @member {Function} Elem#fill\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/fill\r\n   */\r\n  'fill',\r\n\r\n  /**\r\n   * @member {Function} Elem#fillRect\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/fillRect\r\n   */\r\n  'fillRect',\r\n\r\n  /**\r\n   * @member {Function} Elem#fillText\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/fillText\r\n   */\r\n  'fillText',\r\n\r\n  /**\r\n   * @member {Function} Elem#lineTo\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/lineTo\r\n   */\r\n  'lineTo',\r\n\r\n  /**\r\n   * @member {Function} Elem#moveTo\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/moveTo\r\n   */\r\n  'moveTo',\r\n\r\n  /**\r\n   * @member {Function} Elem#putImageData\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/putImageData\r\n   */\r\n  'putImageData',\r\n\r\n  /**\r\n   * @member {Function} Elem#quadraticCurveTo\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo\r\n   */\r\n  'quadraticCurveTo',\r\n\r\n  /**\r\n   * @member {Function} Elem#rect\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/rect\r\n   */\r\n  'rect',\r\n\r\n  /**\r\n   * @member {Function} Elem#resetTransform\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/resetTransform\r\n   */\r\n  'resetTransform',\r\n\r\n  /**\r\n   * @member {Function} Elem#restore\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/restore\r\n   */\r\n  'restore',\r\n\r\n  /**\r\n   * @member {Function} Elem#rotate\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/rotate\r\n   */\r\n  'rotate',\r\n\r\n  /**\r\n   * @member {Function} Elem#save\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/save\r\n   */\r\n  'save',\r\n\r\n  /**\r\n   * @member {Function} Elem#scale\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/scale\r\n   */\r\n  'scale',\r\n\r\n  /**\r\n   * @member {Function} Elem#setLineDash\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/setLineDash\r\n   */\r\n  'setLineDash',\r\n\r\n  /**\r\n   * @member {Function} Elem#setTransform\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/setTransform\r\n   */\r\n  'setTransform',\r\n\r\n  /**\r\n   * @member {Function} Elem#stroke\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/stroke\r\n   */\r\n  'stroke',\r\n\r\n  /**\r\n   * @member {Function} Elem#strokeRect\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/strokeRect\r\n   */\r\n  'strokeRect',\r\n\r\n  /**\r\n   * @member {Function} Elem#strokeText\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/strokeText\r\n   */\r\n  'strokeText',\r\n\r\n  /**\r\n   * @member {Function} Elem#transform\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/transform\r\n   */\r\n  'transform',\r\n\r\n  /**\r\n   * @member {Function} Elem#translate\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/translate\r\n   */\r\n  'translate'\r\n];\r\n","/**\r\n * @module constants/constructors\r\n * @private\r\n * @description Exports constructors levels.\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {Array[]}\r\n */\r\nexport const constructors = [\r\n  [],\r\n  [],\r\n  []\r\n];\r\n","/**\r\n * @module constants/elements\r\n * @private\r\n * @description Exports methods for {@link Elem} for creating html-elements.\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {String[]}\r\n */\r\nexport const htmlElements = [\r\n  /**\r\n   * @member {Function} Elem#a\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'a',\r\n\r\n  /**\r\n   * @member {Function} Elem#abbr\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'abbr',\r\n\r\n  /**\r\n   * @member {Function} Elem#address\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'address',\r\n\r\n  /**\r\n   * @member {Function} Elem#area\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'area',\r\n\r\n  /**\r\n   * @member {Function} Elem#article\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'article',\r\n\r\n  /**\r\n   * @member {Function} Elem#audio\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'audio',\r\n\r\n  /**\r\n   * @member {Function} Elem#b\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'b',\r\n\r\n  /**\r\n   * @member {Function} Elem#base\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'base',\r\n\r\n  /**\r\n   * @member {Function} Elem#bdi\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'bdi',\r\n\r\n  /**\r\n   * @member {Function} Elem#bdo\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'bdo',\r\n\r\n  /**\r\n   * @member {Function} Elem#blockquote\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'blockquote',\r\n\r\n  /**\r\n   * @member {Function} Elem#body\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'body',\r\n\r\n  /**\r\n   * @member {Function} Elem#br\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'br',\r\n\r\n  /**\r\n   * @member {Function} Elem#button\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'button',\r\n\r\n  /**\r\n   * @member {Function} Elem#canvas\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'canvas',\r\n\r\n  /**\r\n   * @member {Function} Elem#caption\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'caption',\r\n\r\n  /**\r\n   * @member {Function} Elem#cite\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'cite',\r\n\r\n  /**\r\n   * @member {Function} Elem#code\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'code',\r\n\r\n  /**\r\n   * @member {Function} Elem#col\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'col',\r\n\r\n  /**\r\n   * @member {Function} Elem#colgroup\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'colgroup',\r\n\r\n  /**\r\n   * @member {Function} Elem#content\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'content',\r\n\r\n  /**\r\n   * @member {Function} Elem#datalist\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'datalist',\r\n\r\n  /**\r\n   * @member {Function} Elem#dd\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'dd',\r\n\r\n  /**\r\n   * @member {Function} Elem#del\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'del',\r\n\r\n  /**\r\n   * @member {Function} Elem#details\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'details',\r\n\r\n  /**\r\n   * @member {Function} Elem#dfn\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'dfn',\r\n\r\n  /**\r\n   * @member {Function} Elem#dialog\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'dialog',\r\n\r\n  /**\r\n   * @member {Function} Elem#div\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'div',\r\n\r\n  /**\r\n   * @member {Function} Elem#dl\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'dl',\r\n\r\n  /**\r\n   * @member {Function} Elem#dt\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'dt',\r\n\r\n  /**\r\n   * @member {Function} Elem#element\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'element',\r\n\r\n  /**\r\n   * @member {Function} Elem#em\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'em',\r\n\r\n  /**\r\n   * @member {Function} Elem#embed\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'embed',\r\n\r\n  /**\r\n   * @member {Function} Elem#fieldset\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'fieldset',\r\n\r\n  /**\r\n   * @member {Function} Elem#figcaption\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'figcaption',\r\n\r\n  /**\r\n   * @member {Function} Elem#figure\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'figure',\r\n\r\n  /**\r\n   * @member {Function} Elem#footer\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'footer',\r\n\r\n  /**\r\n   * @member {Function} Elem#form\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'form',\r\n\r\n  /**\r\n   * @member {Function} Elem#h1\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'h1',\r\n\r\n  /**\r\n   * @member {Function} Elem#h2\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'h2',\r\n\r\n  /**\r\n   * @member {Function} Elem#h3\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'h3',\r\n\r\n  /**\r\n   * @member {Function} Elem#h4\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'h4',\r\n\r\n  /**\r\n   * @member {Function} Elem#h5\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'h5',\r\n\r\n  /**\r\n   * @member {Function} Elem#h6\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'h6',\r\n\r\n  /**\r\n   * @member {Function} Elem#head\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'head',\r\n\r\n  /**\r\n   * @member {Function} Elem#header\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'header',\r\n\r\n  /**\r\n   * @member {Function} Elem#hgroup\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'hgroup',\r\n\r\n  /**\r\n   * @member {Function} Elem#hr\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'hr',\r\n\r\n  /**\r\n   * @member {Function} Elem#i\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'i',\r\n\r\n  /**\r\n   * @member {Function} Elem#iframe\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'iframe',\r\n\r\n  /**\r\n   * @member {Function} Elem#img\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'img',\r\n\r\n  /**\r\n   * @member {Function} Elem#input\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'input',\r\n\r\n  /**\r\n   * @member {Function} Elem#ins\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'ins',\r\n\r\n  /**\r\n   * @member {Function} Elem#kbd\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'kbd',\r\n\r\n  /**\r\n   * @member {Function} Elem#label\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'label',\r\n\r\n  /**\r\n   * @member {Function} Elem#legend\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'legend',\r\n\r\n  /**\r\n   * @member {Function} Elem#li\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'li',\r\n\r\n  /**\r\n   * @member {Function} Elem#link\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'link',\r\n\r\n  /**\r\n   * @member {Function} Elem#main\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'main',\r\n\r\n  /**\r\n   * @member {Function} Elem#mark\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'mark',\r\n\r\n  /**\r\n   * @member {Function} Elem#menu\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'menu',\r\n\r\n  /**\r\n   * @member {Function} Elem#menuitem\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'menuitem',\r\n\r\n  /**\r\n   * @member {Function} Elem#meta\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'meta',\r\n\r\n  /**\r\n   * @member {Function} Elem#meter\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'meter',\r\n\r\n  /**\r\n   * @member {Function} Elem#nav\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'nav',\r\n\r\n  /**\r\n   * @member {Function} Elem#noscript\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'noscript',\r\n\r\n  /**\r\n   * @member {Function} Elem#ol\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'ol',\r\n\r\n  /**\r\n   * @member {Function} Elem#optgroup\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'optgroup',\r\n\r\n  /**\r\n   * @member {Function} Elem#option\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'option',\r\n\r\n  /**\r\n   * @member {Function} Elem#output\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'output',\r\n\r\n  /**\r\n   * @member {Function} Elem#p\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'p',\r\n\r\n  /**\r\n   * @member {Function} Elem#param\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'param',\r\n\r\n  /**\r\n   * @member {Function} Elem#pre\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'pre',\r\n\r\n  /**\r\n   * @member {Function} Elem#progress\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'progress',\r\n\r\n  /**\r\n   * @member {Function} Elem#q\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'q',\r\n\r\n  /**\r\n   * @member {Function} Elem#rp\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'rp',\r\n\r\n  /**\r\n   * @member {Function} Elem#rt\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'rt',\r\n\r\n  /**\r\n   * @member {Function} Elem#rtc\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'rtc',\r\n\r\n  /**\r\n   * @member {Function} Elem#ruby\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'ruby',\r\n\r\n  /**\r\n   * @member {Function} Elem#s\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  's',\r\n\r\n  /**\r\n   * @member {Function} Elem#samp\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'samp',\r\n\r\n  /**\r\n   * @member {Function} Elem#script\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'script',\r\n\r\n  /**\r\n   * @member {Function} Elem#section\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'section',\r\n\r\n  /**\r\n   * @member {Function} Elem#select\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'select',\r\n\r\n  /**\r\n   * @member {Function} Elem#shadow\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'shadow',\r\n\r\n  /**\r\n   * @member {Function} Elem#small\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'small',\r\n\r\n  /**\r\n   * @member {Function} Elem#source\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'source',\r\n\r\n  /**\r\n   * @member {Function} Elem#span\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'span',\r\n\r\n  /**\r\n   * @member {Function} Elem#strong\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'strong',\r\n\r\n  /**\r\n   * @member {Function} Elem#style\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'style',\r\n\r\n  /**\r\n   * @member {Function} Elem#sub\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'sub',\r\n\r\n  /**\r\n   * @member {Function} Elem#summary\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'summary',\r\n\r\n  /**\r\n   * @member {Function} Elem#sup\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'sup',\r\n\r\n  /**\r\n   * @member {Function} Elem#table\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'table',\r\n\r\n  /**\r\n   * @member {Function} Elem#tbody\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'tbody',\r\n\r\n  /**\r\n   * @member {Function} Elem#td\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'td',\r\n\r\n  /**\r\n   * @member {Function} Elem#template\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'template',\r\n\r\n  /**\r\n   * @member {Function} Elem#textarea\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'textarea',\r\n\r\n  /**\r\n   * @member {Function} Elem#tfoot\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'tfoot',\r\n\r\n  /**\r\n   * @member {Function} Elem#th\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'th',\r\n\r\n  /**\r\n   * @member {Function} Elem#thead\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'thead',\r\n\r\n  /**\r\n   * @member {Function} Elem#time\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'time',\r\n\r\n  /**\r\n   * @member {Function} Elem#title\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'title',\r\n\r\n  /**\r\n   * @member {Function} Elem#tr\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'tr',\r\n\r\n  /**\r\n   * @member {Function} Elem#track\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'track',\r\n\r\n  /**\r\n   * @member {Function} Elem#u\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'u',\r\n\r\n  /**\r\n   * @member {Function} Elem#ul\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'ul',\r\n\r\n  /**\r\n   * @member {Function} Elem#var\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'var',\r\n\r\n  /**\r\n   * @member {Function} Elem#video\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'video',\r\n\r\n  /**\r\n   * @member {Function} Elem#wbr\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'wbr'\r\n];\r\n\r\nexport const svgElements = [\r\n  /**\r\n   * @member {Function} Elem#altGlyph\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'altGlyph',\r\n\r\n  /**\r\n   * @member {Function} Elem#altGlyphDef\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'altGlyphDef',\r\n\r\n  /**\r\n   * @member {Function} Elem#altGlyphItem\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'altGlyphItem',\r\n\r\n  /**\r\n   * @member {Function} Elem#animate\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'animate',\r\n\r\n  /**\r\n   * @member {Function} Elem#animateColor\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'animateColor',\r\n\r\n  /**\r\n   * @member {Function} Elem#animateMotion\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'animateMotion',\r\n\r\n  /**\r\n   * @member {Function} Elem#animateTransform\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'animateTransform',\r\n\r\n  /**\r\n   * @member {Function} Elem#circle\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'circle',\r\n\r\n  /**\r\n   * @member {Function} Elem#clipPath\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'clipPath',\r\n\r\n  /**\r\n   * @member {Function} Elem#colorProfile\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'color-profile',\r\n\r\n  /**\r\n   * @member {Function} Elem#cursor\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'cursor',\r\n\r\n  /**\r\n   * @member {Function} Elem#defs\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'defs',\r\n\r\n  /**\r\n   * @member {Function} Elem#desc\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'desc',\r\n\r\n  /**\r\n   * @member {Function} Elem#discard\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'discard',\r\n\r\n  /**\r\n   * @member {Function} Elem#ellipse\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'ellipse',\r\n\r\n  /**\r\n   * @member {Function} Elem#feBlend\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feBlend',\r\n\r\n  /**\r\n   * @member {Function} Elem#feColorMatrix\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feColorMatrix',\r\n\r\n  /**\r\n   * @member {Function} Elem#feComponentTransfer\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feComponentTransfer',\r\n\r\n  /**\r\n   * @member {Function} Elem#feComposite\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feComposite',\r\n\r\n  /**\r\n   * @member {Function} Elem#feConvolveMatrix\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feConvolveMatrix',\r\n\r\n  /**\r\n   * @member {Function} Elem#feDiffuseLighting\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feDiffuseLighting',\r\n\r\n  /**\r\n   * @member {Function} Elem#feDisplacementMap\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feDisplacementMap',\r\n\r\n  /**\r\n   * @member {Function} Elem#feDistantLight\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feDistantLight',\r\n\r\n  /**\r\n   * @member {Function} Elem#feDropShadow\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feDropShadow',\r\n\r\n  /**\r\n   * @member {Function} Elem#feFlood\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feFlood',\r\n\r\n  /**\r\n   * @member {Function} Elem#feFuncA\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feFuncA',\r\n\r\n  /**\r\n   * @member {Function} Elem#feFuncB\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feFuncB',\r\n\r\n  /**\r\n   * @member {Function} Elem#feFuncG\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feFuncG',\r\n\r\n  /**\r\n   * @member {Function} Elem#feFuncR\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feFuncR',\r\n\r\n  /**\r\n   * @member {Function} Elem#feGaussianBlur\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feGaussianBlur',\r\n\r\n  /**\r\n   * @member {Function} Elem#feImage\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feImage',\r\n\r\n  /**\r\n   * @member {Function} Elem#feMerge\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feMerge',\r\n\r\n  /**\r\n   * @member {Function} Elem#feMergeNode\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feMergeNode',\r\n\r\n  /**\r\n   * @member {Function} Elem#feMorphology\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feMorphology',\r\n\r\n  /**\r\n   * @member {Function} Elem#feOffset\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feOffset',\r\n\r\n  /**\r\n   * @member {Function} Elem#fePointLight\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'fePointLight',\r\n\r\n  /**\r\n   * @member {Function} Elem#feSpecularLighting\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feSpecularLighting',\r\n\r\n  /**\r\n   * @member {Function} Elem#feSpotLight\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feSpotLight',\r\n\r\n  /**\r\n   * @member {Function} Elem#feTile\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feTile',\r\n\r\n  /**\r\n   * @member {Function} Elem#feTurbulence\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feTurbulence',\r\n\r\n  /**\r\n   * @member {Function} Elem#font\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'font',\r\n\r\n  /**\r\n   * @member {Function} Elem#fontFace\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'font-face',\r\n\r\n  /**\r\n   * @member {Function} Elem#fontFaceFormat\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'font-face-format',\r\n\r\n  /**\r\n   * @member {Function} Elem#fontFaceName\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'font-face-name',\r\n\r\n  /**\r\n   * @member {Function} Elem#fontFaceSrc\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'font-face-src',\r\n\r\n  /**\r\n   * @member {Function} Elem#fontFaceUri\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'font-face-uri',\r\n\r\n  /**\r\n   * @member {Function} Elem#foreignObject\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'foreignObject',\r\n\r\n  /**\r\n   * @member {Function} Elem#g\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'g',\r\n\r\n  /**\r\n   * @member {Function} Elem#glyph\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'glyph',\r\n\r\n  /**\r\n   * @member {Function} Elem#glyphRef\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'glyphRef',\r\n\r\n  /**\r\n   * @member {Function} Elem#hatch\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'hatch',\r\n\r\n  /**\r\n   * @member {Function} Elem#hatchpath\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'hatchpath',\r\n\r\n  /**\r\n   * @member {Function} Elem#hkern\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'hkern',\r\n\r\n  /**\r\n   * @member {Function} Elem#image\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'image',\r\n\r\n  /**\r\n   * @member {Function} Elem#line\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'line',\r\n\r\n  /**\r\n   * @member {Function} Elem#linearGradient\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'linearGradient',\r\n\r\n  /**\r\n   * @member {Function} Elem#marker\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'marker',\r\n\r\n  /**\r\n   * @member {Function} Elem#mask\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'mask',\r\n\r\n  /**\r\n   * @member {Function} Elem#mesh\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'mesh',\r\n\r\n  /**\r\n   * @member {Function} Elem#meshgradient\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'meshgradient',\r\n\r\n  /**\r\n   * @member {Function} Elem#meshpatch\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'meshpatch',\r\n\r\n  /**\r\n   * @member {Function} Elem#meshrow\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'meshrow',\r\n\r\n  /**\r\n   * @member {Function} Elem#metadata\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'metadata',\r\n\r\n  /**\r\n   * @member {Function} Elem#missingGlyph\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'missing-glyph',\r\n\r\n  /**\r\n   * @member {Function} Elem#mpath\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'mpath',\r\n\r\n  /**\r\n   * @member {Function} Elem#path\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'path',\r\n\r\n  /**\r\n   * @member {Function} Elem#pattern\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'pattern',\r\n\r\n  /**\r\n   * @member {Function} Elem#polygon\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'polygon',\r\n\r\n  /**\r\n   * @member {Function} Elem#polyline\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'polyline',\r\n\r\n  /**\r\n   * @member {Function} Elem#radialGradient\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'radialGradient',\r\n\r\n  /**\r\n   * @member {Function} Elem#rect\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'rect',\r\n\r\n  /**\r\n   * @member {Function} Elem#set\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'set',\r\n\r\n  /**\r\n   * @member {Function} Elem#solidcolor\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'solidcolor',\r\n\r\n  /**\r\n   * @member {Function} Elem#stop\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'stop',\r\n\r\n  /**\r\n   * @member {Function} Elem#style\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'style',\r\n\r\n  /**\r\n   * @member {Function} Elem#svg\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'svg',\r\n\r\n  /**\r\n   * @member {Function} Elem#switch\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'switch',\r\n\r\n  /**\r\n   * @member {Function} Elem#symbol\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'symbol',\r\n\r\n  /**\r\n   * @member {Function} Elem#textPath\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'textPath',\r\n\r\n  /**\r\n   * @member {Function} Elem#tref\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'tref',\r\n\r\n  /**\r\n   * @member {Function} Elem#tspan\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'tspan',\r\n\r\n  /**\r\n   * @member {Function} Elem#unknown\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'unknown',\r\n\r\n  /**\r\n   * @member {Function} Elem#use\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'use',\r\n\r\n  /**\r\n   * @member {Function} Elem#view\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'view',\r\n\r\n  /**\r\n   * @member {Function} Elem#vkern\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'vkern'\r\n];\r\n\r\nexport const voidElements = [\r\n  'area',\r\n  'base',\r\n  'br',\r\n  'col',\r\n  'command',\r\n  'embed',\r\n  'hr',\r\n  'img',\r\n  'input',\r\n  'keygen',\r\n  'link',\r\n  'meta',\r\n  'param',\r\n  'source',\r\n  'track',\r\n  'wbr'\r\n];\r\n","export const htmlAllowedTagSymbols = '[a-z][a-z\\\\d\\\\-_.:!@#\\\\$%\\\\^&*()\\\\[\\\\]{}\\\\\\\\=\\'\"]*';\r\nexport const htmlAllowedAttrSymbols = '[^\\\\u0000-\\\\u0020\\\\s\"\\'>/=]+';\r\n","/**\r\n * @module constants/regexpSpecialCharacters\r\n * @private\r\n * @description Exports special characters for RegExp.\r\n */\r\n\r\n/**\r\n * @const\r\n * @name module:constants/regexpSpecialCharacters~regexpSpecialCharacters\r\n * @type {String[]}\r\n */\r\nexport const regexpSpecialCharacters = [\r\n  '.',\r\n  '+', '*', '?',\r\n  '(', ')',\r\n  '[', ']',\r\n  '{', '}',\r\n  '<', '>',\r\n  '^', '$',\r\n  '!',\r\n  '=',\r\n  ':',\r\n  '-',\r\n  '|',\r\n  ',',\r\n  '\\\\'\r\n];\r\n","/**\r\n * @module constants/validateCheckExpressions\r\n * @private\r\n * @description Exports different types of validate expressions for {@link module:helpers/validate}.\r\n */\r\n\r\nimport * as methods from '../helpers/checkTypes';\r\n\r\n/**\r\n * @callback checkValidityCallback\r\n * @private\r\n * @param {*} value - Value to check.\r\n */\r\n\r\n/**\r\n * @typedef {Object} validateExpr\r\n * @private\r\n * @property {String} text - Text of the thrown error.\r\n * @property {Error} error - Type of the thrown error.\r\n * @property {checkValidityCallback} check - Callback for checking value.\r\n */\r\n\r\n/**\r\n * @type {validateExpr[]}\r\n * @private\r\n * @description Object of different types of validation.\r\n */\r\nexport const validateCheckExpressions = {\r\n  '>0': {\r\n    check: (n) => n > 0,\r\n    text: '$n argument must be positive!',\r\n    error: RangeError\r\n  },\r\n  '>=0': {\r\n    check: (n) => n >= 0,\r\n    text: '$n argument must be non-negative!',\r\n    error: RangeError\r\n  },\r\n  '<0': {\r\n    check: (n) => n < 0,\r\n    text: '$n argument must be negative!',\r\n    error: RangeError\r\n  },\r\n  '<=0': {\r\n    check: (n) => n <= 0,\r\n    text: '$n argument must be non-positive!',\r\n    error: RangeError\r\n  },\r\n  '!!': {\r\n    check: (v) => !methods.isNil(v),\r\n    text: '$n argument must be not null or undefined!',\r\n    error: TypeError\r\n  },\r\n  array: {\r\n    check: methods.isArray,\r\n    text: '$n argument must be an array!',\r\n    error: TypeError\r\n  },\r\n  'array||!': {\r\n    check: (a) => methods.isArray(a) || methods.isNil(a),\r\n    text: '$n argument must be an array, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  arrayLike: {\r\n    check: methods.isArrayLike,\r\n    text: '$n argument must be array-like!',\r\n    error: TypeError\r\n  },\r\n  'arrayLike||!': {\r\n    check: (a) => methods.isArrayLike(a) || methods.isNil(a),\r\n    text: '$n argument must be array-like, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  date: {\r\n    check: methods.isDate,\r\n    text: '$n argument must be a date!',\r\n    error: TypeError\r\n  },\r\n  'date||!': {\r\n    check: (d) => methods.isDate(d) || methods.isNil(d),\r\n    text: '$n argument must be a date, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  dateLike: {\r\n    check: methods.isDateLike,\r\n    text: '$n argument must be date-like!',\r\n    error: TypeError\r\n  },\r\n  'dateLike||!': {\r\n    check: (d) => methods.isDateLike(d) || methods.isNil(d),\r\n    text: '$n argument must be date-like, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  function: {\r\n    check: methods.isFunction,\r\n    text: '$n argument must be a function!',\r\n    error: TypeError\r\n  },\r\n  'function||!': {\r\n    check: (f) => methods.isFunction(f) || methods.isNil(f),\r\n    text: '$n argument must be a function, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  int: {\r\n    check: methods.isInteger,\r\n    text: '$n argument must be an integer!',\r\n    error: TypeError\r\n  },\r\n  'int||!': {\r\n    check: (i) => methods.isInteger(i) || methods.isNil(i),\r\n    text: '$n argument must be an integer, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  intLike: {\r\n    check: methods.isIntegerLike,\r\n    text: '$n argument must be integer-like!',\r\n    error: TypeError\r\n  },\r\n  'intLike||!': {\r\n    check: (i) => methods.isIntegerLike(i) || methods.isNil(i),\r\n    text: '$n argument must be integer-like, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  number: {\r\n    check: methods.isNumber,\r\n    text: '$n argument must be a number!',\r\n    error: TypeError\r\n  },\r\n  'number||!': {\r\n    check: (n) => methods.isNumber(n) || methods.isNil(n),\r\n    text: '$n argument must be a number, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  numberLike: {\r\n    check: methods.isNumberLike,\r\n    text: '$n argument must be number-like!',\r\n    error: TypeError\r\n  },\r\n  'numberLike||!': {\r\n    check: (n) => methods.isNumberLike(n) || methods.isNil(n),\r\n    text: '$n argument must be number-like, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  object: {\r\n    check: methods.isObject,\r\n    text: '$n argument must be an object!',\r\n    error: TypeError\r\n  },\r\n  'object||!': {\r\n    check: (o) => methods.isObject(o) || methods.isNil(o),\r\n    text: '$n argument must be an object, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  regexp: {\r\n    check: methods.isRegExp,\r\n    text: '$n argument must be a regular expression!',\r\n    error: TypeError\r\n  },\r\n  'regexp||!': {\r\n    check: (r) => methods.isRegExp(r) || methods.isNil(r),\r\n    text: '$n argument must be a regular expression, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  string: {\r\n    check: methods.isString,\r\n    text: '$n argument must be a string!',\r\n    error: TypeError\r\n  },\r\n  'string||!': {\r\n    check: (s) => methods.isString(s) || methods.isNil(s),\r\n    text: '$n argument must be a string, or undefined, or null!',\r\n    error: TypeError\r\n  }\r\n};\r\n","/**\r\n * @module helpers/Symbol\r\n * @private\r\n * @description Exports Symbol class.\r\n */\r\n\r\nexport const Symbol = global.Symbol || {\r\n  toStringTag: 'Symbol.toStringTag',\r\n  iterator: Math.random().toString(36)\r\n};\r\n","/**\r\n * @module Promise\r\n * @private\r\n * @mixin\r\n * @description Exports Promise class.\r\n */\r\n\r\nimport { isFunction, defineProperties, Symbol } from './helpers';\r\n\r\n/**\r\n * @callback onFulfilledOrRejected\r\n * @public\r\n * @param {*} value - Promise value.\r\n * @param {Boolean} success - If the previous promise is fulfilled it's true and false if rejected.\r\n */\r\n\r\n/**\r\n * @callback onRejected\r\n * @public\r\n * @param {Error|*} err - Promise error.\r\n */\r\n\r\n/**\r\n * @callback onFulfilled\r\n * @public\r\n * @param {*} value - Promise value.\r\n */\r\n\r\nconst secret = {};\r\nconst iterator = Symbol.iterator;\r\n\r\n/**\r\n * @class Promise\r\n * @public\r\n * @param {Function} executor - Function that takes two arguments: resolve and reject functions.\r\n * Call the resolve function when you need to fulfill the promise and call the reject one\r\n * when you need to reject it.\r\n * @returns {Promise} Instance of Promise.\r\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\r\n * @description Class with almost identical API to\r\n * [ES6 Promise]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise}.\r\n * There is a couple differences: set Promise.onError to a function with which you want to\r\n * subscribe to a promise error and set Promise.onUnhandledRejection to a function with which\r\n * you want to subscribe to an unhandled error\r\n * (defaults to console.error.bind(console, '%s %o', 'Uncaught (in promise)')).\r\n */\r\nclass Promise {\r\n  static onError = null;\r\n  static onUnhandledRejection = console.error.bind(console, '%s %o', 'Uncaught (in promise)');\r\n\r\n  constructor(executor) {\r\n    if (!isFunction(executor)) {\r\n      throw new TypeError(`Promise resolver ${ {}.toString.call(executor) } is not a function`);\r\n    }\r\n\r\n    let hiddenStatus;\r\n    let hiddenValue;\r\n\r\n    const\tonFulfill = [];\r\n    const onReject = [];\r\n    const realPromise = this;\r\n    const hiddenPromise = {\r\n      handled: false,\r\n      get status() {\r\n        return hiddenStatus;\r\n      },\r\n      set status(value) {\r\n        hiddenStatus = value;\r\n        realPromise.status = value;\r\n      },\r\n      get value() {\r\n        return hiddenValue;\r\n      },\r\n      set value(val) {\r\n        hiddenValue = val;\r\n        realPromise.value = val;\r\n      }\r\n    };\r\n\r\n    hiddenPromise.status = 'pending';\r\n    hiddenPromise.value = undefined;\r\n\r\n    /**\r\n     * @typedef {Object} hiddenPromise\r\n     * @private\r\n     * @property {Boolean|Object} handled - If the promise is handled or not.\r\n     * @property {'pending'|'fulfilled'|'rejected'} status - Status of the promise.\r\n     * @property {*} value - Value of the promise.\r\n     */\r\n\r\n    /**\r\n     * @member {Function} hiddenPromise#handle\r\n     * @private\r\n     * @param {('reject'|'resolve')} event - Type of the event to handle.\r\n     * @param {Function} handler - Handler itself.\r\n     * @param {Function} resolve - Resolve function.\r\n     * @param {Function} reject - Reject function.\r\n     * @param {Object} secret - Secret.\r\n     * @description Private method for handling promises.\r\n     */\r\n\r\n    /**\r\n     * @member {hiddenPromise} Promise#$$\r\n     * @protected\r\n     */\r\n    defineProperties(this.$$ = {}, {\r\n      'get/set handled': {\r\n        get() {\r\n          return hiddenPromise.handled;\r\n        },\r\n        set(key) {\r\n          if (key === secret) {\r\n            hiddenPromise.handled = true;\r\n          }\r\n        }\r\n      },\r\n      handle(status, f, resolve, reject, key) {\r\n        if (key === secret) {\r\n          const proxy = isFunction(f) ? (value) => {\r\n            try {\r\n              resolve(f(value));\r\n            } catch (err) {\r\n              reject(err);\r\n            }\r\n          } : null;\r\n\r\n          if (status === 'resolve') {\r\n            onFulfill.push(proxy || ((value) => resolve(value)));\r\n          } else if (status === 'reject') {\r\n            onReject.push(proxy || ((err) => reject(err)));\r\n          }\r\n        }\r\n      },\r\n      'get status'() {\r\n        return hiddenPromise.status;\r\n      },\r\n      'get value'() {\r\n        return hiddenPromise.value;\r\n      }\r\n    });\r\n\r\n    try {\r\n      executor(resolve, reject);\r\n    } catch (err) {\r\n      reject(err);\r\n    }\r\n\r\n    function reject(err) {\r\n      if (hiddenPromise.status === 'pending') {\r\n        hiddenPromise.status = 'rejected';\r\n        hiddenPromise.value = err;\r\n\r\n        for (let i = 0, length = onReject.length; i < length; i++) {\r\n          hiddenPromise.handled = true;\r\n\r\n          onReject[i](err);\r\n        }\r\n\r\n        const {\r\n          onUnhandledRejection,\r\n          onError\r\n        } = Promise;\r\n\r\n        if (isFunction(onError)) {\r\n          onError(err);\r\n        }\r\n\r\n        setTimeout(() => {\r\n          if (!hiddenPromise.handled && isFunction(onUnhandledRejection)) {\r\n            onUnhandledRejection(err);\r\n          }\r\n        }, 1);\r\n      }\r\n    }\r\n\r\n    function resolve(value) {\r\n      if (hiddenPromise.status === 'pending') {\r\n        if (value && isFunction(value.then)) {\r\n          return value.then((value) => {\r\n            resolve(value);\r\n          }, (err) => {\r\n            reject(err);\r\n          });\r\n        }\r\n\r\n        hiddenPromise.status = 'fulfilled';\r\n        hiddenPromise.value = value;\r\n\r\n        for (let i = 0, length = onFulfill.length; i < length; i++) {\r\n          hiddenPromise.handled = true;\r\n\r\n          onFulfill[i](value);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method Promise.all\r\n   * @param {(Array|Iterable).<Promise|*>} iterable - Iterable object (like array) of promises\r\n   * or any values.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\r\n   */\r\n  static all(iterable) {\r\n    const array = [];\r\n\r\n    let toResolve = 0;\r\n\r\n    if (iterable[iterator]) {\r\n      iterable = iterable[iterator]();\r\n\r\n      return new Promise((resolve, reject) => {\r\n        let next;\r\n        let i = 0;\r\n\r\n        while (!(next = iterable.next()).done) {\r\n          const promise = Promise.resolve(next.value);\r\n\r\n          toResolve++;\r\n\r\n          ((i) => {\r\n            promise.then((value) => {\r\n              toResolve--;\r\n              array[i] = value;\r\n\r\n              setTimeout(() => {\r\n                if (next.done && !toResolve) {\r\n                  resolve(array);\r\n                }\r\n              }, 1);\r\n            }, reject);\r\n          })(i++);\r\n        }\r\n\r\n        if (!i) {\r\n          return Promise.resolve([]);\r\n        }\r\n      });\r\n    }\r\n\r\n    const length = iterable.length;\r\n\r\n    if (!length) {\r\n      return Promise.resolve([]);\r\n    }\r\n\r\n    toResolve = length;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      for (let i = 0; i < length; i++) {\r\n        const promise = Promise.resolve(iterable[i]);\r\n\r\n        promise.then((value) => {\r\n          toResolve--;\r\n          array[i] = value;\r\n\r\n          if (!toResolve) {\r\n            resolve(array);\r\n          }\r\n        }, reject);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Promise.race\r\n   * @param {(Array|Iterable).<Promise|*>} iterable - Iterable object (like array) of promises\r\n   * or any values.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\r\n   */\r\n  static race(iterable) {\r\n    if (iterable[iterator]) {\r\n      iterable = iterable[iterator]();\r\n\r\n      return new Promise((resolve, reject) => {\r\n        let next;\r\n\r\n        while (!(next = iterable.next()).done) {\r\n          next.value.then(resolve, reject);\r\n        }\r\n      });\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      for (let i = 0, length = iterable.length; i < length; i++) {\r\n        iterable[i].then(resolve, reject);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Promise.reject\r\n   * @param {*} value - Value to reject.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject\r\n   */\r\n  static reject(value) {\r\n    return new Promise((resolve, reject) => {\r\n      reject(value);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Promise.resolve\r\n   * @param {Promise|Thenable|*} value - Promise, thenable or any value to resolve.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\r\n   */\r\n  static resolve(value) {\r\n    if (value && isFunction(value.then)) {\r\n      return value;\r\n    }\r\n\r\n    return new Promise((resolve) => {\r\n      resolve(value);\r\n    });\r\n  }\r\n\r\n  abort() {}\r\n\r\n  /**\r\n   * @method Promise#catch\r\n   * @param {onRejected} onRejected - onRejected callback.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\r\n   */\r\n  catch(onRejected) {\r\n    return this.then(null, onRejected);\r\n  }\r\n\r\n  /**\r\n   * @method Promise#finally\r\n   * @public\r\n   * @param {onFulfilledOrRejected} onFulfilledOrRejected - onFulfilledOrRejected callback.\r\n   * @returns {Promise}\r\n   * @description Method for catching both fulfilled and rejected promises.\r\n   *\r\n   * @example\r\n   * spinner.show();\r\n   * fetchData()\r\n   *   .then((data) => {\r\n   *     // do something with data\r\n   *   })\r\n   *   .catch((err) => {\r\n   *     // handle error somehow\r\n   *   })\r\n   *   .finally(() => {\r\n   *     spinner.hide();\r\n   *   });\r\n   */\r\n  finally(onFulfilledOrRejected) {\r\n    const isFunc = isFunction(onFulfilledOrRejected);\r\n\r\n    return this.then((value) => (\r\n      Promise\r\n        .resolve(\r\n          isFunc\r\n            ? onFulfilledOrRejected(value, true)\r\n            : 0\r\n        )\r\n        .then(() => value)\r\n    ), (err) => (\r\n      Promise\r\n        .resolve(\r\n          isFunc\r\n            ? onFulfilledOrRejected(err, false)\r\n            : 0\r\n        )\r\n        .then(() => Promise.reject(err))\r\n    ));\r\n  }\r\n\r\n  /**\r\n   * @method Promise#then\r\n   * @param {onFulfilled} [onFulfilled] - onFulfilled callback.\r\n   * @param {onRejected} [onRejected] - onRejected callback.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\r\n   */\r\n  then(onFulfilled, onRejected) {\r\n    const promise = this.$$;\r\n\r\n    if (promise.status === 'pending') {\r\n      return new Promise((resolve, reject) => {\r\n        promise.handle('reject', onRejected, resolve, reject, secret);\r\n        promise.handle('resolve', onFulfilled, resolve, reject, secret);\r\n      });\r\n    }\r\n\r\n    promise.handled = secret;\r\n\r\n    const { value } = promise;\r\n\r\n    let method;\r\n    let handler;\r\n\r\n    if (promise.status === 'fulfilled') {\r\n      method = 'resolve';\r\n      handler = onFulfilled;\r\n    } else {\r\n      method = 'reject';\r\n      handler = onRejected;\r\n    }\r\n\r\n    if (!isFunction(handler)) {\r\n      return Promise[method](value);\r\n    }\r\n\r\n    try {\r\n      return Promise.resolve(handler(value));\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n  }\r\n}\r\n\r\ndefineProperties(Promise.prototype, {\r\n  [Symbol.toStringTag]: 'Promise'\r\n});\r\n\r\nexport { Promise };\r\n","/**\r\n * @module helpers/parseHeaders\r\n * @private\r\n * @description Exports parseHeaders method.\r\n */\r\n\r\nimport { Str } from '../Str';\r\nimport { iterate } from './iterate';\r\n\r\n/**\r\n * @function parseHeaders\r\n * @param {String} rawHeaders - Raw headers.\r\n * @returns {Object} Headers object\r\n * @description Function for parsing raw headers.\r\n */\r\nexport default (rawHeaders) => {\r\n  const headers = {};\r\n\r\n  iterate((rawHeaders || '').split('\\n'), (value) => {\r\n    const index = value.indexOf(':');\r\n    const key = new Str(value.substring(0, index))\r\n      .trim()\r\n      .toCamelCase().$;\r\n    const val = new Str(value.substring(index + 1)).trim().$;\r\n\r\n    if (key) {\r\n      headers[key] = (headers[key] ? `${ headers[key] }, ` : '') + val;\r\n    }\r\n  });\r\n\r\n  return headers;\r\n};\r\n","/**\r\n * @module helpers/transformData\r\n * @private\r\n * @description Exports transformData method.\r\n */\r\n\r\nimport { Arr } from '../Arr';\r\nimport { Super } from '../Super';\r\nimport { isObject, toStringTag } from './';\r\n\r\nconst notToTransform = new Arr(['FormData', 'File', 'Blob', 'ArrayBuffer', 'String', 'Number']);\r\nconst withoutBody = new Arr(['DELETE', 'GET', 'HEAD']);\r\n\r\n/**\r\n * @function transformData\r\n * @param {*} data - Data to transform\r\n * @param {String} method - HTTP method.\r\n * @param {Object} headers - Object with headers.\r\n * @returns {*} - Transformed data.\r\n */\r\nexport default (data, method, headers) => {\r\n  data = new Super(data).$;\r\n\r\n  if (withoutBody.indexOfStrict(method) !== -1) {\r\n    return null;\r\n  }\r\n\r\n  if (isObject(data) && notToTransform.indexOfStrict(toStringTag(data)) === -1) {\r\n    if (!headers.contentType) {\r\n      headers.contentType = ['application/json;charset=utf-8'];\r\n    }\r\n\r\n    return new Super(data).json();\r\n  }\r\n\r\n  return data;\r\n};\r\n","/**\r\n * @module helpers/resolveURL\r\n * @private\r\n * @description Exports Object.assign-like method.\r\n */\r\n\r\nimport { Str } from '../Str';\r\n\r\nconst { location } = global;\r\n\r\nexport default (decodeQuery) => {\r\n  const {\r\n    search: query,\r\n    hash\r\n  } = location;\r\n  const params = {\r\n    query: {},\r\n    hash: hash.replace(/^#/, '')\r\n  };\r\n\r\n  if (!query) {\r\n    return params;\r\n  }\r\n\r\n  new Str(query.replace(/^\\?/, ''))\r\n    .split('&')\r\n    .forEach((rawParam) => {\r\n      let [param, value = ''] = rawParam.split('=');\r\n\r\n      param = decodeQuery ? decodeURIComponent(param) : param;\r\n      value = decodeQuery ? decodeURIComponent(value) : value;\r\n\r\n      if (!/^[^[]+/.test(param)) {\r\n        return;\r\n      }\r\n\r\n      let paramName;\r\n      let paramObject = params.query;\r\n\r\n      new Str(param)\r\n        .match(/^[^[\\]]*|\\[[^[\\]]*]/g)\r\n        .forEach((name) => {\r\n          if (name.indexOf('[')) {\r\n            paramName = name;\r\n\r\n            return;\r\n          }\r\n\r\n          name = name.slice(1, -1);\r\n\r\n          paramObject = paramObject[paramName] = paramObject[paramName] || (name ? {} : []);\r\n          paramName = name || paramObject.length;\r\n        });\r\n\r\n      paramObject[paramName] = value;\r\n    });\r\n\r\n  return params;\r\n};\r\n","import * as statics from './lib/browser';\r\nimport { assign } from './lib/helpers/assign';\r\n\r\nconst { D } = statics;\r\n\r\nassign(D, statics);\r\n\r\ndelete D.D;\r\n\r\nglobal.D = D;\r\n"],"names":["toStringTag","object","toString","call","replace","isArray","value","isArrayLike","isFunction","length","isInteger","isBoolean","isDate","isDateLike","Date","isNaN","getTime","isElement","test","isFinite","isNumber","Number","Infinity","isIntegerLike","parseInt","isNull","isNil","isNumberLike","isObject","Object","isPlainObject","isPrimitive","proto","getPrototypeOf","constructor","isRegExp","isString","isSymbol","isUndefined","D","i","constructors","levelConstructors","k","len","cls","check","iterate","callback","array","iteratedKeys","iterated","key","hasOwnProperty","assign","target","objects","arguments","source","index","dynamicDefineProperties","properties","propertyGenerator","name","defineProperty","defineProperties","method","undefined","get","set","toArray","createNewArray","push","validate","args","options","number","checker","validateCheckExpressions","error","text","numbers","char","alphabet","string","ranges","split","range","Error","start","charCodeAt","end","String","fromCharCode","Alphabet","switcher","cases","mode","defaultValue","Switcher","when","condition","value1","value2","deepAssign","deepClone","clone","cloneSwitcher","deepEqual","o1","o2","strict","match","lastIndex","p1","p2","keys","deepEvery","n","tree","newTree","concat","deepFilter","nul","o","filtered","deepFind","result","deepForEach","deepForEachEntry","deepFreeze","freeze","deepMap","deepReduce","IV","deepSome","x","apply","noop","prop","self","rand","Math","random","floor","asc","y","Arr","blob","blobParts","BlobObject","Blob","trim","parseJSON","json","JSON","parse","dates","parsed","this","find","markup","elem","matches","rawTextSwitcher","Super","constructCloseTagRegExp","NODE_REGEX_SET","map","regex","returning","attrs","startMarkup","closeMatch","selfClosing","slice","TAG_OPEN_CLOSE","attr","ATTRIBUTE","min","NaN","tagName","RegExp","nearString","parseCharacterData","innerHTML","div","textContent","innerText","toFind","isElem","Elem","isWindow","isHTMLDocument","isDocumentFragment","isStyleRule","isCommentOrText","tag","getElem","$","emptyDiv","getName","nodeName","toLowerCase","addDwayneData","windowsDwayneData","some","element","getContext","selector","base","nativeDocument","querySelectorAll","parseHTML","html","collapseWhiteSpace","markupToJSON","template","doc","content","forEach","forEachNode","node","parent","children","parentNode","create","px","size","registerDBlock","Block","DBlock","elems","$$","found","registerDEach","createBlock","DEach","opts","item","itemName","indexName","_this","uid","constructValues","watchArgs","parentElem","uids","scope","UID","$uids","newKeys","newUIDs","evaluate","items","splice","Item","remove","after","block","shift","prev","insertAfter","values","registerDElements","DElements","_this2","mixins","watchersToRemove","child","mixin","filter","watchers","watcher","forDElements","indexOf","newContent","add","registerDIf","DIf","cond","evaluateAndWatch","if","newValue","Boolean","registerDItem","DItem","registerDSwitch","DSwitch","wasDefault","val","equals","registerDText","DText","registerDAttr","Mixin","DAttr","oldValue","removeAttr","registerDBind","DBind","off","on","registerDClass","DClass","classes","newClasses","removeClass","addClass","registerDElem","DElem","evaluateOnce","registerDHide","DHide","hide","show","registerDOn","DOn","registerDShow","DShow","registerDStyle","DStyle","removeCSS","css","registerDValidate","DValidate","validator","dwayneData","validators","listenerSwitcher","registerDValue","DValue","_value","type","propSwitcher","initialScopeValue","setProp","initialElemValue","getProp","e","setValueSwitcher","getValueSwitcher","initApp","root","first","blocks","warn","attrName","isInstanceOfMixin","replacement","createComment","registerBlocks","isInstanceOfBlock","deepCloneChildren","registerBuiltIns","register","parentBlock","parentScope","svgNS","svg","localBlocks","dBlockMatch","expressionRegExp","currentMixins","_match","into","blockInstance","global","Args","locals","eventualArgs","defaultArgs","constructPrivateScope","scopeValues","DItemFound","privateScope","afterConstruct","err","afterRender","createMixin","newChild","transformDIfChildren","ifElse","isPrototypeOf","prototype","removeWatchers","constructPublicScope","define","evalMode","getting","temp","changed","oldTempWatchers","onRemove","was","perm","round","digits","zeroes","zero","repeat","now","date","Dat","isAbsolute","url","absoluteURLRegexp","encode","isEncoded","encodeURIComponent","fetchBeforeMiddleware","config","baseURL","data","headers","params","query","METHOD","toUpperCase","constructURL","transformData","header","Str","toCapitalCase","join","initRouter","initialized","Routes","redirectRoute","defaultRoute","RedirectRoute","route","parentName","ParentName","rootRoute","abstract","baseRoute","parentParams","parentQuery","path","relativeURL","relativePath","count","newPath","newURL","validatePath","location","href","pushed","closestLink","closest","preventDefault","makeRoute","callBeforeLoad","beforeLoadRoute","routeLoaded","callBeforeLeave","beforeLeaveRoute","fallbackTo","isDefault","default","wasRoot","Name","Route","unsubscribe","router","encodeParams","encodeQuery","hash","origin","buildURL","__isCurrentRoute__","currentRoute","currentRouteParams","subscribe","isCurrentRoute","delete","forward","changeRoute","findRouteByURL","host","hostname","pathname","port","protocol","search","urlParams","routeURL","requiredQuery","decodeParams","decodeQuery","resolved","resolveURL","eventualParams","param","hasOwn","decode","DefaultRoute","decodeURIComponent","changeHistory","resolveParameter","nameErrorName","valueErrorName","nameMatch","regexp","window","appliedRegExps","id","canvasGetMethods","canvasRestMethods","htmlElements","svgElements","voidElements","htmlAllowedTagSymbols","htmlAllowedAttrSymbols","regexpSpecialCharacters","RangeError","v","methods","TypeError","a","d","f","r","s","Symbol","chars","word","token","def","ret","Case","case","eventualCases","setPrototypeOf","Function","deep","sum","func","descriptors","property","descriptor","props","getter","isFrozen","replacer","space","unshift","stringify","max","obj","getOwnPropertyDescriptor","getOwnPropertyNames","getOwnPropertySymbols","isContextObject","startKey","setter","reduce","secret","iterator","Promise","executor","reject","hiddenPromise","status","onReject","handled","onUnhandledRejection","onError","resolve","then","onFulfill","hiddenStatus","hiddenValue","realPromise","proxy","onRejected","onFulfilledOrRejected","isFunc","onFulfilled","promise","handle","handler","iterable","toResolve","next","done","console","bind","Func","called","canBeCalled","before","sync","contextLocked","context","middleware","afterAll","beforeAll","bindContext","bindArgs","times","lockContext","lockArgs","argsLocked","mark","time","timeEnd","unbindContext","unbindArgs","toRadian","PI","toDegree","ln2","LN2","ln10","LN10","Num","toDegrees","acos","asin","atan","asDegrees","cos","abort","clearTimeout","timeout","aborted","setTimeout","interval","log","power","pow","sin","tan","rej","fractionDigits","toExponential","toFixed","precision","toPrecision","abs","sqrt","cbrt","ceil","exp","ln","sign","keyOf","keyOfStrict","separator","pop","reverse","randomIndex","begin","compareFunction","sort","deleteCount","URL","progress","reader","FileReader","toReject","onprogress","onerror","onload","anchor","document","createElement","dataURL","setAttribute","click","createObjectURL","htmlSpecials","regexpSpecialsRegexp","searchString","position","revert","startsWith","escaped","symbol","searchValue","fromIndex","lastIndexOf","str","beginSlice","endSlice","substr","indexStart","indexEnd","substring","submitString","nodeSwitcher","InternalParsingError","ParsingError","throwUnexpectedError","globalIndex","elements","eventSeparator","textProperty","Node","propertyDescriptor","inputElements","xmlNS","xlinkNS","xhtmlNS","typeSwitcher","ns","documentElement","namespaceURI","createElementNS","createTextNode","refSwitcher","filterSwitcher","is","innerSwitcher","paddings","borders","outerSwitcher","attrNSSwitcher","list","classList","insertAdjacentHTML","style","sheet","cssRules","rules","toHyphenCase","insertRule","strings","applied","setApplied","np1","attributes","getAttribute","getAttributeNS","setAttributeNS","_this4","load","isBroken","canvas","width","height","drawImage","byteString","atob","ab","ArrayBuffer","ia","Uint8Array","blur","pseudo","getComputedStyle","rule","childNodes","className","cloneNode","contains","appliedExpressions","getPropertyValue","getPropertyPriority","removeProperty","setProperty","cssText","toCamelCase","ctx","dataset","encoderOptions","toDataURL","deleteRule","event","eventInit","details","bubbles","cancelable","finalEvent","Event","createEvent","initEvent","dispatchEvent","focus","selectorText","hasAttribute","hasAttributeNS","currentDisplay","previousDisplay","insertBefore","appendChild","firstChild","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","complete","naturalWidth","naturalHeight","images","all","$elem","removeListeners","proper","broken","nextSibling","events","listeners","removeListener","listener","allListeners","removeEventListeners","has","newListener","addEventListener","removeEventListener","previousSibling","link","removeChild","removeAttribute","removeAttributeNS","2","1","created","txt","_arguments6","hasAttr","hasClass","level","validatorWrap","input","errors","validity","valid","validationMessage","formErrors","form","inputs","dispatch","inputError","every","innerHeight","calcCSS","borderTopWidth","borderBottomWidth","boxSizing","paddingTop","paddingBottom","innerWidth","borderLeftWidth","borderRightWidth","paddingLeft","paddingRight","outerHeight","marginTop","marginBottom","outerWidth","marginLeft","marginRight","win","body","head","inputValue","onEvalError","originalArgs","expression","onChange","instance","forDItem","forDEach","expr","DwayneStore","store","localWatchers","newResult","watcherBlock","index1","index2","arg","DwayneBlock","isParentSignal","beforeRemove","variable","_this3","_this5","local","_this6","Blocks","afterUpdate","Mixins","daysOfTheWeekNames","daysOfTheWeekAliases","monthsNames","monthsAliases","utc","coeffs","getSwitcher","setSwitcher","what","prefix","formats","format","replaceString","date1","date2","isBefore","started","coeff","w","setTime","toISOString","toLocaleString","valueOf","querySwitcher","queryParams","encodeOptions","rawHeaders","notToTransform","withoutBody","indexOfStrict","contentType","defaults","uploadMethods","Fetch","fetch","request","conf","toPush","dataConfig","urlConfig","xhr","auth","username","password","responseType","withCredentials","XMLHttpRequest","open","setRequestHeader","upload","onabort","ontimeout","onreadystatechange","readyState","response","responseText","parseHeaders","getAllResponseHeaders","statusText","catch","send","rawParam","paramName","paramObject","subscribers","history","pathSwitcher","part","escapeRegExp","statics"],"mappings":"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","preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}