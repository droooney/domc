{"version":3,"file":"dwayne.min.js","sources":["../src/utils/array.js","../src/utils/is.js","../src/utils/object.js","../src/utils/defineProperty.js","../src/utils/escapeRegex.js","../src/utils/noop.js","../src/utils/toCase.js","../src/utils/toStringTag.js","../src/helpers/Elem/addAttr.js","../src/helpers/Elem/addCSSProp.js","../src/helpers/Elem/addDataAttr.js","../src/helpers/Elem/addNext.js","../src/helpers/Elem/addParent.js","../src/helpers/Elem/addPrev.js","../src/helpers/Elem/createHideStyleNode.js","../src/helpers/Elem/getAttrNS.js","../src/helpers/Elem/is.js","../src/helpers/Elem/getEvent.js","../src/helpers/Elem/hide.js","../src/helpers/Elem/matches.js","../src/helpers/Elem/remove.js","../src/helpers/Elem/show.js","../src/helpers/Elem/toElem.js","../src/find.js","../src/helpers/Block/calculateArgs.js","../src/helpers/Block/cleanProperty.js","../src/helpers/Block/constructMixinRegex.js","../src/helpers/Block/mixinMatch.js","../src/helpers/Block/transformRestAttrs.js","../src/helpers/Block/executeMixinWatchers.js","../src/helpers/Block/calculateAttrs.js","../src/helpers/Block/normalizeArgs.js","../src/helpers/Block/constructPrivateScope.js","../src/helpers/Block/removeWatcher.js","../src/helpers/Block/constructPublicScope.js","../src/helpers/Block/createBlock.js","../src/helpers/Block/isInstanceOf.js","../src/helpers/Block/remove.js","../src/helpers/Block/wrap.js","../src/mixins/d-style.js","../src/mixins/d-value.js","../src/insertTemplates.js","../src/initApp.js","../src/removeApp.js","../src/utils/objectStatics.js","../src/global.js","../src/constants.js","../src/Elem.js","../src/utils/setSymbolSpecies.js","../src/Mixin.js","../src/Block.js","../src/blocks/d-block.js","../src/blocks/d-item.js","../src/blocks/d-each.js","../src/blocks/d-elements.js","../src/blocks/d-if.js","../src/blocks/d-switch.js","../src/mixins/d-bind.js","../src/mixins/d-class.js","../src/mixins/d-elem.js","../src/mixins/d-hide.js","../src/mixins/d-node.js","../src/mixins/d-on.js","../src/mixins/d-show.js","../src/helpers/Block/registerBuiltins.js","../src/elems.js"],"sourcesContent":["export function collectFromArray(array, callback, initialValue = {}) {\n  iterateArray(array, (value, index) => {\n    callback(initialValue, value, index, array);\n  });\n\n  return initialValue;\n}\n\nexport function findInArray(array, callback) {\n  for (let i = 0, length = array.length; i < length; i++) {\n    const value = array[i];\n\n    if (callback(value, i, array)) {\n      return {\n        key: i,\n        value\n      };\n    }\n  }\n}\n\nexport function iterateArray(array, callback) {\n  for (let i = 0, length = array.length; i < length; i++) {\n    callback(array[i], i, array);\n  }\n}\n\nexport function removeArrayElem(array, elem) {\n  const index = array.indexOf(elem);\n\n  if (index !== -1) {\n    array.splice(index, 1);\n  }\n}\n\nexport function toObjectKeys(array) {\n  return collectFromArray(array, addKey);\n}\n\nfunction addKey(vars, variable) {\n  vars[variable] = true;\n}\n","export const { isArray } = Array;\n\nexport function isFunction(value) {\n  return typeof value === 'function';\n}\n\nexport function isNil(value) {\n  /* eslint-disable eqeqeq */\n  return value == null;\n  /* eslint-enable eqeqeq */\n}\n\nexport function isString(value) {\n  return typeof value === 'string';\n}\n","import { iterateArray } from './array';\n\nconst {\n  hasOwnProperty: has\n} = {};\nconst { slice } = [];\n\nexport function assign(target) {\n  iterateArray(arguments, (source, index) => {\n    if (index) {\n      iterateObject(source, (value, key) => {\n        target[key] = value;\n      });\n    }\n  });\n\n  return target;\n}\n\nexport function collectFromObject(object, callback, initialValue = {}) {\n  iterateObject(object, (value, key) => {\n    callback(initialValue, value, key, object);\n  });\n\n  return initialValue;\n}\n\nexport function except(object) {\n  const newObject = {};\n  const paths = arguments::slice(1);\n\n  iterateObject(object, (value, key) => {\n    if (paths.indexOf(key) === -1) {\n      newObject[key] = value;\n    }\n  });\n\n  return newObject;\n}\n\nexport function hasOwnProperty(object, key) {\n  return object::has(key);\n}\n\nexport function iterateObject(object, callback) {\n  for (const key in object) {\n    if (hasOwnProperty(object, key)) {\n      callback(object[key], key, object);\n    }\n  }\n}\n\nexport function mapObject(object, callback) {\n  const newObject = {};\n\n  iterateObject(object, (value, key) => {\n    newObject[key] = callback(value, key, object);\n  });\n\n  return newObject;\n}\n","import { iterateObject } from './object';\n\nexport const { defineProperties } = Object;\n\nexport function definePrototypeProperties(target, properties) {\n  iterateObject(properties, (value, name) => {\n    Object.defineProperty(target, name, {\n      value,\n      writable: true,\n      enumerable: false,\n      configurable: true\n    });\n  });\n}\n\nexport function defineFrozenProperties(target, properties) {\n  iterateObject(properties, (value, name) => {\n    Object.defineProperty(target, name, {\n      value,\n      writable: false,\n      enumerable: false,\n      configurable: false\n    });\n  });\n}\n","const regexpSpecialCharacters = [\n  '.',\n  '+', '*', '?',\n  '(', ')',\n  '[', ']',\n  '{', '}',\n  '<', '>',\n  '^', '$',\n  '!',\n  '=',\n  ':',\n  '-',\n  '|',\n  ',',\n  '\\\\'\n];\nconst regexpSpecialsRegexp = new RegExp(\n  regexpSpecialCharacters\n    .map((s) => `\\\\${ s }`)\n    .join('|'),\n  'g'\n);\n\nexport function escapeRegex(string) {\n  return string.replace(regexpSpecialsRegexp, '\\\\$&');\n}\n","export function noop() {}\n","const DASHED_SYMBOL_REGEX = /-[a-z]/g;\nconst UPPERCASED_SYMBOL_REGEX = /[A-Z]/g;\n\nexport function toCamelCase(value) {\n  return value.replace(DASHED_SYMBOL_REGEX, capitalize);\n}\n\nexport function toHyphenCase(value) {\n  return value.replace(UPPERCASED_SYMBOL_REGEX, hyphenize);\n}\n\nfunction capitalize(match) {\n  return match[1].toUpperCase();\n}\n\nfunction hyphenize(match) {\n  return `-${ match[0].toLowerCase() }`;\n}\n","import { definePrototypeProperties } from './defineProperty';\nimport { Symbol } from '../constants';\n\nconst { toString } = {};\n\n/**\n * @function toStringTag\n * @param {*} object - Object to get toStringTag of.\n * @returns {String} Cut string.\n * @description Cut \"Type\" string from \"[object Type]\" string that gotten from {}.toString,call(object).\n */\nexport function toStringTag(object) {\n  return object::toString().slice(8, -1);\n}\n\nexport function setToStringTag(klass, tag) {\n  if (Symbol.toStringTag) {\n    definePrototypeProperties(klass.prototype, {\n      [Symbol.toStringTag]: tag\n    });\n  }\n}\n","export function addAttr(attrs, attr) {\n  attrs[attr.name] = attr.value;\n}\n","import { toCamelCase } from '../../utils';\n\nconst CSS_PROP_VALUE_SEPARATOR_REGEX = /: /;\n\nexport function addCSSProp(css, value) {\n  if (value) {\n    const property = value.split(CSS_PROP_VALUE_SEPARATOR_REGEX);\n\n    css[toCamelCase(property[0])] = property[1];\n  }\n}\n","export function addDataAttr(data, value, key) {\n  data[key] = value;\n}\n","export function addNext(add, elem) {\n  add(elem.nextSibling);\n}\n","export function addParent(add, elem) {\n  add(elem.parentNode);\n}\n","export function addPrev(add, elem) {\n  add(elem.previousSibling);\n}\n","import { HIDE_CLASS } from '../../constants';\n\nexport function createHideStyleNode(head) {\n  const style = head.find(`style#${ HIDE_CLASS }`);\n\n  if (style.length) {\n    return;\n  }\n\n  head\n    .create('style')\n    .prop('id', HIDE_CLASS)\n    .text(`.${ HIDE_CLASS }{display:none !important;}`);\n}\n","import { Elem } from '../../Elem';\n\nconst X_LINK_ATTR_FIND_REGEX = /^xlink:\\w/;\nconst X_LINK_ATTR_REPLACE_REGEX = /^xlink:/;\nconst XML_NS = 'http://www.w3.org/2000/xmlns/';\nconst X_LINK_NS = 'http://www.w3.org/1999/xlink';\nconst Null = {\n  ns: null\n};\n\nexport function getAttrNS(attr, elem) {\n  const isXmlNs = attr === 'xmlns';\n\n  if (isXmlNs || attr === 'xmlns:xlink') {\n    if (elem.nodeName !== 'SVG') {\n      return Null;\n    }\n\n    return {\n      ns: XML_NS,\n      name: isXmlNs\n        ? 'xmlns'\n        : 'xlink'\n    };\n  }\n\n  if (X_LINK_ATTR_FIND_REGEX.test(attr)) {\n    if (!new Elem(elem).closest('svg').length) {\n      return Null;\n    }\n\n    return {\n      ns: X_LINK_NS,\n      name: attr.replace(X_LINK_ATTR_REPLACE_REGEX, '')\n    };\n  }\n\n  return Null;\n}\n","import { toStringTag, isArray } from '../../utils';\nimport { Elem } from '../../Elem';\n\nconst HTML_COLLECTION_REGEX = /^(HTMLCollection|NodeList)$/;\nconst DOCUMENT_REGEX = /Document$/;\nconst ELEMENT_REGEX = /Element$/;\n\nexport function isDocument(value) {\n  return DOCUMENT_REGEX.test(toStringTag(value));\n}\n\nexport function isElem(value) {\n  return value instanceof Elem;\n}\n\nexport function isElementsCollection(value) {\n  return (\n    HTML_COLLECTION_REGEX.test(toStringTag(value))\n    || isElem(value)\n    || isArray(value)\n  );\n}\n\nexport function isValidNode(value) {\n  const tag = toStringTag(value);\n\n  return (\n    ELEMENT_REGEX.test(tag)\n    || DOCUMENT_REGEX.test(tag)\n    || tag === 'Text'\n    || tag === 'DocumentFragment'\n    || tag === 'Comment'\n  );\n}\n","import { assign, toStringTag } from '../../utils';\nimport { isDocument } from './is';\n\nconst EVENT_REGEX = /Event$/;\n\nexport function getEvent(event, bubbles, cancelable, realDetails, elem) {\n  let finalEvent = event;\n\n  if (!EVENT_REGEX.test(toStringTag(finalEvent))) {\n    try {\n      finalEvent = new Event(finalEvent, { bubbles, cancelable });\n      assign(finalEvent, realDetails);\n    } catch (err) {\n      const document = isDocument(elem)\n        ? elem\n        : elem.ownerDocument;\n\n      finalEvent = document.createEvent('Event');\n      finalEvent.initEvent(event, bubbles, cancelable);\n\n      assign(finalEvent, realDetails);\n    }\n  }\n\n  return finalEvent;\n}\n","import { createHideStyleNode } from './createHideStyleNode';\nimport { HIDE_CLASS } from '../../constants';\nimport { Elem } from '../../Elem';\n\nexport function hide(elem) {\n  createHideStyleNode(new Elem(elem.ownerDocument.head));\n  new Elem(elem).addClass(HIDE_CLASS);\n}\n","import { isDocument } from './is';\n\nconst { indexOf } = [];\n\nexport function getMatchesFunction(elem) {\n  return (\n    elem.matches\n    || elem.matchesSelector\n    || elem.webkitMatchesSelector\n    || elem.mozMatchesSelector\n    || elem.msMatchesSelector\n    || elem.oMatchesSelector\n    || matches\n  );\n}\n\nfunction matches(selector) {\n  const document = isDocument(this)\n    ? this\n    : this.ownerDocument;\n\n  return document.querySelectorAll(selector)::indexOf(this) !== -1;\n}\n","export function remove(elem) {\n  const parent = elem.parentNode;\n\n  if (parent) {\n    parent.removeChild(elem);\n  }\n}\n","import { HIDE_CLASS } from '../../constants';\nimport { Elem } from '../../Elem';\n\nexport function show(elem) {\n  new Elem(elem).removeClass(HIDE_CLASS);\n}\n","import { isElem } from './is';\nimport { Elem } from '../../Elem';\n\nexport function toElem(elem) {\n  return isElem(elem)\n    ? elem\n    : new Elem(elem);\n}\n","import { Elem } from './Elem';\nimport { document } from './constants';\n\n/**\n * @function find\n * @public\n * @param {String} selector - Selector to find.\n * @param {Element|Node} [base = document] - Base to find in.\n * @returns {Elem} New instance of Elem.\n * @description Synonym for\n * [Document#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Document/querySelectorAll}.\n */\nexport function find(selector, base = document) {\n  return new Elem(base.querySelectorAll(String(selector)));\n}\n","import { iterateArray, iterateObject, keys } from '../../utils';\n\nexport function calculateArgs(normalizedArgs, args, argsObject) {\n  iterateArray(keys(argsObject), (arg) => {\n    if (!(arg in args)) {\n      argsObject[arg] = undefined;\n    }\n  });\n\n  iterateObject(normalizedArgs, (value, arg) => {\n    argsObject[arg] = value;\n  });\n}\n","export function cleanProperty(value, arg, object) {\n  delete object[arg];\n}\n","import { escapeRegex } from '../../utils';\n\nexport function constructMixinRegex(name) {\n  return new RegExp(`^${ escapeRegex(name) }(?:\\\\(([^\\\\)]*)\\\\))?(?:#([\\\\s\\\\S]*))?$`);\n}\n","const COMMA_REGEX = /,/;\n\nexport function mixinMatch(mixins, attr) {\n  let match;\n\n  /* eslint-disable guard-for-in */\n  for (const name in mixins) {\n    const Mixin = mixins[name];\n    const localMatch = attr.match(Mixin._match);\n\n    if (localMatch) {\n      const argsMatch = localMatch[1];\n      let args;\n\n      if (argsMatch === '') {\n        args = [];\n      } else if (argsMatch) {\n        args = argsMatch.split(COMMA_REGEX);\n      }\n\n      match = {\n        args,\n        comment: localMatch[2],\n        Mixin,\n        name\n      };\n\n      break;\n    }\n  }\n  /* eslint-enable guard-for-in */\n\n  return match;\n}\n","import { collectFromObject, assign } from '../../utils';\nimport { D_REST_REGEX } from '../../constants';\nimport { mixinMatch } from './mixinMatch';\n\nexport function transformRestAttrs(attrs, mixins, mixinDefaultOpts) {\n  return collectFromObject(attrs, (eventualAttrs, value, attr) => {\n    if (D_REST_REGEX.test(attr)) {\n      return assign(eventualAttrs, transformRestAttrs(value, mixins, mixinDefaultOpts));\n    }\n\n    const match = mixinMatch(mixins, attr);\n\n    if (match) {\n      eventualAttrs[attr] = {\n        type: 'mixin',\n        dynamic: true,\n        opts: {\n          value,\n          ...match,\n          ...mixinDefaultOpts\n        },\n        value\n      };\n\n      return;\n    }\n\n    eventualAttrs[attr] = {\n      type: 'attr',\n      value\n    };\n  });\n}\n\nexport function transformRestArgs(args) {\n  return collectFromObject(args, addArgs);\n}\n\nfunction addArgs(args, value, arg) {\n  if (D_REST_REGEX.test(arg)) {\n    assign(args, transformRestArgs(value));\n  } else {\n    args[arg] = value;\n  }\n}\n","import { iterateArray } from '../../utils';\n\nexport function executeMixinWatchers(mixin, value) {\n  const oldValue = mixin.$$.value;\n\n  mixin.$$.value = value;\n\n  iterateArray(mixin.$$.watchers, (watcher) => {\n    watcher(value, oldValue);\n  });\n}\n","import { iterateObject, iterateArray } from '../../utils';\nimport { executeMixinWatchers } from './executeMixinWatchers';\n\nexport function calculateAttrs(normalizedAttrs, attrs, attrsObject, elem, firstTime) {\n  iterateObject(attrsObject, ({ type, value }, attr) => {\n    if (!(attr in attrs)) {\n      if (type === 'attr') {\n        elem.removeAttr(attr);\n      } else {\n        value.$$.remove();\n      }\n\n      delete attrsObject[attr];\n    }\n  });\n\n  const mixins = [];\n\n  iterateObject(normalizedAttrs, ({ type, dynamic, value, opts }, attr) => {\n    let nextType;\n    let nextDynamic;\n    let nextValue;\n\n    if (attrsObject[attr]) {\n      const {\n        type: prevType,\n        value: prevValue,\n        dynamic: prevDynamic\n      } = attrsObject[attr];\n\n      if (type === 'attr') {\n        if (prevType === 'mixin') {\n          prevValue.$$.remove();\n        }\n\n        if (prevValue !== value) {\n          elem.attr(attr, value);\n        }\n\n        nextValue = value;\n      } else {\n        let mixin = prevValue;\n        let created;\n\n        if (prevType === 'attr') {\n          elem.removeAttr(attr);\n\n          created = true;\n          opts.dynamic = dynamic;\n          mixin = new opts.Mixin(opts);\n        } else {\n          mixin.$$.isDynamic = dynamic;\n        }\n\n        if (dynamic) {\n          executeMixinWatchers(mixin, value);\n        } else if (!mixin.$$.evaluated && opts.Mixin.evaluate) {\n          const newValue = mixin.$$.parentScope.$$.evaluate(\n            value,\n            constructMixinWatcher(mixin, attr, attrs),\n            mixin\n          );\n\n          mixin.$$.evaluated = true;\n\n          executeMixinWatchers(mixin, newValue);\n        } else if (prevDynamic && opts.Mixin.evaluate) {\n          executeMixinWatchers(mixin, mixin.$$.parentScope.$$.evaluate(value));\n        }\n\n        nextValue = mixin;\n\n        if (created) {\n          mixin.$$.setAfterUpdate();\n        }\n      }\n\n      nextType = type;\n      nextDynamic = dynamic;\n    } else {\n      if (type === 'attr') {\n        elem.attr(attr, value);\n\n        nextValue = value;\n      } else {\n        const buildMixin = () => {\n          opts.dynamic = dynamic;\n\n          const mixin = new opts.Mixin(opts);\n\n          if (!dynamic && opts.Mixin.evaluate) {\n            const {\n              parentScope,\n              value\n            } = opts;\n            const firstValue = parentScope.$$.evaluate(\n              value,\n              constructMixinWatcher(mixin, attr, attrs),\n              mixin\n            );\n\n            mixin.$$.evaluated = true;\n            mixin.$$.value = firstValue;\n          }\n\n          nextValue = mixin;\n          mixin.$$.setAfterUpdate();\n\n          return {\n            attr,\n            opts: {\n              type,\n              dynamic,\n              value: mixin\n            }\n          };\n        };\n\n        if (firstTime) {\n          mixins.push(buildMixin);\n        } else {\n          buildMixin();\n        }\n      }\n\n      nextType = type;\n      nextDynamic = dynamic;\n    }\n\n    attrsObject[attr] = {\n      type: nextType,\n      dynamic: nextDynamic,\n      value: nextValue\n    };\n  });\n\n  if (firstTime) {\n    return () => {\n      iterateArray(mixins, (buildMixin) => {\n        const {\n          attr,\n          opts\n        } = buildMixin();\n\n        attrsObject[attr] = opts;\n      });\n    };\n  }\n}\n\nfunction constructMixinWatcher(mixin, attr, attrs) {\n  return function (newValue) {\n    const {\n      type,\n      dynamic\n    } = attrs[attr];\n\n    if (type === 'mixin' && !dynamic) {\n      executeMixinWatchers(mixin, newValue);\n    }\n  };\n}\n","import { iterateArray, iterateObject } from '../../utils';\n\nexport function normalizeArgs(argsChain) {\n  const newArgs = {};\n\n  iterateArray(argsChain, (args) => {\n    iterateObject(args, (value, arg) => {\n      newArgs[arg] = value;\n    });\n  });\n\n  return newArgs;\n}\n","import { create, collectFromObject } from '../../utils';\n\nexport function constructPrivateScope(object, type, parentScope) {\n  let scope = {};\n\n  if (type === 'globals') {\n    scope = create(\n      parentScope\n        ? parentScope.$$.globals\n        : null\n    );\n  }\n\n  return collectFromObject(object, (scope, value, key) => {\n    scope[key] = {\n      value,\n      watchers: []\n    };\n  }, scope);\n}\n","import { removeArrayElem, iterateArray } from '../../utils';\n\nexport function removeTempWatcher(watcher) {\n  watcher();\n}\n\nexport function removeWatchers(watchersToRemove) {\n  iterateArray(watchersToRemove, removeWatcher);\n}\n\nfunction removeWatcher({ watcher, watchers }) {\n  removeArrayElem(watchers, watcher);\n}\n","import { defineProperties, mapObject, iterateArray } from '../../utils';\nimport { gettingVars, evalMode } from '../../Block';\nimport { removeTempWatcher } from './removeWatcher';\n\nexport function constructPublicScope(scope, scopeValues, privateScope) {\n  defineProperties(scope, mapObject(scopeValues, (value, key) => {\n    const scope = privateScope[key];\n\n    return {\n      configurable: false,\n      enumerable: true,\n      get() {\n        if (evalMode) {\n          if (gettingVars.indexOf(scope.watchers) === -1) {\n            gettingVars.push(scope.watchers);\n          }\n        }\n\n        return scope.value;\n      },\n      set(value) {\n        if (value === scope.value) {\n          return;\n        }\n\n        const oldTempWatchers = scope.watchers.slice();\n\n        scope.watchers = [];\n        scope.value = value;\n\n        iterateArray(oldTempWatchers, removeTempWatcher);\n      }\n    };\n  }));\n}\n","import {\n  except, create, assign,\n  iterateObject, iterateArray,\n  isNil\n} from '../../utils';\nimport { isDocument } from '../Elem';\nimport { Elem } from '../../Elem';\nimport {\n  SVG_NS, D_REST_REGEX\n} from '../../constants';\nimport { cleanProperty } from './cleanProperty';\nimport { transformRestAttrs } from './transformRestAttrs';\nimport { calculateAttrs } from './calculateAttrs';\nimport { normalizeArgs } from './normalizeArgs';\nimport { mixinMatch } from './mixinMatch';\nimport { constructPrivateScope } from './constructPrivateScope';\nimport { constructPublicScope } from './constructPublicScope';\nimport { Block } from '../../Block';\n\nconst NAMED_D_BLOCK_REGEX = /^d-block:([\\s\\S]+)$/;\nconst emptyArray = [];\n\nexport function createBlock({ node, parent, parentElem, parentBlock, parentScope, parentTemplate, prevBlock }) {\n  const doc = isDocument(parentElem[0])\n    ? parentElem\n    : new Elem(parentElem[0].ownerDocument);\n  const elem = parentElem[0].namespaceURI === SVG_NS\n    ? doc.create('svg')\n    : doc;\n  const localBlocks = parentTemplate ? parentTemplate.$$.ns._blocks : Block._blocks;\n  const localMixins = parentTemplate ? parentTemplate.$$.ns._mixins : Block._mixins;\n  const args = node.attrs || {};\n  const name = node.name || 'UnknownBlock';\n  let { children } = node;\n  let constructor = node.Constructor || (node.name && localBlocks[node.name]);\n  let dBlockMatch;\n  let dBlockName;\n  let dBlockArgs;\n\n  if (name === 'd-block' && args.name) {\n    dBlockArgs = except(args, 'name');\n  } else if (name === 'd-block' && args.Constructor) {\n    dBlockArgs = except(args, 'Constructor');\n  } else if ((dBlockMatch = name.match(NAMED_D_BLOCK_REGEX)) || name === 'd-block') {\n    constructor = Block._blocks['d-block'];\n    dBlockName = dBlockMatch ? dBlockMatch[1] : null;\n  }\n\n  let blockInstance;\n\n  if (constructor) {\n    try {\n      blockInstance = new constructor({\n        name,\n        args,\n        dBlockName,\n        dBlockArgs,\n        children,\n        parent,\n        parentElem,\n        parentBlock,\n        parentScope,\n        parentTemplate,\n        prevBlock\n      });\n    } catch (err) {\n      console.error(`Uncaught error in new ${ name }:`, err);\n      constructor = null;\n    }\n  }\n\n  if (!constructor) {\n    const { value } = node;\n\n    const element = elem.create(name);\n    const currentAttrs = create(null);\n    let attrs = create(null);\n    let wasDRest;\n    const attrsChain = [attrs];\n    const mixinDefaultOpts = {\n      elem: element,\n      parentBlock,\n      parentScope,\n      parentTemplate\n    };\n\n    iterateObject(args, (value, attr) => {\n      const isDRest = D_REST_REGEX.test(attr);\n      const localAttrs = isDRest || wasDRest\n        ? create(attrs)\n        : attrs;\n\n      if (attrs !== localAttrs) {\n        attrsChain.push(localAttrs);\n      }\n\n      attrs = localAttrs;\n\n      if (isDRest) {\n        const restAttrs = parentScope.$$.evaluate(value, (value) => {\n          iterateObject(localAttrs, cleanProperty);\n          assign(localAttrs, transformRestAttrs(\n            value,\n            localMixins,\n            mixinDefaultOpts\n          ));\n          calculateAttrs(normalizeArgs(attrsChain), attrs, currentAttrs, element, false);\n        }, parentBlock);\n\n        wasDRest = true;\n\n        return assign(localAttrs, transformRestAttrs(\n          restAttrs, localMixins, mixinDefaultOpts\n        ));\n      }\n\n      const match = mixinMatch(localMixins, attr);\n\n      wasDRest = false;\n\n      if (match) {\n        localAttrs[attr] = {\n          type: 'mixin',\n          dynamic: false,\n          opts: {\n            value,\n            ...match,\n            ...mixinDefaultOpts\n          },\n          value\n        };\n\n        return;\n      }\n\n      localAttrs[attr] = {\n        type: 'attr',\n        value: parentScope.$$.evaluate(value, (value) => {\n          localAttrs[attr] = {\n            type: 'attr',\n            value\n          };\n          calculateAttrs(normalizeArgs(attrsChain), attrs, currentAttrs, element, false);\n        }, parentBlock)\n      };\n    });\n\n    parentBlock.$$.mixinsToBuild.push(calculateAttrs(normalizeArgs(attrsChain), attrs, currentAttrs, element, true));\n\n    if (name === '#comment') {\n      element.text(value);\n    }\n\n    if (name === '#text') {\n      let text = parentScope.$$.evaluate(value, (value) => {\n        if (isNil(value)) {\n          value = '';\n        }\n\n        element.text(`${ value }`);\n      }, parentBlock);\n\n      if (isNil(text)) {\n        text = '';\n      }\n\n      element.text(`${ text }`);\n    }\n\n    const isParentBlock = parent instanceof Block;\n    const childBlocks = [];\n\n    /* istanbul ignore if */\n    if (name === 'iframe' && !('src' in attrs)) {\n      element.on('load', () => {\n        const document = element[0].contentDocument;\n        const doc = new Elem(document);\n\n        new Elem(document.documentElement).remove();\n        iterateChildren(childBlocks, true);\n\n        function iterateChildren(children, isRoot) {\n          iterateArray(children, (child) => {\n            if (child instanceof Block) {\n              if (isRoot) {\n                child.$$.parentElem = doc;\n                child.$$.parent = doc;\n                child.$$.content.into(doc);\n              }\n\n              iterateChildren(child.$$.children, false);\n            } else {\n              child.into(doc);\n            }\n          });\n        }\n      });\n    }\n\n    if (prevBlock instanceof Block) {\n      prevBlock.$$.insertAfterIt(element, false);\n    } else if (prevBlock) {\n      element.insertAfter(prevBlock);\n\n      if (isParentBlock) {\n        parent.$$.addContent(element);\n      }\n    } else if (isParentBlock) {\n      parent.$$.insertInStartOfIt(element, false);\n    } else {\n      element.into(parentElem, false);\n    }\n\n    if (children) {\n      let prevBlock;\n      let parentElem = element;\n\n      /* istanbul ignore if */\n      if (name === 'template') {\n        parentElem = new Elem(element[0].content = element[0].content || doc[0].createDocumentFragment());\n      } else if (name === 'iframe') {\n        if ('src' in attrs) {\n          children = emptyArray;\n        } else {\n          const document = element[0].contentDocument;\n\n          new Elem(document.documentElement).remove();\n\n          parentElem = new Elem(document);\n        }\n      }\n\n      iterateArray(children, (child) => {\n        prevBlock = createBlock({\n          node: child,\n          parent: parentElem,\n          parentElem,\n          parentBlock,\n          parentScope,\n          parentTemplate,\n          prevBlock\n        });\n        childBlocks.push(prevBlock);\n      });\n    }\n\n    return element;\n  }\n\n  const {\n    $$,\n    args: Args,\n    globals,\n    ...locals\n  } = blockInstance;\n\n  const html = name === 'd-elements'\n    ? Args.value || []\n    : constructor.template.value || constructor.template;\n\n  $$.args = constructPrivateScope(Args);\n  $$.locals = constructPrivateScope(locals);\n  $$.globals = constructPrivateScope(globals, 'globals', parentScope);\n\n  if (name === '#d-item') {\n    const scopeValues = {\n      [node.itemName]: node.item,\n      [node.indexName]: node.index\n    };\n    const scope = parentScope.$$.name === '#d-item'\n      ? parentScope.$$.scope\n      : parentScope;\n\n    $$.ns = parentScope.$$.ns;\n    $$.privateScope = constructPrivateScope(scopeValues);\n    constructPublicScope($$.scope = create(scope), scopeValues, $$.privateScope);\n  }\n\n  constructPublicScope(Args, Args, $$.args);\n  constructPublicScope(globals, globals, $$.globals);\n  constructPublicScope(blockInstance, locals, $$.locals);\n\n  try {\n    blockInstance.afterConstruct();\n  } catch (err) {\n    console.error(`Uncaught error in ${ name }#afterConstruct:`, err);\n  }\n\n  prevBlock = undefined;\n  parentScope = name === 'd-elements'\n    ? Args.parentScope\n    : blockInstance;\n  parentTemplate = name === 'd-elements'\n    ? Args.parentTemplate\n    : blockInstance;\n\n  iterateArray(html, (child) => {\n    prevBlock = createBlock({\n      node: child,\n      parent: blockInstance,\n      parentElem,\n      parentBlock: blockInstance,\n      parentScope,\n      parentTemplate,\n      prevBlock\n    });\n  });\n\n  blockInstance.$$.isRendered = true;\n\n  iterateArray(blockInstance.$$.mixinsToBuild, (executeBuilders) => {\n    executeBuilders();\n  });\n  blockInstance.$$.mixinsToBuild = [];\n\n  try {\n    blockInstance.afterRender();\n  } catch (err) {\n    console.error(`Uncaught error in ${ name }#afterRender:`, err);\n  }\n\n  return blockInstance;\n}\n","const { isPrototypeOf } = {};\n\nexport function isInstanceOf(Class, Subclass) {\n  return Class::isPrototypeOf(Subclass) && Class.prototype::isPrototypeOf(Subclass.prototype);\n}\n","export function removeWithParentSignal(child) {\n  child.$$.remove(true);\n}\n\nexport function remove(child) {\n  child.$$.remove();\n}\n","import { isInstanceOf } from './isInstanceOf';\nimport { Block } from '../../Block';\nimport { Mixin } from '../../Mixin';\n\nexport function wrapBlock(block, wrapper) {\n  const returnValue = wrapper(block);\n\n  return isInstanceOf(Block, returnValue)\n    ? returnValue\n    : block;\n}\n\nexport function wrapMixin(mixin, wrapper) {\n  const returnValue = wrapper(mixin);\n\n  return isInstanceOf(Mixin, returnValue)\n    ? returnValue\n    : mixin;\n}\n","import {\n  isString, iterateObject, keys,\n  collectFromObject, collectFromArray\n} from '../utils';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nconst CSS_STYLES_SEPARATOR_REGEX = /\\s*;\\s*/;\nconst CSS_STYLE_SEPARATOR_REGEX = /\\s*:\\s*/;\n\nrootMixins['d-style'] = class DStyle extends Mixin {\n  css = {};\n\n  afterUpdate(newValue, oldValue) {\n    const {\n      elem,\n      args,\n      css\n    } = this;\n\n    if (args) {\n      newValue = collectFromObject(args, (css, prop) => {\n        css[prop] = newValue;\n      });\n    }\n\n    if (isString(newValue)) {\n      newValue = collectFromArray(\n        newValue\n          .split(CSS_STYLES_SEPARATOR_REGEX)\n          .filter(Boolean)\n          .map(constructStyleFromString),\n        addCSSProp\n      );\n    }\n\n    iterateObject(css, (value, prop) => {\n      if (!newValue[prop]) {\n        elem.removeCSS(prop);\n      }\n    });\n    elem.css(newValue);\n\n    this.css = newValue;\n  }\n\n  beforeRemove(isElementRemoved) {\n    if (!isElementRemoved) {\n      const {\n        elem,\n        css\n      } = this;\n\n      elem.removeCSS.apply(elem, keys(css));\n    }\n  }\n};\n\nfunction addCSSProp(css, item) {\n  const [prop, value] = item;\n\n  css[prop] = value;\n}\n\nfunction constructStyleFromString(style) {\n  const split = style.split(CSS_STYLE_SEPARATOR_REGEX);\n\n  return [\n    split[0].trim(),\n    split[1].trim()\n  ];\n}\n","import {\n  isFunction, isNil,\n  collectFromArray\n} from '../utils';\nimport { Block } from '../Block';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-value'] = class DValue extends Mixin {\n  static evaluate = false;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      args,\n      parentTemplate,\n      elem\n    } = this;\n    const name = elem.name();\n    const type = elem.prop('type');\n    const value = this.evaluate();\n    let initialScopeValue = null;\n\n    this.prop = getProp(name, type, elem);\n    this.name = name;\n    this.type = type;\n    this.value = value;\n    this.options = elem.children().filter('option');\n    this.scope = parentTemplate;\n\n    if (args) {\n      this.scope = value instanceof Block\n        ? value\n        : parentTemplate;\n      this.value = args[0];\n    }\n\n    if (!isFunction(this.value)) {\n      initialScopeValue = this.scope.$$.evaluate((scope) => scope[this.value], (newValue) => {\n        if (this.currentValue !== newValue) {\n          this.currentValue = newValue;\n          this.setProp(newValue);\n        }\n      }, this);\n    }\n\n    const initialElemValue = this.getProp(initialScopeValue, true);\n    const isInitialScopeValueNull = isNil(initialScopeValue);\n    const isCheckbox = type === 'checkbox';\n    const changeScope = () => {\n      this.currentValue = this.getProp(this.currentValue, false);\n      this.changeScope();\n    };\n\n    if (isInitialScopeValueNull || isCheckbox) {\n      this.currentValue = initialElemValue;\n      this.changeScope();\n\n      if (!isInitialScopeValueNull && isCheckbox) {\n        this.setProp(initialScopeValue);\n      }\n    } else {\n      this.currentValue = initialScopeValue;\n      this.setProp(initialScopeValue);\n    }\n\n    this.offElemListener = elem.on(getListenerName(name, type), changeScope);\n    this.offFormListener = elem.closest('form').on('reset', () => {\n      setTimeout(changeScope, 0);\n    });\n  }\n\n  changeScope() {\n    const {\n      scope,\n      value,\n      currentValue\n    } = this;\n\n    if (isFunction(value)) {\n      value(currentValue);\n    } else {\n      scope[value] = currentValue;\n    }\n  }\n\n  setProp(value) {\n    const {\n      elem,\n      name,\n      prop,\n      type,\n      node,\n      options\n    } = this;\n\n    if (prop === 'text') {\n      elem.text(value);\n    } else if (prop === 'multiple-select') {\n      options.forEach((option) => {\n        option.selected = value.indexOf(option.value) !== -1;\n      });\n    } else {\n      elem.prop(prop, getValueForSetting(name, value, type, node.value));\n    }\n  }\n\n  getProp(values, init) {\n    const {\n      elem,\n      name,\n      prop,\n      type,\n      node,\n      options\n    } = this;\n\n    return prop === 'text'\n      ? elem.text()\n      : getValueForGetting(name, elem.prop(prop), type, node.value, values, options, init, prop === 'multiple-select');\n  }\n\n  beforeRemove(isElementRemoved) {\n    if (!isElementRemoved) {\n      this.offElemListener();\n    }\n\n    this.offFormListener();\n  }\n};\n\nfunction getProp(name, type, elem) {\n  switch (name) {\n    case 'select': {\n      return elem.hasAttr('multiple')\n        ? 'multiple-select'\n        : 'value';\n    }\n\n    case 'input': {\n      if (type === 'file') {\n        return 'files';\n      }\n\n      return type === 'radio' || type === 'checkbox'\n        ? 'checked'\n        : 'value';\n    }\n\n    default: {\n      return elem.hasAttr('contentEditable')\n        ? 'text'\n        : 'value';\n    }\n  }\n}\n\nfunction getValueForSetting(name, value, type, inputValue) {\n  if (name !== 'input') {\n    return value;\n  }\n\n  const isRadio = type === 'radio';\n\n  if (!isRadio && type !== 'checkbox') {\n    return value;\n  }\n\n  return isRadio\n    ? value === inputValue\n    : value.indexOf(inputValue) !== -1;\n}\n\nfunction getValueForGetting(name, value, type, inputValue, values, options, init, isMultiple) {\n  switch (name) {\n    case 'select': {\n      if (!isMultiple) {\n        return value;\n      }\n\n      return collectFromArray(options, addValue, []);\n    }\n\n    case 'input': {\n      if (type !== 'radio' && type !== 'checkbox') {\n        return value;\n      }\n\n      if (type === 'radio') {\n        return value\n          ? inputValue\n          : null;\n      }\n\n      values = values || [];\n\n      if (!value && init) {\n        return values;\n      }\n\n      if (value) {\n        return values.indexOf(inputValue) === -1\n          ? values.concat(inputValue)\n          : values;\n      }\n\n      const index = values.indexOf(inputValue);\n\n      if (index !== -1) {\n        return [\n          ...values.slice(0, index),\n          ...values.slice(index + 1)\n        ];\n      }\n\n      return values;\n    }\n\n    default: {\n      return value;\n    }\n  }\n}\n\nfunction getListenerName(name, type) {\n  switch (name) {\n    case 'select': {\n      return 'change';\n    }\n\n    case 'input': {\n      return (\n        type === 'radio'\n        || type === 'checkbox'\n        || type === 'color'\n        || type === 'file'\n      )\n        ? 'change'\n        : 'change input';\n    }\n\n    default: {\n      return 'input';\n    }\n  }\n}\n\nfunction addValue(values, { selected, value }) {\n  if (selected && values.indexOf(value) === -1) {\n    values.push(value);\n  }\n}\n","import {\n  toObjectKeys,\n  assign, keys, create\n} from './utils';\n\nexport function insertTemplates(template, templates) {\n  const {\n    vars,\n    value\n  } = template;\n  const newTemplates = create(null);\n  const newVars = toObjectKeys(vars);\n\n  assign(newTemplates, templates);\n  iterateAndChangeChildren(value);\n\n  function iterateAndChangeChildren(nodes = []) {\n    for (let i = 0; i < nodes.length; i++) {\n      const {\n        name,\n        value,\n        children\n      } = nodes[i];\n\n      if (name === '#comment') {\n        const trimmed = value.trim();\n\n        if (newTemplates[trimmed]) {\n          const newTemplate = newTemplates[trimmed].value;\n\n          nodes.splice(i, 1, ...newTemplate);\n          assign(newVars, toObjectKeys(newTemplates[trimmed].vars));\n\n          i += newTemplate.length - 1;\n        }\n      } else {\n        iterateAndChangeChildren(children);\n      }\n    }\n  }\n\n  vars.length = 0;\n  vars.push(...keys(newVars));\n\n  return template;\n}\n","import { isArray, isString } from './utils';\nimport { createBlock, isInstanceOf } from './helpers/Block';\nimport { Block } from './Block';\nimport { Elem } from './Elem';\n\n/**\n * @function initApp\n * @public\n * @param {Template|ScopelessTemplate|String|typeof Block} block - Root template (may be scopeless),\n * string defining a name of the root block or a block subclass.\n * @param {Elem|Element} container - Container of the app.\n * @returns {Block|void} Root block if the app has benn registered and undefined if not.\n * @description Method for initializing app.\n *\n * @example\n * import { initApp, doc } from 'dwayne';\n *\n * initApp(html`<App/>`, doc.create('div'));\n * initApp(htmlScopeless`<App/>`, doc.create('div'));\n * initApp('App', doc.create('div'));\n * initApp(App, doc.create('div'));\n */\nexport function initApp(block, container) {\n  const parentElem = new Elem(container).elem(0);\n  let Constructor = block;\n\n  if (!parentElem.length) {\n    console.error('No valid element to insert the app into was given! (initApp)');\n\n    return;\n  }\n\n  if (parentElem.prop('DwayneRootBlock')) {\n    console.error('There already exists a Dwayne app inside the given element! (initApp)');\n\n    return;\n  }\n\n  if (isString(block)) {\n    Constructor = class RootBlock extends Block {\n      static template = {\n        vars: [],\n        value: [{\n          name: block\n        }]\n      };\n    };\n  }\n\n  if (isArray(block)) {\n    Constructor = class RootBlock extends Block {\n      static template = {\n        vars: [],\n        value: block\n      };\n    };\n  }\n\n  if (block && !isInstanceOf(Block, block) && isArray(block.vars) && isArray(block.value)) {\n    Constructor = class RootBlock extends Block {\n      static template = block;\n    };\n  }\n\n  if (!isInstanceOf(Block, Constructor)) {\n    console.error('No valid root block to insert the app into was given! (initApp)');\n\n    return;\n  }\n\n  const rootBlock = createBlock({\n    node: {\n      name: '#RootBlock',\n      Constructor\n    },\n    parent: parentElem,\n    parentElem\n  });\n\n  parentElem\n    .prop('DwayneRootBlock', rootBlock)\n    .attr('dwayne-root', '');\n\n  return rootBlock;\n}\n","import { Block } from './Block';\nimport { Elem } from './Elem';\n\n/**\n * @function removeApp\n * @public\n * @param {Elem|Element} container - Container of the app.\n * @returns {void}\n * @description Method for removing app.\n *\n * @example\n * import { removeApp, find } from 'dwayne';\n *\n * removeApp(find('.root'));\n */\nexport function removeApp(container) {\n  const elem = new Elem(container).elem(0);\n\n  if (!elem.length) {\n    console.error('No valid element to remove the app from was given! (removeApp)');\n\n    return;\n  }\n\n  container = elem[0];\n\n  const { DwayneRootBlock } = container;\n\n  if (!(DwayneRootBlock instanceof Block)) {\n    console.error('No app registered inside the given element! (removeApp)');\n\n    return;\n  }\n\n  DwayneRootBlock.$$.remove();\n  elem.removeAttr('dwayne-root');\n\n  delete container.DwayneRootBlock;\n}\n","export const {\n  create,\n  keys,\n  getPrototypeOf: getProto\n} = Object;\n\nexport const setProto = Object.setPrototypeOf || ((target, proto) => {\n  /* eslint-disable no-proto */\n  target.__proto__ = proto;\n  /* eslint-enable no-proto */\n});\n","/* eslint-disable no-nested-ternary */\n/* eslint-disable no-negated-condition */\nexport default typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n/* eslint-enable no-nested-ternary */\n/* eslint-enable no-negated-condition */\n","import { create } from './utils/objectStatics';\n\nexport const HIDE_CLASS = '__dwayne-hidden__';\nexport const SVG_NS = 'http://www.w3.org/2000/svg';\nexport const D_REST_REGEX = /^d-rest(?:#|$)/;\n\nexport const rootBlocks = create(null);\nexport const rootMixins = create(null);\nexport const {\n  document = {},\n  Symbol = {}\n} = global;\n","import {\n  isNil, isString,\n  definePrototypeProperties,\n  collectFromArray, collectFromObject,\n  iterateArray, iterateObject,\n  toHyphenCase, setSymbolSpecies,\n  setToStringTag, setProto\n} from './utils';\nimport {\n  isDocument, isValidNode, getMatchesFunction,\n  addAttr, addCSSProp, addDataAttr,\n  addNext, addParent, addPrev,\n  toElem, isElementsCollection,\n  getAttrNS, getEvent, hide, show, remove\n} from './helpers/Elem';\nimport { SVG_NS } from './constants';\nimport { find } from './find';\n\n/**\n * @typedef {String} ElemEventString\n * @public\n * @description A string containing events separated by a comma with zero or more spaces or just spaces.\n */\n\n/**\n * @callback ElemListener\n * @public\n * @param {Event} e - Fired event.\n * @param {Element} elem - Element on which the listener was called.\n * @param {Number} index - Index of the element on which the listener was called.\n */\n\n/**\n * @callback ElemRemoveListeners\n * @public\n * @param {...ElemEventString} events - If at least one argument present only removes event listeners specified\n * by the events in the arguments.\n */\n\n/**\n * @callback IterationCallback\n * @public\n * @param {Element|Node} node - Iteration element.\n * @param {Number} index - Iteration index.\n * @param {Elem} elem - Initial set.\n */\n\n/**\n * @callback CollectCallback\n * @public\n * @param {AddCallback} add - Add element to the eventual set function.\n * @param {Element|Node} node - Iteration element.\n * @param {Number} index - Iteration index.\n * @param {Elem} elem - Initial set.\n */\n\n/**\n * @callback AddCallback\n * @public\n * @param {...(Element|Node|elem)} elem - Element to add.\n */\n\n/**\n * @callback ElemMethod\n * @public\n * @this Elem\n */\n\nconst EVENT_SEPARATOR_REGEX = /[,| ] */;\nconst CSS_STYLES_SEPARATOR_REGEX = /; ?/;\nconst CSS_IMPORTANT_REGEX = / ?!important$/;\nconst emptyCollection = [];\n\n/**\n * @class Elem\n * @extends Array.<Element|Node>\n * @public\n * @param {Element|Element[]} [elem = []] - An element or an array of elements to wrap.\n * @returns {Elem} Instance of Elem.\n * @description Wrap of an elements set.\n *\n * @example\n * new Elem(document.body);\n * new Elem(document.querySelectorAll('.cls'));\n * new Elem(document.getElementsByClassName('cls'));\n */\nclass Elem extends Array {\n  /**\n   * @function Elem.addMethods\n   * @public\n   * @param {String|Object.<String, ElemMethod>} methodName - Name of the method or object of\n   * method names and methods.\n   * @param {ElemMethod} [method] - If the first argument is a string this should be the method itself.\n   * @returns {typeof Elem}\n   */\n  static addMethods(methodName, method) {\n    if (arguments.length >= 2) {\n      methodName = { [methodName]: method };\n    }\n\n    definePrototypeProperties(this.prototype, methodName);\n\n    return this;\n  }\n\n  constructor(elem = emptyCollection) {\n    super();\n\n    if (!isElementsCollection(elem)) {\n      elem = [elem];\n    }\n\n    setProto(this, Elem.prototype);\n\n    iterateArray(elem, (elem) => {\n      if (!isElementsCollection(elem)) {\n        elem = [elem];\n      }\n\n      iterateArray(elem, (elem) => {\n        if (!this.includes(elem) && isValidNode(elem)) {\n          this.push(elem);\n        }\n      });\n    });\n  }\n\n  /**\n   * @function Elem#add\n   * @public\n   * @param {...(Elem|Element|Element[])} elements - Each argument is a Elem, or Element, or array of Elements.\n   * @returns {Elem} Returns this.\n   * @description Method for adding new elements to the set.\n   *\n   * @example\n   * elem1.find('.cls1')\n   *   .add(elem2.find('.cls2'))\n   *   .hide();\n   */\n  add(...elements) {\n    const elems = this.slice();\n\n    iterateArray(elements, (elem) => {\n      if (!isElementsCollection(elem)) {\n        elem = [elem];\n      }\n\n      iterateArray(elem, (elem) => {\n        if (!elems.includes(elem) && isValidNode(elem)) {\n          elems.push(elem);\n        }\n      });\n    });\n\n    return elems;\n  }\n\n  /**\n   * @function Elem#addClass\n   * @public\n   * @param {...String} classes - Classes to add.\n   * @returns {Elem} Returns this.\n   * @description Method for adding classes to the all the elements in the set.\n   *\n   * @example\n   * elem.addClass('red', 'round');\n   */\n  addClass(...classes) {\n    return this.forEach((elem) => {\n      const list = elem.classList;\n\n      iterateArray(classes, (cls) => list.add(cls));\n    });\n  }\n\n  /**\n   * @function Elem#attr\n   * @public\n   * @param {String|Object.<String, String>} [attr] - Name of the attribute to get or\n   * an object of the format { [attrName]: value, ... } to set attributes.\n   * @param {String} [value] - If the first argument is a string\n   * it should be a value to set for that attribute.\n   * @returns {Object|String|Elem} If no arguments passed, D-Wrap of attributes of the first element in the set\n   * returned, if 1 string argument is passed the value of the attribute of the first element in the set\n   * returned otherwise returns this.\n   * @description Method for getting/setting attributes.\n   *\n   * @example\n   * elem.attr('attr1', 'value1'); // attribute attr1 set to 'value1' and this returned\n   * elem.attr('attr1');           // 'value1'\n   * elem.attr({\n   *   attr1: 'value3',            // attribute attr1 set to 'value3'\n   *   attr2: 'value2'             // attribute attr2 set to 'value2'\n   * });                           // this returned\n   * elem.attr();                  // { attr1: 'value3', attr2: 'value2' }\n   */\n  attr(attr, value) {\n    const elem = this[0];\n\n    if (!arguments.length) {\n      if (!elem) {\n        return {};\n      }\n\n      return collectFromArray(elem.attributes, addAttr);\n    }\n\n    if (arguments.length <= 1 && isString(attr)) {\n      if (!elem) {\n        return null;\n      }\n\n      const {\n        ns,\n        name\n      } = getAttrNS(attr, elem);\n\n      return ns\n        ? elem.getAttributeNS(ns, name)\n        : elem.getAttribute(attr);\n    }\n\n    if (arguments.length >= 2) {\n      attr = { [attr]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(attr, (value, key) => {\n        if (isNil(value) || value === false) {\n          return new Elem(elem).removeAttr(key);\n        }\n\n        value = value === true ? '' : value;\n\n        const { ns } = getAttrNS(key, elem);\n\n        if (ns) {\n          elem.setAttributeNS(ns, key, value);\n        } else {\n          elem.setAttribute(key, value);\n        }\n      });\n    });\n  }\n\n  /**\n   * @function Elem#children\n   * @public\n   * @returns {Elem} D-Wrap of the children of the first element in the set.\n   * @description Method for getting element's children.\n   *\n   * @example\n   * const children = elem.children();\n   */\n  children() {\n    return new Elem(this.length ? this[0].childNodes : []);\n  }\n\n  /**\n   * @function Elem#closest\n   * @public\n   * @param {String} selector - See the link.\n   * @returns {Elem} Set of the closest elements.\n   * @description Synonym for\n   * [Element#closest]{@link https://developer.mozilla.org/en/docs/Web/API/Element/closest}.\n   */\n  closest(selector) {\n    return this.collect((add, elem) => {\n      while (elem) {\n        if (new Elem(elem).is(selector)) {\n          return add(elem);\n        }\n\n        elem = elem.parentNode;\n      }\n    });\n  }\n\n  /**\n   * @function Elem#collect\n   * @public\n   * @param {CollectCallback} callback - Called on each iteration.\n   * @returns {Elem} Returns eventual set.\n   * @description Method for collecting elements into a new set.\n   *\n   * @example\n   * const parents = elem.collect((add, elem) => {\n   *   add(elem.parentNode);\n   * });\n   */\n  collect(callback) {\n    const elements = [];\n    const cb = ::elements.push;\n\n    this.forEach((elem, index) => {\n      callback(cb, elem, index, this);\n    });\n\n    return new Elem(elements);\n  }\n\n  /**\n   * @function Elem#contains\n   * @public\n   * @param {Elem|Element} element - Element to find out if it's within the first element in the set.\n   * @returns {Boolean} Returns if the argument within this element.\n   * @description Method is extension for\n   * [Node#contains]{@link https://developer.mozilla.org/en/docs/Web/API/Node/contains}.\n   *\n   * @example\n   * elem.contains(elem2);   // true|false\n   */\n  contains(element) {\n    const parent = this[0];\n    const child = toElem(element)[0];\n\n    return !parent || !child\n      ? false\n      : parent.contains(child);\n  }\n\n  /**\n   * @function Elem#create\n   * @public\n   * @param {String} type - Type of created element. If type is \"#text\" a text node is created.\n   * If type is \"#comment\" a comment node is created.\n   * @returns {Elem} New instance of Elem - wrap of the created elements.\n   * @description Method for creating elements inside this element.\n   * If this element is not an Element the element is just created.\n   *\n   * @example\n   * elem.create('div');\n   */\n  create(type) {\n    return this.collect((add, elem) => {\n      let el = null;\n      const isText = type === '#text';\n      const document = isDocument(elem)\n        ? elem\n        : elem.ownerDocument;\n\n      if (isText || type === '#comment') {\n        el = isText\n          ? document.createTextNode('')\n          : document.createComment('');\n      } else {\n        el = type === 'svg'\n          ? document.createElementNS(SVG_NS, type)\n          : document.createElement(type);\n      }\n\n      if (!isDocument(elem)) {\n        new Elem(el).into(elem);\n      }\n\n      add(el);\n    });\n  }\n\n  /**\n   * @function Elem#css\n   * @public\n   * @param {String|Object.<String, String>} [property] - Name of the property to get or\n   * an object of the format { [property]: value, ... } to set styles.\n   * @param {String} [value] - If the first argument is a string it should be a value to set for that property.\n   * @returns {Object|String|Elem} If no arguments passed, D-Wrap of css styles of the element returned,\n   * if 1 string argument is passed the value of the property returned otherwise returns this.\n   * @description Method for getting/setting styles. Supports !important.\n   *\n   * @example\n   * elem.css('display', 'none'); // display set to 'none' and this returned\n   * elem.css('display');         // 'none'\n   * elem.css({\n   *   display: 'inline',         // display set to 'inline'\n   *   cursor: 'pointer'          // cursor set to 'pointer'\n   * });                          // this returned\n   * elem.css();                  // { display: 'none', cursor: 'pointer' }\n   */\n  css(property, value) {\n    const { style } = this[0] || {};\n\n    if (!arguments.length) {\n      if (!style) {\n        return {};\n      }\n\n      return collectFromArray(style.cssText.split(CSS_STYLES_SEPARATOR_REGEX), addCSSProp);\n    }\n\n    if (arguments.length <= 1 && isString(property)) {\n      if (!style) {\n        return '';\n      }\n\n      property = toHyphenCase(property);\n\n      return style.getPropertyValue(property) + (style.getPropertyPriority(property) ? ' !important' : '');\n    }\n\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(property, (value, property) => {\n        property = toHyphenCase(property);\n\n        if (isNil(value) || value === false) {\n          return new Elem(elem).removeCSS(property);\n        }\n\n        elem.style.removeProperty(property);\n        elem.style.setProperty(\n          property,\n          value.replace(CSS_IMPORTANT_REGEX, ''),\n          CSS_IMPORTANT_REGEX.test(value) ? 'important' : ''\n        );\n      });\n    });\n  }\n\n  /**\n   * @function Elem#data\n   * @public\n   * @param {String|Object.<String, String>} [key] - Name of the data attribute (without data- prefix)\n   * to get or an object of the format { [attrName]: value, ... } to set attributes.\n   * @param {String} [value] - If the first argument is a string it should be a value to set for that attribute.\n   * @returns {Object|String|Elem} If no arguments passed, D-Wrap of dataset of the element returned,\n   * if 1 string argument is passed the value of the data attribute returned otherwise returns this.\n   * @description Method for getting/setting data attributes. See\n   * [HTMLElement#dataset]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/dataset}.\n   *\n   * @example\n   * elem.data('someKey1', 'value'); // attribute data-some-key1 set to 'value1' and this returned\n   * elem.data('someKey1');          // 'value1'\n   * elem.data({\n   *   someKey1: 'value3',           // attribute data-some-key1 set to 'value3'\n   *   someKey2: 'value2'            // attribute data-some-key2 set to 'value2'\n   * });                             // this returned\n   * elem.data();                    // { someKey1: 'value3', someKey2: 'value2' }\n   */\n  data(key, value) {\n    const { dataset } = this[0] || {};\n\n    if (!arguments.length) {\n      if (!dataset) {\n        return {};\n      }\n\n      return collectFromObject(dataset, addDataAttr);\n    }\n\n    if (arguments.length === 1 && isString(key)) {\n      if (!dataset) {\n        return;\n      }\n\n      return dataset[key];\n    }\n\n    if (arguments.length >= 2) {\n      key = { [key]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(key, (value, key) => {\n        elem.dataset[key] = value;\n      });\n    });\n  }\n\n  /**\n   * @function Elem#dispatch\n   * @public\n   * @param {String|Event} event - Event or a string (new Event(event) is created).\n   * @param {Object} [details = {}] - Object that is assigned to the event.\n   * @returns {Elem} Returns this.\n   * @see https://developer.mozilla.org/en/docs/Web/API/Event/Event\n   * @description Synonym for\n   * [EventTarget#dispatchEvent]{@link https://developer.mozilla.org/en/docs/Web/API/EventTarget/dispatchEvent}.\n   *\n   * @example\n   * elem.dispatch('click');\n   * elem.dispatch('click', { bubbles: false, cancellable: false, data: 1 });\n   * elem.dispatch(new CustomEvent('custom-event'));\n   */\n  dispatch(event, details = {}) {\n    const {\n      bubbles = true,\n      cancelable = true,\n      ...realDetails\n    } = details;\n\n    return this.forEach((elem) => {\n      elem.dispatchEvent(getEvent(\n        event,\n        bubbles,\n        cancelable,\n        realDetails,\n        elem\n      ));\n    });\n  }\n\n  /**\n   * @function Elem#elem\n   * @public\n   * @param {Number} [index = 0] - Index of the element of the set to get. Negative index means elem.length + index.\n   * @returns {Elem} New instance of Elem.\n   *\n   * @example\n   * elem.elem(1); // a wrap of the element in the set that has index 1\n   * elem.elem();  // a wrap of the element in the set that has index 0\n   */\n  elem(index = 0) {\n    if (index < 0) {\n      index = this.length + index;\n    }\n\n    return new Elem(this[index]);\n  }\n\n  /**\n   * @function Elem#filter\n   * @public\n   * @param {IterationCallback|String} filter - Filter function or a selector.\n   * @returns {Elem} New instance of Elem.\n   * @description Method for filtering elements.\n   *\n   * @example\n   * elem.filter((elem) => new Elem(elem).closest('.parent'));\n   */\n  filter(filter) {\n    if (isString(filter)) {\n      const selector = filter;\n\n      filter = (elem) => (\n        new Elem(elem).is(selector)\n      );\n    }\n\n    return this.collect((add, elem, index) => {\n      if (filter(elem, index, this)) {\n        add(elem);\n      }\n    });\n  }\n\n  /**\n   * @function Elem#find\n   * @public\n   * @param {String} selector - Selector to find.\n   * @returns {Elem} New instance of Elem.\n   * @description Synonym for\n   * [Element#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Element/querySelectorAll}.\n   */\n  find(selector) {\n    return this.collect((add, elem) => {\n      add(find(selector, elem));\n    });\n  }\n\n  /**\n   * @function Elem#forEach\n   * @public\n   * @param {IterationCallback} callback - Called on each iteration.\n   * @returns {Elem} Returns this.\n   * @description Method for iterating over the set.\n   *\n   * @example\n   * find('.cls').forEach((element, index, set) => {\n   *   // do something\n   * });\n   */\n  forEach(callback) {\n    iterateArray(this, (value, key) => {\n      callback(value, key, this);\n    });\n\n    return this;\n  }\n\n  /**\n   * @function Elem#hasAttr\n   * @public\n   * @param {String} attr - Name of the attribute.\n   * @returns {Boolean} If the first element in the set has the attribute.\n   * @description Method that returns if the first element in the set has the attribute or not.\n   *\n   * @example\n   * elem.attr('attr', 'value').hasAttr('attr'); // true\n   * elem.removeAttr('attr').hasAttr('attr');    // false\n   */\n  hasAttr(attr) {\n    const elem = this[0];\n\n    if (!elem) {\n      return false;\n    }\n\n    const { ns } = getAttrNS(attr, elem);\n\n    return ns\n      ? elem.hasAttributeNS(ns, attr)\n      : elem.hasAttribute(attr);\n  }\n\n  /**\n   * @function Elem#hasClass\n   * @public\n   * @param {String} cls - Name of the class.\n   * @returns {Boolean} If the first element in the set has the class.\n   * @description Method that returns if the first element in the set has the class or not.\n   *\n   * @example\n   * elem.addClass('cls').hasClass('cls');    // true\n   * elem.removeClass('cls').hasClass('cls'); // false\n   */\n  hasClass(cls) {\n    const elem = this[0];\n\n    return elem\n      ? elem.classList.contains(cls)\n      : false;\n  }\n\n  /**\n   * @function Elem#hide\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Hides all elements in the set.\n   *\n   * @example\n   * elem.hide();\n   */\n  hide() {\n    return this.forEach(hide);\n  }\n\n  /**\n   * @function Elem#html\n   * @public\n   * @param {String|*} [html] - HTML to write instead of current HTML.\n   * @returns {Elem|String} If no arguments passed HTML of the first element in the set returned.\n   * Otherwise all elements HTML in the set are set to the html argument.\n   * @description Gets or sets HTML.\n   *\n   * @example\n   * elem.html('<div>1</div>');\n   * elem.html(); // '<div>1</div>'\n   */\n  html(html) {\n    if (!arguments.length) {\n      const elem = this[0];\n\n      return elem\n        ? elem.innerHTML\n        : '';\n    }\n\n    return this.forEach((elem) => {\n      elem.innerHTML = html;\n    });\n  }\n\n  /**\n   * @function Elem#includes\n   * @public\n   * @param {Element|node} elem - Element to search.\n   * @return {Boolean} If the element is in the set.\n   * @description The same as Array#includes.\n   */\n  includes(elem) {\n    return this.indexOf(elem) !== -1;\n  }\n\n  /**\n   * @function Elem#insertAfter\n   * @public\n   * @param {Elem|Element} element - Element to insert this element after.\n   * @returns {Elem} Returns this.\n   * @description Puts the elements from the set after the element specified by the argument.\n   * The elements remain in the same order.\n   *\n   * @example\n   * elem.insertAfter(elem2);\n   * elem.insertAfter(document.getElementById('id'));\n   * elem.insertAfter('#id div.c1');\n   */\n  insertAfter(element) {\n    element = toElem(element).elem(0);\n\n    let parent = element.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    element = element.next()[0];\n    parent = parent[0];\n\n    return this.forEach((elem) => {\n      if (elem === element) {\n        element = element.nextSibling;\n\n        return;\n      }\n\n      if (element) {\n        parent.insertBefore(elem, element);\n      } else {\n        parent.appendChild(elem);\n      }\n    });\n  }\n\n  /**\n   * @function Elem#insertBefore\n   * @public\n   * @param {Elem|Element} element - Element to insert this element before.\n   * @returns {Elem} Returns this.\n   * @description Puts the elements from the set before the element specified by the argument.\n   * The elements remain in the same order.\n   *\n   * @example\n   * elem.insertBefore(elem2);\n   * elem.insertBefore(document.getElementById('id'));\n   * elem.insertBefore('#id div.c1');\n   */\n  insertBefore(element) {\n    element = toElem(element).elem(0);\n\n    let parent = element.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    element = element[0];\n    parent = parent[0];\n\n    return this.forEach((elem) => {\n      parent.insertBefore(elem, element);\n    });\n  }\n\n  /**\n   * @function Elem#into\n   * @public\n   * @param {Elem|Element} element - Element to put this elements into.\n   * @param {Boolean} end - If the elements should be inserted to the end. If false they are inserted to the start.\n   * @returns {Elem} Returns this.\n   * @description Method is similar to\n   * [Node#appendChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/appendChild}.\n   *\n   * @example\n   * elem.into(elem2);\n   * elem.into(document.getElementById('id'));\n   * elem.into('#id div.c1');\n   */\n  into(element, end = true) {\n    element = toElem(element)[0];\n\n    if (!element) {\n      return this;\n    }\n\n    if (!end && element.firstChild) {\n      for (let i = this.length - 1; i >= 0; i--) {\n        element.insertBefore(this[i], element.firstChild);\n      }\n\n      return this;\n    }\n\n    return this.forEach((elem) => {\n      element.appendChild(elem);\n    });\n  }\n\n  /**\n   * @function Elem#is\n   * @public\n   * @param {String} selector\n   * @returns {Boolean} If the first element in the set matches the selector.\n   * @description Synonym for\n   * [Element#matches]{@link https://developer.mozilla.org/en/docs/Web/API/Element/matches}.\n   *\n   * @example\n   * elem.addClass('cls');\n   * elem.is('.cls');         // true\n   *\n   * elem.removeClass('cls');\n   * elem.is('.cls');         // false\n   */\n  is(selector) {\n    if (!this.length) {\n      return false;\n    }\n\n    const elem = this[0];\n    const matches = getMatchesFunction(elem);\n\n    return elem::matches(selector);\n  }\n\n  /**\n   * @function Elem#name\n   * @public\n   * @returns {String|void} nodeName (lowercased) of the first element in the set.\n   * @description Method for getting name of the first element in the set.\n   *\n   * @example\n   * elem.create('div').name() // 'div'\n   */\n  name() {\n    const elem = this[0];\n\n    return elem\n      ? elem.nodeName.toLowerCase()\n      : undefined;\n  }\n\n  /**\n   * @function Elem#next\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Method for finding next element to each element in the set.\n   *\n   * @example\n   * elem.next(); // finds next element to each element in the set\n   */\n  next() {\n    return this.collect(addNext);\n  }\n\n  /**\n   * @function Elem#on\n   * @public\n   * @param {ElemEventString|Object.<ElemEventString|ElemListener>} event - Either a {@link ElemEventString} string\n   * or an object with event keys (a key is also ElemEventString) and listeners values.\n   * @param {ElemListener} [listener] - If the first argument is a string it must be a listener function for\n   * specified event(s).\n   * @returns {ElemRemoveListeners} Function that takes optional event argument.\n   * @description Adds event listeners for all the elements in the set.\n   *\n   * @example\n   * elem.on(\n   *   'change, input',\n   *   (e, elem, index) => console.log(elem.value)\n   * );\n   * elem.on(\n   *   'change, input',\n   *   (e, elem, index) => console.log(elem.value)\n   * );\n   * elem.on({\n   *   'change, input': (e, elem, index) => console.log(elem.value),\n   *   'blur': () => console.log('blur')\n   * });\n   *\n   * const removeListeners = elem.on({\n   *   'change, input': (e, elem, index) => console.log(elem.value),\n   *   'blur': () => console.log('blur')\n   * });\n   *\n   * removeListeners('click');\n   * removeListeners('blur, change');\n   * removeListeners('blur, change', 'input');\n   * removeListeners();\n   */\n  on(event, listener) {\n    if (isString(event)) {\n      event = { [event]: listener };\n    }\n\n    const newEvents = {};\n    const allListeners = {};\n\n    iterateObject(event, (listener, event) => {\n      iterateArray(event.split(EVENT_SEPARATOR_REGEX), (event) => {\n        (newEvents[event] = newEvents[event] || []).push(listener);\n      });\n    });\n\n    this.forEach((elem) => {\n      iterateObject(newEvents, (listeners, event) => {\n        iterateArray(listeners, (listener) => {\n          elem.addEventListener(event, listener, false);\n          (allListeners[event] = allListeners[event] || []).push(() => {\n            elem.removeEventListener(event, listener);\n          });\n        });\n      });\n    });\n\n    return function removeEventListeners(event) {\n      if (arguments.length) {\n        iterateArray(arguments, (event) => {\n          iterateArray(event.split(EVENT_SEPARATOR_REGEX), (event) => {\n            const removeListeners = allListeners[event];\n\n            if (removeListeners) {\n              iterateArray(removeListeners, (removeListener) => removeListener());\n\n              delete allListeners[event];\n            }\n          });\n        });\n      } else {\n        iterateObject(allListeners, (removeListeners, event) => {\n          iterateArray(removeListeners, (removeListener) => removeListener());\n\n          delete allListeners[event];\n        });\n      }\n    };\n  }\n\n  /**\n   * @function Elem#parent\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Method returns wrap of the set of the parent elements of each element in the set.\n   */\n  parent() {\n    return this.collect(addParent);\n  }\n\n  /**\n   * @function Elem#prev\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Method for finding previous element to each element in the set.\n   *\n   * @example\n   * elem.prev(); // finds previous element to each element in the set\n   */\n  prev() {\n    return this.collect(addPrev);\n  }\n\n  /**\n   * @function Elem#prop\n   * @public\n   * @param {String|Object.<String, *>} property - Either a string of a property or an assigned object.\n   * @param {*} [value] - If a property parameter is a string\n   * this has to be an assigned value if it's present.\n   * @returns {Elem|*} Returns this if it's setter or a value if getter.\n   * @description Method that is either a property getter for the first element in the set\n   * or a setter for every element in the set.\n   *\n   * @example\n   * elem.prop('draggable', false);\n   * elem.prop('draggable'); // false\n   */\n  prop(property, value) {\n    if (arguments.length <= 1 && isString(property)) {\n      return this[0] ? this[0][property] : undefined;\n    }\n\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(property, (value, prop) => {\n        elem[prop] = value;\n      });\n    });\n  }\n\n  /**\n   * @function Elem#remove\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Removes all the elements from the set from the document.\n   * Note: it doesn't remove them from the set so watch out for the memory leaks.\n   *\n   * @example\n   * elem.remove();\n   */\n  remove() {\n    return this.forEach(remove);\n  }\n\n  /**\n   * @function Elem#removeAttr\n   * @public\n   * @param {...String} attributes - Attributes to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the attributes from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeAttr('foo', 'bar', 'baz');\n   */\n  removeAttr(...attributes) {\n    return this.forEach((elem) => {\n      iterateArray(attributes, (attr) => {\n        const { ns } = getAttrNS(attr, elem);\n\n        if (ns) {\n          elem.removeAttributeNS(ns, attr);\n        } else {\n          elem.removeAttribute(attr);\n        }\n      });\n    });\n  }\n\n  /**\n   * @function Elem#removeClass\n   * @public\n   * @param {...String} classes - Classes to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the classes from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeClass('foo', 'bar', 'baz');\n   */\n  removeClass(...classes) {\n    return this.forEach((elem) => {\n      const list = elem.classList;\n\n      iterateArray(classes, (cls) => list.remove(cls));\n    });\n  }\n\n  /**\n   * @function Elem#removeCSS\n   * @public\n   * @param {...String} props - CSS properties to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the CSS properties from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeCSS('display', 'position', 'margin');\n   */\n  removeCSS(...props) {\n    return this.forEach((elem) => {\n      iterateArray(props, (css) => {\n        elem.style.removeProperty(toHyphenCase(css));\n      });\n    });\n  }\n\n  /**\n   * @function Elem#replace\n   * @public\n   * @param {Elem|Element} element - Element to replace the first element in the set\n   * with a set of elements specified by the argument (Element or Elem).\n   * @returns {Elem} Returns this.\n   * @description Method is similar to\n   * [Node#replaceChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/replaceChild}.\n   *\n   * @example\n   * elem.replace(elem2);\n   * elem.replace(document.getElementById('id'));\n   * elem.replace('#id div.c1');\n   */\n  replace(element) {\n    element = toElem(element);\n\n    const first = this.elem(0);\n    const parent = first.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    let elem = parent;\n    let method = 'into';\n    const next = first.next()[0];\n    const prev = first.prev()[0];\n\n    if (next) {\n      elem = next;\n      method = 'insertBefore';\n    } else if (prev) {\n      elem = prev;\n      method = 'insertAfter';\n    }\n\n    first.remove();\n\n    element[method](elem);\n  }\n\n  /**\n   * @function Elem#show\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Shows all elements in the set.\n   * If an element was hidden using {@link Elem#hide} previous display is set.\n   *\n   * @example\n   * elem.show();\n   */\n  show() {\n    return this.forEach(show);\n  }\n\n  /**\n   * @function Elem#slice\n   * @public\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\n   * @returns {Elem}\n   * @description The same as Array#slice but for Elem.\n   */\n  slice() {\n    return new Elem(super.slice.apply(this, arguments));\n  }\n\n  /**\n   * @function Elem#text\n   * @public\n   * @param {String|*} [text] - Text to write instead of current text.\n   * @returns {Elem|String} If no arguments passed text of the first element in the set returned.\n   * Otherwise all elements texts in the set are set to the text argument.\n   * @description Gets or sets text.\n   *\n   * @example\n   * elem.text('123');\n   * elem.text(); // '123'\n   */\n  text(text) {\n    if (!arguments.length) {\n      return this.prop('textContent');\n    }\n\n    return this.forEach((elem) => {\n      elem.textContent = text;\n    });\n  }\n\n  /**\n   * @function Elem#toggleAttr\n   * @public\n   * @param {String} attr - Attribute to toggle.\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the attribute\n   * with the '' value and if falsey method removes the attribute. If not present method adds\n   * the attribute if it doesn't exist and removes if it does.\n   * @returns {Elem} Returns this.\n   * @description Method for toggling attributes.\n   *\n   * @example\n   * elem.toggleAttr('attr');\n   * elem.toggleAttr('attr', someCondition);\n   */\n  toggleAttr(attr, condition) {\n    return this.forEach((elem) => {\n      elem = new Elem(elem);\n\n      if (arguments.length < 2 ? !elem.hasAttr(attr) : condition) {\n        elem.attr(attr, '');\n      } else {\n        elem.removeAttr(attr);\n      }\n    });\n  }\n\n  /**\n   * @function Elem#toggleClass\n   * @public\n   * @param {String} cls - Class to toggle.\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the class\n   * and if falsey method removes the class. If not present method adds\n   * the class if it doesn't exist and removes if it does.\n   * @returns {Elem} Returns this.\n   * @description Method for toggling classes.\n   *\n   * @example\n   * elem.toggleClass('cls');\n   * elem.toggleClass('cls', someCondition);\n   */\n  toggleClass(cls, condition) {\n    return this.forEach((elem) => {\n      const { classList } = elem;\n\n      elem = new Elem(elem);\n\n      if (arguments.length < 2 ? !classList.contains(cls) : condition) {\n        elem.addClass(cls);\n      } else {\n        elem.removeClass(cls);\n      }\n    });\n  }\n}\n\nsetToStringTag(Elem, 'Elem');\nsetSymbolSpecies(Elem, Array);\n\nexport { Elem };\n","import { defineProperties } from './defineProperty';\nimport { Symbol } from '../constants';\n\nexport function setSymbolSpecies(klass, species) {\n  if (Symbol.species) {\n    defineProperties(klass, {\n      [Symbol.species]: {\n        get() {\n          return species;\n        }\n      }\n    });\n  }\n}\n","import {\n  defineFrozenProperties, getProto,\n  removeArrayElem, setToStringTag\n} from './utils';\nimport { wrapMixin, removeWatchers } from './helpers/Block';\n\nconst toStringTag = '[object Mixin]';\n\n/**\n * @class Mixin\n * @public\n * @param {Object} opts - Mixin options.\n * @returns {Mixin} Instance of Mixin.\n */\nclass Mixin {\n  /**\n   * @member {Boolean} [Mixin.evaluate = true]\n   * @type {Boolean}\n   * @public\n   * @description If the mixin value should be evaluated and watched or not.\n   */\n  static evaluate = true;\n\n  /**\n   * @function Mixin.wrap\n   * @public\n   * @param {...Wrapper} wrappers - Functions that return wrapped mixin.\n   * @returns {typeof Mixin} New mixin.\n   * @description Method for wrapping mixins.\n   * It is considered best practice to just extends the old mixin with a new one.\n   */\n  static wrap(...wrappers) {\n    return wrappers.reduce(wrapMixin, this);\n  }\n\n  constructor(opts) {\n    const {\n      name,\n      value,\n      dynamic,\n      elem,\n      args,\n      comment,\n      parentBlock,\n      parentScope,\n      parentTemplate\n    } = opts;\n    const watchersToRemove = [];\n    const watchers = [];\n    const { constructor } = getProto(this);\n    const afterUpdate = (newValue, oldValue) => {\n      this.$$.value = newValue;\n\n      try {\n        this.afterUpdate(newValue, oldValue);\n      } catch (err) {\n        console.error(`Uncaught error in ${ name }#afterUpdate:`, err);\n      }\n    };\n\n    defineFrozenProperties(this, {\n      /**\n       * @member {Object} Mixin#$$\n       * @type {Object}\n       * @protected\n       * @property {Function} Mixin#$$.evaluate - Evaluate function.\n       * @property {Boolean} Mixin#$$.isDynamic - If the mixin is dynamic.\n       * @property {Boolean} Mixin#$$.isRemoved - If the block is removed.\n       * @property {String} Mixin#$$.name - Mixin name.\n       * @property {Block|void} Mixin#$$.parentBlock - Parent block.\n       * @property {Block|void} Mixin#$$.parentScope - Parent scope.\n       * @property {Block|void} Mixin#$$.parentTemplate - Parent template.\n       * @property {Watcher[]} Block#$$.watchers - Temporary vars watchers.\n       * @property {Object[]} Block#$$.watchersToRemove - Watchers to remove before removing mixin.\n       */\n      $$: {\n        name,\n        _value: value,\n        value,\n        isDynamic: dynamic,\n        parentScope,\n        parentBlock,\n        parentTemplate,\n        watchers,\n        watchersToRemove,\n        isRemoved: false,\n        evaluate: (watcher) => {\n          const {\n            isDynamic,\n            value,\n            _value\n          } = this.$$;\n          const currentValue = isDynamic\n            ? value\n            : parentScope.$$.evaluate(_value);\n\n          if (watcher) {\n            watchers.push(watcher);\n          }\n\n          return currentValue;\n        },\n        remove: (isParentSignal) => {\n          isParentSignal = !!isParentSignal;\n          this.$$.isRemoved = true;\n\n          removeWatchers(watchersToRemove);\n\n          try {\n            this.beforeRemove(isParentSignal);\n          } catch (err) {\n            console.error(`Uncaught error in ${ name }#beforeRemove:`, err);\n          }\n\n          if (!isParentSignal) {\n            removeArrayElem(parentBlock.$$.mixins, this);\n          }\n        },\n        setAfterUpdate: () => {\n          if (constructor.evaluate) {\n            afterUpdate(this.$$.evaluate(afterUpdate));\n          }\n        }\n      }\n    });\n\n    /**\n     * @member {String[]} [Mixin#args]\n     * @type {String[]}\n     * @public\n     */\n    this.args = args;\n\n    /**\n     * @member {String} [Mixin#comment]\n     * @type {String}\n     * @public\n     */\n    this.comment = comment;\n\n    /**\n     * @member {Block} [Mixin#parentScope]\n     * @type {Block}\n     * @public\n     */\n    this.parentScope = parentScope;\n\n    /**\n     * @member {Block} [Mixin#parentTemplate]\n     * @type {Block}\n     * @public\n     */\n    this.parentTemplate = parentTemplate;\n\n    /**\n     * @member {Elem} Mixin#elem\n     * @type {Elem}\n     * @public\n     */\n    this.elem = elem;\n\n    /**\n     * @member {Element} Mixin#node\n     * @type {Element}\n     * @public\n     */\n    this.node = elem[0];\n\n    parentBlock.$$.mixins.push(this);\n  }\n\n  afterUpdate() {}\n\n  /**\n   * @function Mixin#beforeRemove\n   * @public\n   * @param {Boolean} isElementRemoved - If element removed as well.\n   * @description Is called before the mixin removal.\n   */\n  beforeRemove(isElementRemoved) {}\n\n  /**\n   * @function Block#evaluate\n   * @public\n   * @param {Watcher} [callback] - If present, callback which is called when the mixin value is changed.\n   * @returns {*} Evaluation result.\n   * @description Method for evaluating the mixin value and watching for the changes.\n   */\n  evaluate(callback) {\n    return this.$$.evaluate(callback);\n  }\n\n  toString() {\n    return toStringTag;\n  }\n}\n\nsetToStringTag(Mixin, 'Mixin');\n\nexport { Mixin };\n","import { Elem } from './Elem';\nimport {\n  defineFrozenProperties,\n  assign, iterateArray, iterateObject,\n  isFunction, isArray,\n  setToStringTag, hasOwnProperty,\n  removeArrayElem, create,\n  getProto, setProto\n} from './utils';\nimport {\n  constructMixinRegex, isInstanceOf, normalizeArgs,\n  removeWatchers, removeWithParentSignal, cleanProperty,\n  transformRestArgs, calculateArgs, wrapBlock\n} from './helpers/Block';\nimport {\n  D_REST_REGEX,\n  rootBlocks, rootMixins\n} from './constants';\nimport { Mixin } from './Mixin';\n\n/**\n * @typedef {Object} Template\n * @public\n * @property {String[]} vars - Template used vars.\n * @property {Object[]} value - Template itself.\n */\n\n/**\n * @typedef {Object[]} ScopelessTemplate\n * @public\n */\n\n/**\n * @typedef {Error} EvaluationError\n * @public\n * @property {Function} func - Function which caused eval error.\n * @property {String} original - Evaluated expression original js.\n * @property {Block} block - Block in context of which the expression has been evaluated with the error.\n */\n\n/**\n * @callback Watcher\n * @public\n * @param {*} newValue - New value.\n * @param {*} oldValue - Old value.\n */\n\n/**\n * @callback Wrapper\n * @public\n * @param {typeof Block|typeof Mixin} Block class to wrap.\n * @returns {typeof Block} New Block class.\n */\n\n/**\n * @callback AfterUpdate\n * @public\n * @param {*} newValue - New value.\n * @param {*} oldValue - Old value.\n * @param {Mixin} mixin - Mixin instance.\n */\n\n/**\n * @callback BlockRegisterHook\n * @public\n * @param {typeof Block} Block - Registering block.\n * @param {String} name - Block name.\n * @returns Return value is used for registering the block.\n * If Block subclass returned it's registered instead of the initial block, otherwise\n * the initial block is used.\n */\n\n/**\n * @callback MixinRegisterHook\n * @public\n * @param {typeof Mixin} Mixin - Registering mixin.\n * @param {String} name - Mixin name.\n * @returns Return value is used for registering the mixin.\n * If Mixin subclass returned it's registered instead of the initial mixin, otherwise\n * the initial mixin is used.\n */\n\n/**\n * @callback RemoveHook\n * @public\n */\n\nconst blockHooks = [];\nconst mixinHooks = [];\nconst TAG_NAME_REGEX = /^[a-z][a-z\\d\\-_.:!@#$%^&*()[\\]{}='\"\\\\]*$/i;\nconst ATTR_NAME_REGEX = /^[^\\u0000-\\u0020\\s'\">/=]+$/;\nconst toStringTag = '[object Block]';\nconst afterElem = new Elem();\nconst emptyObject = {};\nlet evalMode = false;\nlet gettingVars = [];\n\n/**\n * @class Block\n * @extends null\n * @public\n * @param {Object} opts - Block options.\n * @returns {Block} Instance of Block.\n *\n * @example\n * import { Block, initApp } from 'dwayne';\n *\n * class App extends Block {\n *   static template = '<Hello text=\"{text}\"/> ({ this.times })';\n *\n *   constructor(opts) {\n *     super(opts);\n *\n *     this.text = 'world';\n *     this.times = 0;\n *\n *     this.setInterval();\n *   }\n *\n *   setInterval() {\n *     this.interval = setInterval(() => {\n *       this.times++;\n *     });\n *   }\n *\n *   beforeRemove() {\n *     clearInterval(this.interval);\n *   }\n * }\n *\n * Block.block('App', App);\n * Block.block('Hello', html`Hello, {args.text}!`);\n *\n * initApp('App', document.getElementById('root'));\n */\nclass Block {\n  /**\n   * @member {Object.<String, typeof Block>} Block._blocks\n   * @type {Object.<String, typeof Block>}\n   * @protected\n   * @description Block namespace blocks.\n   */\n  static _blocks = create(rootBlocks);\n\n  /**\n   * @member {Object.<String, typeof Mixin>} Block._mixins\n   * @type {Object.<String, typeof Mixin>}\n   * @protected\n   * @description Block namespace mixins.\n   */\n  static _mixins = create(rootMixins);\n\n  /**\n   * @member {Object} [Block.defaultArgs = null]\n   * @type {Object}\n   * @public\n   * @description Block default args.\n   */\n  static defaultArgs = null;\n\n  /**\n   * @member {Object} [Block.defaultLocals = null]\n   * @type {Object}\n   * @public\n   * @description Block default locals.\n   */\n  static defaultLocals = null;\n\n  /**\n   * @member {Object} [Block.template = { vars: [], value: [] }]\n   * @type {Object}\n   * @public\n   * @description Block template.\n   */\n  static template = {\n    vars: [],\n    value: []\n  };\n\n  /**\n   * @function Block.onEvalError\n   * @public\n   * @param {EvaluationError} err - The method is called when an evaluation error occurs.\n   */\n  static onEvalError(err) {\n    console.error(`Eval error (evaluating \"${ err.original || err.func }\" in context of ${ err.block.$$.name }):`, err);\n  }\n\n  /**\n   * @function Block.beforeRegisterBlock\n   * @public\n   * @param {BlockRegisterHook} hook - Block register hook.\n   * @returns {RemoveHook}\n   */\n  static beforeRegisterBlock(hook) {\n    blockHooks.push(hook);\n\n    return () => {\n      removeArrayElem(blockHooks, hook);\n    };\n  }\n\n  /**\n   * @function Block.beforeRegisterMixin\n   * @public\n   * @param {MixinRegisterHook} hook - Mixin register hook.\n   * @returns {RemoveHook}\n   */\n  static beforeRegisterMixin(hook) {\n    mixinHooks.push(hook);\n\n    return () => {\n      removeArrayElem(mixinHooks, hook);\n    };\n  }\n\n  /**\n   * @function Block.block\n   * @public\n   * @param {String} name - Block or mixin name.\n   * @param {Template|ScopelessTemplate|typeof Block} Subclass - Subclass of Block or template string of it.\n   * @returns {typeof Block|undefined} Returns registered Block or undefined if the block hasn't been registered.\n   * @description Register block in the namespace of this.\n   */\n  static block(name, Subclass) {\n    if (isFunction(Subclass) && !isInstanceOf(Block, Subclass)) {\n      const constructor = Subclass;\n\n      Subclass = class extends Block {\n        static template = constructor.template;\n\n        constructor(opts) {\n          super(opts);\n          this::constructor(opts);\n        }\n      };\n    }\n\n    if (!isFunction(Subclass) && isArray(Subclass)) {\n      Subclass = class extends Block {\n        static template = {\n          vars: [],\n          value: Subclass\n        };\n      };\n    }\n\n    if (!isFunction(Subclass) && isArray(Subclass.vars) && isArray(Subclass.value)) {\n      Subclass = class extends Block {\n        static template = Subclass;\n      };\n    }\n\n    if (!isInstanceOf(Block, Subclass)) {\n      console.warn(`Block must be a template (array or an object from an html loader), a function or a class that extends Block class (name: \"${ name }\") (Block.block)`);\n\n      return;\n    }\n\n    if (name === 'd-elements') {\n      console.warn('The \"d-elements\" block is a built-in block so the block will not be registered (Block.block)');\n\n      return;\n    }\n\n    if (!TAG_NAME_REGEX.test(name)) {\n      console.warn(`Name \"${ name }\" is not allowed for blocks so the block will not be registered (Block.block)`);\n\n      return;\n    }\n\n    if (!hasOwnProperty(this, '_blocks')) {\n      this._blocks = create(getProto(this)._blocks);\n    }\n\n    if (!hasOwnProperty(this, 'defaultLocals')) {\n      this.defaultLocals = {};\n    }\n\n    if (!hasOwnProperty(this, 'defaultArgs')) {\n      this.defaultArgs = create(null);\n    }\n\n    try {\n      Subclass = blockHooks.reduce((returnValue, hook) => {\n        const currentReturnValue = hook(returnValue, name, this);\n\n        return isInstanceOf(Block, currentReturnValue)\n          ? currentReturnValue\n          : returnValue;\n      }, Subclass);\n    } catch (err) {\n      console.error('Uncaught error in \"beforeRegisterBlock\" hook:', err);\n    }\n\n    Subclass._blocks = hasOwnProperty(Subclass, '_blocks')\n      ? Subclass._blocks\n      : create(this._blocks);\n    Subclass._mixins = hasOwnProperty(Subclass, '_mixins')\n      ? Subclass._mixins\n      : create(this._mixins);\n\n    if (hasOwnProperty(Subclass, 'defaultArgs')) {\n      setProto(Subclass.defaultArgs, null);\n    }\n\n    this._blocks[name] = Subclass;\n\n    return Subclass;\n  }\n\n  /**\n   * @function Block.get\n   * @public\n   * @param {String} name - Block name.\n   * @returns {typeof Block|undefined} Returns registered Block with specified name.\n   */\n  static get(name) {\n    return this._blocks[name];\n  }\n\n  /**\n   * @function Block.getMixin\n   * @public\n   * @param {String} name - Mixin name.\n   * @returns {typeof Mixin|undefined} Returns registered Mixin with specified name.\n   */\n  static getMixin(name) {\n    return this._mixins[name];\n  }\n\n  /**\n   * @function Block.mixin\n   * @public\n   * @param {String} name - Block or mixin name.\n   * @param {typeof Mixin|AfterUpdate} Subclass - Subclass of Mixin or AfterUpdate callback.\n   * @returns {typeof Mixin|undefined} Returns registered Block or undefined if the block hasn't been registered.\n   * @description Register mixin in the namespace of this.\n   */\n  static mixin(name, Subclass) {\n    if (isFunction(Subclass) && !isInstanceOf(Mixin, Subclass)) {\n      const afterUpdate = Subclass;\n\n      Subclass = class extends Mixin {\n        afterUpdate(newValue, oldValue) {\n          this::afterUpdate(newValue, oldValue, this);\n        }\n      };\n    }\n\n    if (!isInstanceOf(Mixin, Subclass)) {\n      console.warn(`The \"${ name }\" class does not extend Mixin or is not an afterUpdate function, so it will not be registered (Block.mixin)`);\n\n      return;\n    }\n\n    if (name === 'd-rest') {\n      console.warn('The \"d-rest\" mixin is a built-in mixin so the mixin will not be registered (Block.mixin)');\n\n      return;\n    }\n\n    if (!ATTR_NAME_REGEX.test(name)) {\n      console.warn(`Name \"${ name }\" is not allowed for mixins so the mixin will not be registered (Block.mixin)`);\n\n      return;\n    }\n\n    if (!hasOwnProperty(this, '_mixins')) {\n      this._mixins = create(getProto(this)._mixins);\n    }\n\n    try {\n      Subclass = mixinHooks.reduce((returnValue, hook) => {\n        const currentReturnValue = hook(returnValue, name, this);\n\n        return isInstanceOf(Mixin, currentReturnValue)\n          ? currentReturnValue\n          : returnValue;\n      }, Subclass);\n    } catch (err) {\n      console.error('Uncaught error in \"beforeRegisterMixin\" hook:', err);\n    }\n\n    Subclass._match = constructMixinRegex(name);\n\n    this._mixins[name] = Subclass;\n\n    return Subclass;\n  }\n\n  /**\n   * @function Block.wrap\n   * @public\n   * @param {...Wrapper} wrappers - Functions that return wrapped block.\n   * @returns {typeof Block} New block.\n   * @description Method for wrapping blocks into another blocks.\n   * It is considered best practice to just extends the old block with a new one.\n   *\n   * @example\n   * class MyBlock extends Block {\n   *   static template = '<div>123</div>';\n   * }\n   *\n   * MyBlock.wrap((Block) => {\n   *   return class extends Block {\n   *     static template = `<section class=\"wrapper\">${ Block.template }</section>`;\n   *\n   *     constructor(opts) {\n   *       super(opts);\n   *\n   *       this.additionalVar = 'additional';\n   *     }\n   *   };\n   * });\n   */\n  static wrap(...wrappers) {\n    return wrappers.reduce(wrapBlock, this);\n  }\n\n  constructor(opts) {\n    const {\n      name,\n      args: originalArgs,\n      dBlockName,\n      dBlockArgs,\n      children,\n      parent,\n      parentElem,\n      parentBlock,\n      parentScope,\n      parentTemplate,\n      prevBlock\n    } = opts;\n    const watchersToRemove = [];\n    const { constructor } = getProto(this);\n    const childrenBlocks = [];\n    const mixins = [];\n    const isParentBlock = parent instanceof Block;\n\n    defineFrozenProperties(this, {\n      /**\n       * @member {Object} Block#$$\n       * @type {Object}\n       * @protected\n       * @property {Object} Block#$$.args - Private args scope.\n       * @property {Block[]} Block#$$.children - Child blocks.\n       * @property {Elem} Block#$$.content - Content elements.\n       * @property {Object|void} Block#$$.dBlockArgs - d-block args.\n       * @property {String|void} Block#$$.dBlockName - d-block name.\n       * @property {Block[]} Block#$$.dBlocks - d-block's within the block.\n       * @property {Function} Block#$$.evaluate - Evaluate function.\n       * @property {Object} Block#$$.globals - Private globals scope.\n       * @property {Object[]} Block#$$.htmlChildren - Block html children.\n       * @property {Boolean} Block#$$.isRemoved - If the block is removed.\n       * @property {Boolean} Block#$$.isRendered - If the block is rendered.\n       * @property {Object} Block#$$.locals - Private locals scope.\n       * @property {Mixin[]} Block#$$.mixins - Child mixins.\n       * @property {Function[]} Block#$$.mixinsToBuild - Pending mixins builders.\n       * @property {String} Block#$$.name - Block name.\n       * @property {typeof Block} Block#$$.ns - Block constructor.\n       * @property {Block|Elem|void} Block#$$.parent - Parent block or elem.\n       * @property {Block|void} Block#$$.parentBlock - Parent block.\n       * @property {Elem} parentElem - Parent element.\n       * @property {Block|void} Block#$$.parentScope - Parent scope.\n       * @property {Block|void} Block#$$.parentTemplate - Parent template.\n       * @property {Block|Elem|void} Block#$$.prevBlock - Parent template.\n       * @property {Watcher[]} Block#$$.watchers - Temporary vars watchers.\n       * @property {Object[]} Block#$$.watchersToRemove - Watchers to remove before removing the block.\n       */\n      $$: {\n        name,\n        dBlockName,\n        dBlockArgs,\n        dBlocks: [],\n        parent,\n        parentElem,\n        parentScope,\n        parentBlock,\n        parentTemplate,\n        content: new Elem(),\n        ns: constructor,\n        htmlChildren: children || [],\n        children: childrenBlocks,\n        mixins,\n        mixinsToBuild: [],\n        prevBlock,\n        watchersToRemove,\n        isRemoved: false,\n        isRendered: false,\n        evaluate: (func, onChange, targetBlock, forDElements, forDItem) => {\n          if (!isFunction(func)) {\n            return func;\n          }\n\n          forDElements = !!forDElements;\n          forDItem = !!forDItem;\n\n          const scope = name === '#d-item' && !forDItem\n            ? this.$$.scope\n            : this;\n          const { watchersToRemove } = targetBlock ? targetBlock.$$ : emptyObject;\n          const onChangeFlag = !!onChange;\n\n          const evaluate = () => {\n            let result;\n\n            if (onChangeFlag) {\n              evalMode = true;\n              gettingVars = [];\n            }\n\n            try {\n              result = func(scope);\n            } catch (err) {\n              err.func = func;\n              err.original = func.original;\n              err.block = this;\n\n              if (isFunction(constructor.onEvalError)) {\n                try {\n                  constructor.onEvalError(err);\n                } catch (e) {\n                  console.error(`Uncaught error in ${ name }.onEvalError:`, e);\n                }\n              }\n            }\n\n            if (onChangeFlag) {\n              const localWatchers = [];\n\n              iterateArray(gettingVars, (watchers) => {\n                const watcher = () => {\n                  iterateArray(localWatchers, (watcherBlock) => {\n                    const {\n                      watcher,\n                      watchers\n                    } = watcherBlock;\n\n                    removeArrayElem(watchersToRemove, watcherBlock);\n                    removeArrayElem(watchers, watcher);\n                  });\n\n                  const newResult = evaluate();\n\n                  if (newResult !== result && !targetBlock.$$.isRemoved && !this.$$.isRemoved) {\n                    onChange(newResult, result);\n                  }\n                };\n                const watcherBlock = {\n                  forDElements,\n                  watcher,\n                  watchers\n                };\n\n                localWatchers.push(watcherBlock);\n                watchersToRemove.push(watcherBlock);\n                watchers.push(watcher);\n              });\n\n              evalMode = false;\n              gettingVars = [];\n            }\n\n            return result;\n          };\n\n          return evaluate();\n        },\n        remove: (isParentSignal) => {\n          this.$$.isRemoved = true;\n\n          removeWatchers(watchersToRemove);\n\n          iterateArray(childrenBlocks, removeWithParentSignal);\n          iterateArray(mixins, removeWithParentSignal);\n\n          try {\n            this.beforeRemove();\n          } catch (err) {\n            console.error(`Uncaught error in ${ name }#beforeRemove:`, err);\n          }\n\n          if (!isParentSignal && isParentBlock) {\n            parent.$$.removeContent(this.$$.content);\n          }\n\n          if (!isParentSignal && parentBlock) {\n            removeArrayElem(parentBlock.$$.children, this);\n          }\n\n          this.$$.content.remove();\n        },\n        changeContent: (newContent) => {\n          this.$$.content = newContent;\n\n          if (this.$$.isRendered && !this.$$.isRemoved) {\n            try {\n              this.afterDOMChange();\n            } catch (err) {\n              console.error(`Uncaught error in ${ name }#afterDOMChange:`, err);\n            }\n          }\n        },\n        addContent: (contentToAdd, notRecursive) => {\n          const oldContent = this.$$.content;\n          const index = oldContent.indexOf(contentToAdd[0].previousSibling) + 1;\n          let newContent;\n\n          if (index === 0) {\n            newContent = contentToAdd.add(oldContent);\n          } else {\n            newContent = oldContent\n              .slice(0, index)\n              .add(contentToAdd, oldContent.slice(index));\n          }\n\n          this.$$.changeContent(newContent);\n\n          if (isParentBlock && !notRecursive) {\n            parent.$$.addContent(contentToAdd, notRecursive);\n          }\n        },\n        moveContent: (contentToMove, after) => {\n          const oldContent = this.$$.content;\n          const index = oldContent.indexOf(contentToMove[0]);\n          const indexToPut = oldContent.indexOf(after[0]) + 1;\n          let newContent;\n\n          if (indexToPut === 0) {\n            newContent = contentToMove.add(\n              oldContent.slice(indexToPut, index),\n              oldContent.slice(index + contentToMove.length)\n            );\n          } else if (index > indexToPut) {\n            newContent = oldContent\n              .slice(0, indexToPut)\n              .add(\n                contentToMove,\n                oldContent.slice(indexToPut, index),\n                oldContent.slice(index + contentToMove.length)\n              );\n          } else {\n            newContent = oldContent\n              .slice(0, index)\n              .add(\n                oldContent.slice(index + contentToMove.length, indexToPut),\n                contentToMove,\n                oldContent.slice(indexToPut)\n              );\n          }\n\n          this.$$.changeContent(newContent);\n\n          if (isParentBlock && indexToPut) {\n            parent.$$.moveContent(contentToMove, after);\n          }\n        },\n        removeContent: (contentToRemove) => {\n          this.$$.changeContent(this.$$.content.filter((elem) => (\n            contentToRemove.indexOf(elem) === -1\n          )));\n\n          if (isParentBlock) {\n            parent.$$.removeContent(contentToRemove);\n          }\n        },\n        insertInStartOfIt: (contentToInsert, moveFlag) => {\n          const { prevBlock } = this.$$;\n          let after = afterElem;\n\n          if (prevBlock instanceof Block) {\n            after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n          } else if (prevBlock) {\n            after = prevBlock;\n            contentToInsert.insertAfter(prevBlock);\n\n            if (isParentBlock) {\n              if (moveFlag) {\n                parent.$$.moveContent(contentToInsert, after);\n              } else {\n                parent.$$.addContent(contentToInsert, true);\n              }\n            }\n          } else if (isParentBlock) {\n            const { prevBlock } = parent.$$;\n\n            if (prevBlock) {\n              let notRecursive;\n\n              if (prevBlock instanceof Block) {\n                after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n                notRecursive = true;\n              } else {\n                after = prevBlock;\n                notRecursive = false;\n                contentToInsert.insertAfter(prevBlock);\n              }\n\n              if (moveFlag) {\n                parent.$$.moveContent(contentToInsert, after);\n              } else {\n                parent.$$.addContent(contentToInsert, notRecursive);\n              }\n            } else {\n              after = parent.$$.insertInStartOfIt(contentToInsert, moveFlag);\n            }\n          } else {\n            contentToInsert.into(parentElem, false);\n          }\n\n          if (moveFlag) {\n            this.$$.moveContent(contentToInsert, after);\n          } else {\n            this.$$.addContent(contentToInsert, true);\n          }\n\n          return after;\n        },\n        insertAfterIt: (contentToInsert, moveFlag) => {\n          const { prevBlock } = this.$$;\n          let after = afterElem;\n          let tryToAddOrMove;\n\n          if (this.$$.content.length) {\n            after = this.$$.content.elem(-1);\n            tryToAddOrMove = true;\n            contentToInsert.insertAfter(after);\n          } else if (prevBlock instanceof Block) {\n            after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n          } else if (prevBlock) {\n            after = prevBlock;\n            tryToAddOrMove = true;\n            contentToInsert.insertAfter(prevBlock);\n          } else if (isParentBlock) {\n            after = parent.$$.insertInStartOfIt(contentToInsert, moveFlag);\n          } else {\n            contentToInsert.into(parentElem, false);\n          }\n\n          if (isParentBlock && tryToAddOrMove) {\n            if (moveFlag) {\n              parent.$$.moveContent(contentToInsert, after);\n            } else {\n              parent.$$.addContent(contentToInsert);\n            }\n          }\n\n          return after;\n        }\n      }\n    });\n\n    iterateObject(constructor.defaultLocals, (value, variable) => {\n      this[variable] = value;\n    });\n    iterateArray(constructor.template.vars || [], (variable) => {\n      this[variable] = this[variable];\n    });\n\n    const argsObject = create(null);\n    const { defaultArgs } = constructor;\n    let args = create(defaultArgs || null);\n    let wasDRest;\n    const argsChain = [];\n\n    if (defaultArgs) {\n      argsChain.push(defaultArgs);\n    }\n\n    argsChain.push(args);\n\n    iterateObject(originalArgs, (value, arg) => {\n      const isDRest = D_REST_REGEX.test(arg);\n      const localArgs = isDRest || wasDRest\n        ? create(args)\n        : args;\n\n      if (args !== localArgs) {\n        argsChain.push(localArgs);\n      }\n\n      args = localArgs;\n\n      if (isDRest) {\n        const restArgs = parentScope.$$.evaluate(value, (value) => {\n          iterateObject(localArgs, cleanProperty);\n          assign(localArgs, transformRestArgs(value));\n          calculateArgs(normalizeArgs(argsChain), args, argsObject);\n        }, this);\n\n        wasDRest = true;\n\n        return assign(localArgs, transformRestArgs(restArgs));\n      }\n\n      const isDElements = name === 'd-elements';\n      const forDElements = isDElements && arg === 'value';\n\n      wasDRest = false;\n\n      localArgs[arg] = parentScope.$$.evaluate(value, (value) => {\n        localArgs[arg] = value;\n        calculateArgs(normalizeArgs(argsChain), args, argsObject);\n      }, this, forDElements, isDElements && parentBlock.$$.name === '#d-item');\n    });\n\n    defineFrozenProperties(this, {\n      /**\n       * @member {Object} Block#args\n       * @type {Object}\n       * @public\n       */\n      args: argsObject,\n\n      /**\n       * @member {Object} Block#globals\n       * @type {Object}\n       * @public\n       */\n      globals: create(\n        parentScope\n          ? parentScope.globals\n          : null\n      )\n    });\n\n    calculateArgs(normalizeArgs(argsChain), args, argsObject);\n\n    if (parentBlock) {\n      parentBlock.$$.children.push(this);\n    }\n  }\n\n  /**\n   * @function Block#afterConstruct\n   * @public\n   * @description Is called after block construction (including all scopes)\n   * but before rendering the block and its children.\n   */\n  afterConstruct() {}\n\n  /**\n   * @function Block#afterDOMChange\n   * @public\n   * @description Is called after block DOM structure has changed. Note that\n   * it's important not to modify the DOM structure within the block. You can only insert\n   * elements to empty elements (which Dwayne considers empty) and remove ones from them.\n   */\n  afterDOMChange() {}\n\n  /**\n   * @function Block#afterRender\n   * @public\n   * @description Is called after block has been rendered.\n   */\n  afterRender() {}\n\n  /**\n   * @function Block#beforeRemove\n   * @public\n   * @description Is called before the block removal.\n   */\n  beforeRemove() {}\n\n  /**\n   * @function Block#getDOM\n   * @public\n   * @returns {Elem}\n   * @description Returns DOM contents of the block.\n   */\n  getDOM() {\n    return this.$$.content.slice();\n  }\n\n  /**\n   * @function Block#getName\n   * @public\n   * @returns {String}\n   * @description Returns Block name.\n   */\n  getName() {\n    return this.$$.name;\n  }\n\n  /**\n   * @function Block#getParentElem\n   * @public\n   * @returns {Elem|void}\n   * @description Returns parent Elem.\n   */\n  getParentElem() {\n    return this.$$.parentElem.slice();\n  }\n\n  /**\n   * @function Block#getParentScope\n   * @public\n   * @returns {Block|void}\n   * @description Returns block in which template the block is located in.\n   */\n  getParentScope() {\n    return this.$$.parentScope;\n  }\n\n  /**\n   * @function Block#getParentTemplate\n   * @public\n   * @returns {Block|void}\n   * @description Returns block in which template the block is located in.\n   */\n  getParentTemplate() {\n    return this.$$.parentTemplate;\n  }\n\n  /**\n   * @function Block#evaluate\n   * @public\n   * @param {Function} func - Function to evaluate.\n   * @param {Watcher} [callback] - If present, callback which is called when the expression value is changed.\n   * @param {Block|Mixin} [target = this] - What block or mixin requests the value.\n   * @returns {*} Evaluation result.\n   * @description Method for evaluating an expression in context of the block and watching for the changes.\n   */\n  evaluate(func, callback, target = this) {\n    return this.$$.evaluate(func, callback, target);\n  }\n\n  toString() {\n    return toStringTag;\n  }\n}\n\nsetToStringTag(Block, 'Block');\nsetProto(Block.prototype, null);\n\nexport { Block, gettingVars, evalMode };\n","import { findInArray, isFunction } from '../utils';\nimport { Block } from '../Block';\nimport { rootBlocks } from '../constants';\n\nconst watchNameArgs = js`args.name`;\nconst watchConstructorArgs = js`args.Constructor`;\n\nclass DBlock extends Block {\n  static template = html`\n    <d-elements\n      value=\"{elems}\"\n      parentScope=\"{ParentScope}\"\n      parentTemplate=\"{ParentTemplate}\"\n    />\n  `;\n\n  afterConstruct(opts) {\n    const {\n      parentScope: {\n        $$: {\n          parentScope: parentParentScope,\n          parentTemplate: parentParentTemplate,\n          htmlChildren: children\n        }\n      },\n      htmlChildren: ownChildren,\n      parentScope,\n      parentTemplate,\n      dBlockName: DBlockName\n    } = this.$$;\n    const {\n      name,\n      Constructor\n    } = this.args;\n    let found;\n\n    this.ParentScope = parentScope;\n    this.ParentTemplate = parentTemplate;\n\n    if (name) {\n      this.constructDynamicNameBlock(\n        this.evaluate(watchNameArgs, this.constructDynamicNameBlock)\n      );\n\n      return;\n    }\n\n    if (Constructor) {\n      this.constructDynamicConstructorBlock(\n        this.evaluate(watchConstructorArgs, this.constructDynamicConstructorBlock)\n      );\n\n      return;\n    }\n\n    if (ownChildren.length) {\n      parentTemplate.$$.dBlocks.push(this);\n\n      return;\n    }\n\n    this.ParentScope = parentParentScope;\n    this.ParentTemplate = parentParentTemplate;\n\n    if (DBlockName) {\n      found = findInArray(children, ({ name: nodeName }) => nodeName === `d-block:${ DBlockName }`);\n\n      if (!found) {\n        found = findInArray(parentTemplate.$$.dBlocks, ({ $$: { dBlockName } }) => dBlockName === DBlockName);\n\n        if (found) {\n          this.ParentScope = parentTemplate;\n          this.ParentTemplate = parentTemplate;\n          found.value = {\n            children: found.value.$$.htmlChildren\n          };\n        }\n      }\n\n      this.elems = found\n        ? found.value.children\n        : null;\n    } else {\n      this.elems = children;\n    }\n  }\n\n  constructDynamicNameBlock = (name) => {\n    const {\n      htmlChildren,\n      dBlockArgs\n    } = this.$$;\n\n    this.elems = [{\n      name,\n      attrs: dBlockArgs,\n      children: htmlChildren\n    }];\n  };\n\n  constructDynamicConstructorBlock = (Constructor) => {\n    if (!isFunction(Constructor)) {\n      this.elems = null;\n\n      return;\n    }\n\n    const {\n      htmlChildren,\n      dBlockArgs\n    } = this.$$;\n\n    this.elems = [{\n      Constructor,\n      attrs: dBlockArgs,\n      children: htmlChildren\n    }];\n  };\n}\n\nrootBlocks['d-block'] = DBlock;\n\nexport { DBlock };\n","import { Block } from '../Block';\n\nconst template = html`\n  <d-elements\n    value=\"{$$.htmlChildren}\"\n    parentScope=\"{this}\"\n    parentTemplate=\"{$$.parentTemplate}\"\n  />\n`;\n\nclass DItem extends Block {\n  static template = template;\n}\n\nexport { DItem };\n","import {\n  iterateArray, iterateObject,\n  isArray, isFunction, create\n} from '../utils';\nimport { remove, createBlock } from '../helpers/Block';\nimport { Block } from '../Block';\nimport { rootBlocks } from '../constants';\nimport { DItem } from './d-item';\n\nconst watchArgs = js`[\n  args.set,\n  args.filterBy,\n  args.sortBy\n]`;\n\nrootBlocks['d-each'] = class DEach extends Block {\n  static defaultArgs = {\n    uid(item, index) {\n      return index;\n    }\n  };\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      args: {\n        item = '$item',\n        index = '$index'\n      }\n    } = this;\n\n    this.itemName = item;\n    this.indexName = index;\n    this.itemsByUIDs = create(null);\n  }\n\n  afterConstruct() {\n    this.renderSet(this.evaluate(watchArgs, this.renderSet));\n  }\n\n  renderSet = (args) => {\n    let set = args[0];\n    let filterBy = args[1];\n    const sortBy = args[2];\n\n    const {\n      htmlChildren,\n      parentScope,\n      parentElem,\n      parentTemplate\n    } = this.$$;\n    const {\n      args: {\n        uid: UID\n      },\n      itemsByUIDs,\n      itemName,\n      indexName\n    } = this;\n    const newItemsByUIDs = create(null);\n    const newUIDsByIndexes = create(null);\n    const newUIDs = create(null);\n    const isArr = isArray(set);\n    const iterate = isArr\n      ? iterateArray\n      : iterateObject;\n\n    if (isArr && isFunction(sortBy)) {\n      set = set\n        .slice()\n        .sort(sortBy);\n    }\n\n    if (isFunction(filterBy)) {\n      filterBy = [filterBy];\n    }\n\n    if (isArray(filterBy)) {\n      iterateArray(filterBy, (filter) => {\n        set = set.filter(filter);\n      });\n    }\n\n    iterate(set, (item, index) => {\n      const uid = UID(item, index, set, parentScope);\n\n      if (uid in newUIDsByIndexes) {\n        console.error(`UIDs can't be same for multiple items! In UID function: \"${ UID.original || UID }\"`);\n      }\n\n      newUIDsByIndexes[uid] = index;\n      newUIDs[index] = uid;\n    });\n\n    iterateObject(itemsByUIDs, (block, uid) => {\n      if (!(uid in newUIDsByIndexes)) {\n        remove(block);\n      }\n    });\n\n    let prevBlock;\n\n    iterate(set, (item, index) => {\n      const uid = newUIDs[index];\n      let block;\n\n      if (newUIDsByIndexes[uid] !== index) {\n        return;\n      }\n\n      const prevUIDBlock = itemsByUIDs[uid];\n\n      if (prevUIDBlock) {\n        block = prevUIDBlock;\n        block.$$.scope[indexName] = index;\n        block.$$.scope[itemName] = item;\n\n        if (block.$$.prevBlock !== prevBlock) {\n          const { content } = block.$$;\n\n          if (prevBlock) {\n            prevBlock.$$.insertAfterIt(content, true);\n          } else {\n            this.$$.insertInStartOfIt(content, true);\n          }\n        }\n      } else {\n        block = createBlock({\n          node: {\n            itemName,\n            indexName,\n            item,\n            index,\n            name: '#d-item',\n            Constructor: DItem,\n            children: htmlChildren\n          },\n          parent: this,\n          parentElem,\n          parentBlock: this,\n          parentScope,\n          parentTemplate,\n          prevBlock\n        });\n      }\n\n      newItemsByUIDs[uid] = block;\n      block.$$.prevBlock = prevBlock;\n      prevBlock = block;\n    });\n\n    this.itemsByUIDs = newItemsByUIDs;\n  };\n};\n","import { iterateArray, removeArrayElem } from '../utils';\nimport { removeWithParentSignal, createBlock } from '../helpers/Block';\nimport { Block } from '../Block';\nimport { Elem } from '../Elem';\nimport { rootBlocks } from '../constants';\n\nconst watchArgs = js`args.value`;\n\nrootBlocks['d-elements'] = class DElements extends Block {\n  afterConstruct() {\n    const { parentElem } = this.$$;\n    const {\n      parentScope,\n      parentTemplate\n    } = this.args;\n\n    this.$$.evaluate(watchArgs, (value) => {\n      const {\n        children,\n        mixins,\n        parent,\n        watchersToRemove,\n        content\n      } = this.$$;\n\n      iterateArray(children, removeWithParentSignal);\n      iterateArray(mixins, removeWithParentSignal);\n      content.remove();\n\n      if (parent instanceof Block) {\n        parent.$$.removeContent(content);\n      }\n\n      this.$$.children = [];\n      this.$$.mixins = [];\n      this.$$.watchersToRemove = watchersToRemove.filter(({ watchers, watcher, forDElements }) => {\n        if (forDElements) {\n          return true;\n        }\n\n        removeArrayElem(watchers, watcher);\n      });\n      this.$$.content = new Elem();\n\n      let prevBlock;\n\n      iterateArray(value || [], (child) => {\n        prevBlock = createBlock({\n          node: child,\n          parent: this,\n          parentElem,\n          parentBlock: this,\n          parentScope,\n          parentTemplate,\n          prevBlock\n        });\n      });\n      iterateArray(this.$$.mixinsToBuild, (executeBuilders) => {\n        executeBuilders();\n      });\n      this.$$.mixinsToBuild = [];\n    }, this, true);\n  }\n};\n","import { Block } from '../Block';\nimport { rootBlocks } from '../constants';\n\nconst watchArgs = js`args.if`;\n\nrootBlocks['d-if'] = class DIf extends Block {\n  static template = html`\n    <d-elements\n      value=\"{elems}\"\n      parentScope=\"{$$.parentScope}\"\n      parentTemplate=\"{$$.parentTemplate}\"\n    />\n  `;\n\n  afterConstruct() {\n    this.condition = false;\n    this.constructElems(this.evaluate(watchArgs, this.constructElems));\n  }\n\n  constructElems = (condition) => {\n    condition = !!condition;\n\n    if (this.condition !== condition) {\n      this.condition = condition;\n      this.elems = condition\n        ? this.$$.htmlChildren\n        : null;\n    }\n  };\n};\n","import { findInArray } from '../utils';\nimport { Block } from '../Block';\nimport { rootBlocks } from '../constants';\n\nconst watchArgs = js`[\n  args.value,\n  args.compareFn\n]`;\n\nrootBlocks['d-switch'] = class DSwitch extends Block {\n  static template = html`\n    <d-elements\n      value=\"{elems}\"\n      parentScope=\"{$$.parentScope}\"\n      parentTemplate=\"{$$.parentTemplate}\"\n    />\n  `;\n  static defaultArgs = {\n    compareFn(switchValue, caseValue) {\n      return (\n        switchValue === caseValue\n        || (switchValue !== switchValue && caseValue !== caseValue)\n      );\n    }\n  };\n\n  index = Infinity;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      $$: {\n        htmlChildren,\n        parentScope\n      },\n      args,\n      args: { value }\n    } = this;\n    let wasDefault = false;\n\n    this.values = htmlChildren\n      .filter(({ name }) => {\n        if (name !== 'd-case' && name !== 'd-default') {\n          return;\n        }\n\n        if (wasDefault) {\n          return;\n        }\n\n        if (name === 'd-default') {\n          wasDefault = true;\n        }\n\n        return true;\n      })\n      .map((child, i) => {\n        const {\n          name,\n          attrs = {},\n          children\n        } = child;\n        let val;\n\n        if (name !== 'd-default') {\n          val = parentScope.$$.evaluate(attrs.if, (newValue) => {\n            this.values[i].value = newValue;\n\n            if (i > this.index) {\n              return;\n            }\n\n            const found = findInArray(this.values, ({ name, value }) => (\n              name === 'd-default'\n              || this.args.compareFn(args.value, value)\n            ));\n\n            this.index = found\n              ? found.key\n              : Infinity;\n            this.elems = found\n              ? found.value.children\n              : null;\n          }, this);\n        }\n\n        if (this.index === Infinity && (\n          name === 'd-default'\n          || this.args.compareFn(value, val)\n        )) {\n          this.index = i;\n          this.elems = children;\n        }\n\n        return {\n          name,\n          children,\n          value: val\n        };\n      });\n  }\n\n  afterConstruct() {\n    this.evaluate(watchArgs, (args) => {\n      const newValue = args[0];\n      const compareFn = args[1];\n\n      this.index = Infinity;\n\n      this.values.some(({ name, value, children }, i) => {\n        if (\n          name === 'd-default'\n          || compareFn(newValue, value)\n        ) {\n          this.index = i;\n          this.elems = children;\n\n          return true;\n        }\n      });\n\n      if (this.index === Infinity) {\n        this.elems = null;\n      }\n    });\n  }\n};\n","import { isFunction, noop } from '../utils';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-bind'] = class DBind extends Mixin {\n  off = noop;\n\n  afterUpdate(value) {\n    this.off();\n\n    if (!isFunction(value)) {\n      return;\n    }\n\n    if (this.args) {\n      this.off = this.elem.on(this.args.join(','), value);\n    } else {\n      this.off = noop;\n\n      console.error('Provide \"d-bind\" mixin with an event names (like \"d-bind(click)\" or \"d-bind(keyup, keypress)\")!');\n    }\n  }\n\n  beforeRemove(isElementRemoved) {\n    if (!isElementRemoved) {\n      this.off();\n    }\n  }\n};\n","import {\n  isArray, isString,\n  iterateArray, iterateObject\n} from '../utils';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nconst EMPTY_SPACE_REGEX = /\\s+/;\n\nrootMixins['d-class'] = class DClass extends Mixin {\n  classes = [];\n\n  afterUpdate(newValue) {\n    const {\n      elem,\n      args,\n      classes\n    } = this;\n    const newClasses = [];\n\n    if (args) {\n      newValue = newValue\n        ? args\n        : [];\n    }\n\n    if (isString(newValue)) {\n      newValue = newValue.split(EMPTY_SPACE_REGEX);\n    }\n\n    if (isArray(newValue)) {\n      iterateArray(classes, (cls) => {\n        if (newValue.indexOf(cls) === -1) {\n          elem.removeClass(cls);\n        }\n      });\n      iterateArray(newValue, (cls) => {\n        if (isString(cls)) {\n          newClasses.push(cls);\n          elem.addClass(cls);\n        }\n      });\n    } else {\n      iterateArray(classes, (cls) => {\n        if (!newValue || !newValue[cls]) {\n          elem.removeClass(cls);\n        }\n      });\n      iterateObject(newValue, (val, cls) => {\n        if (val) {\n          newClasses.push(cls);\n          elem.addClass(cls);\n        }\n      });\n    }\n\n    this.classes = newClasses;\n  }\n\n  beforeRemove(isElementRemoved) {\n    if (!isElementRemoved) {\n      const {\n        elem,\n        classes\n      } = this;\n\n      elem.removeClass.apply(elem, classes);\n    }\n  }\n};\n","import { isFunction, isString } from '../utils';\nimport { Block } from '../Block';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-elem'] = class DElem extends Mixin {\n  static evaluate = false;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      args,\n      parentTemplate,\n      elem\n    } = this;\n    let scope = parentTemplate;\n    let value = this.evaluate();\n\n    if (args) {\n      scope = value instanceof Block\n        ? value\n        : parentTemplate;\n      value = args[0];\n    }\n\n    if (isFunction(value)) {\n      value(elem);\n    } else if (isString(value)) {\n      scope[value] = elem;\n    }\n  }\n};\n","import { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nclass DHide extends Mixin {\n  afterUpdate(value) {\n    const { elem } = this;\n\n    if (value) {\n      elem.hide();\n    } else {\n      elem.show();\n    }\n  }\n\n  beforeRemove(isElementRemoved) {\n    if (!isElementRemoved) {\n      this.elem.show();\n    }\n  }\n}\n\nrootMixins['d-hide'] = DHide;\n\nexport { DHide };\n","import { isFunction, isString } from '../utils';\nimport { Block } from '../Block';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-node'] = class DNode extends Mixin {\n  static evaluate = false;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      args,\n      parentTemplate,\n      node\n    } = this;\n    let scope = parentTemplate;\n    let value = this.evaluate();\n\n    if (args) {\n      scope = value instanceof Block\n        ? value\n        : parentTemplate;\n      value = args[0];\n    }\n\n    if (isFunction(value)) {\n      value(node);\n    } else if (isString(value)) {\n      scope[value] = node;\n    }\n  }\n};\n","import { noop } from '../utils';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-on'] = class DOn extends Mixin {\n  static evaluate = false;\n\n  constructor(opts) {\n    super(opts);\n\n    if (this.args) {\n      this.off = this.elem.on(this.args.join(','), () => {\n        this.evaluate();\n      });\n    } else {\n      this.off = noop;\n\n      console.error('Provide \"d-on\" mixin with an event names (like \"d-on(click)\" or \"d-on(keyup, keypress)\")!');\n    }\n  }\n\n  beforeRemove(isElementRemoved) {\n    if (!isElementRemoved) {\n      this.off();\n    }\n  }\n};\n","import { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-show'] = class DShow extends Mixin {\n  afterUpdate(value) {\n    const { elem } = this;\n\n    if (value) {\n      elem.show();\n    } else {\n      elem.hide();\n    }\n  }\n\n  beforeRemove(isElementRemoved) {\n    if (!isElementRemoved) {\n      this.elem.show();\n    }\n  }\n};\n","import { iterateObject } from '../../utils';\nimport { rootMixins } from '../../constants';\nimport { constructMixinRegex } from './constructMixinRegex';\n\niterateObject(rootMixins, (Mixin, name) => {\n  Mixin._match = constructMixinRegex(name);\n});\n","import { Elem } from './Elem';\nimport { createHideStyleNode } from './helpers/Elem';\nimport { document } from './constants';\n\n/**\n * @const {Elem} doc\n * @type {Elem}\n * @public\n * @description Elem instance of document.\n */\nexport const doc = new Elem(document);\n\n/**\n * @const {Elem} html\n * @type {Elem}\n * @public\n * @description Elem instance of document.documentElement.\n */\nexport const html = new Elem(document.documentElement);\n\n/**\n * @const {Elem} body\n * @type {Elem}\n * @public\n * @description Elem instance of document.body.\n */\nexport const body = new Elem(document.body);\n\n/**\n * @const {Elem} head\n * @type {Elem}\n * @public\n * @description Elem instance of document.head.\n */\nexport const head = new Elem(document.head);\n\ncreateHideStyleNode(head);\n"],"names":["collectFromArray","array","callback","initialValue","value","index","findInArray","i","length","iterateArray","removeArrayElem","elem","indexOf","splice","toObjectKeys","addKey","vars","variable","isFunction","isNil","isString","assign","target","arguments","source","key","collectFromObject","object","except","newObject","paths","slice","hasOwnProperty","has","iterateObject","mapObject","definePrototypeProperties","properties","name","defineProperty","defineFrozenProperties","escapeRegex","string","replace","regexpSpecialsRegexp","noop","toCamelCase","DASHED_SYMBOL_REGEX","capitalize","toHyphenCase","UPPERCASED_SYMBOL_REGEX","hyphenize","match","toUpperCase","toLowerCase","toStringTag","toString","setToStringTag","klass","tag","Symbol","prototype","addAttr","attrs","attr","addCSSProp","css","property","split","CSS_PROP_VALUE_SEPARATOR_REGEX","addDataAttr","data","addNext","add","nextSibling","addParent","parentNode","addPrev","previousSibling","createHideStyleNode","head","find","HIDE_CLASS","create","prop","text","getAttrNS","isXmlNs","nodeName","Null","XML_NS","X_LINK_ATTR_FIND_REGEX","test","Elem","closest","X_LINK_NS","X_LINK_ATTR_REPLACE_REGEX","isDocument","DOCUMENT_REGEX","isElem","isElementsCollection","HTML_COLLECTION_REGEX","isArray","isValidNode","ELEMENT_REGEX","getEvent","event","bubbles","cancelable","realDetails","finalEvent","EVENT_REGEX","Event","err","document","ownerDocument","createEvent","initEvent","hide","addClass","getMatchesFunction","matches","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","selector","this","querySelectorAll","remove","parent","removeChild","show","removeClass","toElem","base","String","calculateArgs","normalizedArgs","args","argsObject","keys","arg","undefined","cleanProperty","constructMixinRegex","RegExp","mixinMatch","mixins","Mixin","localMatch","_match","argsMatch","COMMA_REGEX","transformRestAttrs","mixinDefaultOpts","eventualAttrs","D_REST_REGEX","transformRestArgs","addArgs","executeMixinWatchers","mixin","oldValue","$$","watchers","watcher","calculateAttrs","normalizedAttrs","attrsObject","firstTime","type","removeAttr","dynamic","opts","nextType","nextDynamic","nextValue","prevType","prevValue","prevDynamic","created","isDynamic","evaluated","evaluate","newValue","parentScope","constructMixinWatcher","setAfterUpdate","buildMixin","firstValue","push","normalizeArgs","argsChain","newArgs","constructPrivateScope","scope","globals","removeTempWatcher","removeWatchers","watchersToRemove","removeWatcher","constructPublicScope","scopeValues","privateScope","evalMode","gettingVars","oldTempWatchers","createBlock","node","parentElem","parentBlock","parentTemplate","prevBlock","doc","namespaceURI","SVG_NS","localBlocks","ns","_blocks","Block","localMixins","_mixins","children","constructor","Constructor","dBlockMatch","dBlockName","dBlockArgs","NAMED_D_BLOCK_REGEX","blockInstance","error","element","currentAttrs","wasDRest","attrsChain","isDRest","localAttrs","restAttrs","mixinsToBuild","isParentBlock","childBlocks","on","iterateChildren","isRoot","child","content","into","contentDocument","documentElement","insertAfterIt","insertAfter","addContent","insertInStartOfIt","createDocumentFragment","emptyArray","Args","locals","html","template","itemName","item","indexName","afterConstruct","isRendered","executeBuilders","afterRender","isInstanceOf","Class","Subclass","isPrototypeOf","removeWithParentSignal","wrapBlock","block","wrapper","returnValue","wrapMixin","constructStyleFromString","style","CSS_STYLE_SEPARATOR_REGEX","trim","getProp","hasAttr","getValueForSetting","inputValue","isRadio","getValueForGetting","values","options","init","isMultiple","addValue","concat","getListenerName","selected","insertTemplates","templates","iterateAndChangeChildren","nodes","trimmed","newTemplates","newTemplate","newVars","initApp","container","rootBlock","removeApp","DwayneRootBlock","Array","defineProperties","Object","regexpSpecialCharacters","map","s","join","getProto","getPrototypeOf","setProto","setPrototypeOf","proto","__proto__","window","global","self","rootBlocks","rootMixins","CSS_IMPORTANT_REGEX","emptyCollection","_this","includes","methodName","method","elems","elements","classes","forEach","list","classList","cls","attributes","getAttributeNS","getAttribute","setAttributeNS","setAttribute","childNodes","collect","is","cb","contains","el","isText","createTextNode","createComment","createElementNS","createElement","getPropertyValue","getPropertyPriority","removeCSS","removeProperty","setProperty","cssText","dataset","details","dispatchEvent","filter","hasAttributeNS","hasAttribute","innerHTML","next","insertBefore","appendChild","end","firstChild","listener","newEvents","allListeners","listeners","addEventListener","removeEventListener","removeListeners","removeListener","removeAttributeNS","removeAttribute","props","first","prev","babelHelpers.get","apply","textContent","condition","_arguments","_arguments2","species","comment","afterUpdate","_value","currentValue","isParentSignal","isRemoved","beforeRemove","wrappers","reduce","isElementRemoved","blockHooks","mixinHooks","TAG_NAME_REGEX","ATTR_NAME_REGEX","afterElem","emptyObject","originalArgs","childrenBlocks","func","onChange","targetBlock","forDElements","forDItem","_this7","onChangeFlag","result","original","onEvalError","e","localWatchers","watcherBlock","newResult","removeContent","newContent","afterDOMChange","contentToAdd","notRecursive","oldContent","changeContent","contentToMove","after","indexToPut","moveContent","contentToRemove","contentToInsert","moveFlag","tryToAddOrMove","defaultLocals","defaultArgs","localArgs","restArgs","isDElements","hook","warn","currentReturnValue","watchNameArgs","watchConstructorArgs","DBlock","constructDynamicNameBlock","htmlChildren","constructDynamicConstructorBlock","parentParentScope","parentParentTemplate","ownChildren","DBlockName","found","ParentScope","ParentTemplate","dBlocks","DItem","watchArgs","itemsByUIDs","renderSet","set","filterBy","sortBy","_this2","UID","uid","newItemsByUIDs","newUIDsByIndexes","newUIDs","isArr","iterate","sort","prevUIDBlock","constructElems","Infinity","wasDefault","val","if","compareFn","some","switchValue","caseValue","off","newClasses","DHide","Boolean","initialScopeValue","setProp","initialElemValue","isInitialScopeValueNull","isCheckbox","changeScope","offElemListener","offFormListener","option","body"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}