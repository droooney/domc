!function(){"use strict";function e(e){return{}.toString.call(e).replace(/^\[object |]$/g,"")}function t(t){return"Array"===e(t)}function n(e){if(!e||c(e))return!1;var t=e.length;return s(t)&&t>=0}function r(t){return"Boolean"===e(t)}function i(t){return"Date"===e(t)}function a(e){return e=new Date(e),!f(e.getTime())}function o(t){return/Element$/.test(e(t))}function u(e){return!!d(e)&&(e=Number(e),!f(e)&&e!==1/0&&e!==-(1/0))}function c(t){return"Function"===e(t)||"function"==typeof t}function s(e){return d(e)&&e%1===0}function l(e){return e=parseInt(Number(e)),!(!e&&0!==e)}function f(e){return!!d(e)&&(e=Number(e),e!==e)}function h(e){return null===e}function v(e){return null===e||"undefined"==typeof e}function d(t){return"Number"===e(t)}function p(e){return!(!f(e)&&"NaN"!==e)||(e=Number(e),!(!e&&0!==e))}function m(t){return!!t&&("Object"===e(t)||"object"===("undefined"==typeof t?"undefined":Rt(t))||t instanceof Object)}function g(e){if(y(e))return!1;var t=Object.getPrototypeOf(e);if(h(t))return!0;var n=t.constructor;return c(n)&&n instanceof n&&h(Object.getPrototypeOf(t))}function y(e){return h(e)||/^(number|string|boolean|symbol|undefined)$/.test("undefined"==typeof e?"undefined":Rt(e))}function $(t){return"RegExp"===e(t)}function w(t){return"String"===e(t)}function k(t){return"Symbol"===e(t)}function b(e){return"undefined"==typeof e}function x(e){for(var t=bt.length-1;t>=0;t--)for(var n=bt[t],r=0,i=n.length;r<i;r++){var a=n[r];if(e instanceof a.cls)return e;if(a.check(e))return new a.cls(e)}}function E(e,t){var r=n(e),i={},a=0;for(var o in e)if(!{}.hasOwnProperty.call(i,o)&&(i[o]=!0,{}.hasOwnProperty.call(e,o))){if(r&&a++>=e.length)break;var u=t(e[o],r?Number(o):o,e);if(!b(u))return u}}function O(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return E(arguments,function(t,n){n&&E(t,function(t,n){e[n]=t})}),e}function S(e,t,n){E(t,function(t,r){Object.defineProperty(e,t,{value:n(t,r),writable:!0,enumerable:!1,configurable:!0})})}function _(e,t){E(t,function(t,n){return/^get /.test(n)?void Object.defineProperty(e,n.replace(/^get /,""),{get:t,set:void 0,enumerable:!1,configurable:!0}):/^set /.test(n)?void Object.defineProperty(e,n.replace(/^set /,""),{set:t,get:void 0,enumerable:!1,configurable:!0}):/^get\/set /.test(n)?void Object.defineProperty(e,n.replace(/^get\/set /,""),{get:t.get,set:t.set,enumerable:!1,configurable:!0}):void("Symbol.toStringTag"!==n&&Object.defineProperty(e,n,{value:t,writable:!0,enumerable:!1,configurable:!0}))})}function j(e,r){if(t(e)&&!r)return e;var i=[];return n(e)&&!w(e)?E(e,function(e){i.push(e)}):i.push(e),i}function R(e,n,r){E(n,function(n,i){t(n)||(n=[n]),E(n,function(t){if(t=qt[t],!t.check(e[i]))throw new t.error(t.text.replace("$n",Ft[i])+(r?" (at "+r+")":""))})})}function T(e){return w(e)&&1===e.length}function C(e){R([e],["string"]);for(var t=e.split(/([\s\S]-+[\s\S])?/g),n=t.length,r=[],i=0;i<n;i++){var a=t[i];if(a&&" "!==a){if(/-/.test(a)&&!/[\s\S]-+[\s\S]/.test(a))throw new Error("Wrong part of the string ("+a+")! (in alphabet)");if(/-/.test(a)){var o=a.charCodeAt(0),u=a.charCodeAt(2);if(o>u)throw new Error("Start of the range must be before its end! (in alphabet)");for(var c=0,s=u-o+1;c<s;c++)r.push(String.fromCharCode(o+c))}else 1===a.length&&r.push(a)}}return new Wt(r)}function A(e,t,n){return new(Function.prototype.bind.apply(Ht,[null].concat(Array.prototype.slice.call(arguments))))}function P(e,t,n){return e?t:n}function L(e,t){E(t,function(t,n){return y(e[n])||!{}.hasOwnProperty.call(e,n)?void(e[n]=D(t)):void(y(e[n])||L(e[n],t))})}function D(e){var t=zt(e,[e,!0]);return t!==e&&E(e,function(e,n){t[n]=D(e)}),t}function M(n,r,a){if(n===r)return!0;if(f(n)&&f(r)&&y(n)&&y(r))return!0;if(f(n)||f(r))return!1;if(y(n)||y(r))return a?n===r:n==r;if(i(n)&&i(r))return n.getTime()===r.getTime();if(i(n)||i(r))return!1;if($(n)&&$(r))return n.source===r.source&&n.toString().match(/[gimuy]*$/)[0]===r.toString().match(/[gimuy]*$/)[0]&&n.lastIndex===r.lastIndex;if($(n)||$(r))return!1;if(!g(n)&&!t(n)||!g(r)&&!t(r))return!1;var o=Object.getPrototypeOf(n),u=Object.getPrototypeOf(n);return Object.keys(n).length===Object.keys(r).length&&((!o||!u||e(o.constructor)===e(u.constructor))&&E(n,function(e,t){if(!(t in r&&M(e,r[t],a)))return!1})!==!1)}function N(e,t,n,r){var i=1===n;return E(e,function(e,a,o){var u=[{key:a,value:e}].concat(r);if(i||y(e)?!t(e,a,o,u):!N(e,t,n-1,u))return!1})!==!1}function B(e,t,r,i){var a=n(e),o=v(e),u=a?[]:o?e:{},c=1===r;return E(e,function(e,n,o){var s=[{key:n,value:e}].concat(i);if((c||y(e))&&t(e,n,o,s))return void(a?u.push(e):u[n]=e);if(!c){var l=B(e,t,r-1,s);l&&(a?u.push(l):u[n]=l)}}),a?u.length?u:void 0:o?u:Object.keys(u).length?u:void 0}function U(e,t,n,r){var i=1===n;return E(e,function(e,a,o){var u=[{key:a,value:e}].concat(r);if(i||y(e)){if(t(e,a,o,u))return u}else{var c=U(e,t,n-1,u);if(c)return c}})||null}function q(e,t,n,r){var i=1===n;E(e,function(e,a,o){var u=[{key:a,value:e}].concat(r);i||y(e)?t(e,a,o,u):q(e,t,n-1,u)})}function I(e,t,n,r){var i=1===n;E(e,function(e,a,o){var u=[{key:a,value:e}].concat(r);t(e,a,o,u),i||y(e)||I(e,t,n-1,u)})}function F(e){Object.freeze(e),E(e,F)}function W(e,t,r,i){var a=n(e)?[]:v(e)?e:{},o=1===r;return E(e,function(e,n,u){var c=[{key:n,value:e}].concat(i);a[n]=o||y(e)?t(e,n,u,c):W(e,t,r-1,c)}),a}function H(e,t,n,r,i,a){var o=1===n;return E(e,function(e,u,c){if(!i&&(o||y(e))&&!r)return i={IV:e},void(r=!0);var s=[{key:u,value:e}].concat(a);i=o||y(e)?{IV:t(i.IV,e,u,c,s)}:H(e,t,n-1,r,i,s)}),i}function z(e,t,n,r){var i=1===n;return E(e,function(e,a,o){var u=[{key:a,value:e}].concat(r);if(i||y(e)?t(e,a,o,u):z(e,t,n-1,u))return!0})||!1}function V(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return function(n){return n[e].apply(n,j(t))}}function G(){}function J(e){return function(t){var n=t[e];return n}}function Q(){return arguments[0]}function Z(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return e+(t-e)*Math.random()}function Y(e,t){if(R([e,t],["intLike","intLike"],"random"),t<=e)throw new Error("The second argument must be greater than the first!","random");return Math.floor(Z(e,t+1))}function K(e,t){return d(e)||d(t)?d(e)?d(t)?f(e)&&f(t)?0:f(e)?-1:f(t)?1:e-t:1:-1:0}function X(e,t){R([e,t],[["intLike",">=0"],"function||!"],"array");for(var n=[],r=0;r<e;r++)n.push(t?t(r):r);return new nn(n)}function ee(e,t){R([e,t],[["intLike",">=0"],"function"],"iterate");for(var n=0;n<e;n++)t(n)}function te(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return t(e)||(e=[e]),new un(new Blob(e,n))}function ne(e){return e.replace(/^[\s\-_.]+|[\s\-_.]+$/g,"")}function re(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments[2];if(arguments.length<=1)return x(JSON.parse(e));c(t)&&(n=t,t={});var r=t,i=r.numbers,a=r.dates,o=JSON.parse(e,function(e,t){return a&&/^\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\d\.\d\d\dZ?$/.test(t)?t=new Date(t):i&&p(t)&&w(t)&&(t=Number(t)),n?n.apply(this,arguments):t});return x(o)}function ie(e,t){var n=t.name,r=void 0;r=gn(n)?new Vt({"tag-close":e.match(ae(n))}):hn.map(function(t){return e.match(t)});var i=void 0;if(i=r.find(function(e){return e&&0===e.index})){var a={type:i.key,index:i.value[0].length,value:i.value[1]},o={};if("tag-open"===i.key){var u=e,c=void 0;for(a.selfClosing=!1,a.attrs=o;(e=u.slice(a.index))&&!(c=e.match(vn));){var s=e.match(dn);s?(o[s[1]]=(s[2]||"").replace(/^("|')|("|')$/g,""),a.index+=s[0].length):a.index+=1}c&&(a.index+=c[0].length,a.selfClosing=!!c[1])}return a}var l=r.min(function(e){return e?e.index:NaN}),f=l.value;return f===1/0&&(f=e.length),{type:"text",index:f,value:e.slice(0,f)}}function ae(e){return new RegExp("</("+e+")\\s*>","i")}function oe(e,t){return t+' (~~~ "'+e.slice(t,t+15)+'" ~~~, the string itself is "'+e+'")'}function ue(e){return e.replace(/&(\w+|#x?\d+);/g,function(e){return pn.innerHTML=e,pn.textContent||pn.innerText})}function ce(e){return se(e)?e:(w(e)&&(e=ye(e)),new Un(e))}function se(e){return e instanceof Un}function le(t){return"Window"===e(t)}function fe(t){return"HTMLDocument"===e(t)}function he(t){return"DocumentFragment"===e(t)}function ve(t){return"CSSStyleRule"===e(t)}function de(t){var n=e(t);return"Comment"===n||"Text"===n}function pe(e){return o(e.$[0])?e.$[0]:bn}function me(e){return e&&e.nodeName&&e.nodeName.toLowerCase()||""}function ge(e){({}).hasOwnProperty.call(e,"dwayneData")||le(e)?le(e)&&!_n.some(function(t){var n=t.element;return n===e})&&_n.push({element:e,listeners:{}}):Object.defineProperty(e,"dwayneData",{value:{previousDisplay:"",listeners:{},ctx:"canvas"===me(e)&&e.getContext("2d"),validators:new nn([])}})}function ye(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:kn;return new Un(o(t)||fe(t)?t.querySelectorAll(String(e)):[])}function $e(e,t){var n=wn(e,t),r=In.template(),i=new Un(r.$[0].content);return n.forEach(function e(t){var n=t.name,r=t.attrs,a=t.value,o=t.parent,u=t.children,c=o.elem||i,s=c.create(n);t.elem=s,a&&s.text(a),r&&s.attr(r),"template"===n&&(t.elem=new Un(s.prop("content"))),u&&u.forEach(e)}),new Un(i)}function we(e){return Number(String(e).replace(/px$/,""))}function ke(e){var t=function(e){function t(){var e,n,r,i;Tt(this,t);for(var a=arguments.length,o=Array(a),u=0;u<a;u++)o[u]=arguments[u];return n=r=Nt(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(o))),r.elems=null,i=n,Nt(r,i)}return Dt(t,e),Ct(t,[{key:"afterConstruct",value:function(){var e=this.$$.parent.children,t=this.args.name,n=void 0;t?(n=e.find(function(e){var n=e.name;return n==="d-block-"+t}),n&&n.value.children.length&&(this.elems=n.value.children)):this.elems=e}}]),t}(e);return t.template='<d-elements value="{elems}" />',{name:"d-block",value:t}}function be(e,t){var n=function(e){function n(e){Tt(this,n);var t=Nt(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,e)),r=t.args,i=r.item,a=void 0===i?"$item":i,o=r.index,u=void 0===o?"$index":o;return O(t.$$,{uids:new Vt({}),items:new nn([]),UID:String(t.args.uid),itemName:a,indexName:u}),t}return Dt(n,e),Ct(n,[{key:"afterRender",value:function(){var e=this;this.constructValues(this.args.set),this.watchArgs("set",function(t){e.constructValues(t)})}},{key:"constructValues",value:function(e){var n=this,r=this.$$,i=r.elems,a=i.start,o=i.parent,u=r.uids,c=r.parent,s=r.scope,l=r.itemName,f=r.indexName,h=r.UID,v=this.children,d=u.$,p={},m={};new Vt(e).forEach(function(e,t){s[l]=e,s[f]=t;var r=c.$$.evaluate(String(h),null,null,!1,!1,n);p[r]=p[r]||{},p[r][t]=!0,m[t]=r}),s[l]=null,s[f]=null,u.forEach(function(e,t){return p[t]?void e.splice(Object.keys(p[t]).length).forEach(function(e){e.remove()}):void e.forEach(function(e){e.remove()})});var g=a;new Vt(e).forEach(function(e,r){var i=m[r],a=void 0;d[i]&&d[i].length?(a=p[i][r]=u.$[i].shift(),a.$$.scope[f]=r,a.$$.scope[l]=e):a=p[i][r]=t({node:{itemName:l,indexName:f,item:e,index:r,name:"#d-item",block:c,children:v},after:g,parent:o,parentBlock:n,parentScope:c});var s=a.$$.elems,h=s.start,y=s.end;if(h.prev().$[0]!==g.$[0]){var $=a.$$.elems.content;new Un([h,$,y]).insertAfter(g)}g=y}),this.$$.uids=new Vt(p).map(function(e){return new Vt(e).values()})}}]),n}(e);return{name:"d-each",value:n}}function xe(e,t){var n=function(n){function r(){return Tt(this,r),Nt(this,(r.__proto__||Object.getPrototypeOf(r)).apply(this,arguments))}return Dt(r,n),Ct(r,[{key:"afterConstruct",value:function(){var n=this;this.watchArgs("value",function(r){var i=n.$$,a=i.children,o=i.mixins,u=i.watchersToRemove,c=i.elems,s=c.start,l=c.content,f=c.parent,h=s;a.forEach(function(e){e.remove(!0)}),o.forEach(function(e){e.remove(!0)}),l.remove(),n.$$.children=new nn([]),n.$$.mixins=new nn([]),n.$$.watchersToRemove=u.filter(function(e){var t=e.watchers,n=e.watcher,r=e.forDElements;if(r)return!0;var i=t.indexOf(n);i!==-1&&t.splice(i,1)});var v=new Un;new nn(r||[]).forEach(function(r){var i=t({node:r,after:h,parent:f,parentBlock:n,parentScope:n});if(i instanceof e){var a=i.$$.elems;h=a.end,v.add(a.start,a.content,a.end)}else h=i,v.add(i)}),n.$$.elems.content=v})}}]),r}(e);return{name:"d-elements",value:n}}function Ee(e){var t=function(e){function t(){var e,n,r,i;Tt(this,t);for(var a=arguments.length,o=Array(a),u=0;u<a;u++)o[u]=arguments[u];return n=r=Nt(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(o))),r.index=1/0,r.elems=null,r.values=r.children.map(function(e,t){var n=e.name,i=e.attrs,a=e.children,o=r.evaluateAndWatch("d-else"===n?"{true}":i.if||"{true}",function(e){if(!!e!==r.values.$[t]&&(r.values.$[t]=!!e,!(t>r.index))){if(t<r.index)return r.index=t,void(r.elems=a);var n=r.values.find(Boolean);n?(r.index=n.key,r.elems=r.children.$[n.key].children):(r.index=1/0,r.elems=null)}});return o&&r.index===1/0&&(r.index=t,r.elems=a),o}),i=n,Nt(r,i)}return Dt(t,e),t}(e);return t.template='<d-elements value="{elems}"/>',{name:"d-if",value:t}}function Oe(e){var t=function(e){function t(){return Tt(this,t),Nt(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return Dt(t,e),t}(e);return t.template='<d-elements value="{children}"/>',{name:"#d-item",value:t}}function Se(e){var t=function(e){function t(e){Tt(this,t);var n=Nt(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));n.index=1/0,n.elems=null;var r=n.args,i=n.args.value,a=void 0;return n.values=n.children.object(function(e,t,o){var u=t.name,c=t.attrs,s=t.children;if(!a&&("d-case"===u||"d-default"===u)){"d-default"===u&&(a=!0);var l=void 0;l="d-default"===u?r.value:n.evaluateAndWatch(c.if||"{undefined}",function(e){if(!(n.equals(n.values.$[o].value,e)||(n.values.$[o].value=e,o>n.index))){if(o<n.index)return n.index=o,void(n.elems=s);var t=n.values.find(function(e){var t=e.value;return n.equals(t,r.value)});t?(n.index=t.key,n.elems=t.value.children):(n.index=1/0,n.elems=null)}}),n.equals(l,i)&&n.index===1/0&&(n.index=o,n.elems=s),e.push({name:u,children:s,value:l})}},new nn([])),n}return Dt(t,e),Ct(t,[{key:"afterConstruct",value:function(){var e=this;this.watchArgs("value",function(t){e.index=1/0,e.values.forEach(function(n,r){var i=n.name,a=n.value,o=n.children,u="d-default"===i?t:a;e.equals(u,t)&&e.index===1/0&&(e.index=r,e.elems=o)}),e.index===1/0&&(e.elems=null)})}},{key:"equals",value:function(e,t){return new Vt(e).equals(t)}}]),t}(e);return t.template='<d-elements value="{elems}"/>',{name:"d-switch",value:t}}function _e(e){var t=function(e){function t(){var e,n,r,i;Tt(this,t);for(var a=arguments.length,o=Array(a),u=0;u<a;u++)o[u]=arguments[u];return n=r=Nt(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(o))),r.text="",i=n,Nt(r,i)}return Dt(t,e),Ct(t,[{key:"afterConstruct",value:function(){var e=this;this.text=v(this.args.value)?"":this.args.value,this.watchArgs("value",function(t){e.text=v(t)?"":t})}}]),t}(e);return t.template="<d-elements value=\"{[{ name: '#text', value: text }]}\"/>",{name:"d-text",value:t}}function je(e){var t=function(e){function t(){return Tt(this,t),Nt(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return Dt(t,e),Ct(t,[{key:"afterUpdate",value:function(e,t){var n=this.elem;e=new Vt(e).$,new Vt(t).forEach(function(t,r){e[r]||n.removeAttr(r)}),n.attr(e)}}]),t}(e);return{name:"d-attr",value:t}}function Re(e){var t=function(e){function t(){return Tt(this,t),Nt(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return Dt(t,e),Ct(t,[{key:"afterUpdate",value:function(e){this.off&&this.off(),c(e)&&(this.off=this.elem.on(this.match[0],e))}}]),t}(e);return{name:"d-bind",value:t}}function Te(e){var n=function(e){function n(){var e,t,r,i;Tt(this,n);for(var a=arguments.length,o=Array(a),u=0;u<a;u++)o[u]=arguments[u];return t=r=Nt(this,(e=n.__proto__||Object.getPrototypeOf(n)).call.apply(e,[this].concat(o))),r.classes=[],i=t,Nt(r,i)}return Dt(n,e),Ct(n,[{key:"afterUpdate",value:function(e){var n=this.elem,r=this.classes,i=[];e=new Vt(e).$,w(e)&&(e=e.split(/\s+/)),t(e)?(E(r,function(t){e.indexOf(t)===-1&&n.removeClass(t)}),E(e,function(e){w(e)&&(i.push(e),n.addClass(e))})):(E(r,function(t){e&&e[t]||n.removeClass(t)}),E(e,function(e,t){e&&(i.push(t),n.addClass(t))})),this.classes=i}}]),n}(e);return{name:"d-class",value:n}}function Ce(e){var t=function(e){function t(e){Tt(this,t);var n=Nt(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),r=n.block,i=n.elem,a=n.evaluateOnce();return c(a)?a(i):w(a)&&(r[a]=i),n}return Dt(t,e),t}(e);return t.evaluate=!1,{name:"d-elem",value:t}}function Ae(e){var t=function(e){function t(){return Tt(this,t),Nt(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return Dt(t,e),Ct(t,[{key:"afterUpdate",value:function(e){var t=this.elem;e?t.hide():t.show()}}]),t}(e);return{name:"d-hide",value:t}}function Pe(e){var t=function(e){function t(e){Tt(this,t);var n=Nt(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.elem.on(n.match[0],function(){n.evaluateOnce()}),n}return Dt(t,e),t}(e);return t.evaluate=!1,{name:"d-on",value:t}}function Le(e){var t=function(e){function t(){return Tt(this,t),Nt(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return Dt(t,e),Ct(t,[{key:"afterUpdate",value:function(e){var t=this.elem;e?t.show():t.hide()}}]),t}(e);return{name:"d-show",value:t}}function De(e){var t=function(e){function t(){return Tt(this,t),Nt(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return Dt(t,e),Ct(t,[{key:"afterUpdate",value:function(e,t){var n=this.elem;e=new Vt(e).$,new Vt(t).forEach(function(t,r){e[r]||n.removeCSS(r)}),n.css(e)}}]),t}(e);return{name:"d-style",value:t}}function Me(e){var t=function(e){function t(){return Tt(this,t),Nt(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return Dt(t,e),Ct(t,[{key:"afterUpdate",value:function(e){this.elem.text(v(e)?"":""+e)}}]),t}(e);return{name:"d-text",value:t}}function Ne(e){var t=function(e){function t(e){Tt(this,t);var n=Nt(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),r=n.elem,i=n.evaluateOnce();return c(i)?r.validate(i):i===!0&&r.on(Jn(r.name,[r.prop("type")]),function(){r.validate()}),n}return Dt(t,e),t}(e);return t.evaluate=!1,{name:"d-validate",value:t}}function Be(e){var t=function(e){function t(e){Tt(this,t);var n=Nt(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),r=n.$$._value,i=n.block,a=n.elem,o=n.node,u=a.name,s=a.prop("type"),l=n.evaluateOnce(),f=null;n.prop=Qn(u,[s,a]),n.name=u,n.type=s,n.value=l,n.options=a.find("option"),c(l)||(f=i.$$.evaluate("{"+r+"}",function(e){n.currentValue=e,n.setProp(e)},n));var h=n.getProp(f,!0),d=v(f),p="checkbox"===s;return d||p?(n.currentValue=h,n.changeScope(),!d&&p&&n.setProp(f)):(n.currentValue=f,n.setProp(f)),a.on(Kn(u,[s]),function(e){e.target===o&&(n.currentValue=n.getProp(n.currentValue),n.changeScope())}),n}return Dt(t,e),Ct(t,[{key:"changeScope",value:function(){var e=this.block,t=this.value,n=this.currentValue;c(t)?t(n):e[t]=n}},{key:"setProp",value:function(e){var t=this.elem,n=this.name,r=this.prop,i=this.type,a=this.node,o=this.options;"text"===r?t.text(e):"multiple-select"===r?o.forEach(function(t){t.selected=e.indexOf(t.value)!==-1}):t.prop(r,Zn(n,[e,i,a.value]))}},{key:"getProp",value:function(e,t){var n=this.elem,r=this.name,i=this.prop,a=this.type,o=this.node,u=this.options;return"text"===i?n.text():Yn(r,[n.prop(i),a,o.value,e,n,u,t])}}]),t}(e);return t.evaluate=!1,{name:"d-value",value:t}}function Ue(e,t){if(!dr[e])throw new Error('No "'+e+'" block is registered! (initApp)');var n=In.createComment(" d-root: start "),r=In.createComment(" d-root: end "),i=new Un(t);i.html(""),new Un([n,r]).into(i),Ie({node:{name:e,attrs:{},children:new nn([])},after:n,parent:i})}function qe(e,t,n){E(e,function(e){var r=e(n,Ie),i=r.name,a=r.value;n===vr?a._html=We(wn(""+(a.template||""),a.collapseWhiteSpace)):a._match=new RegExp("^"+new ln(i).escapeRegExp().$+"(?:-([\\s\\S]+))?$"),t[i]=a})}function Ie(e){var t=e.node,n=e.after,r=e.parent,i=e.parentBlock,a=e.parentScope;a=t&&t.block||a;var o=t&&t.name||"UnknownBlock",u=t&&t.attrs||{},c=t&&t.children||new nn([]),s=r.prop("namespaceURI")===cr?In.svg():new Un(In.template().$[0].content),l=a?a.$$.ns._blocks:dr,f=a?a.$$.ns._mixins:mr,h=t&&t.name&&l[t.name],d=void 0;if(c.length||!(d=o.match(/^d-block-([\s\S]+)$/))&&"d-block"!==o||(h=dr["d-block"],u.name=d?d[1]:"{null}"),!h){var p=function(){var e=t.value,c=t.children;if("#text"===o&&ar.test(e))return{v:Ie({node:{name:"d-text",attrs:{value:e},children:new nn([]),block:a},after:n,parent:r,parentBlock:i,parentScope:a})};var l=s.create(o),h=new nn([]),d=new Vt(u).object(function(e,t,n){var r=void 0;for(var o in f){var u=f[o],c=n.match(u._match);if(c){r={match:c,Mixin:u,name:o};break}}return r?void h.push({name:r.name,Mixin:r.Mixin,match:r.match,value:t,elem:l,parentBlock:i,parentScope:a}):t?void(e[n]=a.$$.evaluate(t,function(e){l.attr(n,e)},i)):void(e[n]="")}).$;return v(e)||l.text(e),d&&l.attr(d),n.length?l.insertAfter(n):l.into(r),n=new Un,c&&He(c).forEach(function(e){var t=Ie({node:e,after:n,parent:l,parentBlock:i,parentScope:a});n=t instanceof vr?t.$$.elems.end:t}),h.forEach(function(e){Fe(e)}),{v:l}}();if("object"===("undefined"==typeof p?"undefined":Rt(p)))return p.v}var m=new h({name:o,args:u,children:c,parent:r,parentBlock:i,parentScope:a});Object.defineProperties(m,{args:{value:m.args},global:{value:m.global}});var g="d-elements"===o?new nn(m.args.value||[]):We(h._html,m);"d-elements"===o&&"#d-item"===i.$$.name&&(g=We(g,i));var y=m.$$,$=m.args,w=m.global,k=Mt(m,["$$","args","global"]);if(delete k.$,delete k.$$,y.args=Je($),y.locals=Je(k),y.global=Je(w,"global",a),"#d-item"===o){for(var b,x=(b={},At(b,t.itemName,t.item),At(b,t.indexName,t.index),b),E=m,O=a,S=void 0;!S&&(E=E.$$.parentBlock);)S="#d-item"===E.$$.name;S&&(O=E.$$.scope),y.ns=a.$$.ns,y.privateScope=Je(x),Qe(y.scope=Object.create(O),x,y.privateScope)}"d-each"===o&&(y.scope=Object.create(a)),Qe($,$,y.args),Qe(w,w,y.global),Qe(m,k,y.locals);try{m.afterConstruct()}catch(e){console.error("Uncaught error in "+o+"#afterConstruct:",e)}var _=new Un([y.elems.start,y.elems.end]);n.length?_.insertAfter(n):_.into(r),n=y.elems.start,He(g).forEach(function(e){var t=Ie({node:e,after:n,parent:r,parentBlock:m,parentScope:a});if(t instanceof vr){var i=t.$$.elems;n=i.end,y.elems.content.add(i.start,i.content,i.end)}else n=t,y.elems.content.add(t)});try{m.afterRender()}catch(e){console.error("Uncaught error in "+o+"#afterRender:",e)}return m}function Fe(e){var t=e.name,n=e.Mixin,r=e.value,i=e.match,a=e.elem,o=e.parentBlock,u=e.parentScope,c=new n({name:t,value:r,match:i,elem:a,parentBlock:o,parentScope:u});if(n.evaluate){var s=c.value=c.evaluateAndWatch(function(e,n){c.value=e;try{c.afterUpdate(e,n)}catch(e){console.error("Uncaught error in "+t+"#afterUpdate:",e)}});c.afterUpdate(s)}}function We(e,t){return new nn(e||[]).map(function(e){var n=e.name,r=e.attrs,i=e.value,a=e.children,o={name:n,value:i,attrs:Pt({},r)};return t&&(o.block=t),a&&(o.children=We(a,t)),o})}function He(e){return new nn(e||[]).concat({}).object(function(e,t){var n=t.name,r=e.html,i=e.ifElse;"d-else-if"!==n&&"d-else"!==n?(i&&(r.push({name:"d-if",block:i.$[0].block,children:i}),e.ifElse=null),"d-if"===n?e.ifElse=new nn([t]):b(n)||r.push(t)):((i||r).push(t),"d-else"===n&&i&&(r.push({name:"d-if",block:i.$[0].block,children:i}),e.ifElse=null))},{html:new nn([]),ifElse:null}).$.html}function ze(e){return nr.call(vr,e)&&nr.call(vr.prototype,e.prototype)}function Ve(e){return nr.call(pr,e)&&nr.call(pr.prototype,e.prototype)}function Ge(e){e.forEach(function(e){var t=e.watcher,n=e.watchers,r=n.indexOf(t);r!==-1&&n.splice(r,1)})}function Je(e,t,n){var r={};return"global"===t&&(r=Object.create(n?n.$$.global:null)),new Vt(e).object(function(e,t,n){e[n]={value:t,watchers:{temp:new nn([]),perm:new nn([])}}},r).$}function Qe(e,t,n){new Vt(e).define(new Vt(t).map(function(e,t){var r=n[t];return{get:function(){return lr&&fr.indexOf(r.watchers.temp)===-1&&fr.push(r.watchers.temp),r.value},set:function(e){if(e!==r.value){hr||(hr=[]);var t=r.watchers.temp.slice(),n=r.value;r.watchers.temp=new nn([]),r.value=e,t.forEach(function(e){e.onRemove(),e()}),hr.push({scope:r,oldValue:n,value:e}),setTimeout(function(){if(hr){for(var e=new nn([]),t=[],n=function(n){var r=hr[n],i=r.scope,a=r.value,o=r.oldValue;i.watchers.perm.forEach(function(n){var r=e.indexOf(n);r===-1?(e.push(n),t.push({value:a,oldValue:o})):t[r].oldValue=o}),hr.splice(n,1)},r=hr.length-1;r>=0;r--)n(r);hr=null,e.forEach(function(e,n){var r=t[n],i=r.value,a=r.oldValue;e(i,a)})}},0)}}}}).$)}function Ze(e,t){var n=String(e),r=t-n.length;return r=r<0?0:r,gr.repeat(r).$+n}function Ye(){return Date.now()}function Ke(e){return arguments.length?(e=new Vt(e).$,new Sr(new Date(e))):new Sr(new Date(Ye()))}function Xe(e){return _r.test(e)}function et(e,t){return t?encodeURIComponent(e):e}function tt(e){var t=e.baseURL,n=e.data,r=e.headers,i=e.method,a=e.params,o=e.query,u=e.url,c=i.toUpperCase();e.method=c,e.url=Rr(t,u,a,o),e.data=Pr(n,c,r),e.headers=new Vt(r).object(function(e,t,n){n=new ln(n).toCapitalCase().replace(/\s+/g,"-").$,e[n]=t.join(", ")}).$}function nt(){if(!Jr){if(Jr=!0,ei=(Ir.find(function(e){var t=e.name;return t===Xr})||{}).value,ni=(Ir.find(function(e){var t=e.name;return t===ti})||{}).value,Xr&&!ei)throw new Error('There is no specified fallback route ("'+Xr+'")! (at initRouter)');Ir.forEach(function(e){var t=e.parentName,n=e.name,r=t||Kr,i=Ir.find(function(e){var t=e.name;return t===r})||{},a=i.value;if(!a)throw new Error('No such parent route ("'+r+'") found for the route ("'+n+'")! (at initRouter)');if(!a.abstract&&n!==Kr)throw new Error('Parent route must be abstract (for "'+n+'")! (at initRouter)');n!==Kr&&(e.parentName=r),e.parent=n===Kr?ci:a}).forEach(function(e){var t=e.name,n=e.parent,r=n.params,i=n.query,a=n.path,o=e.params,u=e.query,c=e.relativeURL,s=e.relativePath,l=e,f=0,h=s,v="";if($(a))throw new Error("URL regexp route cannot be extended! (at initRouter)");for(;l=l.parent;)f+=new Vt(l.params).count,h=l.relativePath+h,v=l.relativeURL+v,l.children.push(e);if(h=new RegExp("^"+(h.replace(/\/+/g,"/").replace(/\/$/,"")||"/")+"$"),v=$(c)?h:(v+c).replace(/\/+/g,"/").replace(/\/$/,"")||"/",new Vt(u).proto(i),new Vt(o).proto(r).forEach(function(e,t,n){n[t]+=f}),t===ti&&(new Vt(o).count||new Vt(u).count))throw new Error("Default route must not have URL or query params! (at initRouter)");e.url=v,e.validatePath=h}),ot(),qn.on({popstate:function(){Vr.href!==Gr&&(Qr=!0),Qr&&ot()},click:function(e){var t=new Un(e.target).closest("a");if(t.length&&"_blank"!==t.attr("target")){var n=!t.hasAttr("replace");e.preventDefault(),at(t.attr("href")||"",n)}}})}}function rt(e){return function(t){function n(e){if(!p){var t={$$:{children:new nn([e])}},n=void 0;t.$$.children.forEach(function e(t){if(t.__routerInstance__){if(n)return;n=!0}var r=t.$$,i=r.name,a=r.children,o=r.mixins;if(a&&a.forEach(e),o&&o.forEach(e),t.beforeLoadRoute)try{t.beforeLoadRoute()}catch(e){console.error("Uncaught error in "+i+"#beforeLeave:",e)}}),p=!0}}function r(e){if(p){var t={$$:{children:new nn([e])}},n=void 0;t.$$.children.forEach(function e(t){if(t.__routerInstance__){if(n)return;n=!0}var r=t.$$,i=r.name,a=r.children,o=r.mixins;if(a&&a.forEach(e),o&&o.forEach(e),t.beforeLeaveRoute)try{t.beforeLeaveRoute()}catch(e){console.error("Uncaught error in "+i+"#beforeLeave:",e)}}),p=!1}}var i,a;e=O({},e,t.routerOptions);var o=e||{},u=o.name,c=o.path,s=o.abstract,l=o.root,f=o.fallbackTo,h=o.default;if(Jr)return console.warn("Router was already initialized (at makeRoute)"),Q;if(Zr&&l)throw new Error("There can't be two root routes (\""+Kr+'" and "'+u+'")! (at makeRoute)');if(Yr&&h)throw new Error("There can't be two default routes (\""+ti+'" and "'+u+'")! (at makeRoute)');if(!u)throw new Error('State must have a non-empty string "name" property! (at makeRoute)');if(Ir.some(function(e){var t=e.name;return t===u}))throw new Error('State must have unique "name" property! (at makeRoute)');if(l&&(Zr=!0,Kr=u,e.parent=null,f&&(Xr=f)),h){if(Yr=!0,ti=u,s)throw new Error("Default route can't be abstract! (at makeRoute)");if($(c))throw new Error("Default route can't have a regexp path! (at makeRoute)")}var v=new ui(e);Ir.push(v);var d=void 0,p=void 0;return a=i=function(e){function t(e){Tt(this,t);var i=Nt(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return l&&(nt(),i.global.router=oi),i.__routerInstance__=v,i.__isCurrentRoute__=Fr.includes(v),i.args.route=ii,p=!1,d=it(u,function(e){var t="leave"!==e;"load"===e?n(i):"leave"===e&&r(i),t&&(i.args.route=ii),i.__isCurrentRoute__=t}),i.__isCurrentRoute__&&n(i),i}return Dt(t,e),Ct(t,[{key:"beforeRemove",value:function(){d(),d=null,r(this),Lt(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"beforeRemove",this).call(this)}}]),t}(t),i.template="<div"+(' class="dwayne-route route-'+u+'"')+' d-class="{{ \'active-route\': __isCurrentRoute__ }}" d-show="{__isCurrentRoute__}">'+t.template+"</div>",a}}function it(e,t){return Wr[e]=t,function(){delete Wr[e]}}function at(e,t){st(e,t),ot()}function ot(){var e=ut();if(e){var t=e;ri=t.route,ii=Mt(t,["route"]),O(ii,{name:ri.name,host:Vr.host,hostname:Vr.hostname,href:Vr.href,origin:Vr.origin,pathname:Vr.pathname,port:Vr.port,protocol:Vr.protocol,search:Vr.search})}else{if(Xr){var n=ei,r=n.url,i=n.encodeParams,a=n.encodeQuery;return at(Rr("",r,{},{},"",{params:i,query:a}))}ri=null,ii=null}for(var o=new nn([]),u=new nn([]),c=void 0;Fr.length&&!c;){var s=Fr.pop();s.children.includes(ri)?(Fr.push(s),c=s):o.push(s)}if(ri){for(var l=ri;l!==c&&l!==ci;)u.push(l),l=l.parent;Fr.push.apply(Fr,Ut(u.$))}o.forEach(function(e){var t=e.name;Wr[t]&&Wr[t]("leave")}),Fr.forEach(function(e){var t=e.name;Wr[t]&&Wr[t](u.includes(e)?"update":"load")})}function ut(){var e=Vr.pathname||"/",t=Vr.search||"",n=void 0;return Ir.some(function(r){if(!r.abstract){var i=r.url,a=r.validatePath,o=r.params,u=r.query,c=r.decodeParams,s=r.decodeQuery,l=qr(s),f=new Vt(l.query),h={},v=((e.replace(/\/$/,"")||"/")+($(i)?t:"")).match(a);if(v){for(var d in u)if(!f.hasOwn(d)||!u[d].test(f.$[d]))return;v.shift();for(var p in o)h[p]=ct(v[o[p]],c);return n={route:r,params:h,query:f.$,hash:l.hash},!0}}}),n?n:ti?Pt({route:ni,params:{}},qr(ni.decodeQuery)):void 0}function ct(e,t){return t?decodeURIComponent(e):e}function st(e,t){try{zr[t?"pushState":"replaceState"](null,null,e),Qr=!0}catch(t){Vr.href=e}}function lt(e,t,n){var r=e.match(/^[a-z_$]+/i);if(!r)throw new Error(t);var i=r[0],a=e.slice(i.length),o=void 0;if(a&&(a.indexOf("(")||a.indexOf(")")!==a.length-1))throw new Error(n);return a&&(o=new RegExp(a.slice(1,-1))),{name:i,regexp:o}}function ft(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=Ir.find(function(t){var n=t.name;return n===e})||{},r=n.value;if(!r)throw new Error('There are no routes with name "'+e+'"! (at router.buildURL)');var i=r.url,a=r.encodeParams,o=r.encodeQuery;if($(i))throw new Error("URL can be built only from the string URLs! (at router.buildURL)");var u=t.params,c=void 0===u?{}:u,s=t.query,l=void 0===s?{}:s,f=t.hash,h=void 0===f?"":f;return Rr("",i,c,l,h,{params:a,query:o})}function ht(e,t){at(ft(e,t),!0)}function vt(e){at(e,!0)}function dt(e){st(e,!0)}function pt(e,t){at(ft(e,t))}function mt(e){at(e)}function gt(e){st(e)}var yt="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},$t={"#":function(e,t){e.id(t)},".":function(e,t){e.addClass(t)},$:function(e,t,n){e.attr(t,n)},"@":function(e,t,n){e.css(t,n)},"&":function(e,t,n){e.html(n)},"*":function(e,t,n){e.text(n)},"-":{".":function(e,t){e.removeClass(t)},$:function(e,t){e.removeAttr(t)},"@":function(e,t){e.removeCSS(t)}}},wt=["createImageData","createLinearGradient","createPattern","createRadialGradient","getImageData","getLineDash","isPointInPath","isPointInStroke","measureText"],kt=["arc","arcTo","beginPath","bezierCurveTo","clearRect","clip","closePath","drawFocusIfNeeded","drawImage","ellipse","fill","fillRect","fillText","lineTo","moveTo","putImageData","quadraticCurveTo","rect","resetTransform","restore","rotate","save","scale","setLineDash","setTransform","stroke","strokeRect","strokeText","transform","translate"],bt=[[],[],[]],xt=["a","abbr","address","area","article","audio","b","base","bdi","bdo","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","content","datalist","dd","del","details","dfn","dialog","div","dl","dt","element","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","i","iframe","img","input","ins","kbd","label","legend","li","link","main","mark","menu","menuitem","meta","meter","nav","noscript","ol","optgroup","option","output","p","param","pre","progress","q","rp","rt","rtc","ruby","s","samp","script","section","select","shadow","small","source","span","strong","style","sub","summary","sup","table","tbody","td","template","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr"],Et=["altGlyph","altGlyphDef","altGlyphItem","animate","animateColor","animateMotion","animateTransform","circle","clipPath","color-profile","cursor","defs","desc","discard","ellipse","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","font","font-face","font-face-format","font-face-name","font-face-src","font-face-uri","foreignObject","g","glyph","glyphRef","hatch","hatchpath","hkern","image","line","linearGradient","marker","mask","mesh","meshgradient","meshpatch","meshrow","metadata","missing-glyph","mpath","path","pattern","polygon","polyline","radialGradient","rect","set","solidcolor","stop","style","svg","switch","symbol","textPath","tref","tspan","unknown","use","view","vkern"],Ot=["area","base","br","col","command","embed","hr","img","input","keygen","link","meta","param","source","track","wbr"],St="[a-z][a-z\\d\\-_.:!@#\\$%\\^&*()\\[\\]{}\\\\='\"]*",_t="[^\\u0000-\\u0020\\s\"'>/=]+",jt=[".","+","*","?","(",")","[","]","{","}","<",">","^","$","!","=",":","-","|",",","\\"],Rt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){
return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Tt=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},Ct=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),At=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},Pt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Lt=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var a=Object.getPrototypeOf(t);return null===a?void 0:e(a,n,r)}if("value"in i)return i.value;var o=i.get;if(void 0!==o)return o.call(r)},Dt=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},Mt=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n},Nt=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},Bt=function(){function e(e,t){var n=[],r=!0,i=!1,a=void 0;try{for(var o,u=e[Symbol.iterator]();!(r=(o=u.next()).done)&&(n.push(o.value),!t||n.length!==t);r=!0);}catch(e){i=!0,a=e}finally{try{!r&&u.return&&u.return()}finally{if(i)throw a}}return n}return function(t,n){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),Ut=function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)},qt={">0":{check:function(e){return e>0},text:"$n argument must be positive!",error:RangeError},">=0":{check:function(e){return e>=0},text:"$n argument must be non-negative!",error:RangeError},"<0":{check:function(e){return e<0},text:"$n argument must be negative!",error:RangeError},"<=0":{check:function(e){return e<=0},text:"$n argument must be non-positive!",error:RangeError},"!!":{check:function(e){return!v(e)},text:"$n argument must be not null or undefined!",error:TypeError},array:{check:t,text:"$n argument must be an array!",error:TypeError},"array||!":{check:function(e){return t(e)||v(e)},text:"$n argument must be an array, or undefined, or null!",error:TypeError},arrayLike:{check:n,text:"$n argument must be array-like!",error:TypeError},"arrayLike||!":{check:function(e){return n(e)||v(e)},text:"$n argument must be array-like, or undefined, or null!",error:TypeError},date:{check:i,text:"$n argument must be a date!",error:TypeError},"date||!":{check:function(e){return i(e)||v(e)},text:"$n argument must be a date, or undefined, or null!",error:TypeError},dateLike:{check:a,text:"$n argument must be date-like!",error:TypeError},"dateLike||!":{check:function(e){return a(e)||v(e)},text:"$n argument must be date-like, or undefined, or null!",error:TypeError},function:{check:c,text:"$n argument must be a function!",error:TypeError},"function||!":{check:function(e){return c(e)||v(e)},text:"$n argument must be a function, or undefined, or null!",error:TypeError},int:{check:s,text:"$n argument must be an integer!",error:TypeError},"int||!":{check:function(e){return s(e)||v(e)},text:"$n argument must be an integer, or undefined, or null!",error:TypeError},intLike:{check:l,text:"$n argument must be integer-like!",error:TypeError},"intLike||!":{check:function(e){return l(e)||v(e)},text:"$n argument must be integer-like, or undefined, or null!",error:TypeError},number:{check:d,text:"$n argument must be a number!",error:TypeError},"number||!":{check:function(e){return d(e)||v(e)},text:"$n argument must be a number, or undefined, or null!",error:TypeError},numberLike:{check:p,text:"$n argument must be number-like!",error:TypeError},"numberLike||!":{check:function(e){return p(e)||v(e)},text:"$n argument must be number-like, or undefined, or null!",error:TypeError},object:{check:m,text:"$n argument must be an object!",error:TypeError},"object||!":{check:function(e){return m(e)||v(e)},text:"$n argument must be an object, or undefined, or null!",error:TypeError},regexp:{check:$,text:"$n argument must be a regular expression!",error:TypeError},"regexp||!":{check:function(e){return $(e)||v(e)},text:"$n argument must be a regular expression, or undefined, or null!",error:TypeError},string:{check:w,text:"$n argument must be a string!",error:TypeError},"string||!":{check:function(e){return w(e)||v(e)},text:"$n argument must be a string, or undefined, or null!",error:TypeError}},It=yt.Symbol||{toStringTag:"Symbol.toStringTag",iterator:Math.random().toString(36)},Ft=["1st","2nd","3rd","4th","5th","6th","7th"],Wt=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];Tt(this,e);for(var n={},r=0,i=t.length;r<i;r++){var a=t[r];if(!T(a))throw new Error("Each element of an array must be a single char! (in Alphabet)");n[a]=a}Object.defineProperty(this,"$$",{value:n})}return Ct(e,[{key:"add",value:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];for(var r=0,i=t.length;r<i;r++){var a=t[r];if(!T(a))throw new Error("Each argument must be a single char! (in Alphabet#add)");this.$$[a]=a}return this}},{key:"contains",value:function(e){R([e],["string"],"Alphabet#contains");for(var t=this.$$,n=0,r=e.length;n<r;n++)if(!t[e[n]])return!1;return!0}},{key:"delete",value:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];for(var r=0,i=t.length;r<i;r++){var a=t[r];if(!T(a))throw new Error("Each argument must be a single char! (in Alphabet#delete)");delete this.$$[a]}return this}},{key:"get",value:function(){return Object.keys(this.$$)}},{key:"token",value:function e(t){R([t],[["intLike",">0"]],"Alphabet#token");for(var n=Object.keys(this.$$),r=n.length,e="",i=0;i<t;i++)e+=n[Math.floor(Math.random()*r)];return e}}]),e}();_(Wt.prototype,At({},It.toStringTag,"Alphabet"));var Ht=function(e){function n(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],r=e.$$,i=r.mode,a=r.default,o=r.cases,u=E(o,function(e){var n=e.value,r=e.case;if("boolean"===i&&r||"equals"===i&&r==t||"strictEquals"===i&&r===t||"call"===i&&r(t))return{case:r,value:n}});return b(u)&&(u={value:a}),c(u.value)?(n=j(n,!0),n.push(t,u.case),u.value.apply(null,n)):u.value}var t,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"equals",a=arguments[2];Tt(this,n);var o=Nt(this,(n.__proto__||Object.getPrototypeOf(n)).call(this));w(r)&&(b(arguments[1])||(a=i),i=r,r={});var u=[];return E(r,function(e,t){u.push({case:t,value:e})}),Object.defineProperty(e,"$$",{value:{cases:u,mode:i,default:a}}),Object.setPrototypeOf(e,n.prototype),t=e,Nt(o,t)}return Dt(n,e),Ct(n,[{key:"case",value:function(e,n){var r=this;return t(e)||(e=[e]),E(e,function(e){r.$$.cases.push({case:e,value:n})}),this}},{key:"default",value:function(e){return this.$$.default=e,this}},{key:"mode",value:function(e){return this.$$.mode=e,this}}]),n}(Function);_(Ht.prototype,At({},It.toStringTag,"Switcher"));var zt=A("call",function(e){return e}).case(function(e){return new Vt(e)===e},function(e){return new(Object.getPrototypeOf(e).constructor)(new Vt(e.$).deepClone().$)}).case(o,function(e,t){return e.clone(t)}).case(i,function(e){return new Date(e)}).case($,function(e){return new RegExp(e.source,e.toString().match(/[gimuy]*$/)[0])}).case(t,function(){return[]}).case(g,function(){return{}}),Vt=function(){function r(e){return Tt(this,r),e instanceof r?e:void Object.defineProperty(this,"$",{value:e})}return Ct(r,[{key:"assign",value:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var i=this.$;return E(i&&arguments,function(e){E(new r(e).$,function(e,t){i[t]=e})}),this}},{key:"average",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return R([e],["function||!"],"Super#average"),this.sum(e)/this.count}},{key:"call",value:function(e){R([e],["function"],"Super#call");for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return e.apply(this,n)}},{key:"clone",value:function e(){var t=this.$,e=zt(t,[t,!1]);return e!==t&&E(t,function(t,n){e[n]=t}),new this.constructor(e)}},{key:"create",value:function(e){return x(y(this.$)?void 0:Object.create(this.$,e))}},{key:"deepAssign",value:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=this.$;return y(r)?this:(E(arguments,function(e){L(r,e)}),this)}},{key:"deepClone",value:function(){return new this.constructor(D(this.$))}},{key:"deepEquals",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return M(this.$,e,!1)}},{key:"deepEvery",value:function(e,t){return 1!==arguments.length||c(e)?1===arguments.length?t=1/0:arguments.length||(t=1/0,e=Boolean):(t=e,e=Boolean),R([e,t],["function",["numberLike",">0"]],"Super#deepEvery"),t=Number(t),N(this.$,e,t,[{key:null,value:this.$}])}},{key:"deepFilter",value:function(e,t){1!==arguments.length||c(e)?1===arguments.length?t=1/0:arguments.length||(t=1/0,e=Boolean):(t=e,e=Boolean),R([e,t],["function",["numberLike",">0"]],"Super#deepFilter");var n=B(this.$,e,t,[{key:null,value:this.$}]);return x(v(n)?n:n||{})}},{key:"deepFind",value:function(e,t){return 1!==arguments.length||c(e)?1===arguments.length?t=1/0:arguments.length||(t=1/0,e=Boolean):(t=e,e=Boolean),R([e,t],["function",["numberLike",">0"]],"Super#deepFind"),U(this.$,e,t,[{key:null,value:this.$}])}},{key:"deepForEach",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1/0;return R([e,t],["function",["numberLike",">0"]],"Super#deepForEach"),t=Number(t),q(this.$,e,t,[{key:null,value:this.$}]),this}},{key:"deepForEachEntry",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1/0;return R([e,t],["function",["numberLike",">0"]],"Super#deepForEach"),t=Number(t),I(this.$,e,t,[{key:null,value:this.$}]),this}},{key:"deepFreeze",value:function(){return F(this.$),this}},{key:"deepMap",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1/0;return R([e,t],["function",["numberLike",">0"]],"Super#deepMap"),t=Number(t),x(W(this.$,e,t,[{key:null,value:this.$}]))}},{key:"deepReduce",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1/0,n=arguments[2];R([e,t],["function",["numberLike",">0"]],"Super#deepReduce"),t=Number(t);var r=this.$,i=[{key:null,value:this.$}];return arguments.length<3?H(r,e,t,!1,void 0,i).IV:H(r,e,t,!1,{IV:n},i).IV}},{key:"deepSome",value:function(e,t){return 1!==arguments.length||c(e)?1===arguments.length?t=1/0:arguments.length||(t=1/0,e=Boolean):(t=e,e=Boolean),R([e,t],["function",["numberLike",">0"]],"Super#deepSome"),t=Number(t),z(this.$,e,t,[{key:null,value:this.$}])}},{key:"deepStrictEquals",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return M(this.$,e,!0)}},{key:"define",value:function(e,t){return arguments.length>=2&&(e=At({},e,t)),e=new r(e).$,m(this.$)&&Object.defineProperties(this.$,e),this}},{key:"delete",value:function(){for(var e=this.$,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return E(e&&n,function(t){delete e[t]}),this}},{key:"equals",value:function(e){var t=this.$;return e=new r(e).$,t==e||f(t)&&f(e)}},{key:"every",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Boolean;return R([e],["function"],"Super#every"),E(this.$,function(t,n,r){if(!e(t,n,r))return!1})!==!1}},{key:"filter",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Boolean;R([e],["function"],"Super#filter");var t=this.$,r=n(t),i=r?[]:v(t)?t:{};return E(t,function(n,a){e(n,a,t)&&(r?i.push(n):i[a]=n)}),x(i)}},{key:"find",value:function(e){return R([e],["function"],"Super#find"),E(this.$,function(t,n,r){if(e(t,n,r))return{key:n,value:t}})||null}},{key:"forEach",value:function(e){return R([e],["function"],"Super#forEach"),E(this.$,function(t,n,r){e(t,n,r)}),this}},{key:"freeze",value:function(){return Object.freeze(this.$),this}},{key:"get",value:function(e,t){arguments.length>=2&&(e=At({},e,t));var n=this.$;return E(m(n)&&new r(e).$,function(e,t){Object.defineProperty(n,t,{get:e})}),this}},{key:"has",value:function(e){var t=this.$;return!!m(t)&&e in t}},{key:"hasOwn",value:function(e){var t=this.$;return!!m(t)&&{}.hasOwnProperty.call(t,e)}},{key:"instanceof",value:function(e){return this.$ instanceof e}},{key:"isFrozen",value:function(){return Object.isFrozen(this.$)}},{key:"json",value:function(e,n){return 1!==arguments.length||c(e)||t(e)||[].unshift.call(arguments,null),[].unshift.call(arguments,this.$),JSON.stringify.apply(JSON,arguments)}},{key:"keyOf",value:function(e){var t=E(this.$,function(t,n){if(t==e||f(t)&&f(e))return n});return b(t)?null:t}},{key:"keyOfStrict",value:function(e){var t=E(this.$,function(t,n){if(t===e||f(t)&&f(e))return n});return b(t)?null:t}},{key:"keys",value:function(){var e=this.$;return x(m(e)?Object.keys(e):[])}},{key:"map",value:function(e){R([e],["function"],"Super#map");var t=this.$,r=n(t)?[]:h(t)?null:{};return E(t,function(n,i){r[i]=e(n,i,t)}),x(r)}},{key:"max",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return R([e],["function||!"],"Super#max"),this.object(function(t,n,r,i){var a=Number(e?e(n,r,i):n);a>t.value&&(t.key=r,t.value=a)},{key:null,value:-(1/0)}).$}},{key:"min",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return R([e],["function||!"],"Super#min"),this.object(function(t,n,r,i){var a=Number(e?e(n,r,i):n);a<t.value&&(t.key=r,t.value=a)},{key:null,value:1/0}).$}},{key:"object",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return R([e],["function"],"Super#object"),E(this.$,function(n,r,i){e(t,n,r,i)}),x(t)}},{key:"prop",value:function(e,t){return arguments.length<=1&&w(e)?this.$?this.$[e]:void 0:(arguments.length>=2&&(e=At({},e,t)),this.assign(e))}},{key:"propertyDescriptor",value:function(e){var t=this.$;return m(t)?Object.getOwnPropertyDescriptor(t,e):void 0}},{key:"propertyNames",value:function(){var e=this.$;return x(m(e)?Object.getOwnPropertyNames(e):[])}},{key:"propertySymbols",value:function(){var e=this.$;return x(m(e)?Object.getOwnPropertySymbols(e):[])}},{key:"proto",value:function(e){var t=this.$,n=!v(t);return arguments.length?(n&&(m(e)||h(e))&&Object.setPrototypeOf(t,e),this):n?new r(Object.getPrototypeOf(t)):new r}},{key:"reduce",value:function(e,t){R([e],["function"],"Super#reduce");var n=this.$,r=void 0;return 1===arguments.length&&E(n,function(e,n){return r=n,t=e,!0}),E(n,function(i,a){a!==r&&(t=e(t,i,a,n))}),t}},{key:"set",value:function(e,t){arguments.length>=2&&(e=At({},e,t));var n=this.$;return E(m(n)&&new r(e).$,function(e,t){Object.defineProperty(n,t,{set:e})}),this}},{key:"some",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Boolean;return R([e],["function"],"Super#some"),E(this.$,function(t,n,r){if(e(t,n,r))return!0})||!1}},{key:"strictEquals",value:function(e){var t=this.$;return e=new r(e).$,t===e||f(t)&&f(e)}},{key:"sum",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return R([e],["function||!"],"Super#sum"),this.reduce(function(t,n,r,i){return t+Number(e?e(n,r,i):n)},0)}},{key:"toJSON",value:function(){return this.$}},{key:"value",value:function(e,t){arguments.length>=2&&(e=At({},e,t));var n=this.$;return E(m(n)&&new r(e).$,function(e,t){Object.defineProperty(n,t,{value:e})}),this}},{key:"values",value:function(){var e=[];return E(this.$,function(t){e.push(t)}),x(e)}},{key:"word",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return R([e],["function||!"],"Super#word"),this.reduce(function(t,n,r,i){return t+String(e?e(n,r,i):n)},"")}},{key:"count",get:function(){var e=this.$;return m(e)?n(e)?e.length:Object.keys(e).length:0}},{key:"toStringTag",get:function(){return e(this.$)}},{key:"type",get:function(){return Rt(this.$)}}],[{key:"addStaticProperties",value:function(e,t){return arguments.length>=2&&(e=At({},e,t)),_(this,e),this}},{key:"addInstanceProperties",value:function(e,t){return arguments.length>=2&&(e=At({},e,t)),_(this.prototype,e),this}}]),r}();_(Vt.prototype,At({},It.toStringTag,"Super")),bt[0].push({check:function(){return!0},cls:Vt});var Gt={},Jt=It.iterator,Qt=function(){function e(t){function n(t){"pending"===l.status&&!function(){l.status="rejected",l.value=t;for(var n=0,r=u.length;n<r;n++)l.handled=!0,u[n](t);var i=e.onUnhandledRejection,a=e.onError;c(a)&&a(t),setTimeout(function(){!l.handled&&c(i)&&i(t)},1)}()}function r(e){if("pending"===l.status){if(e&&c(e.then))return e.then(function(e){r(e)},function(e){n(e)});l.status="fulfilled",l.value=e;for(var t=0,i=o.length;t<i;t++)l.handled=!0,o[t](e)}}if(Tt(this,e),!c(t))throw new TypeError("Promise resolver "+{}.toString.call(t)+" is not a function");var i=void 0,a=void 0,o=[],u=[],s=this,l={handled:!1,get status(){return i},set status(e){i=e,s.status=e},get value(){return a},set value(e){a=e,s.value=e}};l.status="pending",l.value=void 0,_(this.$$={},{"get/set handled":{get:function(){return l.handled},set:function(e){e===Gt&&(l.handled=!0)}},handle:function(e,t,n,r,i){if(i===Gt){var a=c(t)?function(e){try{n(t(e))}catch(e){r(e)}}:null;"resolve"===e?o.push(a||function(e){return n(e)}):"reject"===e&&u.push(a||function(e){return r(e)})}},"get status":function(){return l.status},"get value":function(){return l.value}});try{t(r,n)}catch(e){n(e)}}return Ct(e,[{key:"abort",value:function(){}},{key:"catch",value:function(e){return this.then(null,e)}},{key:"finally",value:function(t){var n=c(t);return this.then(function(r){return e.resolve(n?t(r,!0):0).then(function(){return r})},function(r){return e.resolve(n?t(r,!1):0).then(function(){return e.reject(r)})})}},{key:"then",value:function(t,n){var r=this.$$;if("pending"===r.status)return new e(function(e,i){r.handle("reject",n,e,i,Gt),r.handle("resolve",t,e,i,Gt)});r.handled=Gt;var i=r.value,a=void 0,o=void 0;if("fulfilled"===r.status?(a="resolve",o=t):(a="reject",o=n),!c(o))return e[a](i);try{return e.resolve(o(i))}catch(t){return e.reject(t)}}}],[{key:"all",value:function(t){var n=[],r=0;if(t[Jt])return t=t[Jt](),new e(function(i,a){for(var o=void 0,u=0,c=function(){var t=e.resolve(o.value);r++,function(e){t.then(function(t){r--,n[e]=t,setTimeout(function(){o.done&&!r&&i(n)},1)},a)}(u++)};!(o=t.next()).done;)c();if(!u)return e.resolve([])});var i=t.length;return i?(r=i,new e(function(a,o){for(var u=function(i){var u=e.resolve(t[i]);u.then(function(e){r--,n[i]=e,r||a(n)},o)},c=0;c<i;c++)u(c)})):e.resolve([])}},{key:"race",value:function(t){return t[Jt]?(t=t[Jt](),new e(function(e,n){for(var r=void 0;!(r=t.next()).done;)r.value.then(e,n)})):new e(function(e,n){for(var r=0,i=t.length;r<i;r++)t[r].then(e,n)})}},{key:"reject",value:function(t){return new e(function(e,n){n(t)})}},{key:"resolve",value:function(t){return t&&c(t.then)?t:new e(function(e){e(t)})}}]),e}();Qt.onError=null,Qt.onUnhandledRejection=console.error.bind(console,"%s %o","Uncaught (in promise)"),_(Qt.prototype,At({},It.toStringTag,"Promise"));var Zt=function(e){function t(){function e(){var t=this,n=arguments;if(++e.$$.called<e.$$.canBeCalled){var i=function(){var i=e.$$,a=i.before,o=i.after,u=i.sync,c=i.contextLocked,s=e.$$,l=s.context,f=s.args,h=void 0;if(l=c?l:l||t,f=f.concat(j(n)),u)return E(a,function(t){f=t.call(l,j(f),e)}),h=r.apply(l,j(f)),E(o,function(t){h=t.call(l,h,e)}),{v:h};var v=Qt.resolve(f);return E(a,function(t){v=v.then(function(n){return t.call(l,j(n),e)})}),v=v.then(function(e){return r.apply(l,j(e))}),E(o,function(t){v=v.then(function(n){return t.call(l,n,e)})}),{v:v}}();if("object"===("undefined"==typeof i?"undefined":Rt(i)))return i.v}}var n,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){};Tt(this,t);var i=Nt(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return Object.defineProperty(e,"$$",{value:{after:[],args:[],argsLocked:[],before:[],called:0,canBeCalled:1/0,context:null,contextLocked:!1,sync:!0}}),Object.defineProperty(e,"$",{value:r}),Object.setPrototypeOf(e,t.prototype),n=e,Nt(i,n)}return Dt(t,e),Ct(t,[{key:"after",value:function e(t){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];R([t],["function"],"Func#after");var e=this.$$.after;return n?e.push(t):e.unshift(t),this}},{key:"apply",value:function(e,t){return function(){}.apply.apply(this,arguments)}},{key:"async",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return this.$$.sync=!e,this}},{key:"before",value:function e(t){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];R([t],["function"],"Func#before");var e=this.$$.before;return n?e.unshift(t):e.push(t),this}},{key:"bind",value:function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return this.bindContext(e).bindArgs(n)}},{key:"bindArgs",value:function(e){var t=this.$$;return t.args=t.args.concat(j(e)),this}},{key:"bindContext",value:function(e){var t=this.$$;return t.contextLocked||(t.context=e),this}},{key:"call",value:function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return function(){}.call.apply(this,arguments)}},{key:"canBeCalled",value:function(e){return this.$$.canBeCalled=e,this}},{key:"limitArgsTo",value:function(e){return this.before(function(t){return t.slice(0,e)},!1)}},{key:"lock",value:function(e,t){return this.lockContext(e).lockArgs(t)}},{key:"lockArgs",value:function(e){var t=this.$$;return t.args=t.argsLocked=t.argsLocked.concat(j(e)),this}},{key:"lockContext",value:function(e){var t=this.$$;return t.contextLocked||(t.context=e,t.contextLocked=!0),this}},{key:"timing",value:function(e){return e=arguments.length?String(e):this.$.name||"anonymous",this.before(function(t){return console.time(e),t},!1),this.after(function(t){return console.timeEnd(e),t},!1),this}},{key:"toString",value:function(){return function(){}.toString.call(this.$)}},{key:"unbind",value:function(){return this.unbindContext().unbindArgs()}},{key:"unbindArgs",value:function(){var e=this.$$;return e.args=e.argsLocked,this}},{key:"unbindContext",value:function(){var e=this.$$;return e.contextLocked||(e.context=null),this}},{key:"called",get:function(){return this.$$.called}}]),t}(Vt);_(Zt.prototype,At({},It.toStringTag,"Func")),bt[1].push({check:c,cls:Zt});var Yt=Math.PI/180,Kt=180/Math.PI,Xt=Math.LN2,en=Math.LN10,tn=function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return Tt(this,t),Nt(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,+e))}return Dt(t,e),Ct(t,[{key:"acos",value:function(e){return(e?Kt:1)*Math.acos(this.$)}},{key:"asin",value:function(e){return(e?Kt:1)*Math.asin(this.$)}},{key:"atan",value:function(e){return(e?Kt:1)*Math.atan(this.$)}},{key:"cos",value:function(e){return Math.cos((e?Yt:1)*this.$)}},{key:"interval",value:function(e){function t(){return i=!0,clearTimeout(a)}var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];R([e],["function"],"Num#interval"),e=new Zt(e).bindContext({abort:t}),n=j(n);var r=this.$,i=void 0,a=setTimeout(function t(){i||(e.apply(null,n),i||(a=setTimeout(t,r)))},0);return t}},{key:"log",value:function(e){return Math.log(e)/Math.log(this.$)}},{key:"pow",value:function(e){return Math.pow(this.$,e)}},{key:"root",value:function(e){return Math.pow(this.$,1/e)}},{key:"sin",value:function(e){return Math.sin((e?Yt:1)*this.$)}},{key:"tan",value:function(e){return Math.tan((e?Yt:1)*this.$)}},{key:"timeout",value:function e(t){var n=this,e=void 0,r=void 0,i=new Qt(function(i,a){r=a,e=setTimeout(i,n.$,t)});return i.abort=function(){return clearTimeout(e),r(new Error("Timeout was aborted")),this},i}},{key:"toBase",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10;return this.$.toString(e)}},{key:"toExponential",value:function(e){return this.$.toExponential(e)}},{key:"toFixed",value:function(e){return this.$.toFixed(e)}},{key:"toPrecision",value:function(e){return this.$.toPrecision(e)}},{key:"valueOf",value:function(){return Number(this.$)}},{key:"abs",get:function(){return Math.abs(this.$)}},{key:"acosh",get:function(){var e=this.$;return Math.log(e+Math.sqrt(e*e-1))}},{key:"asinh",get:function(){var e=this.$;return Math.log(e+Math.sqrt(e*e+1))}},{key:"atanh",get:function(){var e=this.$;return Math.log((1+e)/(1-e))/2}},{key:"cbrt",get:function(){var e=Math.pow(Math.abs(this.$),1/3);return this.$>0?e:-e}},{key:"ceil",get:function(){return Math.ceil(this.$)}},{key:"cosh",get:function(){var e=this.exp;return(e+1/e)/2}},{key:"cube",get:function(){return this.$*this.$*this.$}},{key:"exp",get:function(){return Math.exp(this.$)}},{key:"floor",get:function(){return Math.floor(this.$)}},{key:"ln",get:function(){return Math.log(this.$)}},{key:"log2",get:function(){return this.ln/Xt}},{key:"log10",get:function(){return this.ln/en}},{key:"round",get:function(){return Math.round(this.$)}},{key:"sign",get:function(){var e=this.$;return e?e>0?1:-1:e}},{key:"sinh",get:function(){var e=this.exp;return(e-1/e)/2}},{key:"sq",get:function(){return this.$*this.$}},{key:"sqrt",get:function(){return Math.sqrt(this.$)}},{key:"tanh",get:function(){var e=this.$;if(!u(e))return this.sign;var t=Math.exp(2*e);return(t-1)/(t+1)}}]),t}(Vt);_(tn.prototype,At({},It.toStringTag,"Num")),bt[1].push({check:d,cls:tn});var nn=function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return Tt(this,t),Nt(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,j(e instanceof t?e.$:e)))}return Dt(t,e),Ct(t,[{key:"concat",value:function(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];var i=j(this.$,!0);return E(arguments,function(e){return e=new Vt(e).$,n(e)&&!w(e)?void E(e,function(e){i.push(e)}):void i.push(e)}),new this.constructor(i)}},{key:"includes",value:function(e){return this.indexOfStrict(e)!==-1}},{key:"indexOf",value:function(e){var t=this.keyOf(e);return null===t?-1:Number(t)}},{key:"indexOfStrict",value:function(e){var t=this.keyOfStrict(e);return null===t?-1:Number(t)}},{key:"join",value:function(e){return this.$.join.apply(this.$,arguments)}},{key:"pop",value:function(){return this.$.pop()}},{key:"push",value:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.$.push.apply(this.$,arguments),this}},{key:"random",value:function(){return this.$[Y(0,this.$.length-1)]}},{key:"reverse",value:function(){return this.$.reverse(),this}},{key:"shift",value:function(){return this.$.shift()}},{key:"shuffle",value:function(){var e=this.$.length;return this.forEach(function(t,n,r){var i=n+Math.floor((e-n)*Math.random());r[n]=r[i],r[i]=t})}},{key:"slice",value:function(e,t){return new this.constructor(this.$.slice.apply(this.$,arguments))}},{key:"sort",value:function(e){return R([e],["function||!"],"Arr#sort"),this.$.sort(e),this}},{key:"sortAsc",value:function(){return this.sort(K)}},{key:"sortDesc",value:function(){return this.sort(function(e,t){return K(t,e)})}},{key:"splice",value:function(e,n){for(var r=arguments.length,i=Array(r>2?r-2:0),a=2;a<r;a++)i[a-2]=arguments[a];return new t(this.$.splice.apply(this.$,arguments))}},{key:"string",value:function(){return this.join("")}},{key:"unshift",value:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.$.unshift.apply(this.$,arguments),this}},{key:"first",get:function(){return this.$[0]}},{key:"last",get:function(){var e=this.$;return e[e.length-1]}},{key:"length",get:function(){return this.$.length}}]),t}(Vt);_(nn.prototype,At({},It.toStringTag,"Arr")),bt[1].push({check:n,cls:nn});var rn={buffer:"ArrayBuffer",binary:"BinaryString",dataURL:"DataURL",text:"Text"},an=yt,on=an.URL,un=function(e){function t(){return Tt(this,t),Nt(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return Dt(t,e),Ct(t,[{key:"readAs",value:function(e,t){var n=this;if(!rn[e])throw new Error("1st argument must be one of following values: buffer, binary, dataURL, text");var r=new FileReader,i=void 0;c(t)&&(r.onprogress=function(e){t(e,this)});var a=new Qt(function(t,a){i=a,r.onerror=function(e){var t=e.target;r&&a(t.error)},r.onload=function(e){var n=e.target;t(n.result)},r["readAs"+rn[e]](n.$)});return a.abort=function(){return i(new Error("Reading was aborted")),r.abort(),r=null,this},a}},{key:"saveAs",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"download",t=document.createElement("a");return t.href=this.dataURL,t.setAttribute("download",e),t.click(),this}},{key:"dataURL",get:function(){return on.createObjectURL(this.$)}}]),t}(Vt);_(un.prototype,At({},It.toStringTag,"BlobObject")),bt[1].push({check:function(t){return/^(Blob|File)$/.test(e(t))},cls:un});var cn={"&":"&amp;","<":"&lt;",">":"&gt;"},sn=new RegExp(new Vt(jt).word(function(e){return"\\"+e+"|"}).replace(/\|$/,""),"g"),ln=function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return Tt(this,t),Nt(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,""+e))}return Dt(t,e),Ct(t,[{key:"capitalizeFirst",value:function(){var e=this.$;return new t(e.slice(0,1).toUpperCase()+e.slice(1))}},{key:"endsWith",value:function(e,n){return arguments.length<2&&(n=this.$.length),this.slice(0,n).revert().startsWith(new t(e).revert().$)}},{key:"escapeHTML",value:function(){var e=this.$;return E(cn,function(t,n){e=e.replace(new RegExp(n,"g"),t)}),new t(e)}},{key:"escapeRegExp",value:function(){return this.replace(sn,"\\$&")}},{key:"in",value:function(e){return!!m(e)&&this.$ in e}},{key:"indexOf",value:function(e,t){return this.$.indexOf.apply(this.$,arguments)}},{key:"lastIndexOf",value:function(e,t){return this.$.lastIndexOf.apply(this.$,arguments)}},{key:"match",value:function(e){return x(this.$.match.apply(this.$,arguments))}},{key:"repeat",value:function(e){R([e],[["intLike",">=0"]],"Str#repeat"),e=+e;for(var n=this.$,r="",i=0;i<e;i++)r+=n;return new t(r)}},{key:"replace",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return new t(this.$.replace(e,n))}},{key:"replaceString",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return e=new Vt(e).$,R([e],["string"],"Str#replaceString"),new t(this.$.split(e).join(n))}},{key:"revert",value:function(){for(var e=this.$,n="",r=e.length-1;r>=0;r--)n+=e[r];return new t(n)}},{key:"search",value:function(e){return R([e],["regexp"]),this.$.search.apply(this.$,arguments)}},{key:"slice",value:function(e,n){return new t(this.$.slice.apply(this.$,arguments))}},{key:"split",value:function(e){return x(this.$.split.apply(this.$,arguments))}},{key:"startsWith",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return this.$.indexOf.apply(this.$,arguments)===t}},{key:"substr",value:function(e,n){return new t(this.$.substr.apply(this.$,arguments))}},{key:"substring",value:function(e,n){return new t(this.$.substring.apply(this.$,arguments))}},{key:"toCamelCase",value:function(){return new t(ne(this.$).replace(/[\s\-_.]+/g,"-").replace(/-[^-]/g,function(e){return e[1].toUpperCase()}).replace(/^[\S]/,function(e){return e.toLowerCase()}))}},{key:"toCapitalCase",value:function(){return new t(ne(this.$).replace(/[\s\-_.]+/g," ").replace(/[\S]/g,function(e){return e.toLowerCase()===e?e:" "+e}).replace(/\s[\S]/g,function(e){return e.toUpperCase();
}).replace(/\s+/g," ").replace(/^\s/,"").replace(/^[\S]/,function(e){return e.toUpperCase()}))}},{key:"toDotCase",value:function(){return new t(ne(this.$).replace(/[\s\-_.]+/g,".").replace(/[^.]/g,function(e){return e.toLowerCase()===e?e:"."+e}).replace(/\.+/g,".").replace(/^\./,"").toLowerCase())}},{key:"toHyphenCase",value:function(){return new t(ne(this.$).replace(/[\s\-_.]+/g,"-").replace(/[^-]/g,function(e){return e.toLowerCase()===e?e:"-"+e}).replace(/-+/g,"-").replace(/^-/,"").toLowerCase())}},{key:"toLowerCase",value:function(){return new t(this.$.toLowerCase())}},{key:"toSnakeCase",value:function(){return new t(ne(this.$).replace(/[\s\-_.]+/g,"_").replace(/[^_]/g,function(e){return e.toLowerCase()===e?e:"_"+e}).replace(/_+/g,"_").replace(/^_/,"").toLowerCase())}},{key:"toSpaceCase",value:function(){return new t(ne(this.$).replace(/[\s\-_.]+/g," ").replace(/[\S]/g,function(e){return e.toLowerCase()===e?e:" "+e}).replace(/\s+/g," ").replace(/^\s/,"").toLowerCase())}},{key:"toString",value:function(){return this.$}},{key:"toUpperCase",value:function(){return new t(this.$.toUpperCase())}},{key:"trim",value:function(){return new t(this.$.replace(/^[\s\ufeff\u00a0]+|[\s\ufeff\u00a0]+$/g,""))}},{key:"trimLeft",value:function(){return new t(this.$.replace(/^[\s\ufeff\u00a0]+/,""))}},{key:"trimRight",value:function(){return new t(this.$.replace(/[\s\ufeff\u00a0]+$/,""))}},{key:"length",get:function(){return this.$.length}}]),t}(Vt);_(ln.prototype,At({},It.toStringTag,"Str")),bt[2].push({check:w,cls:ln});var fn="Please, submit an issue at https://github.com/dwaynejs/dwayne/issues.",hn=new Vt({"tag-open":new RegExp("<("+St+")\\s*","i"),"tag-close":ae(St),comment:/<!--((?:-[^\->]|[^\->])(?:-?[^-])*[^-]?|)-->/}),vn=/^(\/?)>/,dn=new RegExp("^("+_t+")(?:\\s*=\\s*('[^']*'|\"[^\"]*\"|[^\\s\"'`<>=]+))?\\s*"),pn=document.createElement("div"),mn=A("strictEquals",function(e){return e}).case("tag-open",function(e,t){var n=t,r=n.value,i=n.selfClosing;return t={name:r,attrs:new Vt(t.attrs).map(function(e){return ue(e)}).$,parent:e,children:new nn([])},e.children.push(t),i||Ot.indexOf(r)!==-1||(e=t),e}).case("tag-close",function(e,t){return e.name===t.value&&(e=e.parent),e}).case(["comment","text"],function(e,t,n,r){var i={name:"#"+r,parent:e,value:t.value};return"text"===r&&"script"!==e.name&&"style"!==e.name&&(i.value=ue(i.value),n&&(i.value=new ln(i.value).trim().$)),n&&/^\s*$/.test(i.value)||e.children.push(i),e}),gn=A("strictEquals",!1).case(["title","textarea","style","script"],!0),yn=function e(t){Tt(this,e),this.index=t},$n=function(e){function t(){var e,n,r,i;Tt(this,t);for(var a=arguments.length,o=Array(a),u=0;u<a;u++)o[u]=arguments[u];return n=r=Nt(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(o))),r.type="PARSING_ERROR",i=n,Nt(r,i)}return Dt(t,e),t}(Error),wn=function(e,t){function n(){throw new $n("Unexpected parsing error near index "+oe(i,o)+". "+fn)}t=!!t;for(var r=new nn([]),i=e,a=void 0,o=0,u={name:null,children:r};e.length;){try{a=ie(e,u)}catch(e){throw e instanceof yn||n(),new $n("Parsing error near index "+oe(i,o+e.index))}var c=a,s=c.type,l=c.attrs,f=c.selfClosing,h=c.index,v=c.value;o+=h,h||n();var d={type:s,value:v};"tag-open"===s&&(d.attrs=l,d.selfClosing=f),u=mn(d.type,[u,d,t]),e=e.slice(h)}return r},kn=yt.document,bn=kn.createElement("div"),xn=/(,| ) */,En=new Vt(Node.prototype).propertyDescriptor("textContent")?"textContent":"innerText",On={},Sn={},_n=new nn([]),jn="input, select, textarea, datalist, keygen, output",Rn=(V("click"),"http://www.w3.org/2000/svg"),Tn="http://www.w3.org/2000/xmlns/",Cn="http://www.w3.org/1999/xlink",An="http://www.w3.org/1999/xhtml",Pn=A("call",function(e,t){var n="svg"===t?Rn:e.prop("namespaceURI")||kn.documentElement.namespaceURI||An;return kn.createElementNS(n,t)}).case(function(e){return"#comment"===e},function(){return kn.createComment("")}).case(function(e){return"#text"===e},function(){return kn.createTextNode("")}),Ln=A("strictEquals","href").case(["img","script","iframe","audio","video"],"src").case("form","action"),Dn=A("call",function(e){return e}).case(w,function(e){return function(t){return new Un(t).is(e)}}).case([t,se],function(e){return e=new nn(e),function(t){return e.indexOf(t)!==-1}}),Mn=A("strictEquals",0).case("padding-box",function(e){return e}).case("border-box",function(e,t){return e+t}),Nn=A("strictEquals",function(e,t){return e+t}).case("padding-box",function(e){return e}).case("border-box",0),Bn=A("call",null).case(function(e){return"xmlns"===e||"xmlns:xlink"===e},function(e){return"svg"===e.name?Tn:null}).case(function(e){return/^xlink:\w/.test(e)},function(e){return e.closest("svg").length?Cn:null}),Un=function(t){function r(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];Tt(this,r);var t=Nt(this,(r.__proto__||Object.getPrototypeOf(r)).call(this,function(){var t=e;return n(t)&&(le(t)||fe(t)||he(t)||o(t)||de(t)||ve(t))&&(t=[t]),new nn(j(new Vt(t).$,!0)).object(function(e,t){return e.indexOf(t)===-1&&(o(t)||le(t)||fe(t)||he(t)||de(t)||ve(t))?e.push(t):void(se(t)&&e.push.apply(e,t.$))},[]).$}()));return t.$$=e,t.forEach(ge),t}return Dt(r,t),Ct(r,[{key:"add",value:function(){for(var e=this,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return E(arguments,function(t){ce(t).forEach(function(t){e.indexOf(t)===-1&&e.push(t)})}),this}},{key:"addClass",value:function(){for(var e=arguments,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return this.forEach(function(t){var n=t.classList;E(o(t)&&e,function(e){return n.add(e)})})}},{key:"addComment",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return this.forEach(function(n){o(n)&&n.insertAdjacentHTML(t?"beforeend":"afterbegin","<!--"+e+"-->")})}},{key:"addHTML",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return this.forEach(function(n){o(n)&&n.insertAdjacentHTML(t?"beforeend":"afterbegin",e)})}},{key:"addRule",value:function(e,t,n){return this.some(function(r){if("style"===me(r)){var i=r.sheet,a=i.cssRules.length,o=new Vt(n).word(function(e,t){return new ln(t).toHyphenCase()+": "+e+";\n"});return i.insertRule(t+" {"+(o&&"\n")+o+"}",a),i.cssRules[a].dwayneData={name:e},!0}}),this}},{key:"addText",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return this.forEach(function(n){new r(kn.createTextNode(e)).into(n,t)})}},{key:"apply",value:function(){for(var e=this,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];var i=void 0,a=void 0,o=void 0,u=void 0,s=void 0,l=void 0;return new ln(new nn(arguments).join(" ")).split(/(\s+)/).forEach(function(t){if(!i){if(s=t.slice(0,1),o=$t[s],l=1,o&&!c(o)&&(o=o[t.slice(1,2)],l=2),/^\s+$/.test(t)||!o)return;if(u=t.slice(l).match(/^[^()]+/),!u&&"*"!==s&&"&"!==s)return;i={name:u?u[0]:"",args:t.slice(l+(u?u[0]:"").length),callback:o},a=!0}a||(i.args+=t),i.args&&!/^\([\s\S]+\)$/.test(i.args)||(i.callback(e,i.name,i.args.replace(/^\(|\)$/g,"")),i=null),a=!1}),this}},{key:"attr",value:function(e,t){var n=pe(this);if(!arguments.length)return new Vt(n.attributes).object(function(e,t){e[t.name]=t.value});if(arguments.length<=1&&w(e)){var i=Bn(e,[new r(n)]);return h(i)?n.getAttribute(e):n.getAttributeNS(i,e)}return arguments.length>=2&&(e=At({},e,t)),this.forEach(function(t,n){o(t)&&new Vt(e).forEach(function(e,i){if(v(e))return new r(t).removeAttr(i);if(c(e)&&(e=e(new r(t).attr(i),t,n)),v(e))return new r(t).removeAttr(i);var a=Bn(i,[new r(t)]);h(a)?t.setAttribute(i,e):t.setAttributeNS(a,i,e)})})}},{key:"blob",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return new Qt(function(t,n){var i=e.first(),a=i.name;return"img"!==a&&"canvas"!==a&&n(new Error("First element in the set isn't an image or a canvas! (Elem#blob)")),"canvas"===a?t(i):void i.load().then(function(){if(i.isBroken())return n(new Error("The image is broken! (Elem#blob)"));var e=new r(kn).canvas(),a=i.width(),o=i.height();e.width(a).height(o).drawImage(i.$[0],0,0),t(e)})}).then(function(e){var n=e.dataURL(),r=atob(n.split(",")[1]),i=r.length,a=new ArrayBuffer(i),o=new Uint8Array(a);return ee(i,function(e){o[e]=r.charCodeAt(e)}),te(a,t)})}},{key:"blur",value:function(){return this.forEach(function(e){o(e)&&e.blur()})}},{key:"calcCSS",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return getComputedStyle(pe(this),e)}},{key:"changeRule",value:function(e,t){return this.some(function(n){if("style"===me(n)){var i=new nn(n.sheet.cssRules).find(function(t){return t.dwayneData&&t.dwayneData.name===e})||{},a=i.value;if(a)return new r(a).css(t),!0}}),this}},{key:"child",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return s(e)&&e>=0?this.children().elem(e):ce(e).into(this,t)}},{key:"children",value:function(){return new r(this.length?this.$[0].childNodes:[])}},{key:"class",value:function(e){return arguments.length?this.forEach(function(t){o(t)&&(t.className=e)}):new nn(pe(this).className.split(" "))}},{key:"click",value:function(){return this.forEach(function(e){o(e)&&e.click()})}},{key:"clone",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return this.object(function(t,n){t.add(n.cloneNode(!!e))},new r)}},{key:"closest",value:function(e){return this.object(function(t,n){for(;n;){if(new r(n).is(e))return t.add(n);n=n.parentNode}},new r)}},{key:"contains",value:function(e){return e=ce(e),pe(this).contains(pe(e))}},{key:"create",value:function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];return this.object(function(t,i){var a=new r(Pn(e,[new r(i)]));a.into(i),t.add(a.apply.apply(a,n))},new r)}},{key:"createComment",value:function(e){return this.create("#comment").text(e)}},{key:"createText",value:function(e){return this.create("#text").text(e)}},{key:"css",value:function(e,t){var n=pe(this).style;return ve(this.$[0])&&(n=this.$[0].style),arguments.length?arguments.length<=1&&w(e)?(e=new ln(e).toHyphenCase().$,n.getPropertyValue(e)+(n.getPropertyPriority(e)?" !important":"")):(arguments.length>=2&&(e=At({},e,t)),this.forEach(function(t,n){(o(t)||ve(t))&&new Vt(e).forEach(function(e,i){return v(e)?new r(t).removeCSS(i):(i=new ln(i).toHyphenCase().$,c(e)&&(e=e(new r(t).css(i),t,n)),v(e)?new r(t).removeAttr(key):(t.style.removeProperty(i),void t.style.setProperty(i,e.replace(/ ?!important$/,""),/!important$/.test(e)?"important":"")))})})):new ln(n.cssText).split(/; ?/).object(function(t,n){n&&(e=n.split(/: /),t[new ln(e[0]).toCamelCase().$]=e[1])})}},{key:"ctx",value:function e(t,n){var e=void 0;return this.some(function(t){if("canvas"===me(t))return e=t.dwayneData.ctx,!0}),arguments.length?e?(c(t)?t(e):(arguments.length>=2&&(t=At({},t,n)),O(e,t)),this):this:e}},{key:"data",value:function(e,t){var n=pe(this).dataset;return arguments.length?1===arguments.length&&w(e)?n[e]:(arguments.length>=2&&(e=At({},e,t)),this.forEach(function(t,n){o(t)&&E(e,function(e,r){t.dataset[r]=c(e)?e(t.dataset[r],t,n):e})})):new Vt(n).object(function(e,t,n){e[n]=t})}},{key:"dataURL",value:function(e,t){var n=this.ctx();return n?n.canvas.toDataURL.apply(n.canvas,arguments):""}},{key:"deleteRule",value:function(e){return this.some(function(t){if("style"===me(t)){var n=new nn(t.sheet.cssRules).find(function(t){return t.dwayneData&&t.dwayneData.name===e});if(n)return t.sheet.deleteRule(n.key),!0}}),this}},{key:"dispatch",value:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=n||{},a=i.bubbles,u=void 0===a||a,c=i.cancelable,s=void 0===c||c,l=t;if(!/Event$/.test(e(l))){try{l=new Event(l,{bubbles:u,cancelable:s})}catch(e){l=kn.createEvent("Event"),l.initEvent(t,u,s)}O(l,r)}return this.forEach(function(e){o(e)&&e.dispatchEvent(l)})}},{key:"elem",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return e<0&&(e=this.length+e),new r(this.$[e])}},{key:"filter",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Boolean;return new r(Lt(r.prototype.__proto__||Object.getPrototypeOf(r.prototype),"filter",this).call(this,Dn(e)))}},{key:"find",value:function(e){return w(e)?this.object(function(t,n){t.add(ye(e,n))},new r):Lt(r.prototype.__proto__||Object.getPrototypeOf(r.prototype),"find",this).call(this,e)}},{key:"first",value:function(){return this.elem(0)}},{key:"firstChild",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return this.object(function(t,n){var i=new r(n).children().find(function(t){return new r(t).is(e)})||{},a=i.value;t.add(a)},new r)}},{key:"focus",value:function(){return this.forEach(function(e){o(e)&&e.focus()})}},{key:"getRule",value:function(e){var t={selector:void 0,rules:{}};return this.some(function(n){if("style"===me(n)){var i=new nn(n.sheet.cssRules).find(function(t){return t.dwayneData&&t.dwayneData.name===e})||{},a=i.value;if(a)return t={selector:a.selectorText,rules:new r(a).css().$},!0}}),t}},{key:"hasAttr",value:function(e){var t=pe(this),n=Bn(e,[new r(t)]);return h(n)?t.hasAttribute(e):t.hasAttributeNS(n,e)}},{key:"hasClass",value:function(e){return pe(this).classList.contains(e)}},{key:"height",value:function(e){return this.prop.apply(this,new nn(arguments).unshift("height").$)}},{key:"hide",value:function(){return this.forEach(function(e){e=new r(e);var t=e.css("display");t.indexOf("none")&&(e.prop("dwayneData").previousDisplay=t),e.css("display","none !important")})}},{key:"html",value:function(e){return arguments.length?this.forEach(function(t,n){o(t)&&(t.innerHTML=c(e)?e(t.innerHTML,t,n):e)}):pe(this).innerHTML}},{key:"id",value:function(e){return arguments.length?this.forEach(function(t){o(t)&&(t.id=e)}):pe(this).id}},{key:"insertAfter",value:function(e){e=ce(e).first();var t=e.parent();return t.length?(e=e.next().$[0],t=t.$[0],this.forEach(function(n){e?t.insertBefore(n,e):t.appendChild(n)})):this}},{key:"insertBefore",value:function(e){e=ce(e).first();var t=e.parent();return t.length?(e=e.$[0],t=t.$[0],this.forEach(function(n){t.insertBefore(n,e)})):this}},{key:"into",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return e=ce(e).$[0],!e||le(e)||fe(e)||de(e)?this:!t&&e.firstChild?this.slice().reverse().forEach(function(t){e.insertBefore(t,e.firstChild)}):this.forEach(function(t){e.appendChild(t)})}},{key:"is",value:function(e){if(h(e))return!0;var t=pe(this),n=t.matches||t.matchesSelector||t.webkitMatchesSelector||t.mozMatchesSelector||t.msMatchesSelector||t.oMatchesSelector;if(!o(this.$[0]))return!1;try{return n.call(t,e)}catch(t){return console.error("Selector '"+e+"' is not a valid selector (Elem#is)"),!1}}},{key:"isBroken",value:function e(){var e=!1;return this.some(function(t){if("img"===me(t))return e=!(!t.complete||t.naturalWidth&&t.naturalHeight),!0}),e}},{key:"isWithinDocument",value:function(){return 0!==this.first().closest("html").length}},{key:"last",value:function(){return this.elem(-1)}},{key:"lastChild",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return this.object(function(t,n){var i=new r(n).children().reverse().find(function(t){return new r(t).is(e)})||{},a=i.value;t.add(a)},new r)}},{key:"load",value:function(){var e={proper:new r,broken:new r};return Qt.all(this.filter(function(e){return"img"===me(e)}).map(function(t){var n=new r(t);return t.complete?void e[n.isBroken()?"broken":"proper"].push(t):new Qt(function(r){var i=n.on({load:function(){e.proper.add(t),i(),r()},error:function(){e.broken.add(t),i(),r()}})})}).$).then(function(){return e})}},{key:"moveAttr",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=Sn[e],r=this.elem();return n&&r.length&&(arguments.length<2&&(t=n.attr(e)),n.removeAttr(e)),r.length&&(Sn[e]=r.attr(e,t)),this}},{key:"moveClass",value:function(e){var t=On[e],n=this.elem();return t&&n.length&&t.removeClass(e),n.length&&(On[e]=n.addClass(e)),this}},{key:"next",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return this.object(function(t,n){for(;n=n.nextSibling;)if(new r(n).is(e))return t.add(n)},new r)}},{key:"off",value:function(){for(var e=arguments,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return this.forEach(function(t){var n=t.dwayneData.listeners;E(e,function(e){E(e.split(xn),function(e){(n[e]||new Vt).forEach(function(e){var t=e.removeListener;return t()})})})})}},{key:"on",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments[2],i=new Vt({});return c(t)&&(n=t,t=null),w(e)&&(e=At({},e,n)),e=new Vt(e).object(function(e,t,n){E(n.split(xn),function(n){e[n]=t})}),this.forEach(function(n){if(o(n)||le(n)||fe(n)){var a=(_n.find(function(e){var t=e.element;return t===n})||{}).value||n.dwayneData,u=a.listeners;e.forEach(function(e,a){var o=u[a]=u[a]||new Vt({}).define("index",{value:0,configurable:!0,writable:!0}),c=o.prop("index");if(!o.has("listener")){var s=function(e){o.forEach(function(t){var i=t.selector,a=t.listener;new r(e.target).is(i)&&a.call(n,e,n,c)})};s.base=n,n.addEventListener(a,s,!1),o.define("listener",{value:s,configurable:!0,writable:!0})}var l=function(){o.delete(c),o.count||(n.removeEventListener(a,o.prop("listener"),!1),o.delete("listener"))};i.prop(a,(i.prop(a)||new nn).push(l)),o.assign(At({index:c+1},c,{selector:t,listener:e,removeListener:l}))})}}),function(e){return arguments.length?void E(arguments,function(e){E(e.split(xn),function(e){i.has(e)&&(i.prop(e).forEach(function(e){return e()}),i.delete(e))})}):void i.forEach(function(e){e.forEach(function(e){return e()})})}}},{key:"parent",value:function(){return this.object(function(e,t){return e.add(t.parentNode)},new r)}},{key:"parentTree",value:function(){return this.object(function(e,t){for(;t=t.parentNode;)e.add(t)},new r)}},{key:"prev",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return this.object(function(t,n){for(;n=n.previousSibling;)if(new r(n).is(e))return t.add(n)},new r)}},{key:"prop",value:function(e,t){return arguments.length<=1&&w(e)?this.$[0]?this.$[0][e]:void 0:(arguments.length>=2&&(e=At({},e,t)),this.forEach(function(t,n){E(e,function(e,r){t[r]=c(e)?e(t[r],t,n):e})}))}},{key:"ref",value:function(e){return arguments.length?this.forEach(function(t){t=new r(t),t.attr(Ln(t.name),e)}):this.attr(Ln(this.name))}},{key:"remove",value:function(){return this.forEach(function(e){var t=e.parentNode;t&&t.removeChild(e)})}},{key:"removeAttr",value:function(){for(var e=arguments,t=arguments.length,n=Array(t),i=0;i<t;i++)n[i]=arguments[i];return this.forEach(function(t){o(t)&&E(e,function(e){var n=Bn(e,[new r(t)]);h(n)?t.removeAttribute(e):t.removeAttributeNS(n,e)})})}},{key:"removeClass",value:function(){for(var e=arguments,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return this.forEach(function(t){var n=t.classList;E(o(t)&&e,function(e){return n.remove(e)})})}},{key:"removeCSS",value:function(){for(var e=arguments,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return this.forEach(function(t){o(t)&&E(e,function(e){t.style.removeProperty(e)})})}},{key:"replace",value:function(e){e=ce(e);var t=this.first().parent();if(!t.length)return this;var n=t,r="into",i=this.next().first().$[0],a=this.prev().first().$[0];i?(n=i,r="insertBefore"):a&&(n=a,r="insertAfter"),this.first().remove(),e[r](n)}},{key:"setOf",value:function(e,t,n){if(R({2:n},{2:["function"]},"Elem#setOf"),t=new Vt(t).$,d(t)){try{R({1:t},{1:["intLike",">=0"]},"Elem#setOf")}catch(e){throw new Error("2nd argument must be either or non-negative integer, or object! (at Elem#setOf)")}t=X(t).$}return this.object(function(i,a,o){E(t,function(u,c){var s=new r(a).create(e);n(s.$[0],u,c,t,a,o),i.add(s)})},new r)}},{key:"show",value:function(){return this.forEach(function(e){var t=e,n=t.dwayneData;e=new r(e),0===e.css("display").indexOf("none")&&e.css("display",n.previousDisplay),n.previousDisplay=""})}},{key:"text",value:function(e){return arguments.length?this.forEach(function(t,n){var i=t[En];new r(t).prop(En,c(e)?e(i,t,n):e)}):this.prop(En)}},{key:"toggleAttr",value:function(e,t){var n=arguments;return this.forEach(function(i){i=new r(i),(n.length<2?!i.hasAttr(e):t)?i.attr(e,""):i.removeAttr(e)})}},{key:"toggleClass",value:function(e,t){return(arguments.length<2?!this.hasClass(e):t)?this.addClass(e):this.removeClass(e)}},{key:"up",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;return R([e],[["intLike",">=0"]],"Elem#up"),e=Number(e),this.object(function(t,n){for(var r=e;r--&&n;)n=n.parentNode;t.add(n)},new r)}},{key:"validate",value:function(e){function t(e,t,n){try{if(e.validity&&!e.validity.valid)throw new Error(e.validationMessage);e.dwayneData.validators.forEach(function(n){n(e.value,e,t)})}catch(t){(n.errors=n.errors||{})[e.name]=t}}if(R([e],["function||!"],"Elem#validate"),e)return this.forEach(function(t){var n=t.dwayneData;n.validators.push(e)});var n=new Vt({errors:null});return this.filter(jn+", form").forEach(function(e,i){if("form"===me(e)){var a=function(){var i={errors:null},a=new r(e),o=a.find(jn);return o.forEach(function(e,n){t(e,n,i)}),n.deepAssign(i),i=i.errors,a.dispatch("validate",{},{valid:!i,errors:i}),{v:o.forEach(function(e){var t=(i||{})[e.name];new r(e).dispatch("validate",{},{valid:!t,error:t||null})})}}();if("object"===("undefined"==typeof a?"undefined":Rt(a)))return a.v}var o={errors:null};t(e,i,o),n.deepAssign(o),o=(o.errors||{})[e.name],new r(e).dispatch("validate",{},{valid:!o,error:o||null})}),n.every(function(e){return h(e)})?null:n.$.errors}},{key:"width",value:function(e){return this.prop.apply(this,new nn(arguments).unshift("width").$)}},{key:"innerHeight",get:function(){var e=this.$[0];if(le(e))return e.innerHeight;var t=this.calcCSS(),n=t.borderTopWidth,r=t.borderBottomWidth,i=t.boxSizing,a=t.height,o=t.paddingTop,u=t.paddingBottom,c=we(n)+we(r),s=we(o)+we(u);return we(a)-Mn(i,[s,c])}},{key:"innerWidth",get:function(){var e=this.$[0];if(le(e))return e.innerWidth;var t=this.calcCSS(),n=t.borderLeftWidth,r=t.borderRightWidth,i=t.boxSizing,a=t.paddingLeft,o=t.paddingRight,u=t.width,c=we(n)+we(r),s=we(a)+we(o);return we(u)-Mn(i,[s,c])}},{key:"name",get:function(){return me(this.$[0])}},{key:"outerHeight",get:function(){var e=this.$[0];if(le(e))return e.outerHeight;var t=this.calcCSS(),n=t.borderTopWidth,r=t.borderBottomWidth,i=t.boxSizing,a=t.height,o=t.marginTop,u=t.marginBottom,c=t.paddingTop,s=t.paddingBottom,l=we(n)+we(r),f=we(c)+we(s);return we(a)+we(o)+we(u)+Nn(i,[l,f])}},{key:"outerWidth",get:function(){var e=this.$[0];if(le(e))return e.outerWidth;var t=this.calcCSS(),n=t.borderLeftWidth,r=t.borderRightWidth,i=t.boxSizing,a=t.marginLeft,o=t.marginRight,u=t.paddingLeft,c=t.paddingRight,s=t.width,l=we(n)+we(r),f=we(u)+we(c);return we(s)+we(a)+we(o)+Nn(i,[l,f])}},{key:"toStringTag",get:function(){return e(this.$$)}}]),r}(nn);_(Un.prototype,At({},It.toStringTag,"Elem"));var qn=new Un(yt),In=new Un(kn),Fn=new Un(kn.documentElement),Wn=new Un(kn.body),Hn=new Un(kn.head),zn=new nn(xt).concat(Et).$,Vn=new nn(zn).map(function(e){return new ln(e).toCamelCase().$}).$;S(Un.prototype,Vn,function(e,t){return function(){return this.create.apply(this,new nn(arguments).unshift(zn[t]).$)}}),S(Un.prototype,wt,function(e){return function(){var t=this.ctx();if(t)return t[e].apply(t,arguments)}}),S(Un.prototype,kt,function(e){return function(){var t=this.ctx();return t&&t[e].apply(t,arguments),this}}),bt[2].push({check:function(t){return o(t)||le(t)||fe(t)||de(t)||he(t)||/^(HTMLCollection|NodeList)$/.test(e(t))},cls:Un});var Gn=Object.freeze({registerDBlock:ke,registerDEach:be,registerDElements:xe,registerDIf:Ee,registerDItem:Oe,registerDSwitch:Se,registerDText:_e}),Jn=A("strictEquals","input").case("form","input, change").case("select","change").case("input",function(e){return"radio"===e||"checkbox"===e||"color"===e||"file"===e?"change":"input"}),Qn=A("strictEquals",function(e,t){return t.hasAttr("contenteditable")||t.hasAttr("contentEditable")?"text":"value"}).case("select",function(e,t){return t.hasAttr("multiple")?"multiple-select":"value"}).case("input",function(e){return"file"===e?"files":"radio"===e||"checkbox"===e?"checked":"value"}),Zn=A("strictEquals",function(e){return e}).case("input",function(e,t,n){return"radio"!==t&&"checkbox"!==t?e:"radio"===t?e===n:e.indexOf(n)!==-1}),Yn=A("strictEquals",function(e){return e}).case("select",function(e,t,n,r,i,a){return i.hasAttr("multiple")?a.object(function(e,t){var n=t.selected,r=t.value;n&&e.indexOf(r)===-1&&e.push(r)},[]).$:e}).case("input",function(e,n,r,i,a,o,u){if("radio"!==n&&"checkbox"!==n)return e;if("radio"===n)return e?r:null;if(!e&&u)return i;if(e)return i?i.indexOf(r)===-1?new nn(i).concat(r).$:i:[r];if(!t(i))return[];var c=i.indexOf(r);return c!==-1?[].concat(Ut(new nn(i).slice(0,c).$),Ut(new nn(i).slice(c+1).$)):i}),Kn=A("strictEquals","input").case("select","change").case("input",function(e){return"radio"===e||"checkbox"===e||"color"===e||"file"===e?"change":"input"}),Xn=Object.freeze({registerDAttr:je,registerDBind:Re,registerDClass:Te,registerDElem:Ce,registerDHide:Ae,registerDOn:Pe,registerDShow:Le,registerDStyle:De,registerDText:Me,registerDValidate:Ne,registerDValue:Be}),er=Object.create(null),tr=Object.create(null),nr={}.isPrototypeOf,rr=new RegExp("^"+St+"$","i"),ir=new RegExp("^"+_t+"$"),ar=/^\{[\s\S]+\}$/,or=yt,ur=or.document,cr="http://www.w3.org/2000/svg",sr=function(e){console.error('Eval error (evaluating "'+e.expression+'" in context of block "'+e.block.$$.name+'"):',e)},lr=void 0,fr=void 0,hr=void 0,vr=function(){function e(t){var n=this;Tt(this,e);var r=t.name,i=t.args,a=t.children,o=t.parent,u=t.parentBlock,c=t.parentScope,s=new nn([]);Object.defineProperties(this,{$:{value:this},$$:{value:{name:r,parent:c,parentBlock:u,ns:new Vt(this).proto().$.constructor,children:new nn([]),mixins:new nn([]),elems:{start:In.createComment(" "+r+": start "),end:In.createComment(" "+r+": end "),content:new Un,parent:o},watchersToRemove:s,evaluate:function e(t,i,a,o,u,c){function e(){var n=this,r=void 0;i&&(lr=!0,fr=new nn([])),s.$$.expr=t,ur.DwayneStore=s;try{r=h()}catch(e){sr&&(e.expression=t,e.block=this,sr(e))}return i&&!function(){var t=new nn([]);fr.forEach(function(a){var u=function(){var t=e.call(n);t!==r&&i(t,r)},c={forDElements:o,watcher:u,watchers:a};u.onRemove=function(){t.forEach(function(e){var t=e.watcher,n=e.watchers,r=f.indexOf(e),i=n.indexOf(t);r!==-1&&f.splice(r,1),i!==-1&&n.splice(i,1)})},t.push(c),f.push(c),a.push(u)}),lr=!1,fr=new nn([])}(),s.$$.expr=null,ur.DwayneStore=null,r}if(!ar.test(t))return t||!0;o=!!o,u=!!u,t=t.replace(/^\{|\}$/g,"");var s="#d-item"===r&&!u||c?(c||n).$$.scope:n,l=a?a.$$:{},f=l.watchersToRemove,h=new Function("",'with(document.DwayneStore){$$.expr=eval("$$.expr="+$$.expr);return $$.expr}');return e.call(n)}}}});var l=new Vt(i).map(function(e,t){if("d-each"===r&&("item"===t||"index"===t||"uid"===t))return e;var i="d-elements"===r&&"value"===t;return c.$$.evaluate(e,function(e){n.args[t]=e},n,i,i&&"#d-item"===u.$$.name)}).$;this.args=l,this.children=a||new nn([]),this.global=Object.create(c?Object.create(c.global):null),this.$$.elems.start.$[0].DwayneBlock=this,this.$$.elems.end.$[0].DwayneBlock=this,u&&u.$$.children.push(this)}return Ct(e,null,[{key:"getBlocks",value:function(){return new Vt(Pt({},this._blocks))}},{key:"getMixins",value:function(){return new Vt(Pt({},this._mixins))}},{key:"register",value:function(e,t){var n=new Vt(this);n.hasOwn("_blocks")||(t._blocks=Object.create(n.proto().$._blocks)),n.hasOwn("_mixins")||(t._mixins=Object.create(n.proto().$._mixins));var r=this._blocks,i=this._mixins;if(!ze(t)&&!Ve(t))return void console.warn('The "'+e+'" class does not extend Block or Mixin and will not be registered (Block.register)');if(ze(t)){if(er[e])return void console.warn('The "'+e+'" block is a built-in block so the block will not be registered (Block.register)');if(!rr.test(e))return void console.warn('Name "'+e+'" is not allowed for blocks so the block will not be registered (Block.register)');t._html=We(wn(""+(t.template||""),t.collapseWhiteSpace)),r[e]=t}else{if(tr[e])return void console.warn('The "'+e+'" mixin is a built-in mixin so the mixin will not be registered (Block.register)');if(!ir.test(e))return void console.warn('Name "'+e+'" is not allowed for mixins so the mixin will not be registered (Block.register)');t._match=new RegExp("^"+new ln(e).escapeRegExp().$+"(?:-([\\s\\S]+))?$"),i[e]=t}}},{key:"wrap",value:function(e){return R([e],["function"]),e(this)}},{key:"onEvalError",get:function(){return sr},set:function(e){sr=c(e)?e:null}}]),Ct(e,[{key:"afterConstruct",value:function(){}},{key:"afterRender",value:function(){}},{key:"beforeRemove",value:function(){}},{key:"evaluateAndWatch",value:function(e,t){return this.$$.parent.$$.evaluate(e,t,this)}},{key:"evaluateOnce",value:function(e){return this.$$.parent.$$.evaluate(e)}},{key:"remove",value:function(e){var t=this.$$,n=t.name,r=t.parentBlock,i=t.children,a=t.mixins,o=t.elems,u=o.start,c=o.content,s=o.end,l=t.watchersToRemove;Ge(l),i.forEach(function(e){e.remove(!0)}),a.forEach(function(e){e.remove(!0)});try{this.beforeRemove()}catch(e){console.error("Uncaught error in "+n+"#beforeRemove:",e)}if(!e&&r){var f=r.$$.children.indexOf(this);f!==-1&&r.$$.children.splice(f,1)}new Un([u,c,s]).remove()}},{key:"watch",value:function(){var e=this,t=arguments[arguments.length-1];if(c(t)){if(1===arguments.length){for(var n in this.$$.global){var r=this.$$.global[n].watchers.perm;r.push(t),this.$$.watchersToRemove.push({watcher:t,watchers:r})}return E(this.$$.args,function(e){var n=e.watchers;n.perm.push(t)}),E(this.$$.locals,function(e){var n=e.watchers;n.perm.push(t)})}E(arguments,function(n){if(n!==t){if(n=""+n,/^args\./.test(n)){if(n=n.replace(/^args\./,""),!e.$$.args[n])return;return void e.$$.args[n].watchers.perm.push(t)}if(/^global\./.test(n)){if(n=n.replace(/^global\./,""),!e.$$.global[n])return;return void e.$$.global[n].watchers.perm.push(t)}e.$$.locals[n]&&e.$$.locals[n].watchers.perm.push(t)}})}}},{key:"watchArgs",value:function(){var e=this,t=arguments[arguments.length-1];if(c(t))return 1===arguments.length?E(this.$$.args,function(e){var n=e.watchers;n.perm.push(t)}):void E(arguments,function(n){n!==t&&e.$$.args[n]&&e.$$.args[n].watchers.perm.push(t)})}},{key:"watchGlobals",value:function(){var e=this,t=arguments[arguments.length-1];if(c(t))if(1!==arguments.length)E(arguments,function(n){n!==t&&e.$$.global[n]&&e.$$.global[n].watchers.perm.push(t)});else for(var n in this.$$.global){var r=this.$$.global[n].watchers.perm;r.push(t),this.$$.watchersToRemove.push({watcher:t,watchers:r})}}},{key:"watchLocals",value:function(){var e=this,t=arguments[arguments.length-1];if(c(t))return 1===arguments.length?E(this.$$.locals,function(e){var n=e.watchers;n.perm.push(t)}):void E(arguments,function(n){n!==t&&e.$$.locals[n]&&e.$$.locals[n].watchers.perm.push(t)})}}]),e}();vr._blocks=Object.create(er),vr._mixins=Object.create(tr),vr.collapseWhiteSpace=!0,qe(Gn,er,vr);var dr=vr._blocks,pr=function(){function e(t){Tt(this,e);var n=t.name,r=t.value,i=t.elem,a=t.match,o=t.parentBlock,u=t.parentScope;Object.defineProperties(this,{$$:{value:{name:n,_value:r,parent:u,parentBlock:o,watchersToRemove:new nn([])}}}),this.match=new nn(a).slice(1).$,this.block=u,this.elem=i,this.node=i.$[0],o&&o.$$.mixins.push(this)}return Ct(e,[{key:"afterUpdate",value:function(){}},{key:"beforeRemove",value:function(){}},{key:"evaluateAndWatch",value:function(e){var t=this.$$,n=t._value,r=t.parent;return r.$$.evaluate(n,e,this)}},{key:"evaluateOnce",value:function(){var e=this.$$,t=e._value,n=e.parent;return n.$$.evaluate(t)}},{key:"remove",value:function(e){var t=this.$$,n=t.name,r=t.parentBlock,i=t.watchersToRemove;Ge(i);try{this.beforeRemove()}catch(e){console.error("Uncaught error in "+n+"#beforeRemove:",e)}if(!e&&r){var a=r.$$.mixins.indexOf(this);
a!==-1&&r.$$.mixins.splice(a,1)}}}]),e}();pr.evaluate=!0,qe(Xn,tr,pr);var mr=vr._mixins,gr=new ln("0"),yr=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],$r=new Vt(yr).map(function(e){return e.slice(0,3)}).$,wr=["January","February","March","April","May","June","Jule","August","September","October","November","December"],kr=new Vt(wr).map(function(e){return e.slice(0,3)}).$,br=[{format:"ccc",match:function(e,t){return Ze(e[t]("c"),3)}},{format:"c",match:function(e,t){return e[t]("c")}},{format:"ss",match:function(e,t){return Ze(e[t]("s"),2)}},{format:"s",match:function(e,t){return e[t]("s")}},{format:"mm",match:function(e,t){return Ze(e[t]("m"),2)}},{format:"m",match:function(e,t){return e[t]("m")}},{format:"hh",match:function(e,t){return Ze(e[t]("h"),2)}},{format:"h",match:function(e,t){return e[t]("h")}},{format:"dddd",match:function(e,t){return yr[e[t]("dw")]}},{format:"ddd",match:function(e,t){return $r[e[t]("dw")]}},{format:"dd",match:function(e,t){return Ze(e[t]("d"),2)}},{format:"d",match:function(e,t){return e[t]("d")}},{format:"MMMM",match:function(e,t){return wr[e[t]("M")-1]}},{format:"MMM",match:function(e,t){return kr[e[t]("M")-1]}},{format:"MM",match:function(e,t){return Ze(e[t]("M"),2)}},{format:"M",match:function(e,t){return e[t]("M")}},{format:"yyyy",match:function(e,t){return Ze(e[t]("y"),4)}},{format:"yy",match:function(e,t){return String(e[t]("y")).slice(-2)}},{format:"y",match:function(e,t){return e[t]("y")}}],xr={c:1,s:1e3,m:6e4,h:36e5,d:864e5,w:6048e5,M:2592e6,y:31536e6},Er=A({c:function(e,t){return e[t+"Milliseconds"]()},s:function(e,t){return e[t+"Seconds"]()},m:function(e,t){return e[t+"Minutes"]()},h:function(e,t){return e[t+"Hours"]()},d:function(e,t){return e[t+"Date"]()},dw:function(e,t){return e[t+"Day"]()},M:function(e,t){return e[t+"Month"]()+1},y:function(e,t){return e[t+"FullYear"]()}},"equals",NaN),Or=A({c:function(e,t,n){return e[n+"Milliseconds"](t)},s:function(e,t,n){return e[n+"Seconds"](t)},m:function(e,t,n){return e[n+"Minutes"](t)},h:function(e,t,n){return e[n+"Hours"](t)},d:function(e,t,n){return e[n+"Date"](t)},M:function(e,t,n){return e[n+"Month"](t-1)},y:function(e,t,n){return e[n+"FullYear"](t)}}),Sr=function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Date;return Tt(this,t),Nt(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return Dt(t,e),Ct(t,[{key:"add",value:function(e,t){return arguments.length>=2&&(e=At({},e,t)),this.time(this.time()+new Vt(e).sum(function(e,t){return xr[t]*e}))}},{key:"expires",value:function(e){return arguments.length||(e=this),new tn(this.$-Ye()).timeout(e)}},{key:"format",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return e=new ln(new Vt(e).$),n=String(new Vt(n).$),E(br,function(r){e=e.replaceString(n+r.format,r.match(t,"get"))}),e.$}},{key:"formatUTC",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return e=new ln(new Vt(e).$),n=String(new Vt(n).$),E(br,function(r){e=e.replaceString(n+r.format,r.match(t,"getUTC"))}),e.$}},{key:"get",value:function(e){return Er(e,[this.$,"get"])}},{key:"getUTC",value:function(e){return Er(e,[this.$,"getUTC"])}},{key:"isAfter",value:function(e){return e=new Date(new Vt(e).$),e.getTime()<this.$.getTime()}},{key:"isBefore",value:function(e){return e=new Date(new Vt(e).$),e.getTime()>this.$.getTime()}},{key:"isBetween",value:function(e,t){var n=this.$.getTime();return e=new Date(new Vt(e).$),t=new Date(new Vt(t).$),n>e.getTime()&&n<t.getTime()}},{key:"isInvalid",value:function(){return"Invalid Date"===this.$.toString()}},{key:"isPassed",value:function(){return this.isBefore(Ye())}},{key:"ofOne",value:function(e,n){var r=this;if(!(e in xr)||"w"===e)return!1;n=new t(new Date(n));var i=void 0;return E(xr,function(t,a){if(a===e&&(i=!0),i&&"w"!==a)return(!i||r.get(a)===n.get(a))&&void 0})!==!1}},{key:"set",value:function(e,t){var n=this.$;return arguments.length>=2&&(e=At({},e,t)),e=new Vt(e).$,E(e,function(e,t){Or(t,[n,e,"set"])}),this}},{key:"setUTC",value:function(e,t){var n=this.$;return arguments.length>=2&&(e=At({},e,t)),e=new Vt(e).$,E(e,function(e,t){Or(t,[n,e,"setUTC"])}),this}},{key:"time",value:function(e){var t=this.$;return arguments.length&&t.setTime(e),t.getTime()}},{key:"toISOString",value:function(){return this.$.toISOString()}},{key:"toLocaleString",value:function(){return this.$.toLocaleString()}},{key:"toString",value:function(){return this.$.toString()}},{key:"valueOf",value:function(){return this.$.valueOf()}}]),t}(Vt);_(Sr.prototype,At({},It.toStringTag,"Dat")),bt[1].push({check:i,cls:Sr});var _r=/^(([a-z][a-z\d+\-.]*:)?\/\/|data:[a-z]+\/[a-z]+;base64,)/i,jr=A("call",function(){return new nn([])}).case(t,function(e,n){var r=new nn([]);return E(n,function(n){return g(n)||t(n)?void(r=r.concat(jr(n,[e+"[]"]))):void r.push({param:e+"[]",value:n})}),r.$}).case(g,function(e,n){var r=new nn([]);return E(n,function(n,i){return g(n)||t(n)?void(r=r.concat(jr(n,[e?e+"["+i+"]":i]))):void r.push({param:e?e+"["+i+"]":i,value:m(n)?JSON.stringify(n):String(n)})}),r.$}),Rr=function(e,t,n,r){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"",a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{},o=a.params,u=void 0===o||o,c=a.query,s=void 0===c||c,l=Xe(t)?t:String(e).replace(/\/+$/,"")+"/"+String(t).replace(/^\/+/,"");E(n,function(e,t){l=new ln(l).replaceString(":"+t,et(e,u)).$});var f=jr(r,[""]);return f.length&&(l+=(l.indexOf("?")===-1?"?":"&")+f.map(function(e){var t=e.param,n=e.value;return et(t,s)+"="+et(n,s)}).join("&")),""+l+(i?"#"+i:"")},Tr=function(e){var t={};return E((e||"").split("\n"),function(e){var n=e.indexOf(":"),r=new ln(e.substring(0,n)).trim().toCamelCase().$,i=new ln(e.substring(n+1)).trim().$;r&&(t[r]=(t[r]?t[r]+", ":"")+i)}),t},Cr=new nn(["FormData","File","Blob","ArrayBuffer","String","Number"]),Ar=new nn(["DELETE","GET","HEAD"]),Pr=function(t,n,r){return t=new Vt(t).$,Ar.indexOfStrict(n)!==-1?null:m(t)&&Cr.indexOfStrict(e(t))===-1?(r.contentType||(r.contentType=["application/json;charset=utf-8"]),new Vt(t).json()):t},Lr={after:[],auth:{username:"",password:""},baseURL:yt.location.origin,before:[],data:null,headers:{},method:"get",params:{},query:{},responseType:"",timeout:0,url:"",withCredentials:!1},Dr=new nn(["post","put"]),Mr=function(e){function n(){function e(){return e.request.apply(e,arguments)}var t,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Tt(this,n);var i=Nt(this,(n.__proto__||Object.getPrototypeOf(n)).call(this)),a=new Vt({}).deepAssign(Lr,r).$;return a.before.indexOf(tt)===-1&&a.before.push(tt),Object.defineProperty(e,"$$",{value:a}),Object.setPrototypeOf(e,n.prototype),t=e,Nt(i,t)}return Dt(n,e),Ct(n,[{key:"after",value:function e(t){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];R([t],["function"],"Fetch#after");var e=this.$$.after;return n?e.push(t):e.unshift(t),this}},{key:"before",value:function e(t){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];R([t],["function"],"Fetch#before");var e=this.$$.before;return n?e.unshift(t):e.push(t),this}},{key:"config",value:function(e,t){var n=this.$$;return arguments.length?(c(e)?e(n):(arguments.length>=2&&(e=At({},e,t)),new Vt(n).deepAssign(e)),this):n}},{key:"delete",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return w(e)||(t=e,e=void 0),this.request(e,O({method:"delete"},t))}},{key:"get",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return w(e)||(t=e,e=void 0),this.request(e,O({method:"get"},t))}},{key:"head",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return w(e)||(t=e,e=void 0),this.request(e,O({method:"head"},t))}},{key:"headers",value:function e(n,r){var e=this.$$.headers;return arguments.length>=2&&(n=At({},n,r)),E(n,function(n,r){var i=e[r]||[],a=t(n)?n:[n];(e[r]=i).push.apply(i,a)}),this}},{key:"instance",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=new Vt(e).hasOwn("data")?{data:e.data}:{};delete e.data;var r=new Vt({}).deepAssign(this.$$,e).assign(t).$;return new n(r)}},{key:"patch",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return arguments.length&&!w(e)&&(n=t,t=e,e=void 0),this.request(e,O({method:"patch",data:t},n))}},{key:"post",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return arguments.length&&!w(e)&&(n=t,t=e,e=void 0),this.request(e,O({method:"post",data:t},n))}},{key:"put",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return arguments.length&&!w(e)&&(n=t,t=e,e=void 0),this.request(e,O({method:"put",data:t},n))}},{key:"request",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};1!==arguments.length||w(e)||(t=e);var n=new Vt(t).hasOwn("data")?{data:t.data}:{},r=w(e)?{url:e}:{};delete t.data;var i=new Vt(this.$$).deepClone().deepAssign(r,t).assign(n).$,a=void 0,o=Qt.resolve();return E(i.before,function(e){o=o.then(function(){return e.length>=2?Qt.resolve():new Qt(function(t){t(e(i))})},function(t){return e.length<2?Qt.reject(t):new Qt(function(n){n(e(t,i))})})}),o=o.then(function(){return new Qt(function(e,t){var n=i.after,r=i.auth,o=r.username,u=r.password,c=i.data,s=i.headers,l=i.method,f=i.onprogress,h=i.responseType,v=i.timeout,d=i.url,p=i.withCredentials;a=new XMLHttpRequest,a.open(l,d,!0,o,u),E(s,function(e,t){a.setRequestHeader(t,e)}),f&&(Dr.indexOfStrict(l)===-1?a.onprogress=f:a.upload.onprogress=f),a.onabort=function(){var e=new Error("Request was aborted");e.type="ABORT_ERROR",t(e),a=null},a.onerror=function(){var e=new Error("Network error");e.type="NETWORK_ERROR",t(e),a=null},a.ontimeout=function(){var e=new Error("Request time exceeded");e.type="TIMEOUT_ERROR",t(e),a=null},a.onreadystatechange=function(){if(a&&a.status&&4===a.readyState){var t={config:i,data:h&&"text"!==h?a.response:a.responseText,headers:Tr(a.getAllResponseHeaders()),status:1223===a.status?204:a.status,statusText:1223===a.status?"No Content":a.statusText,xhr:a},r=Qt.resolve();E(n,function(e){r=r.then(function(){return e.length>=2?Qt.resolve():new Qt(function(n){n(e(t))})},function(n){return e.length<2?Qt.reject(n):new Qt(function(r){r(e(n,t))})})}),e(r.then(function(){return t}).catch(function(e){try{e.response=t}catch(t){throw e}throw e}))}},a.responseType=h,a.timeout=Number(v)||0,a.withCredentials=!!p,a.send(c)})}),o.abort=function(){return a&&a.abort(),this},o}}]),n}(Function);_(Mr.prototype,At({},It.toStringTag,"Fetch"));var Nr=new Mr,Br=yt,Ur=Br.location,qr=function(e){var t=Ur.search,n=Ur.hash,r={query:{},hash:n.replace(/^#/,"")};return t?(new ln(t.replace(/^\?/,"")).split("&").forEach(function(t){var n=t.split("="),i=Bt(n,2),a=i[0],o=i[1],u=void 0===o?"":o;if(a=e?decodeURIComponent(a):a,u=e?decodeURIComponent(u):u,/^[^[]+/.test(a)){var c=void 0,s=r.query;new ln(a).match(/^[^[\]]*|\[[^[\]]*]/g).forEach(function(e){return e.indexOf("[")?void(c=e):(e=e.slice(1,-1),s=s[c]=s[c]||(e?{}:[]),void(c=e||s.length))}),s[c]=u}}),r):r},Ir=new nn([]),Fr=new nn([]),Wr={},Hr=yt,zr=Hr.history,Vr=Hr.location,Gr=Hr.location.href,Jr=void 0,Qr=void 0,Zr=void 0,Yr=void 0,Kr=void 0,Xr=void 0,ei=void 0,ti=void 0,ni=void 0,ri=void 0,ii=void 0,ai=A("call",function(){throw new Error("State path must be a string, a regular expression or undefined! (at registerState)")}).case($,function(e){return{path:e.source.replace(/\\\//g,"/"),url:e,params:{}}}).case(v,function(){return{path:"/",url:"/",params:{}}}).case(w,function(e){if(e.indexOf("/"))throw new Error('If route path is a string it must start with "/"! (at registerState)');var t=e.indexOf("?"),n=new Vt({}),r="",i=new ln(e).slice(0,t===-1?e.length:t).replace(/^\/|\/$/g).split(/\//).map(function(e,t,r){if(!e&&r.length>1)throw new Error('If route path is a string it must not contain "//" or end with "/"! (at makeRoute)');var i=e.indexOf(":");if(i>0)throw new Error("If route path is a string resource part must be either a string or an URL parameter! (at makeRoute)");if(i===-1)return{url:e,value:e};var a=lt(e.slice(1),'URL parameter must not be an empty string or contain characters besides "a-zA-Z_$"! (at makeRoute)',"URL parameter regexp validator must be within parentheses (e.g. :userId(\\d+) and not contain ones)! (at makeRoute)"),o=a.name,u=a.regexp,c=void 0===u?/[^\/]*/:u;return n.$[o]=n.count,{type:"param",url:":"+o,value:c}}).word(function(e){var t=e.type,n=e.url,i=e.value,a=void 0;return a="param"===t?"("+i.source.replace(/\\\//g,"/")+")":new ln(i).escapeRegExp().$,r+="/"+n,"/"+a});return{path:i,url:r,params:n.$}}),oi={buildURL:ft,go:ht,goToURL:vt,pushURL:dt,redirect:pt,redirectToURL:mt,replaceURL:gt},ui=function e(t){Tt(this,e),t=t||{};var n=t||{},r=n.name,i=n.path,a=void 0===i?"/":i,o=n.abstract,u=void 0!==o&&o,c=n.parent,s=n.decodeQuery,l=void 0===s||s,f=n.encodeQuery,h=void 0===f||f,v=n.decodeParams,d=void 0===v||v,p=n.encodeParams,m=void 0===p||p,g=ai(a),y=g.url,$=g.path,k=g.params,b={};new Vt(this).assign({name:r,parentName:c,abstract:!!u,children:new nn([]),decodeParams:!!d,decodeQuery:!!l,encodeParams:!!m,encodeQuery:!!h,params:k,query:b,relativePath:$,relativeURL:y});var x=w(a)?a.indexOf("?"):-1;if(x!==-1&&new ln(a).replace(/&$/).slice(x+1).split("&").forEach(function(e){var t=lt(e,'Query parameter must not be an empty string or contain characters besides "a-zA-Z_$"! (at makeRoute)',"Query parameter regexp validator must be within parentheses (e.g. :userId(\\d+)) and not contain them! (at makeRoute)"),n=t.name,r=t.regexp,i=void 0===r?/[\s\S]*/:r;b[n]=new RegExp("^"+i.source.replace(/\\\//g,"/")+"$")}),r===ti&&(new Vt(k).count||new Vt(b).count))throw new Error("Default route must not have URL or query params! (at makeRoute)")},ci=new ui,si=Object.freeze({D:x,isArray:t,isArrayLike:n,isBoolean:r,isDate:i,isDateLike:a,isElement:o,isFinite:u,isFunction:c,isInteger:s,isIntegerLike:l,isNaN:f,isNull:h,isNil:v,isNumber:d,isNumberLike:p,isObject:m,isPlainObject:g,isPrimitive:y,isRegExp:$,isString:w,isSymbol:k,isUndefined:b,Alphabet:Wt,alphabet:C,Arr:nn,array:X,iterate:ee,BlobObject:un,blob:te,Block:vr,Mixin:pr,initApp:Ue,Dat:Sr,now:Ye,date:Ke,Elem:Un,win:qn,doc:In,html:Fn,body:Wn,head:Hn,find:ye,parseHTML:$e,px:we,Fetch:Mr,fetch:Nr,Func:Zt,method:V,noop:G,prop:J,self:Q,Num:tn,rand:Z,random:Y,Promise:Qt,makeRoute:rt,router:oi,Str:ln,parseJSON:re,Super:Vt,Switcher:Ht,switcher:A,when:P}),li=x;O(li,si),delete li.D,yt.D=li}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,