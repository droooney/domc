!function(){"use strict";function e(e){return{}.toString.call(e).replace(/^\[object |]$/g,"")}function t(t){return"Array"===e(t)}function n(e){if(!e||c(e))return!1;var t=e.length;return l(t)&&t>=0}function r(t){return"Boolean"===e(t)}function i(t){return"Date"===e(t)}function a(e){return e=new Date(e),!f(e.getTime())}function o(t){return/Element$/.test(e(t))}function u(e){return!!d(e)&&(e=Number(e),!f(e)&&e!==1/0&&e!==-(1/0))}function c(t){return"Function"===e(t)||"function"==typeof t}function l(e){return d(e)&&e%1===0}function s(e){return e=parseInt(Number(e)),!(!e&&0!==e)}function f(e){return!!d(e)&&(e=Number(e),e!==e)}function h(e){return null===e}function v(e){return null===e||"undefined"==typeof e}function d(t){return"Number"===e(t)}function p(e){return!(!f(e)&&"NaN"!==e)||(e=Number(e),!(!e&&0!==e))}function g(t){return!!t&&("Object"===e(t)||"object"===("undefined"==typeof t?"undefined":xt(t))||t instanceof Object)}function m(e){if(y(e))return!1;var t=Object.getPrototypeOf(e);if(h(t))return!0;var n=t.constructor;return c(n)&&n instanceof n&&h(Object.getPrototypeOf(t))}function y(e){return h(e)||/^(number|string|boolean|symbol|undefined)$/.test("undefined"==typeof e?"undefined":xt(e))}function w(t){return"RegExp"===e(t)}function $(t){return"String"===e(t)}function k(t){return"Symbol"===e(t)}function b(e){return"undefined"==typeof e}function x(e){for(var t=gt.length-1;t>=0;t--)for(var n=gt[t],r=0,i=n.length;r<i;r++){var a=n[r];if(e instanceof a.cls)return e;if(a.check(e))return new a.cls(e)}}function O(e,t){var r=n(e),i={},a=0;for(var o in e)if(!{}.hasOwnProperty.call(i,o)&&(i[o]=!0,{}.hasOwnProperty.call(e,o))){if(r&&a++>=e.length)break;var u=t(e[o],r?Number(o):o,e);if(!b(u))return u}}function E(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return O(arguments,function(t,n){n&&O(t,function(t,n){e[n]=t})}),e}function S(e,t,n){O(t,function(t,r){Object.defineProperty(e,t,{value:n(t,r),writable:!0,enumerable:!1,configurable:!0})})}function j(e,t){O(t,function(t,n){return/^get /.test(n)?void Object.defineProperty(e,n.replace(/^get /,""),{get:t,set:void 0,enumerable:!1,configurable:!0}):/^set /.test(n)?void Object.defineProperty(e,n.replace(/^set /,""),{set:t,get:void 0,enumerable:!1,configurable:!0}):/^get\/set /.test(n)?void Object.defineProperty(e,n.replace(/^get\/set /,""),{get:t.get,set:t.set,enumerable:!1,configurable:!0}):void("Symbol.toStringTag"!==n&&Object.defineProperty(e,n,{value:t,writable:!0,enumerable:!1,configurable:!0}))})}function _(e,r){if(t(e)&&!r)return e;var i=[];return n(e)&&!$(e)?O(e,function(e){i.push(e)}):i.push(e),i}function T(e,n,r){O(n,function(n,i){t(n)||(n=[n]),O(n,function(t){if(t=Pt[t],!t.check(e[i]))throw new t.error(t.text.replace("$n",Nt[i])+(r?" (at "+r+")":""))})})}function R(e){return $(e)&&1===e.length}function C(e){T([e],["string"]);for(var t=e.split(/([\s\S]-+[\s\S])?/g),n=t.length,r=[],i=0;i<n;i++){var a=t[i];if(a&&" "!==a){if(/-/.test(a)&&!/[\s\S]-+[\s\S]/.test(a))throw new Error("Wrong part of the string ("+a+")! (in alphabet)");if(/-/.test(a)){var o=a.charCodeAt(0),u=a.charCodeAt(2);if(o>u)throw new Error("Start of the range must be before its end! (in alphabet)");for(var c=0,l=u-o+1;c<l;c++)r.push(String.fromCharCode(o+c))}else 1===a.length&&r.push(a)}}return new Mt(r)}function A(e,t,n){return new(Function.prototype.bind.apply(Ut,[null].concat(Array.prototype.slice.call(arguments))))}function L(e,t,n){return e?t:n}function P(e,t){O(t,function(t,n){return y(e[n])||!{}.hasOwnProperty.call(e,n)?void(e[n]=D(t)):void(y(e[n])||P(e[n],t))})}function D(e){var t=Bt(e,[e,!0]);return t!==e&&O(e,function(e,n){t[n]=D(e)}),t}function N(n,r,a){if(n===r)return!0;if(f(n)&&f(r)&&y(n)&&y(r))return!0;if(f(n)||f(r))return!1;if(y(n)||y(r))return a?n===r:n==r;if(i(n)&&i(r))return n.getTime()===r.getTime();if(i(n)||i(r))return!1;if(w(n)&&w(r))return n.source===r.source&&n.toString().match(/[gimuy]*$/)[0]===r.toString().match(/[gimuy]*$/)[0]&&n.lastIndex===r.lastIndex;if(w(n)||w(r))return!1;if(!m(n)&&!t(n)||!m(r)&&!t(r))return!1;var o=Object.getPrototypeOf(n),u=Object.getPrototypeOf(n);return Object.keys(n).length===Object.keys(r).length&&((!o||!u||e(o.constructor)===e(u.constructor))&&O(n,function(e,t){if(!(t in r&&N(e,r[t],a)))return!1})!==!1)}function M(e,t,n,r){var i=1===n;return O(e,function(e,a,o){var u=[{key:a,value:e}].concat(r);if(i||y(e)?!t(e,a,o,u):!M(e,t,n-1,u))return!1})!==!1}function U(e,t,r,i){var a=n(e),o=v(e),u=a?[]:o?e:{},c=1===r;return O(e,function(e,n,o){var l=[{key:n,value:e}].concat(i);if((c||y(e))&&t(e,n,o,l))return void(a?u.push(e):u[n]=e);if(!c){var s=U(e,t,r-1,l);s&&(a?u.push(s):u[n]=s)}}),a?u.length?u:void 0:o?u:Object.keys(u).length?u:void 0}function B(e,t,n,r){var i=1===n;return O(e,function(e,a,o){var u=[{key:a,value:e}].concat(r);if(i||y(e)){if(t(e,a,o,u))return u}else{var c=B(e,t,n-1,u);if(c)return c}})||null}function q(e,t,n,r){var i=1===n;O(e,function(e,a,o){var u=[{key:a,value:e}].concat(r);i||y(e)?t(e,a,o,u):q(e,t,n-1,u)})}function I(e,t,n,r){var i=1===n;O(e,function(e,a,o){var u=[{key:a,value:e}].concat(r);t(e,a,o,u),i||y(e)||I(e,t,n-1,u)})}function F(e){Object.freeze(e),O(e,F)}function W(e,t,r,i){var a=n(e)?[]:v(e)?e:{},o=1===r;return O(e,function(e,n,u){var c=[{key:n,value:e}].concat(i);a[n]=o||y(e)?t(e,n,u,c):W(e,t,r-1,c)}),a}function H(e,t,n,r,i,a){var o=1===n;return O(e,function(e,u,c){if(!i&&(o||y(e))&&!r)return i={IV:e},void(r=!0);var l=[{key:u,value:e}].concat(a);i=o||y(e)?{IV:t(i.IV,e,u,c,l)}:H(e,t,n-1,r,i,l)}),i}function z(e,t,n,r){var i=1===n;return O(e,function(e,a,o){var u=[{key:a,value:e}].concat(r);if(i||y(e)?t(e,a,o,u):z(e,t,n-1,u))return!0})||!1}function V(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return function(n){return n[e].apply(n,_(t))}}function G(){}function J(e){return function(t){var n=t[e];return n}}function Q(){return arguments[0]}function Z(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return e+(t-e)*Math.random()}function Y(e,t){if(T([e,t],["intLike","intLike"],"random"),t<=e)throw new Error("The second argument must be greater than the first!","random");return Math.floor(Z(e,t+1))}function X(e,t){return d(e)||d(t)?d(e)?d(t)?f(e)&&f(t)?0:f(e)?-1:f(t)?1:e-t:1:-1:0}function K(e,t){T([e,t],[["intLike",">=0"],"function||!"],"array");for(var n=[],r=0;r<e;r++)n.push(t?t(r):r);return new Zt(n)}function ee(e,t){T([e,t],[["intLike",">=0"],"function"],"iterate");for(var n=0;n<e;n++)t(n)}function te(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return t(e)||(e=[e]),new en(new Blob(e,n))}function ne(e){return e.replace(/^[\s\-_.]+|[\s\-_.]+$/g,"")}function re(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments[2];if(arguments.length<=1)return x(JSON.parse(e));c(t)&&(n=t,t={});var r=t,i=r.numbers,a=r.dates,o=JSON.parse(e,function(e,t){return a&&/^\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\d\.\d\d\dZ?$/.test(t)?t=new Date(t):i&&p(t)&&$(t)&&(t=Number(t)),n?n.apply(this,arguments):t});return x(o)}function ie(e,t){var n=t.name,r=void 0;r=fn(n)?new qt({"tag-close":e.match(ae(n))}):on.map(function(t){return e.match(t)});var i=void 0;if(i=r.find(function(e){return e&&0===e.index})){var a={type:i.key,index:i.value[0].length,value:i.value[1]},o={};if("tag-open"===i.key){var u=e,c=void 0;for(a.selfClosing=!1,a.attrs=o;(e=u.slice(a.index))&&!(c=e.match(un));){var l=e.match(cn);l?(o[l[1]]=(l[2]||"").replace(/^("|')|("|')$/g,""),a.index+=l[0].length):a.index+=1}c&&(a.index+=c[0].length,a.selfClosing=!!c[1])}return a}var s=r.min(function(e){return e?e.index:NaN}),f=s.value;return f===1/0&&(f=e.length),{type:"text",index:f,value:e.slice(0,f)}}function ae(e){return new RegExp("</("+e+")\\s*>","i")}function oe(e,t){return t+' (~~~ "'+e.slice(t,t+15)+'" ~~~, the string itself is "'+e+'")'}function ue(e){return e.replace(/&(\w+|#x?\d+);/g,function(e){return ln.innerHTML=e,ln.textContent||ln.innerText})}function ce(e){return le(e)?e:($(e)&&(e=ye(e)),new Ln(e))}function le(e){return e instanceof Ln}function se(t){return"Window"===e(t)}function fe(t){return"HTMLDocument"===e(t)}function he(t){return"DocumentFragment"===e(t)}function ve(t){return"CSSStyleRule"===e(t)}function de(t){var n=e(t);return"Comment"===n||"Text"===n}function pe(e){return o(e.$[0])?e.$[0]:gn}function ge(e){return e&&e.nodeName&&e.nodeName.toLowerCase()||""}function me(e){({}).hasOwnProperty.call(e,"dwayneData")||se(e)?se(e)&&!kn.some(function(t){var n=t.element;return n===e})&&kn.push({element:e,listeners:{}}):Object.defineProperty(e,"dwayneData",{value:{previousDisplay:"",listeners:{},ctx:"canvas"===ge(e)&&e.getContext("2d"),validators:new Zt([])}})}function ye(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:pn;return new Ln(o(t)||fe(t)?t.querySelectorAll(String(e)):[])}function we(e,t){var n=dn(e,t),r=Dn.template(),i=new Ln(r.$[0].content);return n.forEach(function e(t){var n=t.name,r=t.attrs,a=t.value,o=t.parent,u=t.children,c=o.elem||i,l=c.create(n);t.elem=l,a&&l.text(a),r&&l.attr(r),"template"===n&&(t.elem=new Ln(l.prop("content"))),u&&u.forEach(e)}),new Ln(i)}function $e(e){return Number(String(e).replace(/px$/,""))}function ke(e){var t=function(e){function t(){var e,n,r,i;Ot(this,t);for(var a=arguments.length,o=Array(a),u=0;u<a;u++)o[u]=arguments[u];return n=r=Ct(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(o))),r.elems=null,i=n,Ct(r,i)}return Tt(t,e),Et(t,[{key:"afterConstruct",value:function(){var e=this.$$.parent.children,t=this.args.name,n=void 0;t?(n=e.find(function(e){var n=e.name;return n==="d-block-"+t}),n&&n.value.children.length&&(this.elems=n.value.children)):this.elems=e}}]),t}(e);return t.template='<d-elements value="{elems}" />',{name:"d-block",value:t}}function be(e,t){var n=function(e){function n(e){Ot(this,n);var t=Ct(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,e)),r=t.args,i=r.item,a=void 0===i?"$item":i,o=r.index,u=void 0===o?"$index":o;return E(t.$$,{uids:new qt({}),items:new Zt([]),UID:String(t.args.uid),itemName:a,indexName:u}),t}return Tt(n,e),Et(n,[{key:"afterRender",value:function(){var e=this;this.constructValues(this.args.set),this.watchArgs("set",function(t){e.constructValues(t)})}},{key:"constructValues",value:function(e){var n=this,r=this.$$,i=r.elems,a=i.start,o=i.parent,u=r.uids,c=r.parent,l=r.scope,s=r.itemName,f=r.indexName,h=r.UID,v=this.children,d=u.$,p={},g={};new qt(e).forEach(function(e,t){l[s]=e,l[f]=t;var r=c.$$.evaluate(String(h),null,null,!1,!1,n);p[r]=p[r]||{},p[r][t]=!0,g[t]=r}),l[s]=null,l[f]=null,u.forEach(function(e,t){return p[t]?void e.splice(Object.keys(p[t]).length).forEach(function(e){e.remove()}):void e.forEach(function(e){e.remove()})});var m=a;new qt(e).forEach(function(e,r){var i=g[r],a=void 0;d[i]&&d[i].length?(a=p[i][r]=u.$[i].shift(),a.$$.scope[f]=r,a.$$.scope[s]=e):a=p[i][r]=t({node:{itemName:s,indexName:f,item:e,index:r,name:"#d-item",block:c,children:v},after:m,parent:o,parentBlock:n,parentScope:c});var l=a.$$.elems,h=l.start,y=l.end;if(h.prev().$[0]!==m.$[0]){var w=a.$$.elems.content;new Ln([h,w,y]).insertAfter(m)}m=y}),this.$$.uids=new qt(p).map(function(e){return new qt(e).values()})}}]),n}(e);return{name:"d-each",value:n}}function xe(e,t){var n=function(n){function r(){return Ot(this,r),Ct(this,(r.__proto__||Object.getPrototypeOf(r)).apply(this,arguments))}return Tt(r,n),Et(r,[{key:"afterConstruct",value:function(){var n=this;this.watchArgs("value",function(r){var i=n.$$,a=i.children,o=i.mixins,u=i.watchersToRemove,c=i.elems,l=c.start,s=c.content,f=c.parent,h=l;a.forEach(function(e){e.remove(!0)}),o.forEach(function(e){e.remove(!0)}),s.remove(),n.$$.children=new Zt([]),n.$$.mixins=new Zt([]),n.$$.watchersToRemove=u.filter(function(e){var t=e.watchers,n=e.watcher,r=e.forDElements;if(r)return!0;var i=t.indexOf(n);i!==-1&&t.splice(i,1)});var v=new Ln;new Zt(r||[]).forEach(function(r){var i=t({node:r,after:h,parent:f,parentBlock:n,parentScope:n});if(i instanceof e){var a=i.$$.elems;h=a.end,v.add(a.start,a.content,a.end)}else h=i,v.add(i)}),n.$$.elems.content=v})}}]),r}(e);return{name:"d-elements",value:n}}function Oe(e){var t=function(e){function t(){var e,n,r,i;Ot(this,t);for(var a=arguments.length,o=Array(a),u=0;u<a;u++)o[u]=arguments[u];return n=r=Ct(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(o))),r.index=1/0,r.elems=null,r.values=r.children.map(function(e,t){var n=e.name,i=e.attrs,a=e.children,o=r.evaluateAndWatch("d-else"===n?"{true}":i.if||"{true}",function(e){if(!!e!==r.values.$[t]&&(r.values.$[t]=!!e,!(t>r.index))){if(t<r.index)return r.index=t,void(r.elems=a);var n=r.values.find(Boolean);n?(r.index=n.key,r.elems=r.children.$[n.key].children):(r.index=1/0,r.elems=null)}});return o&&r.index===1/0&&(r.index=t,r.elems=a),o}),i=n,Ct(r,i)}return Tt(t,e),t}(e);return t.template='<d-elements value="{elems}"/>',{name:"d-if",value:t}}function Ee(e){var t=function(e){function t(){return Ot(this,t),Ct(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return Tt(t,e),t}(e);return t.template='<d-elements value="{children}"/>',{name:"#d-item",value:t}}function Se(e){var t=function(e){function t(e){Ot(this,t);var n=Ct(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));n.index=1/0,n.elems=null;var r=n.args,i=n.args.value,a=void 0;return n.values=n.children.object(function(e,t,o){var u=t.name,c=t.attrs,l=t.children;if(!a&&("d-case"===u||"d-default"===u)){"d-default"===u&&(a=!0);var s=void 0;s="d-default"===u?r.value:n.evaluateAndWatch(c.if||"{undefined}",function(e){if(!(n.equals(n.values.$[o].value,e)||(n.values.$[o].value=e,o>n.index))){if(o<n.index)return n.index=o,void(n.elems=l);var t=n.values.find(function(e){var t=e.value;return n.equals(t,r.value)});t?(n.index=t.key,n.elems=t.value.children):(n.index=1/0,n.elems=null)}}),n.equals(s,i)&&n.index===1/0&&(n.index=o,n.elems=l),e.push({name:u,children:l,value:s})}},new Zt([])),n}return Tt(t,e),Et(t,[{key:"afterConstruct",value:function(){var e=this;this.watchArgs("value",function(t){e.index=1/0,e.values.forEach(function(n,r){var i=n.name,a=n.value,o=n.children,u="d-default"===i?t:a;e.equals(u,t)&&e.index===1/0&&(e.index=r,e.elems=o)})})}},{key:"equals",value:function(e,t){return new qt(e).equals(t)}}]),t}(e);return t.template='<d-elements value="{elems}"/>',{name:"d-switch",value:t}}function je(e){var t=function(e){function t(){var e,n,r,i;Ot(this,t);for(var a=arguments.length,o=Array(a),u=0;u<a;u++)o[u]=arguments[u];return n=r=Ct(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(o))),r.text="",i=n,Ct(r,i)}return Tt(t,e),Et(t,[{key:"afterConstruct",value:function(){var e=this;this.text=v(this.args.value)?"":this.args.value,this.watchArgs("value",function(t){e.text=v(t)?"":t})}}]),t}(e);return t.template="<d-elements value=\"{[{ name: '#text', value: text }]}\"/>",{name:"d-text",value:t}}function _e(e){var t=function(e){function t(){return Ot(this,t),Ct(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return Tt(t,e),Et(t,[{key:"afterUpdate",value:function(e,t){var n=this.elem;e=new qt(e).$,new qt(t).forEach(function(t,r){e[r]||n.removeAttr(r)}),n.attr(e)}}]),t}(e);return{name:"d-attr",value:t}}function Te(e){var t=function(e){function t(){return Ot(this,t),Ct(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return Tt(t,e),Et(t,[{key:"afterUpdate",value:function(e){this.off&&this.off(),c(e)&&(this.off=this.elem.on(this.match[0],e))}}]),t}(e);return{name:"d-bind",value:t}}function Re(e){var n=function(e){function n(){var e,t,r,i;Ot(this,n);for(var a=arguments.length,o=Array(a),u=0;u<a;u++)o[u]=arguments[u];return t=r=Ct(this,(e=n.__proto__||Object.getPrototypeOf(n)).call.apply(e,[this].concat(o))),r.classes=[],i=t,Ct(r,i)}return Tt(n,e),Et(n,[{key:"afterUpdate",value:function(e){var n=this.elem,r=this.classes,i=[];e=new qt(e).$,$(e)&&(e=e.split(/\s+/)),t(e)?(O(r,function(t){e.indexOf(t)===-1&&n.removeClass(t)}),O(e,function(e){$(e)&&(i.push(e),n.addClass(e))})):(O(r,function(t){e[t]||n.removeClass(t)}),O(e,function(e,t){e&&(i.push(t),n.addClass(t))})),this.classes=i}}]),n}(e);return{name:"d-class",value:n}}function Ce(e){var t=function(e){function t(e){Ot(this,t);var n=Ct(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),r=n.$$.parent,i=n.evaluateOnce();return c(i)?i(n.elem):$(i)&&(r[i]=n.elem),n}return Tt(t,e),t}(e);return t.evaluate=!1,{name:"d-elem",value:t}}function Ae(e){var t=function(e){function t(){return Ot(this,t),Ct(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return Tt(t,e),Et(t,[{key:"afterUpdate",value:function(e){var t=this.elem;e?t.hide():t.show()}}]),t}(e);return{name:"d-hide",value:t}}function Le(e){var t=function(e){function t(e){Ot(this,t);var n=Ct(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.elem.on(n.match[0],function(){n.evaluateOnce()}),n}return Tt(t,e),t}(e);return t.evaluate=!1,{name:"d-on",value:t}}function Pe(e){var t=function(e){function t(){return Ot(this,t),Ct(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return Tt(t,e),Et(t,[{key:"afterUpdate",value:function(e){var t=this.elem;e?t.show():t.hide()}}]),t}(e);return{name:"d-show",value:t}}function De(e){var t=function(e){function t(){return Ot(this,t),Ct(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return Tt(t,e),Et(t,[{key:"afterUpdate",value:function(e,t){var n=this.elem;e=new qt(e).$,new qt(t).forEach(function(t,r){e[r]||n.removeCSS(r)}),n.css(e)}}]),t}(e);return{name:"d-style",value:t}}function Ne(e){var t=function(e){function t(){return Ot(this,t),Ct(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return Tt(t,e),Et(t,[{key:"afterUpdate",value:function(e){this.elem.text(v(e)?"":""+e)}}]),t}(e);return{name:"d-text",value:t}}function Me(e){var t=function(e){function t(e){Ot(this,t);var n=Ct(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),r=n.elem,i=n.match,a=n.evaluateOnce();return c(a)&&r.validate(a),a===!0&&"on-change"===i&&1===r.$$.dwayneData.validators.length&&r.on(Fn(r.name,[r.prop("type")]),function(){r.validate()}),n}return Tt(t,e),t}(e);return t.evaluate=!1,{name:"d-validate",value:t}}function Ue(e){var t=function(e){function t(e){Ot(this,t);var n=Ct(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),r=n.$$,i=r._value,a=r.parent,o=n.elem,u=o.prop("type");n.prop=Wn(o.name,[u,o]),n.type=u;var c=a.$$.evaluate("{"+i+"}",function(e){n.setProp(e)},n),l=n.getProp(c);return v(c)||"checkbox"===u?a[i]=l:n.setProp(c),o.on(Vn(o.name,[u]),function(e){e.target===o.$[0]&&(a[i]=n.getProp(a[i]))}),n}return Tt(t,e),Et(t,[{key:"setProp",value:function(e){var t=this.elem,n=this.prop,r=this.type;"text"===n?t.text(e):t.prop(n,Hn(t.name,[e,r,t.$[0].value]))}},{key:"getProp",value:function(e){var t=this.elem,n=this.prop,r=this.type;return"text"===n?t.text():zn(t.name,[t.prop(n),r,t.$[0].value,e])}}]),t}(e);return t.evaluate=!1,{name:"d-value",value:t}}function Be(){var e=ye("d-root").first();if(!e.length)throw new Error("No d-root element is found! (initApp)");qe(ur,Jn),O(cr,function(e,t){if("evaluate"!==t){if(!c(e))return void console.warn('The "'+t+'" mixin is not a function and will not be registered (initApp)');if(!Xn.test(t))return void console.warn('Name "'+t+'" is not allowed for mixins so the mixin will not be registered (initApp)');if(!Ge(e))return void console.warn('The "'+t+'" mixin does not extend Mixin and will not be registered (initApp)');Qn[t]=e,j(e,{_match:new RegExp("^"+t+"(?:-([\\s\\S]+))?$")})}});var t=e.attr("block");if(!Jn[t])throw new Error('No "'+t+'" block is registered! (initApp)');var n=Dn.createComment(" d-root: start "),r=e.parent();n.add(Dn.createComment(" d-root: end ")),e.replace(n),Fe({node:{name:t,attrs:{},children:new Zt([])},after:n.first(),parent:r})}function qe(e,t){O(e,function(e,n){if("collapseWhiteSpace"!==n&&"defaultArgs"!==n&&"template"!==n&&"wrap"!==n){if(!c(e))return void console.warn('The "'+n+'" block is not a function and will not be registered (initApp)');if(!Yn.test(n)&&"#d-item"!==n)return void console.warn('Name "'+n+'" is not allowed for blocks so the block will not be registered (initApp)');if(!Ve(e))return void console.warn('The "'+n+'" block does not extend Block and will not be registered (initApp)');var r=Object.create(t);t[n]={block:e,html:He(dn(""+(e.template||""),e.collapseWhiteSpace)),children:r},qe(e,r)}})}function Ie(e,t){O(e,function(e){var n=e(t,Fe),r=n.name,i=n.value;Object.defineProperty(t,r,{value:i,enumerable:!0})})}function Fe(e){var t=e.node,n=e.after,r=e.parent,i=e.parentBlock,a=e.parentScope;a=t&&t.block||a;var o=t&&t.name||"UnknownBlock",u=t&&t.attrs||{},c=t&&t.children||new Zt([]),l=r.prop("namespaceURI")===nr?Dn.svg():new Ln(Dn.template().$[0].content),s=a?a.$$.Block.children:Jn,f=t&&t.name&&s[t.name]?s[t.name].block:null,h=void 0;if(!c.length&&(h=o.match(/^d-block-([\s\S]+)$/)||"d-block"===o)&&(f=Jn["d-block"].block,u.name=h?h[1]:null),!f){var d=function(){var e=t.value,c=t.children;if("#text"===o&&Kn.test(e))return{v:Fe({node:{name:"d-text",attrs:{value:e},children:new Zt([]),block:a},after:n,parent:r,parentBlock:i,parentScope:a})};var s=l.create(o),f=new Zt([]),h=new qt(u).object(function(e,t,n){var r=O(Qn,function(e,t){var r=n.match(e._match);if(r)return{match:r,name:t}});return r?void f.push({name:r.name,match:r.match,value:t,elem:s,parentBlock:i,parentScope:a}):void(e[n]=a.$$.evaluate(t,function(e){s.attr(n,e)},i))}).$;return v(e)||s.text(e),h&&s.attr(h),n.length?s.insertAfter(n):s.into(r),n=new Ln,c&&ze(c).forEach(function(e){var t=Fe({node:e,after:n,parent:s,parentBlock:i,parentScope:a});n=t instanceof ur?t.$$.elems.end:t}),f.forEach(function(e){We(e)}),{v:s}}();if("object"===("undefined"==typeof d?"undefined":xt(d)))return d.v}var p=t&&t.name?s[t.name]:null,g=new f({name:o,args:u,children:c,block:p,parent:r,parentBlock:i,parentScope:a});Object.defineProperties(g,{args:{value:g.args},global:{value:g.global}});var m="d-elements"===o?new Zt(g.args.value||[]):He(p.html,g);"d-elements"===o&&"#d-item"===i.$$.name&&(m=He(m,i));var y=g.$$,w=g.args,$=g.global,k=Rt(g,["$$","args","global"]),b=jt({},f.defaultArgs,w);if(delete k.$,delete k.$$,y.args=Qe(b),y.locals=Qe(k),y.global=Qe($,"global",a),"#d-item"===o){for(var x,E=(x={},St(x,t.itemName,t.item),St(x,t.indexName,t.index),x),S=g,j=a,_=void 0;!_&&(S=S.$$.parentBlock);)_="#d-item"===S.$$.name;_&&(j=S.$$.scope),y.Block=a.$$.Block,y.privateScope=Qe(E),Ze(y.scope=Object.create(j),E,y.privateScope)}"d-each"===o&&(y.scope=Object.create(a)),Ze(w,b,y.args),Ze($,$,y.global),Ze(g,k,y.locals);try{g.afterConstruct()}catch(e){console.error("Uncaught error in "+o+"#afterConstruct:",e)}var T=new Ln([y.elems.start,y.elems.end]);n.length?T.insertAfter(n):T.into(r),n=y.elems.start,ze(m).forEach(function(e){var t=Fe({node:e,after:n,parent:r,parentBlock:g,parentScope:a});if(t instanceof ur){var i=t.$$.elems;n=i.end,y.elems.content.add(i.start,i.content,i.end)}else n=t,y.elems.content.add(t)});try{g.afterRender()}catch(e){console.error("Uncaught error in "+o+"#afterRender:",e)}return g}function We(e){var t=e.name,n=e.value,r=e.match,i=e.elem,a=e.parentBlock,o=e.parentScope,u=Qn[t];new u({value:n,match:r,elem:i,parentBlock:a,parentScope:o})}function He(e,t){return new Zt(e||[]).map(function(e){var n=e.name,r=e.attrs,i=e.value,a=e.children,o={name:n,value:i,attrs:jt({},r)};return t&&(o.block=t),a&&(o.children=He(a,t)),o})}function ze(e){return new Zt(e||[]).concat({}).object(function(e,t){var n=t.name,r=e.html,i=e.ifElse;"d-else-if"!==n&&"d-else"!==n?(i&&(r.push({name:"d-if",block:i.$[0].block,children:i}),e.ifElse=null),"d-if"===n?e.ifElse=new Zt([t]):b(n)||r.push(t)):((i||r).push(t),"d-else"===n&&i&&(r.push({name:"d-if",block:i.$[0].block,children:i}),e.ifElse=null))},{html:new Zt([]),ifElse:null}).$.html}function Ve(e){return Zn.call(ur,e)&&Zn.call(ur.prototype,e.prototype)}function Ge(e){return Zn.call(cr,e)&&Zn.call(cr.prototype,e.prototype)}function Je(e){e.forEach(function(e){var t=e.watcher,n=e.watchers,r=n.indexOf(t);r!==-1&&n.splice(r,1)})}function Qe(e,t,n){var r={};return"global"===t&&(r=Object.create(n?n.$$.global:null)),new qt(e).object(function(e,t,n){e[n]={value:t,watchers:{temp:new Zt([]),perm:new Zt([])}}},r).$}function Ze(e,t,n){new qt(e).define(new qt(t).map(function(e,t){var r=n[t];return{get:function(){return ir&&ar.indexOf(r.watchers.temp)===-1&&ar.push(r.watchers.temp),r.value},set:function(e){if(e!==r.value){or||(or=[]);var t=r.watchers.temp.slice(),n=r.value;r.watchers.temp=new Zt([]),r.value=e,t.forEach(function(e){e.onRemove(),e()}),or.push({scope:r,oldValue:n,value:e}),setTimeout(function(){if(or){for(var e=new Zt([]);or.length;)for(var t=function(t){var n=or[t],r=n.scope,i=n.value,a=n.oldValue;r.watchers.perm.forEach(function(t){e.indexOf(t)===-1&&(t(i,a),e.push(t))}),or.splice(t,1)},n=or.length-1;n>=0;n--)t(n);or=null}},0)}}}}).$)}function Ye(e,t){var n=String(e),r=t-n.length;return r=r<0?0:r,lr.repeat(r).$+n}function Xe(){return Date.now()}function Ke(e){return arguments.length?(e=new qt(e).$,new yr(new Date(e))):new yr(new Date(Xe()))}function et(e){return wr.test(e)}function tt(e,t){return t?encodeURIComponent(e):e}function nt(e){var t=e.baseURL,n=e.data,r=e.headers,i=e.method,a=e.params,o=e.query,u=e.url,c=i.toUpperCase();e.method=c,e.url=kr(t,u,a,o),e.data=Er(n,c,r),e.headers=new qt(r).object(function(e,t,n){n=new rn(n).toCapitalCase().replace(/\s+/g,"-").$,e[n]=t.join(", ")}).$}function rt(){if(!Ir){if(Ir=!0,Gr=(Lr.find(function(e){var t=e.name;return t===Vr})||{}).value,Qr=(Lr.find(function(e){var t=e.name;return t===Jr})||{}).value,Vr&&!Gr)throw new Error('There is no specified fallback route ("'+Vr+'")! (at initRouter)');Lr.forEach(function(e){var t=e.parentName,n=e.name,r=t||zr,i=Lr.find(function(e){var t=e.name;return t===r})||{},a=i.value;if(!a)throw new Error('No such parent route ("'+r+'") found for the route ("'+n+'")! (at initRouter)');if(!a.abstract&&n!==zr)throw new Error('Parent route must be abstract (for "'+n+'")! (at initRouter)');n!==zr&&(e.parentName=r),e.parent=n===zr?ei:a}).forEach(function(e){var t=e.name,n=e.parent,r=n.params,i=n.query,a=n.path,o=e.params,u=e.query,c=e.relativeURL,l=e.relativePath,s=e,f=0,h=l,v="";if(w(a))throw new Error("URL regexp route cannot be extended! (at initRouter)");for(;s=s.parent;)f+=new qt(s.params).count,h=s.relativePath+h,v=s.relativeURL+v,s.children.push(e);if(h=new RegExp("^"+(h.replace(/\/+/g,"/").replace(/\/$/,"")||"/")+"$"),v=w(c)?h:(v+c).replace(/\/+/g,"/").replace(/\/$/,"")||"/",new qt(u).proto(i),new qt(o).proto(r).forEach(function(e,t,n){n[t]+=f}),t===Jr&&(new qt(o).count||new qt(u).count))throw new Error("Default route must not have URL or query params! (at initRouter)");e.url=v,e.validatePath=h}),ut(),Pn.on({popstate:function(){Mr.href!==qr&&(Fr=!0),Fr&&ut()},click:function(e){var t=new Ln(e.target).closest("a");t.length&&"_blank"!==t.attr("target")&&(e.preventDefault(),ot(t.attr("href")||"",!0))}})}}function it(e){function t(e){if(e.beforeLoadRoute&&!h)try{e.beforeLoadRoute()}catch(e){console.error("Uncaught error in "+i+"#beforeLeave:",e)}h=!0}function n(e){if(e.beforeLeaveRoute&&h)try{e.beforeLeaveRoute()}catch(e){console.error("Uncaught error in "+i+"#beforeLeave:",e)}h=!1}var r=e||{},i=r.name,a=r.path,o=r.abstract,u=r.root,c=r.fallbackTo,l=r.default;if(Ir)return console.warn("Router was already initialized (at makeRoute)"),Q;if(Wr&&u)throw new Error("There can't be two root routes (\""+zr+'" and "'+i+'")! (at makeRoute)');if(Hr&&l)throw new Error("There can't be two default routes (\""+Jr+'" and "'+i+'")! (at makeRoute)');if(!i)throw new Error('State must have a non-empty string "name" property! (at makeRoute)');if(Lr.some(function(e){var t=e.name;return t===i}))throw new Error('State must have unique "name" property! (at makeRoute)');if(u&&(Wr=!0,zr=i,e.parent=null,c&&(Vr=c)),l){if(Hr=!0,Jr=i,o)throw new Error("Default route can't be abstract! (at makeRoute)");if(w(a))throw new Error("Default route can't have a regexp path! (at makeRoute)")}var s=new Kr(e);Lr.push(s);var f=void 0,h=void 0;return function(e){var r,a;return a=r=function(e){function r(e){Ot(this,r);var a=Ct(this,(r.__proto__||Object.getPrototypeOf(r)).call(this,e));return u&&!function(){rt();var e={buildURL:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=Lr.find(function(t){var n=t.name;return n===e})||{},r=n.value;if(!r)throw new Error('There are no routes with name "'+e+'"! (at router.buildURL)');var i=r.url,a=r.encodeParams,o=r.encodeQuery;if(w(i))throw new Error("URL can be built only from the string URLs! (at router.buildURL)");var u=t.params,c=void 0===u?{}:u,l=t.query,s=void 0===l?{}:l,f=t.hash,h=void 0===f?"":f;return kr(Br,i,c,s,h,{params:a,query:o})},go:function(t,n){ot(e.buildURL(t,n),!0)},goToURL:function(e){ot(e,!0)},pushURL:function(e){st(e,!0)},redirect:function(t,n){ot(e.buildURL(t,n))},redirectToURL:function(e){ot(e)},replaceURL:function(e){st(e)}};a.global.router=e}(),a.__isCurrentRoute__=s===Zr||s.children.indexOf(Zr)!==-1,a.args.route=Yr,h=!1,f=at(i,function(){var e=s===Zr||s.children.indexOf(Zr)!==-1;e?t(a):n(a),a.args.route=Yr,a.__isCurrentRoute__=e}),a.__isCurrentRoute__&&t(a),a}return Tt(r,e),Et(r,[{key:"beforeRemove",value:function(){f(),f=null,n(this),_t(r.prototype.__proto__||Object.getPrototypeOf(r.prototype),"beforeRemove",this).call(this)}}]),r}(e),r.template='<div class="dwayne-route route-'+i+'" d-show="{__isCurrentRoute__}">'+e.template+"</div>",a}}function at(e,t){return Pr.$[e]=t,function(){Pr.delete(e)}}function ot(e,t){st(e,t),ut()}function ut(){var e=ct();if(e){var t=e;Zr=t.route,Yr=Rt(t,["route"]),E(Yr,{name:Zr.name,host:Mr.host,hostname:Mr.hostname,href:Mr.href,origin:Mr.origin,pathname:Mr.pathname,port:Mr.port,protocol:Mr.protocol,search:Mr.search})}else{if(Vr){var n=Gr,r=n.url,i=n.encodeParams,a=n.encodeQuery;return ot(kr(Br,r,{},{},"",{params:i,query:a}))}Zr=null,Yr=null}Pr.forEach(function(e){return e()})}function ct(){var e=Mr.pathname||"/",t=Mr.search||"",n=void 0;return Lr.some(function(r){if(!r.abstract){var i=r.url,a=r.validatePath,o=r.params,u=r.query,c=r.decodeParams,l=r.decodeQuery,s=Ar(l),f=new qt(s.query),h={},v=((e.replace(/\/$/,"")||"/")+(w(i)?t:"")).match(a);if(v){for(var d in u)if(!f.hasOwn(d)||!u[d].test(f.$[d]))return;v.shift();for(var p in o)h[p]=lt(v[o[p]],c);return n={route:r,params:h,query:f.$,hash:s.hash},!0}}}),n?n:Jr?jt({route:Qr,params:{}},Ar(Qr.decodeQuery)):void 0}function lt(e,t){return t?decodeURIComponent(e):e}function st(e,t){try{Nr[t?"pushState":"replaceState"](null,null,e),Fr=!0}catch(t){Mr.href=e}}function ft(e,t,n){var r=e.match(/^[a-z_$]+/i);if(!r)throw new Error(t);var i=r[0],a=e.slice(i.length),o=void 0;if(a&&(a.indexOf("(")||a.indexOf(")")!==a.length-1))throw new Error(n);return a&&(o=new RegExp(a.slice(1,-1))),{name:i,regexp:o}}var ht="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},vt={"#":function(e,t){e.id(t)},".":function(e,t){e.addClass(t)},$:function(e,t,n){e.attr(t,n)},"@":function(e,t,n){e.css(t,n)},"&":function(e,t,n){e.html(n)},"*":function(e,t,n){e.text(n)},"-":{".":function(e,t){e.removeClass(t)},$:function(e,t){e.removeAttr(t)},"@":function(e,t){e.removeCSS(t)}}},dt=["createImageData","createLinearGradient","createPattern","createRadialGradient","getImageData","getLineDash","isPointInPath","isPointInStroke","measureText"],pt=["arc","arcTo","beginPath","bezierCurveTo","clearRect","clip","closePath","drawFocusIfNeeded","drawImage","ellipse","fill","fillRect","fillText","lineTo","moveTo","putImageData","quadraticCurveTo","rect","resetTransform","restore","rotate","save","scale","setLineDash","setTransform","stroke","strokeRect","strokeText","transform","translate"],gt=[[],[],[]],mt=["a","abbr","address","area","article","audio","b","base","bdi","bdo","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","content","datalist","dd","del","details","dfn","dialog","div","dl","dt","element","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","i","iframe","img","input","ins","kbd","label","legend","li","link","main","mark","menu","menuitem","meta","meter","nav","noscript","ol","optgroup","option","output","p","param","pre","progress","q","rp","rt","rtc","ruby","s","samp","script","section","select","shadow","small","source","span","strong","style","sub","summary","sup","table","tbody","td","template","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr"],yt=["altGlyph","altGlyphDef","altGlyphItem","animate","animateColor","animateMotion","animateTransform","circle","clipPath","color-profile","cursor","defs","desc","discard","ellipse","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","font","font-face","font-face-format","font-face-name","font-face-src","font-face-uri","foreignObject","g","glyph","glyphRef","hatch","hatchpath","hkern","image","line","linearGradient","marker","mask","mesh","meshgradient","meshpatch","meshrow","metadata","missing-glyph","mpath","path","pattern","polygon","polyline","radialGradient","rect","set","solidcolor","stop","style","svg","switch","symbol","textPath","tref","tspan","unknown","use","view","vkern"],wt=["area","base","br","col","command","embed","hr","img","input","keygen","link","meta","param","source","track","wbr"],$t="[a-z][a-z\\d\\-_.:!@#\\$%\\^&*()\\[\\]{}\\\\='\"]*",kt="[^\\u0000-\\u0020\\s\"'>/=]+",bt=[".","+","*","?","(",")","[","]","{","}","<",">","^","$","!","=",":","-","|",",","\\"],xt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){
return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ot=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},Et=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),St=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},jt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},_t=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var a=Object.getPrototypeOf(t);return null===a?void 0:e(a,n,r)}if("value"in i)return i.value;var o=i.get;if(void 0!==o)return o.call(r)},Tt=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},Rt=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n},Ct=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},At=function(){function e(e,t){var n=[],r=!0,i=!1,a=void 0;try{for(var o,u=e[Symbol.iterator]();!(r=(o=u.next()).done)&&(n.push(o.value),!t||n.length!==t);r=!0);}catch(e){i=!0,a=e}finally{try{!r&&u.return&&u.return()}finally{if(i)throw a}}return n}return function(t,n){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),Lt=function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)},Pt={">0":{check:function(e){return e>0},text:"$n argument must be positive!",error:RangeError},">=0":{check:function(e){return e>=0},text:"$n argument must be non-negative!",error:RangeError},"<0":{check:function(e){return e<0},text:"$n argument must be negative!",error:RangeError},"<=0":{check:function(e){return e<=0},text:"$n argument must be non-positive!",error:RangeError},"!!":{check:function(e){return!v(e)},text:"$n argument must be not null or undefined!",error:TypeError},array:{check:t,text:"$n argument must be an array!",error:TypeError},"array||!":{check:function(e){return t(e)||v(e)},text:"$n argument must be an array, or undefined, or null!",error:TypeError},arrayLike:{check:n,text:"$n argument must be array-like!",error:TypeError},"arrayLike||!":{check:function(e){return n(e)||v(e)},text:"$n argument must be array-like, or undefined, or null!",error:TypeError},date:{check:i,text:"$n argument must be a date!",error:TypeError},"date||!":{check:function(e){return i(e)||v(e)},text:"$n argument must be a date, or undefined, or null!",error:TypeError},dateLike:{check:a,text:"$n argument must be date-like!",error:TypeError},"dateLike||!":{check:function(e){return a(e)||v(e)},text:"$n argument must be date-like, or undefined, or null!",error:TypeError},function:{check:c,text:"$n argument must be a function!",error:TypeError},"function||!":{check:function(e){return c(e)||v(e)},text:"$n argument must be a function, or undefined, or null!",error:TypeError},int:{check:l,text:"$n argument must be an integer!",error:TypeError},"int||!":{check:function(e){return l(e)||v(e)},text:"$n argument must be an integer, or undefined, or null!",error:TypeError},intLike:{check:s,text:"$n argument must be integer-like!",error:TypeError},"intLike||!":{check:function(e){return s(e)||v(e)},text:"$n argument must be integer-like, or undefined, or null!",error:TypeError},number:{check:d,text:"$n argument must be a number!",error:TypeError},"number||!":{check:function(e){return d(e)||v(e)},text:"$n argument must be a number, or undefined, or null!",error:TypeError},numberLike:{check:p,text:"$n argument must be number-like!",error:TypeError},"numberLike||!":{check:function(e){return p(e)||v(e)},text:"$n argument must be number-like, or undefined, or null!",error:TypeError},object:{check:g,text:"$n argument must be an object!",error:TypeError},"object||!":{check:function(e){return g(e)||v(e)},text:"$n argument must be an object, or undefined, or null!",error:TypeError},regexp:{check:w,text:"$n argument must be a regular expression!",error:TypeError},"regexp||!":{check:function(e){return w(e)||v(e)},text:"$n argument must be a regular expression, or undefined, or null!",error:TypeError},string:{check:$,text:"$n argument must be a string!",error:TypeError},"string||!":{check:function(e){return $(e)||v(e)},text:"$n argument must be a string, or undefined, or null!",error:TypeError}},Dt=ht.Symbol||{toStringTag:"Symbol.toStringTag",iterator:Math.random().toString(36)},Nt=["1st","2nd","3rd","4th","5th","6th","7th"],Mt=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];Ot(this,e);for(var n={},r=0,i=t.length;r<i;r++){var a=t[r];if(!R(a))throw new Error("Each element of an array must be a single char! (in Alphabet)");n[a]=a}Object.defineProperty(this,"$$",{value:n})}return Et(e,[{key:"add",value:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];for(var r=0,i=t.length;r<i;r++){var a=t[r];if(!R(a))throw new Error("Each argument must be a single char! (in Alphabet#add)");this.$$[a]=a}return this}},{key:"contains",value:function(e){T([e],["string"],"Alphabet#contains");for(var t=this.$$,n=0,r=e.length;n<r;n++)if(!t[e[n]])return!1;return!0}},{key:"delete",value:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];for(var r=0,i=t.length;r<i;r++){var a=t[r];if(!R(a))throw new Error("Each argument must be a single char! (in Alphabet#delete)");delete this.$$[a]}return this}},{key:"get",value:function(){return Object.keys(this.$$)}},{key:"token",value:function e(t){T([t],[["intLike",">0"]],"Alphabet#token");for(var n=Object.keys(this.$$),r=n.length,e="",i=0;i<t;i++)e+=n[Math.floor(Math.random()*r)];return e}}]),e}();j(Mt.prototype,St({},Dt.toStringTag,"Alphabet"));var Ut=function(e){function n(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],r=e.$$,i=r.mode,a=r.default,o=r.cases,u=O(o,function(e){var n=e.value,r=e.case;if("boolean"===i&&r||"equals"===i&&r==t||"strictEquals"===i&&r===t||"call"===i&&r(t))return{case:r,value:n}});return b(u)&&(u={value:a}),c(u.value)?(n=_(n,!0),n.push(t,u.case),u.value.apply(null,n)):u.value}var t,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"equals",a=arguments[2];Ot(this,n);var o=Ct(this,(n.__proto__||Object.getPrototypeOf(n)).call(this));$(r)&&(b(arguments[1])||(a=i),i=r,r={});var u=[];return O(r,function(e,t){u.push({case:t,value:e})}),Object.defineProperty(e,"$$",{value:{cases:u,mode:i,default:a}}),Object.setPrototypeOf(e,n.prototype),t=e,Ct(o,t)}return Tt(n,e),Et(n,[{key:"case",value:function(e,n){var r=this;return t(e)||(e=[e]),O(e,function(e){r.$$.cases.push({case:e,value:n})}),this}},{key:"default",value:function(e){return this.$$.default=e,this}},{key:"mode",value:function(e){return this.$$.mode=e,this}}]),n}(Function);j(Ut.prototype,St({},Dt.toStringTag,"Switcher"));var Bt=A("call",function(e){return e}).case(function(e){return new qt(e)===e},function(e){return new(Object.getPrototypeOf(e).constructor)(new qt(e.$).deepClone().$)}).case(o,function(e,t){return e.clone(t)}).case(i,function(e){return new Date(e)}).case(w,function(e){return new RegExp(e.source,e.toString().match(/[gimuy]*$/)[0])}).case(t,function(){return[]}).case(m,function(){return{}}),qt=function(){function r(e){return Ot(this,r),e instanceof r?e:void Object.defineProperty(this,"$",{value:e})}return Et(r,[{key:"assign",value:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var i=this.$;return O(i&&arguments,function(e){O(new r(e).$,function(e,t){i[t]=e})}),this}},{key:"average",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return T([e],["function||!"],"Super#average"),this.sum(e)/this.count}},{key:"call",value:function(e){T([e],["function"],"Super#call");for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return e.apply(this,n)}},{key:"clone",value:function e(){var t=this.$,e=Bt(t,[t,!1]);return e!==t&&O(t,function(t,n){e[n]=t}),new this.constructor(e)}},{key:"create",value:function(e){return x(y(this.$)?void 0:Object.create(this.$,e))}},{key:"deepAssign",value:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=this.$;return y(r)?this:(O(arguments,function(e){P(r,e)}),this)}},{key:"deepClone",value:function(){return new this.constructor(D(this.$))}},{key:"deepEquals",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return N(this.$,e,!1)}},{key:"deepEvery",value:function(e,t){return 1!==arguments.length||c(e)?1===arguments.length?t=1/0:arguments.length||(t=1/0,e=Boolean):(t=e,e=Boolean),T([e,t],["function",["numberLike",">0"]],"Super#deepEvery"),t=Number(t),M(this.$,e,t,[{key:null,value:this.$}])}},{key:"deepFilter",value:function(e,t){1!==arguments.length||c(e)?1===arguments.length?t=1/0:arguments.length||(t=1/0,e=Boolean):(t=e,e=Boolean),T([e,t],["function",["numberLike",">0"]],"Super#deepFilter");var n=U(this.$,e,t,[{key:null,value:this.$}]);return x(v(n)?n:n||{})}},{key:"deepFind",value:function(e,t){return 1!==arguments.length||c(e)?1===arguments.length?t=1/0:arguments.length||(t=1/0,e=Boolean):(t=e,e=Boolean),T([e,t],["function",["numberLike",">0"]],"Super#deepFind"),B(this.$,e,t,[{key:null,value:this.$}])}},{key:"deepForEach",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1/0;return T([e,t],["function",["numberLike",">0"]],"Super#deepForEach"),t=Number(t),q(this.$,e,t,[{key:null,value:this.$}]),this}},{key:"deepForEachEntry",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1/0;return T([e,t],["function",["numberLike",">0"]],"Super#deepForEach"),t=Number(t),I(this.$,e,t,[{key:null,value:this.$}]),this}},{key:"deepFreeze",value:function(){return F(this.$),this}},{key:"deepMap",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1/0;return T([e,t],["function",["numberLike",">0"]],"Super#deepMap"),t=Number(t),x(W(this.$,e,t,[{key:null,value:this.$}]))}},{key:"deepReduce",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1/0,n=arguments[2];T([e,t],["function",["numberLike",">0"]],"Super#deepReduce"),t=Number(t);var r=this.$,i=[{key:null,value:this.$}];return arguments.length<3?H(r,e,t,!1,void 0,i).IV:H(r,e,t,!1,{IV:n},i).IV}},{key:"deepSome",value:function(e,t){return 1!==arguments.length||c(e)?1===arguments.length?t=1/0:arguments.length||(t=1/0,e=Boolean):(t=e,e=Boolean),T([e,t],["function",["numberLike",">0"]],"Super#deepSome"),t=Number(t),z(this.$,e,t,[{key:null,value:this.$}])}},{key:"deepStrictEquals",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return N(this.$,e,!0)}},{key:"define",value:function(e,t){return arguments.length>=2&&(e=St({},e,t)),e=new r(e).$,g(this.$)&&Object.defineProperties(this.$,e),this}},{key:"delete",value:function(){for(var e=this.$,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return O(e&&n,function(t){delete e[t]}),this}},{key:"equals",value:function(e){var t=this.$;return e=new r(e).$,t==e||f(t)&&f(e)}},{key:"every",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Boolean;return T([e],["function"],"Super#every"),O(this.$,function(t,n,r){if(!e(t,n,r))return!1})!==!1}},{key:"filter",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Boolean;T([e],["function"],"Super#filter");var t=this.$,r=n(t),i=r?[]:v(t)?t:{};return O(t,function(n,a){e(n,a,t)&&(r?i.push(n):i[a]=n)}),x(i)}},{key:"find",value:function(e){return T([e],["function"],"Super#find"),O(this.$,function(t,n,r){if(e(t,n,r))return{key:n,value:t}})||null}},{key:"forEach",value:function(e){return T([e],["function"],"Super#forEach"),O(this.$,function(t,n,r){e(t,n,r)}),this}},{key:"freeze",value:function(){return Object.freeze(this.$),this}},{key:"get",value:function(e,t){arguments.length>=2&&(e=St({},e,t));var n=this.$;return O(g(n)&&new r(e).$,function(e,t){Object.defineProperty(n,t,{get:e})}),this}},{key:"has",value:function(e){var t=this.$;return!!g(t)&&e in t}},{key:"hasOwn",value:function(e){var t=this.$;return!!g(t)&&{}.hasOwnProperty.call(t,e)}},{key:"instanceof",value:function(e){return this.$ instanceof e}},{key:"isFrozen",value:function(){return Object.isFrozen(this.$)}},{key:"json",value:function(e,n){return 1!==arguments.length||c(e)||t(e)||[].unshift.call(arguments,null),[].unshift.call(arguments,this.$),JSON.stringify.apply(JSON,arguments)}},{key:"keyOf",value:function(e){var t=O(this.$,function(t,n){if(t==e||f(t)&&f(e))return n});return b(t)?null:t}},{key:"keyOfStrict",value:function(e){var t=O(this.$,function(t,n){if(t===e||f(t)&&f(e))return n});return b(t)?null:t}},{key:"keys",value:function(){var e=this.$;return x(g(e)?Object.keys(e):[])}},{key:"map",value:function(e){T([e],["function"],"Super#map");var t=this.$,r=n(t)?[]:h(t)?null:{};return O(t,function(n,i){r[i]=e(n,i,t)}),x(r)}},{key:"max",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return T([e],["function||!"],"Super#max"),this.object(function(t,n,r,i){var a=Number(e?e(n,r,i):n);a>t.value&&(t.key=r,t.value=a)},{key:null,value:-(1/0)}).$}},{key:"min",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return T([e],["function||!"],"Super#min"),this.object(function(t,n,r,i){var a=Number(e?e(n,r,i):n);a<t.value&&(t.key=r,t.value=a)},{key:null,value:1/0}).$}},{key:"object",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return T([e],["function"],"Super#object"),O(this.$,function(n,r,i){e(t,n,r,i)}),x(t)}},{key:"prop",value:function(e,t){return arguments.length<=1&&$(e)?this.$?this.$[e]:void 0:(arguments.length>=2&&(e=St({},e,t)),this.assign(e))}},{key:"propertyDescriptor",value:function(e){var t=this.$;return g(t)?Object.getOwnPropertyDescriptor(t,e):void 0}},{key:"propertyNames",value:function(){var e=this.$;return x(g(e)?Object.getOwnPropertyNames(e):[])}},{key:"propertySymbols",value:function(){var e=this.$;return x(g(e)?Object.getOwnPropertySymbols(e):[])}},{key:"proto",value:function(e){var t=this.$,n=!v(t);return arguments.length?(n&&(g(e)||h(e))&&Object.setPrototypeOf(t,e),this):n?new r(Object.getPrototypeOf(t)):new r}},{key:"reduce",value:function(e,t){T([e],["function"],"Super#reduce");var n=this.$,r=void 0;return 1===arguments.length&&O(n,function(e,n){return r=n,t=e,!0}),O(n,function(i,a){a!==r&&(t=e(t,i,a,n))}),t}},{key:"set",value:function(e,t){arguments.length>=2&&(e=St({},e,t));var n=this.$;return O(g(n)&&new r(e).$,function(e,t){Object.defineProperty(n,t,{set:e})}),this}},{key:"some",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Boolean;return T([e],["function"],"Super#some"),O(this.$,function(t,n,r){if(e(t,n,r))return!0})||!1}},{key:"strictEquals",value:function(e){var t=this.$;return e=new r(e).$,t===e||f(t)&&f(e)}},{key:"sum",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return T([e],["function||!"],"Super#sum"),this.reduce(function(t,n,r,i){return t+Number(e?e(n,r,i):n)},0)}},{key:"toJSON",value:function(){return this.$}},{key:"value",value:function(e,t){arguments.length>=2&&(e=St({},e,t));var n=this.$;return O(g(n)&&new r(e).$,function(e,t){Object.defineProperty(n,t,{value:e})}),this}},{key:"values",value:function(){var e=[];return O(this.$,function(t){e.push(t)}),x(e)}},{key:"word",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return T([e],["function||!"],"Super#word"),this.reduce(function(t,n,r,i){return t+String(e?e(n,r,i):n)},"")}},{key:"count",get:function(){var e=this.$;return g(e)?n(e)?e.length:Object.keys(e).length:0}},{key:"toStringTag",get:function(){return e(this.$)}},{key:"type",get:function(){return xt(this.$)}}],[{key:"addStaticProperties",value:function(e,t){return arguments.length>=2&&(e=St({},e,t)),j(this,e),this}},{key:"addInstanceProperties",value:function(e,t){return arguments.length>=2&&(e=St({},e,t)),j(this.prototype,e),this}}]),r}();j(qt.prototype,St({},Dt.toStringTag,"Super")),gt[0].push({check:function(){return!0},cls:qt});var It={},Ft=Dt.iterator,Wt=function(){function e(t){function n(t){"pending"===s.status&&!function(){s.status="rejected",s.value=t;for(var n=0,r=u.length;n<r;n++)s.handled=!0,u[n](t);var i=e.onUnhandledRejection,a=e.onError;c(a)&&a(t),setTimeout(function(){!s.handled&&c(i)&&i(t)},1)}()}function r(e){if("pending"===s.status){if(e&&c(e.then))return e.then(function(e){r(e)},function(e){n(e)});s.status="fulfilled",s.value=e;for(var t=0,i=o.length;t<i;t++)s.handled=!0,o[t](e)}}if(Ot(this,e),!c(t))throw new TypeError("Promise resolver "+{}.toString.call(t)+" is not a function");var i=void 0,a=void 0,o=[],u=[],l=this,s={handled:!1,get status(){return i},set status(e){i=e,l.status=e},get value(){return a},set value(e){a=e,l.value=e}};s.status="pending",s.value=void 0,j(this.$$={},{"get/set handled":{get:function(){return s.handled},set:function(e){e===It&&(s.handled=!0)}},handle:function(e,t,n,r,i){if(i===It){var a=c(t)?function(e){try{n(t(e))}catch(e){r(e)}}:null;"resolve"===e?o.push(a||function(e){return n(e)}):"reject"===e&&u.push(a||function(e){return r(e)})}},"get status":function(){return s.status},"get value":function(){return s.value}});try{t(r,n)}catch(e){n(e)}}return Et(e,[{key:"abort",value:function(){}},{key:"catch",value:function(e){return this.then(null,e)}},{key:"finally",value:function(t){var n=c(t);return this.then(function(r){return e.resolve(n?t(r,!0):0).then(function(){return r})},function(r){return e.resolve(n?t(r,!1):0).then(function(){return e.reject(r)})})}},{key:"then",value:function(t,n){var r=this.$$;if("pending"===r.status)return new e(function(e,i){r.handle("reject",n,e,i,It),r.handle("resolve",t,e,i,It)});r.handled=It;var i=r.value,a=void 0,o=void 0;if("fulfilled"===r.status?(a="resolve",o=t):(a="reject",o=n),!c(o))return e[a](i);try{return e.resolve(o(i))}catch(t){return e.reject(t)}}}],[{key:"all",value:function(t){var n=[],r=0;if(t[Ft])return t=t[Ft](),new e(function(i,a){for(var o=void 0,u=0,c=function(){var t=e.resolve(o.value);r++,function(e){t.then(function(t){r--,n[e]=t,setTimeout(function(){o.done&&!r&&i(n)},1)},a)}(u++)};!(o=t.next()).done;)c();if(!u)return e.resolve([])});var i=t.length;return i?(r=i,new e(function(a,o){for(var u=function(i){var u=e.resolve(t[i]);u.then(function(e){r--,n[i]=e,r||a(n)},o)},c=0;c<i;c++)u(c)})):e.resolve([])}},{key:"race",value:function(t){return t[Ft]?(t=t[Ft](),new e(function(e,n){for(var r=void 0;!(r=t.next()).done;)r.value.then(e,n)})):new e(function(e,n){for(var r=0,i=t.length;r<i;r++)t[r].then(e,n)})}},{key:"reject",value:function(t){return new e(function(e,n){n(t)})}},{key:"resolve",value:function(t){return t&&c(t.then)?t:new e(function(e){e(t)})}}]),e}();Wt.onError=null,Wt.onUnhandledRejection=console.error.bind(console,"%s %o","Uncaught (in promise)"),j(Wt.prototype,St({},Dt.toStringTag,"Promise"));var Ht=function(e){function t(){function e(){var t=this,n=arguments;if(++e.$$.called<e.$$.canBeCalled){var i=function(){var i=e.$$,a=i.before,o=i.after,u=i.sync,c=i.contextLocked,l=e.$$,s=l.context,f=l.args,h=void 0;if(s=c?s:s||t,f=f.concat(_(n)),u)return O(a,function(t){f=t.call(s,_(f),e)}),h=r.apply(s,_(f)),O(o,function(t){h=t.call(s,h,e)}),{v:h};var v=Wt.resolve(f);return O(a,function(t){v=v.then(function(n){return t.call(s,_(n),e)})}),v=v.then(function(e){return r.apply(s,_(e))}),O(o,function(t){v=v.then(function(n){return t.call(s,n,e)})}),{v:v}}();if("object"===("undefined"==typeof i?"undefined":xt(i)))return i.v}}var n,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){};Ot(this,t);var i=Ct(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return Object.defineProperty(e,"$$",{value:{after:[],args:[],argsLocked:[],before:[],called:0,canBeCalled:1/0,context:null,contextLocked:!1,sync:!0}}),Object.defineProperty(e,"$",{value:r}),Object.setPrototypeOf(e,t.prototype),n=e,Ct(i,n)}return Tt(t,e),Et(t,[{key:"after",value:function e(t){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];T([t],["function"],"Func#after");var e=this.$$.after;return n?e.push(t):e.unshift(t),this}},{key:"apply",value:function(e,t){return function(){}.apply.apply(this,arguments)}},{key:"async",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return this.$$.sync=!e,this}},{key:"before",value:function e(t){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];T([t],["function"],"Func#before");var e=this.$$.before;return n?e.unshift(t):e.push(t),this}},{key:"bind",value:function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return this.bindContext(e).bindArgs(n)}},{key:"bindArgs",value:function(e){var t=this.$$;return t.args=t.args.concat(_(e)),this}},{key:"bindContext",value:function(e){var t=this.$$;return t.contextLocked||(t.context=e),this}},{key:"call",value:function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return function(){}.call.apply(this,arguments)}},{key:"canBeCalled",value:function(e){return this.$$.canBeCalled=e,this}},{key:"limitArgsTo",value:function(e){return this.before(function(t){return t.slice(0,e)},!1)}},{key:"lock",value:function(e,t){return this.lockContext(e).lockArgs(t)}},{key:"lockArgs",value:function(e){var t=this.$$;return t.args=t.argsLocked=t.argsLocked.concat(_(e)),this}},{key:"lockContext",value:function(e){var t=this.$$;return t.contextLocked||(t.context=e,t.contextLocked=!0),this}},{key:"timing",value:function(e){return e=arguments.length?String(e):this.$.name||"anonymous",this.before(function(t){return console.time(e),t},!1),this.after(function(t){return console.timeEnd(e),t},!1),this}},{key:"toString",value:function(){return function(){}.toString.call(this.$)}},{key:"unbind",value:function(){return this.unbindContext().unbindArgs()}},{key:"unbindArgs",value:function(){var e=this.$$;return e.args=e.argsLocked,this}},{key:"unbindContext",value:function(){var e=this.$$;return e.contextLocked||(e.context=null),this}},{key:"called",get:function(){return this.$$.called}}]),t}(qt);j(Ht.prototype,St({},Dt.toStringTag,"Func")),gt[1].push({check:c,cls:Ht});var zt=Math.PI/180,Vt=180/Math.PI,Gt=Math.LN2,Jt=Math.LN10,Qt=function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return Ot(this,t),Ct(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,+e))}return Tt(t,e),Et(t,[{key:"acos",value:function(e){return(e?Vt:1)*Math.acos(this.$)}},{key:"asin",value:function(e){return(e?Vt:1)*Math.asin(this.$)}},{key:"atan",value:function(e){return(e?Vt:1)*Math.atan(this.$)}},{key:"cos",value:function(e){return Math.cos((e?zt:1)*this.$)}},{key:"interval",value:function(e){function t(){return i=!0,clearTimeout(a)}var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];T([e],["function"],"Num#interval"),e=new Ht(e).bindContext({abort:t}),n=_(n);var r=this.$,i=void 0,a=setTimeout(function t(){i||(e.apply(null,n),i||(a=setTimeout(t,r)))},0);return t}},{key:"log",value:function(e){return Math.log(e)/Math.log(this.$)}},{key:"pow",value:function(e){return Math.pow(this.$,e)}},{key:"root",value:function(e){return Math.pow(this.$,1/e)}},{key:"sin",value:function(e){return Math.sin((e?zt:1)*this.$)}},{key:"tan",value:function(e){return Math.tan((e?zt:1)*this.$)}},{key:"timeout",value:function e(t){var n=this,e=void 0,r=void 0,i=new Wt(function(i,a){r=a,e=setTimeout(i,n.$,t)});return i.abort=function(){return clearTimeout(e),r(new Error("Timeout was aborted")),this},i}},{key:"toBase",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10;return this.$.toString(e)}},{key:"toExponential",value:function(e){return this.$.toExponential(e)}},{key:"toFixed",value:function(e){return this.$.toFixed(e)}},{key:"toPrecision",value:function(e){return this.$.toPrecision(e)}},{key:"valueOf",value:function(){return Number(this.$)}},{key:"abs",get:function(){return Math.abs(this.$)}},{key:"acosh",get:function(){var e=this.$;return Math.log(e+Math.sqrt(e*e-1))}},{key:"asinh",get:function(){var e=this.$;return Math.log(e+Math.sqrt(e*e+1))}},{key:"atanh",get:function(){var e=this.$;return Math.log((1+e)/(1-e))/2}},{key:"cbrt",get:function(){var e=Math.pow(Math.abs(this.$),1/3);return this.$>0?e:-e}},{key:"ceil",get:function(){return Math.ceil(this.$)}},{key:"cosh",get:function(){var e=this.exp;return(e+1/e)/2}},{key:"cube",get:function(){return this.$*this.$*this.$}},{key:"exp",get:function(){return Math.exp(this.$)}},{key:"floor",get:function(){return Math.floor(this.$)}},{key:"ln",get:function(){return Math.log(this.$)}},{key:"log2",get:function(){return this.ln/Gt}},{key:"log10",get:function(){return this.ln/Jt}},{key:"round",get:function(){return Math.round(this.$)}},{key:"sign",get:function(){var e=this.$;return e?e>0?1:-1:e}},{key:"sinh",get:function(){var e=this.exp;return(e-1/e)/2}},{key:"sq",get:function(){return this.$*this.$}},{key:"sqrt",get:function(){return Math.sqrt(this.$)}},{key:"tanh",get:function(){var e=this.$;if(!u(e))return this.sign;var t=Math.exp(2*e);return(t-1)/(t+1)}}]),t}(qt);j(Qt.prototype,St({},Dt.toStringTag,"Num")),gt[1].push({check:d,cls:Qt});var Zt=function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return Ot(this,t),Ct(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,_(e instanceof t?e.$:e)))}return Tt(t,e),Et(t,[{key:"concat",value:function(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];var i=_(this.$,!0);return O(arguments,function(e){return e=new qt(e).$,n(e)&&!$(e)?void O(e,function(e){i.push(e)}):void i.push(e)}),new this.constructor(i)}},{key:"indexOf",value:function(e){var t=this.keyOf(e);return null===t?-1:Number(t)}},{key:"indexOfStrict",value:function(e){var t=this.keyOfStrict(e);return null===t?-1:Number(t)}},{key:"join",value:function(e){return this.$.join.apply(this.$,arguments)}},{key:"pop",value:function(){return this.$.pop()}},{key:"push",value:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.$.push.apply(this.$,arguments),this}},{key:"random",value:function(){return this.$[Y(0,this.$.length-1)]}},{key:"reverse",value:function(){return this.$.reverse(),this}},{key:"shift",value:function(){return this.$.shift()}},{key:"shuffle",value:function(){var e=this.$.length;return this.forEach(function(t,n,r){var i=n+Math.floor((e-n)*Math.random());r[n]=r[i],r[i]=t})}},{key:"slice",value:function(e,t){return new this.constructor(this.$.slice.apply(this.$,arguments))}},{key:"sort",value:function(e){return T([e],["function||!"],"Arr#sort"),this.$.sort(e),this}},{key:"sortAsc",value:function(){return this.sort(X)}},{key:"sortDesc",value:function(){return this.sort(function(e,t){return X(t,e)})}},{key:"splice",value:function(e,n){for(var r=arguments.length,i=Array(r>2?r-2:0),a=2;a<r;a++)i[a-2]=arguments[a];return new t(this.$.splice.apply(this.$,arguments))}},{key:"string",value:function(){return this.join("")}},{key:"unshift",value:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.$.unshift.apply(this.$,arguments),this}},{key:"first",get:function(){return this.$[0]}},{key:"last",get:function(){var e=this.$;return e[e.length-1]}},{key:"length",get:function(){return this.$.length}}]),t}(qt);j(Zt.prototype,St({},Dt.toStringTag,"Arr")),gt[1].push({check:n,cls:Zt});var Yt={buffer:"ArrayBuffer",binary:"BinaryString",dataURL:"DataURL",text:"Text"},Xt=ht,Kt=Xt.URL,en=function(e){function t(){return Ot(this,t),Ct(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return Tt(t,e),Et(t,[{key:"readAs",value:function(e,t){var n=this;if(!Yt[e])throw new Error("1st argument must be one of following values: buffer, binary, dataURL, text");var r=new FileReader,i=void 0;c(t)&&(r.onprogress=function(e){t(e,this)});var a=new Wt(function(t,a){i=a,r.onerror=function(e){var t=e.target;r&&a(t.error)},r.onload=function(e){var n=e.target;t(n.result)},r["readAs"+Yt[e]](n.$)});return a.abort=function(){return i(new Error("Reading was aborted")),r.abort(),r=null,this},a}},{key:"saveAs",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"download",t=document.createElement("a");return t.href=this.dataURL,t.setAttribute("download",e),t.click(),this}},{key:"dataURL",get:function(){return Kt.createObjectURL(this.$)}}]),t}(qt);j(en.prototype,St({},Dt.toStringTag,"BlobObject")),gt[1].push({check:function(t){return/^(Blob|File)$/.test(e(t))},cls:en});var tn={"&":"&amp;","<":"&lt;",">":"&gt;"},nn=new RegExp(new qt(bt).word(function(e){return"\\"+e+"|"}).replace(/\|$/,""),"g"),rn=function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return Ot(this,t),Ct(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,""+e))}return Tt(t,e),Et(t,[{key:"capitalizeFirst",value:function(){var e=this.$;return new t(e.slice(0,1).toUpperCase()+e.slice(1))}},{key:"endsWith",value:function(e,n){return arguments.length<2&&(n=this.$.length),this.slice(0,n).revert().startsWith(new t(e).revert().$)}},{key:"escapeHTML",value:function(){var e=this.$;return O(tn,function(t,n){e=e.replace(new RegExp(n,"g"),t)}),new t(e)}},{key:"escapeRegExp",value:function(){return this.replace(nn,"\\$&")}},{key:"in",value:function(e){return!!g(e)&&this.$ in e}},{key:"indexOf",value:function(e,t){return this.$.indexOf.apply(this.$,arguments)}},{key:"lastIndexOf",value:function(e,t){return this.$.lastIndexOf.apply(this.$,arguments)}},{key:"match",value:function(e){return x(this.$.match.apply(this.$,arguments))}},{key:"repeat",value:function(e){T([e],[["intLike",">=0"]],"Str#repeat"),e=+e;for(var n=this.$,r="",i=0;i<e;i++)r+=n;return new t(r)}},{key:"replace",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return new t(this.$.replace(e,n))}},{key:"replaceString",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return e=new qt(e).$,T([e],["string"],"Str#replaceString"),new t(this.$.split(e).join(n))}},{key:"revert",value:function(){for(var e=this.$,n="",r=e.length-1;r>=0;r--)n+=e[r];return new t(n)}},{key:"search",value:function(e){return T([e],["regexp"]),this.$.search.apply(this.$,arguments)}},{key:"slice",value:function(e,n){return new t(this.$.slice.apply(this.$,arguments))}},{key:"split",value:function(e){return x(this.$.split.apply(this.$,arguments))}},{key:"startsWith",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return this.$.indexOf.apply(this.$,arguments)===t}},{key:"substr",value:function(e,n){return new t(this.$.substr.apply(this.$,arguments))}},{key:"substring",value:function(e,n){return new t(this.$.substring.apply(this.$,arguments))}},{key:"toCamelCase",value:function(){return new t(ne(this.$).replace(/[\s\-_.]+/g,"-").replace(/-[^-]/g,function(e){return e[1].toUpperCase()}).replace(/^[\S]/,function(e){return e.toLowerCase()}))}},{key:"toCapitalCase",value:function(){return new t(ne(this.$).replace(/[\s\-_.]+/g," ").replace(/[\S]/g,function(e){return e.toLowerCase()===e?e:" "+e}).replace(/\s[\S]/g,function(e){return e.toUpperCase()}).replace(/\s+/g," ").replace(/^\s/,"").replace(/^[\S]/,function(e){
return e.toUpperCase()}))}},{key:"toDotCase",value:function(){return new t(ne(this.$).replace(/[\s\-_.]+/g,".").replace(/[^.]/g,function(e){return e.toLowerCase()===e?e:"."+e}).replace(/\.+/g,".").replace(/^\./,"").toLowerCase())}},{key:"toHyphenCase",value:function(){return new t(ne(this.$).replace(/[\s\-_.]+/g,"-").replace(/[^-]/g,function(e){return e.toLowerCase()===e?e:"-"+e}).replace(/-+/g,"-").replace(/^-/,"").toLowerCase())}},{key:"toLowerCase",value:function(){return new t(this.$.toLowerCase())}},{key:"toSnakeCase",value:function(){return new t(ne(this.$).replace(/[\s\-_.]+/g,"_").replace(/[^_]/g,function(e){return e.toLowerCase()===e?e:"_"+e}).replace(/_+/g,"_").replace(/^_/,"").toLowerCase())}},{key:"toSpaceCase",value:function(){return new t(ne(this.$).replace(/[\s\-_.]+/g," ").replace(/[\S]/g,function(e){return e.toLowerCase()===e?e:" "+e}).replace(/\s+/g," ").replace(/^\s/,"").toLowerCase())}},{key:"toString",value:function(){return this.$}},{key:"toUpperCase",value:function(){return new t(this.$.toUpperCase())}},{key:"trim",value:function(){return new t(this.$.replace(/^[\s\ufeff\u00a0]+|[\s\ufeff\u00a0]+$/g,""))}},{key:"trimLeft",value:function(){return new t(this.$.replace(/^[\s\ufeff\u00a0]+/,""))}},{key:"trimRight",value:function(){return new t(this.$.replace(/[\s\ufeff\u00a0]+$/,""))}},{key:"length",get:function(){return this.$.length}}]),t}(qt);j(rn.prototype,St({},Dt.toStringTag,"Str")),gt[2].push({check:$,cls:rn});var an="Please, submit an issue at https://github.com/dwaynejs/dwayne/issues.",on=new qt({"tag-open":new RegExp("<("+$t+")\\s*","i"),"tag-close":ae($t),comment:/<!--((?:-[^\->]|[^\->])(?:-?[^-])*[^-]?|)-->/}),un=/^(\/?)>/,cn=new RegExp("^("+kt+")(?:\\s*=\\s*('[^']*'|\"[^\"]*\"|[^\\s\"'`<>=]+))?\\s*"),ln=document.createElement("div"),sn=A("strictEquals",function(e){return e}).case("tag-open",function(e,t){var n=t,r=n.value,i=n.selfClosing;return t={name:r,attrs:new qt(t.attrs).map(function(e){return ue(e)}).$,parent:e,children:new Zt([])},e.children.push(t),i||wt.indexOf(r)!==-1||(e=t),e}).case("tag-close",function(e,t){return e.name===t.value&&(e=e.parent),e}).case(["comment","text"],function(e,t,n,r){var i={name:"#"+r,parent:e,value:t.value};return"text"===r&&"script"!==e.name&&"style"!==e.name&&(i.value=ue(i.value),n&&(i.value=new rn(i.value).trim().$)),n&&/^\s*$/.test(i.value)||e.children.push(i),e}),fn=A("strictEquals",!1).case(["title","textarea","style","script"],!0),hn=function e(t){Ot(this,e),this.index=t},vn=function(e){function t(){var e,n,r,i;Ot(this,t);for(var a=arguments.length,o=Array(a),u=0;u<a;u++)o[u]=arguments[u];return n=r=Ct(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(o))),r.type="PARSING_ERROR",i=n,Ct(r,i)}return Tt(t,e),t}(Error),dn=function(e,t){function n(){throw new vn("Unexpected parsing error near index "+oe(i,o)+". "+an)}t=!!t;for(var r=new Zt([]),i=e,a=void 0,o=0,u={name:null,children:r};e.length;){try{a=ie(e,u)}catch(e){throw e instanceof hn||n(),new vn("Parsing error near index "+oe(i,o+e.index))}var c=a,l=c.type,s=c.attrs,f=c.selfClosing,h=c.index,v=c.value;o+=h,h||n();var d={type:l,value:v};"tag-open"===l&&(d.attrs=s,d.selfClosing=f),u=sn(d.type,[u,d,t]),e=e.slice(h)}return r},pn=ht.document,gn=pn.createElement("div"),mn=/(,| ) */,yn=new qt(Node.prototype).propertyDescriptor("textContent")?"textContent":"innerText",wn={},$n={},kn=new Zt([]),bn="input, select, textarea, datalist, keygen, output",xn=(V("click"),"http://www.w3.org/2000/svg"),On="http://www.w3.org/2000/xmlns/",En="http://www.w3.org/1999/xlink",Sn="http://www.w3.org/1999/xhtml",jn=A("call",function(e,t){var n="svg"===t?xn:e.prop("namespaceURI")||pn.documentElement.namespaceURI||Sn;return pn.createElementNS(n,t)}).case(function(e){return"#comment"===e},function(){return pn.createComment("")}).case(function(e){return"#text"===e},function(){return pn.createTextNode("")}),_n=A("strictEquals","href").case(["img","script","iframe","audio","video"],"src").case("form","action"),Tn=A("call",function(e){return e}).case($,function(e){return function(t){return new Ln(t).is(e)}}).case([t,le],function(e){return e=new Zt(e),function(t){return e.indexOf(t)!==-1}}),Rn=A("strictEquals",0).case("padding-box",function(e){return e}).case("border-box",function(e,t){return e+t}),Cn=A("strictEquals",function(e,t){return e+t}).case("padding-box",function(e){return e}).case("border-box",0),An=A("call",null).case(function(e){return"xmlns"===e||"xmlns:xlink"===e},function(e){return"svg"===e.name?On:null}).case(function(e){return/^xlink:\w/.test(e)},function(e){return e.closest("svg").length?En:null}),Ln=function(t){function r(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];Ot(this,r);var t=Ct(this,(r.__proto__||Object.getPrototypeOf(r)).call(this,function(){var t=e;return n(t)&&(se(t)||fe(t)||he(t)||o(t)||de(t)||ve(t))&&(t=[t]),new Zt(_(new qt(t).$,!0)).object(function(e,t){return e.indexOf(t)===-1&&(o(t)||se(t)||fe(t)||he(t)||de(t)||ve(t))?e.push(t):void(le(t)&&e.push.apply(e,t.$))},[]).$}()));return t.$$=e,t.forEach(me),t}return Tt(r,t),Et(r,[{key:"add",value:function(){for(var e=this,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return O(arguments,function(t){ce(t).forEach(function(t){e.indexOf(t)===-1&&e.push(t)})}),this}},{key:"addClass",value:function(){for(var e=arguments,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return this.forEach(function(t){var n=t.classList;O(o(t)&&e,function(e){return n.add(e)})})}},{key:"addComment",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return this.forEach(function(n){o(n)&&n.insertAdjacentHTML(t?"beforeend":"afterbegin","<!--"+e+"-->")})}},{key:"addHTML",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return this.forEach(function(n){o(n)&&n.insertAdjacentHTML(t?"beforeend":"afterbegin",e)})}},{key:"addRule",value:function(e,t,n){return this.some(function(r){if("style"===ge(r)){var i=r.sheet,a=i.cssRules.length,o=new qt(n).word(function(e,t){return new rn(t).toHyphenCase()+": "+e+";\n"});return i.insertRule(t+" {"+(o&&"\n")+o+"}",a),i.cssRules[a].dwayneData={name:e},!0}}),this}},{key:"addText",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return this.forEach(function(n){new r(pn.createTextNode(e)).into(n,t)})}},{key:"apply",value:function(){for(var e=this,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];var i=void 0,a=void 0,o=void 0,u=void 0,l=void 0,s=void 0;return new rn(new Zt(arguments).join(" ")).split(/(\s+)/).forEach(function(t){if(!i){if(l=t.slice(0,1),o=vt[l],s=1,o&&!c(o)&&(o=o[t.slice(1,2)],s=2),/^\s+$/.test(t)||!o)return;if(u=t.slice(s).match(/^[^()]+/),!u&&"*"!==l&&"&"!==l)return;i={name:u?u[0]:"",args:t.slice(s+(u?u[0]:"").length),callback:o},a=!0}a||(i.args+=t),i.args&&!/^\([\s\S]+\)$/.test(i.args)||(i.callback(e,i.name,i.args.replace(/^\(|\)$/g,"")),i=null),a=!1}),this}},{key:"attr",value:function(e,t){var n=pe(this);if(!arguments.length)return new qt(n.attributes).object(function(e,t){e[t.name]=t.value});if(arguments.length<=1&&$(e)){var i=An(e,[new r(n)]);return h(i)?n.getAttribute(e):n.getAttributeNS(i,e)}return arguments.length>=2&&(e=St({},e,t)),this.forEach(function(t,n){o(t)&&new qt(e).forEach(function(e,i){if(e=c(e)?e(new r(t).attr(i),t,n):e,v(e))return new r(t).removeAttr(i);var a=An(i,[new r(t)]);h(a)?t.setAttribute(i,e):t.setAttributeNS(a,i,e)})})}},{key:"blob",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return new Wt(function(t,n){var i=e.first(),a=i.name;return"img"!==a&&"canvas"!==a&&n(new Error("First element in the set isn't an image or a canvas! (Elem#blob)")),"canvas"===a?t(i):void i.load().then(function(){if(i.isBroken())return n(new Error("The image is broken! (Elem#blob)"));var e=new r(pn).canvas(),a=i.width(),o=i.height();e.width(a).height(o).drawImage(i.$[0],0,0),t(e)})}).then(function(e){var n=e.dataURL(),r=atob(n.split(",")[1]),i=r.length,a=new ArrayBuffer(i),o=new Uint8Array(a);return ee(i,function(e){o[e]=r.charCodeAt(e)}),te(a,t)})}},{key:"blur",value:function(){return this.forEach(function(e){o(e)&&e.blur()})}},{key:"calcCSS",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return getComputedStyle(pe(this),e)}},{key:"changeRule",value:function(e,t){return this.some(function(n){if("style"===ge(n)){var i=new Zt(n.sheet.cssRules).find(function(t){return t.dwayneData&&t.dwayneData.name===e})||{},a=i.value;if(a)return new r(a).css(t),!0}}),this}},{key:"child",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return l(e)&&e>=0?this.children().elem(e):ce(e).into(this,t)}},{key:"children",value:function(){return new r(this.length?this.$[0].childNodes:[])}},{key:"class",value:function(e){return arguments.length?this.forEach(function(t){o(t)&&(t.className=e)}):new Zt(pe(this).className.split(" "))}},{key:"click",value:function(){return this.forEach(function(e){o(e)&&e.click()})}},{key:"clone",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return this.object(function(t,n){t.add(n.cloneNode(!!e))},new r)}},{key:"closest",value:function(e){return this.object(function(t,n){for(;n;){if(new r(n).is(e))return t.add(n);n=n.parentNode}},new r)}},{key:"contains",value:function(e){return e=ce(e),pe(this).contains(pe(e))}},{key:"create",value:function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];return this.object(function(t,i){var a=new r(jn(e,[new r(i)]));a.into(i),t.add(a.apply.apply(a,n))},new r)}},{key:"createComment",value:function(e){return this.create("#comment").text(e)}},{key:"createText",value:function(e){return this.create("#text").text(e)}},{key:"css",value:function(e,t){var n=pe(this).style;return ve(this.$[0])&&(n=this.$[0].style),arguments.length?arguments.length<=1&&$(e)?(e=new rn(e).toHyphenCase().$,n.getPropertyValue(e)+(n.getPropertyPriority(e)?" !important":"")):(arguments.length>=2&&(e=St({},e,t)),this.forEach(function(t,n){(o(t)||ve(t))&&new qt(e).forEach(function(e,i){i=new rn(i).toHyphenCase().$,c(e)&&(e=e(new r(t).css(i),t,n)),t.style.removeProperty(i),t.style.setProperty(i,e.replace(/ ?!important$/,""),/!important$/.test(e)?"important":"")})})):new rn(n.cssText).split(/; ?/).object(function(t,n){n&&(e=n.split(/: /),t[new rn(e[0]).toCamelCase().$]=e[1])})}},{key:"ctx",value:function e(t,n){var e=void 0;return this.some(function(t){if("canvas"===ge(t))return e=t.dwayneData.ctx,!0}),arguments.length?e?(c(t)?t(e):(arguments.length>=2&&(t=St({},t,n)),E(e,t)),this):this:e}},{key:"data",value:function(e,t){var n=pe(this).dataset;return arguments.length?1===arguments.length&&$(e)?n[e]:(arguments.length>=2&&(e=St({},e,t)),this.forEach(function(t,n){o(t)&&O(e,function(e,r){t.dataset[r]=c(e)?e(t.dataset[r],t,n):e})})):new qt(n).object(function(e,t,n){e[n]=t})}},{key:"dataURL",value:function(e,t){var n=this.ctx();return n?n.canvas.toDataURL.apply(n.canvas,arguments):""}},{key:"deleteRule",value:function(e){return this.some(function(t){if("style"===ge(t)){var n=new Zt(t.sheet.cssRules).find(function(t){return t.dwayneData&&t.dwayneData.name===e});if(n)return t.sheet.deleteRule(n.key),!0}}),this}},{key:"dispatch",value:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=n||{},a=i.bubbles,u=void 0===a||a,c=i.cancelable,l=void 0===c||c,s=t;if(!/Event$/.test(e(s))){try{s=new Event(s,{bubbles:u,cancelable:l})}catch(e){s=pn.createEvent("Event"),s.initEvent(t,u,l)}E(s,r)}return this.forEach(function(e){o(e)&&e.dispatchEvent(s)})}},{key:"elem",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return e<0&&(e=this.length+e),new r(this.$[e])}},{key:"filter",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Boolean;return new r(_t(r.prototype.__proto__||Object.getPrototypeOf(r.prototype),"filter",this).call(this,Tn(e)))}},{key:"find",value:function(e){return $(e)?this.object(function(t,n){t.add(ye(e,n))},new r):_t(r.prototype.__proto__||Object.getPrototypeOf(r.prototype),"find",this).call(this,e)}},{key:"first",value:function(){return this.elem(0)}},{key:"firstChild",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return this.object(function(t,n){var i=new r(n).children().find(function(t){return new r(t).is(e)})||{},a=i.value;t.add(a)},new r)}},{key:"focus",value:function(){return this.forEach(function(e){o(e)&&e.focus()})}},{key:"getRule",value:function(e){var t={selector:void 0,rules:{}};return this.some(function(n){if("style"===ge(n)){var i=new Zt(n.sheet.cssRules).find(function(t){return t.dwayneData&&t.dwayneData.name===e})||{},a=i.value;if(a)return t={selector:a.selectorText,rules:new r(a).css().$},!0}}),t}},{key:"hasAttr",value:function(e){var t=pe(this),n=An(e,[new r(t)]);return h(n)?t.hasAttribute(e):t.hasAttributeNS(n,e)}},{key:"hasClass",value:function(e){return pe(this).classList.contains(e)}},{key:"height",value:function(e){return this.prop.apply(this,new Zt(arguments).unshift("height").$)}},{key:"hide",value:function(){return this.forEach(function(e){e=new r(e);var t=e.css("display");t.indexOf("none")&&(e.prop("dwayneData").previousDisplay=t),e.css("display","none !important")})}},{key:"html",value:function(e){return arguments.length?this.forEach(function(t,n){o(t)&&(t.innerHTML=c(e)?e(t.innerHTML,t,n):e)}):pe(this).innerHTML}},{key:"id",value:function(e){return arguments.length?this.forEach(function(t){o(t)&&(t.id=e)}):pe(this).id}},{key:"insertAfter",value:function(e){e=ce(e).first();var t=e.parent();return t.length?(e=e.next().$[0],t=t.$[0],this.forEach(function(n){e?t.insertBefore(n,e):t.appendChild(n)})):this}},{key:"insertBefore",value:function(e){e=ce(e).first();var t=e.parent();return t.length?(e=e.$[0],t=t.$[0],this.forEach(function(n){t.insertBefore(n,e)})):this}},{key:"into",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return e=ce(e).$[0],!e||se(e)||fe(e)||de(e)?this:!t&&e.firstChild?this.slice().reverse().forEach(function(t){e.insertBefore(t,e.firstChild)}):this.forEach(function(t){e.appendChild(t)})}},{key:"is",value:function(e){if(h(e))return!0;var t=pe(this),n=t.matches||t.matchesSelector||t.webkitMatchesSelector||t.mozMatchesSelector||t.msMatchesSelector||t.oMatchesSelector;if(!o(this.$[0]))return!1;try{return n.call(t,e)}catch(t){return console.error("Selector '"+e+"' is not a valid selector (Elem#is)"),!1}}},{key:"isBroken",value:function e(){var e=!1;return this.some(function(t){if("img"===ge(t))return e=!(!t.complete||t.naturalWidth&&t.naturalHeight),!0}),e}},{key:"isWithinDocument",value:function(){return 0!==this.first().closest("html").length}},{key:"last",value:function(){return this.elem(-1)}},{key:"lastChild",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return this.object(function(t,n){var i=new r(n).children().reverse().find(function(t){return new r(t).is(e)})||{},a=i.value;t.add(a)},new r)}},{key:"load",value:function(){var e={proper:new r,broken:new r};return Wt.all(this.filter(function(e){return"img"===ge(e)}).map(function(t){var n=new r(t);return t.complete?void e[n.isBroken()?"broken":"proper"].push(t):new Wt(function(r){var i=n.on({load:function(){e.proper.add(t),i(),r()},error:function(){e.broken.add(t),i(),r()}})})}).$).then(function(){return e})}},{key:"moveAttr",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=$n[e],r=this.elem();return n&&r.length&&(arguments.length<2&&(t=n.attr(e)),n.removeAttr(e)),r.length&&($n[e]=r.attr(e,t)),this}},{key:"moveClass",value:function(e){var t=wn[e],n=this.elem();return t&&n.length&&t.removeClass(e),n.length&&(wn[e]=n.addClass(e)),this}},{key:"next",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return this.object(function(t,n){for(;n=n.nextSibling;)if(new r(n).is(e))return t.add(n)},new r)}},{key:"off",value:function(){for(var e=arguments,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return this.forEach(function(t){var n=t.dwayneData.listeners;O(e,function(e){O(e.split(mn),function(e){(n[e]||new qt).forEach(function(e){var t=e.removeListener;return t()})})})})}},{key:"on",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments[2],i=new qt({});return c(t)&&(n=t,t=null),$(e)&&(e=St({},e,n)),e=new qt(e).object(function(e,t,n){O(n.split(mn),function(n){e[n]=t})}),this.forEach(function(n){if(o(n)||se(n)||fe(n)){var a=(kn.find(function(e){var t=e.element;return t===n})||{}).value||n.dwayneData,u=a.listeners;e.forEach(function(e,a){var o=u[a]=u[a]||new qt({}).define("index",{value:0,configurable:!0,writable:!0}),c=o.prop("index");if(!o.has("listener")){var l=function(e){o.forEach(function(t){var i=t.selector,a=t.listener;new r(e.target).is(i)&&a.call(n,e,n,c)})};l.base=n,n.addEventListener(a,l,!1),o.define("listener",{value:l,configurable:!0,writable:!0})}var s=function(){o.delete(c),o.count||(n.removeEventListener(a,o.prop("listener"),!1),o.delete("listener"))};i.prop(a,(i.prop(a)||new Zt).push(s)),o.assign(St({index:c+1},c,{selector:t,listener:e,removeListener:s}))})}}),function(e){return arguments.length?void O(arguments,function(e){O(e.split(mn),function(e){i.has(e)&&(i.prop(e).forEach(function(e){return e()}),i.delete(e))})}):void i.forEach(function(e){e.forEach(function(e){return e()})})}}},{key:"parent",value:function(){return this.object(function(e,t){return e.add(t.parentNode)},new r)}},{key:"parentTree",value:function(){return this.object(function(e,t){for(;t=t.parentNode;)e.add(t)},new r)}},{key:"prev",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return this.object(function(t,n){for(;n=n.previousSibling;)if(new r(n).is(e))return t.add(n)},new r)}},{key:"prop",value:function(e,t){return arguments.length<=1&&$(e)?this.$[0]?this.$[0][e]:void 0:(arguments.length>=2&&(e=St({},e,t)),this.forEach(function(t,n){O(e,function(e,r){t[r]=c(e)?e(t[r],t,n):e})}))}},{key:"ref",value:function(e){return arguments.length?this.forEach(function(t){t=new r(t),t.attr(_n(t.name),e)}):this.attr(_n(this.name))}},{key:"remove",value:function(){return this.forEach(function(e){var t=e.parentNode;t&&t.removeChild(e)})}},{key:"removeAttr",value:function(){for(var e=arguments,t=arguments.length,n=Array(t),i=0;i<t;i++)n[i]=arguments[i];return this.forEach(function(t){o(t)&&O(e,function(e){var n=An(e,[new r(t)]);h(n)?t.removeAttribute(e):t.removeAttributeNS(n,e)})})}},{key:"removeClass",value:function(){for(var e=arguments,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return this.forEach(function(t){var n=t.classList;O(o(t)&&e,function(e){return n.remove(e)})})}},{key:"removeCSS",value:function(){for(var e=arguments,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return this.forEach(function(t){o(t)&&O(e,function(e){t.style.removeProperty(e)})})}},{key:"replace",value:function(e){e=ce(e);var t=this.first().parent();if(!t.length)return this;var n=t,r="into",i=this.next().first().$[0],a=this.prev().first().$[0];i?(n=i,r="insertBefore"):a&&(n=a,r="insertAfter"),this.first().remove(),e[r](n)}},{key:"setOf",value:function(e,t,n){if(T({2:n},{2:["function"]},"Elem#setOf"),t=new qt(t).$,d(t)){try{T({1:t},{1:["intLike",">=0"]},"Elem#setOf")}catch(e){throw new Error("2nd argument must be either or non-negative integer, or object! (at Elem#setOf)")}t=K(t).$}return this.object(function(i,a,o){O(t,function(u,c){var l=new r(a).create(e);n(l.$[0],u,c,t,a,o),i.add(l)})},new r)}},{key:"show",value:function(){return this.forEach(function(e){var t=e,n=t.dwayneData;e=new r(e),0===e.css("display").indexOf("none")&&e.css("display",n.previousDisplay),n.previousDisplay=""})}},{key:"text",value:function(e){return arguments.length?this.forEach(function(t,n){var i=t[yn];new r(t).prop(yn,c(e)?e(i,t,n):e)}):this.prop(yn)}},{key:"toggleAttr",value:function(e,t){var n=arguments;return this.forEach(function(i){i=new r(i),(n.length<2?!i.hasAttr(e):t)?i.attr(e,""):i.removeAttr(e)})}},{key:"toggleClass",value:function(e,t){return(arguments.length<2?!this.hasClass(e):t)?this.addClass(e):this.removeClass(e)}},{key:"up",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;return T([e],[["intLike",">=0"]],"Elem#up"),e=Number(e),this.object(function(t,n){for(var r=e;r--&&n;)n=n.parentNode;t.add(n)},new r)}},{key:"validate",value:function(e){function t(e,t,n){try{if(e.validity&&!e.validity.valid)throw new Error(e.validationMessage);e.dwayneData.validators.forEach(function(n){n(e.value,e,t)})}catch(t){(n.errors=n.errors||{})[e.name]=t}}if(T([e],["function||!"],"Elem#validate"),e)return this.forEach(function(t){var n=t.dwayneData;n.validators.push(e)});var n=new qt({errors:null});return this.filter(bn+", form").forEach(function(e,i){if("form"===ge(e)){var a=function(){var i={errors:null},a=new r(e),o=a.find(bn);return o.forEach(function(e,n){t(e,n,i)}),n.deepAssign(i),i=i.errors,a.dispatch("validate",{},{valid:!i,errors:i}),{v:o.forEach(function(e){var t=(i||{})[e.name];new r(e).dispatch("validate",{},{valid:!t,error:t||null})})}}();if("object"===("undefined"==typeof a?"undefined":xt(a)))return a.v}var o={errors:null};t(e,i,o),n.deepAssign(o),o=(o.errors||{})[e.name],new r(e).dispatch("validate",{},{valid:!o,error:o||null})}),n.every(function(e){return h(e)})?null:n.$.errors}},{key:"width",value:function(e){return this.prop.apply(this,new Zt(arguments).unshift("width").$)}},{key:"innerHeight",get:function(){var e=this.$[0];if(se(e))return e.innerHeight;var t=this.calcCSS(),n=t.borderTopWidth,r=t.borderBottomWidth,i=t.boxSizing,a=t.height,o=t.paddingTop,u=t.paddingBottom,c=$e(n)+$e(r),l=$e(o)+$e(u);return $e(a)-Rn(i,[l,c])}},{key:"innerWidth",get:function(){var e=this.$[0];if(se(e))return e.innerWidth;var t=this.calcCSS(),n=t.borderLeftWidth,r=t.borderRightWidth,i=t.boxSizing,a=t.paddingLeft,o=t.paddingRight,u=t.width,c=$e(n)+$e(r),l=$e(a)+$e(o);return $e(u)-Rn(i,[l,c])}},{key:"name",get:function(){return ge(this.$[0])}},{key:"outerHeight",get:function(){var e=this.$[0];if(se(e))return e.outerHeight;var t=this.calcCSS(),n=t.borderTopWidth,r=t.borderBottomWidth,i=t.boxSizing,a=t.height,o=t.marginTop,u=t.marginBottom,c=t.paddingTop,l=t.paddingBottom,s=$e(n)+$e(r),f=$e(c)+$e(l);return $e(a)+$e(o)+$e(u)+Cn(i,[s,f])}},{key:"outerWidth",get:function(){var e=this.$[0];if(se(e))return e.outerWidth;var t=this.calcCSS(),n=t.borderLeftWidth,r=t.borderRightWidth,i=t.boxSizing,a=t.marginLeft,o=t.marginRight,u=t.paddingLeft,c=t.paddingRight,l=t.width,s=$e(n)+$e(r),f=$e(u)+$e(c);return $e(l)+$e(a)+$e(o)+Cn(i,[s,f])}},{key:"toStringTag",get:function(){return e(this.$$)}}]),r}(Zt);j(Ln.prototype,St({},Dt.toStringTag,"Elem"));var Pn=new Ln(ht),Dn=new Ln(pn),Nn=new Ln(pn.documentElement),Mn=new Ln(pn.body),Un=new Ln(pn.head),Bn=new Zt(mt).concat(yt).$,qn=new Zt(Bn).map(function(e){return new rn(e).toCamelCase().$}).$;S(Ln.prototype,qn,function(e,t){return function(){return this.create.apply(this,new Zt(arguments).unshift(Bn[t]).$)}}),S(Ln.prototype,dt,function(e){return function(){var t=this.ctx();if(t)return t[e].apply(t,arguments)}}),S(Ln.prototype,pt,function(e){return function(){var t=this.ctx();return t&&t[e].apply(t,arguments),this}}),gt[2].push({check:function(t){return o(t)||se(t)||fe(t)||de(t)||he(t)||/^(HTMLCollection|NodeList)$/.test(e(t))},cls:Ln});var In=Object.freeze({registerDBlock:ke,registerDEach:be,registerDElements:xe,registerDIf:Oe,registerDItem:Ee,registerDSwitch:Se,registerDText:je}),Fn=A("strictEquals","input").case("form","input, change").case("select","change").case("input",function(e){return"radio"===e||"checkbox"===e||"color"===e||"file"===e?"change":"input"}),Wn=A("strictEquals",function(e,t){return t.hasAttr("contenteditable")||t.hasAttr("contentEditable")?"text":"value"}).case("input",function(e){return"file"===e?"files":"radio"===e||"checkbox"===e?"checked":"value"}),Hn=A("strictEquals",function(e){return e}).case("input",function(e,t,n){return"radio"!==t&&"checkbox"!==t?e:"radio"===t?e===n:e.indexOf(n)!==-1}),zn=A("strictEquals",function(e){return e}).case("input",function(e,n,r,i){if("radio"!==n&&"checkbox"!==n)return e;if("radio"===n)return e?r:null;if(e)return i?i.indexOf(r)===-1?new Zt(i).concat(r).$:i:[r];if(!t(i))return[];var a=i.indexOf(r);return a!==-1?[].concat(Lt(new Zt(i).slice(0,a).$),Lt(new Zt(i).slice(a+1).$)):i}),Vn=A("strictEquals","input").case("select","change").case("input",function(e){return"radio"===e||"checkbox"===e||"color"===e||"file"===e?"change":"input"}),Gn=Object.freeze({registerDAttr:_e,registerDBind:Te,registerDClass:Re,registerDElem:Ce,registerDHide:Ae,registerDOn:Le,registerDShow:Pe,registerDStyle:De,registerDText:Ne,registerDValidate:Me,registerDValue:Ue}),Jn=Object.create(null),Qn=Object.create(null),Zn={}.isPrototypeOf,Yn=new RegExp("^"+$t+"$","i"),Xn=new RegExp("^"+kt+"$"),Kn=/^\{[\s\S]+\}$/,er=ht,tr=er.document,nr="http://www.w3.org/2000/svg",rr=void 0,ir=void 0,ar=void 0,or=void 0,ur=function(){function e(t){var n=this;Ot(this,e);var r=t.name,i=t.args,a=t.children,o=t.block,u=t.parent,c=t.parentBlock,l=t.parentScope,s=new Zt([]);Object.defineProperties(this,{$:{value:this},$$:{value:{name:r,parent:l,parentBlock:c,children:new Zt([]),mixins:new Zt([]),Block:o,elems:{start:Dn.createComment(" "+r+": start "),end:Dn.createComment(" "+r+": end "),content:new Ln,parent:u},watchersToRemove:s,evaluate:function e(t,i,a,o,u,c){function e(){var n=this,r=void 0;i&&(ir=!0,ar=new Zt([])),l.$$.expr=t,tr.DwayneStore=l;try{r=h()}catch(e){rr&&rr(e)}return i&&!function(){var t=new Zt([]);ar.forEach(function(a){var u=function(){var t=e.call(n);t!==r&&i(t,r)},c={forDElements:o,watcher:u,watchers:a};u.onRemove=function(){t.forEach(function(e){var t=e.watcher,n=e.watchers,r=f.indexOf(e),i=n.indexOf(t);r!==-1&&f.splice(r,1),i!==-1&&n.splice(i,1)})},t.push(c),f.push(c),a.push(u)}),ir=!1,ar=new Zt([])}(),l.$$.expr=null,tr.DwayneStore=null,r}if(!Kn.test(t))return t||!0;o=!!o,u=!!u,t=t.replace(/^\{|\}$/g,"");var l="#d-item"===r&&!u||c?(c||n).$$.scope:n,s=a?a.$$:{},f=s.watchersToRemove,h=new Function("",'with(document.DwayneStore){$$.expr=eval("$$.expr="+$$.expr);return $$.expr}');return e.call(n)}}}});var f=new qt(i).map(function(e,t){if("d-each"===r&&("item"===t||"index"===t||"uid"===t))return e;var i="d-elements"===r&&"value"===t;return l.$$.evaluate(e,function(e){n.args[t]=e},n,i,i&&"#d-item"===c.$$.name)}).$;this.args=f,this.children=a||new Zt([]),this.global=Object.create(l?Object.create(l.global):null),this.$$.elems.start.$[0].DwayneBlock=this,this.$$.elems.end.$[0].DwayneBlock=this,c&&c.$$.children.push(this)}return Et(e,null,[{key:"wrap",value:function(e){return T([e],["function"]),e(this)}},{key:"onEvalError",get:function(){return rr},set:function(e){rr=c(e)?e:null}}]),Et(e,[{key:"afterConstruct",value:function(){}},{key:"afterRender",value:function(){}},{key:"beforeRemove",value:function(){}},{key:"evaluateAndWatch",value:function(e,t){return this.$$.parent.$$.evaluate(e,t,this)}},{key:"evaluateOnce",value:function(e){return this.$$.parent.$$.evaluate(e)}},{key:"remove",value:function(e){var t=this.$$,n=t.parentBlock,r=t.children,i=t.mixins,a=t.elems,o=a.start,u=a.content,c=a.end,l=t.watchersToRemove;Je(l),r.forEach(function(e){e.remove(!0)}),i.forEach(function(e){e.remove(!0)});try{this.beforeRemove()}catch(e){console.error("Uncaught error in beforeRemove:",e)}if(!e&&n){var s=n.$$.children.indexOf(this);s!==-1&&n.$$.children.splice(s,1)}new Ln([o,u,c]).remove()}},{key:"watch",value:function(){var e=this,t=arguments[arguments.length-1];if(c(t)){if(1===arguments.length){for(var n in this.$$.global)this.$$.global[n].watchers.perm.push(t);return O(this.$$.args,function(e){var n=e.watchers;n.perm.push(t)}),O(this.$$.locals,function(e){var n=e.watchers;n.perm.push(t)})}O(arguments,function(n){if(n!==t){if(n=""+n,/^args\./.test(n)){if(n=n.replace(/^args\./,""),!e.$$.args[n])return;return void e.$$.args[n].watchers.perm.push(t)}if(/^global\./.test(n)){if(n=n.replace(/^global\./,""),!e.$$.global[n])return;return void e.$$.global[n].watchers.perm.push(t)}e.$$.locals[n]&&e.$$.locals[n].watchers.perm.push(t)}})}}},{key:"watchArgs",value:function(){var e=this,t=arguments[arguments.length-1];if(c(t))return 1===arguments.length?O(this.$$.args,function(e){var n=e.watchers;n.perm.push(t)}):void O(arguments,function(n){n!==t&&e.$$.args[n]&&e.$$.args[n].watchers.perm.push(t)})}},{key:"watchGlobals",value:function(){var e=this,t=arguments[arguments.length-1];if(c(t))if(1!==arguments.length)O(arguments,function(n){n!==t&&e.$$.global[n]&&e.$$.global[n].watchers.perm.push(t)});else for(var n in this.$$.global)this.$$.global[n].watchers.perm.push(t)}},{key:"watchLocals",value:function(){var e=this,t=arguments[arguments.length-1];if(c(t))return 1===arguments.length?O(this.$$.locals,function(e){var n=e.watchers;n.perm.push(t)}):void O(arguments,function(n){n!==t&&e.$$.locals[n]&&e.$$.locals[n].watchers.perm.push(t)})}}]),e}();ur.collapseWhiteSpace=!0,ur.defaultArgs={},Ie(In,ur);var cr=function(){function e(t){var n=this;Ot(this,e);var r=t.value,i=t.elem,a=t.match,o=t.parentBlock,u=t.parentScope;Object.defineProperties(this,{$$:{value:{_value:r,parent:u,parentBlock:o,watchersToRemove:new Zt([])}}}),this.match=new Zt(a).slice(1).$,this.elem=i,new qt(this).proto().$.constructor.evaluate&&(this.value=this.evaluateAndWatch(function(e,t){n.value=e;try{n.afterUpdate(e,t)}catch(e){console.error("Uncaught error in "+name+"#onUpdate:",e)}}),this.afterUpdate(this.value)),o&&o.$$.mixins.push(this)}return Et(e,[{key:"afterUpdate",value:function(){}},{key:"beforeRemove",value:function(){}},{key:"evaluateAndWatch",value:function(e){var t=this.$$,n=t._value,r=t.parent;return r.$$.evaluate(n,e,this)}},{key:"evaluateOnce",value:function(){var e=this.$$,t=e._value,n=e.parent;return n.$$.evaluate(t)}},{key:"remove",value:function(e){var t=this.$$,n=t.parentBlock,r=t.watchersToRemove;Je(r);try{this.beforeRemove()}catch(e){console.error("Uncaught error in beforeRemove:",e)}if(!e&&n){var i=n.$$.mixins.indexOf(this);i!==-1&&n.$$.mixins.splice(i,1)}}}]),e}();cr.evaluate=!0,Ie(Gn,cr);var lr=new rn("0"),sr=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],fr=new qt(sr).map(function(e){return e.slice(0,3)}).$,hr=["January","February","March","April","May","June","Jule","August","September","October","November","December"],vr=new qt(hr).map(function(e){return e.slice(0,3)}).$,dr=[{format:"ccc",match:function(e,t){return Ye(e[t]("c"),3)}},{format:"c",match:function(e,t){return e[t]("c")}},{format:"ss",match:function(e,t){return Ye(e[t]("s"),2)}},{format:"s",match:function(e,t){return e[t]("s")}},{format:"mm",match:function(e,t){return Ye(e[t]("m"),2)}},{format:"m",match:function(e,t){return e[t]("m")}},{format:"hh",match:function(e,t){return Ye(e[t]("h"),2)}},{format:"h",match:function(e,t){return e[t]("h")}},{format:"dddd",match:function(e,t){return sr[e[t]("dw")]}},{format:"ddd",match:function(e,t){return fr[e[t]("dw")]}},{format:"dd",match:function(e,t){return Ye(e[t]("d"),2)}},{format:"d",match:function(e,t){return e[t]("d")}},{format:"MMMM",match:function(e,t){return hr[e[t]("M")-1]}},{format:"MMM",match:function(e,t){return vr[e[t]("M")-1]}},{format:"MM",match:function(e,t){return Ye(e[t]("M"),2)}},{format:"M",match:function(e,t){return e[t]("M")}},{format:"yyyy",match:function(e,t){return Ye(e[t]("y"),4)}},{format:"yy",match:function(e,t){return String(e[t]("y")).slice(-2)}},{format:"y",match:function(e,t){return e[t]("y")}}],pr={c:1,s:1e3,m:6e4,h:36e5,d:864e5,w:6048e5,M:2592e6,y:31536e6},gr=A({c:function(e,t){return e[t+"Milliseconds"]()},s:function(e,t){return e[t+"Seconds"]()},m:function(e,t){return e[t+"Minutes"]()},h:function(e,t){return e[t+"Hours"]()},d:function(e,t){return e[t+"Date"]()},dw:function(e,t){return e[t+"Day"]()},M:function(e,t){return e[t+"Month"]()+1;
},y:function(e,t){return e[t+"FullYear"]()}},"equals",NaN),mr=A({c:function(e,t,n){return e[n+"Milliseconds"](t)},s:function(e,t,n){return e[n+"Seconds"](t)},m:function(e,t,n){return e[n+"Minutes"](t)},h:function(e,t,n){return e[n+"Hours"](t)},d:function(e,t,n){return e[n+"Date"](t)},M:function(e,t,n){return e[n+"Month"](t-1)},y:function(e,t,n){return e[n+"FullYear"](t)}}),yr=function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Date;return Ot(this,t),Ct(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return Tt(t,e),Et(t,[{key:"add",value:function(e,t){return arguments.length>=2&&(e=St({},e,t)),this.time(this.time()+new qt(e).sum(function(e,t){return pr[t]*e}))}},{key:"expires",value:function(e){return arguments.length||(e=this),new Qt(this.$-Xe()).timeout(e)}},{key:"format",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return e=new rn(new qt(e).$),n=String(new qt(n).$),O(dr,function(r){e=e.replaceString(n+r.format,r.match(t,"get"))}),e.$}},{key:"formatUTC",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return e=new rn(new qt(e).$),n=String(new qt(n).$),O(dr,function(r){e=e.replaceString(n+r.format,r.match(t,"getUTC"))}),e.$}},{key:"get",value:function(e){return gr(e,[this.$,"get"])}},{key:"getUTC",value:function(e){return gr(e,[this.$,"getUTC"])}},{key:"isAfter",value:function(e){return e=new Date(new qt(e).$),e.getTime()<this.$.getTime()}},{key:"isBefore",value:function(e){return e=new Date(new qt(e).$),e.getTime()>this.$.getTime()}},{key:"isBetween",value:function(e,t){var n=this.$.getTime();return e=new Date(new qt(e).$),t=new Date(new qt(t).$),n>e.getTime()&&n<t.getTime()}},{key:"isInvalid",value:function(){return"Invalid Date"===this.$.toString()}},{key:"isPassed",value:function(){return this.isBefore(Xe())}},{key:"ofOne",value:function(e,n){var r=this;if(!(e in pr)||"w"===e)return!1;n=new t(new Date(n));var i=void 0;return O(pr,function(t,a){if(a===e&&(i=!0),i&&"w"!==a)return(!i||r.get(a)===n.get(a))&&void 0})!==!1}},{key:"set",value:function(e,t){var n=this.$;return arguments.length>=2&&(e=St({},e,t)),e=new qt(e).$,O(e,function(e,t){mr(t,[n,e,"set"])}),this}},{key:"setUTC",value:function(e,t){var n=this.$;return arguments.length>=2&&(e=St({},e,t)),e=new qt(e).$,O(e,function(e,t){mr(t,[n,e,"setUTC"])}),this}},{key:"time",value:function(e){var t=this.$;return arguments.length&&t.setTime(e),t.getTime()}},{key:"toISOString",value:function(){return this.$.toISOString()}},{key:"toLocaleString",value:function(){return this.$.toLocaleString()}},{key:"toString",value:function(){return this.$.toString()}},{key:"valueOf",value:function(){return this.$.valueOf()}}]),t}(qt);j(yr.prototype,St({},Dt.toStringTag,"Dat")),gt[1].push({check:i,cls:yr});var wr=/^(([a-z][a-z\d+\-.]*:)?\/\/|data:[a-z]+\/[a-z]+;base64,)/i,$r=A("call",function(){return new Zt([])}).case(t,function(e,n){var r=new Zt([]);return O(n,function(n){return m(n)||t(n)?void(r=r.concat($r(n,[e+"[]"]))):void r.push({param:e+"[]",value:n})}),r.$}).case(m,function(e,n){var r=new Zt([]);return O(n,function(n,i){return m(n)||t(n)?void(r=r.concat($r(n,[e?e+"["+i+"]":i]))):void r.push({param:e?e+"["+i+"]":i,value:g(n)?JSON.stringify(n):String(n)})}),r.$}),kr=function(e,t,n,r){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"",a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{},o=a.params,u=void 0===o||o,c=a.query,l=void 0===c||c,s=et(t)?t:String(e).replace(/\/+$/,"")+"/"+String(t).replace(/^\/+/,"");O(n,function(e,t){s=new rn(s).replaceString(":"+t,tt(e,u)).$});var f=$r(r,[""]);return f.length&&(s+=(s.indexOf("?")===-1?"?":"&")+f.map(function(e){var t=e.param,n=e.value;return tt(t,l)+"="+tt(n,l)}).join("&")),""+s+(i?"#"+i:"")},br=function(e){var t={};return O((e||"").split("\n"),function(e){var n=e.indexOf(":"),r=new rn(e.substring(0,n)).trim().toCamelCase().$,i=new rn(e.substring(n+1)).trim().$;r&&(t[r]=(t[r]?t[r]+", ":"")+i)}),t},xr=new Zt(["FormData","File","Blob","ArrayBuffer","String","Number"]),Or=new Zt(["DELETE","GET","HEAD"]),Er=function(t,n,r){return t=new qt(t).$,Or.indexOfStrict(n)!==-1?null:g(t)&&xr.indexOfStrict(e(t))===-1?(r.contentType||(r.contentType=["application/json;charset=utf-8"]),new qt(t).json()):t},Sr={after:[],auth:{username:"",password:""},baseURL:ht.location.origin,before:[],data:null,headers:{},method:"get",params:{},query:{},responseType:"",timeout:0,url:"",withCredentials:!1},jr=new Zt(["post","put"]),_r=function(e){function n(){function e(){return e.request.apply(e,arguments)}var t,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Ot(this,n);var i=Ct(this,(n.__proto__||Object.getPrototypeOf(n)).call(this)),a=new qt({}).deepAssign(Sr,r).$;return a.before.indexOf(nt)===-1&&a.before.push(nt),Object.defineProperty(e,"$$",{value:a}),Object.setPrototypeOf(e,n.prototype),t=e,Ct(i,t)}return Tt(n,e),Et(n,[{key:"after",value:function e(t){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];T([t],["function"],"Fetch#after");var e=this.$$.after;return n?e.push(t):e.unshift(t),this}},{key:"before",value:function e(t){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];T([t],["function"],"Fetch#before");var e=this.$$.before;return n?e.unshift(t):e.push(t),this}},{key:"config",value:function(e,t){var n=this.$$;return arguments.length?(c(e)?e(n):(arguments.length>=2&&(e=St({},e,t)),new qt(n).deepAssign(e)),this):n}},{key:"delete",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return $(e)||(t=e,e=void 0),this.request(e,E({method:"delete"},t))}},{key:"get",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return $(e)||(t=e,e=void 0),this.request(e,E({method:"get"},t))}},{key:"head",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return $(e)||(t=e,e=void 0),this.request(e,E({method:"head"},t))}},{key:"headers",value:function e(n,r){var e=this.$$.headers;return arguments.length>=2&&(n=St({},n,r)),O(n,function(n,r){var i=e[r]||[],a=t(n)?n:[n];(e[r]=i).push.apply(i,a)}),this}},{key:"instance",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=new qt(e).hasOwn("data")?{data:e.data}:{};delete e.data;var r=new qt({}).deepAssign(this.$$,e).assign(t).$;return new n(r)}},{key:"patch",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return arguments.length&&!$(e)&&(n=t,t=e,e=void 0),this.request(e,E({method:"patch",data:t},n))}},{key:"post",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return arguments.length&&!$(e)&&(n=t,t=e,e=void 0),this.request(e,E({method:"post",data:t},n))}},{key:"put",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return arguments.length&&!$(e)&&(n=t,t=e,e=void 0),this.request(e,E({method:"put",data:t},n))}},{key:"request",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};1!==arguments.length||$(e)||(t=e);var n=new qt(t).hasOwn("data")?{data:t.data}:{},r=$(e)?{url:e}:{};delete t.data;var i=new qt(this.$$).deepClone().deepAssign(r,t).assign(n).$,a=void 0,o=Wt.resolve();return O(i.before,function(e){o=o.then(function(){return e.length>=2?Wt.resolve():new Wt(function(t){t(e(i))})},function(t){return e.length<2?Wt.reject(t):new Wt(function(n){n(e(t,i))})})}),o=o.then(function(){return new Wt(function(e,t){var n=i.after,r=i.auth,o=r.username,u=r.password,c=i.data,l=i.headers,s=i.method,f=i.onprogress,h=i.responseType,v=i.timeout,d=i.url,p=i.withCredentials;a=new XMLHttpRequest,a.open(s,d,!0,o,u),O(l,function(e,t){a.setRequestHeader(t,e)}),f&&(jr.indexOfStrict(s)===-1?a.onprogress=f:a.upload.onprogress=f),a.onabort=function(){t(new Error("Request was aborted")),a=null},a.onerror=function(){t(new Error("Network error")),a=null},a.ontimeout=function(){t(new Error("Request time exceeded")),a=null},a.onreadystatechange=function(){if(a&&a.status&&4===a.readyState){var t={config:i,data:h&&"text"!==h?a.response:a.responseText,headers:br(a.getAllResponseHeaders()),status:1223===a.status?204:a.status,statusText:1223===a.status?"No Content":a.statusText,xhr:a},r=Wt.resolve();O(n,function(e){r=r.then(function(){return e.length>=2?Wt.resolve():new Wt(function(n){n(e(t))})},function(n){return e.length<2?Wt.reject(n):new Wt(function(r){r(e(n,t))})})}),e(r.then(function(){return t}).catch(function(e){try{e.response=t}catch(t){throw e}throw e}))}},a.responseType=h,a.timeout=Number(v)||0,a.withCredentials=!!p,a.send(c)})}),o.abort=function(){return a&&a.abort(),this},o}}]),n}(Function);j(_r.prototype,St({},Dt.toStringTag,"Fetch"));var Tr=new _r,Rr=ht,Cr=Rr.location,Ar=function(e){var t=Cr.search,n=Cr.hash,r={query:{},hash:n.replace(/^#/,"")};return t?(new rn(t.replace(/^\?/,"")).split("&").forEach(function(t){var n=t.split("="),i=At(n,2),a=i[0],o=i[1],u=void 0===o?"":o;if(a=e?decodeURIComponent(a):a,u=e?decodeURIComponent(u):u,/^[^[]+/.test(a)){var c=void 0,l=r.query;new rn(a).match(/^[^[\]]*|\[[^[\]]*]/g).forEach(function(e){return e.indexOf("[")?void(c=e):(e=e.slice(1,-1),l=l[c]=l[c]||(e?{}:[]),void(c=e||l.length))}),l[c]=u}}),r):r},Lr=new Zt([]),Pr=new qt({}),Dr=ht,Nr=Dr.history,Mr=Dr.location,Ur=Dr.location,Br=Ur.origin,qr=Ur.href,Ir=void 0,Fr=void 0,Wr=void 0,Hr=void 0,zr=void 0,Vr=void 0,Gr=void 0,Jr=void 0,Qr=void 0,Zr=void 0,Yr=void 0,Xr=A("call",function(){throw new Error("State path must be a string, a regular expression or undefined! (at registerState)")}).case(w,function(e){return{path:e.source.replace(/\\\//g,"/"),url:e,params:{}}}).case(v,function(){return{path:"/",url:"/",params:{}}}).case($,function(e){if(e.indexOf("/"))throw new Error('If route path is a string it must start with "/"! (at registerState)');var t=e.indexOf("?"),n=new qt({}),r="",i=new rn(e).slice(0,t===-1?e.length:t).replace(/^\/|\/$/g).split(/\//).map(function(e,t,r){if(!e&&r.length>1)throw new Error('If route path is a string it must not contain "//" or end with "/"! (at makeRoute)');var i=e.indexOf(":");if(i>0)throw new Error("If route path is a string resource part must be either a string or an URL parameter! (at makeRoute)");if(i===-1)return{url:e,value:e};var a=ft(e.slice(1),'URL parameter must not be an empty string or contain characters besides "a-zA-Z_$"! (at makeRoute)',"URL parameter regexp validator must be within parentheses (e.g. :userId(\\d+) and not contain ones)! (at makeRoute)"),o=a.name,u=a.regexp,c=void 0===u?/[^\/]*/:u;return n.$[o]=n.count,{type:"param",url:":"+o,value:c}}).word(function(e){var t=e.type,n=e.url,i=e.value,a=void 0;return a="param"===t?"("+i.source.replace(/\\\//g,"/")+")":new rn(i).escapeRegExp().$,r+="/"+n,"/"+a});return{path:i,url:r,params:n.$}}),Kr=function e(t){Ot(this,e),t=t||{};var n=t||{},r=n.name,i=n.path,a=void 0===i?"/":i,o=n.abstract,u=void 0!==o&&o,c=n.parent,l=n.decodeQuery,s=void 0===l||l,f=n.encodeQuery,h=void 0===f||f,v=n.decodeParams,d=void 0===v||v,p=n.encodeParams,g=void 0===p||p,m=Xr(a),y=m.url,w=m.path,k=m.params,b={};new qt(this).assign({name:r,parentName:c,abstract:!!u,children:new Zt([]),decodeParams:!!d,decodeQuery:!!s,encodeParams:!!g,encodeQuery:!!h,params:k,query:b,relativePath:w,relativeURL:y});var x=$(a)?a.indexOf("?"):-1;if(x!==-1&&new rn(a).replace(/&$/).slice(x+1).split("&").forEach(function(e){var t=ft(e,'Query parameter must not be an empty string or contain characters besides "a-zA-Z_$"! (at makeRoute)',"Query parameter regexp validator must be within parentheses (e.g. :userId(\\d+)) and not contain them! (at makeRoute)"),n=t.name,r=t.regexp,i=void 0===r?/[\s\S]*/:r;b[n]=new RegExp("^"+i.source.replace(/\\\//g,"/")+"$")}),r===Jr&&(new qt(k).count||new qt(b).count))throw new Error("Default route must not have URL or query params! (at makeRoute)")},ei=new Kr,ti=Object.freeze({D:x,isArray:t,isArrayLike:n,isBoolean:r,isDate:i,isDateLike:a,isElement:o,isFinite:u,isFunction:c,isInteger:l,isIntegerLike:s,isNaN:f,isNull:h,isNil:v,isNumber:d,isNumberLike:p,isObject:g,isPlainObject:m,isPrimitive:y,isRegExp:w,isString:$,isSymbol:k,isUndefined:b,Alphabet:Mt,alphabet:C,Arr:Zt,array:K,iterate:ee,BlobObject:en,blob:te,Block:ur,Mixin:cr,initApp:Be,Dat:yr,now:Xe,date:Ke,Elem:Ln,win:Pn,doc:Dn,html:Nn,body:Mn,head:Un,find:ye,parseHTML:we,px:$e,Fetch:_r,fetch:Tr,Func:Ht,method:V,noop:G,prop:J,self:Q,Num:Qt,rand:Z,random:Y,Promise:Wt,makeRoute:it,Str:rn,parseJSON:re,Super:qt,Switcher:Ut,switcher:A,when:L}),ni=x;E(ni,ti),delete ni.D,ht.D=ni}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,