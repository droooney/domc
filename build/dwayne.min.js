!function(){"use strict";function e(e){return{}.toString.call(e).replace(/^\[object |]$/g,"")}function t(t){return"Array"===e(t)}function n(e){if(!e||c(e))return!1;var t=e.length;return l(t)&&t>=0}function r(t){return"Boolean"===e(t)}function i(t){return"Date"===e(t)}function o(e){return e=new Date(e),!f(e.getTime())}function a(t){return/Element$/.test(e(t))}function u(e){return!!d(e)&&(e=Number(e),!f(e)&&e!==1/0&&e!==-(1/0))}function c(t){return"Function"===e(t)||"function"==typeof t}function l(e){return d(e)&&e%1===0}function s(e){return e=parseInt(Number(e)),!(!e&&0!==e)}function f(e){return!!d(e)&&(e=Number(e),e!==e)}function h(e){return null===e}function v(e){return null===e||"undefined"==typeof e}function d(t){return"Number"===e(t)}function p(e){return!(!f(e)&&"NaN"!==e)||(e=Number(e),!(!e&&0!==e))}function g(t){return!!t&&("Object"===e(t)||"object"===("undefined"==typeof t?"undefined":Et(t))||t instanceof Object)}function m(e){if(y(e))return!1;var t=Object.getPrototypeOf(e);if(h(t))return!0;var n=t.constructor;return c(n)&&n instanceof n&&h(Object.getPrototypeOf(t))}function y(e){return h(e)||/^(number|string|boolean|symbol|undefined)$/.test("undefined"==typeof e?"undefined":Et(e))}function w(t){return"RegExp"===e(t)}function $(t){return"String"===e(t)}function k(t){return"Symbol"===e(t)}function b(e){return"undefined"==typeof e}function x(e){for(var t=mt.length-1;t>=0;t--)for(var n=mt[t],r=0,i=n.length;r<i;r++){var o=n[r];if(e instanceof o.cls)return e;if(o.check(e))return new o.cls(e)}}function E(e,t){var r=n(e),i={},o=0;for(var a in e)if(!{}.hasOwnProperty.call(i,a)&&(i[a]=!0,{}.hasOwnProperty.call(e,a))){if(r&&o++>=e.length)break;var u=t(e[a],r?Number(a):a,e);if(!b(u))return u}}function O(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return E(arguments,function(t,n){n&&E(t,function(t,n){e[n]=t})}),e}function S(e,t,n){E(t,function(t,r){Object.defineProperty(e,t,{value:n(t,r),writable:!0,enumerable:!1,configurable:!0})})}function j(e,t){E(t,function(t,n){return/^get /.test(n)?void Object.defineProperty(e,n.replace(/^get /,""),{get:t,set:void 0,enumerable:!1,configurable:!0}):/^set /.test(n)?void Object.defineProperty(e,n.replace(/^set /,""),{set:t,get:void 0,enumerable:!1,configurable:!0}):/^get\/set /.test(n)?void Object.defineProperty(e,n.replace(/^get\/set /,""),{get:t.get,set:t.set,enumerable:!1,configurable:!0}):void("Symbol.toStringTag"!==n&&Object.defineProperty(e,n,{value:t,writable:!0,enumerable:!1,configurable:!0}))})}function _(e,r){if(t(e)&&!r)return e;var i=[];return n(e)&&!$(e)?E(e,function(e){i.push(e)}):i.push(e),i}function T(e,n,r){E(n,function(n,i){t(n)||(n=[n]),E(n,function(t){if(t=Dt[t],!t.check(e[i]))throw new t.error(t.text.replace("$n",Mt[i])+(r?" (at "+r+")":""))})})}function R(e){return $(e)&&1===e.length}function C(e){T([e],["string"]);for(var t=e.split(/([\s\S]-+[\s\S])?/g),n=t.length,r=[],i=0;i<n;i++){var o=t[i];if(o&&" "!==o){if(/-/.test(o)&&!/[\s\S]-+[\s\S]/.test(o))throw new Error("Wrong part of the string ("+o+")! (in alphabet)");if(/-/.test(o)){var a=o.charCodeAt(0),u=o.charCodeAt(2);if(a>u)throw new Error("Start of the range must be before its end! (in alphabet)");for(var c=0,l=u-a+1;c<l;c++)r.push(String.fromCharCode(a+c))}else 1===o.length&&r.push(o)}}return new Ut(r)}function A(e,t,n){return new(Function.prototype.bind.apply(Bt,[null].concat(Array.prototype.slice.call(arguments))))}function L(e,t,n){return e?t:n}function P(e,t){E(t,function(t,n){return y(e[n])||!{}.hasOwnProperty.call(e,n)?void(e[n]=D(t)):void(y(e[n])||P(e[n],t))})}function D(e){var t=qt(e,[e,!0]);return t!==e&&E(e,function(e,n){t[n]=D(e)}),t}function N(n,r,o){if(n===r)return!0;if(f(n)&&f(r)&&y(n)&&y(r))return!0;if(f(n)||f(r))return!1;if(y(n)||y(r))return o?n===r:n==r;if(i(n)&&i(r))return n.getTime()===r.getTime();if(i(n)||i(r))return!1;if(w(n)&&w(r))return n.source===r.source&&n.toString().match(/[gimuy]*$/)[0]===r.toString().match(/[gimuy]*$/)[0]&&n.lastIndex===r.lastIndex;if(w(n)||w(r))return!1;if(!m(n)&&!t(n)||!m(r)&&!t(r))return!1;var a=Object.getPrototypeOf(n),u=Object.getPrototypeOf(n);return Object.keys(n).length===Object.keys(r).length&&((!a||!u||e(a.constructor)===e(u.constructor))&&E(n,function(e,t){if(!(t in r&&N(e,r[t],o)))return!1})!==!1)}function M(e,t,n,r){var i=1===n;return E(e,function(e,o,a){var u=[{key:o,value:e}].concat(r);if(i||y(e)?!t(e,o,a,u):!M(e,t,n-1,u))return!1})!==!1}function U(e,t,r,i){var o=n(e),a=v(e),u=o?[]:a?e:{},c=1===r;return E(e,function(e,n,a){var l=[{key:n,value:e}].concat(i);if((c||y(e))&&t(e,n,a,l))return void(o?u.push(e):u[n]=e);if(!c){var s=U(e,t,r-1,l);s&&(o?u.push(s):u[n]=s)}}),o?u.length?u:void 0:a?u:Object.keys(u).length?u:void 0}function B(e,t,n,r){var i=1===n;return E(e,function(e,o,a){var u=[{key:o,value:e}].concat(r);if(i||y(e)){if(t(e,o,a,u))return u}else{var c=B(e,t,n-1,u);if(c)return c}})||null}function q(e,t,n,r){var i=1===n;E(e,function(e,o,a){var u=[{key:o,value:e}].concat(r);i||y(e)?t(e,o,a,u):q(e,t,n-1,u)})}function I(e,t,n,r){var i=1===n;E(e,function(e,o,a){var u=[{key:o,value:e}].concat(r);t(e,o,a,u),i||y(e)||I(e,t,n-1,u)})}function F(e){Object.freeze(e),E(e,F)}function W(e,t,r,i){var o=n(e)?[]:v(e)?e:{},a=1===r;return E(e,function(e,n,u){var c=[{key:n,value:e}].concat(i);o[n]=a||y(e)?t(e,n,u,c):W(e,t,r-1,c)}),o}function H(e,t,n,r,i,o){var a=1===n;return E(e,function(e,u,c){if(!i&&(a||y(e))&&!r)return i={IV:e},void(r=!0);var l=[{key:u,value:e}].concat(o);i=a||y(e)?{IV:t(i.IV,e,u,c,l)}:H(e,t,n-1,r,i,l)}),i}function z(e,t,n,r){var i=1===n;return E(e,function(e,o,a){var u=[{key:o,value:e}].concat(r);if(i||y(e)?t(e,o,a,u):z(e,t,n-1,u))return!0})||!1}function V(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return function(n){return n[e].apply(n,_(t))}}function G(){}function J(e){return function(t){var n=t[e];return n}}function Q(){return arguments[0]}function Z(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return e+(t-e)*Math.random()}function Y(e,t){if(T([e,t],["intLike","intLike"],"random"),t<=e)throw new Error("The second argument must be greater than the first!","random");return Math.floor(Z(e,t+1))}function X(e,t){return d(e)||d(t)?d(e)?d(t)?f(e)&&f(t)?0:f(e)?-1:f(t)?1:e-t:1:-1:0}function K(e,t){T([e,t],[["intLike",">=0"],"function||!"],"array");for(var n=[],r=0;r<e;r++)n.push(t?t(r):r);return new Yt(n)}function ee(e,t){T([e,t],[["intLike",">=0"],"function"],"iterate");for(var n=0;n<e;n++)t(n)}function te(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return t(e)||(e=[e]),new tn(new Blob(e,n))}function ne(e){return e.replace(/^[\s\-_.]+|[\s\-_.]+$/g,"")}function re(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments[2];if(arguments.length<=1)return x(JSON.parse(e));c(t)&&(n=t,t={});var r=t,i=r.numbers,o=r.dates,a=JSON.parse(e,function(e,t){return o&&/^\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\d\.\d\d\dZ?$/.test(t)?t=new Date(t):i&&p(t)&&$(t)&&(t=Number(t)),n?n.apply(this,arguments):t});return x(a)}function ie(e,t){var n=t.name,r=void 0;r=hn(n)?new It({"tag-close":e.match(oe(n))}):un.map(function(t){return e.match(t)});var i=void 0;if(i=r.find(function(e){return e&&0===e.index})){var o={type:i.key,index:i.value[0].length,value:i.value[1]},a={};if("tag-open"===i.key){var u=e,c=void 0;for(o.selfClosing=!1,o.attrs=a;(e=u.slice(o.index))&&!(c=e.match(cn));){var l=e.match(ln);l?(a[l[1]]=(l[2]||"").replace(/^("|')|("|')$/g,""),o.index+=l[0].length):o.index+=1}c&&(o.index+=c[0].length,o.selfClosing=!!c[1])}return o}var s=r.min(function(e){return e?e.index:NaN}),f=s.value;return f===1/0&&(f=e.length),{type:"text",index:f,value:e.slice(0,f)}}function oe(e){return new RegExp("</("+e+")\\s*>","i")}function ae(e,t){return t+' (~~~ "'+e.slice(t,t+15)+'" ~~~, the string itself is "'+e+'")'}function ue(e){return e.replace(/&(\w+|#x?\d+);/g,function(e){return sn.innerHTML=e,sn.textContent||sn.innerText})}function ce(e){return le(e)?e:($(e)&&(e=ye(e)),new Pn(e))}function le(e){return e instanceof Pn}function se(t){return"Window"===e(t)}function fe(t){return"HTMLDocument"===e(t)}function he(t){return"DocumentFragment"===e(t)}function ve(t){return"CSSStyleRule"===e(t)}function de(t){var n=e(t);return"Comment"===n||"Text"===n}function pe(e){return a(e.$[0])?e.$[0]:mn}function ge(e){return e&&e.nodeName&&e.nodeName.toLowerCase()||""}function me(e){({}).hasOwnProperty.call(e,"dwayneData")||se(e)?se(e)&&!bn.some(function(t){var n=t.element;return n===e})&&bn.push({element:e,listeners:{}}):Object.defineProperty(e,"dwayneData",{value:{previousDisplay:"",listeners:{},ctx:"canvas"===ge(e)&&e.getContext("2d"),validators:new Yt([])}})}function ye(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:gn;return new Pn(a(t)||fe(t)?t.querySelectorAll(String(e)):[])}function we(e,t){var n=pn(e,t),r=Nn.template(),i=new Pn(r.$[0].content);return n.forEach(function e(t){var n=t.name,r=t.attrs,o=t.value,a=t.parent,u=t.children,c=a.elem||i,l=c.create(n);t.elem=l,o&&l.text(o),r&&l.attr(r),"template"===n&&(t.elem=new Pn(l.prop("content"))),u&&u.forEach(e)}),new Pn(i)}function $e(e){return Number(String(e).replace(/px$/,""))}function ke(e){var t=function(e){function t(){var e,n,r,i;Ot(this,t);for(var o=arguments.length,a=Array(o),u=0;u<o;u++)a[u]=arguments[u];return n=r=At(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r.elems=null,i=n,At(r,i)}return Rt(t,e),St(t,[{key:"afterConstruct",value:function(){var e=this.$$.parent.children,t=this.args.name,n=void 0;t?(n=e.find(function(e){var n=e.name;return n==="d-block-"+t}),n&&n.value.children.length&&(this.elems=n.value.children)):this.elems=e}}]),t}(e);return t.template='<d-elements value="{elems}" />',{name:"d-block",value:t}}function be(e,t){var n=function(e){function n(e){Ot(this,n);var t=At(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,e)),r=t.args,i=r.item,o=void 0===i?"$item":i,a=r.index,u=void 0===a?"$index":a;return O(t.$$,{uids:new It({}),items:new Yt([]),UID:String(t.args.uid),itemName:o,indexName:u}),t}return Rt(n,e),St(n,[{key:"afterRender",value:function(){var e=this;this.constructValues(this.args.set),this.watchArgs("set",function(t){e.constructValues(t)})}},{key:"constructValues",value:function(e){var n=this,r=this.$$,i=r.elems,o=i.start,a=i.parent,u=r.uids,c=r.parent,l=r.scope,s=r.itemName,f=r.indexName,h=r.UID,v=this.children,d=u.$,p={},g={};new It(e).forEach(function(e,t){l[s]=e,l[f]=t;var r=c.$$.evaluate(String(h),null,null,!1,!1,n);p[r]=p[r]||{},p[r][t]=!0,g[t]=r}),l[s]=null,l[f]=null,u.forEach(function(e,t){return p[t]?void e.splice(Object.keys(p[t]).length).forEach(function(e){e.remove()}):void e.forEach(function(e){e.remove()})});var m=o;new It(e).forEach(function(e,r){var i=g[r],o=void 0;d[i]&&d[i].length?(o=p[i][r]=u.$[i].shift(),o.$$.scope[f]=r,o.$$.scope[s]=e):o=p[i][r]=t({node:{itemName:s,indexName:f,item:e,index:r,name:"#d-item",block:c,children:v},after:m,parent:a,parentBlock:n,parentScope:c});var l=o.$$.elems,h=l.start,y=l.end;if(h.prev().$[0]!==m.$[0]){var w=o.$$.elems.content;new Pn([h,w,y]).insertAfter(m)}m=y}),this.$$.uids=new It(p).map(function(e){return new It(e).values()})}}]),n}(e);return{name:"d-each",value:n}}function xe(e,t){var n=function(n){function r(){return Ot(this,r),At(this,(r.__proto__||Object.getPrototypeOf(r)).apply(this,arguments))}return Rt(r,n),St(r,[{key:"afterConstruct",value:function(){var n=this;this.watchArgs("value",function(r){var i=n.$$,o=i.children,a=i.mixins,u=i.watchersToRemove,c=i.elems,l=c.start,s=c.content,f=c.parent,h=l;o.forEach(function(e){e.remove(!0)}),a.forEach(function(e){e.remove(!0)}),s.remove(),n.$$.children=new Yt([]),n.$$.mixins=new Yt([]),n.$$.watchersToRemove=u.filter(function(e){var t=e.watchers,n=e.watcher,r=e.forDElements;if(r)return!0;var i=t.indexOf(n);i!==-1&&t.splice(i,1)});var v=new Pn;new Yt(r||[]).forEach(function(r){var i=t({node:r,after:h,parent:f,parentBlock:n,parentScope:n});if(i instanceof e){var o=i.$$.elems;h=o.end,v.add(o.start,o.content,o.end)}else h=i,v.add(i)}),n.$$.elems.content=v})}}]),r}(e);return{name:"d-elements",value:n}}function Ee(e){var t=function(e){function t(){var e,n,r,i;Ot(this,t);for(var o=arguments.length,a=Array(o),u=0;u<o;u++)a[u]=arguments[u];return n=r=At(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r.index=1/0,r.elems=null,r.values=r.children.map(function(e,t){var n=e.name,i=e.attrs,o=e.children,a=r.evaluateAndWatch("d-else"===n?"{true}":i.if||"{true}",function(e){if(!!e!==r.values.$[t]&&(r.values.$[t]=!!e,!(t>r.index))){if(t<r.index)return r.index=t,void(r.elems=o);var n=r.values.find(Boolean);n?(r.index=n.key,r.elems=r.children.$[n.key].children):(r.index=1/0,r.elems=null)}});return a&&r.index===1/0&&(r.index=t,r.elems=o),a}),i=n,At(r,i)}return Rt(t,e),t}(e);return t.template='<d-elements value="{elems}"/>',{name:"d-if",value:t}}function Oe(e){var t=function(e){function t(){return Ot(this,t),At(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return Rt(t,e),t}(e);return t.template='<d-elements value="{children}"/>',{name:"#d-item",value:t}}function Se(e){var t=function(e){function t(e){Ot(this,t);var n=At(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));n.index=1/0,n.elems=null;var r=n.args,i=n.args.value,o=void 0;return n.values=n.children.object(function(e,t,a){var u=t.name,c=t.attrs,l=t.children;if(!o&&("d-case"===u||"d-default"===u)){"d-default"===u&&(o=!0);var s=void 0;s="d-default"===u?r.value:n.evaluateAndWatch(c.if||"{undefined}",function(e){if(!(n.equals(n.values.$[a].value,e)||(n.values.$[a].value=e,a>n.index))){if(a<n.index)return n.index=a,void(n.elems=l);var t=n.values.find(function(e){var t=e.value;return n.equals(t,r.value)});t?(n.index=t.key,n.elems=t.value.children):(n.index=1/0,n.elems=null)}}),n.equals(s,i)&&n.index===1/0&&(n.index=a,n.elems=l),e.push({name:u,children:l,value:s})}},new Yt([])),n}return Rt(t,e),St(t,[{key:"afterConstruct",value:function(){var e=this;this.watchArgs("value",function(t){e.index=1/0,e.values.forEach(function(n,r){var i=n.name,o=n.value,a=n.children,u="d-default"===i?t:o;e.equals(u,t)&&e.index===1/0&&(e.index=r,e.elems=a)})})}},{key:"equals",value:function(e,t){return new It(e).equals(t)}}]),t}(e);return t.template='<d-elements value="{elems}"/>',{name:"d-switch",value:t}}function je(e){var t=function(e){function t(){var e,n,r,i;Ot(this,t);for(var o=arguments.length,a=Array(o),u=0;u<o;u++)a[u]=arguments[u];return n=r=At(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r.text="",i=n,At(r,i)}return Rt(t,e),St(t,[{key:"afterConstruct",value:function(){var e=this;this.text=v(this.args.value)?"":this.args.value,this.watchArgs("value",function(t){e.text=v(t)?"":t})}}]),t}(e);return t.template="<d-elements value=\"{[{ name: '#text', value: text }]}\"/>",{name:"d-text",value:t}}function _e(e){var t=function(e){function t(){return Ot(this,t),At(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return Rt(t,e),St(t,[{key:"afterUpdate",value:function(e,t){var n=this.elem;e=new It(e).$,new It(t).forEach(function(t,r){e[r]||n.removeAttr(r)}),n.attr(e)}}]),t}(e);return{name:"d-attr",value:t}}function Te(e){var t=function(e){function t(){return Ot(this,t),At(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return Rt(t,e),St(t,[{key:"afterUpdate",value:function(e){this.off&&this.off(),c(e)&&(this.off=this.elem.on(this.match[0],e))}}]),t}(e);return{name:"d-bind",value:t}}function Re(e){var n=function(e){function n(){return Ot(this,n),At(this,(n.__proto__||Object.getPrototypeOf(n)).apply(this,arguments))}return Rt(n,e),St(n,[{key:"afterUpdate",value:function(e,n){var r=this.elem;e=new It(e).$,n=new It(n).$,t(e)?(E(n,function(t){$(t)&&!e[t]&&r.removeClass(t)}),E(e,function(e){$(e)&&r.addClass(e)})):$(e)?r.class(e):g(e)?(E(n,function(t,n){t&&!e[n]&&r.removeClass(n)}),E(e,function(e,t){e&&r.addClass(t)})):$(n)?r.class(""):t(n)?E(n,function(e){$(e)&&r.removeClass(e)}):g(n)&&E(n,function(e,t){e&&r.removeClass(t)})}}]),n}(e);return{name:"d-class",value:n}}function Ce(e){var t=function(e){function t(){return Ot(this,t),At(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return Rt(t,e),St(t,[{key:"afterUpdate",value:function(e,t){var n=this.$$.parent;e!==t&&$(t)&&delete n[t],$(e)&&(n[e]=this.elem)}}]),t}(e);return{name:"d-elem",value:t}}function Ae(e){var t=function(e){function t(){return Ot(this,t),At(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return Rt(t,e),St(t,[{key:"afterUpdate",value:function(e){var t=this.elem;e?t.hide():t.show()}}]),t}(e);return{name:"d-hide",value:t}}function Le(e){var t=function(e){function t(e){Ot(this,t);var n=At(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.elem.on(n.match[0],function(){n.evaluateOnce()}),n}return Rt(t,e),t}(e);return t.evaluate=!1,{name:"d-on",value:t}}function Pe(e){var t=function(e){function t(){return Ot(this,t),At(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return Rt(t,e),St(t,[{key:"afterUpdate",value:function(e){var t=this.elem;e?t.show():t.hide()}}]),t}(e);return{name:"d-show",value:t}}function De(e){var t=function(e){function t(){return Ot(this,t),At(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return Rt(t,e),St(t,[{key:"afterUpdate",value:function(e,t){var n=this.elem;e=new It(e).$,new It(t).forEach(function(t,r){e[r]||n.removeCSS(r)}),n.css(e)}}]),t}(e);return{name:"d-style",value:t}}function Ne(e){var t=function(e){function t(){return Ot(this,t),At(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return Rt(t,e),St(t,[{key:"afterUpdate",value:function(e){this.elem.text(v(e)?"":""+e)}}]),t}(e);return{name:"d-text",value:t}}function Me(e){var t=function(e){function t(e){Ot(this,t);var n=At(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),r=n.elem,i=n.evaluateOnce();return c(i)&&r.validate(i),n}return Rt(t,e),t}(e);return t.evaluate=!1,{name:"d-validate",value:t}}function Ue(e){var t=function(e){function t(e){Ot(this,t);var n=At(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),r=n.$$,i=r._value,o=r.parent,a=n.elem,u=a.prop("type");n.prop=Wn(a.name,[u,a]),n.type=u;var c=o.$$.evaluate("{"+i+"}",function(e){n.setProp(e)},n),l=n.getProp(c);return v(c)||"checkbox"===u?o[i]=l:n.setProp(c),a.on(Vn(a.name,[u]),function(e){e.target===a.$[0]&&(o[i]=n.getProp(o[i]))}),n}return Rt(t,e),St(t,[{key:"setProp",value:function(e){var t=this.elem,n=this.prop,r=this.type;"text"===n?t.text(e):t.prop(n,Hn(t.name,[e,r,t.$[0].value]))}},{key:"getProp",value:function(e){var t=this.elem,n=this.prop,r=this.type;return"text"===n?t.text():zn(t.name,[t.prop(n),r,t.$[0].value,e])}}]),t}(e);return t.evaluate=!1,{name:"d-value",value:t}}function Be(){var e=ye("d-root").first();if(!e.length)throw new Error("No d-root element is found! (initApp)");qe(ur,Jn),E(cr,function(e,t){if("evaluate"!==t){if(!c(e))return void console.warn('The "'+t+'" mixin is not a function and will not be registered (initApp)');if(!Xn.test(t))return void console.warn('Name "'+t+'" is not allowed for mixins so the mixin will not be registered (initApp)');if(!Ge(e))return void console.warn('The "'+t+'" mixin does not extend Mixin and will not be registered (initApp)');Qn[t]=e,j(e,{_match:new RegExp("^"+t+"(?:-([\\s\\S]+))?$")})}});var t=e.attr("block");if(!Jn[t])throw new Error('No "'+t+'" block is registered! (initApp)');var n=Nn.createComment(" d-root: start "),r=e.parent();n.add(Nn.createComment(" d-root: end ")),e.replace(n),Fe({node:{name:t,attrs:{},children:new Yt([])},after:n.first(),parent:r})}function qe(e,t){E(e,function(e,n){if("collapseWhiteSpace"!==n&&"defaultArgs"!==n&&"template"!==n){if(!c(e))return void console.warn('The "'+n+'" block is not a function and will not be registered (initApp)');if(!Yn.test(n)&&"#d-item"!==n)return void console.warn('Name "'+n+'" is not allowed for blocks so the block will not be registered (initApp)');if(!Ve(e))return void console.warn('The "'+n+'" block does not extend Block and will not be registered (initApp)');var r=Object.create(t);t[n]={block:e,html:He(pn(""+(e.template||""),e.collapseWhiteSpace)),children:r},qe(e,r)}})}function Ie(e,t){E(e,function(e){var n=e(t,Fe),r=n.name,i=n.value;Object.defineProperty(t,r,{value:i,enumerable:!0})})}function Fe(e){var t=e.node,n=e.after,r=e.parent,i=e.parentBlock,o=e.parentScope;o=t&&t.block||o;var a=t&&t.name||"UnknownBlock",u=t&&t.attrs||{},c=t&&t.children||new Yt([]),l=r.prop("namespaceURI")===nr?Nn.svg():new Pn(Nn.template().$[0].content),s=o?o.$$.Block.children:Jn,f=t&&t.name&&s[t.name]?s[t.name].block:null,h=void 0;if(!c.length&&(h=a.match(/^d-block-([\s\S]+)$/)||"d-block"===a)&&(f=Jn["d-block"].block,u.name=h?h[1]:null),!f){var d=function(){var e=t.value,c=t.children;if("#text"===a&&Kn.test(e))return{v:Fe({node:{name:"d-text",attrs:{value:e},children:new Yt([]),block:o},after:n,parent:r,parentBlock:i,parentScope:o})};var s=l.create(a),f=new Yt([]),h=new It(u).object(function(e,t,n){var r=E(Qn,function(e,t){var r=n.match(e._match);if(r)return{match:r,name:t}});return r?void f.push({name:r.name,match:r.match,value:t,elem:s,parentBlock:i,parentScope:o}):void(e[n]=o.$$.evaluate(t,function(e){s.attr(n,e)},i))}).$;return v(e)||s.text(e),h&&s.attr(h),n.length?s.insertAfter(n):s.into(r),n=new Pn,c&&ze(c).forEach(function(e){var t=Fe({node:e,after:n,parent:s,parentBlock:i,parentScope:o});n=t instanceof ur?t.$$.elems.end:t}),f.forEach(function(e){We(e)}),{v:s}}();if("object"===("undefined"==typeof d?"undefined":Et(d)))return d.v}var p=t&&t.name?s[t.name]:null,g=new f({name:a,args:u,children:c,block:p,parent:r,parentBlock:i,parentScope:o});Object.defineProperties(g,{args:{value:g.args},global:{value:g.global}});var m="d-elements"===a?new Yt(g.args.value||[]):He(p.html,g);"d-elements"===a&&"#d-item"===i.$$.name&&(m=He(m,i));var y=g.$$,w=g.args,$=g.global,k=Ct(g,["$$","args","global"]),b=_t({},f.defaultArgs,w);if(delete k.$,delete k.$$,y.args=Qe(b),y.locals=Qe(k),y.global=Qe($,"global",o),"#d-item"===a){for(var x,O=(x={},jt(x,t.itemName,t.item),jt(x,t.indexName,t.index),x),S=g,j=o,_=void 0;!_&&(S=S.$$.parentBlock);)_="#d-item"===S.$$.name;_&&(j=S.$$.scope),y.Block=o.$$.Block,y.privateScope=Qe(O),Ze(y.scope=Object.create(j),O,y.privateScope)}"d-each"===a&&(y.scope=Object.create(o)),Ze(w,b,y.args),Ze($,$,y.global),Ze(g,k,y.locals);try{g.afterConstruct()}catch(e){console.error("Uncaught error in "+a+"#afterConstruct:",e)}var T=new Pn([y.elems.start,y.elems.end]);n.length?T.insertAfter(n):T.into(r),n=y.elems.start,ze(m).forEach(function(e){var t=Fe({node:e,after:n,parent:r,parentBlock:g,parentScope:o});if(t instanceof ur){var i=t.$$.elems;n=i.end,y.elems.content.add(i.start,i.content,i.end)}else n=t,y.elems.content.add(t)});try{g.afterRender()}catch(e){console.error("Uncaught error in "+a+"#afterRender:",e)}return g}function We(e){var t=e.name,n=e.value,r=e.match,i=e.elem,o=e.parentBlock,a=e.parentScope,u=Qn[t];new u({value:n,match:r,elem:i,parentBlock:o,parentScope:a})}function He(e,t){return new Yt(e||[]).map(function(e){var n=e.name,r=e.attrs,i=e.value,o=e.children,a={name:n,value:i,attrs:_t({},r)};return t&&(a.block=t),o&&(a.children=He(o,t)),a})}function ze(e){return new Yt(e||[]).concat({}).object(function(e,t){var n=t.name,r=e.html,i=e.ifElse;"d-else-if"!==n&&"d-else"!==n?(i&&(r.push({name:"d-if",block:i.$[0].block,children:i}),e.ifElse=null),"d-if"===n?e.ifElse=new Yt([t]):b(n)||r.push(t)):((i||r).push(t),"d-else"===n&&i&&(r.push({name:"d-if",block:i.$[0].block,children:i}),e.ifElse=null))},{html:new Yt([]),ifElse:null}).$.html}function Ve(e){return Zn.call(ur,e)&&Zn.call(ur.prototype,e.prototype)}function Ge(e){return Zn.call(cr,e)&&Zn.call(cr.prototype,e.prototype)}function Je(e){e.forEach(function(e){var t=e.watcher,n=e.watchers,r=n.indexOf(t);r!==-1&&n.splice(r,1)})}function Qe(e,t,n){var r={};return"global"===t&&(r=Object.create(n?n.$$.global:null)),new It(e).object(function(e,t,n){e[n]={value:t,watchers:{temp:new Yt([]),perm:new Yt([])}}},r).$}function Ze(e,t,n){new It(e).define(new It(t).map(function(e,t){var r=n[t];return{get:function(){return ir&&or.indexOf(r.watchers.temp)===-1&&or.push(r.watchers.temp),r.value},set:function(e){if(e!==r.value){ar||(ar=[]);var t=r.watchers.temp.slice(),n=r.value;r.watchers.temp=new Yt([]),r.value=e,t.forEach(function(e){e.onRemove(),e()}),ar.push({scope:r,oldValue:n,value:e}),setTimeout(function(){if(ar){for(var e=new Yt([]);ar.length;)for(var t=function(t){var n=ar[t],r=n.scope,i=n.value,o=n.oldValue;r.watchers.perm.forEach(function(t){e.indexOf(t)===-1&&(t(i,o),e.push(t))}),ar.splice(t,1)},n=ar.length-1;n>=0;n--)t(n);ar=null}},0)}}}}).$)}function Ye(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return new Yt(t).reduce(function(e,t){if(!c(t))return e;var n=t(e);return Ve(n)?n:e},e)}function Xe(e,t){var n=String(e),r=t-n.length;return r=r<0?0:r,lr.repeat(r).$+n}function Ke(){return Date.now()}function et(e){return arguments.length?(e=new It(e).$,new yr(new Date(e))):new yr(new Date(Ke()))}function tt(e){return wr.test(e)}function nt(e,t){return t?encodeURIComponent(e):e}function rt(e){var t=e.baseURL,n=e.data,r=e.headers,i=e.method,o=e.params,a=e.query,u=e.url,c=i.toUpperCase();e.method=c,e.url=kr(t,u,o,a),e.data=Or(n,c,r),e.headers=new It(r).object(function(e,t,n){n=new on(n).toCapitalCase().replace(/\s+/g,"-").$,e[n]=t.join(", ")}).$}function it(){if(!Ir){if(Ir=!0,Gr=(Lr.find(function(e){var t=e.name;return t===Vr})||{}).value,Qr=(Lr.find(function(e){var t=e.name;return t===Jr})||{}).value,Vr&&!Gr)throw new Error('There is no specified fallback route ("'+Vr+'")! (at initRouter)');Lr.forEach(function(e){var t=e.parentName,n=e.name,r=t||zr,i=Lr.find(function(e){var t=e.name;return t===r})||{},o=i.value;if(!o)throw new Error('No such parent route ("'+r+'") found for the route ("'+n+'")! (at initRouter)');if(!o.abstract&&n!==zr)throw new Error('Parent route must be abstract (for "'+n+'")! (at initRouter)');n!==zr&&(e.parentName=r),e.parent=n===zr?ei:o}).forEach(function(e){var t=e.name,n=e.parent,r=n.params,i=n.query,o=n.path,a=e.params,u=e.query,c=e.relativeURL,l=e.relativePath,s=e,f=0,h=l,v="";if(w(o))throw new Error("URL regexp route cannot be extended! (at initRouter)");for(;s=s.parent;)f+=new It(s.params).count,h=s.relativePath+h,v=s.relativeURL+v,s.children.push(e);if(h=new RegExp("^"+(h.replace(/\/+/g,"/").replace(/\/$/,"")||"/")+"$"),v=w(c)?h:(v+c).replace(/\/+/g,"/").replace(/\/$/,"")||"/",new It(u).proto(i),new It(a).proto(r).forEach(function(e,t,n){n[t]+=f}),t===Jr&&(new It(a).count||new It(u).count))throw new Error("Default route must not have URL or query params! (at initRouter)");e.url=v,e.validatePath=h}),ct(),Dn.on({popstate:function(){Mr.href!==qr&&(Fr=!0),Fr&&ct()},click:function(e){var t=new Pn(e.target).closest("a");t.length&&"_blank"!==t.attr("target")&&(e.preventDefault(),ut(t.attr("href")||"",!0))}})}}function ot(e){function t(e){if(e.beforeLoadRoute&&!h)try{e.beforeLoadRoute()}catch(e){console.error("Uncaught error in "+i+"#beforeLeave:",e)}h=!0}function n(e){if(e.beforeLeaveRoute&&h)try{e.beforeLeaveRoute()}catch(e){console.error("Uncaught error in "+i+"#beforeLeave:",e)}h=!1}var r=e||{},i=r.name,o=r.path,a=r.abstract,u=r.root,c=r.fallbackTo,l=r.default;if(Ir)return console.warn("Router was already initialized (at makeRoute)"),Q;if(Wr&&u)throw new Error("There can't be two root routes (\""+zr+'" and "'+i+'")! (at makeRoute)');if(Hr&&l)throw new Error("There can't be two default routes (\""+Jr+'" and "'+i+'")! (at makeRoute)');if(!i)throw new Error('State must have a non-empty string "name" property! (at makeRoute)');if(Lr.some(function(e){var t=e.name;return t===i}))throw new Error('State must have unique "name" property! (at makeRoute)');if(u&&(Wr=!0,zr=i,e.parent=null,c&&(Vr=c)),l){if(Hr=!0,Jr=i,a)throw new Error("Default route can't be abstract! (at makeRoute)");if(w(o))throw new Error("Default route can't have a regexp path! (at makeRoute)")}var s=new Kr(e);Lr.push(s);var f=void 0,h=void 0;return function(e){var r,o;return o=r=function(e){function r(e){Ot(this,r);var o=At(this,(r.__proto__||Object.getPrototypeOf(r)).call(this,e));return u&&!function(){it();var e={buildURL:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=Lr.find(function(t){var n=t.name;return n===e})||{},r=n.value;if(!r)throw new Error('There are no routes with name "'+e+'"! (at router.buildURL)');var i=r.url,o=r.encodeParams,a=r.encodeQuery;if(w(i))throw new Error("URL can be built only from the string URLs! (at router.buildURL)");var u=t.params,c=void 0===u?{}:u,l=t.query,s=void 0===l?{}:l,f=t.hash,h=void 0===f?"":f;return kr(Br,i,c,s,h,{params:o,query:a})},go:function(t,n){ut(e.buildURL(t,n),!0)},goToURL:function(e){ut(e,!0)},pushURL:function(e){ft(e,!0)},redirect:function(t,n){ut(e.buildURL(t,n))},redirectToURL:function(e){ut(e)},replaceURL:function(e){ft(e)}};o.global.router=e}(),o.__isCurrentRoute__=s===Zr||s.children.indexOf(Zr)!==-1,o.args.route=Yr,h=!1,f=at(i,function(){var e=s===Zr||s.children.indexOf(Zr)!==-1;e?t(o):n(o),o.args.route=Yr,o.__isCurrentRoute__=e}),o.__isCurrentRoute__&&t(o),o}return Rt(r,e),St(r,[{key:"beforeRemove",value:function(){f(),f=null,n(this)}}]),r}(e),r.template='<div class="dwayne-route route-'+i+'" d-show="{__isCurrentRoute__}">'+e.template+"</div>",o}}function at(e,t){return Pr.$[e]=t,function(){Pr.delete(e)}}function ut(e,t){ft(e,t),ct()}function ct(){var e=lt();if(e){var t=e;Zr=t.route,Yr=Ct(t,["route"]),O(Yr,{name:Zr.name,host:Mr.host,hostname:Mr.hostname,href:Mr.href,origin:Mr.origin,pathname:Mr.pathname,port:Mr.port,protocol:Mr.protocol,search:Mr.search})}else{if(Vr){var n=Gr,r=n.url,i=n.encodeParams,o=n.encodeQuery;return ut(kr(Br,r,{},{},"",{params:i,query:o}))}Zr=null,Yr=null}Pr.forEach(function(e){return e()})}function lt(){var e=Mr.pathname||"/",t=Mr.search||"",n=void 0;return Lr.some(function(r){if(!r.abstract){var i=r.url,o=r.validatePath,a=r.params,u=r.query,c=r.decodeParams,l=r.decodeQuery,s=Ar(l),f=new It(s.query),h={},v=((e.replace(/\/$/,"")||"/")+(w(i)?t:"")).match(o);if(v){for(var d in u)if(!f.hasOwn(d)||!u[d].test(f.$[d]))return;v.shift();for(var p in a)h[p]=st(v[a[p]],c);return n={route:r,params:h,query:f.$,hash:s.hash},!0}}}),n?n:Jr?_t({route:Qr,params:{}},Ar(Qr.decodeQuery)):void 0}function st(e,t){return t?decodeURIComponent(e):e}function ft(e,t){try{Nr[t?"pushState":"replaceState"](null,null,e),Fr=!0}catch(t){Mr.href=e}}function ht(e,t,n){var r=e.match(/^[a-z_$]+/i);if(!r)throw new Error(t);var i=r[0],o=e.slice(i.length),a=void 0;if(o&&(o.indexOf("(")||o.indexOf(")")!==o.length-1))throw new Error(n);return o&&(a=new RegExp(o.slice(1,-1))),{name:i,regexp:a}}var vt="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},dt={"#":function(e,t){e.id(t)},".":function(e,t){e.addClass(t)},$:function(e,t,n){e.attr(t,n)},"@":function(e,t,n){e.css(t,n)},"&":function(e,t,n){e.html(n)},"*":function(e,t,n){e.text(n)},"-":{".":function(e,t){e.removeClass(t)},$:function(e,t){e.removeAttr(t)},"@":function(e,t){e.removeCSS(t)}}},pt=["createImageData","createLinearGradient","createPattern","createRadialGradient","getImageData","getLineDash","isPointInPath","isPointInStroke","measureText"],gt=["arc","arcTo","beginPath","bezierCurveTo","clearRect","clip","closePath","drawFocusIfNeeded","drawImage","ellipse","fill","fillRect","fillText","lineTo","moveTo","putImageData","quadraticCurveTo","rect","resetTransform","restore","rotate","save","scale","setLineDash","setTransform","stroke","strokeRect","strokeText","transform","translate"],mt=[[],[],[]],yt=["a","abbr","address","area","article","audio","b","base","bdi","bdo","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","content","datalist","dd","del","details","dfn","dialog","div","dl","dt","element","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","i","iframe","img","input","ins","kbd","label","legend","li","link","main","mark","menu","menuitem","meta","meter","nav","noscript","ol","optgroup","option","output","p","param","pre","progress","q","rp","rt","rtc","ruby","s","samp","script","section","select","shadow","small","source","span","strong","style","sub","summary","sup","table","tbody","td","template","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr"],wt=["altGlyph","altGlyphDef","altGlyphItem","animate","animateColor","animateMotion","animateTransform","circle","clipPath","color-profile","cursor","defs","desc","discard","ellipse","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","font","font-face","font-face-format","font-face-name","font-face-src","font-face-uri","foreignObject","g","glyph","glyphRef","hatch","hatchpath","hkern","image","line","linearGradient","marker","mask","mesh","meshgradient","meshpatch","meshrow","metadata","missing-glyph","mpath","path","pattern","polygon","polyline","radialGradient","rect","set","solidcolor","stop","style","svg","switch","symbol","textPath","tref","tspan","unknown","use","view","vkern"],$t=["area","base","br","col","command","embed","hr","img","input","keygen","link","meta","param","source","track","wbr"],kt="[a-z][a-z\\d\\-_.:!@#\\$%\\^&*()\\[\\]{}\\\\='\"]*",bt="[^\\u0000-\\u0020\\s\"'>/=]+",xt=[".","+","*","?","(",")","[","]","{","}","<",">","^","$","!","=",":","-","|",",","\\"],Et="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){
return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ot=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},St=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),jt=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},_t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Tt=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;if(void 0!==a)return a.call(r)},Rt=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},Ct=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n},At=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},Lt=function(){function e(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{!r&&u.return&&u.return()}finally{if(i)throw o}}return n}return function(t,n){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),Pt=function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)},Dt={">0":{check:function(e){return e>0},text:"$n argument must be positive!",error:RangeError},">=0":{check:function(e){return e>=0},text:"$n argument must be non-negative!",error:RangeError},"<0":{check:function(e){return e<0},text:"$n argument must be negative!",error:RangeError},"<=0":{check:function(e){return e<=0},text:"$n argument must be non-positive!",error:RangeError},"!!":{check:function(e){return!v(e)},text:"$n argument must be not null or undefined!",error:TypeError},array:{check:t,text:"$n argument must be an array!",error:TypeError},"array||!":{check:function(e){return t(e)||v(e)},text:"$n argument must be an array, or undefined, or null!",error:TypeError},arrayLike:{check:n,text:"$n argument must be array-like!",error:TypeError},"arrayLike||!":{check:function(e){return n(e)||v(e)},text:"$n argument must be array-like, or undefined, or null!",error:TypeError},date:{check:i,text:"$n argument must be a date!",error:TypeError},"date||!":{check:function(e){return i(e)||v(e)},text:"$n argument must be a date, or undefined, or null!",error:TypeError},dateLike:{check:o,text:"$n argument must be date-like!",error:TypeError},"dateLike||!":{check:function(e){return o(e)||v(e)},text:"$n argument must be date-like, or undefined, or null!",error:TypeError},function:{check:c,text:"$n argument must be a function!",error:TypeError},"function||!":{check:function(e){return c(e)||v(e)},text:"$n argument must be a function, or undefined, or null!",error:TypeError},int:{check:l,text:"$n argument must be an integer!",error:TypeError},"int||!":{check:function(e){return l(e)||v(e)},text:"$n argument must be an integer, or undefined, or null!",error:TypeError},intLike:{check:s,text:"$n argument must be integer-like!",error:TypeError},"intLike||!":{check:function(e){return s(e)||v(e)},text:"$n argument must be integer-like, or undefined, or null!",error:TypeError},number:{check:d,text:"$n argument must be a number!",error:TypeError},"number||!":{check:function(e){return d(e)||v(e)},text:"$n argument must be a number, or undefined, or null!",error:TypeError},numberLike:{check:p,text:"$n argument must be number-like!",error:TypeError},"numberLike||!":{check:function(e){return p(e)||v(e)},text:"$n argument must be number-like, or undefined, or null!",error:TypeError},object:{check:g,text:"$n argument must be an object!",error:TypeError},"object||!":{check:function(e){return g(e)||v(e)},text:"$n argument must be an object, or undefined, or null!",error:TypeError},regexp:{check:w,text:"$n argument must be a regular expression!",error:TypeError},"regexp||!":{check:function(e){return w(e)||v(e)},text:"$n argument must be a regular expression, or undefined, or null!",error:TypeError},string:{check:$,text:"$n argument must be a string!",error:TypeError},"string||!":{check:function(e){return $(e)||v(e)},text:"$n argument must be a string, or undefined, or null!",error:TypeError}},Nt=vt.Symbol||{toStringTag:"Symbol.toStringTag",iterator:Math.random().toString(36)},Mt=["1st","2nd","3rd","4th","5th","6th","7th"],Ut=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];Ot(this,e);for(var n={},r=0,i=t.length;r<i;r++){var o=t[r];if(!R(o))throw new Error("Each element of an array must be a single char! (in Alphabet)");n[o]=o}Object.defineProperty(this,"$$",{value:n})}return St(e,[{key:"add",value:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];for(var r=0,i=t.length;r<i;r++){var o=t[r];if(!R(o))throw new Error("Each argument must be a single char! (in Alphabet#add)");this.$$[o]=o}return this}},{key:"contains",value:function(e){T([e],["string"],"Alphabet#contains");for(var t=this.$$,n=0,r=e.length;n<r;n++)if(!t[e[n]])return!1;return!0}},{key:"delete",value:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];for(var r=0,i=t.length;r<i;r++){var o=t[r];if(!R(o))throw new Error("Each argument must be a single char! (in Alphabet#delete)");delete this.$$[o]}return this}},{key:"get",value:function(){return Object.keys(this.$$)}},{key:"token",value:function e(t){T([t],[["intLike",">0"]],"Alphabet#token");for(var n=Object.keys(this.$$),r=n.length,e="",i=0;i<t;i++)e+=n[Math.floor(Math.random()*r)];return e}}]),e}();j(Ut.prototype,jt({},Nt.toStringTag,"Alphabet"));var Bt=function(e){function n(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],r=e.$$,i=r.mode,o=r.default,a=r.cases,u=E(a,function(e){var n=e.value,r=e.case;if("boolean"===i&&r||"equals"===i&&r==t||"strictEquals"===i&&r===t||"call"===i&&r(t))return{case:r,value:n}});return b(u)&&(u={value:o}),c(u.value)?(n=_(n,!0),n.push(t,u.case),u.value.apply(null,n)):u.value}var t,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"equals",o=arguments[2];Ot(this,n);var a=At(this,(n.__proto__||Object.getPrototypeOf(n)).call(this));$(r)&&(b(arguments[1])||(o=i),i=r,r={});var u=[];return E(r,function(e,t){u.push({case:t,value:e})}),Object.defineProperty(e,"$$",{value:{cases:u,mode:i,default:o}}),Object.setPrototypeOf(e,n.prototype),t=e,At(a,t)}return Rt(n,e),St(n,[{key:"case",value:function(e,n){var r=this;return t(e)||(e=[e]),E(e,function(e){r.$$.cases.push({case:e,value:n})}),this}},{key:"default",value:function(e){return this.$$.default=e,this}},{key:"mode",value:function(e){return this.$$.mode=e,this}}]),n}(Function);j(Bt.prototype,jt({},Nt.toStringTag,"Switcher"));var qt=A("call",function(e){return e}).case(function(e){return new It(e)===e},function(e){return new(Object.getPrototypeOf(e).constructor)(new It(e.$).deepClone().$)}).case(a,function(e,t){return e.clone(t)}).case(i,function(e){return new Date(e)}).case(w,function(e){return new RegExp(e.source,e.toString().match(/[gimuy]*$/)[0])}).case(t,function(){return[]}).case(m,function(){return{}}),It=function(){function r(e){return Ot(this,r),e instanceof r?e:void Object.defineProperty(this,"$",{value:e})}return St(r,[{key:"assign",value:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var i=this.$;return E(i&&arguments,function(e){E(new r(e).$,function(e,t){i[t]=e})}),this}},{key:"average",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return T([e],["function||!"],"Super#average"),this.sum(e)/this.count}},{key:"call",value:function(e){T([e],["function"],"Super#call");for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return e.apply(this,n)}},{key:"clone",value:function e(){var t=this.$,e=qt(t,[t,!1]);return e!==t&&E(t,function(t,n){e[n]=t}),new this.constructor(e)}},{key:"create",value:function(e){return x(y(this.$)?void 0:Object.create(this.$,e))}},{key:"deepAssign",value:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=this.$;return y(r)?this:(E(arguments,function(e){P(r,e)}),this)}},{key:"deepClone",value:function(){return new this.constructor(D(this.$))}},{key:"deepEquals",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return N(this.$,e,!1)}},{key:"deepEvery",value:function(e,t){return 1!==arguments.length||c(e)?1===arguments.length?t=1/0:arguments.length||(t=1/0,e=Boolean):(t=e,e=Boolean),T([e,t],["function",["numberLike",">0"]],"Super#deepEvery"),t=Number(t),M(this.$,e,t,[{key:null,value:this.$}])}},{key:"deepFilter",value:function(e,t){1!==arguments.length||c(e)?1===arguments.length?t=1/0:arguments.length||(t=1/0,e=Boolean):(t=e,e=Boolean),T([e,t],["function",["numberLike",">0"]],"Super#deepFilter");var n=U(this.$,e,t,[{key:null,value:this.$}]);return x(v(n)?n:n||{})}},{key:"deepFind",value:function(e,t){return 1!==arguments.length||c(e)?1===arguments.length?t=1/0:arguments.length||(t=1/0,e=Boolean):(t=e,e=Boolean),T([e,t],["function",["numberLike",">0"]],"Super#deepFind"),B(this.$,e,t,[{key:null,value:this.$}])}},{key:"deepForEach",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1/0;return T([e,t],["function",["numberLike",">0"]],"Super#deepForEach"),t=Number(t),q(this.$,e,t,[{key:null,value:this.$}]),this}},{key:"deepForEachEntry",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1/0;return T([e,t],["function",["numberLike",">0"]],"Super#deepForEach"),t=Number(t),I(this.$,e,t,[{key:null,value:this.$}]),this}},{key:"deepFreeze",value:function(){return F(this.$),this}},{key:"deepMap",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1/0;return T([e,t],["function",["numberLike",">0"]],"Super#deepMap"),t=Number(t),x(W(this.$,e,t,[{key:null,value:this.$}]))}},{key:"deepReduce",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1/0,n=arguments[2];T([e,t],["function",["numberLike",">0"]],"Super#deepReduce"),t=Number(t);var r=this.$,i=[{key:null,value:this.$}];return arguments.length<3?H(r,e,t,!1,void 0,i).IV:H(r,e,t,!1,{IV:n},i).IV}},{key:"deepSome",value:function(e,t){return 1!==arguments.length||c(e)?1===arguments.length?t=1/0:arguments.length||(t=1/0,e=Boolean):(t=e,e=Boolean),T([e,t],["function",["numberLike",">0"]],"Super#deepSome"),t=Number(t),z(this.$,e,t,[{key:null,value:this.$}])}},{key:"deepStrictEquals",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return N(this.$,e,!0)}},{key:"define",value:function(e,t){return arguments.length>=2&&(e=jt({},e,t)),e=new r(e).$,g(this.$)&&Object.defineProperties(this.$,e),this}},{key:"delete",value:function(){for(var e=this.$,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return E(e&&n,function(t){delete e[t]}),this}},{key:"equals",value:function(e){var t=this.$;return e=new r(e).$,t==e||f(t)&&f(e)}},{key:"every",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Boolean;return T([e],["function"],"Super#every"),E(this.$,function(t,n,r){if(!e(t,n,r))return!1})!==!1}},{key:"filter",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Boolean;T([e],["function"],"Super#filter");var t=this.$,r=n(t),i=r?[]:v(t)?t:{};return E(t,function(n,o){e(n,o,t)&&(r?i.push(n):i[o]=n)}),x(i)}},{key:"find",value:function(e){return T([e],["function"],"Super#find"),E(this.$,function(t,n,r){if(e(t,n,r))return{key:n,value:t}})||null}},{key:"forEach",value:function(e){return T([e],["function"],"Super#forEach"),E(this.$,function(t,n,r){e(t,n,r)}),this}},{key:"freeze",value:function(){return Object.freeze(this.$),this}},{key:"get",value:function(e,t){arguments.length>=2&&(e=jt({},e,t));var n=this.$;return E(g(n)&&new r(e).$,function(e,t){Object.defineProperty(n,t,{get:e})}),this}},{key:"has",value:function(e){var t=this.$;return!!g(t)&&e in t}},{key:"hasOwn",value:function(e){var t=this.$;return!!g(t)&&{}.hasOwnProperty.call(t,e)}},{key:"instanceof",value:function(e){return this.$ instanceof e}},{key:"isFrozen",value:function(){return Object.isFrozen(this.$)}},{key:"json",value:function(e,n){return 1!==arguments.length||c(e)||t(e)||[].unshift.call(arguments,null),[].unshift.call(arguments,this.$),JSON.stringify.apply(JSON,arguments)}},{key:"keyOf",value:function(e){var t=E(this.$,function(t,n){if(t==e||f(t)&&f(e))return n});return b(t)?null:t}},{key:"keyOfStrict",value:function(e){var t=E(this.$,function(t,n){if(t===e||f(t)&&f(e))return n});return b(t)?null:t}},{key:"keys",value:function(){var e=this.$;return x(g(e)?Object.keys(e):[])}},{key:"map",value:function(e){T([e],["function"],"Super#map");var t=this.$,r=n(t)?[]:h(t)?null:{};return E(t,function(n,i){r[i]=e(n,i,t)}),x(r)}},{key:"max",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return T([e],["function||!"],"Super#max"),this.object(function(t,n,r,i){var o=Number(e?e(n,r,i):n);o>t.value&&(t.key=r,t.value=o)},{key:null,value:-(1/0)}).$}},{key:"min",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return T([e],["function||!"],"Super#min"),this.object(function(t,n,r,i){var o=Number(e?e(n,r,i):n);o<t.value&&(t.key=r,t.value=o)},{key:null,value:1/0}).$}},{key:"object",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return T([e],["function"],"Super#object"),E(this.$,function(n,r,i){e(t,n,r,i)}),x(t)}},{key:"prop",value:function(e,t){return arguments.length<=1&&$(e)?this.$?this.$[e]:void 0:(arguments.length>=2&&(e=jt({},e,t)),this.assign(e))}},{key:"propertyDescriptor",value:function(e){var t=this.$;return g(t)?Object.getOwnPropertyDescriptor(t,e):void 0}},{key:"propertyNames",value:function(){var e=this.$;return x(g(e)?Object.getOwnPropertyNames(e):[])}},{key:"propertySymbols",value:function(){var e=this.$;return x(g(e)?Object.getOwnPropertySymbols(e):[])}},{key:"proto",value:function(e){var t=this.$,n=!v(t);return arguments.length?(n&&(g(e)||h(e))&&Object.setPrototypeOf(t,e),this):n?new r(Object.getPrototypeOf(t)):new r}},{key:"reduce",value:function(e,t){T([e],["function"],"Super#reduce");var n=this.$,r=void 0;return 1===arguments.length&&E(n,function(e,n){return r=n,t=e,!0}),E(n,function(i,o){o!==r&&(t=e(t,i,o,n))}),t}},{key:"set",value:function(e,t){arguments.length>=2&&(e=jt({},e,t));var n=this.$;return E(g(n)&&new r(e).$,function(e,t){Object.defineProperty(n,t,{set:e})}),this}},{key:"some",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Boolean;return T([e],["function"],"Super#some"),E(this.$,function(t,n,r){if(e(t,n,r))return!0})||!1}},{key:"strictEquals",value:function(e){var t=this.$;return e=new r(e).$,t===e||f(t)&&f(e)}},{key:"sum",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return T([e],["function||!"],"Super#sum"),this.reduce(function(t,n,r,i){return t+Number(e?e(n,r,i):n)},0)}},{key:"toJSON",value:function(){return this.$}},{key:"value",value:function(e,t){arguments.length>=2&&(e=jt({},e,t));var n=this.$;return E(g(n)&&new r(e).$,function(e,t){Object.defineProperty(n,t,{value:e})}),this}},{key:"values",value:function(){var e=[];return E(this.$,function(t){e.push(t)}),x(e)}},{key:"word",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return T([e],["function||!"],"Super#word"),this.reduce(function(t,n,r,i){return t+String(e?e(n,r,i):n)},"")}},{key:"count",get:function(){var e=this.$;return g(e)?n(e)?e.length:Object.keys(e).length:0}},{key:"toStringTag",get:function(){return e(this.$)}},{key:"type",get:function(){return Et(this.$)}}],[{key:"addStaticProperties",value:function(e,t){return arguments.length>=2&&(e=jt({},e,t)),j(this,e),this}},{key:"addInstanceProperties",value:function(e,t){return arguments.length>=2&&(e=jt({},e,t)),j(this.prototype,e),this}}]),r}();j(It.prototype,jt({},Nt.toStringTag,"Super")),mt[0].push({check:function(){return!0},cls:It});var Ft={},Wt=Nt.iterator,Ht=function(){function e(t){function n(t){"pending"===s.status&&!function(){s.status="rejected",s.value=t;for(var n=0,r=u.length;n<r;n++)s.handled=!0,u[n](t);var i=e.onUnhandledRejection,o=e.onError;c(o)&&o(t),setTimeout(function(){!s.handled&&c(i)&&i(t)},1)}()}function r(e){if("pending"===s.status){if(e&&c(e.then))return e.then(function(e){r(e)},function(e){n(e)});s.status="fulfilled",s.value=e;for(var t=0,i=a.length;t<i;t++)s.handled=!0,a[t](e)}}if(Ot(this,e),!c(t))throw new TypeError("Promise resolver "+{}.toString.call(t)+" is not a function");var i=void 0,o=void 0,a=[],u=[],l=this,s={handled:!1,get status(){return i},set status(e){i=e,l.status=e},get value(){return o},set value(e){o=e,l.value=e}};s.status="pending",s.value=void 0,j(this.$$={},{"get/set handled":{get:function(){return s.handled},set:function(e){e===Ft&&(s.handled=!0)}},handle:function(e,t,n,r,i){if(i===Ft){var o=c(t)?function(e){try{n(t(e))}catch(e){r(e)}}:null;"resolve"===e?a.push(o||function(e){return n(e)}):"reject"===e&&u.push(o||function(e){return r(e)})}},"get status":function(){return s.status},"get value":function(){return s.value}});try{t(r,n)}catch(e){n(e)}}return St(e,[{key:"abort",value:function(){}},{key:"catch",value:function(e){return this.then(null,e)}},{key:"finally",value:function(t){var n=c(t);return this.then(function(r){return e.resolve(n?t(r,!0):0).then(function(){return r})},function(r){return e.resolve(n?t(r,!1):0).then(function(){return e.reject(r)})})}},{key:"then",value:function(t,n){var r=this.$$;if("pending"===r.status)return new e(function(e,i){r.handle("reject",n,e,i,Ft),r.handle("resolve",t,e,i,Ft)});r.handled=Ft;var i=r.value,o=void 0,a=void 0;if("fulfilled"===r.status?(o="resolve",a=t):(o="reject",a=n),!c(a))return e[o](i);try{return e.resolve(a(i))}catch(t){return e.reject(t)}}}],[{key:"all",value:function(t){var n=[],r=0;if(t[Wt])return t=t[Wt](),new e(function(i,o){for(var a=void 0,u=0,c=function(){var t=e.resolve(a.value);r++,function(e){t.then(function(t){r--,n[e]=t,setTimeout(function(){a.done&&!r&&i(n)},1)},o)}(u++)};!(a=t.next()).done;)c();if(!u)return e.resolve([])});var i=t.length;return i?(r=i,new e(function(o,a){for(var u=function(i){var u=e.resolve(t[i]);u.then(function(e){r--,n[i]=e,r||o(n)},a)},c=0;c<i;c++)u(c)})):e.resolve([])}},{key:"race",value:function(t){return t[Wt]?(t=t[Wt](),new e(function(e,n){for(var r=void 0;!(r=t.next()).done;)r.value.then(e,n)})):new e(function(e,n){for(var r=0,i=t.length;r<i;r++)t[r].then(e,n)})}},{key:"reject",value:function(t){return new e(function(e,n){n(t)})}},{key:"resolve",value:function(t){return t&&c(t.then)?t:new e(function(e){e(t)})}}]),e}();Ht.onError=null,Ht.onUnhandledRejection=console.error.bind(console,"%s %o","Uncaught (in promise)"),j(Ht.prototype,jt({},Nt.toStringTag,"Promise"));var zt=function(e){function t(){function e(){var t=this,n=arguments;if(++e.$$.called<e.$$.canBeCalled){var i=function(){var i=e.$$,o=i.before,a=i.after,u=i.sync,c=i.contextLocked,l=e.$$,s=l.context,f=l.args,h=void 0;if(s=c?s:s||t,f=f.concat(_(n)),u)return E(o,function(t){f=t.call(s,_(f),e)}),h=r.apply(s,_(f)),E(a,function(t){h=t.call(s,h,e)}),{v:h};var v=Ht.resolve(f);return E(o,function(t){v=v.then(function(n){return t.call(s,_(n),e)})}),v=v.then(function(e){return r.apply(s,_(e))}),E(a,function(t){v=v.then(function(n){return t.call(s,n,e)})}),{v:v}}();if("object"===("undefined"==typeof i?"undefined":Et(i)))return i.v}}var n,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){};Ot(this,t);var i=At(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return Object.defineProperty(e,"$$",{value:{after:[],args:[],argsLocked:[],before:[],called:0,canBeCalled:1/0,context:null,contextLocked:!1,sync:!0}}),Object.defineProperty(e,"$",{value:r}),Object.setPrototypeOf(e,t.prototype),n=e,At(i,n)}return Rt(t,e),St(t,[{key:"after",value:function e(t){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];T([t],["function"],"Func#after");var e=this.$$.after;return n?e.push(t):e.unshift(t),this}},{key:"apply",value:function(e,t){return function(){}.apply.apply(this,arguments)}},{key:"async",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return this.$$.sync=!e,this}},{key:"before",value:function e(t){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];T([t],["function"],"Func#before");var e=this.$$.before;return n?e.unshift(t):e.push(t),this}},{key:"bind",value:function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return this.bindContext(e).bindArgs(n)}},{key:"bindArgs",value:function(e){var t=this.$$;return t.args=t.args.concat(_(e)),this}},{key:"bindContext",value:function(e){var t=this.$$;return t.contextLocked||(t.context=e),this}},{key:"call",value:function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return function(){}.call.apply(this,arguments)}},{key:"canBeCalled",value:function(e){return this.$$.canBeCalled=e,this}},{key:"limitArgsTo",value:function(e){return this.before(function(t){return t.slice(0,e)},!1)}},{key:"lock",value:function(e,t){return this.lockContext(e).lockArgs(t)}},{key:"lockArgs",value:function(e){var t=this.$$;return t.args=t.argsLocked=t.argsLocked.concat(_(e)),this}},{key:"lockContext",value:function(e){var t=this.$$;return t.contextLocked||(t.context=e,t.contextLocked=!0),this}},{key:"timing",value:function(e){return e=arguments.length?String(e):this.$.name||"anonymous",this.before(function(t){return console.time(e),t},!1),this.after(function(t){return console.timeEnd(e),t},!1),this}},{key:"toString",value:function(){return function(){}.toString.call(this.$)}},{key:"unbind",value:function(){return this.unbindContext().unbindArgs()}},{key:"unbindArgs",value:function(){var e=this.$$;return e.args=e.argsLocked,this}},{key:"unbindContext",value:function(){var e=this.$$;return e.contextLocked||(e.context=null),this}},{key:"called",get:function(){return this.$$.called}}]),t}(It);j(zt.prototype,jt({},Nt.toStringTag,"Func")),mt[1].push({check:c,cls:zt});var Vt=Math.PI/180,Gt=180/Math.PI,Jt=Math.LN2,Qt=Math.LN10,Zt=function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return Ot(this,t),At(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,+e))}return Rt(t,e),St(t,[{key:"acos",value:function(e){return(e?Gt:1)*Math.acos(this.$)}},{key:"asin",value:function(e){return(e?Gt:1)*Math.asin(this.$)}},{key:"atan",value:function(e){return(e?Gt:1)*Math.atan(this.$)}},{key:"cos",value:function(e){return Math.cos((e?Vt:1)*this.$)}},{key:"interval",value:function(e){function t(){return i=!0,clearTimeout(o)}var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];T([e],["function"],"Num#interval"),e=new zt(e).bindContext({abort:t}),n=_(n);var r=this.$,i=void 0,o=setTimeout(function t(){i||(e.apply(null,n),i||(o=setTimeout(t,r)))},0);return t}},{key:"log",value:function(e){return Math.log(e)/Math.log(this.$)}},{key:"pow",value:function(e){return Math.pow(this.$,e)}},{key:"root",value:function(e){return Math.pow(this.$,1/e)}},{key:"sin",value:function(e){return Math.sin((e?Vt:1)*this.$)}},{key:"tan",value:function(e){return Math.tan((e?Vt:1)*this.$)}},{key:"timeout",value:function e(t){var n=this,e=void 0,r=void 0,i=new Ht(function(i,o){r=o,e=setTimeout(i,n.$,t)});return i.abort=function(){return clearTimeout(e),r(new Error("Timeout was aborted")),this},i}},{key:"toBase",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10;return this.$.toString(e)}},{key:"toExponential",value:function(e){return this.$.toExponential(e)}},{key:"toFixed",value:function(e){return this.$.toFixed(e)}},{key:"toPrecision",value:function(e){return this.$.toPrecision(e)}},{key:"valueOf",value:function(){return Number(this.$)}},{key:"abs",get:function(){return Math.abs(this.$)}},{key:"acosh",get:function(){var e=this.$;return Math.log(e+Math.sqrt(e*e-1))}},{key:"asinh",get:function(){var e=this.$;return Math.log(e+Math.sqrt(e*e+1))}},{key:"atanh",get:function(){var e=this.$;return Math.log((1+e)/(1-e))/2}},{key:"cbrt",get:function(){var e=Math.pow(Math.abs(this.$),1/3);return this.$>0?e:-e}},{key:"ceil",get:function(){return Math.ceil(this.$)}},{key:"cosh",get:function(){var e=this.exp;return(e+1/e)/2}},{key:"cube",get:function(){return this.$*this.$*this.$}},{key:"exp",get:function(){return Math.exp(this.$)}},{key:"floor",get:function(){return Math.floor(this.$)}},{key:"ln",get:function(){return Math.log(this.$)}},{key:"log2",get:function(){return this.ln/Jt}},{key:"log10",get:function(){return this.ln/Qt}},{key:"round",get:function(){return Math.round(this.$)}},{key:"sign",get:function(){var e=this.$;return e?e>0?1:-1:e}},{key:"sinh",get:function(){var e=this.exp;return(e-1/e)/2}},{key:"sq",get:function(){return this.$*this.$}},{key:"sqrt",get:function(){return Math.sqrt(this.$)}},{key:"tanh",get:function(){var e=this.$;if(!u(e))return this.sign;var t=Math.exp(2*e);return(t-1)/(t+1)}}]),t}(It);j(Zt.prototype,jt({},Nt.toStringTag,"Num")),mt[1].push({check:d,cls:Zt});var Yt=function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return Ot(this,t),At(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,_(e instanceof t?e.$:e)))}return Rt(t,e),St(t,[{key:"concat",value:function(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];var i=_(this.$,!0);return E(arguments,function(e){return e=new It(e).$,n(e)&&!$(e)?void E(e,function(e){i.push(e)}):void i.push(e)}),new this.constructor(i)}},{key:"indexOf",value:function(e){var t=this.keyOf(e);return null===t?-1:Number(t)}},{key:"indexOfStrict",value:function(e){var t=this.keyOfStrict(e);return null===t?-1:Number(t)}},{key:"join",value:function(e){return this.$.join.apply(this.$,arguments)}},{key:"pop",value:function(){return this.$.pop()}},{key:"push",value:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.$.push.apply(this.$,arguments),this}},{key:"random",value:function(){return this.$[Y(0,this.$.length-1)]}},{key:"reverse",value:function(){return this.$.reverse(),this}},{key:"shift",value:function(){return this.$.shift()}},{key:"shuffle",value:function(){var e=this.$.length;return this.forEach(function(t,n,r){var i=n+Math.floor((e-n)*Math.random());r[n]=r[i],r[i]=t})}},{key:"slice",value:function(e,t){return new this.constructor(this.$.slice.apply(this.$,arguments))}},{key:"sort",value:function(e){return T([e],["function||!"],"Arr#sort"),this.$.sort(e),this}},{key:"sortAsc",value:function(){return this.sort(X)}},{key:"sortDesc",value:function(){return this.sort(function(e,t){return X(t,e)})}},{key:"splice",value:function(e,n){for(var r=arguments.length,i=Array(r>2?r-2:0),o=2;o<r;o++)i[o-2]=arguments[o];return new t(this.$.splice.apply(this.$,arguments))}},{key:"string",value:function(){return this.join("")}},{key:"unshift",value:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.$.unshift.apply(this.$,arguments),this}},{key:"first",get:function(){return this.$[0]}},{key:"last",get:function(){var e=this.$;return e[e.length-1]}},{key:"length",get:function(){return this.$.length}}]),t}(It);j(Yt.prototype,jt({},Nt.toStringTag,"Arr")),mt[1].push({check:n,cls:Yt});var Xt={buffer:"ArrayBuffer",binary:"BinaryString",dataURL:"DataURL",text:"Text"},Kt=vt,en=Kt.URL,tn=function(e){function t(){return Ot(this,t),At(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return Rt(t,e),St(t,[{key:"readAs",value:function(e,t){var n=this;if(!Xt[e])throw new Error("1st argument must be one of following values: buffer, binary, dataURL, text");var r=new FileReader,i=void 0;c(t)&&(r.onprogress=function(e){t(e,this)});var o=new Ht(function(t,o){i=o,r.onerror=function(e){var t=e.target;r&&o(t.error)},r.onload=function(e){var n=e.target;t(n.result)},r["readAs"+Xt[e]](n.$)});return o.abort=function(){return i(new Error("Reading was aborted")),r.abort(),r=null,this},o}},{key:"saveAs",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"download",t=document.createElement("a");return t.href=this.dataURL,t.setAttribute("download",e),t.click(),this}},{key:"dataURL",get:function(){return en.createObjectURL(this.$)}}]),t}(It);j(tn.prototype,jt({},Nt.toStringTag,"BlobObject")),mt[1].push({check:function(t){return/^(Blob|File)$/.test(e(t))},cls:tn});var nn={"&":"&amp;","<":"&lt;",">":"&gt;"},rn=new RegExp(new It(xt).word(function(e){return"\\"+e+"|"}).replace(/\|$/,""),"g"),on=function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return Ot(this,t),At(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,""+e))}return Rt(t,e),St(t,[{key:"capitalizeFirst",value:function(){var e=this.$;return new t(e.slice(0,1).toUpperCase()+e.slice(1))}},{key:"endsWith",value:function(e,n){return arguments.length<2&&(n=this.$.length),this.slice(0,n).revert().startsWith(new t(e).revert().$)}},{key:"escapeHTML",value:function(){var e=this.$;return E(nn,function(t,n){e=e.replace(new RegExp(n,"g"),t)}),new t(e)}},{key:"escapeRegExp",value:function(){return this.replace(rn,"\\$&")}},{key:"in",value:function(e){return!!g(e)&&this.$ in e}},{key:"indexOf",value:function(e,t){return this.$.indexOf.apply(this.$,arguments)}},{key:"lastIndexOf",value:function(e,t){return this.$.lastIndexOf.apply(this.$,arguments)}},{key:"match",value:function(e){return x(this.$.match.apply(this.$,arguments))}},{key:"repeat",value:function(e){T([e],[["intLike",">=0"]],"Str#repeat"),e=+e;for(var n=this.$,r="",i=0;i<e;i++)r+=n;return new t(r)}},{key:"replace",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return new t(this.$.replace(e,n))}},{key:"replaceString",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return e=new It(e).$,T([e],["string"],"Str#replaceString"),new t(this.$.split(e).join(n))}},{key:"revert",value:function(){for(var e=this.$,n="",r=e.length-1;r>=0;r--)n+=e[r];return new t(n)}},{key:"search",value:function(e){return T([e],["regexp"]),this.$.search.apply(this.$,arguments)}},{key:"slice",value:function(e,n){return new t(this.$.slice.apply(this.$,arguments))}},{key:"split",value:function(e){return x(this.$.split.apply(this.$,arguments))}},{key:"startsWith",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return this.$.indexOf.apply(this.$,arguments)===t}},{key:"substr",value:function(e,n){return new t(this.$.substr.apply(this.$,arguments))}},{key:"substring",value:function(e,n){return new t(this.$.substring.apply(this.$,arguments))}},{key:"toCamelCase",value:function(){return new t(ne(this.$).replace(/[\s\-_.]+/g,"-").replace(/-[^-]/g,function(e){return e[1].toUpperCase()}).replace(/^[\S]/,function(e){return e.toLowerCase()}))}},{key:"toCapitalCase",value:function(){return new t(ne(this.$).replace(/[\s\-_.]+/g," ").replace(/[\S]/g,function(e){return e.toLowerCase()===e?e:" "+e}).replace(/\s[\S]/g,function(e){return e.toUpperCase()}).replace(/\s+/g," ").replace(/^\s/,"").replace(/^[\S]/,function(e){
return e.toUpperCase()}))}},{key:"toDotCase",value:function(){return new t(ne(this.$).replace(/[\s\-_.]+/g,".").replace(/[^.]/g,function(e){return e.toLowerCase()===e?e:"."+e}).replace(/\.+/g,".").replace(/^\./,"").toLowerCase())}},{key:"toHyphenCase",value:function(){return new t(ne(this.$).replace(/[\s\-_.]+/g,"-").replace(/[^-]/g,function(e){return e.toLowerCase()===e?e:"-"+e}).replace(/-+/g,"-").replace(/^-/,"").toLowerCase())}},{key:"toLowerCase",value:function(){return new t(this.$.toLowerCase())}},{key:"toSnakeCase",value:function(){return new t(ne(this.$).replace(/[\s\-_.]+/g,"_").replace(/[^_]/g,function(e){return e.toLowerCase()===e?e:"_"+e}).replace(/_+/g,"_").replace(/^_/,"").toLowerCase())}},{key:"toSpaceCase",value:function(){return new t(ne(this.$).replace(/[\s\-_.]+/g," ").replace(/[\S]/g,function(e){return e.toLowerCase()===e?e:" "+e}).replace(/\s+/g," ").replace(/^\s/,"").toLowerCase())}},{key:"toString",value:function(){return this.$}},{key:"toUpperCase",value:function(){return new t(this.$.toUpperCase())}},{key:"trim",value:function(){return new t(this.$.replace(/^[\s\ufeff\u00a0]+|[\s\ufeff\u00a0]+$/g,""))}},{key:"trimLeft",value:function(){return new t(this.$.replace(/^[\s\ufeff\u00a0]+/,""))}},{key:"trimRight",value:function(){return new t(this.$.replace(/[\s\ufeff\u00a0]+$/,""))}},{key:"length",get:function(){return this.$.length}}]),t}(It);j(on.prototype,jt({},Nt.toStringTag,"Str")),mt[2].push({check:$,cls:on});var an="Please, submit an issue at https://github.com/dwaynejs/dwayne/issues.",un=new It({"tag-open":new RegExp("<("+kt+")\\s*","i"),"tag-close":oe(kt),comment:/<!--((?:-[^\->]|[^\->])(?:-?[^-])*[^-]?|)-->/}),cn=/^(\/?)>/,ln=new RegExp("^("+bt+")(?:\\s*=\\s*('[^']*'|\"[^\"]*\"|[^\\s\"'`<>=]+))?\\s*"),sn=document.createElement("div"),fn=A("strictEquals",function(e){return e}).case("tag-open",function(e,t){var n=t,r=n.value,i=n.selfClosing;return t={name:r,attrs:new It(t.attrs).map(function(e){return ue(e)}).$,parent:e,children:new Yt([])},e.children.push(t),i||$t.indexOf(r)!==-1||(e=t),e}).case("tag-close",function(e,t){return e.name===t.value&&(e=e.parent),e}).case(["comment","text"],function(e,t,n,r){var i={name:"#"+r,parent:e,value:t.value};return"text"===r&&"script"!==e.name&&"style"!==e.name&&(i.value=ue(i.value),n&&(i.value=new on(i.value).trim().$)),n&&/^\s*$/.test(i.value)||e.children.push(i),e}),hn=A("strictEquals",!1).case(["title","textarea","style","script"],!0),vn=function e(t){Ot(this,e),this.index=t},dn=function(e){function t(){var e,n,r,i;Ot(this,t);for(var o=arguments.length,a=Array(o),u=0;u<o;u++)a[u]=arguments[u];return n=r=At(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r.type="PARSING_ERROR",i=n,At(r,i)}return Rt(t,e),t}(Error),pn=function(e,t){function n(){throw new dn("Unexpected parsing error near index "+ae(i,a)+". "+an)}t=!!t;for(var r=new Yt([]),i=e,o=void 0,a=0,u={name:null,children:r};e.length;){try{o=ie(e,u)}catch(e){throw e instanceof vn||n(),new dn("Parsing error near index "+ae(i,a+e.index))}var c=o,l=c.type,s=c.attrs,f=c.selfClosing,h=c.index,v=c.value;a+=h,h||n();var d={type:l,value:v};"tag-open"===l&&(d.attrs=s,d.selfClosing=f),u=fn(d.type,[u,d,t]),e=e.slice(h)}return r},gn=vt.document,mn=gn.createElement("div"),yn=/(,| ) */,wn=new It(Node.prototype).propertyDescriptor("textContent")?"textContent":"innerText",$n={},kn={},bn=new Yt([]),xn="input, select, textarea, datalist, keygen, output",En=(V("click"),"http://www.w3.org/2000/svg"),On="http://www.w3.org/2000/xmlns/",Sn="http://www.w3.org/1999/xlink",jn="http://www.w3.org/1999/xhtml",_n=A("call",function(e,t){var n="svg"===t?En:e.prop("namespaceURI")||gn.documentElement.namespaceURI||jn;return gn.createElementNS(n,t)}).case(function(e){return"#comment"===e},function(){return gn.createComment("")}).case(function(e){return"#text"===e},function(){return gn.createTextNode("")}),Tn=A("strictEquals","href").case(["img","script","iframe","audio","video"],"src").case("form","action"),Rn=A("call",function(e){return e}).case($,function(e){return function(t){return new Pn(t).is(e)}}).case([t,le],function(e){return e=new Yt(e),function(t){return e.indexOf(t)!==-1}}),Cn=A("strictEquals",0).case("padding-box",function(e){return e}).case("border-box",function(e,t){return e+t}),An=A("strictEquals",function(e,t){return e+t}).case("padding-box",function(e){return e}).case("border-box",0),Ln=A("call",null).case(function(e){return"xmlns"===e||"xmlns:xlink"===e},function(e){return"svg"===e.name?On:null}).case(function(e){return/^xlink:\w/.test(e)},function(e){return e.closest("svg").length?Sn:null}),Pn=function(t){function r(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];Ot(this,r);var t=At(this,(r.__proto__||Object.getPrototypeOf(r)).call(this,function(){var t=e;return n(t)&&(se(t)||fe(t)||he(t)||a(t)||de(t)||ve(t))&&(t=[t]),new Yt(_(new It(t).$,!0)).object(function(e,t){return e.indexOf(t)===-1&&(a(t)||se(t)||fe(t)||he(t)||de(t)||ve(t))?e.push(t):void(le(t)&&e.push.apply(e,t.$))},[]).$}()));return t.$$=e,t.forEach(me),t}return Rt(r,t),St(r,[{key:"add",value:function(){for(var e=this,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return E(arguments,function(t){ce(t).forEach(function(t){e.indexOf(t)===-1&&e.push(t)})}),this}},{key:"addClass",value:function(){for(var e=arguments,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return this.forEach(function(t){var n=t.classList;E(a(t)&&e,function(e){return n.add(e)})})}},{key:"addComment",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return this.forEach(function(n){a(n)&&n.insertAdjacentHTML(t?"beforeend":"afterbegin","<!--"+e+"-->")})}},{key:"addHTML",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return this.forEach(function(n){a(n)&&n.insertAdjacentHTML(t?"beforeend":"afterbegin",e)})}},{key:"addRule",value:function(e,t,n){return this.some(function(r){if("style"===ge(r)){var i=r.sheet,o=i.cssRules.length,a=new It(n).word(function(e,t){return new on(t).toHyphenCase()+": "+e+";\n"});return i.insertRule(t+" {"+(a&&"\n")+a+"}",o),i.cssRules[o].dwayneData={name:e},!0}}),this}},{key:"addText",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return this.forEach(function(n){new r(gn.createTextNode(e)).into(n,t)})}},{key:"apply",value:function(){for(var e=this,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];var i=void 0,o=void 0,a=void 0,u=void 0,l=void 0,s=void 0;return new on(new Yt(arguments).join(" ")).split(/(\s+)/).forEach(function(t){if(!i){if(l=t.slice(0,1),a=dt[l],s=1,a&&!c(a)&&(a=a[t.slice(1,2)],s=2),/^\s+$/.test(t)||!a)return;if(u=t.slice(s).match(/^[^()]+/),!u&&"*"!==l&&"&"!==l)return;i={name:u?u[0]:"",args:t.slice(s+(u?u[0]:"").length),callback:a},o=!0}o||(i.args+=t),i.args&&!/^\([\s\S]+\)$/.test(i.args)||(i.callback(e,i.name,i.args.replace(/^\(|\)$/g,"")),i=null),o=!1}),this}},{key:"attr",value:function(e,t){var n=pe(this);if(!arguments.length)return new It(n.attributes).object(function(e,t){e[t.name]=t.value});if(arguments.length<=1&&$(e)){var i=Ln(e,[new r(n)]);return h(i)?n.getAttribute(e):n.getAttributeNS(i,e)}return arguments.length>=2&&(e=jt({},e,t)),this.forEach(function(t,n){a(t)&&new It(e).forEach(function(e,i){if(e=c(e)?e(new r(t).attr(i),t,n):e,v(e))return new r(t).removeAttr(i);var o=Ln(i,[new r(t)]);h(o)?t.setAttribute(i,e):t.setAttributeNS(o,i,e)})})}},{key:"blob",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return new Ht(function(t,n){var i=e.first(),o=i.name;return"img"!==o&&"canvas"!==o&&n(new Error("First element in the set isn't an image or a canvas! (Elem#blob)")),"canvas"===o?t(i):void i.load().then(function(){if(i.isBroken())return n(new Error("The image is broken! (Elem#blob)"));var e=new r(gn).canvas(),o=i.width(),a=i.height();e.width(o).height(a).drawImage(i.$[0],0,0),t(e)})}).then(function(e){var n=e.dataURL(),r=atob(n.split(",")[1]),i=r.length,o=new ArrayBuffer(i),a=new Uint8Array(o);return ee(i,function(e){a[e]=r.charCodeAt(e)}),te(o,t)})}},{key:"blur",value:function(){return this.forEach(function(e){a(e)&&e.blur()})}},{key:"calcCSS",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return getComputedStyle(pe(this),e)}},{key:"changeRule",value:function(e,t){return this.some(function(n){if("style"===ge(n)){var i=new Yt(n.sheet.cssRules).find(function(t){return t.dwayneData&&t.dwayneData.name===e})||{},o=i.value;if(o)return new r(o).css(t),!0}}),this}},{key:"child",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return l(e)&&e>=0?this.children().elem(e):ce(e).into(this,t)}},{key:"children",value:function(){return new r(this.length?this.$[0].childNodes:[])}},{key:"class",value:function(e){return arguments.length?this.forEach(function(t){a(t)&&(t.className=e)}):new Yt(pe(this).className.split(" "))}},{key:"click",value:function(){return this.forEach(function(e){a(e)&&e.click()})}},{key:"clone",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return this.object(function(t,n){t.add(n.cloneNode(!!e))},new r)}},{key:"closest",value:function(e){return this.object(function(t,n){for(;n;){if(new r(n).is(e))return t.add(n);n=n.parentNode}},new r)}},{key:"contains",value:function(e){return e=ce(e),pe(this).contains(pe(e))}},{key:"create",value:function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];return this.object(function(t,i){var o=new r(_n(e,[new r(i)]));o.into(i),t.add(o.apply.apply(o,n))},new r)}},{key:"createComment",value:function(e){return this.create("#comment").text(e)}},{key:"createText",value:function(e){return this.create("#text").text(e)}},{key:"css",value:function(e,t){var n=pe(this).style;return ve(this.$[0])&&(n=this.$[0].style),arguments.length?arguments.length<=1&&$(e)?(e=new on(e).toHyphenCase().$,n.getPropertyValue(e)+(n.getPropertyPriority(e)?" !important":"")):(arguments.length>=2&&(e=jt({},e,t)),this.forEach(function(t,n){(a(t)||ve(t))&&new It(e).forEach(function(e,i){i=new on(i).toHyphenCase().$,c(e)&&(e=e(new r(t).css(i),t,n)),t.style.removeProperty(i),t.style.setProperty(i,e.replace(/ ?!important$/,""),/!important$/.test(e)?"important":"")})})):new on(n.cssText).split(/; ?/).object(function(t,n){n&&(e=n.split(/: /),t[new on(e[0]).toCamelCase().$]=e[1])})}},{key:"ctx",value:function e(t,n){var e=void 0;return this.some(function(t){if("canvas"===ge(t))return e=t.dwayneData.ctx,!0}),arguments.length?e?(c(t)?t(e):(arguments.length>=2&&(t=jt({},t,n)),O(e,t)),this):this:e}},{key:"data",value:function(e,t){var n=pe(this).dataset;return arguments.length?1===arguments.length&&$(e)?n[e]:(arguments.length>=2&&(e=jt({},e,t)),this.forEach(function(t,n){a(t)&&E(e,function(e,r){t.dataset[r]=c(e)?e(t.dataset[r],t,n):e})})):new It(n).object(function(e,t,n){e[n]=t})}},{key:"dataURL",value:function(e,t){var n=this.ctx();return n?n.canvas.toDataURL.apply(n.canvas,arguments):""}},{key:"deleteRule",value:function(e){return this.some(function(t){if("style"===ge(t)){var n=new Yt(t.sheet.cssRules).find(function(t){return t.dwayneData&&t.dwayneData.name===e});if(n)return t.sheet.deleteRule(n.key),!0}}),this}},{key:"dispatch",value:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=n||{},o=i.bubbles,u=void 0===o||o,c=i.cancelable,l=void 0===c||c,s=t;if(!/Event$/.test(e(s))){try{s=new Event(s,{bubbles:u,cancelable:l})}catch(e){s=gn.createEvent("Event"),s.initEvent(t,u,l)}O(s,r)}return this.forEach(function(e){a(e)&&e.dispatchEvent(s)})}},{key:"elem",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return e<0&&(e=this.length+e),new r(this.$[e])}},{key:"filter",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Boolean;return new r(Tt(r.prototype.__proto__||Object.getPrototypeOf(r.prototype),"filter",this).call(this,Rn(e)))}},{key:"find",value:function(e){return $(e)?this.object(function(t,n){t.add(ye(e,n))},new r):Tt(r.prototype.__proto__||Object.getPrototypeOf(r.prototype),"find",this).call(this,e)}},{key:"first",value:function(){return this.elem(0)}},{key:"firstChild",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return this.object(function(t,n){var i=new r(n).children().find(function(t){return new r(t).is(e)})||{},o=i.value;t.add(o)},new r)}},{key:"focus",value:function(){return this.forEach(function(e){a(e)&&e.focus()})}},{key:"getRule",value:function(e){var t={selector:void 0,rules:{}};return this.some(function(n){if("style"===ge(n)){var i=new Yt(n.sheet.cssRules).find(function(t){return t.dwayneData&&t.dwayneData.name===e})||{},o=i.value;if(o)return t={selector:o.selectorText,rules:new r(o).css().$},!0}}),t}},{key:"hasAttr",value:function(e){var t=pe(this),n=Ln(e,[new r(t)]);return h(n)?t.hasAttribute(e):t.hasAttributeNS(n,e)}},{key:"hasClass",value:function(e){return pe(this).classList.contains(e)}},{key:"height",value:function(e){return this.prop.apply(this,new Yt(arguments).unshift("height").$)}},{key:"hide",value:function(){return this.forEach(function(e){e=new r(e);var t=e.css("display");t.indexOf("none")&&(e.prop("dwayneData").previousDisplay=t),e.css("display","none !important")})}},{key:"html",value:function(e){return arguments.length?this.forEach(function(t,n){a(t)&&(t.innerHTML=c(e)?e(t.innerHTML,t,n):e)}):pe(this).innerHTML}},{key:"id",value:function(e){return arguments.length?this.forEach(function(t){a(t)&&(t.id=e)}):pe(this).id}},{key:"insertAfter",value:function(e){e=ce(e).first();var t=e.parent();return t.length?(e=e.next().$[0],t=t.$[0],this.forEach(function(n){e?t.insertBefore(n,e):t.appendChild(n)})):this}},{key:"insertBefore",value:function(e){e=ce(e).first();var t=e.parent();return t.length?(e=e.$[0],t=t.$[0],this.forEach(function(n){t.insertBefore(n,e)})):this}},{key:"into",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return e=ce(e).$[0],!e||se(e)||fe(e)||de(e)?this:!t&&e.firstChild?this.slice().reverse().forEach(function(t){e.insertBefore(t,e.firstChild)}):this.forEach(function(t){e.appendChild(t)})}},{key:"is",value:function(e){if(h(e))return!0;var t=pe(this),n=t.matches||t.matchesSelector||t.webkitMatchesSelector||t.mozMatchesSelector||t.msMatchesSelector||t.oMatchesSelector;if(!a(this.$[0]))return!1;try{return n.call(t,e)}catch(t){return console.error("Selector '"+e+"' is not a valid selector (Elem#is)"),!1}}},{key:"isBroken",value:function e(){var e=!1;return this.some(function(t){if("img"===ge(t))return e=!(!t.complete||t.naturalWidth&&t.naturalHeight),!0}),e}},{key:"isWithinDocument",value:function(){return 0!==this.first().closest("html").length}},{key:"last",value:function(){return this.elem(-1)}},{key:"lastChild",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return this.object(function(t,n){var i=new r(n).children().reverse().find(function(t){return new r(t).is(e)})||{},o=i.value;t.add(o)},new r)}},{key:"load",value:function(){var e={proper:new r,broken:new r};return Ht.all(this.filter(function(e){return"img"===ge(e)}).map(function(t){var n=new r(t);return t.complete?void e[n.isBroken()?"broken":"proper"].push(t):new Ht(function(r){var i=n.on({load:function(){e.proper.add(t),i(),r()},error:function(){e.broken.add(t),i(),r()}})})}).$).then(function(){return e})}},{key:"moveAttr",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=kn[e],r=this.elem();return n&&r.length&&(arguments.length<2&&(t=n.attr(e)),n.removeAttr(e)),r.length&&(kn[e]=r.attr(e,t)),this}},{key:"moveClass",value:function(e){var t=$n[e],n=this.elem();return t&&n.length&&t.removeClass(e),n.length&&($n[e]=n.addClass(e)),this}},{key:"next",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return this.object(function(t,n){for(;n=n.nextSibling;)if(new r(n).is(e))return t.add(n)},new r)}},{key:"off",value:function(){for(var e=arguments,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return this.forEach(function(t){var n=t.dwayneData.listeners;E(e,function(e){E(e.split(yn),function(e){(n[e]||new It).forEach(function(e){var t=e.removeListener;return t()})})})})}},{key:"on",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments[2],i=new It({});return c(t)&&(n=t,t=null),$(e)&&(e=jt({},e,n)),e=new It(e).object(function(e,t,n){E(n.split(yn),function(n){e[n]=t})}),this.forEach(function(n){if(a(n)||se(n)||fe(n)){var o=(bn.find(function(e){var t=e.element;return t===n})||{}).value||n.dwayneData,u=o.listeners;e.forEach(function(e,o){var a=u[o]=u[o]||new It({}).define("index",{value:0,configurable:!0,writable:!0}),c=a.prop("index");if(!a.has("listener")){var l=function(e){a.forEach(function(t){var i=t.selector,o=t.listener;new r(e.target).is(i)&&o.call(n,e,n,c)})};l.base=n,n.addEventListener(o,l,!1),a.define("listener",{value:l,configurable:!0,writable:!0})}var s=function(){a.delete(c),a.count||(n.removeEventListener(o,a.prop("listener"),!1),a.delete("listener"))};i.prop(o,(i.prop(o)||new Yt).push(s)),a.assign(jt({index:c+1},c,{selector:t,listener:e,removeListener:s}))})}}),function(e){return arguments.length?void E(arguments,function(e){E(e.split(yn),function(e){i.has(e)&&(i.prop(e).forEach(function(e){return e()}),i.delete(e))})}):void i.forEach(function(e){e.forEach(function(e){return e()})})}}},{key:"parent",value:function(){return this.object(function(e,t){return e.add(t.parentNode)},new r)}},{key:"parentTree",value:function(){return this.object(function(e,t){for(;t=t.parentNode;)e.add(t)},new r)}},{key:"prev",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return this.object(function(t,n){for(;n=n.previousSibling;)if(new r(n).is(e))return t.add(n)},new r)}},{key:"prop",value:function(e,t){return arguments.length<=1&&$(e)?this.$[0]?this.$[0][e]:void 0:(arguments.length>=2&&(e=jt({},e,t)),this.forEach(function(t,n){E(e,function(e,r){t[r]=c(e)?e(t[r],t,n):e})}))}},{key:"ref",value:function(e){return arguments.length?this.forEach(function(t){t=new r(t),t.attr(Tn(t.name),e)}):this.attr(Tn(this.name))}},{key:"remove",value:function(){return this.forEach(function(e){var t=e.parentNode;t&&t.removeChild(e)})}},{key:"removeAttr",value:function(){for(var e=arguments,t=arguments.length,n=Array(t),i=0;i<t;i++)n[i]=arguments[i];return this.forEach(function(t){a(t)&&E(e,function(e){var n=Ln(e,[new r(t)]);h(n)?t.removeAttribute(e):t.removeAttributeNS(n,e)})})}},{key:"removeClass",value:function(){for(var e=arguments,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return this.forEach(function(t){var n=t.classList;E(a(t)&&e,function(e){return n.remove(e)})})}},{key:"removeCSS",value:function(){for(var e=arguments,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return this.forEach(function(t){a(t)&&E(e,function(e){t.style.removeProperty(e)})})}},{key:"replace",value:function(e){e=ce(e);var t=this.first().parent();if(!t.length)return this;var n=t,r="into",i=this.next().first().$[0],o=this.prev().first().$[0];i?(n=i,r="insertBefore"):o&&(n=o,r="insertAfter"),this.first().remove(),e[r](n)}},{key:"setOf",value:function(e,t,n){if(T({2:n},{2:["function"]},"Elem#setOf"),t=new It(t).$,d(t)){try{T({1:t},{1:["intLike",">=0"]},"Elem#setOf")}catch(e){throw new Error("2nd argument must be either or non-negative integer, or object! (at Elem#setOf)")}t=K(t).$}return this.object(function(i,o,a){E(t,function(u,c){var l=new r(o).create(e);n(l.$[0],u,c,t,o,a),i.add(l)})},new r)}},{key:"show",value:function(){return this.forEach(function(e){var t=e,n=t.dwayneData;e=new r(e),0===e.css("display").indexOf("none")&&e.css("display",n.previousDisplay),n.previousDisplay=""})}},{key:"text",value:function(e){return arguments.length?this.forEach(function(t,n){var i=t[wn];new r(t).prop(wn,c(e)?e(i,t,n):e)}):this.prop(wn)}},{key:"toggleAttr",value:function(e,t){var n=arguments;return this.forEach(function(i){i=new r(i),(n.length<2?!i.hasAttr(e):t)?i.attr(e,""):i.removeAttr(e)})}},{key:"toggleClass",value:function(e,t){return(arguments.length<2?!this.hasClass(e):t)?this.addClass(e):this.removeClass(e)}},{key:"up",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;return T([e],[["intLike",">=0"]],"Elem#up"),e=Number(e),this.object(function(t,n){for(var r=e;r--&&n;)n=n.parentNode;t.add(n)},new r)}},{key:"validate",value:function(e){function t(e,t,n){try{if(e.validity&&!e.validity.valid)throw new Error(e.validationMessage);e.dwayneData.validators.forEach(function(n){n(e.value,e,t)})}catch(t){(n.errors=n.errors||{})[e.name]=t}}if(T([e],["function||!"],"Elem#validate"),e)return this.forEach(function(t){var n=t.dwayneData;n.validators.push(e)});var n=new It({errors:null});return this.filter(xn+", form").forEach(function(e,i){if("form"===ge(e)){var o=function(){var i={errors:null},o=new r(e),a=o.find(xn);return a.forEach(function(e,n){t(e,n,i)}),n.deepAssign(i),i=i.errors,o.dispatch("validate",{},{valid:!i,errors:i}),{v:a.forEach(function(e){var t=(i||{})[e.name];new r(e).dispatch("validate",{},{valid:!t,error:t||null})})}}();if("object"===("undefined"==typeof o?"undefined":Et(o)))return o.v}var a={errors:null};t(e,i,a),n.deepAssign(a),a=(a.errors||{})[e.name],new r(e).dispatch("validate",{},{valid:!a,error:a||null})}),n.every(function(e){return h(e)})?null:n.$.errors}},{key:"width",value:function(e){return this.prop.apply(this,new Yt(arguments).unshift("width").$)}},{key:"innerHeight",get:function(){var e=this.$[0];if(se(e))return e.innerHeight;var t=this.calcCSS(),n=t.borderTopWidth,r=t.borderBottomWidth,i=t.boxSizing,o=t.height,a=t.paddingTop,u=t.paddingBottom,c=$e(n)+$e(r),l=$e(a)+$e(u);return $e(o)-Cn(i,[l,c])}},{key:"innerWidth",get:function(){var e=this.$[0];if(se(e))return e.innerWidth;var t=this.calcCSS(),n=t.borderLeftWidth,r=t.borderRightWidth,i=t.boxSizing,o=t.paddingLeft,a=t.paddingRight,u=t.width,c=$e(n)+$e(r),l=$e(o)+$e(a);return $e(u)-Cn(i,[l,c])}},{key:"name",get:function(){return ge(this.$[0])}},{key:"outerHeight",get:function(){var e=this.$[0];if(se(e))return e.outerHeight;var t=this.calcCSS(),n=t.borderTopWidth,r=t.borderBottomWidth,i=t.boxSizing,o=t.height,a=t.marginTop,u=t.marginBottom,c=t.paddingTop,l=t.paddingBottom,s=$e(n)+$e(r),f=$e(c)+$e(l);return $e(o)+$e(a)+$e(u)+An(i,[s,f])}},{key:"outerWidth",get:function(){var e=this.$[0];if(se(e))return e.outerWidth;var t=this.calcCSS(),n=t.borderLeftWidth,r=t.borderRightWidth,i=t.boxSizing,o=t.marginLeft,a=t.marginRight,u=t.paddingLeft,c=t.paddingRight,l=t.width,s=$e(n)+$e(r),f=$e(u)+$e(c);return $e(l)+$e(o)+$e(a)+An(i,[s,f])}},{key:"toStringTag",get:function(){return e(this.$$)}}]),r}(Yt);j(Pn.prototype,jt({},Nt.toStringTag,"Elem"));var Dn=new Pn(vt),Nn=new Pn(gn),Mn=new Pn(gn.documentElement),Un=new Pn(gn.body),Bn=new Pn(gn.head),qn=new Yt(yt).concat(wt).$,In=new Yt(qn).map(function(e){return new on(e).toCamelCase().$}).$;S(Pn.prototype,In,function(e,t){return function(){return this.create.apply(this,new Yt(arguments).unshift(qn[t]).$)}}),S(Pn.prototype,pt,function(e){return function(){var t=this.ctx();if(t)return t[e].apply(t,arguments)}}),S(Pn.prototype,gt,function(e){return function(){var t=this.ctx();return t&&t[e].apply(t,arguments),this}}),mt[2].push({check:function(t){return a(t)||se(t)||fe(t)||de(t)||he(t)||/^(HTMLCollection|NodeList)$/.test(e(t))},cls:Pn});var Fn=Object.freeze({registerDBlock:ke,registerDEach:be,registerDElements:xe,registerDIf:Ee,registerDItem:Oe,registerDSwitch:Se,registerDText:je}),Wn=A("strictEquals",function(e,t){return t.hasAttr("contenteditable")||t.hasAttr("contentEditable")?"text":"value"}).case("input",function(e){return"file"===e?"files":"radio"===e||"checkbox"===e?"checked":"value"}),Hn=A("strictEquals",function(e){return e}).case("input",function(e,t,n){return"radio"!==t&&"checkbox"!==t?e:"radio"===t?e===n:e.indexOf(n)!==-1}),zn=A("strictEquals",function(e){return e}).case("input",function(e,n,r,i){if("radio"!==n&&"checkbox"!==n)return e;if("radio"===n)return e?r:null;if(e)return i?i.indexOf(r)===-1?new Yt(i).concat(r).$:i:[r];if(!t(i))return[];var o=i.indexOf(r);return o!==-1?[].concat(Pt(new Yt(i).slice(0,o).$),Pt(new Yt(i).slice(o+1).$)):i}),Vn=A("strictEquals","input").case("select","change").case("input",function(e){return"radio"===e||"checkbox"===e||"color"===e||"file"===e?"change":"input"}),Gn=Object.freeze({registerDAttr:_e,registerDBind:Te,registerDClass:Re,registerDElem:Ce,registerDHide:Ae,registerDOn:Le,registerDShow:Pe,registerDStyle:De,registerDText:Ne,registerDValidate:Me,registerDValue:Ue}),Jn=Object.create(null),Qn=Object.create(null),Zn={}.isPrototypeOf,Yn=new RegExp("^"+kt+"$","i"),Xn=new RegExp("^"+bt+"$"),Kn=/^\{[\s\S]+\}$/,er=vt,tr=er.document,nr="http://www.w3.org/2000/svg",rr=void 0,ir=void 0,or=void 0,ar=void 0,ur=function(){function e(t){var n=this;Ot(this,e);var r=t.name,i=t.args,o=t.children,a=t.block,u=t.parent,c=t.parentBlock,l=t.parentScope,s=new Yt([]);Object.defineProperties(this,{$:{value:this},$$:{value:{name:r,parent:l,parentBlock:c,children:new Yt([]),mixins:new Yt([]),Block:a,elems:{start:Nn.createComment(" "+r+": start "),end:Nn.createComment(" "+r+": end "),content:new Pn,parent:u},watchersToRemove:s,evaluate:function e(t,i,o,a,u,c){function e(){var n=this,r=void 0;i&&(ir=!0,or=new Yt([])),l.$$.expr=t,tr.DwayneStore=l;try{r=h()}catch(e){rr&&rr(e)}return i&&!function(){var t=new Yt([]);or.forEach(function(o){var u=function(){var t=e.call(n);t!==r&&i(t,r)},c={forDElements:a,watcher:u,watchers:o};u.onRemove=function(){t.forEach(function(e){var t=e.watcher,n=e.watchers,r=f.indexOf(e),i=n.indexOf(t);r!==-1&&f.splice(r,1),i!==-1&&n.splice(i,1)})},t.push(c),f.push(c),o.push(u)}),ir=!1,or=new Yt([])}(),l.$$.expr=null,tr.DwayneStore=null,r}if(!Kn.test(t))return t;a=!!a,u=!!u,t=t.replace(/^\{|\}$/g,"");var l="#d-item"===r&&!u||c?(c||n).$$.scope:n,s=o?o.$$:{},f=s.watchersToRemove,h=new Function("",'with(document.DwayneStore){$$.expr=eval("$$.expr="+$$.expr);return $$.expr}');return e.call(n)}}}});var f=new It(i).map(function(e,t){if("d-each"===r&&("item"===t||"index"===t||"uid"===t))return e;var i="d-elements"===r&&"value"===t;return l.$$.evaluate(e,function(e){n.args[t]=e},n,i,i&&"#d-item"===c.$$.name)}).$;this.args=f,this.children=o||new Yt([]),this.global=Object.create(l?Object.create(l.global):null),this.$$.elems.start.$[0].DwayneBlock=this,this.$$.elems.end.$[0].DwayneBlock=this,c&&c.$$.children.push(this)}return St(e,null,[{key:"onEvalError",get:function(){return rr},set:function(e){rr=c(e)?e:null}}]),St(e,[{key:"afterConstruct",value:function(){}},{key:"afterRender",value:function(){}},{key:"beforeRemove",value:function(){}},{key:"evaluateAndWatch",value:function(e,t){return this.$$.parent.$$.evaluate(e,t,this)}},{key:"evaluateOnce",value:function(e){return this.$$.parent.$$.evaluate(e)}},{key:"remove",value:function(e){var t=this.$$,n=t.parentBlock,r=t.children,i=t.mixins,o=t.elems,a=o.start,u=o.content,c=o.end,l=t.watchersToRemove;Je(l),r.forEach(function(e){e.remove(!0)}),i.forEach(function(e){e.remove(!0)});try{this.beforeRemove()}catch(e){console.error("Uncaught error in beforeRemove:",e)}if(!e&&n){var s=n.$$.children.indexOf(this);s!==-1&&n.$$.children.splice(s,1)}new Pn([a,u,c]).remove()}},{key:"watch",value:function(){var e=this,t=arguments[arguments.length-1];if(c(t)){if(1===arguments.length){for(var n in this.$$.global)this.$$.global[n].watchers.perm.push(t);return E(this.$$.args,function(e){var n=e.watchers;n.perm.push(t)}),E(this.$$.locals,function(e){var n=e.watchers;n.perm.push(t)})}E(arguments,function(n){if(n!==t){if(n=""+n,/^args\./.test(n)){if(n=n.replace(/^args\./,""),!e.$$.args[n])return;return void e.$$.args[n].watchers.perm.push(t)}if(/^global\./.test(n)){if(n=n.replace(/^global\./,""),!e.$$.global[n])return;return void e.$$.global[n].watchers.perm.push(t)}e.$$.locals[n]&&e.$$.locals[n].watchers.perm.push(t)}})}}},{key:"watchArgs",value:function(){var e=this,t=arguments[arguments.length-1];if(c(t))return 1===arguments.length?E(this.$$.args,function(e){var n=e.watchers;n.perm.push(t)}):void E(arguments,function(n){n!==t&&e.$$.args[n]&&e.$$.args[n].watchers.perm.push(t)})}},{key:"watchGlobals",value:function(){var e=this,t=arguments[arguments.length-1];if(c(t))if(1!==arguments.length)E(arguments,function(n){n!==t&&e.$$.global[n]&&e.$$.global[n].watchers.perm.push(t)});else for(var n in this.$$.global)this.$$.global[n].watchers.perm.push(t)}},{key:"watchLocals",value:function(){var e=this,t=arguments[arguments.length-1];if(c(t))return 1===arguments.length?E(this.$$.locals,function(e){var n=e.watchers;n.perm.push(t)}):void E(arguments,function(n){n!==t&&e.$$.locals[n]&&e.$$.locals[n].watchers.perm.push(t)})}}]),e}();ur.collapseWhiteSpace=!0,ur.defaultArgs={},Ie(Fn,ur);var cr=function(){function e(t){var n=this;Ot(this,e);var r=t.value,i=t.elem,o=t.match,a=t.parentBlock,u=t.parentScope;Object.defineProperties(this,{$$:{value:{_value:r,parent:u,parentBlock:a,watchersToRemove:new Yt([])}}}),this.match=new Yt(o).slice(1).$,this.elem=i,new It(this).proto().$.constructor.evaluate&&(this.value=this.evaluateAndWatch(function(e,t){n.value=e;try{n.afterUpdate(e,t)}catch(e){console.error("Uncaught error in "+name+"#onUpdate:",e)}}),this.afterUpdate(this.value)),a&&a.$$.mixins.push(this)}return St(e,[{key:"afterUpdate",value:function(){}},{key:"beforeRemove",value:function(){}},{key:"evaluateAndWatch",value:function(e){var t=this.$$,n=t._value,r=t.parent;return r.$$.evaluate(n,e,this)}},{key:"evaluateOnce",value:function(){var e=this.$$,t=e._value,n=e.parent;return n.$$.evaluate(t)}},{key:"remove",value:function(e){var t=this.$$,n=t.parentBlock,r=t.watchersToRemove;Je(r);try{this.beforeRemove()}catch(e){console.error("Uncaught error in beforeRemove:",e)}if(!e&&n){var i=n.$$.mixins.indexOf(this);i!==-1&&n.$$.mixins.splice(i,1)}}}]),e}();cr.evaluate=!0,Ie(Gn,cr);var lr=new on("0"),sr=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],fr=new It(sr).map(function(e){return e.slice(0,3)}).$,hr=["January","February","March","April","May","June","Jule","August","September","October","November","December"],vr=new It(hr).map(function(e){return e.slice(0,3)}).$,dr=[{format:"ccc",match:function(e,t){return Xe(e[t]("c"),3)}},{format:"c",match:function(e,t){return e[t]("c")}},{format:"ss",match:function(e,t){return Xe(e[t]("s"),2)}},{format:"s",match:function(e,t){return e[t]("s")}},{format:"mm",match:function(e,t){return Xe(e[t]("m"),2)}},{format:"m",match:function(e,t){return e[t]("m")}},{format:"hh",match:function(e,t){return Xe(e[t]("h"),2)}},{format:"h",match:function(e,t){return e[t]("h")}},{format:"dddd",match:function(e,t){return sr[e[t]("dw")]}},{format:"ddd",match:function(e,t){return fr[e[t]("dw")]}},{format:"dd",match:function(e,t){return Xe(e[t]("d"),2)}},{format:"d",match:function(e,t){return e[t]("d")}},{format:"MMMM",match:function(e,t){return hr[e[t]("M")-1]}},{format:"MMM",match:function(e,t){return vr[e[t]("M")-1]}},{format:"MM",match:function(e,t){return Xe(e[t]("M"),2)}},{format:"M",match:function(e,t){return e[t]("M")}},{format:"yyyy",match:function(e,t){return Xe(e[t]("y"),4)}},{format:"yy",match:function(e,t){return String(e[t]("y")).slice(-2)}},{format:"y",match:function(e,t){return e[t]("y")}}],pr={c:1,s:1e3,m:6e4,h:36e5,d:864e5,w:6048e5,M:2592e6,y:31536e6},gr=A({c:function(e,t){return e[t+"Milliseconds"]()},s:function(e,t){return e[t+"Seconds"]()},m:function(e,t){return e[t+"Minutes"]()},h:function(e,t){return e[t+"Hours"]()},d:function(e,t){return e[t+"Date"]()},dw:function(e,t){return e[t+"Day"]()},M:function(e,t){return e[t+"Month"]()+1},y:function(e,t){return e[t+"FullYear"]()}},"equals",NaN),mr=A({c:function(e,t,n){return e[n+"Milliseconds"](t)},s:function(e,t,n){return e[n+"Seconds"](t)},m:function(e,t,n){return e[n+"Minutes"](t)},h:function(e,t,n){return e[n+"Hours"](t)},d:function(e,t,n){
return e[n+"Date"](t)},M:function(e,t,n){return e[n+"Month"](t-1)},y:function(e,t,n){return e[n+"FullYear"](t)}}),yr=function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Date;return Ot(this,t),At(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return Rt(t,e),St(t,[{key:"add",value:function(e,t){return arguments.length>=2&&(e=jt({},e,t)),this.time(this.time()+new It(e).sum(function(e,t){return pr[t]*e}))}},{key:"expires",value:function(e){return arguments.length||(e=this),new Zt(this.$-Ke()).timeout(e)}},{key:"format",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return e=new on(new It(e).$),n=String(new It(n).$),E(dr,function(r){e=e.replaceString(n+r.format,r.match(t,"get"))}),e.$}},{key:"formatUTC",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return e=new on(new It(e).$),n=String(new It(n).$),E(dr,function(r){e=e.replaceString(n+r.format,r.match(t,"getUTC"))}),e.$}},{key:"get",value:function(e){return gr(e,[this.$,"get"])}},{key:"getUTC",value:function(e){return gr(e,[this.$,"getUTC"])}},{key:"isAfter",value:function(e){return e=new Date(new It(e).$),e.getTime()<this.$.getTime()}},{key:"isBefore",value:function(e){return e=new Date(new It(e).$),e.getTime()>this.$.getTime()}},{key:"isBetween",value:function(e,t){var n=this.$.getTime();return e=new Date(new It(e).$),t=new Date(new It(t).$),n>e.getTime()&&n<t.getTime()}},{key:"isInvalid",value:function(){return"Invalid Date"===this.$.toString()}},{key:"isPassed",value:function(){return this.isBefore(Ke())}},{key:"ofOne",value:function(e,n){var r=this;if(!(e in pr)||"w"===e)return!1;n=new t(new Date(n));var i=void 0;return E(pr,function(t,o){if(o===e&&(i=!0),i&&"w"!==o)return(!i||r.get(o)===n.get(o))&&void 0})!==!1}},{key:"set",value:function(e,t){var n=this.$;return arguments.length>=2&&(e=jt({},e,t)),e=new It(e).$,E(e,function(e,t){mr(t,[n,e,"set"])}),this}},{key:"setUTC",value:function(e,t){var n=this.$;return arguments.length>=2&&(e=jt({},e,t)),e=new It(e).$,E(e,function(e,t){mr(t,[n,e,"setUTC"])}),this}},{key:"time",value:function(e){var t=this.$;return arguments.length&&t.setTime(e),t.getTime()}},{key:"toISOString",value:function(){return this.$.toISOString()}},{key:"toLocaleString",value:function(){return this.$.toLocaleString()}},{key:"toString",value:function(){return this.$.toString()}},{key:"valueOf",value:function(){return this.$.valueOf()}}]),t}(It);j(yr.prototype,jt({},Nt.toStringTag,"Dat")),mt[1].push({check:i,cls:yr});var wr=/^(([a-z][a-z\d+\-.]*:)?\/\/|data:[a-z]+\/[a-z]+;base64,)/i,$r=A("call",function(){return new Yt([])}).case(t,function(e,n){var r=new Yt([]);return E(n,function(n){return m(n)||t(n)?void(r=r.concat($r(n,[e+"[]"]))):void r.push({param:e+"[]",value:n})}),r.$}).case(m,function(e,n){var r=new Yt([]);return E(n,function(n,i){return m(n)||t(n)?void(r=r.concat($r(n,[e?e+"["+i+"]":i]))):void r.push({param:e?e+"["+i+"]":i,value:g(n)?JSON.stringify(n):String(n)})}),r.$}),kr=function(e,t,n,r){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"",o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{},a=o.params,u=void 0===a||a,c=o.query,l=void 0===c||c,s=tt(t)?t:String(e).replace(/\/+$/,"")+"/"+String(t).replace(/^\/+/,"");E(n,function(e,t){s=new on(s).replaceString(":"+t,nt(e,u)).$});var f=$r(r,[""]);return f.length&&(s+=(s.indexOf("?")===-1?"?":"&")+f.map(function(e){var t=e.param,n=e.value;return nt(t,l)+"="+nt(n,l)}).join("&")),""+s+(i?"#"+i:"")},br=function(e){var t={};return E((e||"").split("\n"),function(e){var n=e.indexOf(":"),r=new on(e.substring(0,n)).trim().toCamelCase().$,i=new on(e.substring(n+1)).trim().$;r&&(t[r]=(t[r]?t[r]+", ":"")+i)}),t},xr=new Yt(["FormData","File","Blob","ArrayBuffer","String","Number"]),Er=new Yt(["DELETE","GET","HEAD"]),Or=function(t,n,r){return t=new It(t).$,Er.indexOfStrict(n)!==-1?null:g(t)&&xr.indexOfStrict(e(t))===-1?(r.contentType||(r.contentType=["application/json;charset=utf-8"]),new It(t).json()):t},Sr={after:[],auth:{username:"",password:""},baseURL:vt.location.origin,before:[],data:null,headers:{},method:"get",params:{},query:{},responseType:"",timeout:0,url:"",withCredentials:!1},jr=new Yt(["post","put"]),_r=function(e){function n(){function e(){return e.request.apply(e,arguments)}var t,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Ot(this,n);var i=At(this,(n.__proto__||Object.getPrototypeOf(n)).call(this)),o=new It({}).deepAssign(Sr,r).$;return o.before.indexOf(rt)===-1&&o.before.push(rt),Object.defineProperty(e,"$$",{value:o}),Object.setPrototypeOf(e,n.prototype),t=e,At(i,t)}return Rt(n,e),St(n,[{key:"after",value:function e(t){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];T([t],["function"],"Fetch#after");var e=this.$$.after;return n?e.push(t):e.unshift(t),this}},{key:"before",value:function e(t){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];T([t],["function"],"Fetch#before");var e=this.$$.before;return n?e.unshift(t):e.push(t),this}},{key:"config",value:function(e,t){var n=this.$$;return arguments.length?(c(e)?e(n):(arguments.length>=2&&(e=jt({},e,t)),new It(n).deepAssign(e)),this):n}},{key:"delete",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return $(e)||(t=e,e=void 0),this.request(e,O({method:"delete"},t))}},{key:"get",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return $(e)||(t=e,e=void 0),this.request(e,O({method:"get"},t))}},{key:"head",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return $(e)||(t=e,e=void 0),this.request(e,O({method:"head"},t))}},{key:"headers",value:function e(n,r){var e=this.$$.headers;return arguments.length>=2&&(n=jt({},n,r)),E(n,function(n,r){var i=e[r]||[],o=t(n)?n:[n];(e[r]=i).push.apply(i,o)}),this}},{key:"instance",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=new It(e).hasOwn("data")?{data:e.data}:{};delete e.data;var r=new It({}).deepAssign(this.$$,e).assign(t).$;return new n(r)}},{key:"patch",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return arguments.length&&!$(e)&&(n=t,t=e,e=void 0),this.request(e,O({method:"patch",data:t},n))}},{key:"post",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return arguments.length&&!$(e)&&(n=t,t=e,e=void 0),this.request(e,O({method:"post",data:t},n))}},{key:"put",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return arguments.length&&!$(e)&&(n=t,t=e,e=void 0),this.request(e,O({method:"put",data:t},n))}},{key:"request",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};1!==arguments.length||$(e)||(t=e);var n=new It(t).hasOwn("data")?{data:t.data}:{},r=$(e)?{url:e}:{};delete t.data;var i=new It(this.$$).deepClone().deepAssign(r,t).assign(n).$,o=void 0,a=Ht.resolve();return E(i.before,function(e){a=a.then(function(){return e.length>=2?Ht.resolve():new Ht(function(t){t(e(i))})},function(t){return e.length<2?Ht.reject(t):new Ht(function(n){n(e(t,i))})})}),a=a.then(function(){return new Ht(function(e,t){var n=i.after,r=i.auth,a=r.username,u=r.password,c=i.data,l=i.headers,s=i.method,f=i.onprogress,h=i.responseType,v=i.timeout,d=i.url,p=i.withCredentials;o=new XMLHttpRequest,o.open(s,d,!0,a,u),E(l,function(e,t){o.setRequestHeader(t,e)}),f&&(jr.indexOfStrict(s)===-1?o.onprogress=f:o.upload.onprogress=f),o.onabort=function(){t(new Error("Request was aborted")),o=null},o.onerror=function(){t(new Error("Network error")),o=null},o.ontimeout=function(){t(new Error("Request time exceeded")),o=null},o.onreadystatechange=function(){if(o&&o.status&&4===o.readyState){var t={config:i,data:h&&"text"!==h?o.response:o.responseText,headers:br(o.getAllResponseHeaders()),status:1223===o.status?204:o.status,statusText:1223===o.status?"No Content":o.statusText,xhr:o},r=Ht.resolve();E(n,function(e){r=r.then(function(){return e.length>=2?Ht.resolve():new Ht(function(n){n(e(t))})},function(n){return e.length<2?Ht.reject(n):new Ht(function(r){r(e(n,t))})})}),e(r.then(function(){return t}).catch(function(e){try{e.response=t}catch(t){throw e}throw e}))}},o.responseType=h,o.timeout=Number(v)||0,o.withCredentials=!!p,o.send(c)})}),a.abort=function(){return o&&o.abort(),this},a}}]),n}(Function);j(_r.prototype,jt({},Nt.toStringTag,"Fetch"));var Tr=new _r,Rr=vt,Cr=Rr.location,Ar=function(e){var t=Cr.search,n=Cr.hash,r={query:{},hash:n.replace(/^#/,"")};return t?(new on(t.replace(/^\?/,"")).split("&").forEach(function(t){var n=t.split("="),i=Lt(n,2),o=i[0],a=i[1],u=void 0===a?"":a;if(o=e?decodeURIComponent(o):o,u=e?decodeURIComponent(u):u,/^[^[]+/.test(o)){var c=void 0,l=r.query;new on(o).match(/^[^[\]]*|\[[^[\]]*]/g).forEach(function(e){return e.indexOf("[")?void(c=e):(e=e.slice(1,-1),l=l[c]=l[c]||(e?{}:[]),void(c=e||l.length))}),l[c]=u}}),r):r},Lr=new Yt([]),Pr=new It({}),Dr=vt,Nr=Dr.history,Mr=Dr.location,Ur=Dr.location,Br=Ur.origin,qr=Ur.href,Ir=void 0,Fr=void 0,Wr=void 0,Hr=void 0,zr=void 0,Vr=void 0,Gr=void 0,Jr=void 0,Qr=void 0,Zr=void 0,Yr=void 0,Xr=A("call",function(){throw new Error("State path must be a string, a regular expression or undefined! (at registerState)")}).case(w,function(e){return{path:e.source.replace(/\\\//g,"/"),url:e,params:{}}}).case(v,function(){return{path:"/",url:"/",params:{}}}).case($,function(e){if(e.indexOf("/"))throw new Error('If route path is a string it must start with "/"! (at registerState)');var t=e.indexOf("?"),n=new It({}),r="",i=new on(e).slice(0,t===-1?e.length:t).replace(/^\/|\/$/g).split(/\//).map(function(e,t,r){if(!e&&r.length>1)throw new Error('If route path is a string it must not contain "//" or end with "/"! (at makeRoute)');var i=e.indexOf(":");if(i>0)throw new Error("If route path is a string resource part must be either a string or an URL parameter! (at makeRoute)");if(i===-1)return{url:e,value:e};var o=ht(e.slice(1),'URL parameter must not be an empty string or contain characters besides "a-zA-Z_$"! (at makeRoute)',"URL parameter regexp validator must be within parentheses (e.g. :userId(\\d+) and not contain ones)! (at makeRoute)"),a=o.name,u=o.regexp,c=void 0===u?/[^\/]*/:u;return n.$[a]=n.count,{type:"param",url:":"+a,value:c}}).word(function(e){var t=e.type,n=e.url,i=e.value,o=void 0;return o="param"===t?"("+i.source.replace(/\\\//g,"/")+")":new on(i).escapeRegExp().$,r+="/"+n,"/"+o});return{path:i,url:r,params:n.$}}),Kr=function e(t){Ot(this,e),t=t||{};var n=t||{},r=n.name,i=n.path,o=void 0===i?"/":i,a=n.abstract,u=void 0!==a&&a,c=n.parent,l=n.decodeQuery,s=void 0===l||l,f=n.encodeQuery,h=void 0===f||f,v=n.decodeParams,d=void 0===v||v,p=n.encodeParams,g=void 0===p||p,m=Xr(o),y=m.url,w=m.path,k=m.params,b={};new It(this).assign({name:r,parentName:c,abstract:!!u,children:new Yt([]),decodeParams:!!d,decodeQuery:!!s,encodeParams:!!g,encodeQuery:!!h,params:k,query:b,relativePath:w,relativeURL:y});var x=$(o)?o.indexOf("?"):-1;if(x!==-1&&new on(o).replace(/&$/).slice(x+1).split("&").forEach(function(e){var t=ht(e,'Query parameter must not be an empty string or contain characters besides "a-zA-Z_$"! (at makeRoute)',"Query parameter regexp validator must be within parentheses (e.g. :userId(\\d+)) and not contain them! (at makeRoute)"),n=t.name,r=t.regexp,i=void 0===r?/[\s\S]*/:r;b[n]=new RegExp("^"+i.source.replace(/\\\//g,"/")+"$")}),r===Jr&&(new It(k).count||new It(b).count))throw new Error("Default route must not have URL or query params! (at makeRoute)")},ei=new Kr,ti=Object.freeze({D:x,isArray:t,isArrayLike:n,isBoolean:r,isDate:i,isDateLike:o,isElement:a,isFinite:u,isFunction:c,isInteger:l,isIntegerLike:s,isNaN:f,isNull:h,isNil:v,isNumber:d,isNumberLike:p,isObject:g,isPlainObject:m,isPrimitive:y,isRegExp:w,isString:$,isSymbol:k,isUndefined:b,Alphabet:Ut,alphabet:C,Arr:Yt,array:K,iterate:ee,BlobObject:tn,blob:te,Block:ur,Mixin:cr,initApp:Be,wrap:Ye,Dat:yr,now:Ke,date:et,Elem:Pn,win:Dn,doc:Nn,html:Mn,body:Un,head:Bn,find:ye,parseHTML:we,px:$e,Fetch:_r,fetch:Tr,Func:zt,method:V,noop:G,prop:J,self:Q,Num:Zt,rand:Z,random:Y,Promise:Ht,makeRoute:ot,Str:on,parseJSON:re,Super:It,Switcher:Bt,switcher:A,when:L}),ni=x;O(ni,ti),delete ni.D,vt.D=ni}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,