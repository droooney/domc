{"version":3,"file":"dwayne.js","sources":["../lib/constants/global.js","../lib/constants/appliedRegExps.js","../lib/constants/canvasMethods.js","../lib/constants/constructors.js","../lib/constants/elements.js","../lib/constants/htmlAllowedTagSymbols.js","../lib/constants/regexpSpecialCharacters.js","../lib/helpers/toStringTag.js","../lib/helpers/checkTypes.js","../lib/constants/validateCheckExpressions.js","../lib/D.js","../lib/helpers/iterate.js","../lib/helpers/assign.js","../lib/helpers/defineProperty.js","../lib/helpers/Symbol.js","../lib/helpers/toArray.js","../lib/helpers/validate.js","../lib/Alphabet.js","../lib/Switcher.js","../lib/Super.js","../lib/Promise.js","../lib/Func.js","../lib/Num.js","../lib/Arr.js","../lib/BlobObject.js","../lib/Str.js","../lib/helpers/markupToJSON.js","../lib/Elem.js","../lib/blocks/d-block.js","../lib/blocks/d-each.js","../lib/blocks/d-elements.js","../lib/blocks/d-if.js","../lib/blocks/d-item.js","../lib/blocks/d-switch.js","../lib/blocks/d-text.js","../lib/mixins/d-attr.js","../lib/mixins/d-bind.js","../lib/mixins/d-class.js","../lib/mixins/d-elem.js","../lib/mixins/d-hide.js","../lib/mixins/d-on.js","../lib/mixins/d-show.js","../lib/mixins/d-style.js","../lib/mixins/d-text.js","../lib/mixins/d-validate.js","../lib/mixins/d-value.js","../lib/Block.js","../lib/constants/formats.js","../lib/Dat.js","../lib/helpers/constructURL.js","../lib/helpers/parseHeaders.js","../lib/helpers/transformData.js","../lib/Fetch.js","../lib/helpers/resolveURL.js","../lib/Router.js","../browser.js"],"sourcesContent":["/* eslint no-nested-ternary: 0 */\r\n/* eslint no-negated-condition: 0 */\r\nexport default typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\r\n","/**\r\n * @module constants/appliedRegExps\r\n * @private\r\n * @description Exports different types of syntax for {@link Elem#apply}.\r\n */\r\n\r\n/**\r\n * @callback matchAppliedExprCallback\r\n * @param {Elem} elem - D-elem of an element to apply expression to.\r\n * @param {String} string - Matched applied name.\r\n * @param {String} arg - Argument within the parentheses.\r\n */\r\n\r\n/**\r\n * @type {Object.<String, matchAppliedExprCallback|Object.<String, matchAppliedExprCallback>>}\r\n * @description Object of different types of syntax.\r\n */\r\n\r\nexport const appliedRegExps = {\r\n  '#'(elem, id) {\r\n    elem.id(id);\r\n  },\r\n  '.'(elem, cls) {\r\n    elem.addClass(cls);\r\n  },\r\n  $(elem, attr, value) {\r\n    elem.attr(attr, value);\r\n  },\r\n  '@'(elem, prop, value) {\r\n    elem.css(prop, value);\r\n  },\r\n  '&'(elem, name, html) {\r\n    elem.html(html);\r\n  },\r\n  '*'(elem, name, text) {\r\n    elem.text(text);\r\n  },\r\n  '-': {\r\n    '.'(elem, cls) {\r\n      elem.removeClass(cls);\r\n    },\r\n    $(elem, attr) {\r\n      elem.removeAttr(attr);\r\n    },\r\n    '@'(elem, prop) {\r\n      elem.removeCSS(prop);\r\n    }\r\n  }\r\n};\r\n","/**\r\n * @module constants/elements\r\n * @private\r\n * @description Exports different canvas methods for {@link Elem} for creating html-elements.\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {String[]}\r\n */\r\nexport const canvasGetMethods = [\r\n  /**\r\n   * @member {Function} Elem#createImageData\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {ImageData|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/createImageData\r\n   */\r\n  'createImageData',\r\n\r\n  /**\r\n   * @member {Function} Elem#createLinearGradient\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {CanvasGradient|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/createLinearGradient\r\n   */\r\n  'createLinearGradient',\r\n\r\n  /**\r\n   * @member {Function} Elem#createPattern\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {CanvasPattern|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/createPattern\r\n   */\r\n  'createPattern',\r\n\r\n  /**\r\n   * @member {Function} Elem#createRadialGradient\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {CanvasGradient|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/createRadialGradient\r\n   */\r\n  'createRadialGradient',\r\n\r\n  /**\r\n   * @member {Function} Elem#getImageData\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {ImageData|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/getImageData\r\n   */\r\n  'getImageData',\r\n\r\n  /**\r\n   * @member {Function} Elem#getLineDash\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Number[]|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/getLineDash\r\n   */\r\n  'getLineDash',\r\n\r\n  /**\r\n   * @member {Function} Elem#isPointInPath\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Boolean|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/isPointInPath\r\n   */\r\n  'isPointInPath',\r\n\r\n  /**\r\n   * @member {Function} Elem#isPointInStroke\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Boolean|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/isPointInStroke\r\n   */\r\n  'isPointInStroke',\r\n\r\n  /**\r\n   * @member {Function} Elem#measureText\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {TextMetrics|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/measureText\r\n   */\r\n  'measureText'\r\n];\r\n\r\nexport const canvasRestMethods = [\r\n  /**\r\n   * @member {Function} Elem#arc\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/arc\r\n   */\r\n  'arc',\r\n\r\n  /**\r\n   * @member {Function} Elem#arcTo\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/arcTo\r\n   */\r\n  'arcTo',\r\n\r\n  /**\r\n   * @member {Function} Elem#beginPath\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/beginPath\r\n   */\r\n  'beginPath',\r\n\r\n  /**\r\n   * @member {Function} Elem#bezierCurveTo\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo\r\n   */\r\n  'bezierCurveTo',\r\n\r\n  /**\r\n   * @member {Function} Elem#clearRect\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/clearRect\r\n   */\r\n  'clearRect',\r\n\r\n  /**\r\n   * @member {Function} Elem#clip\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/clip\r\n   */\r\n  'clip',\r\n\r\n  /**\r\n   * @member {Function} Elem#closePath\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/closePath\r\n   */\r\n  'closePath',\r\n\r\n  /**\r\n   * @member {Function} Elem#drawFocusIfNeeded\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/drawFocusIfNeeded\r\n   */\r\n  'drawFocusIfNeeded',\r\n\r\n  /**\r\n   * @member {Function} Elem#drawImage\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/drawImage\r\n   */\r\n  'drawImage',\r\n\r\n  /**\r\n   * @member {Function} Elem#ellipse\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/ellipse\r\n   */\r\n  'ellipse',\r\n\r\n  /**\r\n   * @member {Function} Elem#fill\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/fill\r\n   */\r\n  'fill',\r\n\r\n  /**\r\n   * @member {Function} Elem#fillRect\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/fillRect\r\n   */\r\n  'fillRect',\r\n\r\n  /**\r\n   * @member {Function} Elem#fillText\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/fillText\r\n   */\r\n  'fillText',\r\n\r\n  /**\r\n   * @member {Function} Elem#lineTo\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/lineTo\r\n   */\r\n  'lineTo',\r\n\r\n  /**\r\n   * @member {Function} Elem#moveTo\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/moveTo\r\n   */\r\n  'moveTo',\r\n\r\n  /**\r\n   * @member {Function} Elem#putImageData\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/putImageData\r\n   */\r\n  'putImageData',\r\n\r\n  /**\r\n   * @member {Function} Elem#quadraticCurveTo\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo\r\n   */\r\n  'quadraticCurveTo',\r\n\r\n  /**\r\n   * @member {Function} Elem#rect\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/rect\r\n   */\r\n  'rect',\r\n\r\n  /**\r\n   * @member {Function} Elem#resetTransform\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/resetTransform\r\n   */\r\n  'resetTransform',\r\n\r\n  /**\r\n   * @member {Function} Elem#restore\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/restore\r\n   */\r\n  'restore',\r\n\r\n  /**\r\n   * @member {Function} Elem#rotate\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/rotate\r\n   */\r\n  'rotate',\r\n\r\n  /**\r\n   * @member {Function} Elem#save\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/save\r\n   */\r\n  'save',\r\n\r\n  /**\r\n   * @member {Function} Elem#scale\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/scale\r\n   */\r\n  'scale',\r\n\r\n  /**\r\n   * @member {Function} Elem#setLineDash\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/setLineDash\r\n   */\r\n  'setLineDash',\r\n\r\n  /**\r\n   * @member {Function} Elem#setTransform\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/setTransform\r\n   */\r\n  'setTransform',\r\n\r\n  /**\r\n   * @member {Function} Elem#stroke\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/stroke\r\n   */\r\n  'stroke',\r\n\r\n  /**\r\n   * @member {Function} Elem#strokeRect\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/strokeRect\r\n   */\r\n  'strokeRect',\r\n\r\n  /**\r\n   * @member {Function} Elem#strokeText\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/strokeText\r\n   */\r\n  'strokeText',\r\n\r\n  /**\r\n   * @member {Function} Elem#transform\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/transform\r\n   */\r\n  'transform',\r\n\r\n  /**\r\n   * @member {Function} Elem#translate\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/translate\r\n   */\r\n  'translate'\r\n];\r\n","/**\r\n * @module constants/constructors\r\n * @private\r\n * @description Exports constructors levels.\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {Array[]}\r\n */\r\nexport const constructors = [\r\n  [],\r\n  [],\r\n  []\r\n];\r\n","/**\r\n * @module constants/elements\r\n * @private\r\n * @description Exports methods for {@link Elem} for creating html-elements.\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {String[]}\r\n */\r\nexport const htmlElements = [\r\n  /**\r\n   * @member {Function} Elem#a\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'a',\r\n\r\n  /**\r\n   * @member {Function} Elem#abbr\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'abbr',\r\n\r\n  /**\r\n   * @member {Function} Elem#address\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'address',\r\n\r\n  /**\r\n   * @member {Function} Elem#area\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'area',\r\n\r\n  /**\r\n   * @member {Function} Elem#article\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'article',\r\n\r\n  /**\r\n   * @member {Function} Elem#audio\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'audio',\r\n\r\n  /**\r\n   * @member {Function} Elem#b\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'b',\r\n\r\n  /**\r\n   * @member {Function} Elem#base\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'base',\r\n\r\n  /**\r\n   * @member {Function} Elem#bdi\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'bdi',\r\n\r\n  /**\r\n   * @member {Function} Elem#bdo\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'bdo',\r\n\r\n  /**\r\n   * @member {Function} Elem#blockquote\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'blockquote',\r\n\r\n  /**\r\n   * @member {Function} Elem#body\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'body',\r\n\r\n  /**\r\n   * @member {Function} Elem#br\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'br',\r\n\r\n  /**\r\n   * @member {Function} Elem#button\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'button',\r\n\r\n  /**\r\n   * @member {Function} Elem#canvas\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'canvas',\r\n\r\n  /**\r\n   * @member {Function} Elem#caption\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'caption',\r\n\r\n  /**\r\n   * @member {Function} Elem#cite\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'cite',\r\n\r\n  /**\r\n   * @member {Function} Elem#code\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'code',\r\n\r\n  /**\r\n   * @member {Function} Elem#col\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'col',\r\n\r\n  /**\r\n   * @member {Function} Elem#colgroup\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'colgroup',\r\n\r\n  /**\r\n   * @member {Function} Elem#content\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'content',\r\n\r\n  /**\r\n   * @member {Function} Elem#datalist\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'datalist',\r\n\r\n  /**\r\n   * @member {Function} Elem#dd\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'dd',\r\n\r\n  /**\r\n   * @member {Function} Elem#del\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'del',\r\n\r\n  /**\r\n   * @member {Function} Elem#details\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'details',\r\n\r\n  /**\r\n   * @member {Function} Elem#dfn\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'dfn',\r\n\r\n  /**\r\n   * @member {Function} Elem#dialog\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'dialog',\r\n\r\n  /**\r\n   * @member {Function} Elem#div\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'div',\r\n\r\n  /**\r\n   * @member {Function} Elem#dl\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'dl',\r\n\r\n  /**\r\n   * @member {Function} Elem#dt\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'dt',\r\n\r\n  /**\r\n   * @member {Function} Elem#element\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'element',\r\n\r\n  /**\r\n   * @member {Function} Elem#em\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'em',\r\n\r\n  /**\r\n   * @member {Function} Elem#embed\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'embed',\r\n\r\n  /**\r\n   * @member {Function} Elem#fieldset\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'fieldset',\r\n\r\n  /**\r\n   * @member {Function} Elem#figcaption\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'figcaption',\r\n\r\n  /**\r\n   * @member {Function} Elem#figure\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'figure',\r\n\r\n  /**\r\n   * @member {Function} Elem#footer\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'footer',\r\n\r\n  /**\r\n   * @member {Function} Elem#form\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'form',\r\n\r\n  /**\r\n   * @member {Function} Elem#h1\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'h1',\r\n\r\n  /**\r\n   * @member {Function} Elem#h2\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'h2',\r\n\r\n  /**\r\n   * @member {Function} Elem#h3\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'h3',\r\n\r\n  /**\r\n   * @member {Function} Elem#h4\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'h4',\r\n\r\n  /**\r\n   * @member {Function} Elem#h5\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'h5',\r\n\r\n  /**\r\n   * @member {Function} Elem#h6\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'h6',\r\n\r\n  /**\r\n   * @member {Function} Elem#head\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'head',\r\n\r\n  /**\r\n   * @member {Function} Elem#header\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'header',\r\n\r\n  /**\r\n   * @member {Function} Elem#hgroup\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'hgroup',\r\n\r\n  /**\r\n   * @member {Function} Elem#hr\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'hr',\r\n\r\n  /**\r\n   * @member {Function} Elem#i\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'i',\r\n\r\n  /**\r\n   * @member {Function} Elem#iframe\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'iframe',\r\n\r\n  /**\r\n   * @member {Function} Elem#img\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'img',\r\n\r\n  /**\r\n   * @member {Function} Elem#input\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'input',\r\n\r\n  /**\r\n   * @member {Function} Elem#ins\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'ins',\r\n\r\n  /**\r\n   * @member {Function} Elem#kbd\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'kbd',\r\n\r\n  /**\r\n   * @member {Function} Elem#label\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'label',\r\n\r\n  /**\r\n   * @member {Function} Elem#legend\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'legend',\r\n\r\n  /**\r\n   * @member {Function} Elem#li\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'li',\r\n\r\n  /**\r\n   * @member {Function} Elem#link\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'link',\r\n\r\n  /**\r\n   * @member {Function} Elem#main\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'main',\r\n\r\n  /**\r\n   * @member {Function} Elem#mark\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'mark',\r\n\r\n  /**\r\n   * @member {Function} Elem#menu\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'menu',\r\n\r\n  /**\r\n   * @member {Function} Elem#menuitem\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'menuitem',\r\n\r\n  /**\r\n   * @member {Function} Elem#meta\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'meta',\r\n\r\n  /**\r\n   * @member {Function} Elem#meter\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'meter',\r\n\r\n  /**\r\n   * @member {Function} Elem#nav\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'nav',\r\n\r\n  /**\r\n   * @member {Function} Elem#noscript\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'noscript',\r\n\r\n  /**\r\n   * @member {Function} Elem#ol\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'ol',\r\n\r\n  /**\r\n   * @member {Function} Elem#optgroup\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'optgroup',\r\n\r\n  /**\r\n   * @member {Function} Elem#option\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'option',\r\n\r\n  /**\r\n   * @member {Function} Elem#output\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'output',\r\n\r\n  /**\r\n   * @member {Function} Elem#p\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'p',\r\n\r\n  /**\r\n   * @member {Function} Elem#param\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'param',\r\n\r\n  /**\r\n   * @member {Function} Elem#pre\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'pre',\r\n\r\n  /**\r\n   * @member {Function} Elem#progress\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'progress',\r\n\r\n  /**\r\n   * @member {Function} Elem#q\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'q',\r\n\r\n  /**\r\n   * @member {Function} Elem#rp\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'rp',\r\n\r\n  /**\r\n   * @member {Function} Elem#rt\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'rt',\r\n\r\n  /**\r\n   * @member {Function} Elem#rtc\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'rtc',\r\n\r\n  /**\r\n   * @member {Function} Elem#ruby\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'ruby',\r\n\r\n  /**\r\n   * @member {Function} Elem#s\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  's',\r\n\r\n  /**\r\n   * @member {Function} Elem#samp\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'samp',\r\n\r\n  /**\r\n   * @member {Function} Elem#script\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'script',\r\n\r\n  /**\r\n   * @member {Function} Elem#section\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'section',\r\n\r\n  /**\r\n   * @member {Function} Elem#select\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'select',\r\n\r\n  /**\r\n   * @member {Function} Elem#shadow\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'shadow',\r\n\r\n  /**\r\n   * @member {Function} Elem#small\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'small',\r\n\r\n  /**\r\n   * @member {Function} Elem#source\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'source',\r\n\r\n  /**\r\n   * @member {Function} Elem#span\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'span',\r\n\r\n  /**\r\n   * @member {Function} Elem#strong\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'strong',\r\n\r\n  /**\r\n   * @member {Function} Elem#style\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'style',\r\n\r\n  /**\r\n   * @member {Function} Elem#sub\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'sub',\r\n\r\n  /**\r\n   * @member {Function} Elem#summary\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'summary',\r\n\r\n  /**\r\n   * @member {Function} Elem#sup\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'sup',\r\n\r\n  /**\r\n   * @member {Function} Elem#table\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'table',\r\n\r\n  /**\r\n   * @member {Function} Elem#tbody\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'tbody',\r\n\r\n  /**\r\n   * @member {Function} Elem#td\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'td',\r\n\r\n  /**\r\n   * @member {Function} Elem#template\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'template',\r\n\r\n  /**\r\n   * @member {Function} Elem#textarea\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'textarea',\r\n\r\n  /**\r\n   * @member {Function} Elem#tfoot\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'tfoot',\r\n\r\n  /**\r\n   * @member {Function} Elem#th\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'th',\r\n\r\n  /**\r\n   * @member {Function} Elem#thead\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'thead',\r\n\r\n  /**\r\n   * @member {Function} Elem#time\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'time',\r\n\r\n  /**\r\n   * @member {Function} Elem#title\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'title',\r\n\r\n  /**\r\n   * @member {Function} Elem#tr\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'tr',\r\n\r\n  /**\r\n   * @member {Function} Elem#track\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'track',\r\n\r\n  /**\r\n   * @member {Function} Elem#u\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'u',\r\n\r\n  /**\r\n   * @member {Function} Elem#ul\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'ul',\r\n\r\n  /**\r\n   * @member {Function} Elem#var\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'var',\r\n\r\n  /**\r\n   * @member {Function} Elem#video\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'video',\r\n\r\n  /**\r\n   * @member {Function} Elem#wbr\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'wbr'\r\n];\r\n\r\nexport const svgElements = [\r\n  /**\r\n   * @member {Function} Elem#altGlyph\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'altGlyph',\r\n\r\n  /**\r\n   * @member {Function} Elem#altGlyphDef\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'altGlyphDef',\r\n\r\n  /**\r\n   * @member {Function} Elem#altGlyphItem\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'altGlyphItem',\r\n\r\n  /**\r\n   * @member {Function} Elem#animate\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'animate',\r\n\r\n  /**\r\n   * @member {Function} Elem#animateColor\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'animateColor',\r\n\r\n  /**\r\n   * @member {Function} Elem#animateMotion\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'animateMotion',\r\n\r\n  /**\r\n   * @member {Function} Elem#animateTransform\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'animateTransform',\r\n\r\n  /**\r\n   * @member {Function} Elem#circle\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'circle',\r\n\r\n  /**\r\n   * @member {Function} Elem#clipPath\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'clipPath',\r\n\r\n  /**\r\n   * @member {Function} Elem#colorProfile\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'color-profile',\r\n\r\n  /**\r\n   * @member {Function} Elem#cursor\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'cursor',\r\n\r\n  /**\r\n   * @member {Function} Elem#defs\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'defs',\r\n\r\n  /**\r\n   * @member {Function} Elem#desc\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'desc',\r\n\r\n  /**\r\n   * @member {Function} Elem#discard\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'discard',\r\n\r\n  /**\r\n   * @member {Function} Elem#ellipse\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'ellipse',\r\n\r\n  /**\r\n   * @member {Function} Elem#feBlend\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feBlend',\r\n\r\n  /**\r\n   * @member {Function} Elem#feColorMatrix\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feColorMatrix',\r\n\r\n  /**\r\n   * @member {Function} Elem#feComponentTransfer\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feComponentTransfer',\r\n\r\n  /**\r\n   * @member {Function} Elem#feComposite\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feComposite',\r\n\r\n  /**\r\n   * @member {Function} Elem#feConvolveMatrix\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feConvolveMatrix',\r\n\r\n  /**\r\n   * @member {Function} Elem#feDiffuseLighting\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feDiffuseLighting',\r\n\r\n  /**\r\n   * @member {Function} Elem#feDisplacementMap\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feDisplacementMap',\r\n\r\n  /**\r\n   * @member {Function} Elem#feDistantLight\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feDistantLight',\r\n\r\n  /**\r\n   * @member {Function} Elem#feDropShadow\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feDropShadow',\r\n\r\n  /**\r\n   * @member {Function} Elem#feFlood\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feFlood',\r\n\r\n  /**\r\n   * @member {Function} Elem#feFuncA\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feFuncA',\r\n\r\n  /**\r\n   * @member {Function} Elem#feFuncB\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feFuncB',\r\n\r\n  /**\r\n   * @member {Function} Elem#feFuncG\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feFuncG',\r\n\r\n  /**\r\n   * @member {Function} Elem#feFuncR\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feFuncR',\r\n\r\n  /**\r\n   * @member {Function} Elem#feGaussianBlur\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feGaussianBlur',\r\n\r\n  /**\r\n   * @member {Function} Elem#feImage\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feImage',\r\n\r\n  /**\r\n   * @member {Function} Elem#feMerge\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feMerge',\r\n\r\n  /**\r\n   * @member {Function} Elem#feMergeNode\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feMergeNode',\r\n\r\n  /**\r\n   * @member {Function} Elem#feMorphology\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feMorphology',\r\n\r\n  /**\r\n   * @member {Function} Elem#feOffset\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feOffset',\r\n\r\n  /**\r\n   * @member {Function} Elem#fePointLight\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'fePointLight',\r\n\r\n  /**\r\n   * @member {Function} Elem#feSpecularLighting\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feSpecularLighting',\r\n\r\n  /**\r\n   * @member {Function} Elem#feSpotLight\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feSpotLight',\r\n\r\n  /**\r\n   * @member {Function} Elem#feTile\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feTile',\r\n\r\n  /**\r\n   * @member {Function} Elem#feTurbulence\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feTurbulence',\r\n\r\n  /**\r\n   * @member {Function} Elem#font\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'font',\r\n\r\n  /**\r\n   * @member {Function} Elem#fontFace\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'font-face',\r\n\r\n  /**\r\n   * @member {Function} Elem#fontFaceFormat\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'font-face-format',\r\n\r\n  /**\r\n   * @member {Function} Elem#fontFaceName\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'font-face-name',\r\n\r\n  /**\r\n   * @member {Function} Elem#fontFaceSrc\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'font-face-src',\r\n\r\n  /**\r\n   * @member {Function} Elem#fontFaceUri\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'font-face-uri',\r\n\r\n  /**\r\n   * @member {Function} Elem#foreignObject\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'foreignObject',\r\n\r\n  /**\r\n   * @member {Function} Elem#g\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'g',\r\n\r\n  /**\r\n   * @member {Function} Elem#glyph\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'glyph',\r\n\r\n  /**\r\n   * @member {Function} Elem#glyphRef\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'glyphRef',\r\n\r\n  /**\r\n   * @member {Function} Elem#hatch\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'hatch',\r\n\r\n  /**\r\n   * @member {Function} Elem#hatchpath\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'hatchpath',\r\n\r\n  /**\r\n   * @member {Function} Elem#hkern\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'hkern',\r\n\r\n  /**\r\n   * @member {Function} Elem#image\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'image',\r\n\r\n  /**\r\n   * @member {Function} Elem#line\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'line',\r\n\r\n  /**\r\n   * @member {Function} Elem#linearGradient\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'linearGradient',\r\n\r\n  /**\r\n   * @member {Function} Elem#marker\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'marker',\r\n\r\n  /**\r\n   * @member {Function} Elem#mask\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'mask',\r\n\r\n  /**\r\n   * @member {Function} Elem#mesh\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'mesh',\r\n\r\n  /**\r\n   * @member {Function} Elem#meshgradient\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'meshgradient',\r\n\r\n  /**\r\n   * @member {Function} Elem#meshpatch\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'meshpatch',\r\n\r\n  /**\r\n   * @member {Function} Elem#meshrow\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'meshrow',\r\n\r\n  /**\r\n   * @member {Function} Elem#metadata\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'metadata',\r\n\r\n  /**\r\n   * @member {Function} Elem#missingGlyph\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'missing-glyph',\r\n\r\n  /**\r\n   * @member {Function} Elem#mpath\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'mpath',\r\n\r\n  /**\r\n   * @member {Function} Elem#path\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'path',\r\n\r\n  /**\r\n   * @member {Function} Elem#pattern\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'pattern',\r\n\r\n  /**\r\n   * @member {Function} Elem#polygon\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'polygon',\r\n\r\n  /**\r\n   * @member {Function} Elem#polyline\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'polyline',\r\n\r\n  /**\r\n   * @member {Function} Elem#radialGradient\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'radialGradient',\r\n\r\n  /**\r\n   * @member {Function} Elem#rect\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'rect',\r\n\r\n  /**\r\n   * @member {Function} Elem#set\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'set',\r\n\r\n  /**\r\n   * @member {Function} Elem#solidcolor\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'solidcolor',\r\n\r\n  /**\r\n   * @member {Function} Elem#stop\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'stop',\r\n\r\n  /**\r\n   * @member {Function} Elem#style\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'style',\r\n\r\n  /**\r\n   * @member {Function} Elem#svg\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'svg',\r\n\r\n  /**\r\n   * @member {Function} Elem#switch\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'switch',\r\n\r\n  /**\r\n   * @member {Function} Elem#symbol\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'symbol',\r\n\r\n  /**\r\n   * @member {Function} Elem#textPath\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'textPath',\r\n\r\n  /**\r\n   * @member {Function} Elem#tref\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'tref',\r\n\r\n  /**\r\n   * @member {Function} Elem#tspan\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'tspan',\r\n\r\n  /**\r\n   * @member {Function} Elem#unknown\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'unknown',\r\n\r\n  /**\r\n   * @member {Function} Elem#use\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'use',\r\n\r\n  /**\r\n   * @member {Function} Elem#view\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'view',\r\n\r\n  /**\r\n   * @member {Function} Elem#vkern\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'vkern'\r\n];\r\n\r\nexport const voidElements = [\r\n  'area',\r\n  'base',\r\n  'br',\r\n  'col',\r\n  'command',\r\n  'embed',\r\n  'hr',\r\n  'img',\r\n  'input',\r\n  'keygen',\r\n  'link',\r\n  'meta',\r\n  'param',\r\n  'source',\r\n  'track',\r\n  'wbr'\r\n];\r\n","export const htmlAllowedTagSymbols = '[a-z][a-z\\\\d\\\\-_.:!@#\\\\$%\\\\^&*()\\\\[\\\\]{}\\\\\\\\=\\'\"]*';\r\nexport const htmlAllowedAttrSymbols = '[^\\\\u0000-\\\\u0020\\\\s\"\\'>/=]+';\r\n","/**\r\n * @module constants/regexpSpecialCharacters\r\n * @private\r\n * @description Exports special characters for RegExp.\r\n */\r\n\r\n/**\r\n * @const\r\n * @name module:constants/regexpSpecialCharacters~regexpSpecialCharacters\r\n * @type {String[]}\r\n */\r\nexport const regexpSpecialCharacters = [\r\n  '.',\r\n  '+', '*', '?',\r\n  '(', ')',\r\n  '[', ']',\r\n  '{', '}',\r\n  '<', '>',\r\n  '^', '$',\r\n  '!',\r\n  '=',\r\n  ':',\r\n  '-',\r\n  '|',\r\n  ',',\r\n  '\\\\'\r\n];\r\n","/**\r\n * @module helpers/toStringTag\r\n * @private\r\n * @description Exports toStringTag method.\r\n */\r\n\r\n/**\r\n * @function toStringTag\r\n * @param {*} object - Object to get toStringTag of.\r\n * @returns {String} Cut string.\r\n * @description Cut \"Type\" string from \"[object Type]\" string that gotten from {}.toString,call(object).\r\n */\r\nexport function toStringTag(object) {\r\n  return {}.toString.call(object).replace(/^\\[object |]$/g, '');\r\n}\r\n","/**\r\n * @module helpers/checkTypes\r\n * @private\r\n * @mixin\r\n * @description Exports is<Type> methods.\r\n */\r\n\r\nimport { toStringTag } from './toStringTag';\r\n\r\n/**\r\n * @function isArray\r\n * @public\r\n * @param {*} value - Value to check if it is an array.\r\n * @returns {Boolean} If the argument is an array or not.\r\n * \r\n * @example\r\n * isArray([]);                             // true\r\n * isArray(0);                              // true\r\n * isArray(document.querySelectorAll('*')); // false\r\n */\r\nexport function isArray(value) {\r\n  return toStringTag(value) === 'Array';\r\n}\r\n\r\n/**\r\n * @function isArrayLike\r\n * @public\r\n * @param {*} value - Value to check if it is array-like.\r\n * @returns {Boolean} If the argument is array-like or not.\r\n * @description Basically returns if the argument has non-negative integer \"length\" property and isn't a function.\r\n * \r\n * @example\r\n * isArrayLike([]);                             // true\r\n * isArrayLike('');                             // true\r\n * isArrayLike(() => {});                       // false\r\n * isArrayLike(document.querySelectorAll('*')); // true\r\n */\r\nexport function isArrayLike(value) {\r\n  if (!value || isFunction(value)) {\r\n    return false;\r\n  }\r\n  \r\n  const length = value.length;\r\n  \r\n  return isInteger(length) && length >= 0;\r\n}\r\n\r\n/**\r\n * @function isBoolean\r\n * @public\r\n * @param {*} value - Value to check if it is a boolean.\r\n * @returns {Boolean} If the argument is a boolean or not.\r\n * \r\n * @example\r\n * isBoolean(true);               // true\r\n * isBoolean(new Boolean(false)); // true\r\n * isBoolean(null);               // false\r\n */\r\nexport function isBoolean(value) {\r\n  return toStringTag(value) === 'Boolean';\r\n}\r\n\r\n/**\r\n * @function isDate\r\n * @public\r\n * @param {*} value - Value to check if it is a date.\r\n * @returns {Boolean} If the argument is a date or not.\r\n * \r\n * @example\r\n * isDate(new Date());                 // true\r\n * isDate('1999-12-31T23:59:59.999Z'); // false\r\n */\r\nexport function isDate(value) {\r\n  return toStringTag(value) === 'Date';\r\n}\r\n\r\n/**\r\n * @function isDateLike\r\n * @public\r\n * @param {*} value - Value to check if it is date-like.\r\n * @returns {Boolean} If the argument is date-like or not.\r\n * @description Basically returns if new Date(argument) is not invalid date.\r\n * \r\n * @example\r\n * isDateLike(new Date());                 // true\r\n * isDateLike('1999-12-31T23:59:59.999Z'); // true\r\n * isDateLike(0);                          // true\r\n */\r\nexport function isDateLike(value) {\r\n  value = new Date(value);\r\n  \r\n  return !isNaN(value.getTime());\r\n}\r\n\r\n/**\r\n * @function isElement\r\n * @public\r\n * @param {*} value - Value to check if it is an element.\r\n * @returns {Boolean} If the argument is element or not.\r\n *\r\n * @example\r\n * isElement(document.querySelector('html')); // true\r\n */\r\nexport function isElement(value) {\r\n  return /Element$/.test(toStringTag(value));\r\n}\r\n\r\n/**\r\n * @function isFinite\r\n * @public\r\n * @param {*} value - Value to check if it is finite.\r\n * @returns {Boolean} If the argument is finite or not.\r\n * \r\n * @example\r\n * isFinite(0);        // true\r\n * isFinite('0');      // false\r\n * isFinite(Infinity); // false\r\n * isFinite(NaN);      // false\r\n */\r\nexport function isFinite(value) {\r\n  if (!isNumber(value)) {\r\n    return false;\r\n  }\r\n  \r\n  value = Number(value);\r\n\r\n  return !isNaN(value) && value !== Infinity && value !== -Infinity;\r\n}\r\n\r\n/**\r\n * @function isFunction\r\n * @public\r\n * @param {*} value - Value to check if it is a function.\r\n * @returns {Boolean} If the argument is a function or not.\r\n * \r\n * @example\r\n * isFunction(() => {});            // true\r\n * \r\n * const func = () => {};\r\n * Object.setPrototypeOf(func, {});\r\n * isFunction(func);                // true\r\n */\r\nexport function isFunction(value) {\r\n  return toStringTag(value) === 'Function' || typeof value === 'function';\r\n}\r\n\r\n/**\r\n * @function isInteger\r\n * @public\r\n * @param {*} value - Value to check if it is an integer.\r\n * @returns {Boolean} If the argument is an integer or not.\r\n *\r\n * @example\r\n * isInteger(0);             // true\r\n * isInteger(0.1);           // false\r\n * isInteger(new Number(0)); // true\r\n * isInteger('0');           // false\r\n * isInteger(Infinity);      // false\r\n * isInteger(NaN);           // false\r\n */\r\nexport function isInteger(value) {\r\n  return isNumber(value) && value % 1 === 0;\r\n}\r\n\r\n/**\r\n * @function isIntegerLike\r\n * @public\r\n * @param {*} value - Value to check if it is integer-like.\r\n * @returns {Boolean} If the argument is integer-like or not.\r\n *\r\n * @example\r\n * isIntegerLike(0);             // true\r\n * isIntegerLike(new Number(0)); // true\r\n * isIntegerLike(0.1);           // false\r\n * isIntegerLike('0');           // true\r\n */\r\nexport function isIntegerLike(value) {\r\n  value = parseInt(Number(value));\r\n\r\n  return !!(value || value === 0);\r\n}\r\n\r\n/**\r\n * @function isNaN\r\n * @public\r\n * @param {*} value - Value to check if it is NaN.\r\n * @returns {Boolean} If the argument is NaN or not.\r\n *\r\n * @example\r\n * isNaN(0);               // false\r\n * isNaN('NaN');           // false\r\n * isNaN(NaN);             // true\r\n * isNaN(new Number(NaN)); // true\r\n */\r\nexport function isNaN(value) {\r\n  if (!isNumber(value)) {\r\n    return false;\r\n  }\r\n  \r\n  value = Number(value);\r\n\r\n  return value !== value;\r\n}\r\n\r\n/**\r\n * @function isNull\r\n * @public\r\n * @param {*} value - Value to check if it is null.\r\n * @returns {Boolean} If the argument is null or not.\r\n *\r\n * @example\r\n * isNull(null);      // true\r\n * isNull(undefined); // false\r\n */\r\nexport function isNull(value) {\r\n  return value === null;\r\n}\r\n\r\n/**\r\n * @function isNil\r\n * @public\r\n * @param {*} value - Value to check if it is null or undefined.\r\n * @returns {Boolean} If the argument is null or undefined or not.\r\n *\r\n * @example\r\n * isNil(null);      // true\r\n * isNil(undefined); // true\r\n * isNil(false);     // false\r\n */\r\nexport function isNil(value) {\r\n  return value === null || typeof value === 'undefined';\r\n}\r\n\r\n/**\r\n * @function isNumber\r\n * @public\r\n * @param {*} value - Value to check if it is a number.\r\n * @returns {Boolean} If the argument is a number or not.\r\n *\r\n * @example\r\n * isNumber(0);             // true\r\n * isNumber(new Number(0)); // true\r\n * isNumber(NaN);           // true\r\n * isNumber('0');           // false\r\n */\r\nexport function isNumber(value) {\r\n  return toStringTag(value) === 'Number';\r\n}\r\n\r\n/**\r\n * @function isNumberLike\r\n * @public\r\n * @param {*} value - Value to check if it is number-like.\r\n * @returns {Boolean} If the argument is number-like or not.\r\n *\r\n * @example\r\n * isNumberLike(0);          // true\r\n * isNumberLike('0');        // true\r\n * isNumberLike('Infinity'); // true\r\n * isNumberLike('NaN');      // true\r\n * isNumberLike(NaN);        // true\r\n */\r\nexport function isNumberLike(value) {\r\n  if (isNaN(value) || value === 'NaN') {\r\n    return true;\r\n  }\r\n  \r\n  value = Number(value);\r\n  \r\n  return !!(value || value === 0);\r\n}\r\n\r\n/**\r\n * @function isObject\r\n * @public\r\n * @param {*} value - Value to check if it is an object.\r\n * @returns {Boolean} If the argument is an object or not.\r\n *\r\n * @example\r\n * isObject({});   // true\r\n * isObject(1);    // false\r\n * isObject(null); // false\r\n */\r\nexport function isObject(value) {\r\n  return !!value && (toStringTag(value) === 'Object' || typeof value === 'object' || value instanceof Object);\r\n}\r\n\r\n/**\r\n * @function isPlainObject\r\n * @public\r\n * @param {*} value - Value to check if it is a plain object.\r\n * @returns {Boolean} If the argument is a plain object or not.\r\n *\r\n * @example\r\n * const obj = {};\r\n *\r\n * ifPlainObject(obj); // true\r\n *\r\n * Object.setPrototypeOf(object, null);\r\n *\r\n * ifPlainObject(obj); // true\r\n *\r\n * Object.setPrototypeOf(object, {});\r\n *\r\n * ifPlainObject(obj); // false\r\n */\r\nexport function isPlainObject(value) {\r\n  if (isPrimitive(value)) {\r\n    return false;\r\n  }\r\n\r\n  const proto = Object.getPrototypeOf(value);\r\n\r\n  if (isNull(proto)) {\r\n    return true;\r\n  }\r\n\r\n  const constructor = proto.constructor;\r\n\r\n  return isFunction(constructor) &&\r\n    constructor instanceof constructor &&\r\n    isNull(Object.getPrototypeOf(proto));\r\n}\r\n\r\n/**\r\n * @function isPrimitive\r\n * @public\r\n * @param {*} value - Value to check if it is primitive.\r\n * @returns {Boolean} If the argument is primitive or not.\r\n *\r\n * @example\r\n * isPrimitive(1);             // true\r\n * isPrimitive({});            // false\r\n * isPrimitive('');            // true\r\n * isPrimitive(new Number(0)); // false\r\n * isPrimitive(true);          // true\r\n * isPrimitive(Symbol('foo')); // true\r\n * isPrimitive(null);          // true\r\n * isPrimitive(undefined);     // true\r\n */\r\nexport function isPrimitive(value) {\r\n  return isNull(value) || /^(number|string|boolean|symbol|undefined)$/.test(typeof value);\r\n}\r\n\r\n/**\r\n * @function isRegExp\r\n * @public\r\n * @param {*} value - Value to check if it is a regular expression.\r\n * @returns {Boolean} If the argument is a regular expression or not.\r\n *\r\n * @example\r\n * isRegExp(/foo/);             // true\r\n * isRegExp('/foo/');           // false\r\n * isRegExp(new RegExp('foo')); // true\r\n */\r\nexport function isRegExp(value) {\r\n  return toStringTag(value) === 'RegExp';\r\n}\r\n\r\n/**\r\n * @function isString\r\n * @public\r\n * @param {*} value - Value to check if it is a string.\r\n * @returns {Boolean} If the argument is a string or not.\r\n *\r\n * @example\r\n * isString('0');             // true\r\n * isString(new String('0')); // true\r\n */\r\nexport function isString(value) {\r\n  return toStringTag(value) === 'String';\r\n}\r\n\r\n/**\r\n * @function isSymbol\r\n * @public\r\n * @param {*} value - Value to check if it is a symbol.\r\n * @returns {Boolean} If the argument is a symbol or not.\r\n *\r\n * @example\r\n * isSymbol(Symbol('1')); // true\r\n */\r\nexport function isSymbol(value) {\r\n  return toStringTag(value) === 'Symbol';\r\n}\r\n\r\n/**\r\n * @function isUndefined\r\n * @public\r\n * @param {*} value - Value to check if it is undefined.\r\n * @returns {Boolean} If the argument is undefined or not.\r\n *\r\n * @example\r\n * isUndefined(null);      // false\r\n * isUndefined(undefined); // true\r\n */\r\nexport function isUndefined(value) {\r\n  return typeof value === 'undefined';\r\n}\r\n","/**\r\n * @module constants/validateCheckExpressions\r\n * @private\r\n * @description Exports different types of validate expressions for {@link module:helpers/validate}.\r\n */\r\n\r\nimport * as methods from '../helpers/checkTypes';\r\n\r\n/**\r\n * @callback checkValidityCallback\r\n * @private\r\n * @param {*} value - Value to check.\r\n */\r\n\r\n/**\r\n * @typedef {Object} validateExpr\r\n * @private\r\n * @property {String} text - Text of the thrown error.\r\n * @property {Error} error - Type of the thrown error.\r\n * @property {checkValidityCallback} check - Callback for checking value.\r\n */\r\n\r\n/**\r\n * @type {validateExpr[]}\r\n * @private\r\n * @description Object of different types of validation.\r\n */\r\nexport const validateCheckExpressions = {\r\n  '>0': {\r\n    check: (n) => n > 0,\r\n    text: '$n argument must be positive!',\r\n    error: RangeError\r\n  },\r\n  '>=0': {\r\n    check: (n) => n >= 0,\r\n    text: '$n argument must be non-negative!',\r\n    error: RangeError\r\n  },\r\n  '<0': {\r\n    check: (n) => n < 0,\r\n    text: '$n argument must be negative!',\r\n    error: RangeError\r\n  },\r\n  '<=0': {\r\n    check: (n) => n <= 0,\r\n    text: '$n argument must be non-positive!',\r\n    error: RangeError\r\n  },\r\n  '!!': {\r\n    check: (v) => !methods.isNil(v),\r\n    text: '$n argument must be not null or undefined!',\r\n    error: TypeError\r\n  },\r\n  array: {\r\n    check: methods.isArray,\r\n    text: '$n argument must be an array!',\r\n    error: TypeError\r\n  },\r\n  'array||!': {\r\n    check: (a) => methods.isArray(a) || methods.isNil(a),\r\n    text: '$n argument must be an array, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  arrayLike: {\r\n    check: methods.isArrayLike,\r\n    text: '$n argument must be array-like!',\r\n    error: TypeError\r\n  },\r\n  'arrayLike||!': {\r\n    check: (a) => methods.isArrayLike(a) || methods.isNil(a),\r\n    text: '$n argument must be array-like, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  date: {\r\n    check: methods.isDate,\r\n    text: '$n argument must be a date!',\r\n    error: TypeError\r\n  },\r\n  'date||!': {\r\n    check: (d) => methods.isDate(d) || methods.isNil(d),\r\n    text: '$n argument must be a date, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  dateLike: {\r\n    check: methods.isDateLike,\r\n    text: '$n argument must be date-like!',\r\n    error: TypeError\r\n  },\r\n  'dateLike||!': {\r\n    check: (d) => methods.isDateLike(d) || methods.isNil(d),\r\n    text: '$n argument must be date-like, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  function: {\r\n    check: methods.isFunction,\r\n    text: '$n argument must be a function!',\r\n    error: TypeError\r\n  },\r\n  'function||!': {\r\n    check: (f) => methods.isFunction(f) || methods.isNil(f),\r\n    text: '$n argument must be a function, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  int: {\r\n    check: methods.isInteger,\r\n    text: '$n argument must be an integer!',\r\n    error: TypeError\r\n  },\r\n  'int||!': {\r\n    check: (i) => methods.isInteger(i) || methods.isNil(i),\r\n    text: '$n argument must be an integer, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  intLike: {\r\n    check: methods.isIntegerLike,\r\n    text: '$n argument must be integer-like!',\r\n    error: TypeError\r\n  },\r\n  'intLike||!': {\r\n    check: (i) => methods.isIntegerLike(i) || methods.isNil(i),\r\n    text: '$n argument must be integer-like, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  number: {\r\n    check: methods.isNumber,\r\n    text: '$n argument must be a number!',\r\n    error: TypeError\r\n  },\r\n  'number||!': {\r\n    check: (n) => methods.isNumber(n) || methods.isNil(n),\r\n    text: '$n argument must be a number, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  numberLike: {\r\n    check: methods.isNumberLike,\r\n    text: '$n argument must be number-like!',\r\n    error: TypeError\r\n  },\r\n  'numberLike||!': {\r\n    check: (n) => methods.isNumberLike(n) || methods.isNil(n),\r\n    text: '$n argument must be number-like, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  object: {\r\n    check: methods.isObject,\r\n    text: '$n argument must be an object!',\r\n    error: TypeError\r\n  },\r\n  'object||!': {\r\n    check: (o) => methods.isObject(o) || methods.isNil(o),\r\n    text: '$n argument must be an object, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  regexp: {\r\n    check: methods.isRegExp,\r\n    text: '$n argument must be a regular expression!',\r\n    error: TypeError\r\n  },\r\n  'regexp||!': {\r\n    check: (r) => methods.isRegExp(r) || methods.isNil(r),\r\n    text: '$n argument must be a regular expression, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  string: {\r\n    check: methods.isString,\r\n    text: '$n argument must be a string!',\r\n    error: TypeError\r\n  },\r\n  'string||!': {\r\n    check: (s) => methods.isString(s) || methods.isNil(s),\r\n    text: '$n argument must be a string, or undefined, or null!',\r\n    error: TypeError\r\n  }\r\n};\r\n","/**\r\n * @module D\r\n * @private\r\n * @description Exports D function.\r\n */\r\n\r\nimport { constructors } from './constants';\r\n\r\n/**\r\n * @function D\r\n * @public\r\n * @param {*} [value] - Any value.\r\n * @returns {DWrap} Wrap of the argument.\r\n * @description Function for creating a D-wrap of an object.\r\n *\r\n * @example\r\n * D({});            // Super\r\n * D(() => {});      // Func\r\n * D([]);            // Arr\r\n * D(1);             // Num\r\n * D('1');           // Str\r\n * D(new Date());    // Dat\r\n * D(document.body); // Elem\r\n */\r\nfunction D(value) {\r\n  for (let i = constructors.length - 1; i >= 0; i--) {\r\n    const levelConstructors = constructors[i];\r\n\r\n    for (let k = 0, len = levelConstructors.length; k < len; k++) {\r\n      const constructor = levelConstructors[k];\r\n\r\n      if (value instanceof constructor.cls) {\r\n        return value;\r\n      }\r\n\r\n      if (constructor.check(value)) {\r\n        return new constructor.cls(value);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport * from './helpers/checkTypes';\r\nexport { D };\r\n","/**\r\n * @module helpers/iterate\r\n * @private\r\n * @description Exports iterate method.\r\n */\r\n\r\nimport { isArrayLike, isUndefined } from './checkTypes';\r\n\r\n/**\r\n * @callback IterationCallback\r\n * @param {*} value - Iteration value.\r\n * @param {String|Number} key - Iteration key.\r\n * @param {*} object - Initial iterable object.\r\n */\r\n\r\n/**\r\n * @function iterate\r\n * @param {(Object|Array|null|undefined)} object - Value to iterate over.\r\n * @param {IterationCallback} callback - Callback that is called on every iteration.\r\n * @returns {*} If callback returns not undefined then iterate returns this value.\r\n * @description Function for iterating over all types of values.\r\n */\r\nexport function iterate(object, callback) {\r\n  const array = isArrayLike(object);\r\n  const iteratedKeys = {};\r\n\r\n  let iterated = 0;\r\n\r\n  for (const key in object) {\r\n    if ({}.hasOwnProperty.call(iteratedKeys, key)) {\r\n      continue;\r\n    }\r\n\r\n    iteratedKeys[key] = true;\r\n\r\n    if ({}.hasOwnProperty.call(object, key)) {\r\n      if (array && iterated++ >= object.length) {\r\n        break;\r\n      }\r\n\r\n      const value = callback(object[key], array ? Number(key) : key, object);\r\n\r\n      if (!isUndefined(value)) {\r\n        return value;\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @module helpers/assign\r\n * @private\r\n * @description Exports Object.assign-like method.\r\n */\r\n\r\nimport { iterate } from './iterate';\r\n\r\n/**\r\n * @const\r\n * @function assign\r\n * @param {Object} target - Object to assign rest of arguments to.\r\n * @param {...Object} objects - Objects that are assigned to the target.\r\n * @returns {Object} Target.\r\n */\r\nexport function assign(target, ...objects) {\r\n  iterate(arguments, (source, index) => {\r\n    if (index) {\r\n      iterate(source, (value, key) => {\r\n        target[key] = value;\r\n      });\r\n    }\r\n  });\r\n    \r\n  return target;\r\n}\r\n","/**\r\n * @module helpers/defineProperty\r\n * @private\r\n * @description Exports defineProperty and dynamicDefineProperties methods.\r\n */\r\n\r\nimport { iterate } from './iterate';\r\n\r\n/**\r\n * @callback propertyGeneratorCallback\r\n * @param {String} name - Name of the property.\r\n * @param {Number} i - Index of the array.\r\n * @returns {*} Generated property.\r\n */\r\n\r\n/**\r\n * @function dynamicDefineProperties\r\n * @param {Object} target - Object to define properties for.\r\n * @param {Array} properties - Object which keys are properties.\r\n * @param {propertyGeneratorCallback} propertyGenerator - Callback for every property.\r\n * @returns {void}\r\n * @description Function for dynamic creating properties based on name of the method.\r\n */\r\nexport function dynamicDefineProperties(target, properties, propertyGenerator) {\r\n  iterate(properties, (name, i) => {\r\n    Object.defineProperty(target, name, {\r\n      value: propertyGenerator(name, i),\r\n      writable: true,\r\n      enumerable: false,\r\n      configurable: true\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * @function defineProperties\r\n * @param {Object} target - Target to define properties for.\r\n * @param {Object} properties - Object with properties needed to be assign to the target.\r\n * @returns {void}\r\n * @description Function for defining properties of an object.\r\n */\r\nexport function defineProperties(target, properties) {\r\n  iterate(properties, (method, name) => {\r\n    if (/^get /.test(name)) {\r\n      Object.defineProperty(target, name.replace(/^get /, ''), {\r\n        get: method,\r\n        set: undefined,\r\n        enumerable: false,\r\n        configurable: true\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    if (/^set /.test(name)) {\r\n      Object.defineProperty(target, name.replace(/^set /, ''), {\r\n        set: method,\r\n        get: undefined,\r\n        enumerable: false,\r\n        configurable: true\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    if (/^get\\/set /.test(name)) {\r\n      Object.defineProperty(target, name.replace(/^get\\/set /, ''), {\r\n        get: method.get,\r\n        set: method.set,\r\n        enumerable: false,\r\n        configurable: true\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    if (name !== 'Symbol.toStringTag') {\r\n      Object.defineProperty(target, name, {\r\n        value: method,\r\n        writable: true,\r\n        enumerable: false,\r\n        configurable: true\r\n      });\r\n    }\r\n  });\r\n}\r\n","/**\r\n * @module helpers/Symbol\r\n * @private\r\n * @description Exports Symbol class.\r\n */\r\n\r\nexport const Symbol = global.Symbol || {\r\n  toStringTag: 'Symbol.toStringTag',\r\n  iterator: Math.random().toString(36)\r\n};\r\n","/**\r\n * @module helpers/toArray\r\n * @private\r\n * @description Exports toArray method.\r\n */\r\n\r\nimport { isArray, isArrayLike, isString } from './checkTypes';\r\nimport { iterate } from './iterate';\r\n\r\n/**\r\n * @function toArray\r\n * @param {*} value - Any value.\r\n * @param {Boolean} [createNewArray = false] - If it is needed to create new array.\r\n * @returns {Array} Create array.\r\n * @description Function for creating an array of any value.\r\n */\r\nexport function toArray(value, createNewArray) {\r\n  if (isArray(value) && !createNewArray) {\r\n    return value;\r\n  }\r\n\r\n  const array = [];\r\n\r\n  if (isArrayLike(value) && !isString(value)) {\r\n    iterate(value, (value) => {\r\n      array.push(value);\r\n    });\r\n  } else {\r\n    array.push(value);\r\n  }\r\n\r\n  return array;\r\n}\r\n","/**\r\n * @module helpers/validate\r\n * @private\r\n * @description Exports validate method.\r\n */\r\n\r\nimport { validateCheckExpressions } from '../constants';\r\nimport { iterate } from './iterate';\r\nimport { isArray } from './checkTypes';\r\n\r\nconst numbers = ['1st', '2nd', '3rd', '4th', '5th', '6th', '7th'];\r\n\r\n/**\r\n * @function validate\r\n * @private\r\n * @param {Object} args - Arguments of function.\r\n * @param {Object} options - Object with validate parameters.\r\n * @param {String} [name] - Name of the function what called validate.\r\n * @returns {void}\r\n * @description Function for checking arguments of other functions.\r\n */\r\nexport function validate(args, options, name) {\r\n  iterate(options, (array, number) => {\r\n    if (!isArray(array)) {\r\n      array = [array];\r\n    }\r\n\r\n    iterate(array, (checker) => {\r\n      checker = validateCheckExpressions[checker];\r\n\r\n      if (!checker.check(args[number])) {\r\n        throw new checker.error(checker.text.replace('$n', numbers[number]) + (name ? ` (at ${ name })` : ''));\r\n      }\r\n    });\r\n  });\r\n}\r\n","/**\r\n * @module Alphabet\r\n * @private\r\n * @mixin\r\n * @description Exports Alphabet class.\r\n */\r\n\r\nimport { isString, validate, defineProperties, Symbol } from './helpers';\r\n\r\n/**\r\n * @typedef {String} Char\r\n * @public\r\n * @description A string of one char.\r\n */\r\n\r\n/**\r\n * @class Alphabet\r\n * @public\r\n * @param {ArrayLike} alphabet - Alphabet to wrap.\r\n * @returns {Alphabet} Instance of Alphabet.\r\n * @description Class for alphabet manipulations: add, delete symbols, generate a token from an alphabet,\r\n * check if an alphabet contains a word.\r\n *\r\n * @example\r\n * new Alphabet(['a', 'b', 'c']);\r\n */\r\nclass Alphabet {\r\n  constructor(alphabet = []) {\r\n    const a = {};\r\n\r\n    for (let i = 0, length = alphabet.length; i < length; i++) {\r\n      const char = alphabet[i];\r\n\r\n      if (!check(char)) {\r\n        throw new Error('Each element of an array must be a single char! (in Alphabet)');\r\n      }\r\n\r\n      a[char] = char;\r\n    }\r\n\r\n    /**\r\n     * @member {Object} Alphabet#$$\r\n     * @public\r\n     * @description The alphabet.\r\n     */\r\n    Object.defineProperty(this, '$$', { value: a });\r\n  }\r\n\r\n  /**\r\n   * @method Alphabet#add\r\n   * @public\r\n   * @param {...Char} chars - Chars to add.\r\n   * @returns {Alphabet} Returns this.\r\n   * @description Method for adding new letters to the alphabet.\r\n   *\r\n   * @example\r\n   * const alphabet = new Alphabet(['a', 'b', 'c']);\r\n   *\r\n   * alphabet.add('d', 'e');\r\n   *\r\n   * alphabet.get().$; // ['a', 'b', 'c', 'd', 'e']\r\n   */\r\n  add(...chars) {\r\n    for (let i = 0, length = chars.length; i < length; i++) {\r\n      const char = chars[i];\r\n\r\n      if (!check(char)) {\r\n        throw new Error('Each argument must be a single char! (in Alphabet#add)');\r\n      }\r\n\r\n      this.$$[char] = char;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Alphabet#contains\r\n   * @public\r\n   * @param {String} word - Word to check if it is in the alphabet or not.\r\n   * @returns {Boolean} If the word in the alphabet or not.\r\n   * @description Method that returns if a word is in alphabet or not.\r\n   *\r\n   * @example\r\n   * const alphabet = new Alphabet(['f', 'b', 'o', 'a', 'r']);\r\n   *\r\n   * alphabet.contains('foo'); // true\r\n   * alphabet.contains('bar'); // true\r\n   * alphabet.contains('baz'); // false\r\n   */\r\n  contains(word) {\r\n    validate([word], ['string'], 'Alphabet#contains');\r\n\r\n    const alphabet = this.$$;\r\n\r\n    for (let i = 0, length = word.length; i < length; i++) {\r\n      if (!alphabet[word[i]]) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @method Alphabet#delete\r\n   * @public\r\n   * @param {...Char} chars - Chars to delete.\r\n   * @returns {Alphabet} Returns this.\r\n   * @description Method for deleting letters from the alphabet.\r\n   *\r\n   * @example\r\n   * const alphabet = new Alphabet(['a', 'b', 'c', 'd']);\r\n   *\r\n   * alphabet.delete('a');\r\n   *\r\n   * alphabet.get().$; // ['b', 'c', 'd']\r\n   *\r\n   * alphabet.delete('b', 'd');\r\n   *\r\n   * alphabet.get().$; // ['c']\r\n   */\r\n  delete(...chars) {\r\n    for (let i = 0, length = chars.length; i < length; i++) {\r\n      const char = chars[i];\r\n\r\n      if (!check(char)) {\r\n        throw new Error('Each argument must be a single char! (in Alphabet#delete)');\r\n      }\r\n\r\n      delete this.$$[char];\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Alphabet#get\r\n   * @returns {Array} Wrap of an array of alphabet letters.\r\n   * @description Method for getting array of alphabet letters.\r\n   *\r\n   * @example\r\n   * new Alphabet(['a', 'b', 'c']).get().$; // ['a', 'b', 'c']\r\n   */\r\n  get() {\r\n    return Object.keys(this.$$);\r\n  }\r\n\r\n  /**\r\n   * @method Alphabet#token\r\n   * @public\r\n   * @param {Number} length - Token length.\r\n   * @returns {String} Token.\r\n   * @description Method for generating random token with given length.\r\n   *\r\n   * @example\r\n   * new Alphabet(['a', 'b', 'c']).token(4); // 'abcb'\r\n   */\r\n  token(length) {\r\n    validate([length], [['intLike', '>0']], 'Alphabet#token');\r\n\r\n    const alphabet = Object.keys(this.$$);\r\n    const len = alphabet.length;\r\n    let token = '';\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      token += alphabet[Math.floor(Math.random() * len)];\r\n    }\r\n\r\n    return token;\r\n  }\r\n}\r\n\r\ndefineProperties(Alphabet.prototype, {\r\n  [Symbol.toStringTag]: 'Alphabet'\r\n});\r\n\r\nfunction check(char) {\r\n  return isString(char) && char.length === 1;\r\n}\r\n\r\n/**\r\n * @function alphabet\r\n * @public\r\n * @param {String} string - String to generate an alphabet from.\r\n * @returns {Alphabet} New instance of Alphabet.\r\n * @description Function for creating an alphabet from a string that has format like this:\r\n * '&lt;char1&gt;-&lt;char2&gt; &lt;char3&gt;-&lt;char4&gt;'\r\n *\r\n * @example\r\n * const a1 = alphabet('a-c 1-3');\r\n * const a2 = alphabet('5-5f-g');\r\n *\r\n * a1.get().$; // ['1', '2', '3', 'a', 'b', 'c']\r\n * a2.get().$; // ['5', 'f', 'g']\r\n */\r\nfunction alphabet(string) {\r\n  validate([string], ['string']);\r\n\r\n  const ranges = string.split(/([\\s\\S]-+[\\s\\S])?/g);\r\n  const length = ranges.length;\r\n  const alphabet = [];\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    const range = ranges[i];\r\n\r\n    if (!range || range === ' ') {\r\n      continue;\r\n    }\r\n\r\n    if (/-/.test(range) && !/[\\s\\S]-+[\\s\\S]/.test(range)) {\r\n      throw new Error(`Wrong part of the string (${ range })! (in alphabet)`);\r\n    }\r\n\r\n    if (/-/.test(range)) {\r\n      const start = range.charCodeAt(0);\r\n      const end = range.charCodeAt(2);\r\n\r\n      if (start > end) {\r\n        throw new Error('Start of the range must be before its end! (in alphabet)');\r\n      }\r\n\r\n      for (let k = 0, len = end - start + 1; k < len; k++) {\r\n        alphabet.push(String.fromCharCode(start + k));\r\n      }\r\n\r\n      continue;\r\n    }\r\n\r\n    if (range.length === 1) {\r\n      alphabet.push(range);\r\n    }\r\n  }\r\n\r\n  return new Alphabet(alphabet);\r\n}\r\n\r\nexport { Alphabet, alphabet };\r\n","/**\r\n * @module Switcher\r\n * @private\r\n * @mixin\r\n * @description Exports Switcher class.\r\n */\r\n\r\nimport {\r\n  isArray, isFunction, isString, isUndefined,\r\n  iterate, Symbol, toArray, defineProperties\r\n} from './helpers';\r\n\r\n/**\r\n * @typedef {'boolean'|'equals'|'strictEquals'|'call'} SwitcherMode\r\n * @public\r\n * @description Enum type of switcher modes.\r\n */\r\n\r\n/**\r\n * @callback SwitcherCallCallback\r\n * @public\r\n * @param {*} value - Switcher value.\r\n * @returns {Boolean|*} On what the callback returns depends if the case is a match (truthy for the match).\r\n */\r\n\r\n/**\r\n * @callback SwitcherMatchCallback\r\n * @public\r\n * @param {...*} args - Arguments from the second argument that switcher was called with.\r\n * @param {*} value - Switcher value.\r\n * @param {*} matched - Switcher matched case.\r\n */\r\n\r\n/**\r\n * @class Switcher\r\n * @public\r\n * @param {Object} [cases = {}] - Object of cases.\r\n * @param {SwitcherMode} [mode = 'equals'] - Switcher mode.\r\n * @param {*} [defaultValue] - Switcher default value.\r\n * @returns {Switcher} - Instance of Switcher.\r\n * @description Switcher class for creating functions working similar to switch (value) {} construction,\r\n * but with the value assignment. Switcher instance is a function that accepts a value argument and an optional\r\n * args argument. Args with additional switcher value and matched case\r\n * are passed into the function of the matched case (if it is a function).\r\n *\r\n * @example\r\n * const switcher = new Switcher();\r\n * const switcher = new Switcher({\r\n *   case1: 'value1',\r\n *   case2: 'value2'\r\n * });\r\n * const switcher = new Switcher('strictEquals');\r\n * const switcher = new Switcher({\r\n *   case1: 'value1',\r\n *   case2: 'value2'\r\n * }, 'strictEquals');\r\n * const switcher = new Switcher('strictEquals', 'defaultValue');\r\n * const switcher = new Switcher({\r\n *   case1: 'value1',\r\n *   case2: 'value2'\r\n * }, 'strictEquals', 'defaultValue');\r\n *\r\n * // See [switcher]{@link switcher} examples for more information.\r\n */\r\nclass Switcher extends Function {\r\n  constructor(cases = {}, mode = 'equals', defaultValue) {\r\n    super();\r\n\r\n    if (isString(cases)) {\r\n      if (!isUndefined(arguments[1])) {\r\n        defaultValue = mode;\r\n      }\r\n\r\n      mode = cases;\r\n      cases = {};\r\n    }\r\n\r\n    const eventualCases = [];\r\n\r\n    iterate(cases, (value, Case) => {\r\n      eventualCases.push({ case: Case, value });\r\n    });\r\n\r\n    function switcher(value, args = []) {\r\n      const { mode, default: def, cases } = switcher.$$;\r\n\r\n      let ret = iterate(cases, ({ value: val, case: Case }) => {\r\n        if (\r\n          (mode === 'boolean' && Case) ||\r\n          /* eslint eqeqeq: 0 */\r\n          (mode === 'equals' && Case == value) ||\r\n          (mode === 'strictEquals' && Case === value) ||\r\n          (mode === 'call' && Case(value))\r\n        ) {\r\n          return { case: Case, value: val };\r\n        }\r\n      });\r\n\r\n      if (isUndefined(ret)) {\r\n        ret = { value: def };\r\n      }\r\n\r\n      if (!isFunction(ret.value)) {\r\n        return ret.value;\r\n      }\r\n\r\n      args = toArray(args, true);\r\n      args.push(value, ret.case);\r\n\r\n      return ret.value.apply(null, args);\r\n    }\r\n\r\n    /**\r\n     * @member Switcher#$$\r\n     * @type {Object}\r\n     * @protected\r\n     * @property {Array} cases - Array of cases.\r\n     * @property {SwitcherMode} mode - Switcher mode.\r\n     * @property {*} default - Switcher default value.\r\n     * @description Config parameters.\r\n     */\r\n    Object.defineProperty(switcher, '$$', {\r\n      value: {\r\n        cases: eventualCases,\r\n        mode,\r\n        default: defaultValue\r\n      }\r\n    });\r\n    Object.setPrototypeOf(switcher, Switcher.prototype);\r\n\r\n    return switcher;\r\n  }\r\n\r\n  /**\r\n   * @method Switcher#case\r\n   * @public\r\n   * @param {*|SwitcherCallCallback|Array.<*|SwitcherCallCallback>} cases - Case or an array of cases.\r\n   * @param {*|SwitcherMatchCallback} value - Value that has to be assigned or a function\r\n   * that is called with switcher value, if it's the case.\r\n   * @returns {Switcher} Returns this.\r\n   * @description Method for defining new cases.\r\n   *\r\n   * @example\r\n   * const sw = new Switcher()\r\n   *   .case(1, 'one')\r\n   *   .case(2, 'two');\r\n   *\r\n   * sw(1); // 'one'\r\n   * sw(2); // 'two'\r\n   */\r\n  case(cases, value) {\r\n    if (!isArray(cases)) {\r\n      cases = [cases];\r\n    }\r\n\r\n    iterate(cases, (Case) => {\r\n      this.$$.cases.push({ case: Case, value });\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Switcher#default\r\n   * @public\r\n   * @param {*} def - New default value.\r\n   * @returns {Switcher} Returns this.\r\n   * @description Method for redefining default switcher value.\r\n   *\r\n   * @example\r\n   * const sw = new Switcher()\r\n   *   .case(1, 'one')\r\n   *   .default('three');\r\n   *\r\n   * sw(1); // 'one'\r\n   * sw(2); // 'three'\r\n   */\r\n  default(def) {\r\n    this.$$.default = def;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Switcher#mode\r\n   * @public\r\n   * @param {SwitcherMode} mode - New switcher mode.\r\n   * @returns {Switcher} Returns this.\r\n   * @description Method for redefining switcher mode.\r\n   *\r\n   * @example\r\n   * const sw = new Switcher()\r\n   *   .mode('strictEquals')\r\n   *   .case(1, 'number')\r\n   *   .case('1', 'string');\r\n   *\r\n   * sw(1);   // 'number'\r\n   * sw('1'); // 'string'\r\n   */\r\n  mode(mode) {\r\n    this.$$.mode = mode;\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\ndefineProperties(Switcher.prototype, {\r\n  [Symbol.toStringTag]: 'Switcher'\r\n});\r\n\r\n/**\r\n * @function switcher\r\n * @public\r\n * @param {Object} [cases = {}] - Object of cases.\r\n * @param {SwitcherMode} [mode = 'equals'] - Switcher mode.\r\n * @param {*} [defaultValue] - Switcher default value.\r\n * @returns {Switcher} New instance of Switcher.\r\n * @description Simple wrap of [new Switcher(...)]{@link Switcher}.\r\n * \r\n * @example\r\n * const sw = switcher({\r\n *   1: 'foo',\r\n *   2: 'bar'\r\n * });\r\n * sw(1); // 'foo'\r\n * sw(2); // 'bar'\r\n * sw(3); // undefined\r\n * \r\n * @example\r\n * const sw = switcher()\r\n *   .case([1, 2], 'foo')\r\n *   .case(3, 'bar');\r\n *   \r\n * sw(1); // 'foo'\r\n * sw(2); // 'foo'\r\n * sw(3); // 'bar'\r\n * \r\n * @example\r\n * const sw = switcher('call')\r\n *   .case(isArray, 'array')\r\n *   .case(isString, 'string')\r\n *   .case(isNumber, 'number')\r\n *   .default('rest');\r\n *   \r\n * sw([]);    // 'array'\r\n * sw('foo'); // 'string'\r\n * sw(123);   // 'number'\r\n * sw({});    // 'rest'\r\n * \r\n * @example\r\n * const sw = switcher({\r\n *   1: (value) => {\r\n *     console.log(value + 1);\r\n *   },\r\n *   2: () => {\r\n *     console.log(value - 1);\r\n *   }\r\n * });\r\n * \r\n * sw(1); // 2\r\n * sw(2); // 1\r\n * \r\n * @example\r\n * const sw = switcher({\r\n *   first: (array) => array[0],\r\n *   last: (array) => array[array.length - 1]\r\n * }, 'equals', (array, index) => array[index]);\r\n * const array = [1, 2, 3, 4];\r\n * \r\n * sw('first', [array]); // 1\r\n * sw('last', [array]);  // 4\r\n * sw(1, [array]);       // 2\r\n * sw(2, [array]);       // 3\r\n */\r\nfunction switcher(cases, mode, defaultValue) {\r\n  return new Switcher(...arguments);\r\n}\r\n\r\n/**\r\n * @function when\r\n * @public\r\n * @param {Boolean|*} condition - Condition used for returning the proper value.\r\n * @param {*} value1 - Value if the condition is truthy.\r\n * @param {*} value2 - Value if the condition is falsey.\r\n * @returns {*} value1 or value2.\r\n * @description Synonym for\r\n * [ternary operator]{@link https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference/Operators/Conditional_Operator}.\r\n * \r\n * @example\r\n * when(true, 'true', 'false'); // 'true'\r\n */\r\nfunction when(condition, value1, value2) {\r\n  return condition ? value1 : value2;\r\n}\r\n\r\nexport { Switcher, switcher, when };\r\n","/**\r\n * @module Super\r\n * @private\r\n * @mixin\r\n * @description Exports Super class.\r\n */\r\n\r\nimport { D } from './D';\r\nimport { switcher } from './Switcher';\r\nimport { constructors } from './constants/constructors';\r\nimport {\r\n  isArray, isArrayLike, isDate, isElement, isFunction, isNil, isNaN, isNull,\r\n  isObject, isPlainObject, isPrimitive, isRegExp, isString, isUndefined,\r\n  validate, toStringTag, iterate, Symbol, defineProperties\r\n} from './helpers';\r\n\r\n/**\r\n * @typedef {Super|Arr|Func|Elem|Str|Num|Dat|BlobObject} DWrap\r\n * @public\r\n * @description Any kind of D-Wrap.\r\n */\r\n\r\n/**\r\n * @typedef {String|Number|null} Key\r\n * @public\r\n * @description Key type used in many methods.\r\n */\r\n\r\n/**\r\n * @typedef {TreeElement[]} Tree\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {Object} TreeElement\r\n * @public\r\n * @property {Key} key - Tree element key.\r\n * @property {*} value - Tree element value.\r\n * @description {@link Tree} element.\r\n */\r\n\r\n/**\r\n * @callback DeepIterationCallback\r\n * @public\r\n * @param {*} value - Current iteration value.\r\n * @param {String|Number} key - Current iteration key/index.\r\n * @param {*} object - Iteration object.\r\n * @param {Tree} tree - Tree of { key, value } elements.\r\n */\r\n\r\n/**\r\n * @callback DeepReduceCallback\r\n * @public\r\n * @param {*} previousValue - Previous value.\r\n * @param {*} value - Current iteration value.\r\n * @param {String|Number} key - Current iteration key/index.\r\n * @param {*} object - Iteration object.\r\n * @param {Tree} tree - Tree of { key, value } elements.\r\n */\r\n\r\n/**\r\n * @callback IterationCallback\r\n * @public\r\n * @param {*} value - Current iteration value.\r\n * @param {String|Number} key - Current iteration key/index.\r\n * @param {*} object - Iteration object.\r\n */\r\n\r\n/**\r\n * @callback JSONCallback\r\n * @public\r\n * @param {String|null} key - Current value.\r\n * @param {*} value - Current key.\r\n * @param {Object} object - Iteration object.\r\n */\r\n\r\n/**\r\n * @callback ObjectCallback\r\n * @public\r\n * @param {Object} newObject - The new object.\r\n * @param {*} value - Current iteration value.\r\n * @param {String|Number} key - Current iteration key/index.\r\n * @param {*} object - Iteration object.\r\n */\r\n\r\n/**\r\n * @callback ReduceCallback\r\n * @public\r\n * @param {*} previousValue - Previous value.\r\n * @param {*} value - Current iteration value.\r\n * @param {String|Number} key - Current iteration key/index.\r\n * @param {*} object - Iteration object.\r\n */\r\n\r\n/**\r\n * @callback SuperMethod\r\n * @public\r\n * @this {DWrap}\r\n */\r\n\r\nconst cloneSwitcher = switcher('call', (object) => object)\r\n  .case(\r\n    (object) => new Super(object) === object,\r\n    (object) => new (Object.getPrototypeOf(object).constructor)(new Super(object.$).deepClone().$)\r\n  )\r\n  .case(isElement, (object, deep) => object.clone(deep))\r\n  .case(isDate, (object) => new Date(object))\r\n  .case(isRegExp, (object) => new RegExp(object.source, object.toString().match(/[gimuy]*$/)[0]))\r\n  .case(isArray, () => [])\r\n  .case(isPlainObject, () => ({}));\r\n\r\n/**\r\n * @class Super\r\n * @public\r\n * @param {*} [object] - An object to wrap.\r\n * @returns {DWrap} Instance of Super.\r\n * @description Wrap of any value. And there is no way to create a nested wrap.\r\n *\r\n * @example\r\n * new Super({}); // Super\r\n */\r\nclass Super {\r\n  constructor(object) {\r\n    if (object instanceof Super) {\r\n      return object;\r\n    }\r\n\r\n    /**\r\n     * @member Super#$\r\n     * @type {*}\r\n     * @public\r\n     * @description Wrapped object.\r\n     */\r\n    Object.defineProperty(this, '$', { value: object });\r\n  }\r\n\r\n  /**\r\n   * @method Super.addStaticProperties\r\n   * @public\r\n   * @param {String|Object} property - Either a string of a property or an object\r\n   * with properties keys and values values.\r\n   * @param {Object} [value] - If a property parameter is a string this has to be a property value.\r\n   * @returns {this} Returns this.\r\n   * @description Sets static properties for DWrap constructors.\r\n   *\r\n   * @example\r\n   * Super.addStaticProperties('cool', 42);\r\n   * Super.addStaticProperties('superCool', 42*42);\r\n   */\r\n  static addStaticProperties(property, value) {\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: value };\r\n    }\r\n\r\n    defineProperties(this, property);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super.addInstanceProperties\r\n   * @public\r\n   * @param {String|Object} property - Either a string of a property or an object\r\n   * with properties keys and values values.\r\n   * @param {Object} [value] - If a property parameter is a string this has to be a property value.\r\n   * @returns {this} Returns this.\r\n   * @description Sets static properties for DWrap prototypes.\r\n   *\r\n   * @example\r\n   * Super.addInstanceProperties('cool', 42);\r\n   * Super.addInstanceProperties('superCool', 42*42);\r\n   */\r\n  static addInstanceProperties(property, value) {\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: value };\r\n    }\r\n\r\n    defineProperties(this.prototype, property);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#assign\r\n   * @public\r\n   * @param {...(Object|Super|*)} objects - Objects to be assigned to the object.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Synonym for\r\n   * [Object.assign]\r\n   * {@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2 }).assign({ a: 3 }, { c: 3, d: 4 }, { d: 5 }).$; // { a: 3, b: 2, c: 3, d: 5 }\r\n   */\r\n  assign(...objects) {\r\n    const object = this.$;\r\n\r\n    iterate(object && arguments, (o) => {\r\n      iterate(new Super(o).$, (value, key) => {\r\n        object[key] = value;\r\n      });\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#average\r\n   * @public\r\n   * @param {IterationCallback} [callback = null] - Callback that is passed to {@link Super#sum}.\r\n   * @returns {Number} Average value.\r\n   * @description Synonym for object.sum(callback) / object.count.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).average();                         // 2\r\n   * new Super({ a: 1, b: 2, c: 5 }).average((value) => value * value); // 10\r\n   */\r\n  average(callback = null) {\r\n    validate([callback], ['function||!'], 'Super#average');\r\n\r\n    return this.sum(callback) / this.count;\r\n  }\r\n\r\n  /**\r\n   * @method Super#call\r\n   * @public\r\n   * @param {SuperMethod} func - Function to be called with this context.\r\n   * @param {...*} args - Arguments to be called with.\r\n   * @returns {*} Return of function call.\r\n   * @description Synonym for func.call(DObject, ...args);\r\n   *\r\n   * @example\r\n   * new Super({ a: 1 }).call(function (b, c) {\r\n   *   return this.a + b + c;\r\n   * }, 2, 3); // 6\r\n   */\r\n  call(func, ...args) {\r\n    validate([func], ['function'], 'Super#call');\r\n\r\n    return func.apply(this, args);\r\n  }\r\n\r\n  /**\r\n   * @method Super#clone\r\n   * @returns {DWrap} New object.\r\n   * @description Method assigns properties of the object to an empty one and returns the new one.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2 } }).clone().$; // { a: 1, b: { c: 2 } }\r\n   */\r\n  clone() {\r\n    const object = this.$;\r\n    const clone = cloneSwitcher(object, [object, false]);\r\n\r\n    if (clone !== object) {\r\n      iterate(object, (value, key) => {\r\n        clone[key] = value;\r\n      });\r\n    }\r\n\r\n    return new this.constructor(clone);\r\n  }\r\n\r\n  /**\r\n   * @member Super#count\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description Returns number of own enumerable keys of the object.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2 }).count; // 2\r\n   */\r\n  get count() {\r\n    const object = this.$;\r\n\r\n    if (!isObject(object)) {\r\n      return 0;\r\n    }\r\n\r\n    return isArrayLike(object) ? object.length : Object.keys(object).length;\r\n  }\r\n\r\n  /**\r\n   * @method Super#create\r\n   * @public\r\n   * @param {Object} [descriptors] - Descriptors passed to Object.create.\r\n   * @returns {DWrap} New instance of D-Wrap.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create\r\n   * @description Synonym for\r\n   * [Object.create]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create}.\r\n   *\r\n   * @example\r\n   * new Super({}).create({\r\n   *   a: {\r\n   *     value: 1,\r\n   *     enumerable: false,\r\n   *     writable: true,\r\n   *     configurable: false\r\n   *   }\r\n   * }).$; // { a: 1 }\r\n   */\r\n  create(descriptors) {\r\n    return D(isPrimitive(this.$) ? undefined : Object.create(this.$, descriptors));\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepAssign\r\n   * @public\r\n   * @param {...*} objects - Objects to be assigned to the object.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Deep analogue of {@link Super#assign}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1 }).deepAssign(\r\n   *   {\r\n   *     b: {\r\n   *       c: 2\r\n   *     }\r\n   *   },\r\n   *   {\r\n   *     a: {\r\n   *       b: 1\r\n   *     }\r\n   *   },\r\n   *   {\r\n   *     a: {\r\n   *       c: {\r\n   *         d: 1\r\n   *       }\r\n   *     },\r\n   *     b: 2\r\n   *   },\r\n   *   null\r\n   * });\r\n   * // {\r\n   * //   a: {\r\n   * //     b: 1,\r\n   * //     c: {\r\n   * //       d: 1\r\n   * //     }\r\n   * //   },\r\n   * //   b: 2,\r\n   * // }\r\n   */\r\n  deepAssign(...objects) {\r\n    const object = this.$;\r\n\r\n    if (isPrimitive(object)) {\r\n      return this;\r\n    }\r\n\r\n    iterate(arguments, (o) => {\r\n      deepAssign(object, o);\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepClone\r\n   * @public\r\n   * @returns {DWrap} New instance of DWrap.\r\n   * @description Deep cloning method. Clones plain objects, arrays, regular expressions and elements, the rest stays the same.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: [2, 3], c: { d: 4 } }).deepClone().$;\r\n   * // {\r\n   * //   a: 1,\r\n   * //   b: [2, 3],\r\n   * //   c: { d: 4 }\r\n   * // }\r\n   */\r\n  deepClone() {\r\n    return new this.constructor(deepClone(this.$));\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepEquals\r\n   * @public\r\n   * @param {*} [object] - Object to compare to.\r\n   * @returns {Boolean} - If the objects are deep equal or not.\r\n   * @description Method for deep comparison of two objects.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1 }).deepEquals({ a: '1' }); // true\r\n   * new Super(/1/).deepEquals(/1/);             // true\r\n   */\r\n  deepEquals(object = null) {\r\n    return deepEqual(this.$, object, false);\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepEvery\r\n   * @public\r\n   * @param {DeepIterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy iteration goes on and if falsey it stops.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {Boolean} If all the callback calls returned truthy value.\r\n   * @description Returns boolean if all the callback calls returned truthy value.\r\n   * Otherwise false. Deep analogue of {@link Super#every}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepEvery((value) => value < 4); // true\r\n   * new Super({ a: {}, b: {}, c: {} }).deepEvery(() => false);              // true\r\n   */\r\n  deepEvery(callback, n) {\r\n    if (arguments.length === 1 && !isFunction(callback)) {\r\n      n = callback;\r\n      callback = Boolean;\r\n    } else if (arguments.length === 1) {\r\n      n = Infinity;\r\n    } else if (!arguments.length) {\r\n      n = Infinity;\r\n      callback = Boolean;\r\n    }\r\n\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepEvery');\r\n\r\n    n = Number(n);\r\n\r\n    return deepEvery(this.$, callback, n, [{ key: null, value: this.$ }]);\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepFilter\r\n   * @public\r\n   * @param {DeepIterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy the element is included and if falsey it's excluded.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {DWrap} New D-Wrap of filtered object.\r\n   * @description Returns filtered by the callback object. Deep analogue of {@link Super#filter}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFilter((value) => value%2).$;     // { a: 1, b: { d: 3 } }\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFilter((value) => value === 1).$; // { a: 1 }\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFilter((value) => value > 3).$;   // {}\r\n   */\r\n  deepFilter(callback, n) {\r\n    if (arguments.length === 1 && !isFunction(callback)) {\r\n      n = callback;\r\n      callback = Boolean;\r\n    } else if (arguments.length === 1) {\r\n      n = Infinity;\r\n    } else if (!arguments.length) {\r\n      n = Infinity;\r\n      callback = Boolean;\r\n    }\r\n\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepFilter');\r\n\r\n    const filtered = deepFilter(this.$, callback, n, [{ key: null, value: this.$ }]);\r\n\r\n    return D(isNil(filtered) ? filtered : filtered || {});\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepFind\r\n   * @public\r\n   * @param {DeepIterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy iteration stops and if falsey it continues.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {Tree|null} Tree of { key, value } if something found and null if not.\r\n   * @description Returns tree of the elements if something found and null if nothing found.\r\n   * Deep analogue of {@link Super#find}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFind((value) => value === 2);\r\n   * // [\r\n   * //   { key: 'c', value: 2 },\r\n   * //   { key: 'b', value: { c: 2, d: 3 } },\r\n   * //   { key: null, value: <initial object> }\r\n   * // ]\r\n   */\r\n  deepFind(callback, n) {\r\n    if (arguments.length === 1 && !isFunction(callback)) {\r\n      n = callback;\r\n      callback = Boolean;\r\n    } else if (arguments.length === 1) {\r\n      n = Infinity;\r\n    } else if (!arguments.length) {\r\n      n = Infinity;\r\n      callback = Boolean;\r\n    }\r\n\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepFind');\r\n\r\n    return deepFind(this.$, callback, n, [{ key: null, value: this.$ }]);\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepForEach\r\n   * @public\r\n   * @param {DeepIterationCallback} callback - Called on each iteration.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Method for iterating over any object. Deep analogue of {@link Super#forEach}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepForEach((value, key, object) => object[key] = value * value).$;\r\n   * // { a: 1, b: { c: 4, d: 9 } }\r\n   */\r\n  deepForEach(callback, n = Infinity) {\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepForEach');\r\n\r\n    n = Number(n);\r\n\r\n    deepForEach(this.$, callback, n, [{ key: null, value: this.$ }]);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepForEach\r\n   * @public\r\n   * @param {DeepIterationCallback} callback - Called on each iteration.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Method for iterating over any object. Deep analogue of {@link Super#forEach}.\r\n   * Unlike {@link Super#deepForEach} the callback is called on every value of every object inside\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepForEach((value, key, object) => object[key] = value * value).$;\r\n   * // { a: 1, b: { c: 4, d: 9 } }\r\n   */\r\n  deepForEachEntry(callback, n = Infinity) {\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepForEach');\r\n\r\n    n = Number(n);\r\n\r\n    deepForEachEntry(this.$, callback, n, [{ key: null, value: this.$ }]);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepFreeze\r\n   * @public\r\n   * @returns {DWrap} Returns this.\r\n   * @description Deep analogue of {@link Super#freeze}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFreeze(); // Super\r\n   */\r\n  deepFreeze() {\r\n    deepFreeze(this.$);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepMap\r\n   * @public\r\n   * @param {DeepIterationCallback} callback - Called on each iteration.\r\n   * Return value is used for creating a new object.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {DWrap} D-Wrap of the new object.\r\n   * @description Returns a wrap of a new object using the callback. Deep analogue of {@link Super#map}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepMap((value) => value * value).$;\r\n   * // { a: 1, b: { c: 4, d: 9 } }\r\n   */\r\n  deepMap(callback, n = Infinity) {\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepMap');\r\n\r\n    n = Number(n);\r\n\r\n    return D(deepMap(this.$, callback, n, [{ key: null, value: this.$ }]));\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepReduce\r\n   * @public\r\n   * @param {DeepReduceCallback} callback - Called on each iteration.\r\n   * Return value is passed to the next callback call.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @param {*} [IV = <first value>|undefined] - Initial value.\r\n   * @returns {*} Modified IV.\r\n   * @description Returns modified IV. Deep analogue of {@link Super#reduce}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepReduce((sum, value) => sum + value * value, Infinity, 0); // 14\r\n   */\r\n  deepReduce(callback, n = Infinity, IV) {\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepReduce');\r\n\r\n    n = Number(n);\r\n\r\n    const object = this.$;\r\n    const tree = [{ key: null, value: this.$ }];\r\n\r\n    if (arguments.length < 3) {\r\n      return deepReduce(object, callback, n, false, undefined, tree).IV;\r\n    }\r\n\r\n    return deepReduce(object, callback, n, false, { IV }, tree).IV;\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepSome\r\n   * @public\r\n   * @param {DeepIterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy iteration stops and if falsey it continues.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {Boolean} If all the callback calls returned truthy value.\r\n   * @description Returns true if some of the callback calls returned truthy value.\r\n   * Otherwise false. Deep analogue of {@link Super#some}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepSome((value) => value > 4); // false\r\n   * new Super({ a: {}, b: {}, c: {} }).deepSome(() => true);               // false\r\n   */\r\n  deepSome(callback, n) {\r\n    if (arguments.length === 1 && !isFunction(callback)) {\r\n      n = callback;\r\n      callback = Boolean;\r\n    } else if (arguments.length === 1) {\r\n      n = Infinity;\r\n    } else if (!arguments.length) {\r\n      n = Infinity;\r\n      callback = Boolean;\r\n    }\r\n\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepSome');\r\n\r\n    n = Number(n);\r\n\r\n    return deepSome(this.$, callback, n, [{ key: null, value: this.$ }]);\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepStrictEquals\r\n   * @public\r\n   * @param {*} [object] - Object to compare to.\r\n   * @returns {Boolean} - If the objects are deep strict equal or not.\r\n   * @description Method for deep strict comparison of two objects.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1 }).deepStrictEquals({ a: '1' }); // false\r\n   * new Super(/1/).deepStrictEquals(/1/);             // true\r\n   */\r\n  deepStrictEquals(object = null) {\r\n    return deepEqual(this.$, object, true);\r\n  }\r\n\r\n  /**\r\n   * @method Super#define\r\n   * @param {String|Object} property - Either a string of a property or a descriptors object.\r\n   * @param {Object} [descriptor] - If a property parameter is a string this has to be a property descriptor.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Synonym for both\r\n   * [Object.defineProperty]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty}\r\n   * and\r\n   * [Object.defineProperties]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties}.\r\n   *\r\n   * @example\r\n   * new Super({}).define('a', {\r\n   *   value: 1,\r\n   *   enumerable: false,\r\n   *   writable: true,\r\n   *   configurable: false\r\n   * }).$; // { a: 1 }\r\n   * new Super({}).define({\r\n   *   a: {\r\n   *     value: 1,\r\n   *     enumerable: false,\r\n   *     writable: true,\r\n   *     configurable: false\r\n   *   }\r\n   * }).$; // { a: 1 }\r\n   */\r\n  define(property, descriptor) {\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: descriptor };\r\n    }\r\n\r\n    property = new Super(property).$;\r\n\r\n    if (isObject(this.$)) {\r\n      Object.defineProperties(this.$, property);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#delete\r\n   * @public\r\n   * @param {...String} props - List of properties to delete.\r\n   * @returns {DWrap} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/delete\r\n   * @description Synonym for multiple\r\n   * [\"delete\" operator]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/delete}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).delete('c', 'a').$; // { b: 2 }\r\n   */\r\n  delete(...props) {\r\n    const object = this.$;\r\n\r\n    iterate(object && props, (property) => {\r\n      delete object[property];\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#equals\r\n   * @public\r\n   * @param {*} [object] - Object to compare.\r\n   * @returns {Boolean} If the objects are equal or not.\r\n   * @description Returns true if objects are equal using '==' operator and false if not. NaNs are considered to be equal.\r\n   *\r\n   * @example\r\n   * new Super(3).equals('3');   // true\r\n   * new Super(NaN).equals(NaN); // true\r\n   */\r\n  equals(object) {\r\n    const o = this.$;\r\n\r\n    object = new Super(object).$;\r\n\r\n    /* eslint eqeqeq: 0 */\r\n    return o == object || (isNaN(o) && isNaN(object));\r\n  }\r\n\r\n  /**\r\n   * @method Super#every\r\n   * @public\r\n   * @param {IterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy iteration goes on and if falsey it stops.\r\n   * @returns {Boolean} If all the callback calls returned truthy value.\r\n   * @description Returns boolean if all the callback calls returned truthy value.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).every((value) => value < 4); // true\r\n   * new Super({}).every(() => false);                            // true\r\n   */\r\n  every(callback = Boolean) {\r\n    validate([callback], ['function'], 'Super#every');\r\n\r\n    return iterate(this.$, (value, key, object) => {\r\n      if (!callback(value, key, object)) {\r\n        return false;\r\n      }\r\n    }) !== false;\r\n  }\r\n\r\n  /**\r\n   * @method Super#filter\r\n   * @public\r\n   * @param {IterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy the element is included and if falsey it's excluded.\r\n   * @returns {DWrap} New D-Wrap of filtered object.\r\n   * @description Returns filtered by the callback object.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).filter((value) => value%2).$; // { a: 1, c: 3 }\r\n   * new Super(null).filter((value) => value%2).$;                 // null\r\n   */\r\n  filter(callback = Boolean) {\r\n    validate([callback], ['function'], 'Super#filter');\r\n\r\n    const object = this.$;\r\n    const array = isArrayLike(object);\r\n\r\n    /* eslint no-nested-ternary: 0 */\r\n    const o = array ? [] : isNil(object) ? object : {};\r\n\r\n    iterate(object, (value, key) => {\r\n      if (callback(value, key, object)) {\r\n        if (array) {\r\n          o.push(value);\r\n        } else {\r\n          o[key] = value;\r\n        }\r\n      }\r\n    });\r\n\r\n    return D(o);\r\n  }\r\n\r\n  /**\r\n   * @method Super#find\r\n   * @public\r\n   * @param {IterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy iteration stops and if falsey it continues.\r\n   * @returns {{ key: Key, value: * }|null} { key, value } if found and null if not.\r\n   * @description Returns found { key, value } if something found and null if nothing found.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).find((value) => value === 2); // { key: 'b', value: 2 }\r\n   * new Super([1, 2, 3]).find((value) => value === 2);            // { key: 1, value: 2 }\r\n   */\r\n  find(callback) {\r\n    validate([callback], ['function'], 'Super#find');\r\n\r\n    return iterate(this.$, (value, key, object) => {\r\n      if (callback(value, key, object)) {\r\n        return { key, value };\r\n      }\r\n    }) || null;\r\n  }\r\n\r\n  /**\r\n   * @method Super#forEach\r\n   * @public\r\n   * @param {IterationCallback} callback - Called on each iteration.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Method for iterating over any object.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).forEach((value, key, object) => {\r\n   *   object[key] = value * value;\r\n   * }).$; // { a: 1, b: { c: 4, d: 5 } }\r\n   */\r\n  forEach(callback) {\r\n    validate([callback], ['function'], 'Super#forEach');\r\n\r\n    iterate(this.$, (value, key, object) => {\r\n      callback(value, key, object);\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#freeze\r\n   * @public\r\n   * @returns {DWrap} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\r\n   * @description Synonym for\r\n   * [Object.freeze]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).freeze(); // Super\r\n   */\r\n  freeze() {\r\n    Object.freeze(this.$);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#get\r\n   * @public\r\n   * @param {String|Object.<String, Function>} property - Either a string of a property or a getters object.\r\n   * @param {Function} [getter] - If a property parameter is a string this has to be a getter function.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Method for defining getters.\r\n   *\r\n   * @example\r\n   * const object1 = new Super({}).get('a', () => 1).$;\r\n   * object1.a; // 1\r\n   *\r\n   * const object2 = new Super({}).get({\r\n   *   a: () => 2\r\n   * }).$;\r\n   * object2.a; // 2\r\n   */\r\n  get(property, getter) {\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: getter };\r\n    }\r\n\r\n    const object = this.$;\r\n\r\n    iterate(isObject(object) && new Super(property).$, (getter, property) => {\r\n      Object.defineProperty(object, property, { get: getter });\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#has\r\n   * @public\r\n   * @param {String|*} key - Property to check.\r\n   * @returns {Boolean} Returns true if the object has the key and false if not.\r\n   * @see https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/in\r\n   * @description Synonym for\r\n   * [\"in\" operator]{@link https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/in}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).has('b'); // true\r\n   */\r\n  has(key) {\r\n    const object = this.$;\r\n\r\n    if (!isObject(object)) {\r\n      return false;\r\n    }\r\n\r\n    return key in object;\r\n  }\r\n\r\n  /**\r\n   * @method Super#hasOwn\r\n   * @public\r\n   * @param {String|*} key - Property to check.\r\n   * @returns {Boolean} Returns true if the object has its own key and false if not.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\r\n   * @description Synonym for\r\n   * [Object#hasOwnProperty]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).hasOwn('b');              // true\r\n   * new Super({ a: 1, b: 2, c: 3 }).hasOwn('hasOwnProperty'); // false\r\n   */\r\n  hasOwn(key) {\r\n    const object = this.$;\r\n\r\n    if (!isObject(object)) {\r\n      return false;\r\n    }\r\n\r\n    return {}.hasOwnProperty.call(object, key);\r\n  }\r\n\r\n  /**\r\n   * @method Super#instanceof\r\n   * @public\r\n   * @param {Function} constructor - Constructor to check.\r\n   * @returns {Boolean} If the object is an instance of constructor.\r\n   * @see https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/instanceof\r\n   * @description Synonym for\r\n   * [\"instanceof\" operator]{@link https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/instanceof}.\r\n   */\r\n  instanceof(constructor) {\r\n    return this.$ instanceof constructor;\r\n  }\r\n\r\n  /**\r\n   * @method Super#isFrozen\r\n   * @public\r\n   * @returns {Boolean} If the object is frozen.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\r\n   * @description Synonym for\r\n   * [Object.isFrozen]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen}.\r\n   *\r\n   * @example\r\n   * new Super({}).freeze().isFrozen(); // true\r\n   */\r\n  isFrozen() {\r\n    return Object.isFrozen(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Super#json\r\n   * @public\r\n   * @param {JSONCallback|String[]} [replacer] - See the link.\r\n   * @param {String|Number} [space] - See the link.\r\n   * @returns {String} JSON string.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\r\n   * @description Synonym for\r\n   * [JSON.stringify]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).json(); // '{\"a\":1,\"b\":2,\"c\":3}'\r\n   * new Super({ a: 1, b: 2, c: 3 }).json('    ');\r\n   * // {\r\n   * //     \"a\": 1,\r\n   * //     \"b\": 2,\r\n   * //     \"c\": 3\r\n   * // }\r\n   * new Super({ a: 1, b: 2, c: 3 }).json((key, value) => {\r\n   *   if (typeof value === 'number') {\r\n   *     return value%2 ? key + value0 : undefined;\r\n   *   }\r\n   *\r\n   *   return value;\r\n   * }, 2);\r\n   * // {\r\n   * //   \"a\": \"a1\",\r\n   * //   \"c\": \"c3\"\r\n   * // }\r\n   */\r\n  json(replacer, space) {\r\n    if (arguments.length === 1 && !isFunction(replacer) && !isArray(replacer)) {\r\n      [].unshift.call(arguments, null);\r\n    }\r\n\r\n    [].unshift.call(arguments, this.$);\r\n\r\n    return JSON.stringify.apply(JSON, arguments);\r\n  }\r\n\r\n  /**\r\n   * @method Super#keyOf\r\n   * @public\r\n   * @param {*} value - Value to find.\r\n   * @returns {String|Number|null} A key or an index if found and null if not.\r\n   * @description Method for finding equal to the argument value in the object. NaNs are considered to be equal.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).keyOf(2);   // 'b'\r\n   * new Super({ a: 1, b: 2, c: 3 }).keyOf('2'); // 'b'\r\n   */\r\n  keyOf(value) {\r\n    const key = iterate(this.$, (val, key) => {\r\n      if (val == value || (isNaN(val) && isNaN(value))) {\r\n        return key;\r\n      }\r\n    });\r\n\r\n    return isUndefined(key) ? null : key;\r\n  }\r\n\r\n  /**\r\n   * @method Super#keyOfStrict\r\n   * @public\r\n   * @param {*} value - Value to find.\r\n   * @returns {String|Number|null} A key or an index if found and null if not.\r\n   * @description Method for finding strict equal to the argument value in the object. NaNs are considered to be equal.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).keyOfStrict(2);   // 'b'\r\n   * new Super({ a: 1, b: 2, c: 3 }).keyOfStrict('2'); // 'b'\r\n   */\r\n  keyOfStrict(value) {\r\n    const key = iterate(this.$, (val, key) => {\r\n      if (val === value || (isNaN(val) && isNaN(value))) {\r\n        return key;\r\n      }\r\n    });\r\n\r\n    return isUndefined(key) ? null : key;\r\n  }\r\n\r\n  /**\r\n   * @method Super#keys\r\n   * @public\r\n   * @returns {DWrap} A wrap of the keys array.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\r\n   * @description Synonym for\r\n   * [Object.keys]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/keys}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).keys().$; // ['a', 'b', 'c']\r\n   * new Super(null).keys().$;                 // []\r\n   */\r\n  keys() {\r\n    const object = this.$;\r\n\r\n    return D(isObject(object) ? Object.keys(object) : []);\r\n  }\r\n\r\n  /**\r\n   * @method Super#map\r\n   * @public\r\n   * @param {IterationCallback} callback - Called on each iteration.\r\n   * Return value is used for creating a new object.\r\n   * @returns {DWrap} D-Wrap of the new object.\r\n   * @description Returns a wrap of a new object using the callback.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).map((value) => value * 2).$; // { a: 2, b: 4, c: 6 }\r\n   * new Super(null).map((value) => value * 2).$;                 // null\r\n   */\r\n  map(callback) {\r\n    validate([callback], ['function'], 'Super#map');\r\n\r\n    const object = this.$;\r\n    const o = isArrayLike(object) ? [] : isNull(object) ? null : {};\r\n\r\n    iterate(object, (value, key) => {\r\n      o[key] = callback(value, key, object);\r\n    });\r\n\r\n    return D(o);\r\n  }\r\n\r\n  /**\r\n   * @method Super#max\r\n   * @public\r\n   * @param {IterationCallback} callback - Called on each iteration.\r\n   * Return value is used for comparison with the previous max value.\r\n   * @returns {{key: Key, value: Number}} Object with max value and key of the max value.\r\n   * @description Method for finding max value in the object.\r\n   * If no callback is present comparison is between values of the object.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).max();                     // { key: 'c', value: 3 }\r\n   * new Super({ a: 1, b: 2, c: 3 }).max((value) => 4 - value); // { key: 'a', value: 3 }\r\n   * new Super({ a: 'a', b: 'b', c: 'c' }).max();               // { key: null, value: -Infinity }\r\n   */\r\n  max(callback = null) {\r\n    validate([callback], ['function||!'], 'Super#max');\r\n\r\n    return this.object((max, value, key, object) => {\r\n      const val = Number(callback ? callback(value, key, object) : value);\r\n\r\n      if (val > max.value) {\r\n        max.key = key;\r\n        max.value = val;\r\n      }\r\n    }, { key: null, value: -Infinity }).$;\r\n  }\r\n\r\n  /**\r\n   * @method Super#min\r\n   * @public\r\n   * @param {IterationCallback} callback - Called on each iteration.\r\n   * Return value is used for comparison with the previous min value.\r\n   * @returns {{key: Key, value: Number}} Object with min value and key of the min value.\r\n   * @description Method for finding min value in the object.\r\n   * If no callback is present comparison is between values of the object.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).min();                     // { key: 'a', value: 1 }\r\n   * new Super({ a: 1, b: 2, c: 3 }).min((value) => 4 - value); // { key: 'c', value: 1 }\r\n   * new Super({ a: 'a', b: 'b', c: 'c' }).min();               // { key: null, value: Infinity }\r\n   */\r\n  min(callback = null) {\r\n    validate([callback], ['function||!'], 'Super#min');\r\n\r\n    return this.object((min, value, key, object) => {\r\n      const val = Number(callback ? callback(value, key, object) : value);\r\n\r\n      if (val < min.value) {\r\n        min.key = key;\r\n        min.value = val;\r\n      }\r\n    }, { key: null, value: Infinity }).$;\r\n  }\r\n\r\n  /**\r\n   * @method Super#object\r\n   * @public\r\n   * @param {ObjectCallback} callback - Called on each iteration.\r\n   * @param {Object|*} [object = {}] - Object that is passed to the callback.\r\n   * @returns {DWrap} Wrap of the new object.\r\n   * @description Type of {@link Super#reduce}.\r\n   * The object is passed as an argument into the callback. The output is this object.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2 }).object((object, value, key) => {\r\n   *   object[key] = value;\r\n   *   object[key + key] = value * 2;\r\n   * }).$; // { a: 1, aa: 2, b: 2, bb: 4 }\r\n   */\r\n  object(callback, object = {}) {\r\n    validate([callback], ['function'], 'Super#object');\r\n\r\n    iterate(this.$, (value, key, obj) => {\r\n      callback(object, value, key, obj);\r\n    });\r\n\r\n    return D(object);\r\n  }\r\n\r\n  /**\r\n   * @method Super#prop\r\n   * @public\r\n   * @param {String|Object.<String, *>} property - Either a string of a property or an assigned object.\r\n   * @param {*} [value] - If a property parameter is a string\r\n   * this has to be an assigned value if it's present.\r\n   * @returns {DWrap|*} Returns this if it's a setter or a value if getter.\r\n   * @description Method for getting and setting properties.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).prop('a');              // 1\r\n   * new Super({ a: 1, b: 2, c: 3 }).prop('a', 7).$;         // { a: 7, b: 2, c: 3 }\r\n   * new Super({ a: 1, b: 2, c: 3 }).prop({ a: 7, b: 8 }).$; // { a: 7, b: 8, c: 3 }\r\n   */\r\n  prop(property, value) {\r\n    if (arguments.length <= 1 && isString(property)) {\r\n      return this.$ ? this.$[property] : undefined;\r\n    }\r\n\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: value };\r\n    }\r\n\r\n    return this.assign(property);\r\n  }\r\n\r\n  /**\r\n   * @method Super#propertyDescriptor\r\n   * @public\r\n   * @param {String} property - Property of the object.\r\n   * @returns {Object|undefined} Property descriptor.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\r\n   * @descriptor Synonym for\r\n   * [Object.getOwnPropertyDescriptor]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1 }).propertyDescriptor('a');\r\n   * // {\r\n   * //   value: 1,\r\n   * //   enumerable: true,\r\n   * //   writable: true,\r\n   * //   configurable: true\r\n   * // }\r\n   */\r\n  propertyDescriptor(property) {\r\n    const object = this.$;\r\n\r\n    return isObject(object) ? Object.getOwnPropertyDescriptor(object, property) : undefined;\r\n  }\r\n\r\n  /**\r\n   * @method Super#propertyNames\r\n   * @public\r\n   * @returns {DWrap} D-Wrap of the names array.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\r\n   * @descriptor Synonym for\r\n   * [Object.getOwnPropertyNames]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2 }).define('c', { value: 3 }).$; // ['a', 'b', 'c']\r\n   */\r\n  propertyNames() {\r\n    const object = this.$;\r\n\r\n    return D(isObject(object) ? Object.getOwnPropertyNames(object) : []);\r\n  }\r\n\r\n  /**\r\n   * @method Super#propertySymbols\r\n   * @public\r\n   * @returns {DWrap} D-Wrap of the names array.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\r\n   * @descriptor Synonym for\r\n   * [Object.getOwnPropertySymbols]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols}.\r\n   *\r\n   * @example\r\n   * new Super({ [Symbol('foo')]: 1 }).define(Symbol('bar'), { value: 2 }).$; // [Symbol('foo'), Symbol('bar')]\r\n   */\r\n  propertySymbols() {\r\n    const object = this.$;\r\n\r\n    return D(isObject(object) ? Object.getOwnPropertySymbols(object) : []);\r\n  }\r\n\r\n  /**\r\n   * @method Super#proto\r\n   * @public\r\n   * @param {*} [proto] - If it's present it's set as a prototype to the object.\r\n   * @returns {DWrap} In getter mode returns wrap of the prototype and in setter mode returns this.\r\n   * @description Synonym for both\r\n   * [Object.getPrototypeOf]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf}\r\n   * and\r\n   * [Object.setPrototypeOf]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf}.\r\n   */\r\n  proto(proto) {\r\n    const object = this.$;\r\n    const isContextObject = !isNil(object);\r\n\r\n    if (arguments.length) {\r\n      if (isContextObject && (isObject(proto) || isNull(proto))) {\r\n        Object.setPrototypeOf(object, proto);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    return isContextObject ? new Super(Object.getPrototypeOf(object)) : new Super();\r\n  }\r\n\r\n  /**\r\n   * @method Super#reduce\r\n   * @public\r\n   * @param {ReduceCallback} callback - Called on each iteration.\r\n   * Return value is passed to the next callback call.\r\n   * @param {*} [IV = <first value>|undefined] - Initial value.\r\n   * @returns {*} Modified IV.\r\n   * @description Returns modified IV. If the second argument is not present first value in the object is taken\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).reduce((sum, value) => sum + value * value, 0); // 14\r\n   */\r\n  reduce(callback, IV) {\r\n    validate([callback], ['function'], 'Super#reduce');\r\n\r\n    const object = this.$;\r\n\r\n    let startKey;\r\n\r\n    if (arguments.length === 1) {\r\n      iterate(object, (value, key) => {\r\n        startKey = key;\r\n        IV = value;\r\n\r\n        return true;\r\n      });\r\n    }\r\n\r\n    iterate(object, (value, key) => {\r\n      if (key !== startKey) {\r\n        IV = callback(IV, value, key, object);\r\n      }\r\n    });\r\n\r\n    return IV;\r\n  }\r\n\r\n  /**\r\n   * @method Super#set\r\n   * @public\r\n   * @param {String|Object.<String, Function>} property - Either a string of a property or a setters object.\r\n   * @param {Function} [setter] - If a property parameter is a string this has to be a setter function.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Method for defining setters.\r\n   *\r\n   * @example\r\n   * const object = new Super({})\r\n   *   .get('public', function () {\r\n   *     return this._private;\r\n   *   })\r\n   *   .set('public', function (value) {\r\n   *     if (typeof value === 'number') {\r\n   *       this._private = value;\r\n   *     }\r\n   *   });\r\n   * object.prop('public', '1').$; // { public: undefined }\r\n   * object.prop('public', 1).$;   // { public: 1, _private: 1 }\r\n   *\r\n   * new Super({}).set({\r\n   *   public(value) {\r\n   *     if (typeof value === 'number') {\r\n   *       this._private = value;\r\n   *     }\r\n   *   }\r\n   * });\r\n   */\r\n  set(property, setter) {\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: setter };\r\n    }\r\n\r\n    const object = this.$;\r\n\r\n    iterate(isObject(object) && new Super(property).$, (setter, property) => {\r\n      Object.defineProperty(object, property, { set: setter });\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#some\r\n   * @public\r\n   * @param {IterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy iteration stops and if falsey it continues.\r\n   * @returns {Boolean} If all the callback calls returned truthy value.\r\n   * @description Returns true if some of the callback calls returned truthy value. Otherwise false.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).some((value) => value > 4); // false\r\n   * new Super({}).some(() => true);                             // false\r\n   */\r\n  some(callback = Boolean) {\r\n    validate([callback], ['function'], 'Super#some');\r\n\r\n    return iterate(this.$, (value, key, object) => {\r\n      if (callback(value, key, object)) {\r\n        return true;\r\n      }\r\n    }) || false;\r\n  }\r\n\r\n  /**\r\n   * @method Super#strictEquals\r\n   * @public\r\n   * @param {*} [object] - Object to compare.\r\n   * @returns {Boolean} If the objects are equal or not.\r\n   * @description Returns true if objects are equal using '===' operator and false if not.\r\n   * NaNs are considered to be strict equal.\r\n   *\r\n   * @example\r\n   * new Super(3).strictEquals('3');   // false\r\n   * new Super(NaN).strictEquals(NaN); // true\r\n   */\r\n  strictEquals(object) {\r\n    const o = this.$;\r\n\r\n    object = new Super(object).$;\r\n\r\n    return o === object || (isNaN(o) && isNaN(object));\r\n  }\r\n\r\n  /**\r\n   * @method Super#sum\r\n   * @public\r\n   * @param {IterationCallback} [callback = null] - Called on each iteration.\r\n   * @returns {Number} Sum.\r\n   * @description Type of {@link Super#reduce}.\r\n   * If the callback is present it's used for summing. If not the value is used.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).sum();                         // 6\r\n   * new Super({ a: 1, b: 2, c: 3 }).sum((value) => value * value); // 14\r\n   */\r\n  sum(callback = null) {\r\n    validate([callback], ['function||!'], 'Super#sum');\r\n\r\n    return this.reduce((sum, value, key, object) => (\r\n      sum + Number(callback ? callback(value, key, object) : value)\r\n    ), 0);\r\n  }\r\n\r\n  toJSON() {\r\n    return this.$;\r\n  }\r\n\r\n  /**\r\n   * @member Super#toStringTag\r\n   * @type {String}\r\n   * @public\r\n   * @readonly\r\n   * @description Returns toString tag of the object.\r\n   *\r\n   * @example\r\n   * new Super({}).toStringTag; // 'Object'\r\n   * new Super([]).toStringTag; // 'Array'\r\n   * new Super(1).toStringTag;  // 'Number'\r\n   */\r\n  get toStringTag() {\r\n    return toStringTag(this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Super#type\r\n   * @type {String}\r\n   * @public\r\n   * @readonly\r\n   * @description Synonym for\r\n   * [\"typeof\" operator]{@link https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/instanceof}..\r\n   *\r\n   * @example\r\n   * new Super({}).type;   // 'object'\r\n   * new Super(1).type;    // 'number'\r\n   * new Super('1').type;  // 'string'\r\n   * new Super(true).type; // 'boolean'\r\n   */\r\n  get type() {\r\n    return typeof this.$;\r\n  }\r\n\r\n  /**\r\n   * @method Super#value\r\n   * @public\r\n   * @param {String|Object.<String, *>} property - Either a string of a property or a values object.\r\n   * @param {Object.<String, *>} [value] - If a property parameter is a string this has to be a value to be set.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Method for defining non-enumerable, non-writable, non-configurable values.\r\n   * Synonym for object.define(property, { value: value }).\r\n   *\r\n   * @example\r\n   * new Super({}).value('a', 1).$; // { a: 1 }\r\n   * new Super({}).value({\r\n   *   a: 1\r\n   * }).$;                          // { a: 1 }\r\n   */\r\n  value(property, value) {\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: value };\r\n    }\r\n\r\n    const object = this.$;\r\n\r\n    iterate(isObject(object) && new Super(property).$, (value, property) => {\r\n      Object.defineProperty(object, property, { value });\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#values\r\n   * @public\r\n   * @returns {DWrap} A wrap of the values array.\r\n   * @description Returns D-Wrap of the values array.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).values().$; // [1, 2, 3]\r\n   * new Super(null).values().$;                 // []\r\n   */\r\n  values() {\r\n    const array = [];\r\n\r\n    iterate(this.$, (value) => {\r\n      array.push(value);\r\n    });\r\n\r\n    return D(array);\r\n  }\r\n\r\n  /**\r\n   * @method Super#word\r\n   * @public\r\n   * @param {IterationCallback} callback - Called on each iteration.\r\n   * @returns {String} Concatenated string.\r\n   * @description Type of {@link Super#reduce}.\r\n   * If the callback is present it's used for concatenating. If not the value is used.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).word();                         // '123'\r\n   * new Super({ a: 1, b: 2, c: 3 }).word((value) => value + value); // '112233'\r\n   */\r\n  word(callback = null) {\r\n    validate([callback], ['function||!'], 'Super#word');\r\n\r\n    return this.reduce((word, value, key, object) => (\r\n      word + String(callback ? callback(value, key, object) : value)\r\n    ), '');\r\n  }\r\n}\r\n\r\ndefineProperties(Super.prototype, {\r\n  [Symbol.toStringTag]: 'Super'\r\n});\r\n\r\n/**\r\n * @function deepAssign\r\n * @private\r\n * @param {*} target - Object to assign properties to.\r\n * @param {*} object - Object to assign properties from.\r\n * @returns {void}\r\n */\r\nfunction deepAssign(target, object) {\r\n  iterate(object, (value, key) => {\r\n    if (isPrimitive(target[key]) || !{}.hasOwnProperty.call(target, key)) {\r\n      target[key] = deepClone(value);\r\n\r\n      return;\r\n    }\r\n\r\n    if (!isPrimitive(target[key])) {\r\n      deepAssign(target[key], value);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @function deepClone\r\n * @private\r\n * @param {*} object - Object to clone.\r\n * @description Does the deep cloning.\r\n */\r\nfunction deepClone(object) {\r\n  const clone = cloneSwitcher(object, [object, true]);\r\n\r\n  if (clone !== object) {\r\n    iterate(object, (value, key) => {\r\n      clone[key] = deepClone(value);\r\n    });\r\n  }\r\n\r\n  return clone;\r\n}\r\n\r\n/**\r\n * @function deepEqual\r\n * @private\r\n * @param {*} o1 - First object to compare.\r\n * @param {*} o2 - Second object to compare.\r\n * @param {Boolean} strict - If comparison should be strict or not.\r\n * @returns {Boolean} - If the object are deep equal or not.\r\n */\r\nfunction deepEqual(o1, o2, strict) {\r\n  if (o1 === o2) {\r\n    return true;\r\n  }\r\n\r\n  if (isNaN(o1) && isNaN(o2) && isPrimitive(o1) && isPrimitive(o2)) {\r\n    return true;\r\n  }\r\n\r\n  if (isNaN(o1) || isNaN(o2)) {\r\n    return false;\r\n  }\r\n\r\n  if (isPrimitive(o1) || isPrimitive(o2)) {\r\n    return strict ? o1 === o2 : o1 == o2;\r\n  }\r\n\r\n  if (isDate(o1) && isDate(o2)) {\r\n    return o1.getTime() === o2.getTime();\r\n  }\r\n\r\n  if (isDate(o1) || isDate(o2)) {\r\n    return false;\r\n  }\r\n\r\n  if (isRegExp(o1) && isRegExp(o2)) {\r\n    return o1.source === o2.source &&\r\n      o1.toString().match(/[gimuy]*$/)[0] === o2.toString().match(/[gimuy]*$/)[0] &&\r\n      o1.lastIndex === o2.lastIndex;\r\n  }\r\n\r\n  if (isRegExp(o1) || isRegExp(o2)) {\r\n    return false;\r\n  }\r\n\r\n  if ((!isPlainObject(o1) && !isArray(o1)) || (!isPlainObject(o2) && !isArray(o2))) {\r\n    return false;\r\n  }\r\n\r\n  const p1 = Object.getPrototypeOf(o1);\r\n  const p2 = Object.getPrototypeOf(o1);\r\n\r\n  if (Object.keys(o1).length !== Object.keys(o2).length) {\r\n    return false;\r\n  }\r\n\r\n  if (p1 && p2 && (toStringTag(p1.constructor) !== toStringTag(p2.constructor))) {\r\n    return false;\r\n  }\r\n\r\n  return iterate(o1, (value, key) => {\r\n    if (!(key in o2) || !deepEqual(value, o2[key], strict)) {\r\n      return false;\r\n    }\r\n  }) !== false;\r\n}\r\n\r\n/**\r\n * @function deepEvery\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * If returns truthy the iteration goes on and if not it stops.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {Boolean} - If all the callback calls returned truthy value.\r\n */\r\nfunction deepEvery(object, callback, n, tree) {\r\n  const end = n === 1;\r\n\r\n  return iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    if (\r\n      end || isPrimitive(value)\r\n        ? !callback(value, key, object, newTree)\r\n        : !deepEvery(value, callback, n - 1, newTree)\r\n    ) {\r\n      return false;\r\n    }\r\n  }) !== false;\r\n}\r\n\r\n/**\r\n * @function deepFilter\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * If returns truthy the element is included in the output and if not it's excluded.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {*} Filtered object.\r\n */\r\nfunction deepFilter(object, callback, n, tree) {\r\n  const array = isArrayLike(object);\r\n  const nul = isNil(object);\r\n  const o = array ? [] : nul ? object : {};\r\n  const end = n === 1;\r\n\r\n  iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    if ((end || isPrimitive(value)) && callback(value, key, object, newTree)) {\r\n      if (array) {\r\n        o.push(value);\r\n      } else {\r\n        o[key] = value;\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (!end) {\r\n      const filtered = deepFilter(value, callback, n - 1, newTree);\r\n\r\n      if (filtered) {\r\n        if (array) {\r\n          o.push(filtered);\r\n        } else {\r\n          o[key] = filtered;\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  if (array) {\r\n    return o.length ? o : undefined;\r\n  }\r\n\r\n  if (!nul) {\r\n    return Object.keys(o).length ? o : undefined;\r\n  }\r\n\r\n  return o;\r\n}\r\n\r\n/**\r\n * @function deepFind\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * If returns truthy the iteration stops and if not it continues.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {Tree|null} - If found the whole tree is returned and if not it's null what's returned.\r\n */\r\nfunction deepFind(object, callback, n, tree) {\r\n  const end = n === 1;\r\n\r\n  return iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    if (end || isPrimitive(value)) {\r\n      if (callback(value, key, object, newTree)) {\r\n        return newTree;\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    const result = deepFind(value, callback, n - 1, newTree);\r\n\r\n    if (result) {\r\n      return result;\r\n    }\r\n  }) || null;\r\n}\r\n\r\n/**\r\n * @function deepForEach\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {void}\r\n */\r\nfunction deepForEach(object, callback, n, tree) {\r\n  const end = n === 1;\r\n\r\n  iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    if (end || isPrimitive(value)) {\r\n      callback(value, key, object, newTree);\r\n    } else {\r\n      deepForEach(value, callback, n - 1, newTree);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @function deepForEachEntry\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {void}\r\n */\r\nfunction deepForEachEntry(object, callback, n, tree) {\r\n  const end = n === 1;\r\n\r\n  iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    callback(value, key, object, newTree);\r\n\r\n    if (!end && !isPrimitive(value)) {\r\n      deepForEachEntry(value, callback, n - 1, newTree);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @function deepFreeze\r\n * @private\r\n * @param {*} object - Object to freeze.\r\n * @returns {void}\r\n */\r\nfunction deepFreeze(object) {\r\n  Object.freeze(object);\r\n  iterate(object, deepFreeze);\r\n}\r\n\r\n/**\r\n * @function deepMap\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * Returned value is used to create to new object.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {*} New object.\r\n */\r\nfunction deepMap(object, callback, n, tree) {\r\n  const o = isArrayLike(object) ? [] : isNil(object) ? object : {};\r\n  const end = n === 1;\r\n\r\n  iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    o[key] = end || isPrimitive(value)\r\n      ? callback(value, key, object, newTree)\r\n      : deepMap(value, callback, n - 1, newTree);\r\n  });\r\n\r\n  return o;\r\n}\r\n\r\n/**\r\n * @function deepReduce\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepReduceCallback} callback - Callback that is called on every element.\r\n * Returned value is used to create to new object.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Boolean} start - If callback was called already or not.\r\n * @param {{ IV: * }|undefined} IV - If callback was called already or not.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {{ IV: * }} Transformed IV.\r\n */\r\nfunction deepReduce(object, callback, n, start, IV, tree) {\r\n  const end = n === 1;\r\n\r\n  iterate(object, (value, key, object) => {\r\n    if (!IV && (end || isPrimitive(value)) && !start) {\r\n      IV = { IV: value };\r\n      start = true;\r\n\r\n      return;\r\n    }\r\n\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    IV = end || isPrimitive(value)\r\n      ? { IV: callback(IV.IV, value, key, object, newTree) }\r\n      : deepReduce(value, callback, n - 1, start, IV, newTree);\r\n  });\r\n\r\n  return IV;\r\n}\r\n\r\n/**\r\n * @function deepSome\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * If returns truthy the iteration stops and if not it continues.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {Boolean} - If some of the callback calls returned truthy value.\r\n */\r\nfunction deepSome(object, callback, n, tree) {\r\n  const end = n === 1;\r\n\r\n  return iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    if (\r\n      end || isPrimitive(value)\r\n        ? callback(value, key, object, newTree)\r\n        : deepSome(value, callback, n - 1, newTree)\r\n    ) {\r\n      return true;\r\n    }\r\n  }) || false;\r\n}\r\n\r\nconstructors[0].push({\r\n  check: () => true,\r\n  cls: Super\r\n});\r\n\r\nexport { Super };\r\n","/**\r\n * @module Promise\r\n * @private\r\n * @mixin\r\n * @description Exports Promise class.\r\n */\r\n\r\nimport { isFunction, defineProperties, Symbol } from './helpers';\r\n\r\n/**\r\n * @callback onFulfilledOrRejected\r\n * @public\r\n * @param {*} value - Promise value.\r\n * @param {Boolean} success - If the previous promise is fulfilled it's true and false if rejected.\r\n */\r\n\r\n/**\r\n * @callback onRejected\r\n * @public\r\n * @param {Error|*} err - Promise error.\r\n */\r\n\r\n/**\r\n * @callback onFulfilled\r\n * @public\r\n * @param {*} value - Promise value.\r\n */\r\n\r\nconst secret = {};\r\nconst iterator = Symbol.iterator;\r\n\r\n/**\r\n * @class Promise\r\n * @public\r\n * @param {Function} executor - Function that takes two arguments: resolve and reject functions.\r\n * Call the resolve function when you need to fulfill the promise and call the reject one\r\n * when you need to reject it.\r\n * @returns {Promise} Instance of Promise.\r\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\r\n * @description Class with almost identical API to\r\n * [ES6 Promise]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise}.\r\n * There is a couple differences: set Promise.onError to a function with which you want to\r\n * subscribe to a promise error and set Promise.onUnhandledRejection to a function with which\r\n * you want to subscribe to an unhandled error\r\n * (defaults to console.error.bind(console, '%s %o', 'Uncaught (in promise)')).\r\n */\r\nclass Promise {\r\n  static onError = null;\r\n  static onUnhandledRejection = console.error.bind(console, '%s %o', 'Uncaught (in promise)');\r\n\r\n  constructor(executor) {\r\n    if (!isFunction(executor)) {\r\n      throw new TypeError(`Promise resolver ${ {}.toString.call(executor) } is not a function`);\r\n    }\r\n\r\n    let hiddenStatus;\r\n    let hiddenValue;\r\n\r\n    const\tonFulfill = [];\r\n    const onReject = [];\r\n    const realPromise = this;\r\n    const hiddenPromise = {\r\n      handled: false,\r\n      get status() {\r\n        return hiddenStatus;\r\n      },\r\n      set status(value) {\r\n        hiddenStatus = value;\r\n        realPromise.status = value;\r\n      },\r\n      get value() {\r\n        return hiddenValue;\r\n      },\r\n      set value(val) {\r\n        hiddenValue = val;\r\n        realPromise.value = val;\r\n      }\r\n    };\r\n\r\n    hiddenPromise.status = 'pending';\r\n    hiddenPromise.value = undefined;\r\n\r\n    /**\r\n     * @typedef {Object} hiddenPromise\r\n     * @private\r\n     * @property {Boolean|Object} handled - If the promise is handled or not.\r\n     * @property {'pending'|'fulfilled'|'rejected'} status - Status of the promise.\r\n     * @property {*} value - Value of the promise.\r\n     */\r\n\r\n    /**\r\n     * @member {Function} hiddenPromise#handle\r\n     * @private\r\n     * @param {('reject'|'resolve')} event - Type of the event to handle.\r\n     * @param {Function} handler - Handler itself.\r\n     * @param {Function} resolve - Resolve function.\r\n     * @param {Function} reject - Reject function.\r\n     * @param {Object} secret - Secret.\r\n     * @description Private method for handling promises.\r\n     */\r\n\r\n    /**\r\n     * @member {hiddenPromise} Promise#$$\r\n     * @protected\r\n     */\r\n    defineProperties(this.$$ = {}, {\r\n      'get/set handled': {\r\n        get() {\r\n          return hiddenPromise.handled;\r\n        },\r\n        set(key) {\r\n          if (key === secret) {\r\n            hiddenPromise.handled = true;\r\n          }\r\n        }\r\n      },\r\n      handle(status, f, resolve, reject, key) {\r\n        if (key === secret) {\r\n          const proxy = isFunction(f) ? (value) => {\r\n            try {\r\n              resolve(f(value));\r\n            } catch (err) {\r\n              reject(err);\r\n            }\r\n          } : null;\r\n\r\n          if (status === 'resolve') {\r\n            onFulfill.push(proxy || ((value) => resolve(value)));\r\n          } else if (status === 'reject') {\r\n            onReject.push(proxy || ((err) => reject(err)));\r\n          }\r\n        }\r\n      },\r\n      'get status'() {\r\n        return hiddenPromise.status;\r\n      },\r\n      'get value'() {\r\n        return hiddenPromise.value;\r\n      }\r\n    });\r\n\r\n    try {\r\n      executor(resolve, reject);\r\n    } catch (err) {\r\n      reject(err);\r\n    }\r\n\r\n    function reject(err) {\r\n      if (hiddenPromise.status === 'pending') {\r\n        hiddenPromise.status = 'rejected';\r\n        hiddenPromise.value = err;\r\n\r\n        for (let i = 0, length = onReject.length; i < length; i++) {\r\n          hiddenPromise.handled = true;\r\n\r\n          onReject[i](err);\r\n        }\r\n\r\n        const {\r\n          onUnhandledRejection,\r\n          onError\r\n        } = Promise;\r\n\r\n        if (isFunction(onError)) {\r\n          onError(err);\r\n        }\r\n\r\n        setTimeout(() => {\r\n          if (!hiddenPromise.handled && isFunction(onUnhandledRejection)) {\r\n            onUnhandledRejection(err);\r\n          }\r\n        }, 1);\r\n      }\r\n    }\r\n\r\n    function resolve(value) {\r\n      if (hiddenPromise.status === 'pending') {\r\n        if (value && isFunction(value.then)) {\r\n          return value.then((value) => {\r\n            resolve(value);\r\n          }, (err) => {\r\n            reject(err);\r\n          });\r\n        }\r\n\r\n        hiddenPromise.status = 'fulfilled';\r\n        hiddenPromise.value = value;\r\n\r\n        for (let i = 0, length = onFulfill.length; i < length; i++) {\r\n          hiddenPromise.handled = true;\r\n\r\n          onFulfill[i](value);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method Promise.all\r\n   * @param {(Array|Iterable).<Promise|*>} iterable - Iterable object (like array) of promises\r\n   * or any values.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\r\n   */\r\n  static all(iterable) {\r\n    const array = [];\r\n\r\n    let toResolve = 0;\r\n\r\n    if (iterable[iterator]) {\r\n      iterable = iterable[iterator]();\r\n\r\n      return new Promise((resolve, reject) => {\r\n        let next;\r\n        let i = 0;\r\n\r\n        while (!(next = iterable.next()).done) {\r\n          const promise = Promise.resolve(next.value);\r\n\r\n          toResolve++;\r\n\r\n          ((i) => {\r\n            promise.then((value) => {\r\n              toResolve--;\r\n              array[i] = value;\r\n\r\n              setTimeout(() => {\r\n                if (next.done && !toResolve) {\r\n                  resolve(array);\r\n                }\r\n              }, 1);\r\n            }, reject);\r\n          })(i++);\r\n        }\r\n\r\n        if (!i) {\r\n          return Promise.resolve([]);\r\n        }\r\n      });\r\n    }\r\n\r\n    const length = iterable.length;\r\n\r\n    if (!length) {\r\n      return Promise.resolve([]);\r\n    }\r\n\r\n    toResolve = length;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      for (let i = 0; i < length; i++) {\r\n        const promise = Promise.resolve(iterable[i]);\r\n\r\n        promise.then((value) => {\r\n          toResolve--;\r\n          array[i] = value;\r\n\r\n          if (!toResolve) {\r\n            resolve(array);\r\n          }\r\n        }, reject);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Promise.race\r\n   * @param {(Array|Iterable).<Promise|*>} iterable - Iterable object (like array) of promises\r\n   * or any values.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\r\n   */\r\n  static race(iterable) {\r\n    if (iterable[iterator]) {\r\n      iterable = iterable[iterator]();\r\n\r\n      return new Promise((resolve, reject) => {\r\n        let next;\r\n\r\n        while (!(next = iterable.next()).done) {\r\n          next.value.then(resolve, reject);\r\n        }\r\n      });\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      for (let i = 0, length = iterable.length; i < length; i++) {\r\n        iterable[i].then(resolve, reject);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Promise.reject\r\n   * @param {*} value - Value to reject.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject\r\n   */\r\n  static reject(value) {\r\n    return new Promise((resolve, reject) => {\r\n      reject(value);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Promise.resolve\r\n   * @param {Promise|Thenable|*} value - Promise, thenable or any value to resolve.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\r\n   */\r\n  static resolve(value) {\r\n    if (value && isFunction(value.then)) {\r\n      return value;\r\n    }\r\n\r\n    return new Promise((resolve) => {\r\n      resolve(value);\r\n    });\r\n  }\r\n\r\n  abort() {}\r\n\r\n  /**\r\n   * @method Promise#catch\r\n   * @param {onRejected} onRejected - onRejected callback.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\r\n   */\r\n  catch(onRejected) {\r\n    return this.then(null, onRejected);\r\n  }\r\n\r\n  /**\r\n   * @method Promise#finally\r\n   * @public\r\n   * @param {onFulfilledOrRejected} onFulfilledOrRejected - onFulfilledOrRejected callback.\r\n   * @returns {Promise}\r\n   * @description Method for catching both fulfilled and rejected promises.\r\n   *\r\n   * @example\r\n   * spinner.show();\r\n   * fetchData()\r\n   *   .then((data) => {\r\n   *     // do something with data\r\n   *   })\r\n   *   .catch((err) => {\r\n   *     // handle error somehow\r\n   *   })\r\n   *   .finally(() => {\r\n   *     spinner.hide();\r\n   *   });\r\n   */\r\n  finally(onFulfilledOrRejected) {\r\n    const isFunc = isFunction(onFulfilledOrRejected);\r\n\r\n    return this.then((value) => (\r\n      Promise\r\n        .resolve(\r\n          isFunc\r\n            ? onFulfilledOrRejected(value, true)\r\n            : 0\r\n        )\r\n        .then(() => value)\r\n    ), (err) => (\r\n      Promise\r\n        .resolve(\r\n          isFunc\r\n            ? onFulfilledOrRejected(err, false)\r\n            : 0\r\n        )\r\n        .then(() => Promise.reject(err))\r\n    ));\r\n  }\r\n\r\n  /**\r\n   * @method Promise#then\r\n   * @param {onFulfilled} [onFulfilled] - onFulfilled callback.\r\n   * @param {onRejected} [onRejected] - onRejected callback.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\r\n   */\r\n  then(onFulfilled, onRejected) {\r\n    const promise = this.$$;\r\n\r\n    if (promise.status === 'pending') {\r\n      return new Promise((resolve, reject) => {\r\n        promise.handle('reject', onRejected, resolve, reject, secret);\r\n        promise.handle('resolve', onFulfilled, resolve, reject, secret);\r\n      });\r\n    }\r\n\r\n    promise.handled = secret;\r\n\r\n    const { value } = promise;\r\n\r\n    let method;\r\n    let handler;\r\n\r\n    if (promise.status === 'fulfilled') {\r\n      method = 'resolve';\r\n      handler = onFulfilled;\r\n    } else {\r\n      method = 'reject';\r\n      handler = onRejected;\r\n    }\r\n\r\n    if (!isFunction(handler)) {\r\n      return Promise[method](value);\r\n    }\r\n\r\n    try {\r\n      return Promise.resolve(handler(value));\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n  }\r\n}\r\n\r\ndefineProperties(Promise.prototype, {\r\n  [Symbol.toStringTag]: 'Promise'\r\n});\r\n\r\nexport { Promise };\r\n","/**\r\n * @module Func\r\n * @private\r\n * @mixin\r\n * @description Exports Func class.\r\n */\r\n\r\nimport { Super } from './Super';\r\nimport { Promise } from './Promise';\r\nimport { constructors } from './constants';\r\nimport { isFunction, validate, toArray, Symbol, defineProperties, iterate } from './helpers';\r\n\r\n/**\r\n * @callback BeforeMiddleware\r\n * @param {Array} args - Previous arguments.\r\n * @param {Func} func - This function.\r\n * @returns {Array} - New arguments.\r\n */\r\n\r\n/**\r\n * @callback AfterMiddleware\r\n * @param {*} returnValue - Previous return value.\r\n * @param {Func} func - This function.\r\n * @returns {*} - New return value.\r\n */\r\n\r\n/**\r\n * @class Func\r\n * @extends Super\r\n * @public\r\n * @param {Function} [func = function () {}] - Function to wrap.\r\n * @returns {Func} Instance of Func.\r\n * @description A wrap of a function.\r\n *\r\n * @example\r\n * const func = new Func(Math.max);\r\n *\r\n * func(1, 4, -2, 5); // 5\r\n */\r\nclass Func extends Super {\r\n  constructor(func = () => {}) {\r\n    super();\r\n\r\n    function proxy() {\r\n      if (++proxy.$$.called < proxy.$$.canBeCalled) {\r\n        const { before, after, sync, contextLocked } = proxy.$$;\r\n        let { context, args } = proxy.$$;\r\n        let ret;\r\n\r\n        context = contextLocked ? context : context || this;\r\n        args = args.concat(toArray(arguments));\r\n\r\n        if (sync) {\r\n          iterate(before, (middleware) => {\r\n            args = middleware.call(context, toArray(args), proxy);\r\n          });\r\n\r\n          ret = func.apply(context, toArray(args));\r\n\r\n          iterate(after, (middleware) => {\r\n            ret = middleware.call(context, ret, proxy);\r\n          });\r\n\r\n          return ret;\r\n        }\r\n\r\n        let promise = Promise.resolve(args);\r\n\r\n        iterate(before, (middleware) => {\r\n          promise = promise.then((args) => middleware.call(context, toArray(args), proxy));\r\n        });\r\n\r\n        promise = promise.then((args) => func.apply(context, toArray(args)));\r\n\r\n        iterate(after, (middleware) => {\r\n          promise = promise.then((ret) => middleware.call(context, ret, proxy));\r\n        });\r\n\r\n        return promise;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @member {Object} Func#$$\r\n     * @type {Object}\r\n     * @protected\r\n     * @property {Array} after - After middleware array.\r\n     * @property {Array} args - Locked and bound arguments.\r\n     * @property {Array} argsLocked - Locked arguments.\r\n     * @property {Array} before - Before middleware array.\r\n     * @property {Number} called - How many times the function was called.\r\n     * @property {Number} canBeCalled - How many times the function can be actually called.\r\n     * @property {*} context - Locked or bound context.\r\n     * @property {Boolean} contextLocked - Is context locked or not.\r\n     * @property {Boolean} sync - Is function synchronous or not.\r\n     * @description Config parameters.\r\n     */\r\n    Object.defineProperty(proxy, '$$', {\r\n      value: {\r\n        after: [],\r\n        args: [],\r\n        argsLocked: [],\r\n        before: [],\r\n        called: 0,\r\n        canBeCalled: Infinity,\r\n        context: null,\r\n        contextLocked: false,\r\n        sync: true\r\n      }\r\n    });\r\n\r\n    /**\r\n     * @member {Function} Func#$\r\n     * @type {Function}\r\n     * @public\r\n     * @description Original function.\r\n     */\r\n    Object.defineProperty(proxy, '$', { value: func });\r\n    Object.setPrototypeOf(proxy, Func.prototype);\r\n\r\n    return proxy;\r\n  }\r\n\r\n  /**\r\n   * @method Func#after\r\n   * @public\r\n   * @param {AfterMiddleware} middleware - After middleware.\r\n   * @param {Boolean|*} [afterAll = true] - Boolean parameter where to put middleware.\r\n   * Truthy parameter stands for \"to the end\" and falsey for \"to the beginning\".\r\n   * @returns {Func} Returns this.\r\n   * @description Adds after middleware.\r\n   *\r\n   * @example\r\n   * const func = new Func((a) => a + 1)\r\n   *   .after((result) => result * result);\r\n   *\r\n   * func(4);  // 25\r\n   * func(-4); // 9\r\n   */\r\n  after(middleware, afterAll = true) {\r\n    validate([middleware], ['function'], 'Func#after');\r\n\r\n    const { after } = this.$$;\r\n\r\n    if (afterAll) {\r\n      after.push(middleware);\r\n    } else {\r\n      after.unshift(middleware);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#apply\r\n   * @public\r\n   * @param {*} [context] - Context to call with.\r\n   * @param {(Array|Arguments)} [args] - Arguments to call with.\r\n   * @returns {*} Return of function call.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\r\n   * @description Synonym for\r\n   * [Function#apply]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Function/apply}.\r\n   */\r\n  apply(context, args) {\r\n    return (() => {}).apply.apply(this, arguments);\r\n  }\r\n\r\n  /**\r\n   * @method Func#async\r\n   * @public\r\n   * @param {Boolean|*} [condition] - If the function should be synchronous or not.\r\n   * @returns {Func} Returns this.\r\n   * @description If the function should be synchronous or not.\r\n   *\r\n   * @example\r\n   * const func = new Func((a) => a + 1).async();\r\n   *\r\n   * func(4).then((result) => {\r\n   *   console.log(result); // 5\r\n   * });\r\n   */\r\n  async(condition = true) {\r\n    this.$$.sync = !condition;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#before\r\n   * @public\r\n   * @param {BeforeMiddleware} middleware - Before middleware.\r\n   * @param {Boolean|*} [beforeAll = true] - Boolean parameter where to put middleware.\r\n   * Truthy parameter stands for \"to the beginning\" and falsey for \"to the end\".\r\n   * @returns {Func} Returns this.\r\n   * @description Adds before middleware.\r\n   *\r\n   * @example\r\n   * const func = new Func((a) => a + 1)\r\n   *   .before(([arg]) => [arg * arg]);\r\n   *\r\n   * func(4); // 17\r\n   * func(3); // 10\r\n   */\r\n  before(middleware, beforeAll = true) {\r\n    validate([middleware], ['function'], 'Func#before');\r\n\r\n    const { before } = this.$$;\r\n\r\n    if (beforeAll) {\r\n      before.unshift(middleware);\r\n    } else {\r\n      before.push(middleware);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#bind\r\n   * @public\r\n   * @param {*} context - Context to bind.\r\n   * @param {...(Array|Arguments|*)} args - Arguments to bind.\r\n   * @returns {Func} Returns this.\r\n   * @description Composition of {@link Func#bindContext} and {@link Func#bindArgs}.\r\n   *\r\n   * @example\r\n   * const func = new Func(function (a, b) {\r\n   *   return this.a + a + b;\r\n   * }).bind({ a: 2 }, 1);\r\n   *\r\n   * func(1); // 4\r\n   * func(3); // 6\r\n   */\r\n  bind(context, ...args) {\r\n    return this\r\n      .bindContext(context)\r\n      .bindArgs(args);\r\n  }\r\n\r\n  /**\r\n   * @method Func#bindArgs\r\n   * @public\r\n   * @param {(Array|Arguments)} args - Arguments to bind.\r\n   * @returns {Func} Returns this.\r\n   * @description Binds arguments in addition to already locked and bound ones.\r\n   *\r\n   * @example\r\n   * const func = new Func((...args) => {\r\n   *   let sum = 0;\r\n   *\r\n   *   for (let i = 0; i < args.length; i++) {\r\n   *     sum += args[i];\r\n   *   }\r\n   *\r\n   *   return sum;\r\n   * });\r\n   *\r\n   * func(1, 2, 3); // 6\r\n   *\r\n   * func.bindArgs([4]);\r\n   *\r\n   * func(1, 2, 3); // 10\r\n   *\r\n   * func.bindArgs([5]);\r\n   *\r\n   * func(1, 2, 3); // 15\r\n   */\r\n  bindArgs(args) {\r\n    const func = this.$$;\r\n\r\n    func.args = func.args.concat(toArray(args));\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#bindContext\r\n   * @public\r\n   * @param {*} context - Context to bind.\r\n   * @returns {Func} Returns this.\r\n   * @description Bind new context if it's not already locked.\r\n   *\r\n   * @example\r\n   * const func = new Func(function () {\r\n   *   return this.a;\r\n   * }).bindContext({ a: 1 });\r\n   *\r\n   * func(); // 1\r\n   *\r\n   * func.bindContext({ a: 2 });\r\n   *\r\n   * func(); // 2\r\n   */\r\n  bindContext(context) {\r\n    const func = this.$$;\r\n\r\n    if (!func.contextLocked) {\r\n      func.context = context;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#call\r\n   * @public\r\n   * @param {*} [context] - Context to call with.\r\n   * @param {...*} [args] - Arguments to call with.\r\n   * @returns {*} Return of function call.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Function/call\r\n   * @description Synonym for\r\n   * [Function#call]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Function/call}.\r\n   */\r\n  call(context, ...args) {\r\n    return (() => {}).call.apply(this, arguments);\r\n  }\r\n\r\n  /**\r\n   * @member {Number} Func#called\r\n   * @public\r\n   * @readonly\r\n   * @description Returns how many times the function was called.\r\n   *\r\n   * @example\r\n   * const func = new Func((a) => a + 1);\r\n   *\r\n   * func();\r\n   * func();\r\n   *\r\n   * func.called // 2\r\n   */\r\n  get called() {\r\n    return this.$$.called;\r\n  }\r\n\r\n  /**\r\n   * @method Func#canBeCalled\r\n   * @public\r\n   * @param {Number} times - Number of maximum times the function is called (middlewares are also taken for a count).\r\n   * @returns {Func} Returns this.\r\n   * @description Method for limiting call times of function.\r\n   *\r\n   * @example\r\n   * const func = new Func((a) => a + 1)\r\n   *   .canBeCalled(1);\r\n   *\r\n   * func(1); // 2\r\n   * func(1); // undefined\r\n   */\r\n  canBeCalled(times) {\r\n    this.$$.canBeCalled = times;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#limitArgsTo\r\n   * @public\r\n   * @param {Number} number - Number of arguments to limit to.\r\n   * @returns {Func} Returns this.\r\n   * @description Built-in before middleware for limiting number of arguments\r\n   * that is put to the end of before middlewares.\r\n   *\r\n   * @example\r\n   * const func = new Func((a, b) => [a, b]);\r\n   *\r\n   * func(1, 2); // [1, 2]\r\n   *\r\n   * func.limitArgsTo(1);\r\n   *\r\n   * func(1, 2); // [1, undefined]\r\n   */\r\n  limitArgsTo(number) {\r\n    return this.before((args) => args.slice(0, number), false);\r\n  }\r\n\r\n  /**\r\n   * @method Func#lock\r\n   * @public\r\n   * @param {*} context - Context to lock.\r\n   * @param {(Array|Arguments|*)} args - Arguments to lock.\r\n   * @returns {Func} Returns this.\r\n   * @description Composition of {@link Func#lockContext} and {@link Func#lockArgs}.\r\n   *\r\n   * @example\r\n   * const func = new Func(function (a, b) {\r\n   *   return this.a + a + b;\r\n   * }).lock({ a: 2 }, [1]);\r\n   *\r\n   * func(1); // 4\r\n   * func(3); // 6\r\n   */\r\n  lock(context, args) {\r\n    return this\r\n      .lockContext(context)\r\n      .lockArgs(args);\r\n  }\r\n\r\n  /**\r\n   * @method Func#lockArgs\r\n   * @public\r\n   * @param {(Array|Arguments|*)} args - Arguments to lock.\r\n   * @returns {Func} Returns this.\r\n   * @description Erases bound arguments and adds new arguments to already locked ones.\r\n   *\r\n   * @example\r\n   * const func = new Func((...args) => {\r\n   *   let sum = 0;\r\n   *\r\n   *   for (let i = 0; i < args.length; i++) {\r\n   *     sum += args[i];\r\n   *   }\r\n   *\r\n   *   return sum;\r\n   * });\r\n   *\r\n   * func(1, 2, 3); // 6\r\n   *\r\n   * func.lockArgs([4]);\r\n   *\r\n   * func(1, 2, 3); // 10\r\n   *\r\n   * func.bindArgs([6, 7]);\r\n   * func.lockArgs([5]);\r\n   *\r\n   * func(1, 2, 3); // 15\r\n   */\r\n  lockArgs(args) {\r\n    const func = this.$$;\r\n\r\n    func.args = func.argsLocked = func.argsLocked.concat(toArray(args));\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#lockContext\r\n   * @public\r\n   * @param {*} context - Context to lock.\r\n   * @returns {Func} Returns this.\r\n   * @description Locks context if it's not already locked.\r\n   *\r\n   * @example\r\n   * const func = new Func(function () {\r\n   *   return this.a;\r\n   * }).lockContext({ a: 1 });\r\n   *\r\n   * func(); // 1\r\n   *\r\n   * func.lockContext({ a: 2 });\r\n   *\r\n   * func(); // 1\r\n   */\r\n  lockContext(context) {\r\n    const func = this.$$;\r\n\r\n    if (!func.contextLocked) {\r\n      func.context = context;\r\n      func.contextLocked = true;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#timing\r\n   * @public\r\n   * @param {String} mark - Argument that is passed to console.time() and console.timeEnd().\r\n   * By default name of the original function, or if it's not present, 'anonymous' is used.\r\n   * @returns {Func} Returns this.\r\n   * @description Built-in before and after middlewares for noting calling time.\r\n   * In case of asynchronous functions it notes time between calling function and resolving or rejecting the result.\r\n   *\r\n   * @example\r\n   * const func = new Func((a) => a + 1)\r\n   *   .timing('plus 1');\r\n   *\r\n   * func(2); // plus 1: 0.010ms\r\n   *\r\n   * const async = new Func(() => new Promise(() => {\r\n   *     setTimeout(resolve, 1000);\r\n   *   }))\r\n   *   .async()\r\n   *   .timing();\r\n   *\r\n   * async();\r\n   * // After 1 second...\r\n   * // anonymous: 1000.010ms\r\n   */\r\n  timing(mark) {\r\n    mark = arguments.length ? String(mark) : this.$.name || 'anonymous';\r\n\r\n    this.before((args) => {\r\n      console.time(mark);\r\n\r\n      return args;\r\n    }, false);\r\n\r\n    this.after((ret) => {\r\n      console.timeEnd(mark);\r\n\r\n      return ret;\r\n    }, false);\r\n\r\n    return this;\r\n  }\r\n\r\n  toString() {\r\n    return (() => {}).toString.call(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Func#unbind\r\n   * @public\r\n   * @returns {Func} Returns this.\r\n   * @description Composition of {@link Func#unbindContext} and {@link Func#unbindArgs}.\r\n   *\r\n   * @example\r\n   * const func = new Func(function (a) {\r\n   *   return this.foo + ' & ' +  a;\r\n   * }).bind({ foo: 2 }, 1);\r\n   *\r\n   * func(); // '2 & 1'\r\n   *\r\n   * func.unbind();\r\n   *\r\n   * func(); // 'undefined & undefined'\r\n   */\r\n  unbind() {\r\n    return this\r\n      .unbindContext()\r\n      .unbindArgs();\r\n  }\r\n\r\n  /**\r\n   * @method Func#unbindArgs\r\n   * @public\r\n   * @returns {Func} Returns this.\r\n   * @description Erases all bound arguments.\r\n   *\r\n   * @example\r\n   * const func = new Func((...args) => {\r\n   *   let sum = 0;\r\n   *\r\n   *   for (let i = 0; i < args.length; i++) {\r\n   *     sum += args[i];\r\n   *   }\r\n   *\r\n   *   return sum;\r\n   * }).bindArgs([4, 5]);\r\n   *\r\n   * func(1, 2, 3); // 15\r\n   *\r\n   * func.unbindArgs();\r\n   *\r\n   * func(1, 2, 3); // 6\r\n   */\r\n  unbindArgs() {\r\n    const func = this.$$;\r\n\r\n    func.args = func.argsLocked;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#unbindContext\r\n   * @public\r\n   * @returns {Func} Returns this.\r\n   * @description Erases context if it's not locked.\r\n   *\r\n   * @example\r\n   * const func = new Func(function () {\r\n   *   return this.foo;\r\n   * }).bindContext({ foo: 1 });\r\n   *\r\n   * func(); // 1\r\n   *\r\n   * func.unbindArgs();\r\n   *\r\n   * func(); // undefined\r\n   */\r\n  unbindContext() {\r\n    const func = this.$$;\r\n\r\n    if (!func.contextLocked) {\r\n      func.context = null;\r\n    }\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\ndefineProperties(Func.prototype, {\r\n  [Symbol.toStringTag]: 'Func'\r\n});\r\n\r\nconstructors[1].push({\r\n  check: isFunction,\r\n  cls: Func\r\n});\r\n\r\n/**\r\n * @function method\r\n * @public\r\n * @param {String} method - Method to call.\r\n * @param {(Array|Arguments|*)} args - Arguments to call the method with.\r\n * @returns {Function} Function that calls stated method with given arguments.\r\n * @description Function that returns the function\r\n * that calls stated method of its first argument with given arguments.\r\n *\r\n * @example\r\n * [1.2345, 2.789, 3.14].map(method('toFixed', [2])); // ['1.23', '2.79', '3.14']\r\n */\r\nfunction method(method, args = []) {\r\n  return (x) => x[method].apply(x, toArray(args));\r\n}\r\n\r\n/**\r\n * @function noop\r\n * @public\r\n * @returns {void}\r\n * @description Empty function.\r\n */\r\nfunction noop() {}\r\n\r\n/**\r\n * @function prop\r\n * @public\r\n * @param {String} prop - Property to return.\r\n * @returns {Function} Function that returns given property of its first argument.\r\n * @description Function that return the function that returns given property of its first argument.\r\n *\r\n * @example\r\n * ['foo', '12', '7890'].map(prop('length')); // [3, 2, 4]\r\n */\r\nfunction prop(prop) {\r\n  return ({ [prop]: value }) => value;\r\n}\r\n\r\n/**\r\n * @function self\r\n * @public\r\n * @returns {*} First argument itself.\r\n * @description Function that returns the first argument.\r\n *\r\n * @example\r\n * [1, 2].map(self);                     // [1, 2]\r\n * [1, 3, NaN, 0, 7, null].filter(self); // [1, 3, 7]\r\n */\r\nfunction self() {\r\n  return arguments[0];\r\n}\r\n\r\nexport { Func, method, noop, prop, self };\r\n","/**\r\n * @module Num\r\n * @private\r\n * @mixin\r\n * @description Exports Num class.\r\n */\r\n\r\nimport { Super } from './Super';\r\nimport { Func } from './Func';\r\nimport { Promise } from './Promise';\r\nimport { constructors } from './constants';\r\nimport {\r\n  isNumber, isFinite, toArray,\r\n  defineProperties, validate, Symbol\r\n} from './helpers';\r\n\r\nconst toRadian = Math.PI / 180;\r\nconst toDegree = 180 / Math.PI;\r\nconst ln2 = Math.LN2;\r\nconst ln10 = Math.LN10;\r\n\r\n/**\r\n * @class Num\r\n * @extends Super\r\n * @public\r\n * @param {Number} [number = 0] - A number to wrap.\r\n * @returns {Num} Instance of Num.\r\n * @description Wrap of a number.\r\n *\r\n * @example\r\n * const num = new Num(1);\r\n */\r\nclass Num extends Super {\r\n  constructor(number = 0) {\r\n    super(+number);\r\n\r\n    /**\r\n     * @member Num#$\r\n     * @type {Number}\r\n     * @public\r\n     * @description Original number.\r\n     */\r\n  }\r\n\r\n  /**\r\n   * @member Num#abs\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/abs\r\n   * @description Synonym for\r\n   * [Math.abs]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/abs}.\r\n   *\r\n   * @example\r\n   * new Num(1).abs;  // 1\r\n   * new Num(-1).abs; // 1\r\n   */\r\n  get abs() {\r\n    return Math.abs(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Num#acos\r\n   * @public\r\n   * @param {Boolean|*} [toDegrees = false] If it is truthy the return value is transformed into degrees.\r\n   * @returns {Number} Arccosine of the number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/acos\r\n   * @description Synonym for\r\n   * [Math.acos]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/acos}.\r\n   */\r\n  acos(toDegrees) {\r\n    return (toDegrees ? toDegree : 1) * Math.acos(this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#acosh\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh\r\n   * @description Synonym for\r\n   * [Math.acosh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh}.\r\n   */\r\n  get acosh() {\r\n    const number = this.$;\r\n\r\n    return Math.log(number + Math.sqrt(number * number - 1));\r\n  }\r\n\r\n  /**\r\n   * @member Num#asinh\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh\r\n   * @description Synonym for\r\n   * [Math.asinh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh}.\r\n   */\r\n  get asinh() {\r\n    const number = this.$;\r\n\r\n    return Math.log(number + Math.sqrt(number * number + 1));\r\n  }\r\n\r\n  /**\r\n   * @method Num#asin\r\n   * @public\r\n   * @param {Boolean|*} [toDegrees = false] If it is truthy the return value is transformed into degrees.\r\n   * @returns {Number} Arcsine of the number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/asin\r\n   * @description Synonym for\r\n   * [Math.asin]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/asin}.\r\n   */\r\n  asin(toDegrees) {\r\n    return (toDegrees ? toDegree : 1) * Math.asin(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Num#atan\r\n   * @public\r\n   * @param {Boolean|*} [toDegrees = false] If it is truthy the return value is transformed into degrees.\r\n   * @returns {Number} Arcsine of the number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/atan\r\n   * @description Synonym for\r\n   * [Math.atan]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/atan}.\r\n   */\r\n  atan(toDegrees) {\r\n    return (toDegrees ? toDegree : 1) * Math.atan(this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#atanh\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh\r\n   * @description Synonym for\r\n   * [Math.atanh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh}.\r\n   */\r\n  get atanh() {\r\n    const number = this.$;\r\n\r\n    return Math.log((1 + number) / (1 - number)) / 2;\r\n  }\r\n\r\n  /**\r\n   * @member Num#cbrt\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt\r\n   * @description Synonym for\r\n   * [Math.cbrt]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt}.\r\n   */\r\n  get cbrt() {\r\n    const cbrt = Math.pow(Math.abs(this.$), 1 / 3);\r\n\r\n    return this.$ > 0 ? cbrt : -cbrt;\r\n  }\r\n\r\n  /**\r\n   * @member Num#ceil\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil\r\n   * @description Synonym for\r\n   * [Math.ceil]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil}.\r\n   *\r\n   * @example\r\n   * new Num(1.1).ceil;  // 2\r\n   * new Num(-1.1).ceil; // -1\r\n   */\r\n  get ceil() {\r\n    return Math.ceil(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Num#cos\r\n   * @public\r\n   * @param {Boolean|*} [asDegrees = false] If it is truthy the number is treated as a degree value.\r\n   * @returns {Number} Cosine of the number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cos\r\n   * @description Synonym for\r\n   * [Math.cos]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cos}.\r\n   */\r\n  cos(asDegrees) {\r\n    return Math.cos((asDegrees ? toRadian : 1) * this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#cosh\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh\r\n   * @description Synonym for\r\n   * [Math.cosh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh}.\r\n   */\r\n  get cosh() {\r\n    const exp = this.exp;\r\n\r\n    return (exp + 1 / exp) / 2;\r\n  }\r\n\r\n  /**\r\n   * @member Num#cube\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description Cube of the number.\r\n   *\r\n   * @example\r\n   * new Num(2).cube;  // 8\r\n   * new Num(-3).ceil; // -27\r\n   */\r\n  get cube() {\r\n    return this.$ * this.$ * this.$;\r\n  }\r\n\r\n  /**\r\n   * @member Num#exp\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/exp\r\n   * @description Synonym for\r\n   * [Math.exp]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/exp}.\r\n   */\r\n  get exp() {\r\n    return Math.exp(this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#floor\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\r\n   * @description Synonym for\r\n   * [Math.floor]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/floor}.\r\n   *\r\n   * @example\r\n   * new Num(1.1).floor;  // 1\r\n   * new Num(-1.1).floor; // -2\r\n   */\r\n  get floor() {\r\n    return Math.floor(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Num#interval\r\n   * @public\r\n   * @param {Function} func - Function that is called every <number> milliseconds.\r\n   * @param {Array} [args] - Arguments passed to the function.\r\n   * @returns {Function} Function that aborts the interval. The context of the function (if it's not already bound)\r\n   * is the object with the abort method.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/setInterval\r\n   * @description Analogue of the\r\n   * [setInterval]{@link https://developer.mozilla.org/en/docs/Web/API/WindowTimers/setInterval}.\r\n   *\r\n   * @example\r\n   * const times = 0;\r\n   * new Num(50).interval(function () {\r\n   *   if (++times === 10) {\r\n   *     this.abort();\r\n   *   }\r\n   * });\r\n   */\r\n  interval(func, args = []) {\r\n    validate([func], ['function'], 'Num#interval');\r\n\r\n    func = new Func(func).bindContext({ abort });\r\n    args = toArray(args);\r\n\r\n    const number = this.$;\r\n\r\n    let aborted;\r\n    let timeout = setTimeout(function interval() {\r\n      if (!aborted) {\r\n        func.apply(null, args);\r\n\r\n        if (!aborted) {\r\n          timeout = setTimeout(interval, number);\r\n        }\r\n      }\r\n    }, 0);\r\n\r\n    return abort;\r\n\r\n    function abort() {\r\n      aborted = true;\r\n\r\n      return clearTimeout(timeout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @member Num#ln\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log\r\n   * @description Synonym for\r\n   * [Math.log]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log}.\r\n   */\r\n  get ln() {\r\n    return Math.log(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Num#log\r\n   * @public\r\n   * @param {Number} number - Number to get logarithm of.\r\n   * @returns {Number} Logarithm of the argument number to the number base.\r\n   * @description Returns the logarithm of the argument number to the number base.\r\n   *\r\n   * @example\r\n   * new Num(2).log(16);  // 4\r\n   * new Num(3).log(243); // 5\r\n   */\r\n  log(number) {\r\n    return Math.log(number) / Math.log(this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#log2\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log2\r\n   * @description Synonym for\r\n   * [Math.log2]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log2}.\r\n   */\r\n  get log2() {\r\n    return this.ln / ln2;\r\n  }\r\n\r\n  /**\r\n   * @member Num#log10\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log10\r\n   * @description Synonym for\r\n   * [Math.log10]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log10}.\r\n   */\r\n  get log10() {\r\n    return this.ln / ln10;\r\n  }\r\n\r\n  /**\r\n   * @method Num#pow\r\n   * @public\r\n   * @param {Number} power - Power the number should be raised to.\r\n   * @returns {Number} The number to the <power> power.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/pow\r\n   * @description Synonym for\r\n   * [Math.pow]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/pow}.\r\n   *\r\n   * @example\r\n   * new Num(4).pow(.5); // 2\r\n   * new Num(3).pow(2);  // 9\r\n   */\r\n  pow(power) {\r\n    return Math.pow(this.$, power);\r\n  }\r\n\r\n  /**\r\n   * @method Num#root\r\n   * @public\r\n   * @param {Number} power - Power the number should be raised to.\r\n   * @returns {Number} The <power> root of the number.\r\n   * @description Synonym for number.pow(1 / power);\r\n   *\r\n   * @example\r\n   * new Num(4).root(2);   // 0.5\r\n   * new Num(243).root(5); // 3\r\n   */\r\n  root(power) {\r\n    return Math.pow(this.$, 1 / power);\r\n  }\r\n\r\n  /**\r\n   * @member Num#round\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/round\r\n   * @description Synonym for\r\n   * [Math.round]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/round}.\r\n   *\r\n   * @example\r\n   * new Num(1.1).floor;  // 1\r\n   * new Num(-1.1).floor; // -1\r\n   * new Num(1.5).floor;  // 2\r\n   */\r\n  get round() {\r\n    return Math.round(this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#sign\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\r\n   * @description Synonym for\r\n   * [Math.sign]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sign}.\r\n   */\r\n  get sign() {\r\n    const number = this.$;\r\n\r\n    if (!number) {\r\n      return number;\r\n    }\r\n\r\n    return number > 0 ? 1 : -1;\r\n  }\r\n\r\n  /**\r\n   * @method Num#sin\r\n   * @public\r\n   * @param {Boolean|*} [asDegrees = false] If it is truthy the number is treated as a degree value.\r\n   * @returns {Number} Sine of the number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sin\r\n   * @description Synonym for\r\n   * [Math.sin]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sin}.\r\n   */\r\n  sin(asDegrees) {\r\n    return Math.sin((asDegrees ? toRadian : 1) * this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#sinh\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh\r\n   * @description Synonym for\r\n   * [Math.sinh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh}.\r\n   */\r\n  get sinh() {\r\n    const exp = this.exp;\r\n\r\n    return (exp - 1 / exp) / 2;\r\n  }\r\n\r\n  /**\r\n   * @member Num#sq\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description The square of the number.\r\n   *\r\n   * @example\r\n   * new Num(2).sq;  // 4\r\n   * new Num(-3).sq; // 9\r\n   */\r\n  get sq() {\r\n    return this.$ * this.$;\r\n  }\r\n\r\n  /**\r\n   * @member Num#sqrt\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt\r\n   * @description Synonym for\r\n   * [Math.sqrt]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt}.\r\n   */\r\n  get sqrt() {\r\n    return Math.sqrt(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Num#tan\r\n   * @public\r\n   * @param {Boolean|*} [asDegrees = false] If it is truthy the number is treated as a degree value.\r\n   * @returns {Number} Tangent of the number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/tan\r\n   * @description Synonym for\r\n   * [Math.tan]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/tan}.\r\n   */\r\n  tan(asDegrees) {\r\n    return Math.tan((asDegrees ? toRadian : 1) * this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#tanh\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh\r\n   * @description Synonym for\r\n   * [Math.tanh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh}.\r\n   */\r\n  get tanh() {\r\n    const number = this.$;\r\n\r\n    if (!isFinite(number)) {\r\n      return this.sign;\r\n    }\r\n\r\n    const exp = Math.exp(2 * number);\r\n\r\n    return (exp - 1) / (exp + 1);\r\n  }\r\n\r\n  /**\r\n   * @method Num#timeout\r\n   * @public\r\n   * @param {*} [value] - Value to be resolved by the promise.\r\n   * @returns {Promise} Promise that could be aborted.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/WindowTimers/setTimeout\r\n   * @description Promise-based analogue of\r\n   * [setTimeout]{@link https://developer.mozilla.org/en/docs/Web/API/WindowTimers/setTimeout}.\r\n   *\r\n   * @example\r\n   * new Num(50).timeout('resolved').then((value) => {\r\n   *   console.log(value); // 'resolved'\r\n   * });\r\n   *\r\n   * const promise = new Num(50).timeout();\r\n   * promise.abort();\r\n   */\r\n  timeout(value) {\r\n    let timeout;\r\n    let reject;\r\n\r\n    const promise = new Promise((resolve, rej) => {\r\n      reject = rej;\r\n      timeout = setTimeout(resolve, this.$, value);\r\n    });\r\n\r\n    promise.abort = function abort() {\r\n      clearTimeout(timeout);\r\n\r\n      reject(new Error('Timeout was aborted'));\r\n\r\n      return this;\r\n    };\r\n\r\n    return promise;\r\n  }\r\n\r\n  /**\r\n   * @method Num#toBase\r\n   * @public\r\n   * @param {Number} [base = 10] - Base that the number should inverted to.\r\n   * @returns {String} A string representation of the number in <base> base.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toString\r\n   * @description Synonym for\r\n   * [Number#toString]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toString}.\r\n   *\r\n   * @example\r\n   * new Num(4).toBase(2); // 100\r\n   * new Num(3).toBase();  // 3\r\n   */\r\n  toBase(base = 10) {\r\n    return this.$.toString(base);\r\n  }\r\n\r\n  /**\r\n   * @method Num#toExponential\r\n   * @public\r\n   * @param {Number} [fractionDigits] - See the link.\r\n   * @returns {String} A string representation of the number in the exponential format.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential\r\n   * @description Synonym for\r\n   * [Number#toExponential]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential}.\r\n   */\r\n  toExponential(fractionDigits) {\r\n    return this.$.toExponential(fractionDigits);\r\n  }\r\n\r\n  /**\r\n   * @method Num#toFixed\r\n   * @public\r\n   * @param {Number} [digits = 0] - See the link.\r\n   * @returns {String} Fixed-point formatted number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed\r\n   * @description Synonym for\r\n   * [Number#toFixed]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed}.\r\n   */\r\n  toFixed(digits) {\r\n    return this.$.toFixed(digits);\r\n  }\r\n\r\n  /**\r\n   * @method Num#toPrecision\r\n   * @public\r\n   * @param {Number} [precision] - See the link.\r\n   * @returns {String} A string representation of the number to the specified precision.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision\r\n   * @description Synonym for\r\n   * [Number#toPrecision]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision}.\r\n   */\r\n  toPrecision(precision) {\r\n    return this.$.toPrecision(precision);\r\n  }\r\n\r\n  valueOf() {\r\n    return Number(this.$);\r\n  }\r\n}\r\n\r\ndefineProperties(Num.prototype, {\r\n  [Symbol.toStringTag]: 'Num'\r\n});\r\n\r\nconstructors[1].push({\r\n  check: isNumber,\r\n  cls: Num\r\n});\r\n\r\n/**\r\n * @function rand\r\n * @public\r\n * @param {Number} [start = 0] - Start of the range.\r\n * @param {Number} [end = 1] - End of the range.\r\n * @returns {Number} Random number.\r\n * @description Returns a random number in the range specified by the arguments.\r\n *\r\n * @example\r\n * rand(1, 5); // 2.315\r\n * rand(1, 5); // 4.356763\r\n */\r\nfunction rand(start = 0, end = 1) {\r\n  return start + (end - start) * Math.random();\r\n}\r\n\r\n/**\r\n * @function random\r\n * @public\r\n * @param {Integer} start - Start of the range.\r\n * @param {Integer} end - End of the range.\r\n * @returns {Number} Random integer.\r\n * @description Returns a random integer number in the range specified by the arguments.\r\n *\r\n * @example\r\n * random(1, 5); // 3\r\n * random(1, 5); // 1\r\n */\r\nfunction random(start, end) {\r\n  validate([start, end], ['intLike', 'intLike'], 'random');\r\n\r\n  if (end <= start) {\r\n    throw new Error('The second argument must be greater than the first!', 'random');\r\n  }\r\n\r\n  return Math.floor(rand(start, end + 1));\r\n}\r\n\r\nexport { Num, rand, random };\r\n","/**\r\n * @module Arr\r\n * @private\r\n * @mixin\r\n * @description Exports Arr class.\r\n */\r\n\r\nimport { random } from './Num';\r\nimport { Super } from './Super';\r\nimport { constructors } from './constants';\r\nimport {\r\n  isArrayLike, isNaN, isNumber, isString,\r\n  toArray, validate, iterate as iterator, Symbol, defineProperties\r\n} from './helpers';\r\n\r\n/**\r\n * @typedef {Array|*} ArrayLike\r\n * @public\r\n * @description Array-like type.\r\n */\r\n\r\n/**\r\n * @callback ArrayCallback\r\n * @public\r\n * @param {Number} i - Iteration index.\r\n */\r\n\r\n/**\r\n * @callback IterateCallback\r\n * @public\r\n * @param {Number} i - Iteration index.\r\n */\r\n\r\n/**\r\n * @callback CompareFunction\r\n * @public\r\n * @param {*} x - First value to be compared.\r\n * @param {*} y - Second value to be compared.\r\n */\r\n\r\n/**\r\n * @class Arr\r\n * @extends Super\r\n * @public\r\n * @param {Array} [array = []] - An array to wrap.\r\n * @returns {Arr} Instance of Arr.\r\n * @description Wrap of an array.\r\n *\r\n * @example\r\n * new Arr([1, 2]);\r\n */\r\nclass Arr extends Super {\r\n  constructor(array = []) {\r\n    super(toArray(array instanceof Arr ? array.$ : array));\r\n\r\n    /**\r\n     * @member Arr#$\r\n     * @type {Array}\r\n     * @public\r\n     * @description Made array.\r\n     */\r\n  }\r\n\r\n  /**\r\n   * @method Arr#concat\r\n   * @public\r\n   * @param {...(Array|Arr|*)} values - Arrays or any other values to concat the array with.\r\n   * @returns {Arr} New instance of Arr.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\r\n   * @description Synonym for\r\n   * [Array#concat]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/concat}.\r\n   */\r\n  concat(...values) {\r\n    const array = toArray(this.$, true);\r\n\r\n    iterator(arguments, (value) => {\r\n      value = new Super(value).$;\r\n\r\n      if (isArrayLike(value) && !isString(value)) {\r\n        iterator(value, (value) => {\r\n          array.push(value);\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      array.push(value);\r\n    });\r\n\r\n    return new this.constructor(array);\r\n  }\r\n\r\n  /**\r\n   * @member Arr#first\r\n   * @type {*}\r\n   * @public\r\n   * @readonly\r\n   * @description Returns the first element of the array.\r\n   *\r\n   * @example\r\n   * new Arr([1, 2, 3]).first; // 1\r\n   * new Arr([]).first;        // undefined\r\n   */\r\n  get first() {\r\n    return this.$[0];\r\n  }\r\n\r\n  /**\r\n   * @method Arr#indexOf\r\n   * @public\r\n   * @param {*} value - Value to search.\r\n   * @returns {Number} Index of the argument.\r\n   * @description Almost the same as {@link Super#keyOf}. The difference is that if the value is not found\r\n   * -1 returned instead of null and if found Number(key) returned.\r\n   *\r\n   * @example\r\n   * new Arr([1, 2, 3]).indexOf(1);       // 0\r\n   * new Arr([1, 2, 3]).indexOf('1');     // 0\r\n   * new Arr([1, 2, 3]).indexOf(3);       // -1\r\n   * new Arr([1, 2, NaN]).indexOf(NaN);   // 2\r\n   */\r\n  indexOf(value) {\r\n    const key = this.keyOf(value);\r\n\r\n    return key === null ? -1 : Number(key);\r\n  }\r\n\r\n  /**\r\n   * @method Arr#indexOfStrict\r\n   * @public\r\n   * @param {*} value - Value to search.\r\n   * @returns {Number} Index of the argument.\r\n   * @description Almost the same as {@link Super#keyOfStrict}. The difference is that if the value is not found\r\n   * -1 returned instead of null and if found Number(key) returned.\r\n   *\r\n   * @example\r\n   * new Arr([1, 2, 3]).indexOfStrict(1);       // 0\r\n   * new Arr([1, 2, 3]).indexOfStrict('1');     // -1\r\n   * new Arr([1, 2, 3]).indexOfStrict(3);       // -1\r\n   * new Arr([1, 2, NaN]).indexOfStrict(NaN);   // 2\r\n   */\r\n  indexOfStrict(value) {\r\n    const key = this.keyOfStrict(value);\r\n\r\n    return key === null ? -1 : Number(key);\r\n  }\r\n\r\n  /**\r\n   * @method Arr#join\r\n   * @public\r\n   * @param {String} [separator = ','] - See the link.\r\n   * @returns {String} - String of joined array.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/join\r\n   * @description Synonym for\r\n   * [Array#join]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/join}.\r\n   */\r\n  join(separator) {\r\n    return this.$.join.apply(this.$, arguments);\r\n  }\r\n\r\n  /**\r\n   * @member Arr#last\r\n   * @type {*}\r\n   * @public\r\n   * @readonly\r\n   * @description The last element of the array.\r\n   *\r\n   * @example\r\n   * new Arr([1, 2, 3]).last; // 3\r\n   * new Arr([]).last;        // undefined\r\n   */\r\n  get last() {\r\n    const array = this.$;\r\n\r\n    return array[array.length - 1];\r\n  }\r\n\r\n  /**\r\n   * @member Arr#length\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/length\r\n   * @description Synonym for\r\n   * [Array#length]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/length}.\r\n   */\r\n  get length() {\r\n    return this.$.length;\r\n  }\r\n\r\n  /**\r\n   * @method Arr#pop\r\n   * @public\r\n   * @returns {*} Returns deleted element.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\r\n   * @description Synonym for\r\n   * [Array#pop]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/pop}.\r\n   */\r\n  pop() {\r\n    return this.$.pop();\r\n  }\r\n\r\n  /**\r\n   * @method Arr#push\r\n   * @public\r\n   * @param {...*} values See the link.\r\n   * @this {Arr}\r\n   * @returns {Arr} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push\r\n   * @description Synonym for\r\n   * [Array#push]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push}\r\n   * besides returning this.\r\n   */\r\n  push(...values) {\r\n    this.$.push.apply(this.$, arguments);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Arr#random\r\n   * @public\r\n   * @returns {*} Random item of the array.\r\n   * @description Method for getting random items of the array.\r\n   *\r\n   * @example\r\n   * new Arr([1, 5, 3]).random(); // 3\r\n   * new Arr([1, 5, 3]).random(); // 5\r\n   */\r\n  random() {\r\n    return this.$[random(0, this.$.length - 1)];\r\n  }\r\n\r\n  /**\r\n   * @method Arr#reverse\r\n   * @public\r\n   * @returns {Arr} A wrap of the reversed array.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\r\n   * @description Synonym for\r\n   * [Array#reverse]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse}.\r\n   */\r\n  reverse() {\r\n    this.$.reverse();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Arr#shift\r\n   * @public\r\n   * @returns {*} Returns deleted element.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\r\n   * @description Synonym for\r\n   * [Array#shift]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/shift}.\r\n   */\r\n  shift() {\r\n    return this.$.shift();\r\n  }\r\n\r\n  /**\r\n   * @method Arr#shuffle\r\n   * @public\r\n   * @returns {Arr} Returns this.\r\n   * @description Method for shuffling.\r\n   *\r\n   * @example\r\n   * new Arr([1, 2, 3, 4]).shuffle().$; // [4, 2, 3, 1]\r\n   * new Arr([1, 2, 3, 4]).shuffle().$; // [1, 3, 4, 2]\r\n   */\r\n  shuffle() {\r\n    const length = this.$.length;\r\n\r\n    return this.forEach((value, index, array) => {\r\n      const randomIndex = index + Math.floor((length - index) * Math.random());\r\n\r\n      array[index] = array[randomIndex];\r\n      array[randomIndex] = value;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Arr#slice\r\n   * @public\r\n   * @param {Number} [begin = 0] - See the link.\r\n   * @param {Number} [end = array.length] - See the link.\r\n   * @returns {Arr} A wrap of a sliced array.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\r\n   * @description Synonym for\r\n   * [Array#slice]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/slice}.\r\n   */\r\n  slice(begin, end) {\r\n    return new this.constructor(this.$.slice.apply(this.$, arguments));\r\n  }\r\n\r\n  /**\r\n   * @method Arr#sort\r\n   * @public\r\n   * @param {CompareFunction} [compareFunction] - See the link.\r\n   * @returns {Arr} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\r\n   * @description Synonym for\r\n   * [Array#sort]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/sort}.\r\n   */\r\n  sort(compareFunction) {\r\n    validate([compareFunction], ['function||!'], 'Arr#sort');\r\n\r\n    this.$.sort(compareFunction);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Arr#sortAsc\r\n   * @public\r\n   * @returns {Arr} Returns this.\r\n   * @description Method for ascending sorting. Puts non-numbers first, then NaNs, then sorted values.\r\n   *\r\n   * @example\r\n   * new Arr([NaN, 1, -7, '100', 5]).sortAsc().$; // ['100', NaN, -7, 1, 5]\r\n   */\r\n  sortAsc() {\r\n    return this.sort(asc);\r\n  }\r\n\r\n  /**\r\n   * @method Arr#sortDesc\r\n   * @public\r\n   * @returns {Arr} Returns this.\r\n   * @description Method for descending sorting. Puts sorted values first, then NaNs, then non-numbers.\r\n   *\r\n   * @example\r\n   * new Arr([NaN, 1, -7, '100', 5]).sortDesc().$; // [5, 1, -7, NaN, '100']\r\n   */\r\n  sortDesc() {\r\n    return this.sort((y, x) => asc(x, y));\r\n  }\r\n\r\n  /**\r\n   * @method Arr#splice\r\n   * @public\r\n   * @param {Number} [start] - See the link.\r\n   * @param {Number} [deleteCount] - See the link.\r\n   * @param {...*} [items] - See the link.\r\n   * @returns {Arr} A wrap of return value of #splice call.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\r\n   * @description Synonym for\r\n   * [Array#splice]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/splice}.\r\n   */\r\n  splice(start, deleteCount, ...items) {\r\n    return new Arr(this.$.splice.apply(this.$, arguments));\r\n  }\r\n\r\n  /**\r\n   * @method Arr#string\r\n   * @public\r\n   * @returns {String} Concatenated array.\r\n   * @description Synonym for array.join('').\r\n   *\r\n   * @example\r\n   * new Arr([1, 2, 3]).string(); // '123'\r\n   */\r\n  string() {\r\n    return this.join('');\r\n  }\r\n\r\n  /**\r\n   * @method Arr#unshift\r\n   * @public\r\n   * @param {...*} [values] - See the link.\r\n   * @returns {Arr} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\r\n   * @description Synonym for\r\n   * [Array#unshift]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift}\r\n   * besides returning this.\r\n   */\r\n  unshift(...values) {\r\n    this.$.unshift.apply(this.$, arguments);\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\ndefineProperties(Arr.prototype, {\r\n  [Symbol.toStringTag]: 'Arr'\r\n});\r\n\r\n/**\r\n * @function asc\r\n * @private\r\n * @param {*} x - First value to be compared.\r\n * @param {*} y - Second value to be compared.\r\n * @returns {Number} Where to put the first element: before or after.\r\n */\r\nfunction asc(x, y) {\r\n  if (!isNumber(x) && !isNumber(y)) {\r\n    return 0;\r\n  }\r\n\r\n  if (!isNumber(x)) {\r\n    return -1;\r\n  }\r\n\r\n  if (!isNumber(y)) {\r\n    return 1;\r\n  }\r\n\r\n  if (isNaN(x) && isNaN(y)) {\r\n    return 0;\r\n  }\r\n\r\n  if (isNaN(x)) {\r\n    return -1;\r\n  }\r\n\r\n  if (isNaN(y)) {\r\n    return 1;\r\n  }\r\n\r\n  return x - y;\r\n}\r\n\r\nconstructors[1].push({\r\n  check: isArrayLike,\r\n  cls: Arr\r\n});\r\n\r\n/**\r\n * @function array\r\n * @public\r\n * @param {Number} number - Length of the array.\r\n * @param {ArrayCallback} [callback] - If it's present it has to be a function\r\n * that returns the element that is pushed to the new array.\r\n * @returns {Arr} New instance of Arr.\r\n * @description Method for creating new array from the length using optional callback.\r\n *\r\n * @example\r\n * array(3).$;               // [0, 1, 2]\r\n * array(3, (i) => i * 2).$; // [0, 2, 4]\r\n */\r\nfunction array(number, callback) {\r\n  validate([number, callback], [['intLike', '>=0'], 'function||!'], 'array');\r\n\r\n  const array = [];\r\n\r\n  for (let i = 0; i < number; i++) {\r\n    array.push(callback ? callback(i) : i);\r\n  }\r\n\r\n  return new Arr(array);\r\n}\r\n\r\n/**\r\n * @function iterate\r\n * @public\r\n * @param {Number} number - Number of iterations.\r\n * @param {IterateCallback} callback - Callback that is called on each iteration with the iteration index.\r\n * @returns {void}\r\n * @description Method for replacing for (...) construction.\r\n *\r\n * @example\r\n * iterate();\r\n */\r\nfunction iterate(number, callback) {\r\n  validate([number, callback], [['intLike', '>=0'], 'function'], 'iterate');\r\n\r\n  for (let i = 0; i < number; i++) {\r\n    callback(i);\r\n  }\r\n}\r\n\r\nexport { Arr, array, iterate };\r\n","/**\r\n * @module BlobObject\r\n * @private\r\n * @mixin\r\n * @description Exports BlobObject class.\r\n */\r\n\r\nimport { Super } from './Super';\r\nimport { Promise } from './Promise';\r\nimport { constructors } from './constants';\r\nimport {\r\n  isArray, isFunction,\r\n  toStringTag, Symbol, defineProperties\r\n} from './helpers';\r\n\r\n/**\r\n * @typedef {{ buffer: String, binary: String, dataURL: String, text: String }} methods\r\n * @private\r\n * @description List of read blob methods.\r\n */\r\nconst methods = {\r\n  buffer: 'ArrayBuffer',\r\n  binary: 'BinaryString',\r\n  dataURL: 'DataURL',\r\n  text: 'Text'\r\n};\r\nconst { URL } = global;\r\n\r\n/**\r\n * @typedef {('buffer'|'binary'|'dataURL'|'text')} ReadBlobMethod\r\n * @public\r\n * @description Enum type of read blob methods.\r\n */\r\n\r\n/**\r\n * @typedef {ArrayBuffer|ArrayBufferView|Blob|String} BlobParts\r\n * @public\r\n * @description Allowed blob parts.\r\n */\r\n\r\n/**\r\n * @callback ReaderEventListener\r\n * @public\r\n * @param {Event} e - Fired event.\r\n * @param {FileReader} reader - FileReader.\r\n */\r\n\r\n/**\r\n * @class BlobObject\r\n * @extends Super\r\n * @public\r\n * @param {Blob} blob - Blob to wrap.\r\n * @returns {BlobObject} Instance of BlobObject.\r\n * @description Wrap of a blob.\r\n *\r\n * @example\r\n * new BlobObject(new Blob(['{\"foo\":\"bar\"}'], { type: 'application/json' }));\r\n */\r\nclass BlobObject extends Super {\r\n  /**\r\n   * @member BlobObject#$\r\n   * @type {Blob}\r\n   * @public\r\n   * @description Original Blob.\r\n   */\r\n\r\n  /**\r\n   * @member {String} BlobObject#dataURL\r\n   * @type {String}\r\n   * @public\r\n   * @readonly\r\n   * @description Returns dataURL representation of the blob.\r\n   */\r\n  get dataURL() {\r\n    return URL.createObjectURL(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method BlobObject#readAs\r\n   * @public\r\n   * @param {ReadBlobMethod} method - Method that is used for reading from blob.\r\n   * @param {ReaderEventListener} [progress] - Progress listener.\r\n   * @returns {Promise} Promise that could be aborted.\r\n   * @description Method for reading from blobs.\r\n   *\r\n   * @example\r\n   * new BlobObject(new Blob(['{\"foo\":\"bar\"}'], { type: 'application/json' }))\r\n   *   .readAs('text')\r\n   *   .then((value) => {\r\n   *     console.log(value); // '{\"foo\":\"bar\"}'\r\n   *   });\r\n   */\r\n  readAs(method, progress) {\r\n    if (!methods[method]) {\r\n      throw new Error('1st argument must be one of following values: buffer, binary, dataURL, text');\r\n    }\r\n\r\n    let reader = new FileReader();\r\n    let toReject;\r\n\r\n    if (isFunction(progress)) {\r\n      reader.onprogress = function (e) {\r\n        progress(e, this);\r\n      };\r\n    }\r\n\r\n    const promise = new Promise((resolve, reject) => {\r\n      toReject = reject;\r\n\r\n      reader.onerror = ({ target }) => {\r\n        if (reader) {\r\n          reject(target.error);\r\n        }\r\n      };\r\n\r\n      reader.onload = ({ target }) => {\r\n        resolve(target.result);\r\n      };\r\n\r\n      reader[`readAs${ methods[method] }`](this.$);\r\n    });\r\n\r\n    promise.abort = function abort() {\r\n      toReject(new Error('Reading was aborted'));\r\n\r\n      reader.abort();\r\n\r\n      reader = null;\r\n\r\n      return this;\r\n    };\r\n\r\n    return promise;\r\n  }\r\n\r\n  /**\r\n   * @method BlobObject#saveAs\r\n   * @public\r\n   * @param {String} [name] - Name that is used for saving file.\r\n   * @returns {BlobObject} Returns this.\r\n   * @description Method for saving blobs.\r\n   *\r\n   * @example\r\n   * new BlobObject(new Blob(['{\"foo\":\"bar\"}'], { type: 'application/json' }))\r\n   *   .saveAs('blob.json');\r\n   */\r\n  saveAs(name = 'download') {\r\n    const anchor = document.createElement('a');\r\n\r\n    anchor.href = this.dataURL;\r\n    anchor.setAttribute('download', name);\r\n    anchor.click();\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\ndefineProperties(BlobObject.prototype, {\r\n  [Symbol.toStringTag]: 'BlobObject'\r\n});\r\n\r\nconstructors[1].push({\r\n  check: (blob) => /^(Blob|File)$/.test(toStringTag(blob)),\r\n  cls: BlobObject\r\n});\r\n\r\n/**\r\n * @function blob\r\n * @public\r\n * @param {(BlobParts[]|BlobParts)} blobParts - Blob parts that are passed to\r\n * [Blob]{@link https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob} constructor.\r\n * @param {Object} [options] - Options that are passed to\r\n * [Blob]{@link https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob} constructor.\r\n * @returns {BlobObject} New instance of BlobObject.\r\n * @description Function for creating blobs not involving BlobObject and Blob constructors.\r\n */\r\nfunction blob(blobParts, options = {}) {\r\n  if (!isArray(blobParts)) {\r\n    blobParts = [blobParts];\r\n  }\r\n\r\n  return new BlobObject(new Blob(blobParts, options));\r\n}\r\n\r\nexport { BlobObject, blob };\r\n","/**\r\n * @module Str\r\n * @private\r\n * @mixin\r\n * @description Exports Str class.\r\n */\r\n\r\nimport { D } from './D';\r\nimport { Super } from './Super';\r\nimport { constructors, regexpSpecialCharacters } from './constants';\r\nimport {\r\n  isFunction, isNumberLike, isObject, isString,\r\n  validate, Symbol, defineProperties, iterate\r\n} from './helpers';\r\n\r\nconst htmlSpecials = {\r\n  '&': '&amp;',\r\n  '<': '&lt;',\r\n  '>': '&gt;'\r\n};\r\nconst regexpSpecialsRegexp = new RegExp(\r\n  new Super(regexpSpecialCharacters)\r\n    .word((x) => `\\\\${ x }|`)\r\n    .replace(/\\|$/, ''),\r\n  'g'\r\n);\r\n\r\n/**\r\n * @class Str\r\n * @extends Super\r\n * @public\r\n * @param {String} [string = ''] - A string to wrap.\r\n * @returns {Str} Instance of Str.\r\n * @description Wrap of a string.\r\n *\r\n * @example\r\n * const s = new Num('1');\r\n */\r\nclass Str extends Super {\r\n  constructor(string = '') {\r\n    super(`${ string }`);\r\n\r\n    /**\r\n     * @member Str#$\r\n     * @type {String}\r\n     * @public\r\n     * @description Original string.\r\n     */\r\n  }\r\n\r\n  /**\r\n   * @method Str#capitalizeFirst\r\n   * @public\r\n   * @returns {Str} Capitalized string.\r\n   * @description Method capitalizing the first symbol.\r\n   *\r\n   * @example\r\n   * new Str('foo').capitalizeFirst().$; // 'Foo'\r\n   */\r\n  capitalizeFirst() {\r\n    const string = this.$;\r\n\r\n    return new Str(string.slice(0, 1).toUpperCase() + string.slice(1));\r\n  }\r\n\r\n  /**\r\n   * @method Str#endsWith\r\n   * @public\r\n   * @param {String} searchString - See the link.\r\n   * @param {Number} [position = string.length] - See the link.\r\n   * @returns {Boolean} If the string ends with the argument string.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\r\n   * @description Synonym for\r\n   * [String#endsWith]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith}.\r\n   */\r\n  endsWith(searchString, position) {\r\n    if (arguments.length < 2) {\r\n      position = this.$.length;\r\n    }\r\n\r\n    return this\r\n      .slice(0, position)\r\n      .revert()\r\n      .startsWith(new Str(searchString).revert().$);\r\n  }\r\n\r\n  /**\r\n   * @method Str#escapeHTML\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Methods escaping \"&\", \"<\" and \">\" symbols.\r\n   *\r\n   * @example\r\n   * new Str('\"1 < 2\" & \"7 > 4\" are true expressions.').escapeHTML().$;\r\n   * // '\"1 &lt; 2\" &amp \"7 &gt; 2\" are true expressions.'\r\n   */\r\n  escapeHTML() {\r\n    let string = this.$;\r\n\r\n    iterate(htmlSpecials, (escaped, symbol) => {\r\n      string = string.replace(new RegExp(symbol, 'g'), escaped);\r\n    });\r\n\r\n    return new Str(string);\r\n  }\r\n\r\n  /**\r\n   * @method Str#escapeRegExp\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Method escaping RegExp special characters.\r\n   *\r\n   * @example\r\n   * new Str('(213.98 - [] {})').escapeRegExp().$; // '\\(213\\.98 \\- \\[\\] \\{\\}\\)'\r\n   */\r\n  escapeRegExp() {\r\n    return this.replace(regexpSpecialsRegexp, '\\\\$&');\r\n  }\r\n\r\n  /**\r\n   * @method Str#in\r\n   * @public\r\n   * @param {*} object - Object to check the string as a property in.\r\n   * @returns {Boolean} If it is in the object or not.\r\n   * @description Returns string in object.\r\n   *\r\n   * @example\r\n   * new Str('a').in({ a: 1 }); // true\r\n   * new Str('toFixed').in(1);  // false\r\n   * new Str('a').in(null);     // false\r\n   */\r\n  in(object) {\r\n    if (!isObject(object)) {\r\n      return false;\r\n    }\r\n\r\n    return this.$ in object;\r\n  }\r\n\r\n  /**\r\n   * @method Str#indexOf\r\n   * @public\r\n   * @param {String} searchValue - See the link.\r\n   * @param {Number} [fromIndex = 0] - See the link.\r\n   * @returns {Number} Found index or -1.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\r\n   * @description Synonym for\r\n   * [String#indexOf]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf}.\r\n   */\r\n  indexOf(searchValue, fromIndex) {\r\n    return this.$.indexOf.apply(this.$, arguments);\r\n  }\r\n\r\n  /**\r\n   * @method Str#lastIndexOf\r\n   * @public\r\n   * @param {String} searchValue - See the link.\r\n   * @param {Number} [fromIndex = string.length] - See the link.\r\n   * @returns {Number} Found index or -1.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf\r\n   * @description Synonym for\r\n   * [String#lastIndexOf]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf}.\r\n   */\r\n  lastIndexOf(searchValue, fromIndex) {\r\n    return this.$.lastIndexOf.apply(this.$, arguments);\r\n  }\r\n\r\n  /**\r\n   * @member Str#length\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/length\r\n   * @description Synonym for\r\n   * [String#length]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/length}.\r\n   */\r\n  get length() {\r\n    return this.$.length;\r\n  }\r\n\r\n  /**\r\n   * @method Str#match\r\n   * @public\r\n   * @returns {Arr|Super} D-Wrap of found match.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/match\r\n   * @description Synonym for\r\n   * [String#match]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/match}.\r\n   */\r\n  match(regexp) {\r\n    return D(this.$.match.apply(this.$, arguments));\r\n  }\r\n\r\n  /**\r\n   * @method Str#repeat\r\n   * @public\r\n   * @param {Integer} times - Times to repeat the string.\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\r\n   * @description Synonym for\r\n   * [String#repeat]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/repeat}.\r\n   *\r\n   * @example\r\n   * new Str('123').repeat(2).$; // '123123'\r\n   * new Str('123').repeat(0).$; // ''\r\n   */\r\n  repeat(times) {\r\n    validate([times], [['intLike', '>=0']], 'Str#repeat');\r\n\r\n    times = +times;\r\n\r\n    const string = this.$;\r\n\r\n    let s = '';\r\n\r\n    for (let i = 0; i < times; i++) {\r\n      s += string;\r\n    }\r\n\r\n    return new Str(s);\r\n  }\r\n\r\n  /**\r\n   * @method Str#replace\r\n   * @public\r\n   * @param {RegExp|String} regexp - See the link.\r\n   * @param {String|Function} [replacer = ''] - See the link.\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/replace\r\n   * @description Synonym for\r\n   * [String#replace]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/replace}\r\n   * besides that replacer has a default value of ''.\r\n   */\r\n  replace(regexp, replacer = '') {\r\n    return new Str(this.$.replace(regexp, replacer));\r\n  }\r\n\r\n  /**\r\n   * @method Str#replaceString\r\n   * @public\r\n   * @param {String} string - String to replace.\r\n   * @param {String} [replacer = ''] - String to replace with.\r\n   * @returns {Str} New instance of Str.\r\n   * @description Method for global string replaceing.\r\n   *\r\n   * @example\r\n   * new Str('123123').replaceString('1', '4').$; // '423423'\r\n   * new Str('123123').replaceString('1').$;      // '2323'\r\n   */\r\n  replaceString(string, replacer = '') {\r\n    string = new Super(string).$;\r\n\r\n    validate([string], ['string'], 'Str#replaceString');\r\n\r\n    return new Str(this.$.split(string).join(replacer));\r\n  }\r\n\r\n  /**\r\n   * @method Str#revert\r\n   * @public\r\n   * @returns {Str} New instance of string.\r\n   * @description Method for reverting a string.\r\n   *\r\n   * @example\r\n   * new Str('1234').revert().$; // '4321'\r\n   */\r\n  revert() {\r\n    const string = this.$;\r\n    let str = '';\r\n\r\n    for (let i = string.length - 1; i >= 0; i--) {\r\n      str += string[i];\r\n    }\r\n\r\n    return new Str(str);\r\n  }\r\n\r\n  /**\r\n   * @method Str#search\r\n   * @public\r\n   * @param {RegExp} regexp - See the link.\r\n   * @returns {Number} Index of the first match, if found, and -1 if not.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/search\r\n   * @description Synonym for\r\n   * [String#search]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/search}.\r\n   */\r\n  search(regexp) {\r\n    validate([regexp], ['regexp']);\r\n\r\n    return this.$.search.apply(this.$, arguments);\r\n  }\r\n\r\n  /**\r\n   * @method Str#slice\r\n   * @public\r\n   * @param {Number} [beginSlice = 0] - See the link.\r\n   * @param {Number} [endSlice = string.length] - See the link.\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/slice\r\n   * @description Synonym for\r\n   * [String#slice]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/slice}.\r\n   */\r\n  slice(beginSlice, endSlice) {\r\n    return new Str(this.$.slice.apply(this.$, arguments));\r\n  }\r\n\r\n  /**\r\n   * @method Str#split\r\n   * @public\r\n   * @param {RegExp|String} [separator] - See the link.\r\n   * @returns {Arr|Super} D-Wrap of the array.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/split\r\n   * @description Synonym for\r\n   * [String#split]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/split}.\r\n   */\r\n  split(separator) {\r\n    return D(this.$.split.apply(this.$, arguments));\r\n  }\r\n\r\n  /**\r\n   * @method Str#startsWith\r\n   * @public\r\n   * @param {String} searchString - See the link.\r\n   * @param {Number} [position = 0] - See the link.\r\n   * @returns {Boolean} If the string ends with the argument string.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\r\n   * @description Synonym for\r\n   * [String#startsWith]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith}.\r\n   */\r\n  startsWith(searchString, position = 0) {\r\n    return this.$.indexOf.apply(this.$, arguments) === position;\r\n  }\r\n\r\n  /**\r\n   * @method Str#substr\r\n   * @public\r\n   * @param {Number} [start = 0] - See the link.\r\n   * @param {Number} [length = string.length] - See the link.\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/substr\r\n   * @description Synonym for\r\n   * [String#substr]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/substr}.\r\n   */\r\n  substr(start, length) {\r\n    return new Str(this.$.substr.apply(this.$, arguments));\r\n  }\r\n\r\n  /**\r\n   * @method Str#substring\r\n   * @public\r\n   * @param {Number} [indexStart = 0] - See the link.\r\n   * @param {Number} [indexEnd = string.length] - See the link.\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/substring\r\n   * @description Synonym for\r\n   * [String#substring]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/substring}.\r\n   */\r\n  substring(indexStart, indexEnd) {\r\n    return new Str(this.$.substring.apply(this.$, arguments));\r\n  }\r\n\r\n  /**\r\n   * @method Str#toCamelCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Removes following regexp /\\s\\-_\\./ making the string camel cased.\r\n   *\r\n   * @example\r\n   * new Str('spinal-case').toCamelCase().$;  // 'spinalCase'\r\n   * new Str('_snake_case_').toCamelCase().$; // 'snakeCase'\r\n   */\r\n  toCamelCase() {\r\n    return new Str(trim(this.$)\r\n      .replace(/[\\s\\-_.]+/g, '-')\r\n      .replace(/-[^-]/g, (match) => match[1].toUpperCase())\r\n      .replace(/^[\\S]/, (match) => match.toLowerCase())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @method Str#toCapitalCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Removes following regexp /\\-_\\./ making the string capital letter cased.\r\n   *\r\n   * @example\r\n   * new Str('spinal-case').toCapitalCase().$;  // 'Spinal Case'\r\n   * new Str('_snake_case_').toCapitalCase().$; // 'Snake Case'\r\n   */\r\n  toCapitalCase() {\r\n    return new Str(trim(this.$)\r\n      .replace(/[\\s\\-_.]+/g, ' ')\r\n      .replace(/[\\S]/g, (match) => (\r\n        match.toLowerCase() === match ? match : ` ${ match }`\r\n      ))\r\n      .replace(/\\s[\\S]/g, (match) => match.toUpperCase())\r\n      .replace(/\\s+/g, ' ')\r\n      .replace(/^\\s/, '')\r\n      .replace(/^[\\S]/, (match) => match.toUpperCase())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @method Str#toDotCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Removes following regexp /\\-_\\./ making the string dot cased.\r\n   *\r\n   * @example\r\n   * new Str('spinal-case').toDotCase().$;  // 'spinal.case'\r\n   * new Str('_snake_case_').toDotCase().$; // 'snake.case'\r\n   */\r\n  toDotCase() {\r\n    return new Str(trim(this.$)\r\n      .replace(/[\\s\\-_.]+/g, '.')\r\n      .replace(/[^.]/g, (match) => (\r\n        match.toLowerCase() === match ? match : `.${ match }`\r\n      ))\r\n      .replace(/\\.+/g, '.')\r\n      .replace(/^\\./, '')\r\n      .toLowerCase()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @method Str#toHyphenCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Removes following regexp /\\s\\-_\\./ making the string camel cased.\r\n   *\r\n   * @example\r\n   * new Str('camelCase').toSpinalCase().$;    // 'camel-case'\r\n   * new Str('_snake_case_').toSpinalCase().$; // 'snake-case'\r\n   */\r\n  toHyphenCase() {\r\n    return new Str(trim(this.$)\r\n      .replace(/[\\s\\-_.]+/g, '-')\r\n      .replace(/[^-]/g, (match) => (\r\n        match.toLowerCase() === match ? match : `-${ match }`\r\n      ))\r\n      .replace(/-+/g, '-')\r\n      .replace(/^-/, '')\r\n      .toLowerCase()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @method Str#toLowerCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase\r\n   * @description Synonym for\r\n   * [String#toLowerCase]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase}.\r\n   *\r\n   * @example\r\n   * new Str('UPPER-CASE').toLowerCase().$;  // 'upper-case'\r\n   */\r\n  toLowerCase() {\r\n    return new Str(this.$.toLowerCase());\r\n  }\r\n\r\n  /**\r\n   * @method Str#toSnakeCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Removes following regexp /\\s\\-\\./ making the string spinal cased.\r\n   *\r\n   * @example\r\n   * new Str('spinal-case').toSnakeCase().$; // 'spinal_case'\r\n   * new Str('camelCase').toSnakeCase().$;   // 'camel_case'\r\n   */\r\n  toSnakeCase() {\r\n    return new Str(trim(this.$)\r\n      .replace(/[\\s\\-_.]+/g, '_')\r\n      .replace(/[^_]/g, (match) => (\r\n        match.toLowerCase() === match ? match : `_${ match }`\r\n      ))\r\n      .replace(/_+/g, '_')\r\n      .replace(/^_/, '')\r\n      .toLowerCase()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @method Str#toSpaceCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Removes following regexp /\\-_\\./ making the string space cased.\r\n   *\r\n   * @example\r\n   * new Str('spinal-case').toSpaceCase().$;  // 'spinal case'\r\n   * new Str('_snake_case_').toSpaceCase().$; // 'snake case'\r\n   */\r\n  toSpaceCase() {\r\n    return new Str(trim(this.$)\r\n      .replace(/[\\s\\-_.]+/g, ' ')\r\n      .replace(/[\\S]/g, (match) => (\r\n        match.toLowerCase() === match ? match : ` ${ match }`\r\n      ))\r\n      .replace(/\\s+/g, ' ')\r\n      .replace(/^\\s/, '')\r\n      .toLowerCase()\r\n    );\r\n  }\r\n\r\n  toString() {\r\n    return this.$;\r\n  }\r\n\r\n  /**\r\n   * @method Str#toUpperCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\r\n   * @description Synonym for\r\n   * [String#toUpperCase]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase}.\r\n   *\r\n   * @example\r\n   * new Str('lower-case').toUpperCase().$;  // 'LOWER-CASE'\r\n   */\r\n  toUpperCase() {\r\n    return new Str(this.$.toUpperCase());\r\n  }\r\n\r\n  /**\r\n   * @method Str#trim\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trim\r\n   * @description Synonym for\r\n   * [String#trim]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trim}.\r\n   */\r\n  trim() {\r\n    return new Str(this.$.replace(/^[\\s\\ufeff\\u00a0]+|[\\s\\ufeff\\u00a0]+$/g, ''));\r\n  }\r\n\r\n  /**\r\n   * @method Str#trimLeft\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trimLeft\r\n   * @description Synonym for\r\n   * [String#trimLeft]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trimLeft}.\r\n   */\r\n  trimLeft() {\r\n    return new Str(this.$.replace(/^[\\s\\ufeff\\u00a0]+/, ''));\r\n  }\r\n\r\n  /**\r\n   * @method Str#trimRight\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trimRight\r\n   * @description Synonym for\r\n   * [String#trimRight]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trimRight}.\r\n   */\r\n  trimRight() {\r\n    return new Str(this.$.replace(/[\\s\\ufeff\\u00a0]+$/, ''));\r\n  }\r\n}\r\n\r\ndefineProperties(Str.prototype, {\r\n  [Symbol.toStringTag]: 'Str'\r\n});\r\n\r\nconstructors[2].push({\r\n  check: isString,\r\n  cls: Str\r\n});\r\n\r\nfunction trim(string) {\r\n  return string.replace(/^[\\s\\-_.]+|[\\s\\-_.]+$/g, '');\r\n}\r\n\r\n/**\r\n * @function parseJSON\r\n * @public\r\n * @param {String} [json = null] - String to parse.\r\n * @param {Object} [options] - Options.\r\n * @param {Boolean|*} [options.numbers] - If it is needed to parse number-like strings as numbers.\r\n * @param {Boolean|*} [options.dates] - If it is needed to parse date-like string as dates.\r\n * Date-like string is considered to match ^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\\dZ?$\r\n * @param {JSONCallback} [callback] - Callback that called on every iteration.\r\n * @returns {DWrap} D-Wrap of found match.\r\n * @description Method for parsing json.\r\n *\r\n * @example\r\n * parseJSON('{ \"a\": 1 }').$;                                           // { a: 1 }\r\n * parseJSON('{ \"a\": \"1\" }', { numbers: true }).$;                      // { numbers: true }\r\n * parseJSON('{ \"a\": \"1999-12-31T23:59:59.999Z\" }', { dates: true }).$; // { a: Date {...} }\r\n */\r\nfunction parseJSON(json = null, options = {}, callback) {\r\n  if (arguments.length <= 1) {\r\n    return D(JSON.parse(json));\r\n  }\r\n\r\n  if (isFunction(options)) {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n\r\n  const { numbers, dates } = options;\r\n  const parsed = JSON.parse(json, function (key, value) {\r\n    if (dates && /^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\\dZ?$/.test(value)) {\r\n      value = new Date(value);\r\n    } else if (numbers && isNumberLike(value) && isString(value)) {\r\n      value = Number(value);\r\n    }\r\n\r\n    return callback ? callback.apply(this, arguments) : value;\r\n  });\r\n\r\n  return D(parsed);\r\n}\r\n\r\nexport { Str, parseJSON };\r\n","/**\r\n * @module helpers/markupToJSON\r\n * @private\r\n * @description Exports markupToJSON method.\r\n */\r\n\r\nimport { Arr } from '../Arr';\r\nimport { Str } from '../Str';\r\nimport { Super } from '../Super';\r\nimport { switcher } from '../Switcher';\r\nimport { htmlAllowedTagSymbols, htmlAllowedAttrSymbols, voidElements } from '../constants';\r\n\r\n/**\r\n * @typedef {Object} MarkupElement\r\n * @property {'comment'|'text'|'element'} type - Type of the node.\r\n * @property {MarkupElement} parent - Type of the node.\r\n * @property {Object.<String, String>} attrs - Node attributes\r\n * @property {MarkupElement[]} children - Node children.\r\n */\r\n\r\nconst submitString = 'Please, submit an issue at https://github.com/dwaynejs/dwayne/issues.';\r\nconst NODE_REGEX_SET = new Super({\r\n  'tag-open': new RegExp(`<(${ htmlAllowedTagSymbols })\\\\s*`, 'i'),\r\n  'tag-close': constructCloseTagRegExp(htmlAllowedTagSymbols),\r\n  comment: /<!--((?:-[^\\->]|[^\\->])(?:-?[^-])*[^-]?|)-->/\r\n});\r\nconst TAG_OPEN_CLOSE = /^(\\/?)>/;\r\n// const ATTRIBUTE = /^([^\\u0000-\\u0020\\s\"'>\\/=]+)(?:\\s*=\\s*('[^']*'|\"[^\"]*\"|[^\\s\"'`<>=]+))?\\s*/;\r\nconst ATTRIBUTE = new RegExp(`^(${ htmlAllowedAttrSymbols })(?:\\\\s*=\\\\s*('[^']*'|\"[^\"]*\"|[^\\\\s\"'\\`<>=]+))?\\\\s*`);\r\nconst div = document.createElement('div');\r\nconst nodeSwitcher = switcher('strictEquals', (elem) => elem)\r\n  .case('tag-open', (elem, node) => {\r\n    const {\r\n      value: name,\r\n      selfClosing\r\n    } = node;\r\n\r\n    node = {\r\n      name,\r\n      attrs: new Super(node.attrs).map((value) => (\r\n        parseCharacterData(value)\r\n      )).$,\r\n      parent: elem,\r\n      children: new Arr([])\r\n    };\r\n\r\n    elem.children.push(node);\r\n\r\n    if (!selfClosing && voidElements.indexOf(name) === -1) {\r\n      elem = node;\r\n    }\r\n\r\n    return elem;\r\n  })\r\n  .case('tag-close', (elem, node) => {\r\n    if (elem.name === node.value) {\r\n      elem = elem.parent;\r\n    }\r\n\r\n    return elem;\r\n  })\r\n  .case(['comment', 'text'], (elem, node, collapseWhiteSpace, type) => {\r\n    const element = {\r\n      name: `#${ type }`,\r\n      parent: elem,\r\n      value: node.value\r\n    };\r\n\r\n    if (type === 'text' && elem.name !== 'script' && elem.name !== 'style') {\r\n      element.value = parseCharacterData(element.value);\r\n\r\n      if (collapseWhiteSpace) {\r\n        element.value = new Str(element.value).trim().$;\r\n      }\r\n    }\r\n\r\n    if (!collapseWhiteSpace || !/^\\s*$/.test(element.value)) {\r\n      elem.children.push(element);\r\n    }\r\n\r\n    return elem;\r\n  });\r\nconst rawTextSwitcher = switcher('strictEquals', false)\r\n  .case(['title', 'textarea', 'style', 'script'], true);\r\n\r\nclass InternalParsingError {\r\n  constructor(index) {\r\n    this.index = index;\r\n  }\r\n}\r\n\r\nclass ParsingError extends Error {\r\n  type = 'PARSING_ERROR';\r\n}\r\n\r\n/**\r\n * @function markupToJSON\r\n * @private\r\n * @param {String} markup - Markup to parse to JSON.\r\n * @param {Boolean} [collapseWhiteSpace = false] - If the whitespace should be collapsed.\r\n * @returns {Arr.<MarkupElement>} Markup elements array.\r\n * @description Function for parsing html and xml to JSON.\r\n */\r\nexport default (markup, collapseWhiteSpace) => {\r\n  collapseWhiteSpace = !!collapseWhiteSpace;\r\n\r\n  const elements = new Arr([]);\r\n  const startMarkup = markup;\r\n  let found;\r\n  let globalIndex = 0;\r\n  let elem = {\r\n    name: null,\r\n    children: elements\r\n  };\r\n\r\n  while (markup.length) {\r\n    try {\r\n      found = find(markup, elem);\r\n    } catch (err) {\r\n      if (!(err instanceof InternalParsingError)) {\r\n        throwUnexpectedError();\r\n      }\r\n\r\n      throw new ParsingError(`Parsing error near index ${ nearString(startMarkup, globalIndex + err.index) }`);\r\n    }\r\n\r\n    const {\r\n      type,\r\n      attrs,\r\n      selfClosing,\r\n      index,\r\n      value\r\n    } = found;\r\n\r\n    globalIndex += index;\r\n\r\n    if (!index) {\r\n      throwUnexpectedError();\r\n    }\r\n\r\n    const node = {\r\n      type,\r\n      value\r\n    };\r\n\r\n    if (type === 'tag-open') {\r\n      node.attrs = attrs;\r\n      node.selfClosing = selfClosing;\r\n    }\r\n\r\n    elem = nodeSwitcher(node.type, [elem, node, collapseWhiteSpace]);\r\n\r\n    markup = markup.slice(index);\r\n  }\r\n\r\n  return elements;\r\n\r\n  function throwUnexpectedError() {\r\n    throw new ParsingError(`Unexpected parsing error near index ${ nearString(startMarkup, globalIndex) }. ${ submitString }`);\r\n  }\r\n};\r\n\r\nfunction find(markup, elem) {\r\n  const { name } = elem;\r\n  let matches;\r\n\r\n  if (rawTextSwitcher(name)) {\r\n    matches = new Super({\r\n      'tag-close': markup.match(constructCloseTagRegExp(name))\r\n    });\r\n  } else {\r\n    matches = NODE_REGEX_SET.map((regex) => (\r\n      markup.match(regex)\r\n    ));\r\n  }\r\n\r\n  let match;\r\n\r\n  if (\r\n    match = matches.find((match) => (\r\n      match && match.index === 0\r\n    ))\r\n  ) {\r\n    const returning = {\r\n      type: match.key,\r\n      index: match.value[0].length,\r\n      value: match.value[1]\r\n    };\r\n    const attrs = {};\r\n\r\n    if (match.key === 'tag-open') {\r\n      const startMarkup = markup;\r\n      let closeMatch;\r\n\r\n      returning.selfClosing = false;\r\n      returning.attrs = attrs;\r\n\r\n      while (\r\n        (markup = startMarkup.slice(returning.index)) &&\r\n        !(closeMatch = markup.match(TAG_OPEN_CLOSE))\r\n      ) {\r\n        const attr = markup.match(ATTRIBUTE);\r\n\r\n        if (!attr) {\r\n          returning.index += 1;\r\n\r\n          continue;\r\n        }\r\n\r\n        attrs[attr[1]] = (attr[2] || '').replace(/^(\"|')|(\"|')$/g, '');\r\n        returning.index += attr[0].length;\r\n      }\r\n\r\n      if (closeMatch) {\r\n        returning.index += closeMatch[0].length;\r\n        returning.selfClosing = !!closeMatch[1];\r\n      }\r\n    }\r\n\r\n    return returning;\r\n  }\r\n\r\n  let { value: index } = matches.min((match) => (\r\n    match ? match.index : NaN\r\n  ));\r\n\r\n  if (index === Infinity) {\r\n    index = markup.length;\r\n  }\r\n\r\n  return {\r\n    type: 'text',\r\n    index,\r\n    value: markup.slice(0, index)\r\n  };\r\n}\r\n\r\nfunction constructCloseTagRegExp(tagName) {\r\n  return new RegExp(`</(${ tagName })\\\\s*>`, 'i');\r\n}\r\n\r\nfunction nearString(markup, index) {\r\n  return `${ index } (~~~ \"${ markup.slice(index, index + 15) }\" ~~~, the string itself is \"${ markup }\")`;\r\n}\r\n\r\nfunction parseCharacterData(string) {\r\n  return string.replace(/&(\\w+|#x?\\d+);/g, (match) => {\r\n    div.innerHTML = match;\r\n\r\n    return div.textContent || div.innerText;\r\n  });\r\n}\r\n","/**\r\n * @module Elem\r\n * @private\r\n * @mixin\r\n * @description Exports Elem class.\r\n */\r\n\r\nimport { Super } from './Super';\r\nimport { Arr, array, iterate as times } from './Arr';\r\nimport { blob } from './BlobObject';\r\nimport { method } from './Func';\r\nimport { Promise } from './Promise';\r\nimport { Str } from './Str';\r\nimport { switcher } from './Switcher';\r\nimport {\r\n  constructors, appliedRegExps, htmlElements, svgElements,\r\n  canvasGetMethods, canvasRestMethods\r\n} from './constants';\r\nimport {\r\n  isArray, isArrayLike, isElement, isFunction,\r\n  isInteger, isNil, isNumber, isNull, isString,\r\n  assign, dynamicDefineProperties, defineProperties, toArray,\r\n  validate, toStringTag, iterate, Symbol\r\n} from './helpers';\r\nimport markupToJSON from './helpers/markupToJSON';\r\n\r\n/**\r\n * @typedef {String} ElemEventString\r\n * @public\r\n * @description A string containing events separated by a comma with zero or more spaces or just spaces.\r\n */\r\n\r\n/**\r\n * @callback ElemValueCallback\r\n * @public\r\n * @param {String} value - Old value.\r\n * @param {Elem} elem - Current element.\r\n * @param {Number} index - Index in the set of the elements.\r\n */\r\n\r\n/**\r\n * @callback ElemSetOfCallback\r\n * @public\r\n * @param {Element} created - Created element.\r\n * @param {*} value - Value of the iterated element in the object.\r\n * @param {Key} key - Key of the iterated element in the object.\r\n * @param {*} object - Object that is iterated over.\r\n * @param {Element} elem - Current element.\r\n * @param {Number} index - Index of the current element.\r\n */\r\n\r\n/**\r\n * @callback ValidateCallback\r\n * @public\r\n * @param {*} value - Element value.\r\n * @param {Element} elem - Element to validate.\r\n * @param {Number} index - Index of the element.\r\n */\r\n\r\n/**\r\n * @callback CtxCallback\r\n * @public\r\n * @param {CanvasRenderingContext2D} ctx - Canvas rendering context.\r\n */\r\n\r\n/**\r\n * @callback ElemListener\r\n * @public\r\n * @param {Event} e - Fired event.\r\n * @param {Element} elem - Element on which the listener was called.\r\n * @param {Number} index - Index of the element on which the listener was called.\r\n */\r\n\r\n/**\r\n * @callback ElemRemoveListeners\r\n * @public\r\n * @param {...ElemEventString} events - If at least one argument present only removes event listeners specified\r\n * by the events in the arguments.\r\n */\r\n\r\nconst nativeDocument = global.document;\r\nconst emptyDiv = nativeDocument.createElement('div');\r\nconst eventSeparator = /(,| ) */;\r\nconst textProperty = new Super(Node.prototype).propertyDescriptor('textContent') ? 'textContent' : 'innerText';\r\nconst classes = {};\r\nconst attrs = {};\r\nconst windowsDwayneData = new Arr([]);\r\nconst inputElements = 'input, select, textarea, datalist, keygen, output';\r\nconst click = method('click');\r\nconst svgNS = 'http://www.w3.org/2000/svg';\r\nconst xmlNS = 'http://www.w3.org/2000/xmlns/';\r\nconst xlinkNS = 'http://www.w3.org/1999/xlink';\r\nconst xhtmlNS = 'http://www.w3.org/1999/xhtml';\r\nconst typeSwitcher = switcher('call', (elem, type) => {\r\n  const ns = type === 'svg'\r\n    ? svgNS\r\n    : elem.prop('namespaceURI') || nativeDocument.documentElement.namespaceURI || xhtmlNS;\r\n\r\n  return nativeDocument.createElementNS(ns, type);\r\n})\r\n  .case(\r\n    (type) => type === '#comment',\r\n    () => nativeDocument.createComment('')\r\n  )\r\n  .case(\r\n    (type) => type === '#text',\r\n    () => nativeDocument.createTextNode('')\r\n  );\r\nconst refSwitcher = switcher('strictEquals', 'href')\r\n  .case(\r\n    ['img', 'script', 'iframe', 'audio', 'video'],\r\n    'src'\r\n  )\r\n  .case(\r\n    'form',\r\n    'action'\r\n  );\r\nconst filterSwitcher = switcher('call', (selector) => selector)\r\n  .case(\r\n    isString,\r\n    (selector) => (\r\n      (elem) => new Elem(elem).is(selector)\r\n    )\r\n  )\r\n  .case(\r\n    [isArray, isElem],\r\n    (elems) => {\r\n      elems = new Arr(elems);\r\n\r\n      return (elem) => elems.indexOf(elem) !== -1;\r\n    }\r\n  );\r\nconst innerSwitcher = switcher('strictEquals', 0)\r\n  .case('padding-box', (paddings) => paddings)\r\n  .case('border-box', (paddings, borders) => paddings + borders);\r\nconst outerSwitcher = switcher('strictEquals', (borders, paddings) => borders + paddings)\r\n  .case('padding-box', (borders) => borders)\r\n  .case('border-box', 0);\r\nconst attrNSSwitcher = switcher('call', null)\r\n  .case((attr) => attr === 'xmlns' || attr === 'xmlns:xlink', (elem) => (\r\n    elem.name === 'svg'\r\n      ? xmlNS\r\n      : null\r\n  ))\r\n  .case((attr) => /^xlink:\\w/.test(attr), (elem) => (\r\n    elem.closest('svg').length\r\n      ? xlinkNS\r\n      : null\r\n  ));\r\n\r\n/**\r\n * @class Elem\r\n * @extends Arr\r\n * @public\r\n * @param {Element|Element[]} [elem = []] - An element or an array of elements to wrap.\r\n * @returns {Elem} Instance of Elem.\r\n * @description Wrap of an elements set. Also has all methods from from\r\n * [CanvasRenderingContext2D]{@link https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D}.\r\n * Getters methods return the same as methods from CanvasRenderingContext2D and the rest return this.\r\n * Work for the first canvas element in the set.\r\n *\r\n * @example\r\n * new Elem(document.body);\r\n * new Elem(document.querySelectorAll('.cls'));\r\n * new Elem(document.getElementsByClassName('cls'));\r\n */\r\nclass Elem extends Arr {\r\n  constructor(elem = []) {\r\n    super((() => {\r\n      let element = elem;\r\n\r\n      if (isArrayLike(element) && (\r\n        isWindow(element) ||\r\n        isHTMLDocument(element) ||\r\n        isDocumentFragment(element) ||\r\n        isElement(element) ||\r\n        isCommentOrText(element) ||\r\n        isStyleRule(element)\r\n      )) {\r\n        element = [element];\r\n      }\r\n\r\n      return new Arr(toArray(new Super(element).$, true)).object((elems, elem) => {\r\n        if (elems.indexOf(elem) === -1 && (\r\n          isElement(elem) ||\r\n          isWindow(elem) ||\r\n          isHTMLDocument(elem) ||\r\n          isDocumentFragment(elem) ||\r\n          isCommentOrText(elem) ||\r\n          isStyleRule(elem)\r\n        )) {\r\n          return elems.push(elem);\r\n        }\r\n\r\n        if (isElem(elem)) {\r\n          elems.push.apply(elems, elem.$);\r\n        }\r\n      }, []).$;\r\n    })());\r\n\r\n    this.$$ = elem;\r\n\r\n    this.forEach(addDwayneData);\r\n\r\n    /**\r\n     * @member {Array.<Node|Window>} Elem#$\r\n     * @type {Array.<Node|Window>}\r\n     * @public\r\n     * @description Constructed element set.\r\n     */\r\n\r\n    /**\r\n     * @member {*} Elem#$$\r\n     * @type {*}\r\n     * @public\r\n     * @description Initial element set.\r\n     */\r\n  }\r\n\r\n  /**\r\n   * @method Elem#add\r\n   * @public\r\n   * @param {...(String|Elem|Element|Element[])} elements - Each argument is a selector, or Elem, or Element, or array of Elements.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for adding new elements to the set.\r\n   *\r\n   * @example\r\n   * elem1.find('.cls1')\r\n   *   .add(elem2.find('.cls2'))\r\n   *   .hide();\r\n   */\r\n  add(...elements) {\r\n    iterate(arguments, (elem) => {\r\n      toFind(elem).forEach((elem) => {\r\n        if (this.indexOf(elem) === -1) {\r\n          this.push(elem);\r\n        }\r\n      });\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#addClass\r\n   * @public\r\n   * @param {...String} classes - Classes to add.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for adding classes to the all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.addClass('red', 'round');\r\n   */\r\n  addClass(...classes) {\r\n    return this.forEach((elem) => {\r\n      const list = elem.classList;\r\n\r\n      iterate(isElement(elem) && arguments, (cls) => list.add(cls));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#addComment\r\n   * @public\r\n   * @param {String} text - Text of comment to add.\r\n   * @param {Boolean} end - If the comment should be inserted to the end. If false it's inserted to the start.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for adding comment to all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.addHTML('<div>1</div>');\r\n   */\r\n  addComment(text, end = true) {\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.insertAdjacentHTML(end ? 'beforeend' : 'afterbegin', `<!--${ text }-->`);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#addHTML\r\n   * @public\r\n   * @param {String} html - HTML to add.\r\n   * @param {Boolean} end - If the HTML should be inserted to the end. If false it's inserted to the start.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for adding HTML to all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.addHTML('<div>1</div>');\r\n   */\r\n  addHTML(html, end = true) {\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.insertAdjacentHTML(end ? 'beforeend' : 'afterbegin', html);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#addRule\r\n   * @public\r\n   * @param {String} name - Name of the rule.\r\n   * @param {String} selector - Selector for the rule\r\n   * @param {Object.<String, String>} style - Style for the selector.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for adding css styles into the first style tag in the set.\r\n   * Note: style element should be inside the document.\r\n   *\r\n   * @example\r\n   * style.addRule('img-size', 'img.square', {\r\n   *   width: '40px !important',\r\n   *   height: '40px !important'\r\n   * });\r\n   */\r\n  addRule(name, selector, style) {\r\n    this.some((elem) => {\r\n      if (getName(elem) === 'style') {\r\n        const { sheet } = elem;\r\n        const { length } = sheet.cssRules;\r\n        const rules = new Super(style).word((value, property) => (\r\n          `${ new Str(property).toHyphenCase() }: ${ value };\\n`\r\n        ));\r\n\r\n        sheet.insertRule(\r\n          `${ selector } {${ rules && '\\n' }${ rules }}`,\r\n          length\r\n        );\r\n        sheet.cssRules[length].dwayneData = { name };\r\n\r\n        return true;\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#addText\r\n   * @public\r\n   * @param {String} text - Text to add.\r\n   * @param {Boolean} end - If the text should be inserted to the end. If false it's inserted to the start.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for adding text to all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.addText('123');\r\n   */\r\n  addText(text, end = true) {\r\n    return this.forEach((elem) => {\r\n      new Elem(nativeDocument.createTextNode(text)).into(elem, end);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#apply\r\n   * @public\r\n   * @param {...String} strings - Strings to apply.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method that is a shorthand for many other methods.\r\n   * All shorthands can be separated with space and written within one string.\r\n   *\r\n   * @example\r\n   * elem.apply(\r\n   *   '#id .c1 .c2 @border(1px solid black) $disabled $attr(some value) *(Click me!)'\r\n   * );\r\n   * // shorthand for\r\n   * // elem\r\n   * //   .id('id')\r\n   * //   .addClass('c1', 'c2')\r\n   * //   .css('border', '1px solid black')\r\n   * //   .attr({\r\n   * //     attr, 'some value'\r\n   * //     disabled: ''\r\n   * //   })\r\n   * //   .text('Click me!');\r\n   * // There is a full list of possible types of syntax below...\r\n   *\r\n   * elem.apply('#id');                    // shorthand for elem.id('id');\r\n   * elem.apply('.c1 .c2');                // shorthand for elem.addClass('c1', 'c2');\r\n   * elem.apply('-.c1 -.c2');              // shorthand for elem.removeClass('c1', 'c2');\r\n   * elem.apply('-@float -@display');      // shorthand for elem.removeCSS('float', 'display');\r\n   * elem.apply('-$a1 -$a2');              // shorthand for elem.removeAttr('a1', 'a2');\r\n   * elem.apply('*(some text)');           // shorthand for elem.text('some text');\r\n   * elem.apply('&(<div>1</div>)');        // shorthand for elem.html('<div>1</div>');\r\n   * elem.apply('@float(right)');          // shorthand for elem.css('float', 'right');\r\n   * elem.apply('@transform(scale(5px))'); // shorthand for elem.css('transform', 'scale(5px)');\r\n   * elem.apply('@margin(2px 2px)');       // shorthand for elem.css('margin', '2px 2px');\r\n   * elem.apply('@marginLeft(2px)');       // shorthand for elem.css('marginLeft', '2px 2px');\r\n   * elem.apply('@margin-left(2px)');      // shorthand for elem.css('margin-left', '2px 2px');\r\n   * elem.apply('$attr(some value)');      // shorthand for elem.attr('attr', 'some value');\r\n   * elem.apply('$attr');                  // shorthand for elem.attr('attr', '');\r\n   */\r\n  apply(...strings) {\r\n    let applied;\r\n    let setApplied;\r\n    let callback;\r\n    let name;\r\n    let np1;\r\n    let slice;\r\n\r\n    new Str(new Arr(arguments).join(' '))\r\n      .split(/(\\s+)/)\r\n      .forEach((string) => {\r\n        if (!applied) {\r\n          np1 = string.slice(0, 1);\r\n          callback = appliedRegExps[np1];\r\n          slice = 1;\r\n\r\n          if (callback && !isFunction(callback)) {\r\n            callback = callback[string.slice(1, 2)];\r\n            slice = 2;\r\n          }\r\n\r\n          if (/^\\s+$/.test(string) || !callback) {\r\n            return;\r\n          }\r\n\r\n          name = string.slice(slice).match(/^[^()]+/);\r\n\r\n          if (!name && (np1 !== '*' && np1 !== '&')) {\r\n            return;\r\n          }\r\n\r\n          applied = {\r\n            name: name ? name[0] : '',\r\n            args: string.slice(slice + (name ? name[0] : '').length),\r\n            callback\r\n          };\r\n\r\n          setApplied = true;\r\n        }\r\n\r\n        if (!setApplied) {\r\n          applied.args += string;\r\n        }\r\n\r\n        if (!applied.args || /^\\([\\s\\S]+\\)$/.test(applied.args)) {\r\n          applied.callback(this, applied.name, applied.args.replace(/^\\(|\\)$/g, ''));\r\n          applied = null;\r\n        }\r\n\r\n        setApplied = false;\r\n      });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#attr\r\n   * @public\r\n   * @param {String|Object.<String, String|ElemValueCallback>} [attr] - Name of the attribute to get or\r\n   * an object of the format { [attrName]: value, ... } to set attributes.\r\n   * @param {String|ElemValueCallback} [value] - If the first argument is a string\r\n   * it should be a value to set for that attribute.\r\n   * @returns {Super|String|Elem} If no arguments passed, D-Wrap of attributes of the first element in the set\r\n   * returned, if 1 string argument is passed the value of the attribute of the first element in the set\r\n   * returned otherwise returns this.\r\n   * @description Method for getting/setting attributes.\r\n   *\r\n   * @example\r\n   * elem.attr('attr1', 'value1'); // attribute attr1 set to 'value1' and this returned\r\n   * elem.attr('attr1');           // 'value1'\r\n   * elem.attr({\r\n   *   attr1: 'value3',            // attribute attr1 set to 'value3'\r\n   *   attr2: 'value2'             // attribute attr2 set to 'value2'\r\n   * });                           // this returned\r\n   * elem.attr().$;                // { attr1: 'value3', attr2: 'value2' }\r\n   */\r\n  attr(attr, value) {\r\n    const elem = getElem(this);\r\n\r\n    if (!arguments.length) {\r\n      return new Super(elem.attributes).object((o, attr) => {\r\n        o[attr.name] = attr.value;\r\n      });\r\n    }\r\n\r\n    if (arguments.length <= 1 && isString(attr)) {\r\n      const ns = attrNSSwitcher(attr, [new Elem(elem)]);\r\n\r\n      return isNull(ns)\r\n        ? elem.getAttribute(attr)\r\n        : elem.getAttributeNS(ns, attr);\r\n    }\r\n\r\n    if (arguments.length >= 2) {\r\n      attr = { [attr]: value };\r\n    }\r\n\r\n    return this.forEach((elem, index) => {\r\n      if (!isElement(elem)) {\r\n        return;\r\n      }\r\n\r\n      new Super(attr).forEach((value, key) => {\r\n        value = isFunction(value)\r\n          ? value(new Elem(elem).attr(key), elem, index)\r\n          : value;\r\n\r\n        if (isNil(value)) {\r\n          return new Elem(elem).removeAttr(key);\r\n        }\r\n\r\n        const ns = attrNSSwitcher(key, [new Elem(elem)]);\r\n\r\n        if (isNull(ns)) {\r\n          elem.setAttribute(key, value);\r\n        } else {\r\n          elem.setAttributeNS(ns, key, value);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#blob\r\n   * @public\r\n   * @param {Object} [options = {}] - Options that are passed into {@link blob}.\r\n   * @returns {Promise.<BlobObject>} New instance of promise.\r\n   * @description Returns a {@link BlobObject} Promise. Works with image or canvas first element.\r\n   *\r\n   * @example\r\n   * image.blob().then((blob) => console.log(blob));  // BlobObject\r\n   * canvas.blob().then((blob) => console.log(blob)); // BlobObject\r\n   */\r\n  blob(options = {}) {\r\n    return new Promise((resolve, reject) => {\r\n      const elem = this.first();\r\n      const { name } = elem;\r\n\r\n      if (name !== 'img' && name !== 'canvas') {\r\n        reject(new Error('First element in the set isn\\'t an image or a canvas! (Elem#blob)'));\r\n      }\r\n\r\n      if (name === 'canvas') {\r\n        return resolve(elem);\r\n      }\r\n\r\n      elem\r\n        .load()\r\n        .then(() => {\r\n          if (elem.isBroken()) {\r\n            return reject(new Error('The image is broken! (Elem#blob)'));\r\n          }\r\n\r\n          const canvas = new Elem(nativeDocument).canvas();\r\n          const width = elem.width();\r\n          const height = elem.height();\r\n\r\n          canvas\r\n            .width(width)\r\n            .height(height)\r\n            .drawImage(elem.$[0], 0, 0);\r\n\r\n          resolve(canvas);\r\n        });\r\n    }).then((canvas) => {\r\n      const dataURL = canvas.dataURL();\r\n      const byteString = atob(dataURL.split(',')[1]);\r\n      const length = byteString.length;\r\n      const ab = new ArrayBuffer(length);\r\n      const ia = new Uint8Array(ab);\r\n\r\n      times(length, (i) => {\r\n        ia[i] = byteString.charCodeAt(i);\r\n      });\r\n\r\n      return blob(ab, options);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#blur\r\n   * @returns {Elem} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLElement/blur\r\n   * @description Synonym for\r\n   * [HTMLElement#blur]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/blur}.\r\n   */\r\n  blur() {\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.blur();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#calcCSS\r\n   * @param {String} [pseudo] - See the link.\r\n   * @returns {CSSStyleDeclaration} See the link.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/Window/getComputedStyle\r\n   * @description Synonym for\r\n   * [getComputedStyle]{@link https://developer.mozilla.org/en/docs/Web/API/Window/getComputedStyle}.\r\n   * Returns computed style for the first element in the set or undefined.\r\n   */\r\n  calcCSS(pseudo = null) {\r\n    return getComputedStyle(getElem(this), pseudo);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#changeRule\r\n   * @public\r\n   * @param {String} name - Name of the rule.\r\n   * @param {Object.<String, String>} style - Style for the selector.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for changing css styles in the first style tag in the set.\r\n   * Note: style element should be inside the document.\r\n   *\r\n   * @example\r\n   * style.changeRule('img-size', {\r\n   *   width: '50px !important',\r\n   *   height: '50px !important'\r\n   * });\r\n   */\r\n  changeRule(name, style) {\r\n    this.some((elem) => {\r\n      if (getName(elem) === 'style') {\r\n        const { value: rule } = new Arr(elem.sheet.cssRules).find((rule) => rule.dwayneData && rule.dwayneData.name === name) || {};\r\n\r\n        if (rule) {\r\n          new Elem(rule).css(style);\r\n\r\n          return true;\r\n        }\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#child\r\n   * @public\r\n   * @param {Number|String|Elem|Element|Element[]} element - If the argument is a number a wrap of the set of the children\r\n   * of this index of each element in the set returned otherwise an element to put into this element, a collection\r\n   * or a selector of it.\r\n   * @param {Boolean} end - If the elements should be inserted to the end. If false they are inserted to the start.\r\n   * @returns {Elem} Returns a wrap of children or inserted elements.\r\n   * @description Method is similar to\r\n   * [Node#appendChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/appendChild}.\r\n   *\r\n   * @example\r\n   * const child = elem.child(1);\r\n   *\r\n   * elem.child(elem2);\r\n   * elem.child(document.getElementById('id'));\r\n   * elem.child('#id div.c1');\r\n   */\r\n  child(element, end = true) {\r\n    if (isInteger(element) && element >= 0) {\r\n      return this.children().elem(element);\r\n    }\r\n\r\n    return toFind(element).into(this, end);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#children\r\n   * @public\r\n   * @returns {Elem} D-Wrap of the children of the first element in the set.\r\n   * @description Method for getting element's children.\r\n   *\r\n   * @example\r\n   * const children = elem.children();\r\n   */\r\n  children() {\r\n    return new Elem(this.length ? this.$[0].childNodes : []);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#class\r\n   * @public\r\n   * @param {String} [cls] - If it's present it has to contain class attribute to set.\r\n   * @returns {Arr|Elem} If the argument is present this returned otherwise a wrap of the classes array returned.\r\n   * @description Method for getting/setting classes.\r\n   *\r\n   * @example\r\n   * elem.class('c1 c2'); // class set to 'c1 c2'\r\n   * elem.class().$;      // ['c1', 'c2']\r\n   */\r\n  class(cls) {\r\n    if (!arguments.length) {\r\n      return new Arr(getElem(this).className.split(' '));\r\n    }\r\n\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.className = cls;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#click\r\n   * @returns {Elem} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLElement/click\r\n   * @description Synonym for\r\n   * [HTMLElement#click]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/click}.\r\n   */\r\n  click() {\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.click();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#clone\r\n   * @public\r\n   * @param {Boolean|*} [deep = false] - See thee link.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/Node/cloneNode\r\n   * @description Synonym for\r\n   * [Node#cloneNode]{@link https://developer.mozilla.org/en/docs/Web/API/Node/cloneNode}.\r\n   */\r\n  clone(deep = false) {\r\n    return this.object((elems, elem) => {\r\n      elems.add(elem.cloneNode(!!deep));\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#closest\r\n   * @public\r\n   * @param {String} selector - See the link.\r\n   * @returns {Elem} Set of the closest elements.\r\n   * @description Synonym for\r\n   * [Element#closest]{@link https://developer.mozilla.org/en/docs/Web/API/Element/closest}.\r\n   */\r\n  closest(selector) {\r\n    return this.object((elems, elem) => {\r\n      while (elem) {\r\n        if (new Elem(elem).is(selector)) {\r\n          return elems.add(elem);\r\n        }\r\n\r\n        elem = elem.parentNode;\r\n      }\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#contains\r\n   * @public\r\n   * @param {String|Elem|Element} element - Element to find out if it's within the first element\r\n   * in the set or a selector of it.\r\n   * @returns {Boolean} Returns if the argument within this element.\r\n   * @description Method is extension for\r\n   * [Node#contains]{@link https://developer.mozilla.org/en/docs/Web/API/Node/contains}.\r\n   *\r\n   * @example\r\n   * elem1.contains(elem2);   // true|false\r\n   * elem.contains(selector); // true|false\r\n   */\r\n  contains(element) {\r\n    element = toFind(element);\r\n\r\n    return getElem(this).contains(getElem(element));\r\n  }\r\n\r\n  /**\r\n   * @method Elem#create\r\n   * @public\r\n   * @param {String} type - Type of created element. If type is \"#text\" a text node is created.\r\n   * If type is \"#comment\" a comment node is created.\r\n   * @param {...String} appliedExpressions - Strings that are passed into {@link Elem#apply}.\r\n   * @returns {Elem} New instance of Elem - wrap of the created elements.\r\n   * @description Method for creating elements inside this element.\r\n   * If this element is not an Element the element is just created.\r\n   *\r\n   * @example\r\n   * elem.create('div', '#id .c1 .c2 *Some text*');\r\n   *\r\n   * // also there are shorthands for almost every HTML-element\r\n   * elem.div();\r\n   * elem.input('$type(checkbox) $name(country)');\r\n   */\r\n  create(type, ...appliedExpressions) {\r\n    return this.object((elems, elem) => {\r\n      const element = new Elem(typeSwitcher(type, [new Elem(elem)]));\r\n\r\n      element.into(elem);\r\n\r\n      elems.add(element.apply.apply(element, appliedExpressions));\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#createComment\r\n   * @public\r\n   * @param {String} text - Text of the comment.\r\n   * @returns {Elem} New instance of Elem - wrap of the created comments.\r\n   * @description Method for creating comments inside this element.\r\n   * If this element is not an Element the comment is just created.\r\n   *\r\n   * @example\r\n   * elem.createComment('comment');\r\n   */\r\n  createComment(text) {\r\n    return this\r\n      .create('#comment')\r\n      .text(text);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#createText\r\n   * @public\r\n   * @param {String} text - Text.\r\n   * @returns {Elem} New instance of Elem - wrap of the created text nodes.\r\n   * @description Method for creating text nodes inside this element.\r\n   * If this element is not an Element the text node is just created.\r\n   *\r\n   * @example\r\n   * elem.createText('text');\r\n   */\r\n  createText(text) {\r\n    return this\r\n      .create('#text')\r\n      .text(text);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#css\r\n   * @public\r\n   * @param {String|Object.<String, String|ElemValueCallback>} [property] - Name of the property to get or\r\n   * an object of the format { [property]: value, ... } to set styles.\r\n   * @param {String|ElemValueCallback} [value] - If the first argument is a string it should be a value to set for that property.\r\n   * @returns {Super|String|Elem} If no arguments passed, D-Wrap of css styles of the element returned,\r\n   * if 1 string argument is passed the value of the property returned otherwise returns this.\r\n   * @description Method for getting/setting styles. Supports !important.\r\n   *\r\n   * @example\r\n   * elem.css('display', 'none'); // display set to 'none' and this returned\r\n   * elem.css('display');         // 'none'\r\n   * elem.css({\r\n   *   display: 'inline',         // display set to 'inline'\r\n   *   cursor: 'pointer'          // cursor set to 'pointer'\r\n   * });                          // this returned\r\n   * elem.css().$;                // { display: 'none', cursor: 'pointer' }\r\n   */\r\n  css(property, value) {\r\n    let style = getElem(this).style;\r\n\r\n    if (isStyleRule(this.$[0])) {\r\n      style = this.$[0].style;\r\n    }\r\n\r\n    if (!arguments.length) {\r\n      return new Str(style.cssText)\r\n        .split(/; ?/)\r\n        .object((o, value) => {\r\n          if (value) {\r\n            property = value.split(/: /);\r\n\r\n            o[new Str(property[0]).toCamelCase().$] = property[1];\r\n          }\r\n        });\r\n    }\r\n\r\n    if (arguments.length <= 1 && isString(property)) {\r\n      property = new Str(property).toHyphenCase().$;\r\n\r\n      return style.getPropertyValue(property) + (style.getPropertyPriority(property) ? ' !important' : '');\r\n    }\r\n\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: value };\r\n    }\r\n\r\n    return this.forEach((elem, index) => {\r\n      if (!isElement(elem) && !isStyleRule(elem)) {\r\n        return;\r\n      }\r\n\r\n      new Super(property).forEach((value, property) => {\r\n        property = new Str(property).toHyphenCase().$;\r\n\r\n        if (isFunction(value)) {\r\n          value = value(new Elem(elem).css(property), elem, index);\r\n        }\r\n\r\n        elem.style.removeProperty(property);\r\n        elem.style.setProperty(\r\n          property,\r\n          value.replace(/ ?!important$/, ''),\r\n          /!important$/.test(value) ? 'important' : ''\r\n        );\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#ctx\r\n   * @public\r\n   * @param {String|Object|CtxCallback} [property] - If present and object\r\n   * it's assigned to the canvas rendering context, if function\r\n   * it's called with canvas rendering context argument, if string\r\n   * the value from the second argument is used for assigning\r\n   * this property to canvas rendering context and if not present\r\n   * canvas rendering context returned.\r\n   * @param {*} [value] - See the property argument.\r\n   * @returns {CanvasRenderingContext2D|Elem}\r\n   * @description Rendering context of the first canvas in the set.\r\n   *\r\n   * @example\r\n   * canvas.ctx; // CanvasRenderingContext2D\r\n   */\r\n  ctx(property, value) {\r\n    let ctx;\r\n\r\n    this.some((elem) => {\r\n      if (getName(elem) === 'canvas') {\r\n        ctx = elem.dwayneData.ctx;\r\n\r\n        return true;\r\n      }\r\n    });\r\n\r\n    if (!arguments.length) {\r\n      return ctx;\r\n    }\r\n\r\n    if (!ctx) {\r\n      return this;\r\n    }\r\n\r\n    if (isFunction(property)) {\r\n      property(ctx);\r\n    } else {\r\n      if (arguments.length >= 2) {\r\n        property = { [property]: value };\r\n      }\r\n\r\n      assign(ctx, property);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#data\r\n   * @public\r\n   * @param {String|Object.<String, String|ElemValueCallback>} [key] - Name of the data attribute (without data- prefix)\r\n   * to get or an object of the format { [attrName]: value, ... } to set attributes.\r\n   * @param {String|ElemValueCallback} [value] - If the first argument is a string it should be a value to set for that attribute.\r\n   * @returns {Super|String|Elem} If no arguments passed, D-Wrap of dataset of the element returned,\r\n   * if 1 string argument is passed the value of the data attribute returned otherwise returns this.\r\n   * @description Method for getting/setting data attributes. See\r\n   * [HTMLElement#dataset]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/dataset}.\r\n   *\r\n   * @example\r\n   * elem.data('someKey1', 'value'); // attribute data-some-key1 set to 'value1' and this returned\r\n   * elem.data('someKey1');          // 'value1'\r\n   * elem.data({\r\n   *   someKey1: 'value3',           // attribute data-some-key1 set to 'value3'\r\n   *   someKey2: 'value2'            // attribute data-some-key2 set to 'value2'\r\n   * });                             // this returned\r\n   * elem.data().$;                  // { someKey1: 'value3', someKey2: 'value2' }\r\n   */\r\n  data(key, value) {\r\n    const dataset = getElem(this).dataset;\r\n\r\n    if (!arguments.length) {\r\n      return new Super(dataset).object((o, value, key) => {\r\n        o[key] = value;\r\n      });\r\n    }\r\n\r\n    if (arguments.length === 1 && isString(key)) {\r\n      return dataset[key];\r\n    }\r\n\r\n    if (arguments.length >= 2) {\r\n      key = { [key]: value };\r\n    }\r\n\r\n    return this.forEach((elem, index) => {\r\n      if (!isElement(elem)) {\r\n        return;\r\n      }\r\n\r\n      iterate(key, (value, key) => {\r\n        elem.dataset[key] = isFunction(value) ? value(elem.dataset[key], elem, index) : value;\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#dataURL\r\n   * @param {String} [type = 'image/png'] - See the link\r\n   * @param {Number} [encoderOptions = 0.92] - See the link.\r\n   * @returns {String} Data URL for the first canvas element in the set.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/toDataURL\r\n   * @description Synonym for\r\n   * [HTMLCanvasElement#toDataURL]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/toDataURL}.\r\n   *\r\n   * @example\r\n   * canvas.dataURL();\r\n   */\r\n  dataURL(type, encoderOptions) {\r\n    const ctx = this.ctx();\r\n\r\n    if (!ctx) {\r\n      return '';\r\n    }\r\n\r\n    return ctx.canvas.toDataURL.apply(ctx.canvas, arguments);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#deleteRule\r\n   * @public\r\n   * @param {String} name - Name of the rule.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for deleting css styles in a style tag.\r\n   * Note: style element should be inside the document.\r\n   *\r\n   * @example\r\n   * style.deleteRule('img-size');\r\n   */\r\n  deleteRule(name) {\r\n    this.some((elem) => {\r\n      if (getName(elem) === 'style') {\r\n        const rule = new Arr(elem.sheet.cssRules).find((rule) => rule.dwayneData && rule.dwayneData.name === name);\r\n\r\n        if (rule) {\r\n          elem.sheet.deleteRule(rule.key);\r\n\r\n          return true;\r\n        }\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#dispatch\r\n   * @public\r\n   * @param {String|Event} event - Event or a string (new Event(event) is created).\r\n   * @param {Object} [eventInit = {}] - See the link.\r\n   * @param {Boolean} [eventInit.bubbles = true] - See the link.\r\n   * @param {Boolean} [eventInit.cancelable = true] - See the link.\r\n   * @param {Object} [details = {}] - Object that is assigned to the event.\r\n   * @returns {Elem} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/Event/Event\r\n   * @description Synonym for\r\n   * [EventTarget#dispatchEvent]{@link https://developer.mozilla.org/en/docs/Web/API/EventTarget/dispatchEvent}.\r\n   *\r\n   * @example\r\n   * elem.dispatch('click');\r\n   * elem.dispatch('click', { bubbles: false, cancellable: false });\r\n   * elem.dispatch(new CustomEvent('custom-event'));\r\n   */\r\n  dispatch(event, eventInit = {}, details = {}) {\r\n    const { bubbles = true, cancelable = true } = eventInit || {};\r\n    let finalEvent = event;\r\n\r\n    if (!/Event$/.test(toStringTag(finalEvent))) {\r\n      try {\r\n        finalEvent = new Event(finalEvent, { bubbles, cancelable });\r\n      } catch (err) {\r\n        finalEvent = nativeDocument.createEvent('Event');\r\n        finalEvent.initEvent(event, bubbles, cancelable);\r\n      }\r\n\r\n      assign(finalEvent, details);\r\n    }\r\n\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.dispatchEvent(finalEvent);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#elem\r\n   * @public\r\n   * @param {Number} [index = 0] - Index of the element of the set to get. Negative index means elem.length + index.\r\n   * @returns {Elem} New instance of Elem.\r\n   *\r\n   * @example\r\n   * elem.elem(1); // a wrap of the element in the set that has index 1\r\n   * elem.elem();  // a wrap of the element in the set that has index 0\r\n   */\r\n  elem(index = 0) {\r\n    if (index < 0) {\r\n      index = this.length + index;\r\n    }\r\n\r\n    return new Elem(this.$[index]);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#filter\r\n   * @public\r\n   * @param {String|Function|Element[]|Elem} [selector = Boolean] - If it's a string the method filters elements with the selector\r\n   * otherwise super.filter is called.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Method for filtering elements.\r\n   *\r\n   * @example\r\n   * elem.filter((elem) => new Elem(elem).closest('.parent'));\r\n   * elem.filter(elemsInArray);\r\n   * elem.filter(elemsInElem);\r\n   * elem.filter('.child');\r\n   */\r\n  filter(selector = Boolean) {\r\n    return new Elem(super.filter(filterSwitcher(selector)));\r\n  }\r\n\r\n  /**\r\n   * @method Elem#find\r\n   * @public\r\n   * @param {String|Function} selector - Selector to find.\r\n   * @returns {Elem|{ key: Key, value: * }|null} New instance of Elem if selector is a string\r\n   * otherwise super.find is called.\r\n   * @description Synonym for\r\n   * [Element#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Element/querySelectorAll}.\r\n   */\r\n  find(selector) {\r\n    if (!isString(selector)) {\r\n      return super.find(selector);\r\n    }\r\n\r\n    return this.object((elems, elem) => {\r\n      elems.add(find(selector, elem));\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#first\r\n   * @public\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Synonym for elem.elem(0).\r\n   */\r\n  first() {\r\n    return this.elem(0);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#firstChild\r\n   * @public\r\n   * @param {String} [selector = null] - If present, finds first child in every elem that matches the selector.\r\n   * If not, finds first child of each element in the set.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Method for finding first children of each element in the set.\r\n   *\r\n   * @example\r\n   * elem.first();       // finds first child of each element in the elem set\r\n   * elem.first('.foo'); // find first child that has foo class of each element in the set\r\n   */\r\n  firstChild(selector = null) {\r\n    return this.object((elems, elem) => {\r\n      const { value: found } = new Elem(elem)\r\n        .children()\r\n        .find((elem) => new Elem(elem).is(selector)) || {};\r\n\r\n      elems.add(found);\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#focus\r\n   * @returns {Elem} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLElement/focus\r\n   * @description Synonym for\r\n   * [HTMLElement#focus]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/focus}.\r\n   */\r\n  focus() {\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#getRule\r\n   * @public\r\n   * @param {String} name - Name of the rule.\r\n   * @returns {{ selector: (String|void), rules: Object }} Set of the css rules.\r\n   * @description Method for getting set of the rules under the name.\r\n   * Note: style element should be inside the document.\r\n   *\r\n   * @example\r\n   * style.addRule('img-size', 'img.square', {\r\n   *   width: '40px',\r\n   *   height: '40px'\r\n   * });\r\n   * style.getRule('img-size');\r\n   * // {\r\n   * //   selector: 'img.square',\r\n   * //   rules: {\r\n   * //     width: '40px',\r\n   * //     height: '40px'\r\n   * //   }\r\n   * // }\r\n   */\r\n  getRule(name) {\r\n    let found = {\r\n      selector: undefined,\r\n      rules: {}\r\n    };\r\n\r\n    this.some((elem) => {\r\n      if (getName(elem) === 'style') {\r\n        const { value: rule } = new Arr(elem.sheet.cssRules).find((rule) => rule.dwayneData && rule.dwayneData.name === name) || {};\r\n\r\n        if (rule) {\r\n          found = {\r\n            selector: rule.selectorText,\r\n            rules: new Elem(rule).css().$\r\n          };\r\n\r\n          return true;\r\n        }\r\n      }\r\n    });\r\n\r\n    return found;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#hasAttr\r\n   * @public\r\n   * @param {String} attr - Name of the attribute.\r\n   * @returns {Boolean} If the first element in the set has the attribute.\r\n   * @description Method that returns if the first element in the set has the attribute or not.\r\n   *\r\n   * @example\r\n   * elem.attr('attr', 'value').hasAttr('attr'); // true\r\n   * elem.removeAttr('attr').hasAttr('attr');    // false\r\n   */\r\n  hasAttr(attr) {\r\n    const elem = getElem(this);\r\n    const ns = attrNSSwitcher(attr, [new Elem(elem)]);\r\n\r\n    return isNull(ns)\r\n      ? elem.hasAttribute(attr)\r\n      : elem.hasAttributeNS(ns, attr);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#hasClass\r\n   * @public\r\n   * @param {String} cls - Name of the class.\r\n   * @returns {Boolean} If the first element in the set has the class.\r\n   * @description Method that returns if the first element in the set has the class or not.\r\n   *\r\n   * @example\r\n   * elem.addClass('cls').hasClass('cls');    // true\r\n   * elem.removeClass('cls').hasClass('cls'); // false\r\n   */\r\n  hasClass(cls) {\r\n    return getElem(this).classList.contains(cls);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#height\r\n   * @public\r\n   * @param {*|ElemValueCallback} [height] - Height to set.\r\n   * @returns {Elem|String} If no arguments passed height of the first element in the set returned.\r\n   * Otherwise all elements heights in the set are set to the height argument.\r\n   * @description Gets or sets height.\r\n   *\r\n   * @example\r\n   * elem.height(123);\r\n   * elem.height(); // 123\r\n   */\r\n  height(height) {\r\n    return this.prop.apply(this, new Arr(arguments).unshift('height').$);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#hide\r\n   * @public\r\n   * @returns {Elem} Returns this.\r\n   * @description Hides all elements in the set.\r\n   *\r\n   * @example\r\n   * elem.hide();\r\n   */\r\n  hide() {\r\n    return this.forEach((elem) => {\r\n      elem = new Elem(elem);\r\n\r\n      const currentDisplay = elem.css('display');\r\n\r\n      if (currentDisplay.indexOf('none')) {\r\n        elem.prop('dwayneData').previousDisplay = currentDisplay;\r\n      }\r\n\r\n      elem.css('display', 'none !important');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#html\r\n   * @public\r\n   * @param {String|ElemValueCallback|*} [html] - HTML to write instead of current HTML.\r\n   * @returns {Elem|String} If no arguments passed HTML of the first element in the set returned.\r\n   * Otherwise all elements HTML in the set are set to the html argument.\r\n   * @description Gets or sets HTML.\r\n   *\r\n   * @example\r\n   * elem.html('<div>1</div>');\r\n   * elem.html(); // '<div>1</div>'\r\n   */\r\n  html(html) {\r\n    if (!arguments.length) {\r\n      return getElem(this).innerHTML;\r\n    }\r\n\r\n    return this.forEach((elem, index) => {\r\n      if (isElement(elem)) {\r\n        elem.innerHTML = isFunction(html) ? html(elem.innerHTML, elem, index) : html;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#id\r\n   * @public\r\n   * @param {String|*} [id] - Id to set.\r\n   * @returns {Elem|String} If no arguments passed id of the first element in the set returned.\r\n   * Otherwise all elements ids in the set are set to the id argument.\r\n   * @description Gets id or sets ids.\r\n   *\r\n   * @example\r\n   * elem.id('unique');\r\n   * elem.id(); // 'unique'\r\n   */\r\n  id(id) {\r\n    if (!arguments.length) {\r\n      return getElem(this).id;\r\n    }\r\n\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.id = id;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @member {Number} Elem#innerHeight\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description Getter for finding how much height content of the first element can be.\r\n   *\r\n   * @example\r\n   * elem.css({\r\n   *   boxSizing: 'border-box',\r\n   *   height: '200px',\r\n   *   paddingTop: '2px',\r\n   *   paddingBottom: '3px',\r\n   *   borderTop: '1px solid black',\r\n   *   borderBottom: '4px solid black'\r\n   * }).innerHeight; // 190\r\n   * elem\r\n   *   .css('box-sizing', 'content-box')\r\n   *   .innerHeight; // 200\r\n   * elem\r\n   *   .css('box-sizing', 'padding-box')\r\n   *   .innerHeight; // 195\r\n   */\r\n  get innerHeight() {\r\n    const elem = this.$[0];\r\n\r\n    if (isWindow(elem)) {\r\n      return elem.innerHeight;\r\n    }\r\n\r\n    const {\r\n      borderTopWidth,\r\n      borderBottomWidth,\r\n      boxSizing,\r\n      height,\r\n      paddingTop,\r\n      paddingBottom\r\n    } = this.calcCSS();\r\n    const borders = px(borderTopWidth) + px(borderBottomWidth);\r\n    const paddings = px(paddingTop) + px(paddingBottom);\r\n\r\n    return px(height) - innerSwitcher(boxSizing, [paddings, borders]);\r\n  }\r\n\r\n  /**\r\n   * @member {Number} Elem#innerWidth\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description Getter for finding how much width content of the first element can be.\r\n   *\r\n   * @example\r\n   * elem.css({\r\n   *   boxSizing: 'border-box',\r\n   *   width: '200px',\r\n   *   paddingLeft: '2px',\r\n   *   paddingRight: '3px',\r\n   *   borderLeft: '1px solid black',\r\n   *   borderRight: '4px solid black'\r\n   * }).innerWidth; // 190\r\n   * elem\r\n   *   .css('box-sizing', 'content-box')\r\n   *   .innerWidth; // 200\r\n   * elem\r\n   *   .css('box-sizing', 'padding-box')\r\n   *   .innerWidth; // 195\r\n   */\r\n  get innerWidth() {\r\n    const elem = this.$[0];\r\n\r\n    if (isWindow(elem)) {\r\n      return elem.innerWidth;\r\n    }\r\n\r\n    const {\r\n      borderLeftWidth,\r\n      borderRightWidth,\r\n      boxSizing,\r\n      paddingLeft,\r\n      paddingRight,\r\n      width\r\n    } = this.calcCSS();\r\n    const borders = px(borderLeftWidth) + px(borderRightWidth);\r\n    const paddings = px(paddingLeft) + px(paddingRight);\r\n\r\n    return px(width) - innerSwitcher(boxSizing, [paddings, borders]);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#insertAfter\r\n   * @public\r\n   * @param {String|Elem|Element} element - Element to insert this element after or a selector of it.\r\n   * @returns {Elem} Returns this.\r\n   * @description Puts the elements from the set after the element specified by the argument.\r\n   * The elements remain in the same order.\r\n   *\r\n   * @example\r\n   * elem.insertAfter(elem2);\r\n   * elem.insertAfter(document.getElementById('id'));\r\n   * elem.insertAfter('#id div.c1');\r\n   */\r\n  insertAfter(element) {\r\n    element = toFind(element).first();\r\n\r\n    let parent = element.parent();\r\n\r\n    if (!parent.length) {\r\n      return this;\r\n    }\r\n\r\n    element = element.next().$[0];\r\n    parent = parent.$[0];\r\n\r\n    return this.forEach((elem) => {\r\n      if (element) {\r\n        parent.insertBefore(elem, element);\r\n      } else {\r\n        parent.appendChild(elem);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#insertBefore\r\n   * @public\r\n   * @param {String|Elem|Element} element - Element to insert this element before or a selector of it.\r\n   * @returns {Elem} Returns this.\r\n   * @description Puts the elements from the set before the element specified by the argument.\r\n   * The elements remain in the same order.\r\n   *\r\n   * @example\r\n   * elem.insertBefore(elem2);\r\n   * elem.insertBefore(document.getElementById('id'));\r\n   * elem.insertBefore('#id div.c1');\r\n   */\r\n  insertBefore(element) {\r\n    element = toFind(element).first();\r\n\r\n    let parent = element.parent();\r\n\r\n    if (!parent.length) {\r\n      return this;\r\n    }\r\n\r\n    element = element.$[0];\r\n    parent = parent.$[0];\r\n\r\n    return this.forEach((elem) => {\r\n      parent.insertBefore(elem, element);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#into\r\n   * @public\r\n   * @param {String|Elem|Element} element - Element to put this elements into or a selector of it.\r\n   * @param {Boolean} end - If the elements should be inserted to the end. If false they are inserted to the start.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method is similar to\r\n   * [Node#appendChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/appendChild}.\r\n   *\r\n   * @example\r\n   * elem.into(elem2);\r\n   * elem.into(document.getElementById('id'));\r\n   * elem.into('#id div.c1');\r\n   */\r\n  into(element, end = true) {\r\n    element = toFind(element).$[0];\r\n\r\n    if (\r\n      !element ||\r\n      isWindow(element) ||\r\n      isHTMLDocument(element) ||\r\n      isCommentOrText(element)\r\n    ) {\r\n      return this;\r\n    }\r\n\r\n    if (!end && element.firstChild) {\r\n      return this\r\n        .slice()\r\n        .reverse()\r\n        .forEach((elem) => {\r\n          element.insertBefore(elem, element.firstChild);\r\n        });\r\n    }\r\n\r\n    return this.forEach((elem) => {\r\n      element.appendChild(elem);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#is\r\n   * @public\r\n   * @param {String} selector\r\n   * @returns {Boolean} If the first element in the set matches the selector.\r\n   * If the selector is undefined or null always returns true. If it's not for not elements\r\n   * entries returns false.\r\n   * @description Synonym for\r\n   * [Element#matches]{@link https://developer.mozilla.org/en/docs/Web/API/Element/matches}.\r\n   *\r\n   * @example\r\n   * elem.addClass('cls');\r\n   * elem.is('.cls');         // true\r\n   *\r\n   * elem.removeClass('cls');\r\n   * elem.is('.cls');         // false\r\n   */\r\n  is(selector) {\r\n    if (isNull(selector)) {\r\n      return true;\r\n    }\r\n\r\n    const elem = getElem(this);\r\n    const matches = (\r\n      elem.matches ||\r\n      elem.matchesSelector ||\r\n      elem.webkitMatchesSelector ||\r\n      elem.mozMatchesSelector ||\r\n      elem.msMatchesSelector ||\r\n      elem.oMatchesSelector\r\n    );\r\n\r\n    if (!isElement(this.$[0])) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      return matches.call(elem, selector);\r\n    } catch (err) {\r\n      console.error(`Selector '${ selector }' is not a valid selector (Elem#is)`);\r\n\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method Elem#isBroken\r\n   * @public\r\n   * @returns {Boolean} If the first image in the set is broken.\r\n   * @description Returns if the first element in the set is broken. Not image and not loaded image is considered proper.\r\n   *\r\n   * @example\r\n   * const img = elem.img().on({\r\n   *   'load': onload,\r\n   *   'error': onload\r\n   * });\r\n   *\r\n   * onload = () => {\r\n   *   console.log(img.isBroken()); // true\r\n   * };\r\n   *\r\n   * img.ref('/some/non-existent/site/not-found.png');\r\n   */\r\n  isBroken() {\r\n    let isBroken = false;\r\n\r\n    this.some((elem) => {\r\n      if (getName(elem) === 'img') {\r\n        isBroken = !!(elem.complete && (!elem.naturalWidth || !elem.naturalHeight));\r\n\r\n        return true;\r\n      }\r\n    });\r\n\r\n    return isBroken;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#isWithinDocument\r\n   * @public\r\n   * @returns {Boolean} Returns if the first element in the set is within the document or not.\r\n   * @description Returns if the first element in the set is within the document or not.\r\n   *\r\n   * @example\r\n   * new Elem(document.body).isWithinDocument();  // true\r\n   * new Elem(document).div().isWithinDocument(); // false\r\n   */\r\n  isWithinDocument() {\r\n    return this.first().closest('html').length !== 0;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#last\r\n   * @public\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Synonym for elem.elem(-1).\r\n   */\r\n  last() {\r\n    return this.elem(-1);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#lastChild\r\n   * @public\r\n   * @param {String} [selector = null] - If present, finds last child in every elem that matches the selector.\r\n   * If not, finds last child of each element in the set.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Method for finding last children of each element in the set.\r\n   *\r\n   * @example\r\n   * elem.last();       // finds last child of each element in the elem set\r\n   * elem.last('.foo'); // find last child that has 'foo' class of each element in the set\r\n   */\r\n  lastChild(selector = null) {\r\n    return this.object((elems, elem) => {\r\n      const { value: found } = new Elem(elem)\r\n        .children()\r\n        .reverse()\r\n        .find((elem) => new Elem(elem).is(selector)) || {};\r\n\r\n      elems.add(found);\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#load\r\n   * @public\r\n   * @returns {Promise.<{ proper: Elem, broken: Elem }>} Promise with broken and proper images.\r\n   * @description Loads each image in the set and puts it to the proper or broken array.\r\n   *\r\n   * @example\r\n   * images.load().then(({ broken }) => {\r\n   *   broken.filter('img').ref('/fallback.png');\r\n   * });\r\n   */\r\n  load() {\r\n    const images = {\r\n      proper: new Elem(),\r\n      broken: new Elem()\r\n    };\r\n\r\n    return Promise.all(\r\n      this\r\n        .filter((elem) => getName(elem) === 'img')\r\n        .map((elem) => {\r\n          const $elem = new Elem(elem);\r\n\r\n          if (elem.complete) {\r\n            images[$elem.isBroken() ? 'broken' : 'proper'].push(elem);\r\n\r\n            return;\r\n          }\r\n\r\n          return new Promise((resolve) => {\r\n            const removeListeners = $elem.on({\r\n              load() {\r\n                images.proper.add(elem);\r\n\r\n                removeListeners();\r\n                resolve();\r\n              },\r\n              error() {\r\n                images.broken.add(elem);\r\n\r\n                removeListeners();\r\n                resolve();\r\n              }\r\n            });\r\n          });\r\n        })\r\n        .$\r\n    ).then(() => images);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#moveAttr\r\n   * @public\r\n   * @param {String} attr - Attribute to move to the first element.\r\n   * @param {String} [value = ''] - Value to set for the attribute. If not set attribute of the previous element or '' used.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for moving an attribute from previous element to the next one (first element in this set).\r\n   *\r\n   * @example\r\n   * elem1.moveAttr('attr', 'value');     // attribute 'attr' set to 'value' on elem1\r\n   * elem2.moveAttr('attr');              // attribute 'attr' removed from elem1. set to 'value' on elem2\r\n   * elem3.moveAttr('attr', 'new value'); // attribute 'attr' removed from elem2. set to 'new value' on elem3\r\n   */\r\n  moveAttr(attr, value = '') {\r\n    const prev = attrs[attr];\r\n    const elem = this.elem();\r\n\r\n    if (prev && elem.length) {\r\n      if (arguments.length < 2) {\r\n        value = prev.attr(attr);\r\n      }\r\n\r\n      prev.removeAttr(attr);\r\n    }\r\n\r\n    if (elem.length) {\r\n      attrs[attr] = elem.attr(attr, value);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#moveClass\r\n   * @public\r\n   * @param {String} cls - Class to move to the first element.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for moving a class from previous element to the next one (first element in this set).\r\n   *\r\n   * @example\r\n   * elem1.moveClass('cls'); // class 'cls' added to elem1\r\n   * elem2.moveClass('cls'); // class 'cls' removed from elem1. added to elem1\r\n   */\r\n  moveClass(cls) {\r\n    const prev = classes[cls];\r\n    const elem = this.elem();\r\n\r\n    if (prev && elem.length) {\r\n      prev.removeClass(cls);\r\n    }\r\n\r\n    if (elem.length) {\r\n      classes[cls] = elem.addClass(cls);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @member {String} Elem#name\r\n   * @type {String}\r\n   * @public\r\n   * @readonly\r\n   * @description nodeName (lowercased) of the first element in the set.\r\n   *\r\n   * @example\r\n   * const elem1 = elem.create('div');\r\n   * elem1.name // 'div'\r\n   */\r\n  get name() {\r\n    return getName(this.$[0]);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#next\r\n   * @public\r\n   * @param {String} [selector = null] - If present, finds next element to every elem that matches the selector.\r\n   * If not, finds next element to each element in the set.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Method for finding next element to each element in the set.\r\n   *\r\n   * @example\r\n   * elem.next();       // finds next element to each element in the set\r\n   * elem.next('.foo'); // finds next element to each element that has 'foo' class\r\n   */\r\n  next(selector = null) {\r\n    return this.object((elems, elem) => {\r\n      /* eslint no-cond-assign: 0 */\r\n      while (elem = elem.nextSibling) {\r\n        if (new Elem(elem).is(selector)) {\r\n          return elems.add(elem);\r\n        }\r\n      }\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#off\r\n   * @public\r\n   * @param {...ElemEventString} events - Events to remove.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method that removes all the listeners from each element in the set specified by the events arguments.\r\n   *\r\n   * @example\r\n   * elem.off('click');\r\n   * elem.off('click, input');\r\n   * elem.off('click, input', 'focus');\r\n   */\r\n  off(...events) {\r\n    return this.forEach((elem) => {\r\n      const { listeners } = elem.dwayneData;\r\n\r\n      iterate(arguments, (event) => {\r\n        iterate(event.split(eventSeparator), (event) => {\r\n          (listeners[event] || new Super()).forEach(({ removeListener }) => removeListener());\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#on\r\n   * @public\r\n   * @param {ElemEventString|Object.<ElemEventString|ElemListener>} event - Either a {@link ElemEventString} string\r\n   * or an object with event keys (a key is also ElemEventString) and listeners values.\r\n   * @param {String} [selector = null] - Selector to filter event targets.\r\n   * @param {ElemListener} [listener] - If the first argument is a string it must be a listener function for\r\n   * specified event(s).\r\n   * @returns {ElemRemoveListeners} Function that takes optional event argument.\r\n   * @description Adds event listeners for all the elements in the set.\r\n   * For debugging: If you need to know what listeners are in work (and what selectors filter targets)\r\n   * you can look at the base property of the only dwayne listener that listens for the event\r\n   * and find all working listeners in listener.base.dwayneData.listeners[event].$.\r\n   *\r\n   * @example\r\n   * elem.on(\r\n   *   'change, input',\r\n   *   'input, select, textarea, datalist, keygen, output',\r\n   *   (e, elem, index) => console.log(elem.value)\r\n   * );\r\n   * elem.on(\r\n   *   'change, input',\r\n   *   (e, elem, index) => console.log(elem.value)\r\n   * );\r\n   * elem.on(\r\n   *   {\r\n   *     'change, input': (e, elem, index) => console.log(elem.value),\r\n   *     'blur': () => console.log('blur')\r\n   *   },\r\n   *   'input, select, textarea, datalist, keygen, output'\r\n   * );\r\n   *\r\n   * const removeListeners = elem.on({\r\n   *   'change, input': (e, elem, index) => console.log(elem.value),\r\n   *   'blur': () => console.log('blur')\r\n   * });\r\n   *\r\n   * removeListeners('click');\r\n   * removeListeners('blur, change');\r\n   * removeListeners('blur, change', 'input');\r\n   * removeListeners();\r\n   */\r\n  on(event, selector = null, listener) {\r\n    const allListeners = new Super({});\r\n\r\n    if (isFunction(selector)) {\r\n      listener = selector;\r\n      selector = null;\r\n    }\r\n\r\n    if (isString(event)) {\r\n      event = { [event]: listener };\r\n    }\r\n\r\n    event = new Super(event).object((listeners, listener, event) => {\r\n      iterate(event.split(eventSeparator), (event) => {\r\n        listeners[event] = listener;\r\n      });\r\n    });\r\n\r\n    this.forEach((elem) => {\r\n      if (!isElement(elem) && !isWindow(elem) && !isHTMLDocument(elem)) {\r\n        return;\r\n      }\r\n\r\n      const { listeners } = (windowsDwayneData.find(({ element }) => element === elem) || {}).value || elem.dwayneData;\r\n\r\n      event.forEach((listener, event) => {\r\n        const removeEventListeners = listeners[event] = listeners[event] || new Super({}).define('index', {\r\n          value: 0,\r\n          configurable: true,\r\n          writable: true\r\n        });\r\n        const index = removeEventListeners.prop('index');\r\n\r\n        if (!removeEventListeners.has('listener')) {\r\n          const newListener = (e) => {\r\n            removeEventListeners.forEach(({ selector, listener }) => {\r\n              if (new Elem(e.target).is(selector)) {\r\n                listener.call(elem, e, elem, index);\r\n              }\r\n            });\r\n          };\r\n\r\n          newListener.base = elem;\r\n\r\n          elem.addEventListener(event, newListener, false);\r\n          removeEventListeners.define('listener', {\r\n            value: newListener,\r\n            configurable: true,\r\n            writable: true\r\n          });\r\n        }\r\n\r\n        const removeListener = () => {\r\n          removeEventListeners.delete(index);\r\n\r\n          if (!removeEventListeners.count) {\r\n            elem.removeEventListener(event, removeEventListeners.prop('listener'), false);\r\n            removeEventListeners.delete('listener');\r\n          }\r\n        };\r\n\r\n        allListeners.prop(event, (allListeners.prop(event) || new Arr()).push(removeListener));\r\n\r\n        removeEventListeners.assign({\r\n          index: index + 1,\r\n          [index]: {\r\n            selector,\r\n            listener,\r\n            removeListener\r\n          }\r\n        });\r\n      });\r\n    });\r\n\r\n    return function removeEventListeners(event) {\r\n      if (arguments.length) {\r\n        iterate(arguments, (event) => {\r\n          iterate(event.split(eventSeparator), (event) => {\r\n            if (allListeners.has(event)) {\r\n              allListeners.prop(event).forEach((removeListener) => removeListener());\r\n              allListeners.delete(event);\r\n            }\r\n          });\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      allListeners.forEach((removeListeners) => {\r\n        removeListeners.forEach((removeListener) => removeListener());\r\n      });\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @member {Number} Elem#outerHeight\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description Getter for finding how much height the element actually is.\r\n   *\r\n   * @example\r\n   * elem.css({\r\n   *   boxSizing: 'border-box',\r\n   *   height: '200px',\r\n   *   paddingTop: '2px',\r\n   *   paddingBottom: '3px',\r\n   *   borderTop: '1px solid black',\r\n   *   borderBottom: '4px solid black'\r\n   *   marginTop: '0px',\r\n   *   marginBottom: '5px'\r\n   * }).outerHeight; // 205\r\n   * elem\r\n   *   .css('box-sizing', 'content-box')\r\n   *   .outerHeight; // 215\r\n   * elem\r\n   *   .css('box-sizing', 'padding-box')\r\n   *   .outerHeight; // 210\r\n   */\r\n  get outerHeight() {\r\n    const elem = this.$[0];\r\n\r\n    if (isWindow(elem)) {\r\n      return elem.outerHeight;\r\n    }\r\n\r\n    const {\r\n      borderTopWidth,\r\n      borderBottomWidth,\r\n      boxSizing,\r\n      height,\r\n      marginTop,\r\n      marginBottom,\r\n      paddingTop,\r\n      paddingBottom\r\n    } = this.calcCSS();\r\n    const borders = px(borderTopWidth) + px(borderBottomWidth);\r\n    const paddings = px(paddingTop) + px(paddingBottom);\r\n\r\n    return px(height) + px(marginTop) + px(marginBottom) + outerSwitcher(boxSizing, [borders, paddings]);\r\n  }\r\n\r\n  /**\r\n   * @member {Number} Elem#outerWidth\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description Getter for finding how much width the element actually is.\r\n   *\r\n   * @example\r\n   * elem.css({\r\n   *   boxSizing: 'border-box',\r\n   *   width: '200px',\r\n   *   paddingLeft: '2px',\r\n   *   paddingRight: '3px',\r\n   *   borderLeft: '1px solid black',\r\n   *   borderRight: '4px solid black'\r\n   *   marginLeft: '0px',\r\n   *   marginRight: '5px'\r\n   * }).outerWidth; // 205\r\n   * elem\r\n   *   .css('box-sizing', 'content-box')\r\n   *   .outerWidth; // 215\r\n   * elem\r\n   *   .css('box-sizing', 'padding-box')\r\n   *   .outerWidth; // 210\r\n   */\r\n  get outerWidth() {\r\n    const elem = this.$[0];\r\n\r\n    if (isWindow(elem)) {\r\n      return elem.outerWidth;\r\n    }\r\n\r\n    const {\r\n      borderLeftWidth,\r\n      borderRightWidth,\r\n      boxSizing,\r\n      marginLeft,\r\n      marginRight,\r\n      paddingLeft,\r\n      paddingRight,\r\n      width\r\n    } = this.calcCSS();\r\n    const borders = px(borderLeftWidth) + px(borderRightWidth);\r\n    const paddings = px(paddingLeft) + px(paddingRight);\r\n\r\n    return px(width) + px(marginLeft) + px(marginRight) + outerSwitcher(boxSizing, [borders, paddings]);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#parent\r\n   * @public\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Method returns wrap of the set of the parent elements of each element in the set.\r\n   */\r\n  parent() {\r\n    return this.object((elems, elem) => elems.add(elem.parentNode), new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#parentTree\r\n   * @public\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Returns wrap of all parents of each element in the set.\r\n   *\r\n   * @example\r\n   * elem.parentTree(); // Elem\r\n   */\r\n  parentTree() {\r\n    return this.object((elems, elem) => {\r\n      while (elem = elem.parentNode) {\r\n        elems.add(elem);\r\n      }\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#prev\r\n   * @public\r\n   * @param {String} [selector = null] - If present, finds previous element to every elem that matches the selector.\r\n   * If not, finds previous element to each element in the set.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Method for finding previous element to each element in the set.\r\n   *\r\n   * @example\r\n   * elem.next();       // finds previous element to each element in the set\r\n   * elem.next('.foo'); // finds previous element to each element that has 'foo' class\r\n   */\r\n  prev(selector = null) {\r\n    return this.object((elems, elem) => {\r\n      /* eslint no-cond-assign: 0 */\r\n      while (elem = elem.previousSibling) {\r\n        if (new Elem(elem).is(selector)) {\r\n          return elems.add(elem);\r\n        }\r\n      }\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#prop\r\n   * @public\r\n   * @param {String|Object.<String, ElemValueCallback|*>} property - Either a string of a property or an assigned object.\r\n   * @param {ElemValueCallback|*} [value] - If a property parameter is a string\r\n   * this has to be an assigned value if it's present.\r\n   * @returns {Elem|*} Returns this if it's setter or a value if getter.\r\n   * @description Method that is either a property getter for the first element in the set\r\n   * or a setter for every element in the set.\r\n   *\r\n   * @example\r\n   * elem.prop('draggable', false);\r\n   * elem.prop('draggable'); // false\r\n   */\r\n  prop(property, value) {\r\n    if (arguments.length <= 1 && isString(property)) {\r\n      return this.$[0] ? this.$[0][property] : undefined;\r\n    }\r\n\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: value };\r\n    }\r\n\r\n    return this.forEach((elem, index) => {\r\n      iterate(property, (value, prop) => {\r\n        elem[prop] = isFunction(value) ? value(elem[prop], elem, index) : value;\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#ref\r\n   * @public\r\n   * @param {String|ElemValueCallback} [link] - If it's present link to a resource.\r\n   * @returns {Elem|String} If the link argument isn't present it's a getter of the 'src' attribute\r\n   * for the one of following elements: img, script, iframe, audio, video; of the 'action' attribute\r\n   * for a form element and of the 'href' attribute for the rest. If it's present it's a setter\r\n   * of the same attribute for all the element in the set.\r\n   * @description Method for getting resources links and setting them.\r\n   *\r\n   * @example\r\n   * elem.ref('/some/cool/image.png');\r\n   * elem.ref(); // '/some/cool/image.png'\r\n   */\r\n  ref(link) {\r\n    if (!arguments.length) {\r\n      return this.attr(refSwitcher(this.name));\r\n    }\r\n\r\n    return this.forEach((elem) => {\r\n      elem = new Elem(elem);\r\n\r\n      elem.attr(refSwitcher(elem.name), link);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#remove\r\n   * @public\r\n   * @returns {Elem} Returns this.\r\n   * @description Removes all the elements from the set from the document.\r\n   * Note: it doesn't remove them from the set so watch out for the memory leaks.\r\n   *\r\n   * @example\r\n   * elem.remove();\r\n   */\r\n  remove() {\r\n    return this.forEach((elem) => {\r\n      const parent = elem.parentNode;\r\n\r\n      if (parent) {\r\n        parent.removeChild(elem);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#removeAttr\r\n   * @public\r\n   * @param {...String} attributes - Attributes to remove.\r\n   * @returns {Elem} Returns this.\r\n   * @description Removes all the attributes from arguments from all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.removeAttr('foo', 'bar', 'baz');\r\n   */\r\n  removeAttr(...attributes) {\r\n    return this.forEach((elem) => {\r\n      if (!isElement(elem)) {\r\n        return;\r\n      }\r\n\r\n      iterate(arguments, (attr) => {\r\n        const ns = attrNSSwitcher(attr, [new Elem(elem)]);\r\n\r\n        if (isNull(ns)) {\r\n          elem.removeAttribute(attr);\r\n        } else {\r\n          elem.removeAttributeNS(ns, attr);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#removeClass\r\n   * @public\r\n   * @param {...String} classes - Classes to remove.\r\n   * @returns {Elem} Returns this.\r\n   * @description Removes all the classes from arguments from all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.removeClass('foo', 'bar', 'baz');\r\n   */\r\n  removeClass(...classes) {\r\n    return this.forEach((elem) => {\r\n      const list = elem.classList;\r\n\r\n      iterate(isElement(elem) && arguments, (cls) => list.remove(cls));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#removeCSS\r\n   * @public\r\n   * @param {...String} props - CSS properties to remove.\r\n   * @returns {Elem} Returns this.\r\n   * @description Removes all the CSS properties from arguments from all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.removeCSS('display', 'position', 'margin');\r\n   */\r\n  removeCSS(...props) {\r\n    return this.forEach((elem) => {\r\n      if (!isElement(elem)) {\r\n        return;\r\n      }\r\n\r\n      iterate(arguments, (css) => {\r\n        elem.style.removeProperty(css);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#replace\r\n   * @public\r\n   * @param {String|Elem|Element} element - Element to replace the first element in the set\r\n   * with a set of elements specified by the argument (Element, set of elements or a selector of them).\r\n   * @returns {Elem} Returns this.\r\n   * @description Method is similar to\r\n   * [Node#replaceChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/replaceChild}.\r\n   *\r\n   * @example\r\n   * elem.replace(elem2);\r\n   * elem.replace(document.getElementById('id'));\r\n   * elem.replace('#id div.c1');\r\n   */\r\n  replace(element) {\r\n    element = toFind(element);\r\n\r\n    const parent = this.first().parent();\r\n\r\n    if (!parent.length) {\r\n      return this;\r\n    }\r\n\r\n    let elem = parent;\r\n    let method = 'into';\r\n    const next = this.next().first().$[0];\r\n    const prev = this.prev().first().$[0];\r\n\r\n    if (next) {\r\n      elem = next;\r\n      method = 'insertBefore';\r\n    } else if (prev) {\r\n      elem = prev;\r\n      method = 'insertAfter';\r\n    }\r\n\r\n    this.first().remove();\r\n\r\n    element[method](elem);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#setOf\r\n   * @public\r\n   * @param {String} type - HTML element type.\r\n   * @param {Number|Object|Array.<*>} iterator - A number (how many elements to create inside each element),\r\n   * an object or an array to iterate over.\r\n   * @param {ElemSetOfCallback} callback\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Function for creating set of elements inside each element in the set based on an array or an object.\r\n   *\r\n   * @example\r\n   * table.setOf('tr', [[1, 2], [3, 4], [5, 6]], (row, array) => {\r\n   *   D(row).setOf('td', array, (col, number) => {\r\n   *     D(col).text(number);\r\n   *   });\r\n   * });\r\n   */\r\n  setOf(type, iterator, callback) {\r\n    validate({ 2: callback }, { 2: ['function'] }, 'Elem#setOf');\r\n\r\n    iterator = new Super(iterator).$;\r\n\r\n    if (isNumber(iterator)) {\r\n      try {\r\n        validate({ 1: iterator }, { 1: ['intLike', '>=0'] }, 'Elem#setOf');\r\n      } catch (e) {\r\n        throw new Error('2nd argument must be either or non-negative integer, or object! (at Elem#setOf)');\r\n      }\r\n\r\n      iterator = array(iterator).$;\r\n    }\r\n\r\n    return this.object((elems, elem, index) => {\r\n      iterate(iterator, (value, key) => {\r\n        const created = new Elem(elem).create(type);\r\n\r\n        callback(created.$[0], value, key, iterator, elem, index);\r\n\r\n        elems.add(created);\r\n      });\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#show\r\n   * @public\r\n   * @returns {Elem} Returns this.\r\n   * @description Shows all elements in the set.\r\n   * If an element was hidden using {@link Elem#hide} previous display is set.\r\n   *\r\n   * @example\r\n   * elem.show();\r\n   */\r\n  show() {\r\n    return this.forEach((elem) => {\r\n      const { dwayneData } = elem;\r\n\r\n      elem = new Elem(elem);\r\n\r\n      if (elem.css('display').indexOf('none') === 0) {\r\n        elem.css('display', dwayneData.previousDisplay);\r\n      }\r\n\r\n      dwayneData.previousDisplay = '';\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#text\r\n   * @public\r\n   * @param {String|ElemValueCallback|*} [text] - Text to write instead of current text.\r\n   * @returns {Elem|String} If no arguments passed text of the first element in the set returned.\r\n   * Otherwise all elements texts in the set are set to the text argument.\r\n   * @description Gets or sets text.\r\n   *\r\n   * @example\r\n   * elem.text('123');\r\n   * elem.text(); // '123'\r\n   */\r\n  text(text) {\r\n    if (!arguments.length) {\r\n      return this.prop(textProperty);\r\n    }\r\n\r\n    return this.forEach((elem, index) => {\r\n      const txt = elem[textProperty];\r\n\r\n      new Elem(elem).prop(\r\n        textProperty,\r\n        isFunction(text)\r\n          ? text(txt, elem, index)\r\n          : text\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#toggleAttr\r\n   * @public\r\n   * @param {String} attr - Attribute to toggle.\r\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the attribute\r\n   * with the '' value and if falsey method removes the attribute. If not present method adds\r\n   * the attribute if it doesn't exist and removes if it does.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for toggling attributes.\r\n   *\r\n   * @example\r\n   * elem.toggleAttr('attr');\r\n   * elem.toggleAttr('attr', someCondition);\r\n   */\r\n  toggleAttr(attr, condition) {\r\n    return this.forEach((elem) => {\r\n      elem = new Elem(elem);\r\n\r\n      if (arguments.length < 2 ? !elem.hasAttr(attr) : condition) {\r\n        elem.attr(attr, '');\r\n      } else {\r\n        elem.removeAttr(attr);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#toggleAttr\r\n   * @public\r\n   * @param {String} cls - Class to toggle.\r\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the class\r\n   * and if falsey method removes the class. If not present method adds\r\n   * the class if it doesn't exist and removes if it does.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for toggling classes.\r\n   *\r\n   * @example\r\n   * elem.toggleClass('cls');\r\n   * elem.toggleClass('cls', someCondition);\r\n   */\r\n  toggleClass(cls, condition) {\r\n    return (arguments.length < 2 ? !this.hasClass(cls) : condition)\r\n      ? this.addClass(cls)\r\n      : this.removeClass(cls);\r\n  }\r\n\r\n  get toStringTag() {\r\n    return toStringTag(this.$$);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#up\r\n   * @public\r\n   * @param {Integer} [level = 1] - What level up along the tree should be the parent.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Creates a collection of parents of level &lt;level&gt;.\r\n   *\r\n   * @example\r\n   * elem.up();\r\n   * elem.up(2);\r\n   */\r\n  up(level = 1) {\r\n    validate([level], [['intLike', '>=0']], 'Elem#up');\r\n\r\n    level = Number(level);\r\n\r\n    return this.object((elems, elem) => {\r\n      let n = level;\r\n\r\n      while (n-- && elem) {\r\n        elem = elem.parentNode;\r\n      }\r\n\r\n      elems.add(elem);\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#validate\r\n   * @public\r\n   * @param {ValidateCallback} [validator] - If present, function that validates inputs.\r\n   * @returns {Elem|Object.<String, Error|*>|null}\r\n   * If a callback argument provided returns this. If no arguments provided returns either an object\r\n   * with input names keys and errors values or null if no errors found.\r\n   * @description If a callback argument provided adds it to the element validators list.\r\n   * If no arguments provided validates every input element in the set with its own functions.\r\n   * If an element is a form it validates all input elements inside it. After the validation\r\n   * fires 'validate' event with 'valid' and 'error' (if form it's errors) properties.\r\n   *\r\n   * @example\r\n   * form.on('input change', 'input', (value, input) => {\r\n   *   input = D(input);\r\n   *\r\n   *   if (Number(value) % 3) {\r\n   *     input.addClass('invalid');\r\n   *\r\n   *     throw new Error('The value should be divided by 3!');\r\n   *   }\r\n   *\r\n   *   input.removeClass('invalid');\r\n   * });\r\n   */\r\n  validate(validator) {\r\n    validate([validator], ['function||!'], 'Elem#validate');\r\n\r\n    if (validator) {\r\n      return this.forEach(({ dwayneData }) => {\r\n        dwayneData.validators.push(validator);\r\n      });\r\n    }\r\n\r\n    const errors = new Super({ errors: null });\r\n\r\n    this\r\n      .filter(`${ inputElements }, form`)\r\n      .forEach((elem, index) => {\r\n        if (getName(elem) === 'form') {\r\n          let formErrors = { errors: null };\r\n          const form = new Elem(elem);\r\n          const inputs = form.find(inputElements);\r\n\r\n          inputs.forEach((input, index) => {\r\n            validatorWrap(input, index, formErrors);\r\n          });\r\n\r\n          errors.deepAssign(formErrors);\r\n\r\n          formErrors = formErrors.errors;\r\n\r\n          form.dispatch('validate', {}, {\r\n            valid: !formErrors,\r\n            errors: formErrors\r\n          });\r\n\r\n          return inputs.forEach((input) => {\r\n            const inputError = (formErrors || {})[input.name];\r\n\r\n            new Elem(input).dispatch('validate', {}, {\r\n              valid: !inputError,\r\n              error: inputError || null\r\n            });\r\n          });\r\n        }\r\n\r\n        let inputError = { errors: null };\r\n\r\n        validatorWrap(elem, index, inputError);\r\n        errors.deepAssign(inputError);\r\n\r\n        inputError = (inputError.errors || {})[elem.name];\r\n\r\n        new Elem(elem).dispatch('validate', {}, {\r\n          valid: !inputError,\r\n          error: inputError || null\r\n        });\r\n      });\r\n\r\n    function validatorWrap(input, index, errors) {\r\n      try {\r\n        if (input.validity && !input.validity.valid) {\r\n          throw new Error(input.validationMessage);\r\n        }\r\n\r\n        input.dwayneData.validators.forEach((validator) => {\r\n          validator(input.value, input, index);\r\n        });\r\n      } catch (err) {\r\n        (errors.errors = errors.errors || {})[input.name] = err;\r\n      }\r\n    }\r\n\r\n    if (errors.every((error) => isNull(error))) {\r\n      return null;\r\n    }\r\n\r\n    return errors.$.errors;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#width\r\n   * @public\r\n   * @param {*|ElemValueCallback} [width] - Width to set.\r\n   * @returns {Elem|String} If no arguments passed width of the first element in the set returned.\r\n   * Otherwise all elements widths in the set are set to the width argument.\r\n   * @description Gets or sets width.\r\n   *\r\n   * @example\r\n   * elem.width(123);\r\n   * elem.width(); // 123\r\n   */\r\n  width(width) {\r\n    return this.prop.apply(this, new Arr(arguments).unshift('width').$);\r\n  }\r\n}\r\n\r\ndefineProperties(Elem.prototype, {\r\n  [Symbol.toStringTag]: 'Elem'\r\n});\r\n\r\n/**\r\n * @const {Elem} win\r\n * @type {Elem}\r\n * @public\r\n * @description Elem instance of window.\r\n */\r\nconst win = new Elem(global);\r\n\r\n/**\r\n * @const {Elem} doc\r\n * @type {Elem}\r\n * @public\r\n * @description Elem instance of document.\r\n */\r\nconst doc = new Elem(nativeDocument);\r\n\r\n/**\r\n * @const {Elem} html\r\n * @type {Elem}\r\n * @public\r\n * @description Elem instance of document.documentElement.\r\n */\r\nconst html = new Elem(nativeDocument.documentElement);\r\n\r\n/**\r\n * @const {Elem} body\r\n * @type {Elem}\r\n * @public\r\n * @description Elem instance of document.body.\r\n */\r\nconst body = new Elem(nativeDocument.body);\r\n\r\n/**\r\n * @const {Elem} head\r\n * @type {Elem}\r\n * @public\r\n * @description Elem instance of document.head.\r\n */\r\nconst head = new Elem(nativeDocument.head);\r\n\r\nconst elements = new Arr(htmlElements).concat(svgElements).$;\r\nconst props = new Arr(elements).map((type) => new Str(type).toCamelCase().$).$;\r\n\r\ndynamicDefineProperties(Elem.prototype, props, (elem, i) => function () {\r\n  return this.create.apply(this, new Arr(arguments).unshift(elements[i]).$);\r\n});\r\n\r\ndynamicDefineProperties(Elem.prototype, canvasGetMethods, (method) => function () {\r\n  const ctx = this.ctx();\r\n\r\n  if (ctx) {\r\n    return ctx[method].apply(ctx, arguments);\r\n  }\r\n});\r\n\r\ndynamicDefineProperties(Elem.prototype, canvasRestMethods, (method) => function () {\r\n  const ctx = this.ctx();\r\n\r\n  if (ctx) {\r\n    ctx[method].apply(ctx, arguments);\r\n  }\r\n\r\n  return this;\r\n});\r\n\r\n/**\r\n * @function toFind\r\n * @private\r\n * @param {Element|Elem|String} elem - Element, selector of Elements or Elem.\r\n * @returns {Elem} Instance of Elem.\r\n */\r\nfunction toFind(elem) {\r\n  if (isElem(elem)) {\r\n    return elem;\r\n  }\r\n\r\n  if (isString(elem)) {\r\n    elem = find(elem);\r\n  }\r\n\r\n  return new Elem(elem);\r\n}\r\n\r\n/**\r\n * @function isElem\r\n * @private\r\n * @param {*} value - Value to check if it's Elem.\r\n * @returns {Boolean} If the value is Elem.\r\n * @description Returns if the value is Elem or not.\r\n */\r\nfunction isElem(value) {\r\n  return value instanceof Elem;\r\n}\r\n\r\n/**\r\n * @function isWindow\r\n * @private\r\n * @param {*} value - Value to check if it's Window.\r\n * @returns {Boolean} If the value is Window.\r\n * @description Returns if the value is Window or not.\r\n */\r\nfunction isWindow(value) {\r\n  return toStringTag(value) === 'Window';\r\n}\r\n\r\n/**\r\n * @function isHTMLDocument\r\n * @private\r\n * @param {*} value - Value to check if it's HTMLDocument.\r\n * @returns {Boolean} If the value is HTMLDocument.\r\n * @description Returns if the value is HTMLDocument or not.\r\n */\r\nfunction isHTMLDocument(value) {\r\n  return toStringTag(value) === 'HTMLDocument';\r\n}\r\n\r\n/**\r\n * @function isDocumentFragment\r\n * @private\r\n * @param {*} value - Value to check if it's a DocumentFragment.\r\n * @returns {Boolean} If the value is a DocumentFragment.\r\n * @description Returns if the value is a DocumentFragment or not.\r\n */\r\nfunction isDocumentFragment(value) {\r\n  return toStringTag(value) === 'DocumentFragment';\r\n}\r\n\r\n/**\r\n * @function isStyleRule\r\n * @private\r\n * @param {*} value - Value to check if it's a style rule.\r\n * @returns {Boolean} If the value is a style rule.\r\n * @description Returns if the value is a style rule or not.\r\n */\r\nfunction isStyleRule(value) {\r\n  return toStringTag(value) === 'CSSStyleRule';\r\n}\r\n\r\n/**\r\n * @function\r\n * @private\r\n * @param {*} value - Value to check if it's Comment or Text.\r\n * @returns {Boolean} If the value is HTMLDocument.\r\n * @description Returns if the value is Comment or Text or not.\r\n */\r\nfunction isCommentOrText(value) {\r\n  const tag = toStringTag(value);\r\n\r\n  return tag === 'Comment' || tag === 'Text';\r\n}\r\n\r\n/**\r\n * @function getElem\r\n * @private\r\n * @param {Elem} elem - Element to check.\r\n * @returns {Element} The argument or a fallback if needed.\r\n */\r\nfunction getElem(elem) {\r\n  return isElement(elem.$[0]) ? elem.$[0] : emptyDiv;\r\n}\r\n\r\n/**\r\n * @function getName\r\n * @private\r\n * @param {Element} [elem] - Element which name is needed to know.\r\n * @returns {String} Element name.\r\n */\r\nfunction getName(elem) {\r\n  return (elem && elem.nodeName && elem.nodeName.toLowerCase()) || '';\r\n}\r\n\r\n/**\r\n * @function addDwayneData\r\n * @private\r\n * @param {Element} elem - Element to add dwayneData to.\r\n * @returns {void}\r\n */\r\nfunction addDwayneData(elem) {\r\n  if (!{}.hasOwnProperty.call(elem, 'dwayneData') && !isWindow(elem)) {\r\n    /**\r\n     * @member Element#dwayneData\r\n     * @type {Object}\r\n     * @protected\r\n     * @property {String} previousDisplay - Parameter used for hiding/showing elements.\r\n     * @property {Object.<String, Super>} removeListeners - Parameter used for remove event listeners.\r\n     * @property {CanvasRenderingContext2D} [ctx] - Canvas rendering context.\r\n     * @property {Arr} validators - Validators assigned to element.\r\n     * @description D data.\r\n     */\r\n    Object.defineProperty(elem, 'dwayneData', {\r\n      value: {\r\n        previousDisplay: '',\r\n        listeners: {},\r\n        ctx: getName(elem) === 'canvas' && elem.getContext('2d'),\r\n        validators: new Arr([])\r\n      }\r\n    });\r\n  } else if (isWindow(elem) && !windowsDwayneData.some(({ element }) => element === elem)) {\r\n    windowsDwayneData.push({\r\n      element: elem,\r\n      listeners: {}\r\n    });\r\n  }\r\n}\r\n\r\nconstructors[2].push({\r\n  check: (elem) => (\r\n    isElement(elem) ||\r\n    isWindow(elem) ||\r\n    isHTMLDocument(elem) ||\r\n    isCommentOrText(elem) ||\r\n    isDocumentFragment(elem) ||\r\n    /^(HTMLCollection|NodeList)$/.test(toStringTag(elem))\r\n  ),\r\n  cls: Elem\r\n});\r\n\r\n/**\r\n * @function find\r\n * @public\r\n * @param {String} selector - Selector to find.\r\n * @param {Element} [base = document] - Base to find in.\r\n * @returns {Elem} New instance of Elem.\r\n * @description Synonym for\r\n * [Document#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Document/querySelectorAll}.\r\n */\r\nfunction find(selector, base = nativeDocument) {\r\n  return new Elem(\r\n    isElement(base) || isHTMLDocument(base)\r\n      ? base.querySelectorAll(String(selector))\r\n      : []\r\n  );\r\n}\r\n\r\n/**\r\n * @function parseHTML\r\n * @public\r\n * @param {String} html - HTML to parse.\r\n * @param {Boolean} [collapseWhiteSpace = false] - If the whitespace should be\r\n * collapsed during the parsing.\r\n * @returns {Elem} New instance of Elem.\r\n * @description Parses HTML and returns a wrap of #document-fragment containing the contents.\r\n *\r\n * @example\r\n * parseHTML('<div>123</div>'); // Elem\r\n */\r\nfunction parseHTML(html, collapseWhiteSpace) {\r\n  const json = markupToJSON(html, collapseWhiteSpace);\r\n  const template = doc.template();\r\n  const elem = new Elem(template.$[0].content);\r\n\r\n  json.forEach(function forEachNode(node) {\r\n    const {\r\n      name,\r\n      attrs,\r\n      value,\r\n      parent,\r\n      children\r\n    } = node;\r\n\r\n    const parentNode = parent.elem || elem;\r\n    const element = parentNode.create(name);\r\n\r\n    node.elem = element;\r\n\r\n    if (value) {\r\n      element.text(value);\r\n    }\r\n\r\n    if (attrs) {\r\n      element.attr(attrs);\r\n    }\r\n\r\n    if (name === 'template') {\r\n      node.elem = new Elem(element.prop('content'));\r\n    }\r\n\r\n    if (children) {\r\n      children.forEach(forEachNode);\r\n    }\r\n  });\r\n\r\n  return new Elem(elem);\r\n}\r\n\r\n/**\r\n * @function px\r\n * @public\r\n * @param {String|Number} size - String containing pixels value or a number.\r\n * @returns {Number} Number of pixels.\r\n * @description Function for parsing pixel strings.\r\n *\r\n * @example\r\n * px('0px');  // 0\r\n * px('42px'); // 42\r\n */\r\nfunction px(size) {\r\n  return Number(String(size).replace(/px$/, ''));\r\n}\r\n\r\nexport { Elem, win, doc, html, body, head, find, parseHTML, px };\r\n","export function registerDBlock(Block) {\r\n  class DBlock extends Block {\r\n    static template = '<d-elements value=\"{elems}\" />';\r\n\r\n    elems = null;\r\n\r\n    afterConstruct() {\r\n      const { children } = this.$$.parent;\r\n      const { name } = this.args;\r\n      let found;\r\n\r\n      if (name) {\r\n        found = children.find(({ name: nodeName }) => nodeName === `d-block-${ name }`);\r\n\r\n        if (found && found.value.children.length) {\r\n          this.elems = found.value.children;\r\n        }\r\n      } else {\r\n        this.elems = children;\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-block',\r\n    value: DBlock\r\n  };\r\n}\r\n","import { Arr } from '../Arr';\r\nimport { Elem } from '../Elem';\r\nimport { Super } from '../Super';\r\nimport { assign } from '../helpers';\r\n\r\nexport function registerDEach(Block, createBlock) {\r\n  class DEach extends Block {\r\n    constructor(opts) {\r\n      super(opts);\r\n\r\n      const {\r\n        args: {\r\n          item: itemName = '$item',\r\n          index: indexName = '$index'\r\n        }\r\n      } = this;\r\n\r\n      assign(this.$$, {\r\n        uids: new Super({}),\r\n        items: new Arr([]),\r\n        UID: String(this.args.uid),\r\n        itemName,\r\n        indexName\r\n      });\r\n    }\r\n\r\n    afterRender() {\r\n      this.constructValues(this.args.set);\r\n      this.watchArgs('set', (set) => {\r\n        this.constructValues(set);\r\n      });\r\n    }\r\n\r\n    constructValues(set) {\r\n      const {\r\n        elems: {\r\n          start,\r\n          parent: parentElem\r\n        },\r\n        uids,\r\n        parent,\r\n        scope,\r\n        itemName,\r\n        indexName,\r\n        UID\r\n      } = this.$$;\r\n      const { children } = this;\r\n      const $uids = uids.$;\r\n      const newKeys = {};\r\n      const newUIDs = {};\r\n\r\n      new Super(set).forEach((item, index) => {\r\n        scope[itemName] = item;\r\n        scope[indexName] = index;\r\n\r\n        const uid = parent.$$.evaluate(String(UID), null, null, false, false, this);\r\n\r\n        newKeys[uid] = newKeys[uid] || {};\r\n        newKeys[uid][index] = true;\r\n        newUIDs[index] = uid;\r\n      });\r\n\r\n      scope[itemName] = null;\r\n      scope[indexName] = null;\r\n\r\n      uids.forEach((items, uid) => {\r\n        if (!newKeys[uid]) {\r\n          items.forEach((Item) => {\r\n            Item.remove();\r\n          });\r\n\r\n          return;\r\n        }\r\n\r\n        items.splice(Object.keys(newKeys[uid]).length).forEach((Item) => {\r\n          Item.remove();\r\n        });\r\n      });\r\n\r\n      let after = start;\r\n\r\n      new Super(set).forEach((item, index) => {\r\n        const uid = newUIDs[index];\r\n        let block;\r\n\r\n        if ($uids[uid] && $uids[uid].length) {\r\n          block = newKeys[uid][index] = uids.$[uid].shift();\r\n          block.$$.scope[indexName] = index;\r\n          block.$$.scope[itemName] = item;\r\n        } else {\r\n          block = newKeys[uid][index] = createBlock({\r\n            node: {\r\n              itemName,\r\n              indexName,\r\n              item,\r\n              index,\r\n              name: '#d-item',\r\n              block: parent,\r\n              children\r\n            },\r\n            after,\r\n            parent: parentElem,\r\n            parentBlock: this,\r\n            parentScope: parent\r\n          });\r\n        }\r\n\r\n        const {\r\n          start,\r\n          end\r\n        } = block.$$.elems;\r\n\r\n        if (start.prev().$[0] !== after.$[0]) {\r\n          const { content } = block.$$.elems;\r\n\r\n          new Elem([\r\n            start,\r\n            content,\r\n            end\r\n          ]).insertAfter(after);\r\n        }\r\n\r\n        after = end;\r\n      });\r\n\r\n      this.$$.uids = new Super(newKeys).map((items) => (\r\n        new Super(items).values()\r\n      ));\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-each',\r\n    value: DEach\r\n  };\r\n}\r\n","import { Arr } from '../Arr';\r\nimport { Elem } from '../Elem';\r\n\r\nexport function registerDElements(Block, createBlock) {\r\n  class DElements extends Block {\r\n    afterConstruct() {\r\n      this.watchArgs('value', (value) => {\r\n        const {\r\n          children,\r\n          mixins,\r\n          watchersToRemove,\r\n          elems: {\r\n            start,\r\n            content,\r\n            parent\r\n          }\r\n        } = this.$$;\r\n        let after = start;\r\n\r\n        children.forEach((child) => {\r\n          child.remove(true);\r\n        });\r\n        mixins.forEach((mixin) => {\r\n          mixin.remove(true);\r\n        });\r\n        content.remove();\r\n\r\n        this.$$.children = new Arr([]);\r\n        this.$$.mixins = new Arr([]);\r\n        this.$$.watchersToRemove = watchersToRemove.filter(({ watchers, watcher, forDElements }) => {\r\n          if (forDElements) {\r\n            return true;\r\n          }\r\n\r\n          const index = watchers.indexOf(watcher);\r\n\r\n          if (index !== -1) {\r\n            watchers.splice(index, 1);\r\n          }\r\n        });\r\n\r\n        const newContent = new Elem();\r\n\r\n        new Arr(value || []).forEach((child) => {\r\n          const block = createBlock({\r\n            node: child,\r\n            after,\r\n            parent,\r\n            parentBlock: this,\r\n            parentScope: this\r\n          });\r\n\r\n          if (block instanceof Block) {\r\n            const { elems } = block.$$;\r\n\r\n            after = elems.end;\r\n\r\n            newContent.add(elems.start, elems.content, elems.end);\r\n          } else {\r\n            after = block;\r\n\r\n            newContent.add(block);\r\n          }\r\n        });\r\n\r\n        this.$$.elems.content = newContent;\r\n      });\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-elements',\r\n    value: DElements\r\n  };\r\n}\r\n","export function registerDIf(Block) {\r\n  class DIf extends Block {\r\n    static template = '<d-elements value=\"{elems}\"/>';\r\n\r\n    index = Infinity;\r\n    elems = null;\r\n    values = this.children.map((child, i) => {\r\n      const {\r\n        name,\r\n        attrs,\r\n        children\r\n      } = child;\r\n      const cond = this.evaluateAndWatch(name === 'd-else' ? '{true}' : attrs.if || '{true}', (newValue) => {\r\n        if (!!newValue === this.values.$[i]) {\r\n          return;\r\n        }\r\n\r\n        this.values.$[i] = !!newValue;\r\n\r\n        if (i > this.index) {\r\n          return;\r\n        }\r\n\r\n        if (i < this.index) {\r\n          this.index = i;\r\n          this.elems = children;\r\n\r\n          return;\r\n        }\r\n\r\n        const found = this.values.find(Boolean);\r\n\r\n        if (found) {\r\n          this.index = found.key;\r\n          this.elems = this.children.$[found.key].children;\r\n        } else {\r\n          this.index = Infinity;\r\n          this.elems = null;\r\n        }\r\n      });\r\n\r\n      if (cond && this.index === Infinity) {\r\n        this.index = i;\r\n        this.elems = children;\r\n      }\r\n\r\n      return cond;\r\n    });\r\n  }\r\n\r\n  return {\r\n    name: 'd-if',\r\n    value: DIf\r\n  };\r\n}\r\n","export function registerDItem(Block) {\r\n  class DItem extends Block {\r\n    static template = '<d-elements value=\"{children}\"/>';\r\n  }\r\n\r\n  return {\r\n    name: '#d-item',\r\n    value: DItem\r\n  };\r\n}\r\n","import { Arr } from '../Arr';\r\nimport { Super } from '../Super';\r\n\r\nexport function registerDSwitch(Block) {\r\n  class DSwitch extends Block {\r\n    static template = '<d-elements value=\"{elems}\"/>';\r\n\r\n    index = Infinity;\r\n    elems = null;\r\n\r\n    constructor(opts) {\r\n      super(opts);\r\n\r\n      const {\r\n        args,\r\n        args: { value }\r\n      } = this;\r\n      let wasDefault;\r\n\r\n      this.values = this.children.object((values, child, i) => {\r\n        const {\r\n          name,\r\n          attrs,\r\n          children\r\n        } = child;\r\n\r\n        if (wasDefault) {\r\n          return;\r\n        }\r\n\r\n        if (name !== 'd-case' && name !== 'd-default') {\r\n          return;\r\n        }\r\n\r\n        if (name === 'd-default') {\r\n          wasDefault = true;\r\n        }\r\n\r\n        let val;\r\n\r\n        if (name === 'd-default') {\r\n          val = args.value;\r\n        } else {\r\n          val = this.evaluateAndWatch(attrs.if || '{undefined}', (newValue) => {\r\n            if (this.equals(this.values.$[i].value, newValue)) {\r\n              return;\r\n            }\r\n\r\n            this.values.$[i].value = newValue;\r\n\r\n            if (i > this.index) {\r\n              return;\r\n            }\r\n\r\n            if (i < this.index) {\r\n              this.index = i;\r\n              this.elems = children;\r\n\r\n              return;\r\n            }\r\n\r\n            const found = this.values.find(({ value }) => (\r\n              this.equals(value, args.value)\r\n            ));\r\n\r\n            if (found) {\r\n              this.index = found.key;\r\n              this.elems = found.value.children;\r\n            } else {\r\n              this.index = Infinity;\r\n              this.elems = null;\r\n            }\r\n          });\r\n        }\r\n\r\n        if (this.equals(val, value) && this.index === Infinity) {\r\n          this.index = i;\r\n          this.elems = children;\r\n        }\r\n\r\n        values.push({\r\n          name,\r\n          children,\r\n          value: val\r\n        });\r\n      }, new Arr([]));\r\n    }\r\n\r\n    afterConstruct() {\r\n      this.watchArgs('value', (newValue) => {\r\n        this.index = Infinity;\r\n        this.values.forEach(({ name, value, children }, i) => {\r\n          const val = name === 'd-default'\r\n            ? newValue\r\n            : value;\r\n\r\n          if (this.equals(val, newValue) && this.index === Infinity) {\r\n            this.index = i;\r\n            this.elems = children;\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    equals(value1, value2) {\r\n      return new Super(value1).equals(value2);\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-switch',\r\n    value: DSwitch\r\n  };\r\n}\r\n","import { isNil } from '../helpers';\r\n\r\nexport function registerDText(Block) {\r\n  class DText extends Block {\r\n    static template = '<d-elements value=\"{[{ name: \\'#text\\', value: text }]}\"/>';\r\n\r\n    text = '';\r\n\r\n    afterConstruct() {\r\n      this.text = isNil(this.args.value) ? '' : this.args.value;\r\n\r\n      this.watchArgs('value', (newValue) => {\r\n        this.text = isNil(newValue) ? '' : newValue;\r\n      });\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-text',\r\n    value: DText\r\n  };\r\n}\r\n","import { Super } from '../Super';\r\n\r\nexport function registerDAttr(Mixin) {\r\n  class DAttr extends Mixin {\r\n    afterUpdate(newValue, oldValue) {\r\n      const { elem } = this;\r\n\r\n      newValue = new Super(newValue).$;\r\n\r\n      new Super(oldValue).forEach((value, prop) => {\r\n        if (!newValue[prop]) {\r\n          elem.removeAttr(prop);\r\n        }\r\n      });\r\n      elem.attr(newValue);\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-attr',\r\n    value: DAttr\r\n  };\r\n}\r\n\r\n","import { isFunction } from '../helpers';\r\n\r\nexport function registerDBind(Mixin) {\r\n  class DBind extends Mixin {\r\n    afterUpdate(value) {\r\n      if (this.off) {\r\n        this.off();\r\n      }\r\n\r\n      if (!isFunction(value)) {\r\n        return;\r\n      }\r\n\r\n      this.off = this.elem.on(this.match[0], value);\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-bind',\r\n    value: DBind\r\n  };\r\n}\r\n","import { Super } from '../Super';\nimport { isArray, isObject, isString, iterate } from '../helpers';\n\nexport function registerDClass(Mixin) {\n  class DClass extends Mixin {\n    afterUpdate(newValue, oldValue) {\n      const { elem } = this;\n\n      newValue = new Super(newValue).$;\n      oldValue = new Super(oldValue).$;\n\n      if (isArray(newValue)) {\n        iterate(oldValue, (cls) => {\n          if (isString(cls) && !newValue[cls]) {\n            elem.removeClass(cls);\n          }\n        });\n        iterate(newValue, (cls) => {\n          if (isString(cls)) {\n            elem.addClass(cls);\n          }\n        });\n      } else if (isString(newValue)) {\n        if (isString(oldValue)) {\n          elem.removeClass(oldValue);\n        }\n\n        elem.addClass(newValue);\n      } else if (isObject(newValue)) {\n        iterate(oldValue, (val, cls) => {\n          if (val && !newValue[cls]) {\n            elem.removeClass(cls);\n          }\n        });\n        iterate(newValue, (val, cls) => {\n          if (val) {\n            elem.addClass(cls);\n          }\n        });\n      } else if (isString(oldValue)) {\n        elem.removeClass(oldValue);\n      } else if (isArray(oldValue)) {\n        iterate(oldValue, (cls) => {\n          if (isString(cls)) {\n            elem.removeClass(cls);\n          }\n        });\n      } else if (isObject(oldValue)) {\n        iterate(oldValue, (val, cls) => {\n          if (val) {\n            elem.removeClass(cls);\n          }\n        });\n      }\n    }\n  }\n\n  return {\n    name: 'd-class',\n    value: DClass\n  };\n}\n","import { isString } from '../helpers';\r\n\r\nexport function registerDElem(Mixin) {\r\n  class DElem extends Mixin {\r\n    afterUpdate(newValue, oldValue) {\r\n      const { parent } = this.$$;\r\n\r\n      if (newValue !== oldValue && isString(oldValue)) {\r\n        delete parent[oldValue];\r\n      }\r\n\r\n      if (isString(newValue)) {\r\n        parent[newValue] = this.elem;\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-elem',\r\n    value: DElem\r\n  };\r\n}\r\n","export function registerDHide(Mixin) {\r\n  class DHide extends Mixin {\r\n    afterUpdate(value) {\r\n      const { elem } = this;\r\n\r\n      if (value) {\r\n        elem.hide();\r\n      } else {\r\n        elem.show();\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-hide',\r\n    value: DHide\r\n  };\r\n}\r\n","export function registerDOn(Mixin) {\r\n  class DOn extends Mixin {\r\n    static evaluate = false;\r\n\r\n    constructor(opts) {\r\n      super(opts);\r\n\r\n      this.elem.on(this.match[0], () => {\r\n        this.evaluateOnce();\r\n      });\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-on',\r\n    value: DOn\r\n  };\r\n}\r\n","export function registerDShow(Mixin) {\r\n  class DShow extends Mixin {\r\n    afterUpdate(value) {\r\n      const { elem } = this;\r\n\r\n      if (value) {\r\n        elem.show();\r\n      } else {\r\n        elem.hide();\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-show',\r\n    value: DShow\r\n  };\r\n}\r\n","import { Super } from '../Super';\r\n\r\nexport function registerDStyle(Mixin) {\r\n  class DStyle extends Mixin {\r\n    afterUpdate(newValue, oldValue) {\r\n      const { elem } = this;\r\n\r\n      newValue = new Super(newValue).$;\r\n\r\n      new Super(oldValue).forEach((value, prop) => {\r\n        if (!newValue[prop]) {\r\n          elem.removeCSS(prop);\r\n        }\r\n      });\r\n      elem.css(newValue);\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-style',\r\n    value: DStyle\r\n  };\r\n}\r\n","import { isNil } from '../helpers';\r\n\r\nexport function registerDText(Mixin) {\r\n  class DText extends Mixin {\r\n    afterUpdate(value) {\r\n      this.elem.text(\r\n        isNil(value)\r\n          ? ''\r\n          : `${ value }`\r\n      );\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-text',\r\n    value: DText\r\n  };\r\n}\r\n","import { isFunction } from '../helpers';\r\n\r\nexport function registerDValidate(Mixin) {\r\n  class DValidate extends Mixin {\r\n    static evaluate = false;\r\n\r\n    constructor(opts) {\r\n      super(opts);\r\n\r\n      const { elem } = this;\r\n      const validator = this.evaluateOnce();\r\n\r\n      if (isFunction(validator)) {\r\n        elem.validate(validator);\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-validate',\r\n    value: DValidate\r\n  };\r\n}\r\n","import { Arr } from '../Arr';\nimport { switcher } from '../Switcher';\nimport { isArray, isNil } from '../helpers';\n\nconst propSwitcher = switcher('strictEquals', (type, elem) => (\n  elem.hasAttr('contenteditable') || elem.hasAttr('contentEditable')\n    ? 'text'\n    : 'value'\n))\n  .case('input', (type) => {\n    if (type === 'file') {\n      return 'files';\n    }\n\n    return type === 'radio' || type === 'checkbox'\n      ? 'checked'\n      : 'value';\n  });\nconst setValueSwitcher = switcher('strictEquals', (value) => value)\n  .case('input', (value, type, inputValue) => {\n    if (type !== 'radio' && type !== 'checkbox') {\n      return value;\n    }\n\n    if (type === 'radio') {\n      return value === inputValue;\n    }\n\n    return value.indexOf(inputValue) !== -1;\n  });\nconst getValueSwitcher = switcher('strictEquals', (value) => value)\n  .case('input', (value, type, inputValue, values) => {\n    if (type !== 'radio' && type !== 'checkbox') {\n      return value;\n    }\n\n    if (type === 'radio') {\n      return value\n        ? inputValue\n        : null;\n    }\n\n    if (value) {\n      if (values) {\n        return values.indexOf(inputValue) === -1\n          ? new Arr(values).concat(inputValue).$\n          : values;\n      }\n\n      return [inputValue];\n    }\n\n    if (!isArray(values)) {\n      return [];\n    }\n\n    const index = values.indexOf(inputValue);\n\n    if (index !== -1) {\n      return [\n        ...new Arr(values).slice(0, index).$,\n        ...new Arr(values).slice(index + 1).$\n      ];\n    }\n\n    return values;\n  });\nconst listenerSwitcher = switcher('strictEquals', 'input')\n  .case('select', 'change')\n  .case('input', (type) => (\n    type === 'radio'\n    || type === 'checkbox'\n    || type === 'color'\n    || type === 'file'\n      ? 'change'\n      : 'input'\n  ));\n\nexport function registerDValue(Mixin) {\n  class DValue extends Mixin {\n    static evaluate = false;\n\n    constructor(opts) {\n      super(opts);\n\n      const {\n        $$: {\n          _value,\n          parent\n        },\n        elem\n      } = this;\n      const type = elem.prop('type');\n\n      this.prop = propSwitcher(elem.name, [type, elem]);\n      this.type = type;\n\n      const initialScopeValue = parent.$$.evaluate(`{${ _value }}`, (newValue) => {\n        this.setProp(newValue);\n      }, this);\n      const initialElemValue = this.getProp(initialScopeValue);\n\n      if (isNil(initialScopeValue) || type === 'checkbox') {\n        parent[_value] = initialElemValue;\n      } else {\n        this.setProp(initialScopeValue);\n      }\n\n      elem.on(listenerSwitcher(elem.name, [type]), (e) => {\n        if (e.target === elem.$[0]) {\n          parent[_value] = this.getProp(parent[_value]);\n        }\n      });\n    }\n\n    setProp(value) {\n      const {\n        elem,\n        prop,\n        type\n      } = this;\n\n      if (prop === 'text') {\n        elem.text(value);\n      } else {\n        elem.prop(prop, setValueSwitcher(elem.name, [value, type, elem.$[0].value]));\n      }\n    }\n\n    getProp(values) {\n      const {\n        elem,\n        prop,\n        type\n      } = this;\n\n      return prop === 'text'\n        ? elem.text()\n        : getValueSwitcher(elem.name, [elem.prop(prop), type, elem.$[0].value, values]);\n    }\n  }\n\n  return {\n    name: 'd-value',\n    value: DValue\n  };\n}\n","/**\r\n * @module Block\r\n * @private\r\n * @mixin\r\n * @description Exports Block class.\r\n */\r\n\r\nimport { Arr } from './Arr';\r\nimport { find, doc, Elem } from './Elem';\r\nimport { Super } from './Super';\r\nimport {\r\n  iterate, defineProperties, validate,\r\n  isFunction, isNil, isUndefined\r\n} from './helpers';\r\nimport * as Blocks from './blocks';\r\nimport * as Mixins from './mixins';\r\nimport { htmlAllowedTagSymbols, htmlAllowedAttrSymbols } from './constants';\r\nimport markupToJSON from './helpers/markupToJSON';\r\n\r\n/**\r\n * @callback Watcher\r\n * @param {*} newValue - New value.\r\n * @param {*} oldValue - Old value.\r\n */\r\n\r\n/**\r\n * @callback Wrapper\r\n * @param {Block} Block class to wrap.\r\n * @returns {Block} New Block class.\r\n */\r\n\r\nconst blocks = Object.create(null);\r\nconst mixins = Object.create(null);\r\nconst isPrototypeOf = {}.isPrototypeOf;\r\nconst tagName = new RegExp(`^${ htmlAllowedTagSymbols }$`, 'i');\r\nconst attrName = new RegExp(`^${ htmlAllowedAttrSymbols }$`);\r\nconst expressionRegExp = /^\\{[\\s\\S]+\\}$/;\r\nconst { document } = global;\r\nconst svgNS = 'http://www.w3.org/2000/svg';\r\nlet onEvalError;\r\nlet evalMode;\r\nlet getting;\r\nlet changed;\r\n\r\n/**\r\n * @class Block\r\n * @public\r\n * @param {Object} opts - Element options.\r\n * @returns {Block} Instance of Block.\r\n * @description Class for dynamic templating.\r\n *\r\n * @example\r\n * import { D, Block, initApp, registerBlock } from 'dwayne';\r\n *\r\n * class App extends Block {\r\n *   static template = '<Hello text=\"{text}\"/>';\r\n *\r\n *   constructor(args, children) {\r\n *     super(args, children);\r\n *\r\n *     this.text = 'world (0)';\r\n *     this.times = 0;\r\n *\r\n *     this.setInterval();\r\n *   }\r\n *\r\n *   setInterval() {\r\n *     D(1000).interval(() => {\r\n *       this.text = `world (${ ++this.times })`;\r\n *     });\r\n *   }\r\n * }\r\n *\r\n * class Hello extends Block {\r\n *   static template = 'Hello, <d-text value=\"{args.text}\"/>!';\r\n * }\r\n *\r\n * Block.App = App;\r\n * Block.Hello = Hello;\r\n *\r\n * initApp();\r\n */\r\nclass Block {\r\n  /**\r\n   * @member {Boolean} [Block.collapseWhiteSpace = true]\r\n   * @type {Boolean}\r\n   * @public\r\n   * @description If the whitespace between html elements and\r\n   * in the start and the end inside the tag should be omitted during parsing.\r\n   */\r\n  static collapseWhiteSpace = true;\r\n\r\n  /**\r\n   * @member {Object} [Block.defaultArgs = true]\r\n   * @type {Object}\r\n   * @public\r\n   * @description Provide default args if that args may not appear in the args\r\n   * (using \"d-rest\") but you use them in your template and want them to be watched.\r\n   */\r\n  static defaultArgs = {};\r\n\r\n  static get onEvalError() {\r\n    return onEvalError;\r\n  }\r\n\r\n  static set onEvalError(listener) {\r\n    if (isFunction(listener)) {\r\n      onEvalError = listener;\r\n    } else {\r\n      onEvalError = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method Block.wrap\r\n   * @public\r\n   * @param {Wrapper} func - Function that returns wrapped block.\r\n   * @returns {Block} New block.\r\n   * @description Method for wrapping blocks into another blocks.\r\n   * It is considered best practice to just extends the old block with a new one.\r\n   *\r\n   * @example\r\n   * class MyBlock extends Block {\r\n   *   static template = '<div>123</div>';\r\n   * }\r\n   *\r\n   * MyBlock.wrap((Block) => {\r\n   *   return class extends Block {\r\n   *     static template = `<section class=\"wrapper\">${ Block.template }</section>`;\r\n   *\r\n   *     constructor() {\r\n   *       this.additionalVar = 'additional';\r\n   *     }\r\n   *   };\r\n   * });\r\n   */\r\n  static wrap(func) {\r\n    validate([func], ['function']);\r\n\r\n    return func(this);\r\n  }\r\n\r\n  constructor(opts) {\r\n    const {\r\n      name,\r\n      args: originalArgs,\r\n      children,\r\n      block,\r\n      parent,\r\n      parentBlock,\r\n      parentScope\r\n    } = opts;\r\n    const watchersToRemove = new Arr([]);\r\n\r\n    Object.defineProperties(this, {\r\n      /**\r\n       * @member {Block} Block#$\r\n       * @type {Block}\r\n       * @public\r\n       * @description This.\r\n       */\r\n      $: {\r\n        value: this\r\n      },\r\n\r\n      /**\r\n       * @member {Object} Block#$$\r\n       * @type {Object}\r\n       * @protected\r\n       * @property {Object} args - Private args scope.\r\n       * @property {Arr} children - Child blocks.\r\n       * @property {Arr} mixins - Child mixins.\r\n       * @property {Object} elems - Elements connected to the block.\r\n       * @property {Elem} elems.parent - Parent element.\r\n       * @property {Elem} elems.start - Start comment block.\r\n       * @property {Elem} elems.end - End comment block.\r\n       * @property {Elem} elems.content - Content elements.\r\n       * @property {Function} evaluate - Evaluate function.\r\n       * @property {Object} global - Private global scope.\r\n       * @property {Object} locals - Private locals scope.\r\n       * @property {Arr} watchersToRemove - Watchers to remove before removing element.\r\n       */\r\n      $$: {\r\n        value: {\r\n          name,\r\n          parent: parentScope,\r\n          parentBlock,\r\n          children: new Arr([]),\r\n          mixins: new Arr([]),\r\n          Block: block,\r\n          elems: {\r\n            start: doc.createComment(` ${ name }: start `),\r\n            end: doc.createComment(` ${ name }: end `),\r\n            content: new Elem(),\r\n            parent\r\n          },\r\n          watchersToRemove,\r\n          evaluate: (expression, onChange, instance, forDElements, forDItem, forDEach) => {\r\n            if (!expressionRegExp.test(expression)) {\r\n              return expression;\r\n            }\r\n\r\n            forDElements = !!forDElements;\r\n            forDItem = !!forDItem;\r\n            expression = expression.replace(/^\\{|\\}$/g, '');\r\n\r\n            const store = (name === '#d-item' && !forDItem) || forDEach\r\n              ? (forDEach || this).$$.scope\r\n              : this;\r\n\r\n            /* eslint no-new-func: 0 */\r\n            const { watchersToRemove } = instance ? instance.$$ : {};\r\n            const func = new Function(\r\n              '',\r\n              'with(document.DwayneStore){$$.expr=eval(\"$$.expr=\"+$$.expr);return $$.expr}'\r\n            );\r\n\r\n            return evaluate.call(this);\r\n\r\n            function evaluate() {\r\n              let result;\r\n\r\n              if (onChange) {\r\n                evalMode = true;\r\n                getting = new Arr([]);\r\n              }\r\n\r\n              store.$$.expr = expression;\r\n              document.DwayneStore = store;\r\n\r\n              try {\r\n                result = func();\r\n              } catch (err) {\r\n                if (onEvalError) {\r\n                  onEvalError(err);\r\n                }\r\n              }\r\n\r\n              if (onChange) {\r\n                const localWatchers = new Arr([]);\r\n\r\n                getting.forEach((watchers) => {\r\n                  const watcher = () => {\r\n                    const newResult = evaluate.call(this);\r\n\r\n                    if (newResult !== result) {\r\n                      onChange(newResult, result);\r\n                    }\r\n                  };\r\n                  const watcherBlock = {\r\n                    forDElements,\r\n                    watcher,\r\n                    watchers\r\n                  };\r\n\r\n                  watcher.onRemove = () => {\r\n                    localWatchers.forEach((watcherBlock) => {\r\n                      const {\r\n                        watcher,\r\n                        watchers\r\n                      } = watcherBlock;\r\n                      const index1 = watchersToRemove.indexOf(watcherBlock);\r\n                      const index2 = watchers.indexOf(watcher);\r\n\r\n                      if (index1 !== -1) {\r\n                        watchersToRemove.splice(index1, 1);\r\n                      }\r\n\r\n                      if (index2 !== -1) {\r\n                        watchers.splice(index2, 1);\r\n                      }\r\n                    });\r\n                  };\r\n\r\n                  localWatchers.push(watcherBlock);\r\n                  watchersToRemove.push(watcherBlock);\r\n                  watchers.push(watcher);\r\n                });\r\n\r\n                evalMode = false;\r\n                getting = new Arr([]);\r\n              }\r\n\r\n              store.$$.expr = null;\r\n              document.DwayneStore = null;\r\n\r\n              return result;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    const args = new Super(originalArgs).map((value, arg) => {\r\n      if (name === 'd-each' && (\r\n        arg === 'item'\r\n        || arg === 'index'\r\n        || arg === 'uid'\r\n      )) {\r\n        return value;\r\n      }\r\n\r\n      const forDElements = name === 'd-elements' && arg === 'value';\r\n\r\n      return parentScope.$$.evaluate(value, (value) => {\r\n        this.args[arg] = value;\r\n      }, this, forDElements, forDElements && parentBlock.$$.name === '#d-item');\r\n    }).$;\r\n\r\n    this.args = args;\r\n    this.children = children || new Arr([]);\r\n    this.global = Object.create(\r\n      parentScope\r\n        ? Object.create(parentScope.global)\r\n        : null\r\n    );\r\n\r\n    this.$$.elems.start.$[0].DwayneBlock = this;\r\n    this.$$.elems.end.$[0].DwayneBlock = this;\r\n\r\n    if (parentBlock) {\r\n      parentBlock.$$.children.push(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method Block#afterConstruct\r\n   * @public\r\n   * @description Is called after block construction (including all scopes)\r\n   * but before rendering the block and its children.\r\n   */\r\n  afterConstruct() {}\r\n\r\n  /**\r\n   * @method Block#afterRender\r\n   * @public\r\n   * @description Is called after block has been rendered.\r\n   */\r\n  afterRender() {}\r\n\r\n  /**\r\n   * @method Block#afterRender\r\n   * @public\r\n   * @description Is called before the block removal.\r\n   */\r\n  beforeRemove() {}\r\n\r\n  evaluateAndWatch(expression, callback) {\r\n    return this.$$.parent.$$.evaluate(expression, callback, this);\r\n  }\r\n\r\n  evaluateOnce(expression) {\r\n    return this.$$.parent.$$.evaluate(expression);\r\n  }\r\n\r\n  /**\r\n   * @method Block#remove\r\n   * @public\r\n   * @description Method fot forcing the block to be removed. Calls\r\n   * remove method for all of its child blocks and calls beforeRemove function.\r\n   */\r\n  remove(isParentSignal) {\r\n    const {\r\n      parentBlock,\r\n      children,\r\n      mixins,\r\n      elems: {\r\n        start,\r\n        content,\r\n        end\r\n      },\r\n      watchersToRemove\r\n    } = this.$$;\r\n\r\n    removeWatchers(watchersToRemove);\r\n\r\n    children.forEach((child) => {\r\n      child.remove(true);\r\n    });\r\n\r\n    mixins.forEach((mixin) => {\r\n      mixin.remove(true);\r\n    });\r\n\r\n    try {\r\n      this.beforeRemove();\r\n    } catch (err) {\r\n      console.error('Uncaught error in beforeRemove:', err);\r\n    }\r\n\r\n    if (!isParentSignal && parentBlock) {\r\n      const index = parentBlock.$$.children.indexOf(this);\r\n\r\n      if (index !== -1) {\r\n        parentBlock.$$.children.splice(index, 1);\r\n      }\r\n    }\r\n\r\n    new Elem([\r\n      start,\r\n      content,\r\n      end\r\n    ]).remove();\r\n  }\r\n\r\n  /**\r\n   * @method Block#watch\r\n   * @public\r\n   * @param {...String} [args] - Vars to watch (args, global or local).\r\n   * @param {Watcher} watcher - Called when watched vars are changed.\r\n   * @description Method for watching for vars. If no vars passed in arguments\r\n   * all vars are to be watched. Otherwise specified vars will be watched.\r\n   * Watchers should not be put inside the constructor. It is considered best\r\n   * practice to do it inside the {@link Block#afterConstruct} method.\r\n   * Note that these expressions (vars, i.e. \"args.arg\") are not to be\r\n   * evaluated so you cannot put there things like \"a[b]\" or any js code,\r\n   * only expressions like \"a\", \"b\", \"args.a\", \"args.b\" and \"global.a\", \"global.b\".\r\n   *\r\n   * @example\r\n   * class MyBlock extends Block {\r\n   *   static template = '<div />';\r\n   *\r\n   *   afterConstruct() {\r\n   *     this.watch('a', () => {});\r\n   *     this.watch('args.a', 'global.r', () => {});\r\n   *     this.watch(() => {});\r\n   *   }\r\n   * }\r\n   */\r\n  watch() {\r\n    const watcher = arguments[arguments.length - 1];\r\n\r\n    if (!isFunction(watcher)) {\r\n      return;\r\n    }\r\n\r\n    if (arguments.length === 1) {\r\n      for (const global in this.$$.global) {\r\n        /* eslint guard-for-in: 0 */\r\n        this.$$.global[global].watchers.perm.push(watcher);\r\n      }\r\n\r\n      iterate(this.$$.args, ({ watchers }) => {\r\n        watchers.perm.push(watcher);\r\n      });\r\n\r\n      return iterate(this.$$.locals, ({ watchers }) => {\r\n        watchers.perm.push(watcher);\r\n      });\r\n    }\r\n\r\n    iterate(arguments, (variable) => {\r\n      if (variable === watcher) {\r\n        return;\r\n      }\r\n\r\n      variable = `${ variable }`;\r\n\r\n      if (/^args\\./.test(variable)) {\r\n        variable = variable.replace(/^args\\./, '');\r\n\r\n        if (!this.$$.args[variable]) {\r\n          return;\r\n        }\r\n\r\n        this.$$.args[variable].watchers.perm.push(watcher);\r\n\r\n        return;\r\n      }\r\n\r\n      if (/^global\\./.test(variable)) {\r\n        variable = variable.replace(/^global\\./, '');\r\n\r\n        if (!this.$$.global[variable]) {\r\n          return;\r\n        }\r\n\r\n        this.$$.global[variable].watchers.perm.push(watcher);\r\n\r\n        return;\r\n      }\r\n\r\n      if (!this.$$.locals[variable]) {\r\n        return;\r\n      }\r\n\r\n      this.$$.locals[variable].watchers.perm.push(watcher);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Block#watchArgs\r\n   * @public\r\n   * @param {...String} [args] - Args to watch.\r\n   * @param {Watcher} watcher - Called when watched args are changed.\r\n   * @description Method for watching for args. If no args passed in arguments\r\n   * all args are to be watched. Otherwise specified args will be watched.\r\n   * Watchers should not be put inside the constructor. It is considered best\r\n   * practice to do it inside the {@link Block#afterConstruct} method.\r\n   *\r\n   * @example\r\n   * class MyBlock extends Block {\r\n   *   static template = '<div />';\r\n   *\r\n   *   afterConstruct() {\r\n   *     this.watchArgs('a', () => {});\r\n   *     this.watchArgs('a', 'b', () => {});\r\n   *     this.watchArgs(() => {});\r\n   *   }\r\n   * }\r\n   */\r\n  watchArgs() {\r\n    const watcher = arguments[arguments.length - 1];\r\n\r\n    if (!isFunction(watcher)) {\r\n      return;\r\n    }\r\n\r\n    if (arguments.length === 1) {\r\n      return iterate(this.$$.args, ({ watchers }) => {\r\n        watchers.perm.push(watcher);\r\n      });\r\n    }\r\n\r\n    iterate(arguments, (arg) => {\r\n      if (arg === watcher) {\r\n        return;\r\n      }\r\n\r\n      if (!this.$$.args[arg]) {\r\n        return;\r\n      }\r\n\r\n      this.$$.args[arg].watchers.perm.push(watcher);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Block#watchGlobal\r\n   * @public\r\n   * @param {...String} [globals] - Globals to watch.\r\n   * @param {Watcher} watcher - Called when watched globals are changed.\r\n   * @description Method for watching for globals. If no globals passed in arguments\r\n   * all globals are to be watched. Otherwise specified globals will be watched.\r\n   * Watchers should not be put inside the constructor. It is considered best\r\n   * practice to do it inside the {@link Block#afterConstruct} method.\r\n   *\r\n   * @example\r\n   * class MyBlock extends Block {\r\n   *   static template = '<div />';\r\n   *\r\n   *   afterConstruct() {\r\n   *     this.watchGlobal('a', () => {});\r\n   *     this.watchGlobal('a', 'b', () => {});\r\n   *     this.watchGlobal(() => {});\r\n   *   }\r\n   * }\r\n   */\r\n  watchGlobals() {\r\n    const watcher = arguments[arguments.length - 1];\r\n\r\n    if (!isFunction(watcher)) {\r\n      return;\r\n    }\r\n\r\n    if (arguments.length === 1) {\r\n      for (const global in this.$$.global) {\r\n        /* eslint guard-for-in: 0 */\r\n        this.$$.global[global].watchers.perm.push(watcher);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    iterate(arguments, (global) => {\r\n      if (global === watcher) {\r\n        return;\r\n      }\r\n\r\n      if (!this.$$.global[global]) {\r\n        return;\r\n      }\r\n\r\n      this.$$.global[global].watchers.perm.push(watcher);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Block#watchLocals\r\n   * @public\r\n   * @param {...String} [locals] - Locals to watch.\r\n   * @param {Watcher} watcher - Called when watched locals are changed.\r\n   * @description Method for watching for locals. If no locals passed in arguments\r\n   * all locals are to be watched. Otherwise specified locals will be watched.\r\n   * Watchers should not be put inside the constructor. It is considered best\r\n   * practice to do it inside the {@link Block#afterConstruct} method.\r\n   *\r\n   * @example\r\n   * class MyBlock extends Block {\r\n   *   static template = '<div />';\r\n   *\r\n   *   afterConstruct() {\r\n   *     this.watchLocals('a', () => {});\r\n   *     this.watchLocals('a', 'b', () => {});\r\n   *     this.watchLocals(() => {});\r\n   *   }\r\n   * }\r\n   */\r\n  watchLocals() {\r\n    const watcher = arguments[arguments.length - 1];\r\n\r\n    if (!isFunction(watcher)) {\r\n      return;\r\n    }\r\n\r\n    if (arguments.length === 1) {\r\n      return iterate(this.$$.locals, ({ watchers }) => {\r\n        watchers.perm.push(watcher);\r\n      });\r\n    }\r\n\r\n    iterate(arguments, (local) => {\r\n      if (local === watcher) {\r\n        return;\r\n      }\r\n\r\n      if (!this.$$.locals[local]) {\r\n        return;\r\n      }\r\n\r\n      this.$$.locals[local].watchers.perm.push(watcher);\r\n    });\r\n  }\r\n}\r\n\r\nregisterBuiltIns(Blocks, Block);\r\n\r\nclass Mixin {\r\n  static evaluate = true;\r\n\r\n  constructor(opts) {\r\n    const {\r\n      value,\r\n      elem,\r\n      match,\r\n      parentBlock,\r\n      parentScope\r\n    } = opts;\r\n\r\n    Object.defineProperties(this, {\r\n      $$: {\r\n        value: {\r\n          _value: value,\r\n          parent: parentScope,\r\n          parentBlock,\r\n          watchersToRemove: new Arr([])\r\n        }\r\n      }\r\n    });\r\n\r\n    this.match = new Arr(match).slice(1).$;\r\n    this.elem = elem;\r\n\r\n    if (new Super(this).proto().$.constructor.evaluate) {\r\n      this.value = this.evaluateAndWatch((newValue, oldValue) => {\r\n        this.value = newValue;\r\n\r\n        try {\r\n          this.afterUpdate(newValue, oldValue);\r\n        } catch (err) {\r\n          console.error(`Uncaught error in ${ name }#onUpdate:`, err);\r\n        }\r\n      });\r\n\r\n      this.afterUpdate(this.value);\r\n    }\r\n\r\n    if (parentBlock) {\r\n      parentBlock.$$.mixins.push(this);\r\n    }\r\n  }\r\n\r\n  afterUpdate() {}\r\n\r\n  beforeRemove() {}\r\n\r\n  evaluateAndWatch(callback) {\r\n    const {\r\n      _value,\r\n      parent\r\n    } = this.$$;\r\n\r\n    return parent.$$.evaluate(_value, callback, this);\r\n  }\r\n\r\n  evaluateOnce() {\r\n    const {\r\n      _value,\r\n      parent\r\n    } = this.$$;\r\n\r\n    return parent.$$.evaluate(_value);\r\n  }\r\n\r\n  /**\r\n   * @method Mixin#remove\r\n   * @public\r\n   * @description Method fot forcing the mixin to be removed.\r\n   */\r\n  remove(isParentSignal) {\r\n    const {\r\n      parentBlock,\r\n      watchersToRemove\r\n    } = this.$$;\r\n\r\n    removeWatchers(watchersToRemove);\r\n\r\n    try {\r\n      this.beforeRemove();\r\n    } catch (err) {\r\n      console.error('Uncaught error in beforeRemove:', err);\r\n    }\r\n\r\n    if (!isParentSignal && parentBlock) {\r\n      const index = parentBlock.$$.mixins.indexOf(this);\r\n\r\n      if (index !== -1) {\r\n        parentBlock.$$.mixins.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nregisterBuiltIns(Mixins, Mixin);\r\n\r\nfunction initApp() {\r\n  const root = find('d-root').first();\r\n\r\n  if (!root.length) {\r\n    throw new Error('No d-root element is found! (initApp)');\r\n  }\r\n\r\n  registerBlocks(Block, blocks);\r\n\r\n  iterate(Mixin, (Mixin, name) => {\r\n    if (name === 'evaluate') {\r\n      return;\r\n    }\r\n\r\n    if (!isFunction(Mixin)) {\r\n      console.warn(`The \"${ name }\" mixin is not a function and will not be registered (initApp)`);\r\n\r\n      return;\r\n    }\r\n\r\n    if (!attrName.test(name)) {\r\n      console.warn(`Name \"${ name }\" is not allowed for mixins so the mixin will not be registered (initApp)`);\r\n\r\n      return;\r\n    }\r\n\r\n    if (!isInstanceOfMixin(Mixin)) {\r\n      console.warn(`The \"${ name }\" mixin does not extend Mixin and will not be registered (initApp)`);\r\n\r\n      return;\r\n    }\r\n\r\n    mixins[name] = Mixin;\r\n\r\n    defineProperties(Mixin, {\r\n      _match: new RegExp(`^${ name }(?:-([\\\\s\\\\S]+))?$`)\r\n    });\r\n  });\r\n\r\n  const block = root.attr('block');\r\n\r\n  if (!blocks[block]) {\r\n    throw new Error(`No \"${ block }\" block is registered! (initApp)`);\r\n  }\r\n\r\n  const replacement = doc.createComment(' d-root: start ');\r\n  const parent = root.parent();\r\n\r\n  replacement.add(doc.createComment(' d-root: end '));\r\n\r\n  root.replace(replacement);\r\n\r\n  createBlock({\r\n    node: {\r\n      name: block,\r\n      attrs: {},\r\n      children: new Arr([])\r\n    },\r\n    after: replacement.first(),\r\n    parent\r\n  });\r\n}\r\n\r\nfunction registerBlocks(Block, blocks) {\r\n  iterate(Block, (Block, name) => {\r\n    if (\r\n      name === 'collapseWhiteSpace'\r\n      || name === 'defaultArgs'\r\n      || name === 'template'\r\n      || name === 'wrap'\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (!isFunction(Block)) {\r\n      console.warn(`The \"${ name }\" block is not a function and will not be registered (initApp)`);\r\n\r\n      return;\r\n    }\r\n\r\n    if (!tagName.test(name) && name !== '#d-item') {\r\n      console.warn(`Name \"${ name }\" is not allowed for blocks so the block will not be registered (initApp)`);\r\n\r\n      return;\r\n    }\r\n\r\n    if (!isInstanceOfBlock(Block)) {\r\n      console.warn(`The \"${ name }\" block does not extend Block and will not be registered (initApp)`);\r\n\r\n      return;\r\n    }\r\n\r\n    const children = Object.create(blocks);\r\n\r\n    blocks[name] = {\r\n      block: Block,\r\n      html: deepCloneChildren(\r\n        markupToJSON(\r\n          `${ Block.template || '' }`,\r\n          Block.collapseWhiteSpace\r\n        )\r\n      ),\r\n      children\r\n    };\r\n\r\n    registerBlocks(Block, children);\r\n  });\r\n}\r\n\r\nfunction registerBuiltIns(set, proto) {\r\n  iterate(set, (register) => {\r\n    const {\r\n      name,\r\n      value\r\n    } = register(proto, createBlock);\r\n\r\n    Object.defineProperty(proto, name, {\r\n      value,\r\n      enumerable: true\r\n    });\r\n  });\r\n}\r\n\r\nfunction createBlock({ node, after, parent, parentBlock, parentScope }) {\r\n  parentScope = (node && node.block) || parentScope;\r\n\r\n  const name = (node && node.name) || 'UnknownBlock';\r\n  const args = (node && node.attrs) || {};\r\n  const children = (node && node.children) || new Arr([]);\r\n  const elem = parent.prop('namespaceURI') === svgNS\r\n    ? doc.svg()\r\n    : new Elem(doc.template().$[0].content);\r\n  const localBlocks = parentScope ? parentScope.$$.Block.children : blocks;\r\n  let constructor = node && node.name && localBlocks[node.name] ? localBlocks[node.name].block : null;\r\n  let dBlockMatch;\r\n\r\n  if (!children.length && (dBlockMatch = name.match(/^d-block-([\\s\\S]+)$/) || name === 'd-block')) {\r\n    constructor = blocks['d-block'].block;\r\n\r\n    args.name = dBlockMatch ? dBlockMatch[1] : null;\r\n  }\r\n\r\n  if (!constructor) {\r\n    const {\r\n      value,\r\n      children\r\n    } = node;\r\n\r\n    if (name === '#text' && expressionRegExp.test(value)) {\r\n      return createBlock({\r\n        node: {\r\n          name: 'd-text',\r\n          attrs: { value },\r\n          children: new Arr([]),\r\n          block: parentScope\r\n        },\r\n        after,\r\n        parent,\r\n        parentBlock,\r\n        parentScope\r\n      });\r\n    }\r\n\r\n    const element = elem.create(name);\r\n    const currentMixins = new Arr([]);\r\n\r\n    const attrs = new Super(args).object((object, value, attr) => {\r\n      const match = iterate(mixins, (Mixin, name) => {\r\n        const match = attr.match(Mixin._match);\r\n\r\n        if (match) {\r\n          return {\r\n            match,\r\n            name\r\n          };\r\n        }\r\n      });\r\n\r\n      if (match) {\r\n        currentMixins.push({\r\n          name: match.name,\r\n          match: match.match,\r\n          value,\r\n          elem: element,\r\n          parentBlock,\r\n          parentScope\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      object[attr] = parentScope.$$.evaluate(value, (value) => {\r\n        element.attr(attr, value);\r\n      }, parentBlock);\r\n    }).$;\r\n\r\n    if (!isNil(value)) {\r\n      element.text(value);\r\n    }\r\n\r\n    if (attrs) {\r\n      element.attr(attrs);\r\n    }\r\n\r\n    if (after.length) {\r\n      element.insertAfter(after);\r\n    } else {\r\n      element.into(parent);\r\n    }\r\n\r\n    after = new Elem();\r\n\r\n    if (children) {\r\n      transformDIfChildren(children).forEach((child) => {\r\n        const block = createBlock({\r\n          node: child,\r\n          after,\r\n          parent: element,\r\n          parentBlock,\r\n          parentScope\r\n        });\r\n\r\n        if (block instanceof Block) {\r\n          after = block.$$.elems.end;\r\n        } else {\r\n          after = block;\r\n        }\r\n      });\r\n    }\r\n\r\n    currentMixins.forEach((opts) => {\r\n      createMixin(opts);\r\n    });\r\n\r\n    return element;\r\n  }\r\n\r\n  const block = node && node.name ? localBlocks[node.name] : null;\r\n  const blockInstance = new constructor({\r\n    name,\r\n    args,\r\n    children,\r\n    block,\r\n    parent,\r\n    parentBlock,\r\n    parentScope\r\n  });\r\n\r\n  Object.defineProperties(blockInstance, {\r\n    args: {\r\n      value: blockInstance.args\r\n    },\r\n    global: {\r\n      value: blockInstance.global\r\n    }\r\n  });\r\n\r\n  let html = name === 'd-elements'\r\n    ? new Arr(blockInstance.args.value || [])\r\n    : deepCloneChildren(block.html, blockInstance);\r\n\r\n  if (name === 'd-elements' && parentBlock.$$.name === '#d-item') {\r\n    html = deepCloneChildren(html, parentBlock);\r\n  }\r\n\r\n  const {\r\n    $$,\r\n    args: Args,\r\n    global,\r\n    ...locals\r\n  } = blockInstance;\r\n  const eventualArgs = {\r\n    ...constructor.defaultArgs,\r\n    ...Args\r\n  };\r\n\r\n  delete locals.$;\r\n  delete locals.$$;\r\n\r\n  $$.args = constructPrivateScope(eventualArgs);\r\n  $$.locals = constructPrivateScope(locals);\r\n  $$.global = constructPrivateScope(global, 'global', parentScope);\r\n\r\n  if (name === '#d-item') {\r\n    const scopeValues = {\r\n      [node.itemName]: node.item,\r\n      [node.indexName]: node.index\r\n    };\r\n    let parent = blockInstance;\r\n    let scope = parentScope;\r\n    let DItemFound;\r\n\r\n    while (!DItemFound && (parent = parent.$$.parentBlock)) {\r\n      DItemFound = parent.$$.name === '#d-item';\r\n    }\r\n\r\n    if (DItemFound) {\r\n      scope = parent.$$.scope;\r\n    }\r\n\r\n    $$.Block = parentScope.$$.Block;\r\n    $$.privateScope = constructPrivateScope(scopeValues);\r\n    constructPublicScope($$.scope = Object.create(scope), scopeValues, $$.privateScope);\r\n  }\r\n\r\n  if (name === 'd-each') {\r\n    $$.scope = Object.create(parentScope);\r\n  }\r\n\r\n  constructPublicScope(Args, eventualArgs, $$.args);\r\n  constructPublicScope(global, global, $$.global);\r\n  constructPublicScope(blockInstance, locals, $$.locals);\r\n\r\n  try {\r\n    blockInstance.afterConstruct();\r\n  } catch (err) {\r\n    console.error(`Uncaught error in ${ name }#afterConstruct:`, err);\r\n  }\r\n\r\n  const elems = new Elem([\r\n    $$.elems.start,\r\n    $$.elems.end\r\n  ]);\r\n\r\n  if (after.length) {\r\n    elems.insertAfter(after);\r\n  } else {\r\n    elems.into(parent);\r\n  }\r\n\r\n  after = $$.elems.start;\r\n\r\n  // console.log(blockInstance);\r\n\r\n  transformDIfChildren(html).forEach((child) => {\r\n    const block = createBlock({\r\n      node: child,\r\n      after,\r\n      parent,\r\n      parentBlock: blockInstance,\r\n      parentScope\r\n    });\r\n\r\n    if (block instanceof Block) {\r\n      const { elems } = block.$$;\r\n\r\n      after = elems.end;\r\n\r\n      $$.elems.content.add(elems.start, elems.content, elems.end);\r\n    } else {\r\n      after = block;\r\n\r\n      $$.elems.content.add(block);\r\n    }\r\n  });\r\n\r\n  try {\r\n    blockInstance.afterRender();\r\n  } catch (err) {\r\n    console.error(`Uncaught error in ${ name }#afterRender:`, err);\r\n  }\r\n\r\n  return blockInstance;\r\n}\r\n\r\nfunction createMixin({ name, value, match, elem, parentBlock, parentScope }) {\r\n  const Mixin = mixins[name];\r\n\r\n  new Mixin({\r\n    value,\r\n    match,\r\n    elem,\r\n    parentBlock,\r\n    parentScope\r\n  });\r\n}\r\n\r\nfunction deepCloneChildren(children, block) {\r\n  return new Arr(children || []).map((child) => {\r\n    const {\r\n      name,\r\n      attrs,\r\n      value,\r\n      children\r\n    } = child;\r\n    const newChild = {\r\n      name,\r\n      value,\r\n      attrs: { ...attrs }\r\n    };\r\n\r\n    if (block) {\r\n      newChild.block = block;\r\n    }\r\n\r\n    if (children) {\r\n      newChild.children = deepCloneChildren(children, block);\r\n    }\r\n\r\n    return newChild;\r\n  });\r\n}\r\n\r\nfunction transformDIfChildren(children) {\r\n  return new Arr(children || [])\r\n    .concat({})\r\n    .object((object, child) => {\r\n      const { name } = child;\r\n      const {\r\n        html,\r\n        ifElse\r\n      } = object;\r\n\r\n      if (name !== 'd-else-if' && name !== 'd-else') {\r\n        if (ifElse) {\r\n          html.push({\r\n            name: 'd-if',\r\n            block: ifElse.$[0].block,\r\n            children: ifElse\r\n          });\r\n\r\n          object.ifElse = null;\r\n        }\r\n\r\n        if (name === 'd-if') {\r\n          object.ifElse = new Arr([child]);\r\n        } else if (!isUndefined(name)) {\r\n          html.push(child);\r\n        }\r\n      } else {\r\n        (ifElse || html).push(child);\r\n\r\n        if (name === 'd-else' && ifElse) {\r\n          html.push({\r\n            name: 'd-if',\r\n            block: ifElse.$[0].block,\r\n            children: ifElse\r\n          });\r\n\r\n          object.ifElse = null;\r\n        }\r\n      }\r\n    }, {\r\n      html: new Arr([]),\r\n      ifElse: null\r\n    }).$.html;\r\n}\r\n\r\nfunction isInstanceOfBlock(block) {\r\n  return isPrototypeOf.call(Block, block) && isPrototypeOf.call(Block.prototype, block.prototype);\r\n}\r\n\r\nfunction isInstanceOfMixin(mixin) {\r\n  return isPrototypeOf.call(Mixin, mixin) && isPrototypeOf.call(Mixin.prototype, mixin.prototype);\r\n}\r\n\r\nfunction removeWatchers(watchersToRemove) {\r\n  watchersToRemove.forEach(({ watcher, watchers }) => {\r\n    const index = watchers.indexOf(watcher);\r\n\r\n    if (index !== -1) {\r\n      watchers.splice(index, 1);\r\n    }\r\n  });\r\n}\r\n\r\nfunction constructPrivateScope(object, type, parentScope) {\r\n  let scope = {};\r\n\r\n  if (type === 'global') {\r\n    scope = Object.create(\r\n      parentScope\r\n        ? parentScope.$$.global\r\n        : null\r\n    );\r\n  }\r\n\r\n  return new Super(object).object((scope, value, key) => {\r\n    scope[key] = {\r\n      value,\r\n      watchers: {\r\n        temp: new Arr([]),\r\n        perm: new Arr([])\r\n      }\r\n    };\r\n  }, scope).$;\r\n}\r\n\r\nfunction constructPublicScope(scope, scopeValues, privateScope) {\r\n  new Super(scope).define(new Super(scopeValues).map((value, key) => {\r\n    const scope = privateScope[key];\r\n\r\n    return {\r\n      get() {\r\n        if (evalMode) {\r\n          if (getting.indexOf(scope.watchers.temp) === -1) {\r\n            getting.push(scope.watchers.temp);\r\n          }\r\n        }\r\n\r\n        return scope.value;\r\n      },\r\n      set(value) {\r\n        if (value === scope.value) {\r\n          return;\r\n        }\r\n\r\n        if (!changed) {\r\n          changed = [];\r\n        }\r\n\r\n        const oldTempWatchers = scope.watchers.temp.slice();\r\n        const oldValue = scope.value;\r\n\r\n        scope.watchers.temp = new Arr([]);\r\n        scope.value = value;\r\n\r\n        oldTempWatchers.forEach((watcher) => {\r\n          watcher.onRemove();\r\n          watcher();\r\n        });\r\n        changed.push({\r\n          scope,\r\n          oldValue,\r\n          value\r\n        });\r\n\r\n        setTimeout(() => {\r\n          if (!changed) {\r\n            return;\r\n          }\r\n\r\n          const was = new Arr([]);\r\n\r\n          while (changed.length) {\r\n            for (let i = changed.length - 1; i >= 0; i--) {\r\n              const {\r\n                scope,\r\n                value,\r\n                oldValue\r\n              } = changed[i];\r\n\r\n              scope.watchers.perm.forEach((watcher) => {\r\n                if (was.indexOf(watcher) === -1) {\r\n                  watcher(value, oldValue);\r\n                  was.push(watcher);\r\n                }\r\n              });\r\n\r\n              changed.splice(i, 1);\r\n            }\r\n          }\r\n\r\n          changed = null;\r\n        }, 0);\r\n      }\r\n    };\r\n  }).$);\r\n}\r\n\r\nexport { Block, Mixin, initApp };\r\n","/**\r\n * @module constants/formats\r\n * @private\r\n * @description Exports different types of formatting for {@link Date#format}.\r\n */\r\n\r\nimport { Super } from '../Super';\r\nimport { Str } from '../Str';\r\n\r\nconst zero = new Str('0');\r\nconst daysOfTheWeekNames = [\r\n  'Sunday',\r\n  'Monday',\r\n  'Tuesday',\r\n  'Wednesday',\r\n  'Thursday',\r\n  'Friday',\r\n  'Saturday'\r\n];\r\nconst daysOfTheWeekAliases = new Super(daysOfTheWeekNames).map((value) => value.slice(0, 3)).$;\r\nconst monthsNames = [\r\n  'January',\r\n  'February',\r\n  'March',\r\n  'April',\r\n  'May',\r\n  'June',\r\n  'Jule',\r\n  'August',\r\n  'September',\r\n  'October',\r\n  'November',\r\n  'December'\r\n];\r\nconst monthsAliases = new Super(monthsNames).map((value) => value.slice(0, 3)).$;\r\n\r\n/**\r\n * @callback module:constants/formats~matchCallback\r\n * @param {Dat} date - D-wrap of a date to apply format to.\r\n * @param {String} string - Matched applied expression.\r\n */\r\n\r\n/**\r\n * @typedef {Object} module:constants/formats~formatExpr\r\n * @property {String} format - Matched format.\r\n * @property {module:constants/formats~matchCallback} match - Callback if there was a match.\r\n */\r\n\r\n/**\r\n * @type {module:constants/formats~formatExpr[]}\r\n * @description Array of different formats.\r\n */\r\nexport default [\r\n  {\r\n    format: 'ccc',\r\n    match: (date, utc) => round(date[utc]('c'), 3)\r\n  },\r\n  {\r\n    format: 'c',\r\n    match: (date, utc) => date[utc]('c')\r\n  },\r\n  {\r\n    format: 'ss',\r\n    match: (date, utc) => round(date[utc]('s'), 2)\r\n  },\r\n  {\r\n    format: 's',\r\n    match: (date, utc) => date[utc]('s')\r\n  },\r\n  {\r\n    format: 'mm',\r\n    match: (date, utc) => round(date[utc]('m'), 2)\r\n  },\r\n  {\r\n    format: 'm',\r\n    match: (date, utc) => date[utc]('m')\r\n  },\r\n  {\r\n    format: 'hh',\r\n    match: (date, utc) => round(date[utc]('h'), 2)\r\n  },\r\n  {\r\n    format: 'h',\r\n    match: (date, utc) => date[utc]('h')\r\n  },\r\n  {\r\n    format: 'dddd',\r\n    match: (date, utc) => daysOfTheWeekNames[date[utc]('dw')]\r\n  },\r\n  {\r\n    format: 'ddd',\r\n    match: (date, utc) => daysOfTheWeekAliases[date[utc]('dw')]\r\n  },\r\n  {\r\n    format: 'dd',\r\n    match: (date, utc) => round(date[utc]('d'), 2)\r\n  },\r\n  {\r\n    format: 'd',\r\n    match: (date, utc) => date[utc]('d')\r\n  },\r\n  {\r\n    format: 'MMMM',\r\n    match: (date, utc) => monthsNames[date[utc]('M') - 1]\r\n  },\r\n  {\r\n    format: 'MMM',\r\n    match: (date, utc) => monthsAliases[date[utc]('M') - 1]\r\n  },\r\n  {\r\n    format: 'MM',\r\n    match: (date, utc) => round(date[utc]('M'), 2)\r\n  },\r\n  {\r\n    format: 'M',\r\n    match: (date, utc) => date[utc]('M')\r\n  },\r\n  {\r\n    format: 'yyyy',\r\n    match: (date, utc) => round(date[utc]('y'), 4)\r\n  },\r\n  {\r\n    format: 'yy',\r\n    match: (date, utc) => String(date[utc]('y')).slice(-2)\r\n  },\r\n  {\r\n    format: 'y',\r\n    match: (date, utc) => date[utc]('y')\r\n  }\r\n];\r\n\r\n/**\r\n * @function round\r\n * @private\r\n * @param {Number} number - Number to round.\r\n * @param {Number} digits - Number of the digits of the output.\r\n * @returns {String} String with necessary additional starting zeroes.\r\n */\r\nfunction round(number, digits) {\r\n  const string = String(number);\r\n  let zeroes = digits - string.length;\r\n\r\n  zeroes = zeroes < 0 ? 0 : zeroes;\r\n\r\n  return zero.repeat(zeroes).$ + string;\r\n}\r\n","/**\r\n * @module Dat\r\n * @private\r\n * @mixin\r\n * @description Exports Dat class.\r\n */\r\n\r\nimport { Super } from './Super';\r\nimport { Num } from './Num';\r\nimport { Str } from './Str';\r\nimport { switcher } from './Switcher';\r\nimport { constructors } from './constants';\r\nimport formats from './constants/formats';\r\nimport { isDate, iterate, Symbol, defineProperties } from './helpers';\r\n\r\n/**\r\n * @typedef {*} DateLike\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {'c'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} AddPeriod\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {'c'|'s'|'m'|'h'|'d'|'dw'|'M'|'y'} GetPeriod\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {'c'|'s'|'m'|'h'|'d'|'M'|'y'} OfOnePeriod\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {'c'|'s'|'m'|'h'|'d'|'M'|'y'} SetPeriod\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {'ccc'|'c'|'ss'|'s'|'mm'|'m'|'hh'|'h'|'dddd'|'ddd'|'dd'|'d'|'MMMM'|'MMM'|'MM'|'M'|'yyyy'|'yy'|'y'} Format\r\n * @public\r\n */\r\n\r\nconst coeffs = {\r\n  c: 1,\r\n  s: 1000,\r\n  m: 60000,\r\n  h: 3600000,\r\n  d: 86400000,\r\n  w: 604800000,\r\n  M: 2592000000,\r\n  y: 31536000000\r\n};\r\n\r\nconst getSwitcher = switcher({\r\n  c: (date, utc) => date[`${ utc }Milliseconds`](),\r\n  s: (date, utc) => date[`${ utc }Seconds`](),\r\n  m: (date, utc) => date[`${ utc }Minutes`](),\r\n  h: (date, utc) => date[`${ utc }Hours`](),\r\n  d: (date, utc) => date[`${ utc }Date`](),\r\n  dw: (date, utc) => date[`${ utc }Day`](),\r\n  M: (date, utc) => date[`${ utc }Month`]() + 1,\r\n  y: (date, utc) => date[`${ utc }FullYear`]()\r\n}, 'equals', NaN);\r\nconst setSwitcher = switcher({\r\n  c: (date, value, utc) => date[`${ utc }Milliseconds`](value),\r\n  s: (date, value, utc) => date[`${ utc }Seconds`](value),\r\n  m: (date, value, utc) => date[`${ utc }Minutes`](value),\r\n  h: (date, value, utc) => date[`${ utc }Hours`](value),\r\n  d: (date, value, utc) => date[`${ utc }Date`](value),\r\n  M: (date, value, utc) => date[`${ utc }Month`](value - 1),\r\n  y: (date, value, utc) => date[`${ utc }FullYear`](value)\r\n});\r\n\r\n/**\r\n * @class Dat\r\n * @extends Super\r\n * @public\r\n * @param {Date} [date = new Date()] - A date to wrap.\r\n * @returns {Dat} Instance of Dat.\r\n * @description Wrap of a date.\r\n *\r\n * @example\r\n * const date = new Dat(new Date());\r\n */\r\nclass Dat extends Super {\r\n  constructor(date = new Date()) {\r\n    super(date);\r\n\r\n    /**\r\n     * @member Dat#$\r\n     * @type {Date}\r\n     * @public\r\n     * @description Original date.\r\n     */\r\n  }\r\n\r\n  /**\r\n   * @method Dat#add\r\n   * @public\r\n   * @param {AddPeriod|Object.<AddPeriod, Number>} what - What to add.\r\n   * @param {Number} [number] - Number of what to add if the first argument is a period string.\r\n   * @returns {Dat} Returns this.\r\n   * @description Method for adding amounts of time to the date. Returns new instance of Dat.\r\n   *\r\n   * @example\r\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).add('c', 2).toISOString();         // '2000-01-01T00:00:00.001Z'\r\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).add({ c: 2, d: 5 }).toISOString(); // '2000-01-06T00:00:00.001Z'\r\n   */\r\n  add(what, number) {\r\n    if (arguments.length >= 2) {\r\n      what = { [what]: number };\r\n    }\r\n\r\n    return this.time(this.time() + new Super(what).sum((value, what) => coeffs[what] * value));\r\n  }\r\n\r\n  /**\r\n   * @method Dat#expires\r\n   * @public\r\n   * @param {*} [value = this] - Value to resolve after the date expires.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @description Method for defining when the date expires.\r\n   *\r\n   * @example\r\n   * new Dat().add('c', 500).expires('Expired').then((value) => {\r\n   *   // After 500 milliseconds\r\n   *   console.log(value); // 'Expired'\r\n   * });\r\n   */\r\n  expires(value) {\r\n    if (!arguments.length) {\r\n      value = this;\r\n    }\r\n\r\n    return new Num(this.$ - now()).timeout(value);\r\n  }\r\n\r\n  /**\r\n   * @method Dat#format\r\n   * @public\r\n   * @param {String} string - Template for the output.\r\n   * @param {String} [prefix = ''] - If needed [all special strings]{@link Format}\r\n   * are treated as they should be prefix with prefix.\r\n   * @returns {String} Formatted string.\r\n   * @description Method for creating formatted output based on a string.\r\n   *\r\n   * @example\r\n   * new Dat('1999-12-31T23:59:59.999Z').format('Seconds: $ss, milliseconds: $ccc.', '$');\r\n   * // 'Seconds: 59, milliseconds: 999.'\r\n   */\r\n  format(string, prefix = '') {\r\n    string = new Str(new Super(string).$);\r\n    prefix = String(new Super(prefix).$);\r\n\r\n    iterate(formats, (format) => {\r\n      string = string.replaceString(prefix + format.format, format.match(this, 'get'));\r\n    });\r\n\r\n    return string.$;\r\n  }\r\n\r\n  /**\r\n   * @method Dat#formatUTC\r\n   * @public\r\n   * @param {String} string - See {@link Dat#format}.\r\n   * @param {String} [prefix = ''] - See {@link Dat#format}.\r\n   * @returns {String} Formatted string.\r\n   * @description UTC version of {@link Dat#format}.\r\n   *\r\n   * @example\r\n   * new Dat('1999-07-07T03:09:09.099Z').formatUTC(\r\n   *   `\r\n   *     Milliseconds: $ccc|$c.\r\n   *     Seconds:      $ss|$s.\r\n   *     Minutes:      $mm|$m.\r\n   *     Hours:        $hh|$h.\r\n   *     Day:          $dddd|$ddd|$dd|$d.\r\n   *     Month:        $MMMM|$MMM|$MM|$M.\r\n   *     Year:         $yyyy|$yy|$y.\r\n   *   `,\r\n   *   '$'\r\n   * );\r\n   * // Milliseconds: 099|99.\r\n   * // Seconds:      09|9.\r\n   * // Minutes:      09|9.\r\n   * // Hours:        03|3.\r\n   * // Day:          Friday|Fri|07|7.\r\n   * // Month:        July|Jul|07|7.\r\n   * // Year:         1999|99|1999.\r\n   */\r\n  formatUTC(string, prefix = '') {\r\n    string = new Str(new Super(string).$);\r\n    prefix = String(new Super(prefix).$);\r\n\r\n    iterate(formats, (format) => {\r\n      string = string.replaceString(prefix + format.format, format.match(this, 'getUTC'));\r\n    });\r\n\r\n    return string.$;\r\n  }\r\n\r\n  /**\r\n   * @method Dat#get\r\n   * @public\r\n   * @param {GetPeriod} what - What to get.\r\n   * @returns {Number} Number of what to get.\r\n   * @description Method for getting values such as seconds or minutes.\r\n   *\r\n   * @example\r\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).get('s'); // 59\r\n   */\r\n  get(what) {\r\n    return getSwitcher(what, [this.$, 'get']);\r\n  }\r\n\r\n  /**\r\n   * @method Dat#getUTC\r\n   * @public\r\n   * @param {GetPeriod} what - See {@link Dat#get}.\r\n   * @returns {Number} Number of what to get.\r\n   * @description UTC version of {@link Dat#get}.\r\n   *\r\n   * @example\r\n   * const date = new Dat(new Date('1999-12-31T23:59:59.999Z'));\r\n   *\r\n   * date.getUTC('c');  // 999\r\n   * date.getUTC('s');  // 59\r\n   * date.getUTC('m');  // 59\r\n   * date.getUTC('h');  // 23\r\n   * date.getUTC('d');  // 31\r\n   * date.getUTC('dw'); // 5\r\n   * date.getUTC('M');  // 12\r\n   * date.getUTC('y');  // 1999\r\n   */\r\n  getUTC(what) {\r\n    return getSwitcher(what, [this.$, 'getUTC']);\r\n  }\r\n\r\n  /**\r\n   * @method Dat#isAfter\r\n   * @public\r\n   * @param {DateLike} date - Date to be compared to this date.\r\n   * @returns {Boolean} If this date is after the argument one.\r\n   * @description Finds out if this date is after the argument one.\r\n   *\r\n   * @example\r\n   * new Dat(new Date(333)).isAfter(new Date(334)); // false\r\n   * new Dat(new Date(333)).isAfter(new Date(332)); // true\r\n   */\r\n  isAfter(date) {\r\n    date = new Date(new Super(date).$);\r\n\r\n    return date.getTime() < this.$.getTime();\r\n  }\r\n\r\n  /**\r\n   * @method Dat#isBefore\r\n   * @public\r\n   * @param {DateLike} date - Date to be compared to this date.\r\n   * @returns {Boolean} If this date is before the argument one.\r\n   * @description Finds out if this date is before the argument one.\r\n   *\r\n   * @example\r\n   * new Dat(new Date(333)).isBefore(new Date(334)); // true\r\n   * new Dat(new Date(333)).isBefore(new Date(332)); // false\r\n   */\r\n  isBefore(date) {\r\n    date = new Date(new Super(date).$);\r\n\r\n    return date.getTime() > this.$.getTime();\r\n  }\r\n\r\n  /**\r\n   * @method Dat#isBetween\r\n   * @public\r\n   * @param {DateLike} date1 - Start of the range.\r\n   * @param {DateLike} date2 - End of the range.\r\n   * @returns {Boolean} If this date is after date1 and before date2.\r\n   * @description Finds out if this date is after date1 and before date2.\r\n   *\r\n   * @example\r\n   * new Dat(new Date(333)).isBetween(new Date(332), new Date(334)); // true\r\n   * new Dat(new Date(333)).isBetween(new Date(334), new Date(332)); // false\r\n   */\r\n  isBetween(date1, date2) {\r\n    const time = this.$.getTime();\r\n\r\n    date1 = new Date(new Super(date1).$);\r\n    date2 = new Date(new Super(date2).$);\r\n\r\n    return time > date1.getTime() && time < date2.getTime();\r\n  }\r\n\r\n  /**\r\n   * @method Dat#isInvalid\r\n   * @public\r\n   * @returns {Boolean} If the date is invalid.\r\n   * @description Returns if the date is invalid.\r\n   *\r\n   * @example\r\n   * new Dat(new Date('a')).isInvalid(); // true\r\n   * new Dat(new Date(1)).isInvalid();   // false\r\n   */\r\n  isInvalid() {\r\n    return this.$.toString() === 'Invalid Date';\r\n  }\r\n\r\n  /**\r\n   * @method Dat#isPassed\r\n   * @public\r\n   * @returns {Boolean} If the date is passed.\r\n   * @description Returns if the date is passed.\r\n   *\r\n   * @example\r\n   * new Dat(new Date(1)).isPassed(); // true\r\n   */\r\n  isPassed() {\r\n    return this.isBefore(now());\r\n  }\r\n\r\n  /**\r\n   * @method Dat#ofOne\r\n   * @public\r\n   * @param {OfOnePeriod} what - Period to check.\r\n   * @param {DateLike} date - Date to check.\r\n   * @returns {Boolean} If two dates are of one second, minute or something else.\r\n   * @description Returns if two dates are of one second, minute or something else.\r\n   *\r\n   * @example\r\n   * new Dat(new Date('1999-12-31T23:59:59.000Z')).ofOne('s', new Date(1999-12-31T23:59:59.333Z')); // true\r\n   * new Dat(new Date('1999-12-31T23:59:59.000Z')).ofOne('s', new Date(1999-12-31T23:59:58.999Z')); // false\r\n   */\r\n  ofOne(what, date) {\r\n    if (!(what in coeffs) || what === 'w') {\r\n      return false;\r\n    }\r\n\r\n    date = new Dat(new Date(date));\r\n\r\n    let started;\r\n\r\n    return iterate(coeffs, (coeff, w) => {\r\n      if (w === what) {\r\n        started = true;\r\n      }\r\n\r\n      if (!started || w === 'w') {\r\n        return;\r\n      }\r\n\r\n      if (started && this.get(w) !== date.get(w)) {\r\n        return false;\r\n      }\r\n    }) !== false;\r\n  }\r\n\r\n  /**\r\n   * @method Dat#set\r\n   * @public\r\n   * @param {SetPeriod|Object.<SetPeriod, Number>} what - What to add.\r\n   * @param {Number} [number] - Number of what to set if the first argument is a period string.\r\n   * @returns {Dat} Returns this.\r\n   * @description Method for setting values such as seconds or minutes.\r\n   *\r\n   * @example\r\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).set('s', 58).get('s');           // 58\r\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).set({ c: 998, s: 58 }).get('c'); // 998\r\n   */\r\n  set(what, number) {\r\n    const date = this.$;\r\n\r\n    if (arguments.length >= 2) {\r\n      what = { [what]: number };\r\n    }\r\n\r\n    what = new Super(what).$;\r\n\r\n    iterate(what, (value, what) => {\r\n      setSwitcher(what, [date, value, 'set']);\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Dat#setUTC\r\n   * @public\r\n   * @param {SetPeriod|Object.<SetPeriod, Number>} what - See {@link Dat#set}.\r\n   * @param {Number} [number] - See {@link Dat#set}.\r\n   * @returns {Dat} Returns this.\r\n   * @description UTC version of {@link Dat#set}.\r\n   *\r\n   * @example\r\n   * const date = new Dat(new Date('1999-12-31T23:59:59.999Z'));\r\n   *\r\n   * date.setUTC('ccc', 998).getUTC('ccc'); // 998\r\n   * date.setUTC({\r\n   *   s: 58,\r\n   *   m: 58,\r\n   *   h: 22\r\n   * });\r\n   *\r\n   * date.getUTC('s'); // 58\r\n   * date.getUTC('m'); // 58\r\n   * date.getUTC('h'); // 23\r\n   */\r\n  setUTC(what, number) {\r\n    const date = this.$;\r\n\r\n    if (arguments.length >= 2) {\r\n      what = { [what]: number };\r\n    }\r\n\r\n    what = new Super(what).$;\r\n\r\n    iterate(what, (value, what) => {\r\n      setSwitcher(what, [date, value, 'setUTC']);\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Dat#setUTC\r\n   * @public\r\n   * @param {Number} [time] - Time to set.\r\n   * @returns {Dat|Number} - If the time argument is present this is returned otherwise the time is returned.\r\n   * @description Synonym for both\r\n   * [Date#getTime]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime} and\r\n   * [Date#setTime]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime}.\r\n   */\r\n  time(time) {\r\n    const date = this.$;\r\n\r\n    if (arguments.length) {\r\n      date.setTime(time);\r\n    }\r\n\r\n    return date.getTime();\r\n  }\r\n\r\n  toISOString() {\r\n    return this.$.toISOString();\r\n  }\r\n\r\n  toLocaleString() {\r\n    return this.$.toLocaleString();\r\n  }\r\n\r\n  toString() {\r\n    return this.$.toString();\r\n  }\r\n\r\n  valueOf() {\r\n    return this.$.valueOf();\r\n  }\r\n}\r\ndefineProperties(Dat.prototype, {\r\n  [Symbol.toStringTag]: 'Dat'\r\n});\r\n\r\nconstructors[1].push({\r\n  check: isDate,\r\n  cls: Dat\r\n});\r\n\r\n/**\r\n * @function now\r\n * @public\r\n * @returns {Number} Number of milliseconds.\r\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/now\r\n * @description Synonym for\r\n * [Date.now]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/now}.\r\n */\r\nfunction now() {\r\n  return Date.now();\r\n}\r\n\r\n/**\r\n * @function date\r\n * @public\r\n * @param {DateLike} [date = new Date()] - Date-like value that is passed to the Date constructor.\r\n * @returns {Dat} New instance of Dat.\r\n * @description Synonym for new Dat(new Date(date));\r\n */\r\nfunction date(date) {\r\n  if (!arguments.length) {\r\n    return new Dat(new Date(now()));\r\n  }\r\n\r\n  date = new Super(date).$;\r\n\r\n  return new Dat(new Date(date));\r\n}\r\n\r\nexport { Dat, now, date };\r\n","/**\r\n * @module helpers/constructURL\r\n * @private\r\n * @description Exports constructURL method.\r\n */\r\n\r\nimport { Arr } from '../Arr';\r\nimport { Str } from '../Str';\r\nimport { switcher } from '../Switcher';\r\nimport { isArray, isObject, isPlainObject } from './checkTypes';\r\nimport { iterate } from './iterate';\r\n\r\n/**\r\n * @type {RegExp}\r\n * @description Absolute URL pattern.\r\n */\r\nconst absoluteURLRegexp = /^(([a-z][a-z\\d+\\-.]*:)?\\/\\/|data:[a-z]+\\/[a-z]+;base64,)/i;\r\nconst querySwitcher = switcher('call', () => new Arr([]))\r\n  .case(isArray, (prefix, query) => {\r\n    let queryParams = new Arr([]);\r\n\r\n    iterate(query, (value) => {\r\n      if (isPlainObject(value) || isArray(value)) {\r\n        queryParams = queryParams.concat(querySwitcher(value, [`${ prefix }[]`]));\r\n\r\n        return;\r\n      }\r\n\r\n      queryParams.push({\r\n        param: `${ prefix }[]`,\r\n        value\r\n      });\r\n    });\r\n\r\n    return queryParams.$;\r\n  })\r\n  .case(isPlainObject, (prefix, query) => {\r\n    let queryParams = new Arr([]);\r\n\r\n    iterate(query, (value, param) => {\r\n      if (isPlainObject(value) || isArray(value)) {\r\n        queryParams = queryParams.concat(querySwitcher(value, [prefix ? `${ prefix }[${ param }]` : param]));\r\n\r\n        return;\r\n      }\r\n\r\n      queryParams.push({\r\n        param: prefix ? `${ prefix }[${ param }]` : param,\r\n        value: isObject(value) ? JSON.stringify(value) : String(value)\r\n      });\r\n    });\r\n\r\n    return queryParams.$;\r\n  });\r\n\r\n/**\r\n * @function constructURL\r\n * @param {String} baseURL - BaseURL of the output URL.\r\n * @param {String} url - Main part of the output URL.\r\n * @param {Object} params - Params to replace in the url expressions like \":param\".\r\n * @param {Object} query - Object with query params.\r\n * @param {Object} [hash = ''] - URL hash.\r\n * @param {Object} [encodeOptions = {}] - If you need to encode something.\r\n * @param {Object} [encodeOptions.params = true] - If you need to encode params.\r\n * @param {Object} [encodeOptions.query = true] - If you need to encode query params.\r\n * @returns {String} Constructed URL.\r\n * @description Function for constructing URL from the base URL, URL, params and query params.\r\n */\r\nexport default (baseURL, url, params, query, hash = '', encodeOptions = {}) => {\r\n  const {\r\n    params: encodeParams = true,\r\n    query: encodeQuery = true\r\n  } = encodeOptions;\r\n  let URL = isAbsolute(url)\r\n    ? url\r\n    : `${ String(baseURL).replace(/\\/+$/, '') }/${ String(url).replace(/^\\/+/, '') }`;\r\n\r\n  iterate(params, (value, param) => {\r\n    URL = new Str(URL).replaceString(`:${ param }`, encode(value, encodeParams)).$;\r\n  });\r\n\r\n  const queryParams = querySwitcher(query, ['']);\r\n\r\n  if (queryParams.length) {\r\n    URL += (URL.indexOf('?') === -1 ? '?' : '&') + queryParams\r\n      .map(({ param, value }) => `${ encode(param, encodeQuery) }=${ encode(value, encodeQuery) }`)\r\n      .join('&');\r\n  }\r\n\r\n  return `${ URL }${ hash ? `#${ hash }` : '' }`;\r\n};\r\n\r\n/**\r\n * @function isAbsolute\r\n * @param {String} url - URL to check if it is absolute or not.\r\n * @returns {Boolean} If the argument URL is absolute or not.\r\n */\r\nfunction isAbsolute(url) {\r\n  return absoluteURLRegexp.test(url);\r\n}\r\n\r\n/**\r\n * @function encode\r\n * @param {String} string - String to encode using encodeURIComponent.\r\n * @param {Boolean} isEncoded - If the string should be encoded.\r\n * @returns {String} Encoded string.\r\n */\r\nfunction encode(string, isEncoded) {\r\n  return isEncoded ? encodeURIComponent(string) : string;\r\n}\r\n","/**\r\n * @module helpers/parseHeaders\r\n * @private\r\n * @description Exports parseHeaders method.\r\n */\r\n\r\nimport { Str } from '../Str';\r\nimport { iterate } from './iterate';\r\n\r\n/**\r\n * @function parseHeaders\r\n * @param {String} rawHeaders - Raw headers.\r\n * @returns {Object} Headers object\r\n * @description Function for parsing raw headers.\r\n */\r\nexport default (rawHeaders) => {\r\n  const headers = {};\r\n\r\n  iterate((rawHeaders || '').split('\\n'), (value) => {\r\n    const index = value.indexOf(':');\r\n    const key = new Str(value.substring(0, index))\r\n      .trim()\r\n      .toCamelCase().$;\r\n    const val = new Str(value.substring(index + 1)).trim().$;\r\n\r\n    if (key) {\r\n      headers[key] = (headers[key] ? `${ headers[key] }, ` : '') + val;\r\n    }\r\n  });\r\n\r\n  return headers;\r\n};\r\n","/**\r\n * @module helpers/transformData\r\n * @private\r\n * @description Exports transformData method.\r\n */\r\n\r\nimport { Arr } from '../Arr';\r\nimport { Super } from '../Super';\r\nimport { isObject, toStringTag } from './';\r\n\r\nconst notToTransform = new Arr(['FormData', 'File', 'Blob', 'ArrayBuffer', 'String', 'Number']);\r\nconst withoutBody = new Arr(['DELETE', 'GET', 'HEAD']);\r\n\r\n/**\r\n * @function transformData\r\n * @param {*} data - Data to transform\r\n * @param {String} method - HTTP method.\r\n * @param {Object} headers - Object with headers.\r\n * @returns {*} - Transformed data.\r\n */\r\nexport default (data, method, headers) => {\r\n  data = new Super(data).$;\r\n\r\n  if (withoutBody.indexOfStrict(method) !== -1) {\r\n    return null;\r\n  }\r\n\r\n  if (isObject(data) && notToTransform.indexOfStrict(toStringTag(data)) === -1) {\r\n    if (!headers.contentType) {\r\n      headers.contentType = ['application/json;charset=utf-8'];\r\n    }\r\n\r\n    return new Super(data).json();\r\n  }\r\n\r\n  return data;\r\n};\r\n","/**\r\n * @module Fetch\r\n * @private\r\n * @mixin\r\n * @description Exports Fetch class.\r\n */\r\n\r\nimport { Promise } from './Promise';\r\nimport { Super } from './Super';\r\nimport { Arr } from './Arr';\r\nimport { Str } from './Str';\r\nimport {\r\n  isArray, isFunction, isString,\r\n  assign, Symbol, validate, iterate, defineProperties\r\n} from './helpers';\r\nimport constructURL from './helpers/constructURL';\r\nimport parseHeaders from './helpers/parseHeaders';\r\nimport transformData from './helpers/transformData';\r\n\r\n/**\r\n * @typedef {'get'|'post'|'delete'|'head'|'put'|'patch'} FetchMethod\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {Object} FetchConfig\r\n * @public\r\n * @property {Array.<AfterMiddleware|FetchErrorAfterMiddleware>} [after]\r\n * @property {Object} [auth]\r\n * @property {String} [auth.username]\r\n * @property {String} [auth.password]\r\n * @property {String} [baseURL]\r\n * @property {Array.<BeforeMiddleware|FetchErrorBeforeMiddleware>} [before]\r\n * @property {*} [data]\r\n * @property {Object.<String, String[]>} [headers]\r\n * @property {FetchMethod} [method]\r\n * @property {Object} [params]\r\n * @property {Object} [query]\r\n * @property {String} [responseType]\r\n * @property {Number} [timeout]\r\n * @property {String} [url]\r\n * @property {Boolean} [withCredentials]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FetchResponse\r\n * @public\r\n * @property {FetchConfig} config\r\n * @property {*} data\r\n * @property {Object.<String, String>} headers\r\n * @property {Number} status\r\n * @property {String} statusText\r\n * @property {XMLHttpRequest} xhr\r\n */\r\n\r\n/**\r\n * @callback FetchAfterMiddleware\r\n * @public\r\n * @param {FetchResponse} config - Fetch response.\r\n */\r\n\r\n/**\r\n * @callback FetchErrorAfterMiddleware\r\n * @public\r\n * @param {Error|*} err - Thrown error.\r\n * @param {FetchResponse} config - Fetch response.\r\n */\r\n\r\n/**\r\n * @callback FetchBeforeMiddleware\r\n * @public\r\n * @param {FetchConfig} config - Fetch config.\r\n */\r\n\r\n/**\r\n * @callback FetchErrorBeforeMiddleware\r\n * @public\r\n * @param {Error|*} err - Thrown error.\r\n * @param {FetchConfig} config - Fetch config.\r\n */\r\n\r\n/**\r\n * @callback FetchConfigFunction\r\n * @public\r\n * @param {FetchConfig} config\r\n */\r\n\r\nconst defaults = {\r\n  after: [],\r\n  auth: {\r\n    username: '',\r\n    password: ''\r\n  },\r\n  baseURL: global.location.origin,\r\n  before: [],\r\n  data: null,\r\n  headers: {},\r\n  method: 'get',\r\n  params: {},\r\n  query: {},\r\n  responseType: '',\r\n  timeout: 0,\r\n  url: '',\r\n  withCredentials: false\r\n};\r\nconst uploadMethods = new Arr(['post', 'put']);\r\n\r\n/**\r\n * @class Fetch\r\n * @extends Function\r\n * @public\r\n * @param {FetchConfig} [config = {}] - A number to wrap.\r\n * @returns {Fetch} Instance of Fetch.\r\n * An instance of Fetch is a function that simply calls #request with the same arguments.\r\n * @description Class for fetching data.\r\n *\r\n * @example\r\n * const fetch = new Fetch();\r\n *\r\n * fetch('/data').then((res) => {\r\n *   console.log(res);\r\n * });\r\n */\r\nclass Fetch extends Function {\r\n  constructor(config = {}) {\r\n    super();\r\n\r\n    function fetch() {\r\n      return fetch.request.apply(fetch, arguments);\r\n    }\r\n\r\n    const conf = new Super({}).deepAssign(defaults, config).$;\r\n\r\n    if (conf.before.indexOf(fetchBeforeMiddleware) === -1) {\r\n      conf.before.push(fetchBeforeMiddleware);\r\n    }\r\n\r\n    /**\r\n     * @member {FetchConfig} Fetch#$$\r\n     * @type {FetchConfig}\r\n     * @public\r\n     * @description Fetch config.\r\n     */\r\n    Object.defineProperty(fetch, '$$', { value: conf });\r\n    Object.setPrototypeOf(fetch, Fetch.prototype);\r\n\r\n    return fetch;\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#after\r\n   * @public\r\n   * @param {FetchAfterMiddleware|FetchErrorAfterMiddleware} middleware - Middleware to add.\r\n   * @param {Boolean|*} [afterAll = true] - Boolean parameter where to put the middleware.\r\n   * Truthy parameter stands for \"to the end\" and falsey for \"to the beginning\".\r\n   * @returns {Fetch} Returns this.\r\n   * @description Middleware that is called after the request.\r\n   * If the middleware has 2 or less arguments it's treated as success middleware otherwise as an error one.\r\n   * If the middleware returns a promise it becomes a part of the middleware chain.\r\n   *\r\n   * @example\r\n   * const fetch = new Fetch()\r\n   *   .after((err, res) => {\r\n   *     console.log(err);\r\n   *\r\n   *     throw err;\r\n   *   })\r\n   *   .after((res) => {\r\n   *     res.json = D(res.data).parseJSON():\r\n   *   });\r\n   */\r\n  after(middleware, afterAll = true) {\r\n    validate([middleware], ['function'], 'Fetch#after');\r\n\r\n    const { after } = this.$$;\r\n\r\n    if (afterAll) {\r\n      after.push(middleware);\r\n    } else {\r\n      after.unshift(middleware);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#before\r\n   * @public\r\n   * @param {FetchBeforeMiddleware|FetchErrorBeforeMiddleware} middleware - Middleware to add.\r\n   * @param {Boolean|*} [beforeAll = true] - Boolean parameter where to put the middleware.\r\n   * Truthy parameter stands for \"to the beginning\" and falsey for \"to the end\".\r\n   * @returns {Fetch} Returns this.\r\n   * @description Middleware that is called before the request.\r\n   * If the middleware has 2 or less arguments it's treated as success middleware otherwise as an error one.\r\n   * If the middleware returns a promise it becomes a part of the middleware chain.\r\n   *\r\n   * @example\r\n   * const fetch = new Fetch()\r\n   *   .before((err, req) => {\r\n   *     console.log(err);\r\n   *\r\n   *     throw err;\r\n   *   })\r\n   *   .before((req) => {\r\n   *     if (req.url === '/veryLongRequest') {\r\n   *       req.timeout = 30000;\r\n   *     }\r\n   *   });\r\n   */\r\n  before(middleware, beforeAll = true) {\r\n    validate([middleware], ['function'], 'Fetch#before');\r\n\r\n    const { before } = this.$$;\r\n\r\n    if (beforeAll) {\r\n      before.unshift(middleware);\r\n    } else {\r\n      before.push(middleware);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#config\r\n   * @public\r\n   * @param {String|FetchConfig|FetchConfigFunction} [property] - If it's a function\r\n   * it's called with the fetch config argument, if it's a string the value argument\r\n   * is used for assigning this property to the fetch config\r\n   * otherwise it's assigned to the fetch config.\r\n   * @param {*} [value] - See the property argument.\r\n   * @returns {Fetch|FetchConfig} If the argument is present this is returned otherwise the fetch config is returned.\r\n   * @description Method for getting and setting config.\r\n   *\r\n   * @example\r\n   * const fetch = new Fetch();\r\n   *\r\n   * fetch.config({ baseURL: 5000 });\r\n   * fetch.config().timeout; // 5000\r\n   *\r\n   * fetch.config((config) => {\r\n   *   config.baseURL += '/api';\r\n   * });\r\n   */\r\n  config(property, value) {\r\n    const conf = this.$$;\r\n\r\n    if (!arguments.length) {\r\n      return conf;\r\n    }\r\n\r\n    if (isFunction(property)) {\r\n      property(conf);\r\n    } else {\r\n      if (arguments.length >= 2) {\r\n        property = { [property]: value };\r\n      }\r\n\r\n      new Super(conf).deepAssign(property);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#delete\r\n   * @public\r\n   * @param {String} [url] - See {@link Fetch#request}.\r\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\r\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\r\n   * @description Shorthand for #request for delete requests.\r\n   *\r\n   * @example\r\n   * new Fetch().delete('/data').then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  delete(url, config = {}) {\r\n    if (!isString(url)) {\r\n      config = url;\r\n      url = undefined;\r\n    }\r\n\r\n    return this.request(url, assign({ method: 'delete' }, config));\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#get\r\n   * @public\r\n   * @param {String} [url] - See {@link Fetch#request}.\r\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\r\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\r\n   * @description Shorthand for #request for get requests.\r\n   *\r\n   * @example\r\n   * new Fetch().get('/data').then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  get(url, config = {}) {\r\n    if (!isString(url)) {\r\n      config = url;\r\n      url = undefined;\r\n    }\r\n\r\n    return this.request(url, assign({ method: 'get' }, config));\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#head\r\n   * @public\r\n   * @param {String} [url] - See {@link Fetch#request}.\r\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\r\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\r\n   * @description Shorthand for #request for head requests.\r\n   *\r\n   * @example\r\n   * new Fetch().head('/data').then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  head(url, config = {}) {\r\n    if (!isString(url)) {\r\n      config = url;\r\n      url = undefined;\r\n    }\r\n\r\n    return this.request(url, assign({ method: 'head' }, config));\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#headers\r\n   * @public\r\n   * @param {String|Object.<String, String|String[]>} header - A header string or an object of the following format:\r\n   * { [header]: [value1, value2, ...] }.\r\n   * @param {String|String[]} [value] - Header value. If the first argument is a string\r\n   * this has to be a header value or an array of header values.\r\n   * @returns {Fetch} Returns this.\r\n   * @description Method for setting request headers.\r\n   *\r\n   * @example\r\n   * const fetch = new Fetch()\r\n   *   .headers('Header1', 'Value')\r\n   *   .headers('Header2', ['Value1', 'Value2'])\r\n   *   .headers({\r\n   *     Header3: ['Value1', 'Value2']\r\n   *   });\r\n   */\r\n  headers(header, value) {\r\n    const { headers } = this.$$;\r\n\r\n    if (arguments.length >= 2) {\r\n      header = { [header]: value };\r\n    }\r\n\r\n    iterate(header, (value, header) => {\r\n      const array = headers[header] || [];\r\n      const toPush = isArray(value) ? value : [value];\r\n\r\n      (headers[header] = array).push.apply(array, toPush);\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#instance\r\n   * @public\r\n   * @param {FetchConfig} [config] - New config if needed.\r\n   * @returns {Fetch} New instance of Fetch.\r\n   * @description Method for creating new fetch instances based on already existent.\r\n   *\r\n   * @example\r\n   * const mainFetch = new Fetch({\r\n   *   baseURL: '//other.domain.com/api',\r\n   *   withCredentials: true\r\n   * });\r\n   *\r\n   * const longFetch = mainFetch.instance({\r\n   *   timeout: 10000\r\n   * });\r\n   */\r\n  instance(config = {}) {\r\n    const dataConfig = new Super(config).hasOwn('data')\r\n      ? { data: config.data }\r\n      : {};\r\n\r\n    delete config.data;\r\n\r\n    const conf = new Super({})\r\n      .deepAssign(this.$$, config)\r\n      .assign(dataConfig)\r\n      .$;\r\n\r\n    return new Fetch(conf);\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#patch\r\n   * @public\r\n   * @param {String} [url] - See {@link Fetch#request}.\r\n   * @param {*} [data] - Additional parameter for uploading data.\r\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\r\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\r\n   * @description Shorthand for #request for head requests.\r\n   *\r\n   * @example\r\n   * new Fetch().patch('/data', { user: 'John' }).then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  patch(url, data = {}, config = {}) {\r\n    if (arguments.length && !isString(url)) {\r\n      config = data;\r\n      data = url;\r\n      url = undefined;\r\n    }\r\n\r\n    return this.request(url, assign({ method: 'patch', data }, config));\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#post\r\n   * @public\r\n   * @param {String} [url] - See {@link Fetch#request}.\r\n   * @param {*} [data] - Additional parameter for uploading data.\r\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\r\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\r\n   * @description Shorthand for #request for head requests.\r\n   *\r\n   * @example\r\n   * new Fetch().post('/data', { user: 'John' }).then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  post(url, data = {}, config = {}) {\r\n    if (arguments.length && !isString(url)) {\r\n      config = data;\r\n      data = url;\r\n      url = undefined;\r\n    }\r\n\r\n    return this.request(url, assign({ method: 'post', data }, config));\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#put\r\n   * @public\r\n   * @param {String} [url] - See {@link Fetch#request}.\r\n   * @param {*} [data] - Additional parameter for uploading data.\r\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\r\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\r\n   * @description Shorthand for #request for head requests.\r\n   *\r\n   * @example\r\n   * new Fetch().put('/data', { user: 'John' }).then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  put(url, data = {}, config = {}) {\r\n    if (arguments.length && !isString(url)) {\r\n      config = data;\r\n      data = url;\r\n      url = undefined;\r\n    }\r\n\r\n    return this.request(url, assign({ method: 'put', data }, config));\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#request\r\n   * @public\r\n   * @param {String} [url] - URL for the request.\r\n   * @param {FetchConfig} [config] - Additional config for this particular request.\r\n   * @returns {Promise.<FetchResponse, Error>} Promise that is resolved with the request response.\r\n   * @description Main function for making requests. All request methods call this method\r\n   * including the fetch instance itself.\r\n   *\r\n   * @example\r\n   * const fetch = new Fetch();\r\n   *\r\n   * fetch.request('/data', { timeout: 1000 }).then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   *\r\n   * fetch.request({ timeout: 1000 }).then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   *\r\n   * fetch.request().then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  request(url, config = {}) {\r\n    if (arguments.length === 1 && !isString(url)) {\r\n      config = url;\r\n    }\r\n\r\n    const dataConfig = new Super(config).hasOwn('data')\r\n      ? { data: config.data }\r\n      : {};\r\n    const urlConfig = isString(url)\r\n      ? { url }\r\n      : {};\r\n\r\n    delete config.data;\r\n\r\n    const conf = new Super(this.$$)\r\n      .deepClone()\r\n      .deepAssign(urlConfig, config)\r\n      .assign(dataConfig)\r\n      .$;\r\n\r\n    let xhr;\r\n    let promise = Promise.resolve();\r\n\r\n    iterate(conf.before, (middleware) => {\r\n      promise = promise.then(() => {\r\n        if (middleware.length >= 2) {\r\n          return Promise.resolve();\r\n        }\r\n\r\n        return new Promise((resolve) => {\r\n          resolve(middleware(conf));\r\n        });\r\n      }, (err) => {\r\n        if (middleware.length < 2) {\r\n          return Promise.reject(err);\r\n        }\r\n\r\n        return new Promise((resolve) => {\r\n          resolve(middleware(err, conf));\r\n        });\r\n      });\r\n    });\r\n\r\n    promise = promise.then(() => new Promise((resolve, reject) => {\r\n      const {\r\n        after,\r\n        auth: {\r\n          username,\r\n          password\r\n        },\r\n        data,\r\n        headers,\r\n        method,\r\n        onprogress,\r\n        responseType,\r\n        timeout,\r\n        url,\r\n        withCredentials\r\n      } = conf;\r\n\r\n      xhr = new XMLHttpRequest();\r\n\r\n      xhr.open(method, url, true, username, password);\r\n\r\n      iterate(headers, (value, header) => {\r\n        xhr.setRequestHeader(header, value);\r\n      });\r\n\r\n      if (onprogress) {\r\n        if (uploadMethods.indexOfStrict(method) === -1) {\r\n          xhr.onprogress = onprogress;\r\n        } else {\r\n          xhr.upload.onprogress = onprogress;\r\n        }\r\n      }\r\n\r\n      xhr.onabort = () => {\r\n        reject(new Error('Request was aborted'));\r\n\r\n        xhr = null;\r\n      };\r\n\r\n      xhr.onerror = () => {\r\n        reject(new Error('Network error'));\r\n\r\n        xhr = null;\r\n      };\r\n\r\n      xhr.ontimeout = () => {\r\n        reject(new Error('Request time exceeded'));\r\n\r\n        xhr = null;\r\n      };\r\n\r\n      xhr.onreadystatechange = () => {\r\n        if (!xhr || !xhr.status || xhr.readyState !== 4) {\r\n          return;\r\n        }\r\n\r\n        const response = {\r\n          config: conf,\r\n          data: !responseType || responseType === 'text' ? xhr.responseText : xhr.response,\r\n          headers: parseHeaders(xhr.getAllResponseHeaders()),\r\n          status: xhr.status === 1223 ? 204 : xhr.status,\r\n          statusText: xhr.status === 1223 ? 'No Content' : xhr.statusText,\r\n          xhr\r\n        };\r\n\r\n        let promise = Promise.resolve();\r\n\r\n        iterate(after, (middleware) => {\r\n          promise = promise.then(() => {\r\n            if (middleware.length >= 2) {\r\n              return Promise.resolve();\r\n            }\r\n\r\n            return new Promise((resolve) => {\r\n              resolve(middleware(response));\r\n            });\r\n          }, (err) => {\r\n            if (middleware.length < 2) {\r\n              return Promise.reject(err);\r\n            }\r\n\r\n            return new Promise((resolve) => {\r\n              resolve(middleware(err, response));\r\n            });\r\n          });\r\n        });\r\n\r\n        resolve(promise\r\n          .then(() => response)\r\n          .catch((err) => {\r\n            try {\r\n              err.response = response;\r\n            } catch (e) {\r\n              throw err;\r\n            }\r\n\r\n            throw err;\r\n          })\r\n        );\r\n      };\r\n\r\n      xhr.responseType = responseType;\r\n      xhr.timeout = Number(timeout) || 0;\r\n      xhr.withCredentials = !!withCredentials;\r\n\r\n      xhr.send(data);\r\n    }));\r\n\r\n    promise.abort = function abort() {\r\n      if (xhr) {\r\n        xhr.abort();\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\n    return promise;\r\n  }\r\n}\r\n\r\ndefineProperties(Fetch.prototype, {\r\n  [Symbol.toStringTag]: 'Fetch'\r\n});\r\n\r\n/**\r\n * @function fetchBeforeMiddleware\r\n * @private\r\n * @param {FetchConfig} config\r\n * @description Built-in before middleware for url, data, method, headers construction.\r\n */\r\nfunction fetchBeforeMiddleware(config) {\r\n  const {\r\n    baseURL,\r\n    data,\r\n    headers,\r\n    method,\r\n    params,\r\n    query,\r\n    url\r\n  } = config;\r\n  const METHOD = method.toUpperCase();\r\n\r\n  config.method = METHOD;\r\n  config.url = constructURL(baseURL, url, params, query);\r\n  config.data = transformData(data, METHOD, headers);\r\n  config.headers = new Super(headers).object((headers, values, header) => {\r\n    header = new Str(header)\r\n      .toCapitalCase()\r\n      .replace(/\\s+/g, '-')\r\n      .$;\r\n\r\n    headers[header] = values.join(', ');\r\n  }).$;\r\n}\r\n\r\n/**\r\n * @const {Fetch} fetch\r\n * @type {Fetch}\r\n * @public\r\n * @description Empty instance of Fetch.\r\n */\r\nconst fetch = new Fetch();\r\n\r\nexport { Fetch, fetch };\r\n","/**\r\n * @module helpers/resolveURL\r\n * @private\r\n * @description Exports Object.assign-like method.\r\n */\r\n\r\nimport { Str } from '../Str';\r\n\r\nconst { location } = global;\r\n\r\nexport default (decodeQuery) => {\r\n  const {\r\n    search: query,\r\n    hash\r\n  } = location;\r\n  const params = {\r\n    query: {},\r\n    hash: hash.replace(/^#/, '')\r\n  };\r\n\r\n  if (!query) {\r\n    return params;\r\n  }\r\n\r\n  new Str(query.replace(/^\\?/, ''))\r\n    .split('&')\r\n    .forEach((rawParam) => {\r\n      let [param, value = ''] = rawParam.split('=');\r\n\r\n      param = decodeQuery ? decodeURIComponent(param) : param;\r\n      value = decodeQuery ? decodeURIComponent(value) : value;\r\n\r\n      if (!/^[^[]+/.test(param)) {\r\n        return;\r\n      }\r\n\r\n      let paramName;\r\n      let paramObject = params.query;\r\n\r\n      new Str(param)\r\n        .match(/^[^[\\]]*|\\[[^[\\]]*]/g)\r\n        .forEach((name) => {\r\n          if (name.indexOf('[')) {\r\n            paramName = name;\r\n\r\n            return;\r\n          }\r\n\r\n          name = name.slice(1, -1);\r\n\r\n          paramObject = paramObject[paramName] = paramObject[paramName] || (name ? {} : []);\r\n          paramName = name || paramObject.length;\r\n        });\r\n\r\n      paramObject[paramName] = value;\r\n    });\r\n\r\n  return params;\r\n};\r\n","/**\r\n * @module Router\r\n * @private\r\n * @mixin\r\n * @description Exports Router.\r\n */\r\n\r\nimport { Arr } from './Arr';\r\nimport { Elem, win } from './Elem';\r\nimport { self } from './Func';\r\nimport { Str } from './Str';\r\nimport { Super } from './Super';\r\nimport { switcher } from './Switcher';\r\nimport { assign, isNil, isRegExp, isString } from './helpers';\r\nimport constructURL from './helpers/constructURL';\r\nimport resolveURL from './helpers/resolveURL';\r\n\r\nconst Routes = new Arr([]);\r\nconst subscribers = new Super({});\r\nconst {\r\n  history,\r\n  location,\r\n  location: {\r\n    origin,\r\n    href\r\n  }\r\n} = global;\r\nlet initialized;\r\nlet pushed;\r\nlet wasRoot;\r\nlet wasDefault;\r\nlet rootRoute;\r\nlet redirectRoute;\r\nlet RedirectRoute;\r\nlet defaultRoute;\r\nlet DefaultRoute;\r\nlet currentRoute;\r\nlet currentRouteParams;\r\n\r\nconst pathSwitcher = switcher('call', () => {\r\n  throw new Error('State path must be a string, a regular expression or undefined! (at registerState)');\r\n})\r\n  .case(isRegExp, (path) => ({\r\n    path: path.source.replace(/\\\\\\//g, '/'),\r\n    url: path,\r\n    params: {}\r\n  }))\r\n  .case(isNil, () => ({\r\n    path: '/',\r\n    url: '/',\r\n    params: {}\r\n  }))\r\n  .case(isString, (path) => {\r\n    if (path.indexOf('/')) {\r\n      throw new Error('If route path is a string it must start with \"/\"! (at registerState)');\r\n    }\r\n\r\n    const index = path.indexOf('?');\r\n    const params = new Super({});\r\n    let newURL = '';\r\n    const newPath = new Str(path)\r\n      .slice(0, index === -1 ? path.length : index)\r\n      .replace(/^\\/|\\/$/g)\r\n      .split(/\\//)\r\n      .map((part, i, array) => {\r\n        if (!part && array.length > 1) {\r\n          throw new Error('If route path is a string it must not contain \"//\" or end with \"/\"! (at makeRoute)');\r\n        }\r\n\r\n        const index = part.indexOf(':');\r\n\r\n        if (index > 0) {\r\n          throw new Error('If route path is a string resource part must be either a string or an URL parameter! (at makeRoute)');\r\n        }\r\n\r\n        if (index === -1) {\r\n          return {\r\n            url: part,\r\n            value: part\r\n          };\r\n        }\r\n\r\n        const {\r\n          name,\r\n          regexp = /[^/]*/\r\n        } = resolveParameter(\r\n          part.slice(1),\r\n          'URL parameter must not be an empty string or contain characters besides \"a-zA-Z_$\"! (at makeRoute)',\r\n          'URL parameter regexp validator must be within parentheses (e.g. :userId(\\\\d+) and not contain ones)! (at makeRoute)'\r\n        );\r\n\r\n        params.$[name] = params.count;\r\n\r\n        return {\r\n          type: 'param',\r\n          url: `:${ name }`,\r\n          value: regexp\r\n        };\r\n      })\r\n      .word(({ type, url, value }) => {\r\n        let newPath;\r\n\r\n        if (type === 'param') {\r\n          newPath = `(${ value.source.replace(/\\\\\\//g, '/') })`;\r\n        } else {\r\n          newPath = new Str(value).escapeRegExp().$;\r\n        }\r\n\r\n        newURL += `/${ url }`;\r\n\r\n        return `/${ newPath }`;\r\n      });\r\n\r\n    return {\r\n      path: newPath,\r\n      url: newURL,\r\n      params: params.$\r\n    };\r\n  });\r\n\r\nclass Route {\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    const {\r\n      name,\r\n      path = '/',\r\n      abstract = false,\r\n      parent,\r\n      decodeQuery = true,\r\n      encodeQuery = true,\r\n      decodeParams = true,\r\n      encodeParams = true\r\n    } = options || {};\r\n    const {\r\n      url: relativeURL,\r\n      path: relativePath,\r\n      params\r\n    } = pathSwitcher(path);\r\n    const query = {};\r\n\r\n    new Super(this).assign({\r\n      name,\r\n      parentName: parent,\r\n      abstract: !!abstract,\r\n      children: new Arr([]),\r\n      decodeParams: !!decodeParams,\r\n      decodeQuery: !!decodeQuery,\r\n      encodeParams: !!encodeParams,\r\n      encodeQuery: !!encodeQuery,\r\n      params,\r\n      query,\r\n      relativePath,\r\n      relativeURL\r\n    });\r\n\r\n    const index = isString(path) ? path.indexOf('?') : -1;\r\n\r\n    if (index !== -1) {\r\n      new Str(path)\r\n        .replace(/&$/)\r\n        .slice(index + 1)\r\n        .split('&')\r\n        .forEach((param) => {\r\n          const {\r\n            name,\r\n            regexp = /[\\s\\S]*/\r\n          } = resolveParameter(\r\n            param,\r\n            'Query parameter must not be an empty string or contain characters besides \"a-zA-Z_$\"! (at makeRoute)',\r\n            'Query parameter regexp validator must be within parentheses (e.g. :userId(\\\\d+)) and not contain them! (at makeRoute)'\r\n          );\r\n\r\n          query[name] = new RegExp(`^${ regexp.source.replace(/\\\\\\//g, '/') }$`);\r\n        });\r\n    }\r\n\r\n    if (name === defaultRoute && (\r\n        new Super(params).count\r\n        || new Super(query).count\r\n      )) {\r\n      throw new Error('Default route must not have URL or query params! (at makeRoute)');\r\n    }\r\n  }\r\n}\r\n\r\nconst baseRoute = new Route();\r\n\r\nfunction initRouter() {\r\n  if (initialized) {\r\n    return;\r\n  }\r\n\r\n  initialized = true;\r\n  RedirectRoute = (Routes.find(({ name }) => name === redirectRoute) || {}).value;\r\n  DefaultRoute = (Routes.find(({ name }) => name === defaultRoute) || {}).value;\r\n\r\n  if (redirectRoute && !RedirectRoute) {\r\n    throw new Error(`There is no specified fallback route (\"${ redirectRoute }\")! (at initRouter)`);\r\n  }\r\n\r\n  Routes\r\n    .forEach((route) => {\r\n      const {\r\n        parentName,\r\n        name\r\n      } = route;\r\n      const ParentName = parentName || rootRoute;\r\n      const { value: parent } = Routes.find(({ name }) => name === ParentName) || {};\r\n\r\n      if (!parent) {\r\n        throw new Error(`No such parent route (\"${ ParentName }\") found for the route (\"${ name }\")! (at initRouter)`);\r\n      }\r\n\r\n      if (!parent.abstract && name !== rootRoute) {\r\n        throw new Error(`Parent route must be abstract (for \"${ name }\")! (at initRouter)`);\r\n      }\r\n\r\n      if (name !== rootRoute) {\r\n        route.parentName = ParentName;\r\n      }\r\n\r\n      route.parent = name === rootRoute\r\n        ? baseRoute\r\n        : parent;\r\n    })\r\n    .forEach((route) => {\r\n      const {\r\n        name,\r\n        parent: {\r\n          params: parentParams,\r\n          query: parentQuery,\r\n          path\r\n        },\r\n        params,\r\n        query,\r\n        relativeURL,\r\n        relativePath\r\n      } = route;\r\n      let proto = route;\r\n      let count = 0;\r\n      let newPath = relativePath;\r\n      let newURL = '';\r\n\r\n      if (isRegExp(path)) {\r\n        throw new Error('URL regexp route cannot be extended! (at initRouter)');\r\n      }\r\n\r\n      while (proto = proto.parent) {\r\n        count += new Super(proto.params).count;\r\n        newPath = proto.relativePath + newPath;\r\n        newURL = proto.relativeURL + newURL;\r\n\r\n        proto.children.push(route);\r\n      }\r\n\r\n      newPath = new RegExp(`^${ newPath.replace(/\\/+/g, '/').replace(/\\/$/, '') || '/' }$`);\r\n      newURL = isRegExp(relativeURL)\r\n        ? newPath\r\n        : (newURL + relativeURL).replace(/\\/+/g, '/').replace(/\\/$/, '') || '/';\r\n\r\n      new Super(query).proto(parentQuery);\r\n      new Super(params)\r\n        .proto(parentParams)\r\n        .forEach((value, key, params) => {\r\n          params[key] += count;\r\n        });\r\n\r\n      if (name === defaultRoute && (\r\n          new Super(params).count\r\n          || new Super(query).count\r\n        )) {\r\n        throw new Error('Default route must not have URL or query params! (at initRouter)');\r\n      }\r\n\r\n      route.url = newURL;\r\n      route.validatePath = newPath;\r\n    });\r\n\r\n  changeRoute();\r\n\r\n  win.on({\r\n    popstate() {\r\n      if (location.href !== href) {\r\n        pushed = true;\r\n      }\r\n\r\n      if (pushed) {\r\n        changeRoute();\r\n      }\r\n    },\r\n    click(e) {\r\n      const closestLink = new Elem(e.target).closest('a');\r\n\r\n      if (closestLink.length && closestLink.attr('target') !== '_blank') {\r\n        e.preventDefault();\r\n\r\n        forward(closestLink.attr('href') || '', true);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nfunction makeRoute(options) {\r\n  const {\r\n    name,\r\n    path,\r\n    abstract,\r\n    root,\r\n    fallbackTo,\r\n    default: isDefault\r\n  } = options || {};\r\n\r\n  if (initialized) {\r\n    console.warn('Router was already initialized (at makeRoute)');\r\n\r\n    return self;\r\n  }\r\n\r\n  if (wasRoot && root) {\r\n    throw new Error(`There can't be two root routes (\"${ rootRoute }\" and \"${ name }\")! (at makeRoute)`);\r\n  }\r\n\r\n  if (wasDefault && isDefault) {\r\n    throw new Error(`There can't be two default routes (\"${ defaultRoute }\" and \"${ name }\")! (at makeRoute)`);\r\n  }\r\n\r\n  if (!name) {\r\n    throw new Error('State must have a non-empty string \"name\" property! (at makeRoute)');\r\n  }\r\n\r\n  if (Routes.some(({ name: Name }) => Name === name)) {\r\n    throw new Error('State must have unique \"name\" property! (at makeRoute)');\r\n  }\r\n\r\n  if (root) {\r\n    wasRoot = true;\r\n    rootRoute = name;\r\n    options.parent = null;\r\n\r\n    if (fallbackTo) {\r\n      redirectRoute = fallbackTo;\r\n    }\r\n  }\r\n\r\n  if (isDefault) {\r\n    wasDefault = true;\r\n    defaultRoute = name;\r\n\r\n    if (abstract) {\r\n      throw new Error('Default route can\\'t be abstract! (at makeRoute)');\r\n    }\r\n\r\n    if (isRegExp(path)) {\r\n      throw new Error('Default route can\\'t have a regexp path! (at makeRoute)');\r\n    }\r\n  }\r\n\r\n  const route = new Route(options);\r\n\r\n  Routes.push(route);\r\n\r\n  let unsubscribe;\r\n  let routeLoaded;\r\n\r\n  return (Block) => (\r\n    class extends Block {\r\n      static template = `<div class=\"dwayne-route route-${ name }\" d-show=\"{__isCurrentRoute__}\">${ Block.template }</div>`;\r\n\r\n      constructor(opts) {\r\n        super(opts);\r\n\r\n        if (root) {\r\n          initRouter();\r\n\r\n          const router = {\r\n            buildURL(name, options = {}) {\r\n              const { value: route } = Routes.find(({ name: n }) => n === name) || {};\r\n\r\n              if (!route) {\r\n                throw new Error(`There are no routes with name \"${ name }\"! (at router.buildURL)`);\r\n              }\r\n\r\n              const {\r\n                url,\r\n                encodeParams,\r\n                encodeQuery\r\n              } = route;\r\n\r\n              if (isRegExp(url)) {\r\n                throw new Error('URL can be built only from the string URLs! (at router.buildURL)');\r\n              }\r\n\r\n              const {\r\n                params = {},\r\n                query = {},\r\n                hash = ''\r\n              } = options;\r\n\r\n              return constructURL(origin, url, params, query, hash, {\r\n                params: encodeParams,\r\n                query: encodeQuery\r\n              });\r\n            },\r\n            go(name, options) {\r\n              forward(router.buildURL(name, options), true);\r\n            },\r\n            goToURL(url) {\r\n              forward(url, true);\r\n            },\r\n            pushURL(url) {\r\n              changeHistory(url, true);\r\n            },\r\n            redirect(name, options) {\r\n              forward(router.buildURL(name, options));\r\n            },\r\n            redirectToURL(url) {\r\n              forward(url);\r\n            },\r\n            replaceURL(url) {\r\n              changeHistory(url);\r\n            }\r\n          };\r\n\r\n          this.global.router = router;\r\n        }\r\n\r\n        this.__isCurrentRoute__ = (\r\n          route === currentRoute\r\n          || route.children.indexOf(currentRoute) !== -1\r\n        );\r\n        this.args.route = currentRouteParams;\r\n\r\n        routeLoaded = false;\r\n        unsubscribe = subscribe(name, () => {\r\n          const isCurrentRoute = (\r\n            route === currentRoute\r\n            || route.children.indexOf(currentRoute) !== -1\r\n          );\r\n\r\n          if (isCurrentRoute) {\r\n            callBeforeLoad(this);\r\n          } else {\r\n            callBeforeLeave(this);\r\n          }\r\n\r\n          this.args.route = currentRouteParams;\r\n          this.__isCurrentRoute__ = isCurrentRoute;\r\n        });\r\n\r\n        if (this.__isCurrentRoute__) {\r\n          callBeforeLoad(this);\r\n        }\r\n      }\r\n\r\n      beforeRemove() {\r\n        unsubscribe();\r\n        unsubscribe = null;\r\n        callBeforeLeave(this);\r\n        super.beforeRemove();\r\n      }\r\n    }\r\n  );\r\n\r\n  function callBeforeLoad(route) {\r\n    if (route.beforeLoadRoute && !routeLoaded) {\r\n      try {\r\n        route.beforeLoadRoute();\r\n      } catch (err) {\r\n        console.error(`Uncaught error in ${ name }#beforeLeave:`, err);\r\n      }\r\n    }\r\n\r\n    routeLoaded = true;\r\n  }\r\n\r\n  function callBeforeLeave(route) {\r\n    if (route.beforeLeaveRoute && routeLoaded) {\r\n      try {\r\n        route.beforeLeaveRoute();\r\n      } catch (err) {\r\n        console.error(`Uncaught error in ${ name }#beforeLeave:`, err);\r\n      }\r\n    }\r\n\r\n    routeLoaded = false;\r\n  }\r\n}\r\n\r\nfunction subscribe(name, callback) {\r\n  subscribers.$[name] = callback;\r\n\r\n  return () => {\r\n    subscribers.delete(name);\r\n  };\r\n}\r\n\r\nfunction forward(url, push) {\r\n  changeHistory(url, push);\r\n  changeRoute();\r\n}\r\n\r\nfunction changeRoute() {\r\n  const route = findRouteByURL();\r\n\r\n  if (route) {\r\n    ({\r\n      route: currentRoute,\r\n      ...currentRouteParams\r\n    } = route);\r\n    assign(currentRouteParams, {\r\n      name: currentRoute.name,\r\n      host: location.host,\r\n      hostname: location.hostname,\r\n      href: location.href,\r\n      origin: location.origin,\r\n      pathname: location.pathname,\r\n      port: location.port,\r\n      protocol: location.protocol,\r\n      search: location.search\r\n    });\r\n  } else {\r\n    if (redirectRoute) {\r\n      const {\r\n        url,\r\n        encodeParams,\r\n        encodeQuery\r\n      } = RedirectRoute;\r\n\r\n      return forward(constructURL(origin, url, {}, {}, '', {\r\n        params: encodeParams,\r\n        query: encodeQuery\r\n      }));\r\n    }\r\n\r\n    currentRoute = null;\r\n    currentRouteParams = null;\r\n  }\r\n\r\n  subscribers.forEach((callback) => callback());\r\n}\r\n\r\nfunction findRouteByURL() {\r\n  const pathname = location.pathname || '/';\r\n  const search = location.search || '';\r\n  let urlParams;\r\n\r\n  Routes.some((route) => {\r\n    if (route.abstract) {\r\n      return;\r\n    }\r\n\r\n    const {\r\n      url: routeURL,\r\n      validatePath,\r\n      params,\r\n      query: requiredQuery,\r\n      decodeParams,\r\n      decodeQuery\r\n    } = route;\r\n    const resolved = resolveURL(decodeQuery);\r\n    const query = new Super(resolved.query);\r\n    const eventualParams = {};\r\n    const match = (\r\n      (pathname.replace(/\\/$/, '') || '/') +\r\n      (isRegExp(routeURL) ? search : '')\r\n    ).match(validatePath);\r\n\r\n    if (!match) {\r\n      return;\r\n    }\r\n\r\n    /* eslint guard-for-in: 0 */\r\n    for (const param in requiredQuery) {\r\n      if (!query.hasOwn(param) || !requiredQuery[param].test(query.$[param])) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    match.shift();\r\n\r\n    for (const param in params) {\r\n      eventualParams[param] = decode(match[params[param]], decodeParams);\r\n    }\r\n\r\n    urlParams = {\r\n      route,\r\n      params: eventualParams,\r\n      query: query.$,\r\n      hash: resolved.hash\r\n    };\r\n\r\n    return true;\r\n  });\r\n\r\n  if (urlParams) {\r\n    return urlParams;\r\n  }\r\n\r\n  if (!defaultRoute) {\r\n    return;\r\n  }\r\n\r\n  return {\r\n    route: DefaultRoute,\r\n    params: {},\r\n    ...resolveURL(DefaultRoute.decodeQuery)\r\n  };\r\n}\r\n\r\nfunction decode(string, decodeParams) {\r\n  return decodeParams\r\n    ? decodeURIComponent(string)\r\n    : string;\r\n}\r\n\r\nfunction changeHistory(url, push) {\r\n  try {\r\n    history[push ? 'pushState' : 'replaceState'](null, null, url);\r\n    pushed = true;\r\n  } catch (err) {\r\n    location.href = url;\r\n  }\r\n}\r\n\r\nfunction resolveParameter(param, nameErrorName, valueErrorName) {\r\n  const nameMatch = param.match(/^[a-z_$]+/i);\r\n\r\n  if (!nameMatch) {\r\n    throw new Error(nameErrorName);\r\n  }\r\n\r\n  const name = nameMatch[0];\r\n  const value = param.slice(name.length);\r\n  let regexp;\r\n\r\n  if (value && (value.indexOf('(') || value.indexOf(')') !== value.length - 1)) {\r\n    throw new Error(valueErrorName);\r\n  }\r\n\r\n  if (value) {\r\n    regexp = new RegExp(value.slice(1, -1));\r\n  }\r\n\r\n  return {\r\n    name,\r\n    regexp\r\n  };\r\n}\r\n\r\nexport { makeRoute };\r\n","import * as statics from './lib/browser';\r\nimport { assign } from './lib/helpers/assign';\r\n\r\nconst { D } = statics;\r\n\r\nassign(D, statics);\r\n\r\ndelete D.D;\r\n\r\nglobal.D = D;\r\n"],"names":["window","global","self","appliedRegExps","elem","id","cls","addClass","attr","value","prop","css","name","html","text","removeClass","removeAttr","removeCSS","canvasGetMethods","canvasRestMethods","constructors","htmlElements","svgElements","voidElements","htmlAllowedTagSymbols","htmlAllowedAttrSymbols","regexpSpecialCharacters","toStringTag","object","toString","call","replace","isArray","isArrayLike","isFunction","length","isInteger","isBoolean","isDate","isDateLike","Date","isNaN","getTime","isElement","test","isFinite","isNumber","Number","Infinity","isIntegerLike","parseInt","isNull","isNil","isNumberLike","isObject","Object","isPlainObject","isPrimitive","proto","getPrototypeOf","constructor","isRegExp","isString","isSymbol","isUndefined","validateCheckExpressions","n","RangeError","v","methods","TypeError","a","d","f","i","o","r","s","D","levelConstructors","k","len","check","iterate","callback","array","iteratedKeys","iterated","key","hasOwnProperty","assign","target","objects","arguments","source","index","dynamicDefineProperties","properties","propertyGenerator","defineProperty","defineProperties","method","undefined","get","set","Symbol","Math","random","toArray","createNewArray","push","numbers","validate","args","options","number","checker","error","Alphabet","alphabet","char","Error","chars","$$","word","keys","token","floor","prototype","string","ranges","split","range","start","charCodeAt","end","String","fromCharCode","Switcher","cases","mode","defaultValue","eventualCases","Case","case","switcher","def","default","ret","val","apply","setPrototypeOf","Function","when","condition","value1","value2","cloneSwitcher","Super","$","deepClone","deep","clone","RegExp","match","sum","count","func","descriptors","create","deepEqual","Boolean","deepEvery","filtered","deepFilter","deepFind","deepMap","IV","tree","deepReduce","deepSome","property","descriptor","props","freeze","getter","isFrozen","replacer","space","unshift","JSON","stringify","max","min","obj","getOwnPropertyDescriptor","getOwnPropertyNames","getOwnPropertySymbols","isContextObject","startKey","setter","reduce","deepAssign","o1","o2","strict","lastIndex","p1","p2","newTree","concat","nul","result","deepForEach","deepForEachEntry","deepFreeze","secret","iterator","Promise","executor","hiddenStatus","hiddenValue","onFulfill","onReject","realPromise","hiddenPromise","status","handled","resolve","reject","proxy","err","onUnhandledRejection","onError","then","onRejected","onFulfilledOrRejected","isFunc","onFulfilled","promise","handle","handler","iterable","toResolve","next","done","console","bind","Func","called","canBeCalled","before","after","sync","contextLocked","context","middleware","afterAll","beforeAll","bindContext","bindArgs","times","slice","lockContext","lockArgs","argsLocked","mark","time","timeEnd","unbindContext","unbindArgs","x","noop","toRadian","PI","toDegree","ln2","LN2","ln10","LN10","Num","toDegrees","acos","asin","atan","asDegrees","cos","abort","aborted","timeout","setTimeout","interval","clearTimeout","log","power","pow","sin","tan","rej","base","fractionDigits","toExponential","digits","toFixed","precision","toPrecision","abs","sqrt","cbrt","ceil","exp","ln","round","sign","rand","Arr","values","keyOf","keyOfStrict","separator","join","pop","reverse","shift","forEach","randomIndex","begin","compareFunction","sort","asc","y","deleteCount","items","splice","URL","BlobObject","progress","reader","FileReader","toReject","onprogress","e","onerror","onload","anchor","document","createElement","href","dataURL","setAttribute","click","createObjectURL","blob","blobParts","Blob","htmlSpecials","regexpSpecialsRegexp","Str","toUpperCase","searchString","position","revert","startsWith","escaped","symbol","searchValue","fromIndex","indexOf","lastIndexOf","regexp","str","search","beginSlice","endSlice","substr","indexStart","indexEnd","substring","trim","toLowerCase","parseJSON","json","parse","dates","parsed","submitString","NODE_REGEX_SET","constructCloseTagRegExp","TAG_OPEN_CLOSE","ATTRIBUTE","div","nodeSwitcher","node","selfClosing","attrs","map","parseCharacterData","children","parent","collapseWhiteSpace","type","element","rawTextSwitcher","InternalParsingError","ParsingError","markup","elements","startMarkup","found","globalIndex","find","nearString","throwUnexpectedError","matches","regex","returning","closeMatch","NaN","tagName","innerHTML","textContent","innerText","nativeDocument","emptyDiv","eventSeparator","textProperty","Node","propertyDescriptor","classes","windowsDwayneData","inputElements","svgNS","xmlNS","xlinkNS","xhtmlNS","typeSwitcher","ns","documentElement","namespaceURI","createElementNS","createComment","createTextNode","refSwitcher","filterSwitcher","selector","Elem","is","isElem","elems","innerSwitcher","paddings","borders","outerSwitcher","attrNSSwitcher","closest","isWindow","isHTMLDocument","isDocumentFragment","isCommentOrText","isStyleRule","addDwayneData","list","classList","add","insertAdjacentHTML","style","some","getName","sheet","cssRules","rules","toHyphenCase","insertRule","dwayneData","into","strings","applied","setApplied","np1","getElem","attributes","getAttribute","getAttributeNS","setAttributeNS","first","load","isBroken","canvas","width","height","drawImage","byteString","atob","ab","ArrayBuffer","ia","Uint8Array","blur","pseudo","getComputedStyle","rule","toFind","childNodes","className","cloneNode","parentNode","contains","appliedExpressions","cssText","toCamelCase","getPropertyValue","getPropertyPriority","removeProperty","setProperty","ctx","dataset","encoderOptions","toDataURL","deleteRule","event","eventInit","details","bubbles","cancelable","finalEvent","Event","createEvent","initEvent","dispatchEvent","focus","selectorText","hasAttribute","hasAttributeNS","currentDisplay","previousDisplay","insertBefore","appendChild","firstChild","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","complete","naturalWidth","naturalHeight","images","all","filter","$elem","removeListeners","on","proper","broken","prev","nextSibling","events","listeners","removeListener","listener","allListeners","removeEventListeners","define","has","newListener","addEventListener","delete","removeEventListener","previousSibling","link","removeChild","removeAttribute","removeAttributeNS","remove","created","txt","hasAttr","hasClass","level","validator","validators","errors","formErrors","form","inputs","input","dispatch","inputError","validatorWrap","validity","valid","validationMessage","every","innerHeight","calcCSS","borderTopWidth","borderBottomWidth","boxSizing","paddingTop","paddingBottom","px","innerWidth","borderLeftWidth","borderRightWidth","paddingLeft","paddingRight","outerHeight","marginTop","marginBottom","outerWidth","marginLeft","marginRight","win","doc","body","head","tag","nodeName","getContext","querySelectorAll","parseHTML","markupToJSON","template","content","forEachNode","size","registerDBlock","Block","DBlock","registerDEach","createBlock","DEach","opts","item","itemName","indexName","uid","constructValues","watchArgs","parentElem","uids","scope","UID","$uids","newKeys","newUIDs","evaluate","Item","block","insertAfter","registerDElements","DElements","mixins","watchersToRemove","child","mixin","watchers","watcher","forDElements","newContent","registerDIf","DIf","cond","evaluateAndWatch","if","newValue","registerDItem","DItem","registerDSwitch","DSwitch","wasDefault","equals","registerDText","DText","registerDAttr","Mixin","DAttr","oldValue","registerDBind","DBind","off","registerDClass","DClass","registerDElem","DElem","registerDHide","DHide","hide","show","registerDOn","DOn","evaluateOnce","registerDShow","DShow","registerDStyle","DStyle","registerDValidate","DValidate","propSwitcher","setValueSwitcher","inputValue","getValueSwitcher","listenerSwitcher","registerDValue","DValue","_value","initialScopeValue","setProp","initialElemValue","getProp","blocks","isPrototypeOf","attrName","expressionRegExp","onEvalError","evalMode","getting","changed","originalArgs","parentBlock","parentScope","expression","onChange","instance","forDItem","forDEach","store","expr","DwayneStore","localWatchers","newResult","watcherBlock","onRemove","index1","index2","arg","DwayneBlock","isParentSignal","beforeRemove","perm","locals","variable","local","defaultArgs","registerBuiltIns","Blocks","afterUpdate","Mixins","initApp","root","warn","isInstanceOfMixin","replacement","registerBlocks","isInstanceOfBlock","deepCloneChildren","register","svg","localBlocks","dBlockMatch","currentMixins","_match","blockInstance","Args","eventualArgs","constructPrivateScope","scopeValues","DItemFound","privateScope","afterConstruct","afterRender","createMixin","newChild","transformDIfChildren","ifElse","removeWatchers","constructPublicScope","temp","oldTempWatchers","was","zero","daysOfTheWeekNames","daysOfTheWeekAliases","monthsNames","monthsAliases","date","utc","zeroes","repeat","coeffs","getSwitcher","setSwitcher","Dat","what","now","prefix","formats","format","replaceString","date1","date2","isBefore","started","coeff","w","setTime","toISOString","toLocaleString","valueOf","absoluteURLRegexp","querySwitcher","query","queryParams","param","baseURL","url","params","hash","encodeOptions","encodeParams","encodeQuery","isAbsolute","encode","isEncoded","encodeURIComponent","rawHeaders","headers","notToTransform","withoutBody","data","indexOfStrict","contentType","defaults","location","origin","uploadMethods","Fetch","config","fetch","request","conf","fetchBeforeMiddleware","header","toPush","dataConfig","hasOwn","urlConfig","xhr","auth","username","password","responseType","withCredentials","XMLHttpRequest","open","setRequestHeader","upload","onabort","ontimeout","onreadystatechange","readyState","response","responseText","parseHeaders","getAllResponseHeaders","statusText","catch","send","METHOD","constructURL","transformData","toCapitalCase","decodeQuery","rawParam","decodeURIComponent","paramName","paramObject","Routes","subscribers","history","initialized","pushed","wasRoot","rootRoute","redirectRoute","RedirectRoute","defaultRoute","DefaultRoute","currentRoute","currentRouteParams","pathSwitcher","path","newURL","newPath","part","resolveParameter","escapeRegExp","Route","abstract","decodeParams","relativeURL","relativePath","baseRoute","initRouter","route","parentName","ParentName","parentParams","parentQuery","validatePath","closestLink","preventDefault","makeRoute","fallbackTo","isDefault","Name","unsubscribe","routeLoaded","router","buildURL","__isCurrentRoute__","subscribe","isCurrentRoute","callBeforeLoad","beforeLoadRoute","callBeforeLeave","beforeLeaveRoute","forward","changeRoute","findRouteByURL","host","hostname","pathname","port","protocol","urlParams","routeURL","requiredQuery","resolved","resolveURL","eventualParams","decode","changeHistory","nameErrorName","valueErrorName","nameMatch","statics"],"mappings":"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","preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}