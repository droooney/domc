{"version":3,"file":"dwayne.js","sources":["../src/global.js","../src/constants.js","../src/utils/array.js","../src/utils/is.js","../src/utils/object.js","../src/utils/defineProperty.js","../src/utils/noop.js","../src/utils/objectStatics.js","../src/utils/setSymbolSpecies.js","../src/utils/toCase.js","../src/utils/toStringTag.js","../src/helpers/Elem/addAttr.js","../src/helpers/Elem/addCSSProp.js","../src/helpers/Elem/addDataAttr.js","../src/helpers/Elem/addNext.js","../src/helpers/Elem/addParent.js","../src/helpers/Elem/addPrev.js","../src/helpers/Elem/createHideStyleNode.js","../src/helpers/Elem/getAttrNS.js","../src/helpers/Elem/is.js","../src/helpers/Elem/getEvent.js","../src/helpers/Elem/hide.js","../src/helpers/Elem/matches.js","../src/helpers/Elem/remove.js","../src/helpers/Elem/show.js","../src/helpers/Elem/toElem.js","../src/find.js","../src/Elem.js","../src/helpers/Block/InternalMixin.js","../src/helpers/Block/calculateArgs.js","../src/helpers/Block/cleanProperty.js","../src/helpers/Block/executeMixinWatchers.js","../src/helpers/Block/calculateAttrs.js","../src/helpers/Block/normalizeArgs.js","../src/helpers/Block/constructPrivateScope.js","../src/helpers/Block/removeWatcher.js","../src/helpers/Block/constructPublicScope.js","../src/helpers/Block/isInstanceOf.js","../src/Mixin.js","../src/helpers/Block/createBlock.js","../src/helpers/Block/extend.js","../src/helpers/Block/getDefaultArgs.js","../src/helpers/Block/remove.js","../src/helpers/Block/wrap.js","../src/Block.js","../src/BlockPublic.js","../src/blocks/Case.js","../src/blocks/Elements.js","../src/blocks/Children.js","../src/blocks/DynamicBlock.js","../src/blocks/Item.js","../src/blocks/Each.js","../src/blocks/If.js","../src/blocks/Switch.js","../src/mixins/Bind.js","../src/mixins/Class.js","../src/mixins/Elem.js","../src/mixins/Hide.js","../src/mixins/Node.js","../src/mixins/On.js","../src/mixins/Rest.js","../src/mixins/Show.js","../src/mixins/Style.js","../src/mixins/Value.js","../src/elems.js","../src/insertHtml.js","../src/initApp.js","../src/removeApp.js"],"sourcesContent":["/* eslint-disable no-nested-ternary, no-negated-condition */\nexport default typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n/* eslint-enable no-nested-ternary, no-negated-condition */\n","export const HIDE_CLASS = '__dwayne-hidden__';\nexport const SVG_NS = 'http://www.w3.org/2000/svg';\n\nexport const blocks = {};\nexport const mixins = {};\nexport const {\n  document = {},\n  Symbol = {}\n} = global;\nexport const version = '4.1.1';\n","export function collectFromArray(array, callback, initialValue = {}) {\n  iterateArray(array, (value, index) => {\n    callback(initialValue, value, index, array);\n  });\n\n  return initialValue;\n}\n\nexport function findInArray(array, callback) {\n  for (let i = 0, length = array.length; i < length; i++) {\n    const value = array[i];\n\n    if (callback(value, i, array)) {\n      return {\n        key: i,\n        value\n      };\n    }\n  }\n}\n\nexport function iterateArray(array, callback) {\n  for (let i = 0, length = array.length; i < length; i++) {\n    callback(array[i], i, array);\n  }\n}\n\nexport function removeArrayElem(array, elem) {\n  const index = array.indexOf(elem);\n\n  if (index !== -1) {\n    array.splice(index, 1);\n  }\n}\n\nexport function toObjectKeys(array) {\n  return collectFromArray(array, addKey);\n}\n\nfunction addKey(vars, variable) {\n  vars[variable] = true;\n}\n","export const { isArray } = Array;\n\nexport function isFunction(value) {\n  return typeof value === 'function';\n}\n\nexport function isNil(value) {\n  /* eslint-disable eqeqeq */\n  return value == null;\n  /* eslint-enable eqeqeq */\n}\n\nexport function isString(value) {\n  return typeof value === 'string';\n}\n","const {\n  hasOwnProperty: has\n} = {};\nconst { slice } = [];\n\nexport function assign(target) {\n  for (let i = 1, length = arguments.length; i < length; i++) {\n    iterateObject(arguments[i], (value, key) => {\n      target[key] = value;\n    });\n  }\n\n  return target;\n}\n\nexport function collectFromObject(object, callback, initialValue = {}) {\n  iterateObject(object, (value, key) => {\n    callback(initialValue, value, key, object);\n  });\n\n  return initialValue;\n}\n\nexport function except(object) {\n  const newObject = {};\n  const paths = arguments::slice(1);\n\n  iterateObject(object, (value, key) => {\n    if (paths.indexOf(key) === -1) {\n      newObject[key] = value;\n    }\n  });\n\n  return newObject;\n}\n\nexport function hasOwnProperty(object, key) {\n  return object::has(key);\n}\n\nexport function iterateObject(object, callback) {\n  for (const key in object) {\n    if (hasOwnProperty(object, key)) {\n      callback(object[key], key, object);\n    }\n  }\n}\n\nexport function mapObject(object, callback) {\n  const newObject = {};\n\n  iterateObject(object, (value, key) => {\n    newObject[key] = callback(value, key, object);\n  });\n\n  return newObject;\n}\n","import { iterateObject } from './object';\n\nexport const { defineProperties } = Object;\n\nexport function definePrototypeProperties(target, properties) {\n  iterateObject(properties, (value, name) => {\n    Object.defineProperty(target, name, {\n      value,\n      writable: true,\n      enumerable: false,\n      configurable: true\n    });\n  });\n}\n\nexport function defineFrozenProperties(target, properties) {\n  iterateObject(properties, (value, name) => {\n    Object.defineProperty(target, name, {\n      value,\n      writable: false,\n      enumerable: false,\n      configurable: false\n    });\n  });\n}\n","export function noop() {}\n","export const {\n  create,\n  keys,\n  getPrototypeOf: getProto\n} = Object;\n\nexport const setProto = Object.setPrototypeOf || ((target, proto) => {\n  /* eslint-disable no-proto */\n  target.__proto__ = proto;\n  /* eslint-enable no-proto */\n});\n","import { defineProperties } from './defineProperty';\nimport { Symbol } from '../constants';\n\nexport function setSymbolSpecies(klass, species) {\n  if (Symbol.species) {\n    defineProperties(klass, {\n      [Symbol.species]: {\n        get() {\n          return species;\n        }\n      }\n    });\n  }\n}\n","const DASHED_SYMBOL_REGEX = /-[a-z]/g;\nconst UPPERCASED_SYMBOL_REGEX = /[A-Z]/g;\n\nexport function toCamelCase(value) {\n  return value.replace(DASHED_SYMBOL_REGEX, capitalize);\n}\n\nexport function toHyphenCase(value) {\n  return value.replace(UPPERCASED_SYMBOL_REGEX, hyphenize);\n}\n\nfunction capitalize(match) {\n  return match[1].toUpperCase();\n}\n\nfunction hyphenize(match) {\n  return `-${ match[0].toLowerCase() }`;\n}\n","import { definePrototypeProperties } from './defineProperty';\nimport { Symbol } from '../constants';\n\nconst { toString } = {};\n\nexport function toStringTag(object) {\n  return object::toString().slice(8, -1);\n}\n\nexport function setToStringTag(klass, tag) {\n  if (Symbol.toStringTag) {\n    definePrototypeProperties(klass.prototype, {\n      [Symbol.toStringTag]: tag\n    });\n  }\n}\n","export function addAttr(attrs, attr) {\n  attrs[attr.name] = attr.value;\n}\n","import { toCamelCase } from '../../utils';\n\nconst CSS_PROP_VALUE_SEPARATOR_REGEX = /: /;\n\nexport function addCSSProp(css, value) {\n  if (value) {\n    const property = value.split(CSS_PROP_VALUE_SEPARATOR_REGEX);\n\n    css[toCamelCase(property[0])] = property[1];\n  }\n}\n","export function addDataAttr(data, value, key) {\n  data[key] = value;\n}\n","export function addNext(add, elem) {\n  add(elem.nextSibling);\n}\n","export function addParent(add, elem) {\n  add(elem.parentNode);\n}\n","export function addPrev(add, elem) {\n  add(elem.previousSibling);\n}\n","import { HIDE_CLASS } from '../../constants';\n\nexport function createHideStyleNode(head) {\n  const style = head.find(`style#${ HIDE_CLASS }`);\n\n  if (style.length) {\n    return;\n  }\n\n  head\n    .create('style')\n    .prop('id', HIDE_CLASS)\n    .text(`.${ HIDE_CLASS }{display:none !important;}`);\n}\n","import { Elem } from '../../Elem';\n\nconst X_LINK_ATTR_FIND_REGEX = /^xlink:\\w/;\nconst X_LINK_ATTR_REPLACE_REGEX = /^xlink:/;\nconst XML_NS = 'http://www.w3.org/2000/xmlns/';\nconst X_LINK_NS = 'http://www.w3.org/1999/xlink';\nconst Null = {\n  ns: null\n};\n\nexport function getAttrNS(attr, elem) {\n  const isXmlNs = attr === 'xmlns';\n\n  if (isXmlNs || attr === 'xmlns:xlink') {\n    if (elem.nodeName !== 'SVG') {\n      return Null;\n    }\n\n    return {\n      ns: XML_NS,\n      name: isXmlNs\n        ? 'xmlns'\n        : 'xlink'\n    };\n  }\n\n  if (X_LINK_ATTR_FIND_REGEX.test(attr)) {\n    if (!new Elem(elem).closest('svg').length) {\n      return Null;\n    }\n\n    return {\n      ns: X_LINK_NS,\n      name: attr.replace(X_LINK_ATTR_REPLACE_REGEX, '')\n    };\n  }\n\n  return Null;\n}\n","import { toStringTag, isArray } from '../../utils';\nimport { Elem } from '../../Elem';\n\nconst HTML_COLLECTION_REGEX = /^(HTMLCollection|NodeList)$/;\nconst DOCUMENT_REGEX = /Document$/;\nconst ELEMENT_REGEX = /Element$/;\n\nexport function isDocument(value) {\n  return DOCUMENT_REGEX.test(toStringTag(value));\n}\n\nexport function isElem(value) {\n  return value instanceof Elem;\n}\n\nexport function isElementsCollection(value) {\n  return (\n    HTML_COLLECTION_REGEX.test(toStringTag(value))\n    || isElem(value)\n    || isArray(value)\n  );\n}\n\nexport function isValidNode(value) {\n  const tag = toStringTag(value);\n\n  return (\n    ELEMENT_REGEX.test(tag)\n    || DOCUMENT_REGEX.test(tag)\n    || tag === 'Text'\n    || tag === 'DocumentFragment'\n    || tag === 'Comment'\n  );\n}\n","import { assign, toStringTag } from '../../utils';\nimport { isDocument } from './is';\n\nconst EVENT_REGEX = /Event$/;\n\nexport function getEvent(event, bubbles, cancelable, realDetails, elem) {\n  let finalEvent = event;\n\n  if (!EVENT_REGEX.test(toStringTag(finalEvent))) {\n    try {\n      finalEvent = new Event(finalEvent, { bubbles, cancelable });\n      assign(finalEvent, realDetails);\n    } catch (err) {\n      const document = isDocument(elem)\n        ? elem\n        : elem.ownerDocument;\n\n      finalEvent = document.createEvent('Event');\n      finalEvent.initEvent(event, bubbles, cancelable);\n\n      assign(finalEvent, realDetails);\n    }\n  }\n\n  return finalEvent;\n}\n","import { createHideStyleNode } from './createHideStyleNode';\nimport { HIDE_CLASS } from '../../constants';\nimport { Elem } from '../../Elem';\n\nexport function hide(elem) {\n  createHideStyleNode(new Elem(elem.ownerDocument.head));\n  new Elem(elem).addClass(HIDE_CLASS);\n}\n","import { isDocument } from './is';\n\nconst { indexOf } = [];\n\nexport function getMatchesFunction(elem) {\n  return (\n    elem.matches\n    || elem.matchesSelector\n    || elem.webkitMatchesSelector\n    || elem.mozMatchesSelector\n    || elem.msMatchesSelector\n    || elem.oMatchesSelector\n    || matches\n  );\n}\n\nfunction matches(selector) {\n  const document = isDocument(this)\n    ? this\n    : this.ownerDocument;\n\n  return document.querySelectorAll(selector)::indexOf(this) !== -1;\n}\n","export function remove(elem) {\n  const parent = elem.parentNode;\n\n  if (parent) {\n    parent.removeChild(elem);\n  }\n}\n","import { HIDE_CLASS } from '../../constants';\nimport { Elem } from '../../Elem';\n\nexport function show(elem) {\n  new Elem(elem).removeClass(HIDE_CLASS);\n}\n","import { isElem } from './is';\nimport { Elem } from '../../Elem';\n\nexport function toElem(elem) {\n  return isElem(elem)\n    ? elem\n    : new Elem(elem);\n}\n","import { Elem } from './Elem';\nimport { document } from './constants';\n\n/**\n * @function find\n * @public\n * @param {String} selector - Selector to find.\n * @param {Element|Node} [base = document] - Base to find in.\n * @returns {Elem} New instance of Elem.\n * @description Synonym for\n * [Document#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Document/querySelectorAll}.\n */\nexport function find(selector, base = document) {\n  return new Elem(base.querySelectorAll(String(selector)));\n}\n","import {\n  isNil, isString,\n  definePrototypeProperties,\n  collectFromArray, collectFromObject,\n  iterateArray, iterateObject,\n  toHyphenCase, setSymbolSpecies,\n  setToStringTag, setProto\n} from './utils';\nimport {\n  isDocument, isValidNode, getMatchesFunction,\n  addAttr, addCSSProp, addDataAttr,\n  addNext, addParent, addPrev,\n  toElem, isElementsCollection,\n  getAttrNS, getEvent, hide, show, remove\n} from './helpers/Elem';\nimport { SVG_NS } from './constants';\nimport { find } from './find';\n\n/**\n * @typedef {String} ElemEventString\n * @public\n * @description A string containing events separated by a comma with zero or more spaces or just spaces.\n */\n\n/**\n * @callback ElemListener\n * @public\n * @param {Event} e - Fired event.\n * @param {Element} elem - Element on which the listener was called.\n * @param {Number} index - Index of the element on which the listener was called.\n */\n\n/**\n * @callback ElemRemoveListeners\n * @public\n * @param {...ElemEventString} events - If at least one argument present only removes event listeners specified\n * by the events in the arguments.\n */\n\n/**\n * @callback IterationCallback\n * @public\n * @param {Element|Node} node - Iteration element.\n * @param {Number} index - Iteration index.\n * @param {Elem} elem - Initial set.\n */\n\n/**\n * @callback CollectCallback\n * @public\n * @param {AddCallback} add - Add element to the eventual set function.\n * @param {Element|Node} node - Iteration element.\n * @param {Number} index - Iteration index.\n * @param {Elem} elem - Initial set.\n */\n\n/**\n * @callback AddCallback\n * @public\n * @param {...(Element|Node|elem)} elem - Element to add.\n */\n\n/**\n * @callback ElemMethod\n * @public\n * @this Elem\n */\n\nconst EVENT_SEPARATOR_REGEX = /[,| ] */;\nconst CSS_STYLES_SEPARATOR_REGEX = /; ?/;\nconst CSS_IMPORTANT_REGEX = / ?!important$/;\nconst emptyCollection = [];\n\n/**\n * @class Elem\n * @extends Array.<Element|Node>\n * @public\n * @param {Element|Element[]} [elem = []] - An element or an array of elements to wrap.\n * @returns {Elem} Instance of Elem.\n * @description Wrap of an elements set.\n *\n * @example\n * new Elem(document.body);\n * new Elem(document.querySelectorAll('.cls'));\n * new Elem(document.getElementsByClassName('cls'));\n */\nclass Elem extends Array {\n  /**\n   * @method Elem.addMethods\n   * @public\n   * @param {String|Object.<String, ElemMethod>} methodName - Name of the method or object of\n   * method names and methods.\n   * @param {ElemMethod} [method] - If the first argument is a string this should be the method itself.\n   * @returns {typeof Elem}\n   */\n  static addMethods(methodName, method) {\n    if (arguments.length >= 2) {\n      methodName = { [methodName]: method };\n    }\n\n    definePrototypeProperties(this.prototype, methodName);\n\n    return this;\n  }\n\n  constructor(elem = emptyCollection) {\n    super();\n\n    if (!isElementsCollection(elem)) {\n      elem = [elem];\n    }\n\n    setProto(this, Elem.prototype);\n\n    iterateArray(elem, (elem) => {\n      if (!isElementsCollection(elem)) {\n        elem = [elem];\n      }\n\n      iterateArray(elem, (elem) => {\n        if (!this.includes(elem) && isValidNode(elem)) {\n          this.push(elem);\n        }\n      });\n    });\n  }\n\n  /**\n   * @method Elem#add\n   * @public\n   * @param {...(Elem|Element|Element[])} elements - Each argument is a Elem, or Element, or array of Elements.\n   * @returns {Elem} Returns this.\n   * @description Method for adding new elements to the set.\n   *\n   * @example\n   * elem1.find('.cls1')\n   *   .add(elem2.find('.cls2'))\n   *   .hide();\n   */\n  add(...elements) {\n    const elems = this.slice();\n\n    iterateArray(elements, (elem) => {\n      if (!isElementsCollection(elem)) {\n        elem = [elem];\n      }\n\n      iterateArray(elem, (elem) => {\n        if (!elems.includes(elem) && isValidNode(elem)) {\n          elems.push(elem);\n        }\n      });\n    });\n\n    return elems;\n  }\n\n  /**\n   * @method Elem#addClass\n   * @public\n   * @param {...String} classes - Classes to add.\n   * @returns {Elem} Returns this.\n   * @description Method for adding classes to the all the elements in the set.\n   *\n   * @example\n   * elem.addClass('red', 'round');\n   */\n  addClass(...classes) {\n    return this.forEach((elem) => {\n      const list = elem.classList;\n\n      iterateArray(classes, (cls) => list.add(cls));\n    });\n  }\n\n  /**\n   * @method Elem#attr\n   * @public\n   * @param {String|Object.<String, String>} [attr] - Name of the attribute to get or\n   * an object of the format { [attrName]: value, ... } to set attributes.\n   * @param {String} [value] - If the first argument is a string\n   * it should be a value to set for that attribute.\n   * @returns {Object|String|Elem} If no arguments passed, object of attributes of the first element in the set\n   * returned, if 1 string argument is passed the value of the attribute of the first element in the set\n   * returned otherwise returns this.\n   * @description Method for getting/setting attributes.\n   *\n   * @example\n   * elem.attr('attr1', 'value1'); // attribute attr1 set to 'value1' and this returned\n   * elem.attr('attr1');           // 'value1'\n   * elem.attr({\n   *   attr1: 'value3',            // attribute attr1 set to 'value3'\n   *   attr2: 'value2'             // attribute attr2 set to 'value2'\n   * });                           // this returned\n   * elem.attr();                  // { attr1: 'value3', attr2: 'value2' }\n   */\n  attr(attr, value) {\n    const elem = this[0];\n\n    if (!arguments.length) {\n      if (!elem) {\n        return {};\n      }\n\n      return collectFromArray(elem.attributes, addAttr);\n    }\n\n    if (arguments.length <= 1 && isString(attr)) {\n      if (!elem) {\n        return null;\n      }\n\n      const {\n        ns,\n        name\n      } = getAttrNS(attr, elem);\n\n      return ns\n        ? elem.getAttributeNS(ns, name)\n        : elem.getAttribute(attr);\n    }\n\n    if (arguments.length >= 2) {\n      attr = { [attr]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(attr, (value, key) => {\n        if (isNil(value) || value === false) {\n          return new Elem(elem).removeAttr(key);\n        }\n\n        value = value === true ? '' : value;\n\n        const { ns } = getAttrNS(key, elem);\n\n        if (ns) {\n          elem.setAttributeNS(ns, key, value);\n        } else {\n          elem.setAttribute(key, value);\n        }\n      });\n    });\n  }\n\n  /**\n   * @method Elem#children\n   * @public\n   * @returns {Elem} Set of the children of the first element in the set.\n   * @description Method for getting element's children.\n   *\n   * @example\n   * const children = elem.children();\n   */\n  children() {\n    return new Elem(this.length ? this[0].childNodes : []);\n  }\n\n  /**\n   * @method Elem#closest\n   * @public\n   * @param {String} selector - See the link.\n   * @returns {Elem} Set of the closest elements.\n   * @description Synonym for\n   * [Element#closest]{@link https://developer.mozilla.org/en/docs/Web/API/Element/closest}.\n   */\n  closest(selector) {\n    return this.collect((add, elem) => {\n      while (elem) {\n        if (new Elem(elem).is(selector)) {\n          return add(elem);\n        }\n\n        elem = elem.parentNode;\n      }\n    });\n  }\n\n  /**\n   * @method Elem#collect\n   * @public\n   * @param {CollectCallback} callback - Called on each iteration.\n   * @returns {Elem} Returns eventual set.\n   * @description Method for collecting elements into a new set.\n   *\n   * @example\n   * const parents = elem.collect((add, elem) => {\n   *   add(elem.parentNode);\n   * });\n   */\n  collect(callback) {\n    const elements = [];\n    const cb = ::elements.push;\n\n    this.forEach((elem, index) => {\n      callback(cb, elem, index, this);\n    });\n\n    return new Elem(elements);\n  }\n\n  /**\n   * @method Elem#contains\n   * @public\n   * @param {Elem|Element} element - Element to find out if it's within the first element in the set.\n   * @returns {Boolean} Returns if the argument within this element.\n   * @description Method is extension for\n   * [Node#contains]{@link https://developer.mozilla.org/en/docs/Web/API/Node/contains}.\n   *\n   * @example\n   * elem.contains(elem2);   // true|false\n   */\n  contains(element) {\n    const parent = this[0];\n    const child = toElem(element)[0];\n\n    return !parent || !child\n      ? false\n      : parent.contains(child);\n  }\n\n  /**\n   * @method Elem#create\n   * @public\n   * @param {String} type - Type of created element. If type is \"#text\" a text node is created.\n   * If type is \"#comment\" a comment node is created.\n   * @returns {Elem} New instance of Elem - wrap of the created elements.\n   * @description Method for creating elements inside this element.\n   * If this element is not an Element the element is just created.\n   *\n   * @example\n   * elem.create('div');\n   */\n  create(type) {\n    return this.collect((add, elem) => {\n      let el = null;\n      const isText = type === '#text';\n      const document = isDocument(elem)\n        ? elem\n        : elem.ownerDocument;\n\n      if (isText || type === '#comment') {\n        el = isText\n          ? document.createTextNode('')\n          : document.createComment('');\n      } else {\n        el = type === 'svg'\n          ? document.createElementNS(SVG_NS, type)\n          : document.createElement(type);\n      }\n\n      if (!isDocument(elem)) {\n        new Elem(el).into(elem);\n      }\n\n      add(el);\n    });\n  }\n\n  /**\n   * @method Elem#css\n   * @public\n   * @param {String|Object.<String, String>} [property] - Name of the property to get or\n   * an object of the format { [property]: value, ... } to set styles.\n   * @param {String} [value] - If the first argument is a string it should be a value to set for that property.\n   * @returns {Object|String|Elem} If no arguments passed, object of css styles of the element returned,\n   * if 1 string argument is passed the value of the property returned otherwise returns this.\n   * @description Method for getting/setting styles. Supports !important.\n   *\n   * @example\n   * elem.css('display', 'none'); // display set to 'none' and this returned\n   * elem.css('display');         // 'none'\n   * elem.css({\n   *   display: 'inline',         // display set to 'inline'\n   *   cursor: 'pointer'          // cursor set to 'pointer'\n   * });                          // this returned\n   * elem.css();                  // { display: 'none', cursor: 'pointer' }\n   */\n  css(property, value) {\n    const { style } = this[0] || {};\n\n    if (!arguments.length) {\n      if (!style) {\n        return {};\n      }\n\n      return collectFromArray(style.cssText.split(CSS_STYLES_SEPARATOR_REGEX), addCSSProp);\n    }\n\n    if (arguments.length <= 1 && isString(property)) {\n      if (!style) {\n        return '';\n      }\n\n      property = toHyphenCase(property);\n\n      return style.getPropertyValue(property) + (style.getPropertyPriority(property) ? ' !important' : '');\n    }\n\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(property, (value, property) => {\n        property = toHyphenCase(property);\n\n        if (isNil(value) || value === false) {\n          return new Elem(elem).removeCSS(property);\n        }\n\n        elem.style.removeProperty(property);\n        elem.style.setProperty(\n          property,\n          value.replace(CSS_IMPORTANT_REGEX, ''),\n          CSS_IMPORTANT_REGEX.test(value) ? 'important' : ''\n        );\n      });\n    });\n  }\n\n  /**\n   * @method Elem#data\n   * @public\n   * @param {String|Object.<String, String>} [key] - Name of the data attribute (without data- prefix)\n   * to get or an object of the format { [attrName]: value, ... } to set attributes.\n   * @param {String} [value] - If the first argument is a string it should be a value to set for that attribute.\n   * @returns {Object|String|Elem} If no arguments passed, object of dataset of the element returned,\n   * if 1 string argument is passed the value of the data attribute returned otherwise returns this.\n   * @description Method for getting/setting data attributes. See\n   * [HTMLElement#dataset]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/dataset}.\n   *\n   * @example\n   * elem.data('someKey1', 'value'); // attribute data-some-key1 set to 'value1' and this returned\n   * elem.data('someKey1');          // 'value1'\n   * elem.data({\n   *   someKey1: 'value3',           // attribute data-some-key1 set to 'value3'\n   *   someKey2: 'value2'            // attribute data-some-key2 set to 'value2'\n   * });                             // this returned\n   * elem.data();                    // { someKey1: 'value3', someKey2: 'value2' }\n   */\n  data(key, value) {\n    const { dataset } = this[0] || {};\n\n    if (!arguments.length) {\n      if (!dataset) {\n        return {};\n      }\n\n      return collectFromObject(dataset, addDataAttr);\n    }\n\n    if (arguments.length === 1 && isString(key)) {\n      if (!dataset) {\n        return;\n      }\n\n      return dataset[key];\n    }\n\n    if (arguments.length >= 2) {\n      key = { [key]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(key, (value, key) => {\n        elem.dataset[key] = value;\n      });\n    });\n  }\n\n  /**\n   * @method Elem#dispatch\n   * @public\n   * @param {String|Event} event - Event or a string (new Event(event) is created).\n   * @param {Object} [details = {}] - Object that is assigned to the event.\n   * @returns {Elem} Returns this.\n   * @see https://developer.mozilla.org/en/docs/Web/API/Event/Event\n   * @description Synonym for\n   * [EventTarget#dispatchEvent]{@link https://developer.mozilla.org/en/docs/Web/API/EventTarget/dispatchEvent}.\n   *\n   * @example\n   * elem.dispatch('click');\n   * elem.dispatch('click', { bubbles: false, cancellable: false, data: 1 });\n   * elem.dispatch(new CustomEvent('custom-event'));\n   */\n  dispatch(event, details = {}) {\n    const {\n      bubbles = true,\n      cancelable = true,\n      ...realDetails\n    } = details;\n\n    return this.forEach((elem) => {\n      elem.dispatchEvent(getEvent(\n        event,\n        bubbles,\n        cancelable,\n        realDetails,\n        elem\n      ));\n    });\n  }\n\n  /**\n   * @method Elem#elem\n   * @public\n   * @param {Number} [index = 0] - Index of the element of the set to get. Negative index means elem.length + index.\n   * @returns {Elem} New instance of Elem.\n   *\n   * @example\n   * elem.elem(1); // a wrap of the element in the set that has index 1\n   * elem.elem();  // a wrap of the element in the set that has index 0\n   */\n  elem(index = 0) {\n    if (index < 0) {\n      index = this.length + index;\n    }\n\n    return new Elem(this[index]);\n  }\n\n  /**\n   * @method Elem#filter\n   * @public\n   * @param {IterationCallback|String} filter - Filter function or a selector.\n   * @returns {Elem} New instance of Elem.\n   * @description Method for filtering elements.\n   *\n   * @example\n   * elem.filter((elem) => new Elem(elem).closest('.parent'));\n   */\n  filter(filter) {\n    if (isString(filter)) {\n      const selector = filter;\n\n      filter = (elem) => (\n        new Elem(elem).is(selector)\n      );\n    }\n\n    return this.collect((add, elem, index) => {\n      if (filter(elem, index, this)) {\n        add(elem);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#find\n   * @public\n   * @param {String} selector - Selector to find.\n   * @returns {Elem} New instance of Elem.\n   * @description Synonym for\n   * [Element#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Element/querySelectorAll}.\n   */\n  find(selector) {\n    return this.collect((add, elem) => {\n      add(find(selector, elem));\n    });\n  }\n\n  /**\n   * @method Elem#forEach\n   * @public\n   * @param {IterationCallback} callback - Called on each iteration.\n   * @returns {Elem} Returns this.\n   * @description Method for iterating over the set.\n   *\n   * @example\n   * find('.cls').forEach((element, index, set) => {\n   *   // do something\n   * });\n   */\n  forEach(callback) {\n    iterateArray(this, (value, key) => {\n      callback(value, key, this);\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Elem#hasAttr\n   * @public\n   * @param {String} attr - Name of the attribute.\n   * @returns {Boolean} If the first element in the set has the attribute.\n   * @description Method that returns if the first element in the set has the attribute or not.\n   *\n   * @example\n   * elem.attr('attr', 'value').hasAttr('attr'); // true\n   * elem.removeAttr('attr').hasAttr('attr');    // false\n   */\n  hasAttr(attr) {\n    const elem = this[0];\n\n    if (!elem) {\n      return false;\n    }\n\n    const { ns } = getAttrNS(attr, elem);\n\n    return ns\n      ? elem.hasAttributeNS(ns, attr)\n      : elem.hasAttribute(attr);\n  }\n\n  /**\n   * @method Elem#hasClass\n   * @public\n   * @param {String} cls - Name of the class.\n   * @returns {Boolean} If the first element in the set has the class.\n   * @description Method that returns if the first element in the set has the class or not.\n   *\n   * @example\n   * elem.addClass('cls').hasClass('cls');    // true\n   * elem.removeClass('cls').hasClass('cls'); // false\n   */\n  hasClass(cls) {\n    const elem = this[0];\n\n    return elem\n      ? elem.classList.contains(cls)\n      : false;\n  }\n\n  /**\n   * @method Elem#hide\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Hides all elements in the set.\n   *\n   * @example\n   * elem.hide();\n   */\n  hide() {\n    return this.forEach(hide);\n  }\n\n  /**\n   * @method Elem#html\n   * @public\n   * @param {String|*} [html] - HTML to write instead of current HTML.\n   * @returns {Elem|String} If no arguments passed HTML of the first element in the set returned.\n   * Otherwise all elements HTML in the set are set to the html argument.\n   * @description Gets or sets HTML.\n   *\n   * @example\n   * elem.html('<div>1</div>');\n   * elem.html(); // '<div>1</div>'\n   */\n  html(html) {\n    if (!arguments.length) {\n      const elem = this[0];\n\n      return elem\n        ? elem.innerHTML\n        : '';\n    }\n\n    return this.forEach((elem) => {\n      elem.innerHTML = html;\n    });\n  }\n\n  /**\n   * @method Elem#includes\n   * @public\n   * @param {Element|node} elem - Element to search.\n   * @return {Boolean} If the element is in the set.\n   * @description The same as Array#includes.\n   */\n  includes(elem) {\n    return this.indexOf(elem) !== -1;\n  }\n\n  /**\n   * @method Elem#insertAfter\n   * @public\n   * @param {Elem|Element} element - Element to insert this element after.\n   * @returns {Elem} Returns this.\n   * @description Puts the elements from the set after the element specified by the argument.\n   * The elements remain in the same order.\n   *\n   * @example\n   * elem.insertAfter(elem2);\n   * elem.insertAfter(document.getElementById('id'));\n   * elem.insertAfter('#id div.c1');\n   */\n  insertAfter(element) {\n    element = toElem(element).elem(0);\n\n    let parent = element.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    element = element.next()[0];\n    parent = parent[0];\n\n    return this.forEach((elem) => {\n      if (elem === element) {\n        element = element.nextSibling;\n\n        return;\n      }\n\n      if (element) {\n        parent.insertBefore(elem, element);\n      } else {\n        parent.appendChild(elem);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#insertBefore\n   * @public\n   * @param {Elem|Element} element - Element to insert this element before.\n   * @returns {Elem} Returns this.\n   * @description Puts the elements from the set before the element specified by the argument.\n   * The elements remain in the same order.\n   *\n   * @example\n   * elem.insertBefore(elem2);\n   * elem.insertBefore(document.getElementById('id'));\n   * elem.insertBefore('#id div.c1');\n   */\n  insertBefore(element) {\n    element = toElem(element).elem(0);\n\n    let parent = element.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    element = element[0];\n    parent = parent[0];\n\n    return this.forEach((elem) => {\n      parent.insertBefore(elem, element);\n    });\n  }\n\n  /**\n   * @method Elem#into\n   * @public\n   * @param {Elem|Element} element - Element to put this elements into.\n   * @param {Boolean} end - If the elements should be inserted to the end. If false they are inserted to the start.\n   * @returns {Elem} Returns this.\n   * @description Method is similar to\n   * [Node#appendChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/appendChild}.\n   *\n   * @example\n   * elem.into(elem2);\n   * elem.into(document.getElementById('id'));\n   * elem.into('#id div.c1');\n   */\n  into(element, end = true) {\n    element = toElem(element)[0];\n\n    if (!element) {\n      return this;\n    }\n\n    if (!end && element.firstChild) {\n      for (let i = this.length - 1; i >= 0; i--) {\n        element.insertBefore(this[i], element.firstChild);\n      }\n\n      return this;\n    }\n\n    return this.forEach((elem) => {\n      element.appendChild(elem);\n    });\n  }\n\n  /**\n   * @method Elem#is\n   * @public\n   * @param {String} selector\n   * @returns {Boolean} If the first element in the set matches the selector.\n   * @description Synonym for\n   * [Element#matches]{@link https://developer.mozilla.org/en/docs/Web/API/Element/matches}.\n   *\n   * @example\n   * elem.addClass('cls');\n   * elem.is('.cls');         // true\n   *\n   * elem.removeClass('cls');\n   * elem.is('.cls');         // false\n   */\n  is(selector) {\n    if (!this.length) {\n      return false;\n    }\n\n    const elem = this[0];\n    const matches = getMatchesFunction(elem);\n\n    return elem::matches(selector);\n  }\n\n  /**\n   * @method Elem#name\n   * @public\n   * @returns {String|void} nodeName (lowercased) of the first element in the set.\n   * @description Method for getting name of the first element in the set.\n   *\n   * @example\n   * elem.create('div').name() // 'div'\n   */\n  name() {\n    const elem = this[0];\n\n    return elem\n      ? elem.nodeName.toLowerCase()\n      : undefined;\n  }\n\n  /**\n   * @method Elem#next\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Method for finding next element to each element in the set.\n   *\n   * @example\n   * elem.next(); // finds next element to each element in the set\n   */\n  next() {\n    return this.collect(addNext);\n  }\n\n  /**\n   * @method Elem#on\n   * @public\n   * @param {ElemEventString|Object.<ElemEventString|ElemListener>} event - Either a {@link ElemEventString} string\n   * or an object with event keys (a key is also ElemEventString) and listeners values.\n   * @param {ElemListener} [listener] - If the first argument is a string it must be a listener function for\n   * specified event(s).\n   * @returns {ElemRemoveListeners} Function that takes optional event argument.\n   * @description Adds event listeners for all the elements in the set.\n   *\n   * @example\n   * elem.on(\n   *   'change, input',\n   *   (e, elem, index) => console.log(elem.value)\n   * );\n   * elem.on(\n   *   'change, input',\n   *   (e, elem, index) => console.log(elem.value)\n   * );\n   * elem.on({\n   *   'change, input': (e, elem, index) => console.log(elem.value),\n   *   'blur': () => console.log('blur')\n   * });\n   *\n   * const removeListeners = elem.on({\n   *   'change, input': (e, elem, index) => console.log(elem.value),\n   *   'blur': () => console.log('blur')\n   * });\n   *\n   * removeListeners('click');\n   * removeListeners('blur, change');\n   * removeListeners('blur, change', 'input');\n   * removeListeners();\n   */\n  on(event, listener) {\n    if (isString(event)) {\n      event = { [event]: listener };\n    }\n\n    const newEvents = {};\n    const allListeners = {};\n\n    iterateObject(event, (listener, event) => {\n      iterateArray(event.split(EVENT_SEPARATOR_REGEX), (event) => {\n        (newEvents[event] = newEvents[event] || []).push(listener);\n      });\n    });\n\n    this.forEach((elem) => {\n      iterateObject(newEvents, (listeners, event) => {\n        iterateArray(listeners, (listener) => {\n          elem.addEventListener(event, listener, false);\n          (allListeners[event] = allListeners[event] || []).push(() => {\n            elem.removeEventListener(event, listener);\n          });\n        });\n      });\n    });\n\n    return function removeEventListeners(event) {\n      if (arguments.length) {\n        iterateArray(arguments, (event) => {\n          iterateArray(event.split(EVENT_SEPARATOR_REGEX), (event) => {\n            const removeListeners = allListeners[event];\n\n            if (removeListeners) {\n              iterateArray(removeListeners, (removeListener) => removeListener());\n\n              delete allListeners[event];\n            }\n          });\n        });\n      } else {\n        iterateObject(allListeners, (removeListeners, event) => {\n          iterateArray(removeListeners, (removeListener) => removeListener());\n\n          delete allListeners[event];\n        });\n      }\n    };\n  }\n\n  /**\n   * @method Elem#parent\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Method returns wrap of the set of the parent elements of each element in the set.\n   */\n  parent() {\n    return this.collect(addParent);\n  }\n\n  /**\n   * @method Elem#prev\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Method for finding previous element to each element in the set.\n   *\n   * @example\n   * elem.prev(); // finds previous element to each element in the set\n   */\n  prev() {\n    return this.collect(addPrev);\n  }\n\n  /**\n   * @method Elem#prop\n   * @public\n   * @param {String|Object.<String, *>} property - Either a string of a property or an assigned object.\n   * @param {*} [value] - If a property parameter is a string\n   * this has to be an assigned value if it's present.\n   * @returns {Elem|*} Returns this if it's setter or a value if getter.\n   * @description Method that is either a property getter for the first element in the set\n   * or a setter for every element in the set.\n   *\n   * @example\n   * elem.prop('draggable', false);\n   * elem.prop('draggable'); // false\n   */\n  prop(property, value) {\n    if (arguments.length <= 1 && isString(property)) {\n      return this[0] ? this[0][property] : undefined;\n    }\n\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(property, (value, prop) => {\n        elem[prop] = value;\n      });\n    });\n  }\n\n  /**\n   * @method Elem#remove\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Removes all the elements from the set from the document.\n   * Note: it doesn't remove them from the set so watch out for the memory leaks.\n   *\n   * @example\n   * elem.remove();\n   */\n  remove() {\n    return this.forEach(remove);\n  }\n\n  /**\n   * @method Elem#removeAttr\n   * @public\n   * @param {...String} attributes - Attributes to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the attributes from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeAttr('foo', 'bar', 'baz');\n   */\n  removeAttr(...attributes) {\n    return this.forEach((elem) => {\n      iterateArray(attributes, (attr) => {\n        const { ns } = getAttrNS(attr, elem);\n\n        if (ns) {\n          elem.removeAttributeNS(ns, attr);\n        } else {\n          elem.removeAttribute(attr);\n        }\n      });\n    });\n  }\n\n  /**\n   * @method Elem#removeClass\n   * @public\n   * @param {...String} classes - Classes to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the classes from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeClass('foo', 'bar', 'baz');\n   */\n  removeClass(...classes) {\n    return this.forEach((elem) => {\n      const list = elem.classList;\n\n      iterateArray(classes, (cls) => list.remove(cls));\n    });\n  }\n\n  /**\n   * @method Elem#removeCSS\n   * @public\n   * @param {...String} props - CSS properties to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the CSS properties from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeCSS('display', 'position', 'margin');\n   */\n  removeCSS(...props) {\n    return this.forEach((elem) => {\n      iterateArray(props, (css) => {\n        elem.style.removeProperty(toHyphenCase(css));\n      });\n    });\n  }\n\n  /**\n   * @method Elem#replace\n   * @public\n   * @param {Elem|Element} element - Element to replace the first element in the set\n   * with a set of elements specified by the argument (Element or Elem).\n   * @returns {Elem} Returns this.\n   * @description Method is similar to\n   * [Node#replaceChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/replaceChild}.\n   *\n   * @example\n   * elem.replace(elem2);\n   * elem.replace(document.getElementById('id'));\n   * elem.replace('#id div.c1');\n   */\n  replace(element) {\n    element = toElem(element);\n\n    const first = this.elem(0);\n    const parent = first.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    let elem = parent;\n    let method = 'into';\n    const next = first.next()[0];\n    const prev = first.prev()[0];\n\n    if (next) {\n      elem = next;\n      method = 'insertBefore';\n    } else if (prev) {\n      elem = prev;\n      method = 'insertAfter';\n    }\n\n    first.remove();\n\n    element[method](elem);\n  }\n\n  /**\n   * @method Elem#show\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Shows all elements in the set.\n   * If an element was hidden using {@link Elem#hide} previous display is set.\n   *\n   * @example\n   * elem.show();\n   */\n  show() {\n    return this.forEach(show);\n  }\n\n  /**\n   * @method Elem#slice\n   * @public\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\n   * @returns {Elem}\n   * @description The same as Array#slice but for Elem.\n   */\n  slice() {\n    return new Elem(super.slice.apply(this, arguments));\n  }\n\n  /**\n   * @method Elem#text\n   * @public\n   * @param {String|*} [text] - Text to write instead of current text.\n   * @returns {Elem|String} If no arguments passed text of the first element in the set returned.\n   * Otherwise all elements texts in the set are set to the text argument.\n   * @description Gets or sets text.\n   *\n   * @example\n   * elem.text('123');\n   * elem.text(); // '123'\n   */\n  text(text) {\n    if (!arguments.length) {\n      return this.prop('textContent');\n    }\n\n    return this.forEach((elem) => {\n      elem.textContent = text;\n    });\n  }\n\n  /**\n   * @method Elem#toggleAttr\n   * @public\n   * @param {String} attr - Attribute to toggle.\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the attribute\n   * with the '' value and if falsey method removes the attribute. If not present method adds\n   * the attribute if it doesn't exist and removes if it does.\n   * @returns {Elem} Returns this.\n   * @description Method for toggling attributes.\n   *\n   * @example\n   * elem.toggleAttr('attr');\n   * elem.toggleAttr('attr', someCondition);\n   */\n  toggleAttr(attr, condition) {\n    return this.forEach((elem) => {\n      elem = new Elem(elem);\n\n      if (arguments.length < 2 ? !elem.hasAttr(attr) : condition) {\n        elem.attr(attr, '');\n      } else {\n        elem.removeAttr(attr);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#toggleClass\n   * @public\n   * @param {String} cls - Class to toggle.\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the class\n   * and if falsey method removes the class. If not present method adds\n   * the class if it doesn't exist and removes if it does.\n   * @returns {Elem} Returns this.\n   * @description Method for toggling classes.\n   *\n   * @example\n   * elem.toggleClass('cls');\n   * elem.toggleClass('cls', someCondition);\n   */\n  toggleClass(cls, condition) {\n    return this.forEach((elem) => {\n      const { classList } = elem;\n\n      elem = new Elem(elem);\n\n      if (arguments.length < 2 ? !classList.contains(cls) : condition) {\n        elem.addClass(cls);\n      } else {\n        elem.removeClass(cls);\n      }\n    });\n  }\n}\n\nsetToStringTag(Elem, 'Elem');\nsetSymbolSpecies(Elem, Array);\n\nexport { Elem };\n","import { assign } from '../../utils';\n\nclass InternalMixin {\n  constructor(opts) {\n    assign(this, opts);\n  }\n}\n\nexport { InternalMixin };\n","import { iterateArray, iterateObject, keys } from '../../utils';\n\nexport function calculateArgs(normalizedArgs, args, argsObject) {\n  iterateArray(keys(argsObject), (arg) => {\n    if (!(arg in args)) {\n      argsObject[arg] = undefined;\n    }\n  });\n\n  iterateObject(normalizedArgs, (value, arg) => {\n    argsObject[arg] = value;\n  });\n}\n","export function cleanProperty(value, arg, object) {\n  delete object[arg];\n}\n","import { iterateArray } from '../../utils';\n\nexport function executeMixinWatchers(mixin, value) {\n  const oldValue = mixin.$$.value;\n\n  mixin.$$.value = value;\n\n  iterateArray(mixin.$$.watchers, (watcher) => {\n    watcher(value, oldValue);\n  });\n}\n","import { iterateObject, iterateArray, hasOwnProperty } from '../../utils';\nimport { executeMixinWatchers } from './executeMixinWatchers';\nimport { InternalMixin } from './InternalMixin';\n\nexport function calculateAttrs({\n  newAttrs, currentAttrs, currentMixins,\n  elem, parentBlock, firstTime\n}) {\n  iterateObject(currentAttrs, (value, attr) => {\n    if (!hasOwnProperty(newAttrs, attr)) {\n      if (value instanceof InternalMixin) {\n        currentMixins[attr].$$.remove();\n        delete currentMixins[attr];\n      } else {\n        elem.removeAttr(attr);\n      }\n\n      delete currentAttrs[attr];\n    }\n  });\n\n  const mixins = [];\n\n  iterateObject(newAttrs, (value, attr) => {\n    const prevValue = currentAttrs[attr];\n\n    if (prevValue === value) {\n      return;\n    }\n\n    if (value instanceof InternalMixin) {\n      const {\n        parentScope,\n        Mixin,\n        value: evalFn\n      } = value;\n\n      if (prevValue) {\n        const mixin = currentMixins[attr];\n        const { $$ } = mixin;\n        let newValue;\n\n        $$.internal = value;\n\n        if ($$.internals.indexOf(value) === -1) {\n          $$.internals.push(value);\n\n          if (Mixin.evaluate) {\n            newValue = parentScope.$$.evaluate(\n              evalFn,\n              constructMixinWatcher(mixin, value),\n              mixin\n            );\n          }\n        } else if (Mixin.evaluate) {\n          newValue = parentScope.$$.evaluate(evalFn);\n        }\n\n        if (Mixin.evaluate) {\n          executeMixinWatchers(mixin, newValue);\n        }\n      } else {\n        const buildMixin = () => {\n          const mixin = new Mixin({\n            ...value,\n            parentBlock,\n            elem,\n            internal: value\n          });\n          const { $$ } = mixin;\n\n          $$.internal = value;\n          $$.internals = [value];\n          currentMixins[attr] = mixin;\n\n          if (Mixin.evaluate) {\n            const afterUpdate = (newValue, oldValue) => {\n              try {\n                mixin.afterUpdate(newValue, oldValue);\n              } catch (err) {\n                console.error(`Uncaught error in ${ $$.name }#afterUpdate:`, err);\n              }\n            };\n\n            $$.value = parentScope.$$.evaluate(\n              evalFn,\n              constructMixinWatcher(mixin, value),\n              mixin\n            );\n            afterUpdate($$.evaluate(afterUpdate));\n          }\n        };\n\n        if (firstTime) {\n          mixins.push(buildMixin);\n        } else {\n          buildMixin();\n        }\n      }\n    } else {\n      elem.attr(attr, value);\n    }\n\n    currentAttrs[attr] = value;\n  });\n\n  if (firstTime) {\n    return () => {\n      iterateArray(mixins, buildMixin);\n    };\n  }\n}\n\nfunction constructMixinWatcher(mixin, internalMixin) {\n  return function (newValue) {\n    if (mixin.$$.internal === internalMixin) {\n      executeMixinWatchers(mixin, newValue);\n    }\n  };\n}\n\nfunction buildMixin(builder) {\n  builder();\n}\n","import { iterateArray, iterateObject } from '../../utils';\n\nexport function normalizeArgs(argsChain) {\n  const newArgs = {};\n\n  iterateArray(argsChain, (args) => {\n    iterateObject(args, (value, arg) => {\n      newArgs[arg] = value;\n    });\n  });\n\n  return newArgs;\n}\n","import { create, collectFromObject } from '../../utils';\n\nexport function constructPrivateScope(object, type, parentScope) {\n  let scope = {};\n\n  if (type === 'globals') {\n    scope = create(\n      parentScope\n        ? parentScope.$$.globals\n        : null\n    );\n  }\n\n  return collectFromObject(object, (scope, value, key) => {\n    scope[key] = {\n      value,\n      watchers: []\n    };\n  }, scope);\n}\n","import { removeArrayElem, iterateArray } from '../../utils';\n\nexport function removeTempWatcher(watcher) {\n  watcher();\n}\n\nexport function removeWatchers(watchersToRemove) {\n  iterateArray(watchersToRemove, removeWatcher);\n}\n\nfunction removeWatcher({ watcher, watchers }) {\n  removeArrayElem(watchers, watcher);\n}\n","import { defineProperties, mapObject, iterateArray } from '../../utils';\nimport { gettingVars, evalMode } from '../../Block';\nimport { removeTempWatcher } from './removeWatcher';\n\nexport function constructPublicScope(scope, scopeValues, privateScope) {\n  defineProperties(scope, mapObject(scopeValues, (value, key) => {\n    const scope = privateScope[key];\n\n    return {\n      configurable: false,\n      enumerable: true,\n      get() {\n        if (evalMode) {\n          if (gettingVars.indexOf(scope.watchers) === -1) {\n            gettingVars.push(scope.watchers);\n          }\n        }\n\n        return scope.value;\n      },\n      set(value) {\n        if (value === scope.value) {\n          return;\n        }\n\n        const oldTempWatchers = scope.watchers.slice();\n\n        scope.watchers = [];\n        scope.value = value;\n\n        iterateArray(oldTempWatchers, removeTempWatcher);\n      }\n    };\n  }));\n}\n","const { isPrototypeOf } = {};\n\nexport function isInstanceOf(Class, Subclass) {\n  return Class::isPrototypeOf(Subclass) && Class.prototype::isPrototypeOf(Subclass.prototype);\n}\n","import {\n  defineFrozenProperties, getProto,\n  removeArrayElem, setToStringTag\n} from './utils';\nimport { wrapMixin, removeWatchers } from './helpers/Block';\n\nconst toStringTag = '[object Mixin]';\n\n/**\n * @class Mixin\n * @public\n * @param {Object} opts - Mixin options.\n * @returns {Mixin} Instance of Mixin.\n */\nclass Mixin {\n  /**\n   * @member {Boolean} [Mixin.evaluate = true]\n   * @type {Boolean}\n   * @public\n   * @description If the mixin value should be evaluated and watched or not.\n   */\n  static evaluate = true;\n\n  /**\n   * @method Mixin.wrap\n   * @public\n   * @param {...Wrapper} wrappers - Functions that return wrapped mixin.\n   * @returns {typeof Mixin} New mixin.\n   * @description Method for wrapping mixins.\n   * It is considered best practice to just extends the old mixin with a new one.\n   */\n  static wrap(...wrappers) {\n    return wrappers.reduce(wrapMixin, this);\n  }\n\n  constructor(opts) {\n    const {\n      internal,\n      elem,\n      args,\n      parentBlock,\n      parentScope,\n      parentTemplate\n    } = opts;\n    const watchersToRemove = [];\n    const watchers = [];\n    const { constructor } = getProto(this);\n    const name = constructor.displayName || constructor.name;\n\n    defineFrozenProperties(this, {\n      /**\n       * @member {Object} Mixin#$$\n       * @type {Object}\n       * @protected\n       * @property {Function} Mixin#$$.evaluate - Evaluate function.\n       * @property {Boolean} Mixin#$$.isRemoved - If the block is removed.\n       * @property {InternalMixin} Mixin#$$.internal - Current internal mixin instance.\n       * @property {InternalMixin[]} Mixin#$$.internals - Array of internal mixins bound to the the mixin.\n       * @property {String} Mixin#$$.name - Mixin name.\n       * @property {Block|void} Mixin#$$.parentBlock - Parent block.\n       * @property {Block|void} Mixin#$$.parentScope - Parent scope.\n       * @property {Block|void} Mixin#$$.parentTemplate - Parent template.\n       * @property {*} Mixin#$$.value - Current value.\n       * @property {Watcher[]} Block#$$.watchers - Temporary vars watchers.\n       * @property {Object[]} Block#$$.watchersToRemove - Watchers to remove before removing mixin.\n       */\n      $$: {\n        name,\n        internal,\n        parentScope,\n        parentBlock,\n        parentTemplate,\n        watchers,\n        watchersToRemove,\n        isRemoved: false,\n        evaluate: (watcher) => {\n          const {\n            value,\n            internal\n          } = this.$$;\n          const currentValue = constructor.evaluate\n            ? value\n            : parentScope.$$.evaluate(internal.value);\n\n          if (watcher) {\n            watchers.push(watcher);\n          }\n\n          return currentValue;\n        },\n        remove: (isParentSignal) => {\n          isParentSignal = !!isParentSignal;\n          this.$$.isRemoved = true;\n\n          removeWatchers(watchersToRemove);\n\n          try {\n            this.beforeRemove(isParentSignal);\n          } catch (err) {\n            console.error(`Uncaught error in ${ name }#beforeRemove:`, err);\n          }\n\n          if (!isParentSignal) {\n            removeArrayElem(parentBlock.$$.mixins, this);\n          }\n        }\n      }\n    });\n\n    /**\n     * @member {String[]} [Mixin#args]\n     * @type {String[]}\n     * @public\n     */\n    this.args = args;\n\n    /**\n     * @member {Block} [Mixin#parentScope]\n     * @type {Block}\n     * @public\n     */\n    this.parentScope = parentScope;\n\n    /**\n     * @member {Block} [Mixin#parentTemplate]\n     * @type {Block}\n     * @public\n     */\n    this.parentTemplate = parentTemplate;\n\n    /**\n     * @member {Elem} Mixin#elem\n     * @type {Elem}\n     * @public\n     */\n    this.elem = elem;\n\n    /**\n     * @member {Element} Mixin#node\n     * @type {Element}\n     * @public\n     */\n    this.node = elem[0];\n\n    /**\n     * @member {String} [Mixin#name]\n     * @type {String}\n     * @public\n     */\n    this.name = name;\n\n    parentBlock.$$.mixins.push(this);\n  }\n\n  afterUpdate() {}\n\n  /**\n   * @method Mixin#beforeRemove\n   * @public\n   * @param {Boolean} isElementRemoved - If element removed as well.\n   * @description Is called before the mixin removal.\n   */\n  beforeRemove(isElementRemoved) {}\n\n  /**\n   * @method Block#evaluate\n   * @public\n   * @param {Watcher} [callback] - If present, callback which is called when the mixin value is changed.\n   * @returns {*} Evaluation result.\n   * @description Method for evaluating the mixin value and watching for the changes.\n   */\n  evaluate(callback) {\n    return this.$$.evaluate(callback);\n  }\n\n  toString() {\n    return toStringTag;\n  }\n}\n\nsetToStringTag(Mixin, 'Mixin');\n\nexport { Mixin };\n","import {\n  except, create, assign,\n  iterateObject, iterateArray,\n  isNil, isString, isArray\n} from '../../utils';\nimport { isDocument } from '../Elem';\nimport { Elem } from '../../Elem';\nimport { SVG_NS, blocks, mixins } from '../../constants';\nimport { cleanProperty } from './cleanProperty';\nimport { calculateAttrs } from './calculateAttrs';\nimport { normalizeArgs } from './normalizeArgs';\nimport { constructPrivateScope } from './constructPrivateScope';\nimport { constructPublicScope } from './constructPublicScope';\nimport { isInstanceOf } from './isInstanceOf';\nimport { InternalMixin } from './InternalMixin';\nimport { Block } from '../../Block';\nimport { Mixin } from '../../Mixin';\n\nconst emptyArray = [];\n\nexport function createBlock({ node, parent, parentElem, parentBlock, parentScope, parentTemplate, prevBlock }) {\n  const doc = isDocument(parentElem[0])\n    ? parentElem\n    : new Elem(parentElem[0].ownerDocument);\n  const args = node.args || {};\n  const { type } = node;\n  const isElements = type === blocks.Elements;\n  let { children } = node;\n  let constructor = !isString(type) && type;\n  let DynamicBlockArgs;\n\n  if (type === blocks.DynamicBlock) {\n    DynamicBlockArgs = except(args, 'type');\n  }\n\n  if (isArray(constructor)) {\n    constructor = class extends Block {\n      static html = constructor;\n    };\n  }\n\n  if (!isInstanceOf(Block, constructor) && !isString(type)) {\n    throw new Error(`Wrong block type given: ${ type }`);\n  }\n\n  if (!constructor) {\n    const { value } = node;\n    const elem = (\n      parentElem[0].namespaceURI === SVG_NS\n        ? doc.create('svg')\n        : doc\n    ).create(type);\n    const currentAttrs = create(null);\n    const currentMixins = create(null);\n    let attrs = create(null);\n    let wasRest;\n    const attrsChain = [attrs];\n\n    iterateObject(args, (value, attr) => {\n      const isRest = value.mixin === mixins.Rest;\n      const localAttrs = isRest || wasRest\n        ? create(attrs)\n        : attrs;\n\n      if (attrs !== localAttrs) {\n        attrsChain.push(localAttrs);\n      }\n\n      attrs = localAttrs;\n\n      if (isRest) {\n        const restAttrs = parentScope.$$.evaluate(value, (value) => {\n          iterateObject(localAttrs, cleanProperty);\n          assign(localAttrs, value);\n          calculateAttrs({\n            newAttrs: normalizeArgs(attrsChain),\n            currentAttrs,\n            currentMixins,\n            elem,\n            parentBlock,\n            firstTime: false\n          });\n        }, parentBlock);\n\n        wasRest = true;\n\n        return assign(localAttrs, restAttrs);\n      }\n\n      wasRest = false;\n\n      if (isInstanceOf(Mixin, value.mixin)) {\n        localAttrs[attr] = new InternalMixin({\n          Mixin: value.mixin,\n          args: value.args,\n          parentScope,\n          parentTemplate,\n          value\n        });\n\n        return;\n      }\n\n      localAttrs[attr] = parentScope.$$.evaluate(value, (value) => {\n        localAttrs[attr] = value;\n        calculateAttrs({\n          newAttrs: normalizeArgs(attrsChain),\n          currentAttrs,\n          currentMixins,\n          elem,\n          parentBlock,\n          firstTime: false\n        });\n      }, parentBlock);\n    });\n\n    parentBlock.$$.mixinsToBuild.push(calculateAttrs({\n      newAttrs: normalizeArgs(attrsChain),\n      currentAttrs,\n      currentMixins,\n      elem,\n      parentBlock,\n      firstTime: true\n    }));\n\n    if (type === '#comment') {\n      elem.text(value);\n    }\n\n    if (type === '#text') {\n      let text = parentScope.$$.evaluate(value, (value) => {\n        if (isNil(value)) {\n          value = '';\n        }\n\n        elem.text(`${ value }`);\n      }, parentBlock);\n\n      if (isNil(text)) {\n        text = '';\n      }\n\n      elem.text(`${ text }`);\n    }\n\n    const isParentBlock = parent instanceof Block;\n    const childBlocks = [];\n\n    /* istanbul ignore if */\n    if (type === 'iframe' && !('src' in attrs)) {\n      elem.on('load', () => {\n        const document = elem[0].contentDocument;\n        const doc = new Elem(document);\n\n        new Elem(document.documentElement).remove();\n        iterateChildren(childBlocks, true);\n\n        function iterateChildren(children, isRoot) {\n          iterateArray(children, (child) => {\n            if (child instanceof Block) {\n              if (isRoot) {\n                child.$$.parentElem = doc;\n                child.$$.parent = doc;\n                child.$$.content.into(doc);\n              }\n\n              iterateChildren(child.$$.children, false);\n            } else {\n              child.into(doc);\n            }\n          });\n        }\n      });\n    }\n\n    if (prevBlock instanceof Block) {\n      prevBlock.$$.insertAfterIt(elem, false);\n    } else if (prevBlock) {\n      elem.insertAfter(prevBlock);\n\n      if (isParentBlock) {\n        parent.$$.addContent(elem);\n      }\n    } else if (isParentBlock) {\n      parent.$$.insertInStartOfIt(elem, false);\n    } else {\n      elem.into(parentElem, false);\n    }\n\n    if (children) {\n      let prevBlock;\n      let parentElem = elem;\n\n      /* istanbul ignore if */\n      if (type === 'template') {\n        parentElem = new Elem(elem[0].content = elem[0].content || doc[0].createDocumentFragment());\n      } else if (type === 'iframe') {\n        if ('src' in attrs) {\n          children = emptyArray;\n        } else {\n          const document = elem[0].contentDocument;\n\n          new Elem(document.documentElement).remove();\n\n          parentElem = new Elem(document);\n        }\n      }\n\n      iterateArray(children, (child) => {\n        prevBlock = createBlock({\n          node: child,\n          parent: parentElem,\n          parentElem,\n          parentBlock,\n          parentScope,\n          parentTemplate,\n          prevBlock\n        });\n        childBlocks.push(prevBlock);\n      });\n    }\n\n    return elem;\n  }\n\n  const blockInstance = new constructor({\n    args,\n    DynamicBlockArgs,\n    children,\n    parent,\n    parentElem,\n    parentBlock,\n    parentScope,\n    parentTemplate,\n    prevBlock\n  });\n  const {\n    $$,\n    $$: { name },\n    args: Args,\n    globals,\n    ...locals\n  } = blockInstance;\n\n  const html = isElements\n    ? Args.value || []\n    : constructor.html;\n\n  $$.args = constructPrivateScope(Args);\n  $$.locals = constructPrivateScope(locals);\n  $$.globals = constructPrivateScope(globals, 'globals', parentScope);\n\n  if (type === blocks.Item) {\n    const scopeValues = {\n      [node.itemName]: node.item,\n      [node.indexName]: node.index\n    };\n    const scope = parentScope.$$.Constructor === blocks.Item\n      ? parentScope.$$.scope\n      : parentScope;\n\n    $$.privateScope = constructPrivateScope(scopeValues);\n    constructPublicScope($$.scope = create(scope), scopeValues, $$.privateScope);\n  }\n\n  constructPublicScope(Args, Args, $$.args);\n  constructPublicScope(globals, globals, $$.globals);\n  constructPublicScope(blockInstance, locals, $$.locals);\n\n  try {\n    blockInstance._afterConstruct();\n  } catch (err) {\n    console.error(`Uncaught error in ${ name }#afterConstruct:`, err);\n  }\n\n  prevBlock = undefined;\n  parentScope = isElements\n    ? Args.parentScope\n    : blockInstance;\n  parentTemplate = isElements\n    ? Args.parentTemplate\n    : blockInstance;\n\n  iterateArray(html, (child) => {\n    prevBlock = createBlock({\n      node: child,\n      parent: blockInstance,\n      parentElem,\n      parentBlock: blockInstance,\n      parentScope,\n      parentTemplate,\n      prevBlock\n    });\n  });\n\n  blockInstance.$$.isRendered = true;\n\n  iterateArray(blockInstance.$$.mixinsToBuild, (executeBuilders) => {\n    executeBuilders();\n  });\n  blockInstance.$$.mixinsToBuild = [];\n\n  try {\n    blockInstance._afterRender();\n  } catch (err) {\n    console.error(`Uncaught error in ${ name }#afterRender:`, err);\n  }\n\n  return blockInstance;\n}\n","import { setProto, getProto } from '../../utils';\nimport { isInstanceOf } from './isInstanceOf';\nimport { Block } from '../../Block';\n\nexport function extendBlock(block, newBlock) {\n  if (isInstanceOf(Block, newBlock)) {\n    if (isInstanceOf(block, newBlock)) {\n      let currentBlock = newBlock;\n      let proto;\n\n      while ((proto = getProto(currentBlock)) !== block) {\n        currentBlock = proto;\n      }\n\n      extend(currentBlock, getProto(block));\n    }\n\n    extend(block, newBlock);\n  }\n\n  return block;\n}\n\nfunction extend(Block, BaseBlock) {\n  setProto(Block, BaseBlock);\n  setProto(Block.prototype, BaseBlock.prototype);\n}\n","import { iterateObject, create } from '../../utils';\n\nexport function getDefaultArgs(argsDescriptions) {\n  const newArgs = create(null);\n\n  iterateObject(argsDescriptions, ({ default: def }, arg) => {\n    newArgs[arg] = def;\n  });\n\n  return newArgs;\n}\n","export function removeWithParentSignal(child) {\n  child.$$.remove(true);\n}\n\nexport function remove(child) {\n  child.$$.remove();\n}\n","import { isInstanceOf } from './isInstanceOf';\nimport { Block } from '../../Block';\nimport { Mixin } from '../../Mixin';\n\nexport function wrapBlock(block, wrapper) {\n  const newBlock = wrapper(block);\n\n  return isInstanceOf(Block, newBlock)\n    ? newBlock\n    : block;\n}\n\nexport function wrapMixin(mixin, wrapper) {\n  const newMixin = wrapper(mixin);\n\n  return isInstanceOf(Mixin, newMixin)\n    ? newMixin\n    : mixin;\n}\n","import { Elem } from './Elem';\nimport {\n  defineFrozenProperties,\n  assign, iterateArray, iterateObject,\n  isFunction, setToStringTag,\n  removeArrayElem, create,\n  getProto, setProto\n} from './utils';\nimport {\n  normalizeArgs, removeWatchers, removeWithParentSignal,\n  cleanProperty, InternalMixin, calculateArgs,\n  wrapBlock, extendBlock, getDefaultArgs, isInstanceOf\n} from './helpers/Block';\nimport { blocks, mixins } from './constants';\nimport { Mixin } from './Mixin';\n\n/**\n * @typedef {BlockNode[]} Template\n * @public\n * @property {String[]} vars - Template used vars.\n */\n\n/**\n * @typedef {Object} BlockNode\n * @public\n * @property {String|typeof Block} type - Block type.\n * @property {Object} [args] - Block args.\n * @property {BlockNode[]} children - Block children.\n * @property {*} value - Text or comment node value.\n */\n\n/**\n * @typedef {Error} EvaluationError\n * @public\n * @property {Function} func - Function which caused eval error.\n * @property {String} original - Evaluated expression original js.\n * @property {Block} block - Block in context of which the expression has been evaluated with the error.\n */\n\n/**\n * @callback Watcher\n * @public\n * @param {*} newValue - New value.\n * @param {*} oldValue - Old value.\n */\n\n/**\n * @callback Wrapper\n * @public\n * @param {typeof Block|typeof Mixin} Block class to wrap.\n * @returns {typeof Block} New Block class.\n */\n\nconst toStringTag = '[object Block]';\nconst afterElem = new Elem();\nconst emptyObject = {};\nlet evalMode = false;\nlet gettingVars = [];\n\n/**\n * @class Block\n * @extends null\n * @public\n * @param {Object} opts - Block options.\n * @returns {Block} Instance of Block.\n *\n * @example\n * import { Block, initApp } from 'dwayne';\n *\n * class App extends Block {\n *   static html = html`<Hello text=\"{text}\"/> ({ this.times })`;\n *\n *   constructor(opts) {\n *     super(opts);\n *\n *     this.text = 'world';\n *     this.times = 0;\n *\n *     this.setInterval();\n *   }\n *\n *   setInterval() {\n *     this.interval = setInterval(() => {\n *       this.times++;\n *     });\n *   }\n *\n *   beforeRemove() {\n *     clearInterval(this.interval);\n *   }\n * }\n *\n * Block.block('App', App);\n * Block.block('Hello', html`Hello, {args.text}!`);\n *\n * initApp('App', document.getElementById('root'));\n */\nclass Block {\n  /**\n   * @member {Object} [Block.args = null]\n   * @type {Object}\n   * @public\n   * @description Block args description.\n   */\n  static args = null;\n\n  /**\n   * @member {Object} [Block.defaultLocals = null]\n   * @type {Object}\n   * @public\n   * @description Block default locals.\n   */\n  static defaultLocals = null;\n\n  /**\n   * @member {String} [Block.displayName = null]\n   * @type {String}\n   * @public\n   * @description Block display name.\n   */\n  static displayName = null;\n\n  /**\n   * @member {Template} [Block.html = []]\n   * @type {Template}\n   * @public\n   * @description Block template.\n   */\n  static html = [];\n\n  /**\n   * @method Block.extend\n   * @public\n   * @param {...(typeof Block)} blocks - Blocks that will be extended by the context.\n   * @returns {typeof Block} Returns this.\n   * @description Method for extending blocks. Usually used with extending the default block.\n   */\n  static extend(...blocks) {\n    return blocks.reduce(extendBlock, this);\n  }\n\n  /**\n   * @method Block.onEvalError\n   * @public\n   * @param {EvaluationError} err - The method is called when an evaluation error occurs.\n   */\n  static onEvalError(err) {\n    console.error(`Eval error (evaluating \"${ err.original || err.func }\" in context of ${ err.block.$$.name }):`, err);\n  }\n\n  /**\n   * @method Block.wrap\n   * @public\n   * @param {...Wrapper} wrappers - Functions that return wrapped block.\n   * @returns {typeof Block} New block.\n   * @description Method for wrapping blocks into another blocks.\n   * It is considered best practice to just extends the old block with a new one.\n   */\n  static wrap(...wrappers) {\n    return wrappers.reduce(wrapBlock, this);\n  }\n\n  constructor(opts) {\n    const {\n      args: originalArgs,\n      DynamicBlockArgs,\n      children,\n      parent,\n      parentElem,\n      parentBlock,\n      parentScope,\n      parentTemplate,\n      prevBlock\n    } = opts;\n    const watchersToRemove = [];\n    const { constructor } = getProto(this);\n    const name = constructor.displayName || constructor.name;\n    const childrenBlocks = [];\n    const childrenMixins = [];\n    const isParentBlock = parent instanceof Block;\n    const isElements = constructor === blocks.Elements;\n\n    defineFrozenProperties(this, {\n      /**\n       * @member {Object} Block#$$\n       * @type {Object}\n       * @protected\n       * @property {Object} Block#$$.args - Private args scope.\n       * @property {Block[]} Block#$$.children - Child blocks.\n       * @property {Elem} Block#$$.content - Content elements.\n       * @property {Object|void} Block#$$.DynamicBlockArgs - DynamicBlock args.\n       * @property {Function} Block#$$.evaluate - Evaluate function.\n       * @property {Object} Block#$$.globals - Private globals scope.\n       * @property {Object[]} Block#$$.htmlChildren - Block html children.\n       * @property {Boolean} Block#$$.isRemoved - If the block is removed.\n       * @property {Boolean} Block#$$.isRendered - If the block is rendered.\n       * @property {Object} Block#$$.locals - Private locals scope.\n       * @property {Mixin[]} Block#$$.mixins - Child mixins.\n       * @property {Function[]} Block#$$.mixinsToBuild - Pending mixins builders.\n       * @property {String} Block#$$.name - Block name.\n       * @property {typeof Block} Block#$$.Constructor - Block constructor.\n       * @property {Block|Elem|void} Block#$$.parent - Parent block or elem.\n       * @property {Block|void} Block#$$.parentBlock - Parent block.\n       * @property {Elem} parentElem - Parent element.\n       * @property {Block|void} Block#$$.parentScope - Parent scope.\n       * @property {Block|void} Block#$$.parentTemplate - Parent template.\n       * @property {Block|Elem|void} Block#$$.prevBlock - Parent template.\n       * @property {Watcher[]} Block#$$.watchers - Temporary vars watchers.\n       * @property {Object[]} Block#$$.watchersToRemove - Watchers to remove before removing the block.\n       */\n      $$: {\n        name,\n        DynamicBlockArgs,\n        parent,\n        parentElem,\n        parentScope,\n        parentBlock,\n        parentTemplate,\n        content: new Elem(),\n        Constructor: constructor,\n        htmlChildren: children || [],\n        children: childrenBlocks,\n        mixins: childrenMixins,\n        mixinsToBuild: [],\n        prevBlock,\n        watchersToRemove,\n        isRemoved: false,\n        isRendered: false,\n        evaluate: (func, onChange, targetBlock, forElements, forItem) => {\n          if (!isFunction(func)) {\n            return func;\n          }\n\n          forElements = !!forElements;\n\n          const scope = constructor === blocks.Item && !forItem\n            ? this.$$.scope\n            : this;\n          const { watchersToRemove } = targetBlock ? targetBlock.$$ : emptyObject;\n          const onChangeFlag = !!onChange;\n\n          const evaluate = () => {\n            let result;\n\n            if (onChangeFlag) {\n              evalMode = true;\n              gettingVars = [];\n            }\n\n            try {\n              result = func(scope);\n            } catch (err) {\n              err.func = func;\n              err.original = func.original;\n              err.block = this;\n\n              if (isFunction(constructor.onEvalError)) {\n                try {\n                  constructor.onEvalError(err);\n                } catch (e) {\n                  console.error(`Uncaught error in ${ name }.onEvalError:`, e);\n                }\n              }\n            }\n\n            if (onChangeFlag) {\n              const localWatchers = [];\n\n              iterateArray(gettingVars, (watchers) => {\n                const watcher = () => {\n                  iterateArray(localWatchers, (watcherBlock) => {\n                    const {\n                      watcher,\n                      watchers\n                    } = watcherBlock;\n\n                    removeArrayElem(watchersToRemove, watcherBlock);\n                    removeArrayElem(watchers, watcher);\n                  });\n\n                  const newResult = evaluate();\n\n                  if (newResult !== result && !targetBlock.$$.isRemoved && !this.$$.isRemoved) {\n                    onChange(newResult, result);\n                  }\n                };\n                const watcherBlock = {\n                  forElements,\n                  watcher,\n                  watchers\n                };\n\n                localWatchers.push(watcherBlock);\n                watchersToRemove.push(watcherBlock);\n                watchers.push(watcher);\n              });\n\n              evalMode = false;\n              gettingVars = [];\n            }\n\n            return result;\n          };\n\n          return evaluate();\n        },\n        remove: (isParentSignal) => {\n          this.$$.isRemoved = true;\n\n          removeWatchers(watchersToRemove);\n\n          iterateArray(childrenBlocks, removeWithParentSignal);\n          iterateArray(childrenMixins, removeWithParentSignal);\n\n          try {\n            this._beforeRemove();\n          } catch (err) {\n            console.error(`Uncaught error in ${ name }#beforeRemove:`, err);\n          }\n\n          if (!isParentSignal && isParentBlock) {\n            parent.$$.removeContent(this.$$.content);\n          }\n\n          if (!isParentSignal && parentBlock) {\n            removeArrayElem(parentBlock.$$.children, this);\n          }\n\n          this.$$.content.remove();\n        },\n        changeContent: (newContent) => {\n          this.$$.content = newContent;\n\n          if (this.$$.isRendered && !this.$$.isRemoved) {\n            try {\n              this._afterDOMChange();\n            } catch (err) {\n              console.error(`Uncaught error in ${ name }#afterDOMChange:`, err);\n            }\n          }\n        },\n        addContent: (contentToAdd, notRecursive) => {\n          const oldContent = this.$$.content;\n          const index = oldContent.indexOf(contentToAdd[0].previousSibling) + 1;\n          let newContent;\n\n          if (index === 0) {\n            newContent = contentToAdd.add(oldContent);\n          } else {\n            newContent = oldContent\n              .slice(0, index)\n              .add(contentToAdd, oldContent.slice(index));\n          }\n\n          this.$$.changeContent(newContent);\n\n          if (isParentBlock && !notRecursive) {\n            parent.$$.addContent(contentToAdd, notRecursive);\n          }\n        },\n        moveContent: (contentToMove, after) => {\n          const oldContent = this.$$.content;\n          const index = oldContent.indexOf(contentToMove[0]);\n          const indexToPut = oldContent.indexOf(after[0]) + 1;\n          let newContent;\n\n          if (indexToPut === 0) {\n            newContent = contentToMove.add(\n              oldContent.slice(indexToPut, index),\n              oldContent.slice(index + contentToMove.length)\n            );\n          } else if (index > indexToPut) {\n            newContent = oldContent\n              .slice(0, indexToPut)\n              .add(\n                contentToMove,\n                oldContent.slice(indexToPut, index),\n                oldContent.slice(index + contentToMove.length)\n              );\n          } else {\n            newContent = oldContent\n              .slice(0, index)\n              .add(\n                oldContent.slice(index + contentToMove.length, indexToPut),\n                contentToMove,\n                oldContent.slice(indexToPut)\n              );\n          }\n\n          this.$$.changeContent(newContent);\n\n          if (isParentBlock && indexToPut) {\n            parent.$$.moveContent(contentToMove, after);\n          }\n        },\n        removeContent: (contentToRemove) => {\n          this.$$.changeContent(this.$$.content.filter((elem) => (\n            contentToRemove.indexOf(elem) === -1\n          )));\n\n          if (isParentBlock) {\n            parent.$$.removeContent(contentToRemove);\n          }\n        },\n        insertInStartOfIt: (contentToInsert, moveFlag) => {\n          const { prevBlock } = this.$$;\n          let after = afterElem;\n\n          if (prevBlock instanceof Block) {\n            after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n          } else if (prevBlock) {\n            after = prevBlock;\n            contentToInsert.insertAfter(prevBlock);\n\n            if (isParentBlock) {\n              if (moveFlag) {\n                parent.$$.moveContent(contentToInsert, after);\n              } else {\n                parent.$$.addContent(contentToInsert, true);\n              }\n            }\n          } else if (isParentBlock) {\n            const { prevBlock } = parent.$$;\n\n            if (prevBlock) {\n              let notRecursive;\n\n              if (prevBlock instanceof Block) {\n                after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n                notRecursive = true;\n              } else {\n                after = prevBlock;\n                notRecursive = false;\n                contentToInsert.insertAfter(prevBlock);\n              }\n\n              if (moveFlag) {\n                parent.$$.moveContent(contentToInsert, after);\n              } else {\n                parent.$$.addContent(contentToInsert, notRecursive);\n              }\n            } else {\n              after = parent.$$.insertInStartOfIt(contentToInsert, moveFlag);\n            }\n          } else {\n            contentToInsert.into(parentElem, false);\n          }\n\n          if (moveFlag) {\n            this.$$.moveContent(contentToInsert, after);\n          } else {\n            this.$$.addContent(contentToInsert, true);\n          }\n\n          return after;\n        },\n        insertAfterIt: (contentToInsert, moveFlag) => {\n          const { prevBlock } = this.$$;\n          let after = afterElem;\n          let tryToAddOrMove;\n\n          if (this.$$.content.length) {\n            after = this.$$.content.elem(-1);\n            tryToAddOrMove = true;\n            contentToInsert.insertAfter(after);\n          } else if (prevBlock instanceof Block) {\n            after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n          } else if (prevBlock) {\n            after = prevBlock;\n            tryToAddOrMove = true;\n            contentToInsert.insertAfter(prevBlock);\n          } else if (isParentBlock) {\n            after = parent.$$.insertInStartOfIt(contentToInsert, moveFlag);\n          } else {\n            contentToInsert.into(parentElem, false);\n          }\n\n          if (isParentBlock && tryToAddOrMove) {\n            if (moveFlag) {\n              parent.$$.moveContent(contentToInsert, after);\n            } else {\n              parent.$$.addContent(contentToInsert);\n            }\n          }\n\n          return after;\n        }\n      }\n    });\n\n    iterateObject(constructor.defaultLocals, (value, variable) => {\n      this[variable] = value;\n    });\n    iterateArray(constructor.html.vars || [], (variable) => {\n      this[variable] = this[variable];\n    });\n\n    const argsObject = create(null);\n    const {\n      args: argsDescriptions\n    } = constructor;\n    const defaultArgs = getDefaultArgs(argsDescriptions);\n    let args = create(defaultArgs);\n    let wasRest;\n    const argsChain = [defaultArgs, args];\n\n    iterateObject(originalArgs, (value, arg) => {\n      const isRest = value.mixin === mixins.Rest;\n      const localArgs = isRest || wasRest\n        ? create(args)\n        : args;\n\n      if (args !== localArgs) {\n        argsChain.push(localArgs);\n      }\n\n      args = localArgs;\n\n      if (isRest) {\n        const restArgs = parentScope.$$.evaluate(value, (value) => {\n          iterateObject(localArgs, cleanProperty);\n          assign(localArgs, value);\n          calculateArgs(normalizeArgs(argsChain), args, argsObject);\n        }, this);\n\n        wasRest = true;\n\n        return assign(localArgs, restArgs);\n      }\n\n      wasRest = false;\n\n      if (isInstanceOf(Mixin, value.mixin)) {\n        localArgs[arg] = new InternalMixin({\n          Mixin: value.mixin,\n          args: value.args,\n          value,\n          parentScope,\n          parentTemplate\n        });\n\n        return;\n      }\n\n      const forElements = isElements && arg === 'value';\n\n      localArgs[arg] = parentScope.$$.evaluate(value, (value) => {\n        localArgs[arg] = value;\n        calculateArgs(normalizeArgs(argsChain), args, argsObject);\n      }, this, forElements, isElements && parentBlock.$$.Constructor === blocks.Item);\n    });\n\n    defineFrozenProperties(this, {\n      /**\n       * @member {Object} Block#args\n       * @type {Object}\n       * @public\n       */\n      args: argsObject,\n\n      /**\n       * @member {Object} Block#globals\n       * @type {Object}\n       * @public\n       */\n      globals: create(\n        parentScope\n          ? parentScope.globals\n          : null\n      )\n    });\n\n    calculateArgs(normalizeArgs(argsChain), args, argsObject);\n\n    if (parentBlock) {\n      parentBlock.$$.children.push(this);\n    }\n  }\n\n  /**\n   * @method Block#_afterConstruct\n   * @protected\n   */\n  _afterConstruct() {\n    this.afterConstruct();\n  }\n\n  /**\n   * @method Block#afterConstruct\n   * @public\n   * @description Is called after block construction (including all scopes)\n   * but before rendering the block and its children.\n   */\n  afterConstruct() {}\n\n  /**\n   * @method Block#_afterDOMChange\n   * @protected\n   */\n  _afterDOMChange() {\n    this.afterDOMChange();\n  }\n\n  /**\n   * @method Block#afterDOMChange\n   * @public\n   * @description Is called after block DOM structure has changed. Note that\n   * it's important not to modify the DOM structure within the block. You can only insert\n   * elements to empty elements (which Dwayne considers empty) and remove ones from them.\n   */\n  afterDOMChange() {}\n\n  /**\n   * @method Block#_afterRender\n   * @protected\n   */\n  _afterRender() {\n    this.afterRender();\n  }\n\n  /**\n   * @method Block#afterRender\n   * @public\n   * @description Is called after block has been rendered.\n   */\n  afterRender() {}\n\n  /**\n   * @method Block#_beforeRemove\n   * @protected\n   */\n  _beforeRemove() {\n    this.beforeRemove();\n  }\n\n  /**\n   * @method Block#beforeRemove\n   * @public\n   * @description Is called before the block removal.\n   */\n  beforeRemove() {}\n\n  /**\n   * @method Block#getConstructor\n   * @public\n   * @returns {typeof Block}\n   * @description Returns Block constructor.\n   */\n  getConstructor() {\n    return getProto(this).constructor;\n  }\n\n  /**\n   * @method Block#getDOM\n   * @public\n   * @returns {Elem}\n   * @description Returns DOM contents of the block.\n   */\n  getDOM() {\n    return this.$$.content.slice();\n  }\n\n  /**\n   * @method Block#getName\n   * @public\n   * @returns {String}\n   * @description Returns Block name.\n   */\n  getName() {\n    return this.$$.name;\n  }\n\n  /**\n   * @method Block#getParentElem\n   * @public\n   * @returns {Elem|void}\n   * @description Returns parent Elem.\n   */\n  getParentElem() {\n    return this.$$.parentElem.slice();\n  }\n\n  /**\n   * @method Block#getParentScope\n   * @public\n   * @returns {Block|void}\n   * @description Returns block in which template the block is located in.\n   */\n  getParentScope() {\n    return this.$$.parentScope;\n  }\n\n  /**\n   * @method Block#getParentTemplate\n   * @public\n   * @returns {Block|void}\n   * @description Returns block in which template the block is located in.\n   */\n  getParentTemplate() {\n    return this.$$.parentTemplate;\n  }\n\n  /**\n   * @method Block#evaluate\n   * @public\n   * @param {Function} func - Function to evaluate.\n   * @param {Watcher} [callback] - If present, callback which is called when the expression value is changed.\n   * @param {Block|Mixin} [target = this] - What block or mixin requests the value.\n   * @returns {*} Evaluation result.\n   * @description Method for evaluating an expression in context of the block and watching for the changes.\n   */\n  evaluate(func, callback, target = this) {\n    return this.$$.evaluate(func, callback, target);\n  }\n\n  toString() {\n    return toStringTag;\n  }\n}\n\nsetToStringTag(Block, 'Block');\nsetProto(Block.prototype, null);\n\nexport { Block, gettingVars, evalMode };\n","import { Block as BaseBlock } from './Block';\n\nclass Block extends BaseBlock {}\n\nexport { Block };\n","import { Block } from '../Block';\n\nclass Case extends Block {}\n\nexport { Case };\n","import { iterateArray, removeArrayElem } from '../utils';\nimport { removeWithParentSignal, createBlock } from '../helpers/Block';\nimport { Block } from '../Block';\nimport { Elem } from '../Elem';\nimport { blocks } from '../constants';\n\nconst watchArgs = js`args.value`;\n\nclass Elements extends Block {\n  afterConstruct() {\n    const { parentElem } = this.$$;\n    const {\n      parentScope,\n      parentTemplate\n    } = this.args;\n\n    this.$$.evaluate(watchArgs, (value) => {\n      const {\n        children,\n        mixins,\n        parent,\n        watchersToRemove,\n        content\n      } = this.$$;\n\n      iterateArray(children, removeWithParentSignal);\n      iterateArray(mixins, removeWithParentSignal);\n      content.remove();\n\n      if (parent instanceof Block) {\n        parent.$$.removeContent(content);\n      }\n\n      this.$$.children = [];\n      this.$$.mixins = [];\n      this.$$.watchersToRemove = watchersToRemove.filter(({ watchers, watcher, forElements }) => {\n        if (forElements) {\n          return true;\n        }\n\n        removeArrayElem(watchers, watcher);\n      });\n      this.$$.content = new Elem();\n\n      let prevBlock;\n\n      iterateArray(value || [], (child) => {\n        prevBlock = createBlock({\n          node: child,\n          parent: this,\n          parentElem,\n          parentBlock: this,\n          parentScope,\n          parentTemplate,\n          prevBlock\n        });\n      });\n      iterateArray(this.$$.mixinsToBuild, (executeBuilders) => {\n        executeBuilders();\n      });\n      this.$$.mixinsToBuild = [];\n    }, this, true);\n  }\n}\n\nblocks.Elements = Elements;\n\nexport { Elements };\n","import { findInArray } from '../utils';\nimport { Block } from '../Block';\nimport { Elements } from './Elements';\n\nclass Children extends Block {\n  static html = html`\n    <Elements\n      value=\"{elems}\"\n      parentScope=\"{$$.parentTemplate.$$.parentScope}\"\n      parentTemplate=\"{$$.parentTemplate.$$.parentTemplate}\"\n    />\n  `;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      parentTemplate: {\n        $$: { htmlChildren }\n      }\n    } = this.$$;\n    const { name } = this.args;\n    let found;\n\n    if (name) {\n      found = findInArray(htmlChildren, ({ type, args }) => (\n        type === Children\n        && args\n        && args.name === name\n      ));\n\n      this.elems = found\n        ? found.value.children\n        : null;\n    } else {\n      this.elems = htmlChildren;\n    }\n  }\n}\n\nexport { Children };\n\n","import { Block } from '../Block';\nimport { blocks } from '../constants';\nimport { Elements } from './Elements';\n\nconst watchArgs = js`args.type`;\n\nclass DynamicBlock extends Block {\n  static html = html`\n    <Elements\n      value=\"{elems}\"\n      parentScope=\"{$$.parentScope}\"\n      parentTemplate=\"{$$.parentTemplate}\"\n    />\n  `;\n\n  afterConstruct() {\n    this.construct(\n      this.evaluate(watchArgs, this.construct)\n    );\n  }\n\n  construct = (type) => {\n    const {\n      htmlChildren,\n      DynamicBlockArgs\n    } = this.$$;\n\n    this.elems = [{\n      type,\n      args: DynamicBlockArgs,\n      children: htmlChildren\n    }];\n  };\n}\n\nblocks.DynamicBlock = DynamicBlock;\n\nexport { DynamicBlock };\n","import { Block } from '../Block';\nimport { Elements } from './Elements';\nimport { blocks } from '../constants';\n\nclass Item extends Block {\n  static html = html`\n    <Elements\n      value=\"{$$.htmlChildren}\"\n      parentScope=\"{this}\"\n      parentTemplate=\"{$$.parentTemplate}\"\n    />\n  `;\n}\n\nblocks.Item = Item;\n\nexport default Item;\n","import {\n  iterateArray, iterateObject,\n  isArray, isFunction, create\n} from '../utils';\nimport { remove, createBlock } from '../helpers/Block';\nimport { Block } from '../Block';\nimport Item from './Item';\n\nconst watchArgs = js`[\n  args.set,\n  args.filterBy,\n  args.sortBy\n]`;\n\nclass Each extends Block {\n  static args = {\n    uid: {\n      default(item, index) {\n        return index;\n      }\n    }\n  };\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      args: {\n        item = '$item',\n        index = '$index'\n      }\n    } = this;\n\n    this.itemName = item;\n    this.indexName = index;\n    this.itemsByUIDs = create(null);\n  }\n\n  afterConstruct() {\n    this.renderSet(\n      this.evaluate(watchArgs, this.renderSet)\n    );\n  }\n\n  renderSet = (args) => {\n    let set = args[0];\n    let filterBy = args[1];\n    const sortBy = args[2];\n\n    const {\n      htmlChildren,\n      parentScope,\n      parentElem,\n      parentTemplate\n    } = this.$$;\n    const {\n      args: {\n        uid: UID\n      },\n      itemsByUIDs,\n      itemName,\n      indexName\n    } = this;\n    const newItemsByUIDs = create(null);\n    const newUIDsByIndexes = create(null);\n    const newUIDs = create(null);\n    const isArr = isArray(set);\n    const iterate = isArr\n      ? iterateArray\n      : iterateObject;\n\n    if (isArr && isFunction(sortBy)) {\n      set = set\n        .slice()\n        .sort(sortBy);\n    }\n\n    if (isFunction(filterBy)) {\n      filterBy = [filterBy];\n    }\n\n    if (isArray(filterBy)) {\n      iterateArray(filterBy, (filter) => {\n        set = set.filter(filter);\n      });\n    }\n\n    iterate(set, (item, index) => {\n      const uid = UID(item, index, set, parentScope);\n\n      if (uid in newUIDsByIndexes) {\n        console.error(`UIDs can't be same for multiple items! In UID function: \"${ UID.original || UID }\"`);\n      }\n\n      newUIDsByIndexes[uid] = index;\n      newUIDs[index] = uid;\n    });\n\n    iterateObject(itemsByUIDs, (block, uid) => {\n      if (!(uid in newUIDsByIndexes)) {\n        remove(block);\n      }\n    });\n\n    let prevBlock;\n\n    iterate(set, (item, index) => {\n      const uid = newUIDs[index];\n      let block;\n\n      if (newUIDsByIndexes[uid] !== index) {\n        return;\n      }\n\n      const prevUIDBlock = itemsByUIDs[uid];\n\n      if (prevUIDBlock) {\n        block = prevUIDBlock;\n        block.$$.scope[indexName] = index;\n        block.$$.scope[itemName] = item;\n\n        if (block.$$.prevBlock !== prevBlock) {\n          const { content } = block.$$;\n\n          if (prevBlock) {\n            prevBlock.$$.insertAfterIt(content, true);\n          } else {\n            this.$$.insertInStartOfIt(content, true);\n          }\n        }\n      } else {\n        block = createBlock({\n          node: {\n            type: Item,\n            itemName,\n            indexName,\n            item,\n            index,\n            children: htmlChildren\n          },\n          parent: this,\n          parentElem,\n          parentBlock: this,\n          parentScope,\n          parentTemplate,\n          prevBlock\n        });\n      }\n\n      newItemsByUIDs[uid] = block;\n      block.$$.prevBlock = prevBlock;\n      prevBlock = block;\n    });\n\n    this.itemsByUIDs = newItemsByUIDs;\n  };\n}\n\nexport { Each };\n","import { Block } from '../Block';\nimport { Elements } from './Elements';\n\nconst watchArgs = js`args.if`;\n\nclass If extends Block {\n  static html = html`\n    <Elements\n      value=\"{elems}\"\n      parentScope=\"{$$.parentScope}\"\n      parentTemplate=\"{$$.parentTemplate}\"\n    />\n  `;\n\n  afterConstruct() {\n    this.condition = false;\n    this.constructElems(this.evaluate(watchArgs, this.constructElems));\n  }\n\n  constructElems = (condition) => {\n    condition = !!condition;\n\n    if (this.condition !== condition) {\n      this.condition = condition;\n      this.elems = condition\n        ? this.$$.htmlChildren\n        : null;\n    }\n  };\n}\n\nexport { If };\n","import { findInArray } from '../utils';\nimport { Block } from '../Block';\nimport { Elements } from './Elements';\nimport { Case } from './Case';\n\nconst watchArgs = js`[\n  args.value,\n  args.compareFn\n]`;\n\nclass Switch extends Block {\n  static html = html`\n    <Elements\n      value=\"{elems}\"\n      parentScope=\"{$$.parentScope}\"\n      parentTemplate=\"{$$.parentTemplate}\"\n    />\n  `;\n  static args = {\n    default: {\n      default: false\n    },\n    compareFn: {\n      default(switchValue, caseValue) {\n        return (\n          switchValue === caseValue\n          || (switchValue !== switchValue && caseValue !== caseValue)\n        );\n      }\n    }\n  };\n\n  index = Infinity;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      $$: {\n        htmlChildren,\n        parentScope\n      },\n      args: switchArgs,\n      args: { value }\n    } = this;\n    let wasDefault = false;\n\n    this.values = htmlChildren\n      .filter(({ type, args }) => {\n        if (type !== Case) {\n          return;\n        }\n\n        if (wasDefault) {\n          return;\n        }\n\n        if (args && args.default) {\n          wasDefault = true;\n        }\n\n        return true;\n      })\n      .map((child, i) => {\n        const {\n          args = {},\n          children\n        } = child;\n        let val;\n\n        if (!args.default) {\n          val = parentScope.$$.evaluate(args.when, (newValue) => {\n            this.values[i].value = newValue;\n\n            if (i > this.index) {\n              return;\n            }\n\n            const found = findInArray(this.values, ({ args, value }) => (\n              args.default\n              || this.args.compareFn(switchArgs.value, value)\n            ));\n\n            this.index = found\n              ? found.key\n              : Infinity;\n            this.elems = found\n              ? found.value.children\n              : null;\n          }, this);\n        }\n\n        if (this.index === Infinity && (\n          args.default\n          || this.args.compareFn(value, val)\n        )) {\n          this.index = i;\n          this.elems = children;\n        }\n\n        return {\n          args,\n          children,\n          value: val\n        };\n      });\n  }\n\n  afterConstruct() {\n    this.evaluate(watchArgs, (args) => {\n      const newValue = args[0];\n      const compareFn = args[1];\n\n      this.index = Infinity;\n\n      this.values.some(({ args, value, children }, i) => {\n        if (\n          args.default\n          || compareFn(newValue, value)\n        ) {\n          this.index = i;\n          this.elems = children;\n\n          return true;\n        }\n      });\n\n      if (this.index === Infinity) {\n        this.elems = null;\n      }\n    });\n  }\n}\n\nexport { Switch };\n","import { isFunction, noop } from '../utils';\nimport { Mixin } from '../Mixin';\n\nclass Bind extends Mixin {\n  off = noop;\n\n  afterUpdate(value) {\n    this.off();\n\n    if (!isFunction(value)) {\n      return;\n    }\n\n    if (this.args) {\n      this.off = this.elem.on(this.args.join(','), value);\n    } else {\n      this.off = noop;\n\n      console.error('Provide \"Bind\" mixin with event name args (like \"Bind(click)\" or \"Bind(keyup, keypress)\")!');\n    }\n  }\n\n  beforeRemove(isElementRemoved) {\n    if (!isElementRemoved) {\n      this.off();\n    }\n  }\n}\n\nexport { Bind };\n","import {\n  isArray, isString,\n  iterateArray, iterateObject\n} from '../utils';\nimport { Mixin } from '../Mixin';\n\nconst EMPTY_SPACE_REGEX = /\\s+/;\n\nclass Class extends Mixin {\n  classes = [];\n\n  afterUpdate(newValue) {\n    const {\n      elem,\n      args,\n      classes\n    } = this;\n    const newClasses = [];\n\n    if (args) {\n      newValue = newValue\n        ? args\n        : [];\n    }\n\n    if (isString(newValue)) {\n      newValue = newValue.split(EMPTY_SPACE_REGEX);\n    }\n\n    if (isArray(newValue)) {\n      iterateArray(classes, (cls) => {\n        if (newValue.indexOf(cls) === -1) {\n          elem.removeClass(cls);\n        }\n      });\n      iterateArray(newValue, (cls) => {\n        if (isString(cls)) {\n          newClasses.push(cls);\n          elem.addClass(cls);\n        }\n      });\n    } else {\n      iterateArray(classes, (cls) => {\n        if (!newValue || !newValue[cls]) {\n          elem.removeClass(cls);\n        }\n      });\n      iterateObject(newValue, (val, cls) => {\n        if (val) {\n          newClasses.push(cls);\n          elem.addClass(cls);\n        }\n      });\n    }\n\n    this.classes = newClasses;\n  }\n\n  beforeRemove(isElementRemoved) {\n    if (!isElementRemoved) {\n      const {\n        elem,\n        classes\n      } = this;\n\n      elem.removeClass.apply(elem, classes);\n    }\n  }\n}\n\nexport { Class };\n","import { isFunction, isString } from '../utils';\nimport { Block } from '../Block';\nimport { Mixin } from '../Mixin';\n\nclass Elem extends Mixin {\n  static evaluate = false;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      args,\n      parentTemplate,\n      elem\n    } = this;\n    let scope = parentTemplate;\n    let value = this.evaluate();\n\n    if (args) {\n      scope = value instanceof Block\n        ? value\n        : parentTemplate;\n      value = args[0];\n    }\n\n    if (isFunction(value)) {\n      value(elem);\n    } else if (isString(value)) {\n      scope[value] = elem;\n    }\n  }\n}\n\nexport { Elem as ElemMixin };\n","import { Mixin } from '../Mixin';\n\nclass Hide extends Mixin {\n  afterUpdate(value) {\n    const { elem } = this;\n\n    if (value) {\n      elem.hide();\n    } else {\n      elem.show();\n    }\n  }\n\n  beforeRemove(isElementRemoved) {\n    if (!isElementRemoved) {\n      this.elem.show();\n    }\n  }\n}\n\nexport { Hide };\n","import { isFunction, isString } from '../utils';\nimport { Block } from '../Block';\nimport { Mixin } from '../Mixin';\n\nclass Node extends Mixin {\n  static evaluate = false;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      args,\n      parentTemplate,\n      node\n    } = this;\n    let scope = parentTemplate;\n    let value = this.evaluate();\n\n    if (args) {\n      scope = value instanceof Block\n        ? value\n        : parentTemplate;\n      value = args[0];\n    }\n\n    if (isFunction(value)) {\n      value(node);\n    } else if (isString(value)) {\n      scope[value] = node;\n    }\n  }\n}\n\nexport { Node as NodeMixin };\n","import { noop } from '../utils';\nimport { Mixin } from '../Mixin';\n\nclass On extends Mixin {\n  static evaluate = false;\n\n  constructor(opts) {\n    super(opts);\n\n    if (this.args) {\n      this.off = this.elem.on(this.args.join(','), () => {\n        this.evaluate();\n      });\n    } else {\n      this.off = noop;\n\n      console.error('Provide \"On\" mixin with event name args (like \"On(click)\" or \"On(keyup, keypress)\")!');\n    }\n  }\n\n  beforeRemove(isElementRemoved) {\n    if (!isElementRemoved) {\n      this.off();\n    }\n  }\n}\n\nexport { On };\n","import { Mixin } from '../Mixin';\nimport { mixins } from '../constants';\n\nclass Rest extends Mixin {}\n\nmixins.Rest = Rest;\n\nexport { Rest };\n","import { Mixin } from '../Mixin';\n\nclass Show extends Mixin {\n  afterUpdate(value) {\n    const { elem } = this;\n\n    if (value) {\n      elem.show();\n    } else {\n      elem.hide();\n    }\n  }\n\n  beforeRemove(isElementRemoved) {\n    if (!isElementRemoved) {\n      this.elem.show();\n    }\n  }\n}\n\nexport { Show };\n","import {\n  isString, iterateObject, keys,\n  collectFromObject, collectFromArray\n} from '../utils';\nimport { Mixin } from '../Mixin';\n\nconst CSS_STYLES_SEPARATOR_REGEX = /\\s*;\\s*/;\nconst CSS_STYLE_SEPARATOR_REGEX = /\\s*:\\s*/;\n\nclass Style extends Mixin {\n  css = {};\n\n  afterUpdate(newValue, oldValue) {\n    const {\n      elem,\n      args,\n      css\n    } = this;\n\n    if (args) {\n      newValue = collectFromObject(args, (css, prop) => {\n        css[prop] = newValue;\n      });\n    }\n\n    if (isString(newValue)) {\n      newValue = collectFromArray(\n        newValue\n          .split(CSS_STYLES_SEPARATOR_REGEX)\n          .filter(Boolean)\n          .map(constructStyleFromString),\n        addCSSProp\n      );\n    }\n\n    iterateObject(css, (value, prop) => {\n      if (!newValue[prop]) {\n        elem.removeCSS(prop);\n      }\n    });\n    elem.css(newValue);\n\n    this.css = newValue;\n  }\n\n  beforeRemove(isElementRemoved) {\n    if (!isElementRemoved) {\n      const {\n        elem,\n        css\n      } = this;\n\n      elem.removeCSS.apply(elem, keys(css));\n    }\n  }\n}\n\nfunction addCSSProp(css, item) {\n  const [prop, value] = item;\n\n  css[prop] = value;\n}\n\nfunction constructStyleFromString(style) {\n  const split = style.split(CSS_STYLE_SEPARATOR_REGEX);\n\n  return [\n    split[0].trim(),\n    split[1].trim()\n  ];\n}\n\nexport { Style };\n","import {\n  isFunction, isNil,\n  collectFromArray\n} from '../utils';\nimport { Block } from '../Block';\nimport { Mixin } from '../Mixin';\n\nclass Value extends Mixin {\n  static evaluate = false;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      args,\n      parentTemplate,\n      elem\n    } = this;\n    const name = elem.name();\n    const type = elem.prop('type');\n    const value = this.evaluate();\n    let initialScopeValue = null;\n\n    this.prop = getProp(name, type, elem);\n    this.name = name;\n    this.type = type;\n    this.value = value;\n    this.options = elem.children().filter('option');\n    this.scope = parentTemplate;\n\n    if (args) {\n      this.scope = value instanceof Block\n        ? value\n        : parentTemplate;\n      this.value = args[0];\n    }\n\n    if (!isFunction(this.value)) {\n      initialScopeValue = this.scope.$$.evaluate((scope) => scope[this.value], (newValue) => {\n        if (this.currentValue !== newValue) {\n          this.currentValue = newValue;\n          this.setProp(newValue);\n        }\n      }, this);\n    }\n\n    const initialElemValue = this.getProp(initialScopeValue, true);\n    const isInitialScopeValueNull = isNil(initialScopeValue);\n    const isCheckbox = type === 'checkbox';\n    const changeScope = () => {\n      this.currentValue = this.getProp(this.currentValue, false);\n      this.changeScope();\n    };\n\n    if (isInitialScopeValueNull || isCheckbox) {\n      this.currentValue = initialElemValue;\n      this.changeScope();\n\n      if (!isInitialScopeValueNull && isCheckbox) {\n        this.setProp(initialScopeValue);\n      }\n    } else {\n      this.currentValue = initialScopeValue;\n      this.setProp(initialScopeValue);\n    }\n\n    this.offElemListener = elem.on(getListenerName(name, type), changeScope);\n    this.offFormListener = elem.closest('form').on('reset', () => {\n      setTimeout(changeScope, 0);\n    });\n  }\n\n  changeScope() {\n    const {\n      scope,\n      value,\n      currentValue\n    } = this;\n\n    if (isFunction(value)) {\n      value(currentValue);\n    } else {\n      scope[value] = currentValue;\n    }\n  }\n\n  setProp(value) {\n    const {\n      elem,\n      name,\n      prop,\n      type,\n      node,\n      options\n    } = this;\n\n    if (prop === 'text') {\n      elem.text(value);\n    } else if (prop === 'multiple-select') {\n      options.forEach((option) => {\n        option.selected = value.indexOf(option.value) !== -1;\n      });\n    } else {\n      elem.prop(prop, getValueForSetting(name, value, type, node.value));\n    }\n  }\n\n  getProp(values, init) {\n    const {\n      elem,\n      name,\n      prop,\n      type,\n      node,\n      options\n    } = this;\n\n    return prop === 'text'\n      ? elem.text()\n      : getValueForGetting(name, elem.prop(prop), type, node.value, values, options, init, prop === 'multiple-select');\n  }\n\n  beforeRemove(isElementRemoved) {\n    if (!isElementRemoved) {\n      this.offElemListener();\n    }\n\n    this.offFormListener();\n  }\n}\n\nfunction getProp(name, type, elem) {\n  switch (name) {\n    case 'select': {\n      return elem.hasAttr('multiple')\n        ? 'multiple-select'\n        : 'value';\n    }\n\n    case 'input': {\n      if (type === 'file') {\n        return 'files';\n      }\n\n      return type === 'radio' || type === 'checkbox'\n        ? 'checked'\n        : 'value';\n    }\n\n    default: {\n      return elem.hasAttr('contentEditable')\n        ? 'text'\n        : 'value';\n    }\n  }\n}\n\nfunction getValueForSetting(name, value, type, inputValue) {\n  if (name !== 'input') {\n    return value;\n  }\n\n  const isRadio = type === 'radio';\n\n  if (!isRadio && type !== 'checkbox') {\n    return value;\n  }\n\n  return isRadio\n    ? value === inputValue\n    : value.indexOf(inputValue) !== -1;\n}\n\nfunction getValueForGetting(name, value, type, inputValue, values, options, init, isMultiple) {\n  switch (name) {\n    case 'select': {\n      if (!isMultiple) {\n        return value;\n      }\n\n      return collectFromArray(options, addValue, []);\n    }\n\n    case 'input': {\n      if (type !== 'radio' && type !== 'checkbox') {\n        return value;\n      }\n\n      if (type === 'radio') {\n        return value\n          ? inputValue\n          : null;\n      }\n\n      values = values || [];\n\n      if (!value && init) {\n        return values;\n      }\n\n      if (value) {\n        return values.indexOf(inputValue) === -1\n          ? values.concat(inputValue)\n          : values;\n      }\n\n      const index = values.indexOf(inputValue);\n\n      if (index !== -1) {\n        return [\n          ...values.slice(0, index),\n          ...values.slice(index + 1)\n        ];\n      }\n\n      return values;\n    }\n\n    default: {\n      return value;\n    }\n  }\n}\n\nfunction getListenerName(name, type) {\n  switch (name) {\n    case 'select': {\n      return 'change';\n    }\n\n    case 'input': {\n      return (\n        type === 'radio'\n        || type === 'checkbox'\n        || type === 'color'\n        || type === 'file'\n      )\n        ? 'change'\n        : 'change input';\n    }\n\n    default: {\n      return 'input';\n    }\n  }\n}\n\nfunction addValue(values, { selected, value }) {\n  if (selected && values.indexOf(value) === -1) {\n    values.push(value);\n  }\n}\n\nexport { Value };\n","import { Elem } from './Elem';\nimport { createHideStyleNode } from './helpers/Elem';\nimport { document } from './constants';\n\n/**\n * @const {Elem} doc\n * @type {Elem}\n * @public\n * @description Elem instance of document.\n */\nexport const doc = new Elem(document);\n\n/**\n * @const {Elem} html\n * @type {Elem}\n * @public\n * @description Elem instance of document.documentElement.\n */\nexport const html = new Elem(document.documentElement);\n\n/**\n * @const {Elem} body\n * @type {Elem}\n * @public\n * @description Elem instance of document.body.\n */\nexport const body = new Elem(document.body);\n\n/**\n * @const {Elem} head\n * @type {Elem}\n * @public\n * @description Elem instance of document.head.\n */\nexport const head = new Elem(document.head);\n\ncreateHideStyleNode(head);\n","import {\n  toObjectKeys,\n  assign, keys, create\n} from './utils';\n\nexport function insertHtml(html, templates) {\n  const {\n    vars = []\n  } = html;\n  const newTemplates = create(null);\n  const newVars = toObjectKeys(vars);\n\n  assign(newTemplates, templates);\n\n  (function iterateAndChangeChildren(nodes = []) {\n    for (let i = 0; i < nodes.length; i++) {\n      const {\n        type,\n        value,\n        children\n      } = nodes[i];\n\n      if (type === '#comment') {\n        const trimmed = value.trim();\n\n        if (newTemplates[trimmed]) {\n          const newTemplate = newTemplates[trimmed];\n\n          nodes.splice(i, 1, ...newTemplate);\n          assign(newVars, toObjectKeys(newTemplates[trimmed].vars));\n\n          i += newTemplate.length - 1;\n        }\n      } else {\n        iterateAndChangeChildren(children);\n      }\n    }\n  })(html);\n\n  html.vars = keys(newVars);\n\n  return html;\n}\n","import { isArray } from './utils';\nimport { createBlock, isInstanceOf } from './helpers/Block';\nimport { Block } from './Block';\nimport { Elem } from './Elem';\n\n/**\n * @function initApp\n * @public\n * @param {Template|typeof Block} html - Root template or root block constructor.\n * @param {Elem|Element} container - Container of the app.\n * @returns {Block|void} Root block if the app has been registered and undefined if not.\n * @description Method for initializing app.\n *\n * @example\n * import { initApp, doc } from 'dwayne';\n *\n * initApp(html`<App/>`, doc.create('div'));\n * initApp(htmlScopeless`<App/>`, doc.create('div'));\n * initApp('App', doc.create('div'));\n * initApp(App, doc.create('div'));\n */\nexport function initApp(html, container) {\n  const parentElem = new Elem(container).elem(0);\n\n  if (!parentElem.length) {\n    console.error('No valid element to insert the app into was given! (initApp)');\n\n    return;\n  }\n\n  if (parentElem.prop('DwayneRootBlock')) {\n    console.error('There already exists a Dwayne app inside the given element! (initApp)');\n\n    return;\n  }\n\n  let RootBlock = html;\n\n  if (isArray(html)) {\n    RootBlock = class RootBlock extends Block {\n      static html = html;\n    };\n  }\n\n  if (!isInstanceOf(Block, RootBlock)) {\n    console.error('No valid root block was given! (initApp)');\n\n    return;\n  }\n\n  const rootBlock = createBlock({\n    node: {\n      type: RootBlock\n    },\n    parent: parentElem,\n    parentElem\n  });\n\n  parentElem\n    .prop('DwayneRootBlock', rootBlock)\n    .attr('dwayne-root', '');\n\n  return rootBlock;\n}\n","import { Block } from './Block';\nimport { Elem } from './Elem';\n\n/**\n * @function removeApp\n * @public\n * @param {Elem|Element} container - Container of the app.\n * @returns {void}\n * @description Method for removing app.\n *\n * @example\n * import { removeApp, find } from 'dwayne';\n *\n * removeApp(find('.root'));\n */\nexport function removeApp(container) {\n  const elem = new Elem(container).elem(0);\n\n  if (!elem.length) {\n    console.error('No valid element to remove the app from was given! (removeApp)');\n\n    return;\n  }\n\n  container = elem[0];\n\n  const { DwayneRootBlock } = container;\n\n  if (!(DwayneRootBlock instanceof Block)) {\n    console.error('No app registered inside the given element! (removeApp)');\n\n    return;\n  }\n\n  DwayneRootBlock.$$.remove();\n  elem.removeAttr('dwayne-root');\n\n  delete container.DwayneRootBlock;\n}\n"],"names":["window","global","self","HIDE_CLASS","SVG_NS","blocks","mixins","document","Symbol","version","collectFromArray","array","callback","initialValue","value","index","findInArray","i","length","iterateArray","removeArrayElem","elem","indexOf","splice","toObjectKeys","addKey","vars","variable","isArray","Array","isFunction","isNil","isString","has","hasOwnProperty","slice","assign","target","arguments","key","collectFromObject","object","except","newObject","paths","iterateObject","mapObject","defineProperties","Object","definePrototypeProperties","properties","name","defineProperty","defineFrozenProperties","noop","create","keys","getProto","getPrototypeOf","setProto","setPrototypeOf","proto","__proto__","setSymbolSpecies","klass","species","DASHED_SYMBOL_REGEX","UPPERCASED_SYMBOL_REGEX","toCamelCase","replace","capitalize","toHyphenCase","hyphenize","match","toUpperCase","toLowerCase","toString","toStringTag","setToStringTag","tag","prototype","addAttr","attrs","attr","CSS_PROP_VALUE_SEPARATOR_REGEX","addCSSProp","css","property","split","addDataAttr","data","addNext","add","nextSibling","addParent","parentNode","addPrev","previousSibling","createHideStyleNode","head","style","find","prop","text","X_LINK_ATTR_FIND_REGEX","X_LINK_ATTR_REPLACE_REGEX","XML_NS","X_LINK_NS","Null","getAttrNS","isXmlNs","nodeName","test","Elem","closest","HTML_COLLECTION_REGEX","DOCUMENT_REGEX","ELEMENT_REGEX","isDocument","isElem","isElementsCollection","isValidNode","EVENT_REGEX","getEvent","event","bubbles","cancelable","realDetails","finalEvent","Event","err","ownerDocument","createEvent","initEvent","hide","addClass","getMatchesFunction","matches","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","selector","querySelectorAll","remove","parent","removeChild","show","removeClass","toElem","base","String","EVENT_SEPARATOR_REGEX","CSS_STYLES_SEPARATOR_REGEX","CSS_IMPORTANT_REGEX","emptyCollection","methodName","method","includes","push","elems","elements","classes","forEach","list","classList","cls","attributes","ns","getAttributeNS","getAttribute","removeAttr","setAttributeNS","setAttribute","childNodes","collect","is","cb","element","child","contains","type","el","isText","createTextNode","createComment","createElementNS","createElement","into","cssText","getPropertyValue","getPropertyPriority","removeCSS","removeProperty","setProperty","dataset","details","dispatchEvent","filter","hasAttributeNS","hasAttribute","html","innerHTML","next","insertBefore","appendChild","end","firstChild","undefined","listener","newEvents","allListeners","listeners","addEventListener","removeEventListener","removeEventListeners","removeListeners","removeListener","removeAttributeNS","removeAttribute","props","first","prev","babelHelpers.get","apply","textContent","condition","hasAttr","InternalMixin","opts","calculateArgs","normalizedArgs","args","argsObject","arg","cleanProperty","executeMixinWatchers","mixin","oldValue","$$","watchers","watcher","calculateAttrs","newAttrs","currentAttrs","currentMixins","parentBlock","firstTime","prevValue","parentScope","Mixin","evalFn","newValue","internal","internals","evaluate","constructMixinWatcher","buildMixin","afterUpdate","error","internalMixin","builder","normalizeArgs","argsChain","newArgs","constructPrivateScope","scope","globals","removeTempWatcher","removeWatchers","watchersToRemove","removeWatcher","constructPublicScope","scopeValues","privateScope","evalMode","gettingVars","oldTempWatchers","isPrototypeOf","isInstanceOf","Class","Subclass","wrappers","reduce","wrapMixin","parentTemplate","constructor","displayName","currentValue","isParentSignal","isRemoved","beforeRemove","node","isElementRemoved","emptyArray","createBlock","parentElem","prevBlock","doc","isElements","Elements","children","DynamicBlockArgs","DynamicBlock","Block","Error","namespaceURI","wasRest","attrsChain","isRest","Rest","localAttrs","restAttrs","mixinsToBuild","isParentBlock","childBlocks","on","contentDocument","documentElement","iterateChildren","isRoot","content","insertAfterIt","insertAfter","addContent","insertInStartOfIt","createDocumentFragment","blockInstance","Args","locals","Item","itemName","item","indexName","Constructor","_afterConstruct","isRendered","executeBuilders","_afterRender","extendBlock","block","newBlock","currentBlock","extend","BaseBlock","getDefaultArgs","argsDescriptions","def","default","removeWithParentSignal","wrapBlock","wrapper","newMixin","afterElem","emptyObject","original","func","originalArgs","childrenBlocks","childrenMixins","onChange","targetBlock","forElements","forItem","onChangeFlag","result","onEvalError","e","localWatchers","watcherBlock","newResult","_beforeRemove","removeContent","newContent","_afterDOMChange","contentToAdd","notRecursive","oldContent","changeContent","contentToMove","after","indexToPut","moveContent","contentToRemove","contentToInsert","moveFlag","tryToAddOrMove","defaultLocals","defaultArgs","localArgs","restArgs","afterConstruct","afterDOMChange","afterRender","Case","watchArgs","Children","htmlChildren","found","construct","Each","itemsByUIDs","renderSet","set","filterBy","sortBy","UID","uid","newItemsByUIDs","newUIDsByIndexes","newUIDs","isArr","iterate","sort","prevUIDBlock","If","constructElems","Switch","Infinity","switchArgs","wasDefault","values","map","val","when","compareFn","some","switchValue","caseValue","Bind","off","join","EMPTY_SPACE_REGEX","newClasses","Hide","Node","On","Show","CSS_STYLE_SEPARATOR_REGEX","Style","Boolean","constructStyleFromString","trim","Value","initialScopeValue","getProp","options","setProp","initialElemValue","isInitialScopeValueNull","isCheckbox","changeScope","offElemListener","getListenerName","offFormListener","option","selected","getValueForSetting","init","getValueForGetting","inputValue","isRadio","isMultiple","addValue","concat","body","insertHtml","templates","newTemplates","newVars","iterateAndChangeChildren","nodes","trimmed","newTemplate","initApp","container","RootBlock","rootBlock","removeApp","DwayneRootBlock"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}