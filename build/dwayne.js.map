{"version":3,"file":"dwayne.js","sources":["../lib/constants/global.js","../lib/constants/appliedRegExps.js","../lib/constants/canvasMethods.js","../lib/constants/constructors.js","../lib/constants/elements.js","../lib/constants/htmlAllowedTagSymbols.js","../lib/constants/regexpSpecialCharacters.js","../lib/helpers/toStringTag.js","../lib/helpers/checkTypes.js","../lib/constants/validateCheckExpressions.js","../lib/D.js","../lib/helpers/iterate.js","../lib/helpers/assign.js","../lib/helpers/constructEvalFunction.js","../lib/helpers/defineProperty.js","../lib/helpers/Symbol.js","../lib/helpers/toArray.js","../lib/helpers/toJSON.js","../lib/helpers/validate.js","../lib/Alphabet.js","../lib/Switcher.js","../lib/Super.js","../lib/Promise.js","../lib/Func.js","../lib/Num.js","../lib/Arr.js","../lib/BlobObject.js","../lib/Str.js","../lib/helpers/markupToJSON.js","../lib/Elem.js","../lib/blocks/d-block.js","../lib/blocks/d-each.js","../lib/blocks/d-elements.js","../lib/blocks/d-if.js","../lib/blocks/d-item.js","../lib/blocks/d-switch.js","../lib/mixins/d-attr.js","../lib/mixins/d-bind.js","../lib/mixins/d-class.js","../lib/mixins/d-elem.js","../lib/mixins/d-hide.js","../lib/mixins/d-node.js","../lib/mixins/d-on.js","../lib/mixins/d-show.js","../lib/mixins/d-style.js","../lib/mixins/d-validate.js","../lib/mixins/d-value.js","../lib/helpers/parseJS.js","../lib/Block.js","../lib/constants/formats.js","../lib/Dat.js","../lib/helpers/constructURL.js","../lib/helpers/parseHeaders.js","../lib/helpers/transformData.js","../lib/Fetch.js","../lib/helpers/resolveURL.js","../lib/Router.js","../browser.js"],"sourcesContent":["/* eslint no-nested-ternary: 0 */\n/* eslint no-negated-condition: 0 */\nexport default typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n","/**\n * @module constants/appliedRegExps\n * @private\n * @description Exports different types of syntax for {@link Elem#apply}.\n */\n\n/**\n * @callback matchAppliedExprCallback\n * @param {Elem} elem - D-elem of an element to apply expression to.\n * @param {String} string - Matched applied name.\n * @param {String} arg - Argument within the parentheses.\n */\n\n/**\n * @type {Object.<String, matchAppliedExprCallback|Object.<String, matchAppliedExprCallback>>}\n * @description Object of different types of syntax.\n */\n\nexport const appliedRegExps = {\n  '#'(elem, id) {\n    elem.id(id);\n  },\n  '.'(elem, cls) {\n    elem.addClass(cls);\n  },\n  $(elem, attr, value) {\n    elem.attr(attr, value);\n  },\n  '@'(elem, prop, value) {\n    elem.css(prop, value);\n  },\n  '&'(elem, name, html) {\n    elem.html(html);\n  },\n  '*'(elem, name, text) {\n    elem.text(text);\n  },\n  '-': {\n    '.'(elem, cls) {\n      elem.removeClass(cls);\n    },\n    $(elem, attr) {\n      elem.removeAttr(attr);\n    },\n    '@'(elem, prop) {\n      elem.removeCSS(prop);\n    }\n  }\n};\n","/**\n * @module constants/elements\n * @private\n * @description Exports different canvas methods for {@link Elem} for creating html-elements.\n */\n\n/**\n * @const\n * @type {String[]}\n */\nexport const canvasGetMethods = [\n  /**\n   * @member {Function} Elem#createImageData\n   * @type {Function}\n   * @param {...*} args\n   * @returns {ImageData|void}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/createImageData\n   */\n  'createImageData',\n\n  /**\n   * @member {Function} Elem#createLinearGradient\n   * @type {Function}\n   * @param {...*} args\n   * @returns {CanvasGradient|void}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/createLinearGradient\n   */\n  'createLinearGradient',\n\n  /**\n   * @member {Function} Elem#createPattern\n   * @type {Function}\n   * @param {...*} args\n   * @returns {CanvasPattern|void}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/createPattern\n   */\n  'createPattern',\n\n  /**\n   * @member {Function} Elem#createRadialGradient\n   * @type {Function}\n   * @param {...*} args\n   * @returns {CanvasGradient|void}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/createRadialGradient\n   */\n  'createRadialGradient',\n\n  /**\n   * @member {Function} Elem#getImageData\n   * @type {Function}\n   * @param {...*} args\n   * @returns {ImageData|void}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/getImageData\n   */\n  'getImageData',\n\n  /**\n   * @member {Function} Elem#getLineDash\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Number[]|void}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/getLineDash\n   */\n  'getLineDash',\n\n  /**\n   * @member {Function} Elem#isPointInPath\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Boolean|void}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/isPointInPath\n   */\n  'isPointInPath',\n\n  /**\n   * @member {Function} Elem#isPointInStroke\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Boolean|void}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/isPointInStroke\n   */\n  'isPointInStroke',\n\n  /**\n   * @member {Function} Elem#measureText\n   * @type {Function}\n   * @param {...*} args\n   * @returns {TextMetrics|void}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/measureText\n   */\n  'measureText'\n];\n\nexport const canvasRestMethods = [\n  /**\n   * @member {Function} Elem#arc\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/arc\n   */\n  'arc',\n\n  /**\n   * @member {Function} Elem#arcTo\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/arcTo\n   */\n  'arcTo',\n\n  /**\n   * @member {Function} Elem#beginPath\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/beginPath\n   */\n  'beginPath',\n\n  /**\n   * @member {Function} Elem#bezierCurveTo\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo\n   */\n  'bezierCurveTo',\n\n  /**\n   * @member {Function} Elem#clearRect\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/clearRect\n   */\n  'clearRect',\n\n  /**\n   * @member {Function} Elem#clip\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/clip\n   */\n  'clip',\n\n  /**\n   * @member {Function} Elem#closePath\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/closePath\n   */\n  'closePath',\n\n  /**\n   * @member {Function} Elem#drawFocusIfNeeded\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/drawFocusIfNeeded\n   */\n  'drawFocusIfNeeded',\n\n  /**\n   * @member {Function} Elem#drawImage\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/drawImage\n   */\n  'drawImage',\n\n  /**\n   * @member {Function} Elem#ellipse\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/ellipse\n   */\n  'ellipse',\n\n  /**\n   * @member {Function} Elem#fill\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/fill\n   */\n  'fill',\n\n  /**\n   * @member {Function} Elem#fillRect\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/fillRect\n   */\n  'fillRect',\n\n  /**\n   * @member {Function} Elem#fillText\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/fillText\n   */\n  'fillText',\n\n  /**\n   * @member {Function} Elem#lineTo\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/lineTo\n   */\n  'lineTo',\n\n  /**\n   * @member {Function} Elem#moveTo\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/moveTo\n   */\n  'moveTo',\n\n  /**\n   * @member {Function} Elem#putImageData\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/putImageData\n   */\n  'putImageData',\n\n  /**\n   * @member {Function} Elem#quadraticCurveTo\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo\n   */\n  'quadraticCurveTo',\n\n  /**\n   * @member {Function} Elem#rect\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/rect\n   */\n  'rect',\n\n  /**\n   * @member {Function} Elem#resetTransform\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/resetTransform\n   */\n  'resetTransform',\n\n  /**\n   * @member {Function} Elem#restore\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/restore\n   */\n  'restore',\n\n  /**\n   * @member {Function} Elem#rotate\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/rotate\n   */\n  'rotate',\n\n  /**\n   * @member {Function} Elem#save\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/save\n   */\n  'save',\n\n  /**\n   * @member {Function} Elem#scale\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/scale\n   */\n  'scale',\n\n  /**\n   * @member {Function} Elem#setLineDash\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/setLineDash\n   */\n  'setLineDash',\n\n  /**\n   * @member {Function} Elem#setTransform\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/setTransform\n   */\n  'setTransform',\n\n  /**\n   * @member {Function} Elem#stroke\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/stroke\n   */\n  'stroke',\n\n  /**\n   * @member {Function} Elem#strokeRect\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/strokeRect\n   */\n  'strokeRect',\n\n  /**\n   * @member {Function} Elem#strokeText\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/strokeText\n   */\n  'strokeText',\n\n  /**\n   * @member {Function} Elem#transform\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/transform\n   */\n  'transform',\n\n  /**\n   * @member {Function} Elem#translate\n   * @type {Function}\n   * @param {...*} args\n   * @returns {Elem}\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/translate\n   */\n  'translate'\n];\n","/**\n * @module constants/constructors\n * @private\n * @description Exports constructors levels.\n */\n\n/**\n * @const\n * @type {Array[]}\n */\nexport const constructors = [\n  [],\n  [],\n  []\n];\n","/**\n * @module constants/elements\n * @private\n * @description Exports methods for {@link Elem} for creating html-elements.\n */\n\n/**\n * @const\n * @type {String[]}\n */\nexport const htmlElements = [\n  /**\n   * @member {Function} Elem#a\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'a',\n\n  /**\n   * @member {Function} Elem#abbr\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'abbr',\n\n  /**\n   * @member {Function} Elem#address\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'address',\n\n  /**\n   * @member {Function} Elem#area\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'area',\n\n  /**\n   * @member {Function} Elem#article\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'article',\n\n  /**\n   * @member {Function} Elem#audio\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'audio',\n\n  /**\n   * @member {Function} Elem#b\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'b',\n\n  /**\n   * @member {Function} Elem#base\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'base',\n\n  /**\n   * @member {Function} Elem#bdi\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'bdi',\n\n  /**\n   * @member {Function} Elem#bdo\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'bdo',\n\n  /**\n   * @member {Function} Elem#blockquote\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'blockquote',\n\n  /**\n   * @member {Function} Elem#body\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'body',\n\n  /**\n   * @member {Function} Elem#br\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'br',\n\n  /**\n   * @member {Function} Elem#button\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'button',\n\n  /**\n   * @member {Function} Elem#canvas\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'canvas',\n\n  /**\n   * @member {Function} Elem#caption\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'caption',\n\n  /**\n   * @member {Function} Elem#cite\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'cite',\n\n  /**\n   * @member {Function} Elem#code\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'code',\n\n  /**\n   * @member {Function} Elem#col\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'col',\n\n  /**\n   * @member {Function} Elem#colgroup\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'colgroup',\n\n  /**\n   * @member {Function} Elem#content\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'content',\n\n  /**\n   * @member {Function} Elem#datalist\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'datalist',\n\n  /**\n   * @member {Function} Elem#dd\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'dd',\n\n  /**\n   * @member {Function} Elem#del\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'del',\n\n  /**\n   * @member {Function} Elem#details\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'details',\n\n  /**\n   * @member {Function} Elem#dfn\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'dfn',\n\n  /**\n   * @member {Function} Elem#dialog\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'dialog',\n\n  /**\n   * @member {Function} Elem#div\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'div',\n\n  /**\n   * @member {Function} Elem#dl\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'dl',\n\n  /**\n   * @member {Function} Elem#dt\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'dt',\n\n  /**\n   * @member {Function} Elem#element\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'element',\n\n  /**\n   * @member {Function} Elem#em\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'em',\n\n  /**\n   * @member {Function} Elem#embed\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'embed',\n\n  /**\n   * @member {Function} Elem#fieldset\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'fieldset',\n\n  /**\n   * @member {Function} Elem#figcaption\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'figcaption',\n\n  /**\n   * @member {Function} Elem#figure\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'figure',\n\n  /**\n   * @member {Function} Elem#footer\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'footer',\n\n  /**\n   * @member {Function} Elem#form\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'form',\n\n  /**\n   * @member {Function} Elem#h1\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'h1',\n\n  /**\n   * @member {Function} Elem#h2\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'h2',\n\n  /**\n   * @member {Function} Elem#h3\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'h3',\n\n  /**\n   * @member {Function} Elem#h4\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'h4',\n\n  /**\n   * @member {Function} Elem#h5\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'h5',\n\n  /**\n   * @member {Function} Elem#h6\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'h6',\n\n  /**\n   * @member {Function} Elem#head\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'head',\n\n  /**\n   * @member {Function} Elem#header\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'header',\n\n  /**\n   * @member {Function} Elem#hgroup\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'hgroup',\n\n  /**\n   * @member {Function} Elem#hr\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'hr',\n\n  /**\n   * @member {Function} Elem#i\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'i',\n\n  /**\n   * @member {Function} Elem#iframe\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'iframe',\n\n  /**\n   * @member {Function} Elem#img\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'img',\n\n  /**\n   * @member {Function} Elem#input\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'input',\n\n  /**\n   * @member {Function} Elem#ins\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'ins',\n\n  /**\n   * @member {Function} Elem#kbd\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'kbd',\n\n  /**\n   * @member {Function} Elem#label\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'label',\n\n  /**\n   * @member {Function} Elem#legend\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'legend',\n\n  /**\n   * @member {Function} Elem#li\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'li',\n\n  /**\n   * @member {Function} Elem#link\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'link',\n\n  /**\n   * @member {Function} Elem#main\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'main',\n\n  /**\n   * @member {Function} Elem#mark\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'mark',\n\n  /**\n   * @member {Function} Elem#menu\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'menu',\n\n  /**\n   * @member {Function} Elem#menuitem\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'menuitem',\n\n  /**\n   * @member {Function} Elem#meta\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'meta',\n\n  /**\n   * @member {Function} Elem#meter\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'meter',\n\n  /**\n   * @member {Function} Elem#nav\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'nav',\n\n  /**\n   * @member {Function} Elem#noscript\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'noscript',\n\n  /**\n   * @member {Function} Elem#ol\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'ol',\n\n  /**\n   * @member {Function} Elem#optgroup\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'optgroup',\n\n  /**\n   * @member {Function} Elem#option\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'option',\n\n  /**\n   * @member {Function} Elem#output\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'output',\n\n  /**\n   * @member {Function} Elem#p\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'p',\n\n  /**\n   * @member {Function} Elem#param\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'param',\n\n  /**\n   * @member {Function} Elem#pre\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'pre',\n\n  /**\n   * @member {Function} Elem#progress\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'progress',\n\n  /**\n   * @member {Function} Elem#q\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'q',\n\n  /**\n   * @member {Function} Elem#rp\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'rp',\n\n  /**\n   * @member {Function} Elem#rt\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'rt',\n\n  /**\n   * @member {Function} Elem#rtc\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'rtc',\n\n  /**\n   * @member {Function} Elem#ruby\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'ruby',\n\n  /**\n   * @member {Function} Elem#s\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  's',\n\n  /**\n   * @member {Function} Elem#samp\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'samp',\n\n  /**\n   * @member {Function} Elem#script\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'script',\n\n  /**\n   * @member {Function} Elem#section\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'section',\n\n  /**\n   * @member {Function} Elem#select\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'select',\n\n  /**\n   * @member {Function} Elem#shadow\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'shadow',\n\n  /**\n   * @member {Function} Elem#small\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'small',\n\n  /**\n   * @member {Function} Elem#source\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'source',\n\n  /**\n   * @member {Function} Elem#span\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'span',\n\n  /**\n   * @member {Function} Elem#strong\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'strong',\n\n  /**\n   * @member {Function} Elem#style\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'style',\n\n  /**\n   * @member {Function} Elem#sub\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'sub',\n\n  /**\n   * @member {Function} Elem#summary\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'summary',\n\n  /**\n   * @member {Function} Elem#sup\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'sup',\n\n  /**\n   * @member {Function} Elem#table\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'table',\n\n  /**\n   * @member {Function} Elem#tbody\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'tbody',\n\n  /**\n   * @member {Function} Elem#td\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'td',\n\n  /**\n   * @member {Function} Elem#template\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'template',\n\n  /**\n   * @member {Function} Elem#textarea\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'textarea',\n\n  /**\n   * @member {Function} Elem#tfoot\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'tfoot',\n\n  /**\n   * @member {Function} Elem#th\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'th',\n\n  /**\n   * @member {Function} Elem#thead\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'thead',\n\n  /**\n   * @member {Function} Elem#time\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'time',\n\n  /**\n   * @member {Function} Elem#title\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'title',\n\n  /**\n   * @member {Function} Elem#tr\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'tr',\n\n  /**\n   * @member {Function} Elem#track\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'track',\n\n  /**\n   * @member {Function} Elem#u\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'u',\n\n  /**\n   * @member {Function} Elem#ul\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'ul',\n\n  /**\n   * @member {Function} Elem#var\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'var',\n\n  /**\n   * @member {Function} Elem#video\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'video',\n\n  /**\n   * @member {Function} Elem#wbr\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'wbr'\n];\n\nexport const svgElements = [\n  /**\n   * @member {Function} Elem#altGlyph\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'altGlyph',\n\n  /**\n   * @member {Function} Elem#altGlyphDef\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'altGlyphDef',\n\n  /**\n   * @member {Function} Elem#altGlyphItem\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'altGlyphItem',\n\n  /**\n   * @member {Function} Elem#animate\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'animate',\n\n  /**\n   * @member {Function} Elem#animateColor\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'animateColor',\n\n  /**\n   * @member {Function} Elem#animateMotion\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'animateMotion',\n\n  /**\n   * @member {Function} Elem#animateTransform\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'animateTransform',\n\n  /**\n   * @member {Function} Elem#circle\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'circle',\n\n  /**\n   * @member {Function} Elem#clipPath\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'clipPath',\n\n  /**\n   * @member {Function} Elem#colorProfile\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'color-profile',\n\n  /**\n   * @member {Function} Elem#cursor\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'cursor',\n\n  /**\n   * @member {Function} Elem#defs\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'defs',\n\n  /**\n   * @member {Function} Elem#desc\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'desc',\n\n  /**\n   * @member {Function} Elem#discard\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'discard',\n\n  /**\n   * @member {Function} Elem#ellipse\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'ellipse',\n\n  /**\n   * @member {Function} Elem#feBlend\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feBlend',\n\n  /**\n   * @member {Function} Elem#feColorMatrix\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feColorMatrix',\n\n  /**\n   * @member {Function} Elem#feComponentTransfer\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feComponentTransfer',\n\n  /**\n   * @member {Function} Elem#feComposite\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feComposite',\n\n  /**\n   * @member {Function} Elem#feConvolveMatrix\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feConvolveMatrix',\n\n  /**\n   * @member {Function} Elem#feDiffuseLighting\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feDiffuseLighting',\n\n  /**\n   * @member {Function} Elem#feDisplacementMap\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feDisplacementMap',\n\n  /**\n   * @member {Function} Elem#feDistantLight\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feDistantLight',\n\n  /**\n   * @member {Function} Elem#feDropShadow\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feDropShadow',\n\n  /**\n   * @member {Function} Elem#feFlood\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feFlood',\n\n  /**\n   * @member {Function} Elem#feFuncA\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feFuncA',\n\n  /**\n   * @member {Function} Elem#feFuncB\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feFuncB',\n\n  /**\n   * @member {Function} Elem#feFuncG\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feFuncG',\n\n  /**\n   * @member {Function} Elem#feFuncR\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feFuncR',\n\n  /**\n   * @member {Function} Elem#feGaussianBlur\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feGaussianBlur',\n\n  /**\n   * @member {Function} Elem#feImage\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feImage',\n\n  /**\n   * @member {Function} Elem#feMerge\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feMerge',\n\n  /**\n   * @member {Function} Elem#feMergeNode\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feMergeNode',\n\n  /**\n   * @member {Function} Elem#feMorphology\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feMorphology',\n\n  /**\n   * @member {Function} Elem#feOffset\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feOffset',\n\n  /**\n   * @member {Function} Elem#fePointLight\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'fePointLight',\n\n  /**\n   * @member {Function} Elem#feSpecularLighting\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feSpecularLighting',\n\n  /**\n   * @member {Function} Elem#feSpotLight\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feSpotLight',\n\n  /**\n   * @member {Function} Elem#feTile\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feTile',\n\n  /**\n   * @member {Function} Elem#feTurbulence\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'feTurbulence',\n\n  /**\n   * @member {Function} Elem#font\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'font',\n\n  /**\n   * @member {Function} Elem#fontFace\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'font-face',\n\n  /**\n   * @member {Function} Elem#fontFaceFormat\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'font-face-format',\n\n  /**\n   * @member {Function} Elem#fontFaceName\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'font-face-name',\n\n  /**\n   * @member {Function} Elem#fontFaceSrc\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'font-face-src',\n\n  /**\n   * @member {Function} Elem#fontFaceUri\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'font-face-uri',\n\n  /**\n   * @member {Function} Elem#foreignObject\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'foreignObject',\n\n  /**\n   * @member {Function} Elem#g\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'g',\n\n  /**\n   * @member {Function} Elem#glyph\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'glyph',\n\n  /**\n   * @member {Function} Elem#glyphRef\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'glyphRef',\n\n  /**\n   * @member {Function} Elem#hatch\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'hatch',\n\n  /**\n   * @member {Function} Elem#hatchpath\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'hatchpath',\n\n  /**\n   * @member {Function} Elem#hkern\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'hkern',\n\n  /**\n   * @member {Function} Elem#image\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'image',\n\n  /**\n   * @member {Function} Elem#line\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'line',\n\n  /**\n   * @member {Function} Elem#linearGradient\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'linearGradient',\n\n  /**\n   * @member {Function} Elem#marker\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'marker',\n\n  /**\n   * @member {Function} Elem#mask\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'mask',\n\n  /**\n   * @member {Function} Elem#mesh\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'mesh',\n\n  /**\n   * @member {Function} Elem#meshgradient\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'meshgradient',\n\n  /**\n   * @member {Function} Elem#meshpatch\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'meshpatch',\n\n  /**\n   * @member {Function} Elem#meshrow\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'meshrow',\n\n  /**\n   * @member {Function} Elem#metadata\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'metadata',\n\n  /**\n   * @member {Function} Elem#missingGlyph\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'missing-glyph',\n\n  /**\n   * @member {Function} Elem#mpath\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'mpath',\n\n  /**\n   * @member {Function} Elem#path\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'path',\n\n  /**\n   * @member {Function} Elem#pattern\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'pattern',\n\n  /**\n   * @member {Function} Elem#polygon\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'polygon',\n\n  /**\n   * @member {Function} Elem#polyline\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'polyline',\n\n  /**\n   * @member {Function} Elem#radialGradient\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'radialGradient',\n\n  /**\n   * @member {Function} Elem#rect\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'rect',\n\n  /**\n   * @member {Function} Elem#set\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'set',\n\n  /**\n   * @member {Function} Elem#solidcolor\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'solidcolor',\n\n  /**\n   * @member {Function} Elem#stop\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'stop',\n\n  /**\n   * @member {Function} Elem#style\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'style',\n\n  /**\n   * @member {Function} Elem#svg\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'svg',\n\n  /**\n   * @member {Function} Elem#switch\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'switch',\n\n  /**\n   * @member {Function} Elem#symbol\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'symbol',\n\n  /**\n   * @member {Function} Elem#textPath\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'textPath',\n\n  /**\n   * @member {Function} Elem#tref\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'tref',\n\n  /**\n   * @member {Function} Elem#tspan\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'tspan',\n\n  /**\n   * @member {Function} Elem#unknown\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'unknown',\n\n  /**\n   * @member {Function} Elem#use\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'use',\n\n  /**\n   * @member {Function} Elem#view\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'view',\n\n  /**\n   * @member {Function} Elem#vkern\n   * @type {Function}\n   * @param {...String} appliedExpressions\n   * @returns {Elem}\n   */\n  'vkern'\n];\n\nexport const voidElements = [\n  'area',\n  'base',\n  'br',\n  'col',\n  'command',\n  'embed',\n  'hr',\n  'img',\n  'input',\n  'keygen',\n  'link',\n  'meta',\n  'param',\n  'source',\n  'track',\n  'wbr',\n\n  'path',\n  'circle',\n  'ellipse',\n  'line',\n  'rect',\n  'use',\n  'stop',\n  'polyline',\n  'polygon'\n];\n","export const htmlAllowedTagSymbols = '[a-z][a-z\\\\d\\\\-_.:!@#\\\\$%\\\\^&*()\\\\[\\\\]{}\\\\\\\\=\\'\"]*';\nexport const htmlAllowedAttrSymbols = '[^\\\\u0000-\\\\u0020\\\\s\"\\'>/=]+';\n","/**\n * @module constants/regexpSpecialCharacters\n * @private\n * @description Exports special characters for RegExp.\n */\n\n/**\n * @const\n * @name module:constants/regexpSpecialCharacters~regexpSpecialCharacters\n * @type {String[]}\n */\nexport const regexpSpecialCharacters = [\n  '.',\n  '+', '*', '?',\n  '(', ')',\n  '[', ']',\n  '{', '}',\n  '<', '>',\n  '^', '$',\n  '!',\n  '=',\n  ':',\n  '-',\n  '|',\n  ',',\n  '\\\\'\n];\n","/**\n * @module helpers/toStringTag\n * @private\n * @description Exports toStringTag method.\n */\n\n/**\n * @function toStringTag\n * @param {*} object - Object to get toStringTag of.\n * @returns {String} Cut string.\n * @description Cut \"Type\" string from \"[object Type]\" string that gotten from {}.toString,call(object).\n */\nexport function toStringTag(object) {\n  return {}.toString.call(object).replace(/^\\[object |]$/g, '');\n}\n","/**\n * @module helpers/checkTypes\n * @private\n * @mixin\n * @description Exports is<Type> methods.\n */\n\nimport { toStringTag } from './toStringTag';\n\n/**\n * @function isArray\n * @public\n * @param {*} value - Value to check if it is an array.\n * @returns {Boolean} If the argument is an array or not.\n * \n * @example\n * isArray([]);                             // true\n * isArray(0);                              // true\n * isArray(document.querySelectorAll('*')); // false\n */\nexport function isArray(value) {\n  return toStringTag(value) === 'Array';\n}\n\n/**\n * @function isArrayLike\n * @public\n * @param {*} value - Value to check if it is array-like.\n * @returns {Boolean} If the argument is array-like or not.\n * @description Basically returns if the argument has non-negative integer \"length\" property and isn't a function.\n * \n * @example\n * isArrayLike([]);                             // true\n * isArrayLike('');                             // true\n * isArrayLike(() => {});                       // false\n * isArrayLike(document.querySelectorAll('*')); // true\n */\nexport function isArrayLike(value) {\n  if (!value || isFunction(value)) {\n    return false;\n  }\n  \n  const length = value.length;\n  \n  return isInteger(length) && length >= 0;\n}\n\n/**\n * @function isBoolean\n * @public\n * @param {*} value - Value to check if it is a boolean.\n * @returns {Boolean} If the argument is a boolean or not.\n * \n * @example\n * isBoolean(true);               // true\n * isBoolean(new Boolean(false)); // true\n * isBoolean(null);               // false\n */\nexport function isBoolean(value) {\n  return toStringTag(value) === 'Boolean';\n}\n\n/**\n * @function isDate\n * @public\n * @param {*} value - Value to check if it is a date.\n * @returns {Boolean} If the argument is a date or not.\n * \n * @example\n * isDate(new Date());                 // true\n * isDate('1999-12-31T23:59:59.999Z'); // false\n */\nexport function isDate(value) {\n  return toStringTag(value) === 'Date';\n}\n\n/**\n * @function isDateLike\n * @public\n * @param {*} value - Value to check if it is date-like.\n * @returns {Boolean} If the argument is date-like or not.\n * @description Basically returns if new Date(argument) is not invalid date.\n * \n * @example\n * isDateLike(new Date());                 // true\n * isDateLike('1999-12-31T23:59:59.999Z'); // true\n * isDateLike(0);                          // true\n */\nexport function isDateLike(value) {\n  value = new Date(value);\n  \n  return !isNaN(value.getTime());\n}\n\n/**\n * @function isElement\n * @public\n * @param {*} value - Value to check if it is an element.\n * @returns {Boolean} If the argument is element or not.\n *\n * @example\n * isElement(document.querySelector('html')); // true\n */\nexport function isElement(value) {\n  return /Element$/.test(toStringTag(value));\n}\n\n/**\n * @function isFinite\n * @public\n * @param {*} value - Value to check if it is finite.\n * @returns {Boolean} If the argument is finite or not.\n * \n * @example\n * isFinite(0);        // true\n * isFinite('0');      // false\n * isFinite(Infinity); // false\n * isFinite(NaN);      // false\n */\nexport function isFinite(value) {\n  if (!isNumber(value)) {\n    return false;\n  }\n  \n  value = Number(value);\n\n  return !isNaN(value) && value !== Infinity && value !== -Infinity;\n}\n\n/**\n * @function isFunction\n * @public\n * @param {*} value - Value to check if it is a function.\n * @returns {Boolean} If the argument is a function or not.\n * \n * @example\n * isFunction(() => {});            // true\n * \n * const func = () => {};\n * Object.setPrototypeOf(func, {});\n * isFunction(func);                // true\n */\nexport function isFunction(value) {\n  return toStringTag(value) === 'Function' || typeof value === 'function';\n}\n\n/**\n * @function isInteger\n * @public\n * @param {*} value - Value to check if it is an integer.\n * @returns {Boolean} If the argument is an integer or not.\n *\n * @example\n * isInteger(0);             // true\n * isInteger(0.1);           // false\n * isInteger(new Number(0)); // true\n * isInteger('0');           // false\n * isInteger(Infinity);      // false\n * isInteger(NaN);           // false\n */\nexport function isInteger(value) {\n  return isNumber(value) && value % 1 === 0;\n}\n\n/**\n * @function isIntegerLike\n * @public\n * @param {*} value - Value to check if it is integer-like.\n * @returns {Boolean} If the argument is integer-like or not.\n *\n * @example\n * isIntegerLike(0);             // true\n * isIntegerLike(new Number(0)); // true\n * isIntegerLike(0.1);           // false\n * isIntegerLike('0');           // true\n */\nexport function isIntegerLike(value) {\n  value = parseInt(Number(value));\n\n  return !!(value || value === 0);\n}\n\n/**\n * @function isNaN\n * @public\n * @param {*} value - Value to check if it is NaN.\n * @returns {Boolean} If the argument is NaN or not.\n *\n * @example\n * isNaN(0);               // false\n * isNaN('NaN');           // false\n * isNaN(NaN);             // true\n * isNaN(new Number(NaN)); // true\n */\nexport function isNaN(value) {\n  if (!isNumber(value)) {\n    return false;\n  }\n  \n  value = Number(value);\n\n  return value !== value;\n}\n\n/**\n * @function isNull\n * @public\n * @param {*} value - Value to check if it is null.\n * @returns {Boolean} If the argument is null or not.\n *\n * @example\n * isNull(null);      // true\n * isNull(undefined); // false\n */\nexport function isNull(value) {\n  return value === null;\n}\n\n/**\n * @function isNil\n * @public\n * @param {*} value - Value to check if it is null or undefined.\n * @returns {Boolean} If the argument is null or undefined or not.\n *\n * @example\n * isNil(null);      // true\n * isNil(undefined); // true\n * isNil(false);     // false\n */\nexport function isNil(value) {\n  return value === null || typeof value === 'undefined';\n}\n\n/**\n * @function isNumber\n * @public\n * @param {*} value - Value to check if it is a number.\n * @returns {Boolean} If the argument is a number or not.\n *\n * @example\n * isNumber(0);             // true\n * isNumber(new Number(0)); // true\n * isNumber(NaN);           // true\n * isNumber('0');           // false\n */\nexport function isNumber(value) {\n  return toStringTag(value) === 'Number';\n}\n\n/**\n * @function isNumberLike\n * @public\n * @param {*} value - Value to check if it is number-like.\n * @returns {Boolean} If the argument is number-like or not.\n *\n * @example\n * isNumberLike(0);          // true\n * isNumberLike('0');        // true\n * isNumberLike('Infinity'); // true\n * isNumberLike('NaN');      // true\n * isNumberLike(NaN);        // true\n */\nexport function isNumberLike(value) {\n  if (isNaN(value) || value === 'NaN') {\n    return true;\n  }\n  \n  value = Number(value);\n  \n  return !!(value || value === 0);\n}\n\n/**\n * @function isObject\n * @public\n * @param {*} value - Value to check if it is an object.\n * @returns {Boolean} If the argument is an object or not.\n *\n * @example\n * isObject({});   // true\n * isObject(1);    // false\n * isObject(null); // false\n */\nexport function isObject(value) {\n  return !!value && (toStringTag(value) === 'Object' || typeof value === 'object' || value instanceof Object);\n}\n\n/**\n * @function isPlainObject\n * @public\n * @param {*} value - Value to check if it is a plain object.\n * @returns {Boolean} If the argument is a plain object or not.\n *\n * @example\n * const obj = {};\n *\n * ifPlainObject(obj); // true\n *\n * Object.setPrototypeOf(object, null);\n *\n * ifPlainObject(obj); // true\n *\n * Object.setPrototypeOf(object, {});\n *\n * ifPlainObject(obj); // false\n */\nexport function isPlainObject(value) {\n  if (isPrimitive(value)) {\n    return false;\n  }\n\n  const proto = Object.getPrototypeOf(value);\n\n  if (isNull(proto)) {\n    return true;\n  }\n\n  const constructor = proto.constructor;\n\n  return isFunction(constructor) &&\n    constructor instanceof constructor &&\n    isNull(Object.getPrototypeOf(proto));\n}\n\n/**\n * @function isPrimitive\n * @public\n * @param {*} value - Value to check if it is primitive.\n * @returns {Boolean} If the argument is primitive or not.\n *\n * @example\n * isPrimitive(1);             // true\n * isPrimitive({});            // false\n * isPrimitive('');            // true\n * isPrimitive(new Number(0)); // false\n * isPrimitive(true);          // true\n * isPrimitive(Symbol('foo')); // true\n * isPrimitive(null);          // true\n * isPrimitive(undefined);     // true\n */\nexport function isPrimitive(value) {\n  return isNull(value) || /^(number|string|boolean|symbol|undefined)$/.test(typeof value);\n}\n\n/**\n * @function isRegExp\n * @public\n * @param {*} value - Value to check if it is a regular expression.\n * @returns {Boolean} If the argument is a regular expression or not.\n *\n * @example\n * isRegExp(/foo/);             // true\n * isRegExp('/foo/');           // false\n * isRegExp(new RegExp('foo')); // true\n */\nexport function isRegExp(value) {\n  return toStringTag(value) === 'RegExp';\n}\n\n/**\n * @function isString\n * @public\n * @param {*} value - Value to check if it is a string.\n * @returns {Boolean} If the argument is a string or not.\n *\n * @example\n * isString('0');             // true\n * isString(new String('0')); // true\n */\nexport function isString(value) {\n  return toStringTag(value) === 'String';\n}\n\n/**\n * @function isSymbol\n * @public\n * @param {*} value - Value to check if it is a symbol.\n * @returns {Boolean} If the argument is a symbol or not.\n *\n * @example\n * isSymbol(Symbol('1')); // true\n */\nexport function isSymbol(value) {\n  return toStringTag(value) === 'Symbol';\n}\n\n/**\n * @function isUndefined\n * @public\n * @param {*} value - Value to check if it is undefined.\n * @returns {Boolean} If the argument is undefined or not.\n *\n * @example\n * isUndefined(null);      // false\n * isUndefined(undefined); // true\n */\nexport function isUndefined(value) {\n  return typeof value === 'undefined';\n}\n","/**\n * @module constants/validateCheckExpressions\n * @private\n * @description Exports different types of validate expressions for {@link module:helpers/validate}.\n */\n\nimport * as methods from '../helpers/checkTypes';\n\n/**\n * @callback checkValidityCallback\n * @private\n * @param {*} value - Value to check.\n */\n\n/**\n * @typedef {Object} validateExpr\n * @private\n * @property {String} text - Text of the thrown error.\n * @property {Error} error - Type of the thrown error.\n * @property {checkValidityCallback} check - Callback for checking value.\n */\n\n/**\n * @type {validateExpr[]}\n * @private\n * @description Object of different types of validation.\n */\nexport const validateCheckExpressions = {\n  '>0': {\n    check: (n) => n > 0,\n    text: '$n argument must be positive!',\n    error: RangeError\n  },\n  '>=0': {\n    check: (n) => n >= 0,\n    text: '$n argument must be non-negative!',\n    error: RangeError\n  },\n  '<0': {\n    check: (n) => n < 0,\n    text: '$n argument must be negative!',\n    error: RangeError\n  },\n  '<=0': {\n    check: (n) => n <= 0,\n    text: '$n argument must be non-positive!',\n    error: RangeError\n  },\n  '!!': {\n    check: (v) => !methods.isNil(v),\n    text: '$n argument must be not null or undefined!',\n    error: TypeError\n  },\n  array: {\n    check: methods.isArray,\n    text: '$n argument must be an array!',\n    error: TypeError\n  },\n  'array||!': {\n    check: (a) => methods.isArray(a) || methods.isNil(a),\n    text: '$n argument must be an array, or undefined, or null!',\n    error: TypeError\n  },\n  arrayLike: {\n    check: methods.isArrayLike,\n    text: '$n argument must be array-like!',\n    error: TypeError\n  },\n  'arrayLike||!': {\n    check: (a) => methods.isArrayLike(a) || methods.isNil(a),\n    text: '$n argument must be array-like, or undefined, or null!',\n    error: TypeError\n  },\n  date: {\n    check: methods.isDate,\n    text: '$n argument must be a date!',\n    error: TypeError\n  },\n  'date||!': {\n    check: (d) => methods.isDate(d) || methods.isNil(d),\n    text: '$n argument must be a date, or undefined, or null!',\n    error: TypeError\n  },\n  dateLike: {\n    check: methods.isDateLike,\n    text: '$n argument must be date-like!',\n    error: TypeError\n  },\n  'dateLike||!': {\n    check: (d) => methods.isDateLike(d) || methods.isNil(d),\n    text: '$n argument must be date-like, or undefined, or null!',\n    error: TypeError\n  },\n  function: {\n    check: methods.isFunction,\n    text: '$n argument must be a function!',\n    error: TypeError\n  },\n  'function||!': {\n    check: (f) => methods.isFunction(f) || methods.isNil(f),\n    text: '$n argument must be a function, or undefined, or null!',\n    error: TypeError\n  },\n  int: {\n    check: methods.isInteger,\n    text: '$n argument must be an integer!',\n    error: TypeError\n  },\n  'int||!': {\n    check: (i) => methods.isInteger(i) || methods.isNil(i),\n    text: '$n argument must be an integer, or undefined, or null!',\n    error: TypeError\n  },\n  intLike: {\n    check: methods.isIntegerLike,\n    text: '$n argument must be integer-like!',\n    error: TypeError\n  },\n  'intLike||!': {\n    check: (i) => methods.isIntegerLike(i) || methods.isNil(i),\n    text: '$n argument must be integer-like, or undefined, or null!',\n    error: TypeError\n  },\n  number: {\n    check: methods.isNumber,\n    text: '$n argument must be a number!',\n    error: TypeError\n  },\n  'number||!': {\n    check: (n) => methods.isNumber(n) || methods.isNil(n),\n    text: '$n argument must be a number, or undefined, or null!',\n    error: TypeError\n  },\n  numberLike: {\n    check: methods.isNumberLike,\n    text: '$n argument must be number-like!',\n    error: TypeError\n  },\n  'numberLike||!': {\n    check: (n) => methods.isNumberLike(n) || methods.isNil(n),\n    text: '$n argument must be number-like, or undefined, or null!',\n    error: TypeError\n  },\n  object: {\n    check: methods.isObject,\n    text: '$n argument must be an object!',\n    error: TypeError\n  },\n  'object||!': {\n    check: (o) => methods.isObject(o) || methods.isNil(o),\n    text: '$n argument must be an object, or undefined, or null!',\n    error: TypeError\n  },\n  regexp: {\n    check: methods.isRegExp,\n    text: '$n argument must be a regular expression!',\n    error: TypeError\n  },\n  'regexp||!': {\n    check: (r) => methods.isRegExp(r) || methods.isNil(r),\n    text: '$n argument must be a regular expression, or undefined, or null!',\n    error: TypeError\n  },\n  string: {\n    check: methods.isString,\n    text: '$n argument must be a string!',\n    error: TypeError\n  },\n  'string||!': {\n    check: (s) => methods.isString(s) || methods.isNil(s),\n    text: '$n argument must be a string, or undefined, or null!',\n    error: TypeError\n  }\n};\n","/**\n * @module D\n * @private\n * @description Exports D function.\n */\n\nimport { constructors } from './constants';\n\n/**\n * @function D\n * @public\n * @param {*} [value] - Any value.\n * @returns {DWrap} Wrap of the argument.\n * @description Function for creating a D-wrap of an object.\n *\n * @example\n * D({});            // Super\n * D(() => {});      // Func\n * D([]);            // Arr\n * D(1);             // Num\n * D('1');           // Str\n * D(new Date());    // Dat\n * D(document.body); // Elem\n */\nfunction D(value) {\n  for (let i = constructors.length - 1; i >= 0; i--) {\n    const levelConstructors = constructors[i];\n\n    for (let k = 0, len = levelConstructors.length; k < len; k++) {\n      const constructor = levelConstructors[k];\n\n      if (value instanceof constructor.cls) {\n        return value;\n      }\n\n      if (constructor.check(value)) {\n        return new constructor.cls(value);\n      }\n    }\n  }\n}\n\nexport * from './helpers/checkTypes';\nexport { D };\n","/**\n * @module helpers/iterate\n * @private\n * @description Exports iterate method.\n */\n\nimport { isArrayLike, isUndefined } from './checkTypes';\n\n/**\n * @callback IterationCallback\n * @param {*} value - Iteration value.\n * @param {String|Number} key - Iteration key.\n * @param {*} object - Initial iterable object.\n */\n\n/**\n * @function iterate\n * @param {(Object|Array|null|undefined)} object - Value to iterate over.\n * @param {IterationCallback} callback - Callback that is called on every iteration.\n * @returns {*} If callback returns not undefined then iterate returns this value.\n * @description Function for iterating over all types of values.\n */\nexport function iterate(object, callback) {\n  const array = isArrayLike(object);\n  const iteratedKeys = {};\n\n  let iterated = 0;\n\n  for (const key in object) {\n    if ({}.hasOwnProperty.call(iteratedKeys, key)) {\n      continue;\n    }\n\n    iteratedKeys[key] = true;\n\n    if ({}.hasOwnProperty.call(object, key)) {\n      if (array && iterated++ >= object.length) {\n        break;\n      }\n\n      const value = callback(object[key], array ? Number(key) : key, object);\n\n      if (!isUndefined(value)) {\n        return value;\n      }\n    }\n  }\n}\n","/**\n * @module helpers/assign\n * @private\n * @description Exports Object.assign-like method.\n */\n\nimport { iterate } from './iterate';\n\n/**\n * @const\n * @function assign\n * @param {Object} target - Object to assign rest of arguments to.\n * @param {...Object} objects - Objects that are assigned to the target.\n * @returns {Object} Target.\n */\nexport function assign(target, ...objects) {\n  iterate(arguments, (source, index) => {\n    if (index) {\n      iterate(source, (value, key) => {\n        target[key] = value;\n      });\n    }\n  });\n    \n  return target;\n}\n","/**\n * @module helpers/constructEvalFunction\n * @private\n * @description Exports constructEvalFunction method.\n */\n\n/**\n * @function constructEvalFunction\n * @param {String} code - JS code.\n * @param {String} original - Original JS code.\n * @returns {*} Eval function.\n * @description Function for constructing eval function.\n */\nexport function constructEvalFunction(code, original) {\n  let func;\n\n  try {\n    /* eslint no-new-func: 0 */\n    func = new Function('$', `return ${ code }`);\n    func.expression = code;\n    func.original = original;\n\n    return func;\n  } catch (err) {\n    throw new Error(`Syntax error (in \"${ code }\", original code: \"${ original }\")`);\n  }\n}\n","/**\n * @module helpers/defineProperty\n * @private\n * @description Exports defineProperty and dynamicDefineProperties methods.\n */\n\nimport { iterate } from './iterate';\n\n/**\n * @callback propertyGeneratorCallback\n * @param {String} name - Name of the property.\n * @param {Number} i - Index of the array.\n * @returns {*} Generated property.\n */\n\n/**\n * @function dynamicDefineProperties\n * @param {Object} target - Object to define properties for.\n * @param {Array} properties - Object which keys are properties.\n * @param {propertyGeneratorCallback} propertyGenerator - Callback for every property.\n * @returns {void}\n * @description Function for dynamic creating properties based on name of the method.\n */\nexport function dynamicDefineProperties(target, properties, propertyGenerator) {\n  iterate(properties, (name, i) => {\n    Object.defineProperty(target, name, {\n      value: propertyGenerator(name, i),\n      writable: true,\n      enumerable: false,\n      configurable: true\n    });\n  });\n}\n\n/**\n * @function defineProperties\n * @param {Object} target - Target to define properties for.\n * @param {Object} properties - Object with properties needed to be assign to the target.\n * @returns {void}\n * @description Function for defining properties of an object.\n */\nexport function defineProperties(target, properties) {\n  iterate(properties, (value, name) => {\n    if (/^get /.test(name)) {\n      Object.defineProperty(target, name.replace(/^get /, ''), {\n        get: value,\n        set: undefined,\n        enumerable: false,\n        configurable: true\n      });\n\n      return;\n    }\n\n    if (/^set /.test(name)) {\n      Object.defineProperty(target, name.replace(/^set /, ''), {\n        set: value,\n        get: undefined,\n        enumerable: false,\n        configurable: true\n      });\n\n      return;\n    }\n\n    if (/^get\\/set /.test(name)) {\n      Object.defineProperty(target, name.replace(/^get\\/set /, ''), {\n        get: value.get,\n        set: value.set,\n        enumerable: false,\n        configurable: true\n      });\n\n      return;\n    }\n\n    if (name !== 'Symbol.toStringTag') {\n      Object.defineProperty(target, name, {\n        value,\n        writable: true,\n        enumerable: false,\n        configurable: true\n      });\n    }\n  });\n}\n\n/**\n * @function defineUsualProperties\n * @param {Object} target - Target to define properties for.\n * @param {Object} properties - Object with properties needed to be assign to the target.\n * @returns {void}\n * @description Function for defining usual properties of an object.\n */\nexport function defineUsualProperties(target, properties) {\n  iterate(properties, (value, name) => {\n    Object.defineProperty(target, name, {\n      value,\n      writable: true,\n      enumerable: true,\n      configurable: true\n    });\n  });\n}\n\n/**\n * @function defineFrozenProperties\n * @param {Object} target - Target to define properties for.\n * @param {Object} properties - Object with properties needed to be assign to the target.\n * @returns {void}\n * @description Function for defining frozen properties of an object.\n */\nexport function defineFrozenProperties(target, properties) {\n  iterate(properties, (value, name) => {\n    Object.defineProperty(target, name, {\n      value,\n      writable: false,\n      enumerable: false,\n      configurable: false\n    });\n  });\n}\n","/**\n * @module helpers/Symbol\n * @private\n * @description Exports Symbol class.\n */\n\nexport const Symbol = global.Symbol || {\n  toStringTag: 'Symbol.toStringTag',\n  iterator: Math.random().toString(36)\n};\n","/**\n * @module helpers/toArray\n * @private\n * @description Exports toArray method.\n */\n\nimport { isArray, isArrayLike, isString } from './checkTypes';\nimport { iterate } from './iterate';\n\n/**\n * @function toArray\n * @param {*} value - Any value.\n * @param {Boolean} [createNewArray = false] - If it is needed to create new array.\n * @returns {Array} Create array.\n * @description Function for creating an array of any value.\n */\nexport function toArray(value, createNewArray) {\n  if (isArray(value) && !createNewArray) {\n    return value;\n  }\n\n  const array = [];\n\n  if (isArrayLike(value) && !isString(value)) {\n    iterate(value, (value) => {\n      array.push(value);\n    });\n  } else {\n    array.push(value);\n  }\n\n  return array;\n}\n","/**\n * @module helpers/toJSON\n * @private\n * @description Exports toJSON method.\n */\n\nexport function toJSON(what) {\n  return JSON.stringify(what);\n}\n\nexport function parseJSON(what) {\n  return JSON.parse(what);\n}\n","/**\n * @module helpers/validate\n * @private\n * @description Exports validate method.\n */\n\nimport { validateCheckExpressions } from '../constants';\nimport { iterate } from './iterate';\nimport { isArray } from './checkTypes';\n\nconst numbers = ['1st', '2nd', '3rd', '4th', '5th', '6th', '7th'];\n\n/**\n * @function validate\n * @private\n * @param {Object} args - Arguments of function.\n * @param {Object} options - Object with validate parameters.\n * @param {String} [name] - Name of the function what called validate.\n * @returns {void}\n * @description Function for checking arguments of other functions.\n */\nexport function validate(args, options, name) {\n  iterate(options, (array, number) => {\n    if (!isArray(array)) {\n      array = [array];\n    }\n\n    iterate(array, (checker) => {\n      checker = validateCheckExpressions[checker];\n\n      if (!checker.check(args[number])) {\n        throw new checker.error(checker.text.replace('$n', numbers[number]) + (name ? ` (at ${ name })` : ''));\n      }\n    });\n  });\n}\n","/**\n * @module Alphabet\n * @private\n * @mixin\n * @description Exports Alphabet class.\n */\n\nimport { isString, validate, defineProperties, Symbol } from './helpers';\n\n/**\n * @typedef {String} Char\n * @public\n * @description A string of one char.\n */\n\n/**\n * @class Alphabet\n * @public\n * @param {ArrayLike} alphabet - Alphabet to wrap.\n * @returns {Alphabet} Instance of Alphabet.\n * @description Class for alphabet manipulations: add, delete symbols, generate a token from an alphabet,\n * check if an alphabet contains a word.\n *\n * @example\n * new Alphabet(['a', 'b', 'c']);\n */\nclass Alphabet {\n  constructor(alphabet = []) {\n    const a = {};\n\n    for (let i = 0, length = alphabet.length; i < length; i++) {\n      const char = alphabet[i];\n\n      if (!check(char)) {\n        throw new Error('Each element of an array must be a single char! (in Alphabet)');\n      }\n\n      a[char] = char;\n    }\n\n    /**\n     * @member {Object} Alphabet#$$\n     * @public\n     * @description The alphabet.\n     */\n    Object.defineProperty(this, '$$', { value: a });\n  }\n\n  /**\n   * @method Alphabet#add\n   * @public\n   * @param {...Char} chars - Chars to add.\n   * @returns {Alphabet} Returns this.\n   * @description Method for adding new letters to the alphabet.\n   *\n   * @example\n   * const alphabet = new Alphabet(['a', 'b', 'c']);\n   *\n   * alphabet.add('d', 'e');\n   *\n   * alphabet.get().$; // ['a', 'b', 'c', 'd', 'e']\n   */\n  add(...chars) {\n    for (let i = 0, length = chars.length; i < length; i++) {\n      const char = chars[i];\n\n      if (!check(char)) {\n        throw new Error('Each argument must be a single char! (in Alphabet#add)');\n      }\n\n      this.$$[char] = char;\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Alphabet#contains\n   * @public\n   * @param {String} word - Word to check if it is in the alphabet or not.\n   * @returns {Boolean} If the word in the alphabet or not.\n   * @description Method that returns if a word is in alphabet or not.\n   *\n   * @example\n   * const alphabet = new Alphabet(['f', 'b', 'o', 'a', 'r']);\n   *\n   * alphabet.contains('foo'); // true\n   * alphabet.contains('bar'); // true\n   * alphabet.contains('baz'); // false\n   */\n  contains(word) {\n    validate([word], ['string'], 'Alphabet#contains');\n\n    const alphabet = this.$$;\n\n    for (let i = 0, length = word.length; i < length; i++) {\n      if (!alphabet[word[i]]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * @method Alphabet#delete\n   * @public\n   * @param {...Char} chars - Chars to delete.\n   * @returns {Alphabet} Returns this.\n   * @description Method for deleting letters from the alphabet.\n   *\n   * @example\n   * const alphabet = new Alphabet(['a', 'b', 'c', 'd']);\n   *\n   * alphabet.delete('a');\n   *\n   * alphabet.get().$; // ['b', 'c', 'd']\n   *\n   * alphabet.delete('b', 'd');\n   *\n   * alphabet.get().$; // ['c']\n   */\n  delete(...chars) {\n    for (let i = 0, length = chars.length; i < length; i++) {\n      const char = chars[i];\n\n      if (!check(char)) {\n        throw new Error('Each argument must be a single char! (in Alphabet#delete)');\n      }\n\n      delete this.$$[char];\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Alphabet#get\n   * @returns {Array} Wrap of an array of alphabet letters.\n   * @description Method for getting array of alphabet letters.\n   *\n   * @example\n   * new Alphabet(['a', 'b', 'c']).get().$; // ['a', 'b', 'c']\n   */\n  get() {\n    return Object.keys(this.$$);\n  }\n\n  /**\n   * @method Alphabet#token\n   * @public\n   * @param {Number} length - Token length.\n   * @returns {String} Token.\n   * @description Method for generating random token with given length.\n   *\n   * @example\n   * new Alphabet(['a', 'b', 'c']).token(4); // 'abcb'\n   */\n  token(length) {\n    validate([length], [['intLike', '>0']], 'Alphabet#token');\n\n    const alphabet = Object.keys(this.$$);\n    const len = alphabet.length;\n    let token = '';\n\n    for (let i = 0; i < length; i++) {\n      token += alphabet[Math.floor(Math.random() * len)];\n    }\n\n    return token;\n  }\n}\n\ndefineProperties(Alphabet.prototype, {\n  [Symbol.toStringTag]: 'Alphabet'\n});\n\nfunction check(char) {\n  return isString(char) && char.length === 1;\n}\n\n/**\n * @function alphabet\n * @public\n * @param {String} string - String to generate an alphabet from.\n * @returns {Alphabet} New instance of Alphabet.\n * @description Function for creating an alphabet from a string that has format like this:\n * '&lt;char1&gt;-&lt;char2&gt; &lt;char3&gt;-&lt;char4&gt;'\n *\n * @example\n * const a1 = alphabet('a-c 1-3');\n * const a2 = alphabet('5-5f-g');\n *\n * a1.get().$; // ['1', '2', '3', 'a', 'b', 'c']\n * a2.get().$; // ['5', 'f', 'g']\n */\nfunction alphabet(string) {\n  validate([string], ['string']);\n\n  const ranges = string.split(/([\\s\\S]-+[\\s\\S])?/g);\n  const length = ranges.length;\n  const alphabet = [];\n\n  for (let i = 0; i < length; i++) {\n    const range = ranges[i];\n\n    if (!range || range === ' ') {\n      continue;\n    }\n\n    if (/-/.test(range) && !/[\\s\\S]-+[\\s\\S]/.test(range)) {\n      throw new Error(`Wrong part of the string (${ range })! (in alphabet)`);\n    }\n\n    if (/-/.test(range)) {\n      const start = range.charCodeAt(0);\n      const end = range.charCodeAt(2);\n\n      if (start > end) {\n        throw new Error('Start of the range must be before its end! (in alphabet)');\n      }\n\n      for (let k = 0, len = end - start + 1; k < len; k++) {\n        alphabet.push(String.fromCharCode(start + k));\n      }\n\n      continue;\n    }\n\n    if (range.length === 1) {\n      alphabet.push(range);\n    }\n  }\n\n  return new Alphabet(alphabet);\n}\n\nexport { Alphabet, alphabet };\n","/**\n * @module Switcher\n * @private\n * @mixin\n * @description Exports Switcher class.\n */\n\nimport {\n  isArray, isFunction, isString, isUndefined,\n  iterate, Symbol, toArray, defineProperties\n} from './helpers';\n\n/**\n * @typedef {'boolean'|'equals'|'strictEquals'|'call'} SwitcherMode\n * @public\n * @description Enum type of switcher modes.\n */\n\n/**\n * @callback SwitcherCallCallback\n * @public\n * @param {*} value - Switcher value.\n * @returns {Boolean|*} On what the callback returns depends if the case is a match (truthy for the match).\n */\n\n/**\n * @callback SwitcherMatchCallback\n * @public\n * @param {...*} args - Arguments from the second argument that switcher was called with.\n * @param {*} value - Switcher value.\n * @param {*} matched - Switcher matched case.\n */\n\n/**\n * @class Switcher\n * @public\n * @param {Object} [cases = {}] - Object of cases.\n * @param {SwitcherMode} [mode = 'equals'] - Switcher mode.\n * @param {*} [defaultValue] - Switcher default value.\n * @returns {Switcher} - Instance of Switcher.\n * @description Switcher class for creating functions working similar to switch (value) {} construction,\n * but with the value assignment. Switcher instance is a function that accepts a value argument and an optional\n * args argument. Args with additional switcher value and matched case\n * are passed into the function of the matched case (if it is a function).\n *\n * @example\n * const switcher = new Switcher();\n * const switcher = new Switcher({\n *   case1: 'value1',\n *   case2: 'value2'\n * });\n * const switcher = new Switcher('strictEquals');\n * const switcher = new Switcher({\n *   case1: 'value1',\n *   case2: 'value2'\n * }, 'strictEquals');\n * const switcher = new Switcher('strictEquals', 'defaultValue');\n * const switcher = new Switcher({\n *   case1: 'value1',\n *   case2: 'value2'\n * }, 'strictEquals', 'defaultValue');\n *\n * // See [switcher]{@link switcher} examples for more information.\n */\nclass Switcher extends Function {\n  constructor(cases = {}, mode = 'equals', defaultValue) {\n    super();\n\n    if (isString(cases)) {\n      if (!isUndefined(arguments[1])) {\n        defaultValue = mode;\n      }\n\n      mode = cases;\n      cases = {};\n    }\n\n    const eventualCases = [];\n\n    iterate(cases, (value, Case) => {\n      eventualCases.push({ case: Case, value });\n    });\n\n    function switcher(value, args = []) {\n      const { mode, default: def, cases } = switcher.$$;\n\n      let ret = iterate(cases, ({ value: val, case: Case }) => {\n        if (\n          (mode === 'boolean' && Case) ||\n          /* eslint eqeqeq: 0 */\n          (mode === 'equals' && Case == value) ||\n          (mode === 'strictEquals' && Case === value) ||\n          (mode === 'call' && Case(value))\n        ) {\n          return { case: Case, value: val };\n        }\n      });\n\n      if (isUndefined(ret)) {\n        ret = { value: def };\n      }\n\n      if (!isFunction(ret.value)) {\n        return ret.value;\n      }\n\n      args = toArray(args, true);\n      args.push(value, ret.case);\n\n      return ret.value.apply(null, args);\n    }\n\n    /**\n     * @member Switcher#$$\n     * @type {Object}\n     * @protected\n     * @property {Array} cases - Array of cases.\n     * @property {SwitcherMode} mode - Switcher mode.\n     * @property {*} default - Switcher default value.\n     * @description Config parameters.\n     */\n    Object.defineProperty(switcher, '$$', {\n      value: {\n        cases: eventualCases,\n        mode,\n        default: defaultValue\n      }\n    });\n    Object.setPrototypeOf(switcher, Switcher.prototype);\n\n    return switcher;\n  }\n\n  /**\n   * @method Switcher#case\n   * @public\n   * @param {*|SwitcherCallCallback|Array.<*|SwitcherCallCallback>} cases - Case or an array of cases.\n   * @param {*|SwitcherMatchCallback} value - Value that has to be assigned or a function\n   * that is called with switcher value, if it's the case.\n   * @returns {Switcher} Returns this.\n   * @description Method for defining new cases.\n   *\n   * @example\n   * const sw = new Switcher()\n   *   .case(1, 'one')\n   *   .case(2, 'two');\n   *\n   * sw(1); // 'one'\n   * sw(2); // 'two'\n   */\n  case(cases, value) {\n    if (!isArray(cases)) {\n      cases = [cases];\n    }\n\n    iterate(cases, (Case) => {\n      this.$$.cases.push({ case: Case, value });\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Switcher#default\n   * @public\n   * @param {*} def - New default value.\n   * @returns {Switcher} Returns this.\n   * @description Method for redefining default switcher value.\n   *\n   * @example\n   * const sw = new Switcher()\n   *   .case(1, 'one')\n   *   .default('three');\n   *\n   * sw(1); // 'one'\n   * sw(2); // 'three'\n   */\n  default(def) {\n    this.$$.default = def;\n\n    return this;\n  }\n\n  /**\n   * @method Switcher#mode\n   * @public\n   * @param {SwitcherMode} mode - New switcher mode.\n   * @returns {Switcher} Returns this.\n   * @description Method for redefining switcher mode.\n   *\n   * @example\n   * const sw = new Switcher()\n   *   .mode('strictEquals')\n   *   .case(1, 'number')\n   *   .case('1', 'string');\n   *\n   * sw(1);   // 'number'\n   * sw('1'); // 'string'\n   */\n  mode(mode) {\n    this.$$.mode = mode;\n\n    return this;\n  }\n}\n\ndefineProperties(Switcher.prototype, {\n  [Symbol.toStringTag]: 'Switcher'\n});\n\n/**\n * @function switcher\n * @public\n * @param {Object} [cases = {}] - Object of cases.\n * @param {SwitcherMode} [mode = 'equals'] - Switcher mode.\n * @param {*} [defaultValue] - Switcher default value.\n * @returns {Switcher} New instance of Switcher.\n * @description Simple wrap of [new Switcher(...)]{@link Switcher}.\n * \n * @example\n * const sw = switcher({\n *   1: 'foo',\n *   2: 'bar'\n * });\n * sw(1); // 'foo'\n * sw(2); // 'bar'\n * sw(3); // undefined\n * \n * @example\n * const sw = switcher()\n *   .case([1, 2], 'foo')\n *   .case(3, 'bar');\n *   \n * sw(1); // 'foo'\n * sw(2); // 'foo'\n * sw(3); // 'bar'\n * \n * @example\n * const sw = switcher('call')\n *   .case(isArray, 'array')\n *   .case(isString, 'string')\n *   .case(isNumber, 'number')\n *   .default('rest');\n *   \n * sw([]);    // 'array'\n * sw('foo'); // 'string'\n * sw(123);   // 'number'\n * sw({});    // 'rest'\n * \n * @example\n * const sw = switcher({\n *   1: (value) => {\n *     console.log(value + 1);\n *   },\n *   2: () => {\n *     console.log(value - 1);\n *   }\n * });\n * \n * sw(1); // 2\n * sw(2); // 1\n * \n * @example\n * const sw = switcher({\n *   first: (array) => array[0],\n *   last: (array) => array[array.length - 1]\n * }, 'equals', (array, index) => array[index]);\n * const array = [1, 2, 3, 4];\n * \n * sw('first', [array]); // 1\n * sw('last', [array]);  // 4\n * sw(1, [array]);       // 2\n * sw(2, [array]);       // 3\n */\nfunction switcher(cases, mode, defaultValue) {\n  return new Switcher(...arguments);\n}\n\n/**\n * @function when\n * @public\n * @param {Boolean|*} condition - Condition used for returning the proper value.\n * @param {*} value1 - Value if the condition is truthy.\n * @param {*} value2 - Value if the condition is falsey.\n * @returns {*} value1 or value2.\n * @description Synonym for\n * [ternary operator]{@link https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference/Operators/Conditional_Operator}.\n * \n * @example\n * when(true, 'true', 'false'); // 'true'\n */\nfunction when(condition, value1, value2) {\n  return condition ? value1 : value2;\n}\n\nexport { Switcher, switcher, when };\n","/**\n * @module Super\n * @private\n * @mixin\n * @description Exports Super class.\n */\n\nimport { D } from './D';\nimport { switcher } from './Switcher';\nimport { constructors } from './constants/constructors';\nimport {\n  isArray, isArrayLike, isDate, isElement, isFunction, isNil, isNaN, isNull,\n  isObject, isPlainObject, isPrimitive, isRegExp, isString, isUndefined,\n  validate, toStringTag, iterate, Symbol, defineProperties\n} from './helpers';\n\n/**\n * @typedef {Super|Arr|Func|Elem|Str|Num|Dat|BlobObject} DWrap\n * @public\n * @description Any kind of D-Wrap.\n */\n\n/**\n * @typedef {String|Number|null} Key\n * @public\n * @description Key type used in many methods.\n */\n\n/**\n * @typedef {TreeElement[]} Tree\n * @public\n */\n\n/**\n * @typedef {Object} TreeElement\n * @public\n * @property {Key} key - Tree element key.\n * @property {*} value - Tree element value.\n * @description {@link Tree} element.\n */\n\n/**\n * @callback DeepIterationCallback\n * @public\n * @param {*} value - Current iteration value.\n * @param {String|Number} key - Current iteration key/index.\n * @param {*} object - Iteration object.\n * @param {Tree} tree - Tree of { key, value } elements.\n */\n\n/**\n * @callback DeepReduceCallback\n * @public\n * @param {*} previousValue - Previous value.\n * @param {*} value - Current iteration value.\n * @param {String|Number} key - Current iteration key/index.\n * @param {*} object - Iteration object.\n * @param {Tree} tree - Tree of { key, value } elements.\n */\n\n/**\n * @callback IterationCallback\n * @public\n * @param {*} value - Current iteration value.\n * @param {String|Number} key - Current iteration key/index.\n * @param {*} object - Iteration object.\n */\n\n/**\n * @callback JSONCallback\n * @public\n * @param {String|null} key - Current value.\n * @param {*} value - Current key.\n * @param {Object} object - Iteration object.\n */\n\n/**\n * @callback ObjectCallback\n * @public\n * @param {Object} newObject - The new object.\n * @param {*} value - Current iteration value.\n * @param {String|Number} key - Current iteration key/index.\n * @param {*} object - Iteration object.\n */\n\n/**\n * @callback ReduceCallback\n * @public\n * @param {*} previousValue - Previous value.\n * @param {*} value - Current iteration value.\n * @param {String|Number} key - Current iteration key/index.\n * @param {*} object - Iteration object.\n */\n\n/**\n * @callback SuperMethod\n * @public\n * @this {DWrap}\n */\n\nconst cloneSwitcher = switcher('call', (object) => object)\n  .case(\n    (object) => new Super(object) === object,\n    (object) => new (Object.getPrototypeOf(object).constructor)(new Super(object.$).deepClone().$)\n  )\n  .case(isElement, (object, deep) => object.clone(deep))\n  .case(isDate, (object) => new Date(object))\n  .case(isRegExp, (object) => new RegExp(object.source, object.toString().match(/[gimuy]*$/)[0]))\n  .case(isArray, () => [])\n  .case(isPlainObject, () => ({}));\n\n/**\n * @class Super\n * @public\n * @param {*} [object] - An object to wrap.\n * @returns {DWrap} Instance of Super.\n * @description Wrap of any value. And there is no way to create a nested wrap.\n *\n * @example\n * new Super({}); // Super\n */\nclass Super {\n  constructor(object) {\n    if (object instanceof Super) {\n      return object;\n    }\n\n    /**\n     * @member Super#$\n     * @type {*}\n     * @public\n     * @description Wrapped object.\n     */\n    Object.defineProperty(this, '$', { value: object });\n  }\n\n  /**\n   * @method Super.addStaticProperties\n   * @public\n   * @param {String|Object} property - Either a string of a property or an object\n   * with properties keys and values values.\n   * @param {Object} [value] - If a property parameter is a string this has to be a property value.\n   * @returns {this} Returns this.\n   * @description Sets static properties for DWrap constructors.\n   *\n   * @example\n   * Super.addStaticProperties('cool', 42);\n   * Super.addStaticProperties('superCool', 42*42);\n   */\n  static addStaticProperties(property, value) {\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    defineProperties(this, property);\n\n    return this;\n  }\n\n  /**\n   * @method Super.addInstanceProperties\n   * @public\n   * @param {String|Object} property - Either a string of a property or an object\n   * with properties keys and values values.\n   * @param {Object} [value] - If a property parameter is a string this has to be a property value.\n   * @returns {this} Returns this.\n   * @description Sets static properties for DWrap prototypes.\n   *\n   * @example\n   * Super.addInstanceProperties('cool', 42);\n   * Super.addInstanceProperties('superCool', 42*42);\n   */\n  static addInstanceProperties(property, value) {\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    defineProperties(this.prototype, property);\n\n    return this;\n  }\n\n  /**\n   * @method Super#assign\n   * @public\n   * @param {...(Object|Super|*)} objects - Objects to be assigned to the object.\n   * @returns {DWrap} Returns this.\n   * @description Synonym for\n   * [Object.assign]\n   * {@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign}.\n   *\n   * @example\n   * new Super({ a: 1, b: 2 }).assign({ a: 3 }, { c: 3, d: 4 }, { d: 5 }).$; // { a: 3, b: 2, c: 3, d: 5 }\n   */\n  assign(...objects) {\n    const object = this.$;\n\n    iterate(object && arguments, (o) => {\n      iterate(new Super(o).$, (value, key) => {\n        object[key] = value;\n      });\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Super#average\n   * @public\n   * @param {IterationCallback} [callback = null] - Callback that is passed to {@link Super#sum}.\n   * @returns {Number} Average value.\n   * @description Synonym for object.sum(callback) / object.count.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).average();                         // 2\n   * new Super({ a: 1, b: 2, c: 5 }).average((value) => value * value); // 10\n   */\n  average(callback = null) {\n    validate([callback], ['function||!'], 'Super#average');\n\n    return this.sum(callback) / this.count;\n  }\n\n  /**\n   * @method Super#call\n   * @public\n   * @param {SuperMethod} func - Function to be called with this context.\n   * @param {...*} args - Arguments to be called with.\n   * @returns {*} Return of function call.\n   * @description Synonym for func.call(DObject, ...args);\n   *\n   * @example\n   * new Super({ a: 1 }).call(function (b, c) {\n   *   return this.a + b + c;\n   * }, 2, 3); // 6\n   */\n  call(func, ...args) {\n    validate([func], ['function'], 'Super#call');\n\n    return func.apply(this, args);\n  }\n\n  /**\n   * @method Super#clone\n   * @returns {DWrap} New object.\n   * @description Method assigns properties of the object to an empty one and returns the new one.\n   *\n   * @example\n   * new Super({ a: 1, b: { c: 2 } }).clone().$; // { a: 1, b: { c: 2 } }\n   */\n  clone() {\n    const object = this.$;\n    const clone = cloneSwitcher(object, [object, false]);\n\n    if (clone !== object) {\n      iterate(object, (value, key) => {\n        clone[key] = value;\n      });\n    }\n\n    return new this.constructor(clone);\n  }\n\n  /**\n   * @member Super#count\n   * @type {Number}\n   * @public\n   * @readonly\n   * @description Returns number of own enumerable keys of the object.\n   *\n   * @example\n   * new Super({ a: 1, b: 2 }).count; // 2\n   */\n  get count() {\n    const object = this.$;\n\n    if (!isObject(object)) {\n      return 0;\n    }\n\n    return isArrayLike(object) ? object.length : Object.keys(object).length;\n  }\n\n  /**\n   * @method Super#create\n   * @public\n   * @param {Object} [descriptors] - Descriptors passed to Object.create.\n   * @returns {DWrap} New instance of D-Wrap.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create\n   * @description Synonym for\n   * [Object.create]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create}.\n   *\n   * @example\n   * new Super({}).create({\n   *   a: {\n   *     value: 1,\n   *     enumerable: false,\n   *     writable: true,\n   *     configurable: false\n   *   }\n   * }).$; // { a: 1 }\n   */\n  create(descriptors) {\n    return D(isPrimitive(this.$) ? undefined : Object.create(this.$, descriptors));\n  }\n\n  /**\n   * @method Super#deepAssign\n   * @public\n   * @param {...*} objects - Objects to be assigned to the object.\n   * @returns {DWrap} Returns this.\n   * @description Deep analogue of {@link Super#assign}.\n   *\n   * @example\n   * new Super({ a: 1 }).deepAssign(\n   *   {\n   *     b: {\n   *       c: 2\n   *     }\n   *   },\n   *   {\n   *     a: {\n   *       b: 1\n   *     }\n   *   },\n   *   {\n   *     a: {\n   *       c: {\n   *         d: 1\n   *       }\n   *     },\n   *     b: 2\n   *   },\n   *   null\n   * });\n   * // {\n   * //   a: {\n   * //     b: 1,\n   * //     c: {\n   * //       d: 1\n   * //     }\n   * //   },\n   * //   b: 2,\n   * // }\n   */\n  deepAssign(...objects) {\n    const object = this.$;\n\n    if (isPrimitive(object)) {\n      return this;\n    }\n\n    iterate(arguments, (o) => {\n      deepAssign(object, o);\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Super#deepClone\n   * @public\n   * @returns {DWrap} New instance of DWrap.\n   * @description Deep cloning method. Clones plain objects, arrays, regular expressions and elements, the rest stays the same.\n   *\n   * @example\n   * new Super({ a: 1, b: [2, 3], c: { d: 4 } }).deepClone().$;\n   * // {\n   * //   a: 1,\n   * //   b: [2, 3],\n   * //   c: { d: 4 }\n   * // }\n   */\n  deepClone() {\n    return new this.constructor(deepClone(this.$));\n  }\n\n  /**\n   * @method Super#deepEquals\n   * @public\n   * @param {*} [object] - Object to compare to.\n   * @returns {Boolean} - If the objects are deep equal or not.\n   * @description Method for deep comparison of two objects.\n   *\n   * @example\n   * new Super({ a: 1 }).deepEquals({ a: '1' }); // true\n   * new Super(/1/).deepEquals(/1/);             // true\n   */\n  deepEquals(object = null) {\n    return deepEqual(this.$, object, false);\n  }\n\n  /**\n   * @method Super#deepEvery\n   * @public\n   * @param {DeepIterationCallback} [callback = Boolean] - Called on each iteration.\n   * If returns truthy iteration goes on and if falsey it stops.\n   * @param {Number} [n = Infinity] - Iteration depth.\n   * @returns {Boolean} If all the callback calls returned truthy value.\n   * @description Returns boolean if all the callback calls returned truthy value.\n   * Otherwise false. Deep analogue of {@link Super#every}.\n   *\n   * @example\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepEvery((value) => value < 4); // true\n   * new Super({ a: {}, b: {}, c: {} }).deepEvery(() => false);              // true\n   */\n  deepEvery(callback, n) {\n    if (arguments.length === 1 && !isFunction(callback)) {\n      n = callback;\n      callback = Boolean;\n    } else if (arguments.length === 1) {\n      n = Infinity;\n    } else if (!arguments.length) {\n      n = Infinity;\n      callback = Boolean;\n    }\n\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepEvery');\n\n    n = Number(n);\n\n    return deepEvery(this.$, callback, n, [{ key: null, value: this.$ }]);\n  }\n\n  /**\n   * @method Super#deepFilter\n   * @public\n   * @param {DeepIterationCallback} [callback = Boolean] - Called on each iteration.\n   * If returns truthy the element is included and if falsey it's excluded.\n   * @param {Number} [n = Infinity] - Iteration depth.\n   * @returns {DWrap} New D-Wrap of filtered object.\n   * @description Returns filtered by the callback object. Deep analogue of {@link Super#filter}.\n   *\n   * @example\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFilter((value) => value%2).$;     // { a: 1, b: { d: 3 } }\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFilter((value) => value === 1).$; // { a: 1 }\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFilter((value) => value > 3).$;   // {}\n   */\n  deepFilter(callback, n) {\n    if (arguments.length === 1 && !isFunction(callback)) {\n      n = callback;\n      callback = Boolean;\n    } else if (arguments.length === 1) {\n      n = Infinity;\n    } else if (!arguments.length) {\n      n = Infinity;\n      callback = Boolean;\n    }\n\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepFilter');\n\n    const filtered = deepFilter(this.$, callback, n, [{ key: null, value: this.$ }]);\n\n    return D(isNil(filtered) ? filtered : filtered || {});\n  }\n\n  /**\n   * @method Super#deepFind\n   * @public\n   * @param {DeepIterationCallback} [callback = Boolean] - Called on each iteration.\n   * If returns truthy iteration stops and if falsey it continues.\n   * @param {Number} [n = Infinity] - Iteration depth.\n   * @returns {Tree|null} Tree of { key, value } if something found and null if not.\n   * @description Returns tree of the elements if something found and null if nothing found.\n   * Deep analogue of {@link Super#find}.\n   *\n   * @example\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFind((value) => value === 2);\n   * // [\n   * //   { key: 'c', value: 2 },\n   * //   { key: 'b', value: { c: 2, d: 3 } },\n   * //   { key: null, value: <initial object> }\n   * // ]\n   */\n  deepFind(callback, n) {\n    if (arguments.length === 1 && !isFunction(callback)) {\n      n = callback;\n      callback = Boolean;\n    } else if (arguments.length === 1) {\n      n = Infinity;\n    } else if (!arguments.length) {\n      n = Infinity;\n      callback = Boolean;\n    }\n\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepFind');\n\n    return deepFind(this.$, callback, n, [{ key: null, value: this.$ }]);\n  }\n\n  /**\n   * @method Super#deepForEach\n   * @public\n   * @param {DeepIterationCallback} callback - Called on each iteration.\n   * @param {Number} [n = Infinity] - Iteration depth.\n   * @returns {DWrap} Returns this.\n   * @description Method for iterating over any object. Deep analogue of {@link Super#forEach}.\n   *\n   * @example\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepForEach((value, key, object) => object[key] = value * value).$;\n   * // { a: 1, b: { c: 4, d: 9 } }\n   */\n  deepForEach(callback, n = Infinity) {\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepForEach');\n\n    n = Number(n);\n\n    deepForEach(this.$, callback, n, [{ key: null, value: this.$ }]);\n\n    return this;\n  }\n\n  /**\n   * @method Super#deepForEach\n   * @public\n   * @param {DeepIterationCallback} callback - Called on each iteration.\n   * @param {Number} [n = Infinity] - Iteration depth.\n   * @returns {DWrap} Returns this.\n   * @description Method for iterating over any object. Deep analogue of {@link Super#forEach}.\n   * Unlike {@link Super#deepForEach} the callback is called on every value of every object inside\n   *\n   * @example\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepForEach((value, key, object) => object[key] = value * value).$;\n   * // { a: 1, b: { c: 4, d: 9 } }\n   */\n  deepForEachEntry(callback, n = Infinity) {\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepForEach');\n\n    n = Number(n);\n\n    deepForEachEntry(this.$, callback, n, [{ key: null, value: this.$ }]);\n\n    return this;\n  }\n\n  /**\n   * @method Super#deepFreeze\n   * @public\n   * @returns {DWrap} Returns this.\n   * @description Deep analogue of {@link Super#freeze}.\n   *\n   * @example\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFreeze(); // Super\n   */\n  deepFreeze() {\n    deepFreeze(this.$);\n\n    return this;\n  }\n\n  /**\n   * @method Super#deepMap\n   * @public\n   * @param {DeepIterationCallback} callback - Called on each iteration.\n   * Return value is used for creating a new object.\n   * @param {Number} [n = Infinity] - Iteration depth.\n   * @returns {DWrap} D-Wrap of the new object.\n   * @description Returns a wrap of a new object using the callback. Deep analogue of {@link Super#map}.\n   *\n   * @example\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepMap((value) => value * value).$;\n   * // { a: 1, b: { c: 4, d: 9 } }\n   */\n  deepMap(callback, n = Infinity) {\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepMap');\n\n    n = Number(n);\n\n    return D(deepMap(this.$, callback, n, [{ key: null, value: this.$ }]));\n  }\n\n  /**\n   * @method Super#deepReduce\n   * @public\n   * @param {DeepReduceCallback} callback - Called on each iteration.\n   * Return value is passed to the next callback call.\n   * @param {Number} [n = Infinity] - Iteration depth.\n   * @param {*} [IV = <first value>|undefined] - Initial value.\n   * @returns {*} Modified IV.\n   * @description Returns modified IV. Deep analogue of {@link Super#reduce}.\n   *\n   * @example\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepReduce((sum, value) => sum + value * value, Infinity, 0); // 14\n   */\n  deepReduce(callback, n = Infinity, IV) {\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepReduce');\n\n    n = Number(n);\n\n    const object = this.$;\n    const tree = [{ key: null, value: this.$ }];\n\n    if (arguments.length < 3) {\n      return deepReduce(object, callback, n, false, undefined, tree).IV;\n    }\n\n    return deepReduce(object, callback, n, false, { IV }, tree).IV;\n  }\n\n  /**\n   * @method Super#deepSome\n   * @public\n   * @param {DeepIterationCallback} [callback = Boolean] - Called on each iteration.\n   * If returns truthy iteration stops and if falsey it continues.\n   * @param {Number} [n = Infinity] - Iteration depth.\n   * @returns {Boolean} If all the callback calls returned truthy value.\n   * @description Returns true if some of the callback calls returned truthy value.\n   * Otherwise false. Deep analogue of {@link Super#some}.\n   *\n   * @example\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepSome((value) => value > 4); // false\n   * new Super({ a: {}, b: {}, c: {} }).deepSome(() => true);               // false\n   */\n  deepSome(callback, n) {\n    if (arguments.length === 1 && !isFunction(callback)) {\n      n = callback;\n      callback = Boolean;\n    } else if (arguments.length === 1) {\n      n = Infinity;\n    } else if (!arguments.length) {\n      n = Infinity;\n      callback = Boolean;\n    }\n\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepSome');\n\n    n = Number(n);\n\n    return deepSome(this.$, callback, n, [{ key: null, value: this.$ }]);\n  }\n\n  /**\n   * @method Super#deepStrictEquals\n   * @public\n   * @param {*} [object] - Object to compare to.\n   * @returns {Boolean} - If the objects are deep strict equal or not.\n   * @description Method for deep strict comparison of two objects.\n   *\n   * @example\n   * new Super({ a: 1 }).deepStrictEquals({ a: '1' }); // false\n   * new Super(/1/).deepStrictEquals(/1/);             // true\n   */\n  deepStrictEquals(object = null) {\n    return deepEqual(this.$, object, true);\n  }\n\n  /**\n   * @method Super#define\n   * @param {String|Object} property - Either a string of a property or a descriptors object.\n   * @param {Object} [descriptor] - If a property parameter is a string this has to be a property descriptor.\n   * @returns {DWrap} Returns this.\n   * @description Synonym for both\n   * [Object.defineProperty]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty}\n   * and\n   * [Object.defineProperties]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties}.\n   *\n   * @example\n   * new Super({}).define('a', {\n   *   value: 1,\n   *   enumerable: false,\n   *   writable: true,\n   *   configurable: false\n   * }).$; // { a: 1 }\n   * new Super({}).define({\n   *   a: {\n   *     value: 1,\n   *     enumerable: false,\n   *     writable: true,\n   *     configurable: false\n   *   }\n   * }).$; // { a: 1 }\n   */\n  define(property, descriptor) {\n    if (arguments.length >= 2) {\n      property = { [property]: descriptor };\n    }\n\n    property = new Super(property).$;\n\n    if (isObject(this.$)) {\n      Object.defineProperties(this.$, property);\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Super#delete\n   * @public\n   * @param {...String} props - List of properties to delete.\n   * @returns {DWrap} Returns this.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/delete\n   * @description Synonym for multiple\n   * [\"delete\" operator]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/delete}.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).delete('c', 'a').$; // { b: 2 }\n   */\n  delete(...props) {\n    const object = this.$;\n\n    iterate(object && props, (property) => {\n      delete object[property];\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Super#equals\n   * @public\n   * @param {*} [object] - Object to compare.\n   * @returns {Boolean} If the objects are equal or not.\n   * @description Returns true if objects are equal using '==' operator and false if not. NaNs are considered to be equal.\n   *\n   * @example\n   * new Super(3).equals('3');   // true\n   * new Super(NaN).equals(NaN); // true\n   */\n  equals(object) {\n    const o = this.$;\n\n    object = new Super(object).$;\n\n    /* eslint eqeqeq: 0 */\n    return o == object || (isNaN(o) && isNaN(object));\n  }\n\n  /**\n   * @method Super#every\n   * @public\n   * @param {IterationCallback} [callback = Boolean] - Called on each iteration.\n   * If returns truthy iteration goes on and if falsey it stops.\n   * @returns {Boolean} If all the callback calls returned truthy value.\n   * @description Returns boolean if all the callback calls returned truthy value.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).every((value) => value < 4); // true\n   * new Super({}).every(() => false);                            // true\n   */\n  every(callback = Boolean) {\n    validate([callback], ['function'], 'Super#every');\n\n    return iterate(this.$, (value, key, object) => {\n      if (!callback(value, key, object)) {\n        return false;\n      }\n    }) !== false;\n  }\n\n  /**\n   * @method Super#except\n   * @public\n   * @param {...String} [props] - Props to filter.\n   * @returns {DWrap} New D-Wrap of filtered object.\n   * @description Returns filter by the props object.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).except('a', 'b').$; // { c: 3 }\n   * new Super(null).except('a').$;                      // {}\n   */\n  except(...props) {\n    return this.filter((value, key) => props.indexOf(key) === -1);\n  }\n\n  /**\n   * @method Super#filter\n   * @public\n   * @param {IterationCallback} [callback = Boolean] - Called on each iteration.\n   * If returns truthy the element is included and if falsey it's excluded.\n   * @returns {DWrap} New D-Wrap of filtered object.\n   * @description Returns filtered by the callback object.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).filter((value) => value%2).$; // { a: 1, c: 3 }\n   * new Super(null).filter((value) => value%2).$;                 // null\n   */\n  filter(callback = Boolean) {\n    validate([callback], ['function'], 'Super#filter');\n\n    const object = this.$;\n    const array = isArrayLike(object);\n\n    /* eslint no-nested-ternary: 0 */\n    const o = array ? [] : isNil(object) ? object : {};\n\n    iterate(object, (value, key) => {\n      if (callback(value, key, object)) {\n        if (array) {\n          o.push(value);\n        } else {\n          o[key] = value;\n        }\n      }\n    });\n\n    return D(o);\n  }\n\n  /**\n   * @method Super#find\n   * @public\n   * @param {IterationCallback} [callback = Boolean] - Called on each iteration.\n   * If returns truthy iteration stops and if falsey it continues.\n   * @returns {{ key: Key, value: * }|null} { key, value } if found and null if not.\n   * @description Returns found { key, value } if something found and null if nothing found.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).find((value) => value === 2); // { key: 'b', value: 2 }\n   * new Super([1, 2, 3]).find((value) => value === 2);            // { key: 1, value: 2 }\n   */\n  find(callback) {\n    validate([callback], ['function'], 'Super#find');\n\n    return iterate(this.$, (value, key, object) => {\n      if (callback(value, key, object)) {\n        return { key, value };\n      }\n    }) || null;\n  }\n\n  /**\n   * @method Super#forEach\n   * @public\n   * @param {IterationCallback} callback - Called on each iteration.\n   * @returns {DWrap} Returns this.\n   * @description Method for iterating over any object.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).forEach((value, key, object) => {\n   *   object[key] = value * value;\n   * }).$; // { a: 1, b: { c: 4, d: 5 } }\n   */\n  forEach(callback) {\n    validate([callback], ['function'], 'Super#forEach');\n\n    iterate(this.$, (value, key, object) => {\n      callback(value, key, object);\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Super#freeze\n   * @public\n   * @returns {DWrap} Returns this.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\n   * @description Synonym for\n   * [Object.freeze]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze}.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).freeze(); // Super\n   */\n  freeze() {\n    Object.freeze(this.$);\n\n    return this;\n  }\n\n  /**\n   * @method Super#get\n   * @public\n   * @param {String|Object.<String, Function>} property - Either a string of a property or a getters object.\n   * @param {Function} [getter] - If a property parameter is a string this has to be a getter function.\n   * @returns {DWrap} Returns this.\n   * @description Method for defining getters.\n   *\n   * @example\n   * const object1 = new Super({}).get('a', () => 1).$;\n   * object1.a; // 1\n   *\n   * const object2 = new Super({}).get({\n   *   a: () => 2\n   * }).$;\n   * object2.a; // 2\n   */\n  get(property, getter) {\n    if (arguments.length >= 2) {\n      property = { [property]: getter };\n    }\n\n    const object = this.$;\n\n    iterate(isObject(object) && new Super(property).$, (getter, property) => {\n      Object.defineProperty(object, property, { get: getter });\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Super#has\n   * @public\n   * @param {String|*} key - Property to check.\n   * @returns {Boolean} Returns true if the object has the key and false if not.\n   * @see https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/in\n   * @description Synonym for\n   * [\"in\" operator]{@link https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/in}.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).has('b'); // true\n   */\n  has(key) {\n    const object = this.$;\n\n    if (!isObject(object)) {\n      return false;\n    }\n\n    return key in object;\n  }\n\n  /**\n   * @method Super#hasOwn\n   * @public\n   * @param {String|*} key - Property to check.\n   * @returns {Boolean} Returns true if the object has its own key and false if not.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\n   * @description Synonym for\n   * [Object#hasOwnProperty]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty}.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).hasOwn('b');              // true\n   * new Super({ a: 1, b: 2, c: 3 }).hasOwn('hasOwnProperty'); // false\n   */\n  hasOwn(key) {\n    const object = this.$;\n\n    if (!isObject(object)) {\n      return false;\n    }\n\n    return {}.hasOwnProperty.call(object, key);\n  }\n\n  /**\n   * @method Super#instanceof\n   * @public\n   * @param {Function} constructor - Constructor to check.\n   * @returns {Boolean} If the object is an instance of constructor.\n   * @see https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/instanceof\n   * @description Synonym for\n   * [\"instanceof\" operator]{@link https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/instanceof}.\n   */\n  instanceof(constructor) {\n    return this.$ instanceof constructor;\n  }\n\n  /**\n   * @method Super#isFrozen\n   * @public\n   * @returns {Boolean} If the object is frozen.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n   * @description Synonym for\n   * [Object.isFrozen]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen}.\n   *\n   * @example\n   * new Super({}).freeze().isFrozen(); // true\n   */\n  isFrozen() {\n    return Object.isFrozen(this.$);\n  }\n\n  /**\n   * @method Super#json\n   * @public\n   * @param {JSONCallback|String[]} [replacer] - See the link.\n   * @param {String|Number} [space] - See the link.\n   * @returns {String} JSON string.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\n   * @description Synonym for\n   * [JSON.stringify]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify}.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).json(); // '{\"a\":1,\"b\":2,\"c\":3}'\n   * new Super({ a: 1, b: 2, c: 3 }).json('    ');\n   * // {\n   * //     \"a\": 1,\n   * //     \"b\": 2,\n   * //     \"c\": 3\n   * // }\n   * new Super({ a: 1, b: 2, c: 3 }).json((key, value) => {\n   *   if (typeof value === 'number') {\n   *     return value%2 ? key + value0 : undefined;\n   *   }\n   *\n   *   return value;\n   * }, 2);\n   * // {\n   * //   \"a\": \"a1\",\n   * //   \"c\": \"c3\"\n   * // }\n   */\n  json(replacer, space) {\n    if (arguments.length === 1 && !isFunction(replacer) && !isArray(replacer)) {\n      [].unshift.call(arguments, null);\n    }\n\n    [].unshift.call(arguments, this.$);\n\n    return JSON.stringify.apply(JSON, arguments);\n  }\n\n  /**\n   * @method Super#keyOf\n   * @public\n   * @param {*} value - Value to find.\n   * @returns {String|Number|null} A key or an index if found and null if not.\n   * @description Method for finding equal to the argument value in the object. NaNs are considered to be equal.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).keyOf(2);   // 'b'\n   * new Super({ a: 1, b: 2, c: 3 }).keyOf('2'); // 'b'\n   */\n  keyOf(value) {\n    const key = iterate(this.$, (val, key) => {\n      if (val == value || (isNaN(val) && isNaN(value))) {\n        return key;\n      }\n    });\n\n    return isUndefined(key) ? null : key;\n  }\n\n  /**\n   * @method Super#keyOfStrict\n   * @public\n   * @param {*} value - Value to find.\n   * @returns {String|Number|null} A key or an index if found and null if not.\n   * @description Method for finding strict equal to the argument value in the object. NaNs are considered to be equal.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).keyOfStrict(2);   // 'b'\n   * new Super({ a: 1, b: 2, c: 3 }).keyOfStrict('2'); // 'b'\n   */\n  keyOfStrict(value) {\n    const key = iterate(this.$, (val, key) => {\n      if (val === value || (isNaN(val) && isNaN(value))) {\n        return key;\n      }\n    });\n\n    return isUndefined(key) ? null : key;\n  }\n\n  /**\n   * @method Super#keys\n   * @public\n   * @returns {DWrap} A wrap of the keys array.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\n   * @description Synonym for\n   * [Object.keys]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/keys}.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).keys().$; // ['a', 'b', 'c']\n   * new Super(null).keys().$;                 // []\n   */\n  keys() {\n    const object = this.$;\n\n    return D(isObject(object) ? Object.keys(object) : []);\n  }\n\n  /**\n   * @method Super#map\n   * @public\n   * @param {IterationCallback} callback - Called on each iteration.\n   * Return value is used for creating a new object.\n   * @returns {DWrap} D-Wrap of the new object.\n   * @description Returns a wrap of a new object using the callback.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).map((value) => value * 2).$; // { a: 2, b: 4, c: 6 }\n   * new Super(null).map((value) => value * 2).$;                 // null\n   */\n  map(callback) {\n    validate([callback], ['function'], 'Super#map');\n\n    const object = this.$;\n    const o = isArrayLike(object) ? [] : isNull(object) ? null : {};\n\n    iterate(object, (value, key) => {\n      o[key] = callback(value, key, object);\n    });\n\n    return D(o);\n  }\n\n  /**\n   * @method Super#max\n   * @public\n   * @param {IterationCallback} callback - Called on each iteration.\n   * Return value is used for comparison with the previous max value.\n   * @returns {{key: Key, value: Number}} Object with max value and key of the max value.\n   * @description Method for finding max value in the object.\n   * If no callback is present comparison is between values of the object.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).max();                     // { key: 'c', value: 3 }\n   * new Super({ a: 1, b: 2, c: 3 }).max((value) => 4 - value); // { key: 'a', value: 3 }\n   * new Super({ a: 'a', b: 'b', c: 'c' }).max();               // { key: null, value: -Infinity }\n   */\n  max(callback = null) {\n    validate([callback], ['function||!'], 'Super#max');\n\n    return this.object((max, value, key, object) => {\n      const val = Number(callback ? callback(value, key, object) : value);\n\n      if (val > max.value) {\n        max.key = key;\n        max.value = val;\n      }\n    }, { key: null, value: -Infinity }).$;\n  }\n\n  /**\n   * @method Super#min\n   * @public\n   * @param {IterationCallback} callback - Called on each iteration.\n   * Return value is used for comparison with the previous min value.\n   * @returns {{key: Key, value: Number}} Object with min value and key of the min value.\n   * @description Method for finding min value in the object.\n   * If no callback is present comparison is between values of the object.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).min();                     // { key: 'a', value: 1 }\n   * new Super({ a: 1, b: 2, c: 3 }).min((value) => 4 - value); // { key: 'c', value: 1 }\n   * new Super({ a: 'a', b: 'b', c: 'c' }).min();               // { key: null, value: Infinity }\n   */\n  min(callback = null) {\n    validate([callback], ['function||!'], 'Super#min');\n\n    return this.object((min, value, key, object) => {\n      const val = Number(callback ? callback(value, key, object) : value);\n\n      if (val < min.value) {\n        min.key = key;\n        min.value = val;\n      }\n    }, { key: null, value: Infinity }).$;\n  }\n\n  /**\n   * @method Super#object\n   * @public\n   * @param {ObjectCallback} callback - Called on each iteration.\n   * @param {Object|*} [object = {}] - Object that is passed to the callback.\n   * @returns {DWrap} Wrap of the new object.\n   * @description Type of {@link Super#reduce}.\n   * The object is passed as an argument into the callback. The output is this object.\n   *\n   * @example\n   * new Super({ a: 1, b: 2 }).object((object, value, key) => {\n   *   object[key] = value;\n   *   object[key + key] = value * 2;\n   * }).$; // { a: 1, aa: 2, b: 2, bb: 4 }\n   */\n  object(callback, object = {}) {\n    validate([callback], ['function'], 'Super#object');\n\n    iterate(this.$, (value, key, obj) => {\n      callback(object, value, key, obj);\n    });\n\n    return D(object);\n  }\n\n  /**\n   * @method Super#prop\n   * @public\n   * @param {String|Object.<String, *>} property - Either a string of a property or an assigned object.\n   * @param {*} [value] - If a property parameter is a string\n   * this has to be an assigned value if it's present.\n   * @returns {DWrap|*} Returns this if it's a setter or a value if getter.\n   * @description Method for getting and setting properties.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).prop('a');              // 1\n   * new Super({ a: 1, b: 2, c: 3 }).prop('a', 7).$;         // { a: 7, b: 2, c: 3 }\n   * new Super({ a: 1, b: 2, c: 3 }).prop({ a: 7, b: 8 }).$; // { a: 7, b: 8, c: 3 }\n   */\n  prop(property, value) {\n    if (arguments.length <= 1 && isString(property)) {\n      return this.$ ? this.$[property] : undefined;\n    }\n\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    return this.assign(property);\n  }\n\n  /**\n   * @method Super#propertyDescriptor\n   * @public\n   * @param {String} property - Property of the object.\n   * @returns {Object|undefined} Property descriptor.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\n   * @descriptor Synonym for\n   * [Object.getOwnPropertyDescriptor]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor}.\n   *\n   * @example\n   * new Super({ a: 1 }).propertyDescriptor('a');\n   * // {\n   * //   value: 1,\n   * //   enumerable: true,\n   * //   writable: true,\n   * //   configurable: true\n   * // }\n   */\n  propertyDescriptor(property) {\n    const object = this.$;\n\n    return isObject(object) ? Object.getOwnPropertyDescriptor(object, property) : undefined;\n  }\n\n  /**\n   * @method Super#propertyNames\n   * @public\n   * @returns {DWrap} D-Wrap of the names array.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\n   * @descriptor Synonym for\n   * [Object.getOwnPropertyNames]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames}.\n   *\n   * @example\n   * new Super({ a: 1, b: 2 }).define('c', { value: 3 }).$; // ['a', 'b', 'c']\n   */\n  propertyNames() {\n    const object = this.$;\n\n    return D(isObject(object) ? Object.getOwnPropertyNames(object) : []);\n  }\n\n  /**\n   * @method Super#propertySymbols\n   * @public\n   * @returns {DWrap} D-Wrap of the names array.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\n   * @descriptor Synonym for\n   * [Object.getOwnPropertySymbols]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols}.\n   *\n   * @example\n   * new Super({ [Symbol('foo')]: 1 }).define(Symbol('bar'), { value: 2 }).$; // [Symbol('foo'), Symbol('bar')]\n   */\n  propertySymbols() {\n    const object = this.$;\n\n    return D(isObject(object) ? Object.getOwnPropertySymbols(object) : []);\n  }\n\n  /**\n   * @method Super#proto\n   * @public\n   * @param {*} [proto] - If it's present it's set as a prototype to the object.\n   * @returns {DWrap} In getter mode returns wrap of the prototype and in setter mode returns this.\n   * @description Synonym for both\n   * [Object.getPrototypeOf]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf}\n   * and\n   * [Object.setPrototypeOf]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf}.\n   */\n  proto(proto) {\n    const object = this.$;\n    const isContextObject = !isNil(object);\n\n    if (arguments.length) {\n      if (isContextObject && (isObject(proto) || isNull(proto))) {\n        Object.setPrototypeOf(object, proto);\n      }\n\n      return this;\n    }\n\n    return isContextObject ? new Super(Object.getPrototypeOf(object)) : new Super();\n  }\n\n  /**\n   * @method Super#reduce\n   * @public\n   * @param {ReduceCallback} callback - Called on each iteration.\n   * Return value is passed to the next callback call.\n   * @param {*} [IV = <first value>|undefined] - Initial value.\n   * @returns {*} Modified IV.\n   * @description Returns modified IV. If the second argument is not present first value in the object is taken\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).reduce((sum, value) => sum + value * value, 0); // 14\n   */\n  reduce(callback, IV) {\n    validate([callback], ['function'], 'Super#reduce');\n\n    const object = this.$;\n\n    let startKey;\n\n    if (arguments.length === 1) {\n      iterate(object, (value, key) => {\n        startKey = key;\n        IV = value;\n\n        return true;\n      });\n    }\n\n    iterate(object, (value, key) => {\n      if (key !== startKey) {\n        IV = callback(IV, value, key, object);\n      }\n    });\n\n    return IV;\n  }\n\n  /**\n   * @method Super#set\n   * @public\n   * @param {String|Object.<String, Function>} property - Either a string of a property or a setters object.\n   * @param {Function} [setter] - If a property parameter is a string this has to be a setter function.\n   * @returns {DWrap} Returns this.\n   * @description Method for defining setters.\n   *\n   * @example\n   * const object = new Super({})\n   *   .get('public', function () {\n   *     return this._private;\n   *   })\n   *   .set('public', function (value) {\n   *     if (typeof value === 'number') {\n   *       this._private = value;\n   *     }\n   *   });\n   * object.prop('public', '1').$; // { public: undefined }\n   * object.prop('public', 1).$;   // { public: 1, _private: 1 }\n   *\n   * new Super({}).set({\n   *   public(value) {\n   *     if (typeof value === 'number') {\n   *       this._private = value;\n   *     }\n   *   }\n   * });\n   */\n  set(property, setter) {\n    if (arguments.length >= 2) {\n      property = { [property]: setter };\n    }\n\n    const object = this.$;\n\n    iterate(isObject(object) && new Super(property).$, (setter, property) => {\n      Object.defineProperty(object, property, { set: setter });\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Super#some\n   * @public\n   * @param {IterationCallback} [callback = Boolean] - Called on each iteration.\n   * If returns truthy iteration stops and if falsey it continues.\n   * @returns {Boolean} If all the callback calls returned truthy value.\n   * @description Returns true if some of the callback calls returned truthy value. Otherwise false.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).some((value) => value > 4); // false\n   * new Super({}).some(() => true);                             // false\n   */\n  some(callback = Boolean) {\n    validate([callback], ['function'], 'Super#some');\n\n    return iterate(this.$, (value, key, object) => {\n      if (callback(value, key, object)) {\n        return true;\n      }\n    }) || false;\n  }\n\n  /**\n   * @method Super#strictEquals\n   * @public\n   * @param {*} [object] - Object to compare.\n   * @returns {Boolean} If the objects are equal or not.\n   * @description Returns true if objects are equal using '===' operator and false if not.\n   * NaNs are considered to be strict equal.\n   *\n   * @example\n   * new Super(3).strictEquals('3');   // false\n   * new Super(NaN).strictEquals(NaN); // true\n   */\n  strictEquals(object) {\n    const o = this.$;\n\n    object = new Super(object).$;\n\n    return o === object || (isNaN(o) && isNaN(object));\n  }\n\n  /**\n   * @method Super#sum\n   * @public\n   * @param {IterationCallback} [callback = null] - Called on each iteration.\n   * @returns {Number} Sum.\n   * @description Type of {@link Super#reduce}.\n   * If the callback is present it's used for summing. If not the value is used.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).sum();                         // 6\n   * new Super({ a: 1, b: 2, c: 3 }).sum((value) => value * value); // 14\n   */\n  sum(callback = null) {\n    validate([callback], ['function||!'], 'Super#sum');\n\n    return this.reduce((sum, value, key, object) => (\n      sum + Number(callback ? callback(value, key, object) : value)\n    ), 0);\n  }\n\n  toJSON() {\n    return this.$;\n  }\n\n  /**\n   * @member Super#toStringTag\n   * @type {String}\n   * @public\n   * @readonly\n   * @description Returns toString tag of the object.\n   *\n   * @example\n   * new Super({}).toStringTag; // 'Object'\n   * new Super([]).toStringTag; // 'Array'\n   * new Super(1).toStringTag;  // 'Number'\n   */\n  get toStringTag() {\n    return toStringTag(this.$);\n  }\n\n  /**\n   * @member Super#type\n   * @type {String}\n   * @public\n   * @readonly\n   * @description Synonym for\n   * [\"typeof\" operator]{@link https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/instanceof}..\n   *\n   * @example\n   * new Super({}).type;   // 'object'\n   * new Super(1).type;    // 'number'\n   * new Super('1').type;  // 'string'\n   * new Super(true).type; // 'boolean'\n   */\n  get type() {\n    return typeof this.$;\n  }\n\n  /**\n   * @method Super#value\n   * @public\n   * @param {String|Object.<String, *>} property - Either a string of a property or a values object.\n   * @param {Object.<String, *>} [value] - If a property parameter is a string this has to be a value to be set.\n   * @returns {DWrap} Returns this.\n   * @description Method for defining non-enumerable, non-writable, non-configurable values.\n   * Synonym for object.define(property, { value: value }).\n   *\n   * @example\n   * new Super({}).value('a', 1).$; // { a: 1 }\n   * new Super({}).value({\n   *   a: 1\n   * }).$;                          // { a: 1 }\n   */\n  value(property, value) {\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    const object = this.$;\n\n    iterate(isObject(object) && new Super(property).$, (value, property) => {\n      Object.defineProperty(object, property, { value });\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Super#values\n   * @public\n   * @returns {DWrap} A wrap of the values array.\n   * @description Returns D-Wrap of the values array.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).values().$; // [1, 2, 3]\n   * new Super(null).values().$;                 // []\n   */\n  values() {\n    const array = [];\n\n    iterate(this.$, (value) => {\n      array.push(value);\n    });\n\n    return D(array);\n  }\n\n  /**\n   * @method Super#word\n   * @public\n   * @param {IterationCallback} callback - Called on each iteration.\n   * @returns {String} Concatenated string.\n   * @description Type of {@link Super#reduce}.\n   * If the callback is present it's used for concatenating. If not the value is used.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).word();                         // '123'\n   * new Super({ a: 1, b: 2, c: 3 }).word((value) => value + value); // '112233'\n   */\n  word(callback = null) {\n    validate([callback], ['function||!'], 'Super#word');\n\n    return this.reduce((word, value, key, object) => (\n      word + String(callback ? callback(value, key, object) : value)\n    ), '');\n  }\n}\n\ndefineProperties(Super.prototype, {\n  [Symbol.toStringTag]: 'Super'\n});\n\n/**\n * @function deepAssign\n * @private\n * @param {*} target - Object to assign properties to.\n * @param {*} object - Object to assign properties from.\n * @returns {void}\n */\nfunction deepAssign(target, object) {\n  iterate(object, (value, key) => {\n    if (isPrimitive(target[key]) || !{}.hasOwnProperty.call(target, key)) {\n      target[key] = deepClone(value);\n\n      return;\n    }\n\n    if (!isPrimitive(target[key])) {\n      deepAssign(target[key], value);\n    }\n  });\n}\n\n/**\n * @function deepClone\n * @private\n * @param {*} object - Object to clone.\n * @description Does the deep cloning.\n */\nfunction deepClone(object) {\n  const clone = cloneSwitcher(object, [object, true]);\n\n  if (clone !== object) {\n    iterate(object, (value, key) => {\n      clone[key] = deepClone(value);\n    });\n  }\n\n  return clone;\n}\n\n/**\n * @function deepEqual\n * @private\n * @param {*} o1 - First object to compare.\n * @param {*} o2 - Second object to compare.\n * @param {Boolean} strict - If comparison should be strict or not.\n * @returns {Boolean} - If the object are deep equal or not.\n */\nfunction deepEqual(o1, o2, strict) {\n  if (o1 === o2) {\n    return true;\n  }\n\n  if (isNaN(o1) && isNaN(o2) && isPrimitive(o1) && isPrimitive(o2)) {\n    return true;\n  }\n\n  if (isNaN(o1) || isNaN(o2)) {\n    return false;\n  }\n\n  if (isPrimitive(o1) || isPrimitive(o2)) {\n    return strict ? o1 === o2 : o1 == o2;\n  }\n\n  if (isDate(o1) && isDate(o2)) {\n    return o1.getTime() === o2.getTime();\n  }\n\n  if (isDate(o1) || isDate(o2)) {\n    return false;\n  }\n\n  if (isRegExp(o1) && isRegExp(o2)) {\n    return o1.source === o2.source &&\n      o1.toString().match(/[gimuy]*$/)[0] === o2.toString().match(/[gimuy]*$/)[0] &&\n      o1.lastIndex === o2.lastIndex;\n  }\n\n  if (isRegExp(o1) || isRegExp(o2)) {\n    return false;\n  }\n\n  if ((!isPlainObject(o1) && !isArray(o1)) || (!isPlainObject(o2) && !isArray(o2))) {\n    return false;\n  }\n\n  const p1 = Object.getPrototypeOf(o1);\n  const p2 = Object.getPrototypeOf(o1);\n\n  if (Object.keys(o1).length !== Object.keys(o2).length) {\n    return false;\n  }\n\n  if (p1 && p2 && (toStringTag(p1.constructor) !== toStringTag(p2.constructor))) {\n    return false;\n  }\n\n  return iterate(o1, (value, key) => {\n    if (!(key in o2) || !deepEqual(value, o2[key], strict)) {\n      return false;\n    }\n  }) !== false;\n}\n\n/**\n * @function deepEvery\n * @private\n * @param {*} object - Object to iterate over.\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\n * If returns truthy the iteration goes on and if not it stops.\n * @param {Number} n - Depth of iteration.\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\n * @returns {Boolean} - If all the callback calls returned truthy value.\n */\nfunction deepEvery(object, callback, n, tree) {\n  const end = n === 1;\n\n  return iterate(object, (value, key, object) => {\n    const newTree = [{ key, value }].concat(tree);\n\n    if (\n      end || isPrimitive(value)\n        ? !callback(value, key, object, newTree)\n        : !deepEvery(value, callback, n - 1, newTree)\n    ) {\n      return false;\n    }\n  }) !== false;\n}\n\n/**\n * @function deepFilter\n * @private\n * @param {*} object - Object to iterate over.\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\n * If returns truthy the element is included in the output and if not it's excluded.\n * @param {Number} n - Depth of iteration.\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\n * @returns {*} Filtered object.\n */\nfunction deepFilter(object, callback, n, tree) {\n  const array = isArrayLike(object);\n  const nul = isNil(object);\n  const o = array ? [] : nul ? object : {};\n  const end = n === 1;\n\n  iterate(object, (value, key, object) => {\n    const newTree = [{ key, value }].concat(tree);\n\n    if ((end || isPrimitive(value)) && callback(value, key, object, newTree)) {\n      if (array) {\n        o.push(value);\n      } else {\n        o[key] = value;\n      }\n\n      return;\n    }\n\n    if (!end) {\n      const filtered = deepFilter(value, callback, n - 1, newTree);\n\n      if (filtered) {\n        if (array) {\n          o.push(filtered);\n        } else {\n          o[key] = filtered;\n        }\n      }\n    }\n  });\n\n  if (array) {\n    return o.length ? o : undefined;\n  }\n\n  if (!nul) {\n    return Object.keys(o).length ? o : undefined;\n  }\n\n  return o;\n}\n\n/**\n * @function deepFind\n * @private\n * @param {*} object - Object to iterate over.\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\n * If returns truthy the iteration stops and if not it continues.\n * @param {Number} n - Depth of iteration.\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\n * @returns {Tree|null} - If found the whole tree is returned and if not it's null what's returned.\n */\nfunction deepFind(object, callback, n, tree) {\n  const end = n === 1;\n\n  return iterate(object, (value, key, object) => {\n    const newTree = [{ key, value }].concat(tree);\n\n    if (end || isPrimitive(value)) {\n      if (callback(value, key, object, newTree)) {\n        return newTree;\n      }\n\n      return;\n    }\n\n    const result = deepFind(value, callback, n - 1, newTree);\n\n    if (result) {\n      return result;\n    }\n  }) || null;\n}\n\n/**\n * @function deepForEach\n * @private\n * @param {*} object - Object to iterate over.\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\n * @param {Number} n - Depth of iteration.\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\n * @returns {void}\n */\nfunction deepForEach(object, callback, n, tree) {\n  const end = n === 1;\n\n  iterate(object, (value, key, object) => {\n    const newTree = [{ key, value }].concat(tree);\n\n    if (end || isPrimitive(value)) {\n      callback(value, key, object, newTree);\n    } else {\n      deepForEach(value, callback, n - 1, newTree);\n    }\n  });\n}\n\n/**\n * @function deepForEachEntry\n * @private\n * @param {*} object - Object to iterate over.\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\n * @param {Number} n - Depth of iteration.\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\n * @returns {void}\n */\nfunction deepForEachEntry(object, callback, n, tree) {\n  const end = n === 1;\n\n  iterate(object, (value, key, object) => {\n    const newTree = [{ key, value }].concat(tree);\n\n    callback(value, key, object, newTree);\n\n    if (!end && !isPrimitive(value)) {\n      deepForEachEntry(value, callback, n - 1, newTree);\n    }\n  });\n}\n\n/**\n * @function deepFreeze\n * @private\n * @param {*} object - Object to freeze.\n * @returns {void}\n */\nfunction deepFreeze(object) {\n  Object.freeze(object);\n  iterate(object, deepFreeze);\n}\n\n/**\n * @function deepMap\n * @private\n * @param {*} object - Object to iterate over.\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\n * Returned value is used to create to new object.\n * @param {Number} n - Depth of iteration.\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\n * @returns {*} New object.\n */\nfunction deepMap(object, callback, n, tree) {\n  const o = isArrayLike(object) ? [] : isNil(object) ? object : {};\n  const end = n === 1;\n\n  iterate(object, (value, key, object) => {\n    const newTree = [{ key, value }].concat(tree);\n\n    o[key] = end || isPrimitive(value)\n      ? callback(value, key, object, newTree)\n      : deepMap(value, callback, n - 1, newTree);\n  });\n\n  return o;\n}\n\n/**\n * @function deepReduce\n * @private\n * @param {*} object - Object to iterate over.\n * @param {DeepReduceCallback} callback - Callback that is called on every element.\n * Returned value is used to create to new object.\n * @param {Number} n - Depth of iteration.\n * @param {Boolean} start - If callback was called already or not.\n * @param {{ IV: * }|undefined} IV - If callback was called already or not.\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\n * @returns {{ IV: * }} Transformed IV.\n */\nfunction deepReduce(object, callback, n, start, IV, tree) {\n  const end = n === 1;\n\n  iterate(object, (value, key, object) => {\n    if (!IV && (end || isPrimitive(value)) && !start) {\n      IV = { IV: value };\n      start = true;\n\n      return;\n    }\n\n    const newTree = [{ key, value }].concat(tree);\n\n    IV = end || isPrimitive(value)\n      ? { IV: callback(IV.IV, value, key, object, newTree) }\n      : deepReduce(value, callback, n - 1, start, IV, newTree);\n  });\n\n  return IV;\n}\n\n/**\n * @function deepSome\n * @private\n * @param {*} object - Object to iterate over.\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\n * If returns truthy the iteration stops and if not it continues.\n * @param {Number} n - Depth of iteration.\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\n * @returns {Boolean} - If some of the callback calls returned truthy value.\n */\nfunction deepSome(object, callback, n, tree) {\n  const end = n === 1;\n\n  return iterate(object, (value, key, object) => {\n    const newTree = [{ key, value }].concat(tree);\n\n    if (\n      end || isPrimitive(value)\n        ? callback(value, key, object, newTree)\n        : deepSome(value, callback, n - 1, newTree)\n    ) {\n      return true;\n    }\n  }) || false;\n}\n\nconstructors[0].push({\n  check: () => true,\n  cls: Super\n});\n\nexport { Super };\n","/**\n * @module Promise\n * @private\n * @mixin\n * @description Exports Promise class.\n */\n\nimport { isFunction, defineProperties, Symbol } from './helpers';\n\n/**\n * @callback onFulfilledOrRejected\n * @public\n * @param {*} value - Promise value.\n * @param {Boolean} success - If the previous promise is fulfilled it's true and false if rejected.\n */\n\n/**\n * @callback onRejected\n * @public\n * @param {Error|*} err - Promise error.\n */\n\n/**\n * @callback onFulfilled\n * @public\n * @param {*} value - Promise value.\n */\n\nconst secret = {};\nconst iterator = Symbol.iterator;\n\n/**\n * @class Promise\n * @public\n * @param {Function} executor - Function that takes two arguments: resolve and reject functions.\n * Call the resolve function when you need to fulfill the promise and call the reject one\n * when you need to reject it.\n * @returns {Promise} Instance of Promise.\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\n * @description Class with almost identical API to\n * [ES6 Promise]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise}.\n * There is a couple differences: set Promise.onError to a function with which you want to\n * subscribe to a promise error and set Promise.onUnhandledRejection to a function with which\n * you want to subscribe to an unhandled error\n * (defaults to console.error.bind(console, '%s %o', 'Uncaught (in promise)')).\n */\nclass Promise {\n  static onError = null;\n  static onUnhandledRejection = console.error.bind(console, '%s %o', 'Uncaught (in promise)');\n\n  constructor(executor) {\n    if (!isFunction(executor)) {\n      throw new TypeError(`Promise resolver ${ {}.toString.call(executor) } is not a function`);\n    }\n\n    let hiddenStatus;\n    let hiddenValue;\n\n    const\tonFulfill = [];\n    const onReject = [];\n    const realPromise = this;\n    const hiddenPromise = {\n      handled: false,\n      get status() {\n        return hiddenStatus;\n      },\n      set status(value) {\n        hiddenStatus = value;\n        realPromise.status = value;\n      },\n      get value() {\n        return hiddenValue;\n      },\n      set value(val) {\n        hiddenValue = val;\n        realPromise.value = val;\n      }\n    };\n\n    hiddenPromise.status = 'pending';\n    hiddenPromise.value = undefined;\n\n    /**\n     * @typedef {Object} hiddenPromise\n     * @private\n     * @property {Boolean|Object} handled - If the promise is handled or not.\n     * @property {'pending'|'fulfilled'|'rejected'} status - Status of the promise.\n     * @property {*} value - Value of the promise.\n     */\n\n    /**\n     * @member {Function} hiddenPromise#handle\n     * @private\n     * @param {('reject'|'resolve')} event - Type of the event to handle.\n     * @param {Function} handler - Handler itself.\n     * @param {Function} resolve - Resolve function.\n     * @param {Function} reject - Reject function.\n     * @param {Object} secret - Secret.\n     * @description Private method for handling promises.\n     */\n\n    /**\n     * @member {hiddenPromise} Promise#$$\n     * @protected\n     */\n    defineProperties(this.$$ = {}, {\n      'get/set handled': {\n        get() {\n          return hiddenPromise.handled;\n        },\n        set(key) {\n          if (key === secret) {\n            hiddenPromise.handled = true;\n          }\n        }\n      },\n      handle(status, f, resolve, reject, key) {\n        if (key === secret) {\n          const proxy = isFunction(f) ? (value) => {\n            try {\n              resolve(f(value));\n            } catch (err) {\n              reject(err);\n            }\n          } : null;\n\n          if (status === 'resolve') {\n            onFulfill.push(proxy || ((value) => resolve(value)));\n          } else if (status === 'reject') {\n            onReject.push(proxy || ((err) => reject(err)));\n          }\n        }\n      },\n      'get status'() {\n        return hiddenPromise.status;\n      },\n      'get value'() {\n        return hiddenPromise.value;\n      }\n    });\n\n    try {\n      executor(resolve, reject);\n    } catch (err) {\n      reject(err);\n    }\n\n    function reject(err) {\n      if (hiddenPromise.status === 'pending') {\n        hiddenPromise.status = 'rejected';\n        hiddenPromise.value = err;\n\n        for (let i = 0, length = onReject.length; i < length; i++) {\n          hiddenPromise.handled = true;\n\n          onReject[i](err);\n        }\n\n        const {\n          onUnhandledRejection,\n          onError\n        } = Promise;\n\n        if (isFunction(onError)) {\n          onError(err);\n        }\n\n        setTimeout(() => {\n          if (!hiddenPromise.handled && isFunction(onUnhandledRejection)) {\n            onUnhandledRejection(err);\n          }\n        }, 1);\n      }\n    }\n\n    function resolve(value) {\n      if (hiddenPromise.status === 'pending') {\n        if (value && isFunction(value.then)) {\n          return value.then((value) => {\n            resolve(value);\n          }, (err) => {\n            reject(err);\n          });\n        }\n\n        hiddenPromise.status = 'fulfilled';\n        hiddenPromise.value = value;\n\n        for (let i = 0, length = onFulfill.length; i < length; i++) {\n          hiddenPromise.handled = true;\n\n          onFulfill[i](value);\n        }\n      }\n    }\n  }\n\n  /**\n   * @method Promise.all\n   * @param {(Array|Iterable).<Promise|*>} iterable - Iterable object (like array) of promises\n   * or any values.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\n   */\n  static all(iterable) {\n    const array = [];\n\n    let toResolve = 0;\n\n    if (iterable[iterator]) {\n      iterable = iterable[iterator]();\n\n      return new Promise((resolve, reject) => {\n        let next;\n        let i = 0;\n\n        while (!(next = iterable.next()).done) {\n          const promise = Promise.resolve(next.value);\n\n          toResolve++;\n\n          ((i) => {\n            promise.then((value) => {\n              toResolve--;\n              array[i] = value;\n\n              setTimeout(() => {\n                if (next.done && !toResolve) {\n                  resolve(array);\n                }\n              }, 1);\n            }, reject);\n          })(i++);\n        }\n\n        if (!i) {\n          return Promise.resolve([]);\n        }\n      });\n    }\n\n    const length = iterable.length;\n\n    if (!length) {\n      return Promise.resolve([]);\n    }\n\n    toResolve = length;\n\n    return new Promise((resolve, reject) => {\n      for (let i = 0; i < length; i++) {\n        const promise = Promise.resolve(iterable[i]);\n\n        promise.then((value) => {\n          toResolve--;\n          array[i] = value;\n\n          if (!toResolve) {\n            resolve(array);\n          }\n        }, reject);\n      }\n    });\n  }\n\n  /**\n   * @method Promise.race\n   * @param {(Array|Iterable).<Promise|*>} iterable - Iterable object (like array) of promises\n   * or any values.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\n   */\n  static race(iterable) {\n    if (iterable[iterator]) {\n      iterable = iterable[iterator]();\n\n      return new Promise((resolve, reject) => {\n        let next;\n\n        while (!(next = iterable.next()).done) {\n          next.value.then(resolve, reject);\n        }\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      for (let i = 0, length = iterable.length; i < length; i++) {\n        iterable[i].then(resolve, reject);\n      }\n    });\n  }\n\n  /**\n   * @method Promise.reject\n   * @param {*} value - Value to reject.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject\n   */\n  static reject(value) {\n    return new Promise((resolve, reject) => {\n      reject(value);\n    });\n  }\n\n  /**\n   * @method Promise.resolve\n   * @param {Promise|Thenable|*} value - Promise, thenable or any value to resolve.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\n   */\n  static resolve(value) {\n    if (value && isFunction(value.then)) {\n      return value;\n    }\n\n    return new Promise((resolve) => {\n      resolve(value);\n    });\n  }\n\n  abort() {}\n\n  /**\n   * @method Promise#catch\n   * @param {onRejected} onRejected - onRejected callback.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\n   */\n  catch(onRejected) {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * @method Promise#finally\n   * @public\n   * @param {onFulfilledOrRejected} onFulfilledOrRejected - onFulfilledOrRejected callback.\n   * @returns {Promise}\n   * @description Method for catching both fulfilled and rejected promises.\n   *\n   * @example\n   * spinner.show();\n   * fetchData()\n   *   .then((data) => {\n   *     // do something with data\n   *   })\n   *   .catch((err) => {\n   *     // handle error somehow\n   *   })\n   *   .finally(() => {\n   *     spinner.hide();\n   *   });\n   */\n  finally(onFulfilledOrRejected) {\n    const isFunc = isFunction(onFulfilledOrRejected);\n\n    return this.then((value) => (\n      Promise\n        .resolve(\n          isFunc\n            ? onFulfilledOrRejected(value, true)\n            : 0\n        )\n        .then(() => value)\n    ), (err) => (\n      Promise\n        .resolve(\n          isFunc\n            ? onFulfilledOrRejected(err, false)\n            : 0\n        )\n        .then(() => Promise.reject(err))\n    ));\n  }\n\n  /**\n   * @method Promise#then\n   * @param {onFulfilled} [onFulfilled] - onFulfilled callback.\n   * @param {onRejected} [onRejected] - onRejected callback.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\n   */\n  then(onFulfilled, onRejected) {\n    const promise = this.$$;\n\n    if (promise.status === 'pending') {\n      return new Promise((resolve, reject) => {\n        promise.handle('reject', onRejected, resolve, reject, secret);\n        promise.handle('resolve', onFulfilled, resolve, reject, secret);\n      });\n    }\n\n    promise.handled = secret;\n\n    const { value } = promise;\n\n    let method;\n    let handler;\n\n    if (promise.status === 'fulfilled') {\n      method = 'resolve';\n      handler = onFulfilled;\n    } else {\n      method = 'reject';\n      handler = onRejected;\n    }\n\n    if (!isFunction(handler)) {\n      return Promise[method](value);\n    }\n\n    try {\n      return Promise.resolve(handler(value));\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n}\n\ndefineProperties(Promise.prototype, {\n  [Symbol.toStringTag]: 'Promise'\n});\n\nexport { Promise };\n","/**\n * @module Func\n * @private\n * @mixin\n * @description Exports Func class.\n */\n\nimport { Super } from './Super';\nimport { Promise } from './Promise';\nimport { constructors } from './constants';\nimport { isFunction, validate, toArray, Symbol, defineProperties, iterate } from './helpers';\n\n/**\n * @callback BeforeMiddleware\n * @param {Array} args - Previous arguments.\n * @param {Func} func - This function.\n * @returns {Array} - New arguments.\n */\n\n/**\n * @callback AfterMiddleware\n * @param {*} returnValue - Previous return value.\n * @param {Func} func - This function.\n * @returns {*} - New return value.\n */\n\n/**\n * @class Func\n * @extends Super\n * @public\n * @param {Function} [func = function () {}] - Function to wrap.\n * @returns {Func} Instance of Func.\n * @description A wrap of a function.\n *\n * @example\n * const func = new Func(Math.max);\n *\n * func(1, 4, -2, 5); // 5\n */\nclass Func extends Super {\n  constructor(func = () => {}) {\n    super();\n\n    function proxy() {\n      if (++proxy.$$.called < proxy.$$.canBeCalled) {\n        const { before, after, sync, contextLocked } = proxy.$$;\n        let { context, args } = proxy.$$;\n        let ret;\n\n        context = contextLocked ? context : context || this;\n        args = args.concat(toArray(arguments));\n\n        if (sync) {\n          iterate(before, (middleware) => {\n            args = middleware.call(context, toArray(args), proxy);\n          });\n\n          ret = func.apply(context, toArray(args));\n\n          iterate(after, (middleware) => {\n            ret = middleware.call(context, ret, proxy);\n          });\n\n          return ret;\n        }\n\n        let promise = Promise.resolve(args);\n\n        iterate(before, (middleware) => {\n          promise = promise.then((args) => middleware.call(context, toArray(args), proxy));\n        });\n\n        promise = promise.then((args) => func.apply(context, toArray(args)));\n\n        iterate(after, (middleware) => {\n          promise = promise.then((ret) => middleware.call(context, ret, proxy));\n        });\n\n        return promise;\n      }\n    }\n\n    /**\n     * @member {Object} Func#$$\n     * @type {Object}\n     * @protected\n     * @property {Array} after - After middleware array.\n     * @property {Array} args - Locked and bound arguments.\n     * @property {Array} argsLocked - Locked arguments.\n     * @property {Array} before - Before middleware array.\n     * @property {Number} called - How many times the function was called.\n     * @property {Number} canBeCalled - How many times the function can be actually called.\n     * @property {*} context - Locked or bound context.\n     * @property {Boolean} contextLocked - Is context locked or not.\n     * @property {Boolean} sync - Is function synchronous or not.\n     * @description Config parameters.\n     */\n    Object.defineProperty(proxy, '$$', {\n      value: {\n        after: [],\n        args: [],\n        argsLocked: [],\n        before: [],\n        called: 0,\n        canBeCalled: Infinity,\n        context: null,\n        contextLocked: false,\n        sync: true\n      }\n    });\n\n    /**\n     * @member {Function} Func#$\n     * @type {Function}\n     * @public\n     * @description Original function.\n     */\n    Object.defineProperty(proxy, '$', { value: func });\n    Object.setPrototypeOf(proxy, Func.prototype);\n\n    return proxy;\n  }\n\n  /**\n   * @method Func#after\n   * @public\n   * @param {AfterMiddleware} middleware - After middleware.\n   * @param {Boolean|*} [afterAll = true] - Boolean parameter where to put middleware.\n   * Truthy parameter stands for \"to the end\" and falsey for \"to the beginning\".\n   * @returns {Func} Returns this.\n   * @description Adds after middleware.\n   *\n   * @example\n   * const func = new Func((a) => a + 1)\n   *   .after((result) => result * result);\n   *\n   * func(4);  // 25\n   * func(-4); // 9\n   */\n  after(middleware, afterAll = true) {\n    validate([middleware], ['function'], 'Func#after');\n\n    const { after } = this.$$;\n\n    if (afterAll) {\n      after.push(middleware);\n    } else {\n      after.unshift(middleware);\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Func#apply\n   * @public\n   * @param {*} [context] - Context to call with.\n   * @param {(Array|Arguments)} [args] - Arguments to call with.\n   * @returns {*} Return of function call.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\n   * @description Synonym for\n   * [Function#apply]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Function/apply}.\n   */\n  apply(context, args) {\n    return (() => {}).apply.apply(this, arguments);\n  }\n\n  /**\n   * @method Func#async\n   * @public\n   * @param {Boolean|*} [condition] - If the function should be synchronous or not.\n   * @returns {Func} Returns this.\n   * @description If the function should be synchronous or not.\n   *\n   * @example\n   * const func = new Func((a) => a + 1).async();\n   *\n   * func(4).then((result) => {\n   *   console.log(result); // 5\n   * });\n   */\n  async(condition = true) {\n    this.$$.sync = !condition;\n\n    return this;\n  }\n\n  /**\n   * @method Func#before\n   * @public\n   * @param {BeforeMiddleware} middleware - Before middleware.\n   * @param {Boolean|*} [beforeAll = true] - Boolean parameter where to put middleware.\n   * Truthy parameter stands for \"to the beginning\" and falsey for \"to the end\".\n   * @returns {Func} Returns this.\n   * @description Adds before middleware.\n   *\n   * @example\n   * const func = new Func((a) => a + 1)\n   *   .before(([arg]) => [arg * arg]);\n   *\n   * func(4); // 17\n   * func(3); // 10\n   */\n  before(middleware, beforeAll = true) {\n    validate([middleware], ['function'], 'Func#before');\n\n    const { before } = this.$$;\n\n    if (beforeAll) {\n      before.unshift(middleware);\n    } else {\n      before.push(middleware);\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Func#bind\n   * @public\n   * @param {*} context - Context to bind.\n   * @param {...(Array|Arguments|*)} args - Arguments to bind.\n   * @returns {Func} Returns this.\n   * @description Composition of {@link Func#bindContext} and {@link Func#bindArgs}.\n   *\n   * @example\n   * const func = new Func(function (a, b) {\n   *   return this.a + a + b;\n   * }).bind({ a: 2 }, 1);\n   *\n   * func(1); // 4\n   * func(3); // 6\n   */\n  bind(context, ...args) {\n    return this\n      .bindContext(context)\n      .bindArgs(args);\n  }\n\n  /**\n   * @method Func#bindArgs\n   * @public\n   * @param {(Array|Arguments)} args - Arguments to bind.\n   * @returns {Func} Returns this.\n   * @description Binds arguments in addition to already locked and bound ones.\n   *\n   * @example\n   * const func = new Func((...args) => {\n   *   let sum = 0;\n   *\n   *   for (let i = 0; i < args.length; i++) {\n   *     sum += args[i];\n   *   }\n   *\n   *   return sum;\n   * });\n   *\n   * func(1, 2, 3); // 6\n   *\n   * func.bindArgs([4]);\n   *\n   * func(1, 2, 3); // 10\n   *\n   * func.bindArgs([5]);\n   *\n   * func(1, 2, 3); // 15\n   */\n  bindArgs(args) {\n    const func = this.$$;\n\n    func.args = func.args.concat(toArray(args));\n\n    return this;\n  }\n\n  /**\n   * @method Func#bindContext\n   * @public\n   * @param {*} context - Context to bind.\n   * @returns {Func} Returns this.\n   * @description Bind new context if it's not already locked.\n   *\n   * @example\n   * const func = new Func(function () {\n   *   return this.a;\n   * }).bindContext({ a: 1 });\n   *\n   * func(); // 1\n   *\n   * func.bindContext({ a: 2 });\n   *\n   * func(); // 2\n   */\n  bindContext(context) {\n    const func = this.$$;\n\n    if (!func.contextLocked) {\n      func.context = context;\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Func#call\n   * @public\n   * @param {*} [context] - Context to call with.\n   * @param {...*} [args] - Arguments to call with.\n   * @returns {*} Return of function call.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Function/call\n   * @description Synonym for\n   * [Function#call]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Function/call}.\n   */\n  call(context, ...args) {\n    return (() => {}).call.apply(this, arguments);\n  }\n\n  /**\n   * @member {Number} Func#called\n   * @public\n   * @readonly\n   * @description Returns how many times the function was called.\n   *\n   * @example\n   * const func = new Func((a) => a + 1);\n   *\n   * func();\n   * func();\n   *\n   * func.called // 2\n   */\n  get called() {\n    return this.$$.called;\n  }\n\n  /**\n   * @method Func#canBeCalled\n   * @public\n   * @param {Number} times - Number of maximum times the function is called (middlewares are also taken for a count).\n   * @returns {Func} Returns this.\n   * @description Method for limiting call times of function.\n   *\n   * @example\n   * const func = new Func((a) => a + 1)\n   *   .canBeCalled(1);\n   *\n   * func(1); // 2\n   * func(1); // undefined\n   */\n  canBeCalled(times) {\n    this.$$.canBeCalled = times;\n\n    return this;\n  }\n\n  /**\n   * @method Func#limitArgsTo\n   * @public\n   * @param {Number} number - Number of arguments to limit to.\n   * @returns {Func} Returns this.\n   * @description Built-in before middleware for limiting number of arguments\n   * that is put to the end of before middlewares.\n   *\n   * @example\n   * const func = new Func((a, b) => [a, b]);\n   *\n   * func(1, 2); // [1, 2]\n   *\n   * func.limitArgsTo(1);\n   *\n   * func(1, 2); // [1, undefined]\n   */\n  limitArgsTo(number) {\n    return this.before((args) => args.slice(0, number), false);\n  }\n\n  /**\n   * @method Func#lock\n   * @public\n   * @param {*} context - Context to lock.\n   * @param {(Array|Arguments|*)} args - Arguments to lock.\n   * @returns {Func} Returns this.\n   * @description Composition of {@link Func#lockContext} and {@link Func#lockArgs}.\n   *\n   * @example\n   * const func = new Func(function (a, b) {\n   *   return this.a + a + b;\n   * }).lock({ a: 2 }, [1]);\n   *\n   * func(1); // 4\n   * func(3); // 6\n   */\n  lock(context, args) {\n    return this\n      .lockContext(context)\n      .lockArgs(args);\n  }\n\n  /**\n   * @method Func#lockArgs\n   * @public\n   * @param {(Array|Arguments|*)} args - Arguments to lock.\n   * @returns {Func} Returns this.\n   * @description Erases bound arguments and adds new arguments to already locked ones.\n   *\n   * @example\n   * const func = new Func((...args) => {\n   *   let sum = 0;\n   *\n   *   for (let i = 0; i < args.length; i++) {\n   *     sum += args[i];\n   *   }\n   *\n   *   return sum;\n   * });\n   *\n   * func(1, 2, 3); // 6\n   *\n   * func.lockArgs([4]);\n   *\n   * func(1, 2, 3); // 10\n   *\n   * func.bindArgs([6, 7]);\n   * func.lockArgs([5]);\n   *\n   * func(1, 2, 3); // 15\n   */\n  lockArgs(args) {\n    const func = this.$$;\n\n    func.args = func.argsLocked = func.argsLocked.concat(toArray(args));\n\n    return this;\n  }\n\n  /**\n   * @method Func#lockContext\n   * @public\n   * @param {*} context - Context to lock.\n   * @returns {Func} Returns this.\n   * @description Locks context if it's not already locked.\n   *\n   * @example\n   * const func = new Func(function () {\n   *   return this.a;\n   * }).lockContext({ a: 1 });\n   *\n   * func(); // 1\n   *\n   * func.lockContext({ a: 2 });\n   *\n   * func(); // 1\n   */\n  lockContext(context) {\n    const func = this.$$;\n\n    if (!func.contextLocked) {\n      func.context = context;\n      func.contextLocked = true;\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Func#timing\n   * @public\n   * @param {String} mark - Argument that is passed to console.time() and console.timeEnd().\n   * By default name of the original function, or if it's not present, 'anonymous' is used.\n   * @returns {Func} Returns this.\n   * @description Built-in before and after middlewares for noting calling time.\n   * In case of asynchronous functions it notes time between calling function and resolving or rejecting the result.\n   *\n   * @example\n   * const func = new Func((a) => a + 1)\n   *   .timing('plus 1');\n   *\n   * func(2); // plus 1: 0.010ms\n   *\n   * const async = new Func(() => new Promise(() => {\n   *     setTimeout(resolve, 1000);\n   *   }))\n   *   .async()\n   *   .timing();\n   *\n   * async();\n   * // After 1 second...\n   * // anonymous: 1000.010ms\n   */\n  timing(mark) {\n    mark = arguments.length ? String(mark) : this.$.name || 'anonymous';\n\n    this.before((args) => {\n      console.time(mark);\n\n      return args;\n    }, false);\n\n    this.after((ret) => {\n      console.timeEnd(mark);\n\n      return ret;\n    }, false);\n\n    return this;\n  }\n\n  toString() {\n    return (() => {}).toString.call(this.$);\n  }\n\n  /**\n   * @method Func#unbind\n   * @public\n   * @returns {Func} Returns this.\n   * @description Composition of {@link Func#unbindContext} and {@link Func#unbindArgs}.\n   *\n   * @example\n   * const func = new Func(function (a) {\n   *   return this.foo + ' & ' +  a;\n   * }).bind({ foo: 2 }, 1);\n   *\n   * func(); // '2 & 1'\n   *\n   * func.unbind();\n   *\n   * func(); // 'undefined & undefined'\n   */\n  unbind() {\n    return this\n      .unbindContext()\n      .unbindArgs();\n  }\n\n  /**\n   * @method Func#unbindArgs\n   * @public\n   * @returns {Func} Returns this.\n   * @description Erases all bound arguments.\n   *\n   * @example\n   * const func = new Func((...args) => {\n   *   let sum = 0;\n   *\n   *   for (let i = 0; i < args.length; i++) {\n   *     sum += args[i];\n   *   }\n   *\n   *   return sum;\n   * }).bindArgs([4, 5]);\n   *\n   * func(1, 2, 3); // 15\n   *\n   * func.unbindArgs();\n   *\n   * func(1, 2, 3); // 6\n   */\n  unbindArgs() {\n    const func = this.$$;\n\n    func.args = func.argsLocked;\n\n    return this;\n  }\n\n  /**\n   * @method Func#unbindContext\n   * @public\n   * @returns {Func} Returns this.\n   * @description Erases context if it's not locked.\n   *\n   * @example\n   * const func = new Func(function () {\n   *   return this.foo;\n   * }).bindContext({ foo: 1 });\n   *\n   * func(); // 1\n   *\n   * func.unbindArgs();\n   *\n   * func(); // undefined\n   */\n  unbindContext() {\n    const func = this.$$;\n\n    if (!func.contextLocked) {\n      func.context = null;\n    }\n\n    return this;\n  }\n}\n\ndefineProperties(Func.prototype, {\n  [Symbol.toStringTag]: 'Func'\n});\n\nconstructors[1].push({\n  check: isFunction,\n  cls: Func\n});\n\n/**\n * @function method\n * @public\n * @param {String} method - Method to call.\n * @param {(Array|Arguments|*)} args - Arguments to call the method with.\n * @returns {Function} Function that calls stated method with given arguments.\n * @description Function that returns the function\n * that calls stated method of its first argument with given arguments.\n *\n * @example\n * [1.2345, 2.789, 3.14].map(method('toFixed', [2])); // ['1.23', '2.79', '3.14']\n */\nfunction method(method, args = []) {\n  return (x) => x[method].apply(x, toArray(args));\n}\n\n/**\n * @function noop\n * @public\n * @returns {void}\n * @description Empty function.\n */\nfunction noop() {}\n\n/**\n * @function prop\n * @public\n * @param {String} prop - Property to return.\n * @returns {Function} Function that returns given property of its first argument.\n * @description Function that return the function that returns given property of its first argument.\n *\n * @example\n * ['foo', '12', '7890'].map(prop('length')); // [3, 2, 4]\n */\nfunction prop(prop) {\n  return ({ [prop]: value }) => value;\n}\n\n/**\n * @function self\n * @public\n * @returns {*} First argument itself.\n * @description Function that returns the first argument.\n *\n * @example\n * [1, 2].map(self);                     // [1, 2]\n * [1, 3, NaN, 0, 7, null].filter(self); // [1, 3, 7]\n */\nfunction self() {\n  return arguments[0];\n}\n\nexport { Func, method, noop, prop, self };\n","/**\n * @module Num\n * @private\n * @mixin\n * @description Exports Num class.\n */\n\nimport { Super } from './Super';\nimport { Func } from './Func';\nimport { Promise } from './Promise';\nimport { constructors } from './constants';\nimport {\n  isNumber, isFinite, toArray,\n  defineProperties, validate, Symbol\n} from './helpers';\n\nconst toRadian = Math.PI / 180;\nconst toDegree = 180 / Math.PI;\nconst ln2 = Math.LN2;\nconst ln10 = Math.LN10;\n\n/**\n * @class Num\n * @extends Super\n * @public\n * @param {Number} [number = 0] - A number to wrap.\n * @returns {Num} Instance of Num.\n * @description Wrap of a number.\n *\n * @example\n * const num = new Num(1);\n */\nclass Num extends Super {\n  constructor(number = 0) {\n    super(+number);\n\n    /**\n     * @member Num#$\n     * @type {Number}\n     * @public\n     * @description Original number.\n     */\n  }\n\n  /**\n   * @member Num#abs\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/abs\n   * @description Synonym for\n   * [Math.abs]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/abs}.\n   *\n   * @example\n   * new Num(1).abs;  // 1\n   * new Num(-1).abs; // 1\n   */\n  get abs() {\n    return Math.abs(this.$);\n  }\n\n  /**\n   * @method Num#acos\n   * @public\n   * @param {Boolean|*} [toDegrees = false] If it is truthy the return value is transformed into degrees.\n   * @returns {Number} Arccosine of the number.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/acos\n   * @description Synonym for\n   * [Math.acos]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/acos}.\n   */\n  acos(toDegrees) {\n    return (toDegrees ? toDegree : 1) * Math.acos(this.$);\n  }\n\n  /**\n   * @member Num#acosh\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh\n   * @description Synonym for\n   * [Math.acosh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh}.\n   */\n  get acosh() {\n    const number = this.$;\n\n    return Math.log(number + Math.sqrt(number * number - 1));\n  }\n\n  /**\n   * @member Num#asinh\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh\n   * @description Synonym for\n   * [Math.asinh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh}.\n   */\n  get asinh() {\n    const number = this.$;\n\n    return Math.log(number + Math.sqrt(number * number + 1));\n  }\n\n  /**\n   * @method Num#asin\n   * @public\n   * @param {Boolean|*} [toDegrees = false] If it is truthy the return value is transformed into degrees.\n   * @returns {Number} Arcsine of the number.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/asin\n   * @description Synonym for\n   * [Math.asin]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/asin}.\n   */\n  asin(toDegrees) {\n    return (toDegrees ? toDegree : 1) * Math.asin(this.$);\n  }\n\n  /**\n   * @method Num#atan\n   * @public\n   * @param {Boolean|*} [toDegrees = false] If it is truthy the return value is transformed into degrees.\n   * @returns {Number} Arcsine of the number.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/atan\n   * @description Synonym for\n   * [Math.atan]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/atan}.\n   */\n  atan(toDegrees) {\n    return (toDegrees ? toDegree : 1) * Math.atan(this.$);\n  }\n\n  /**\n   * @member Num#atanh\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh\n   * @description Synonym for\n   * [Math.atanh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh}.\n   */\n  get atanh() {\n    const number = this.$;\n\n    return Math.log((1 + number) / (1 - number)) / 2;\n  }\n\n  /**\n   * @member Num#cbrt\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt\n   * @description Synonym for\n   * [Math.cbrt]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt}.\n   */\n  get cbrt() {\n    const cbrt = Math.pow(Math.abs(this.$), 1 / 3);\n\n    return this.$ > 0 ? cbrt : -cbrt;\n  }\n\n  /**\n   * @member Num#ceil\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil\n   * @description Synonym for\n   * [Math.ceil]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil}.\n   *\n   * @example\n   * new Num(1.1).ceil;  // 2\n   * new Num(-1.1).ceil; // -1\n   */\n  get ceil() {\n    return Math.ceil(this.$);\n  }\n\n  /**\n   * @method Num#cos\n   * @public\n   * @param {Boolean|*} [asDegrees = false] If it is truthy the number is treated as a degree value.\n   * @returns {Number} Cosine of the number.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cos\n   * @description Synonym for\n   * [Math.cos]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cos}.\n   */\n  cos(asDegrees) {\n    return Math.cos((asDegrees ? toRadian : 1) * this.$);\n  }\n\n  /**\n   * @member Num#cosh\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh\n   * @description Synonym for\n   * [Math.cosh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh}.\n   */\n  get cosh() {\n    const exp = this.exp;\n\n    return (exp + 1 / exp) / 2;\n  }\n\n  /**\n   * @member Num#cube\n   * @type {Number}\n   * @public\n   * @readonly\n   * @description Cube of the number.\n   *\n   * @example\n   * new Num(2).cube;  // 8\n   * new Num(-3).ceil; // -27\n   */\n  get cube() {\n    return this.$ * this.$ * this.$;\n  }\n\n  /**\n   * @member Num#exp\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/exp\n   * @description Synonym for\n   * [Math.exp]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/exp}.\n   */\n  get exp() {\n    return Math.exp(this.$);\n  }\n\n  /**\n   * @member Num#floor\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\n   * @description Synonym for\n   * [Math.floor]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/floor}.\n   *\n   * @example\n   * new Num(1.1).floor;  // 1\n   * new Num(-1.1).floor; // -2\n   */\n  get floor() {\n    return Math.floor(this.$);\n  }\n\n  /**\n   * @method Num#interval\n   * @public\n   * @param {Function} func - Function that is called every <number> milliseconds.\n   * @param {Array} [args] - Arguments passed to the function.\n   * @returns {Function} Function that aborts the interval. The context of the function (if it's not already bound)\n   * is the object with the abort method.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/setInterval\n   * @description Analogue of the\n   * [setInterval]{@link https://developer.mozilla.org/en/docs/Web/API/WindowTimers/setInterval}.\n   *\n   * @example\n   * const times = 0;\n   * new Num(50).interval(function () {\n   *   if (++times === 10) {\n   *     this.abort();\n   *   }\n   * });\n   */\n  interval(func, args = []) {\n    validate([func], ['function'], 'Num#interval');\n\n    func = new Func(func).bindContext({ abort });\n    args = toArray(args);\n\n    const number = this.$;\n\n    let aborted;\n    let timeout = setTimeout(function interval() {\n      if (!aborted) {\n        func.apply(null, args);\n\n        if (!aborted) {\n          timeout = setTimeout(interval, number);\n        }\n      }\n    }, 0);\n\n    return abort;\n\n    function abort() {\n      aborted = true;\n\n      return clearTimeout(timeout);\n    }\n  }\n\n  /**\n   * @member Num#ln\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log\n   * @description Synonym for\n   * [Math.log]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log}.\n   */\n  get ln() {\n    return Math.log(this.$);\n  }\n\n  /**\n   * @method Num#log\n   * @public\n   * @param {Number} number - Number to get logarithm of.\n   * @returns {Number} Logarithm of the argument number to the number base.\n   * @description Returns the logarithm of the argument number to the number base.\n   *\n   * @example\n   * new Num(2).log(16);  // 4\n   * new Num(3).log(243); // 5\n   */\n  log(number) {\n    return Math.log(number) / Math.log(this.$);\n  }\n\n  /**\n   * @member Num#log2\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log2\n   * @description Synonym for\n   * [Math.log2]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log2}.\n   */\n  get log2() {\n    return this.ln / ln2;\n  }\n\n  /**\n   * @member Num#log10\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log10\n   * @description Synonym for\n   * [Math.log10]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log10}.\n   */\n  get log10() {\n    return this.ln / ln10;\n  }\n\n  /**\n   * @method Num#pow\n   * @public\n   * @param {Number} power - Power the number should be raised to.\n   * @returns {Number} The number to the <power> power.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/pow\n   * @description Synonym for\n   * [Math.pow]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/pow}.\n   *\n   * @example\n   * new Num(4).pow(.5); // 2\n   * new Num(3).pow(2);  // 9\n   */\n  pow(power) {\n    return Math.pow(this.$, power);\n  }\n\n  /**\n   * @method Num#root\n   * @public\n   * @param {Number} power - Power the number should be raised to.\n   * @returns {Number} The <power> root of the number.\n   * @description Synonym for number.pow(1 / power);\n   *\n   * @example\n   * new Num(4).root(2);   // 0.5\n   * new Num(243).root(5); // 3\n   */\n  root(power) {\n    return Math.pow(this.$, 1 / power);\n  }\n\n  /**\n   * @member Num#round\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/round\n   * @description Synonym for\n   * [Math.round]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/round}.\n   *\n   * @example\n   * new Num(1.1).floor;  // 1\n   * new Num(-1.1).floor; // -1\n   * new Num(1.5).floor;  // 2\n   */\n  get round() {\n    return Math.round(this.$);\n  }\n\n  /**\n   * @member Num#sign\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n   * @description Synonym for\n   * [Math.sign]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sign}.\n   */\n  get sign() {\n    const number = this.$;\n\n    if (!number) {\n      return number;\n    }\n\n    return number > 0 ? 1 : -1;\n  }\n\n  /**\n   * @method Num#sin\n   * @public\n   * @param {Boolean|*} [asDegrees = false] If it is truthy the number is treated as a degree value.\n   * @returns {Number} Sine of the number.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sin\n   * @description Synonym for\n   * [Math.sin]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sin}.\n   */\n  sin(asDegrees) {\n    return Math.sin((asDegrees ? toRadian : 1) * this.$);\n  }\n\n  /**\n   * @member Num#sinh\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh\n   * @description Synonym for\n   * [Math.sinh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh}.\n   */\n  get sinh() {\n    const exp = this.exp;\n\n    return (exp - 1 / exp) / 2;\n  }\n\n  /**\n   * @member Num#sq\n   * @type {Number}\n   * @public\n   * @readonly\n   * @description The square of the number.\n   *\n   * @example\n   * new Num(2).sq;  // 4\n   * new Num(-3).sq; // 9\n   */\n  get sq() {\n    return this.$ * this.$;\n  }\n\n  /**\n   * @member Num#sqrt\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt\n   * @description Synonym for\n   * [Math.sqrt]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt}.\n   */\n  get sqrt() {\n    return Math.sqrt(this.$);\n  }\n\n  /**\n   * @method Num#tan\n   * @public\n   * @param {Boolean|*} [asDegrees = false] If it is truthy the number is treated as a degree value.\n   * @returns {Number} Tangent of the number.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/tan\n   * @description Synonym for\n   * [Math.tan]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/tan}.\n   */\n  tan(asDegrees) {\n    return Math.tan((asDegrees ? toRadian : 1) * this.$);\n  }\n\n  /**\n   * @member Num#tanh\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh\n   * @description Synonym for\n   * [Math.tanh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh}.\n   */\n  get tanh() {\n    const number = this.$;\n\n    if (!isFinite(number)) {\n      return this.sign;\n    }\n\n    const exp = Math.exp(2 * number);\n\n    return (exp - 1) / (exp + 1);\n  }\n\n  /**\n   * @method Num#timeout\n   * @public\n   * @param {*} [value] - Value to be resolved by the promise.\n   * @returns {Promise} Promise that could be aborted.\n   * @see https://developer.mozilla.org/en/docs/Web/API/WindowTimers/setTimeout\n   * @description Promise-based analogue of\n   * [setTimeout]{@link https://developer.mozilla.org/en/docs/Web/API/WindowTimers/setTimeout}.\n   *\n   * @example\n   * new Num(50).timeout('resolved').then((value) => {\n   *   console.log(value); // 'resolved'\n   * });\n   *\n   * const promise = new Num(50).timeout();\n   * promise.abort();\n   */\n  timeout(value) {\n    let timeout;\n    let reject;\n\n    const promise = new Promise((resolve, rej) => {\n      reject = rej;\n      timeout = setTimeout(resolve, this.$, value);\n    });\n\n    promise.abort = function abort() {\n      clearTimeout(timeout);\n\n      reject(new Error('Timeout was aborted'));\n\n      return this;\n    };\n\n    return promise;\n  }\n\n  /**\n   * @method Num#toBase\n   * @public\n   * @param {Number} [base = 10] - Base that the number should inverted to.\n   * @returns {String} A string representation of the number in <base> base.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toString\n   * @description Synonym for\n   * [Number#toString]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toString}.\n   *\n   * @example\n   * new Num(4).toBase(2); // 100\n   * new Num(3).toBase();  // 3\n   */\n  toBase(base = 10) {\n    return this.$.toString(base);\n  }\n\n  /**\n   * @method Num#toExponential\n   * @public\n   * @param {Number} [fractionDigits] - See the link.\n   * @returns {String} A string representation of the number in the exponential format.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential\n   * @description Synonym for\n   * [Number#toExponential]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential}.\n   */\n  toExponential(fractionDigits) {\n    return this.$.toExponential(fractionDigits);\n  }\n\n  /**\n   * @method Num#toFixed\n   * @public\n   * @param {Number} [digits = 0] - See the link.\n   * @returns {String} Fixed-point formatted number.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed\n   * @description Synonym for\n   * [Number#toFixed]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed}.\n   */\n  toFixed(digits) {\n    return this.$.toFixed(digits);\n  }\n\n  /**\n   * @method Num#toPrecision\n   * @public\n   * @param {Number} [precision] - See the link.\n   * @returns {String} A string representation of the number to the specified precision.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision\n   * @description Synonym for\n   * [Number#toPrecision]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision}.\n   */\n  toPrecision(precision) {\n    return this.$.toPrecision(precision);\n  }\n\n  valueOf() {\n    return Number(this.$);\n  }\n}\n\ndefineProperties(Num.prototype, {\n  [Symbol.toStringTag]: 'Num'\n});\n\nconstructors[1].push({\n  check: isNumber,\n  cls: Num\n});\n\n/**\n * @function rand\n * @public\n * @param {Number} [start = 0] - Start of the range.\n * @param {Number} [end = 1] - End of the range.\n * @returns {Number} Random number.\n * @description Returns a random number in the range specified by the arguments.\n *\n * @example\n * rand(1, 5); // 2.315\n * rand(1, 5); // 4.356763\n */\nfunction rand(start = 0, end = 1) {\n  return start + (end - start) * Math.random();\n}\n\n/**\n * @function random\n * @public\n * @param {Integer} start - Start of the range.\n * @param {Integer} end - End of the range.\n * @returns {Number} Random integer.\n * @description Returns a random integer number in the range specified by the arguments.\n *\n * @example\n * random(1, 5); // 3\n * random(1, 5); // 1\n */\nfunction random(start, end) {\n  validate([start, end], ['intLike', 'intLike'], 'random');\n\n  if (end <= start) {\n    throw new Error('The second argument must be greater than the first!', 'random');\n  }\n\n  return Math.floor(rand(start, end + 1));\n}\n\nexport { Num, rand, random };\n","/**\n * @module Arr\n * @private\n * @mixin\n * @description Exports Arr class.\n */\n\nimport { random } from './Num';\nimport { Super } from './Super';\nimport { constructors } from './constants';\nimport {\n  isArrayLike, isNaN, isNumber, isString,\n  toArray, validate, iterate as iterator, Symbol, defineProperties\n} from './helpers';\n\n/**\n * @typedef {Array|*} ArrayLike\n * @public\n * @description Array-like type.\n */\n\n/**\n * @callback ArrayCallback\n * @public\n * @param {Number} i - Iteration index.\n */\n\n/**\n * @callback IterateCallback\n * @public\n * @param {Number} i - Iteration index.\n */\n\n/**\n * @callback CompareFunction\n * @public\n * @param {*} x - First value to be compared.\n * @param {*} y - Second value to be compared.\n */\n\n/**\n * @class Arr\n * @extends Super\n * @public\n * @param {Array} [array = []] - An array to wrap.\n * @returns {Arr} Instance of Arr.\n * @description Wrap of an array.\n *\n * @example\n * new Arr([1, 2]);\n */\nclass Arr extends Super {\n  constructor(array = []) {\n    super(toArray(array instanceof Arr ? array.$ : array));\n\n    /**\n     * @member Arr#$\n     * @type {Array}\n     * @public\n     * @description Made array.\n     */\n  }\n\n  /**\n   * @method Arr#concat\n   * @public\n   * @param {...(Array|Arr|*)} values - Arrays or any other values to concat the array with.\n   * @returns {Arr} New instance of Arr.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\n   * @description Synonym for\n   * [Array#concat]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/concat}.\n   */\n  concat(...values) {\n    const array = toArray(this.$, true);\n\n    iterator(arguments, (value) => {\n      value = new Super(value).$;\n\n      if (isArrayLike(value) && !isString(value)) {\n        iterator(value, (value) => {\n          array.push(value);\n        });\n\n        return;\n      }\n\n      array.push(value);\n    });\n\n    return new this.constructor(array);\n  }\n\n  /**\n   * @member Arr#first\n   * @type {*}\n   * @public\n   * @readonly\n   * @description Returns the first element of the array.\n   *\n   * @example\n   * new Arr([1, 2, 3]).first; // 1\n   * new Arr([]).first;        // undefined\n   */\n  get first() {\n    return this.$[0];\n  }\n\n  /**\n   * @method Super#forEachReverse\n   * @public\n   * @param {IterationCallback} callback - Called on each iteration.\n   * @returns {Arr} Returns this.\n   * @description Method for iterating over any object.\n   *\n   * @example\n   * new Super({ a: 1, b: 2, c: 3 }).forEach((value, key, object) => {\n   *   object[key] = value * value;\n   * }).$; // { a: 1, b: { c: 4, d: 5 } }\n   */\n  forEachReverse(callback) {\n    validate([callback], ['function'], 'Arr#forEachReverse');\n\n    const array = this.$;\n\n    for (let i = array.length - 1; i >= 0; i--) {\n      callback(array[i], i, array);\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Arr#includes\n   * @public\n   * @param {*} value - Value to search.\n   * @returns {Boolean} If the array includes the value.\n   * @description Synonym for array.indexOfStrict(value) !== -1.\n   *\n   * @example\n   * new Arr([1, 2, 3]).includes(1);       // true\n   * new Arr([1, 2, 3]).includes('1');     // false\n   * new Arr([1, 2, 3]).includes(3);       // true\n   * new Arr([1, 2, NaN]).includes(NaN);   // true\n   */\n  includes(value) {\n    return this.indexOfStrict(value) !== -1;\n  }\n\n  /**\n   * @method Arr#indexOf\n   * @public\n   * @param {*} value - Value to search.\n   * @returns {Number} Index of the argument.\n   * @description Almost the same as {@link Super#keyOf}. The difference is that if the value is not found\n   * -1 returned instead of null and if found Number(key) returned.\n   *\n   * @example\n   * new Arr([1, 2, 3]).indexOf(1);       // 0\n   * new Arr([1, 2, 3]).indexOf('1');     // 0\n   * new Arr([1, 2, 3]).indexOf(3);       // -1\n   * new Arr([1, 2, NaN]).indexOf(NaN);   // 2\n   */\n  indexOf(value) {\n    const key = this.keyOf(value);\n\n    return key === null ? -1 : Number(key);\n  }\n\n  /**\n   * @method Arr#indexOfStrict\n   * @public\n   * @param {*} value - Value to search.\n   * @returns {Number} Index of the argument.\n   * @description Almost the same as {@link Super#keyOfStrict}. The difference is that if the value is not found\n   * -1 returned instead of null and if found Number(key) returned.\n   *\n   * @example\n   * new Arr([1, 2, 3]).indexOfStrict(1);       // 0\n   * new Arr([1, 2, 3]).indexOfStrict('1');     // -1\n   * new Arr([1, 2, 3]).indexOfStrict(3);       // -1\n   * new Arr([1, 2, NaN]).indexOfStrict(NaN);   // 2\n   */\n  indexOfStrict(value) {\n    const key = this.keyOfStrict(value);\n\n    return key === null ? -1 : Number(key);\n  }\n\n  /**\n   * @method Arr#join\n   * @public\n   * @param {String} [separator = ','] - See the link.\n   * @returns {String} - String of joined array.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/join\n   * @description Synonym for\n   * [Array#join]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/join}.\n   */\n  join(separator) {\n    return this.$.join.apply(this.$, arguments);\n  }\n\n  /**\n   * @member Arr#last\n   * @type {*}\n   * @public\n   * @readonly\n   * @description The last element of the array.\n   *\n   * @example\n   * new Arr([1, 2, 3]).last; // 3\n   * new Arr([]).last;        // undefined\n   */\n  get last() {\n    const array = this.$;\n\n    return array[array.length - 1];\n  }\n\n  /**\n   * @member Arr#length\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/length\n   * @description Synonym for\n   * [Array#length]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/length}.\n   */\n  get length() {\n    return this.$.length;\n  }\n\n  /**\n   * @method Arr#pop\n   * @public\n   * @returns {*} Returns deleted element.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\n   * @description Synonym for\n   * [Array#pop]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/pop}.\n   */\n  pop() {\n    return this.$.pop();\n  }\n\n  /**\n   * @method Arr#push\n   * @public\n   * @param {...*} values - See the link.\n   * @this {Arr}\n   * @returns {Arr} Returns this.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push\n   * @description Synonym for\n   * [Array#push]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push}\n   * besides returning this.\n   */\n  push(...values) {\n    this.$.push.apply(this.$, arguments);\n\n    return this;\n  }\n\n  /**\n   * @method Arr#pushArray\n   * @public\n   * @param {Array} array - Array to push.\n   * @this {Arr}\n   * @returns {Arr} Returns this.\n   * @description Method for pushing an array into another.\n   */\n  pushArray(array) {\n    this.$.push.apply(this.$, array);\n\n    return this;\n  }\n\n  /**\n   * @method Arr#random\n   * @public\n   * @returns {*} Random item of the array.\n   * @description Method for getting random items of the array.\n   *\n   * @example\n   * new Arr([1, 5, 3]).random(); // 3\n   * new Arr([1, 5, 3]).random(); // 5\n   */\n  random() {\n    return this.$[random(0, this.$.length - 1)];\n  }\n\n  /**\n   * @method Arr#reverse\n   * @public\n   * @returns {Arr} A wrap of the reversed array.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\n   * @description Synonym for\n   * [Array#reverse]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse}.\n   */\n  reverse() {\n    this.$.reverse();\n\n    return this;\n  }\n\n  /**\n   * @method Arr#shift\n   * @public\n   * @returns {*} Returns deleted element.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\n   * @description Synonym for\n   * [Array#shift]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/shift}.\n   */\n  shift() {\n    return this.$.shift();\n  }\n\n  /**\n   * @method Arr#shuffle\n   * @public\n   * @returns {Arr} Returns this.\n   * @description Method for shuffling.\n   *\n   * @example\n   * new Arr([1, 2, 3, 4]).shuffle().$; // [4, 2, 3, 1]\n   * new Arr([1, 2, 3, 4]).shuffle().$; // [1, 3, 4, 2]\n   */\n  shuffle() {\n    const length = this.$.length;\n\n    return this.forEach((value, index, array) => {\n      const randomIndex = index + Math.floor((length - index) * Math.random());\n\n      array[index] = array[randomIndex];\n      array[randomIndex] = value;\n    });\n  }\n\n  /**\n   * @method Arr#slice\n   * @public\n   * @param {Number} [begin = 0] - See the link.\n   * @param {Number} [end = array.length] - See the link.\n   * @returns {Arr} A wrap of a sliced array.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\n   * @description Synonym for\n   * [Array#slice]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/slice}.\n   */\n  slice(begin, end) {\n    return new this.constructor(this.$.slice.apply(this.$, arguments));\n  }\n\n  /**\n   * @method Arr#sort\n   * @public\n   * @param {CompareFunction} [compareFunction] - See the link.\n   * @returns {Arr} Returns this.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n   * @description Synonym for\n   * [Array#sort]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/sort}.\n   */\n  sort(compareFunction) {\n    validate([compareFunction], ['function||!'], 'Arr#sort');\n\n    this.$.sort(compareFunction);\n\n    return this;\n  }\n\n  /**\n   * @method Arr#sortAsc\n   * @public\n   * @returns {Arr} Returns this.\n   * @description Method for ascending sorting. Puts non-numbers first, then NaNs, then sorted values.\n   *\n   * @example\n   * new Arr([NaN, 1, -7, '100', 5]).sortAsc().$; // ['100', NaN, -7, 1, 5]\n   */\n  sortAsc() {\n    return this.sort(asc);\n  }\n\n  /**\n   * @method Arr#sortDesc\n   * @public\n   * @returns {Arr} Returns this.\n   * @description Method for descending sorting. Puts sorted values first, then NaNs, then non-numbers.\n   *\n   * @example\n   * new Arr([NaN, 1, -7, '100', 5]).sortDesc().$; // [5, 1, -7, NaN, '100']\n   */\n  sortDesc() {\n    return this.sort((y, x) => asc(x, y));\n  }\n\n  /**\n   * @method Arr#splice\n   * @public\n   * @param {Number} [start] - See the link.\n   * @param {Number} [deleteCount] - See the link.\n   * @param {...*} [items] - See the link.\n   * @returns {Arr} A wrap of return value of #splice call.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\n   * @description Synonym for\n   * [Array#splice]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/splice}.\n   */\n  splice(start, deleteCount, ...items) {\n    return new Arr(this.$.splice.apply(this.$, arguments));\n  }\n\n  /**\n   * @method Arr#string\n   * @public\n   * @returns {String} Concatenated array.\n   * @description Synonym for array.join('').\n   *\n   * @example\n   * new Arr([1, 2, 3]).string(); // '123'\n   */\n  string() {\n    return this.join('');\n  }\n\n  /**\n   * @method Arr#unshift\n   * @public\n   * @param {...*} [values] - See the link.\n   * @returns {Arr} Returns this.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\n   * @description Synonym for\n   * [Array#unshift]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift}\n   * besides returning this.\n   */\n  unshift(...values) {\n    this.$.unshift.apply(this.$, arguments);\n\n    return this;\n  }\n}\n\ndefineProperties(Arr.prototype, {\n  [Symbol.toStringTag]: 'Arr'\n});\n\n/**\n * @function asc\n * @private\n * @param {*} x - First value to be compared.\n * @param {*} y - Second value to be compared.\n * @returns {Number} Where to put the first element: before or after.\n */\nfunction asc(x, y) {\n  if (!isNumber(x) && !isNumber(y)) {\n    return 0;\n  }\n\n  if (!isNumber(x)) {\n    return -1;\n  }\n\n  if (!isNumber(y)) {\n    return 1;\n  }\n\n  if (isNaN(x) && isNaN(y)) {\n    return 0;\n  }\n\n  if (isNaN(x)) {\n    return -1;\n  }\n\n  if (isNaN(y)) {\n    return 1;\n  }\n\n  return x - y;\n}\n\nconstructors[1].push({\n  check: isArrayLike,\n  cls: Arr\n});\n\n/**\n * @function array\n * @public\n * @param {Number} number - Length of the array.\n * @param {ArrayCallback} [callback] - If it's present it has to be a function\n * that returns the element that is pushed to the new array.\n * @returns {Arr} New instance of Arr.\n * @description Method for creating new array from the length using optional callback.\n *\n * @example\n * array(3).$;               // [0, 1, 2]\n * array(3, (i) => i * 2).$; // [0, 2, 4]\n */\nfunction array(number, callback) {\n  validate([number, callback], [['intLike', '>=0'], 'function||!'], 'array');\n\n  const array = [];\n\n  for (let i = 0; i < number; i++) {\n    array.push(callback ? callback(i) : i);\n  }\n\n  return new Arr(array);\n}\n\n/**\n * @function iterate\n * @public\n * @param {Number} number - Number of iterations.\n * @param {IterateCallback} callback - Callback that is called on each iteration with the iteration index.\n * @returns {void}\n * @description Method for replacing for (...) construction.\n *\n * @example\n * iterate();\n */\nfunction iterate(number, callback) {\n  validate([number, callback], [['intLike', '>=0'], 'function'], 'iterate');\n\n  for (let i = 0; i < number; i++) {\n    callback(i);\n  }\n}\n\nexport { Arr, array, iterate };\n","/**\n * @module BlobObject\n * @private\n * @mixin\n * @description Exports BlobObject class.\n */\n\nimport { Super } from './Super';\nimport { Promise } from './Promise';\nimport { constructors } from './constants';\nimport {\n  isArray, isFunction,\n  toStringTag, Symbol, defineProperties\n} from './helpers';\n\n/**\n * @typedef {{ buffer: String, binary: String, dataURL: String, text: String }} methods\n * @private\n * @description List of read blob methods.\n */\nconst methods = {\n  buffer: 'ArrayBuffer',\n  binary: 'BinaryString',\n  dataURL: 'DataURL',\n  text: 'Text'\n};\nconst { URL } = global;\n\n/**\n * @typedef {('buffer'|'binary'|'dataURL'|'text')} ReadBlobMethod\n * @public\n * @description Enum type of read blob methods.\n */\n\n/**\n * @typedef {ArrayBuffer|ArrayBufferView|Blob|String} BlobParts\n * @public\n * @description Allowed blob parts.\n */\n\n/**\n * @callback ReaderEventListener\n * @public\n * @param {Event} e - Fired event.\n * @param {FileReader} reader - FileReader.\n */\n\n/**\n * @class BlobObject\n * @extends Super\n * @public\n * @param {Blob} blob - Blob to wrap.\n * @returns {BlobObject} Instance of BlobObject.\n * @description Wrap of a blob.\n *\n * @example\n * new BlobObject(new Blob(['{\"foo\":\"bar\"}'], { type: 'application/json' }));\n */\nclass BlobObject extends Super {\n  /**\n   * @member BlobObject#$\n   * @type {Blob}\n   * @public\n   * @description Original Blob.\n   */\n\n  /**\n   * @member {String} BlobObject#dataURL\n   * @type {String}\n   * @public\n   * @readonly\n   * @description Returns dataURL representation of the blob.\n   */\n  get dataURL() {\n    return URL.createObjectURL(this.$);\n  }\n\n  /**\n   * @method BlobObject#readAs\n   * @public\n   * @param {ReadBlobMethod} method - Method that is used for reading from blob.\n   * @param {ReaderEventListener} [progress] - Progress listener.\n   * @returns {Promise} Promise that could be aborted.\n   * @description Method for reading from blobs.\n   *\n   * @example\n   * new BlobObject(new Blob(['{\"foo\":\"bar\"}'], { type: 'application/json' }))\n   *   .readAs('text')\n   *   .then((value) => {\n   *     console.log(value); // '{\"foo\":\"bar\"}'\n   *   });\n   */\n  readAs(method, progress) {\n    if (!methods[method]) {\n      throw new Error('1st argument must be one of following values: buffer, binary, dataURL, text');\n    }\n\n    let reader = new FileReader();\n    let toReject;\n\n    if (isFunction(progress)) {\n      reader.onprogress = function (e) {\n        progress(e, this);\n      };\n    }\n\n    const promise = new Promise((resolve, reject) => {\n      toReject = reject;\n\n      reader.onerror = ({ target }) => {\n        if (reader) {\n          reject(target.error);\n        }\n      };\n\n      reader.onload = ({ target }) => {\n        resolve(target.result);\n      };\n\n      reader[`readAs${ methods[method] }`](this.$);\n    });\n\n    promise.abort = function abort() {\n      toReject(new Error('Reading was aborted'));\n\n      reader.abort();\n\n      reader = null;\n\n      return this;\n    };\n\n    return promise;\n  }\n\n  /**\n   * @method BlobObject#saveAs\n   * @public\n   * @param {String} [name] - Name that is used for saving file.\n   * @returns {BlobObject} Returns this.\n   * @description Method for saving blobs.\n   *\n   * @example\n   * new BlobObject(new Blob(['{\"foo\":\"bar\"}'], { type: 'application/json' }))\n   *   .saveAs('blob.json');\n   */\n  saveAs(name = 'download') {\n    const anchor = document.createElement('a');\n\n    anchor.href = this.dataURL;\n    anchor.setAttribute('download', name);\n    anchor.click();\n\n    return this;\n  }\n}\n\ndefineProperties(BlobObject.prototype, {\n  [Symbol.toStringTag]: 'BlobObject'\n});\n\nconstructors[1].push({\n  check: (blob) => /^(Blob|File)$/.test(toStringTag(blob)),\n  cls: BlobObject\n});\n\n/**\n * @function blob\n * @public\n * @param {(BlobParts[]|BlobParts)} blobParts - Blob parts that are passed to\n * [Blob]{@link https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob} constructor.\n * @param {Object} [options] - Options that are passed to\n * [Blob]{@link https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob} constructor.\n * @returns {BlobObject} New instance of BlobObject.\n * @description Function for creating blobs not involving BlobObject and Blob constructors.\n */\nfunction blob(blobParts, options = {}) {\n  if (!isArray(blobParts)) {\n    blobParts = [blobParts];\n  }\n\n  return new BlobObject(new Blob(blobParts, options));\n}\n\nexport { BlobObject, blob };\n","/**\n * @module Str\n * @private\n * @mixin\n * @description Exports Str class.\n */\n\nimport { D } from './D';\nimport { Super } from './Super';\nimport { constructors, regexpSpecialCharacters } from './constants';\nimport {\n  isFunction, isNumberLike, isObject, isString,\n  validate, Symbol, defineProperties, iterate\n} from './helpers';\n\nconst htmlSpecials = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;'\n};\nconst regexpSpecialsRegexp = new RegExp(\n  new Super(regexpSpecialCharacters)\n    .word((x) => `\\\\${ x }|`)\n    .replace(/\\|$/, ''),\n  'g'\n);\n\n/**\n * @class Str\n * @extends Super\n * @public\n * @param {String} [string = ''] - A string to wrap.\n * @returns {Str} Instance of Str.\n * @description Wrap of a string.\n *\n * @example\n * const s = new Num('1');\n */\nclass Str extends Super {\n  constructor(string = '') {\n    super(`${ string }`);\n\n    /**\n     * @member Str#$\n     * @type {String}\n     * @public\n     * @description Original string.\n     */\n  }\n\n  /**\n   * @method Str#capitalizeFirst\n   * @public\n   * @returns {Str} Capitalized string.\n   * @description Method capitalizing the first symbol.\n   *\n   * @example\n   * new Str('foo').capitalizeFirst().$; // 'Foo'\n   */\n  capitalizeFirst() {\n    const string = this.$;\n\n    return new Str(string.slice(0, 1).toUpperCase() + string.slice(1));\n  }\n\n  /**\n   * @method Str#endsWith\n   * @public\n   * @param {String} searchString - See the link.\n   * @param {Number} [position = string.length] - See the link.\n   * @returns {Boolean} If the string ends with the argument string.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\n   * @description Synonym for\n   * [String#endsWith]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith}.\n   */\n  endsWith(searchString, position) {\n    if (arguments.length < 2) {\n      position = this.$.length;\n    }\n\n    return this\n      .slice(0, position)\n      .revert()\n      .startsWith(new Str(searchString).revert().$);\n  }\n\n  /**\n   * @method Str#escapeHTML\n   * @public\n   * @returns {Str} New instance of Str.\n   * @description Methods escaping \"&\", \"<\" and \">\" symbols.\n   *\n   * @example\n   * new Str('\"1 < 2\" & \"7 > 4\" are true expressions.').escapeHTML().$;\n   * // '\"1 &lt; 2\" &amp \"7 &gt; 2\" are true expressions.'\n   */\n  escapeHTML() {\n    let string = this.$;\n\n    iterate(htmlSpecials, (escaped, symbol) => {\n      string = string.replace(new RegExp(symbol, 'g'), escaped);\n    });\n\n    return new Str(string);\n  }\n\n  /**\n   * @method Str#escapeRegExp\n   * @public\n   * @returns {Str} New instance of Str.\n   * @description Method escaping RegExp special characters.\n   *\n   * @example\n   * new Str('(213.98 - [] {})').escapeRegExp().$; // '\\(213\\.98 \\- \\[\\] \\{\\}\\)'\n   */\n  escapeRegExp() {\n    return this.replace(regexpSpecialsRegexp, '\\\\$&');\n  }\n\n  /**\n   * @method Str#in\n   * @public\n   * @param {*} object - Object to check the string as a property in.\n   * @returns {Boolean} If it is in the object or not.\n   * @description Returns string in object.\n   *\n   * @example\n   * new Str('a').in({ a: 1 }); // true\n   * new Str('toFixed').in(1);  // false\n   * new Str('a').in(null);     // false\n   */\n  in(object) {\n    if (!isObject(object)) {\n      return false;\n    }\n\n    return this.$ in object;\n  }\n\n  /**\n   * @method Str#indexOf\n   * @public\n   * @param {String} searchValue - See the link.\n   * @param {Number} [fromIndex = 0] - See the link.\n   * @returns {Number} Found index or -1.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\n   * @description Synonym for\n   * [String#indexOf]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf}.\n   */\n  indexOf(searchValue, fromIndex) {\n    return this.$.indexOf.apply(this.$, arguments);\n  }\n\n  /**\n   * @method Str#lastIndexOf\n   * @public\n   * @param {String} searchValue - See the link.\n   * @param {Number} [fromIndex = string.length] - See the link.\n   * @returns {Number} Found index or -1.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf\n   * @description Synonym for\n   * [String#lastIndexOf]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf}.\n   */\n  lastIndexOf(searchValue, fromIndex) {\n    return this.$.lastIndexOf.apply(this.$, arguments);\n  }\n\n  /**\n   * @member Str#length\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/length\n   * @description Synonym for\n   * [String#length]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/length}.\n   */\n  get length() {\n    return this.$.length;\n  }\n\n  /**\n   * @method Str#match\n   * @public\n   * @returns {Arr|Super} D-Wrap of found match.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/match\n   * @description Synonym for\n   * [String#match]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/match}.\n   */\n  match(regexp) {\n    return D(this.$.match.apply(this.$, arguments));\n  }\n\n  /**\n   * @method Str#repeat\n   * @public\n   * @param {Integer} times - Times to repeat the string.\n   * @returns {Str} New instance of Str.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\n   * @description Synonym for\n   * [String#repeat]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/repeat}.\n   *\n   * @example\n   * new Str('123').repeat(2).$; // '123123'\n   * new Str('123').repeat(0).$; // ''\n   */\n  repeat(times) {\n    validate([times], [['intLike', '>=0']], 'Str#repeat');\n\n    times = +times;\n\n    const string = this.$;\n\n    let s = '';\n\n    for (let i = 0; i < times; i++) {\n      s += string;\n    }\n\n    return new Str(s);\n  }\n\n  /**\n   * @method Str#replace\n   * @public\n   * @param {RegExp|String} regexp - See the link.\n   * @param {String|Function} [replacer = ''] - See the link.\n   * @returns {Str} New instance of Str.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/replace\n   * @description Synonym for\n   * [String#replace]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/replace}\n   * besides that replacer has a default value of ''.\n   */\n  replace(regexp, replacer = '') {\n    return new Str(this.$.replace(regexp, replacer));\n  }\n\n  /**\n   * @method Str#replaceString\n   * @public\n   * @param {String} string - String to replace.\n   * @param {String} [replacer = ''] - String to replace with.\n   * @returns {Str} New instance of Str.\n   * @description Method for global string replaceing.\n   *\n   * @example\n   * new Str('123123').replaceString('1', '4').$; // '423423'\n   * new Str('123123').replaceString('1').$;      // '2323'\n   */\n  replaceString(string, replacer = '') {\n    string = new Super(string).$;\n\n    validate([string], ['string'], 'Str#replaceString');\n\n    return new Str(this.$.split(string).join(replacer));\n  }\n\n  /**\n   * @method Str#revert\n   * @public\n   * @returns {Str} New instance of string.\n   * @description Method for reverting a string.\n   *\n   * @example\n   * new Str('1234').revert().$; // '4321'\n   */\n  revert() {\n    const string = this.$;\n    let str = '';\n\n    for (let i = string.length - 1; i >= 0; i--) {\n      str += string[i];\n    }\n\n    return new Str(str);\n  }\n\n  /**\n   * @method Str#search\n   * @public\n   * @param {RegExp} regexp - See the link.\n   * @returns {Number} Index of the first match, if found, and -1 if not.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/search\n   * @description Synonym for\n   * [String#search]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/search}.\n   */\n  search(regexp) {\n    validate([regexp], ['regexp']);\n\n    return this.$.search.apply(this.$, arguments);\n  }\n\n  /**\n   * @method Str#slice\n   * @public\n   * @param {Number} [beginSlice = 0] - See the link.\n   * @param {Number} [endSlice = string.length] - See the link.\n   * @returns {Str} New instance of Str.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/slice\n   * @description Synonym for\n   * [String#slice]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/slice}.\n   */\n  slice(beginSlice, endSlice) {\n    return new Str(this.$.slice.apply(this.$, arguments));\n  }\n\n  /**\n   * @method Str#split\n   * @public\n   * @param {RegExp|String} [separator] - See the link.\n   * @returns {Arr|Super} D-Wrap of the array.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/split\n   * @description Synonym for\n   * [String#split]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/split}.\n   */\n  split(separator) {\n    return D(this.$.split.apply(this.$, arguments));\n  }\n\n  /**\n   * @method Str#startsWith\n   * @public\n   * @param {String} searchString - See the link.\n   * @param {Number} [position = 0] - See the link.\n   * @returns {Boolean} If the string ends with the argument string.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\n   * @description Synonym for\n   * [String#startsWith]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith}.\n   */\n  startsWith(searchString, position = 0) {\n    return this.$.indexOf.apply(this.$, arguments) === position;\n  }\n\n  /**\n   * @method Str#substr\n   * @public\n   * @param {Number} [start = 0] - See the link.\n   * @param {Number} [length = string.length] - See the link.\n   * @returns {Str} New instance of Str.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/substr\n   * @description Synonym for\n   * [String#substr]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/substr}.\n   */\n  substr(start, length) {\n    return new Str(this.$.substr.apply(this.$, arguments));\n  }\n\n  /**\n   * @method Str#substring\n   * @public\n   * @param {Number} [indexStart = 0] - See the link.\n   * @param {Number} [indexEnd = string.length] - See the link.\n   * @returns {Str} New instance of Str.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/substring\n   * @description Synonym for\n   * [String#substring]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/substring}.\n   */\n  substring(indexStart, indexEnd) {\n    return new Str(this.$.substring.apply(this.$, arguments));\n  }\n\n  /**\n   * @method Str#toCamelCase\n   * @public\n   * @returns {Str} New instance of Str.\n   * @description Removes following regexp /\\s\\-_\\./ making the string camel cased.\n   *\n   * @example\n   * new Str('spinal-case').toCamelCase().$;  // 'spinalCase'\n   * new Str('_snake_case_').toCamelCase().$; // 'snakeCase'\n   */\n  toCamelCase() {\n    return new Str(trim(this.$)\n      .replace(/[\\s\\-_.]+/g, '-')\n      .replace(/-[^-]/g, (match) => match[1].toUpperCase())\n      .replace(/^[\\S]/, (match) => match.toLowerCase())\n    );\n  }\n\n  /**\n   * @method Str#toCapitalCase\n   * @public\n   * @returns {Str} New instance of Str.\n   * @description Removes following regexp /\\-_\\./ making the string capital letter cased.\n   *\n   * @example\n   * new Str('spinal-case').toCapitalCase().$;  // 'Spinal Case'\n   * new Str('_snake_case_').toCapitalCase().$; // 'Snake Case'\n   */\n  toCapitalCase() {\n    return new Str(trim(this.$)\n      .replace(/[\\s\\-_.]+/g, ' ')\n      .replace(/[\\S]/g, (match) => (\n        match.toLowerCase() === match ? match : ` ${ match }`\n      ))\n      .replace(/\\s[\\S]/g, (match) => match.toUpperCase())\n      .replace(/\\s+/g, ' ')\n      .replace(/^\\s/, '')\n      .replace(/^[\\S]/, (match) => match.toUpperCase())\n    );\n  }\n\n  /**\n   * @method Str#toDotCase\n   * @public\n   * @returns {Str} New instance of Str.\n   * @description Removes following regexp /\\-_\\./ making the string dot cased.\n   *\n   * @example\n   * new Str('spinal-case').toDotCase().$;  // 'spinal.case'\n   * new Str('_snake_case_').toDotCase().$; // 'snake.case'\n   */\n  toDotCase() {\n    return new Str(trim(this.$)\n      .replace(/[\\s\\-_.]+/g, '.')\n      .replace(/[^.]/g, (match) => (\n        match.toLowerCase() === match ? match : `.${ match }`\n      ))\n      .replace(/\\.+/g, '.')\n      .replace(/^\\./, '')\n      .toLowerCase()\n    );\n  }\n\n  /**\n   * @method Str#toHyphenCase\n   * @public\n   * @returns {Str} New instance of Str.\n   * @description Removes following regexp /\\s\\-_\\./ making the string camel cased.\n   *\n   * @example\n   * new Str('camelCase').toSpinalCase().$;    // 'camel-case'\n   * new Str('_snake_case_').toSpinalCase().$; // 'snake-case'\n   */\n  toHyphenCase() {\n    return new Str(trim(this.$)\n      .replace(/[\\s\\-_.]+/g, '-')\n      .replace(/[^-]/g, (match) => (\n        match.toLowerCase() === match ? match : `-${ match }`\n      ))\n      .replace(/-+/g, '-')\n      .replace(/^-/, '')\n      .toLowerCase()\n    );\n  }\n\n  /**\n   * @method Str#toLowerCase\n   * @public\n   * @returns {Str} New instance of Str.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase\n   * @description Synonym for\n   * [String#toLowerCase]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase}.\n   *\n   * @example\n   * new Str('UPPER-CASE').toLowerCase().$;  // 'upper-case'\n   */\n  toLowerCase() {\n    return new Str(this.$.toLowerCase());\n  }\n\n  /**\n   * @method Str#toSnakeCase\n   * @public\n   * @returns {Str} New instance of Str.\n   * @description Removes following regexp /\\s\\-\\./ making the string spinal cased.\n   *\n   * @example\n   * new Str('spinal-case').toSnakeCase().$; // 'spinal_case'\n   * new Str('camelCase').toSnakeCase().$;   // 'camel_case'\n   */\n  toSnakeCase() {\n    return new Str(trim(this.$)\n      .replace(/[\\s\\-_.]+/g, '_')\n      .replace(/[^_]/g, (match) => (\n        match.toLowerCase() === match ? match : `_${ match }`\n      ))\n      .replace(/_+/g, '_')\n      .replace(/^_/, '')\n      .toLowerCase()\n    );\n  }\n\n  /**\n   * @method Str#toSpaceCase\n   * @public\n   * @returns {Str} New instance of Str.\n   * @description Removes following regexp /\\-_\\./ making the string space cased.\n   *\n   * @example\n   * new Str('spinal-case').toSpaceCase().$;  // 'spinal case'\n   * new Str('_snake_case_').toSpaceCase().$; // 'snake case'\n   */\n  toSpaceCase() {\n    return new Str(trim(this.$)\n      .replace(/[\\s\\-_.]+/g, ' ')\n      .replace(/[\\S]/g, (match) => (\n        match.toLowerCase() === match ? match : ` ${ match }`\n      ))\n      .replace(/\\s+/g, ' ')\n      .replace(/^\\s/, '')\n      .toLowerCase()\n    );\n  }\n\n  toString() {\n    return this.$;\n  }\n\n  /**\n   * @method Str#toUpperCase\n   * @public\n   * @returns {Str} New instance of Str.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\n   * @description Synonym for\n   * [String#toUpperCase]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase}.\n   *\n   * @example\n   * new Str('lower-case').toUpperCase().$;  // 'LOWER-CASE'\n   */\n  toUpperCase() {\n    return new Str(this.$.toUpperCase());\n  }\n\n  /**\n   * @method Str#trim\n   * @public\n   * @returns {Str} New instance of Str.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trim\n   * @description Synonym for\n   * [String#trim]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trim}.\n   */\n  trim() {\n    return new Str(this.$.replace(/^[\\s\\ufeff\\u00a0]+|[\\s\\ufeff\\u00a0]+$/g, ''));\n  }\n\n  /**\n   * @method Str#trimLeft\n   * @public\n   * @returns {Str} New instance of Str.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trimLeft\n   * @description Synonym for\n   * [String#trimLeft]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trimLeft}.\n   */\n  trimLeft() {\n    return new Str(this.$.replace(/^[\\s\\ufeff\\u00a0]+/, ''));\n  }\n\n  /**\n   * @method Str#trimRight\n   * @public\n   * @returns {Str} New instance of Str.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trimRight\n   * @description Synonym for\n   * [String#trimRight]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trimRight}.\n   */\n  trimRight() {\n    return new Str(this.$.replace(/[\\s\\ufeff\\u00a0]+$/, ''));\n  }\n}\n\ndefineProperties(Str.prototype, {\n  [Symbol.toStringTag]: 'Str'\n});\n\nconstructors[2].push({\n  check: isString,\n  cls: Str\n});\n\nfunction trim(string) {\n  return string.replace(/^[\\s\\-_.]+|[\\s\\-_.]+$/g, '');\n}\n\n/**\n * @function parseJSON\n * @public\n * @param {String} [json = null] - String to parse.\n * @param {Object} [options] - Options.\n * @param {Boolean|*} [options.numbers] - If it is needed to parse number-like strings as numbers.\n * @param {Boolean|*} [options.dates] - If it is needed to parse date-like string as dates.\n * Date-like string is considered to match ^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\\dZ?$\n * @param {JSONCallback} [callback] - Callback that called on every iteration.\n * @returns {DWrap} D-Wrap of found match.\n * @description Method for parsing json.\n *\n * @example\n * parseJSON('{ \"a\": 1 }').$;                                           // { a: 1 }\n * parseJSON('{ \"a\": \"1\" }', { numbers: true }).$;                      // { numbers: true }\n * parseJSON('{ \"a\": \"1999-12-31T23:59:59.999Z\" }', { dates: true }).$; // { a: Date {...} }\n */\nfunction parseJSON(json = null, options = {}, callback) {\n  if (arguments.length <= 1) {\n    return D(JSON.parse(json));\n  }\n\n  if (isFunction(options)) {\n    callback = options;\n    options = {};\n  }\n\n  const { numbers, dates } = options;\n  const parsed = JSON.parse(json, function (key, value) {\n    if (dates && /^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\\dZ?$/.test(value)) {\n      value = new Date(value);\n    } else if (numbers && isNumberLike(value) && isString(value)) {\n      value = Number(value);\n    }\n\n    return callback ? callback.apply(this, arguments) : value;\n  });\n\n  return D(parsed);\n}\n\nexport { Str, parseJSON };\n","/**\n * @module helpers/markupToJSON\n * @private\n * @description Exports markupToJSON method.\n */\n\nimport { Arr } from '../Arr';\nimport { Str } from '../Str';\nimport { Super } from '../Super';\nimport { switcher } from '../Switcher';\nimport { htmlAllowedTagSymbols, htmlAllowedAttrSymbols, voidElements } from '../constants';\nimport { isUndefined } from './checkTypes';\n\n/**\n * @typedef {Object} MarkupElement\n * @property {'comment'|'text'|'element'} type - Type of the node.\n * @property {MarkupElement} parent - Type of the node.\n * @property {Object.<String, String>} attrs - Node attributes\n * @property {MarkupElement[]} children - Node children.\n */\n\nconst submitString = 'Please, submit an issue at https://github.com/dwaynejs/dwayne/issues/new, if needed.';\nconst NODE_REGEX_SET = new Super({\n  'tag-open': new RegExp(`<(${ htmlAllowedTagSymbols })\\\\s*`, 'i'),\n  'tag-close': constructCloseTagRegExp(htmlAllowedTagSymbols),\n  comment: /<!--((?:-[^\\->]|[^\\->])(?:-?[^-])*[^-]?|)-->/\n});\nconst TAG_OPEN_CLOSE = /^(\\/?)>/;\n// const ATTRIBUTE = /^([^\\u0000-\\u0020\\s\"'>\\/=]+)(?:\\s*=\\s*('[^']*'|\"[^\"]*\"|[^\\s\"'`<>=]+))?\\s*/;\nconst ATTRIBUTE = new RegExp(`^(${ htmlAllowedAttrSymbols })(?:\\\\s*=\\\\s*('[^']*'|\"[^\"]*\"|[^\\\\s\"'\\`<>=]+))?\\\\s*`);\nconst div = document.createElement('div');\nconst nodeSwitcher = switcher('strictEquals', (elem) => elem)\n  .case('tag-open', (elem, node) => {\n    const {\n      value: name,\n      selfClosing\n    } = node;\n\n    node = {\n      name,\n      attrs: new Super(node.attrs).map((value) => (\n        value === true\n          ? value\n          : parseCharacterData(value)\n      )).$,\n      parent: elem,\n      children: new Arr([])\n    };\n\n    elem.children.push(node);\n\n    if (!selfClosing && voidElements.indexOf(name) === -1) {\n      elem = node;\n    }\n\n    return elem;\n  })\n  .case('tag-close', (elem, node) => {\n    if (elem.name === node.value) {\n      elem = elem.parent;\n    }\n\n    return elem;\n  })\n  .case(['comment', 'text'], (elem, node, collapseWhiteSpace, type) => {\n    const element = {\n      name: `#${ type }`,\n      parent: elem,\n      value: node.value\n    };\n\n    if (type === 'text' && elem.name !== 'script' && elem.name !== 'style') {\n      element.value = parseCharacterData(element.value);\n\n      if (collapseWhiteSpace) {\n        element.value = new Str(element.value).trim().$;\n      }\n    }\n\n    if (!collapseWhiteSpace || !/^\\s*$/.test(element.value)) {\n      elem.children.push(element);\n    }\n\n    return elem;\n  });\nconst rawTextSwitcher = switcher('strictEquals', false)\n  .case(['title', 'textarea', 'style', 'script'], true);\n\nclass InternalParsingError {\n  constructor(index) {\n    this.index = index;\n  }\n}\n\nclass ParsingError extends Error {\n  type = 'PARSING_ERROR';\n}\n\n/**\n * @function markupToJSON\n * @private\n * @param {String} markup - Markup to parse to JSON.\n * @param {Boolean} [collapseWhiteSpace = false] - If the whitespace should be collapsed.\n * @returns {Arr.<MarkupElement>} Markup elements array.\n * @description Function for parsing html and xml to JSON.\n */\nexport default (markup, collapseWhiteSpace) => {\n  collapseWhiteSpace = !!collapseWhiteSpace;\n\n  const elements = new Arr([]);\n  const startMarkup = markup;\n  let found;\n  let globalIndex = 0;\n  let elem = {\n    name: null,\n    children: elements\n  };\n\n  while (markup.length) {\n    try {\n      found = find(markup, elem);\n    } catch (err) {\n      if (!(err instanceof InternalParsingError)) {\n        throwUnexpectedError();\n      }\n\n      throw new ParsingError(`Parsing error near index ${ nearString(startMarkup, globalIndex + err.index) }`);\n    }\n\n    const {\n      type,\n      attrs,\n      selfClosing,\n      index,\n      value\n    } = found;\n\n    globalIndex += index;\n\n    if (!index) {\n      throwUnexpectedError();\n    }\n\n    const node = {\n      type,\n      value\n    };\n\n    if (type === 'tag-open') {\n      node.attrs = attrs;\n      node.selfClosing = selfClosing;\n    }\n\n    elem = nodeSwitcher(node.type, [elem, node, collapseWhiteSpace]);\n\n    markup = markup.slice(index);\n  }\n\n  return elements;\n\n  function throwUnexpectedError() {\n    throw new ParsingError(`Unexpected parsing error near index ${ nearString(startMarkup, globalIndex) }. ${ submitString }`);\n  }\n};\n\nfunction find(markup, elem) {\n  const { name } = elem;\n  let matches;\n\n  if (rawTextSwitcher(name)) {\n    matches = new Super({\n      'tag-close': markup.match(constructCloseTagRegExp(name))\n    });\n  } else {\n    matches = NODE_REGEX_SET.map((regex) => (\n      markup.match(regex)\n    ));\n  }\n\n  let match;\n\n  if (\n    match = matches.find((match) => (\n      match && match.index === 0\n    ))\n  ) {\n    const returning = {\n      type: match.key,\n      index: match.value[0].length,\n      value: match.value[1]\n    };\n    const attrs = {};\n\n    if (match.key === 'tag-open') {\n      const startMarkup = markup;\n      let closeMatch;\n\n      returning.selfClosing = false;\n      returning.attrs = attrs;\n\n      while (\n        (markup = startMarkup.slice(returning.index)) &&\n        !(closeMatch = markup.match(TAG_OPEN_CLOSE))\n      ) {\n        const attr = markup.match(ATTRIBUTE);\n\n        if (!attr) {\n          returning.index += 1;\n\n          continue;\n        }\n\n        attrs[attr[1]] = isUndefined(attr[2])\n          ? true\n          : attr[2].replace(/^(\"|')|(\"|')$/g, '');\n        returning.index += attr[0].length;\n      }\n\n      if (closeMatch) {\n        returning.index += closeMatch[0].length;\n        returning.selfClosing = !!closeMatch[1];\n      }\n    }\n\n    return returning;\n  }\n\n  let { value: index } = matches.min((match) => (\n    match ? match.index : NaN\n  ));\n\n  if (index === Infinity) {\n    index = markup.length;\n  }\n\n  return {\n    type: 'text',\n    index,\n    value: markup.slice(0, index)\n  };\n}\n\nfunction constructCloseTagRegExp(tagName) {\n  return new RegExp(`</(${ tagName })\\\\s*>`, 'i');\n}\n\nfunction nearString(markup, index) {\n  return `${ index } (~~~ \"${ markup.slice(index, index + 15) }\" ~~~, the string itself is \"${ markup }\")`;\n}\n\nfunction parseCharacterData(string) {\n  return string.replace(/&(\\w+|#x?\\d+);/g, (match) => {\n    div.innerHTML = match;\n\n    return div.textContent || div.innerText;\n  });\n}\n","/**\n * @module Elem\n * @private\n * @mixin\n * @description Exports Elem class.\n */\n\nimport { Super } from './Super';\nimport { Arr, array, iterate as times } from './Arr';\nimport { blob } from './BlobObject';\nimport { method } from './Func';\nimport { Promise } from './Promise';\nimport { Str } from './Str';\nimport { switcher } from './Switcher';\nimport {\n  constructors, appliedRegExps, htmlElements, svgElements,\n  canvasGetMethods, canvasRestMethods\n} from './constants';\nimport {\n  isArray, isArrayLike, isElement, isFunction,\n  isInteger, isNil, isNumber, isNull, isString,\n  assign, dynamicDefineProperties, defineProperties, toArray,\n  validate, toStringTag, iterate, Symbol\n} from './helpers';\nimport markupToJSON from './helpers/markupToJSON';\n\n/**\n * @typedef {String} ElemEventString\n * @public\n * @description A string containing events separated by a comma with zero or more spaces or just spaces.\n */\n\n/**\n * @callback ElemValueCallback\n * @public\n * @param {String} value - Old value.\n * @param {Elem} elem - Current element.\n * @param {Number} index - Index in the set of the elements.\n */\n\n/**\n * @callback ElemSetOfCallback\n * @public\n * @param {Element} created - Created element.\n * @param {*} value - Value of the iterated element in the object.\n * @param {Key} key - Key of the iterated element in the object.\n * @param {*} object - Object that is iterated over.\n * @param {Element} elem - Current element.\n * @param {Number} index - Index of the current element.\n */\n\n/**\n * @callback ValidateCallback\n * @public\n * @param {*} value - Element value.\n * @param {Element} elem - Element to validate.\n * @param {Number} index - Index of the element.\n */\n\n/**\n * @callback CtxCallback\n * @public\n * @param {CanvasRenderingContext2D} ctx - Canvas rendering context.\n */\n\n/**\n * @callback ElemListener\n * @public\n * @param {Event} e - Fired event.\n * @param {Element} elem - Element on which the listener was called.\n * @param {Number} index - Index of the element on which the listener was called.\n */\n\n/**\n * @callback ElemRemoveListeners\n * @public\n * @param {...ElemEventString} events - If at least one argument present only removes event listeners specified\n * by the events in the arguments.\n */\n\nconst nativeDocument = global.document;\nconst emptyDiv = nativeDocument.createElement('div');\nconst eventSeparator = /(?:,| ) */;\nconst textProperty = new Super(Node.prototype).propertyDescriptor('textContent') ? 'textContent' : 'innerText';\nconst classes = {};\nconst attrs = {};\nconst windowsDwayneData = new Arr([]);\nconst inputElements = 'input, select, textarea, datalist, keygen, output';\nconst click = method('click');\nconst svgNS = 'http://www.w3.org/2000/svg';\nconst xmlNS = 'http://www.w3.org/2000/xmlns/';\nconst xlinkNS = 'http://www.w3.org/1999/xlink';\nconst xhtmlNS = 'http://www.w3.org/1999/xhtml';\nconst typeSwitcher = switcher('call', (elem, type) => {\n  const ns = type === 'svg'\n    ? svgNS\n    : elem.prop('namespaceURI') || nativeDocument.documentElement.namespaceURI || xhtmlNS;\n\n  return nativeDocument.createElementNS(ns, type);\n})\n  .case(\n    (type) => type === '#comment',\n    () => nativeDocument.createComment('')\n  )\n  .case(\n    (type) => type === '#text',\n    () => nativeDocument.createTextNode('')\n  );\nconst refSwitcher = switcher('strictEquals', 'href')\n  .case(\n    ['img', 'script', 'iframe', 'audio', 'video'],\n    'src'\n  )\n  .case(\n    'form',\n    'action'\n  );\nconst filterSwitcher = switcher('call', (selector) => selector)\n  .case(\n    isString,\n    (selector) => (\n      (elem) => new Elem(elem).is(selector)\n    )\n  )\n  .case(\n    [isArray, isElem],\n    (elems) => {\n      elems = new Arr(elems);\n\n      return (elem) => elems.indexOf(elem) !== -1;\n    }\n  );\nconst innerSwitcher = switcher('strictEquals', 0)\n  .case('padding-box', (paddings) => paddings)\n  .case('border-box', (paddings, borders) => paddings + borders);\nconst outerSwitcher = switcher('strictEquals', (borders, paddings) => borders + paddings)\n  .case('padding-box', (borders) => borders)\n  .case('border-box', 0);\nconst attrNSSwitcher = switcher('call', null)\n  .case((attr) => attr === 'xmlns' || attr === 'xmlns:xlink', (elem) => (\n    elem.name === 'svg'\n      ? xmlNS\n      : null\n  ))\n  .case((attr) => /^xlink:\\w/.test(attr), (elem) => (\n    elem.closest('svg').length\n      ? xlinkNS\n      : null\n  ));\n\n/**\n * @class Elem\n * @extends Arr\n * @public\n * @param {Element|Element[]} [elem = []] - An element or an array of elements to wrap.\n * @returns {Elem} Instance of Elem.\n * @description Wrap of an elements set. Also has all methods from from\n * [CanvasRenderingContext2D]{@link https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D}.\n * Getters methods return the same as methods from CanvasRenderingContext2D and the rest return this.\n * Work for the first canvas element in the set.\n *\n * @example\n * new Elem(document.body);\n * new Elem(document.querySelectorAll('.cls'));\n * new Elem(document.getElementsByClassName('cls'));\n */\nclass Elem extends Arr {\n  constructor(elem = []) {\n    super((() => {\n      let element = elem;\n\n      if (isArrayLike(element) && (\n        isWindow(element) ||\n        isHTMLDocument(element) ||\n        isDocumentFragment(element) ||\n        isElement(element) ||\n        isCommentOrText(element) ||\n        isStyleRule(element)\n      )) {\n        element = [element];\n      }\n\n      return new Arr(toArray(new Super(element).$, true)).object((elems, elem) => {\n        if (elems.indexOf(elem) === -1 && (\n          isElement(elem) ||\n          isWindow(elem) ||\n          isHTMLDocument(elem) ||\n          isDocumentFragment(elem) ||\n          isCommentOrText(elem) ||\n          isStyleRule(elem)\n        )) {\n          return elems.push(elem);\n        }\n\n        if (isElem(elem)) {\n          elems.push.apply(elems, elem.$);\n        }\n      }, []).$;\n    })());\n\n    this.$$ = elem;\n\n    this.forEach(addDwayneData);\n\n    /**\n     * @member {Array.<Node|Window>} Elem#$\n     * @type {Array.<Node|Window>}\n     * @public\n     * @description Constructed element set.\n     */\n\n    /**\n     * @member {*} Elem#$$\n     * @type {*}\n     * @public\n     * @description Initial element set.\n     */\n  }\n\n  /**\n   * @method Elem#add\n   * @public\n   * @param {...(String|Elem|Element|Element[])} elements - Each argument is a selector, or Elem, or Element, or array of Elements.\n   * @returns {Elem} Returns this.\n   * @description Method for adding new elements to the set.\n   *\n   * @example\n   * elem1.find('.cls1')\n   *   .add(elem2.find('.cls2'))\n   *   .hide();\n   */\n  add(...elements) {\n    iterate(arguments, (elem) => {\n      toFind(elem).forEach((elem) => {\n        if (this.indexOf(elem) === -1) {\n          this.push(elem);\n        }\n      });\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Elem#addClass\n   * @public\n   * @param {...String} classes - Classes to add.\n   * @returns {Elem} Returns this.\n   * @description Method for adding classes to the all the elements in the set.\n   *\n   * @example\n   * elem.addClass('red', 'round');\n   */\n  addClass(...classes) {\n    return this.forEach((elem) => {\n      const list = elem.classList;\n\n      iterate(isElement(elem) && arguments, (cls) => list.add(cls));\n    });\n  }\n\n  /**\n   * @method Elem#addComment\n   * @public\n   * @param {String} text - Text of comment to add.\n   * @param {Boolean} end - If the comment should be inserted to the end. If false it's inserted to the start.\n   * @returns {Elem} Returns this.\n   * @description Method for adding comment to all the elements in the set.\n   *\n   * @example\n   * elem.addHTML('<div>1</div>');\n   */\n  addComment(text, end = true) {\n    return this.forEach((elem) => {\n      if (isElement(elem)) {\n        elem.insertAdjacentHTML(end ? 'beforeend' : 'afterbegin', `<!--${ text }-->`);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#addHTML\n   * @public\n   * @param {String} html - HTML to add.\n   * @param {Boolean} end - If the HTML should be inserted to the end. If false it's inserted to the start.\n   * @returns {Elem} Returns this.\n   * @description Method for adding HTML to all the elements in the set.\n   *\n   * @example\n   * elem.addHTML('<div>1</div>');\n   */\n  addHTML(html, end = true) {\n    return this.forEach((elem) => {\n      if (isElement(elem)) {\n        elem.insertAdjacentHTML(end ? 'beforeend' : 'afterbegin', html);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#addRule\n   * @public\n   * @param {String} name - Name of the rule.\n   * @param {String} selector - Selector for the rule\n   * @param {Object.<String, String>} style - Style for the selector.\n   * @returns {Elem} Returns this.\n   * @description Method for adding css styles into the first style tag in the set.\n   * Note: style element should be inside the document.\n   *\n   * @example\n   * style.addRule('img-size', 'img.square', {\n   *   width: '40px !important',\n   *   height: '40px !important'\n   * });\n   */\n  addRule(name, selector, style) {\n    this.some((elem) => {\n      if (getName(elem) === 'style') {\n        const { sheet } = elem;\n        const { length } = sheet.cssRules;\n        const rules = new Super(style).word((value, property) => (\n          `${ new Str(property).toHyphenCase() }: ${ value };\\n`\n        ));\n\n        sheet.insertRule(\n          `${ selector } {${ rules && '\\n' }${ rules }}`,\n          length\n        );\n        sheet.cssRules[length].dwayneData = { name };\n\n        return true;\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Elem#addText\n   * @public\n   * @param {String} text - Text to add.\n   * @param {Boolean} end - If the text should be inserted to the end. If false it's inserted to the start.\n   * @returns {Elem} Returns this.\n   * @description Method for adding text to all the elements in the set.\n   *\n   * @example\n   * elem.addText('123');\n   */\n  addText(text, end = true) {\n    return this.forEach((elem) => {\n      new Elem(nativeDocument.createTextNode(text)).into(elem, end);\n    });\n  }\n\n  /**\n   * @method Elem#apply\n   * @public\n   * @param {...String} strings - Strings to apply.\n   * @returns {Elem} Returns this.\n   * @description Method that is a shorthand for many other methods.\n   * All shorthands can be separated with space and written within one string.\n   *\n   * @example\n   * elem.apply(\n   *   '#id .c1 .c2 @border(1px solid black) $disabled $attr(some value) *(Click me!)'\n   * );\n   * // shorthand for\n   * // elem\n   * //   .id('id')\n   * //   .addClass('c1', 'c2')\n   * //   .css('border', '1px solid black')\n   * //   .attr({\n   * //     attr, 'some value'\n   * //     disabled: ''\n   * //   })\n   * //   .text('Click me!');\n   * // There is a full list of possible types of syntax below...\n   *\n   * elem.apply('#id');                    // shorthand for elem.id('id');\n   * elem.apply('.c1 .c2');                // shorthand for elem.addClass('c1', 'c2');\n   * elem.apply('-.c1 -.c2');              // shorthand for elem.removeClass('c1', 'c2');\n   * elem.apply('-@float -@display');      // shorthand for elem.removeCSS('float', 'display');\n   * elem.apply('-$a1 -$a2');              // shorthand for elem.removeAttr('a1', 'a2');\n   * elem.apply('*(some text)');           // shorthand for elem.text('some text');\n   * elem.apply('&(<div>1</div>)');        // shorthand for elem.html('<div>1</div>');\n   * elem.apply('@float(right)');          // shorthand for elem.css('float', 'right');\n   * elem.apply('@transform(scale(5px))'); // shorthand for elem.css('transform', 'scale(5px)');\n   * elem.apply('@margin(2px 2px)');       // shorthand for elem.css('margin', '2px 2px');\n   * elem.apply('@marginLeft(2px)');       // shorthand for elem.css('marginLeft', '2px 2px');\n   * elem.apply('@margin-left(2px)');      // shorthand for elem.css('margin-left', '2px 2px');\n   * elem.apply('$attr(some value)');      // shorthand for elem.attr('attr', 'some value');\n   * elem.apply('$attr');                  // shorthand for elem.attr('attr', '');\n   */\n  apply(...strings) {\n    let applied;\n    let setApplied;\n    let callback;\n    let name;\n    let np1;\n    let slice;\n\n    new Str(new Arr(arguments).join(' '))\n      .split(/(\\s+)/)\n      .forEach((string) => {\n        if (!applied) {\n          np1 = string.slice(0, 1);\n          callback = appliedRegExps[np1];\n          slice = 1;\n\n          if (callback && !isFunction(callback)) {\n            callback = callback[string.slice(1, 2)];\n            slice = 2;\n          }\n\n          if (/^\\s+$/.test(string) || !callback) {\n            return;\n          }\n\n          name = string.slice(slice).match(/^[^()]+/);\n\n          if (!name && (np1 !== '*' && np1 !== '&')) {\n            return;\n          }\n\n          applied = {\n            name: name ? name[0] : '',\n            args: string.slice(slice + (name ? name[0] : '').length),\n            callback\n          };\n\n          setApplied = true;\n        }\n\n        if (!setApplied) {\n          applied.args += string;\n        }\n\n        if (!applied.args || /^\\([\\s\\S]+\\)$/.test(applied.args)) {\n          applied.callback(this, applied.name, applied.args.replace(/^\\(|\\)$/g, ''));\n          applied = null;\n        }\n\n        setApplied = false;\n      });\n\n    return this;\n  }\n\n  /**\n   * @method Elem#attr\n   * @public\n   * @param {String|Object.<String, String|ElemValueCallback>} [attr] - Name of the attribute to get or\n   * an object of the format { [attrName]: value, ... } to set attributes.\n   * @param {String|ElemValueCallback} [value] - If the first argument is a string\n   * it should be a value to set for that attribute.\n   * @returns {Super|String|Elem} If no arguments passed, D-Wrap of attributes of the first element in the set\n   * returned, if 1 string argument is passed the value of the attribute of the first element in the set\n   * returned otherwise returns this.\n   * @description Method for getting/setting attributes.\n   *\n   * @example\n   * elem.attr('attr1', 'value1'); // attribute attr1 set to 'value1' and this returned\n   * elem.attr('attr1');           // 'value1'\n   * elem.attr({\n   *   attr1: 'value3',            // attribute attr1 set to 'value3'\n   *   attr2: 'value2'             // attribute attr2 set to 'value2'\n   * });                           // this returned\n   * elem.attr().$;                // { attr1: 'value3', attr2: 'value2' }\n   */\n  attr(attr, value) {\n    const elem = getElem(this);\n\n    if (!arguments.length) {\n      return new Super(elem.attributes).object((o, attr) => {\n        o[attr.name] = attr.value;\n      });\n    }\n\n    if (arguments.length <= 1 && isString(attr)) {\n      const ns = attrNSSwitcher(attr, [new Elem(elem)]);\n\n      return isNull(ns)\n        ? elem.getAttribute(attr)\n        : elem.getAttributeNS(ns, attr);\n    }\n\n    if (arguments.length >= 2) {\n      attr = { [attr]: value };\n    }\n\n    return this.forEach((elem, index) => {\n      if (!isElement(elem)) {\n        return;\n      }\n\n      new Super(attr).forEach((value, key) => {\n        if (isNil(value) || value === false) {\n          return new Elem(elem).removeAttr(key);\n        }\n\n        if (isFunction(value)) {\n          value = value(new Elem(elem).attr(key), elem, index);\n        }\n\n        if (isNil(value) || value === false) {\n          return new Elem(elem).removeAttr(key);\n        }\n\n        value = value === true ? '' : value;\n\n        const ns = attrNSSwitcher(key, [new Elem(elem)]);\n\n        if (isNull(ns)) {\n          elem.setAttribute(key, value);\n        } else {\n          elem.setAttributeNS(ns, key, value);\n        }\n      });\n    });\n  }\n\n  /**\n   * @method Elem#blob\n   * @public\n   * @param {Object} [options = {}] - Options that are passed into {@link blob}.\n   * @returns {Promise.<BlobObject>} New instance of promise.\n   * @description Returns a {@link BlobObject} Promise. Works with image or canvas first element.\n   *\n   * @example\n   * image.blob().then((blob) => console.log(blob));  // BlobObject\n   * canvas.blob().then((blob) => console.log(blob)); // BlobObject\n   */\n  blob(options = {}) {\n    return new Promise((resolve, reject) => {\n      const elem = this.first();\n      const { name } = elem;\n\n      if (name !== 'img' && name !== 'canvas') {\n        reject(new Error('First element in the set isn\\'t an image or a canvas! (Elem#blob)'));\n      }\n\n      if (name === 'canvas') {\n        return resolve(elem);\n      }\n\n      elem\n        .load()\n        .then(() => {\n          if (elem.isBroken()) {\n            return reject(new Error('The image is broken! (Elem#blob)'));\n          }\n\n          const canvas = new Elem(nativeDocument).canvas();\n          const width = elem.width();\n          const height = elem.height();\n\n          canvas\n            .width(width)\n            .height(height)\n            .drawImage(elem.$[0], 0, 0);\n\n          resolve(canvas);\n        });\n    }).then((canvas) => {\n      const dataURL = canvas.dataURL();\n      const byteString = atob(dataURL.split(',')[1]);\n      const length = byteString.length;\n      const ab = new ArrayBuffer(length);\n      const ia = new Uint8Array(ab);\n\n      times(length, (i) => {\n        ia[i] = byteString.charCodeAt(i);\n      });\n\n      return blob(ab, options);\n    });\n  }\n\n  /**\n   * @method Elem#blur\n   * @returns {Elem} Returns this.\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLElement/blur\n   * @description Synonym for\n   * [HTMLElement#blur]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/blur}.\n   */\n  blur() {\n    return this.forEach((elem) => {\n      if (isElement(elem)) {\n        elem.blur();\n      }\n    });\n  }\n\n  /**\n   * @method Elem#calcCSS\n   * @param {String} [pseudo] - See the link.\n   * @returns {CSSStyleDeclaration} See the link.\n   * @see https://developer.mozilla.org/en/docs/Web/API/Window/getComputedStyle\n   * @description Synonym for\n   * [getComputedStyle]{@link https://developer.mozilla.org/en/docs/Web/API/Window/getComputedStyle}.\n   * Returns computed style for the first element in the set or undefined.\n   */\n  calcCSS(pseudo = null) {\n    return getComputedStyle(getElem(this), pseudo);\n  }\n\n  /**\n   * @method Elem#changeRule\n   * @public\n   * @param {String} name - Name of the rule.\n   * @param {Object.<String, String>} style - Style for the selector.\n   * @returns {Elem} Returns this.\n   * @description Method for changing css styles in the first style tag in the set.\n   * Note: style element should be inside the document.\n   *\n   * @example\n   * style.changeRule('img-size', {\n   *   width: '50px !important',\n   *   height: '50px !important'\n   * });\n   */\n  changeRule(name, style) {\n    this.some((elem) => {\n      if (getName(elem) === 'style') {\n        const { value: rule } = new Arr(elem.sheet.cssRules).find((rule) => rule.dwayneData && rule.dwayneData.name === name) || {};\n\n        if (rule) {\n          new Elem(rule).css(style);\n\n          return true;\n        }\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Elem#child\n   * @public\n   * @param {Number|String|Elem|Element|Element[]} element - If the argument is a number a wrap of the set of the children\n   * of this index of each element in the set returned otherwise an element to put into this element, a collection\n   * or a selector of it.\n   * @param {Boolean} end - If the elements should be inserted to the end. If false they are inserted to the start.\n   * @returns {Elem} Returns a wrap of children or inserted elements.\n   * @description Method is similar to\n   * [Node#appendChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/appendChild}.\n   *\n   * @example\n   * const child = elem.child(1);\n   *\n   * elem.child(elem2);\n   * elem.child(document.getElementById('id'));\n   * elem.child('#id div.c1');\n   */\n  child(element, end = true) {\n    if (isInteger(element) && element >= 0) {\n      return this.children().elem(element);\n    }\n\n    return toFind(element).into(this, end);\n  }\n\n  /**\n   * @method Elem#children\n   * @public\n   * @returns {Elem} D-Wrap of the children of the first element in the set.\n   * @description Method for getting element's children.\n   *\n   * @example\n   * const children = elem.children();\n   */\n  children() {\n    return new Elem(this.length ? this.$[0].childNodes : []);\n  }\n\n  /**\n   * @method Elem#class\n   * @public\n   * @param {String} [cls] - If it's present it has to contain class attribute to set.\n   * @returns {Arr|Elem} If the argument is present this returned otherwise a wrap of the classes array returned.\n   * @description Method for getting/setting classes.\n   *\n   * @example\n   * elem.class('c1 c2'); // class set to 'c1 c2'\n   * elem.class().$;      // ['c1', 'c2']\n   */\n  class(cls) {\n    if (!arguments.length) {\n      return new Arr(getElem(this).className.split(' '));\n    }\n\n    return this.forEach((elem) => {\n      if (isElement(elem)) {\n        elem.className = cls;\n      }\n    });\n  }\n\n  /**\n   * @method Elem#click\n   * @returns {Elem} Returns this.\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLElement/click\n   * @description Synonym for\n   * [HTMLElement#click]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/click}.\n   */\n  click() {\n    return this.forEach((elem) => {\n      if (isElement(elem)) {\n        elem.click();\n      }\n    });\n  }\n\n  /**\n   * @method Elem#clone\n   * @public\n   * @param {Boolean|*} [deep = false] - See thee link.\n   * @returns {Elem} New instance of Elem.\n   * @see https://developer.mozilla.org/en/docs/Web/API/Node/cloneNode\n   * @description Synonym for\n   * [Node#cloneNode]{@link https://developer.mozilla.org/en/docs/Web/API/Node/cloneNode}.\n   */\n  clone(deep = false) {\n    return this.object((elems, elem) => {\n      elems.add(elem.cloneNode(!!deep));\n    }, new Elem());\n  }\n\n  /**\n   * @method Elem#closest\n   * @public\n   * @param {String} selector - See the link.\n   * @returns {Elem} Set of the closest elements.\n   * @description Synonym for\n   * [Element#closest]{@link https://developer.mozilla.org/en/docs/Web/API/Element/closest}.\n   */\n  closest(selector) {\n    return this.object((elems, elem) => {\n      while (elem) {\n        if (new Elem(elem).is(selector)) {\n          return elems.add(elem);\n        }\n\n        elem = elem.parentNode;\n      }\n    }, new Elem());\n  }\n\n  /**\n   * @method Elem#contains\n   * @public\n   * @param {String|Elem|Element} element - Element to find out if it's within the first element\n   * in the set or a selector of it.\n   * @returns {Boolean} Returns if the argument within this element.\n   * @description Method is extension for\n   * [Node#contains]{@link https://developer.mozilla.org/en/docs/Web/API/Node/contains}.\n   *\n   * @example\n   * elem1.contains(elem2);   // true|false\n   * elem.contains(selector); // true|false\n   */\n  contains(element) {\n    element = toFind(element);\n\n    return getElem(this).contains(getElem(element));\n  }\n\n  /**\n   * @method Elem#create\n   * @public\n   * @param {String} type - Type of created element. If type is \"#text\" a text node is created.\n   * If type is \"#comment\" a comment node is created.\n   * @param {...String} appliedExpressions - Strings that are passed into {@link Elem#apply}.\n   * @returns {Elem} New instance of Elem - wrap of the created elements.\n   * @description Method for creating elements inside this element.\n   * If this element is not an Element the element is just created.\n   *\n   * @example\n   * elem.create('div', '#id .c1 .c2 *Some text*');\n   *\n   * // also there are shorthands for almost every HTML-element\n   * elem.div();\n   * elem.input('$type(checkbox) $name(country)');\n   */\n  create(type, ...appliedExpressions) {\n    return this.object((elems, elem) => {\n      const element = new Elem(typeSwitcher(type, [new Elem(elem)]));\n\n      element.into(elem);\n\n      elems.add(element.apply.apply(element, appliedExpressions));\n    }, new Elem());\n  }\n\n  /**\n   * @method Elem#createComment\n   * @public\n   * @param {String} text - Text of the comment.\n   * @returns {Elem} New instance of Elem - wrap of the created comments.\n   * @description Method for creating comments inside this element.\n   * If this element is not an Element the comment is just created.\n   *\n   * @example\n   * elem.createComment('comment');\n   */\n  createComment(text) {\n    return this\n      .create('#comment')\n      .text(text);\n  }\n\n  /**\n   * @method Elem#createText\n   * @public\n   * @param {String} text - Text.\n   * @returns {Elem} New instance of Elem - wrap of the created text nodes.\n   * @description Method for creating text nodes inside this element.\n   * If this element is not an Element the text node is just created.\n   *\n   * @example\n   * elem.createText('text');\n   */\n  createText(text) {\n    return this\n      .create('#text')\n      .text(text);\n  }\n\n  /**\n   * @method Elem#css\n   * @public\n   * @param {String|Object.<String, String|ElemValueCallback>} [property] - Name of the property to get or\n   * an object of the format { [property]: value, ... } to set styles.\n   * @param {String|ElemValueCallback} [value] - If the first argument is a string it should be a value to set for that property.\n   * @returns {Super|String|Elem} If no arguments passed, D-Wrap of css styles of the element returned,\n   * if 1 string argument is passed the value of the property returned otherwise returns this.\n   * @description Method for getting/setting styles. Supports !important.\n   *\n   * @example\n   * elem.css('display', 'none'); // display set to 'none' and this returned\n   * elem.css('display');         // 'none'\n   * elem.css({\n   *   display: 'inline',         // display set to 'inline'\n   *   cursor: 'pointer'          // cursor set to 'pointer'\n   * });                          // this returned\n   * elem.css().$;                // { display: 'none', cursor: 'pointer' }\n   */\n  css(property, value) {\n    let style = getElem(this).style;\n\n    if (isStyleRule(this.$[0])) {\n      style = this.$[0].style;\n    }\n\n    if (!arguments.length) {\n      return new Str(style.cssText)\n        .split(/; ?/)\n        .object((o, value) => {\n          if (value) {\n            property = value.split(/: /);\n\n            o[new Str(property[0]).toCamelCase().$] = property[1];\n          }\n        });\n    }\n\n    if (arguments.length <= 1 && isString(property)) {\n      property = new Str(property).toHyphenCase().$;\n\n      return style.getPropertyValue(property) + (style.getPropertyPriority(property) ? ' !important' : '');\n    }\n\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    return this.forEach((elem, index) => {\n      if (!isElement(elem) && !isStyleRule(elem)) {\n        return;\n      }\n\n      new Super(property).forEach((value, property) => {\n        if (isNil(value)) {\n          return new Elem(elem).removeCSS(property);\n        }\n\n        property = new Str(property).toHyphenCase().$;\n\n        if (isFunction(value)) {\n          value = value(new Elem(elem).css(property), elem, index);\n        }\n\n        if (isNil(value)) {\n          return new Elem(elem).removeAttr(key);\n        }\n\n        elem.style.removeProperty(property);\n        elem.style.setProperty(\n          property,\n          value.replace(/ ?!important$/, ''),\n          /!important$/.test(value) ? 'important' : ''\n        );\n      });\n    });\n  }\n\n  /**\n   * @method Elem#ctx\n   * @public\n   * @param {String|Object|CtxCallback} [property] - If present and object\n   * it's assigned to the canvas rendering context, if function\n   * it's called with canvas rendering context argument, if string\n   * the value from the second argument is used for assigning\n   * this property to canvas rendering context and if not present\n   * canvas rendering context returned.\n   * @param {*} [value] - See the property argument.\n   * @returns {CanvasRenderingContext2D|Elem}\n   * @description Rendering context of the first canvas in the set.\n   *\n   * @example\n   * canvas.ctx; // CanvasRenderingContext2D\n   */\n  ctx(property, value) {\n    let ctx;\n\n    this.some((elem) => {\n      if (getName(elem) === 'canvas') {\n        ctx = elem.dwayneData.ctx;\n\n        return true;\n      }\n    });\n\n    if (!arguments.length) {\n      return ctx;\n    }\n\n    if (!ctx) {\n      return this;\n    }\n\n    if (isFunction(property)) {\n      property(ctx);\n    } else {\n      if (arguments.length >= 2) {\n        property = { [property]: value };\n      }\n\n      assign(ctx, property);\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Elem#data\n   * @public\n   * @param {String|Object.<String, String|ElemValueCallback>} [key] - Name of the data attribute (without data- prefix)\n   * to get or an object of the format { [attrName]: value, ... } to set attributes.\n   * @param {String|ElemValueCallback} [value] - If the first argument is a string it should be a value to set for that attribute.\n   * @returns {Super|String|Elem} If no arguments passed, D-Wrap of dataset of the element returned,\n   * if 1 string argument is passed the value of the data attribute returned otherwise returns this.\n   * @description Method for getting/setting data attributes. See\n   * [HTMLElement#dataset]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/dataset}.\n   *\n   * @example\n   * elem.data('someKey1', 'value'); // attribute data-some-key1 set to 'value1' and this returned\n   * elem.data('someKey1');          // 'value1'\n   * elem.data({\n   *   someKey1: 'value3',           // attribute data-some-key1 set to 'value3'\n   *   someKey2: 'value2'            // attribute data-some-key2 set to 'value2'\n   * });                             // this returned\n   * elem.data().$;                  // { someKey1: 'value3', someKey2: 'value2' }\n   */\n  data(key, value) {\n    const dataset = getElem(this).dataset;\n\n    if (!arguments.length) {\n      return new Super(dataset).object((o, value, key) => {\n        o[key] = value;\n      });\n    }\n\n    if (arguments.length === 1 && isString(key)) {\n      return dataset[key];\n    }\n\n    if (arguments.length >= 2) {\n      key = { [key]: value };\n    }\n\n    return this.forEach((elem, index) => {\n      if (!isElement(elem)) {\n        return;\n      }\n\n      iterate(key, (value, key) => {\n        elem.dataset[key] = isFunction(value) ? value(elem.dataset[key], elem, index) : value;\n      });\n    });\n  }\n\n  /**\n   * @method Elem#dataURL\n   * @param {String} [type = 'image/png'] - See the link\n   * @param {Number} [encoderOptions = 0.92] - See the link.\n   * @returns {String} Data URL for the first canvas element in the set.\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/toDataURL\n   * @description Synonym for\n   * [HTMLCanvasElement#toDataURL]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/toDataURL}.\n   *\n   * @example\n   * canvas.dataURL();\n   */\n  dataURL(type, encoderOptions) {\n    const ctx = this.ctx();\n\n    if (!ctx) {\n      return '';\n    }\n\n    return ctx.canvas.toDataURL.apply(ctx.canvas, arguments);\n  }\n\n  /**\n   * @method Elem#deleteRule\n   * @public\n   * @param {String} name - Name of the rule.\n   * @returns {Elem} Returns this.\n   * @description Method for deleting css styles in a style tag.\n   * Note: style element should be inside the document.\n   *\n   * @example\n   * style.deleteRule('img-size');\n   */\n  deleteRule(name) {\n    this.some((elem) => {\n      if (getName(elem) === 'style') {\n        const rule = new Arr(elem.sheet.cssRules).find((rule) => rule.dwayneData && rule.dwayneData.name === name);\n\n        if (rule) {\n          elem.sheet.deleteRule(rule.key);\n\n          return true;\n        }\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Elem#dispatch\n   * @public\n   * @param {String|Event} event - Event or a string (new Event(event) is created).\n   * @param {Object} [eventInit = {}] - See the link.\n   * @param {Boolean} [eventInit.bubbles = true] - See the link.\n   * @param {Boolean} [eventInit.cancelable = true] - See the link.\n   * @param {Object} [details = {}] - Object that is assigned to the event.\n   * @returns {Elem} Returns this.\n   * @see https://developer.mozilla.org/en/docs/Web/API/Event/Event\n   * @description Synonym for\n   * [EventTarget#dispatchEvent]{@link https://developer.mozilla.org/en/docs/Web/API/EventTarget/dispatchEvent}.\n   *\n   * @example\n   * elem.dispatch('click');\n   * elem.dispatch('click', { bubbles: false, cancellable: false });\n   * elem.dispatch(new CustomEvent('custom-event'));\n   */\n  dispatch(event, eventInit = {}, details = {}) {\n    const { bubbles = true, cancelable = true } = eventInit || {};\n    let finalEvent = event;\n\n    if (!/Event$/.test(toStringTag(finalEvent))) {\n      try {\n        finalEvent = new Event(finalEvent, { bubbles, cancelable });\n      } catch (err) {\n        finalEvent = nativeDocument.createEvent('Event');\n        finalEvent.initEvent(event, bubbles, cancelable);\n      }\n\n      assign(finalEvent, details);\n    }\n\n    return this.forEach((elem) => {\n      if (isElement(elem)) {\n        elem.dispatchEvent(finalEvent);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#elem\n   * @public\n   * @param {Number} [index = 0] - Index of the element of the set to get. Negative index means elem.length + index.\n   * @returns {Elem} New instance of Elem.\n   *\n   * @example\n   * elem.elem(1); // a wrap of the element in the set that has index 1\n   * elem.elem();  // a wrap of the element in the set that has index 0\n   */\n  elem(index = 0) {\n    if (index < 0) {\n      index = this.length + index;\n    }\n\n    return new Elem(this.$[index]);\n  }\n\n  /**\n   * @method Elem#filter\n   * @public\n   * @param {String|Function|Element[]|Elem} [selector = Boolean] - If it's a string the method filters elements with the selector\n   * otherwise super.filter is called.\n   * @returns {Elem} New instance of Elem.\n   * @description Method for filtering elements.\n   *\n   * @example\n   * elem.filter((elem) => new Elem(elem).closest('.parent'));\n   * elem.filter(elemsInArray);\n   * elem.filter(elemsInElem);\n   * elem.filter('.child');\n   */\n  filter(selector = Boolean) {\n    return new Elem(super.filter(filterSwitcher(selector)));\n  }\n\n  /**\n   * @method Elem#find\n   * @public\n   * @param {String|Function} selector - Selector to find.\n   * @returns {Elem|{ key: Key, value: * }|null} New instance of Elem if selector is a string\n   * otherwise super.find is called.\n   * @description Synonym for\n   * [Element#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Element/querySelectorAll}.\n   */\n  find(selector) {\n    if (!isString(selector)) {\n      return super.find(selector);\n    }\n\n    return this.object((elems, elem) => {\n      elems.add(find(selector, elem));\n    }, new Elem());\n  }\n\n  /**\n   * @method Elem#first\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Synonym for elem.elem(0).\n   */\n  first() {\n    return this.elem(0);\n  }\n\n  /**\n   * @method Elem#firstChild\n   * @public\n   * @param {String} [selector = null] - If present, finds first child in every elem that matches the selector.\n   * If not, finds first child of each element in the set.\n   * @returns {Elem} New instance of Elem.\n   * @description Method for finding first children of each element in the set.\n   *\n   * @example\n   * elem.first();       // finds first child of each element in the elem set\n   * elem.first('.foo'); // find first child that has foo class of each element in the set\n   */\n  firstChild(selector = null) {\n    return this.object((elems, elem) => {\n      const { value: found } = new Elem(elem)\n        .children()\n        .find((elem) => new Elem(elem).is(selector)) || {};\n\n      elems.add(found);\n    }, new Elem());\n  }\n\n  /**\n   * @method Elem#focus\n   * @returns {Elem} Returns this.\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLElement/focus\n   * @description Synonym for\n   * [HTMLElement#focus]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/focus}.\n   */\n  focus() {\n    return this.forEach((elem) => {\n      if (isElement(elem)) {\n        elem.focus();\n      }\n    });\n  }\n\n  /**\n   * @method Elem#getRule\n   * @public\n   * @param {String} name - Name of the rule.\n   * @returns {{ selector: (String|void), rules: Object }} Set of the css rules.\n   * @description Method for getting set of the rules under the name.\n   * Note: style element should be inside the document.\n   *\n   * @example\n   * style.addRule('img-size', 'img.square', {\n   *   width: '40px',\n   *   height: '40px'\n   * });\n   * style.getRule('img-size');\n   * // {\n   * //   selector: 'img.square',\n   * //   rules: {\n   * //     width: '40px',\n   * //     height: '40px'\n   * //   }\n   * // }\n   */\n  getRule(name) {\n    let found = {\n      selector: undefined,\n      rules: {}\n    };\n\n    this.some((elem) => {\n      if (getName(elem) === 'style') {\n        const { value: rule } = new Arr(elem.sheet.cssRules).find((rule) => rule.dwayneData && rule.dwayneData.name === name) || {};\n\n        if (rule) {\n          found = {\n            selector: rule.selectorText,\n            rules: new Elem(rule).css().$\n          };\n\n          return true;\n        }\n      }\n    });\n\n    return found;\n  }\n\n  /**\n   * @method Elem#hasAttr\n   * @public\n   * @param {String} attr - Name of the attribute.\n   * @returns {Boolean} If the first element in the set has the attribute.\n   * @description Method that returns if the first element in the set has the attribute or not.\n   *\n   * @example\n   * elem.attr('attr', 'value').hasAttr('attr'); // true\n   * elem.removeAttr('attr').hasAttr('attr');    // false\n   */\n  hasAttr(attr) {\n    const elem = getElem(this);\n    const ns = attrNSSwitcher(attr, [new Elem(elem)]);\n\n    return isNull(ns)\n      ? elem.hasAttribute(attr)\n      : elem.hasAttributeNS(ns, attr);\n  }\n\n  /**\n   * @method Elem#hasClass\n   * @public\n   * @param {String} cls - Name of the class.\n   * @returns {Boolean} If the first element in the set has the class.\n   * @description Method that returns if the first element in the set has the class or not.\n   *\n   * @example\n   * elem.addClass('cls').hasClass('cls');    // true\n   * elem.removeClass('cls').hasClass('cls'); // false\n   */\n  hasClass(cls) {\n    return getElem(this).classList.contains(cls);\n  }\n\n  /**\n   * @method Elem#height\n   * @public\n   * @param {*|ElemValueCallback} [height] - Height to set.\n   * @returns {Elem|String} If no arguments passed height of the first element in the set returned.\n   * Otherwise all elements heights in the set are set to the height argument.\n   * @description Gets or sets height.\n   *\n   * @example\n   * elem.height(123);\n   * elem.height(); // 123\n   */\n  height(height) {\n    return this.prop.apply(this, new Arr(arguments).unshift('height').$);\n  }\n\n  /**\n   * @method Elem#hide\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Hides all elements in the set.\n   *\n   * @example\n   * elem.hide();\n   */\n  hide() {\n    return this.forEach((elem) => {\n      elem = new Elem(elem);\n\n      const currentDisplay = elem.css('display');\n\n      if (currentDisplay.indexOf('none')) {\n        elem.prop('dwayneData').previousDisplay = currentDisplay;\n      }\n\n      elem.css('display', 'none !important');\n    });\n  }\n\n  /**\n   * @method Elem#html\n   * @public\n   * @param {String|ElemValueCallback|*} [html] - HTML to write instead of current HTML.\n   * @returns {Elem|String} If no arguments passed HTML of the first element in the set returned.\n   * Otherwise all elements HTML in the set are set to the html argument.\n   * @description Gets or sets HTML.\n   *\n   * @example\n   * elem.html('<div>1</div>');\n   * elem.html(); // '<div>1</div>'\n   */\n  html(html) {\n    if (!arguments.length) {\n      return getElem(this).innerHTML;\n    }\n\n    return this.forEach((elem, index) => {\n      if (isElement(elem)) {\n        elem.innerHTML = isFunction(html) ? html(elem.innerHTML, elem, index) : html;\n      }\n    });\n  }\n\n  /**\n   * @method Elem#id\n   * @public\n   * @param {String|*} [id] - Id to set.\n   * @returns {Elem|String} If no arguments passed id of the first element in the set returned.\n   * Otherwise all elements ids in the set are set to the id argument.\n   * @description Gets id or sets ids.\n   *\n   * @example\n   * elem.id('unique');\n   * elem.id(); // 'unique'\n   */\n  id(id) {\n    if (!arguments.length) {\n      return getElem(this).id;\n    }\n\n    return this.forEach((elem) => {\n      if (isElement(elem)) {\n        elem.id = id;\n      }\n    });\n  }\n\n  /**\n   * @member {Number} Elem#innerHeight\n   * @type {Number}\n   * @public\n   * @readonly\n   * @description Getter for finding how much height content of the first element can be.\n   *\n   * @example\n   * elem.css({\n   *   boxSizing: 'border-box',\n   *   height: '200px',\n   *   paddingTop: '2px',\n   *   paddingBottom: '3px',\n   *   borderTop: '1px solid black',\n   *   borderBottom: '4px solid black'\n   * }).innerHeight; // 190\n   * elem\n   *   .css('box-sizing', 'content-box')\n   *   .innerHeight; // 200\n   * elem\n   *   .css('box-sizing', 'padding-box')\n   *   .innerHeight; // 195\n   */\n  get innerHeight() {\n    const elem = this.$[0];\n\n    if (isWindow(elem)) {\n      return elem.innerHeight;\n    }\n\n    const {\n      borderTopWidth,\n      borderBottomWidth,\n      boxSizing,\n      height,\n      paddingTop,\n      paddingBottom\n    } = this.calcCSS();\n    const borders = px(borderTopWidth) + px(borderBottomWidth);\n    const paddings = px(paddingTop) + px(paddingBottom);\n\n    return px(height) - innerSwitcher(boxSizing, [paddings, borders]);\n  }\n\n  /**\n   * @member {Number} Elem#innerWidth\n   * @type {Number}\n   * @public\n   * @readonly\n   * @description Getter for finding how much width content of the first element can be.\n   *\n   * @example\n   * elem.css({\n   *   boxSizing: 'border-box',\n   *   width: '200px',\n   *   paddingLeft: '2px',\n   *   paddingRight: '3px',\n   *   borderLeft: '1px solid black',\n   *   borderRight: '4px solid black'\n   * }).innerWidth; // 190\n   * elem\n   *   .css('box-sizing', 'content-box')\n   *   .innerWidth; // 200\n   * elem\n   *   .css('box-sizing', 'padding-box')\n   *   .innerWidth; // 195\n   */\n  get innerWidth() {\n    const elem = this.$[0];\n\n    if (isWindow(elem)) {\n      return elem.innerWidth;\n    }\n\n    const {\n      borderLeftWidth,\n      borderRightWidth,\n      boxSizing,\n      paddingLeft,\n      paddingRight,\n      width\n    } = this.calcCSS();\n    const borders = px(borderLeftWidth) + px(borderRightWidth);\n    const paddings = px(paddingLeft) + px(paddingRight);\n\n    return px(width) - innerSwitcher(boxSizing, [paddings, borders]);\n  }\n\n  /**\n   * @method Elem#insertAfter\n   * @public\n   * @param {String|Elem|Element} element - Element to insert this element after or a selector of it.\n   * @returns {Elem} Returns this.\n   * @description Puts the elements from the set after the element specified by the argument.\n   * The elements remain in the same order.\n   *\n   * @example\n   * elem.insertAfter(elem2);\n   * elem.insertAfter(document.getElementById('id'));\n   * elem.insertAfter('#id div.c1');\n   */\n  insertAfter(element) {\n    element = toFind(element).first();\n\n    let parent = element.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    element = element.next().$[0];\n    parent = parent.$[0];\n\n    return this.forEach((elem) => {\n      if (elem === element) {\n        element = element.nextSibling;\n\n        return;\n      }\n\n      if (element) {\n        parent.insertBefore(elem, element);\n      } else {\n        parent.appendChild(elem);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#insertBefore\n   * @public\n   * @param {String|Elem|Element} element - Element to insert this element before or a selector of it.\n   * @returns {Elem} Returns this.\n   * @description Puts the elements from the set before the element specified by the argument.\n   * The elements remain in the same order.\n   *\n   * @example\n   * elem.insertBefore(elem2);\n   * elem.insertBefore(document.getElementById('id'));\n   * elem.insertBefore('#id div.c1');\n   */\n  insertBefore(element) {\n    element = toFind(element).first();\n\n    let parent = element.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    element = element.$[0];\n    parent = parent.$[0];\n\n    return this.forEach((elem) => {\n      parent.insertBefore(elem, element);\n    });\n  }\n\n  /**\n   * @method Elem#into\n   * @public\n   * @param {String|Elem|Element} element - Element to put this elements into or a selector of it.\n   * @param {Boolean} end - If the elements should be inserted to the end. If false they are inserted to the start.\n   * @returns {Elem} Returns this.\n   * @description Method is similar to\n   * [Node#appendChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/appendChild}.\n   *\n   * @example\n   * elem.into(elem2);\n   * elem.into(document.getElementById('id'));\n   * elem.into('#id div.c1');\n   */\n  into(element, end = true) {\n    element = toFind(element).$[0];\n\n    if (\n      !element ||\n      isWindow(element) ||\n      isHTMLDocument(element) ||\n      isCommentOrText(element)\n    ) {\n      return this;\n    }\n\n    if (!end && element.firstChild) {\n      return this.forEachReverse((elem) => {\n        element.insertBefore(elem, element.firstChild);\n      });\n    }\n\n    return this.forEach((elem) => {\n      element.appendChild(elem);\n    });\n  }\n\n  /**\n   * @method Elem#is\n   * @public\n   * @param {String} selector\n   * @returns {Boolean} If the first element in the set matches the selector.\n   * If the selector is undefined or null always returns true. If it's not for not elements\n   * entries returns false.\n   * @description Synonym for\n   * [Element#matches]{@link https://developer.mozilla.org/en/docs/Web/API/Element/matches}.\n   *\n   * @example\n   * elem.addClass('cls');\n   * elem.is('.cls');         // true\n   *\n   * elem.removeClass('cls');\n   * elem.is('.cls');         // false\n   */\n  is(selector) {\n    if (isNull(selector)) {\n      return true;\n    }\n\n    const elem = getElem(this);\n    const matches = (\n      elem.matches ||\n      elem.matchesSelector ||\n      elem.webkitMatchesSelector ||\n      elem.mozMatchesSelector ||\n      elem.msMatchesSelector ||\n      elem.oMatchesSelector\n    );\n\n    if (!isElement(this.$[0])) {\n      return false;\n    }\n\n    try {\n      return matches.call(elem, selector);\n    } catch (err) {\n      console.error(`Selector '${ selector }' is not a valid selector (Elem#is)`);\n\n      return false;\n    }\n  }\n\n  /**\n   * @method Elem#isBroken\n   * @public\n   * @returns {Boolean} If the first image in the set is broken.\n   * @description Returns if the first element in the set is broken. Not image and not loaded image is considered proper.\n   *\n   * @example\n   * const img = elem.img().on({\n   *   'load': onload,\n   *   'error': onload\n   * });\n   *\n   * onload = () => {\n   *   console.log(img.isBroken()); // true\n   * };\n   *\n   * img.ref('/some/non-existent/site/not-found.png');\n   */\n  isBroken() {\n    let isBroken = false;\n\n    this.some((elem) => {\n      if (getName(elem) === 'img') {\n        isBroken = !!(elem.complete && (!elem.naturalWidth || !elem.naturalHeight));\n\n        return true;\n      }\n    });\n\n    return isBroken;\n  }\n\n  /**\n   * @method Elem#isWithinDocument\n   * @public\n   * @returns {Boolean} Returns if the first element in the set is within the document or not.\n   * @description Returns if the first element in the set is within the document or not.\n   *\n   * @example\n   * new Elem(document.body).isWithinDocument();  // true\n   * new Elem(document).div().isWithinDocument(); // false\n   */\n  isWithinDocument() {\n    return this.first().closest('html').length !== 0;\n  }\n\n  /**\n   * @method Elem#last\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Synonym for elem.elem(-1).\n   */\n  last() {\n    return this.elem(-1);\n  }\n\n  /**\n   * @method Elem#lastChild\n   * @public\n   * @param {String} [selector = null] - If present, finds last child in every elem that matches the selector.\n   * If not, finds last child of each element in the set.\n   * @returns {Elem} New instance of Elem.\n   * @description Method for finding last children of each element in the set.\n   *\n   * @example\n   * elem.last();       // finds last child of each element in the elem set\n   * elem.last('.foo'); // find last child that has 'foo' class of each element in the set\n   */\n  lastChild(selector = null) {\n    return this.object((elems, elem) => {\n      const { value: found } = new Elem(elem)\n        .children()\n        .reverse()\n        .find((elem) => new Elem(elem).is(selector)) || {};\n\n      elems.add(found);\n    }, new Elem());\n  }\n\n  /**\n   * @method Elem#load\n   * @public\n   * @returns {Promise.<{ proper: Elem, broken: Elem }>} Promise with broken and proper images.\n   * @description Loads each image in the set and puts it to the proper or broken array.\n   *\n   * @example\n   * images.load().then(({ broken }) => {\n   *   broken.filter('img').ref('/fallback.png');\n   * });\n   */\n  load() {\n    const images = {\n      proper: new Elem(),\n      broken: new Elem()\n    };\n\n    return Promise.all(\n      this\n        .filter((elem) => getName(elem) === 'img')\n        .map((elem) => {\n          const $elem = new Elem(elem);\n\n          if (elem.complete) {\n            images[$elem.isBroken() ? 'broken' : 'proper'].push(elem);\n\n            return;\n          }\n\n          return new Promise((resolve) => {\n            const removeListeners = $elem.on({\n              load() {\n                images.proper.add(elem);\n\n                removeListeners();\n                resolve();\n              },\n              error() {\n                images.broken.add(elem);\n\n                removeListeners();\n                resolve();\n              }\n            });\n          });\n        })\n        .$\n    ).then(() => images);\n  }\n\n  /**\n   * @method Elem#moveAttr\n   * @public\n   * @param {String} attr - Attribute to move to the first element.\n   * @param {String} [value = ''] - Value to set for the attribute. If not set attribute of the previous element or '' used.\n   * @returns {Elem} Returns this.\n   * @description Method for moving an attribute from previous element to the next one (first element in this set).\n   *\n   * @example\n   * elem1.moveAttr('attr', 'value');     // attribute 'attr' set to 'value' on elem1\n   * elem2.moveAttr('attr');              // attribute 'attr' removed from elem1. set to 'value' on elem2\n   * elem3.moveAttr('attr', 'new value'); // attribute 'attr' removed from elem2. set to 'new value' on elem3\n   */\n  moveAttr(attr, value = '') {\n    const prev = attrs[attr];\n    const elem = this.elem();\n\n    if (prev && elem.length) {\n      if (arguments.length < 2) {\n        value = prev.attr(attr);\n      }\n\n      prev.removeAttr(attr);\n    }\n\n    if (elem.length) {\n      attrs[attr] = elem.attr(attr, value);\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Elem#moveClass\n   * @public\n   * @param {String} cls - Class to move to the first element.\n   * @returns {Elem} Returns this.\n   * @description Method for moving a class from previous element to the next one (first element in this set).\n   *\n   * @example\n   * elem1.moveClass('cls'); // class 'cls' added to elem1\n   * elem2.moveClass('cls'); // class 'cls' removed from elem1. added to elem1\n   */\n  moveClass(cls) {\n    const prev = classes[cls];\n    const elem = this.elem();\n\n    if (prev && elem.length) {\n      prev.removeClass(cls);\n    }\n\n    if (elem.length) {\n      classes[cls] = elem.addClass(cls);\n    }\n\n    return this;\n  }\n\n  /**\n   * @member {String} Elem#name\n   * @type {String}\n   * @public\n   * @readonly\n   * @description nodeName (lowercased) of the first element in the set.\n   *\n   * @example\n   * const elem1 = elem.create('div');\n   * elem1.name // 'div'\n   */\n  get name() {\n    return getName(this.$[0]);\n  }\n\n  /**\n   * @method Elem#next\n   * @public\n   * @param {String} [selector = null] - If present, finds next element to every elem that matches the selector.\n   * If not, finds next element to each element in the set.\n   * @returns {Elem} New instance of Elem.\n   * @description Method for finding next element to each element in the set.\n   *\n   * @example\n   * elem.next();       // finds next element to each element in the set\n   * elem.next('.foo'); // finds next element to each element that has 'foo' class\n   */\n  next(selector = null) {\n    return this.object((elems, elem) => {\n      /* eslint no-cond-assign: 0 */\n      while (elem = elem.nextSibling) {\n        if (new Elem(elem).is(selector)) {\n          return elems.add(elem);\n        }\n      }\n    }, new Elem());\n  }\n\n  /**\n   * @method Elem#off\n   * @public\n   * @param {...ElemEventString} events - Events to remove.\n   * @returns {Elem} Returns this.\n   * @description Method that removes all the listeners from each element in the set specified by the events arguments.\n   *\n   * @example\n   * elem.off('click');\n   * elem.off('click, input');\n   * elem.off('click, input', 'focus');\n   */\n  off(...events) {\n    return this.forEach((elem) => {\n      const { listeners } = elem.dwayneData;\n\n      iterate(arguments, (event) => {\n        iterate(event.split(eventSeparator), (event) => {\n          (listeners[event] || new Super()).forEach(({ removeListener }) => removeListener());\n        });\n      });\n    });\n  }\n\n  /**\n   * @method Elem#on\n   * @public\n   * @param {ElemEventString|Object.<ElemEventString|ElemListener>} event - Either a {@link ElemEventString} string\n   * or an object with event keys (a key is also ElemEventString) and listeners values.\n   * @param {String} [selector = null] - Selector to filter event targets.\n   * @param {ElemListener} [listener] - If the first argument is a string it must be a listener function for\n   * specified event(s).\n   * @returns {ElemRemoveListeners} Function that takes optional event argument.\n   * @description Adds event listeners for all the elements in the set.\n   * For debugging: If you need to know what listeners are in work (and what selectors filter targets)\n   * you can look at the base property of the only dwayne listener that listens for the event\n   * and find all working listeners in listener.base.dwayneData.listeners[event].$.\n   *\n   * @example\n   * elem.on(\n   *   'change, input',\n   *   'input, select, textarea, datalist, keygen, output',\n   *   (e, elem, index) => console.log(elem.value)\n   * );\n   * elem.on(\n   *   'change, input',\n   *   (e, elem, index) => console.log(elem.value)\n   * );\n   * elem.on(\n   *   {\n   *     'change, input': (e, elem, index) => console.log(elem.value),\n   *     'blur': () => console.log('blur')\n   *   },\n   *   'input, select, textarea, datalist, keygen, output'\n   * );\n   *\n   * const removeListeners = elem.on({\n   *   'change, input': (e, elem, index) => console.log(elem.value),\n   *   'blur': () => console.log('blur')\n   * });\n   *\n   * removeListeners('click');\n   * removeListeners('blur, change');\n   * removeListeners('blur, change', 'input');\n   * removeListeners();\n   */\n  on(event, selector = null, listener) {\n    const allListeners = new Super({});\n\n    if (isFunction(selector)) {\n      listener = selector;\n      selector = null;\n    }\n\n    if (isString(event)) {\n      event = { [event]: listener };\n    }\n\n    event = new Super(event).object((listeners, listener, event) => {\n      iterate(event.split(eventSeparator), (event) => {\n        listeners[event] = listener;\n      });\n    });\n\n    this.forEach((elem) => {\n      if (!isElement(elem) && !isWindow(elem) && !isHTMLDocument(elem)) {\n        return;\n      }\n\n      const { listeners } = (windowsDwayneData.find(({ element }) => element === elem) || {}).value || elem.dwayneData;\n\n      event.forEach((listener, event) => {\n        const removeEventListeners = listeners[event] = listeners[event] || new Super({}).define('index', {\n          value: 0,\n          configurable: true,\n          writable: true\n        });\n        const index = removeEventListeners.prop('index');\n\n        if (!removeEventListeners.has('listener')) {\n          const newListener = (e) => {\n            removeEventListeners.forEach(({ selector, listener }) => {\n              if (new Elem(e.target).is(selector)) {\n                listener.call(elem, e, elem, index);\n              }\n            });\n          };\n\n          newListener.base = elem;\n\n          elem.addEventListener(event, newListener, false);\n          removeEventListeners.define('listener', {\n            value: newListener,\n            configurable: true,\n            writable: true\n          });\n        }\n\n        const removeListener = () => {\n          removeEventListeners.delete(index);\n\n          if (!removeEventListeners.count) {\n            elem.removeEventListener(event, removeEventListeners.prop('listener'), false);\n            removeEventListeners.delete('listener');\n          }\n        };\n\n        allListeners.prop(event, (allListeners.prop(event) || new Arr()).push(removeListener));\n\n        removeEventListeners.assign({\n          index: index + 1,\n          [index]: {\n            selector,\n            listener,\n            removeListener\n          }\n        });\n      });\n    });\n\n    return function removeEventListeners(event) {\n      if (arguments.length) {\n        iterate(arguments, (event) => {\n          iterate(event.split(eventSeparator), (event) => {\n            if (allListeners.has(event)) {\n              allListeners.prop(event).forEach((removeListener) => removeListener());\n              allListeners.delete(event);\n            }\n          });\n        });\n\n        return;\n      }\n\n      allListeners.forEach((removeListeners) => {\n        removeListeners.forEach((removeListener) => removeListener());\n      });\n    };\n  }\n\n  /**\n   * @member {Number} Elem#outerHeight\n   * @type {Number}\n   * @public\n   * @readonly\n   * @description Getter for finding how much height the element actually is.\n   *\n   * @example\n   * elem.css({\n   *   boxSizing: 'border-box',\n   *   height: '200px',\n   *   paddingTop: '2px',\n   *   paddingBottom: '3px',\n   *   borderTop: '1px solid black',\n   *   borderBottom: '4px solid black'\n   *   marginTop: '0px',\n   *   marginBottom: '5px'\n   * }).outerHeight; // 205\n   * elem\n   *   .css('box-sizing', 'content-box')\n   *   .outerHeight; // 215\n   * elem\n   *   .css('box-sizing', 'padding-box')\n   *   .outerHeight; // 210\n   */\n  get outerHeight() {\n    const elem = this.$[0];\n\n    if (isWindow(elem)) {\n      return elem.outerHeight;\n    }\n\n    const {\n      borderTopWidth,\n      borderBottomWidth,\n      boxSizing,\n      height,\n      marginTop,\n      marginBottom,\n      paddingTop,\n      paddingBottom\n    } = this.calcCSS();\n    const borders = px(borderTopWidth) + px(borderBottomWidth);\n    const paddings = px(paddingTop) + px(paddingBottom);\n\n    return px(height) + px(marginTop) + px(marginBottom) + outerSwitcher(boxSizing, [borders, paddings]);\n  }\n\n  /**\n   * @member {Number} Elem#outerWidth\n   * @type {Number}\n   * @public\n   * @readonly\n   * @description Getter for finding how much width the element actually is.\n   *\n   * @example\n   * elem.css({\n   *   boxSizing: 'border-box',\n   *   width: '200px',\n   *   paddingLeft: '2px',\n   *   paddingRight: '3px',\n   *   borderLeft: '1px solid black',\n   *   borderRight: '4px solid black'\n   *   marginLeft: '0px',\n   *   marginRight: '5px'\n   * }).outerWidth; // 205\n   * elem\n   *   .css('box-sizing', 'content-box')\n   *   .outerWidth; // 215\n   * elem\n   *   .css('box-sizing', 'padding-box')\n   *   .outerWidth; // 210\n   */\n  get outerWidth() {\n    const elem = this.$[0];\n\n    if (isWindow(elem)) {\n      return elem.outerWidth;\n    }\n\n    const {\n      borderLeftWidth,\n      borderRightWidth,\n      boxSizing,\n      marginLeft,\n      marginRight,\n      paddingLeft,\n      paddingRight,\n      width\n    } = this.calcCSS();\n    const borders = px(borderLeftWidth) + px(borderRightWidth);\n    const paddings = px(paddingLeft) + px(paddingRight);\n\n    return px(width) + px(marginLeft) + px(marginRight) + outerSwitcher(boxSizing, [borders, paddings]);\n  }\n\n  /**\n   * @method Elem#parent\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Method returns wrap of the set of the parent elements of each element in the set.\n   */\n  parent() {\n    return this.object((elems, elem) => elems.add(elem.parentNode), new Elem());\n  }\n\n  /**\n   * @method Elem#parentTree\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Returns wrap of all parents of each element in the set.\n   *\n   * @example\n   * elem.parentTree(); // Elem\n   */\n  parentTree() {\n    return this.object((elems, elem) => {\n      while (elem = elem.parentNode) {\n        elems.add(elem);\n      }\n    }, new Elem());\n  }\n\n  /**\n   * @method Elem#prev\n   * @public\n   * @param {String} [selector = null] - If present, finds previous element to every elem that matches the selector.\n   * If not, finds previous element to each element in the set.\n   * @returns {Elem} New instance of Elem.\n   * @description Method for finding previous element to each element in the set.\n   *\n   * @example\n   * elem.next();       // finds previous element to each element in the set\n   * elem.next('.foo'); // finds previous element to each element that has 'foo' class\n   */\n  prev(selector = null) {\n    return this.object((elems, elem) => {\n      /* eslint no-cond-assign: 0 */\n      while (elem = elem.previousSibling) {\n        if (new Elem(elem).is(selector)) {\n          return elems.add(elem);\n        }\n      }\n    }, new Elem());\n  }\n\n  /**\n   * @method Elem#prop\n   * @public\n   * @param {String|Object.<String, ElemValueCallback|*>} property - Either a string of a property or an assigned object.\n   * @param {ElemValueCallback|*} [value] - If a property parameter is a string\n   * this has to be an assigned value if it's present.\n   * @returns {Elem|*} Returns this if it's setter or a value if getter.\n   * @description Method that is either a property getter for the first element in the set\n   * or a setter for every element in the set.\n   *\n   * @example\n   * elem.prop('draggable', false);\n   * elem.prop('draggable'); // false\n   */\n  prop(property, value) {\n    if (arguments.length <= 1 && isString(property)) {\n      return this.$[0] ? this.$[0][property] : undefined;\n    }\n\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    return this.forEach((elem, index) => {\n      iterate(property, (value, prop) => {\n        elem[prop] = isFunction(value) ? value(elem[prop], elem, index) : value;\n      });\n    });\n  }\n\n  /**\n   * @method Elem#ref\n   * @public\n   * @param {String|ElemValueCallback} [link] - If it's present link to a resource.\n   * @returns {Elem|String} If the link argument isn't present it's a getter of the 'src' attribute\n   * for the one of following elements: img, script, iframe, audio, video; of the 'action' attribute\n   * for a form element and of the 'href' attribute for the rest. If it's present it's a setter\n   * of the same attribute for all the element in the set.\n   * @description Method for getting resources links and setting them.\n   *\n   * @example\n   * elem.ref('/some/cool/image.png');\n   * elem.ref(); // '/some/cool/image.png'\n   */\n  ref(link) {\n    if (!arguments.length) {\n      return this.attr(refSwitcher(this.name));\n    }\n\n    return this.forEach((elem) => {\n      elem = new Elem(elem);\n\n      elem.attr(refSwitcher(elem.name), link);\n    });\n  }\n\n  /**\n   * @method Elem#remove\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Removes all the elements from the set from the document.\n   * Note: it doesn't remove them from the set so watch out for the memory leaks.\n   *\n   * @example\n   * elem.remove();\n   */\n  remove() {\n    return this.forEach((elem) => {\n      const parent = elem.parentNode;\n\n      if (parent) {\n        parent.removeChild(elem);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#removeAttr\n   * @public\n   * @param {...String} attributes - Attributes to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the attributes from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeAttr('foo', 'bar', 'baz');\n   */\n  removeAttr(...attributes) {\n    return this.forEach((elem) => {\n      if (!isElement(elem)) {\n        return;\n      }\n\n      iterate(arguments, (attr) => {\n        const ns = attrNSSwitcher(attr, [new Elem(elem)]);\n\n        if (isNull(ns)) {\n          elem.removeAttribute(attr);\n        } else {\n          elem.removeAttributeNS(ns, attr);\n        }\n      });\n    });\n  }\n\n  /**\n   * @method Elem#removeClass\n   * @public\n   * @param {...String} classes - Classes to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the classes from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeClass('foo', 'bar', 'baz');\n   */\n  removeClass(...classes) {\n    return this.forEach((elem) => {\n      const list = elem.classList;\n\n      iterate(isElement(elem) && arguments, (cls) => list.remove(cls));\n    });\n  }\n\n  /**\n   * @method Elem#removeCSS\n   * @public\n   * @param {...String} props - CSS properties to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the CSS properties from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeCSS('display', 'position', 'margin');\n   */\n  removeCSS(...props) {\n    return this.forEach((elem) => {\n      if (!isElement(elem)) {\n        return;\n      }\n\n      iterate(arguments, (css) => {\n        elem.style.removeProperty(css);\n      });\n    });\n  }\n\n  /**\n   * @method Elem#replace\n   * @public\n   * @param {String|Elem|Element} element - Element to replace the first element in the set\n   * with a set of elements specified by the argument (Element, set of elements or a selector of them).\n   * @returns {Elem} Returns this.\n   * @description Method is similar to\n   * [Node#replaceChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/replaceChild}.\n   *\n   * @example\n   * elem.replace(elem2);\n   * elem.replace(document.getElementById('id'));\n   * elem.replace('#id div.c1');\n   */\n  replace(element) {\n    element = toFind(element);\n\n    const parent = this.first().parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    let elem = parent;\n    let method = 'into';\n    const next = this.next().first().$[0];\n    const prev = this.prev().first().$[0];\n\n    if (next) {\n      elem = next;\n      method = 'insertBefore';\n    } else if (prev) {\n      elem = prev;\n      method = 'insertAfter';\n    }\n\n    this.first().remove();\n\n    element[method](elem);\n  }\n\n  /**\n   * @method Elem#setOf\n   * @public\n   * @param {String} type - HTML element type.\n   * @param {Number|Object|Array.<*>} iterator - A number (how many elements to create inside each element),\n   * an object or an array to iterate over.\n   * @param {ElemSetOfCallback} callback\n   * @returns {Elem} New instance of Elem.\n   * @description Function for creating set of elements inside each element in the set based on an array or an object.\n   *\n   * @example\n   * table.setOf('tr', [[1, 2], [3, 4], [5, 6]], (row, array) => {\n   *   D(row).setOf('td', array, (col, number) => {\n   *     D(col).text(number);\n   *   });\n   * });\n   */\n  setOf(type, iterator, callback) {\n    validate({ 2: callback }, { 2: ['function'] }, 'Elem#setOf');\n\n    iterator = new Super(iterator).$;\n\n    if (isNumber(iterator)) {\n      try {\n        validate({ 1: iterator }, { 1: ['intLike', '>=0'] }, 'Elem#setOf');\n      } catch (e) {\n        throw new Error('2nd argument must be either or non-negative integer, or object! (at Elem#setOf)');\n      }\n\n      iterator = array(iterator).$;\n    }\n\n    return this.object((elems, elem, index) => {\n      iterate(iterator, (value, key) => {\n        const created = new Elem(elem).create(type);\n\n        callback(created.$[0], value, key, iterator, elem, index);\n\n        elems.add(created);\n      });\n    }, new Elem());\n  }\n\n  /**\n   * @method Elem#show\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Shows all elements in the set.\n   * If an element was hidden using {@link Elem#hide} previous display is set.\n   *\n   * @example\n   * elem.show();\n   */\n  show() {\n    return this.forEach((elem) => {\n      const { dwayneData } = elem;\n\n      elem = new Elem(elem);\n\n      if (elem.css('display').indexOf('none') === 0) {\n        elem.css('display', dwayneData.previousDisplay);\n      }\n\n      dwayneData.previousDisplay = '';\n    });\n  }\n\n  /**\n   * @method Elem#text\n   * @public\n   * @param {String|ElemValueCallback|*} [text] - Text to write instead of current text.\n   * @returns {Elem|String} If no arguments passed text of the first element in the set returned.\n   * Otherwise all elements texts in the set are set to the text argument.\n   * @description Gets or sets text.\n   *\n   * @example\n   * elem.text('123');\n   * elem.text(); // '123'\n   */\n  text(text) {\n    if (!arguments.length) {\n      return this.prop(textProperty);\n    }\n\n    return this.forEach((elem, index) => {\n      const txt = elem[textProperty];\n\n      new Elem(elem).prop(\n        textProperty,\n        isFunction(text)\n          ? text(txt, elem, index)\n          : text\n      );\n    });\n  }\n\n  /**\n   * @method Elem#toggleAttr\n   * @public\n   * @param {String} attr - Attribute to toggle.\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the attribute\n   * with the '' value and if falsey method removes the attribute. If not present method adds\n   * the attribute if it doesn't exist and removes if it does.\n   * @returns {Elem} Returns this.\n   * @description Method for toggling attributes.\n   *\n   * @example\n   * elem.toggleAttr('attr');\n   * elem.toggleAttr('attr', someCondition);\n   */\n  toggleAttr(attr, condition) {\n    return this.forEach((elem) => {\n      elem = new Elem(elem);\n\n      if (arguments.length < 2 ? !elem.hasAttr(attr) : condition) {\n        elem.attr(attr, '');\n      } else {\n        elem.removeAttr(attr);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#toggleAttr\n   * @public\n   * @param {String} cls - Class to toggle.\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the class\n   * and if falsey method removes the class. If not present method adds\n   * the class if it doesn't exist and removes if it does.\n   * @returns {Elem} Returns this.\n   * @description Method for toggling classes.\n   *\n   * @example\n   * elem.toggleClass('cls');\n   * elem.toggleClass('cls', someCondition);\n   */\n  toggleClass(cls, condition) {\n    return (arguments.length < 2 ? !this.hasClass(cls) : condition)\n      ? this.addClass(cls)\n      : this.removeClass(cls);\n  }\n\n  get toStringTag() {\n    return toStringTag(this.$$);\n  }\n\n  /**\n   * @method Elem#up\n   * @public\n   * @param {Integer} [level = 1] - What level up along the tree should be the parent.\n   * @returns {Elem} New instance of Elem.\n   * @description Creates a collection of parents of level &lt;level&gt;.\n   *\n   * @example\n   * elem.up();\n   * elem.up(2);\n   */\n  up(level = 1) {\n    validate([level], [['intLike', '>=0']], 'Elem#up');\n\n    level = Number(level);\n\n    return this.object((elems, elem) => {\n      let n = level;\n\n      while (n-- && elem) {\n        elem = elem.parentNode;\n      }\n\n      elems.add(elem);\n    }, new Elem());\n  }\n\n  /**\n   * @method Elem#validate\n   * @public\n   * @param {ValidateCallback} [validator] - If present, function that validates inputs.\n   * @returns {Elem|Object.<String, Error|*>|null}\n   * If a callback argument provided returns this. If no arguments provided returns either an object\n   * with input names keys and errors values or null if no errors found.\n   * @description If a callback argument provided adds it to the element validators list.\n   * If no arguments provided validates every input element in the set with its own functions.\n   * If an element is a form it validates all input elements inside it. After the validation\n   * fires 'validate' event with 'valid' and 'error' (if form it's errors) properties.\n   *\n   * @example\n   * form.on('input change', 'input', (value, input) => {\n   *   input = D(input);\n   *\n   *   if (Number(value) % 3) {\n   *     input.addClass('invalid');\n   *\n   *     throw new Error('The value should be divided by 3!');\n   *   }\n   *\n   *   input.removeClass('invalid');\n   * });\n   */\n  validate(validator) {\n    validate([validator], ['function||!'], 'Elem#validate');\n\n    if (validator) {\n      return this.forEach(({ dwayneData }) => {\n        dwayneData.validators.push(validator);\n      });\n    }\n\n    const errors = new Super({ errors: null });\n\n    this\n      .filter(`${ inputElements }, form`)\n      .forEach((elem, index) => {\n        if (getName(elem) === 'form') {\n          let formErrors = { errors: null };\n          const form = new Elem(elem);\n          const inputs = form.find(inputElements);\n\n          inputs.forEach((input, index) => {\n            validatorWrap(input, index, formErrors);\n          });\n\n          errors.deepAssign(formErrors);\n\n          formErrors = formErrors.errors;\n\n          form.dispatch('validate', {}, {\n            valid: !formErrors,\n            errors: formErrors\n          });\n\n          return inputs.forEach((input) => {\n            const inputError = (formErrors || {})[input.name];\n\n            new Elem(input).dispatch('validate', {}, {\n              valid: !inputError,\n              error: inputError || null\n            });\n          });\n        }\n\n        let inputError = { errors: null };\n\n        validatorWrap(elem, index, inputError);\n        errors.deepAssign(inputError);\n\n        inputError = (inputError.errors || {})[elem.name];\n\n        new Elem(elem).dispatch('validate', {}, {\n          valid: !inputError,\n          error: inputError || null\n        });\n      });\n\n    function validatorWrap(input, index, errors) {\n      try {\n        if (input.validity && !input.validity.valid) {\n          throw new Error(input.validationMessage);\n        }\n\n        input.dwayneData.validators.forEach((validator) => {\n          validator(input.value, input, index);\n        });\n      } catch (err) {\n        (errors.errors = errors.errors || {})[input.name] = err;\n      }\n    }\n\n    if (errors.every((error) => isNull(error))) {\n      return null;\n    }\n\n    return errors.$.errors;\n  }\n\n  /**\n   * @method Elem#width\n   * @public\n   * @param {*|ElemValueCallback} [width] - Width to set.\n   * @returns {Elem|String} If no arguments passed width of the first element in the set returned.\n   * Otherwise all elements widths in the set are set to the width argument.\n   * @description Gets or sets width.\n   *\n   * @example\n   * elem.width(123);\n   * elem.width(); // 123\n   */\n  width(width) {\n    return this.prop.apply(this, new Arr(arguments).unshift('width').$);\n  }\n}\n\ndefineProperties(Elem.prototype, {\n  [Symbol.toStringTag]: 'Elem'\n});\n\n/**\n * @const {Elem} win\n * @type {Elem}\n * @public\n * @description Elem instance of window.\n */\nconst win = new Elem(global);\n\n/**\n * @const {Elem} doc\n * @type {Elem}\n * @public\n * @description Elem instance of document.\n */\nconst doc = new Elem(nativeDocument);\n\n/**\n * @const {Elem} html\n * @type {Elem}\n * @public\n * @description Elem instance of document.documentElement.\n */\nconst html = new Elem(nativeDocument.documentElement);\n\n/**\n * @const {Elem} body\n * @type {Elem}\n * @public\n * @description Elem instance of document.body.\n */\nconst body = new Elem(nativeDocument.body);\n\n/**\n * @const {Elem} head\n * @type {Elem}\n * @public\n * @description Elem instance of document.head.\n */\nconst head = new Elem(nativeDocument.head);\n\nconst elements = new Arr(htmlElements).concat(svgElements).$;\nconst props = new Arr(elements).map((type) => new Str(type).toCamelCase().$).$;\n\ndynamicDefineProperties(Elem.prototype, props, (elem, i) => function () {\n  return this.create.apply(this, new Arr(arguments).unshift(elements[i]).$);\n});\n\ndynamicDefineProperties(Elem.prototype, canvasGetMethods, (method) => function () {\n  const ctx = this.ctx();\n\n  if (ctx) {\n    return ctx[method].apply(ctx, arguments);\n  }\n});\n\ndynamicDefineProperties(Elem.prototype, canvasRestMethods, (method) => function () {\n  const ctx = this.ctx();\n\n  if (ctx) {\n    ctx[method].apply(ctx, arguments);\n  }\n\n  return this;\n});\n\n/**\n * @function toFind\n * @private\n * @param {Element|Elem|String} elem - Element, selector of Elements or Elem.\n * @returns {Elem} Instance of Elem.\n */\nfunction toFind(elem) {\n  if (isElem(elem)) {\n    return elem;\n  }\n\n  if (isString(elem)) {\n    elem = find(elem);\n  }\n\n  return new Elem(elem);\n}\n\n/**\n * @function isElem\n * @private\n * @param {*} value - Value to check if it's Elem.\n * @returns {Boolean} If the value is Elem.\n * @description Returns if the value is Elem or not.\n */\nfunction isElem(value) {\n  return value instanceof Elem;\n}\n\n/**\n * @function isWindow\n * @private\n * @param {*} value - Value to check if it's Window.\n * @returns {Boolean} If the value is Window.\n * @description Returns if the value is Window or not.\n */\nfunction isWindow(value) {\n  return toStringTag(value) === 'Window';\n}\n\n/**\n * @function isHTMLDocument\n * @private\n * @param {*} value - Value to check if it's HTMLDocument.\n * @returns {Boolean} If the value is HTMLDocument.\n * @description Returns if the value is HTMLDocument or not.\n */\nfunction isHTMLDocument(value) {\n  return toStringTag(value) === 'HTMLDocument';\n}\n\n/**\n * @function isDocumentFragment\n * @private\n * @param {*} value - Value to check if it's a DocumentFragment.\n * @returns {Boolean} If the value is a DocumentFragment.\n * @description Returns if the value is a DocumentFragment or not.\n */\nfunction isDocumentFragment(value) {\n  return toStringTag(value) === 'DocumentFragment';\n}\n\n/**\n * @function isStyleRule\n * @private\n * @param {*} value - Value to check if it's a style rule.\n * @returns {Boolean} If the value is a style rule.\n * @description Returns if the value is a style rule or not.\n */\nfunction isStyleRule(value) {\n  return toStringTag(value) === 'CSSStyleRule';\n}\n\n/**\n * @function\n * @private\n * @param {*} value - Value to check if it's Comment or Text.\n * @returns {Boolean} If the value is HTMLDocument.\n * @description Returns if the value is Comment or Text or not.\n */\nfunction isCommentOrText(value) {\n  const tag = toStringTag(value);\n\n  return tag === 'Comment' || tag === 'Text';\n}\n\n/**\n * @function getElem\n * @private\n * @param {Elem} elem - Element to check.\n * @returns {Element} The argument or a fallback if needed.\n */\nfunction getElem(elem) {\n  return isElement(elem.$[0]) ? elem.$[0] : emptyDiv;\n}\n\n/**\n * @function getName\n * @private\n * @param {Element} [elem] - Element which name is needed to know.\n * @returns {String} Element name.\n */\nfunction getName(elem) {\n  return (elem && elem.nodeName && elem.nodeName.toLowerCase()) || '';\n}\n\n/**\n * @function addDwayneData\n * @private\n * @param {Element} elem - Element to add dwayneData to.\n * @returns {void}\n */\nfunction addDwayneData(elem) {\n  if (!{}.hasOwnProperty.call(elem, 'dwayneData') && !isWindow(elem)) {\n    /**\n     * @member Element#dwayneData\n     * @type {Object}\n     * @protected\n     * @property {String} previousDisplay - Parameter used for hiding/showing elements.\n     * @property {Object.<String, Super>} removeListeners - Parameter used for remove event listeners.\n     * @property {CanvasRenderingContext2D} [ctx] - Canvas rendering context.\n     * @property {Arr} validators - Validators assigned to element.\n     * @description D data.\n     */\n    Object.defineProperty(elem, 'dwayneData', {\n      value: {\n        previousDisplay: '',\n        listeners: {},\n        ctx: getName(elem) === 'canvas' && elem.getContext('2d'),\n        validators: new Arr([])\n      }\n    });\n  } else if (isWindow(elem) && !windowsDwayneData.some(({ element }) => element === elem)) {\n    windowsDwayneData.push({\n      element: elem,\n      listeners: {}\n    });\n  }\n}\n\nconstructors[2].push({\n  check: (elem) => (\n    isElement(elem) ||\n    isWindow(elem) ||\n    isHTMLDocument(elem) ||\n    isCommentOrText(elem) ||\n    isDocumentFragment(elem) ||\n    /^(HTMLCollection|NodeList)$/.test(toStringTag(elem))\n  ),\n  cls: Elem\n});\n\n/**\n * @function find\n * @public\n * @param {String} selector - Selector to find.\n * @param {Element} [base = document] - Base to find in.\n * @returns {Elem} New instance of Elem.\n * @description Synonym for\n * [Document#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Document/querySelectorAll}.\n */\nfunction find(selector, base = nativeDocument) {\n  return new Elem(\n    isElement(base) || isHTMLDocument(base)\n      ? base.querySelectorAll(String(selector))\n      : []\n  );\n}\n\n/**\n * @function parseHTML\n * @public\n * @param {String} html - HTML to parse.\n * @param {Boolean} [collapseWhiteSpace = false] - If the whitespace should be\n * collapsed during the parsing.\n * @returns {Elem} New instance of Elem.\n * @description Parses HTML and returns a wrap of #document-fragment containing the contents.\n *\n * @example\n * parseHTML('<div>123</div>'); // Elem\n */\nfunction parseHTML(html, collapseWhiteSpace) {\n  const json = markupToJSON(html, collapseWhiteSpace);\n  const template = doc.template();\n  const elem = new Elem(template.$[0].content);\n\n  json.forEach(function forEachNode(node) {\n    const {\n      name,\n      attrs,\n      value,\n      parent,\n      children\n    } = node;\n\n    const parentNode = parent.elem || elem;\n    const element = parentNode.create(name);\n\n    node.elem = element;\n\n    if (value) {\n      element.text(value);\n    }\n\n    if (attrs) {\n      element.attr(new Super(attrs).map((value) => (\n        value === true ? '' : value\n      )).$);\n    }\n\n    if (name === 'template') {\n      node.elem = new Elem(element.prop('content'));\n    }\n\n    if (children) {\n      children.forEach(forEachNode);\n    }\n  });\n\n  return new Elem(elem);\n}\n\n/**\n * @function px\n * @public\n * @param {String|Number} size - String containing pixels value or a number.\n * @returns {Number} Number of pixels.\n * @description Function for parsing pixel strings.\n *\n * @example\n * px('0px');  // 0\n * px('42px'); // 42\n */\nfunction px(size) {\n  return Number(String(size).replace(/px$/, ''));\n}\n\nexport { Elem, win, doc, html, body, head, find, parseHTML, px };\n","export function registerDBlock(Block) {\n  class DBlock extends Block {\n    static template = ''\n      + '<d-elements'\n      + '  value=\"{elems}\"'\n      + '  parentScope=\"{ParentScope}\"'\n      + '  parentTemplate=\"{ParentTemplate}\"'\n      + '/>';\n\n    afterConstruct() {\n      const {\n        parentScope: {\n          $$: {\n            parentScope: parentParentScope,\n            parentTemplate: parentParentTemplate,\n            argsChildren: children\n          }\n        },\n        argsChildren: ownChildren,\n        parentTemplate,\n        dBlockName\n      } = this.$$;\n      let found;\n\n      if (ownChildren.length) {\n        return;\n      }\n\n      this.ParentScope = parentParentScope;\n      this.ParentTemplate = parentParentTemplate;\n\n      if (dBlockName) {\n        found = children.find(({ name: nodeName }) => nodeName === `d-block:${ dBlockName }`);\n\n        if (!found) {\n          let parent = this;\n\n          /* eslint no-empty: 0 */\n          while (\n            (parent = parent.$$.parentScope)\n            && !(found = parent.$$.dBlocks.find(({ $$: { dBlockName: DBlockName } }) => DBlockName === dBlockName))\n            && parent.$$.parentScope.$$.name === '#d-item'\n          ) {}\n\n          if (found) {\n            this.ParentScope = parent;\n            this.ParentTemplate = parentTemplate;\n            found.value = {\n              children: found.value.$$.argsChildren\n            };\n          }\n        }\n\n        this.elems = found && found.value.children.length\n          ? found.value.children\n          : null;\n      } else {\n        this.elems = children;\n      }\n    }\n  }\n\n  return {\n    name: 'd-block',\n    value: DBlock\n  };\n}\n","import { Arr, array } from '../Arr';\nimport { Super } from '../Super';\nimport {\n  assign, iterate,\n  isArray, isFunction, isNumber\n} from '../helpers';\n\nexport function registerDEach(Block, createBlock) {\n  class DEach extends Block {\n    constructor(opts) {\n      super(opts);\n\n      const {\n        args: {\n          item: itemName = '$item',\n          index: indexName = '$index'\n        }\n      } = this;\n\n      assign(this.$$, {\n        uids: new Super({}),\n        items: new Arr([]),\n        UID: this.args.uid || undefined,\n        itemName,\n        indexName\n      });\n    }\n\n    afterRender() {\n      this.watch('args.set', 'args.sortBy', 'args.filterBy', () => {\n        const {\n          argsChildren,\n          uids,\n          parentScope,\n          parentElem,\n          parentTemplate,\n          scope,\n          itemName,\n          indexName,\n          UID\n        } = this.$$;\n        const {\n          args: { sortBy }\n        } = this;\n        const $uids = uids.$;\n        const newKeys = {};\n        const newUIDs = {};\n        let {\n          set,\n          filterBy\n        } = this.args;\n\n        if (isNumber(set)) {\n          set = array(set).$;\n        }\n\n        if (isArray(set) && isFunction(sortBy)) {\n          set = new Arr(set)\n            .slice()\n            .sort(sortBy)\n            .$;\n        }\n\n        if (isFunction(filterBy)) {\n          filterBy = [filterBy];\n        }\n\n        if (isArray(filterBy)) {\n          iterate(filterBy, (filter) => {\n            set = new Super(set).filter(filter).$;\n          });\n        }\n\n        new Super(set).forEach((item, index) => {\n          scope[itemName] = item;\n          scope[indexName] = index;\n\n          const uid = parentScope.$$.evaluate(UID, null, null, false, false, this);\n\n          newKeys[uid] = newKeys[uid] || {};\n          newKeys[uid][index] = true;\n          newUIDs[index] = uid;\n        });\n\n        scope[itemName] = null;\n        scope[indexName] = null;\n\n        uids.forEach((items, uid) => {\n          if (!newKeys[uid]) {\n            items.forEach((Item) => {\n              Item.$$.remove();\n            });\n\n            return;\n          }\n\n          items.splice(Object.keys(newKeys[uid]).length).forEach((Item) => {\n            Item.$$.remove();\n          });\n        });\n\n        let prevBlock;\n\n        new Super(set).forEach((item, index) => {\n          const uid = newUIDs[index];\n          let block;\n\n          if ($uids[uid] && $uids[uid].length) {\n            block = newKeys[uid][index] = uids.$[uid].shift();\n            block.$$.scope[indexName] = index;\n            block.$$.scope[itemName] = item;\n\n            if (block.$$.prevBlock !== prevBlock && prevBlock) {\n              prevBlock.$$.insertAfterIt(block.$$.content, true);\n            }\n          } else {\n            block = newKeys[uid][index] = createBlock({\n              node: {\n                itemName,\n                indexName,\n                item,\n                index,\n                name: '#d-item',\n                children: argsChildren\n              },\n              parent: this,\n              parentElem,\n              parentBlock: this,\n              parentScope,\n              parentTemplate,\n              prevBlock\n            });\n          }\n\n          block.$$.prevBlock = prevBlock;\n          prevBlock = block;\n        });\n\n        this.$$.uids = new Super(newKeys).map((items) => (\n          new Super(items).values()\n        ));\n      });\n    }\n  }\n\n  return {\n    name: 'd-each',\n    value: DEach\n  };\n}\n","import { Arr } from '../Arr';\nimport { Elem } from '../Elem';\n\nexport function registerDElements(Block, createBlock) {\n  class DElements extends Block {\n    afterConstruct() {\n      const { parentElem } = this.$$;\n      const {\n        parentScope,\n        parentTemplate\n      } = this.args;\n      let firstTime = true;\n\n      this.watch('args.value', () => {\n        if (firstTime) {\n          firstTime = false;\n\n          return;\n        }\n\n        const {\n          children,\n          mixins,\n          parent,\n          watchersToRemove,\n          content\n        } = this.$$;\n        const { value } = this.args;\n\n        children.forEach((child) => {\n          child.$$.remove(true);\n        });\n        mixins.forEach((mixin) => {\n          mixin.$$.remove(true);\n        });\n        content.remove();\n\n        if (parent instanceof Block) {\n          parent.$$.removeContent(content);\n        }\n\n        this.$$.children = new Arr([]);\n        this.$$.mixins = new Arr([]);\n        this.$$.watchersToRemove = watchersToRemove.filter(({ watchers, watcher, forDElements }) => {\n          if (forDElements) {\n            return true;\n          }\n\n          const index = watchers.indexOf(watcher);\n\n          if (index !== -1) {\n            watchers.splice(index, 1);\n          }\n        });\n        this.$$.content = new Elem();\n\n        let prevBlock;\n\n        new Arr(value || []).forEach((child) => {\n          prevBlock = createBlock({\n            node: child,\n            parent: this,\n            parentElem,\n            parentBlock: this,\n            parentScope,\n            parentTemplate,\n            prevBlock\n          });\n        });\n      });\n    }\n  }\n\n  return {\n    name: 'd-elements',\n    value: DElements\n  };\n}\n","export function registerDIf(Block) {\n  class DIf extends Block {\n    static template = ''\n      + '<d-elements'\n      + '  value=\"{elems}\"'\n      + '  parentScope=\"{$$.parentScope}\"'\n      + '  parentTemplate=\"{$$.parentTemplate}\"'\n      + '/>';\n\n    constructor(opts) {\n      super(opts);\n\n      const { parentScope } = this.$$;\n      let index = Infinity;\n      const values = this.$$.argsChildren.map((child, i) => {\n        const {\n          name,\n          attrs,\n          children\n        } = child;\n        let cond = attrs.if;\n\n        if (name !== 'd-else' && cond) {\n          cond = parentScope.$$.evaluate(cond, (newValue) => {\n            if (!!newValue === values.$[i]) {\n              return;\n            }\n\n            values.$[i] = !!newValue;\n\n            if (i > index) {\n              return;\n            }\n\n            if (i < index) {\n              index = i;\n              this.elems = children;\n\n              return;\n            }\n\n            const found = values.find(Boolean);\n\n            if (found) {\n              index = found.key;\n              this.elems = this.$$.argsChildren.$[found.key].children;\n            } else {\n              index = Infinity;\n              this.elems = null;\n            }\n          }, this);\n        } else {\n          cond = true;\n        }\n\n        if (cond && index === Infinity) {\n          index = i;\n          this.elems = children;\n        }\n\n        return !!cond;\n      });\n    }\n  }\n\n  return {\n    name: 'd-if',\n    value: DIf\n  };\n}\n","export function registerDItem(Block) {\n  class DItem extends Block {\n    static template = ''\n      + '<d-elements'\n      + '  value=\"{$$.argsChildren}\"'\n      + '  parentScope=\"{this}\"'\n      + '  parentTemplate=\"{$$.parentTemplate}\"'\n      + '/>';\n  }\n\n  return {\n    name: '#d-item',\n    value: DItem\n  };\n}\n","import { Arr } from '../Arr';\nimport { Super } from '../Super';\n\nexport function registerDSwitch(Block) {\n  class DSwitch extends Block {\n    static template = ''\n      + '<d-elements'\n      + '  value=\"{elems}\"'\n      + '  parentScope=\"{$$.parentScope}\"'\n      + '  parentTemplate=\"{$$.parentTemplate}\"'\n      + '/>';\n\n    index = Infinity;\n\n    constructor(opts) {\n      super(opts);\n\n      const {\n        $$: { parentScope },\n        args,\n        args: { value }\n      } = this;\n      let wasDefault;\n\n      this.values = this.$$.argsChildren.object((values, child, i) => {\n        const {\n          name,\n          attrs,\n          children\n        } = child;\n        let val = attrs.if;\n\n        if (wasDefault) {\n          return;\n        }\n\n        if (name !== 'd-case' && name !== 'd-default') {\n          return;\n        }\n\n        if (name === 'd-default') {\n          wasDefault = true;\n        }\n\n        if (name === 'd-default') {\n          val = args.value;\n        } else if (val) {\n          val = parentScope.$$.evaluate(val, (newValue) => {\n            if (this.equals(this.values.$[i].value, newValue)) {\n              return;\n            }\n\n            this.values.$[i].value = newValue;\n\n            if (i > this.index) {\n              return;\n            }\n\n            if (i < this.index) {\n              this.index = i;\n              this.elems = children;\n\n              return;\n            }\n\n            const found = this.values.find(({ value }) => (\n              this.equals(value, args.value)\n            ));\n\n            if (found) {\n              this.index = found.key;\n              this.elems = found.value.children;\n            } else {\n              this.index = Infinity;\n              this.elems = null;\n            }\n          }, this);\n        } else {\n          val = undefined;\n        }\n\n        if (this.equals(val, value) && this.index === Infinity) {\n          this.index = i;\n          this.elems = children;\n        }\n\n        values.push({\n          name,\n          children,\n          value: val\n        });\n      }, new Arr([]));\n    }\n\n    afterConstruct() {\n      let firstTime = true;\n\n      this.watch('args.value', () => {\n        if (firstTime) {\n          firstTime = false;\n\n          return;\n        }\n\n        const {\n          value: newValue\n        } = this.args;\n\n        this.index = Infinity;\n        this.values.forEach(({ name, value, children }, i) => {\n          const val = name === 'd-default'\n            ? newValue\n            : value;\n\n          if (this.equals(val, newValue) && this.index === Infinity) {\n            this.index = i;\n            this.elems = children;\n          }\n        });\n\n        if (this.index === Infinity) {\n          this.elems = null;\n        }\n      });\n    }\n\n    equals(value1, value2) {\n      return new Super(value1).equals(value2);\n    }\n  }\n\n  return {\n    name: 'd-switch',\n    value: DSwitch\n  };\n}\n","import { Super } from '../Super';\n\nexport function registerDAttr(Mixin) {\n  class DAttr extends Mixin {\n    attrs = {};\n\n    afterUpdate(newValue) {\n      const {\n        elem,\n        args,\n        attrs\n      } = this;\n\n      if (args) {\n        newValue = new Super(args).object((attrs, attr) => {\n          attrs[attr] = newValue;\n        });\n      }\n\n      newValue = new Super(newValue || {}).$;\n\n      new Super(attrs).forEach((value, prop) => {\n        if (!newValue[prop]) {\n          elem.removeAttr(prop);\n        }\n      });\n      elem.attr(newValue);\n\n      this.attrs = newValue;\n    }\n\n    beforeRemove() {\n      const {\n        elem,\n        attrs\n      } = this;\n\n      elem.removeAttr.apply(elem, new Super(attrs).keys().$);\n    }\n  }\n\n  return {\n    name: 'd-attr',\n    value: DAttr\n  };\n}\n\n","import { isFunction } from '../helpers';\n\nexport function registerDBind(Mixin) {\n  class DBind extends Mixin {\n    afterUpdate(value) {\n      if (this.off) {\n        this.off();\n      }\n\n      if (!isFunction(value)) {\n        return;\n      }\n\n      if (this.args) {\n        this.off = this.elem.on(this.args.join(','), value);\n      } else {\n        console.error('Provide \"d-bind\" mixin with an event names (like \"d-bind(click)\" or \"d-bind(keyup, keypress)\")!');\n      }\n    }\n\n    beforeRemove() {\n      const { off } = this;\n\n      if (off) {\n        off();\n      }\n    }\n  }\n\n  return {\n    name: 'd-bind',\n    value: DBind\n  };\n}\n","import { Super } from '../Super';\nimport { isArray, isString, iterate } from '../helpers';\n\nexport function registerDClass(Mixin) {\n  class DClass extends Mixin {\n    classes = [];\n\n    afterUpdate(newValue) {\n      const {\n        elem,\n        args,\n        classes\n      } = this;\n      const newClasses = [];\n\n      newValue = new Super(newValue).$;\n\n      if (args) {\n        newValue = newValue\n          ? args\n          : [];\n      }\n\n      if (isString(newValue)) {\n        newValue = newValue.split(/\\s+/);\n      }\n\n      if (isArray(newValue)) {\n        iterate(classes, (cls) => {\n          if (newValue.indexOf(cls) === -1) {\n            elem.removeClass(cls);\n          }\n        });\n        iterate(newValue, (cls) => {\n          if (isString(cls)) {\n            newClasses.push(cls);\n            elem.addClass(cls);\n          }\n        });\n      } else {\n        iterate(classes, (cls) => {\n          if (!newValue || !newValue[cls]) {\n            elem.removeClass(cls);\n          }\n        });\n        iterate(newValue, (val, cls) => {\n          if (val) {\n            newClasses.push(cls);\n            elem.addClass(cls);\n          }\n        });\n      }\n\n      this.classes = newClasses;\n    }\n\n    beforeRemove() {\n      const { elem } = this;\n\n      elem.removeClass.apply(elem, new Super(this.value).keys().$);\n    }\n  }\n\n  return {\n    name: 'd-class',\n    value: DClass\n  };\n}\n","import { isFunction, isString } from '../helpers';\n\nexport function registerDElem(Mixin, createBlock, Block) {\n  class DElem extends Mixin {\n    static evaluate = false;\n\n    constructor(opts) {\n      super(opts);\n\n      const {\n        args,\n        parentTemplate,\n        elem\n      } = this;\n      let scope = parentTemplate;\n      let value = this.evaluateOnce();\n\n      if (args) {\n        scope = value instanceof Block\n          ? value\n          : parentTemplate;\n        value = args[0];\n      }\n\n      if (isFunction(value)) {\n        value(elem);\n      } else if (isString(value)) {\n        scope[value] = elem;\n      }\n    }\n  }\n\n  return {\n    name: 'd-elem',\n    value: DElem\n  };\n}\n","export function registerDHide(Mixin) {\n  class DHide extends Mixin {\n    afterUpdate(value) {\n      const { elem } = this;\n\n      if (value) {\n        elem.hide();\n      } else {\n        elem.show();\n      }\n    }\n\n    beforeRemove() {\n      this.elem.show();\n    }\n  }\n\n  return {\n    name: 'd-hide',\n    value: DHide\n  };\n}\n","import { isFunction, isString } from '../helpers';\n\nexport function registerDNode(Mixin, createBlock, Block) {\n  class DNode extends Mixin {\n    static evaluate = false;\n\n    constructor(opts) {\n      super(opts);\n\n      const {\n        args,\n        parentTemplate,\n        node\n      } = this;\n      let scope = parentTemplate;\n      let value = this.evaluateOnce();\n\n      if (args) {\n        scope = value instanceof Block\n          ? value\n          : parentTemplate;\n        value = args[0];\n      }\n\n      if (isFunction(value)) {\n        value(node);\n      } else if (isString(value)) {\n        scope[value] = node;\n      }\n    }\n  }\n\n  return {\n    name: 'd-node',\n    value: DNode\n  };\n}\n","export function registerDOn(Mixin) {\n  class DOn extends Mixin {\n    static evaluate = false;\n\n    constructor(opts) {\n      super(opts);\n\n      if (this.args) {\n        this.off = this.elem.on(this.args.join(','), () => {\n          this.evaluateOnce();\n        });\n      } else {\n        console.error('Provide \"d-on\" mixin with an event names (like \"d-on(click)\" or \"d-on(keyup, keypress)\")!');\n      }\n    }\n\n    beforeRemove() {\n      const { off } = this;\n\n      if (off) {\n        off();\n      }\n    }\n  }\n\n  return {\n    name: 'd-on',\n    value: DOn\n  };\n}\n","export function registerDShow(Mixin) {\n  class DShow extends Mixin {\n    afterUpdate(value) {\n      const { elem } = this;\n\n      if (value) {\n        elem.show();\n      } else {\n        elem.hide();\n      }\n    }\n\n    beforeRemove() {\n      this.elem.show();\n    }\n  }\n\n  return {\n    name: 'd-show',\n    value: DShow\n  };\n}\n","import { Arr } from '../Arr';\nimport { Super } from '../Super';\nimport { isString } from '../helpers';\n\nexport function registerDStyle(Mixin) {\n  class DStyle extends Mixin {\n    css = {};\n\n    afterUpdate(newValue, oldValue) {\n      const {\n        elem,\n        args,\n        css\n      } = this;\n\n      if (args) {\n        newValue = new Super(args).object((css, prop) => {\n          css[prop] = newValue;\n        });\n      }\n\n      if (isString(newValue)) {\n        newValue = new Arr(newValue.split(/; ?/))\n          .filter()\n          .object((css, item) => {\n            const [prop, value] = item;\n\n            css[prop] = value;\n          });\n      }\n\n      newValue = new Super(newValue || {}).$;\n\n      new Super(css).forEach((value, prop) => {\n        if (!newValue[prop]) {\n          elem.removeCSS(prop);\n        }\n      });\n      elem.css(newValue);\n\n      this.css = newValue;\n    }\n\n    beforeRemove() {\n      const {\n        elem,\n        css\n      } = this;\n\n      elem.removeCSS.apply(elem, new Super(css).keys().$);\n    }\n  }\n\n  return {\n    name: 'd-style',\n    value: DStyle\n  };\n}\n","import { switcher } from '../Switcher';\nimport { isFunction } from '../helpers';\n\nconst listenerSwitcher = switcher('strictEquals', 'input')\n  .case('form', 'input, change')\n  .case('select', 'change')\n  .case('input', (type) => (\n    type === 'radio'\n    || type === 'checkbox'\n    || type === 'color'\n    || type === 'file'\n      ? 'change'\n      : 'change input'\n  ));\n\nexport function registerDValidate(Mixin) {\n  class DValidate extends Mixin {\n    static evaluate = false;\n\n    constructor(opts) {\n      super(opts);\n\n      const { elem } = this;\n      const validator = this.value = this.evaluateOnce();\n\n      if (isFunction(validator)) {\n        elem.validate(validator);\n      } else if (validator === true) {\n        this.off = elem.on(listenerSwitcher(elem.name, [elem.prop('type')]), () => {\n          elem.validate();\n        });\n      }\n    }\n\n    beforeRemove() {\n      const { value } = this;\n\n      if (isFunction(value)) {\n        const { validators } = this.node.dwayneData;\n        const index = validators.indexOf(value);\n\n        if (index !== -1) {\n          validators.splice(index, 1);\n        }\n      } else if (value === true) {\n        this.off();\n      }\n    }\n  }\n\n  return {\n    name: 'd-validate',\n    value: DValidate\n  };\n}\n","import { Arr } from '../Arr';\nimport { switcher } from '../Switcher';\nimport { isArray, isFunction, isNil, constructEvalFunction } from '../helpers';\n\nconst propSwitcher = switcher('strictEquals', (type, elem) => (\n  elem.hasAttr('contenteditable') || elem.hasAttr('contentEditable')\n    ? 'text'\n    : 'value'\n))\n  .case('select', (type, elem) => (\n    elem.hasAttr('multiple')\n      ? 'multiple-select'\n      : 'value'\n  ))\n  .case('input', (type) => {\n    if (type === 'file') {\n      return 'files';\n    }\n\n    return type === 'radio' || type === 'checkbox'\n      ? 'checked'\n      : 'value';\n  });\nconst setValueSwitcher = switcher('strictEquals', (value) => value)\n  .case('input', (value, type, inputValue) => {\n    if (type !== 'radio' && type !== 'checkbox') {\n      return value;\n    }\n\n    if (type === 'radio') {\n      return value === inputValue;\n    }\n\n    return value.indexOf(inputValue) !== -1;\n  });\nconst getValueSwitcher = switcher('strictEquals', (value) => value)\n  .case('select', (value, type, inputValue, values, elem, options, init, isMultiple) => {\n    if (!isMultiple) {\n      return value;\n    }\n\n    return options\n      .object((values, { selected, value }) => {\n        if (selected && values.indexOf(value) === -1) {\n          values.push(value);\n        }\n      }, [])\n      .$;\n  })\n  .case('input', (value, type, inputValue, values, elem, options, init) => {\n    if (type !== 'radio' && type !== 'checkbox') {\n      return value;\n    }\n\n    if (type === 'radio') {\n      return value\n        ? inputValue\n        : null;\n    }\n\n    if (!value && init) {\n      return values;\n    }\n\n    if (value) {\n      if (values) {\n        return values.indexOf(inputValue) === -1\n          ? new Arr(values).concat(inputValue).$\n          : values;\n      }\n\n      return [inputValue];\n    }\n\n    if (!isArray(values)) {\n      return [];\n    }\n\n    const index = values.indexOf(inputValue);\n\n    if (index !== -1) {\n      return [\n        ...new Arr(values).slice(0, index).$,\n        ...new Arr(values).slice(index + 1).$\n      ];\n    }\n\n    return values;\n  });\nconst listenerSwitcher = switcher('strictEquals', 'input')\n  .case('select', 'change')\n  .case('input', (type) => (\n    type === 'radio'\n    || type === 'checkbox'\n    || type === 'color'\n    || type === 'file'\n      ? 'change'\n      : 'change input'\n  ));\n\nexport function registerDValue(Mixin, createBlock, Block) {\n  class DValue extends Mixin {\n    static evaluate = false;\n\n    constructor(opts) {\n      super(opts);\n\n      const {\n        args,\n        parentTemplate,\n        elem,\n        node\n      } = this;\n      const name = elem.name;\n      const type = elem.prop('type');\n      const value = this.evaluateOnce();\n      let initialScopeValue = null;\n\n      this.prop = propSwitcher(name, [type, elem]);\n      this.name = name;\n      this.type = type;\n      this.value = value;\n      this.options = elem.find('option');\n      this.scope = parentTemplate;\n\n      if (args) {\n        this.name = args[0];\n        this.scope = value instanceof Block\n          ? value\n          : parentTemplate;\n      }\n\n      if (!isFunction(value)) {\n        initialScopeValue = this.scope.$$.evaluate(constructEvalFunction(`$.${ value }`, value), (newValue) => {\n          if (this.currentValue !== newValue) {\n            this.currentValue = newValue;\n            this.setProp(newValue);\n          }\n        }, this);\n      }\n\n      const initialElemValue = this.getProp(initialScopeValue, true);\n      const isInitialScopeValueNull = isNil(initialScopeValue);\n      const isCheckbox = type === 'checkbox';\n      const changeScope = () => {\n        this.currentValue = this.getProp(this.currentValue);\n        this.changeScope();\n      };\n\n      if (isInitialScopeValueNull || isCheckbox) {\n        this.currentValue = initialElemValue;\n        this.changeScope();\n\n        if (!isInitialScopeValueNull && isCheckbox) {\n          this.setProp(initialScopeValue);\n        }\n      } else {\n        this.currentValue = initialScopeValue;\n        this.setProp(initialScopeValue);\n      }\n\n      this.offElemListener = elem.on(listenerSwitcher(name, [type]), (e) => {\n        if (e.target === node) {\n          changeScope();\n        }\n      });\n      this.offFormListener = elem.closest('form').on('reset', () => {\n        setTimeout(changeScope, 0);\n      });\n    }\n\n    changeScope() {\n      const {\n        scope,\n        value,\n        currentValue\n      } = this;\n\n      if (isFunction(value)) {\n        value(currentValue);\n      } else {\n        scope[value] = currentValue;\n      }\n    }\n\n    setProp(value) {\n      const {\n        elem,\n        name,\n        prop,\n        type,\n        node,\n        options\n      } = this;\n\n      if (prop === 'text') {\n        elem.text(value);\n      } else if (prop === 'multiple-select') {\n        options.forEach((option) => {\n          option.selected = value.indexOf(option.value) !== -1;\n        });\n      } else {\n        elem.prop(prop, setValueSwitcher(name, [value, type, node.value]));\n      }\n    }\n\n    getProp(values, init) {\n      const {\n        elem,\n        name,\n        prop,\n        type,\n        node,\n        options\n      } = this;\n\n      return prop === 'text'\n        ? elem.text()\n        : getValueSwitcher(name, [elem.prop(prop), type, node.value, values, elem, options, init, prop === 'multiple-select']);\n    }\n\n    beforeRemove() {\n      this.offElemListener();\n      this.offFormListener();\n    }\n  }\n\n  return {\n    name: 'd-value',\n    value: DValue\n  };\n}\n","const emptySpaceRegExp = /^\\s+/;\nconst anyEmptySpaceRegExp = /\\s+/g;\nconst anyEscapedExpressionRegExp = /\\\\[\\s\\S]/g;\nconst anyDoubleQuoteRegExp = /\"/g;\nconst anyNewLineRegExp = /\\r\\n|\\r|\\n/g;\nconst anyCommaEmptySpace = /\\s*,\\s*/;\nconst properEscapedRegExp = /\\\\|u|n|f|r|t|b|v|`[0-7]/;\n\nconst thisRegExp = /^this(?![a-zA-Z_$])/;\nconst simpleExpressionRegExp = /^(?:true|false|null|undefined)(?![a-zA-Z_$])/;\nconst variableRegExp = /^[a-zA-Z_$][a-zA-Z0-9_$]*/;\nconst numberRegExp = /^(?:NaN|-?(?:(?:\\d+|\\d*\\.\\d+)(?:[E|e][+|-]?\\d+)?|Infinity))/;\nconst stringRegExp = /^(?:\"(?:(?:\\\\[\\s\\S])|[^\"\\n\\\\])*\"|'(?:(?:\\\\[\\s\\S])|[^'\\n\\\\])*')/;\nconst regexpRegExp = /^\\/(?:(?:\\\\[\\s\\S])|[^/\\n\\\\])+\\/[gimuy]*/;\nconst arrowFunctionRegExp = /^(?:(?:\\(\\s*((?:[a-zA-Z_$][a-zA-Z0-9_$]*\\s*,\\s*)?(?:[a-zA-Z_$][a-zA-Z0-9_$]*)?)\\s*\\))|([a-zA-Z_$][a-zA-Z0-9_$]*))\\s*=>/;\nconst templateStringContentRegExp = /^(?:(?:\\\\[\\s\\S])|\\$(?!\\{)|[^`$\\\\])+/;\nconst operatorRegExp = /^(?:(?:>>>|>>|<<)=?|&&|\\|\\||,|(?:\\+|-|\\*|\\/|%|&|\\||\\^|<|>|==|!=)=?|=)/;\nconst pointOperatorRegExp = /^\\.([a-zA-Z_$][a-zA-Z0-9_$]*)/;\nconst propertyRegExp = /^((?:\"(?:(?:\\\\[\\s\\S])|[^\"\\n\\\\])*\"|'(?:(?:\\\\[\\s\\S])|[^'\\n\\\\])*'|[a-zA-Z_$][a-zA-Z0-9_$]*))\\s*:/;\nconst shorthandPropertyRegExp = /^([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*(?=,|})(,?)/;\nconst unaryOperatorRegExp = /^(?:-|~|\\+|!)/;\nconst keywordsArray = [\n  'do',\n  'if',\n  'in',\n  'for',\n  'let',\n  'new',\n  'try',\n  'var',\n  'case',\n  'else',\n  'enum',\n  'null',\n  'this',\n  'true',\n  'void',\n  'with',\n  'break',\n  'catch',\n  'class',\n  'const',\n  'false',\n  'super',\n  'throw',\n  'while',\n  'yield',\n  'delete',\n  'export',\n  'import',\n  'public',\n  'return',\n  'static',\n  'switch',\n  'typeof',\n  'default',\n  'extends',\n  'finally',\n  'package',\n  'private',\n  'continue',\n  'debugger',\n  'function',\n  'arguments',\n  'interface',\n  'protected',\n  'implements',\n  'instanceof'\n];\nconst keywordsRegExp = new RegExp(`^(?:${ keywordsArray.join('|') })$`);\n\nconst EXPRESSION = 'expression';\nconst END_OF_FUNC_BODY = 'end of function body';\nconst submitString = 'Please, submit an issue at https://github.com/dwaynejs/dwayne/issues/new, if needed.';\n\nfunction parseJS(string, wholeString, curlyError) {\n  curlyError = !!curlyError;\n\n  const initialString = string;\n  const expected = {\n    expression: true,\n    closingExpressions: [],\n    functionScope: {}\n  };\n  const variables = {};\n  const { closingExpressions } = expected;\n  let expression = '';\n  let index = 0;\n\n  while (string.length) {\n    let spaceMatch;\n    let match;\n    let toConcat = '';\n    let matched;\n    let isEmptySpace;\n    let {\n      type: properType,\n      symbol: properSymbol\n    } = closingExpressions[closingExpressions.length - 1] || {};\n    const firstSymbol = string[0];\n\n    if ((spaceMatch = string.match(emptySpaceRegExp)) && !expected.templateString) {\n      isEmptySpace = true;\n      match = spaceMatch[0];\n    } else {\n      if (expected.expression) {\n        match = string.match(arrowFunctionRegExp);\n\n        if (match) {\n          const vars = (match[2] || match[1]).split(anyCommaEmptySpace);\n          const variables = [];\n          const newFunctionVars = Object.create(expected.functionScope);\n\n          for (let i = 0, length = vars.length; i < length; i++) {\n            const variable = vars[i];\n\n            if (variable) {\n              variables.push(variable);\n              newFunctionVars[variable] = true;\n            }\n          }\n\n          toConcat = `function(${ variables.join(',') }){return `;\n          expected.functionScope = newFunctionVars;\n          closingExpressions.push({\n            type: 'any',\n            symbol: END_OF_FUNC_BODY\n          }, {\n            type: 'any',\n            symbol: EXPRESSION\n          });\n        } else if (firstSymbol === '(') {\n          match = '(';\n          closingExpressions.push({\n            type: 'paren',\n            symbol: ')'\n          });\n        } else if (firstSymbol === '[') {\n          match = '[';\n          closingExpressions.push({\n            type: 'array',\n            symbol: ']'\n          });\n        } else if (firstSymbol === '`') {\n          match = '`';\n          toConcat = '(\"\"';\n          expected.templateString = true;\n          closingExpressions.push({\n            type: 'templateString',\n            symbol: '`'\n          });\n\n          delete expected.expression;\n        } else if (firstSymbol === '{') {\n          match = '{';\n          expected.objectProperty = true;\n          closingExpressions.push({\n            type: 'object',\n            symbol: '}'\n          });\n\n          delete expected.expression;\n        } else {\n          match = string.match(unaryOperatorRegExp);\n\n          if (match) {\n            toConcat = match[0].replace(anyEmptySpaceRegExp, ' ');\n          } else {\n            match = string.match(simpleExpressionRegExp);\n\n            if (!match) {\n              match = string.match(numberRegExp);\n\n              if (!match) {\n                match = string.match(stringRegExp);\n\n                if (!match) {\n                  match = string.match(regexpRegExp);\n\n                  if (!match) {\n                    match = string.match(thisRegExp);\n\n                    if (match) {\n                      toConcat = '$';\n                    } else {\n                      match = string.match(variableRegExp);\n\n                      if (match) {\n                        const variable = match[0];\n\n                        if (!expected.functionScope[variable]) {\n                          variables[variable] = true;\n                        }\n\n                        toConcat = getVariable(variable, expected.functionScope);\n                      }\n                    }\n                  }\n                }\n              }\n            }\n\n            if (match) {\n              expected.operator = true;\n              matched = EXPRESSION;\n\n              delete expected.expression;\n            }\n          }\n        }\n      } else if (expected.templateString) {\n        match = string.match(templateStringContentRegExp);\n\n        if (match) {\n          const string = match[0]\n            .replace(anyEscapedExpressionRegExp, (match) => {\n              const second = match[1];\n\n              return properEscapedRegExp.test(second)\n                ? match\n                : second;\n            })\n            .replace(anyDoubleQuoteRegExp, '\\\\\"')\n            .replace(anyNewLineRegExp, (match) => {\n              if (match === '\\r\\n') {\n                match = '\\\\r\\\\n';\n              } else if (match === '\\r') {\n                match = '\\\\r';\n              } else {\n                match = '\\\\n';\n              }\n\n              return `\"+\"${ match }\"+\"`;\n            });\n\n          toConcat = `+\"${ string }\"`;\n        } else if (firstSymbol === '`') {\n          match = '`';\n          matched = EXPRESSION;\n          toConcat = ')';\n          expected.operator = true;\n          closingExpressions.pop();\n\n          delete expected.templateString;\n        } else if (string.slice(0, 2) === '${') {\n          match = '${';\n          toConcat = '+(';\n          expected.expression = true;\n          closingExpressions.push({\n            type: 'templateString',\n            symbol: '}'\n          }, {\n            type: 'any',\n            symbol: EXPRESSION\n          });\n\n          delete expected.templateString;\n        }\n      } else if (expected.objectProperty) {\n        match = string.match(propertyRegExp);\n\n        if (match) {\n          if (keywordsRegExp.test(match[1])) {\n            match[1] = `\"${ match[1] }\"`;\n          }\n\n          toConcat = `${ match[1] }:`;\n          expected.expression = true;\n          closingExpressions.push({\n            type: 'any',\n            symbol: EXPRESSION\n          });\n\n          delete expected.objectProperty;\n        } else {\n          match = string.match(shorthandPropertyRegExp);\n\n          if (match) {\n            const variable = match[1];\n\n            if (!expected.functionScope[variable]) {\n              variables[variable] = true;\n            }\n\n            if (keywordsRegExp.test(variable)) {\n              match[1] = `\"${ variable }\"`;\n            }\n\n            toConcat = `${ match[1] }:${ getVariable(variable, expected.functionScope) }${ match[2] }`;\n\n            if (!match[2]) {\n              expected.operator = true;\n\n              delete expected.objectProperty;\n            }\n          }\n        }\n      } else if (expected.operator) {\n        if (firstSymbol === ')' || firstSymbol === ']' || firstSymbol === '}' || firstSymbol === ',') {\n          toConcat = closeFunctionBody(expected);\n\n          ({\n            type: properType,\n            symbol: properSymbol\n          } = closingExpressions[closingExpressions.length - 1] || {});\n        }\n\n        if (firstSymbol === '(') {\n          match = '(';\n          expected.expression = true;\n          closingExpressions.push({\n            type: 'call',\n            symbol: ')'\n          });\n\n          delete expected.operator;\n        } else if (firstSymbol === '?') {\n          match = '?';\n          expected.expression = true;\n          closingExpressions.push({\n            type: 'ternary',\n            symbol: ':'\n          }, {\n            type: 'any',\n            symbol: EXPRESSION\n          });\n\n          delete expected.operator;\n        } else if (firstSymbol === ':' && properSymbol === ':') {\n          match = ':';\n          expected.expression = true;\n          closingExpressions.pop();\n\n          delete expected.operator;\n        } else if (firstSymbol === '[') {\n          match = '[';\n          expected.expression = true;\n          closingExpressions.push({\n            type: 'property',\n            symbol: ']'\n          }, {\n            type: 'any',\n            symbol: EXPRESSION\n          });\n\n          delete expected.operator;\n        } else if (firstSymbol === '}' && properSymbol === '}' && properType === 'templateString') {\n          match = firstSymbol;\n          toConcat += ')';\n          expected.templateString = true;\n          closingExpressions.pop();\n\n          delete expected.operator;\n        } else if (firstSymbol === ']' && properSymbol === ']' && properType === 'property') {\n          match = firstSymbol;\n          toConcat += firstSymbol;\n          matched = EXPRESSION;\n          closingExpressions.pop();\n        } else if (firstSymbol === ')' && properSymbol === ')' && properType === 'paren') {\n          match = firstSymbol;\n          toConcat += firstSymbol;\n          matched = EXPRESSION;\n          closingExpressions.pop();\n        } else if (firstSymbol === ',' && properSymbol === '}' && properType === 'object') {\n          match = firstSymbol;\n          toConcat += firstSymbol;\n          matched = EXPRESSION;\n          expected.objectProperty = true;\n\n          delete expected.operator;\n        } else {\n          match = string.match(pointOperatorRegExp);\n\n          if (match) {\n            matched = EXPRESSION;\n\n            if (keywordsRegExp.test(match[1])) {\n              toConcat += `[\"${ match[1] }\"]`;\n            }\n          } else {\n            match = string.match(operatorRegExp);\n\n            if (match) {\n              toConcat += match[0].replace(anyEmptySpaceRegExp, ' ');\n              expected.expression = true;\n              closingExpressions.push({\n                type: 'any',\n                symbol: EXPRESSION\n              });\n\n              delete expected.operator;\n            }\n          }\n        }\n      }\n\n      if (!match) {\n        if (firstSymbol === ')' || firstSymbol === ']' || firstSymbol === '}') {\n          toConcat += closeFunctionBody(expected);\n\n          ({\n            type: properType,\n            symbol: properSymbol\n          } = closingExpressions[closingExpressions.length - 1] || {});\n        }\n\n        let closingBrace;\n\n        if (properSymbol === ')' && firstSymbol === ')' && properType === 'call') {\n          closingBrace = true;\n\n          delete expected.expression;\n        } else if (properSymbol === ']' && firstSymbol === ']' && properType === 'array') {\n          closingBrace = true;\n\n          delete expected.expression;\n        } else if (firstSymbol === '}' && properSymbol === '}' && properType === 'object') {\n          closingBrace = true;\n\n          delete expected.objectProperty;\n        }\n\n        if (closingBrace) {\n          match = firstSymbol;\n          toConcat += firstSymbol;\n          expected.operator = true;\n          matched = EXPRESSION;\n          closingExpressions.pop();\n        }\n      }\n\n      if (\n        matched === EXPRESSION\n        && closingExpressions.length\n        && closingExpressions[closingExpressions.length - 1].symbol === EXPRESSION\n      ) {\n        closingExpressions.pop();\n      }\n    }\n\n    const noMatch = !match || !match[0];\n    const curlyIndex = string.indexOf('}');\n\n    if (noMatch && (curlyIndex > 0 || curlyError)) {\n      const expressionString = curlyError\n        ? initialString\n        : initialString.slice(0, initialString.length - string.length + curlyIndex);\n\n      throw new Error(\n        `Syntax error near ~~~ \"${ initialString.slice(index, index + 15) }\" ~~~ (index: ${ index }, ${ constructErrorInfo(expressionString, wholeString, closingExpressions, curlyError) }`\n      );\n    } else if (noMatch && curlyIndex === 0) {\n      expression += toConcat;\n\n      break;\n    } else if (noMatch && curlyIndex === -1) {\n      return null;\n    }\n\n    match = typeof match === 'string' ? match : match[0];\n\n    if (!isEmptySpace) {\n      expression += toConcat || match;\n    }\n\n    string = string.slice(match.length);\n    index += match.length;\n  }\n\n  expression += closeFunctionBody(expected);\n\n  if (closingExpressions.length) {\n    const expressionString = initialString.slice(0, initialString.length - string.length);\n\n    throw new Error(`Unexpected end of input (${ constructErrorInfo(expressionString, wholeString, closingExpressions, curlyError) }`);\n  }\n\n  if (!string.length && !curlyError) {\n    return null;\n  }\n\n  return {\n    expression,\n    variables,\n    original: initialString.slice(0, index),\n    rest: string.slice(1)\n  };\n}\n\nfunction getVariable(name, functionScope) {\n  if (functionScope[name]) {\n    return name;\n  }\n\n  return keywordsRegExp.test(name)\n    ? `$[\"${ name }\"]`\n    : `$.${ name }`;\n}\n\nfunction closeFunctionBody(expected) {\n  const { closingExpressions } = expected;\n  let toConcat = '';\n\n  while (\n    closingExpressions[closingExpressions.length - 1]\n    && closingExpressions[closingExpressions.length - 1].symbol === END_OF_FUNC_BODY\n  ) {\n    toConcat += '}';\n    expected.functionScope = Object.getPrototypeOf(expected.functionScope);\n    closingExpressions.pop();\n\n    if (\n      closingExpressions.length\n      && closingExpressions[closingExpressions.length - 1].symbol === EXPRESSION\n    ) {\n      closingExpressions.pop();\n    }\n  }\n\n  return toConcat;\n}\n\nfunction constructErrorInfo(expressionString, wholeString, closingExpressions, curlyError) {\n  let { symbol: last } = closingExpressions[closingExpressions.length - 1] || {};\n  let wholeStringString = '';\n\n  if (last && last !== EXPRESSION && last !== END_OF_FUNC_BODY) {\n    last = `\"${ last }\"`;\n  }\n\n  if (!curlyError) {\n    wholeStringString = `, whole string: \"${ wholeString }\"`;\n  }\n\n  const lastString = last\n    ? `expected ${ last }, `\n    : '';\n\n  return `${ lastString }initial expression: \"${ expressionString }\"${ wholeStringString }). ${ submitString }`;\n}\n\nexport default parseJS;\n","/**\n * @module Block\n * @private\n * @mixin\n * @description Exports Block class.\n */\n\nimport { Arr } from './Arr';\nimport { doc, Elem } from './Elem';\nimport { Str } from './Str';\nimport { Super } from './Super';\nimport {\n  defineUsualProperties, defineFrozenProperties,\n  assign, constructEvalFunction, iterate, validate,\n  isFunction, isNil, isString\n} from './helpers';\nimport * as Blocks from './blocks';\nimport * as Mixins from './mixins';\nimport { htmlAllowedTagSymbols, htmlAllowedAttrSymbols } from './constants';\nimport markupToJSON from './helpers/markupToJSON';\nimport parseJS from './helpers/parseJS';\n\n/**\n * @typedef {Error} EvaluationError\n * @public\n * @property {String} expression - Expression which has been evaluated with the error.\n * @property {Block} block - Block in context of which the expression has been evaluated with the error.\n */\n\n/**\n * @callback Watcher\n * @public\n * @param {*} newValue - New value.\n * @param {*} oldValue - Old value.\n */\n\n/**\n * @callback VarsWatcher\n * @public\n */\n\n/**\n * @callback Wrapper\n * @public\n * @param {Block} Block class to wrap.\n * @returns {Block} New Block class.\n */\n\n/**\n * @callback AfterUpdate\n * @public\n * @param {*} newValue - New value.\n * @param {*} oldValue - Old value.\n * @param {*} mixin - Mixin instance.\n */\n\n/**\n * @callback BlockRegisterHook\n * @public\n * @param {Block} Block - Registering block.\n * @param {String} name - Block name.\n * @returns Return value is used for registering the block.\n * If Block subclass returned it's registered instead of the initial block, otherwise\n * the initial block is used.\n */\n\n/**\n * @callback MixinRegisterHook\n * @public\n * @param {Block} Mixin - Registering mixin.\n * @param {String} name - Mixin name.\n * @returns Return value is used for registering the mixin.\n * If Mixin subclass returned it's registered instead of the initial mixin, otherwise\n * the initial mixin is used.\n */\n\nconst rootBlocks = Object.create(null);\nconst rootMixins = Object.create(null);\nconst {\n  isPrototypeOf,\n  hasOwnProperty\n} = {};\nconst tagName = new RegExp(`^${ htmlAllowedTagSymbols }$`, 'i');\nconst attrName = new RegExp(`^${ htmlAllowedAttrSymbols }$`);\nconst svgNS = 'http://www.w3.org/2000/svg';\nconst curlyBracketRegExp = /\\{/;\nconst dRestRegExp = /^d-rest(?:#|$)/;\nconst afterElem = new Elem();\nlet evalMode;\nlet getting;\nlet changed;\n\n/**\n * @class Block\n * @public\n * @param {Object} opts - Element options.\n * @returns {Block} Instance of Block.\n * @description Class for dynamic templating.\n *\n * @example\n * import { D, Block, initApp } from 'dwayne';\n *\n * class App extends Block {\n *   static template = '<Hello text=\"{text}\"/>';\n *\n *   constructor(opts) {\n *     super(opts);\n *\n *     this.text = 'world (0)';\n *     this.times = 0;\n *\n *     this.setInterval();\n *   }\n *\n *   setInterval() {\n *     D(1000).interval(() => {\n *       this.text = `world (${ ++this.times })`;\n *     });\n *   }\n * }\n *\n * Block.block('App', App);\n * Block.block('Hello', 'Hello, {args.text}!');\n *\n * initApp('App', document.getElementById('root'));\n */\nclass Block {\n  static _blocks = Object.create(rootBlocks);\n  static _mixins = Object.create(rootMixins);\n\n  /**\n   * @member {Boolean} [Block.collapseWhiteSpace = true]\n   * @type {Boolean}\n   * @public\n   * @description If the whitespace between html elements and\n   * in the start and the end inside the tag should be omitted during parsing.\n   */\n  static collapseWhiteSpace = true;\n\n  /**\n   * @member {Object} [Block.defaultArgs = null]\n   * @type {Object}\n   * @public\n   * @description Block default args.\n   */\n  static defaultArgs = null;\n\n  /**\n   * @member {Object} [Block.defaultLocals = null]\n   * @type {Object}\n   * @public\n   * @description Block default locals.\n   */\n  static defaultLocals = null;\n\n  /**\n   * @member {String} [Block.template = '']\n   * @type {String}\n   * @public\n   * @description Block template.\n   */\n  static template = '';\n\n  /**\n   * @method Block.onEvalError\n   * @public\n   * @param {EvaluationError} err - The method is called when an evaluation error occurs.\n   */\n  static onEvalError(err) {\n    console.error(`Eval error (evaluating \"${ err.expression }\" in context of block \"${ err.block.$$.name }\"):`, err);\n  }\n\n  static getBlocks() {\n    return new Super({ ...this._blocks });\n  }\n\n  static getMixins() {\n    return new Super({ ...this._mixins });\n  }\n\n  /**\n   * @method Block.beforeRegisterBlock\n   * @public\n   * @param {BlockRegisterHook} hook - Block register hook.\n   */\n  static beforeRegisterBlock(hook) {\n    if (!new Super(this).hasOwn('_blockHooks')) {\n      this._blockHooks = new Arr([]);\n    }\n\n    this._blockHooks.push(hook);\n  }\n\n  /**\n   * @method Block.beforeRegisterMixin\n   * @public\n   * @param {MixinRegisterHook} hook - Mixin register hook.\n   */\n  static beforeRegisterMixin(hook) {\n    if (!new Super(this).hasOwn('_mixinHooks')) {\n      this._mixinHooks = new Arr([]);\n    }\n\n    this._mixinHooks.push(hook);\n  }\n\n  /**\n   * @method Block.block\n   * @public\n   * @param {String} name - Block or mixin name.\n   * @param {String|Block} Subclass - Subclass of Block or template string of it.\n   * @returns {void}\n   * @description Register block in the namespace of this.\n   */\n  static block(name, Subclass) {\n    const _this = new Super(this);\n\n    if (isString(Subclass)) {\n      Subclass = class extends Block {\n        static template = Subclass;\n      };\n    }\n\n    if (isFunction(Subclass) && !isInstanceOf(Block, Subclass)) {\n      const constructor = Subclass;\n\n      Subclass = class extends Block {\n        constructor(opts) {\n          super(opts);\n\n          constructor.call(this, opts);\n        }\n      };\n    }\n\n    if (!isFunction(Subclass)) {\n      console.warn(`Block must be a string (representing a block template), a function or a class that extends Block class (name: \"${ name }\") (Block.block)`);\n\n      return;\n    }\n\n    if (!isInstanceOf(Block, Subclass)) {\n      extendBlock(Subclass);\n    }\n\n    if (rootBlocks[name]) {\n      console.warn(`The \"${ name }\" block is a built-in block so the block will not be registered (Block.block)`);\n\n      return;\n    }\n\n    if (!tagName.test(name)) {\n      console.warn(`Name \"${ name }\" is not allowed for blocks so the block will not be registered (Block.block)`);\n\n      return;\n    }\n\n    if (!_this.hasOwn('_blocks')) {\n      this._blocks = Object.create(_this.proto().$._blocks);\n    }\n\n    let returnValue;\n\n    try {\n      returnValue = (this._blockHooks || new Arr([])).reduce((Subclass, hook) => {\n        const returnValue = hook(Subclass, name);\n\n        return isInstanceOf(Block, returnValue)\n          ? returnValue\n          : Subclass;\n      }, Subclass);\n    } catch (err) {\n      console.error(`Uncaught error in ${ this._name } \"beforeRegisterBlock\" hook:`, err);\n    }\n\n    if (isInstanceOf(Block, returnValue)) {\n      Subclass = returnValue;\n    }\n\n    const variables = {};\n\n    Subclass._name = name;\n    Subclass._html = transformDIfChildren(\n      transformJSExpressions(\n        markupToJSON(\n          `${ Subclass.template || '' }`,\n          Subclass.collapseWhiteSpace\n        ),\n        variables\n      )\n    );\n    Subclass._variables = new Super(variables)\n      .except('$$', '$')\n      .keys();\n\n    if (new Super(Subclass).hasOwn('defaultArgs')) {\n      new Super(Subclass.defaultArgs).proto(null);\n    }\n\n    this._blocks[name] = Subclass;\n  }\n\n  /**\n   * @method Block.mixin\n   * @public\n   * @param {String} name - Block or mixin name.\n   * @param {Mixin|AfterUpdate} Subclass - Subclass of Mixin or AfterUpdate callback.\n   * @returns {void}\n   * @description Register mixin in the namespace of this.\n   */\n  static mixin(name, Subclass) {\n    const _this = new Super(this);\n\n    if (isFunction(Subclass) && !isInstanceOf(Mixin, Subclass)) {\n      const afterUpdate = Subclass;\n\n      Subclass = class extends Mixin {\n        afterUpdate(newValue, oldValue) {\n          afterUpdate.call(this, newValue, oldValue, this);\n        }\n      };\n    }\n\n    if (!isInstanceOf(Mixin, Subclass)) {\n      console.warn(`The \"${ name }\" class does not extend Mixin and will not be registered (Block.mixin)`);\n\n      return;\n    }\n\n    if (rootMixins[name]) {\n      console.warn(`The \"${ name }\" mixin is a built-in mixin so the mixin will not be registered (Block.mixin)`);\n\n      return;\n    }\n\n    if (!attrName.test(name)) {\n      console.warn(`Name \"${ name }\" is not allowed for mixins so the mixin will not be registered (Block.mixin)`);\n\n      return;\n    }\n\n    if (!_this.hasOwn('_mixins')) {\n      this._mixins = Object.create(_this.proto().$._mixins);\n    }\n\n    let returnValue;\n\n    try {\n      returnValue = (this._mixinHooks || new Arr([])).reduce((Subclass, hook) => {\n        const returnValue = hook(Subclass, name);\n\n        return isInstanceOf(Mixin, returnValue)\n          ? returnValue\n          : Subclass;\n      }, Subclass);\n    } catch (err) {\n      console.error(`Uncaught error in ${ this._name } \"beforeRegisterMixin\" hook:`, err);\n    }\n\n    if (isInstanceOf(Mixin, returnValue)) {\n      Subclass = returnValue;\n    }\n\n    Subclass._name = name;\n    Subclass._match = constructMixinRegExp(name);\n\n    this._mixins[name] = Subclass;\n  }\n\n  /**\n   * @method Block.wrap\n   * @public\n   * @param {...Wrapper} wrappers - Functions that return wrapped block.\n   * @returns {Block} New block.\n   * @description Method for wrapping blocks into another blocks.\n   * It is considered best practice to just extends the old block with a new one.\n   *\n   * @example\n   * class MyBlock extends Block {\n   *   static template = '<div>123</div>';\n   * }\n   *\n   * MyBlock.wrap((Block) => {\n   *   return class extends Block {\n   *     static template = `<section class=\"wrapper\">${ Block.template }</section>`;\n   *\n   *     constructor(opts) {\n   *       super(opts);\n   *\n   *       this.additionalVar = 'additional';\n   *     }\n   *   };\n   * });\n   */\n  static wrap(...wrappers) {\n    return new Arr(arguments).reduce((block, wrapper) => {\n      const returnValue = wrapper(block);\n\n      return isInstanceOf(Block, returnValue)\n        ? returnValue\n        : block;\n    }, this);\n  }\n\n  constructor(opts) {\n    const {\n      name,\n      args: originalArgs,\n      dBlockName,\n      children,\n      parent,\n      parentElem,\n      parentBlock,\n      parentScope,\n      parentTemplate,\n      prevBlock\n    } = opts;\n    const watchersToRemove = new Arr([]);\n    const constructor = new Super(this).proto().$.constructor;\n    const childrenBlocks = new Arr([]);\n    const mixins = new Arr([]);\n    const isParentBlock = parent instanceof Block;\n\n    defineFrozenProperties(this, {\n      /**\n       * @member {Block} Block#$\n       * @type {Block}\n       * @public\n       * @description This.\n       */\n      $: this,\n\n      /**\n       * @member {Object} Block#$$\n       * @type {Object}\n       * @protected\n       * @property {Object} args - Private args scope.\n       * @property {Arr} argsChildren - Block args children.\n       * @property {Arr} children - Child blocks.\n       * @property {Arr} mixins - Child mixins.\n       * @property {Elem} parentElem - Parent element.\n       * @property {Elem} content - Content elements.\n       * @property {Function} evaluate - Evaluate function.\n       * @property {Object} globals - Private globals scope.\n       * @property {Object} locals - Private locals scope.\n       * @property {Arr} watchersToRemove - Watchers to remove before removing element.\n       */\n      $$: {\n        name,\n        dBlockName,\n        dBlocks: new Arr([]),\n        parent,\n        parentElem,\n        parentScope,\n        parentBlock,\n        parentTemplate,\n        content: new Elem(),\n        ns: constructor,\n        argsChildren: children || new Arr([]),\n        children: childrenBlocks,\n        mixins,\n        prevBlock,\n        watchersToRemove,\n        evaluate: (func, onChange, instance, forDElements, forDItem, forDEach) => {\n          if (!isFunction(func)) {\n            return func;\n          }\n\n          forDElements = !!forDElements;\n          forDItem = !!forDItem;\n\n          const scope = (name === '#d-item' && !forDItem) || forDEach\n            ? (forDEach || this).$$.scope\n            : this;\n          const { watchersToRemove } = instance ? instance.$$ : {};\n\n          /* eslint no-new-func: 0 */\n          const evaluate = () => {\n            let result;\n\n            if (onChange) {\n              evalMode = true;\n              getting = new Arr([]);\n            }\n\n            try {\n              result = func(scope);\n            } catch (err) {\n              err.expression = func.expression;\n              err.original = func.original;\n              err.block = this;\n\n              if (isFunction(constructor.onEvalError)) {\n                constructor.onEvalError(err);\n              }\n            }\n\n            if (onChange) {\n              const localWatchers = new Arr([]);\n\n              getting.forEach((watchers) => {\n                const watcher = () => {\n                  const newResult = evaluate();\n\n                  if (newResult !== result) {\n                    onChange(newResult, result);\n                  }\n                };\n                const watcherBlock = {\n                  forDElements,\n                  watcher,\n                  watchers\n                };\n\n                watcher.onRemove = () => {\n                  localWatchers.forEach((watcherBlock) => {\n                    const {\n                      watcher,\n                      watchers\n                    } = watcherBlock;\n                    const index1 = watchersToRemove.indexOf(watcherBlock);\n                    const index2 = watchers.indexOf(watcher);\n\n                    if (index1 !== -1) {\n                      watchersToRemove.splice(index1, 1);\n                    }\n\n                    if (index2 !== -1) {\n                      watchers.splice(index2, 1);\n                    }\n                  });\n                };\n\n                localWatchers.push(watcherBlock);\n                watchersToRemove.push(watcherBlock);\n                watchers.push(watcher);\n              });\n\n              evalMode = false;\n              getting = new Arr([]);\n            }\n\n            return result;\n          };\n\n          return evaluate();\n        },\n        remove: (isParentSignal) => {\n          removeWatchers(watchersToRemove);\n\n          childrenBlocks.forEach((child) => {\n            child.$$.remove(true);\n          });\n\n          mixins.forEach((mixin) => {\n            mixin.$$.remove(true);\n          });\n\n          try {\n            this.beforeRemove();\n          } catch (err) {\n            console.error(`Uncaught error in ${ name }#beforeRemove:`, err);\n          }\n\n          if (!isParentSignal && isParentBlock) {\n            parent.$$.removeContent(this.$$.content);\n          }\n\n          if (!isParentSignal && parentBlock) {\n            const index = parentBlock.$$.children.indexOf(this);\n\n            if (index !== -1) {\n              parentBlock.$$.children.splice(index, 1);\n            }\n          }\n\n          this.$$.content.remove();\n        },\n        addContent: (contentToAdd, notRecursive) => {\n          const index = this.$$.content.indexOf(contentToAdd.$[0].previousSibling) + 1;\n\n          if (index === 0) {\n            this.$$.content = contentToAdd\n              .slice()\n              .pushArray(this.$$.content.$);\n          } else {\n            this.$$.content = this.$$.content\n              .slice(0, index)\n              .pushArray(contentToAdd.$)\n              .pushArray(this.$$.content.slice(index).$);\n          }\n\n          if (isParentBlock && !notRecursive) {\n            parent.$$.addContent(contentToAdd);\n          }\n        },\n        moveContent: (contentToMove, after) => {\n          const index = this.$$.content.indexOf(contentToMove.$[0]);\n          const indexToPut = this.$$.content.indexOf(after.$[0]) + 1;\n\n          if (indexToPut === 0) {\n            this.$$.content = contentToMove\n              .slice()\n              .pushArray(this.$$.content.slice(indexToPut, index).$)\n              .pushArray(this.$$.content.slice(index + contentToMove.length).$);\n          } else if (index > indexToPut) {\n            this.$$.content = this.$$.content\n              .slice(0, indexToPut)\n              .pushArray(contentToMove.$)\n              .pushArray(this.$$.content.slice(indexToPut, index).$)\n              .pushArray(this.$$.content.slice(index + contentToMove.length).$);\n          } else {\n            this.$$.content = this.$$.content\n              .slice(0, index)\n              .pushArray(this.$$.content.slice(index + contentToMove.length, indexToPut).$)\n              .pushArray(contentToMove.$)\n              .pushArray(this.$$.content.slice(indexToPut).$);\n          }\n\n          if (isParentBlock && indexToPut) {\n            parent.$$.moveContent(contentToMove, after);\n          }\n        },\n        removeContent: (contentToRemove) => {\n          this.$$.content = this.$$.content.filter((elem) => (\n            contentToRemove.indexOf(elem) === -1\n          ));\n\n          if (isParentBlock) {\n            parent.$$.removeContent(contentToRemove);\n          }\n        },\n        insertInStartOfIt: (contentToInsert, moveFlag) => {\n          const { prevBlock } = this.$$;\n          let after = afterElem;\n\n          if (prevBlock instanceof Block) {\n            after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n          } else if (prevBlock) {\n            after = prevBlock;\n            contentToInsert.insertAfter(prevBlock);\n\n            if (isParentBlock) {\n              if (moveFlag) {\n                parent.$$.moveContent(contentToInsert, after);\n              } else {\n                parent.$$.addContent(contentToInsert, true);\n              }\n            }\n          } else if (isParentBlock) {\n            const { prevBlock } = parent.$$;\n\n            if (prevBlock) {\n              let notRecursive;\n\n              if (prevBlock instanceof Block) {\n                after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n                notRecursive = true;\n              } else {\n                after = prevBlock;\n                notRecursive = false;\n                contentToInsert.insertAfter(prevBlock);\n              }\n\n              if (moveFlag) {\n                parent.$$.moveContent(contentToInsert, after);\n              } else {\n                parent.$$.addContent(contentToInsert, notRecursive);\n              }\n            } else {\n              after = parent.$$.insertInStartOfIt(contentToInsert, moveFlag);\n            }\n          } else {\n            contentToInsert.into(parentElem, false);\n          }\n\n          if (moveFlag) {\n            this.$$.moveContent(contentToInsert, after);\n          } else {\n            this.$$.addContent(contentToInsert, true);\n          }\n\n          return after;\n        },\n        insertAfterIt: (contentToInsert, moveFlag) => {\n          const { prevBlock } = this.$$;\n          let after = afterElem;\n          let tryToAddOrMove;\n\n          if (this.$$.content.length) {\n            after = this.$$.content.last();\n            tryToAddOrMove = true;\n            contentToInsert.insertAfter(after);\n          } else if (prevBlock instanceof Block) {\n            after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n          } else if (prevBlock) {\n            after = prevBlock;\n            tryToAddOrMove = true;\n            contentToInsert.insertAfter(prevBlock);\n          } else if (isParentBlock) {\n            after = parent.$$.insertInStartOfIt(contentToInsert, moveFlag);\n          } else {\n            contentToInsert.into(parentElem, false);\n          }\n\n          if (isParentBlock && tryToAddOrMove) {\n            if (moveFlag) {\n              parent.$$.moveContent(contentToInsert, after);\n            } else {\n              parent.$$.addContent(contentToInsert);\n            }\n          }\n\n          return after;\n        }\n      }\n    });\n\n    iterate(constructor.defaultLocals, (value, variable) => {\n      this[variable] = value;\n    });\n    constructor._variables.forEach((variable) => {\n      this[variable] = this[variable];\n    });\n\n    const argsObject = Object.create(null);\n    const $argsObject = new Super(argsObject);\n    let args = Object.create(constructor.defaultArgs || null);\n    let wasDRest;\n\n    new Super(originalArgs).forEach((value, arg) => {\n      const isDRest = dRestRegExp.test(arg);\n      const localArgs = isDRest || wasDRest\n        ? Object.create(args)\n        : args;\n\n      args = localArgs;\n\n      if (isDRest) {\n        const restArgs = parentScope.$$.evaluate(value, (value) => {\n          iterate(localArgs, (value, arg) => {\n            delete localArgs[arg];\n          });\n          defineUsualProperties(localArgs, transformRestArgs(value));\n          calculateArgs(args, argsObject, $argsObject);\n        }, this);\n\n        wasDRest = true;\n\n        return defineUsualProperties(localArgs, transformRestArgs(restArgs));\n      }\n\n      const isDElements = name === 'd-elements';\n      const forDElements = isDElements && arg === 'value';\n\n      wasDRest = false;\n\n      if (name !== 'd-each' || arg !== 'uid') {\n        value = parentScope.$$.evaluate(value, (value) => {\n          localArgs[arg] = value;\n          calculateArgs(args, argsObject, $argsObject);\n        }, this, forDElements, isDElements && parentBlock.$$.name === '#d-item');\n      }\n\n      defineUsualProperties(localArgs, {\n        [arg]: value\n      });\n    });\n\n    defineFrozenProperties(this, {\n      /**\n       * @member {Object} Block#args\n       * @type {Object}\n       * @public\n       */\n      args: argsObject,\n\n      /**\n       * @member {Object} Block#globals\n       * @type {Object}\n       * @public\n       */\n      globals: Object.create(\n        parentScope\n          ? Object.create(parentScope.globals)\n          : null\n      ),\n\n      /**\n       * @member {Block|undefined} Block#parentScope\n       * @type {Block|undefined}\n       * @public\n       */\n      parentScope,\n\n      /**\n       * @member {Block|undefined} Block#parentTemplate\n       * @type {Block|undefined}\n       * @public\n       */\n      parentTemplate\n    });\n\n    calculateArgs(args, argsObject, $argsObject);\n\n    if (parentBlock) {\n      parentBlock.$$.children.push(this);\n    }\n  }\n\n  /**\n   * @method Block#afterConstruct\n   * @public\n   * @description Is called after block construction (including all scopes)\n   * but before rendering the block and its children.\n   */\n  afterConstruct() {}\n\n  /**\n   * @method Block#afterRender\n   * @public\n   * @description Is called after block has been rendered.\n   */\n  afterRender() {}\n\n  /**\n   * @method Block#afterRender\n   * @public\n   * @description Is called before the block removal.\n   */\n  beforeRemove() {}\n\n  /**\n   * @method Block#changeLocals\n   * @public\n   * @param {Object} locals - Object to assign to this.\n   * @description Method for simple assigning some locals to this.\n   */\n  changeLocals(locals) {\n    assign(this, locals);\n  }\n\n  /**\n   * @method Block#evaluateAndWatch\n   * @public\n   * @param {String} expression - Expression to evaluate.\n   * @param {Watcher} callback - Callback which is called when the expression value is changed.\n   * @returns {*} Evaluation result.\n   * @description Method for evaluating an expression in context of the block and watching for the changes.\n   */\n  evaluateAndWatch(expression, callback) {\n    validate([expression], ['string'], 'Block#evaluateAndWatch');\n\n    const {\n      expression: code,\n      original\n    } = parseJS(expression, expression, true);\n\n    const func = constructEvalFunction(code, original);\n\n    return this.$$.parentScope.$$.evaluate(func, callback, this);\n  }\n\n  /**\n   * @method Block#evaluateOnce\n   * @public\n   * @param {String} expression - Expression to evaluate.\n   * @returns {*} Evaluation result.\n   * @description Method for evaluating an expression in context of the block once.\n   */\n  evaluateOnce(expression) {\n    validate([expression], ['string'], 'Block#evaluateOnce');\n\n    const {\n      expression: code,\n      original\n    } = parseJS(expression, expression, true);\n\n    const func = constructEvalFunction(code, original);\n\n    return this.$$.parentScope.$$.evaluate(func);\n  }\n\n  /**\n   * @method Block#setGlobals\n   * @public\n   * @param {Object} globals - Object which keys are global vars and values are their values.\n   * @description Method for setting global variables (use only in constructor!).\n   */\n  setGlobals(globals) {\n    defineUsualProperties(this.globals, globals);\n  }\n\n  /**\n   * @method Block#watch\n   * @public\n   * @param {...('args'|'globals'|String)} [vars] - Vars to watch (args, globals or locals).\n   * If no specified all locals, args and globals are to be watched.\n   * If the 'args' string all args are to be watched.\n   * If the 'globals' string all globals are to be watched.\n   * @param {VarsWatcher} watcher - Called when watched vars are changed.\n   * @description Method for watching for vars. If no vars passed in arguments\n   * all vars are to be watched. If the 'args' string is in the arguments all args are to be watched.\n   * If the 'globals' string is in the arguments all globals are to be watched.\n   * Otherwise specified vars will be watched.\n   * Watchers should not be put inside the constructor. It is considered best\n   * practice to do it inside the {@link Block#afterConstruct} method.\n   * Note that these expressions (vars, i.e. \"args.arg\") are not to be\n   * evaluated so you cannot put there things like \"a[b]\" or any js code,\n   * only expressions like \"a\", \"b\", \"args.a\", \"args.b\" and \"globals.a\", \"globals.b\".\n   * Also note that if there are more than one var that are changed at once (synchronously)\n   * the watcher is called only once.\n   * Note that the watcher is executed right away because in most cases\n   * this behaviour is very convenient.\n   *\n   * @example\n   * class MyBlock extends Block {\n   *   static template = '<div />';\n   *\n   *   afterConstruct() {\n   *     this.watch('a', () => {});\n   *     this.watch('args.a', 'globals.r', () => {});\n   *     this.watch(() => {});\n   *   }\n   * }\n   */\n  watch(...vars) {\n    const oldWatcher = arguments[arguments.length - 1];\n\n    if (!isFunction(oldWatcher)) {\n      console.warn(`The last argument (watcher) wasn't specified (${ this.$$.name }#watch)`);\n\n      return;\n    }\n\n    const watcher = () => {\n      oldWatcher();\n    };\n\n    if (arguments.length === 1) {\n      watchForAllLocals(this, watcher);\n      watchForAllArgs(this, watcher);\n      watchForAllGlobals(this, watcher);\n\n      oldWatcher();\n\n      return;\n    }\n\n    iterate(arguments, (variable) => {\n      if (variable === oldWatcher) {\n        return;\n      }\n\n      variable = `${ variable }`;\n\n      if (variable === '$') {\n        return watchForAllLocals(this, watcher);\n      }\n\n      if (variable === 'args') {\n        return watchForAllArgs(this, watcher);\n      }\n\n      if (variable === 'globals') {\n        return watchForAllGlobals(this, watcher);\n      }\n\n      if (/^args\\./.test(variable)) {\n        variable = variable.replace(/^args\\./, '');\n\n        if (!this.$$.args[variable]) {\n          return;\n        }\n\n        this.$$.args[variable].watchers.perm.push(watcher);\n\n        return;\n      }\n\n      if (/^globals\\./.test(variable)) {\n        variable = variable.replace(/^globals\\./, '');\n\n        if (!this.$$.globals[variable]) {\n          return;\n        }\n\n        const { watchers } = this.$$.globals[variable];\n\n        watchers.perm.push(watcher);\n        this.$$.watchersToRemove.push({\n          watcher,\n          watchers\n        });\n\n        return;\n      }\n\n      if (!this.$$.locals[variable]) {\n        return;\n      }\n\n      this.$$.locals[variable].watchers.perm.push(watcher);\n    });\n\n    oldWatcher();\n  }\n}\n\nnew Super(Block.prototype).proto(null);\n\nregisterBuiltIns(Blocks, rootBlocks, Block);\n\nconst blocks = Block._blocks;\n\nclass Mixin {\n  static evaluate = true;\n\n  /**\n   * @method Mixin.wrap\n   * @public\n   * @param {...Wrapper} wrappers - Functions that return wrapped mixin.\n   * @returns {Mixin} New mixin.\n   * @description Method for wrapping mixins.\n   * It is considered best practice to just extends the old mixin with a new one.\n   */\n  static wrap(...wrappers) {\n    return new Arr(arguments).reduce((block, wrapper) => {\n      const returnValue = wrapper(block);\n\n      return isInstanceOf(Mixin, returnValue)\n        ? returnValue\n        : block;\n    }, this);\n  }\n\n  constructor(opts) {\n    const {\n      name,\n      value,\n      dynamic,\n      elem,\n      args,\n      comment,\n      parentBlock,\n      parentScope,\n      parentTemplate\n    } = opts;\n    const watchersToRemove = new Arr([]);\n    const watchers = new Arr([]);\n\n    defineFrozenProperties(this, {\n      $$: {\n        name,\n        _value: value,\n        value,\n        isDynamic: dynamic,\n        parentScope,\n        parentBlock,\n        parentTemplate,\n        watchers,\n        watchersToRemove,\n        evaluate: (watcher) => {\n          const {\n            isDynamic,\n            value,\n            _value\n          } = this.$$;\n          const currentValue = isDynamic\n            ? value\n            : parentScope.$$.evaluate(_value);\n\n          if (watcher) {\n            watchers.push(watcher);\n          }\n\n          return currentValue;\n        },\n        remove: (isParentSignal) => {\n          removeWatchers(watchersToRemove);\n\n          try {\n            this.beforeRemove();\n          } catch (err) {\n            console.error(`Uncaught error in ${ name }#beforeRemove:`, err);\n          }\n\n          if (!isParentSignal && parentBlock) {\n            const index = parentBlock.$$.mixins.indexOf(this);\n\n            if (index !== -1) {\n              parentBlock.$$.mixins.splice(index, 1);\n            }\n          }\n        }\n      }\n    });\n\n    this.args = args;\n    this.comment = comment;\n    this.parentScope = parentScope;\n    this.parentTemplate = parentTemplate;\n    this.elem = elem;\n    this.node = elem.$[0];\n\n    if (parentBlock) {\n      parentBlock.$$.mixins.push(this);\n    }\n  }\n\n  afterUpdate() {}\n\n  beforeRemove() {}\n\n  /**\n   * @method Block#evaluateAndWatch\n   * @public\n   * @param {Watcher} callback - Callback which is called when the mixin value is changed.\n   * @returns {*} Evaluation result.\n   * @description Method for evaluating the mixin value and watching for the changes.\n   */\n  evaluateAndWatch(callback) {\n    return this.$$.evaluate(callback);\n  }\n\n  /**\n   * @method Block#evaluateOnce\n   * @public\n   * @returns {*} Evaluation result.\n   * @description Method for evaluating the mixin value once.\n   */\n  evaluateOnce() {\n    return this.$$.evaluate();\n  }\n}\n\nregisterBuiltIns(Mixins, rootMixins, Mixin);\n\nconst mixins = Block._mixins;\n\nfunction initApp(block, node) {\n  if (!blocks[block]) {\n    throw new Error(`No \"${ block }\" block is registered! (initApp)`);\n  }\n\n  const parentElem = new Elem(node);\n\n  parentElem.html('');\n\n  if (!parentElem.length) {\n    throw new Error('No valid element to insert the app into was given! (initApp)');\n  }\n\n  parentElem.$[0].DwayneRootBlock = createBlock({\n    node: {\n      name: block,\n      attrs: {},\n      children: new Arr([])\n    },\n    parent: parentElem,\n    parentElem\n  });\n  parentElem.attr('dwayne-root', block);\n}\n\nfunction removeApp(node) {\n  const elem = new Elem(node);\n\n  elem.html('');\n\n  if (!elem.length) {\n    throw new Error('No valid element to remove the app from was given! (removeApp)');\n  }\n\n  node = elem.$[0];\n\n  if (!node.DwayneRootBlock) {\n    throw new Error('No app registered inside the given element! (removeApp)');\n  }\n\n  delete node.DwayneRootBlock.$$.remove();\n}\n\nfunction registerBuiltIns(set, scope, proto) {\n  iterate(set, (register) => {\n    const {\n      name,\n      value\n    } = register(proto, createBlock, Block);\n\n    if (proto === Block) {\n      const variables = {};\n\n      value._html = transformJSExpressions(\n        markupToJSON(\n          `${ value.template || '' }`,\n          value.collapseWhiteSpace\n        ),\n        variables\n      );\n      value._variables = new Super(variables)\n        .except('$$', '$')\n        .keys();\n    } else {\n      value._match = constructMixinRegExp(name);\n    }\n\n    scope[name] = value;\n  });\n}\n\nfunction createBlock({ node, parent, parentElem, parentBlock, parentScope, parentTemplate, prevBlock }) {\n  const elem = parentElem.prop('namespaceURI') === svgNS\n    ? doc.svg()\n    : new Elem(doc.template().$[0].content);\n  const localBlocks = parentScope ? parentScope.$$.ns._blocks : blocks;\n  const localMixins = parentScope ? parentScope.$$.ns._mixins : mixins;\n  let children = node.children || new Arr([]);\n  let args = node.attrs || {};\n  let name = node.name || 'UnknownBlock';\n  let constructor = node.name && localBlocks[node.name];\n  let dBlockMatch;\n  let dBlockName;\n  let dBlockArgs;\n  let dBlockChildren;\n  let dElementsName;\n\n  if (name === 'd-block' && args.name) {\n    name = 'd-elements';\n    constructor = localBlocks[name];\n    dElementsName = args.name;\n    dBlockArgs = new Super(args).except('name').$;\n    dBlockChildren = children;\n    children = new Arr([]);\n    args = {};\n  } else if (name === 'd-block' && hasOwnProperty.call(args, 'constructor')) {\n    name = 'UnknownBlock';\n    constructor = parentScope.$$.evaluate(args.constructor);\n\n    if (isFunction(constructor)) {\n      args = new Super(args).except('constructor').$;\n    } else {\n      constructor = null;\n    }\n  } else if ((dBlockMatch = name.match(/^d-block:([\\s\\S]+)$/)) || name === 'd-block') {\n    constructor = blocks['d-block'];\n    dBlockName = dBlockMatch ? dBlockMatch[1] : null;\n  }\n\n  let blockInstance;\n\n  if (constructor) {\n    try {\n      blockInstance = new constructor({\n        name,\n        args,\n        dBlockName,\n        children,\n        parent,\n        parentElem,\n        parentBlock,\n        parentScope,\n        parentTemplate,\n        prevBlock\n      });\n    } catch (err) {\n      console.error(`Uncaught error in new ${ name }:`, err);\n      constructor = null;\n    }\n  }\n\n  if (!constructor) {\n    const {\n      value,\n      children\n    } = node;\n\n    const element = elem.create(name);\n    const currentAttrs = Object.create(null);\n    let attrs = Object.create(null);\n    let wasDRest;\n    const mixinDefaultOpts = {\n      elem: element,\n      parentBlock,\n      parentScope,\n      parentTemplate\n    };\n\n    new Super(args).forEach((value, attr) => {\n      const isDRest = dRestRegExp.test(attr);\n      const localAttrs = isDRest || wasDRest\n        ? Object.create(attrs)\n        : attrs;\n\n      attrs = localAttrs;\n\n      if (isDRest) {\n        const restAttrs = parentScope.$$.evaluate(value, (value) => {\n          setTimeout(() => {\n            iterate(localAttrs, (value, arg) => {\n              delete localAttrs[arg];\n            });\n            assign(localAttrs, transformRestAttrs(\n              value, localMixins, mixinDefaultOpts\n            ));\n            calculateAttrs(attrs, currentAttrs, element, false);\n          }, 0);\n        }, parentBlock);\n\n        wasDRest = true;\n\n        return assign(localAttrs, transformRestAttrs(\n          restAttrs, localMixins, mixinDefaultOpts\n        ));\n      }\n\n      const match = mixinMatch(localMixins, attr);\n\n      wasDRest = false;\n\n      if (match) {\n        if (value === true) {\n          value = 'true';\n        }\n\n        localAttrs[attr] = {\n          type: 'mixin',\n          dynamic: false,\n          opts: {\n            value,\n            ...match,\n            ...mixinDefaultOpts\n          },\n          value\n        };\n\n        return;\n      }\n\n      localAttrs[attr] = {\n        type: 'attr',\n        value: parentScope.$$.evaluate(value, (value) => {\n          localAttrs[attr] = {\n            type: 'attr',\n            value\n          };\n          calculateAttrs(attrs, currentAttrs, element, false);\n        }, parentBlock)\n      };\n    });\n\n    const createMixins = calculateAttrs(attrs, currentAttrs, element, true);\n\n    if (name === '#comment') {\n      element.text(value);\n    }\n\n    if (name === '#text') {\n      if (isFunction(value)) {\n        let text = parentScope.$$.evaluate(value, (value) => {\n          if (isNil(value)) {\n            value = '';\n          }\n\n          element.text(`${ value }`);\n        }, parentBlock);\n\n        if (isNil(text)) {\n          text = '';\n        }\n\n        element.text(`${ text }`);\n      } else {\n        element.text(value);\n      }\n    }\n\n    if (children) {\n      const parentElem = name === 'template'\n        ? new Elem(element.$[0].content)\n        : element;\n      let prevBlock;\n\n      children.forEach((child) => {\n        prevBlock = createBlock({\n          node: child,\n          parent: parentElem,\n          parentElem,\n          parentBlock,\n          parentScope,\n          parentTemplate,\n          prevBlock\n        });\n      });\n    }\n\n    const isParentBlock = parent instanceof Block;\n\n    if (prevBlock instanceof Block) {\n      prevBlock.$$.insertAfterIt(element, false);\n    } else if (prevBlock) {\n      element.insertAfter(prevBlock);\n\n      if (isParentBlock) {\n        parent.$$.addContent(element);\n      }\n    } else if (isParentBlock) {\n      parent.$$.insertInStartOfIt(element, false);\n    } else {\n      element.into(parentElem, false);\n    }\n\n    createMixins();\n\n    return element;\n  }\n\n  const {\n    $$,\n    args: Args,\n    globals,\n    ...locals\n  } = blockInstance;\n\n  if (dBlockMatch || name === 'd-block') {\n    parentScope.$$.dBlocks.push(blockInstance);\n  }\n\n  if (dBlockArgs) {\n    node = {\n      attrs: dBlockArgs,\n      children: dBlockChildren\n    };\n    node.name = parentScope.$$.evaluate(dElementsName, (newName) => {\n      node.name = newName;\n\n      const html = new Arr([node]);\n\n      Args.value = newName === 'd-if'\n        ? transformDIfChildren(html)\n        : html;\n    }, blockInstance, true);\n\n    const html = new Arr([node]);\n\n    Args.value = node.name === 'd-if'\n      ? transformDIfChildren(html)\n      : html;\n    Args.parentScope = parentScope;\n  }\n\n  const html = name === 'd-elements'\n    ? new Arr(Args.value || [])\n    : constructor._html;\n\n  delete locals.$;\n  delete locals.parentScope;\n\n  $$.args = constructPrivateScope(Args);\n  $$.locals = constructPrivateScope(locals);\n  $$.globals = constructPrivateScope(globals, 'globals', parentScope);\n\n  if (name === '#d-item') {\n    const scopeValues = {\n      [node.itemName]: node.item,\n      [node.indexName]: node.index\n    };\n    const scope = parentScope.$$.name === '#d-item'\n      ? parentScope.$$.scope\n      : parentScope;\n\n    $$.ns = parentScope.$$.ns;\n    $$.privateScope = constructPrivateScope(scopeValues);\n    constructPublicScope($$.scope = Object.create(scope), scopeValues, $$.privateScope);\n  }\n\n  if (name === 'd-each') {\n    $$.scope = Object.create(parentScope.$$.name === '#d-item' ? parentScope.$$.scope : parentScope, {\n      [Args.item || '$item']: {\n        value: null,\n        writable: true\n      },\n      [Args.index || '$index']: {\n        value: null,\n        writable: true\n      }\n    });\n  }\n\n  constructPublicScope(Args, Args, $$.args);\n  constructPublicScope(globals, globals, $$.globals);\n  constructPublicScope(blockInstance, locals, $$.locals);\n\n  try {\n    blockInstance.afterConstruct();\n  } catch (err) {\n    console.error(`Uncaught error in ${ name }#afterConstruct:`, err);\n  }\n\n  prevBlock = undefined;\n  parentScope = name === 'd-elements'\n    ? Args.parentScope\n    : blockInstance;\n  parentTemplate = name === 'd-elements'\n    ? Args.parentTemplate\n    : blockInstance;\n\n  html.forEach((child) => {\n    prevBlock = createBlock({\n      node: child,\n      parent: blockInstance,\n      parentElem,\n      parentBlock: blockInstance,\n      parentScope,\n      parentTemplate,\n      prevBlock\n    });\n  });\n\n  try {\n    blockInstance.afterRender();\n  } catch (err) {\n    console.error(`Uncaught error in ${ name }#afterRender:`, err);\n  }\n\n  return blockInstance;\n}\n\nfunction createMixin({ name, Mixin, dynamic, value, args, comment, elem, parentBlock, parentScope, parentTemplate }) {\n  const mixin = new Mixin({\n    name,\n    value,\n    dynamic,\n    args,\n    comment,\n    elem,\n    parentBlock,\n    parentScope,\n    parentTemplate\n  });\n\n  if (Mixin.evaluate) {\n    const value = mixin.value = mixin.evaluateAndWatch((newValue, oldValue) => {\n      mixin.value = newValue;\n\n      try {\n        mixin.afterUpdate(newValue, oldValue);\n      } catch (err) {\n        console.error(`Uncaught error in ${ name }#afterUpdate:`, err);\n      }\n    });\n\n    mixin.afterUpdate(value);\n  }\n\n  return mixin;\n}\n\nfunction transformDIfChildren(children) {\n  return new Arr(children || [])\n    .concat({})\n    .object((object, child) => {\n      const { name } = child;\n      const {\n        html,\n        ifElse\n      } = object;\n\n      if (name !== 'd-else-if' && name !== 'd-else') {\n        if (ifElse) {\n          html.push({\n            name: 'd-if',\n            children: ifElse\n          });\n\n          object.ifElse = null;\n        }\n\n        if (name === 'd-if') {\n          object.ifElse = new Arr([child]);\n        } else if (name) {\n          html.push(child);\n        }\n      } else {\n        (ifElse || html).push(child);\n\n        if (name === 'd-else' && ifElse) {\n          html.push({\n            name: 'd-if',\n            children: ifElse\n          });\n\n          object.ifElse = null;\n        }\n      }\n\n      if (name) {\n        child.children = transformDIfChildren(child.children);\n      }\n    }, {\n      html: new Arr([]),\n      ifElse: null\n    }).$.html;\n}\n\nfunction transformJSExpressions(children, variables, exclude = {}) {\n  return new Arr(children || []).object((children, child) => {\n    const {\n      name,\n      attrs,\n      children: ownChildren,\n      value: initialValue\n    } = child;\n    const isDEach = name === 'd-each';\n    let { value } = child;\n    let excludeLocal = {};\n\n    if (isDEach) {\n      excludeLocal = {\n        [child.attrs.item || '$item']: true,\n        [child.attrs.index || '$index']: true\n      };\n    }\n\n    child.attrs = new Super(attrs).map((value, attr) => {\n      if (value === true) {\n        return true;\n      }\n\n      if (value[0] !== '{' || value[value.length - 1] !== '}') {\n        return value;\n      }\n\n      const parsed = parseJS(value.slice(1, -1), value, true);\n\n      if (!parsed) {\n        return value;\n      }\n\n      if (parsed.rest) {\n        throw new Error('Attribute, mixin and argument computed values must be of the format \"{<js_expression>}\"');\n      }\n\n      const isUID = attr === 'uid';\n\n      const usedVariables = new Super(parsed.variables).filter((value, variable) => {\n        if (isDEach && isUID && excludeLocal[variable]) {\n          return;\n        }\n\n        if (!exclude[variable]) {\n          return true;\n        }\n      }).$;\n\n      assign(variables, usedVariables);\n\n      return constructEvalFunction(parsed.expression, parsed.original);\n    }).$;\n\n    if (name !== '#text') {\n      exclude = {\n        ...exclude,\n        ...excludeLocal\n      };\n\n      if (ownChildren) {\n        child.children = transformJSExpressions(ownChildren, variables, exclude);\n      }\n\n      children.push(child);\n\n      return;\n    }\n\n    while (value.length) {\n      const match = value.match(curlyBracketRegExp);\n\n      if (!match) {\n        children.push({\n          name: '#text',\n          value\n        });\n\n        break;\n      }\n\n      const { index } = match;\n\n      if (index) {\n        children.push({\n          name: '#text',\n          value: value.slice(0, index)\n        });\n        value = value.slice(index);\n      }\n\n      const parsed = parseJS(value.slice(1), initialValue);\n\n      if (!parsed) {\n        children.push({\n          name: '#text',\n          value\n        });\n\n        break;\n      }\n\n      const usedVariables = new Super(parsed.variables).filter((value, variable) => {\n        if (!exclude[variable]) {\n          return true;\n        }\n      }).$;\n\n      assign(variables, usedVariables);\n\n      children.push({\n        name: '#text',\n        value: constructEvalFunction(parsed.expression, parsed.original)\n      });\n      value = parsed.rest;\n    }\n  }, new Arr([]));\n}\n\nfunction isInstanceOf(Class, Subclass) {\n  return isPrototypeOf.call(Class, Subclass) && isPrototypeOf.call(Class.prototype, Subclass.prototype);\n}\n\nfunction removeWatchers(watchersToRemove) {\n  watchersToRemove.forEach(({ watcher, watchers }) => {\n    const index = watchers.indexOf(watcher);\n\n    if (index !== -1) {\n      watchers.splice(index, 1);\n    }\n  });\n}\n\nfunction constructPrivateScope(object, type, parentScope) {\n  let scope = {};\n\n  if (type === 'globals') {\n    scope = Object.create(\n      parentScope\n        ? parentScope.$$.globals\n        : null\n    );\n  }\n\n  return new Super(object).object((scope, value, key) => {\n    scope[key] = {\n      value,\n      watchers: {\n        temp: new Arr([]),\n        perm: new Arr([])\n      }\n    };\n  }, scope).$;\n}\n\nfunction constructPublicScope(scope, scopeValues, privateScope) {\n  new Super(scope).define(new Super(scopeValues).map((value, key) => {\n    const scope = privateScope[key];\n\n    return {\n      configurable: false,\n      enumerable: true,\n      get() {\n        if (evalMode) {\n          if (getting.indexOf(scope.watchers.temp) === -1) {\n            getting.push(scope.watchers.temp);\n          }\n        }\n\n        return scope.value;\n      },\n      set(value) {\n        if (value === scope.value) {\n          return;\n        }\n\n        if (!changed) {\n          changed = [];\n        }\n\n        const oldTempWatchers = scope.watchers.temp.slice();\n        const oldValue = scope.value;\n\n        scope.watchers.temp = new Arr([]);\n        scope.value = value;\n\n        oldTempWatchers.forEach((watcher) => {\n          watcher.onRemove();\n          watcher();\n        });\n        changed.push({\n          scope,\n          oldValue,\n          value\n        });\n\n        setTimeout(() => {\n          if (!changed) {\n            return;\n          }\n\n          const was = new Arr([]);\n          const values = [];\n\n          for (let i = changed.length - 1; i >= 0; i--) {\n            const {\n              scope,\n              value,\n              oldValue\n            } = changed[i];\n\n            scope.watchers.perm.forEach((watcher) => {\n              const index = was.indexOf(watcher);\n\n              if (index === -1) {\n                was.push(watcher);\n                values.push({\n                  value,\n                  oldValue\n                });\n              } else {\n                values[index].oldValue = oldValue;\n              }\n            });\n\n            changed.splice(i, 1);\n          }\n\n          changed = null;\n\n          was.forEach((watcher, i) => {\n            const {\n              value,\n              oldValue\n            } = values[i];\n\n            watcher(value, oldValue);\n          });\n        }, 0);\n      }\n    };\n  }).$);\n}\n\nfunction watchForAllLocals(block, watcher) {\n  iterate(block.$$.locals, ({ watchers }) => {\n    watchers.perm.push(watcher);\n  });\n}\n\nfunction watchForAllGlobals(block, watcher) {\n  const {\n    globals,\n    watchersToRemove\n  } = block.$$;\n\n  for (const global in globals) {\n    /* eslint guard-for-in: 0 */\n    const watchers = globals[global].watchers.perm;\n\n    watchers.push(watcher);\n    watchersToRemove.push({\n      watcher,\n      watchers\n    });\n  }\n}\n\nfunction watchForAllArgs(block, watcher) {\n  iterate(block.$$.args, ({ watchers }) => {\n    watchers.perm.push(watcher);\n  });\n}\n\nfunction calculateArgs(args, argsObject, $argsObject) {\n  $argsObject.propertyNames().forEach((arg) => {\n    if (!(arg in args)) {\n      argsObject[arg] = undefined;\n    }\n  });\n\n  for (const arg in args) {\n    argsObject[arg] = args[arg];\n  }\n}\n\nfunction transformRestArgs(args) {\n  return new Super(args).object((args, value, arg) => {\n    if (dRestRegExp.test(arg)) {\n      assign(args, transformRestArgs(value));\n    } else {\n      args[arg] = value;\n    }\n  }).$;\n}\n\nfunction transformRestAttrs(attrs, mixins, mixinDefaultOpts) {\n  return new Super(attrs).object((eventualAttrs, value, attr) => {\n    if (dRestRegExp.test(attr)) {\n      return assign(eventualAttrs, transformRestAttrs(value, mixins, mixinDefaultOpts));\n    }\n\n    const match = mixinMatch(mixins, attr);\n\n    if (match) {\n      eventualAttrs[attr] = {\n        type: 'mixin',\n        dynamic: true,\n        opts: {\n          value,\n          ...match,\n          ...mixinDefaultOpts\n        },\n        value\n      };\n\n      return;\n    }\n\n    eventualAttrs[attr] = {\n      type: 'attr',\n      value\n    };\n  }).$;\n}\n\nfunction mixinMatch(mixins, attr) {\n  let match;\n\n  for (const name in mixins) {\n    const Mixin = mixins[name];\n    const localMatch = attr.match(Mixin._match);\n\n    if (localMatch) {\n      const argsMatch = localMatch[1];\n      let args;\n\n      if (/^\\s*$/.test(argsMatch)) {\n        args = [];\n      } else if (argsMatch) {\n        args = new Str(argsMatch)\n          .split(/,\\s*/)\n          .map((s) => new Str(s).trim().$)\n          .$;\n      }\n\n      match = {\n        args,\n        comment: localMatch[2],\n        Mixin,\n        name\n      };\n\n      break;\n    }\n  }\n\n  return match;\n}\n\nfunction calculateAttrs(attrs, attrsObject, elem, firstTime) {\n  iterate(attrsObject, ({ type, value }, attr) => {\n    if (!attrs[attr]) {\n      if (type === 'attr') {\n        elem.removeAttr(attr);\n      } else {\n        value.$$.remove();\n      }\n\n      delete attrsObject[attr];\n    }\n  });\n\n  const mixins = new Arr([]);\n\n  for (const attr in attrs) {\n    const {\n      type,\n      dynamic,\n      value,\n      opts\n    } = attrs[attr];\n    let nextType;\n    let nextDynamic;\n    let nextValue;\n\n    if (attrsObject[attr]) {\n      const {\n        type: prevType,\n        value: prevValue\n      } = attrsObject[attr];\n\n      if (type === 'attr') {\n        if (prevType === 'mixin') {\n          prevValue.$$.remove();\n        }\n\n        if (prevValue !== value) {\n          elem.attr(attr, value);\n        }\n\n        nextValue = value;\n      } else {\n        const mixin = prevValue;\n\n        if (prevType === 'attr') {\n          elem.removeAttr(attr);\n        }\n\n        mixin.$$.isDynamic = dynamic;\n\n        if (dynamic) {\n          executeMixinWatchers(mixin, value);\n        } else if (!mixin.$$.evaluated && opts.Mixin.evaluate) {\n          const newValue = mixin.$$.parentScope.$$.evaluate(value, (newValue) => {\n            const {\n              type,\n              dynamic\n            } = attrs[attr];\n\n            if (type === 'mixin' && !dynamic) {\n              executeMixinWatchers(mixin, newValue);\n            }\n          }, mixin);\n\n          mixin.$$.evaluated = true;\n\n          executeMixinWatchers(mixin, newValue);\n        }\n\n        nextValue = mixin;\n      }\n\n      nextType = type;\n      nextDynamic = dynamic;\n    } else {\n      if (type === 'attr') {\n        elem.attr(attr, value);\n\n        nextValue = value;\n      } else {\n        const buildMixin = () => {\n          opts.dynamic = dynamic;\n\n          const mixin = createMixin(opts);\n\n          if (!dynamic && opts.Mixin.evaluate) {\n            const {\n              parentScope,\n              value\n            } = opts;\n            const firstValue = parentScope.$$.evaluate(value, (newValue) => {\n              const {\n                type,\n                dynamic\n              } = attrs[attr];\n\n              if (type === 'mixin' && !dynamic) {\n                executeMixinWatchers(mixin, newValue);\n              }\n            }, mixin);\n\n            mixin.$$.evaluated = true;\n            mixin.$$.value = firstValue;\n          }\n\n          nextValue = mixin;\n\n          return {\n            attr,\n            opts: {\n              type,\n              dynamic,\n              value: mixin\n            }\n          };\n        };\n\n        if (firstTime) {\n          mixins.push(buildMixin);\n        } else {\n          buildMixin();\n        }\n      }\n\n      nextType = type;\n      nextDynamic = dynamic;\n    }\n\n    attrsObject[attr] = {\n      type: nextType,\n      dynamic: nextDynamic,\n      value: nextValue\n    };\n  }\n\n  if (firstTime) {\n    return () => {\n      mixins.forEach((buildMixin) => {\n        const {\n          attr,\n          opts\n        } = buildMixin();\n\n        attrsObject[attr] = opts;\n      });\n    };\n  }\n}\n\nfunction executeMixinWatchers(mixin, value) {\n  const oldValue = mixin.$$.value;\n\n  mixin.$$.value = value;\n\n  mixin.$$.watchers.forEach((watcher) => {\n    watcher(value, oldValue);\n  });\n}\n\nfunction constructMixinRegExp(name) {\n  return new RegExp(`^${ new Str(name).escapeRegExp().$ }(?:\\\\(([^\\\\)]*)\\\\))?(?:#([\\\\s\\\\S]*))?$`);\n}\n\nfunction extendBlock(cls) {\n  new Super(cls).proto(Block);\n  new Super(cls.prototype).proto(Block.prototype);\n}\n\nfunction insertTemplates(template, templates) {\n  const { vars, value } = template;\n  const newTemplates = Object.create(null);\n  const newVars = new Super(vars).object((vars, variable) => {\n    vars[variable] = true;\n  });\n\n  assign(newTemplates, templates);\n  iterate(value, forEachNode);\n\n  function forEachNode({ type, value, children }, index, tree) {\n    if (type === '#comment') {\n      value = new Str(value).trim().$;\n\n      if (newTemplates[value]) {\n        tree[index] = newTemplates[value].value;\n        newVars.assign(new Super(newTemplates[value].vars).object((vars, variable) => {\n          vars[variable] = true;\n        }).$);\n      }\n    } else {\n      iterate(children, forEachNode);\n    }\n  }\n\n  vars.length = 0;\n  new Arr(vars).pushArray(newVars.keys().$);\n\n  return template;\n}\n\nexport { Block, Mixin, initApp, removeApp, insertTemplates };\n","/**\n * @module constants/formats\n * @private\n * @description Exports different types of formatting for {@link Date#format}.\n */\n\nimport { Super } from '../Super';\nimport { Str } from '../Str';\n\nconst zero = new Str('0');\nconst daysOfTheWeekNames = [\n  'Sunday',\n  'Monday',\n  'Tuesday',\n  'Wednesday',\n  'Thursday',\n  'Friday',\n  'Saturday'\n];\nconst daysOfTheWeekAliases = new Super(daysOfTheWeekNames).map((value) => value.slice(0, 3)).$;\nconst monthsNames = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'Jule',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December'\n];\nconst monthsAliases = new Super(monthsNames).map((value) => value.slice(0, 3)).$;\n\n/**\n * @callback module:constants/formats~matchCallback\n * @param {Dat} date - D-wrap of a date to apply format to.\n * @param {String} string - Matched applied expression.\n */\n\n/**\n * @typedef {Object} module:constants/formats~formatExpr\n * @property {String} format - Matched format.\n * @property {module:constants/formats~matchCallback} match - Callback if there was a match.\n */\n\n/**\n * @type {module:constants/formats~formatExpr[]}\n * @description Array of different formats.\n */\nexport default [\n  {\n    format: 'ccc',\n    match: (date, utc) => round(date[utc]('c'), 3)\n  },\n  {\n    format: 'c',\n    match: (date, utc) => date[utc]('c')\n  },\n  {\n    format: 'ss',\n    match: (date, utc) => round(date[utc]('s'), 2)\n  },\n  {\n    format: 's',\n    match: (date, utc) => date[utc]('s')\n  },\n  {\n    format: 'mm',\n    match: (date, utc) => round(date[utc]('m'), 2)\n  },\n  {\n    format: 'm',\n    match: (date, utc) => date[utc]('m')\n  },\n  {\n    format: 'hh',\n    match: (date, utc) => round(date[utc]('h'), 2)\n  },\n  {\n    format: 'h',\n    match: (date, utc) => date[utc]('h')\n  },\n  {\n    format: 'dddd',\n    match: (date, utc) => daysOfTheWeekNames[date[utc]('dw')]\n  },\n  {\n    format: 'ddd',\n    match: (date, utc) => daysOfTheWeekAliases[date[utc]('dw')]\n  },\n  {\n    format: 'dd',\n    match: (date, utc) => round(date[utc]('d'), 2)\n  },\n  {\n    format: 'd',\n    match: (date, utc) => date[utc]('d')\n  },\n  {\n    format: 'MMMM',\n    match: (date, utc) => monthsNames[date[utc]('M') - 1]\n  },\n  {\n    format: 'MMM',\n    match: (date, utc) => monthsAliases[date[utc]('M') - 1]\n  },\n  {\n    format: 'MM',\n    match: (date, utc) => round(date[utc]('M'), 2)\n  },\n  {\n    format: 'M',\n    match: (date, utc) => date[utc]('M')\n  },\n  {\n    format: 'yyyy',\n    match: (date, utc) => round(date[utc]('y'), 4)\n  },\n  {\n    format: 'yy',\n    match: (date, utc) => String(date[utc]('y')).slice(-2)\n  },\n  {\n    format: 'y',\n    match: (date, utc) => date[utc]('y')\n  }\n];\n\n/**\n * @function round\n * @private\n * @param {Number} number - Number to round.\n * @param {Number} digits - Number of the digits of the output.\n * @returns {String} String with necessary additional starting zeroes.\n */\nfunction round(number, digits) {\n  const string = String(number);\n  let zeroes = digits - string.length;\n\n  zeroes = zeroes < 0 ? 0 : zeroes;\n\n  return zero.repeat(zeroes).$ + string;\n}\n","/**\n * @module Dat\n * @private\n * @mixin\n * @description Exports Dat class.\n */\n\nimport { Super } from './Super';\nimport { Num } from './Num';\nimport { Str } from './Str';\nimport { switcher } from './Switcher';\nimport { constructors } from './constants';\nimport formats from './constants/formats';\nimport { isDate, iterate, Symbol, defineProperties } from './helpers';\n\n/**\n * @typedef {*} DateLike\n * @public\n */\n\n/**\n * @typedef {'c'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} AddPeriod\n * @public\n */\n\n/**\n * @typedef {'c'|'s'|'m'|'h'|'d'|'dw'|'M'|'y'} GetPeriod\n * @public\n */\n\n/**\n * @typedef {'c'|'s'|'m'|'h'|'d'|'M'|'y'} OfOnePeriod\n * @public\n */\n\n/**\n * @typedef {'c'|'s'|'m'|'h'|'d'|'M'|'y'} SetPeriod\n * @public\n */\n\n/**\n * @typedef {'ccc'|'c'|'ss'|'s'|'mm'|'m'|'hh'|'h'|'dddd'|'ddd'|'dd'|'d'|'MMMM'|'MMM'|'MM'|'M'|'yyyy'|'yy'|'y'} Format\n * @public\n */\n\nconst coeffs = {\n  c: 1,\n  s: 1000,\n  m: 60000,\n  h: 3600000,\n  d: 86400000,\n  w: 604800000,\n  M: 2592000000,\n  y: 31536000000\n};\n\nconst getSwitcher = switcher({\n  c: (date, utc) => date[`${ utc }Milliseconds`](),\n  s: (date, utc) => date[`${ utc }Seconds`](),\n  m: (date, utc) => date[`${ utc }Minutes`](),\n  h: (date, utc) => date[`${ utc }Hours`](),\n  d: (date, utc) => date[`${ utc }Date`](),\n  dw: (date, utc) => date[`${ utc }Day`](),\n  M: (date, utc) => date[`${ utc }Month`]() + 1,\n  y: (date, utc) => date[`${ utc }FullYear`]()\n}, 'equals', NaN);\nconst setSwitcher = switcher({\n  c: (date, value, utc) => date[`${ utc }Milliseconds`](value),\n  s: (date, value, utc) => date[`${ utc }Seconds`](value),\n  m: (date, value, utc) => date[`${ utc }Minutes`](value),\n  h: (date, value, utc) => date[`${ utc }Hours`](value),\n  d: (date, value, utc) => date[`${ utc }Date`](value),\n  M: (date, value, utc) => date[`${ utc }Month`](value - 1),\n  y: (date, value, utc) => date[`${ utc }FullYear`](value)\n});\n\n/**\n * @class Dat\n * @extends Super\n * @public\n * @param {Date} [date = new Date()] - A date to wrap.\n * @returns {Dat} Instance of Dat.\n * @description Wrap of a date.\n *\n * @example\n * const date = new Dat(new Date());\n */\nclass Dat extends Super {\n  constructor(date = new Date()) {\n    super(date);\n\n    /**\n     * @member Dat#$\n     * @type {Date}\n     * @public\n     * @description Original date.\n     */\n  }\n\n  /**\n   * @method Dat#add\n   * @public\n   * @param {AddPeriod|Object.<AddPeriod, Number>} what - What to add.\n   * @param {Number} [number] - Number of what to add if the first argument is a period string.\n   * @returns {Dat} Returns this.\n   * @description Method for adding amounts of time to the date. Returns new instance of Dat.\n   *\n   * @example\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).add('c', 2).toISOString();         // '2000-01-01T00:00:00.001Z'\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).add({ c: 2, d: 5 }).toISOString(); // '2000-01-06T00:00:00.001Z'\n   */\n  add(what, number) {\n    if (arguments.length >= 2) {\n      what = { [what]: number };\n    }\n\n    return this.time(this.time() + new Super(what).sum((value, what) => coeffs[what] * value));\n  }\n\n  /**\n   * @method Dat#expires\n   * @public\n   * @param {*} [value = this] - Value to resolve after the date expires.\n   * @returns {Promise} New instance of Promise.\n   * @description Method for defining when the date expires.\n   *\n   * @example\n   * new Dat().add('c', 500).expires('Expired').then((value) => {\n   *   // After 500 milliseconds\n   *   console.log(value); // 'Expired'\n   * });\n   */\n  expires(value) {\n    if (!arguments.length) {\n      value = this;\n    }\n\n    return new Num(this.$ - now()).timeout(value);\n  }\n\n  /**\n   * @method Dat#format\n   * @public\n   * @param {String} string - Template for the output.\n   * @param {String} [prefix = ''] - If needed [all special strings]{@link Format}\n   * are treated as they should be prefix with prefix.\n   * @returns {String} Formatted string.\n   * @description Method for creating formatted output based on a string.\n   *\n   * @example\n   * new Dat('1999-12-31T23:59:59.999Z').format('Seconds: $ss, milliseconds: $ccc.', '$');\n   * // 'Seconds: 59, milliseconds: 999.'\n   */\n  format(string, prefix = '') {\n    string = new Str(new Super(string).$);\n    prefix = String(new Super(prefix).$);\n\n    iterate(formats, (format) => {\n      string = string.replaceString(prefix + format.format, format.match(this, 'get'));\n    });\n\n    return string.$;\n  }\n\n  /**\n   * @method Dat#formatUTC\n   * @public\n   * @param {String} string - See {@link Dat#format}.\n   * @param {String} [prefix = ''] - See {@link Dat#format}.\n   * @returns {String} Formatted string.\n   * @description UTC version of {@link Dat#format}.\n   *\n   * @example\n   * new Dat('1999-07-07T03:09:09.099Z').formatUTC(\n   *   `\n   *     Milliseconds: $ccc|$c.\n   *     Seconds:      $ss|$s.\n   *     Minutes:      $mm|$m.\n   *     Hours:        $hh|$h.\n   *     Day:          $dddd|$ddd|$dd|$d.\n   *     Month:        $MMMM|$MMM|$MM|$M.\n   *     Year:         $yyyy|$yy|$y.\n   *   `,\n   *   '$'\n   * );\n   * // Milliseconds: 099|99.\n   * // Seconds:      09|9.\n   * // Minutes:      09|9.\n   * // Hours:        03|3.\n   * // Day:          Friday|Fri|07|7.\n   * // Month:        July|Jul|07|7.\n   * // Year:         1999|99|1999.\n   */\n  formatUTC(string, prefix = '') {\n    string = new Str(new Super(string).$);\n    prefix = String(new Super(prefix).$);\n\n    iterate(formats, (format) => {\n      string = string.replaceString(prefix + format.format, format.match(this, 'getUTC'));\n    });\n\n    return string.$;\n  }\n\n  /**\n   * @method Dat#get\n   * @public\n   * @param {GetPeriod} what - What to get.\n   * @returns {Number} Number of what to get.\n   * @description Method for getting values such as seconds or minutes.\n   *\n   * @example\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).get('s'); // 59\n   */\n  get(what) {\n    return getSwitcher(what, [this.$, 'get']);\n  }\n\n  /**\n   * @method Dat#getUTC\n   * @public\n   * @param {GetPeriod} what - See {@link Dat#get}.\n   * @returns {Number} Number of what to get.\n   * @description UTC version of {@link Dat#get}.\n   *\n   * @example\n   * const date = new Dat(new Date('1999-12-31T23:59:59.999Z'));\n   *\n   * date.getUTC('c');  // 999\n   * date.getUTC('s');  // 59\n   * date.getUTC('m');  // 59\n   * date.getUTC('h');  // 23\n   * date.getUTC('d');  // 31\n   * date.getUTC('dw'); // 5\n   * date.getUTC('M');  // 12\n   * date.getUTC('y');  // 1999\n   */\n  getUTC(what) {\n    return getSwitcher(what, [this.$, 'getUTC']);\n  }\n\n  /**\n   * @method Dat#isAfter\n   * @public\n   * @param {DateLike} date - Date to be compared to this date.\n   * @returns {Boolean} If this date is after the argument one.\n   * @description Finds out if this date is after the argument one.\n   *\n   * @example\n   * new Dat(new Date(333)).isAfter(new Date(334)); // false\n   * new Dat(new Date(333)).isAfter(new Date(332)); // true\n   */\n  isAfter(date) {\n    date = new Date(new Super(date).$);\n\n    return date.getTime() < this.$.getTime();\n  }\n\n  /**\n   * @method Dat#isBefore\n   * @public\n   * @param {DateLike} date - Date to be compared to this date.\n   * @returns {Boolean} If this date is before the argument one.\n   * @description Finds out if this date is before the argument one.\n   *\n   * @example\n   * new Dat(new Date(333)).isBefore(new Date(334)); // true\n   * new Dat(new Date(333)).isBefore(new Date(332)); // false\n   */\n  isBefore(date) {\n    date = new Date(new Super(date).$);\n\n    return date.getTime() > this.$.getTime();\n  }\n\n  /**\n   * @method Dat#isBetween\n   * @public\n   * @param {DateLike} date1 - Start of the range.\n   * @param {DateLike} date2 - End of the range.\n   * @returns {Boolean} If this date is after date1 and before date2.\n   * @description Finds out if this date is after date1 and before date2.\n   *\n   * @example\n   * new Dat(new Date(333)).isBetween(new Date(332), new Date(334)); // true\n   * new Dat(new Date(333)).isBetween(new Date(334), new Date(332)); // false\n   */\n  isBetween(date1, date2) {\n    const time = this.$.getTime();\n\n    date1 = new Date(new Super(date1).$);\n    date2 = new Date(new Super(date2).$);\n\n    return time > date1.getTime() && time < date2.getTime();\n  }\n\n  /**\n   * @method Dat#isInvalid\n   * @public\n   * @returns {Boolean} If the date is invalid.\n   * @description Returns if the date is invalid.\n   *\n   * @example\n   * new Dat(new Date('a')).isInvalid(); // true\n   * new Dat(new Date(1)).isInvalid();   // false\n   */\n  isInvalid() {\n    return this.$.toString() === 'Invalid Date';\n  }\n\n  /**\n   * @method Dat#isPassed\n   * @public\n   * @returns {Boolean} If the date is passed.\n   * @description Returns if the date is passed.\n   *\n   * @example\n   * new Dat(new Date(1)).isPassed(); // true\n   */\n  isPassed() {\n    return this.isBefore(now());\n  }\n\n  /**\n   * @method Dat#ofOne\n   * @public\n   * @param {OfOnePeriod} what - Period to check.\n   * @param {DateLike} date - Date to check.\n   * @returns {Boolean} If two dates are of one second, minute or something else.\n   * @description Returns if two dates are of one second, minute or something else.\n   *\n   * @example\n   * new Dat(new Date('1999-12-31T23:59:59.000Z')).ofOne('s', new Date(1999-12-31T23:59:59.333Z')); // true\n   * new Dat(new Date('1999-12-31T23:59:59.000Z')).ofOne('s', new Date(1999-12-31T23:59:58.999Z')); // false\n   */\n  ofOne(what, date) {\n    if (!(what in coeffs) || what === 'w') {\n      return false;\n    }\n\n    date = new Dat(new Date(date));\n\n    let started;\n\n    return iterate(coeffs, (coeff, w) => {\n      if (w === what) {\n        started = true;\n      }\n\n      if (!started || w === 'w') {\n        return;\n      }\n\n      if (started && this.get(w) !== date.get(w)) {\n        return false;\n      }\n    }) !== false;\n  }\n\n  /**\n   * @method Dat#set\n   * @public\n   * @param {SetPeriod|Object.<SetPeriod, Number>} what - What to add.\n   * @param {Number} [number] - Number of what to set if the first argument is a period string.\n   * @returns {Dat} Returns this.\n   * @description Method for setting values such as seconds or minutes.\n   *\n   * @example\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).set('s', 58).get('s');           // 58\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).set({ c: 998, s: 58 }).get('c'); // 998\n   */\n  set(what, number) {\n    const date = this.$;\n\n    if (arguments.length >= 2) {\n      what = { [what]: number };\n    }\n\n    what = new Super(what).$;\n\n    iterate(what, (value, what) => {\n      setSwitcher(what, [date, value, 'set']);\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Dat#setUTC\n   * @public\n   * @param {SetPeriod|Object.<SetPeriod, Number>} what - See {@link Dat#set}.\n   * @param {Number} [number] - See {@link Dat#set}.\n   * @returns {Dat} Returns this.\n   * @description UTC version of {@link Dat#set}.\n   *\n   * @example\n   * const date = new Dat(new Date('1999-12-31T23:59:59.999Z'));\n   *\n   * date.setUTC('ccc', 998).getUTC('ccc'); // 998\n   * date.setUTC({\n   *   s: 58,\n   *   m: 58,\n   *   h: 22\n   * });\n   *\n   * date.getUTC('s'); // 58\n   * date.getUTC('m'); // 58\n   * date.getUTC('h'); // 23\n   */\n  setUTC(what, number) {\n    const date = this.$;\n\n    if (arguments.length >= 2) {\n      what = { [what]: number };\n    }\n\n    what = new Super(what).$;\n\n    iterate(what, (value, what) => {\n      setSwitcher(what, [date, value, 'setUTC']);\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Dat#setUTC\n   * @public\n   * @param {Number} [time] - Time to set.\n   * @returns {Dat|Number} - If the time argument is present this is returned otherwise the time is returned.\n   * @description Synonym for both\n   * [Date#getTime]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime} and\n   * [Date#setTime]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime}.\n   */\n  time(time) {\n    const date = this.$;\n\n    if (arguments.length) {\n      date.setTime(time);\n    }\n\n    return date.getTime();\n  }\n\n  toISOString() {\n    return this.$.toISOString();\n  }\n\n  toLocaleString() {\n    return this.$.toLocaleString();\n  }\n\n  toString() {\n    return this.$.toString();\n  }\n\n  valueOf() {\n    return this.$.valueOf();\n  }\n}\ndefineProperties(Dat.prototype, {\n  [Symbol.toStringTag]: 'Dat'\n});\n\nconstructors[1].push({\n  check: isDate,\n  cls: Dat\n});\n\n/**\n * @function now\n * @public\n * @returns {Number} Number of milliseconds.\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/now\n * @description Synonym for\n * [Date.now]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/now}.\n */\nfunction now() {\n  return Date.now();\n}\n\n/**\n * @function date\n * @public\n * @param {DateLike} [date = new Date()] - Date-like value that is passed to the Date constructor.\n * @returns {Dat} New instance of Dat.\n * @description Synonym for new Dat(new Date(date));\n */\nfunction date(date) {\n  if (!arguments.length) {\n    return new Dat(new Date(now()));\n  }\n\n  date = new Super(date).$;\n\n  return new Dat(new Date(date));\n}\n\nexport { Dat, now, date };\n","/**\n * @module helpers/constructURL\n * @private\n * @description Exports constructURL method.\n */\n\nimport { Arr } from '../Arr';\nimport { Str } from '../Str';\nimport { switcher } from '../Switcher';\nimport { isArray, isObject, isPlainObject } from './checkTypes';\nimport { iterate } from './iterate';\n\n/**\n * @type {RegExp}\n * @description Absolute URL pattern.\n */\nconst absoluteURLRegexp = /^(([a-z][a-z\\d+\\-.]*:)?\\/\\/|data:[a-z]+\\/[a-z]+;base64,)/i;\nconst querySwitcher = switcher('call', () => new Arr([]))\n  .case(isArray, (prefix, query) => {\n    let queryParams = new Arr([]);\n\n    iterate(query, (value) => {\n      if (isPlainObject(value) || isArray(value)) {\n        queryParams = queryParams.concat(querySwitcher(value, [`${ prefix }[]`]));\n\n        return;\n      }\n\n      queryParams.push({\n        param: `${ prefix }[]`,\n        value\n      });\n    });\n\n    return queryParams.$;\n  })\n  .case(isPlainObject, (prefix, query) => {\n    let queryParams = new Arr([]);\n\n    iterate(query, (value, param) => {\n      if (isPlainObject(value) || isArray(value)) {\n        queryParams = queryParams.concat(querySwitcher(value, [prefix ? `${ prefix }[${ param }]` : param]));\n\n        return;\n      }\n\n      queryParams.push({\n        param: prefix ? `${ prefix }[${ param }]` : param,\n        value: isObject(value) ? JSON.stringify(value) : String(value)\n      });\n    });\n\n    return queryParams.$;\n  });\n\n/**\n * @function constructURL\n * @param {String} baseURL - BaseURL of the output URL.\n * @param {String} url - Main part of the output URL.\n * @param {Object} params - Params to replace in the url expressions like \":param\".\n * @param {Object} query - Object with query params.\n * @param {Object} [hash = ''] - URL hash.\n * @param {Object} [encodeOptions = {}] - If you need to encode something.\n * @param {Object} [encodeOptions.params = true] - If you need to encode params.\n * @param {Object} [encodeOptions.query = true] - If you need to encode query params.\n * @returns {String} Constructed URL.\n * @description Function for constructing URL from the base URL, URL, params and query params.\n */\nexport default (baseURL, url, params, query, hash = '', encodeOptions = {}) => {\n  const {\n    params: encodeParams = true,\n    query: encodeQuery = true\n  } = encodeOptions;\n  let URL = isAbsolute(url)\n    ? url\n    : `${ String(baseURL).replace(/\\/+$/, '') }/${ String(url).replace(/^\\/+/, '') }`;\n\n  iterate(params, (value, param) => {\n    URL = new Str(URL).replaceString(`:${ param }`, encode(value, encodeParams)).$;\n  });\n\n  const queryParams = querySwitcher(query, ['']);\n\n  if (queryParams.length) {\n    URL += (URL.indexOf('?') === -1 ? '?' : '&') + queryParams\n      .map(({ param, value }) => `${ encode(param, encodeQuery) }=${ encode(value, encodeQuery) }`)\n      .join('&');\n  }\n\n  return `${ URL }${ hash ? `#${ hash }` : '' }`;\n};\n\n/**\n * @function isAbsolute\n * @param {String} url - URL to check if it is absolute or not.\n * @returns {Boolean} If the argument URL is absolute or not.\n */\nfunction isAbsolute(url) {\n  return absoluteURLRegexp.test(url);\n}\n\n/**\n * @function encode\n * @param {String} string - String to encode using encodeURIComponent.\n * @param {Boolean} isEncoded - If the string should be encoded.\n * @returns {String} Encoded string.\n */\nfunction encode(string, isEncoded) {\n  return isEncoded ? encodeURIComponent(string) : string;\n}\n","/**\n * @module helpers/parseHeaders\n * @private\n * @description Exports parseHeaders method.\n */\n\nimport { Str } from '../Str';\nimport { iterate } from './iterate';\n\n/**\n * @function parseHeaders\n * @param {String} rawHeaders - Raw headers.\n * @returns {Object} Headers object\n * @description Function for parsing raw headers.\n */\nexport default (rawHeaders) => {\n  const headers = {};\n\n  iterate((rawHeaders || '').split('\\n'), (value) => {\n    const index = value.indexOf(':');\n    const key = new Str(value.substring(0, index))\n      .trim()\n      .toCamelCase().$;\n    const val = new Str(value.substring(index + 1)).trim().$;\n\n    if (key) {\n      headers[key] = (headers[key] ? `${ headers[key] }, ` : '') + val;\n    }\n  });\n\n  return headers;\n};\n","/**\n * @module helpers/transformData\n * @private\n * @description Exports transformData method.\n */\n\nimport { Arr } from '../Arr';\nimport { Super } from '../Super';\nimport { isObject, toStringTag } from './';\n\nconst notToTransform = new Arr(['FormData', 'File', 'Blob', 'ArrayBuffer', 'String', 'Number']);\nconst withoutBody = new Arr(['DELETE', 'GET', 'HEAD']);\n\n/**\n * @function transformData\n * @param {*} data - Data to transform\n * @param {String} method - HTTP method.\n * @param {Object} headers - Object with headers.\n * @returns {*} - Transformed data.\n */\nexport default (data, method, headers) => {\n  data = new Super(data).$;\n\n  if (withoutBody.indexOfStrict(method) !== -1) {\n    return null;\n  }\n\n  if (isObject(data) && notToTransform.indexOfStrict(toStringTag(data)) === -1) {\n    if (!headers.contentType) {\n      headers.contentType = ['application/json;charset=utf-8'];\n    }\n\n    return new Super(data).json();\n  }\n\n  return data;\n};\n","/**\n * @module Fetch\n * @private\n * @mixin\n * @description Exports Fetch class.\n */\n\nimport { Promise } from './Promise';\nimport { Super } from './Super';\nimport { Arr } from './Arr';\nimport { Str } from './Str';\nimport {\n  isArray, isFunction, isString,\n  assign, Symbol, validate, iterate, defineProperties\n} from './helpers';\nimport constructURL from './helpers/constructURL';\nimport parseHeaders from './helpers/parseHeaders';\nimport transformData from './helpers/transformData';\n\n/**\n * @typedef {'get'|'post'|'delete'|'head'|'put'|'patch'} FetchMethod\n * @public\n */\n\n/**\n * @typedef {Object} FetchConfig\n * @public\n * @property {Array.<AfterMiddleware|FetchErrorAfterMiddleware>} [after]\n * @property {Object} [auth]\n * @property {String} [auth.username]\n * @property {String} [auth.password]\n * @property {String} [baseURL]\n * @property {Array.<BeforeMiddleware|FetchErrorBeforeMiddleware>} [before]\n * @property {*} [data]\n * @property {Object.<String, String[]>} [headers]\n * @property {FetchMethod} [method]\n * @property {Object} [params]\n * @property {Object} [query]\n * @property {String} [responseType]\n * @property {Number} [timeout]\n * @property {String} [url]\n * @property {Boolean} [withCredentials]\n */\n\n/**\n * @typedef {Object} FetchResponse\n * @public\n * @property {FetchConfig} config\n * @property {*} data\n * @property {Object.<String, String>} headers\n * @property {Number} status\n * @property {String} statusText\n * @property {XMLHttpRequest} xhr\n */\n\n/**\n * @callback FetchAfterMiddleware\n * @public\n * @param {FetchResponse} config - Fetch response.\n */\n\n/**\n * @callback FetchErrorAfterMiddleware\n * @public\n * @param {Error|*} err - Thrown error.\n * @param {FetchResponse} config - Fetch response.\n */\n\n/**\n * @callback FetchBeforeMiddleware\n * @public\n * @param {FetchConfig} config - Fetch config.\n */\n\n/**\n * @callback FetchErrorBeforeMiddleware\n * @public\n * @param {Error|*} err - Thrown error.\n * @param {FetchConfig} config - Fetch config.\n */\n\n/**\n * @callback FetchConfigFunction\n * @public\n * @param {FetchConfig} config\n */\n\nconst defaults = {\n  after: [],\n  auth: {\n    username: '',\n    password: ''\n  },\n  baseURL: global.location.origin,\n  before: [],\n  data: null,\n  headers: {},\n  method: 'get',\n  params: {},\n  query: {},\n  responseType: '',\n  timeout: 0,\n  url: '',\n  withCredentials: false\n};\nconst uploadMethods = new Arr(['post', 'put']);\n\n/**\n * @class Fetch\n * @extends Function\n * @public\n * @param {FetchConfig} [config = {}] - A number to wrap.\n * @returns {Fetch} Instance of Fetch.\n * An instance of Fetch is a function that simply calls #request with the same arguments.\n * @description Class for fetching data.\n *\n * @example\n * const fetch = new Fetch();\n *\n * fetch('/data').then((res) => {\n *   console.log(res);\n * });\n */\nclass Fetch extends Function {\n  constructor(config = {}) {\n    super();\n\n    function fetch() {\n      return fetch.request.apply(fetch, arguments);\n    }\n\n    const conf = new Super({}).deepAssign(defaults, config).$;\n\n    if (conf.before.indexOf(fetchBeforeMiddleware) === -1) {\n      conf.before.push(fetchBeforeMiddleware);\n    }\n\n    /**\n     * @member {FetchConfig} Fetch#$$\n     * @type {FetchConfig}\n     * @public\n     * @description Fetch config.\n     */\n    Object.defineProperty(fetch, '$$', { value: conf });\n    Object.setPrototypeOf(fetch, Fetch.prototype);\n\n    return fetch;\n  }\n\n  /**\n   * @method Fetch#after\n   * @public\n   * @param {FetchAfterMiddleware|FetchErrorAfterMiddleware} middleware - Middleware to add.\n   * @param {Boolean|*} [afterAll = true] - Boolean parameter where to put the middleware.\n   * Truthy parameter stands for \"to the end\" and falsey for \"to the beginning\".\n   * @returns {Fetch} Returns this.\n   * @description Middleware that is called after the request.\n   * If the middleware has 2 or less arguments it's treated as success middleware otherwise as an error one.\n   * If the middleware returns a promise it becomes a part of the middleware chain.\n   *\n   * @example\n   * const fetch = new Fetch()\n   *   .after((err, res) => {\n   *     console.log(err);\n   *\n   *     throw err;\n   *   })\n   *   .after((res) => {\n   *     res.json = D(res.data).parseJSON():\n   *   });\n   */\n  after(middleware, afterAll = true) {\n    validate([middleware], ['function'], 'Fetch#after');\n\n    const { after } = this.$$;\n\n    if (afterAll) {\n      after.push(middleware);\n    } else {\n      after.unshift(middleware);\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Fetch#before\n   * @public\n   * @param {FetchBeforeMiddleware|FetchErrorBeforeMiddleware} middleware - Middleware to add.\n   * @param {Boolean|*} [beforeAll = true] - Boolean parameter where to put the middleware.\n   * Truthy parameter stands for \"to the beginning\" and falsey for \"to the end\".\n   * @returns {Fetch} Returns this.\n   * @description Middleware that is called before the request.\n   * If the middleware has 2 or less arguments it's treated as success middleware otherwise as an error one.\n   * If the middleware returns a promise it becomes a part of the middleware chain.\n   *\n   * @example\n   * const fetch = new Fetch()\n   *   .before((err, req) => {\n   *     console.log(err);\n   *\n   *     throw err;\n   *   })\n   *   .before((req) => {\n   *     if (req.url === '/veryLongRequest') {\n   *       req.timeout = 30000;\n   *     }\n   *   });\n   */\n  before(middleware, beforeAll = true) {\n    validate([middleware], ['function'], 'Fetch#before');\n\n    const { before } = this.$$;\n\n    if (beforeAll) {\n      before.unshift(middleware);\n    } else {\n      before.push(middleware);\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Fetch#config\n   * @public\n   * @param {String|FetchConfig|FetchConfigFunction} [property] - If it's a function\n   * it's called with the fetch config argument, if it's a string the value argument\n   * is used for assigning this property to the fetch config\n   * otherwise it's assigned to the fetch config.\n   * @param {*} [value] - See the property argument.\n   * @returns {Fetch|FetchConfig} If the argument is present this is returned otherwise the fetch config is returned.\n   * @description Method for getting and setting config.\n   *\n   * @example\n   * const fetch = new Fetch();\n   *\n   * fetch.config({ baseURL: 5000 });\n   * fetch.config().timeout; // 5000\n   *\n   * fetch.config((config) => {\n   *   config.baseURL += '/api';\n   * });\n   */\n  config(property, value) {\n    const conf = this.$$;\n\n    if (!arguments.length) {\n      return conf;\n    }\n\n    if (isFunction(property)) {\n      property(conf);\n    } else {\n      if (arguments.length >= 2) {\n        property = { [property]: value };\n      }\n\n      new Super(conf).deepAssign(property);\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Fetch#delete\n   * @public\n   * @param {String} [url] - See {@link Fetch#request}.\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\n   * @description Shorthand for #request for delete requests.\n   *\n   * @example\n   * new Fetch().delete('/data').then((res) => {\n   *   console.log(res);\n   * });\n   */\n  delete(url, config = {}) {\n    if (!isString(url)) {\n      config = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'delete' }, config));\n  }\n\n  /**\n   * @method Fetch#get\n   * @public\n   * @param {String} [url] - See {@link Fetch#request}.\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\n   * @description Shorthand for #request for get requests.\n   *\n   * @example\n   * new Fetch().get('/data').then((res) => {\n   *   console.log(res);\n   * });\n   */\n  get(url, config = {}) {\n    if (!isString(url)) {\n      config = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'get' }, config));\n  }\n\n  /**\n   * @method Fetch#head\n   * @public\n   * @param {String} [url] - See {@link Fetch#request}.\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\n   * @description Shorthand for #request for head requests.\n   *\n   * @example\n   * new Fetch().head('/data').then((res) => {\n   *   console.log(res);\n   * });\n   */\n  head(url, config = {}) {\n    if (!isString(url)) {\n      config = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'head' }, config));\n  }\n\n  /**\n   * @method Fetch#headers\n   * @public\n   * @param {String|Object.<String, String|String[]>} header - A header string or an object of the following format:\n   * { [header]: [value1, value2, ...] }.\n   * @param {String|String[]} [value] - Header value. If the first argument is a string\n   * this has to be a header value or an array of header values.\n   * @returns {Fetch} Returns this.\n   * @description Method for setting request headers.\n   *\n   * @example\n   * const fetch = new Fetch()\n   *   .headers('Header1', 'Value')\n   *   .headers('Header2', ['Value1', 'Value2'])\n   *   .headers({\n   *     Header3: ['Value1', 'Value2']\n   *   });\n   */\n  headers(header, value) {\n    const { headers } = this.$$;\n\n    if (arguments.length >= 2) {\n      header = { [header]: value };\n    }\n\n    iterate(header, (value, header) => {\n      const array = headers[header] || [];\n      const toPush = isArray(value) ? value : [value];\n\n      (headers[header] = array).push.apply(array, toPush);\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Fetch#instance\n   * @public\n   * @param {FetchConfig} [config] - New config if needed.\n   * @returns {Fetch} New instance of Fetch.\n   * @description Method for creating new fetch instances based on already existent.\n   *\n   * @example\n   * const mainFetch = new Fetch({\n   *   baseURL: '//other.domain.com/api',\n   *   withCredentials: true\n   * });\n   *\n   * const longFetch = mainFetch.instance({\n   *   timeout: 10000\n   * });\n   */\n  instance(config = {}) {\n    const dataConfig = new Super(config).hasOwn('data')\n      ? { data: config.data }\n      : {};\n\n    delete config.data;\n\n    const conf = new Super({})\n      .deepAssign(this.$$, config)\n      .assign(dataConfig)\n      .$;\n\n    return new Fetch(conf);\n  }\n\n  /**\n   * @method Fetch#patch\n   * @public\n   * @param {String} [url] - See {@link Fetch#request}.\n   * @param {*} [data] - Additional parameter for uploading data.\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\n   * @description Shorthand for #request for head requests.\n   *\n   * @example\n   * new Fetch().patch('/data', { user: 'John' }).then((res) => {\n   *   console.log(res);\n   * });\n   */\n  patch(url, data = {}, config = {}) {\n    if (arguments.length && !isString(url)) {\n      config = data;\n      data = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'patch', data }, config));\n  }\n\n  /**\n   * @method Fetch#post\n   * @public\n   * @param {String} [url] - See {@link Fetch#request}.\n   * @param {*} [data] - Additional parameter for uploading data.\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\n   * @description Shorthand for #request for head requests.\n   *\n   * @example\n   * new Fetch().post('/data', { user: 'John' }).then((res) => {\n   *   console.log(res);\n   * });\n   */\n  post(url, data = {}, config = {}) {\n    if (arguments.length && !isString(url)) {\n      config = data;\n      data = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'post', data }, config));\n  }\n\n  /**\n   * @method Fetch#put\n   * @public\n   * @param {String} [url] - See {@link Fetch#request}.\n   * @param {*} [data] - Additional parameter for uploading data.\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\n   * @description Shorthand for #request for head requests.\n   *\n   * @example\n   * new Fetch().put('/data', { user: 'John' }).then((res) => {\n   *   console.log(res);\n   * });\n   */\n  put(url, data = {}, config = {}) {\n    if (arguments.length && !isString(url)) {\n      config = data;\n      data = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'put', data }, config));\n  }\n\n  /**\n   * @method Fetch#request\n   * @public\n   * @param {String} [url] - URL for the request.\n   * @param {FetchConfig} [config] - Additional config for this particular request.\n   * @returns {Promise.<FetchResponse, Error>} Promise that is resolved with the request response.\n   * @description Main function for making requests. All request methods call this method\n   * including the fetch instance itself.\n   *\n   * @example\n   * const fetch = new Fetch();\n   *\n   * fetch.request('/data', { timeout: 1000 }).then((res) => {\n   *   console.log(res);\n   * });\n   *\n   * fetch.request({ timeout: 1000 }).then((res) => {\n   *   console.log(res);\n   * });\n   *\n   * fetch.request().then((res) => {\n   *   console.log(res);\n   * });\n   */\n  request(url, config = {}) {\n    if (arguments.length === 1 && !isString(url)) {\n      config = url;\n    }\n\n    const dataConfig = new Super(config).hasOwn('data')\n      ? { data: config.data }\n      : {};\n    const urlConfig = isString(url)\n      ? { url }\n      : {};\n\n    delete config.data;\n\n    const conf = new Super(this.$$)\n      .deepClone()\n      .deepAssign(urlConfig, config)\n      .assign(dataConfig)\n      .$;\n\n    let xhr;\n    let promise = Promise.resolve();\n\n    iterate(conf.before, (middleware) => {\n      promise = promise.then(() => {\n        if (middleware.length >= 2) {\n          return Promise.resolve();\n        }\n\n        return new Promise((resolve) => {\n          resolve(middleware(conf));\n        });\n      }, (err) => {\n        if (middleware.length < 2) {\n          return Promise.reject(err);\n        }\n\n        return new Promise((resolve) => {\n          resolve(middleware(err, conf));\n        });\n      });\n    });\n\n    promise = promise.then(() => new Promise((resolve, reject) => {\n      const {\n        after,\n        auth: {\n          username,\n          password\n        },\n        data,\n        headers,\n        method,\n        onprogress,\n        responseType,\n        timeout,\n        url,\n        withCredentials\n      } = conf;\n\n      xhr = new XMLHttpRequest();\n\n      xhr.open(method, url, true, username, password);\n\n      iterate(headers, (value, header) => {\n        xhr.setRequestHeader(header, value);\n      });\n\n      if (onprogress) {\n        if (uploadMethods.indexOfStrict(method) === -1) {\n          xhr.onprogress = onprogress;\n        } else {\n          xhr.upload.onprogress = onprogress;\n        }\n      }\n\n      xhr.onabort = () => {\n        const error = new Error('Request was aborted');\n\n        error.type = 'ABORT_ERROR';\n\n        reject(error);\n\n        xhr = null;\n      };\n\n      xhr.onerror = () => {\n        const error = new Error('Network error');\n\n        error.type = 'NETWORK_ERROR';\n\n        reject(error);\n\n        xhr = null;\n      };\n\n      xhr.ontimeout = () => {\n        const error = new Error('Request time exceeded');\n\n        error.type = 'TIMEOUT_ERROR';\n\n        reject(error);\n\n        xhr = null;\n      };\n\n      xhr.onreadystatechange = () => {\n        if (!xhr || !xhr.status || xhr.readyState !== 4) {\n          return;\n        }\n\n        const response = {\n          config: conf,\n          data: !responseType || responseType === 'text' ? xhr.responseText : xhr.response,\n          headers: parseHeaders(xhr.getAllResponseHeaders()),\n          status: xhr.status === 1223 ? 204 : xhr.status,\n          statusText: xhr.status === 1223 ? 'No Content' : xhr.statusText,\n          xhr\n        };\n\n        let promise = Promise.resolve();\n\n        iterate(after, (middleware) => {\n          promise = promise.then(() => {\n            if (middleware.length >= 2) {\n              return Promise.resolve();\n            }\n\n            return new Promise((resolve) => {\n              resolve(middleware(response));\n            });\n          }, (err) => {\n            if (middleware.length < 2) {\n              return Promise.reject(err);\n            }\n\n            return new Promise((resolve) => {\n              resolve(middleware(err, response));\n            });\n          });\n        });\n\n        resolve(promise\n          .then(() => response)\n          .catch((err) => {\n            try {\n              err.response = response;\n            } catch (e) {\n              throw err;\n            }\n\n            throw err;\n          })\n        );\n      };\n\n      xhr.responseType = responseType;\n      xhr.timeout = Number(timeout) || 0;\n      xhr.withCredentials = !!withCredentials;\n\n      xhr.send(data);\n    }));\n\n    promise.abort = function abort() {\n      if (xhr) {\n        xhr.abort();\n      }\n\n      return this;\n    };\n\n    return promise;\n  }\n}\n\ndefineProperties(Fetch.prototype, {\n  [Symbol.toStringTag]: 'Fetch'\n});\n\n/**\n * @function fetchBeforeMiddleware\n * @private\n * @param {FetchConfig} config\n * @description Built-in before middleware for url, data, method, headers construction.\n */\nfunction fetchBeforeMiddleware(config) {\n  const {\n    baseURL,\n    data,\n    headers,\n    method,\n    params,\n    query,\n    url\n  } = config;\n  const METHOD = method.toUpperCase();\n\n  config.method = METHOD;\n  config.url = constructURL(baseURL, url, params, query);\n  config.data = transformData(data, METHOD, headers);\n  config.headers = new Super(headers).object((headers, values, header) => {\n    header = new Str(header)\n      .toCapitalCase()\n      .replace(/\\s+/g, '-')\n      .$;\n\n    headers[header] = values.join(', ');\n  }).$;\n}\n\n/**\n * @const {Fetch} fetch\n * @type {Fetch}\n * @public\n * @description Empty instance of Fetch.\n */\nconst fetch = new Fetch();\n\nexport { Fetch, fetch };\n","/**\n * @module helpers/resolveURL\n * @private\n * @description Exports Object.assign-like method.\n */\n\nimport { Str } from '../Str';\n\nconst { location } = global;\n\nexport default (decodeQuery) => {\n  const {\n    search: query,\n    hash\n  } = location;\n  const params = {\n    query: {},\n    hash: hash.replace(/^#/, '')\n  };\n\n  if (!query) {\n    return params;\n  }\n\n  new Str(query.replace(/^\\?/, ''))\n    .split('&')\n    .forEach((rawParam) => {\n      let [param, value = ''] = rawParam.split('=');\n\n      param = decodeQuery ? decodeURIComponent(param) : param;\n      value = decodeQuery ? decodeURIComponent(value) : value;\n\n      if (!/^[^[]+/.test(param)) {\n        return;\n      }\n\n      let paramName;\n      let paramObject = params.query;\n\n      new Str(param)\n        .match(/^[^[\\]]*|\\[[^[\\]]*]/g)\n        .forEach((name) => {\n          if (name.indexOf('[')) {\n            paramName = name;\n\n            return;\n          }\n\n          name = name.slice(1, -1);\n\n          paramObject = paramObject[paramName] = paramObject[paramName] || (name ? {} : []);\n          paramName = name || paramObject.length;\n        });\n\n      paramObject[paramName] = value;\n    });\n\n  return params;\n};\n","/**\n * @module Router\n * @private\n * @mixin\n * @description Exports Router.\n */\n\nimport { Arr } from './Arr';\nimport { Elem, win } from './Elem';\nimport { self } from './Func';\nimport { Str } from './Str';\nimport { Super } from './Super';\nimport { switcher } from './Switcher';\nimport { assign, isNil, isRegExp, isString } from './helpers';\nimport constructURL from './helpers/constructURL';\nimport resolveURL from './helpers/resolveURL';\n\nconst Routes = new Arr([]);\nconst currentRoutes = new Arr([]);\nconst subscribers = {};\nconst {\n  history,\n  location,\n  location: {\n    href: initialURL\n  }\n} = global;\nlet initialized;\nlet pushed;\nlet wasRoot;\nlet wasDefault;\nlet rootRoute;\nlet redirectRoute;\nlet redirectRouteIsNeededToPush = false;\nlet RedirectRoute;\nlet defaultRoute;\nlet DefaultRoute;\nlet currentRoute;\nlet currentRouteParams;\n\nconst pathSwitcher = switcher('call', () => {\n  throw new Error('State path must be a string, a regular expression or undefined! (at registerState)');\n})\n  .case(isRegExp, (path) => ({\n    path: path.source.replace(/\\\\\\//g, '/'),\n    url: path,\n    params: {}\n  }))\n  .case(isNil, () => ({\n    path: '/',\n    url: '/',\n    params: {}\n  }))\n  .case(isString, (path) => {\n    if (path.indexOf('/')) {\n      throw new Error('If route path is a string it must start with \"/\"! (at registerState)');\n    }\n\n    const index = path.indexOf('?');\n    const params = new Super({});\n    let newURL = '';\n    const newPath = new Str(path)\n      .slice(0, index === -1 ? path.length : index)\n      .replace(/^\\/|\\/$/g)\n      .split(/\\//)\n      .map((part, i, array) => {\n        if (!part && array.length > 1) {\n          throw new Error('If route path is a string it must not contain \"//\" or end with \"/\"! (at makeRoute)');\n        }\n\n        const index = part.indexOf(':');\n\n        if (index > 0) {\n          throw new Error('If route path is a string resource part must be either a string or an URL parameter! (at makeRoute)');\n        }\n\n        if (index === -1) {\n          return {\n            url: part,\n            value: part\n          };\n        }\n\n        const {\n          name,\n          regexp = /[^/]*/\n        } = resolveParameter(\n          part.slice(1),\n          'URL parameter must not be an empty string or contain characters besides \"a-zA-Z_$\"! (at makeRoute)',\n          'URL parameter regexp validator must be within parentheses (e.g. :userId(\\\\d+) and not contain ones)! (at makeRoute)'\n        );\n\n        params.$[name] = params.count;\n\n        return {\n          type: 'param',\n          url: `:${ name }`,\n          value: regexp\n        };\n      })\n      .word(({ type, url, value }) => {\n        let newPath;\n\n        if (type === 'param') {\n          newPath = `(${ value.source.replace(/\\\\\\//g, '/') })`;\n        } else {\n          newPath = new Str(value).escapeRegExp().$;\n        }\n\n        newURL += `/${ url }`;\n\n        return `/${ newPath }`;\n      });\n\n    return {\n      path: newPath,\n      url: newURL,\n      params: params.$\n    };\n  });\n\nconst router = {\n  buildURL,\n  go,\n  goToURL,\n  pushURL,\n  redirect,\n  redirectToURL,\n  replaceURL\n};\n\nclass Route {\n  constructor(options) {\n    options = options || {};\n\n    const {\n      name,\n      path = '/',\n      abstract = false,\n      parent,\n      decodeQuery = true,\n      encodeQuery = true,\n      decodeParams = true,\n      encodeParams = true\n    } = options || {};\n    const {\n      url: relativeURL,\n      path: relativePath,\n      params\n    } = pathSwitcher(path);\n    const query = {};\n\n    new Super(this).assign({\n      name,\n      parentName: parent,\n      abstract: !!abstract,\n      children: new Arr([]),\n      decodeParams: !!decodeParams,\n      decodeQuery: !!decodeQuery,\n      encodeParams: !!encodeParams,\n      encodeQuery: !!encodeQuery,\n      params,\n      query,\n      relativePath,\n      relativeURL\n    });\n\n    const index = isString(path)\n      ? path.indexOf('?')\n      : -1;\n\n    if (index !== -1) {\n      new Str(path)\n        .replace(/&$/)\n        .slice(index + 1)\n        .split('&')\n        .forEach((param) => {\n          const {\n            name,\n            regexp = /[\\s\\S]*/\n          } = resolveParameter(\n            param,\n            'Query parameter must not be an empty string or contain characters besides \"a-zA-Z_$\"! (at makeRoute)',\n            'Query parameter regexp validator must be within parentheses (e.g. :userId(\\\\d+)) and not contain them! (at makeRoute)'\n          );\n\n          query[name] = new RegExp(`^${ regexp.source.replace(/\\\\\\//g, '/') }$`);\n        });\n    }\n\n    if (name === defaultRoute && (\n        new Super(params).count\n        || new Super(query).count\n      )) {\n      throw new Error('Default route must not have URL or query params! (at makeRoute)');\n    }\n  }\n}\n\nconst baseRoute = new Route();\n\nfunction initRouter() {\n  if (initialized) {\n    return;\n  }\n\n  initialized = true;\n  RedirectRoute = (Routes.find(({ name }) => name === redirectRoute) || {}).value;\n  DefaultRoute = (Routes.find(({ name }) => name === defaultRoute) || {}).value;\n\n  if (redirectRoute && !RedirectRoute) {\n    throw new Error(`There is no specified fallback route (\"${ redirectRoute }\")! (at initRouter)`);\n  }\n\n  Routes\n    .forEach((route) => {\n      const {\n        parentName,\n        name\n      } = route;\n      const ParentName = parentName || rootRoute;\n      const { value: parent } = Routes.find(({ name }) => name === ParentName) || {};\n\n      if (!parent) {\n        throw new Error(`No such parent route (\"${ ParentName }\") found for the route (\"${ name }\")! (at initRouter)`);\n      }\n\n      if (!parent.abstract && name !== rootRoute) {\n        throw new Error(`Parent route must be abstract (for \"${ name }\")! (at initRouter)`);\n      }\n\n      if (name !== rootRoute) {\n        route.parentName = ParentName;\n      }\n\n      route.parent = name === rootRoute\n        ? baseRoute\n        : parent;\n    })\n    .forEach((route) => {\n      const {\n        name,\n        parent: {\n          params: parentParams,\n          query: parentQuery,\n          path\n        },\n        params,\n        query,\n        relativeURL,\n        relativePath\n      } = route;\n      let proto = route;\n      let count = 0;\n      let newPath = relativePath;\n      let newURL = '';\n\n      if (isRegExp(path)) {\n        throw new Error('URL regexp route cannot be extended! (at initRouter)');\n      }\n\n      while (proto = proto.parent) {\n        count += new Super(proto.params).count;\n        newPath = proto.relativePath + newPath;\n        newURL = proto.relativeURL + newURL;\n\n        proto.children.push(route);\n      }\n\n      newPath = new RegExp(`^${ newPath.replace(/\\/+/g, '/').replace(/\\/$/, '') || '/' }$`);\n      newURL = isRegExp(relativeURL)\n        ? newPath\n        : (newURL + relativeURL).replace(/\\/+/g, '/').replace(/\\/$/, '') || '/';\n\n      new Super(query).proto(parentQuery);\n      new Super(params)\n        .proto(parentParams)\n        .forEach((value, key, params) => {\n          params[key] += count;\n        });\n\n      if (name === defaultRoute && (\n          new Super(params).count\n          || new Super(query).count\n        )) {\n        throw new Error('Default route must not have URL or query params! (at initRouter)');\n      }\n\n      route.url = newURL;\n      route.validatePath = newPath;\n    });\n\n  changeRoute();\n\n  win.on({\n    popstate() {\n      if (location.href !== initialURL) {\n        pushed = true;\n      }\n\n      if (pushed) {\n        changeRoute();\n      }\n    },\n    click(e) {\n      const closestLink = new Elem(e.target).closest('a');\n\n      if (closestLink.length && closestLink.attr('target') !== '_blank' && !closestLink.hasAttr('no-routing')) {\n        const push = !closestLink.hasAttr('replace');\n\n        e.preventDefault();\n\n        forward(closestLink.attr('href') || '', push);\n      }\n    }\n  });\n}\n\nfunction makeRoute(options) {\n  return (Block) => {\n    options = assign({}, options, Block.routerOptions);\n\n    const {\n      name,\n      path,\n      abstract,\n      root,\n      fallbackTo,\n      replace = true,\n      default: isDefault\n    } = options || {};\n\n    if (initialized) {\n      console.warn('Router was already initialized (at makeRoute)');\n\n      return self;\n    }\n\n    if (wasRoot && root) {\n      throw new Error(`There can't be two root routes (\"${ rootRoute }\" and \"${ name }\")! (at makeRoute)`);\n    }\n\n    if (wasDefault && isDefault) {\n      throw new Error(`There can't be two default routes (\"${ defaultRoute }\" and \"${ name }\")! (at makeRoute)`);\n    }\n\n    if (!name) {\n      throw new Error('State must have a non-empty string \"name\" property! (at makeRoute)');\n    }\n\n    if (Routes.some(({ name: Name }) => Name === name)) {\n      throw new Error('State must have unique \"name\" property! (at makeRoute)');\n    }\n\n    if (root) {\n      wasRoot = true;\n      rootRoute = name;\n      options.parent = null;\n\n      if (fallbackTo) {\n        redirectRoute = fallbackTo;\n        redirectRouteIsNeededToPush = !replace;\n      }\n    }\n\n    if (isDefault) {\n      wasDefault = true;\n      defaultRoute = name;\n\n      if (abstract) {\n        throw new Error('Default route can\\'t be abstract! (at makeRoute)');\n      }\n\n      if (isRegExp(path)) {\n        throw new Error('Default route can\\'t have a regexp path! (at makeRoute)');\n      }\n    }\n\n    const route = new Route(options);\n\n    Routes.push(route);\n\n    let unsubscribe;\n    let routeLoaded;\n\n    return class extends Block {\n      /* eslint prefer-template: 0 */\n      static template = '<d-if if=\"{__wasRouteActive__}\">'\n        + '<div'\n        + `  class=\"dwayne-route route-${ name + (abstract ? ' abstract-route' : '') }\"`\n        + '  d-class=\"{{ \\'active-route\\': __isCurrentRoute__ }}\"'\n        + '  d-show=\"{__isCurrentRoute__}\"'\n        + '>'\n        + Block.template\n        + '</div>'\n        + '</d-if>';\n\n      constructor(opts) {\n        super(opts);\n\n        if (root) {\n          initRouter();\n\n          this.globals.router = router;\n        }\n\n        this.__routerInstance__ = route;\n        this.__isCurrentRoute__ = currentRoutes.includes(route);\n        this.__wasRouteActive__ = this.__isCurrentRoute__;\n        this.args.route = currentRouteParams;\n\n        routeLoaded = false;\n        unsubscribe = subscribe(name, (action) => {\n          const isCurrentRoute = action !== 'leave';\n\n          this.__isCurrentRoute__ = isCurrentRoute;\n\n          if (isCurrentRoute) {\n            this.__wasRouteActive__ = true;\n            this.args.route = currentRouteParams;\n          }\n\n          if (action === 'load') {\n            callBeforeLoad(this);\n          } else if (action === 'leave') {\n            callBeforeLeave(this);\n          }\n        });\n\n        if (this.__isCurrentRoute__) {\n          callBeforeLoad(this);\n        }\n      }\n\n      beforeRemove() {\n        unsubscribe();\n        unsubscribe = null;\n        callBeforeLeave(this);\n        super.beforeRemove();\n      }\n    };\n\n    function callBeforeLoad(route) {\n      if (routeLoaded) {\n        return;\n      }\n\n      const block = {\n        $$: {\n          children: new Arr([route])\n        }\n      };\n      let wasRoute;\n\n      block.$$.children.forEach(function beforeLoad(block) {\n        if (block.__routerInstance__) {\n          if (wasRoute) {\n            return;\n          }\n\n          wasRoute = true;\n        }\n\n        const {\n          name,\n          children,\n          mixins\n        } = block.$$;\n\n        if (children) {\n          children.forEach(beforeLoad);\n        }\n\n        if (mixins) {\n          mixins.forEach(beforeLoad);\n        }\n\n        if (block.beforeLoadRoute) {\n          try {\n            block.beforeLoadRoute();\n          } catch (err) {\n            console.error(`Uncaught error in ${ name }#beforeLoad:`, err);\n          }\n        }\n      });\n\n      routeLoaded = true;\n    }\n\n    function callBeforeLeave(route) {\n      if (!routeLoaded) {\n        return;\n      }\n\n      const block = {\n        $$: {\n          children: new Arr([route])\n        }\n      };\n      let wasRoute;\n\n      block.$$.children.forEach(function beforeLeave(block) {\n        if (block.__routerInstance__) {\n          if (wasRoute) {\n            return;\n          }\n\n          wasRoute = true;\n        }\n\n        const {\n          name,\n          children,\n          mixins\n        } = block.$$;\n\n        if (children) {\n          children.forEach(beforeLeave);\n        }\n\n        if (mixins) {\n          mixins.forEach(beforeLeave);\n        }\n\n        if (block.beforeLeaveRoute) {\n          try {\n            block.beforeLeaveRoute();\n          } catch (err) {\n            console.error(`Uncaught error in ${ name }#beforeLeave:`, err);\n          }\n        }\n      });\n\n      routeLoaded = false;\n    }\n  };\n}\n\nfunction subscribe(name, callback) {\n  subscribers[name] = callback;\n\n  return () => {\n    delete subscribers[name];\n  };\n}\n\nfunction forward(url, push) {\n  changeHistory(url, push);\n  changeRoute();\n}\n\nfunction changeRoute() {\n  const route = findRouteByURL();\n\n  if (route) {\n    ({\n      route: currentRoute,\n      ...currentRouteParams\n    } = route);\n    assign(currentRouteParams, {\n      name: currentRoute.name,\n      host: location.host,\n      hostname: location.hostname,\n      href: location.href,\n      origin: location.origin,\n      pathname: location.pathname,\n      port: location.port,\n      protocol: location.protocol,\n      search: location.search\n    });\n  } else {\n    if (redirectRoute) {\n      const {\n        url,\n        encodeParams,\n        encodeQuery\n      } = RedirectRoute;\n\n      return forward(constructURL('', url, {}, {}, '', {\n        params: encodeParams,\n        query: encodeQuery\n      }), redirectRouteIsNeededToPush);\n    }\n\n    currentRoute = null;\n    currentRouteParams = null;\n  }\n\n  const routesToLeave = new Arr([]);\n  const routesToLoad = new Arr([]);\n  let parent;\n\n  while (currentRoutes.length && !parent) {\n    const route = currentRoutes.pop();\n\n    if (route.children.includes(currentRoute)) {\n      currentRoutes.push(route);\n      parent = route;\n    } else {\n      routesToLeave.push(route);\n    }\n  }\n\n  if (currentRoute) {\n    let currentParent = currentRoute;\n\n    while (currentParent !== parent && currentParent !== baseRoute) {\n      routesToLoad.unshift(currentParent);\n      currentParent = currentParent.parent;\n    }\n\n    currentRoutes.push(...routesToLoad.$);\n  }\n\n  routesToLeave.forEach(({ name }) => {\n    if (subscribers[name]) {\n      subscribers[name]('leave');\n    }\n  });\n  currentRoutes.forEach((route) => {\n    const { name } = route;\n\n    if (subscribers[name]) {\n      subscribers[name](\n        routesToLoad.includes(route)\n          ? 'load'\n          : 'update'\n      );\n    }\n  });\n}\n\nfunction findRouteByURL() {\n  const pathname = location.pathname || '/';\n  const search = location.search || '';\n  let urlParams;\n\n  Routes.some((route) => {\n    if (route.abstract) {\n      return;\n    }\n\n    const {\n      url: routeURL,\n      validatePath,\n      params,\n      query: requiredQuery,\n      decodeParams,\n      decodeQuery\n    } = route;\n    const resolved = resolveURL(decodeQuery);\n    const query = new Super(resolved.query);\n    const eventualParams = {};\n    const match = (\n      (pathname.replace(/\\/$/, '') || '/') +\n      (isRegExp(routeURL) ? search : '')\n    ).match(validatePath);\n\n    if (!match) {\n      return;\n    }\n\n    /* eslint guard-for-in: 0 */\n    for (const param in requiredQuery) {\n      if (!query.hasOwn(param) || !requiredQuery[param].test(query.$[param])) {\n        return;\n      }\n    }\n\n    match.shift();\n\n    for (const param in params) {\n      eventualParams[param] = decode(match[params[param]], decodeParams);\n    }\n\n    urlParams = {\n      route,\n      params: eventualParams,\n      query: query.$,\n      hash: resolved.hash\n    };\n\n    return true;\n  });\n\n  if (urlParams) {\n    return urlParams;\n  }\n\n  if (!defaultRoute) {\n    return;\n  }\n\n  return {\n    route: DefaultRoute,\n    params: {},\n    ...resolveURL(DefaultRoute.decodeQuery)\n  };\n}\n\nfunction decode(string, decodeParams) {\n  return decodeParams\n    ? decodeURIComponent(string)\n    : string;\n}\n\nfunction changeHistory(url, push) {\n  try {\n    history[push ? 'pushState' : 'replaceState'](null, null, url);\n    pushed = true;\n  } catch (err) {\n    location.href = url;\n  }\n}\n\nfunction resolveParameter(param, nameErrorName, valueErrorName) {\n  const nameMatch = param.match(/^[a-z_$]+/i);\n\n  if (!nameMatch) {\n    throw new Error(nameErrorName);\n  }\n\n  const name = nameMatch[0];\n  const value = param.slice(name.length);\n  let regexp;\n\n  if (value && (value.indexOf('(') || value.indexOf(')') !== value.length - 1)) {\n    throw new Error(valueErrorName);\n  }\n\n  if (value) {\n    regexp = new RegExp(value.slice(1, -1));\n  }\n\n  return {\n    name,\n    regexp\n  };\n}\n\nfunction buildURL(name, options = {}) {\n  const { value: route } = Routes.find(({ name: n }) => n === name) || {};\n\n  if (!route) {\n    throw new Error(`There are no routes with name \"${ name }\"! (at router.buildURL)`);\n  }\n\n  const {\n    url,\n    encodeParams,\n    encodeQuery\n  } = route;\n\n  if (isRegExp(url)) {\n    throw new Error('URL can be built only from the string URLs! (at router.buildURL)');\n  }\n\n  const {\n    params = {},\n    query = {},\n    hash = ''\n  } = options;\n\n  return constructURL('', url, params, query, hash, {\n    params: encodeParams,\n    query: encodeQuery\n  });\n}\n\nfunction go(name, options) {\n  forward(buildURL(name, options), true);\n}\n\nfunction goToURL(url) {\n  forward(url, true);\n}\n\nfunction pushURL(url) {\n  changeHistory(url, true);\n}\n\nfunction redirect(name, options) {\n  forward(buildURL(name, options));\n}\n\nfunction redirectToURL(url) {\n  forward(url);\n}\n\nfunction replaceURL(url) {\n  changeHistory(url);\n}\n\nexport { makeRoute, router };\n","import * as statics from './lib/browser';\nimport { assign } from './lib/helpers/assign';\n\nconst { D } = statics;\n\nassign(D, statics);\n\ndelete D.D;\n\nglobal.D = D;\n"],"names":["window","global","self","appliedRegExps","elem","id","cls","addClass","attr","value","prop","css","name","html","text","removeClass","removeAttr","removeCSS","canvasGetMethods","canvasRestMethods","constructors","htmlElements","svgElements","voidElements","htmlAllowedTagSymbols","htmlAllowedAttrSymbols","regexpSpecialCharacters","toStringTag","object","toString","call","replace","isArray","isArrayLike","isFunction","length","isInteger","isBoolean","isDate","isDateLike","Date","isNaN","getTime","isElement","test","isFinite","isNumber","Number","Infinity","isIntegerLike","parseInt","isNull","isNil","isNumberLike","isObject","Object","isPlainObject","isPrimitive","proto","getPrototypeOf","constructor","isRegExp","isString","isSymbol","isUndefined","validateCheckExpressions","n","RangeError","v","methods","TypeError","a","d","f","i","o","r","s","D","levelConstructors","k","len","check","iterate","callback","array","iteratedKeys","iterated","key","hasOwnProperty","assign","target","objects","arguments","source","index","constructEvalFunction","code","original","func","Function","expression","err","Error","dynamicDefineProperties","properties","propertyGenerator","defineProperty","defineProperties","undefined","get","set","defineUsualProperties","defineFrozenProperties","Symbol","Math","random","toArray","createNewArray","push","numbers","validate","args","options","number","checker","error","Alphabet","alphabet","char","chars","$$","word","keys","token","floor","prototype","string","ranges","split","range","start","charCodeAt","end","String","fromCharCode","Switcher","cases","mode","defaultValue","eventualCases","Case","case","switcher","def","default","ret","val","apply","setPrototypeOf","when","condition","value1","value2","cloneSwitcher","Super","$","deepClone","deep","clone","RegExp","match","sum","count","descriptors","create","deepEqual","Boolean","deepEvery","filtered","deepFilter","deepFind","deepMap","IV","tree","deepReduce","deepSome","property","descriptor","props","filter","indexOf","freeze","getter","isFrozen","replacer","space","unshift","JSON","stringify","max","min","obj","getOwnPropertyDescriptor","getOwnPropertyNames","getOwnPropertySymbols","isContextObject","startKey","setter","reduce","deepAssign","o1","o2","strict","lastIndex","p1","p2","newTree","concat","nul","result","deepForEach","deepForEachEntry","deepFreeze","secret","iterator","Promise","executor","hiddenStatus","hiddenValue","onFulfill","onReject","realPromise","hiddenPromise","status","handled","resolve","reject","proxy","onUnhandledRejection","onError","then","onRejected","onFulfilledOrRejected","isFunc","onFulfilled","promise","handle","method","handler","iterable","toResolve","next","done","console","bind","Func","called","canBeCalled","before","after","sync","contextLocked","context","middleware","afterAll","beforeAll","bindContext","bindArgs","times","slice","lockContext","lockArgs","argsLocked","mark","time","timeEnd","unbindContext","unbindArgs","x","noop","toRadian","PI","toDegree","ln2","LN2","ln10","LN10","Num","toDegrees","acos","asin","atan","asDegrees","cos","abort","aborted","timeout","setTimeout","interval","clearTimeout","log","power","pow","sin","tan","rej","base","fractionDigits","toExponential","digits","toFixed","precision","toPrecision","abs","sqrt","cbrt","ceil","exp","ln","round","sign","rand","Arr","values","indexOfStrict","keyOf","keyOfStrict","separator","join","pop","reverse","shift","forEach","randomIndex","begin","compareFunction","sort","asc","y","deleteCount","items","splice","URL","BlobObject","progress","reader","FileReader","toReject","onprogress","e","onerror","onload","anchor","document","createElement","href","dataURL","setAttribute","click","createObjectURL","blob","blobParts","Blob","htmlSpecials","regexpSpecialsRegexp","Str","toUpperCase","searchString","position","revert","startsWith","escaped","symbol","searchValue","fromIndex","lastIndexOf","regexp","str","search","beginSlice","endSlice","substr","indexStart","indexEnd","substring","trim","toLowerCase","parseJSON","json","parse","dates","parsed","submitString","NODE_REGEX_SET","constructCloseTagRegExp","TAG_OPEN_CLOSE","ATTRIBUTE","div","nodeSwitcher","node","selfClosing","attrs","map","parseCharacterData","children","parent","collapseWhiteSpace","type","element","rawTextSwitcher","InternalParsingError","ParsingError","markup","elements","startMarkup","found","globalIndex","find","nearString","throwUnexpectedError","matches","regex","returning","closeMatch","NaN","tagName","innerHTML","textContent","innerText","nativeDocument","emptyDiv","eventSeparator","textProperty","Node","propertyDescriptor","classes","windowsDwayneData","inputElements","svgNS","xmlNS","xlinkNS","xhtmlNS","typeSwitcher","ns","documentElement","namespaceURI","createElementNS","createComment","createTextNode","refSwitcher","filterSwitcher","selector","Elem","is","isElem","elems","innerSwitcher","paddings","borders","outerSwitcher","attrNSSwitcher","closest","isWindow","isHTMLDocument","isDocumentFragment","isCommentOrText","isStyleRule","addDwayneData","list","classList","add","insertAdjacentHTML","style","some","getName","sheet","cssRules","rules","toHyphenCase","insertRule","dwayneData","into","strings","applied","setApplied","np1","getElem","attributes","getAttribute","getAttributeNS","setAttributeNS","first","load","isBroken","canvas","width","height","drawImage","byteString","atob","ab","ArrayBuffer","ia","Uint8Array","blur","pseudo","getComputedStyle","rule","toFind","childNodes","className","cloneNode","parentNode","contains","appliedExpressions","cssText","toCamelCase","getPropertyValue","getPropertyPriority","removeProperty","setProperty","ctx","dataset","encoderOptions","toDataURL","deleteRule","event","eventInit","details","bubbles","cancelable","finalEvent","Event","createEvent","initEvent","dispatchEvent","focus","selectorText","hasAttribute","hasAttributeNS","currentDisplay","previousDisplay","nextSibling","insertBefore","appendChild","firstChild","forEachReverse","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","complete","naturalWidth","naturalHeight","images","all","$elem","removeListeners","on","proper","broken","prev","events","listeners","removeListener","listener","allListeners","removeEventListeners","define","has","newListener","addEventListener","delete","removeEventListener","previousSibling","link","removeChild","removeAttribute","removeAttributeNS","remove","created","txt","hasAttr","hasClass","level","validator","validators","errors","formErrors","form","inputs","input","dispatch","inputError","validatorWrap","validity","valid","validationMessage","every","innerHeight","calcCSS","borderTopWidth","borderBottomWidth","boxSizing","paddingTop","paddingBottom","px","innerWidth","borderLeftWidth","borderRightWidth","paddingLeft","paddingRight","outerHeight","marginTop","marginBottom","outerWidth","marginLeft","marginRight","win","doc","body","head","tag","nodeName","getContext","querySelectorAll","parseHTML","markupToJSON","template","content","forEachNode","size","registerDBlock","Block","DBlock","parentScope","parentParentScope","parentParentTemplate","parentTemplate","argsChildren","ownChildren","dBlockName","ParentScope","ParentTemplate","dBlocks","DBlockName","registerDEach","createBlock","DEach","opts","item","itemName","indexName","uid","watch","uids","parentElem","scope","UID","sortBy","$uids","newKeys","newUIDs","filterBy","evaluate","Item","prevBlock","block","insertAfterIt","registerDElements","DElements","firstTime","mixins","watchersToRemove","child","mixin","removeContent","watchers","watcher","forDElements","registerDIf","DIf","cond","if","newValue","registerDItem","DItem","registerDSwitch","DSwitch","wasDefault","equals","registerDAttr","Mixin","DAttr","registerDBind","DBind","off","registerDClass","DClass","newClasses","registerDElem","DElem","evaluateOnce","registerDHide","DHide","hide","show","registerDNode","DNode","registerDOn","DOn","registerDShow","DShow","registerDStyle","DStyle","oldValue","listenerSwitcher","registerDValidate","DValidate","propSwitcher","setValueSwitcher","inputValue","getValueSwitcher","init","isMultiple","selected","registerDValue","DValue","initialScopeValue","currentValue","setProp","initialElemValue","getProp","isInitialScopeValueNull","isCheckbox","changeScope","offElemListener","offFormListener","option","emptySpaceRegExp","anyEmptySpaceRegExp","anyEscapedExpressionRegExp","anyDoubleQuoteRegExp","anyNewLineRegExp","anyCommaEmptySpace","properEscapedRegExp","thisRegExp","simpleExpressionRegExp","variableRegExp","numberRegExp","stringRegExp","regexpRegExp","arrowFunctionRegExp","templateStringContentRegExp","operatorRegExp","pointOperatorRegExp","propertyRegExp","shorthandPropertyRegExp","unaryOperatorRegExp","keywordsArray","keywordsRegExp","EXPRESSION","END_OF_FUNC_BODY","parseJS","wholeString","curlyError","initialString","expected","variables","closingExpressions","spaceMatch","toConcat","matched","isEmptySpace","properType","properSymbol","firstSymbol","templateString","vars","newFunctionVars","functionScope","variable","objectProperty","getVariable","operator","second","closeFunctionBody","closingBrace","noMatch","curlyIndex","expressionString","constructErrorInfo","last","wholeStringString","lastString","rootBlocks","rootMixins","isPrototypeOf","attrName","curlyBracketRegExp","dRestRegExp","afterElem","evalMode","getting","changed","_blocks","_mixins","hook","hasOwn","_blockHooks","_mixinHooks","Subclass","_this","isInstanceOf","warn","returnValue","_name","_html","transformDIfChildren","transformJSExpressions","_variables","except","defaultArgs","afterUpdate","_match","constructMixinRegExp","wrappers","wrapper","originalArgs","parentBlock","childrenBlocks","isParentBlock","onChange","instance","forDItem","forDEach","onEvalError","localWatchers","newResult","watcherBlock","onRemove","index1","index2","isParentSignal","beforeRemove","contentToAdd","notRecursive","pushArray","addContent","contentToMove","indexToPut","moveContent","contentToRemove","contentToInsert","moveFlag","insertAfter","insertInStartOfIt","tryToAddOrMove","defaultLocals","argsObject","$argsObject","wasDRest","arg","isDRest","localArgs","restArgs","transformRestArgs","isDElements","globals","locals","oldWatcher","watchForAllLocals","watchForAllArgs","watchForAllGlobals","perm","registerBuiltIns","Blocks","blocks","dynamic","comment","isDynamic","_value","Mixins","initApp","DwayneRootBlock","removeApp","register","svg","localBlocks","localMixins","dBlockMatch","dBlockArgs","dBlockChildren","dElementsName","blockInstance","currentAttrs","mixinDefaultOpts","localAttrs","restAttrs","transformRestAttrs","mixinMatch","createMixins","calculateAttrs","Args","newName","constructPrivateScope","scopeValues","privateScope","afterConstruct","afterRender","createMixin","evaluateAndWatch","ifElse","exclude","initialValue","isDEach","excludeLocal","rest","isUID","usedVariables","Class","removeWatchers","constructPublicScope","temp","oldTempWatchers","was","calculateArgs","propertyNames","eventualAttrs","localMatch","argsMatch","attrsObject","nextType","nextDynamic","nextValue","prevType","prevValue","evaluated","buildMixin","firstValue","executeMixinWatchers","escapeRegExp","extendBlock","insertTemplates","templates","newTemplates","newVars","zero","daysOfTheWeekNames","daysOfTheWeekAliases","monthsNames","monthsAliases","date","utc","zeroes","repeat","coeffs","getSwitcher","setSwitcher","Dat","what","now","prefix","formats","format","replaceString","date1","date2","isBefore","started","coeff","w","setTime","toISOString","toLocaleString","valueOf","absoluteURLRegexp","querySwitcher","query","queryParams","param","baseURL","url","params","hash","encodeOptions","encodeParams","encodeQuery","isAbsolute","encode","isEncoded","encodeURIComponent","rawHeaders","headers","notToTransform","withoutBody","data","contentType","defaults","location","origin","uploadMethods","Fetch","config","fetch","request","conf","fetchBeforeMiddleware","header","toPush","dataConfig","urlConfig","xhr","auth","username","password","responseType","withCredentials","XMLHttpRequest","open","setRequestHeader","upload","onabort","ontimeout","onreadystatechange","readyState","response","responseText","parseHeaders","getAllResponseHeaders","statusText","catch","send","METHOD","constructURL","transformData","toCapitalCase","decodeQuery","rawParam","decodeURIComponent","paramName","paramObject","Routes","currentRoutes","subscribers","history","initialURL","initialized","pushed","wasRoot","rootRoute","redirectRoute","redirectRouteIsNeededToPush","RedirectRoute","defaultRoute","DefaultRoute","currentRoute","currentRouteParams","pathSwitcher","path","newURL","newPath","part","resolveParameter","router","Route","abstract","decodeParams","relativeURL","relativePath","baseRoute","initRouter","route","parentName","ParentName","parentParams","parentQuery","validatePath","closestLink","preventDefault","makeRoute","routerOptions","root","fallbackTo","isDefault","Name","unsubscribe","routeLoaded","__routerInstance__","__isCurrentRoute__","includes","__wasRouteActive__","subscribe","action","isCurrentRoute","callBeforeLoad","wasRoute","beforeLoad","beforeLoadRoute","callBeforeLeave","beforeLeave","beforeLeaveRoute","forward","changeRoute","findRouteByURL","host","hostname","pathname","port","protocol","routesToLeave","routesToLoad","currentParent","urlParams","routeURL","requiredQuery","resolved","resolveURL","eventualParams","decode","changeHistory","nameErrorName","valueErrorName","nameMatch","buildURL","go","goToURL","pushURL","redirect","redirectToURL","replaceURL","statics"],"mappings":";;;AAAA;;AAEA,eAAe,OAAOA,MAAP,KAAkB,WAAlB,GAAgCA,MAAhC,GAAyC,OAAOC,MAAP,KAAkB,WAAlB,GAAgCA,MAAhC,GAAyC,OAAOC,IAAP,KAAgB,WAAhB,GAA8BA,IAA9B,GAAqC,EAAtI;;ACFA;;;;;;;;;;;;;;;;;;AAkBA,AAAO,IAAMC,iBAAiB;KAAA,aACxBC,IADwB,EAClBC,EADkB,EACd;SACPA,EAAL,CAAQA,EAAR;GAF0B;KAAA,aAIxBD,IAJwB,EAIlBE,GAJkB,EAIb;SACRC,QAAL,CAAcD,GAAd;GAL0B;GAAA,aAO1BF,IAP0B,EAOpBI,IAPoB,EAOdC,KAPc,EAOP;SACdD,IAAL,CAAUA,IAAV,EAAgBC,KAAhB;GAR0B;KAAA,aAUxBL,IAVwB,EAUlBM,IAVkB,EAUZD,KAVY,EAUL;SAChBE,GAAL,CAASD,IAAT,EAAeD,KAAf;GAX0B;KAAA,aAaxBL,IAbwB,EAalBQ,IAbkB,EAaZC,IAbY,EAaN;SACfA,IAAL,CAAUA,IAAV;GAd0B;KAAA,aAgBxBT,IAhBwB,EAgBlBQ,IAhBkB,EAgBZE,IAhBY,EAgBN;SACfA,IAAL,CAAUA,IAAV;GAjB0B;;OAmBvB;OAAA,aACCV,IADD,EACOE,GADP,EACY;WACRS,WAAL,CAAiBT,GAAjB;KAFC;KAAA,aAIDF,IAJC,EAIKI,IAJL,EAIW;WACPQ,UAAL,CAAgBR,IAAhB;KALC;OAAA,aAOCJ,IAPD,EAOOM,IAPP,EAOa;WACTO,SAAL,CAAeP,IAAf;;;CA3BC;;AClBP;;;;;;;;;;AAUA,AAAO,IAAMQ,mBAAmB;;;;;;;;AAQ9B,iBAR8B;;;;;;;;;AAiB9B,sBAjB8B;;;;;;;;;AA0B9B,eA1B8B;;;;;;;;;AAmC9B,sBAnC8B;;;;;;;;;AA4C9B,cA5C8B;;;;;;;;;AAqD9B,aArD8B;;;;;;;;;AA8D9B,eA9D8B;;;;;;;;;AAuE9B,iBAvE8B;;;;;;;;;AAgF9B,aAhF8B,CAAzB;;AAmFP,AAAO,IAAMC,oBAAoB;;;;;;;;AAQ/B,KAR+B;;;;;;;;;AAiB/B,OAjB+B;;;;;;;;;AA0B/B,WA1B+B;;;;;;;;;AAmC/B,eAnC+B;;;;;;;;;AA4C/B,WA5C+B;;;;;;;;;AAqD/B,MArD+B;;;;;;;;;AA8D/B,WA9D+B;;;;;;;;;AAuE/B,mBAvE+B;;;;;;;;;AAgF/B,WAhF+B;;;;;;;;;AAyF/B,SAzF+B;;;;;;;;;AAkG/B,MAlG+B;;;;;;;;;AA2G/B,UA3G+B;;;;;;;;;AAoH/B,UApH+B;;;;;;;;;AA6H/B,QA7H+B;;;;;;;;;AAsI/B,QAtI+B;;;;;;;;;AA+I/B,cA/I+B;;;;;;;;;AAwJ/B,kBAxJ+B;;;;;;;;;AAiK/B,MAjK+B;;;;;;;;;AA0K/B,gBA1K+B;;;;;;;;;AAmL/B,SAnL+B;;;;;;;;;AA4L/B,QA5L+B;;;;;;;;;AAqM/B,MArM+B;;;;;;;;;AA8M/B,OA9M+B;;;;;;;;;AAuN/B,aAvN+B;;;;;;;;;AAgO/B,cAhO+B;;;;;;;;;AAyO/B,QAzO+B;;;;;;;;;AAkP/B,YAlP+B;;;;;;;;;AA2P/B,YA3P+B;;;;;;;;;AAoQ/B,WApQ+B;;;;;;;;;AA6Q/B,WA7Q+B,CAA1B;;AC7FP;;;;;;;;;;AAUA,AAAO,IAAMC,eAAe,CAC1B,EAD0B,EAE1B,EAF0B,EAG1B,EAH0B,CAArB;;ACVP;;;;;;;;;;AAUA,AAAO,IAAMC,eAAe;;;;;;;AAO1B,GAP0B;;;;;;;;AAe1B,MAf0B;;;;;;;;AAuB1B,SAvB0B;;;;;;;;AA+B1B,MA/B0B;;;;;;;;AAuC1B,SAvC0B;;;;;;;;AA+C1B,OA/C0B;;;;;;;;AAuD1B,GAvD0B;;;;;;;;AA+D1B,MA/D0B;;;;;;;;AAuE1B,KAvE0B;;;;;;;;AA+E1B,KA/E0B;;;;;;;;AAuF1B,YAvF0B;;;;;;;;AA+F1B,MA/F0B;;;;;;;;AAuG1B,IAvG0B;;;;;;;;AA+G1B,QA/G0B;;;;;;;;AAuH1B,QAvH0B;;;;;;;;AA+H1B,SA/H0B;;;;;;;;AAuI1B,MAvI0B;;;;;;;;AA+I1B,MA/I0B;;;;;;;;AAuJ1B,KAvJ0B;;;;;;;;AA+J1B,UA/J0B;;;;;;;;AAuK1B,SAvK0B;;;;;;;;AA+K1B,UA/K0B;;;;;;;;AAuL1B,IAvL0B;;;;;;;;AA+L1B,KA/L0B;;;;;;;;AAuM1B,SAvM0B;;;;;;;;AA+M1B,KA/M0B;;;;;;;;AAuN1B,QAvN0B;;;;;;;;AA+N1B,KA/N0B;;;;;;;;AAuO1B,IAvO0B;;;;;;;;AA+O1B,IA/O0B;;;;;;;;AAuP1B,SAvP0B;;;;;;;;AA+P1B,IA/P0B;;;;;;;;AAuQ1B,OAvQ0B;;;;;;;;AA+Q1B,UA/Q0B;;;;;;;;AAuR1B,YAvR0B;;;;;;;;AA+R1B,QA/R0B;;;;;;;;AAuS1B,QAvS0B;;;;;;;;AA+S1B,MA/S0B;;;;;;;;AAuT1B,IAvT0B;;;;;;;;AA+T1B,IA/T0B;;;;;;;;AAuU1B,IAvU0B;;;;;;;;AA+U1B,IA/U0B;;;;;;;;AAuV1B,IAvV0B;;;;;;;;AA+V1B,IA/V0B;;;;;;;;AAuW1B,MAvW0B;;;;;;;;AA+W1B,QA/W0B;;;;;;;;AAuX1B,QAvX0B;;;;;;;;AA+X1B,IA/X0B;;;;;;;;AAuY1B,GAvY0B;;;;;;;;AA+Y1B,QA/Y0B;;;;;;;;AAuZ1B,KAvZ0B;;;;;;;;AA+Z1B,OA/Z0B;;;;;;;;AAua1B,KAva0B;;;;;;;;AA+a1B,KA/a0B;;;;;;;;AAub1B,OAvb0B;;;;;;;;AA+b1B,QA/b0B;;;;;;;;AAuc1B,IAvc0B;;;;;;;;AA+c1B,MA/c0B;;;;;;;;AAud1B,MAvd0B;;;;;;;;AA+d1B,MA/d0B;;;;;;;;AAue1B,MAve0B;;;;;;;;AA+e1B,UA/e0B;;;;;;;;AAuf1B,MAvf0B;;;;;;;;AA+f1B,OA/f0B;;;;;;;;AAugB1B,KAvgB0B;;;;;;;;AA+gB1B,UA/gB0B;;;;;;;;AAuhB1B,IAvhB0B;;;;;;;;AA+hB1B,UA/hB0B;;;;;;;;AAuiB1B,QAviB0B;;;;;;;;AA+iB1B,QA/iB0B;;;;;;;;AAujB1B,GAvjB0B;;;;;;;;AA+jB1B,OA/jB0B;;;;;;;;AAukB1B,KAvkB0B;;;;;;;;AA+kB1B,UA/kB0B;;;;;;;;AAulB1B,GAvlB0B;;;;;;;;AA+lB1B,IA/lB0B;;;;;;;;AAumB1B,IAvmB0B;;;;;;;;AA+mB1B,KA/mB0B;;;;;;;;AAunB1B,MAvnB0B;;;;;;;;AA+nB1B,GA/nB0B;;;;;;;;AAuoB1B,MAvoB0B;;;;;;;;AA+oB1B,QA/oB0B;;;;;;;;AAupB1B,SAvpB0B;;;;;;;;AA+pB1B,QA/pB0B;;;;;;;;AAuqB1B,QAvqB0B;;;;;;;;AA+qB1B,OA/qB0B;;;;;;;;AAurB1B,QAvrB0B;;;;;;;;AA+rB1B,MA/rB0B;;;;;;;;AAusB1B,QAvsB0B;;;;;;;;AA+sB1B,OA/sB0B;;;;;;;;AAutB1B,KAvtB0B;;;;;;;;AA+tB1B,SA/tB0B;;;;;;;;AAuuB1B,KAvuB0B;;;;;;;;AA+uB1B,OA/uB0B;;;;;;;;AAuvB1B,OAvvB0B;;;;;;;;AA+vB1B,IA/vB0B;;;;;;;;AAuwB1B,UAvwB0B;;;;;;;;AA+wB1B,UA/wB0B;;;;;;;;AAuxB1B,OAvxB0B;;;;;;;;AA+xB1B,IA/xB0B;;;;;;;;AAuyB1B,OAvyB0B;;;;;;;;AA+yB1B,MA/yB0B;;;;;;;;AAuzB1B,OAvzB0B;;;;;;;;AA+zB1B,IA/zB0B;;;;;;;;AAu0B1B,OAv0B0B;;;;;;;;AA+0B1B,GA/0B0B;;;;;;;;AAu1B1B,IAv1B0B;;;;;;;;AA+1B1B,KA/1B0B;;;;;;;;AAu2B1B,OAv2B0B;;;;;;;;AA+2B1B,KA/2B0B,CAArB;;AAk3BP,AAAO,IAAMC,cAAc;;;;;;;AAOzB,UAPyB;;;;;;;;AAezB,aAfyB;;;;;;;;AAuBzB,cAvByB;;;;;;;;AA+BzB,SA/ByB;;;;;;;;AAuCzB,cAvCyB;;;;;;;;AA+CzB,eA/CyB;;;;;;;;AAuDzB,kBAvDyB;;;;;;;;AA+DzB,QA/DyB;;;;;;;;AAuEzB,UAvEyB;;;;;;;;AA+EzB,eA/EyB;;;;;;;;AAuFzB,QAvFyB;;;;;;;;AA+FzB,MA/FyB;;;;;;;;AAuGzB,MAvGyB;;;;;;;;AA+GzB,SA/GyB;;;;;;;;AAuHzB,SAvHyB;;;;;;;;AA+HzB,SA/HyB;;;;;;;;AAuIzB,eAvIyB;;;;;;;;AA+IzB,qBA/IyB;;;;;;;;AAuJzB,aAvJyB;;;;;;;;AA+JzB,kBA/JyB;;;;;;;;AAuKzB,mBAvKyB;;;;;;;;AA+KzB,mBA/KyB;;;;;;;;AAuLzB,gBAvLyB;;;;;;;;AA+LzB,cA/LyB;;;;;;;;AAuMzB,SAvMyB;;;;;;;;AA+MzB,SA/MyB;;;;;;;;AAuNzB,SAvNyB;;;;;;;;AA+NzB,SA/NyB;;;;;;;;AAuOzB,SAvOyB;;;;;;;;AA+OzB,gBA/OyB;;;;;;;;AAuPzB,SAvPyB;;;;;;;;AA+PzB,SA/PyB;;;;;;;;AAuQzB,aAvQyB;;;;;;;;AA+QzB,cA/QyB;;;;;;;;AAuRzB,UAvRyB;;;;;;;;AA+RzB,cA/RyB;;;;;;;;AAuSzB,oBAvSyB;;;;;;;;AA+SzB,aA/SyB;;;;;;;;AAuTzB,QAvTyB;;;;;;;;AA+TzB,cA/TyB;;;;;;;;AAuUzB,MAvUyB;;;;;;;;AA+UzB,WA/UyB;;;;;;;;AAuVzB,kBAvVyB;;;;;;;;AA+VzB,gBA/VyB;;;;;;;;AAuWzB,eAvWyB;;;;;;;;AA+WzB,eA/WyB;;;;;;;;AAuXzB,eAvXyB;;;;;;;;AA+XzB,GA/XyB;;;;;;;;AAuYzB,OAvYyB;;;;;;;;AA+YzB,UA/YyB;;;;;;;;AAuZzB,OAvZyB;;;;;;;;AA+ZzB,WA/ZyB;;;;;;;;AAuazB,OAvayB;;;;;;;;AA+azB,OA/ayB;;;;;;;;AAubzB,MAvbyB;;;;;;;;AA+bzB,gBA/byB;;;;;;;;AAuczB,QAvcyB;;;;;;;;AA+czB,MA/cyB;;;;;;;;AAudzB,MAvdyB;;;;;;;;AA+dzB,cA/dyB;;;;;;;;AAuezB,WAveyB;;;;;;;;AA+ezB,SA/eyB;;;;;;;;AAufzB,UAvfyB;;;;;;;;AA+fzB,eA/fyB;;;;;;;;AAugBzB,OAvgByB;;;;;;;;AA+gBzB,MA/gByB;;;;;;;;AAuhBzB,SAvhByB;;;;;;;;AA+hBzB,SA/hByB;;;;;;;;AAuiBzB,UAviByB;;;;;;;;AA+iBzB,gBA/iByB;;;;;;;;AAujBzB,MAvjByB;;;;;;;;AA+jBzB,KA/jByB;;;;;;;;AAukBzB,YAvkByB;;;;;;;;AA+kBzB,MA/kByB;;;;;;;;AAulBzB,OAvlByB;;;;;;;;AA+lBzB,KA/lByB;;;;;;;;AAumBzB,QAvmByB;;;;;;;;AA+mBzB,QA/mByB;;;;;;;;AAunBzB,UAvnByB;;;;;;;;AA+nBzB,MA/nByB;;;;;;;;AAuoBzB,OAvoByB;;;;;;;;AA+oBzB,SA/oByB;;;;;;;;AAupBzB,KAvpByB;;;;;;;;AA+pBzB,MA/pByB;;;;;;;;AAuqBzB,OAvqByB,CAApB;;AA0qBP,AAAO,IAAMC,eAAe,CAC1B,MAD0B,EAE1B,MAF0B,EAG1B,IAH0B,EAI1B,KAJ0B,EAK1B,SAL0B,EAM1B,OAN0B,EAO1B,IAP0B,EAQ1B,KAR0B,EAS1B,OAT0B,EAU1B,QAV0B,EAW1B,MAX0B,EAY1B,MAZ0B,EAa1B,OAb0B,EAc1B,QAd0B,EAe1B,OAf0B,EAgB1B,KAhB0B,EAkB1B,MAlB0B,EAmB1B,QAnB0B,EAoB1B,SApB0B,EAqB1B,MArB0B,EAsB1B,MAtB0B,EAuB1B,KAvB0B,EAwB1B,MAxB0B,EAyB1B,UAzB0B,EA0B1B,SA1B0B,CAArB;;ACtiDA,IAAMC,wBAAwB,oDAA9B;AACP,AAAO,IAAMC,yBAAyB,8BAA/B;;ACDP;;;;;;;;;;;AAWA,AAAO,IAAMC,0BAA0B,CACrC,GADqC,EAErC,GAFqC,EAEhC,GAFgC,EAE3B,GAF2B,EAGrC,GAHqC,EAGhC,GAHgC,EAIrC,GAJqC,EAIhC,GAJgC,EAKrC,GALqC,EAKhC,GALgC,EAMrC,GANqC,EAMhC,GANgC,EAOrC,GAPqC,EAOhC,GAPgC,EAQrC,GARqC,EASrC,GATqC,EAUrC,GAVqC,EAWrC,GAXqC,EAYrC,GAZqC,EAarC,GAbqC,EAcrC,IAdqC,CAAhC;;ACXP;;;;;;;;;;;;AAYA,AAAO,SAASC,WAAT,CAAqBC,MAArB,EAA6B;SAC3B,GAAGC,QAAH,CAAYC,IAAZ,CAAiBF,MAAjB,EAAyBG,OAAzB,CAAiC,gBAAjC,EAAmD,EAAnD,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbF;;;;;;;AAOA,AAEA;;;;;;;;;;;AAWA,AAAO,SAASC,OAAT,CAAiBvB,KAAjB,EAAwB;SACtBkB,YAAYlB,KAAZ,MAAuB,OAA9B;;;;;;;;;;;;;;;;AAgBF,AAAO,SAASwB,WAAT,CAAqBxB,KAArB,EAA4B;MAC7B,CAACA,KAAD,IAAUyB,WAAWzB,KAAX,CAAd,EAAiC;WACxB,KAAP;;;MAGI0B,SAAS1B,MAAM0B,MAArB;;SAEOC,UAAUD,MAAV,KAAqBA,UAAU,CAAtC;;;;;;;;;;;;;;AAcF,AAAO,SAASE,SAAT,CAAmB5B,KAAnB,EAA0B;SACxBkB,YAAYlB,KAAZ,MAAuB,SAA9B;;;;;;;;;;;;;AAaF,AAAO,SAAS6B,MAAT,CAAgB7B,KAAhB,EAAuB;SACrBkB,YAAYlB,KAAZ,MAAuB,MAA9B;;;;;;;;;;;;;;;AAeF,AAAO,SAAS8B,UAAT,CAAoB9B,KAApB,EAA2B;UACxB,IAAI+B,IAAJ,CAAS/B,KAAT,CAAR;;SAEO,CAACgC,MAAMhC,MAAMiC,OAAN,EAAN,CAAR;;;;;;;;;;;;AAYF,AAAO,SAASC,SAAT,CAAmBlC,KAAnB,EAA0B;qBACbmC,IAAX,CAAgBjB,YAAYlB,KAAZ,CAAhB;;;;;;;;;;;;;;;;AAeT,AAAO,SAASoC,QAAT,CAAkBpC,KAAlB,EAAyB;MAC1B,CAACqC,SAASrC,KAAT,CAAL,EAAsB;WACb,KAAP;;;UAGMsC,OAAOtC,KAAP,CAAR;;SAEO,CAACgC,MAAMhC,KAAN,CAAD,IAAiBA,UAAUuC,QAA3B,IAAuCvC,UAAU,CAACuC,QAAzD;;;;;;;;;;;;;;;;AAgBF,AAAO,SAASd,UAAT,CAAoBzB,KAApB,EAA2B;SACzBkB,YAAYlB,KAAZ,MAAuB,UAAvB,IAAqC,OAAOA,KAAP,KAAiB,UAA7D;;;;;;;;;;;;;;;;;AAiBF,AAAO,SAAS2B,SAAT,CAAmB3B,KAAnB,EAA0B;SACxBqC,SAASrC,KAAT,KAAmBA,QAAQ,CAAR,KAAc,CAAxC;;;;;;;;;;;;;;;AAeF,AAAO,SAASwC,aAAT,CAAuBxC,KAAvB,EAA8B;UAC3ByC,SAASH,OAAOtC,KAAP,CAAT,CAAR;;SAEO,CAAC,EAAEA,SAASA,UAAU,CAArB,CAAR;;;;;;;;;;;;;;;AAeF,AAAO,SAASgC,KAAT,CAAehC,KAAf,EAAsB;MACvB,CAACqC,SAASrC,KAAT,CAAL,EAAsB;WACb,KAAP;;;UAGMsC,OAAOtC,KAAP,CAAR;;SAEOA,UAAUA,KAAjB;;;;;;;;;;;;;AAaF,AAAO,SAAS0C,MAAT,CAAgB1C,KAAhB,EAAuB;SACrBA,UAAU,IAAjB;;;;;;;;;;;;;;AAcF,AAAO,SAAS2C,KAAT,CAAe3C,KAAf,EAAsB;SACpBA,UAAU,IAAV,IAAkB,OAAOA,KAAP,KAAiB,WAA1C;;;;;;;;;;;;;;;AAeF,AAAO,SAASqC,QAAT,CAAkBrC,KAAlB,EAAyB;SACvBkB,YAAYlB,KAAZ,MAAuB,QAA9B;;;;;;;;;;;;;;;;AAgBF,AAAO,SAAS4C,YAAT,CAAsB5C,KAAtB,EAA6B;MAC9BgC,MAAMhC,KAAN,KAAgBA,UAAU,KAA9B,EAAqC;WAC5B,IAAP;;;UAGMsC,OAAOtC,KAAP,CAAR;;SAEO,CAAC,EAAEA,SAASA,UAAU,CAArB,CAAR;;;;;;;;;;;;;;AAcF,AAAO,SAAS6C,QAAT,CAAkB7C,KAAlB,EAAyB;SACvB,CAAC,CAACA,KAAF,KAAYkB,YAAYlB,KAAZ,MAAuB,QAAvB,IAAmC,QAAOA,KAAP,yCAAOA,KAAP,OAAiB,QAApD,IAAgEA,iBAAiB8C,MAA7F,CAAP;;;;;;;;;;;;;;;;;;;;;;AAsBF,AAAO,SAASC,aAAT,CAAuB/C,KAAvB,EAA8B;MAC/BgD,YAAYhD,KAAZ,CAAJ,EAAwB;WACf,KAAP;;;MAGIiD,QAAQH,OAAOI,cAAP,CAAsBlD,KAAtB,CAAd;;MAEI0C,OAAOO,KAAP,CAAJ,EAAmB;WACV,IAAP;;;MAGIE,cAAcF,MAAME,WAA1B;;SAEO1B,WAAW0B,WAAX,KACLA,uBAAuBA,WADlB,IAELT,OAAOI,OAAOI,cAAP,CAAsBD,KAAtB,CAAP,CAFF;;;;;;;;;;;;;;;;;;;AAqBF,AAAO,SAASD,WAAT,CAAqBhD,KAArB,EAA4B;SAC1B0C,OAAO1C,KAAP,KAAiB,6CAA6CmC,IAA7C,QAAyDnC,KAAzD,yCAAyDA,KAAzD,EAAxB;;;;;;;;;;;;;;AAcF,AAAO,SAASoD,QAAT,CAAkBpD,KAAlB,EAAyB;SACvBkB,YAAYlB,KAAZ,MAAuB,QAA9B;;;;;;;;;;;;;AAaF,AAAO,SAASqD,QAAT,CAAkBrD,KAAlB,EAAyB;SACvBkB,YAAYlB,KAAZ,MAAuB,QAA9B;;;;;;;;;;;;AAYF,AAAO,SAASsD,QAAT,CAAkBtD,KAAlB,EAAyB;SACvBkB,YAAYlB,KAAZ,MAAuB,QAA9B;;;;;;;;;;;;;AAaF,AAAO,SAASuD,WAAT,CAAqBvD,KAArB,EAA4B;SAC1B,OAAOA,KAAP,KAAiB,WAAxB;;;AC7YF;;;;;;AAMA,AAEA;;;;;;;;;;;;;;;;;;;AAmBA,AAAO,IAAMwD,2BAA2B;QAChC;WACG,eAACC,CAAD;aAAOA,IAAI,CAAX;KADH;UAEE,+BAFF;WAGGC;GAJ6B;SAM/B;WACE,eAACD,CAAD;aAAOA,KAAK,CAAZ;KADF;UAEC,mCAFD;WAGEC;GAT6B;QAWhC;WACG,eAACD,CAAD;aAAOA,IAAI,CAAX;KADH;UAEE,+BAFF;WAGGC;GAd6B;SAgB/B;WACE,eAACD,CAAD;aAAOA,KAAK,CAAZ;KADF;UAEC,mCAFD;WAGEC;GAnB6B;QAqBhC;WACG,eAACC,CAAD;aAAO,CAACC,KAAA,CAAcD,CAAd,CAAR;KADH;UAEE,4CAFF;WAGGE;GAxB6B;SA0B/B;WACED,OADF;UAEC,+BAFD;WAGEC;GA7B6B;cA+B1B;WACH,eAACC,CAAD;aAAOF,OAAA,CAAgBE,CAAhB,KAAsBF,KAAA,CAAcE,CAAd,CAA7B;KADG;UAEJ,sDAFI;WAGHD;GAlC6B;aAoC3B;WACFD,WADE;UAEH,iCAFG;WAGFC;GAvC6B;kBAyCtB;WACP,eAACC,CAAD;aAAOF,WAAA,CAAoBE,CAApB,KAA0BF,KAAA,CAAcE,CAAd,CAAjC;KADO;UAER,wDAFQ;WAGPD;GA5C6B;QA8ChC;WACGD,MADH;UAEE,6BAFF;WAGGC;GAjD6B;aAmD3B;WACF,eAACE,CAAD;aAAOH,MAAA,CAAeG,CAAf,KAAqBH,KAAA,CAAcG,CAAd,CAA5B;KADE;UAEH,oDAFG;WAGFF;GAtD6B;YAwD5B;WACDD,UADC;UAEF,gCAFE;WAGDC;GA3D6B;iBA6DvB;WACN,eAACE,CAAD;aAAOH,UAAA,CAAmBG,CAAnB,KAAyBH,KAAA,CAAcG,CAAd,CAAhC;KADM;UAEP,uDAFO;WAGNF;GAhE6B;YAkE5B;WACDD,UADC;UAEF,iCAFE;WAGDC;GArE6B;iBAuEvB;WACN,eAACG,CAAD;aAAOJ,UAAA,CAAmBI,CAAnB,KAAyBJ,KAAA,CAAcI,CAAd,CAAhC;KADM;UAEP,wDAFO;WAGNH;GA1E6B;OA4EjC;WACID,SADJ;UAEG,iCAFH;WAGIC;GA/E6B;YAiF5B;WACD,eAACI,CAAD;aAAOL,SAAA,CAAkBK,CAAlB,KAAwBL,KAAA,CAAcK,CAAd,CAA/B;KADC;UAEF,wDAFE;WAGDJ;GApF6B;WAsF7B;WACAD,aADA;UAED,mCAFC;WAGAC;GAzF6B;gBA2FxB;WACL,eAACI,CAAD;aAAOL,aAAA,CAAsBK,CAAtB,KAA4BL,KAAA,CAAcK,CAAd,CAAnC;KADK;UAEN,0DAFM;WAGLJ;GA9F6B;UAgG9B;WACCD,QADD;UAEA,+BAFA;WAGCC;GAnG6B;eAqGzB;WACJ,eAACJ,CAAD;aAAOG,QAAA,CAAiBH,CAAjB,KAAuBG,KAAA,CAAcH,CAAd,CAA9B;KADI;UAEL,sDAFK;WAGJI;GAxG6B;cA0G1B;WACHD,YADG;UAEJ,kCAFI;WAGHC;GA7G6B;mBA+GrB;WACR,eAACJ,CAAD;aAAOG,YAAA,CAAqBH,CAArB,KAA2BG,KAAA,CAAcH,CAAd,CAAlC;KADQ;UAET,yDAFS;WAGRI;GAlH6B;UAoH9B;WACCD,QADD;UAEA,gCAFA;WAGCC;GAvH6B;eAyHzB;WACJ,eAACK,CAAD;aAAON,QAAA,CAAiBM,CAAjB,KAAuBN,KAAA,CAAcM,CAAd,CAA9B;KADI;UAEL,uDAFK;WAGJL;GA5H6B;UA8H9B;WACCD,QADD;UAEA,2CAFA;WAGCC;GAjI6B;eAmIzB;WACJ,eAACM,CAAD;aAAOP,QAAA,CAAiBO,CAAjB,KAAuBP,KAAA,CAAcO,CAAd,CAA9B;KADI;UAEL,kEAFK;WAGJN;GAtI6B;UAwI9B;WACCD,QADD;UAEA,+BAFA;WAGCC;GA3I6B;eA6IzB;WACJ,eAACO,CAAD;aAAOR,QAAA,CAAiBQ,CAAjB,KAAuBR,KAAA,CAAcQ,CAAd,CAA9B;KADI;UAEL,sDAFK;WAGJP;;CAhJJ;;AC3BP;;;;;;AAMA,AAEA;;;;;;;;;;;;;;;;AAgBA,SAASQ,GAAT,CAAWrE,KAAX,EAAkB;OACX,IAAIiE,IAAItD,aAAae,MAAb,GAAsB,CAAnC,EAAsCuC,KAAK,CAA3C,EAA8CA,GAA9C,EAAmD;QAC3CK,oBAAoB3D,aAAasD,CAAb,CAA1B;;SAEK,IAAIM,IAAI,CAAR,EAAWC,MAAMF,kBAAkB5C,MAAxC,EAAgD6C,IAAIC,GAApD,EAAyDD,GAAzD,EAA8D;UACtDpB,eAAcmB,kBAAkBC,CAAlB,CAApB;;UAEIvE,iBAAiBmD,aAAYtD,GAAjC,EAAsC;eAC7BG,KAAP;;;UAGEmD,aAAYsB,KAAZ,CAAkBzE,KAAlB,CAAJ,EAA8B;eACrB,IAAImD,aAAYtD,GAAhB,CAAoBG,KAApB,CAAP;;;;CAMR,AACA;;AC3CA;;;;;;AAMA,AAEA;;;;;;;;;;;;;;AAcA,AAAO,SAAS0E,OAAT,CAAiBvD,MAAjB,EAAyBwD,QAAzB,EAAmC;MAClCC,QAAQpD,YAAYL,MAAZ,CAAd;MACM0D,eAAe,EAArB;;MAEIC,WAAW,CAAf;;OAEK,IAAMC,GAAX,IAAkB5D,MAAlB,EAA0B;QACpB,GAAG6D,cAAH,CAAkB3D,IAAlB,CAAuBwD,YAAvB,EAAqCE,GAArC,CAAJ,EAA+C;;;;iBAIlCA,GAAb,IAAoB,IAApB;;QAEI,GAAGC,cAAH,CAAkB3D,IAAlB,CAAuBF,MAAvB,EAA+B4D,GAA/B,CAAJ,EAAyC;UACnCH,SAASE,cAAc3D,OAAOO,MAAlC,EAA0C;;;;UAIpC1B,QAAQ2E,SAASxD,OAAO4D,GAAP,CAAT,EAAsBH,QAAQtC,OAAOyC,GAAP,CAAR,GAAsBA,GAA5C,EAAiD5D,MAAjD,CAAd;;UAEI,CAACoC,YAAYvD,KAAZ,CAAL,EAAyB;eAChBA,KAAP;;;;;;AC3CR;;;;;;AAMA,AAEA;;;;;;;AAOA,AAAO,SAASiF,MAAT,CAAgBC,MAAhB,EAAoC;oCAATC,OAAS;WAAA;;;UACjCC,SAAR,EAAmB,UAACC,MAAD,EAASC,KAAT,EAAmB;QAChCA,KAAJ,EAAW;cACDD,MAAR,EAAgB,UAACrF,KAAD,EAAQ+E,GAAR,EAAgB;eACvBA,GAAP,IAAc/E,KAAd;OADF;;GAFJ;;SAQOkF,MAAP;;;ACxBF;;;;;;;;;;;;;AAaA,AAAO,SAASK,qBAAT,CAA+BC,IAA/B,EAAqCC,QAArC,EAA+C;MAChDC,aAAJ;;MAEI;;WAEK,IAAIC,QAAJ,CAAa,GAAb,cAA6BH,IAA7B,CAAP;SACKI,UAAL,GAAkBJ,IAAlB;SACKC,QAAL,GAAgBA,QAAhB;;WAEOC,IAAP;GANF,CAOE,OAAOG,GAAP,EAAY;UACN,IAAIC,KAAJ,wBAAgCN,IAAhC,2BAA4DC,QAA5D,QAAN;;;;ACxBJ;;;;;;AAMA,AAEA;;;;;;;;;;;;;;;AAeA,AAAO,SAASM,uBAAT,CAAiCb,MAAjC,EAAyCc,UAAzC,EAAqDC,iBAArD,EAAwE;UACrED,UAAR,EAAoB,UAAC7F,IAAD,EAAO8D,CAAP,EAAa;WACxBiC,cAAP,CAAsBhB,MAAtB,EAA8B/E,IAA9B,EAAoC;aAC3B8F,kBAAkB9F,IAAlB,EAAwB8D,CAAxB,CAD2B;gBAExB,IAFwB;kBAGtB,KAHsB;oBAIpB;KAJhB;GADF;;;;;;;;;;AAiBF,AAAO,SAASkC,gBAAT,CAA0BjB,MAA1B,EAAkCc,UAAlC,EAA8C;UAC3CA,UAAR,EAAoB,UAAChG,KAAD,EAAQG,IAAR,EAAiB;QAC/B,QAAQgC,IAAR,CAAahC,IAAb,CAAJ,EAAwB;aACf+F,cAAP,CAAsBhB,MAAtB,EAA8B/E,KAAKmB,OAAL,CAAa,OAAb,EAAsB,EAAtB,CAA9B,EAAyD;aAClDtB,KADkD;aAElDoG,SAFkD;oBAG3C,KAH2C;sBAIzC;OAJhB;;;;;QAUE,QAAQjE,IAAR,CAAahC,IAAb,CAAJ,EAAwB;aACf+F,cAAP,CAAsBhB,MAAtB,EAA8B/E,KAAKmB,OAAL,CAAa,OAAb,EAAsB,EAAtB,CAA9B,EAAyD;aAClDtB,KADkD;aAElDoG,SAFkD;oBAG3C,KAH2C;sBAIzC;OAJhB;;;;;QAUE,aAAajE,IAAb,CAAkBhC,IAAlB,CAAJ,EAA6B;aACpB+F,cAAP,CAAsBhB,MAAtB,EAA8B/E,KAAKmB,OAAL,CAAa,YAAb,EAA2B,EAA3B,CAA9B,EAA8D;aACvDtB,MAAMqG,GADiD;aAEvDrG,MAAMsG,GAFiD;oBAGhD,KAHgD;sBAI9C;OAJhB;;;;;QAUEnG,SAAS,oBAAb,EAAmC;aAC1B+F,cAAP,CAAsBhB,MAAtB,EAA8B/E,IAA9B,EAAoC;oBAAA;kBAExB,IAFwB;oBAGtB,KAHsB;sBAIpB;OAJhB;;GAnCJ;;;;;;;;;;AAoDF,AAAO,SAASoG,qBAAT,CAA+BrB,MAA/B,EAAuCc,UAAvC,EAAmD;UAChDA,UAAR,EAAoB,UAAChG,KAAD,EAAQG,IAAR,EAAiB;WAC5B+F,cAAP,CAAsBhB,MAAtB,EAA8B/E,IAA9B,EAAoC;kBAAA;gBAExB,IAFwB;kBAGtB,IAHsB;oBAIpB;KAJhB;GADF;;;;;;;;;;AAiBF,AAAO,SAASqG,sBAAT,CAAgCtB,MAAhC,EAAwCc,UAAxC,EAAoD;UACjDA,UAAR,EAAoB,UAAChG,KAAD,EAAQG,IAAR,EAAiB;WAC5B+F,cAAP,CAAsBhB,MAAtB,EAA8B/E,IAA9B,EAAoC;kBAAA;gBAExB,KAFwB;kBAGtB,KAHsB;oBAIpB;KAJhB;GADF;;;ACjHF;;;;;;AAMO,IAAMsG,UAASjH,SAAOiH,MAAP,IAAiB;eACxB,oBADwB;YAE3BC,KAAKC,MAAL,GAAcvF,QAAd,CAAuB,EAAvB;CAFL;;ACNP;;;;;;AAMA,AACA,AAEA;;;;;;;AAOA,AAAO,SAASwF,SAAT,CAAiB5G,KAAjB,EAAwB6G,cAAxB,EAAwC;MACzCtF,QAAQvB,KAAR,KAAkB,CAAC6G,cAAvB,EAAuC;WAC9B7G,KAAP;;;MAGI4E,QAAQ,EAAd;;MAEIpD,YAAYxB,KAAZ,KAAsB,CAACqD,SAASrD,KAAT,CAA3B,EAA4C;YAClCA,KAAR,EAAe,UAACA,KAAD,EAAW;YAClB8G,IAAN,CAAW9G,KAAX;KADF;GADF,MAIO;UACC8G,IAAN,CAAW9G,KAAX;;;SAGK4E,KAAP;;;AC/BF;;;;GAMA,AAAO,AAIP,AAAO;;ACVP;;;;;;AAMA,AACA,AACA,AAEA,IAAMmC,UAAU,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,CAAhB;;;;;;;;;;;AAWA,AAAO,SAASC,QAAT,CAAkBC,IAAlB,EAAwBC,OAAxB,EAAiC/G,IAAjC,EAAuC;UACpC+G,OAAR,EAAiB,UAACtC,KAAD,EAAQuC,MAAR,EAAmB;QAC9B,CAAC5F,QAAQqD,KAAR,CAAL,EAAqB;cACX,CAACA,KAAD,CAAR;;;YAGMA,KAAR,EAAe,UAACwC,OAAD,EAAa;gBAChB5D,yBAAyB4D,OAAzB,CAAV;;UAEI,CAACA,QAAQ3C,KAAR,CAAcwC,KAAKE,MAAL,CAAd,CAAL,EAAkC;cAC1B,IAAIC,QAAQC,KAAZ,CAAkBD,QAAQ/G,IAAR,CAAaiB,OAAb,CAAqB,IAArB,EAA2ByF,QAAQI,MAAR,CAA3B,KAA+ChH,iBAAgBA,IAAhB,SAA2B,EAA1E,CAAlB,CAAN;;KAJJ;GALF;;;ACtBF;;;;;;;AAOA,AAEA;;;;;;;;;;;;;;;;;;IAiBMmH;sBACuB;QAAfC,QAAe,uEAAJ,EAAI;;;QACnBzD,IAAI,EAAV;;SAEK,IAAIG,IAAI,CAAR,EAAWvC,SAAS6F,SAAS7F,MAAlC,EAA0CuC,IAAIvC,MAA9C,EAAsDuC,GAAtD,EAA2D;UACnDuD,OAAOD,SAAStD,CAAT,CAAb;;UAEI,CAACQ,MAAM+C,IAAN,CAAL,EAAkB;cACV,IAAI1B,KAAJ,CAAU,+DAAV,CAAN;;;QAGA0B,IAAF,IAAUA,IAAV;;;;;;;;WAQKtB,cAAP,CAAsB,IAAtB,EAA4B,IAA5B,EAAkC,EAAElG,OAAO8D,CAAT,EAAlC;;;;;;;;;;;;;;;;;;;;;0BAiBY;wCAAP2D,KAAO;aAAA;;;WACP,IAAIxD,IAAI,CAAR,EAAWvC,SAAS+F,MAAM/F,MAA/B,EAAuCuC,IAAIvC,MAA3C,EAAmDuC,GAAnD,EAAwD;YAChDuD,OAAOC,MAAMxD,CAAN,CAAb;;YAEI,CAACQ,MAAM+C,IAAN,CAAL,EAAkB;gBACV,IAAI1B,KAAJ,CAAU,wDAAV,CAAN;;;aAGG4B,EAAL,CAAQF,IAAR,IAAgBA,IAAhB;;;aAGK,IAAP;;;;;;;;;;;;;;;;;;;;6BAiBOG,MAAM;eACJ,CAACA,IAAD,CAAT,EAAiB,CAAC,QAAD,CAAjB,EAA6B,mBAA7B;;UAEMJ,WAAW,KAAKG,EAAtB;;WAEK,IAAIzD,IAAI,CAAR,EAAWvC,SAASiG,KAAKjG,MAA9B,EAAsCuC,IAAIvC,MAA1C,EAAkDuC,GAAlD,EAAuD;YACjD,CAACsD,SAASI,KAAK1D,CAAL,CAAT,CAAL,EAAwB;iBACf,KAAP;;;;aAIG,IAAP;;;;;;;;;;;;;;;;;;;;;;;;8BAqBe;yCAAPwD,KAAO;aAAA;;;WACV,IAAIxD,IAAI,CAAR,EAAWvC,SAAS+F,MAAM/F,MAA/B,EAAuCuC,IAAIvC,MAA3C,EAAmDuC,GAAnD,EAAwD;YAChDuD,OAAOC,MAAMxD,CAAN,CAAb;;YAEI,CAACQ,MAAM+C,IAAN,CAAL,EAAkB;gBACV,IAAI1B,KAAJ,CAAU,2DAAV,CAAN;;;eAGK,KAAK4B,EAAL,CAAQF,IAAR,CAAP;;;aAGK,IAAP;;;;;;;;;;;;;;6BAWI;aACG1E,OAAO8E,IAAP,CAAY,KAAKF,EAAjB,CAAP;;;;;;;;;;;;;;;;0BAaIhG,QAAQ;eACH,CAACA,MAAD,CAAT,EAAmB,CAAC,CAAC,SAAD,EAAY,IAAZ,CAAD,CAAnB,EAAwC,gBAAxC;;UAEM6F,WAAWzE,OAAO8E,IAAP,CAAY,KAAKF,EAAjB,CAAjB;UACMlD,MAAM+C,SAAS7F,MAArB;UACImG,QAAQ,EAAZ;;WAEK,IAAI5D,IAAI,CAAb,EAAgBA,IAAIvC,MAApB,EAA4BuC,GAA5B,EAAiC;iBACtBsD,SAASb,KAAKoB,KAAL,CAAWpB,KAAKC,MAAL,KAAgBnC,GAA3B,CAAT,CAAT;;;aAGKqD,KAAP;;;;;;AAIJ1B,iBAAiBmB,SAASS,SAA1B,qBACGtB,QAAOvF,WADV,EACwB,UADxB;;AAIA,SAASuD,KAAT,CAAe+C,IAAf,EAAqB;SACZnE,SAASmE,IAAT,KAAkBA,KAAK9F,MAAL,KAAgB,CAAzC;;;;;;;;;;;;;;;;;;AAkBF,SAAS6F,QAAT,CAAkBS,MAAlB,EAA0B;WACf,CAACA,MAAD,CAAT,EAAmB,CAAC,QAAD,CAAnB;;MAEMC,SAASD,OAAOE,KAAP,CAAa,oBAAb,CAAf;MACMxG,SAASuG,OAAOvG,MAAtB;MACM6F,WAAW,EAAjB;;OAEK,IAAItD,IAAI,CAAb,EAAgBA,IAAIvC,MAApB,EAA4BuC,GAA5B,EAAiC;QACzBkE,QAAQF,OAAOhE,CAAP,CAAd;;QAEI,CAACkE,KAAD,IAAUA,UAAU,GAAxB,EAA6B;;;;QAIzB,IAAIhG,IAAJ,CAASgG,KAAT,KAAmB,CAAC,iBAAiBhG,IAAjB,CAAsBgG,KAAtB,CAAxB,EAAsD;YAC9C,IAAIrC,KAAJ,gCAAwCqC,KAAxC,sBAAN;;;QAGE,IAAIhG,IAAJ,CAASgG,KAAT,CAAJ,EAAqB;UACbC,QAAQD,MAAME,UAAN,CAAiB,CAAjB,CAAd;UACMC,MAAMH,MAAME,UAAN,CAAiB,CAAjB,CAAZ;;UAEID,QAAQE,GAAZ,EAAiB;cACT,IAAIxC,KAAJ,CAAU,0DAAV,CAAN;;;WAGG,IAAIvB,IAAI,CAAR,EAAWC,MAAM8D,MAAMF,KAAN,GAAc,CAApC,EAAuC7D,IAAIC,GAA3C,EAAgDD,GAAhD,EAAqD;iBAC1CuC,IAAT,CAAcyB,OAAOC,YAAP,CAAoBJ,QAAQ7D,CAA5B,CAAd;;;;;;QAMA4D,MAAMzG,MAAN,KAAiB,CAArB,EAAwB;eACboF,IAAT,CAAcqB,KAAd;;;;SAIG,IAAIb,QAAJ,CAAaC,QAAb,CAAP;CAGF;;AC7OA;;;;;;;AAOA,AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAoDMkB;;;sBACmD;QAA3CC,KAA2C,uEAAnC,EAAmC;QAA/BC,IAA+B,uEAAxB,QAAwB;;;;QAAdC,YAAc;;;;;QAGjDvF,SAASqF,KAAT,CAAJ,EAAqB;UACf,CAACnF,YAAY6B,UAAU,CAAV,CAAZ,CAAL,EAAgC;uBACfuD,IAAf;;;aAGKD,KAAP;cACQ,EAAR;;;QAGIG,gBAAgB,EAAtB;;YAEQH,KAAR,EAAe,UAAC1I,KAAD,EAAQ8I,IAAR,EAAiB;oBAChBhC,IAAd,CAAmB,EAAEiC,MAAMD,IAAR,EAAc9I,YAAd,EAAnB;KADF;;aAISgJ,QAAT,CAAkBhJ,KAAlB,EAAoC;UAAXiH,IAAW,uEAAJ,EAAI;yBACI+B,SAAStB,EADb;UAC1BiB,IAD0B,gBAC1BA,IAD0B;UACXM,GADW,gBACpBC,OADoB;UACNR,KADM,gBACNA,KADM;;;UAG9BS,MAAMzE,QAAQgE,KAAR,EAAe,gBAAgC;YAAtBU,GAAsB,QAA7BpJ,KAA6B;YAAX8I,IAAW,QAAjBC,IAAiB;;YAEpDJ,SAAS,SAAT,IAAsBG,IAAvB;;iBAEU,QAAT,IAAqBA,QAAQ9I,KAF9B,IAGC2I,SAAS,cAAT,IAA2BG,SAAS9I,KAHrC,IAIC2I,SAAS,MAAT,IAAmBG,KAAK9I,KAAL,CALtB,EAME;iBACO,EAAE+I,MAAMD,IAAR,EAAc9I,OAAOoJ,GAArB,EAAP;;OARM,CAAV;;UAYI7F,YAAY4F,GAAZ,CAAJ,EAAsB;cACd,EAAEnJ,OAAOiJ,GAAT,EAAN;;;UAGE,CAACxH,WAAW0H,IAAInJ,KAAf,CAAL,EAA4B;eACnBmJ,IAAInJ,KAAX;;;aAGK4G,UAAQK,IAAR,EAAc,IAAd,CAAP;WACKH,IAAL,CAAU9G,KAAV,EAAiBmJ,IAAIJ,IAArB;;aAEOI,IAAInJ,KAAJ,CAAUqJ,KAAV,CAAgB,IAAhB,EAAsBpC,IAAtB,CAAP;;;;;;;;;;;;WAYKf,cAAP,CAAsB8C,QAAtB,EAAgC,IAAhC,EAAsC;aAC7B;eACEH,aADF;kBAAA;iBAGID;;KAJb;WAOOU,cAAP,CAAsBN,QAAtB,EAAgCP,SAASV,SAAzC;;kBAEOiB,QAAP;;;;;;;;;;;;;;;;;;;;;;;;0BAoBGN,OAAO1I,OAAO;;;UACb,CAACuB,QAAQmH,KAAR,CAAL,EAAqB;gBACX,CAACA,KAAD,CAAR;;;cAGMA,KAAR,EAAe,UAACI,IAAD,EAAU;eAClBpB,EAAL,CAAQgB,KAAR,CAAc5B,IAAd,CAAmB,EAAEiC,MAAMD,IAAR,EAAc9I,YAAd,EAAnB;OADF;;aAIO,IAAP;;;;;;;;;;;;;;;;;;;;;6BAkBMiJ,KAAK;WACNvB,EAAL,CAAQwB,OAAR,GAAkBD,GAAlB;;aAEO,IAAP;;;;;;;;;;;;;;;;;;;;;;yBAmBGN,OAAM;WACJjB,EAAL,CAAQiB,IAAR,GAAeA,KAAf;;aAEO,IAAP;;;;EA1ImBhD;;AA8IvBQ,iBAAiBsC,SAASV,SAA1B,qBACGtB,QAAOvF,WADV,EACwB,UADxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoEA,SAAS8H,QAAT,CAAkBN,KAAlB,EAAyBC,IAAzB,EAA+BC,YAA/B,EAA6C;4CAChCH,QAAX,2CAAuBrD,SAAvB;;;;;;;;;;;;;;;;AAgBF,SAASmE,IAAT,CAAcC,SAAd,EAAyBC,MAAzB,EAAiCC,MAAjC,EAAyC;SAChCF,YAAYC,MAAZ,GAAqBC,MAA5B;CAGF;;ACvSA;;;;;;;AAOA,AACA,AACA,AACA,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoFA,IAAMC,gBAAgBX,SAAS,MAAT,EAAiB,UAAC7H,MAAD;SAAYA,MAAZ;CAAjB,EACnB4H,IADmB,CAElB,UAAC5H,MAAD;SAAY,IAAIyI,KAAJ,CAAUzI,MAAV,MAAsBA,MAAlC;CAFkB,EAGlB,UAACA,MAAD;SAAY,KAAK2B,OAAOI,cAAP,CAAsB/B,MAAtB,EAA8BgC,WAAnC,EAAgD,IAAIyG,KAAJ,CAAUzI,OAAO0I,CAAjB,EAAoBC,SAApB,GAAgCD,CAAhF,CAAZ;CAHkB,EAKnBd,IALmB,CAKd7G,SALc,EAKH,UAACf,MAAD,EAAS4I,IAAT;SAAkB5I,OAAO6I,KAAP,CAAaD,IAAb,CAAlB;CALG,EAMnBhB,IANmB,CAMdlH,MANc,EAMN,UAACV,MAAD;SAAY,IAAIY,IAAJ,CAASZ,MAAT,CAAZ;CANM,EAOnB4H,IAPmB,CAOd3F,QAPc,EAOJ,UAACjC,MAAD;SAAY,IAAI8I,MAAJ,CAAW9I,OAAOkE,MAAlB,EAA0BlE,OAAOC,QAAP,GAAkB8I,KAAlB,CAAwB,WAAxB,EAAqC,CAArC,CAA1B,CAAZ;CAPI,EAQnBnB,IARmB,CAQdxH,OARc,EAQL;SAAM,EAAN;CARK,EASnBwH,IATmB,CASdhG,aATc,EASC;SAAO,EAAP;CATD,CAAtB;;;;;;;;;;;;;IAqBM6G;iBACQzI,MAAZ,EAAoB;;;QACdA,kBAAkByI,KAAtB,EAA6B;aACpBzI,MAAP;;;;;;;;;WASK+E,cAAP,CAAsB,IAAtB,EAA4B,GAA5B,EAAiC,EAAElG,OAAOmB,MAAT,EAAjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gCA6DiB;wCAATgE,OAAS;eAAA;;;UACXhE,SAAS,KAAK0I,CAApB;;cAEQ1I,UAAUiE,SAAlB,EAA6B,UAAClB,CAAD,EAAO;gBAC1B,IAAI0F,KAAJ,CAAU1F,CAAV,EAAa2F,CAArB,EAAwB,UAAC7J,KAAD,EAAQ+E,GAAR,EAAgB;iBAC/BA,GAAP,IAAc/E,KAAd;SADF;OADF;;aAMO,IAAP;;;;;;;;;;;;;;;;;8BAcuB;UAAjB2E,QAAiB,uEAAN,IAAM;;eACd,CAACA,QAAD,CAAT,EAAqB,CAAC,aAAD,CAArB,EAAsC,eAAtC;;aAEO,KAAKwF,GAAL,CAASxF,QAAT,IAAqB,KAAKyF,KAAjC;;;;;;;;;;;;;;;;;;;yBAgBG1E,MAAe;eACT,CAACA,IAAD,CAAT,EAAiB,CAAC,UAAD,CAAjB,EAA+B,YAA/B;;yCADYuB,IAAM;YAAA;;;aAGXvB,KAAK2D,KAAL,CAAW,IAAX,EAAiBpC,IAAjB,CAAP;;;;;;;;;;;;;;4BAWM;UACA9F,SAAS,KAAK0I,CAApB;UACMG,QAAQL,cAAcxI,MAAd,EAAsB,CAACA,MAAD,EAAS,KAAT,CAAtB,CAAd;;UAEI6I,UAAU7I,MAAd,EAAsB;gBACZA,MAAR,EAAgB,UAACnB,KAAD,EAAQ+E,GAAR,EAAgB;gBACxBA,GAAN,IAAa/E,KAAb;SADF;;;aAKK,IAAI,KAAKmD,WAAT,CAAqB6G,KAArB,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2BA0CKK,aAAa;aACXhG,IAAErB,YAAY,KAAK6G,CAAjB,IAAsBzD,SAAtB,GAAkCtD,OAAOwH,MAAP,CAAc,KAAKT,CAAnB,EAAsBQ,WAAtB,CAApC,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iCA0CqB;yCAATlF,OAAS;eAAA;;;UACfhE,SAAS,KAAK0I,CAApB;;UAEI7G,YAAY7B,MAAZ,CAAJ,EAAyB;eAChB,IAAP;;;cAGMiE,SAAR,EAAmB,UAAClB,CAAD,EAAO;oBACb/C,MAAX,EAAmB+C,CAAnB;OADF;;aAIO,IAAP;;;;;;;;;;;;;;;;;;;;gCAiBU;aACH,IAAI,KAAKf,WAAT,CAAqB2G,WAAU,KAAKD,CAAf,CAArB,CAAP;;;;;;;;;;;;;;;;;iCAcwB;UAAf1I,MAAe,uEAAN,IAAM;;aACjBoJ,UAAU,KAAKV,CAAf,EAAkB1I,MAAlB,EAA0B,KAA1B,CAAP;;;;;;;;;;;;;;;;;;;;8BAiBQwD,UAAUlB,GAAG;UACjB2B,UAAU1D,MAAV,KAAqB,CAArB,IAA0B,CAACD,WAAWkD,QAAX,CAA/B,EAAqD;YAC/CA,QAAJ;mBACW6F,OAAX;OAFF,MAGO,IAAIpF,UAAU1D,MAAV,KAAqB,CAAzB,EAA4B;YAC7Ba,QAAJ;OADK,MAEA,IAAI,CAAC6C,UAAU1D,MAAf,EAAuB;YACxBa,QAAJ;mBACWiI,OAAX;;;eAGO,CAAC7F,QAAD,EAAWlB,CAAX,CAAT,EAAwB,CAAC,UAAD,EAAa,CAAC,YAAD,EAAe,IAAf,CAAb,CAAxB,EAA4D,iBAA5D;;UAEInB,OAAOmB,CAAP,CAAJ;;aAEOgH,WAAU,KAAKZ,CAAf,EAAkBlF,QAAlB,EAA4BlB,CAA5B,EAA+B,CAAC,EAAEsB,KAAK,IAAP,EAAa/E,OAAO,KAAK6J,CAAzB,EAAD,CAA/B,CAAP;;;;;;;;;;;;;;;;;;;;+BAiBSlF,UAAUlB,GAAG;UAClB2B,UAAU1D,MAAV,KAAqB,CAArB,IAA0B,CAACD,WAAWkD,QAAX,CAA/B,EAAqD;YAC/CA,QAAJ;mBACW6F,OAAX;OAFF,MAGO,IAAIpF,UAAU1D,MAAV,KAAqB,CAAzB,EAA4B;YAC7Ba,QAAJ;OADK,MAEA,IAAI,CAAC6C,UAAU1D,MAAf,EAAuB;YACxBa,QAAJ;mBACWiI,OAAX;;;eAGO,CAAC7F,QAAD,EAAWlB,CAAX,CAAT,EAAwB,CAAC,UAAD,EAAa,CAAC,YAAD,EAAe,IAAf,CAAb,CAAxB,EAA4D,kBAA5D;;UAEMiH,WAAWC,YAAW,KAAKd,CAAhB,EAAmBlF,QAAnB,EAA6BlB,CAA7B,EAAgC,CAAC,EAAEsB,KAAK,IAAP,EAAa/E,OAAO,KAAK6J,CAAzB,EAAD,CAAhC,CAAjB;;aAEOxF,IAAE1B,MAAM+H,QAAN,IAAkBA,QAAlB,GAA6BA,YAAY,EAA3C,CAAP;;;;;;;;;;;;;;;;;;;;;;;;6BAqBO/F,UAAUlB,GAAG;UAChB2B,UAAU1D,MAAV,KAAqB,CAArB,IAA0B,CAACD,WAAWkD,QAAX,CAA/B,EAAqD;YAC/CA,QAAJ;mBACW6F,OAAX;OAFF,MAGO,IAAIpF,UAAU1D,MAAV,KAAqB,CAAzB,EAA4B;YAC7Ba,QAAJ;OADK,MAEA,IAAI,CAAC6C,UAAU1D,MAAf,EAAuB;YACxBa,QAAJ;mBACWiI,OAAX;;;eAGO,CAAC7F,QAAD,EAAWlB,CAAX,CAAT,EAAwB,CAAC,UAAD,EAAa,CAAC,YAAD,EAAe,IAAf,CAAb,CAAxB,EAA4D,gBAA5D;;aAEOmH,UAAS,KAAKf,CAAd,EAAiBlF,QAAjB,EAA2BlB,CAA3B,EAA8B,CAAC,EAAEsB,KAAK,IAAP,EAAa/E,OAAO,KAAK6J,CAAzB,EAAD,CAA9B,CAAP;;;;;;;;;;;;;;;;;;gCAeUlF,UAAwB;UAAdlB,CAAc,uEAAVlB,QAAU;;eACzB,CAACoC,QAAD,EAAWlB,CAAX,CAAT,EAAwB,CAAC,UAAD,EAAa,CAAC,YAAD,EAAe,IAAf,CAAb,CAAxB,EAA4D,mBAA5D;;UAEInB,OAAOmB,CAAP,CAAJ;;mBAEY,KAAKoG,CAAjB,EAAoBlF,QAApB,EAA8BlB,CAA9B,EAAiC,CAAC,EAAEsB,KAAK,IAAP,EAAa/E,OAAO,KAAK6J,CAAzB,EAAD,CAAjC;;aAEO,IAAP;;;;;;;;;;;;;;;;;;;qCAgBelF,UAAwB;UAAdlB,CAAc,uEAAVlB,QAAU;;eAC9B,CAACoC,QAAD,EAAWlB,CAAX,CAAT,EAAwB,CAAC,UAAD,EAAa,CAAC,YAAD,EAAe,IAAf,CAAb,CAAxB,EAA4D,mBAA5D;;UAEInB,OAAOmB,CAAP,CAAJ;;wBAEiB,KAAKoG,CAAtB,EAAyBlF,QAAzB,EAAmClB,CAAnC,EAAsC,CAAC,EAAEsB,KAAK,IAAP,EAAa/E,OAAO,KAAK6J,CAAzB,EAAD,CAAtC;;aAEO,IAAP;;;;;;;;;;;;;;;iCAYW;kBACA,KAAKA,CAAhB;;aAEO,IAAP;;;;;;;;;;;;;;;;;;;4BAgBMlF,UAAwB;UAAdlB,CAAc,uEAAVlB,QAAU;;eACrB,CAACoC,QAAD,EAAWlB,CAAX,CAAT,EAAwB,CAAC,UAAD,EAAa,CAAC,YAAD,EAAe,IAAf,CAAb,CAAxB,EAA4D,eAA5D;;UAEInB,OAAOmB,CAAP,CAAJ;;aAEOY,IAAEwG,SAAQ,KAAKhB,CAAb,EAAgBlF,QAAhB,EAA0BlB,CAA1B,EAA6B,CAAC,EAAEsB,KAAK,IAAP,EAAa/E,OAAO,KAAK6J,CAAzB,EAAD,CAA7B,CAAF,CAAP;;;;;;;;;;;;;;;;;;;+BAgBSlF,UAA4B;UAAlBlB,CAAkB,uEAAdlB,QAAc;UAAJuI,EAAI;;eAC5B,CAACnG,QAAD,EAAWlB,CAAX,CAAT,EAAwB,CAAC,UAAD,EAAa,CAAC,YAAD,EAAe,IAAf,CAAb,CAAxB,EAA4D,kBAA5D;;UAEInB,OAAOmB,CAAP,CAAJ;;UAEMtC,SAAS,KAAK0I,CAApB;UACMkB,OAAO,CAAC,EAAEhG,KAAK,IAAP,EAAa/E,OAAO,KAAK6J,CAAzB,EAAD,CAAb;;UAEIzE,UAAU1D,MAAV,GAAmB,CAAvB,EAA0B;eACjBsJ,YAAW7J,MAAX,EAAmBwD,QAAnB,EAA6BlB,CAA7B,EAAgC,KAAhC,EAAuC2C,SAAvC,EAAkD2E,IAAlD,EAAwDD,EAA/D;;;aAGKE,YAAW7J,MAAX,EAAmBwD,QAAnB,EAA6BlB,CAA7B,EAAgC,KAAhC,EAAuC,EAAEqH,MAAF,EAAvC,EAA+CC,IAA/C,EAAqDD,EAA5D;;;;;;;;;;;;;;;;;;;;6BAiBOnG,UAAUlB,GAAG;UAChB2B,UAAU1D,MAAV,KAAqB,CAArB,IAA0B,CAACD,WAAWkD,QAAX,CAA/B,EAAqD;YAC/CA,QAAJ;mBACW6F,OAAX;OAFF,MAGO,IAAIpF,UAAU1D,MAAV,KAAqB,CAAzB,EAA4B;YAC7Ba,QAAJ;OADK,MAEA,IAAI,CAAC6C,UAAU1D,MAAf,EAAuB;YACxBa,QAAJ;mBACWiI,OAAX;;;eAGO,CAAC7F,QAAD,EAAWlB,CAAX,CAAT,EAAwB,CAAC,UAAD,EAAa,CAAC,YAAD,EAAe,IAAf,CAAb,CAAxB,EAA4D,gBAA5D;;UAEInB,OAAOmB,CAAP,CAAJ;;aAEOwH,UAAS,KAAKpB,CAAd,EAAiBlF,QAAjB,EAA2BlB,CAA3B,EAA8B,CAAC,EAAEsB,KAAK,IAAP,EAAa/E,OAAO,KAAK6J,CAAzB,EAAD,CAA9B,CAAP;;;;;;;;;;;;;;;;;uCAc8B;UAAf1I,MAAe,uEAAN,IAAM;;aACvBoJ,UAAU,KAAKV,CAAf,EAAkB1I,MAAlB,EAA0B,IAA1B,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2BA6BK+J,UAAUC,YAAY;UACvB/F,UAAU1D,MAAV,IAAoB,CAAxB,EAA2B;sCACXwJ,QAAd,EAAyBC,UAAzB;;;iBAGS,IAAIvB,KAAJ,CAAUsB,QAAV,EAAoBrB,CAA/B;;UAEIhH,SAAS,KAAKgH,CAAd,CAAJ,EAAsB;eACb1D,gBAAP,CAAwB,KAAK0D,CAA7B,EAAgCqB,QAAhC;;;aAGK,IAAP;;;;;;;;;;;;;;;;;;8BAee;UACT/J,SAAS,KAAK0I,CAApB;;yCADQuB,KAAO;aAAA;;;cAGPjK,UAAUiK,KAAlB,EAAyB,UAACF,QAAD,EAAc;eAC9B/J,OAAO+J,QAAP,CAAP;OADF;;aAIO,IAAP;;;;;;;;;;;;;;;;;2BAcK/J,QAAQ;UACP+C,IAAI,KAAK2F,CAAf;;eAES,IAAID,KAAJ,CAAUzI,MAAV,EAAkB0I,CAA3B;;;aAGO3F,KAAK/C,MAAL,IAAgBa,MAAMkC,CAAN,KAAYlC,MAAMb,MAAN,CAAnC;;;;;;;;;;;;;;;;;;4BAewB;UAApBwD,QAAoB,uEAAT6F,OAAS;;eACf,CAAC7F,QAAD,CAAT,EAAqB,CAAC,UAAD,CAArB,EAAmC,aAAnC;;aAEOD,QAAQ,KAAKmF,CAAb,EAAgB,UAAC7J,KAAD,EAAQ+E,GAAR,EAAa5D,MAAb,EAAwB;YACzC,CAACwD,SAAS3E,KAAT,EAAgB+E,GAAhB,EAAqB5D,MAArB,CAAL,EAAmC;iBAC1B,KAAP;;OAFG,MAIA,KAJP;;;;;;;;;;;;;;;;;6BAkBe;yCAAPiK,KAAO;aAAA;;;aACR,KAAKC,MAAL,CAAY,UAACrL,KAAD,EAAQ+E,GAAR;eAAgBqG,MAAME,OAAN,CAAcvG,GAAd,MAAuB,CAAC,CAAxC;OAAZ,CAAP;;;;;;;;;;;;;;;;;;6BAeyB;UAApBJ,QAAoB,uEAAT6F,OAAS;;eAChB,CAAC7F,QAAD,CAAT,EAAqB,CAAC,UAAD,CAArB,EAAmC,cAAnC;;UAEMxD,SAAS,KAAK0I,CAApB;UACMjF,QAAQpD,YAAYL,MAAZ,CAAd;;;UAGM+C,IAAIU,QAAQ,EAAR,GAAajC,MAAMxB,MAAN,IAAgBA,MAAhB,GAAyB,EAAhD;;cAEQA,MAAR,EAAgB,UAACnB,KAAD,EAAQ+E,GAAR,EAAgB;YAC1BJ,SAAS3E,KAAT,EAAgB+E,GAAhB,EAAqB5D,MAArB,CAAJ,EAAkC;cAC5ByD,KAAJ,EAAW;cACPkC,IAAF,CAAO9G,KAAP;WADF,MAEO;cACH+E,GAAF,IAAS/E,KAAT;;;OALN;;aAUOqE,IAAEH,CAAF,CAAP;;;;;;;;;;;;;;;;;;yBAeGS,UAAU;eACJ,CAACA,QAAD,CAAT,EAAqB,CAAC,UAAD,CAArB,EAAmC,YAAnC;;aAEOD,QAAQ,KAAKmF,CAAb,EAAgB,UAAC7J,KAAD,EAAQ+E,GAAR,EAAa5D,MAAb,EAAwB;YACzCwD,SAAS3E,KAAT,EAAgB+E,GAAhB,EAAqB5D,MAArB,CAAJ,EAAkC;iBACzB,EAAE4D,QAAF,EAAO/E,YAAP,EAAP;;OAFG,KAID,IAJN;;;;;;;;;;;;;;;;;;4BAmBM2E,UAAU;eACP,CAACA,QAAD,CAAT,EAAqB,CAAC,UAAD,CAArB,EAAmC,eAAnC;;cAEQ,KAAKkF,CAAb,EAAgB,UAAC7J,KAAD,EAAQ+E,GAAR,EAAa5D,MAAb,EAAwB;iBAC7BnB,KAAT,EAAgB+E,GAAhB,EAAqB5D,MAArB;OADF;;aAIO,IAAP;;;;;;;;;;;;;;;;;6BAcO;aACAoK,MAAP,CAAc,KAAK1B,CAAnB;;aAEO,IAAP;;;;;;;;;;;;;;;;;;;;;;;2BAoBEqB,UAAUM,QAAQ;UAChBpG,UAAU1D,MAAV,IAAoB,CAAxB,EAA2B;sCACXwJ,QAAd,EAAyBM,MAAzB;;;UAGIrK,SAAS,KAAK0I,CAApB;;cAEQhH,SAAS1B,MAAT,KAAoB,IAAIyI,KAAJ,CAAUsB,QAAV,EAAoBrB,CAAhD,EAAmD,UAAC2B,MAAD,EAASN,QAAT,EAAsB;eAChEhF,cAAP,CAAsB/E,MAAtB,EAA8B+J,QAA9B,EAAwC,EAAE7E,KAAKmF,MAAP,EAAxC;OADF;;aAIO,IAAP;;;;;;;;;;;;;;;;;;wBAeEzG,KAAK;UACD5D,SAAS,KAAK0I,CAApB;;UAEI,CAAChH,SAAS1B,MAAT,CAAL,EAAuB;eACd,KAAP;;;aAGK4D,OAAO5D,MAAd;;;;;;;;;;;;;;;;;;;2BAgBK4D,KAAK;UACJ5D,SAAS,KAAK0I,CAApB;;UAEI,CAAChH,SAAS1B,MAAT,CAAL,EAAuB;eACd,KAAP;;;aAGK,GAAG6D,cAAH,CAAkB3D,IAAlB,CAAuBF,MAAvB,EAA+B4D,GAA/B,CAAP;;;;;;;;;;;;;;;gCAYS5B,aAAa;aACf,KAAK0G,CAAL,YAAkB1G,WAAzB;;;;;;;;;;;;;;;;;+BAcS;aACFL,OAAO2I,QAAP,CAAgB,KAAK5B,CAArB,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yBAiCG6B,UAAUC,OAAO;UAChBvG,UAAU1D,MAAV,KAAqB,CAArB,IAA0B,CAACD,WAAWiK,QAAX,CAA3B,IAAmD,CAACnK,QAAQmK,QAAR,CAAxD,EAA2E;WACtEE,OAAH,CAAWvK,IAAX,CAAgB+D,SAAhB,EAA2B,IAA3B;;;SAGCwG,OAAH,CAAWvK,IAAX,CAAgB+D,SAAhB,EAA2B,KAAKyE,CAAhC;;aAEOgC,KAAKC,SAAL,CAAezC,KAAf,CAAqBwC,IAArB,EAA2BzG,SAA3B,CAAP;;;;;;;;;;;;;;;;;0BAcIpF,OAAO;UACL+E,MAAML,QAAQ,KAAKmF,CAAb,EAAgB,UAACT,GAAD,EAAMrE,GAAN,EAAc;YACpCqE,OAAOpJ,KAAP,IAAiBgC,MAAMoH,GAAN,KAAcpH,MAAMhC,KAAN,CAAnC,EAAkD;iBACzC+E,GAAP;;OAFQ,CAAZ;;aAMOxB,YAAYwB,GAAZ,IAAmB,IAAnB,GAA0BA,GAAjC;;;;;;;;;;;;;;;;;gCAcU/E,OAAO;UACX+E,MAAML,QAAQ,KAAKmF,CAAb,EAAgB,UAACT,GAAD,EAAMrE,GAAN,EAAc;YACpCqE,QAAQpJ,KAAR,IAAkBgC,MAAMoH,GAAN,KAAcpH,MAAMhC,KAAN,CAApC,EAAmD;iBAC1C+E,GAAP;;OAFQ,CAAZ;;aAMOxB,YAAYwB,GAAZ,IAAmB,IAAnB,GAA0BA,GAAjC;;;;;;;;;;;;;;;;;;2BAeK;UACC5D,SAAS,KAAK0I,CAApB;;aAEOxF,IAAExB,SAAS1B,MAAT,IAAmB2B,OAAO8E,IAAP,CAAYzG,MAAZ,CAAnB,GAAyC,EAA3C,CAAP;;;;;;;;;;;;;;;;;;wBAeEwD,UAAU;eACH,CAACA,QAAD,CAAT,EAAqB,CAAC,UAAD,CAArB,EAAmC,WAAnC;;UAEMxD,SAAS,KAAK0I,CAApB;UACM3F,IAAI1C,YAAYL,MAAZ,IAAsB,EAAtB,GAA2BuB,OAAOvB,MAAP,IAAiB,IAAjB,GAAwB,EAA7D;;cAEQA,MAAR,EAAgB,UAACnB,KAAD,EAAQ+E,GAAR,EAAgB;UAC5BA,GAAF,IAASJ,SAAS3E,KAAT,EAAgB+E,GAAhB,EAAqB5D,MAArB,CAAT;OADF;;aAIOkD,IAAEH,CAAF,CAAP;;;;;;;;;;;;;;;;;;;;0BAiBmB;UAAjBS,QAAiB,uEAAN,IAAM;;eACV,CAACA,QAAD,CAAT,EAAqB,CAAC,aAAD,CAArB,EAAsC,WAAtC;;aAEO,KAAKxD,MAAL,CAAY,UAAC4K,GAAD,EAAM/L,KAAN,EAAa+E,GAAb,EAAkB5D,MAAlB,EAA6B;YACxCiI,MAAM9G,OAAOqC,WAAWA,SAAS3E,KAAT,EAAgB+E,GAAhB,EAAqB5D,MAArB,CAAX,GAA0CnB,KAAjD,CAAZ;;YAEIoJ,MAAM2C,IAAI/L,KAAd,EAAqB;cACf+E,GAAJ,GAAUA,GAAV;cACI/E,KAAJ,GAAYoJ,GAAZ;;OALG,EAOJ,EAAErE,KAAK,IAAP,EAAa/E,OAAO,CAACuC,QAArB,EAPI,EAO6BsH,CAPpC;;;;;;;;;;;;;;;;;;;;0BAwBmB;UAAjBlF,QAAiB,uEAAN,IAAM;;eACV,CAACA,QAAD,CAAT,EAAqB,CAAC,aAAD,CAArB,EAAsC,WAAtC;;aAEO,KAAKxD,MAAL,CAAY,UAAC6K,GAAD,EAAMhM,KAAN,EAAa+E,GAAb,EAAkB5D,MAAlB,EAA6B;YACxCiI,MAAM9G,OAAOqC,WAAWA,SAAS3E,KAAT,EAAgB+E,GAAhB,EAAqB5D,MAArB,CAAX,GAA0CnB,KAAjD,CAAZ;;YAEIoJ,MAAM4C,IAAIhM,KAAd,EAAqB;cACf+E,GAAJ,GAAUA,GAAV;cACI/E,KAAJ,GAAYoJ,GAAZ;;OALG,EAOJ,EAAErE,KAAK,IAAP,EAAa/E,OAAOuC,QAApB,EAPI,EAO4BsH,CAPnC;;;;;;;;;;;;;;;;;;;;;2BAyBKlF,UAAuB;UAAbxD,OAAa,uEAAJ,EAAI;;eACnB,CAACwD,QAAD,CAAT,EAAqB,CAAC,UAAD,CAArB,EAAmC,cAAnC;;cAEQ,KAAKkF,CAAb,EAAgB,UAAC7J,KAAD,EAAQ+E,GAAR,EAAakH,GAAb,EAAqB;iBAC1B9K,OAAT,EAAiBnB,KAAjB,EAAwB+E,GAAxB,EAA6BkH,GAA7B;OADF;;aAIO5H,IAAElD,OAAF,CAAP;;;;;;;;;;;;;;;;;;;;yBAiBG+J,UAAUlL,OAAO;UAChBoF,UAAU1D,MAAV,IAAoB,CAApB,IAAyB2B,SAAS6H,QAAT,CAA7B,EAAiD;eACxC,KAAKrB,CAAL,GAAS,KAAKA,CAAL,CAAOqB,QAAP,CAAT,GAA4B9E,SAAnC;;;UAGEhB,UAAU1D,MAAV,IAAoB,CAAxB,EAA2B;sCACXwJ,QAAd,EAAyBlL,KAAzB;;;aAGK,KAAKiF,MAAL,CAAYiG,QAAZ,CAAP;;;;;;;;;;;;;;;;;;;;;;;;uCAqBiBA,UAAU;UACrB/J,SAAS,KAAK0I,CAApB;;aAEOhH,SAAS1B,MAAT,IAAmB2B,OAAOoJ,wBAAP,CAAgC/K,MAAhC,EAAwC+J,QAAxC,CAAnB,GAAuE9E,SAA9E;;;;;;;;;;;;;;;;;oCAcc;UACRjF,SAAS,KAAK0I,CAApB;;aAEOxF,IAAExB,SAAS1B,MAAT,IAAmB2B,OAAOqJ,mBAAP,CAA2BhL,MAA3B,CAAnB,GAAwD,EAA1D,CAAP;;;;;;;;;;;;;;;;;sCAcgB;UACVA,SAAS,KAAK0I,CAApB;;aAEOxF,IAAExB,SAAS1B,MAAT,IAAmB2B,OAAOsJ,qBAAP,CAA6BjL,MAA7B,CAAnB,GAA0D,EAA5D,CAAP;;;;;;;;;;;;;;;;0BAaI8B,QAAO;UACL9B,SAAS,KAAK0I,CAApB;UACMwC,kBAAkB,CAAC1J,MAAMxB,MAAN,CAAzB;;UAEIiE,UAAU1D,MAAd,EAAsB;YAChB2K,oBAAoBxJ,SAASI,MAAT,KAAmBP,OAAOO,MAAP,CAAvC,CAAJ,EAA2D;iBAClDqG,cAAP,CAAsBnI,MAAtB,EAA8B8B,MAA9B;;;eAGK,IAAP;;;aAGKoJ,kBAAkB,IAAIzC,KAAJ,CAAU9G,OAAOI,cAAP,CAAsB/B,MAAtB,CAAV,CAAlB,GAA6D,IAAIyI,KAAJ,EAApE;;;;;;;;;;;;;;;;;;2BAeKjF,UAAUmG,IAAI;eACV,CAACnG,QAAD,CAAT,EAAqB,CAAC,UAAD,CAArB,EAAmC,cAAnC;;UAEMxD,SAAS,KAAK0I,CAApB;;UAEIyC,iBAAJ;;UAEIlH,UAAU1D,MAAV,KAAqB,CAAzB,EAA4B;gBAClBP,MAAR,EAAgB,UAACnB,KAAD,EAAQ+E,GAAR,EAAgB;qBACnBA,GAAX;eACK/E,KAAL;;iBAEO,IAAP;SAJF;;;cAQMmB,MAAR,EAAgB,UAACnB,KAAD,EAAQ+E,GAAR,EAAgB;YAC1BA,QAAQuH,QAAZ,EAAsB;eACf3H,SAASmG,EAAT,EAAa9K,KAAb,EAAoB+E,GAApB,EAAyB5D,MAAzB,CAAL;;OAFJ;;aAMO2J,EAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2BAgCEI,UAAUqB,QAAQ;UAChBnH,UAAU1D,MAAV,IAAoB,CAAxB,EAA2B;sCACXwJ,QAAd,EAAyBqB,MAAzB;;;UAGIpL,SAAS,KAAK0I,CAApB;;cAEQhH,SAAS1B,MAAT,KAAoB,IAAIyI,KAAJ,CAAUsB,QAAV,EAAoBrB,CAAhD,EAAmD,UAAC0C,MAAD,EAASrB,QAAT,EAAsB;eAChEhF,cAAP,CAAsB/E,MAAtB,EAA8B+J,QAA9B,EAAwC,EAAE5E,KAAKiG,MAAP,EAAxC;OADF;;aAIO,IAAP;;;;;;;;;;;;;;;;;;2BAeuB;UAApB5H,QAAoB,uEAAT6F,OAAS;;eACd,CAAC7F,QAAD,CAAT,EAAqB,CAAC,UAAD,CAArB,EAAmC,YAAnC;;aAEOD,QAAQ,KAAKmF,CAAb,EAAgB,UAAC7J,KAAD,EAAQ+E,GAAR,EAAa5D,MAAb,EAAwB;YACzCwD,SAAS3E,KAAT,EAAgB+E,GAAhB,EAAqB5D,MAArB,CAAJ,EAAkC;iBACzB,IAAP;;OAFG,KAID,KAJN;;;;;;;;;;;;;;;;;;iCAmBWA,QAAQ;UACb+C,IAAI,KAAK2F,CAAf;;eAES,IAAID,KAAJ,CAAUzI,MAAV,EAAkB0I,CAA3B;;aAEO3F,MAAM/C,MAAN,IAAiBa,MAAMkC,CAAN,KAAYlC,MAAMb,MAAN,CAApC;;;;;;;;;;;;;;;;;;0BAemB;UAAjBwD,QAAiB,uEAAN,IAAM;;eACV,CAACA,QAAD,CAAT,EAAqB,CAAC,aAAD,CAArB,EAAsC,WAAtC;;aAEO,KAAK6H,MAAL,CAAY,UAACrC,GAAD,EAAMnK,KAAN,EAAa+E,GAAb,EAAkB5D,MAAlB;eACjBgJ,MAAM7H,OAAOqC,WAAWA,SAAS3E,KAAT,EAAgB+E,GAAhB,EAAqB5D,MAArB,CAAX,GAA0CnB,KAAjD,CADW;OAAZ,EAEJ,CAFI,CAAP;;;;gCAKO;aACA,KAAK6J,CAAZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAoDIqB,UAAUlL,QAAO;UACjBoF,UAAU1D,MAAV,IAAoB,CAAxB,EAA2B;sCACXwJ,QAAd,EAAyBlL,MAAzB;;;UAGImB,SAAS,KAAK0I,CAApB;;cAEQhH,SAAS1B,MAAT,KAAoB,IAAIyI,KAAJ,CAAUsB,QAAV,EAAoBrB,CAAhD,EAAmD,UAAC7J,KAAD,EAAQkL,QAAR,EAAqB;eAC/DhF,cAAP,CAAsB/E,MAAtB,EAA8B+J,QAA9B,EAAwC,EAAElL,YAAF,EAAxC;OADF;;aAIO,IAAP;;;;;;;;;;;;;;;;6BAaO;UACD4E,QAAQ,EAAd;;cAEQ,KAAKiF,CAAb,EAAgB,UAAC7J,KAAD,EAAW;cACnB8G,IAAN,CAAW9G,KAAX;OADF;;aAIOqE,IAAEO,KAAF,CAAP;;;;;;;;;;;;;;;;;;2BAeoB;UAAjBD,QAAiB,uEAAN,IAAM;;eACX,CAACA,QAAD,CAAT,EAAqB,CAAC,aAAD,CAArB,EAAsC,YAAtC;;aAEO,KAAK6H,MAAL,CAAY,UAAC7E,IAAD,EAAO3H,KAAP,EAAc+E,GAAd,EAAmB5D,MAAnB;eACjBwG,OAAOY,OAAO5D,WAAWA,SAAS3E,KAAT,EAAgB+E,GAAhB,EAAqB5D,MAArB,CAAX,GAA0CnB,KAAjD,CADU;OAAZ,EAEJ,EAFI,CAAP;;;;2BAhuCU;UACJmB,SAAS,KAAK0I,CAApB;;UAEI,CAAChH,SAAS1B,MAAT,CAAL,EAAuB;eACd,CAAP;;;aAGKK,YAAYL,MAAZ,IAAsBA,OAAOO,MAA7B,GAAsCoB,OAAO8E,IAAP,CAAYzG,MAAZ,EAAoBO,MAAjE;;;;2BAmoCgB;aACTR,YAAY,KAAK2I,CAAjB,CAAP;;;;;;;;;;;;;;;;;;;;2BAiBS;qBACK,KAAKA,CAAnB;;;;wCAzxCyBqB,UAAUlL,OAAO;UACtCoF,UAAU1D,MAAV,IAAoB,CAAxB,EAA2B;sCACXwJ,QAAd,EAAyBlL,KAAzB;;;uBAGe,IAAjB,EAAuBkL,QAAvB;;aAEO,IAAP;;;;;;;;;;;;;;;;;;;0CAgB2BA,UAAUlL,OAAO;UACxCoF,UAAU1D,MAAV,IAAoB,CAAxB,EAA2B;sCACXwJ,QAAd,EAAyBlL,KAAzB;;;uBAGe,KAAK+H,SAAtB,EAAiCmD,QAAjC;;aAEO,IAAP;;;;;;AAo0CJ/E,iBAAiByD,MAAM7B,SAAvB,qBACGtB,QAAOvF,WADV,EACwB,OADxB;;;;;;;;;AAWA,SAASuL,WAAT,CAAoBvH,MAApB,EAA4B/D,MAA5B,EAAoC;UAC1BA,MAAR,EAAgB,UAACnB,KAAD,EAAQ+E,GAAR,EAAgB;QAC1B/B,YAAYkC,OAAOH,GAAP,CAAZ,KAA4B,CAAC,GAAGC,cAAH,CAAkB3D,IAAlB,CAAuB6D,MAAvB,EAA+BH,GAA/B,CAAjC,EAAsE;aAC7DA,GAAP,IAAc+E,WAAU9J,KAAV,CAAd;;;;;QAKE,CAACgD,YAAYkC,OAAOH,GAAP,CAAZ,CAAL,EAA+B;kBAClBG,OAAOH,GAAP,CAAX,EAAwB/E,KAAxB;;GARJ;;;;;;;;;AAmBF,SAAS8J,UAAT,CAAmB3I,MAAnB,EAA2B;MACnB6I,QAAQL,cAAcxI,MAAd,EAAsB,CAACA,MAAD,EAAS,IAAT,CAAtB,CAAd;;MAEI6I,UAAU7I,MAAd,EAAsB;YACZA,MAAR,EAAgB,UAACnB,KAAD,EAAQ+E,GAAR,EAAgB;YACxBA,GAAN,IAAa+E,WAAU9J,KAAV,CAAb;KADF;;;SAKKgK,KAAP;;;;;;;;;;;AAWF,SAASO,SAAT,CAAmBmC,EAAnB,EAAuBC,EAAvB,EAA2BC,MAA3B,EAAmC;MAC7BF,OAAOC,EAAX,EAAe;WACN,IAAP;;;MAGE3K,MAAM0K,EAAN,KAAa1K,MAAM2K,EAAN,CAAb,IAA0B3J,YAAY0J,EAAZ,CAA1B,IAA6C1J,YAAY2J,EAAZ,CAAjD,EAAkE;WACzD,IAAP;;;MAGE3K,MAAM0K,EAAN,KAAa1K,MAAM2K,EAAN,CAAjB,EAA4B;WACnB,KAAP;;;MAGE3J,YAAY0J,EAAZ,KAAmB1J,YAAY2J,EAAZ,CAAvB,EAAwC;WAC/BC,SAASF,OAAOC,EAAhB,GAAqBD,MAAMC,EAAlC;;;MAGE9K,OAAO6K,EAAP,KAAc7K,OAAO8K,EAAP,CAAlB,EAA8B;WACrBD,GAAGzK,OAAH,OAAiB0K,GAAG1K,OAAH,EAAxB;;;MAGEJ,OAAO6K,EAAP,KAAc7K,OAAO8K,EAAP,CAAlB,EAA8B;WACrB,KAAP;;;MAGEvJ,SAASsJ,EAAT,KAAgBtJ,SAASuJ,EAAT,CAApB,EAAkC;WACzBD,GAAGrH,MAAH,KAAcsH,GAAGtH,MAAjB,IACLqH,GAAGtL,QAAH,GAAc8I,KAAd,CAAoB,WAApB,EAAiC,CAAjC,MAAwCyC,GAAGvL,QAAH,GAAc8I,KAAd,CAAoB,WAApB,EAAiC,CAAjC,CADnC,IAELwC,GAAGG,SAAH,KAAiBF,GAAGE,SAFtB;;;MAKEzJ,SAASsJ,EAAT,KAAgBtJ,SAASuJ,EAAT,CAApB,EAAkC;WACzB,KAAP;;;MAGG,CAAC5J,cAAc2J,EAAd,CAAD,IAAsB,CAACnL,QAAQmL,EAAR,CAAxB,IAAyC,CAAC3J,cAAc4J,EAAd,CAAD,IAAsB,CAACpL,QAAQoL,EAAR,CAApE,EAAkF;WACzE,KAAP;;;MAGIG,KAAKhK,OAAOI,cAAP,CAAsBwJ,EAAtB,CAAX;MACMK,KAAKjK,OAAOI,cAAP,CAAsBwJ,EAAtB,CAAX;;MAEI5J,OAAO8E,IAAP,CAAY8E,EAAZ,EAAgBhL,MAAhB,KAA2BoB,OAAO8E,IAAP,CAAY+E,EAAZ,EAAgBjL,MAA/C,EAAuD;WAC9C,KAAP;;;MAGEoL,MAAMC,EAAN,IAAa7L,YAAY4L,GAAG3J,WAAf,MAAgCjC,YAAY6L,GAAG5J,WAAf,CAAjD,EAA+E;WACtE,KAAP;;;SAGKuB,QAAQgI,EAAR,EAAY,UAAC1M,KAAD,EAAQ+E,GAAR,EAAgB;QAC7B,EAAEA,OAAO4H,EAAT,KAAgB,CAACpC,UAAUvK,KAAV,EAAiB2M,GAAG5H,GAAH,CAAjB,EAA0B6H,MAA1B,CAArB,EAAwD;aAC/C,KAAP;;GAFG,MAIA,KAJP;;;;;;;;;;;;;AAiBF,SAASnC,UAAT,CAAmBtJ,MAAnB,EAA2BwD,QAA3B,EAAqClB,CAArC,EAAwCsH,IAAxC,EAA8C;MACtCzC,MAAM7E,MAAM,CAAlB;;SAEOiB,QAAQvD,MAAR,EAAgB,UAACnB,KAAD,EAAQ+E,GAAR,EAAa5D,MAAb,EAAwB;QACvC6L,UAAU,CAAC,EAAEjI,QAAF,EAAO/E,YAAP,EAAD,EAAiBiN,MAAjB,CAAwBlC,IAAxB,CAAhB;;QAGEzC,OAAOtF,YAAYhD,KAAZ,CAAP,GACI,CAAC2E,SAAS3E,KAAT,EAAgB+E,GAAhB,EAAqB5D,MAArB,EAA6B6L,OAA7B,CADL,GAEI,CAACvC,WAAUzK,KAAV,EAAiB2E,QAAjB,EAA2BlB,IAAI,CAA/B,EAAkCuJ,OAAlC,CAHP,EAIE;aACO,KAAP;;GARG,MAUA,KAVP;;;;;;;;;;;;;AAuBF,SAASrC,WAAT,CAAoBxJ,MAApB,EAA4BwD,QAA5B,EAAsClB,CAAtC,EAAyCsH,IAAzC,EAA+C;MACvCnG,QAAQpD,YAAYL,MAAZ,CAAd;MACM+L,MAAMvK,MAAMxB,MAAN,CAAZ;MACM+C,IAAIU,QAAQ,EAAR,GAAasI,MAAM/L,MAAN,GAAe,EAAtC;MACMmH,MAAM7E,MAAM,CAAlB;;UAEQtC,MAAR,EAAgB,UAACnB,KAAD,EAAQ+E,GAAR,EAAa5D,MAAb,EAAwB;QAChC6L,UAAU,CAAC,EAAEjI,QAAF,EAAO/E,YAAP,EAAD,EAAiBiN,MAAjB,CAAwBlC,IAAxB,CAAhB;;QAEI,CAACzC,OAAOtF,YAAYhD,KAAZ,CAAR,KAA+B2E,SAAS3E,KAAT,EAAgB+E,GAAhB,EAAqB5D,MAArB,EAA6B6L,OAA7B,CAAnC,EAA0E;UACpEpI,KAAJ,EAAW;UACPkC,IAAF,CAAO9G,KAAP;OADF,MAEO;UACH+E,GAAF,IAAS/E,KAAT;;;;;;QAMA,CAACsI,GAAL,EAAU;UACFoC,WAAWC,YAAW3K,KAAX,EAAkB2E,QAAlB,EAA4BlB,IAAI,CAAhC,EAAmCuJ,OAAnC,CAAjB;;UAEItC,QAAJ,EAAc;YACR9F,KAAJ,EAAW;YACPkC,IAAF,CAAO4D,QAAP;SADF,MAEO;YACH3F,GAAF,IAAS2F,QAAT;;;;GApBR;;MA0BI9F,KAAJ,EAAW;WACFV,EAAExC,MAAF,GAAWwC,CAAX,GAAekC,SAAtB;;;MAGE,CAAC8G,GAAL,EAAU;WACDpK,OAAO8E,IAAP,CAAY1D,CAAZ,EAAexC,MAAf,GAAwBwC,CAAxB,GAA4BkC,SAAnC;;;SAGKlC,CAAP;;;;;;;;;;;;;AAaF,SAAS0G,SAAT,CAAkBzJ,MAAlB,EAA0BwD,QAA1B,EAAoClB,CAApC,EAAuCsH,IAAvC,EAA6C;MACrCzC,MAAM7E,MAAM,CAAlB;;SAEOiB,QAAQvD,MAAR,EAAgB,UAACnB,KAAD,EAAQ+E,GAAR,EAAa5D,MAAb,EAAwB;QACvC6L,UAAU,CAAC,EAAEjI,QAAF,EAAO/E,YAAP,EAAD,EAAiBiN,MAAjB,CAAwBlC,IAAxB,CAAhB;;QAEIzC,OAAOtF,YAAYhD,KAAZ,CAAX,EAA+B;UACzB2E,SAAS3E,KAAT,EAAgB+E,GAAhB,EAAqB5D,MAArB,EAA6B6L,OAA7B,CAAJ,EAA2C;eAClCA,OAAP;;;;;;QAMEG,SAASvC,UAAS5K,KAAT,EAAgB2E,QAAhB,EAA0BlB,IAAI,CAA9B,EAAiCuJ,OAAjC,CAAf;;QAEIG,MAAJ,EAAY;aACHA,MAAP;;GAdG,KAgBD,IAhBN;;;;;;;;;;;;AA4BF,SAASC,YAAT,CAAqBjM,MAArB,EAA6BwD,QAA7B,EAAuClB,CAAvC,EAA0CsH,IAA1C,EAAgD;MACxCzC,MAAM7E,MAAM,CAAlB;;UAEQtC,MAAR,EAAgB,UAACnB,KAAD,EAAQ+E,GAAR,EAAa5D,MAAb,EAAwB;QAChC6L,UAAU,CAAC,EAAEjI,QAAF,EAAO/E,YAAP,EAAD,EAAiBiN,MAAjB,CAAwBlC,IAAxB,CAAhB;;QAEIzC,OAAOtF,YAAYhD,KAAZ,CAAX,EAA+B;eACpBA,KAAT,EAAgB+E,GAAhB,EAAqB5D,MAArB,EAA6B6L,OAA7B;KADF,MAEO;mBACOhN,KAAZ,EAAmB2E,QAAnB,EAA6BlB,IAAI,CAAjC,EAAoCuJ,OAApC;;GANJ;;;;;;;;;;;;AAoBF,SAASK,iBAAT,CAA0BlM,MAA1B,EAAkCwD,QAAlC,EAA4ClB,CAA5C,EAA+CsH,IAA/C,EAAqD;MAC7CzC,MAAM7E,MAAM,CAAlB;;UAEQtC,MAAR,EAAgB,UAACnB,KAAD,EAAQ+E,GAAR,EAAa5D,MAAb,EAAwB;QAChC6L,UAAU,CAAC,EAAEjI,QAAF,EAAO/E,YAAP,EAAD,EAAiBiN,MAAjB,CAAwBlC,IAAxB,CAAhB;;aAES/K,KAAT,EAAgB+E,GAAhB,EAAqB5D,MAArB,EAA6B6L,OAA7B;;QAEI,CAAC1E,GAAD,IAAQ,CAACtF,YAAYhD,KAAZ,CAAb,EAAiC;wBACdA,KAAjB,EAAwB2E,QAAxB,EAAkClB,IAAI,CAAtC,EAAyCuJ,OAAzC;;GANJ;;;;;;;;;AAiBF,SAASM,WAAT,CAAoBnM,MAApB,EAA4B;SACnBoK,MAAP,CAAcpK,MAAd;UACQA,MAAR,EAAgBmM,WAAhB;;;;;;;;;;;;;AAaF,SAASzC,QAAT,CAAiB1J,MAAjB,EAAyBwD,QAAzB,EAAmClB,CAAnC,EAAsCsH,IAAtC,EAA4C;MACpC7G,IAAI1C,YAAYL,MAAZ,IAAsB,EAAtB,GAA2BwB,MAAMxB,MAAN,IAAgBA,MAAhB,GAAyB,EAA9D;MACMmH,MAAM7E,MAAM,CAAlB;;UAEQtC,MAAR,EAAgB,UAACnB,KAAD,EAAQ+E,GAAR,EAAa5D,MAAb,EAAwB;QAChC6L,UAAU,CAAC,EAAEjI,QAAF,EAAO/E,YAAP,EAAD,EAAiBiN,MAAjB,CAAwBlC,IAAxB,CAAhB;;MAEEhG,GAAF,IAASuD,OAAOtF,YAAYhD,KAAZ,CAAP,GACL2E,SAAS3E,KAAT,EAAgB+E,GAAhB,EAAqB5D,MAArB,EAA6B6L,OAA7B,CADK,GAELnC,SAAQ7K,KAAR,EAAe2E,QAAf,EAAyBlB,IAAI,CAA7B,EAAgCuJ,OAAhC,CAFJ;GAHF;;SAQO9I,CAAP;;;;;;;;;;;;;;;AAeF,SAAS8G,WAAT,CAAoB7J,MAApB,EAA4BwD,QAA5B,EAAsClB,CAAtC,EAAyC2E,KAAzC,EAAgD0C,EAAhD,EAAoDC,IAApD,EAA0D;MAClDzC,MAAM7E,MAAM,CAAlB;;UAEQtC,MAAR,EAAgB,UAACnB,KAAD,EAAQ+E,GAAR,EAAa5D,MAAb,EAAwB;QAClC,CAAC2J,EAAD,KAAQxC,OAAOtF,YAAYhD,KAAZ,CAAf,KAAsC,CAACoI,KAA3C,EAAkD;WAC3C,EAAE0C,IAAI9K,KAAN,EAAL;cACQ,IAAR;;;;;QAKIgN,UAAU,CAAC,EAAEjI,QAAF,EAAO/E,YAAP,EAAD,EAAiBiN,MAAjB,CAAwBlC,IAAxB,CAAhB;;SAEKzC,OAAOtF,YAAYhD,KAAZ,CAAP,GACD,EAAE8K,IAAInG,SAASmG,GAAGA,EAAZ,EAAgB9K,KAAhB,EAAuB+E,GAAvB,EAA4B5D,MAA5B,EAAoC6L,OAApC,CAAN,EADC,GAEDhC,YAAWhL,KAAX,EAAkB2E,QAAlB,EAA4BlB,IAAI,CAAhC,EAAmC2E,KAAnC,EAA0C0C,EAA1C,EAA8CkC,OAA9C,CAFJ;GAVF;;SAeOlC,EAAP;;;;;;;;;;;;;AAaF,SAASG,SAAT,CAAkB9J,MAAlB,EAA0BwD,QAA1B,EAAoClB,CAApC,EAAuCsH,IAAvC,EAA6C;MACrCzC,MAAM7E,MAAM,CAAlB;;SAEOiB,QAAQvD,MAAR,EAAgB,UAACnB,KAAD,EAAQ+E,GAAR,EAAa5D,MAAb,EAAwB;QACvC6L,UAAU,CAAC,EAAEjI,QAAF,EAAO/E,YAAP,EAAD,EAAiBiN,MAAjB,CAAwBlC,IAAxB,CAAhB;;QAGEzC,OAAOtF,YAAYhD,KAAZ,CAAP,GACI2E,SAAS3E,KAAT,EAAgB+E,GAAhB,EAAqB5D,MAArB,EAA6B6L,OAA7B,CADJ,GAEI/B,UAASjL,KAAT,EAAgB2E,QAAhB,EAA0BlB,IAAI,CAA9B,EAAiCuJ,OAAjC,CAHN,EAIE;aACO,IAAP;;GARG,KAUD,KAVN;;;AAaFrM,aAAa,CAAb,EAAgBmG,IAAhB,CAAqB;SACZ;WAAM,IAAN;GADY;OAEd8C;CAFP,EAKA;;ACp2DA;;;;;;;AAOA,AAEA;;;;;;;;;;;;;;;;;;;AAmBA,IAAM2D,SAAS,EAAf;AACA,IAAMC,WAAW/G,QAAO+G,QAAxB;;;;;;;;;;;;;;;;;;IAiBMC;mBAIQC,QAAZ,EAAsB;;;QAChB,CAACjM,WAAWiM,QAAX,CAAL,EAA2B;YACnB,IAAI7J,SAAJ,uBAAmC,GAAGzC,QAAH,CAAYC,IAAZ,CAAiBqM,QAAjB,CAAnC,wBAAN;;;QAGEC,qBAAJ;QACIC,oBAAJ;;QAEMC,YAAY,EAAlB;QACMC,WAAW,EAAjB;QACMC,cAAc,IAApB;QACMC,gBAAgB;eACX,KADW;UAEhBC,MAAJ,GAAa;eACJN,YAAP;OAHkB;UAKhBM,MAAJ,CAAWjO,KAAX,EAAkB;uBACDA,KAAf;oBACYiO,MAAZ,GAAqBjO,KAArB;OAPkB;UAShBA,KAAJ,GAAY;eACH4N,WAAP;OAVkB;UAYhB5N,KAAJ,CAAUoJ,GAAV,EAAe;sBACCA,GAAd;oBACYpJ,KAAZ,GAAoBoJ,GAApB;;KAdJ;;kBAkBc6E,MAAd,GAAuB,SAAvB;kBACcjO,KAAd,GAAsBoG,SAAtB;;;;;;;;;;;;;;;;;;;;;;;;;qBAyBiB,KAAKsB,EAAL,GAAU,EAA3B,EAA+B;yBACV;WAAA,oBACX;iBACGsG,cAAcE,OAArB;SAFe;WAAA,kBAIbnJ,GAJa,EAIR;cACHA,QAAQwI,MAAZ,EAAoB;0BACJW,OAAd,GAAwB,IAAxB;;;OAPuB;YAAA,kBAWtBD,MAXsB,EAWdjK,CAXc,EAWXmK,OAXW,EAWFC,MAXE,EAWMrJ,GAXN,EAWW;YAClCA,QAAQwI,MAAZ,EAAoB;cACZc,QAAQ5M,WAAWuC,CAAX,IAAgB,UAAChE,KAAD,EAAW;gBACnC;sBACMgE,EAAEhE,KAAF,CAAR;aADF,CAEE,OAAO6F,GAAP,EAAY;qBACLA,GAAP;;WAJU,GAMV,IANJ;;cAQIoI,WAAW,SAAf,EAA0B;sBACdnH,IAAV,CAAeuH,SAAU,UAACrO,KAAD;qBAAWmO,QAAQnO,KAAR,CAAX;aAAzB;WADF,MAEO,IAAIiO,WAAW,QAAf,EAAyB;qBACrBnH,IAAT,CAAcuH,SAAU,UAACxI,GAAD;qBAASuI,OAAOvI,GAAP,CAAT;aAAxB;;;OAxBuB;kBAAA,uBA4Bd;eACNmI,cAAcC,MAArB;OA7B2B;iBAAA,sBA+Bf;eACLD,cAAchO,KAArB;;KAhCJ;;QAoCI;eACOmO,OAAT,EAAkBC,MAAlB;KADF,CAEE,OAAOvI,GAAP,EAAY;aACLA,GAAP;;;aAGOuI,MAAT,CAAgBvI,GAAhB,EAAqB;UACfmI,cAAcC,MAAd,KAAyB,SAA7B,EAAwC;sBACxBA,MAAd,GAAuB,UAAvB;sBACcjO,KAAd,GAAsB6F,GAAtB;;aAEK,IAAI5B,IAAI,CAAR,EAAWvC,SAASoM,SAASpM,MAAlC,EAA0CuC,IAAIvC,MAA9C,EAAsDuC,GAAtD,EAA2D;wBAC3CiK,OAAd,GAAwB,IAAxB;;mBAESjK,CAAT,EAAY4B,GAAZ;;;YAIAyI,oBAXoC,GAalCb,OAbkC,CAWpCa,oBAXoC;YAYpCC,OAZoC,GAalCd,OAbkC,CAYpCc,OAZoC;;;YAelC9M,WAAW8M,OAAX,CAAJ,EAAyB;kBACf1I,GAAR;;;mBAGS,YAAM;cACX,CAACmI,cAAcE,OAAf,IAA0BzM,WAAW6M,oBAAX,CAA9B,EAAgE;iCACzCzI,GAArB;;SAFJ,EAIG,CAJH;;;;aAQKsI,OAAT,CAAiBnO,KAAjB,EAAwB;UAClBgO,cAAcC,MAAd,KAAyB,SAA7B,EAAwC;YAClCjO,SAASyB,WAAWzB,MAAMwO,IAAjB,CAAb,EAAqC;iBAC5BxO,MAAMwO,IAAN,CAAW,UAACxO,KAAD,EAAW;oBACnBA,KAAR;WADK,EAEJ,UAAC6F,GAAD,EAAS;mBACHA,GAAP;WAHK,CAAP;;;sBAOYoI,MAAd,GAAuB,WAAvB;sBACcjO,KAAd,GAAsBA,KAAtB;;aAEK,IAAIiE,IAAI,CAAR,EAAWvC,SAASmM,UAAUnM,MAAnC,EAA2CuC,IAAIvC,MAA/C,EAAuDuC,GAAvD,EAA4D;wBAC5CiK,OAAd,GAAwB,IAAxB;;oBAEUjK,CAAV,EAAajE,KAAb;;;;;;;;;;;;;;;;;4BAiIA;;;;;;;;;;;2BAQFyO,YAAY;aACT,KAAKD,IAAL,CAAU,IAAV,EAAgBC,UAAhB,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;;6BAuBMC,uBAAuB;UACvBC,SAASlN,WAAWiN,qBAAX,CAAf;;aAEO,KAAKF,IAAL,CAAU,UAACxO,KAAD;eACfyN,QACGU,OADH,CAEIQ,SACID,sBAAsB1O,KAAtB,EAA6B,IAA7B,CADJ,GAEI,CAJR,EAMGwO,IANH,CAMQ;iBAAMxO,KAAN;SANR,CADe;OAAV,EAQJ,UAAC6F,GAAD;eACD4H,QACGU,OADH,CAEIQ,SACID,sBAAsB7I,GAAtB,EAA2B,KAA3B,CADJ,GAEI,CAJR,EAMG2I,IANH,CAMQ;iBAAMf,QAAQW,MAAR,CAAevI,GAAf,CAAN;SANR,CADC;OARI,CAAP;;;;;;;;;;;;;yBA0BG+I,aAAaH,YAAY;UACtBI,UAAU,KAAKnH,EAArB;;UAEImH,QAAQZ,MAAR,KAAmB,SAAvB,EAAkC;eACzB,IAAIR,OAAJ,CAAY,UAACU,OAAD,EAAUC,MAAV,EAAqB;kBAC9BU,MAAR,CAAe,QAAf,EAAyBL,UAAzB,EAAqCN,OAArC,EAA8CC,MAA9C,EAAsDb,MAAtD;kBACQuB,MAAR,CAAe,SAAf,EAA0BF,WAA1B,EAAuCT,OAAvC,EAAgDC,MAAhD,EAAwDb,MAAxD;SAFK,CAAP;;;cAMMW,OAAR,GAAkBX,MAAlB;;UAEQvN,KAZoB,GAYV6O,OAZU,CAYpB7O,KAZoB;;;UAcxB+O,eAAJ;UACIC,gBAAJ;;UAEIH,QAAQZ,MAAR,KAAmB,WAAvB,EAAoC;iBACzB,SAAT;kBACUW,WAAV;OAFF,MAGO;iBACI,QAAT;kBACUH,UAAV;;;UAGE,CAAChN,WAAWuN,OAAX,CAAL,EAA0B;eACjBvB,QAAQsB,MAAR,EAAgB/O,KAAhB,CAAP;;;UAGE;eACKyN,QAAQU,OAAR,CAAgBa,QAAQhP,KAAR,CAAhB,CAAP;OADF,CAEE,OAAO6F,GAAP,EAAY;eACL4H,QAAQW,MAAR,CAAevI,GAAf,CAAP;;;;;wBAjNOoJ,UAAU;UACbrK,QAAQ,EAAd;;UAEIsK,YAAY,CAAhB;;UAEID,SAASzB,QAAT,CAAJ,EAAwB;mBACXyB,SAASzB,QAAT,GAAX;;eAEO,IAAIC,OAAJ,CAAY,UAACU,OAAD,EAAUC,MAAV,EAAqB;cAClCe,aAAJ;cACIlL,IAAI,CAAR;;;gBAGQ4K,UAAUpB,QAAQU,OAAR,CAAgBgB,KAAKnP,KAArB,CAAhB;;;;aAIC,UAACiE,CAAD,EAAO;sBACEuK,IAAR,CAAa,UAACxO,KAAD,EAAW;;sBAEhBiE,CAAN,IAAWjE,KAAX;;2BAEW,YAAM;sBACXmP,KAAKC,IAAL,IAAa,CAACF,SAAlB,EAA6B;4BACnBtK,KAAR;;iBAFJ,EAIG,CAJH;eAJF,EASGwJ,MATH;aADF,EAWGnK,GAXH;;;iBALK,CAAC,CAACkL,OAAOF,SAASE,IAAT,EAAR,EAAyBC,IAAjC,EAAuC;;;;cAmBnC,CAACnL,CAAL,EAAQ;mBACCwJ,QAAQU,OAAR,CAAgB,EAAhB,CAAP;;SAxBG,CAAP;;;UA6BIzM,SAASuN,SAASvN,MAAxB;;UAEI,CAACA,MAAL,EAAa;eACJ+L,QAAQU,OAAR,CAAgB,EAAhB,CAAP;;;kBAGUzM,MAAZ;;aAEO,IAAI+L,OAAJ,CAAY,UAACU,OAAD,EAAUC,MAAV,EAAqB;qCAC7BnK,CAD6B;cAE9B4K,UAAUpB,QAAQU,OAAR,CAAgBc,SAAShL,CAAT,CAAhB,CAAhB;;kBAEQuK,IAAR,CAAa,UAACxO,KAAD,EAAW;;kBAEhBiE,CAAN,IAAWjE,KAAX;;gBAEI,CAACkP,SAAL,EAAgB;sBACNtK,KAAR;;WALJ,EAOGwJ,MAPH;;;aAHG,IAAInK,IAAI,CAAb,EAAgBA,IAAIvC,MAApB,EAA4BuC,GAA5B,EAAiC;iBAAxBA,CAAwB;;OAD5B,CAAP;;;;;;;;;;;;;yBAuBUgL,UAAU;UAChBA,SAASzB,QAAT,CAAJ,EAAwB;mBACXyB,SAASzB,QAAT,GAAX;;eAEO,IAAIC,OAAJ,CAAY,UAACU,OAAD,EAAUC,MAAV,EAAqB;cAClCe,aAAJ;;iBAEO,CAAC,CAACA,OAAOF,SAASE,IAAT,EAAR,EAAyBC,IAAjC,EAAuC;iBAChCpP,KAAL,CAAWwO,IAAX,CAAgBL,OAAhB,EAAyBC,MAAzB;;SAJG,CAAP;;;aASK,IAAIX,OAAJ,CAAY,UAACU,OAAD,EAAUC,MAAV,EAAqB;aACjC,IAAInK,IAAI,CAAR,EAAWvC,SAASuN,SAASvN,MAAlC,EAA0CuC,IAAIvC,MAA9C,EAAsDuC,GAAtD,EAA2D;mBAChDA,CAAT,EAAYuK,IAAZ,CAAiBL,OAAjB,EAA0BC,MAA1B;;OAFG,CAAP;;;;;;;;;;;;2BAaYpO,OAAO;aACZ,IAAIyN,OAAJ,CAAY,UAACU,OAAD,EAAUC,MAAV,EAAqB;eAC/BpO,KAAP;OADK,CAAP;;;;;;;;;;;;4BAWaA,OAAO;UAChBA,SAASyB,WAAWzB,MAAMwO,IAAjB,CAAb,EAAqC;eAC5BxO,KAAP;;;aAGK,IAAIyN,OAAJ,CAAY,UAACU,OAAD,EAAa;gBACtBnO,KAAR;OADK,CAAP;;;;;;AA7QEyN,UACGc,UAAU;AADbd,UAEGa,uBAAuBe,QAAQhI,KAAR,CAAciI,IAAd,CAAmBD,OAAnB,EAA4B,OAA5B,EAAqC,uBAArC;;;AAkXhClJ,iBAAiBsH,UAAQ1F,SAAzB,qBACGtB,QAAOvF,WADV,EACwB,SADxB,GAIA;;ACtaA;;;;;;;AAOA,AACA,AACA,AACA,AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA2BMqO;;;kBACyB;;;QAAjB7J,IAAiB,uEAAV,YAAM,EAAI;;;;;aAGlB2I,KAAT,GAAiB;UACX,EAAEA,MAAM3G,EAAN,CAAS8H,MAAX,GAAoBnB,MAAM3G,EAAN,CAAS+H,WAAjC,EAA8C;wBACGpB,MAAM3G,EADT;YACpCgI,MADoC,aACpCA,MADoC;YAC5BC,KAD4B,aAC5BA,KAD4B;YACrBC,IADqB,aACrBA,IADqB;YACfC,aADe,aACfA,aADe;yBAEpBxB,MAAM3G,EAFc;YAEtCoI,OAFsC,cAEtCA,OAFsC;YAE7B7I,IAF6B,cAE7BA,IAF6B;;YAGxCkC,YAAJ;;kBAEU0G,gBAAgBC,OAAhB,GAA0BA,WAAW,IAA/C;eACO7I,KAAKgG,MAAL,CAAYrG,UAAQxB,SAAR,CAAZ,CAAP;;YAEIwK,IAAJ,EAAU;kBACAF,MAAR,EAAgB,UAACK,UAAD,EAAgB;mBACvBA,WAAW1O,IAAX,CAAgByO,OAAhB,EAAyBlJ,UAAQK,IAAR,CAAzB,EAAwCoH,KAAxC,CAAP;WADF;;gBAIM3I,KAAK2D,KAAL,CAAWyG,OAAX,EAAoBlJ,UAAQK,IAAR,CAApB,CAAN;;kBAEQ0I,KAAR,EAAe,UAACI,UAAD,EAAgB;kBACvBA,WAAW1O,IAAX,CAAgByO,OAAhB,EAAyB3G,GAAzB,EAA8BkF,KAA9B,CAAN;WADF;;iBAIOlF,GAAP;;;YAGE0F,UAAUpB,UAAQU,OAAR,CAAgBlH,IAAhB,CAAd;;gBAEQyI,MAAR,EAAgB,UAACK,UAAD,EAAgB;oBACpBlB,QAAQL,IAAR,CAAa,UAACvH,IAAD;mBAAU8I,WAAW1O,IAAX,CAAgByO,OAAhB,EAAyBlJ,UAAQK,IAAR,CAAzB,EAAwCoH,KAAxC,CAAV;WAAb,CAAV;SADF;;kBAIUQ,QAAQL,IAAR,CAAa,UAACvH,IAAD;iBAAUvB,KAAK2D,KAAL,CAAWyG,OAAX,EAAoBlJ,UAAQK,IAAR,CAApB,CAAV;SAAb,CAAV;;gBAEQ0I,KAAR,EAAe,UAACI,UAAD,EAAgB;oBACnBlB,QAAQL,IAAR,CAAa,UAACrF,GAAD;mBAAS4G,WAAW1O,IAAX,CAAgByO,OAAhB,EAAyB3G,GAAzB,EAA8BkF,KAA9B,CAAT;WAAb,CAAV;SADF;;eAIOQ,OAAP;;;;;;;;;;;;;;;;;;;WAmBG3I,cAAP,CAAsBmI,KAAtB,EAA6B,IAA7B,EAAmC;aAC1B;eACE,EADF;cAEC,EAFD;oBAGO,EAHP;gBAIG,EAJH;gBAKG,CALH;qBAMQ9L,QANR;iBAOI,IAPJ;uBAQU,KARV;cASC;;KAVV;;;;;;;;WAoBO2D,cAAP,CAAsBmI,KAAtB,EAA6B,GAA7B,EAAkC,EAAErO,OAAO0F,IAAT,EAAlC;WACO4D,cAAP,CAAsB+E,KAAtB,EAA6BkB,KAAKxH,SAAlC;;kBAEOsG,KAAP;;;;;;;;;;;;;;;;;;;;;;;0BAmBI0B,YAA6B;UAAjBC,QAAiB,uEAAN,IAAM;;eACxB,CAACD,UAAD,CAAT,EAAuB,CAAC,UAAD,CAAvB,EAAqC,YAArC;;UAEQJ,KAHyB,GAGf,KAAKjI,EAHU,CAGzBiI,KAHyB;;;UAK7BK,QAAJ,EAAc;cACNlJ,IAAN,CAAWiJ,UAAX;OADF,MAEO;cACCnE,OAAN,CAAcmE,UAAd;;;aAGK,IAAP;;;;;;;;;;;;;;;;0BAaID,SAAS7I,MAAM;aACX,YAAM,EAAP,CAAWoC,KAAX,CAAiBA,KAAjB,CAAuB,IAAvB,EAA6BjE,SAA7B,CAAP;;;;;;;;;;;;;;;;;;;;4BAiBsB;UAAlBoE,SAAkB,uEAAN,IAAM;;WACjB9B,EAAL,CAAQkI,IAAR,GAAe,CAACpG,SAAhB;;aAEO,IAAP;;;;;;;;;;;;;;;;;;;;;;2BAmBKuG,YAA8B;UAAlBE,SAAkB,uEAAN,IAAM;;eAC1B,CAACF,UAAD,CAAT,EAAuB,CAAC,UAAD,CAAvB,EAAqC,aAArC;;UAEQL,MAH2B,GAGhB,KAAKhI,EAHW,CAG3BgI,MAH2B;;;UAK/BO,SAAJ,EAAe;eACNrE,OAAP,CAAemE,UAAf;OADF,MAEO;eACEjJ,IAAP,CAAYiJ,UAAZ;;;aAGK,IAAP;;;;;;;;;;;;;;;;;;;;;;yBAmBGD,SAAkB;wCAAN7I,IAAM;YAAA;;;aACd,KACJiJ,WADI,CACQJ,OADR,EAEJK,QAFI,CAEKlJ,IAFL,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAiCOA,MAAM;UACPvB,OAAO,KAAKgC,EAAlB;;WAEKT,IAAL,GAAYvB,KAAKuB,IAAL,CAAUgG,MAAV,CAAiBrG,UAAQK,IAAR,CAAjB,CAAZ;;aAEO,IAAP;;;;;;;;;;;;;;;;;;;;;;;;gCAqBU6I,SAAS;UACbpK,OAAO,KAAKgC,EAAlB;;UAEI,CAAChC,KAAKmK,aAAV,EAAyB;aAClBC,OAAL,GAAeA,OAAf;;;aAGK,IAAP;;;;;;;;;;;;;;;;yBAaGA,SAAkB;yCAAN7I,IAAM;YAAA;;;aACb,YAAM,EAAP,CAAW5F,IAAX,CAAgBgI,KAAhB,CAAsB,IAAtB,EAA4BjE,SAA5B,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gCAmCUgL,OAAO;WACZ1I,EAAL,CAAQ+H,WAAR,GAAsBW,KAAtB;;aAEO,IAAP;;;;;;;;;;;;;;;;;;;;;;;gCAoBUjJ,QAAQ;aACX,KAAKuI,MAAL,CAAY,UAACzI,IAAD;eAAUA,KAAKoJ,KAAL,CAAW,CAAX,EAAclJ,MAAd,CAAV;OAAZ,EAA6C,KAA7C,CAAP;;;;;;;;;;;;;;;;;;;;;;yBAmBG2I,SAAS7I,MAAM;aACX,KACJqJ,WADI,CACQR,OADR,EAEJS,QAFI,CAEKtJ,IAFL,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAkCOA,MAAM;UACPvB,OAAO,KAAKgC,EAAlB;;WAEKT,IAAL,GAAYvB,KAAK8K,UAAL,GAAkB9K,KAAK8K,UAAL,CAAgBvD,MAAhB,CAAuBrG,UAAQK,IAAR,CAAvB,CAA9B;;aAEO,IAAP;;;;;;;;;;;;;;;;;;;;;;;;gCAqBU6I,SAAS;UACbpK,OAAO,KAAKgC,EAAlB;;UAEI,CAAChC,KAAKmK,aAAV,EAAyB;aAClBC,OAAL,GAAeA,OAAf;aACKD,aAAL,GAAqB,IAArB;;;aAGK,IAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2BA4BKY,MAAM;aACJrL,UAAU1D,MAAV,GAAmB6G,OAAOkI,IAAP,CAAnB,GAAkC,KAAK5G,CAAL,CAAO1J,IAAP,IAAe,WAAxD;;WAEKuP,MAAL,CAAY,UAACzI,IAAD,EAAU;gBACZyJ,IAAR,CAAaD,IAAb;;eAEOxJ,IAAP;OAHF,EAIG,KAJH;;WAMK0I,KAAL,CAAW,UAACxG,GAAD,EAAS;gBACVwH,OAAR,CAAgBF,IAAhB;;eAEOtH,GAAP;OAHF,EAIG,KAJH;;aAMO,IAAP;;;;+BAGS;aACD,YAAM,EAAP,CAAW/H,QAAX,CAAoBC,IAApB,CAAyB,KAAKwI,CAA9B,CAAP;;;;;;;;;;;;;;;;;;;;;;;6BAoBO;aACA,KACJ+G,aADI,GAEJC,UAFI,EAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iCA4BW;UACLnL,OAAO,KAAKgC,EAAlB;;WAEKT,IAAL,GAAYvB,KAAK8K,UAAjB;;aAEO,IAAP;;;;;;;;;;;;;;;;;;;;;;;oCAoBc;UACR9K,OAAO,KAAKgC,EAAlB;;UAEI,CAAChC,KAAKmK,aAAV,EAAyB;aAClBC,OAAL,GAAe,IAAf;;;aAGK,IAAP;;;;2BAlQW;aACJ,KAAKpI,EAAL,CAAQ8H,MAAf;;;;EArSe5F;;AA0iBnBzD,iBAAiBoJ,KAAKxH,SAAtB,qBACGtB,QAAOvF,WADV,EACwB,MADxB;;AAIAP,aAAa,CAAb,EAAgBmG,IAAhB,CAAqB;SACZrF,UADY;OAEd8N;CAFP;;;;;;;;;;;;;;AAiBA,SAASR,MAAT,CAAgBA,MAAhB,EAAmC;MAAX9H,IAAW,uEAAJ,EAAI;;SAC1B,UAAC6J,CAAD;WAAOA,EAAE/B,MAAF,EAAU1F,KAAV,CAAgByH,CAAhB,EAAmBlK,UAAQK,IAAR,CAAnB,CAAP;GAAP;;;;;;;;;AASF,SAAS8J,IAAT,GAAgB;;;;;;;;;;;;AAYhB,SAAS9Q,IAAT,CAAcA,IAAd,EAAoB;SACX;QAAWD,KAAX,QAAIC,IAAJ;WAAuBD,KAAvB;GAAP;;;;;;;;;;;;;AAaF,SAASP,MAAT,GAAgB;SACP2F,UAAU,CAAV,CAAP;CAGF;;AC9oBA;;;;;;;AAOA,AACA,AACA,AACA,AACA,AAKA,IAAM4L,WAAWtK,KAAKuK,EAAL,GAAU,GAA3B;AACA,IAAMC,WAAW,MAAMxK,KAAKuK,EAA5B;AACA,IAAME,MAAMzK,KAAK0K,GAAjB;AACA,IAAMC,OAAO3K,KAAK4K,IAAlB;;;;;;;;;;;;;;IAaMC;;;iBACoB;QAAZpK,MAAY,uEAAH,CAAG;;oGAChB,CAACA,MADe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yBAqCnBqK,WAAW;aACP,CAACA,YAAYN,QAAZ,GAAuB,CAAxB,IAA6BxK,KAAK+K,IAAL,CAAU,KAAK5H,CAAf,CAApC;;;;;;;;;;;;;;;;;;;;;;;;;;yBA0CG2H,WAAW;aACP,CAACA,YAAYN,QAAZ,GAAuB,CAAxB,IAA6BxK,KAAKgL,IAAL,CAAU,KAAK7H,CAAf,CAApC;;;;;;;;;;;;;;;yBAYG2H,WAAW;aACP,CAACA,YAAYN,QAAZ,GAAuB,CAAxB,IAA6BxK,KAAKiL,IAAL,CAAU,KAAK9H,CAAf,CAApC;;;;;;;;;;;;;;;;;;;;;;;;;;wBA2DE+H,WAAW;aACNlL,KAAKmL,GAAL,CAAS,CAACD,YAAYZ,QAAZ,GAAuB,CAAxB,IAA6B,KAAKnH,CAA3C,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAkFOnE,MAAiB;UAAXuB,IAAW,uEAAJ,EAAI;;eACf,CAACvB,IAAD,CAAT,EAAiB,CAAC,UAAD,CAAjB,EAA+B,cAA/B;;aAEO,IAAI6J,IAAJ,CAAS7J,IAAT,EAAewK,WAAf,CAA2B,EAAE4B,YAAF,EAA3B,CAAP;aACOlL,UAAQK,IAAR,CAAP;;UAEME,SAAS,KAAK0C,CAApB;;UAEIkI,gBAAJ;UACIC,UAAUC,WAAW,SAASC,QAAT,GAAoB;YACvC,CAACH,OAAL,EAAc;eACP1I,KAAL,CAAW,IAAX,EAAiBpC,IAAjB;;cAEI,CAAC8K,OAAL,EAAc;sBACFE,WAAWC,QAAX,EAAqB/K,MAArB,CAAV;;;OALQ,EAQX,CARW,CAAd;;aAUO2K,KAAP;;eAESA,KAAT,GAAiB;kBACL,IAAV;;eAEOK,aAAaH,OAAb,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wBA4BA7K,QAAQ;aACHT,KAAK0L,GAAL,CAASjL,MAAT,IAAmBT,KAAK0L,GAAL,CAAS,KAAKvI,CAAd,CAA1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wBA0CEwI,OAAO;aACF3L,KAAK4L,GAAL,CAAS,KAAKzI,CAAd,EAAiBwI,KAAjB,CAAP;;;;;;;;;;;;;;;;;yBAcGA,OAAO;aACH3L,KAAK4L,GAAL,CAAS,KAAKzI,CAAd,EAAiB,IAAIwI,KAArB,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wBAiDET,WAAW;aACNlL,KAAK6L,GAAL,CAAS,CAACX,YAAYZ,QAAZ,GAAuB,CAAxB,IAA6B,KAAKnH,CAA3C,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;;wBAuDE+H,WAAW;aACNlL,KAAK8L,GAAL,CAAS,CAACZ,YAAYZ,QAAZ,GAAuB,CAAxB,IAA6B,KAAKnH,CAA3C,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BAyCM7J,OAAO;;;UACTgS,gBAAJ;UACI5D,eAAJ;;UAEMS,UAAU,IAAIpB,SAAJ,CAAY,UAACU,OAAD,EAAUsE,GAAV,EAAkB;iBACnCA,GAAT;kBACUR,WAAW9D,OAAX,EAAoB,OAAKtE,CAAzB,EAA4B7J,KAA5B,CAAV;OAFc,CAAhB;;cAKQ8R,KAAR,GAAgB,SAASA,KAAT,GAAiB;qBAClBE,OAAb;;eAEO,IAAIlM,KAAJ,CAAU,qBAAV,CAAP;;eAEO,IAAP;OALF;;aAQO+I,OAAP;;;;;;;;;;;;;;;;;;;6BAgBgB;UAAX6D,IAAW,uEAAJ,EAAI;;aACT,KAAK7I,CAAL,CAAOzI,QAAP,CAAgBsR,IAAhB,CAAP;;;;;;;;;;;;;;;kCAYYC,gBAAgB;aACrB,KAAK9I,CAAL,CAAO+I,aAAP,CAAqBD,cAArB,CAAP;;;;;;;;;;;;;;;4BAYME,QAAQ;aACP,KAAKhJ,CAAL,CAAOiJ,OAAP,CAAeD,MAAf,CAAP;;;;;;;;;;;;;;;gCAYUE,WAAW;aACd,KAAKlJ,CAAL,CAAOmJ,WAAP,CAAmBD,SAAnB,CAAP;;;;8BAGQ;aACDzQ,OAAO,KAAKuH,CAAZ,CAAP;;;;2BAniBQ;aACDnD,KAAKuM,GAAL,CAAS,KAAKpJ,CAAd,CAAP;;;;2BAyBU;UACJ1C,SAAS,KAAK0C,CAApB;;aAEOnD,KAAK0L,GAAL,CAASjL,SAAST,KAAKwM,IAAL,CAAU/L,SAASA,MAAT,GAAkB,CAA5B,CAAlB,CAAP;;;;;;;;;;;;;;;2BAYU;UACJA,SAAS,KAAK0C,CAApB;;aAEOnD,KAAK0L,GAAL,CAASjL,SAAST,KAAKwM,IAAL,CAAU/L,SAASA,MAAT,GAAkB,CAA5B,CAAlB,CAAP;;;;2BAsCU;UACJA,SAAS,KAAK0C,CAApB;;aAEOnD,KAAK0L,GAAL,CAAS,CAAC,IAAIjL,MAAL,KAAgB,IAAIA,MAApB,CAAT,IAAwC,CAA/C;;;;;;;;;;;;;;;2BAYS;UACHgM,OAAOzM,KAAK4L,GAAL,CAAS5L,KAAKuM,GAAL,CAAS,KAAKpJ,CAAd,CAAT,EAA2B,IAAI,CAA/B,CAAb;;aAEO,KAAKA,CAAL,GAAS,CAAT,GAAasJ,IAAb,GAAoB,CAACA,IAA5B;;;;;;;;;;;;;;;;;;;2BAgBS;aACFzM,KAAK0M,IAAL,CAAU,KAAKvJ,CAAf,CAAP;;;;2BAyBS;UACHwJ,MAAM,KAAKA,GAAjB;;aAEO,CAACA,MAAM,IAAIA,GAAX,IAAkB,CAAzB;;;;;;;;;;;;;;;;;2BAcS;aACF,KAAKxJ,CAAL,GAAS,KAAKA,CAAd,GAAkB,KAAKA,CAA9B;;;;;;;;;;;;;;;2BAYQ;aACDnD,KAAK2M,GAAL,CAAS,KAAKxJ,CAAd,CAAP;;;;;;;;;;;;;;;;;;;2BAgBU;aACHnD,KAAKoB,KAAL,CAAW,KAAK+B,CAAhB,CAAP;;;;2BA2DO;aACAnD,KAAK0L,GAAL,CAAS,KAAKvI,CAAd,CAAP;;;;2BA2BS;aACF,KAAKyJ,EAAL,GAAUnC,GAAjB;;;;;;;;;;;;;;;2BAYU;aACH,KAAKmC,EAAL,GAAUjC,IAAjB;;;;2BAiDU;aACH3K,KAAK6M,KAAL,CAAW,KAAK1J,CAAhB,CAAP;;;;;;;;;;;;;;;2BAYS;UACH1C,SAAS,KAAK0C,CAApB;;UAEI,CAAC1C,MAAL,EAAa;eACJA,MAAP;;;aAGKA,SAAS,CAAT,GAAa,CAAb,GAAiB,CAAC,CAAzB;;;;2BAyBS;UACHkM,MAAM,KAAKA,GAAjB;;aAEO,CAACA,MAAM,IAAIA,GAAX,IAAkB,CAAzB;;;;;;;;;;;;;;;;;2BAcO;aACA,KAAKxJ,CAAL,GAAS,KAAKA,CAArB;;;;;;;;;;;;;;;2BAYS;aACFnD,KAAKwM,IAAL,CAAU,KAAKrJ,CAAf,CAAP;;;;2BAyBS;UACH1C,SAAS,KAAK0C,CAApB;;UAEI,CAACzH,SAAS+E,MAAT,CAAL,EAAuB;eACd,KAAKqM,IAAZ;;;UAGIH,MAAM3M,KAAK2M,GAAL,CAAS,IAAIlM,MAAb,CAAZ;;aAEO,CAACkM,MAAM,CAAP,KAAaA,MAAM,CAAnB,CAAP;;;;EA3dczJ;;AAgkBlBzD,iBAAiBoL,IAAIxJ,SAArB,qBACGtB,QAAOvF,WADV,EACwB,KADxB;;AAIAP,aAAa,CAAb,EAAgBmG,IAAhB,CAAqB;SACZzE,QADY;OAEdkP;CAFP;;;;;;;;;;;;;;AAiBA,SAASkC,IAAT,GAAkC;MAApBrL,KAAoB,uEAAZ,CAAY;MAATE,GAAS,uEAAH,CAAG;;SACzBF,QAAQ,CAACE,MAAMF,KAAP,IAAgB1B,KAAKC,MAAL,EAA/B;;;;;;;;;;;;;;;AAeF,SAASA,MAAT,CAAgByB,KAAhB,EAAuBE,GAAvB,EAA4B;WACjB,CAACF,KAAD,EAAQE,GAAR,CAAT,EAAuB,CAAC,SAAD,EAAY,SAAZ,CAAvB,EAA+C,QAA/C;;MAEIA,OAAOF,KAAX,EAAkB;UACV,IAAItC,KAAJ,CAAU,qDAAV,EAAiE,QAAjE,CAAN;;;SAGKY,KAAKoB,KAAL,CAAW2L,KAAKrL,KAAL,EAAYE,MAAM,CAAlB,CAAX,CAAP;CAGF;;AC/oBA;;;;;;;AAOA,AACA,AACA,AACA,AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAoCMoL;;;iBACoB;QAAZ9O,KAAY,uEAAJ,EAAI;;oGAChBgC,UAAQhC,iBAAiB8O,GAAjB,GAAuB9O,MAAMiF,CAA7B,GAAiCjF,KAAzC,CADgB;;;;;;;;;;;;;;;;;;;;;;;6BAoBN;wCAAR+O,MAAQ;cAAA;;;UACV/O,QAAQgC,UAAQ,KAAKiD,CAAb,EAAgB,IAAhB,CAAd;;cAESzE,SAAT,EAAoB,UAACpF,KAAD,EAAW;gBACrB,IAAI4J,KAAJ,CAAU5J,KAAV,EAAiB6J,CAAzB;;YAEIrI,YAAYxB,KAAZ,KAAsB,CAACqD,SAASrD,KAAT,CAA3B,EAA4C;kBACjCA,KAAT,EAAgB,UAACA,KAAD,EAAW;kBACnB8G,IAAN,CAAW9G,KAAX;WADF;;;;;cAOI8G,IAAN,CAAW9G,KAAX;OAXF;;aAcO,IAAI,KAAKmD,WAAT,CAAqByB,KAArB,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCA8BaD,UAAU;eACd,CAACA,QAAD,CAAT,EAAqB,CAAC,UAAD,CAArB,EAAmC,oBAAnC;;UAEMC,QAAQ,KAAKiF,CAAnB;;WAEK,IAAI5F,IAAIW,MAAMlD,MAAN,GAAe,CAA5B,EAA+BuC,KAAK,CAApC,EAAuCA,GAAvC,EAA4C;iBACjCW,MAAMX,CAAN,CAAT,EAAmBA,CAAnB,EAAsBW,KAAtB;;;aAGK,IAAP;;;;;;;;;;;;;;;;;;;6BAgBO5E,OAAO;aACP,KAAK4T,aAAL,CAAmB5T,KAAnB,MAA8B,CAAC,CAAtC;;;;;;;;;;;;;;;;;;;;4BAiBMA,OAAO;UACP+E,MAAM,KAAK8O,KAAL,CAAW7T,KAAX,CAAZ;;aAEO+E,QAAQ,IAAR,GAAe,CAAC,CAAhB,GAAoBzC,OAAOyC,GAAP,CAA3B;;;;;;;;;;;;;;;;;;;;kCAiBY/E,OAAO;UACb+E,MAAM,KAAK+O,WAAL,CAAiB9T,KAAjB,CAAZ;;aAEO+E,QAAQ,IAAR,GAAe,CAAC,CAAhB,GAAoBzC,OAAOyC,GAAP,CAA3B;;;;;;;;;;;;;;;yBAYGgP,WAAW;aACP,KAAKlK,CAAL,CAAOmK,IAAP,CAAY3K,KAAZ,CAAkB,KAAKQ,CAAvB,EAA0BzE,SAA1B,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAyCI;aACG,KAAKyE,CAAL,CAAOoK,GAAP,EAAP;;;;;;;;;;;;;;;;;2BAcc;yCAARN,MAAQ;cAAA;;;WACT9J,CAAL,CAAO/C,IAAP,CAAYuC,KAAZ,CAAkB,KAAKQ,CAAvB,EAA0BzE,SAA1B;;aAEO,IAAP;;;;;;;;;;;;;;8BAWQR,OAAO;WACViF,CAAL,CAAO/C,IAAP,CAAYuC,KAAZ,CAAkB,KAAKQ,CAAvB,EAA0BjF,KAA1B;;aAEO,IAAP;;;;;;;;;;;;;;;;gCAaO;aACA,KAAKiF,CAAL,CAAOlD,OAAO,CAAP,EAAU,KAAKkD,CAAL,CAAOnI,MAAP,GAAgB,CAA1B,CAAP,CAAP;;;;;;;;;;;;;;8BAWQ;WACHmI,CAAL,CAAOqK,OAAP;;aAEO,IAAP;;;;;;;;;;;;;;4BAWM;aACC,KAAKrK,CAAL,CAAOsK,KAAP,EAAP;;;;;;;;;;;;;;;;8BAaQ;UACFzS,SAAS,KAAKmI,CAAL,CAAOnI,MAAtB;;aAEO,KAAK0S,OAAL,CAAa,UAACpU,KAAD,EAAQsF,KAAR,EAAeV,KAAf,EAAyB;YACrCyP,cAAc/O,QAAQoB,KAAKoB,KAAL,CAAW,CAACpG,SAAS4D,KAAV,IAAmBoB,KAAKC,MAAL,EAA9B,CAA5B;;cAEMrB,KAAN,IAAeV,MAAMyP,WAAN,CAAf;cACMA,WAAN,IAAqBrU,KAArB;OAJK,CAAP;;;;;;;;;;;;;;;;0BAkBIsU,OAAOhM,KAAK;aACT,IAAI,KAAKnF,WAAT,CAAqB,KAAK0G,CAAL,CAAOwG,KAAP,CAAahH,KAAb,CAAmB,KAAKQ,CAAxB,EAA2BzE,SAA3B,CAArB,CAAP;;;;;;;;;;;;;;;yBAYGmP,iBAAiB;eACX,CAACA,eAAD,CAAT,EAA4B,CAAC,aAAD,CAA5B,EAA6C,UAA7C;;WAEK1K,CAAL,CAAO2K,IAAP,CAAYD,eAAZ;;aAEO,IAAP;;;;;;;;;;;;;;;8BAYQ;aACD,KAAKC,IAAL,CAAUC,GAAV,CAAP;;;;;;;;;;;;;;;+BAYS;aACF,KAAKD,IAAL,CAAU,UAACE,CAAD,EAAI5D,CAAJ;eAAU2D,IAAI3D,CAAJ,EAAO4D,CAAP,CAAV;OAAV,CAAP;;;;;;;;;;;;;;;;;2BAcKtM,OAAOuM,aAAuB;yCAAPC,KAAO;aAAA;;;aAC5B,IAAIlB,GAAJ,CAAQ,KAAK7J,CAAL,CAAOgL,MAAP,CAAcxL,KAAd,CAAoB,KAAKQ,CAAzB,EAA4BzE,SAA5B,CAAR,CAAP;;;;;;;;;;;;;;;6BAYO;aACA,KAAK4O,IAAL,CAAU,EAAV,CAAP;;;;;;;;;;;;;;;;8BAaiB;yCAARL,MAAQ;cAAA;;;WACZ9J,CAAL,CAAO+B,OAAP,CAAevC,KAAf,CAAqB,KAAKQ,CAA1B,EAA6BzE,SAA7B;;aAEO,IAAP;;;;2BA1UU;aACH,KAAKyE,CAAL,CAAO,CAAP,CAAP;;;;2BA4GS;UACHjF,QAAQ,KAAKiF,CAAnB;;aAEOjF,MAAMA,MAAMlD,MAAN,GAAe,CAArB,CAAP;;;;;;;;;;;;;;;2BAYW;aACJ,KAAKmI,CAAL,CAAOnI,MAAd;;;;EAjLckI;;AAkYlBzD,iBAAiBuN,IAAI3L,SAArB,qBACGtB,QAAOvF,WADV,EACwB,KADxB;;;;;;;;;AAWA,SAASuT,GAAT,CAAa3D,CAAb,EAAgB4D,CAAhB,EAAmB;MACb,CAACrS,SAASyO,CAAT,CAAD,IAAgB,CAACzO,SAASqS,CAAT,CAArB,EAAkC;WACzB,CAAP;;;MAGE,CAACrS,SAASyO,CAAT,CAAL,EAAkB;WACT,CAAC,CAAR;;;MAGE,CAACzO,SAASqS,CAAT,CAAL,EAAkB;WACT,CAAP;;;MAGE1S,MAAM8O,CAAN,KAAY9O,MAAM0S,CAAN,CAAhB,EAA0B;WACjB,CAAP;;;MAGE1S,MAAM8O,CAAN,CAAJ,EAAc;WACL,CAAC,CAAR;;;MAGE9O,MAAM0S,CAAN,CAAJ,EAAc;WACL,CAAP;;;SAGK5D,IAAI4D,CAAX;;;AAGF/T,aAAa,CAAb,EAAgBmG,IAAhB,CAAqB;SACZtF,WADY;OAEdkS;CAFP;;;;;;;;;;;;;;;AAkBA,SAAS9O,KAAT,CAAeuC,MAAf,EAAuBxC,QAAvB,EAAiC;WACtB,CAACwC,MAAD,EAASxC,QAAT,CAAT,EAA6B,CAAC,CAAC,SAAD,EAAY,KAAZ,CAAD,EAAqB,aAArB,CAA7B,EAAkE,OAAlE;;MAEMC,QAAQ,EAAd;;OAEK,IAAIX,IAAI,CAAb,EAAgBA,IAAIkD,MAApB,EAA4BlD,GAA5B,EAAiC;UACzB6C,IAAN,CAAWnC,WAAWA,SAASV,CAAT,CAAX,GAAyBA,CAApC;;;SAGK,IAAIyP,GAAJ,CAAQ9O,KAAR,CAAP;;;;;;;;;;;;;;AAcF,SAASF,SAAT,CAAiByC,MAAjB,EAAyBxC,QAAzB,EAAmC;WACxB,CAACwC,MAAD,EAASxC,QAAT,CAAT,EAA6B,CAAC,CAAC,SAAD,EAAY,KAAZ,CAAD,EAAqB,UAArB,CAA7B,EAA+D,SAA/D;;OAEK,IAAIV,IAAI,CAAb,EAAgBA,IAAIkD,MAApB,EAA4BlD,GAA5B,EAAiC;aACtBA,CAAT;;CAIJ;;AC7gBA;;;;;;;AAOA,AACA,AACA,AACA;;;;;AAUA,IAAML,UAAU;UACN,aADM;UAEN,cAFM;WAGL,SAHK;QAIR;CAJR;cAMgBpE;IAARsV,cAAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAgCFC;;;;;;;;;;;;;;;;;;;;;;;;;;;2BAkCGhG,QAAQiG,UAAU;;;UACnB,CAACpR,QAAQmL,MAAR,CAAL,EAAsB;cACd,IAAIjJ,KAAJ,CAAU,6EAAV,CAAN;;;UAGEmP,SAAS,IAAIC,UAAJ,EAAb;UACIC,iBAAJ;;UAEI1T,WAAWuT,QAAX,CAAJ,EAA0B;eACjBI,UAAP,GAAoB,UAAUC,CAAV,EAAa;mBACtBA,CAAT,EAAY,IAAZ;SADF;;;UAKIxG,UAAU,IAAIpB,SAAJ,CAAY,UAACU,OAAD,EAAUC,MAAV,EAAqB;mBACpCA,MAAX;;eAEOkH,OAAP,GAAiB,gBAAgB;cAAbpQ,MAAa,QAAbA,MAAa;;cAC3B+P,MAAJ,EAAY;mBACH/P,OAAOmC,KAAd;;SAFJ;;eAMOkO,MAAP,GAAgB,iBAAgB;cAAbrQ,MAAa,SAAbA,MAAa;;kBACtBA,OAAOiI,MAAf;SADF;;0BAIiBvJ,QAAQmL,MAAR,CAAjB,EAAqC,OAAKlF,CAA1C;OAbc,CAAhB;;cAgBQiI,KAAR,GAAgB,SAASA,KAAT,GAAiB;iBACtB,IAAIhM,KAAJ,CAAU,qBAAV,CAAT;;eAEOgM,KAAP;;iBAES,IAAT;;eAEO,IAAP;OAPF;;aAUOjD,OAAP;;;;;;;;;;;;;;;;;6BAcwB;UAAnB1O,IAAmB,uEAAZ,UAAY;;UAClBqV,SAASC,SAASC,aAAT,CAAuB,GAAvB,CAAf;;aAEOC,IAAP,GAAc,KAAKC,OAAnB;aACOC,YAAP,CAAoB,UAApB,EAAgC1V,IAAhC;aACO2V,KAAP;;aAEO,IAAP;;;;;;;;;;;;;;;;;;;2BAhFY;aACLhB,IAAIiB,eAAJ,CAAoB,KAAKlM,CAAzB,CAAP;;;;EAhBqBD;;AAmGzBzD,iBAAiB4O,WAAWhN,SAA5B,qBACGtB,QAAOvF,WADV,EACwB,YADxB;;AAIAP,aAAa,CAAb,EAAgBmG,IAAhB,CAAqB;SACZ,eAACkP,IAAD;4BAA0B7T,IAAhB,CAAqBjB,YAAY8U,IAAZ,CAArB;;GADE;OAEdjB;CAFP;;;;;;;;;;;;AAeA,SAASiB,IAAT,CAAcC,SAAd,EAAuC;MAAd/O,OAAc,uEAAJ,EAAI;;MACjC,CAAC3F,QAAQ0U,SAAR,CAAL,EAAyB;gBACX,CAACA,SAAD,CAAZ;;;SAGK,IAAIlB,UAAJ,CAAe,IAAImB,IAAJ,CAASD,SAAT,EAAoB/O,OAApB,CAAf,CAAP;CAGF;;ACxLA;;;;;;;AAOA,AACA,AACA,AACA,AAKA,IAAMiP,eAAe;OACd,OADc;OAEd,MAFc;OAGd;CAHP;AAKA,IAAMC,uBAAuB,IAAInM,MAAJ,CAC3B,IAAIL,KAAJ,CAAU3I,uBAAV,EACG0G,IADH,CACQ,UAACmJ,CAAD;gBAAaA,CAAb;CADR,EAEGxP,OAFH,CAEW,KAFX,EAEkB,EAFlB,CAD2B,EAI3B,GAJ2B,CAA7B;;;;;;;;;;;;;;IAkBM+U;;;iBACqB;QAAbrO,MAAa,uEAAJ,EAAI;;yGACbA,MADa;;;;;;;;;;;;;;;;;;;;;;;sCAoBP;UACVA,SAAS,KAAK6B,CAApB;;aAEO,IAAIwM,GAAJ,CAAQrO,OAAOqI,KAAP,CAAa,CAAb,EAAgB,CAAhB,EAAmBiG,WAAnB,KAAmCtO,OAAOqI,KAAP,CAAa,CAAb,CAA3C,CAAP;;;;;;;;;;;;;;;;6BAaOkG,cAAcC,UAAU;UAC3BpR,UAAU1D,MAAV,GAAmB,CAAvB,EAA0B;mBACb,KAAKmI,CAAL,CAAOnI,MAAlB;;;aAGK,KACJ2O,KADI,CACE,CADF,EACKmG,QADL,EAEJC,MAFI,GAGJC,UAHI,CAGO,IAAIL,GAAJ,CAAQE,YAAR,EAAsBE,MAAtB,GAA+B5M,CAHtC,CAAP;;;;;;;;;;;;;;;;iCAgBW;UACP7B,SAAS,KAAK6B,CAAlB;;cAEQsM,YAAR,EAAsB,UAACQ,OAAD,EAAUC,MAAV,EAAqB;iBAChC5O,OAAO1G,OAAP,CAAe,IAAI2I,MAAJ,CAAW2M,MAAX,EAAmB,GAAnB,CAAf,EAAwCD,OAAxC,CAAT;OADF;;aAIO,IAAIN,GAAJ,CAAQrO,MAAR,CAAP;;;;;;;;;;;;;;;mCAYa;aACN,KAAK1G,OAAL,CAAa8U,oBAAb,EAAmC,MAAnC,CAAP;;;;;;;;;;;;;;;;;;wBAeCjV,QAAQ;UACL,CAAC0B,SAAS1B,MAAT,CAAL,EAAuB;eACd,KAAP;;;aAGK,KAAK0I,CAAL,IAAU1I,MAAjB;;;;;;;;;;;;;;;;4BAaM0V,aAAaC,WAAW;aACvB,KAAKjN,CAAL,CAAOyB,OAAP,CAAejC,KAAf,CAAqB,KAAKQ,CAA1B,EAA6BzE,SAA7B,CAAP;;;;;;;;;;;;;;;;gCAaUyR,aAAaC,WAAW;aAC3B,KAAKjN,CAAL,CAAOkN,WAAP,CAAmB1N,KAAnB,CAAyB,KAAKQ,CAA9B,EAAiCzE,SAAjC,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;0BAwBI4R,QAAQ;aACL3S,IAAE,KAAKwF,CAAL,CAAOK,KAAP,CAAab,KAAb,CAAmB,KAAKQ,CAAxB,EAA2BzE,SAA3B,CAAF,CAAP;;;;;;;;;;;;;;;;;;;2BAgBKgL,OAAO;eACH,CAACA,KAAD,CAAT,EAAkB,CAAC,CAAC,SAAD,EAAY,KAAZ,CAAD,CAAlB,EAAwC,YAAxC;;cAEQ,CAACA,KAAT;;UAEMpI,SAAS,KAAK6B,CAApB;;UAEIzF,IAAI,EAAR;;WAEK,IAAIH,IAAI,CAAb,EAAgBA,IAAImM,KAApB,EAA2BnM,GAA3B,EAAgC;aACzB+D,MAAL;;;aAGK,IAAIqO,GAAJ,CAAQjS,CAAR,CAAP;;;;;;;;;;;;;;;;;4BAcM4S,QAAuB;UAAftL,QAAe,uEAAJ,EAAI;;aACtB,IAAI2K,GAAJ,CAAQ,KAAKxM,CAAL,CAAOvI,OAAP,CAAe0V,MAAf,EAAuBtL,QAAvB,CAAR,CAAP;;;;;;;;;;;;;;;;;;kCAeY1D,QAAuB;UAAf0D,QAAe,uEAAJ,EAAI;;eAC1B,IAAI9B,KAAJ,CAAU5B,MAAV,EAAkB6B,CAA3B;;eAES,CAAC7B,MAAD,CAAT,EAAmB,CAAC,QAAD,CAAnB,EAA+B,mBAA/B;;aAEO,IAAIqO,GAAJ,CAAQ,KAAKxM,CAAL,CAAO3B,KAAP,CAAaF,MAAb,EAAqBgM,IAArB,CAA0BtI,QAA1B,CAAR,CAAP;;;;;;;;;;;;;;;6BAYO;UACD1D,SAAS,KAAK6B,CAApB;UACIoN,MAAM,EAAV;;WAEK,IAAIhT,IAAI+D,OAAOtG,MAAP,GAAgB,CAA7B,EAAgCuC,KAAK,CAArC,EAAwCA,GAAxC,EAA6C;eACpC+D,OAAO/D,CAAP,CAAP;;;aAGK,IAAIoS,GAAJ,CAAQY,GAAR,CAAP;;;;;;;;;;;;;;;2BAYKD,QAAQ;eACJ,CAACA,MAAD,CAAT,EAAmB,CAAC,QAAD,CAAnB;;aAEO,KAAKnN,CAAL,CAAOqN,MAAP,CAAc7N,KAAd,CAAoB,KAAKQ,CAAzB,EAA4BzE,SAA5B,CAAP;;;;;;;;;;;;;;;;0BAaI+R,YAAYC,UAAU;aACnB,IAAIf,GAAJ,CAAQ,KAAKxM,CAAL,CAAOwG,KAAP,CAAahH,KAAb,CAAmB,KAAKQ,CAAxB,EAA2BzE,SAA3B,CAAR,CAAP;;;;;;;;;;;;;;;0BAYI2O,WAAW;aACR1P,IAAE,KAAKwF,CAAL,CAAO3B,KAAP,CAAamB,KAAb,CAAmB,KAAKQ,CAAxB,EAA2BzE,SAA3B,CAAF,CAAP;;;;;;;;;;;;;;;;+BAaSmR,cAA4B;UAAdC,QAAc,uEAAH,CAAG;;aAC9B,KAAK3M,CAAL,CAAOyB,OAAP,CAAejC,KAAf,CAAqB,KAAKQ,CAA1B,EAA6BzE,SAA7B,MAA4CoR,QAAnD;;;;;;;;;;;;;;;;2BAaKpO,OAAO1G,QAAQ;aACb,IAAI2U,GAAJ,CAAQ,KAAKxM,CAAL,CAAOwN,MAAP,CAAchO,KAAd,CAAoB,KAAKQ,CAAzB,EAA4BzE,SAA5B,CAAR,CAAP;;;;;;;;;;;;;;;;8BAaQkS,YAAYC,UAAU;aACvB,IAAIlB,GAAJ,CAAQ,KAAKxM,CAAL,CAAO2N,SAAP,CAAiBnO,KAAjB,CAAuB,KAAKQ,CAA5B,EAA+BzE,SAA/B,CAAR,CAAP;;;;;;;;;;;;;;;;kCAaY;aACL,IAAIiR,GAAJ,CAAQoB,KAAK,KAAK5N,CAAV,EACZvI,OADY,CACJ,YADI,EACU,GADV,EAEZA,OAFY,CAEJ,QAFI,EAEM,UAAC4I,KAAD;eAAWA,MAAM,CAAN,EAASoM,WAAT,EAAX;OAFN,EAGZhV,OAHY,CAGJ,OAHI,EAGK,UAAC4I,KAAD;eAAWA,MAAMwN,WAAN,EAAX;OAHL,CAAR,CAAP;;;;;;;;;;;;;;;;oCAiBc;aACP,IAAIrB,GAAJ,CAAQoB,KAAK,KAAK5N,CAAV,EACZvI,OADY,CACJ,YADI,EACU,GADV,EAEZA,OAFY,CAEJ,OAFI,EAEK,UAAC4I,KAAD;eAChBA,MAAMwN,WAAN,OAAwBxN,KAAxB,GAAgCA,KAAhC,SAA6CA,KAD7B;OAFL,EAKZ5I,OALY,CAKJ,SALI,EAKO,UAAC4I,KAAD;eAAWA,MAAMoM,WAAN,EAAX;OALP,EAMZhV,OANY,CAMJ,MANI,EAMI,GANJ,EAOZA,OAPY,CAOJ,KAPI,EAOG,EAPH,EAQZA,OARY,CAQJ,OARI,EAQK,UAAC4I,KAAD;eAAWA,MAAMoM,WAAN,EAAX;OARL,CAAR,CAAP;;;;;;;;;;;;;;;;gCAsBU;aACH,IAAID,GAAJ,CAAQoB,KAAK,KAAK5N,CAAV,EACZvI,OADY,CACJ,YADI,EACU,GADV,EAEZA,OAFY,CAEJ,OAFI,EAEK,UAAC4I,KAAD;eAChBA,MAAMwN,WAAN,OAAwBxN,KAAxB,GAAgCA,KAAhC,SAA6CA,KAD7B;OAFL,EAKZ5I,OALY,CAKJ,MALI,EAKI,GALJ,EAMZA,OANY,CAMJ,KANI,EAMG,EANH,EAOZoW,WAPY,EAAR,CAAP;;;;;;;;;;;;;;;;mCAqBa;aACN,IAAIrB,GAAJ,CAAQoB,KAAK,KAAK5N,CAAV,EACZvI,OADY,CACJ,YADI,EACU,GADV,EAEZA,OAFY,CAEJ,OAFI,EAEK,UAAC4I,KAAD;eAChBA,MAAMwN,WAAN,OAAwBxN,KAAxB,GAAgCA,KAAhC,SAA6CA,KAD7B;OAFL,EAKZ5I,OALY,CAKJ,KALI,EAKG,GALH,EAMZA,OANY,CAMJ,IANI,EAME,EANF,EAOZoW,WAPY,EAAR,CAAP;;;;;;;;;;;;;;;;;kCAsBY;aACL,IAAIrB,GAAJ,CAAQ,KAAKxM,CAAL,CAAO6N,WAAP,EAAR,CAAP;;;;;;;;;;;;;;;;kCAaY;aACL,IAAIrB,GAAJ,CAAQoB,KAAK,KAAK5N,CAAV,EACZvI,OADY,CACJ,YADI,EACU,GADV,EAEZA,OAFY,CAEJ,OAFI,EAEK,UAAC4I,KAAD;eAChBA,MAAMwN,WAAN,OAAwBxN,KAAxB,GAAgCA,KAAhC,SAA6CA,KAD7B;OAFL,EAKZ5I,OALY,CAKJ,KALI,EAKG,GALH,EAMZA,OANY,CAMJ,IANI,EAME,EANF,EAOZoW,WAPY,EAAR,CAAP;;;;;;;;;;;;;;;;kCAqBY;aACL,IAAIrB,GAAJ,CAAQoB,KAAK,KAAK5N,CAAV,EACZvI,OADY,CACJ,YADI,EACU,GADV,EAEZA,OAFY,CAEJ,OAFI,EAEK,UAAC4I,KAAD;eAChBA,MAAMwN,WAAN,OAAwBxN,KAAxB,GAAgCA,KAAhC,SAA6CA,KAD7B;OAFL,EAKZ5I,OALY,CAKJ,MALI,EAKI,GALJ,EAMZA,OANY,CAMJ,KANI,EAMG,EANH,EAOZoW,WAPY,EAAR,CAAP;;;;+BAWS;aACF,KAAK7N,CAAZ;;;;;;;;;;;;;;;;;kCAcY;aACL,IAAIwM,GAAJ,CAAQ,KAAKxM,CAAL,CAAOyM,WAAP,EAAR,CAAP;;;;;;;;;;;;;;2BAWK;aACE,IAAID,GAAJ,CAAQ,KAAKxM,CAAL,CAAOvI,OAAP,CAAe,wCAAf,EAAyD,EAAzD,CAAR,CAAP;;;;;;;;;;;;;;+BAWS;aACF,IAAI+U,GAAJ,CAAQ,KAAKxM,CAAL,CAAOvI,OAAP,CAAe,oBAAf,EAAqC,EAArC,CAAR,CAAP;;;;;;;;;;;;;;gCAWU;aACH,IAAI+U,GAAJ,CAAQ,KAAKxM,CAAL,CAAOvI,OAAP,CAAe,oBAAf,EAAqC,EAArC,CAAR,CAAP;;;;2BA5XW;aACJ,KAAKuI,CAAL,CAAOnI,MAAd;;;;EA3IckI;;AA0gBlBzD,iBAAiBkQ,IAAItO,SAArB,qBACGtB,QAAOvF,WADV,EACwB,KADxB;;AAIAP,aAAa,CAAb,EAAgBmG,IAAhB,CAAqB;SACZzD,QADY;OAEdgT;CAFP;;AAKA,SAASoB,IAAT,CAAczP,MAAd,EAAsB;SACbA,OAAO1G,OAAP,CAAe,wBAAf,EAAyC,EAAzC,CAAP;;;;;;;;;;;;;;;;;;;;AAoBF,SAASqW,WAAT,GAAwD;MAArCC,IAAqC,uEAA9B,IAA8B;MAAxB1Q,OAAwB,uEAAd,EAAc;MAAVvC,QAAU;;MAClDS,UAAU1D,MAAV,IAAoB,CAAxB,EAA2B;WAClB2C,IAAEwH,KAAKgM,KAAL,CAAWD,IAAX,CAAF,CAAP;;;MAGEnW,WAAWyF,OAAX,CAAJ,EAAyB;eACZA,OAAX;cACU,EAAV;;;iBAGyBA,OAV2B;MAU9CH,OAV8C,YAU9CA,OAV8C;MAUrC+Q,KAVqC,YAUrCA,KAVqC;;MAWhDC,SAASlM,KAAKgM,KAAL,CAAWD,IAAX,EAAiB,UAAU7S,GAAV,EAAe/E,KAAf,EAAsB;QAChD8X,SAAS,gDAAgD3V,IAAhD,CAAqDnC,KAArD,CAAb,EAA0E;cAChE,IAAI+B,IAAJ,CAAS/B,KAAT,CAAR;KADF,MAEO,IAAI+G,WAAWnE,aAAa5C,KAAb,CAAX,IAAkCqD,SAASrD,KAAT,CAAtC,EAAuD;cACpDsC,OAAOtC,KAAP,CAAR;;;WAGK2E,WAAWA,SAAS0E,KAAT,CAAe,IAAf,EAAqBjE,SAArB,CAAX,GAA6CpF,KAApD;GAPa,CAAf;;SAUOqE,IAAE0T,MAAF,CAAP;CAGF;;ACtmBA;;;;;;AAMA,AACA,AACA,AACA,AACA,AACA,AAEA;;;;;;;;AAQA,IAAMC,eAAe,sFAArB;AACA,IAAMC,iBAAiB,IAAIrO,KAAJ,CAAU;cACnB,IAAIK,MAAJ,QAAiBlJ,qBAAjB,YAAgD,GAAhD,CADmB;eAElBmX,wBAAwBnX,qBAAxB,CAFkB;WAGtB;CAHY,CAAvB;AAKA,IAAMoX,iBAAiB,SAAvB;;AAEA,IAAMC,YAAY,IAAInO,MAAJ,QAAiBjJ,sBAAjB,4DAAlB;AACA,IAAMqX,MAAM5C,SAASC,aAAT,CAAuB,KAAvB,CAAZ;AACA,IAAM4C,eAAetP,SAAS,cAAT,EAAyB,UAACrJ,IAAD;SAAUA,IAAV;CAAzB,EAClBoJ,IADkB,CACb,UADa,EACD,UAACpJ,IAAD,EAAO4Y,IAAP,EAAgB;cAI5BA,IAJ4B;MAEvBpY,IAFuB,SAE9BH,KAF8B;MAG9BwY,WAH8B,SAG9BA,WAH8B;;;SAMzB;cAAA;WAEE,IAAI5O,KAAJ,CAAU2O,KAAKE,KAAf,EAAsBC,GAAtB,CAA0B,UAAC1Y,KAAD;aAC/BA,UAAU,IAAV,GACIA,KADJ,GAEI2Y,mBAAmB3Y,KAAnB,CAH2B;KAA1B,EAIJ6J,CANE;YAOGlK,IAPH;cAQK,IAAI+T,GAAJ,CAAQ,EAAR;GARZ;;OAWKkF,QAAL,CAAc9R,IAAd,CAAmByR,IAAnB;;MAEI,CAACC,WAAD,IAAgB1X,aAAawK,OAAb,CAAqBnL,IAArB,MAA+B,CAAC,CAApD,EAAuD;WAC9CoY,IAAP;;;SAGK5Y,IAAP;CAxBiB,EA0BlBoJ,IA1BkB,CA0Bb,WA1Ba,EA0BA,UAACpJ,IAAD,EAAO4Y,IAAP,EAAgB;MAC7B5Y,KAAKQ,IAAL,KAAcoY,KAAKvY,KAAvB,EAA8B;WACrBL,KAAKkZ,MAAZ;;;SAGKlZ,IAAP;CA/BiB,EAiClBoJ,IAjCkB,CAiCb,CAAC,SAAD,EAAY,MAAZ,CAjCa,EAiCQ,UAACpJ,IAAD,EAAO4Y,IAAP,EAAaO,kBAAb,EAAiCC,IAAjC,EAA0C;MAC7DC,UAAU;gBACHD,IADG;YAENpZ,IAFM;WAGP4Y,KAAKvY;GAHd;;MAMI+Y,SAAS,MAAT,IAAmBpZ,KAAKQ,IAAL,KAAc,QAAjC,IAA6CR,KAAKQ,IAAL,KAAc,OAA/D,EAAwE;YAC9DH,KAAR,GAAgB2Y,mBAAmBK,QAAQhZ,KAA3B,CAAhB;;QAEI8Y,kBAAJ,EAAwB;cACd9Y,KAAR,GAAgB,IAAIqW,GAAJ,CAAQ2C,QAAQhZ,KAAhB,EAAuByX,IAAvB,GAA8B5N,CAA9C;;;;MAIA,CAACiP,kBAAD,IAAuB,CAAC,QAAQ3W,IAAR,CAAa6W,QAAQhZ,KAArB,CAA5B,EAAyD;SAClD4Y,QAAL,CAAc9R,IAAd,CAAmBkS,OAAnB;;;SAGKrZ,IAAP;CApDiB,CAArB;AAsDA,IAAMsZ,kBAAkBjQ,SAAS,cAAT,EAAyB,KAAzB,EACrBD,IADqB,CAChB,CAAC,OAAD,EAAU,UAAV,EAAsB,OAAtB,EAA+B,QAA/B,CADgB,EAC0B,IAD1B,CAAxB;;IAGMmQ,uBACJ,8BAAY5T,KAAZ,EAAmB;;;OACZA,KAAL,GAAaA,KAAb;;;IAIE6T;;;;;;;;;;;;;;iMACJJ,OAAO;;;;EADkBjT;;;;;;;;;;;;AAY3B,oBAAe,UAACsT,MAAD,EAASN,kBAAT,EAAgC;uBACxB,CAAC,CAACA,kBAAvB;;MAEMO,WAAW,IAAI3F,GAAJ,CAAQ,EAAR,CAAjB;MACM4F,cAAcF,MAApB;MACIG,cAAJ;MACIC,cAAc,CAAlB;MACI7Z,OAAO;UACH,IADG;cAEC0Z;GAFZ;;SAKOD,OAAO1X,MAAd,EAAsB;QAChB;cACM+X,KAAKL,MAAL,EAAazZ,IAAb,CAAR;KADF,CAEE,OAAOkG,GAAP,EAAY;UACR,EAAEA,eAAeqT,oBAAjB,CAAJ,EAA4C;;;;YAItC,IAAIC,YAAJ,+BAA8CO,WAAWJ,WAAX,EAAwBE,cAAc3T,IAAIP,KAA1C,CAA9C,CAAN;;;iBASEiU,KAjBgB;QAYlBR,IAZkB,UAYlBA,IAZkB;QAalBN,KAbkB,UAalBA,KAbkB;QAclBD,WAdkB,UAclBA,WAdkB;QAelBlT,KAfkB,UAelBA,KAfkB;QAgBlBtF,KAhBkB,UAgBlBA,KAhBkB;;;mBAmBLsF,KAAf;;QAEI,CAACA,KAAL,EAAY;;;;QAINiT,OAAO;gBAAA;;KAAb;;QAKIQ,SAAS,UAAb,EAAyB;WAClBN,KAAL,GAAaA,KAAb;WACKD,WAAL,GAAmBA,WAAnB;;;WAGKF,aAAaC,KAAKQ,IAAlB,EAAwB,CAACpZ,IAAD,EAAO4Y,IAAP,EAAaO,kBAAb,CAAxB,CAAP;;aAESM,OAAO/I,KAAP,CAAa/K,KAAb,CAAT;;;SAGK+T,QAAP;;WAESM,oBAAT,GAAgC;UACxB,IAAIR,YAAJ,0CAAyDO,WAAWJ,WAAX,EAAwBE,WAAxB,CAAzD,UAAoGxB,YAApG,CAAN;;CAvDJ;;AA2DA,SAASyB,IAAT,CAAcL,MAAd,EAAsBzZ,IAAtB,EAA4B;MAClBQ,IADkB,GACTR,IADS,CAClBQ,IADkB;;MAEtByZ,gBAAJ;;MAEIX,gBAAgB9Y,IAAhB,CAAJ,EAA2B;cACf,IAAIyJ,KAAJ,CAAU;mBACLwP,OAAOlP,KAAP,CAAagO,wBAAwB/X,IAAxB,CAAb;KADL,CAAV;GADF,MAIO;cACK8X,eAAeS,GAAf,CAAmB,UAACmB,KAAD;aAC3BT,OAAOlP,KAAP,CAAa2P,KAAb,CAD2B;KAAnB,CAAV;;;MAKE3P,cAAJ;;MAGEA,QAAQ0P,QAAQH,IAAR,CAAa,UAACvP,KAAD;WACnBA,SAASA,MAAM5E,KAAN,KAAgB,CADN;GAAb,CADV,EAIE;QACMwU,YAAY;YACV5P,MAAMnF,GADI;aAETmF,MAAMlK,KAAN,CAAY,CAAZ,EAAe0B,MAFN;aAGTwI,MAAMlK,KAAN,CAAY,CAAZ;KAHT;QAKMyY,QAAQ,EAAd;;QAEIvO,MAAMnF,GAAN,KAAc,UAAlB,EAA8B;UACtBuU,cAAcF,MAApB;UACIW,mBAAJ;;gBAEUvB,WAAV,GAAwB,KAAxB;gBACUC,KAAV,GAAkBA,KAAlB;;aAGE,CAACW,SAASE,YAAYjJ,KAAZ,CAAkByJ,UAAUxU,KAA5B,CAAV,KACA,EAAEyU,aAAaX,OAAOlP,KAAP,CAAaiO,cAAb,CAAf,CAFF,EAGE;YACMpY,OAAOqZ,OAAOlP,KAAP,CAAakO,SAAb,CAAb;;YAEI,CAACrY,IAAL,EAAW;oBACCuF,KAAV,IAAmB,CAAnB;;;;;cAKIvF,KAAK,CAAL,CAAN,IAAiBwD,YAAYxD,KAAK,CAAL,CAAZ,IACb,IADa,GAEbA,KAAK,CAAL,EAAQuB,OAAR,CAAgB,gBAAhB,EAAkC,EAAlC,CAFJ;kBAGUgE,KAAV,IAAmBvF,KAAK,CAAL,EAAQ2B,MAA3B;;;UAGEqY,UAAJ,EAAgB;kBACJzU,KAAV,IAAmByU,WAAW,CAAX,EAAcrY,MAAjC;kBACU8W,WAAV,GAAwB,CAAC,CAACuB,WAAW,CAAX,CAA1B;;;;WAIGD,SAAP;;;qBAGqBF,QAAQ5N,GAAR,CAAY,UAAC9B,KAAD;WACjCA,QAAQA,MAAM5E,KAAd,GAAsB0U,GADW;GAAZ,CA9DG;MA8Db1U,KA9Da,gBA8DpBtF,KA9DoB;;MAkEtBsF,UAAU/C,QAAd,EAAwB;YACd6W,OAAO1X,MAAf;;;SAGK;UACC,MADD;gBAAA;WAGE0X,OAAO/I,KAAP,CAAa,CAAb,EAAgB/K,KAAhB;GAHT;;;AAOF,SAAS4S,uBAAT,CAAiC+B,OAAjC,EAA0C;SACjC,IAAIhQ,MAAJ,SAAkBgQ,OAAlB,aAAoC,GAApC,CAAP;;;AAGF,SAASP,UAAT,CAAoBN,MAApB,EAA4B9T,KAA5B,EAAmC;SACtBA,KAAX,eAA4B8T,OAAO/I,KAAP,CAAa/K,KAAb,EAAoBA,QAAQ,EAA5B,CAA5B,qCAA6F8T,MAA7F;;;AAGF,SAAST,kBAAT,CAA4B3Q,MAA5B,EAAoC;SAC3BA,OAAO1G,OAAP,CAAe,iBAAf,EAAkC,UAAC4I,KAAD,EAAW;QAC9CgQ,SAAJ,GAAgBhQ,KAAhB;;WAEOmO,IAAI8B,WAAJ,IAAmB9B,IAAI+B,SAA9B;GAHK,CAAP;;;AC3PF;;;;;;;AAOA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AAIA,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDA,IAAMC,iBAAiB7a,SAAOiW,QAA9B;AACA,IAAM6E,WAAWD,eAAe3E,aAAf,CAA6B,KAA7B,CAAjB;AACA,IAAM6E,iBAAiB,WAAvB;AACA,IAAMC,eAAe,IAAI5Q,KAAJ,CAAU6Q,KAAK1S,SAAf,EAA0B2S,kBAA1B,CAA6C,aAA7C,IAA8D,aAA9D,GAA8E,WAAnG;AACA,IAAMC,UAAU,EAAhB;AACA,IAAMlC,QAAQ,EAAd;AACA,IAAMmC,oBAAoB,IAAIlH,GAAJ,CAAQ,EAAR,CAA1B;AACA,IAAMmH,gBAAgB,mDAAtB;AACA,AACA,IAAMC,UAAQ,4BAAd;AACA,IAAMC,QAAQ,+BAAd;AACA,IAAMC,UAAU,8BAAhB;AACA,IAAMC,UAAU,8BAAhB;AACA,IAAMC,eAAelS,SAAS,MAAT,EAAiB,UAACrJ,IAAD,EAAOoZ,IAAP,EAAgB;MAC9CoC,KAAKpC,SAAS,KAAT,GACP+B,OADO,GAEPnb,KAAKM,IAAL,CAAU,cAAV,KAA6Boa,eAAee,eAAf,CAA+BC,YAA5D,IAA4EJ,OAFhF;;SAIOZ,eAAeiB,eAAf,CAA+BH,EAA/B,EAAmCpC,IAAnC,CAAP;CALmB,EAOlBhQ,IAPkB,CAQjB,UAACgQ,IAAD;SAAUA,SAAS,UAAnB;CARiB,EASjB;SAAMsB,eAAekB,aAAf,CAA6B,EAA7B,CAAN;CATiB,EAWlBxS,IAXkB,CAYjB,UAACgQ,IAAD;SAAUA,SAAS,OAAnB;CAZiB,EAajB;SAAMsB,eAAemB,cAAf,CAA8B,EAA9B,CAAN;CAbiB,CAArB;AAeA,IAAMC,cAAczS,SAAS,cAAT,EAAyB,MAAzB,EACjBD,IADiB,CAEhB,CAAC,KAAD,EAAQ,QAAR,EAAkB,QAAlB,EAA4B,OAA5B,EAAqC,OAArC,CAFgB,EAGhB,KAHgB,EAKjBA,IALiB,CAMhB,MANgB,EAOhB,QAPgB,CAApB;AASA,IAAM2S,iBAAiB1S,SAAS,MAAT,EAAiB,UAAC2S,QAAD;SAAcA,QAAd;CAAjB,EACpB5S,IADoB,CAEnB1F,QAFmB,EAGnB,UAACsY,QAAD;SACE,UAAChc,IAAD;WAAU,IAAIic,IAAJ,CAASjc,IAAT,EAAekc,EAAf,CAAkBF,QAAlB,CAAV;GADF;CAHmB,EAOpB5S,IAPoB,CAQnB,CAACxH,OAAD,EAAUua,MAAV,CARmB,EASnB,UAACC,KAAD,EAAW;UACD,IAAIrI,GAAJ,CAAQqI,KAAR,CAAR;;SAEO,UAACpc,IAAD;WAAUoc,MAAMzQ,OAAN,CAAc3L,IAAd,MAAwB,CAAC,CAAnC;GAAP;CAZiB,CAAvB;AAeA,IAAMqc,gBAAgBhT,SAAS,cAAT,EAAyB,CAAzB,EACnBD,IADmB,CACd,aADc,EACC,UAACkT,QAAD;SAAcA,QAAd;CADD,EAEnBlT,IAFmB,CAEd,YAFc,EAEA,UAACkT,QAAD,EAAWC,OAAX;SAAuBD,WAAWC,OAAlC;CAFA,CAAtB;AAGA,IAAMC,gBAAgBnT,SAAS,cAAT,EAAyB,UAACkT,OAAD,EAAUD,QAAV;SAAuBC,UAAUD,QAAjC;CAAzB,EACnBlT,IADmB,CACd,aADc,EACC,UAACmT,OAAD;SAAaA,OAAb;CADD,EAEnBnT,IAFmB,CAEd,YAFc,EAEA,CAFA,CAAtB;AAGA,IAAMqT,iBAAiBpT,SAAS,MAAT,EAAiB,IAAjB,EACpBD,IADoB,CACf,UAAChJ,IAAD;SAAUA,SAAS,OAAT,IAAoBA,SAAS,aAAvC;CADe,EACuC,UAACJ,IAAD;SAC1DA,KAAKQ,IAAL,KAAc,KAAd,GACI4a,KADJ,GAEI,IAHsD;CADvC,EAMpBhS,IANoB,CAMf,UAAChJ,IAAD;sBAAsBoC,IAAZ,CAAiBpC,IAAjB;;CANK,EAMmB,UAACJ,IAAD;SACtCA,KAAK0c,OAAL,CAAa,KAAb,EAAoB3a,MAApB,GACIsZ,OADJ,GAEI,IAHkC;CANnB,CAAvB;;;;;;;;;;;;;;;;;;;IA4BMY;;;kBACmB;QAAXjc,IAAW,uEAAJ,EAAI;;;2GACd,YAAM;UACPqZ,UAAUrZ,IAAd;;UAEI6B,YAAYwX,OAAZ,MACFsD,SAAStD,OAAT,KACAuD,eAAevD,OAAf,CADA,IAEAwD,mBAAmBxD,OAAnB,CAFA,IAGA9W,UAAU8W,OAAV,CAHA,IAIAyD,gBAAgBzD,OAAhB,CAJA,IAKA0D,YAAY1D,OAAZ,CANE,CAAJ,EAOG;kBACS,CAACA,OAAD,CAAV;;;aAGK,IAAItF,GAAJ,CAAQ9M,UAAQ,IAAIgD,KAAJ,CAAUoP,OAAV,EAAmBnP,CAA3B,EAA8B,IAA9B,CAAR,EAA6C1I,MAA7C,CAAoD,UAAC4a,KAAD,EAAQpc,IAAR,EAAiB;YACtEoc,MAAMzQ,OAAN,CAAc3L,IAAd,MAAwB,CAAC,CAAzB,KACFuC,UAAUvC,IAAV,KACA2c,SAAS3c,IAAT,CADA,IAEA4c,eAAe5c,IAAf,CAFA,IAGA6c,mBAAmB7c,IAAnB,CAHA,IAIA8c,gBAAgB9c,IAAhB,CAJA,IAKA+c,YAAY/c,IAAZ,CANE,CAAJ,EAOG;iBACMoc,MAAMjV,IAAN,CAAWnH,IAAX,CAAP;;;YAGEmc,OAAOnc,IAAP,CAAJ,EAAkB;gBACVmH,IAAN,CAAWuC,KAAX,CAAiB0S,KAAjB,EAAwBpc,KAAKkK,CAA7B;;OAbG,EAeJ,EAfI,EAeAA,CAfP;KAdI,EADe;;UAiChBnC,EAAL,GAAU/H,IAAV;;UAEKyU,OAAL,CAAauI,aAAb;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BA6Be;;;wCAAVtD,QAAU;gBAAA;;;cACPjU,SAAR,EAAmB,UAACzF,IAAD,EAAU;eACpBA,IAAP,EAAayU,OAAb,CAAqB,UAACzU,IAAD,EAAU;cACzB,OAAK2L,OAAL,CAAa3L,IAAb,MAAuB,CAAC,CAA5B,EAA+B;mBACxBmH,IAAL,CAAUnH,IAAV;;SAFJ;OADF;;aAQO,IAAP;;;;;;;;;;;;;;;;+BAamB;;;yCAATgb,OAAS;eAAA;;;aACZ,KAAKvG,OAAL,CAAa,UAACzU,IAAD,EAAU;YACtBid,OAAOjd,KAAKkd,SAAlB;;gBAEQ3a,UAAUvC,IAAV,eAAR,EAAsC,UAACE,GAAD;iBAAS+c,KAAKE,GAAL,CAASjd,GAAT,CAAT;SAAtC;OAHK,CAAP;;;;;;;;;;;;;;;;;+BAkBSQ,MAAkB;UAAZiI,GAAY,uEAAN,IAAM;;aACpB,KAAK8L,OAAL,CAAa,UAACzU,IAAD,EAAU;YACxBuC,UAAUvC,IAAV,CAAJ,EAAqB;eACdod,kBAAL,CAAwBzU,MAAM,WAAN,GAAoB,YAA5C,WAAkEjI,IAAlE;;OAFG,CAAP;;;;;;;;;;;;;;;;;4BAkBMD,MAAkB;UAAZkI,GAAY,uEAAN,IAAM;;aACjB,KAAK8L,OAAL,CAAa,UAACzU,IAAD,EAAU;YACxBuC,UAAUvC,IAAV,CAAJ,EAAqB;eACdod,kBAAL,CAAwBzU,MAAM,WAAN,GAAoB,YAA5C,EAA0DlI,IAA1D;;OAFG,CAAP;;;;;;;;;;;;;;;;;;;;;;4BAuBMD,MAAMwb,UAAUqB,OAAO;WACxBC,IAAL,CAAU,UAACtd,IAAD,EAAU;YACdud,QAAQvd,IAAR,MAAkB,OAAtB,EAA+B;cACrBwd,KADqB,GACXxd,IADW,CACrBwd,KADqB;cAErBzb,MAFqB,GAEVyb,MAAMC,QAFI,CAErB1b,MAFqB;;cAGvB2b,QAAQ,IAAIzT,KAAJ,CAAUoT,KAAV,EAAiBrV,IAAjB,CAAsB,UAAC3H,KAAD,EAAQkL,QAAR;mBAC9B,IAAImL,GAAJ,CAAQnL,QAAR,EAAkBoS,YAAlB,EAD8B,UACStd,KADT;WAAtB,CAAd;;gBAIMud,UAAN,CACM5B,QADN,WACqB0B,SAAS,IAD9B,IACuCA,KADvC,QAEE3b,MAFF;gBAIM0b,QAAN,CAAe1b,MAAf,EAAuB8b,UAAvB,GAAoC,EAAErd,UAAF,EAApC;;iBAEO,IAAP;;OAdJ;;aAkBO,IAAP;;;;;;;;;;;;;;;;;4BAcME,MAAkB;UAAZiI,GAAY,uEAAN,IAAM;;aACjB,KAAK8L,OAAL,CAAa,UAACzU,IAAD,EAAU;YACxBic,IAAJ,CAASvB,eAAemB,cAAf,CAA8Bnb,IAA9B,CAAT,EAA8Cod,IAA9C,CAAmD9d,IAAnD,EAAyD2I,GAAzD;OADK,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BA4CgB;;;yCAAToV,OAAS;eAAA;;;UACZC,gBAAJ;UACIC,mBAAJ;UACIjZ,iBAAJ;UACIxE,aAAJ;UACI0d,YAAJ;UACIxN,cAAJ;;UAEIgG,GAAJ,CAAQ,IAAI3C,GAAJ,CAAQtO,SAAR,EAAmB4O,IAAnB,CAAwB,GAAxB,CAAR,EACG9L,KADH,CACS,OADT,EAEGkM,OAFH,CAEW,UAACpM,MAAD,EAAY;YACf,CAAC2V,OAAL,EAAc;gBACN3V,OAAOqI,KAAP,CAAa,CAAb,EAAgB,CAAhB,CAAN;qBACW3Q,eAAeme,GAAf,CAAX;kBACQ,CAAR;;cAEIlZ,YAAY,CAAClD,WAAWkD,QAAX,CAAjB,EAAuC;uBAC1BA,SAASqD,OAAOqI,KAAP,CAAa,CAAb,EAAgB,CAAhB,CAAT,CAAX;oBACQ,CAAR;;;cAGE,QAAQlO,IAAR,CAAa6F,MAAb,KAAwB,CAACrD,QAA7B,EAAuC;;;;iBAIhCqD,OAAOqI,KAAP,CAAaA,KAAb,EAAoBnG,KAApB,CAA0B,SAA1B,CAAP;;cAEI,CAAC/J,IAAD,IAAU0d,QAAQ,GAAR,IAAeA,QAAQ,GAArC,EAA2C;;;;oBAIjC;kBACF1d,OAAOA,KAAK,CAAL,CAAP,GAAiB,EADf;kBAEF6H,OAAOqI,KAAP,CAAaA,QAAQ,CAAClQ,OAAOA,KAAK,CAAL,CAAP,GAAiB,EAAlB,EAAsBuB,MAA3C,CAFE;;WAAV;;uBAMa,IAAb;;;YAGE,CAACkc,UAAL,EAAiB;kBACP3W,IAAR,IAAgBe,MAAhB;;;YAGE,CAAC2V,QAAQ1W,IAAT,IAAiB,gBAAgB9E,IAAhB,CAAqBwb,QAAQ1W,IAA7B,CAArB,EAAyD;kBAC/CtC,QAAR,SAAuBgZ,QAAQxd,IAA/B,EAAqCwd,QAAQ1W,IAAR,CAAa3F,OAAb,CAAqB,UAArB,EAAiC,EAAjC,CAArC;oBACU,IAAV;;;qBAGW,KAAb;OAzCJ;;aA4CO,IAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;yBAwBGvB,OAAMC,OAAO;UACVL,OAAOme,QAAQ,IAAR,CAAb;;UAEI,CAAC1Y,UAAU1D,MAAf,EAAuB;eACd,IAAIkI,KAAJ,CAAUjK,KAAKoe,UAAf,EAA2B5c,MAA3B,CAAkC,UAAC+C,CAAD,EAAInE,IAAJ,EAAa;YAClDA,KAAKI,IAAP,IAAeJ,KAAKC,KAApB;SADK,CAAP;;;UAKEoF,UAAU1D,MAAV,IAAoB,CAApB,IAAyB2B,SAAStD,KAAT,CAA7B,EAA6C;YACrCob,KAAKiB,eAAerc,KAAf,EAAqB,CAAC,IAAI6b,IAAJ,CAASjc,IAAT,CAAD,CAArB,CAAX;;eAEO+C,OAAOyY,EAAP,IACHxb,KAAKqe,YAAL,CAAkBje,KAAlB,CADG,GAEHJ,KAAKse,cAAL,CAAoB9C,EAApB,EAAwBpb,KAAxB,CAFJ;;;UAKEqF,UAAU1D,MAAV,IAAoB,CAAxB,EAA2B;mCACf3B,KAAV,EAAiBC,KAAjB;;;aAGK,KAAKoU,OAAL,CAAa,UAACzU,IAAD,EAAO2F,KAAP,EAAiB;YAC/B,CAACpD,UAAUvC,IAAV,CAAL,EAAsB;;;;YAIlBiK,KAAJ,CAAU7J,KAAV,EAAgBqU,OAAhB,CAAwB,UAACpU,KAAD,EAAQ+E,GAAR,EAAgB;cAClCpC,MAAM3C,KAAN,KAAgBA,UAAU,KAA9B,EAAqC;mBAC5B,IAAI4b,IAAJ,CAASjc,IAAT,EAAeY,UAAf,CAA0BwE,GAA1B,CAAP;;;cAGEtD,WAAWzB,KAAX,CAAJ,EAAuB;oBACbA,MAAM,IAAI4b,IAAJ,CAASjc,IAAT,EAAeI,IAAf,CAAoBgF,GAApB,CAAN,EAAgCpF,IAAhC,EAAsC2F,KAAtC,CAAR;;;cAGE3C,MAAM3C,KAAN,KAAgBA,UAAU,KAA9B,EAAqC;mBAC5B,IAAI4b,IAAJ,CAASjc,IAAT,EAAeY,UAAf,CAA0BwE,GAA1B,CAAP;;;kBAGM/E,UAAU,IAAV,GAAiB,EAAjB,GAAsBA,KAA9B;;cAEMmb,KAAKiB,eAAerX,GAAf,EAAoB,CAAC,IAAI6W,IAAJ,CAASjc,IAAT,CAAD,CAApB,CAAX;;cAEI+C,OAAOyY,EAAP,CAAJ,EAAgB;iBACTtF,YAAL,CAAkB9Q,GAAlB,EAAuB/E,KAAvB;WADF,MAEO;iBACAke,cAAL,CAAoB/C,EAApB,EAAwBpW,GAAxB,EAA6B/E,KAA7B;;SApBJ;OALK,CAAP;;;;;;;;;;;;;;;;;8BA0CiB;;;UAAdkH,OAAc,uEAAJ,EAAI;;aACV,IAAIuG,SAAJ,CAAY,UAACU,OAAD,EAAUC,MAAV,EAAqB;YAChCzO,OAAO,OAAKwe,KAAL,EAAb;YACQhe,IAF8B,GAErBR,IAFqB,CAE9BQ,IAF8B;;;YAIlCA,SAAS,KAAT,IAAkBA,SAAS,QAA/B,EAAyC;iBAChC,IAAI2F,KAAJ,CAAU,mEAAV,CAAP;;;YAGE3F,SAAS,QAAb,EAAuB;iBACdgO,QAAQxO,IAAR,CAAP;;;aAICye,IADH,GAEG5P,IAFH,CAEQ,YAAM;cACN7O,KAAK0e,QAAL,EAAJ,EAAqB;mBACZjQ,OAAO,IAAItI,KAAJ,CAAU,kCAAV,CAAP,CAAP;;;cAGIwY,SAAS,IAAI1C,IAAJ,CAASvB,cAAT,EAAyBiE,MAAzB,EAAf;cACMC,QAAQ5e,KAAK4e,KAAL,EAAd;cACMC,SAAS7e,KAAK6e,MAAL,EAAf;;iBAGGD,KADH,CACSA,KADT,EAEGC,MAFH,CAEUA,MAFV,EAGGC,SAHH,CAGa9e,KAAKkK,CAAL,CAAO,CAAP,CAHb,EAGwB,CAHxB,EAG2B,CAH3B;;kBAKQyU,MAAR;SAhBJ;OAZK,EA8BJ9P,IA9BI,CA8BC,UAAC8P,MAAD,EAAY;YACZ1I,UAAU0I,OAAO1I,OAAP,EAAhB;YACM8I,aAAaC,KAAK/I,QAAQ1N,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAL,CAAnB;YACMxG,SAASgd,WAAWhd,MAA1B;YACMkd,KAAK,IAAIC,WAAJ,CAAgBnd,MAAhB,CAAX;YACMod,KAAK,IAAIC,UAAJ,CAAeH,EAAf,CAAX;;kBAEMld,MAAN,EAAc,UAACuC,CAAD,EAAO;aAChBA,CAAH,IAAQya,WAAWrW,UAAX,CAAsBpE,CAAtB,CAAR;SADF;;eAIO+R,KAAK4I,EAAL,EAAS1X,OAAT,CAAP;OAzCK,CAAP;;;;;;;;;;;;;2BAoDK;aACE,KAAKkN,OAAL,CAAa,UAACzU,IAAD,EAAU;YACxBuC,UAAUvC,IAAV,CAAJ,EAAqB;eACdqf,IAAL;;OAFG,CAAP;;;;;;;;;;;;;;;8BAgBqB;UAAfC,MAAe,uEAAN,IAAM;;aACdC,iBAAiBpB,QAAQ,IAAR,CAAjB,EAAgCmB,MAAhC,CAAP;;;;;;;;;;;;;;;;;;;;;+BAkBS9e,MAAM6c,OAAO;WACjBC,IAAL,CAAU,UAACtd,IAAD,EAAU;YACdud,QAAQvd,IAAR,MAAkB,OAAtB,EAA+B;qBACL,IAAI+T,GAAJ,CAAQ/T,KAAKwd,KAAL,CAAWC,QAAnB,EAA6B3D,IAA7B,CAAkC,UAAC0F,IAAD;mBAAUA,KAAK3B,UAAL,IAAmB2B,KAAK3B,UAAL,CAAgBrd,IAAhB,KAAyBA,IAAtD;WAAlC,KAAiG,EAD5F;cACdgf,IADc,QACrBnf,KADqB;;cAGzBmf,IAAJ,EAAU;gBACJvD,IAAJ,CAASuD,IAAT,EAAejf,GAAf,CAAmB8c,KAAnB;;mBAEO,IAAP;;;OAPN;;aAYO,IAAP;;;;;;;;;;;;;;;;;;;;;;;;0BAqBIhE,SAAqB;UAAZ1Q,GAAY,uEAAN,IAAM;;UACrB3G,UAAUqX,OAAV,KAAsBA,WAAW,CAArC,EAAwC;eAC/B,KAAKJ,QAAL,GAAgBjZ,IAAhB,CAAqBqZ,OAArB,CAAP;;;aAGKoG,OAAOpG,OAAP,EAAgByE,IAAhB,CAAqB,IAArB,EAA2BnV,GAA3B,CAAP;;;;;;;;;;;;;;;+BAYS;aACF,IAAIsT,IAAJ,CAAS,KAAKla,MAAL,GAAc,KAAKmI,CAAL,CAAO,CAAP,EAAUwV,UAAxB,GAAqC,EAA9C,CAAP;;;;;;;;;;;;;;;;;2BAcIxf,KAAK;UACL,CAACuF,UAAU1D,MAAf,EAAuB;eACd,IAAIgS,GAAJ,CAAQoK,QAAQ,IAAR,EAAcwB,SAAd,CAAwBpX,KAAxB,CAA8B,GAA9B,CAAR,CAAP;;;aAGK,KAAKkM,OAAL,CAAa,UAACzU,IAAD,EAAU;YACxBuC,UAAUvC,IAAV,CAAJ,EAAqB;eACd2f,SAAL,GAAiBzf,GAAjB;;OAFG,CAAP;;;;;;;;;;;;;4BAcM;aACC,KAAKuU,OAAL,CAAa,UAACzU,IAAD,EAAU;YACxBuC,UAAUvC,IAAV,CAAJ,EAAqB;eACdmW,KAAL;;OAFG,CAAP;;;;;;;;;;;;;;;4BAgBkB;UAAd/L,IAAc,uEAAP,KAAO;;aACX,KAAK5I,MAAL,CAAY,UAAC4a,KAAD,EAAQpc,IAAR,EAAiB;cAC5Bmd,GAAN,CAAUnd,KAAK4f,SAAL,CAAe,CAAC,CAACxV,IAAjB,CAAV;OADK,EAEJ,IAAI6R,IAAJ,EAFI,CAAP;;;;;;;;;;;;;;4BAaMD,UAAU;aACT,KAAKxa,MAAL,CAAY,UAAC4a,KAAD,EAAQpc,IAAR,EAAiB;eAC3BA,IAAP,EAAa;cACP,IAAIic,IAAJ,CAASjc,IAAT,EAAekc,EAAf,CAAkBF,QAAlB,CAAJ,EAAiC;mBACxBI,MAAMe,GAAN,CAAUnd,IAAV,CAAP;;;iBAGKA,KAAK6f,UAAZ;;OANG,EAQJ,IAAI5D,IAAJ,EARI,CAAP;;;;;;;;;;;;;;;;;;;6BAwBO5C,SAAS;gBACNoG,OAAOpG,OAAP,CAAV;;aAEO8E,QAAQ,IAAR,EAAc2B,QAAd,CAAuB3B,QAAQ9E,OAAR,CAAvB,CAAP;;;;;;;;;;;;;;;;;;;;;;;2BAoBKD,MAA6B;yCAApB2G,kBAAoB;0BAAA;;;aAC3B,KAAKve,MAAL,CAAY,UAAC4a,KAAD,EAAQpc,IAAR,EAAiB;YAC5BqZ,UAAU,IAAI4C,IAAJ,CAASV,aAAanC,IAAb,EAAmB,CAAC,IAAI6C,IAAJ,CAASjc,IAAT,CAAD,CAAnB,CAAT,CAAhB;;gBAEQ8d,IAAR,CAAa9d,IAAb;;cAEMmd,GAAN,CAAU9D,QAAQ3P,KAAR,CAAcA,KAAd,CAAoB2P,OAApB,EAA6B0G,kBAA7B,CAAV;OALK,EAMJ,IAAI9D,IAAJ,EANI,CAAP;;;;;;;;;;;;;;;;;kCAoBYvb,MAAM;aACX,KACJiK,MADI,CACG,UADH,EAEJjK,IAFI,CAECA,IAFD,CAAP;;;;;;;;;;;;;;;;;+BAgBSA,MAAM;aACR,KACJiK,MADI,CACG,OADH,EAEJjK,IAFI,CAECA,IAFD,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;wBAwBE6K,UAAUlL,OAAO;UACfgd,QAAQc,QAAQ,IAAR,EAAcd,KAA1B;;UAEIN,YAAY,KAAK7S,CAAL,CAAO,CAAP,CAAZ,CAAJ,EAA4B;gBAClB,KAAKA,CAAL,CAAO,CAAP,EAAUmT,KAAlB;;;UAGE,CAAC5X,UAAU1D,MAAf,EAAuB;eACd,IAAI2U,GAAJ,CAAQ2G,MAAM2C,OAAd,EACJzX,KADI,CACE,KADF,EAEJ/G,MAFI,CAEG,UAAC+C,CAAD,EAAIlE,KAAJ,EAAc;cAChBA,KAAJ,EAAW;uBACEA,MAAMkI,KAAN,CAAY,IAAZ,CAAX;;cAEE,IAAImO,GAAJ,CAAQnL,SAAS,CAAT,CAAR,EAAqB0U,WAArB,GAAmC/V,CAArC,IAA0CqB,SAAS,CAAT,CAA1C;;SANC,CAAP;;;UAWE9F,UAAU1D,MAAV,IAAoB,CAApB,IAAyB2B,SAAS6H,QAAT,CAA7B,EAAiD;mBACpC,IAAImL,GAAJ,CAAQnL,QAAR,EAAkBoS,YAAlB,GAAiCzT,CAA5C;;eAEOmT,MAAM6C,gBAAN,CAAuB3U,QAAvB,KAAoC8R,MAAM8C,mBAAN,CAA0B5U,QAA1B,IAAsC,aAAtC,GAAsD,EAA1F,CAAP;;;UAGE9F,UAAU1D,MAAV,IAAoB,CAAxB,EAA2B;sCACXwJ,QAAd,EAAyBlL,KAAzB;;;aAGK,KAAKoU,OAAL,CAAa,UAACzU,IAAD,EAAO2F,KAAP,EAAiB;YAC/B,CAACpD,UAAUvC,IAAV,CAAD,IAAoB,CAAC+c,YAAY/c,IAAZ,CAAzB,EAA4C;;;;YAIxCiK,KAAJ,CAAUsB,QAAV,EAAoBkJ,OAApB,CAA4B,UAACpU,KAAD,EAAQkL,QAAR,EAAqB;cAC3CvI,MAAM3C,KAAN,CAAJ,EAAkB;mBACT,IAAI4b,IAAJ,CAASjc,IAAT,EAAea,SAAf,CAAyB0K,QAAzB,CAAP;;;qBAGS,IAAImL,GAAJ,CAAQnL,QAAR,EAAkBoS,YAAlB,GAAiCzT,CAA5C;;cAEIpI,WAAWzB,KAAX,CAAJ,EAAuB;oBACbA,MAAM,IAAI4b,IAAJ,CAASjc,IAAT,EAAeO,GAAf,CAAmBgL,QAAnB,CAAN,EAAoCvL,IAApC,EAA0C2F,KAA1C,CAAR;;;cAGE3C,MAAM3C,KAAN,CAAJ,EAAkB;mBACT,IAAI4b,IAAJ,CAASjc,IAAT,EAAeY,UAAf,CAA0BwE,GAA1B,CAAP;;;eAGGiY,KAAL,CAAW+C,cAAX,CAA0B7U,QAA1B;eACK8R,KAAL,CAAWgD,WAAX,CACE9U,QADF,EAEElL,MAAMsB,OAAN,CAAc,eAAd,EAA+B,EAA/B,CAFF,EAGE,cAAca,IAAd,CAAmBnC,KAAnB,IAA4B,WAA5B,GAA0C,EAH5C;SAhBF;OALK,CAAP;;;;;;;;;;;;;;;;;;;;;;wBA8CEkL,UAAUlL,OAAO;UACfigB,YAAJ;;WAEKhD,IAAL,CAAU,UAACtd,IAAD,EAAU;YACdud,QAAQvd,IAAR,MAAkB,QAAtB,EAAgC;gBACxBA,KAAK6d,UAAL,CAAgByC,GAAtB;;iBAEO,IAAP;;OAJJ;;UAQI,CAAC7a,UAAU1D,MAAf,EAAuB;eACdue,GAAP;;;UAGE,CAACA,GAAL,EAAU;eACD,IAAP;;;UAGExe,WAAWyJ,QAAX,CAAJ,EAA0B;iBACf+U,GAAT;OADF,MAEO;YACD7a,UAAU1D,MAAV,IAAoB,CAAxB,EAA2B;wCACXwJ,QAAd,EAAyBlL,KAAzB;;;eAGKigB,GAAP,EAAY/U,QAAZ;;;aAGK,IAAP;;;;;;;;;;;;;;;;;;;;;;;;;;yBAuBGnG,KAAK/E,OAAO;UACTkgB,UAAUpC,QAAQ,IAAR,EAAcoC,OAA9B;;UAEI,CAAC9a,UAAU1D,MAAf,EAAuB;eACd,IAAIkI,KAAJ,CAAUsW,OAAV,EAAmB/e,MAAnB,CAA0B,UAAC+C,CAAD,EAAIlE,KAAJ,EAAW+E,GAAX,EAAmB;YAChDA,GAAF,IAAS/E,KAAT;SADK,CAAP;;;UAKEoF,UAAU1D,MAAV,KAAqB,CAArB,IAA0B2B,SAAS0B,GAAT,CAA9B,EAA6C;eACpCmb,QAAQnb,GAAR,CAAP;;;UAGEK,UAAU1D,MAAV,IAAoB,CAAxB,EAA2B;iCAChBqD,GAAT,EAAe/E,KAAf;;;aAGK,KAAKoU,OAAL,CAAa,UAACzU,IAAD,EAAO2F,KAAP,EAAiB;YAC/B,CAACpD,UAAUvC,IAAV,CAAL,EAAsB;;;;gBAIdoF,GAAR,EAAa,UAAC/E,KAAD,EAAQ+E,GAAR,EAAgB;eACtBmb,OAAL,CAAanb,GAAb,IAAoBtD,WAAWzB,KAAX,IAAoBA,MAAML,KAAKugB,OAAL,CAAanb,GAAb,CAAN,EAAyBpF,IAAzB,EAA+B2F,KAA/B,CAApB,GAA4DtF,KAAhF;SADF;OALK,CAAP;;;;;;;;;;;;;;;;;;4BAuBM+Y,MAAMoH,gBAAgB;UACtBF,MAAM,KAAKA,GAAL,EAAZ;;UAEI,CAACA,GAAL,EAAU;eACD,EAAP;;;aAGKA,IAAI3B,MAAJ,CAAW8B,SAAX,CAAqB/W,KAArB,CAA2B4W,IAAI3B,MAA/B,EAAuClZ,SAAvC,CAAP;;;;;;;;;;;;;;;;;+BAcSjF,MAAM;WACV8c,IAAL,CAAU,UAACtd,IAAD,EAAU;YACdud,QAAQvd,IAAR,MAAkB,OAAtB,EAA+B;cACvBwf,OAAO,IAAIzL,GAAJ,CAAQ/T,KAAKwd,KAAL,CAAWC,QAAnB,EAA6B3D,IAA7B,CAAkC,UAAC0F,IAAD;mBAAUA,KAAK3B,UAAL,IAAmB2B,KAAK3B,UAAL,CAAgBrd,IAAhB,KAAyBA,IAAtD;WAAlC,CAAb;;cAEIgf,IAAJ,EAAU;iBACHhC,KAAL,CAAWkD,UAAX,CAAsBlB,KAAKpa,GAA3B;;mBAEO,IAAP;;;OAPN;;aAYO,IAAP;;;;;;;;;;;;;;;;;;;;;;;;6BAqBOub,OAAqC;UAA9BC,SAA8B,uEAAlB,EAAkB;UAAdC,OAAc,uEAAJ,EAAI;;kBACED,aAAa,EADf;gCACpCE,OADoC;UACpCA,OADoC,iCAC1B,IAD0B;mCACpBC,UADoB;UACpBA,UADoB,oCACP,IADO;;UAExCC,aAAaL,KAAjB;;UAEI,CAAC,SAASne,IAAT,CAAcjB,YAAYyf,UAAZ,CAAd,CAAL,EAA6C;YACvC;uBACW,IAAIC,KAAJ,CAAUD,UAAV,EAAsB,EAAEF,gBAAF,EAAWC,sBAAX,EAAtB,CAAb;SADF,CAEE,OAAO7a,GAAP,EAAY;uBACCwU,eAAewG,WAAf,CAA2B,OAA3B,CAAb;qBACWC,SAAX,CAAqBR,KAArB,EAA4BG,OAA5B,EAAqCC,UAArC;;;eAGKC,UAAP,EAAmBH,OAAnB;;;aAGK,KAAKpM,OAAL,CAAa,UAACzU,IAAD,EAAU;YACxBuC,UAAUvC,IAAV,CAAJ,EAAqB;eACdohB,aAAL,CAAmBJ,UAAnB;;OAFG,CAAP;;;;;;;;;;;;;;;;2BAiBc;UAAXrb,KAAW,uEAAH,CAAG;;UACVA,QAAQ,CAAZ,EAAe;gBACL,KAAK5D,MAAL,GAAc4D,KAAtB;;;aAGK,IAAIsW,IAAJ,CAAS,KAAK/R,CAAL,CAAOvE,KAAP,CAAT,CAAP;;;;;;;;;;;;;;;;;;;;6BAiByB;UAApBqW,QAAoB,uEAATnR,OAAS;;aAClB,IAAIoR,IAAJ,mGAAsBF,eAAeC,QAAf,CAAtB,EAAP;;;;;;;;;;;;;;;yBAYGA,UAAU;UACT,CAACtY,SAASsY,QAAT,CAAL,EAAyB;+GACLA,QAAlB;;;aAGK,KAAKxa,MAAL,CAAY,UAAC4a,KAAD,EAAQpc,IAAR,EAAiB;cAC5Bmd,GAAN,CAAUrD,MAAKkC,QAAL,EAAehc,IAAf,CAAV;OADK,EAEJ,IAAIic,IAAJ,EAFI,CAAP;;;;;;;;;;;;4BAWM;aACC,KAAKjc,IAAL,CAAU,CAAV,CAAP;;;;;;;;;;;;;;;;;;iCAe0B;UAAjBgc,QAAiB,uEAAN,IAAM;;aACnB,KAAKxa,MAAL,CAAY,UAAC4a,KAAD,EAAQpc,IAAR,EAAiB;oBACT,IAAIic,IAAJ,CAASjc,IAAT,EACtBiZ,QADsB,GAEtBa,IAFsB,CAEjB,UAAC9Z,IAAD;iBAAU,IAAIic,IAAJ,CAASjc,IAAT,EAAekc,EAAf,CAAkBF,QAAlB,CAAV;SAFiB,KAEyB,EAHhB;YACnBpC,KADmB,SAC1BvZ,KAD0B;;cAK5B8c,GAAN,CAAUvD,KAAV;OALK,EAMJ,IAAIqC,IAAJ,EANI,CAAP;;;;;;;;;;;;;4BAgBM;aACC,KAAKxH,OAAL,CAAa,UAACzU,IAAD,EAAU;YACxBuC,UAAUvC,IAAV,CAAJ,EAAqB;eACdqhB,KAAL;;OAFG,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BA6BM7gB,MAAM;UACRoZ,QAAQ;kBACAnT,SADA;eAEH;OAFT;;WAKK6W,IAAL,CAAU,UAACtd,IAAD,EAAU;YACdud,QAAQvd,IAAR,MAAkB,OAAtB,EAA+B;sBACL,IAAI+T,GAAJ,CAAQ/T,KAAKwd,KAAL,CAAWC,QAAnB,EAA6B3D,IAA7B,CAAkC,UAAC0F,IAAD;mBAAUA,KAAK3B,UAAL,IAAmB2B,KAAK3B,UAAL,CAAgBrd,IAAhB,KAAyBA,IAAtD;WAAlC,KAAiG,EAD5F;cACdgf,IADc,SACrBnf,KADqB;;cAGzBmf,IAAJ,EAAU;oBACA;wBACIA,KAAK8B,YADT;qBAEC,IAAIrF,IAAJ,CAASuD,IAAT,EAAejf,GAAf,GAAqB2J;aAF9B;;mBAKO,IAAP;;;OAVN;;aAeO0P,KAAP;;;;;;;;;;;;;;;;;4BAcMxZ,MAAM;UACNJ,OAAOme,QAAQ,IAAR,CAAb;UACM3C,KAAKiB,eAAerc,IAAf,EAAqB,CAAC,IAAI6b,IAAJ,CAASjc,IAAT,CAAD,CAArB,CAAX;;aAEO+C,OAAOyY,EAAP,IACHxb,KAAKuhB,YAAL,CAAkBnhB,IAAlB,CADG,GAEHJ,KAAKwhB,cAAL,CAAoBhG,EAApB,EAAwBpb,IAAxB,CAFJ;;;;;;;;;;;;;;;;;6BAgBOF,KAAK;aACLie,QAAQ,IAAR,EAAcjB,SAAd,CAAwB4C,QAAxB,CAAiC5f,GAAjC,CAAP;;;;;;;;;;;;;;;;;;2BAeK2e,SAAQ;aACN,KAAKve,IAAL,CAAUoJ,KAAV,CAAgB,IAAhB,EAAsB,IAAIqK,GAAJ,CAAQtO,SAAR,EAAmBwG,OAAnB,CAA2B,QAA3B,EAAqC/B,CAA3D,CAAP;;;;;;;;;;;;;;;2BAYK;aACE,KAAKuK,OAAL,CAAa,UAACzU,IAAD,EAAU;eACrB,IAAIic,IAAJ,CAASjc,IAAT,CAAP;;YAEMyhB,iBAAiBzhB,KAAKO,GAAL,CAAS,SAAT,CAAvB;;YAEIkhB,eAAe9V,OAAf,CAAuB,MAAvB,CAAJ,EAAoC;eAC7BrL,IAAL,CAAU,YAAV,EAAwBohB,eAAxB,GAA0CD,cAA1C;;;aAGGlhB,GAAL,CAAS,SAAT,EAAoB,iBAApB;OATK,CAAP;;;;;;;;;;;;;;;;;;yBAyBGE,OAAM;UACL,CAACgF,UAAU1D,MAAf,EAAuB;eACdoc,QAAQ,IAAR,EAAc5D,SAArB;;;aAGK,KAAK9F,OAAL,CAAa,UAACzU,IAAD,EAAO2F,KAAP,EAAiB;YAC/BpD,UAAUvC,IAAV,CAAJ,EAAqB;eACdua,SAAL,GAAiBzY,WAAWrB,KAAX,IAAmBA,MAAKT,KAAKua,SAAV,EAAqBva,IAArB,EAA2B2F,KAA3B,CAAnB,GAAuDlF,KAAxE;;OAFG,CAAP;;;;;;;;;;;;;;;;;;uBAmBCR,KAAI;UACD,CAACwF,UAAU1D,MAAf,EAAuB;eACdoc,QAAQ,IAAR,EAAcle,EAArB;;;aAGK,KAAKwU,OAAL,CAAa,UAACzU,IAAD,EAAU;YACxBuC,UAAUvC,IAAV,CAAJ,EAAqB;eACdC,EAAL,GAAUA,GAAV;;OAFG,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gCA4GUoZ,SAAS;gBACToG,OAAOpG,OAAP,EAAgBmF,KAAhB,EAAV;;UAEItF,SAASG,QAAQH,MAAR,EAAb;;UAEI,CAACA,OAAOnX,MAAZ,EAAoB;eACX,IAAP;;;gBAGQsX,QAAQ7J,IAAR,GAAetF,CAAf,CAAiB,CAAjB,CAAV;eACSgP,OAAOhP,CAAP,CAAS,CAAT,CAAT;;aAEO,KAAKuK,OAAL,CAAa,UAACzU,IAAD,EAAU;YACxBA,SAASqZ,OAAb,EAAsB;oBACVA,QAAQsI,WAAlB;;;;;YAKEtI,OAAJ,EAAa;iBACJuI,YAAP,CAAoB5hB,IAApB,EAA0BqZ,OAA1B;SADF,MAEO;iBACEwI,WAAP,CAAmB7hB,IAAnB;;OAVG,CAAP;;;;;;;;;;;;;;;;;;;iCA4BWqZ,SAAS;gBACVoG,OAAOpG,OAAP,EAAgBmF,KAAhB,EAAV;;UAEItF,SAASG,QAAQH,MAAR,EAAb;;UAEI,CAACA,OAAOnX,MAAZ,EAAoB;eACX,IAAP;;;gBAGQsX,QAAQnP,CAAR,CAAU,CAAV,CAAV;eACSgP,OAAOhP,CAAP,CAAS,CAAT,CAAT;;aAEO,KAAKuK,OAAL,CAAa,UAACzU,IAAD,EAAU;eACrB4hB,YAAP,CAAoB5hB,IAApB,EAA0BqZ,OAA1B;OADK,CAAP;;;;;;;;;;;;;;;;;;;;yBAmBGA,SAAqB;UAAZ1Q,GAAY,uEAAN,IAAM;;gBACd8W,OAAOpG,OAAP,EAAgBnP,CAAhB,CAAkB,CAAlB,CAAV;;UAGE,CAACmP,OAAD,IACAsD,SAAStD,OAAT,CADA,IAEAuD,eAAevD,OAAf,CAFA,IAGAyD,gBAAgBzD,OAAhB,CAJF,EAKE;eACO,IAAP;;;UAGE,CAAC1Q,GAAD,IAAQ0Q,QAAQyI,UAApB,EAAgC;eACvB,KAAKC,cAAL,CAAoB,UAAC/hB,IAAD,EAAU;kBAC3B4hB,YAAR,CAAqB5hB,IAArB,EAA2BqZ,QAAQyI,UAAnC;SADK,CAAP;;;aAKK,KAAKrN,OAAL,CAAa,UAACzU,IAAD,EAAU;gBACpB6hB,WAAR,CAAoB7hB,IAApB;OADK,CAAP;;;;;;;;;;;;;;;;;;;;;;;uBAsBCgc,UAAU;UACPjZ,OAAOiZ,QAAP,CAAJ,EAAsB;eACb,IAAP;;;UAGIhc,OAAOme,QAAQ,IAAR,CAAb;UACMlE,UACJja,KAAKia,OAAL,IACAja,KAAKgiB,eADL,IAEAhiB,KAAKiiB,qBAFL,IAGAjiB,KAAKkiB,kBAHL,IAIAliB,KAAKmiB,iBAJL,IAKAniB,KAAKoiB,gBANP;;UASI,CAAC7f,UAAU,KAAK2H,CAAL,CAAO,CAAP,CAAV,CAAL,EAA2B;eAClB,KAAP;;;UAGE;eACK+P,QAAQvY,IAAR,CAAa1B,IAAb,EAAmBgc,QAAnB,CAAP;OADF,CAEE,OAAO9V,GAAP,EAAY;gBACJwB,KAAR,iBAA4BsU,QAA5B;;eAEO,KAAP;;;;;;;;;;;;;;;;;;;;;;;;;+BAsBO;UACL0C,WAAW,KAAf;;WAEKpB,IAAL,CAAU,UAACtd,IAAD,EAAU;YACdud,QAAQvd,IAAR,MAAkB,KAAtB,EAA6B;qBAChB,CAAC,EAAEA,KAAKqiB,QAAL,KAAkB,CAACriB,KAAKsiB,YAAN,IAAsB,CAACtiB,KAAKuiB,aAA9C,CAAF,CAAZ;;iBAEO,IAAP;;OAJJ;;aAQO7D,QAAP;;;;;;;;;;;;;;;;uCAaiB;aACV,KAAKF,KAAL,GAAa9B,OAAb,CAAqB,MAArB,EAA6B3a,MAA7B,KAAwC,CAA/C;;;;;;;;;;;;2BASK;aACE,KAAK/B,IAAL,CAAU,CAAC,CAAX,CAAP;;;;;;;;;;;;;;;;;;gCAeyB;UAAjBgc,QAAiB,uEAAN,IAAM;;aAClB,KAAKxa,MAAL,CAAY,UAAC4a,KAAD,EAAQpc,IAAR,EAAiB;oBACT,IAAIic,IAAJ,CAASjc,IAAT,EACtBiZ,QADsB,GAEtB1E,OAFsB,GAGtBuF,IAHsB,CAGjB,UAAC9Z,IAAD;iBAAU,IAAIic,IAAJ,CAASjc,IAAT,EAAekc,EAAf,CAAkBF,QAAlB,CAAV;SAHiB,KAGyB,EAJhB;YACnBpC,KADmB,SAC1BvZ,KAD0B;;cAM5B8c,GAAN,CAAUvD,KAAV;OANK,EAOJ,IAAIqC,IAAJ,EAPI,CAAP;;;;;;;;;;;;;;;;;2BAqBK;UACCuG,SAAS;gBACL,IAAIvG,IAAJ,EADK;gBAEL,IAAIA,IAAJ;OAFV;;aAKOnO,UAAQ2U,GAAR,CACL,KACG/W,MADH,CACU,UAAC1L,IAAD;eAAUud,QAAQvd,IAAR,MAAkB,KAA5B;OADV,EAEG+Y,GAFH,CAEO,UAAC/Y,IAAD,EAAU;YACP0iB,QAAQ,IAAIzG,IAAJ,CAASjc,IAAT,CAAd;;YAEIA,KAAKqiB,QAAT,EAAmB;iBACVK,MAAMhE,QAAN,KAAmB,QAAnB,GAA8B,QAArC,EAA+CvX,IAA/C,CAAoDnH,IAApD;;;;;eAKK,IAAI8N,SAAJ,CAAY,UAACU,OAAD,EAAa;cACxBmU,kBAAkBD,MAAME,EAAN,CAAS;gBAAA,kBACxB;qBACEC,MAAP,CAAc1F,GAAd,CAAkBnd,IAAlB;;;;aAF6B;iBAAA,mBAOvB;qBACC8iB,MAAP,CAAc3F,GAAd,CAAkBnd,IAAlB;;;;;WARoB,CAAxB;SADK,CAAP;OAXJ,EA4BGkK,CA7BE,EA8BL2E,IA9BK,CA8BA;eAAM2T,MAAN;OA9BA,CAAP;;;;;;;;;;;;;;;;;;;6BA8COpiB,MAAkB;UAAZC,KAAY,uEAAJ,EAAI;;UACnB0iB,OAAOjK,MAAM1Y,IAAN,CAAb;UACMJ,OAAO,KAAKA,IAAL,EAAb;;UAEI+iB,QAAQ/iB,KAAK+B,MAAjB,EAAyB;YACnB0D,UAAU1D,MAAV,GAAmB,CAAvB,EAA0B;kBAChBghB,KAAK3iB,IAAL,CAAUA,IAAV,CAAR;;;aAGGQ,UAAL,CAAgBR,IAAhB;;;UAGEJ,KAAK+B,MAAT,EAAiB;cACT3B,IAAN,IAAcJ,KAAKI,IAAL,CAAUA,IAAV,EAAgBC,KAAhB,CAAd;;;aAGK,IAAP;;;;;;;;;;;;;;;;;8BAcQH,KAAK;UACP6iB,OAAO/H,QAAQ9a,GAAR,CAAb;UACMF,OAAO,KAAKA,IAAL,EAAb;;UAEI+iB,QAAQ/iB,KAAK+B,MAAjB,EAAyB;aAClBpB,WAAL,CAAiBT,GAAjB;;;UAGEF,KAAK+B,MAAT,EAAiB;gBACP7B,GAAR,IAAeF,KAAKG,QAAL,CAAcD,GAAd,CAAf;;;aAGK,IAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2BA8BoB;UAAjB8b,QAAiB,uEAAN,IAAM;;aACb,KAAKxa,MAAL,CAAY,UAAC4a,KAAD,EAAQpc,IAAR,EAAiB;;eAE3BA,OAAOA,KAAK2hB,WAAnB,EAAgC;cAC1B,IAAI1F,IAAJ,CAASjc,IAAT,EAAekc,EAAf,CAAkBF,QAAlB,CAAJ,EAAiC;mBACxBI,MAAMe,GAAN,CAAUnd,IAAV,CAAP;;;OAJC,EAOJ,IAAIic,IAAJ,EAPI,CAAP;;;;;;;;;;;;;;;;;;0BAsBa;;;yCAAR+G,MAAQ;cAAA;;;aACN,KAAKvO,OAAL,CAAa,UAACzU,IAAD,EAAU;YACpBijB,SADoB,GACNjjB,KAAK6d,UADC,CACpBoF,SADoB;;;6BAGT,UAACtC,KAAD,EAAW;kBACpBA,MAAMpY,KAAN,CAAYqS,cAAZ,CAAR,EAAqC,UAAC+F,KAAD,EAAW;aAC7CsC,UAAUtC,KAAV,KAAoB,IAAI1W,KAAJ,EAArB,EAAkCwK,OAAlC,CAA0C;kBAAGyO,cAAH,SAAGA,cAAH;qBAAwBA,gBAAxB;aAA1C;WADF;SADF;OAHK,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAqDCvC,OAAkC;UAA3B3E,QAA2B,uEAAhB,IAAgB;UAAVmH,QAAU;;UAC7BC,eAAe,IAAInZ,KAAJ,CAAU,EAAV,CAArB;;UAEInI,WAAWka,QAAX,CAAJ,EAA0B;mBACbA,QAAX;mBACW,IAAX;;;UAGEtY,SAASid,KAAT,CAAJ,EAAqB;mCACRA,KAAX,EAAmBwC,QAAnB;;;cAGM,IAAIlZ,KAAJ,CAAU0W,KAAV,EAAiBnf,MAAjB,CAAwB,UAACyhB,SAAD,EAAYE,QAAZ,EAAsBxC,KAAtB,EAAgC;gBACtDA,MAAMpY,KAAN,CAAYqS,cAAZ,CAAR,EAAqC,UAAC+F,KAAD,EAAW;oBACpCA,KAAV,IAAmBwC,QAAnB;SADF;OADM,CAAR;;WAMK1O,OAAL,CAAa,UAACzU,IAAD,EAAU;YACjB,CAACuC,UAAUvC,IAAV,CAAD,IAAoB,CAAC2c,SAAS3c,IAAT,CAArB,IAAuC,CAAC4c,eAAe5c,IAAf,CAA5C,EAAkE;;;;oBAI5C,CAACib,kBAAkBnB,IAAlB,CAAuB;cAAGT,OAAH,SAAGA,OAAH;iBAAiBA,YAAYrZ,IAA7B;SAAvB,KAA6D,EAA9D,EAAkEK,KAAlE,IAA2EL,KAAK6d,UALjF;YAKboF,SALa,SAKbA,SALa;;cAOfxO,OAAN,CAAc,UAAC0O,QAAD,EAAWxC,KAAX,EAAqB;cAC3B0C,uBAAuBJ,UAAUtC,KAAV,IAAmBsC,UAAUtC,KAAV,KAAoB,IAAI1W,KAAJ,CAAU,EAAV,EAAcqZ,MAAd,CAAqB,OAArB,EAA8B;mBACzF,CADyF;0BAElF,IAFkF;sBAGtF;WAHwD,CAApE;cAKM3d,QAAQ0d,qBAAqB/iB,IAArB,CAA0B,OAA1B,CAAd;;cAEI,CAAC+iB,qBAAqBE,GAArB,CAAyB,UAAzB,CAAL,EAA2C;gBACnCC,cAAc,SAAdA,WAAc,CAAC9N,CAAD,EAAO;mCACJjB,OAArB,CAA6B,iBAA4B;oBAAzBuH,QAAyB,SAAzBA,QAAyB;oBAAfmH,QAAe,SAAfA,QAAe;;oBACnD,IAAIlH,IAAJ,CAASvG,EAAEnQ,MAAX,EAAmB2W,EAAnB,CAAsBF,QAAtB,CAAJ,EAAqC;2BAC1Bta,IAAT,CAAc1B,IAAd,EAAoB0V,CAApB,EAAuB1V,IAAvB,EAA6B2F,KAA7B;;eAFJ;aADF;;wBAQYoN,IAAZ,GAAmB/S,IAAnB;;iBAEKyjB,gBAAL,CAAsB9C,KAAtB,EAA6B6C,WAA7B,EAA0C,KAA1C;iCACqBF,MAArB,CAA4B,UAA5B,EAAwC;qBAC/BE,WAD+B;4BAExB,IAFwB;wBAG5B;aAHZ;;;cAOIN,iBAAiB,SAAjBA,cAAiB,GAAM;iCACNQ,MAArB,CAA4B/d,KAA5B;;gBAEI,CAAC0d,qBAAqB5Y,KAA1B,EAAiC;mBAC1BkZ,mBAAL,CAAyBhD,KAAzB,EAAgC0C,qBAAqB/iB,IAArB,CAA0B,UAA1B,CAAhC,EAAuE,KAAvE;mCACqBojB,MAArB,CAA4B,UAA5B;;WALJ;;uBASapjB,IAAb,CAAkBqgB,KAAlB,EAAyB,CAACyC,aAAa9iB,IAAb,CAAkBqgB,KAAlB,KAA4B,IAAI5M,GAAJ,EAA7B,EAAwC5M,IAAxC,CAA6C+b,cAA7C,CAAzB;;+BAEqB5d,MAArB;mBACSK,QAAQ;aACdA,KAFH,EAEW;8BAAA;8BAAA;;WAFX;SAtCF;OAPF;;aAwDO,SAAS0d,oBAAT,CAA8B1C,KAA9B,EAAqC;YACtClb,UAAU1D,MAAd,EAAsB;kBACZ0D,SAAR,EAAmB,UAACkb,KAAD,EAAW;oBACpBA,MAAMpY,KAAN,CAAYqS,cAAZ,CAAR,EAAqC,UAAC+F,KAAD,EAAW;kBAC1CyC,aAAaG,GAAb,CAAiB5C,KAAjB,CAAJ,EAA6B;6BACdrgB,IAAb,CAAkBqgB,KAAlB,EAAyBlM,OAAzB,CAAiC,UAACyO,cAAD;yBAAoBA,gBAApB;iBAAjC;6BACaQ,MAAb,CAAoB/C,KAApB;;aAHJ;WADF;;;;;qBAYWlM,OAAb,CAAqB,UAACkO,eAAD,EAAqB;0BACxBlO,OAAhB,CAAwB,UAACyO,cAAD;mBAAoBA,gBAApB;WAAxB;SADF;OAdF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BA0HO;aACA,KAAK1hB,MAAL,CAAY,UAAC4a,KAAD,EAAQpc,IAAR;eAAiBoc,MAAMe,GAAN,CAAUnd,KAAK6f,UAAf,CAAjB;OAAZ,EAAyD,IAAI5D,IAAJ,EAAzD,CAAP;;;;;;;;;;;;;;;iCAYW;aACJ,KAAKza,MAAL,CAAY,UAAC4a,KAAD,EAAQpc,IAAR,EAAiB;eAC3BA,OAAOA,KAAK6f,UAAnB,EAA+B;gBACvB1C,GAAN,CAAUnd,IAAV;;OAFG,EAIJ,IAAIic,IAAJ,EAJI,CAAP;;;;;;;;;;;;;;;;;;2BAmBoB;UAAjBD,QAAiB,uEAAN,IAAM;;aACb,KAAKxa,MAAL,CAAY,UAAC4a,KAAD,EAAQpc,IAAR,EAAiB;;eAE3BA,OAAOA,KAAK4jB,eAAnB,EAAoC;cAC9B,IAAI3H,IAAJ,CAASjc,IAAT,EAAekc,EAAf,CAAkBF,QAAlB,CAAJ,EAAiC;mBACxBI,MAAMe,GAAN,CAAUnd,IAAV,CAAP;;;OAJC,EAOJ,IAAIic,IAAJ,EAPI,CAAP;;;;;;;;;;;;;;;;;;;;4BAwBG1Q,UAAUlL,OAAO;UAChBoF,UAAU1D,MAAV,IAAoB,CAApB,IAAyB2B,SAAS6H,QAAT,CAA7B,EAAiD;eACxC,KAAKrB,CAAL,CAAO,CAAP,IAAY,KAAKA,CAAL,CAAO,CAAP,EAAUqB,QAAV,CAAZ,GAAkC9E,SAAzC;;;UAGEhB,UAAU1D,MAAV,IAAoB,CAAxB,EAA2B;sCACXwJ,QAAd,EAAyBlL,KAAzB;;;aAGK,KAAKoU,OAAL,CAAa,UAACzU,IAAD,EAAO2F,KAAP,EAAiB;gBAC3B4F,QAAR,EAAkB,UAAClL,KAAD,EAAQC,OAAR,EAAiB;eAC5BA,OAAL,IAAawB,WAAWzB,KAAX,IAAoBA,MAAML,KAAKM,OAAL,CAAN,EAAkBN,IAAlB,EAAwB2F,KAAxB,CAApB,GAAqDtF,KAAlE;SADF;OADK,CAAP;;;;;;;;;;;;;;;;;;;;wBAqBEwjB,MAAM;UACJ,CAACpe,UAAU1D,MAAf,EAAuB;eACd,KAAK3B,IAAL,CAAU0b,YAAY,KAAKtb,IAAjB,CAAV,CAAP;;;aAGK,KAAKiU,OAAL,CAAa,UAACzU,IAAD,EAAU;eACrB,IAAIic,IAAJ,CAASjc,IAAT,CAAP;;aAEKI,IAAL,CAAU0b,YAAY9b,KAAKQ,IAAjB,CAAV,EAAkCqjB,IAAlC;OAHK,CAAP;;;;;;;;;;;;;;;;6BAiBO;aACA,KAAKpP,OAAL,CAAa,UAACzU,IAAD,EAAU;YACtBkZ,SAASlZ,KAAK6f,UAApB;;YAEI3G,MAAJ,EAAY;iBACH4K,WAAP,CAAmB9jB,IAAnB;;OAJG,CAAP;;;;;;;;;;;;;;;;iCAmBwB;;;yCAAZoe,UAAY;kBAAA;;;aACjB,KAAK3J,OAAL,CAAa,UAACzU,IAAD,EAAU;YACxB,CAACuC,UAAUvC,IAAV,CAAL,EAAsB;;;;6BAIH,UAACI,IAAD,EAAU;cACrBob,KAAKiB,eAAerc,IAAf,EAAqB,CAAC,IAAI6b,IAAJ,CAASjc,IAAT,CAAD,CAArB,CAAX;;cAEI+C,OAAOyY,EAAP,CAAJ,EAAgB;iBACTuI,eAAL,CAAqB3jB,IAArB;WADF,MAEO;iBACA4jB,iBAAL,CAAuBxI,EAAvB,EAA2Bpb,IAA3B;;SANJ;OALK,CAAP;;;;;;;;;;;;;;;;kCA2BsB;;;yCAAT4a,OAAS;eAAA;;;aACf,KAAKvG,OAAL,CAAa,UAACzU,IAAD,EAAU;YACtBid,OAAOjd,KAAKkd,SAAlB;;gBAEQ3a,UAAUvC,IAAV,gBAAR,EAAsC,UAACE,GAAD;iBAAS+c,KAAKgH,MAAL,CAAY/jB,GAAZ,CAAT;SAAtC;OAHK,CAAP;;;;;;;;;;;;;;;;gCAiBkB;;;yCAAPuL,KAAO;aAAA;;;aACX,KAAKgJ,OAAL,CAAa,UAACzU,IAAD,EAAU;YACxB,CAACuC,UAAUvC,IAAV,CAAL,EAAsB;;;;6BAIH,UAACO,GAAD,EAAS;eACrB8c,KAAL,CAAW+C,cAAX,CAA0B7f,GAA1B;SADF;OALK,CAAP;;;;;;;;;;;;;;;;;;;;4BAyBM8Y,SAAS;gBACLoG,OAAOpG,OAAP,CAAV;;UAEMH,SAAS,KAAKsF,KAAL,GAAatF,MAAb,EAAf;;UAEI,CAACA,OAAOnX,MAAZ,EAAoB;eACX,IAAP;;;UAGE/B,OAAOkZ,MAAX;UACI9J,YAAS,MAAb;UACMI,OAAO,KAAKA,IAAL,GAAYgP,KAAZ,GAAoBtU,CAApB,CAAsB,CAAtB,CAAb;UACM6Y,OAAO,KAAKA,IAAL,GAAYvE,KAAZ,GAAoBtU,CAApB,CAAsB,CAAtB,CAAb;;UAEIsF,IAAJ,EAAU;eACDA,IAAP;oBACS,cAAT;OAFF,MAGO,IAAIuT,IAAJ,EAAU;eACRA,IAAP;oBACS,aAAT;;;WAGGvE,KAAL,GAAayF,MAAb;;cAEQ7U,SAAR,EAAgBpP,IAAhB;;;;;;;;;;;;;;;;;;;;;;;0BAoBIoZ,MAAMvL,UAAU7I,UAAU;eACrB,EAAE,GAAGA,QAAL,EAAT,EAA0B,EAAE,GAAG,CAAC,UAAD,CAAL,EAA1B,EAA+C,YAA/C;;iBAEW,IAAIiF,KAAJ,CAAU4D,QAAV,EAAoB3D,CAA/B;;UAEIxH,SAASmL,QAAT,CAAJ,EAAwB;YAClB;mBACO,EAAE,GAAGA,QAAL,EAAT,EAA0B,EAAE,GAAG,CAAC,SAAD,EAAY,KAAZ,CAAL,EAA1B,EAAqD,YAArD;SADF,CAEE,OAAO6H,CAAP,EAAU;gBACJ,IAAIvP,KAAJ,CAAU,iFAAV,CAAN;;;mBAGSlB,MAAM4I,QAAN,EAAgB3D,CAA3B;;;aAGK,KAAK1I,MAAL,CAAY,UAAC4a,KAAD,EAAQpc,IAAR,EAAc2F,KAAd,EAAwB;gBACjCkI,QAAR,EAAkB,UAACxN,KAAD,EAAQ+E,GAAR,EAAgB;cAC1B8e,UAAU,IAAIjI,IAAJ,CAASjc,IAAT,EAAe2K,MAAf,CAAsByO,IAAtB,CAAhB;;mBAES8K,QAAQha,CAAR,CAAU,CAAV,CAAT,EAAuB7J,KAAvB,EAA8B+E,GAA9B,EAAmCyI,QAAnC,EAA6C7N,IAA7C,EAAmD2F,KAAnD;;gBAEMwX,GAAN,CAAU+G,OAAV;SALF;OADK,EAQJ,IAAIjI,IAAJ,EARI,CAAP;;;;;;;;;;;;;;;;2BAqBK;aACE,KAAKxH,OAAL,CAAa,UAACzU,IAAD,EAAU;oBACLA,IADK;YACpB6d,UADoB,SACpBA,UADoB;;;eAGrB,IAAI5B,IAAJ,CAASjc,IAAT,CAAP;;YAEIA,KAAKO,GAAL,CAAS,SAAT,EAAoBoL,OAApB,CAA4B,MAA5B,MAAwC,CAA5C,EAA+C;eACxCpL,GAAL,CAAS,SAAT,EAAoBsd,WAAW6D,eAA/B;;;mBAGSA,eAAX,GAA6B,EAA7B;OATK,CAAP;;;;;;;;;;;;;;;;;;yBAyBGhhB,OAAM;UACL,CAAC+E,UAAU1D,MAAf,EAAuB;eACd,KAAKzB,IAAL,CAAUua,YAAV,CAAP;;;aAGK,KAAKpG,OAAL,CAAa,UAACzU,IAAD,EAAO2F,KAAP,EAAiB;YAC7Bwe,MAAMnkB,KAAK6a,YAAL,CAAZ;;YAEIoB,IAAJ,CAASjc,IAAT,EAAeM,IAAf,CACEua,YADF,EAEE/Y,WAAWpB,KAAX,IACIA,MAAKyjB,GAAL,EAAUnkB,IAAV,EAAgB2F,KAAhB,CADJ,GAEIjF,KAJN;OAHK,CAAP;;;;;;;;;;;;;;;;;;;;+BA0BSN,MAAMyJ,WAAW;;;aACnB,KAAK4K,OAAL,CAAa,UAACzU,IAAD,EAAU;eACrB,IAAIic,IAAJ,CAASjc,IAAT,CAAP;;YAEI,YAAU+B,MAAV,GAAmB,CAAnB,GAAuB,CAAC/B,KAAKokB,OAAL,CAAahkB,IAAb,CAAxB,GAA6CyJ,SAAjD,EAA4D;eACrDzJ,IAAL,CAAUA,IAAV,EAAgB,EAAhB;SADF,MAEO;eACAQ,UAAL,CAAgBR,IAAhB;;OANG,CAAP;;;;;;;;;;;;;;;;;;;;gCAyBUF,KAAK2J,WAAW;aACnB,CAACpE,UAAU1D,MAAV,GAAmB,CAAnB,GAAuB,CAAC,KAAKsiB,QAAL,CAAcnkB,GAAd,CAAxB,GAA6C2J,SAA9C,IACH,KAAK1J,QAAL,CAAcD,GAAd,CADG,GAEH,KAAKS,WAAL,CAAiBT,GAAjB,CAFJ;;;;;;;;;;;;;;;;;yBAoBY;UAAXokB,KAAW,uEAAH,CAAG;;eACH,CAACA,KAAD,CAAT,EAAkB,CAAC,CAAC,SAAD,EAAY,KAAZ,CAAD,CAAlB,EAAwC,SAAxC;;cAEQ3hB,OAAO2hB,KAAP,CAAR;;aAEO,KAAK9iB,MAAL,CAAY,UAAC4a,KAAD,EAAQpc,IAAR,EAAiB;YAC9B8D,IAAIwgB,KAAR;;eAEOxgB,OAAO9D,IAAd,EAAoB;iBACXA,KAAK6f,UAAZ;;;cAGI1C,GAAN,CAAUnd,IAAV;OAPK,EAQJ,IAAIic,IAAJ,EARI,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gCAoCOsI,WAAW;eACT,CAACA,SAAD,CAAT,EAAsB,CAAC,aAAD,CAAtB,EAAuC,eAAvC;;UAEIA,SAAJ,EAAe;eACN,KAAK9P,OAAL,CAAa,kBAAoB;cAAjBoJ,UAAiB,UAAjBA,UAAiB;;qBAC3B2G,UAAX,CAAsBrd,IAAtB,CAA2Bod,SAA3B;SADK,CAAP;;;UAKIE,SAAS,IAAIxa,KAAJ,CAAU,EAAEwa,QAAQ,IAAV,EAAV,CAAf;;WAGG/Y,MADH,CACcwP,aADd,aAEGzG,OAFH,CAEW,UAACzU,IAAD,EAAO2F,KAAP,EAAiB;YACpB4X,QAAQvd,IAAR,MAAkB,MAAtB,EAA8B;cACxB0kB,aAAa,EAAED,QAAQ,IAAV,EAAjB;cACME,OAAO,IAAI1I,IAAJ,CAASjc,IAAT,CAAb;cACM4kB,SAASD,KAAK7K,IAAL,CAAUoB,aAAV,CAAf;;iBAEOzG,OAAP,CAAe,UAACoQ,KAAD,EAAQlf,KAAR,EAAkB;0BACjBkf,KAAd,EAAqBlf,KAArB,EAA4B+e,UAA5B;WADF;;iBAIO5X,UAAP,CAAkB4X,UAAlB;;uBAEaA,WAAWD,MAAxB;;eAEKK,QAAL,CAAc,UAAd,EAA0B,EAA1B,EAA8B;mBACrB,CAACJ,UADoB;oBAEpBA;WAFV;;iBAKOE,OAAOnQ,OAAP,CAAe,UAACoQ,KAAD,EAAW;gBACzBE,aAAa,CAACL,cAAc,EAAf,EAAmBG,MAAMrkB,IAAzB,CAAnB;;gBAEIyb,IAAJ,CAAS4I,KAAT,EAAgBC,QAAhB,CAAyB,UAAzB,EAAqC,EAArC,EAAyC;qBAChC,CAACC,UAD+B;qBAEhCA,cAAc;aAFvB;WAHK,CAAP;;;YAUEA,aAAa,EAAEN,QAAQ,IAAV,EAAjB;;sBAEczkB,IAAd,EAAoB2F,KAApB,EAA2Bof,UAA3B;eACOjY,UAAP,CAAkBiY,UAAlB;;qBAEa,CAACA,WAAWN,MAAX,IAAqB,EAAtB,EAA0BzkB,KAAKQ,IAA/B,CAAb;;YAEIyb,IAAJ,CAASjc,IAAT,EAAe8kB,QAAf,CAAwB,UAAxB,EAAoC,EAApC,EAAwC;iBAC/B,CAACC,UAD8B;iBAE/BA,cAAc;SAFvB;OAtCJ;;eA4CSC,aAAT,CAAuBH,KAAvB,EAA8Blf,KAA9B,EAAqC8e,MAArC,EAA6C;YACvC;cACEI,MAAMI,QAAN,IAAkB,CAACJ,MAAMI,QAAN,CAAeC,KAAtC,EAA6C;kBACrC,IAAI/e,KAAJ,CAAU0e,MAAMM,iBAAhB,CAAN;;;gBAGItH,UAAN,CAAiB2G,UAAjB,CAA4B/P,OAA5B,CAAoC,UAAC8P,SAAD,EAAe;sBACvCM,MAAMxkB,KAAhB,EAAuBwkB,KAAvB,EAA8Blf,KAA9B;WADF;SALF,CAQE,OAAOO,GAAP,EAAY;WACXue,OAAOA,MAAP,GAAgBA,OAAOA,MAAP,IAAiB,EAAlC,EAAsCI,MAAMrkB,IAA5C,IAAoD0F,GAApD;;;;UAIAue,OAAOW,KAAP,CAAa,UAAC1d,KAAD;eAAW3E,OAAO2E,KAAP,CAAX;OAAb,CAAJ,EAA4C;eACnC,IAAP;;;aAGK+c,OAAOva,CAAP,CAASua,MAAhB;;;;;;;;;;;;;;;;;;0BAeI7F,QAAO;aACJ,KAAKte,IAAL,CAAUoJ,KAAV,CAAgB,IAAhB,EAAsB,IAAIqK,GAAJ,CAAQtO,SAAR,EAAmBwG,OAAnB,CAA2B,OAA3B,EAAoC/B,CAA1D,CAAP;;;;2BApsCgB;UACVlK,OAAO,KAAKkK,CAAL,CAAO,CAAP,CAAb;;UAEIyS,SAAS3c,IAAT,CAAJ,EAAoB;eACXA,KAAKqlB,WAAZ;;;qBAUE,KAAKC,OAAL,EAdY;UAQdC,cARc,YAQdA,cARc;UASdC,iBATc,YASdA,iBATc;UAUdC,SAVc,YAUdA,SAVc;UAWd5G,MAXc,YAWdA,MAXc;UAYd6G,UAZc,YAYdA,UAZc;UAadC,aAbc,YAadA,aAbc;;UAeVpJ,UAAUqJ,GAAGL,cAAH,IAAqBK,GAAGJ,iBAAH,CAArC;UACMlJ,WAAWsJ,GAAGF,UAAH,IAAiBE,GAAGD,aAAH,CAAlC;;aAEOC,GAAG/G,MAAH,IAAaxC,cAAcoJ,SAAd,EAAyB,CAACnJ,QAAD,EAAWC,OAAX,CAAzB,CAApB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2BA0Be;UACTvc,OAAO,KAAKkK,CAAL,CAAO,CAAP,CAAb;;UAEIyS,SAAS3c,IAAT,CAAJ,EAAoB;eACXA,KAAK6lB,UAAZ;;;sBAUE,KAAKP,OAAL,EAdW;UAQbQ,eARa,aAQbA,eARa;UASbC,gBATa,aASbA,gBATa;UAUbN,SAVa,aAUbA,SAVa;UAWbO,WAXa,aAWbA,WAXa;UAYbC,YAZa,aAYbA,YAZa;UAabrH,KAba,aAabA,KAba;;UAeTrC,UAAUqJ,GAAGE,eAAH,IAAsBF,GAAGG,gBAAH,CAAtC;UACMzJ,WAAWsJ,GAAGI,WAAH,IAAkBJ,GAAGK,YAAH,CAAnC;;aAEOL,GAAGhH,KAAH,IAAYvC,cAAcoJ,SAAd,EAAyB,CAACnJ,QAAD,EAAWC,OAAX,CAAzB,CAAnB;;;;2BAiWS;aACFgB,QAAQ,KAAKrT,CAAL,CAAO,CAAP,CAAR,CAAP;;;;2BAmNgB;UACVlK,OAAO,KAAKkK,CAAL,CAAO,CAAP,CAAb;;UAEIyS,SAAS3c,IAAT,CAAJ,EAAoB;eACXA,KAAKkmB,WAAZ;;;sBAYE,KAAKZ,OAAL,EAhBY;UAQdC,cARc,aAQdA,cARc;UASdC,iBATc,aASdA,iBATc;UAUdC,SAVc,aAUdA,SAVc;UAWd5G,MAXc,aAWdA,MAXc;UAYdsH,SAZc,aAYdA,SAZc;UAadC,YAbc,aAadA,YAbc;UAcdV,UAdc,aAcdA,UAdc;UAedC,aAfc,aAedA,aAfc;;UAiBVpJ,UAAUqJ,GAAGL,cAAH,IAAqBK,GAAGJ,iBAAH,CAArC;UACMlJ,WAAWsJ,GAAGF,UAAH,IAAiBE,GAAGD,aAAH,CAAlC;;aAEOC,GAAG/G,MAAH,IAAa+G,GAAGO,SAAH,CAAb,GAA6BP,GAAGQ,YAAH,CAA7B,GAAgD5J,cAAciJ,SAAd,EAAyB,CAAClJ,OAAD,EAAUD,QAAV,CAAzB,CAAvD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2BA4Be;UACTtc,OAAO,KAAKkK,CAAL,CAAO,CAAP,CAAb;;UAEIyS,SAAS3c,IAAT,CAAJ,EAAoB;eACXA,KAAKqmB,UAAZ;;;sBAYE,KAAKf,OAAL,EAhBW;UAQbQ,eARa,aAQbA,eARa;UASbC,gBATa,aASbA,gBATa;UAUbN,SAVa,aAUbA,SAVa;UAWba,UAXa,aAWbA,UAXa;UAYbC,WAZa,aAYbA,WAZa;UAabP,WAba,aAabA,WAba;UAcbC,YAda,aAcbA,YAda;UAebrH,KAfa,aAebA,KAfa;;UAiBTrC,UAAUqJ,GAAGE,eAAH,IAAsBF,GAAGG,gBAAH,CAAtC;UACMzJ,WAAWsJ,GAAGI,WAAH,IAAkBJ,GAAGK,YAAH,CAAnC;;aAEOL,GAAGhH,KAAH,IAAYgH,GAAGU,UAAH,CAAZ,GAA6BV,GAAGW,WAAH,CAA7B,GAA+C/J,cAAciJ,SAAd,EAAyB,CAAClJ,OAAD,EAAUD,QAAV,CAAzB,CAAtD;;;;2BA4XgB;aACT/a,YAAY,KAAKwG,EAAjB,CAAP;;;;EAvvEegM;;AA24EnBvN,iBAAiByV,KAAK7T,SAAtB,qBACGtB,QAAOvF,WADV,EACwB,MADxB;;;;;;;;AAUA,IAAMilB,MAAM,IAAIvK,IAAJ,CAASpc,QAAT,CAAZ;;;;;;;;AAQA,IAAM4mB,MAAM,IAAIxK,IAAJ,CAASvB,cAAT,CAAZ;;;;;;;;AAQA,IAAMja,OAAO,IAAIwb,IAAJ,CAASvB,eAAee,eAAxB,CAAb;;;;;;;;AAQA,IAAMiL,OAAO,IAAIzK,IAAJ,CAASvB,eAAegM,IAAxB,CAAb;;;;;;;;AAQA,IAAMC,OAAO,IAAI1K,IAAJ,CAASvB,eAAeiM,IAAxB,CAAb;;AAEA,IAAMjN,WAAW,IAAI3F,GAAJ,CAAQ9S,YAAR,EAAsBqM,MAAtB,CAA6BpM,WAA7B,EAA0CgJ,CAA3D;AACA,IAAMuB,QAAQ,IAAIsI,GAAJ,CAAQ2F,QAAR,EAAkBX,GAAlB,CAAsB,UAACK,IAAD;SAAU,IAAI1C,GAAJ,CAAQ0C,IAAR,EAAc6G,WAAd,GAA4B/V,CAAtC;CAAtB,EAA+DA,CAA7E;;AAEA9D,wBAAwB6V,KAAK7T,SAA7B,EAAwCqD,KAAxC,EAA+C,UAACzL,IAAD,EAAOsE,CAAP;SAAa,YAAY;WAC/D,KAAKqG,MAAL,CAAYjB,KAAZ,CAAkB,IAAlB,EAAwB,IAAIqK,GAAJ,CAAQtO,SAAR,EAAmBwG,OAAnB,CAA2ByN,SAASpV,CAAT,CAA3B,EAAwC4F,CAAhE,CAAP;GAD6C;CAA/C;;AAIA9D,wBAAwB6V,KAAK7T,SAA7B,EAAwCtH,gBAAxC,EAA0D,UAACsO,SAAD;SAAY,YAAY;QAC1EkR,MAAM,KAAKA,GAAL,EAAZ;;QAEIA,GAAJ,EAAS;aACAA,IAAIlR,SAAJ,EAAY1F,KAAZ,CAAkB4W,GAAlB,EAAuB7a,SAAvB,CAAP;;GAJsD;CAA1D;;AAQAW,wBAAwB6V,KAAK7T,SAA7B,EAAwCrH,iBAAxC,EAA2D,UAACqO,SAAD;SAAY,YAAY;QAC3EkR,MAAM,KAAKA,GAAL,EAAZ;;QAEIA,GAAJ,EAAS;UACHlR,SAAJ,EAAY1F,KAAZ,CAAkB4W,GAAlB,EAAuB7a,SAAvB;;;WAGK,IAAP;GAPyD;CAA3D;;;;;;;;AAgBA,SAASga,MAAT,CAAgBzf,IAAhB,EAAsB;MAChBmc,OAAOnc,IAAP,CAAJ,EAAkB;WACTA,IAAP;;;MAGE0D,SAAS1D,IAAT,CAAJ,EAAoB;WACX8Z,MAAK9Z,IAAL,CAAP;;;SAGK,IAAIic,IAAJ,CAASjc,IAAT,CAAP;;;;;;;;;;AAUF,SAASmc,MAAT,CAAgB9b,KAAhB,EAAuB;SACdA,iBAAiB4b,IAAxB;;;;;;;;;;AAUF,SAASU,QAAT,CAAkBtc,KAAlB,EAAyB;SAChBkB,YAAYlB,KAAZ,MAAuB,QAA9B;;;;;;;;;;AAUF,SAASuc,cAAT,CAAwBvc,KAAxB,EAA+B;SACtBkB,YAAYlB,KAAZ,MAAuB,cAA9B;;;;;;;;;;AAUF,SAASwc,kBAAT,CAA4Bxc,KAA5B,EAAmC;SAC1BkB,YAAYlB,KAAZ,MAAuB,kBAA9B;;;;;;;;;;AAUF,SAAS0c,WAAT,CAAqB1c,KAArB,EAA4B;SACnBkB,YAAYlB,KAAZ,MAAuB,cAA9B;;;;;;;;;;AAUF,SAASyc,eAAT,CAAyBzc,KAAzB,EAAgC;MACxBumB,MAAMrlB,YAAYlB,KAAZ,CAAZ;;SAEOumB,QAAQ,SAAR,IAAqBA,QAAQ,MAApC;;;;;;;;;AASF,SAASzI,OAAT,CAAiBne,IAAjB,EAAuB;SACduC,UAAUvC,KAAKkK,CAAL,CAAO,CAAP,CAAV,IAAuBlK,KAAKkK,CAAL,CAAO,CAAP,CAAvB,GAAmCyQ,QAA1C;;;;;;;;;AASF,SAAS4C,OAAT,CAAiBvd,IAAjB,EAAuB;SACbA,QAAQA,KAAK6mB,QAAb,IAAyB7mB,KAAK6mB,QAAL,CAAc9O,WAAd,EAA1B,IAA0D,EAAjE;;;;;;;;;AASF,SAASiF,aAAT,CAAuBhd,IAAvB,EAA6B;MACvB,CAAC,GAAGqF,cAAH,CAAkB3D,IAAlB,CAAuB1B,IAAvB,EAA6B,YAA7B,CAAD,IAA+C,CAAC2c,SAAS3c,IAAT,CAApD,EAAoE;;;;;;;;;;;WAW3DuG,cAAP,CAAsBvG,IAAtB,EAA4B,YAA5B,EAA0C;aACjC;yBACY,EADZ;mBAEM,EAFN;aAGAud,QAAQvd,IAAR,MAAkB,QAAlB,IAA8BA,KAAK8mB,UAAL,CAAgB,IAAhB,CAH9B;oBAIO,IAAI/S,GAAJ,CAAQ,EAAR;;KALhB;GAXF,MAmBO,IAAI4I,SAAS3c,IAAT,KAAkB,CAACib,kBAAkBqC,IAAlB,CAAuB;QAAGjE,OAAH,UAAGA,OAAH;WAAiBA,YAAYrZ,IAA7B;GAAvB,CAAvB,EAAkF;sBACrEmH,IAAlB,CAAuB;eACZnH,IADY;iBAEV;KAFb;;;;AAOJgB,aAAa,CAAb,EAAgBmG,IAAhB,CAAqB;SACZ,eAACnH,IAAD;WACLuC,UAAUvC,IAAV,KACA2c,SAAS3c,IAAT,CADA,IAEA4c,eAAe5c,IAAf,CAFA,IAGA8c,gBAAgB9c,IAAhB,CAHA,IAIA6c,mBAAmB7c,IAAnB,CAJA,IAKA,8BAA8BwC,IAA9B,CAAmCjB,YAAYvB,IAAZ,CAAnC,CANK;GADY;OASdic;CATP;;;;;;;;;;;AAqBA,SAASnC,KAAT,CAAckC,QAAd,EAA+C;MAAvBjJ,IAAuB,uEAAhB2H,cAAgB;;SACtC,IAAIuB,IAAJ,CACL1Z,UAAUwQ,IAAV,KAAmB6J,eAAe7J,IAAf,CAAnB,GACIA,KAAKgU,gBAAL,CAAsBne,OAAOoT,QAAP,CAAtB,CADJ,GAEI,EAHC,CAAP;;;;;;;;;;;;;;;AAmBF,SAASgL,SAAT,CAAmBvmB,IAAnB,EAAyB0Y,kBAAzB,EAA6C;MACrClB,OAAOgP,aAAaxmB,IAAb,EAAmB0Y,kBAAnB,CAAb;MACM+N,WAAWT,IAAIS,QAAJ,EAAjB;MACMlnB,OAAO,IAAIic,IAAJ,CAASiL,SAAShd,CAAT,CAAW,CAAX,EAAcid,OAAvB,CAAb;;OAEK1S,OAAL,CAAa,SAAS2S,WAAT,CAAqBxO,IAArB,EAA2B;QAEpCpY,IAFoC,GAOlCoY,IAPkC,CAEpCpY,IAFoC;QAGpCsY,KAHoC,GAOlCF,IAPkC,CAGpCE,KAHoC;QAIpCzY,KAJoC,GAOlCuY,IAPkC,CAIpCvY,KAJoC;QAKpC6Y,MALoC,GAOlCN,IAPkC,CAKpCM,MALoC;QAMpCD,QANoC,GAOlCL,IAPkC,CAMpCK,QANoC;;;QAShC4G,aAAa3G,OAAOlZ,IAAP,IAAeA,IAAlC;QACMqZ,UAAUwG,WAAWlV,MAAX,CAAkBnK,IAAlB,CAAhB;;SAEKR,IAAL,GAAYqZ,OAAZ;;QAEIhZ,KAAJ,EAAW;cACDK,IAAR,CAAaL,KAAb;;;QAGEyY,KAAJ,EAAW;cACD1Y,IAAR,CAAa,IAAI6J,KAAJ,CAAU6O,KAAV,EAAiBC,GAAjB,CAAqB,UAAC1Y,KAAD;eAChCA,UAAU,IAAV,GAAiB,EAAjB,GAAsBA,KADU;OAArB,EAEV6J,CAFH;;;QAKE1J,SAAS,UAAb,EAAyB;WAClBR,IAAL,GAAY,IAAIic,IAAJ,CAAS5C,QAAQ/Y,IAAR,CAAa,SAAb,CAAT,CAAZ;;;QAGE2Y,QAAJ,EAAc;eACHxE,OAAT,CAAiB2S,WAAjB;;GA7BJ;;SAiCO,IAAInL,IAAJ,CAASjc,IAAT,CAAP;;;;;;;;;;;;;;AAcF,SAAS4lB,EAAT,CAAYyB,IAAZ,EAAkB;SACT1kB,OAAOiG,OAAOye,IAAP,EAAa1lB,OAAb,CAAqB,KAArB,EAA4B,EAA5B,CAAP,CAAP;CAGF;;ACn2FO,SAAS2lB,cAAT,CAAwBC,KAAxB,EAA+B;MAC9BC,MAD8B;;;;;;;;;;uCASjB;kBAYX,KAAKzf,EAZM;qCAEb0f,WAFa,CAGX1f,EAHW;YAII2f,iBAJJ,sBAITD,WAJS;YAKOE,oBALP,sBAKTC,cALS;YAMK3O,QANL,sBAMT4O,YANS;YASCC,WATD,OASbD,YATa;YAUbD,cAVa,OAUbA,cAVa;YAWbG,UAXa,OAWbA,UAXa;;YAaXnO,cAAJ;;YAEIkO,YAAY/lB,MAAhB,EAAwB;;;;aAInBimB,WAAL,GAAmBN,iBAAnB;aACKO,cAAL,GAAsBN,oBAAtB;;YAEII,UAAJ,EAAgB;kBACN9O,SAASa,IAAT,CAAc;gBAAS+M,QAAT,QAAGrmB,IAAH;mBAAwBqmB,0BAAyBkB,UAAjD;WAAd,CAAR;;cAEI,CAACnO,KAAL,EAAY;gBACNV,SAAS,IAAb;;;mBAIE,CAACA,SAASA,OAAOnR,EAAP,CAAU0f,WAApB,KACG,EAAE7N,QAAQV,OAAOnR,EAAP,CAAUmgB,OAAV,CAAkBpO,IAAlB,CAAuB;kBAAqBqO,UAArB,SAAGpgB,EAAH,CAASggB,UAAT;qBAAwCI,eAAeJ,UAAvD;aAAvB,CAAV,CADH,IAEG7O,OAAOnR,EAAP,CAAU0f,WAAV,CAAsB1f,EAAtB,CAAyBvH,IAAzB,KAAkC,SAHvC,EAIE;;gBAEEoZ,KAAJ,EAAW;mBACJoO,WAAL,GAAmB9O,MAAnB;mBACK+O,cAAL,GAAsBL,cAAtB;oBACMvnB,KAAN,GAAc;0BACFuZ,MAAMvZ,KAAN,CAAY0H,EAAZ,CAAe8f;eAD3B;;;;eAMCzL,KAAL,GAAaxC,SAASA,MAAMvZ,KAAN,CAAY4Y,QAAZ,CAAqBlX,MAA9B,GACT6X,MAAMvZ,KAAN,CAAY4Y,QADH,GAET,IAFJ;SAtBF,MAyBO;eACAmD,KAAL,GAAanD,QAAb;;;;;IAxDesO,KADe;;QAAA,CAE3BL,QAF2B,GAEhB,KACd,aADc,GAEd,mBAFc,GAGd,+BAHc,GAId,qCAJc,GAKd,IAP8B;;;SA8D7B;UACC,SADD;WAEEM;GAFT;;;ACvDK,SAASY,aAAT,CAAuBb,KAAvB,EAA8Bc,WAA9B,EAA2C;MAC1CC,KAD0C;;;mBAElCC,IAAZ,EAAkB;;;+GACVA,IADU;;6BAIdjhB,IAJc;uCAKZkhB,IALY;UAKNC,QALM,mCAKK,OALL;wCAMZ9iB,KANY;UAML+iB,SANK,oCAMO,QANP;;;aAUT,MAAK3gB,EAAZ,EAAgB;cACR,IAAIkC,KAAJ,CAAU,EAAV,CADQ;eAEP,IAAI8J,GAAJ,CAAQ,EAAR,CAFO;aAGT,MAAKzM,IAAL,CAAUqhB,GAAV,IAAiBliB,SAHR;0BAAA;;OAAhB;;;;;;oCASY;;;aACPmiB,KAAL,CAAW,UAAX,EAAuB,aAAvB,EAAsC,eAAtC,EAAuD,YAAM;oBAWvD,OAAK7gB,EAXkD;cAEzD8f,YAFyD,OAEzDA,YAFyD;cAGzDgB,IAHyD,OAGzDA,IAHyD;cAIzDpB,WAJyD,OAIzDA,WAJyD;cAKzDqB,UALyD,OAKzDA,UALyD;cAMzDlB,cANyD,OAMzDA,cANyD;cAOzDmB,KAPyD,OAOzDA,KAPyD;cAQzDN,QARyD,OAQzDA,QARyD;cASzDC,SATyD,OASzDA,SATyD;cAUzDM,GAVyD,OAUzDA,GAVyD;cAajDC,MAbiD,UAazD3hB,IAbyD,CAajD2hB,MAbiD;;cAerDC,QAAQL,KAAK3e,CAAnB;cACMif,UAAU,EAAhB;cACMC,UAAU,EAAhB;sBAII,OAAK9hB,IArBkD;cAmBzDX,MAnByD,SAmBzDA,GAnByD;cAoBzD0iB,QApByD,SAoBzDA,QApByD;;;cAuBvD3mB,SAASiE,MAAT,CAAJ,EAAmB;qBACX1B,MAAM0B,MAAN,EAAWuD,CAAjB;;;cAGEtI,QAAQ+E,MAAR,KAAgB7E,WAAWmnB,MAAX,CAApB,EAAwC;qBAChC,IAAIlV,GAAJ,CAAQpN,MAAR,EACH+J,KADG,GAEHmE,IAFG,CAEEoU,MAFF,EAGH/e,CAHH;;;cAMEpI,WAAWunB,QAAX,CAAJ,EAA0B;uBACb,CAACA,QAAD,CAAX;;;cAGEznB,QAAQynB,QAAR,CAAJ,EAAuB;oBACbA,QAAR,EAAkB,UAAC3d,MAAD,EAAY;uBACtB,IAAIzB,KAAJ,CAAUtD,MAAV,EAAe+E,MAAf,CAAsBA,MAAtB,EAA8BxB,CAApC;aADF;;;cAKED,KAAJ,CAAUtD,MAAV,EAAe8N,OAAf,CAAuB,UAAC+T,IAAD,EAAO7iB,KAAP,EAAiB;kBAChC8iB,QAAN,IAAkBD,IAAlB;kBACME,SAAN,IAAmB/iB,KAAnB;;gBAEMgjB,MAAMlB,YAAY1f,EAAZ,CAAeuhB,QAAf,CAAwBN,GAAxB,EAA6B,IAA7B,EAAmC,IAAnC,EAAyC,KAAzC,EAAgD,KAAhD,SAAZ;;oBAEQL,GAAR,IAAeQ,QAAQR,GAAR,KAAgB,EAA/B;oBACQA,GAAR,EAAahjB,KAAb,IAAsB,IAAtB;oBACQA,KAAR,IAAiBgjB,GAAjB;WARF;;gBAWMF,QAAN,IAAkB,IAAlB;gBACMC,SAAN,IAAmB,IAAnB;;eAEKjU,OAAL,CAAa,UAACQ,KAAD,EAAQ0T,GAAR,EAAgB;gBACvB,CAACQ,QAAQR,GAAR,CAAL,EAAmB;oBACXlU,OAAN,CAAc,UAAC8U,IAAD,EAAU;qBACjBxhB,EAAL,CAAQkc,MAAR;eADF;;;;;kBAOI/O,MAAN,CAAa/R,OAAO8E,IAAP,CAAYkhB,QAAQR,GAAR,CAAZ,EAA0B5mB,MAAvC,EAA+C0S,OAA/C,CAAuD,UAAC8U,IAAD,EAAU;mBAC1DxhB,EAAL,CAAQkc,MAAR;aADF;WATF;;cAcIuF,kBAAJ;;cAEIvf,KAAJ,CAAUtD,MAAV,EAAe8N,OAAf,CAAuB,UAAC+T,IAAD,EAAO7iB,KAAP,EAAiB;gBAChCgjB,MAAMS,QAAQzjB,KAAR,CAAZ;gBACI8jB,cAAJ;;gBAEIP,MAAMP,GAAN,KAAcO,MAAMP,GAAN,EAAW5mB,MAA7B,EAAqC;sBAC3BonB,QAAQR,GAAR,EAAahjB,KAAb,IAAsBkjB,KAAK3e,CAAL,CAAOye,GAAP,EAAYnU,KAAZ,EAA9B;oBACMzM,EAAN,CAASghB,KAAT,CAAeL,SAAf,IAA4B/iB,KAA5B;oBACMoC,EAAN,CAASghB,KAAT,CAAeN,QAAf,IAA2BD,IAA3B;;kBAEIiB,MAAM1hB,EAAN,CAASyhB,SAAT,KAAuBA,SAAvB,IAAoCA,SAAxC,EAAmD;0BACvCzhB,EAAV,CAAa2hB,aAAb,CAA2BD,MAAM1hB,EAAN,CAASof,OAApC,EAA6C,IAA7C;;aANJ,MAQO;sBACGgC,QAAQR,GAAR,EAAahjB,KAAb,IAAsB0iB,YAAY;sBAClC;oCAAA;sCAAA;4BAAA;8BAAA;wBAKE,SALF;4BAMMR;iBAP4B;8BAAA;sCAAA;mCAAA;wCAAA;8CAAA;;eAAZ,CAA9B;;;kBAkBI9f,EAAN,CAASyhB,SAAT,GAAqBA,SAArB;wBACYC,KAAZ;WAhCF;;iBAmCK1hB,EAAL,CAAQ8gB,IAAR,GAAe,IAAI5e,KAAJ,CAAUkf,OAAV,EAAmBpQ,GAAnB,CAAuB,UAAC9D,KAAD;mBACpC,IAAIhL,KAAJ,CAAUgL,KAAV,EAAiBjB,MAAjB,EADoC;WAAvB,CAAf;SA7GF;;;;IArBgBuT,KAD4B;;SA0IzC;UACC,QADD;WAEEe;GAFT;;;AC9IK,SAASqB,iBAAT,CAA2BpC,KAA3B,EAAkCc,WAAlC,EAA+C;MAC9CuB,SAD8C;;;;;;;;;;uCAEjC;;;YACPd,UADO,GACQ,KAAK/gB,EADb,CACP+gB,UADO;oBAKX,KAAKxhB,IALM;YAGbmgB,WAHa,SAGbA,WAHa;YAIbG,cAJa,SAIbA,cAJa;;YAMXiC,YAAY,IAAhB;;aAEKjB,KAAL,CAAW,YAAX,EAAyB,YAAM;cACzBiB,SAAJ,EAAe;wBACD,KAAZ;;;;;oBAWE,OAAK9hB,EAboB;cAQ3BkR,QAR2B,OAQ3BA,QAR2B;cAS3B6Q,MAT2B,OAS3BA,MAT2B;cAU3B5Q,MAV2B,OAU3BA,MAV2B;cAW3B6Q,gBAX2B,OAW3BA,gBAX2B;cAY3B5C,OAZ2B,OAY3BA,OAZ2B;cAcrB9mB,KAdqB,GAcX,OAAKiH,IAdM,CAcrBjH,KAdqB;;;mBAgBpBoU,OAAT,CAAiB,UAACuV,KAAD,EAAW;kBACpBjiB,EAAN,CAASkc,MAAT,CAAgB,IAAhB;WADF;iBAGOxP,OAAP,CAAe,UAACwV,KAAD,EAAW;kBAClBliB,EAAN,CAASkc,MAAT,CAAgB,IAAhB;WADF;kBAGQA,MAAR;;cAEI/K,kBAAkBqO,KAAtB,EAA6B;mBACpBxf,EAAP,CAAUmiB,aAAV,CAAwB/C,OAAxB;;;iBAGGpf,EAAL,CAAQkR,QAAR,GAAmB,IAAIlF,GAAJ,CAAQ,EAAR,CAAnB;iBACKhM,EAAL,CAAQ+hB,MAAR,GAAiB,IAAI/V,GAAJ,CAAQ,EAAR,CAAjB;iBACKhM,EAAL,CAAQgiB,gBAAR,GAA2BA,iBAAiBre,MAAjB,CAAwB,gBAAyC;gBAAtCye,QAAsC,QAAtCA,QAAsC;gBAA5BC,OAA4B,QAA5BA,OAA4B;gBAAnBC,YAAmB,QAAnBA,YAAmB;;gBACtFA,YAAJ,EAAkB;qBACT,IAAP;;;gBAGI1kB,QAAQwkB,SAASxe,OAAT,CAAiBye,OAAjB,CAAd;;gBAEIzkB,UAAU,CAAC,CAAf,EAAkB;uBACPuP,MAAT,CAAgBvP,KAAhB,EAAuB,CAAvB;;WARuB,CAA3B;iBAWKoC,EAAL,CAAQof,OAAR,GAAkB,IAAIlL,IAAJ,EAAlB;;cAEIuN,kBAAJ;;cAEIzV,GAAJ,CAAQ1T,SAAS,EAAjB,EAAqBoU,OAArB,CAA6B,UAACuV,KAAD,EAAW;wBAC1B3B,YAAY;oBAChB2B,KADgB;4BAAA;oCAAA;iCAAA;sCAAA;4CAAA;;aAAZ,CAAZ;WADF;SA7CF;;;;IAToBzC,KAD4B;;SAsE7C;UACC,YADD;WAEEqC;GAFT;;;ACzEK,SAASU,WAAT,CAAqB/C,KAArB,EAA4B;MAC3BgD,GAD2B;;;iBASnBhC,IAAZ,EAAkB;;;2GACVA,IADU;;UAGRd,WAHQ,GAGQ,MAAK1f,EAHb,CAGR0f,WAHQ;;UAIZ9hB,QAAQ/C,QAAZ;UACMoR,SAAS,MAAKjM,EAAL,CAAQ8f,YAAR,CAAqB9O,GAArB,CAAyB,UAACiR,KAAD,EAAQ1lB,CAAR,EAAc;YAElD9D,IAFkD,GAKhDwpB,KALgD,CAElDxpB,IAFkD;YAGlDsY,KAHkD,GAKhDkR,KALgD,CAGlDlR,KAHkD;YAIlDG,QAJkD,GAKhD+Q,KALgD,CAIlD/Q,QAJkD;;YAMhDuR,OAAO1R,MAAM2R,EAAjB;;YAEIjqB,SAAS,QAAT,IAAqBgqB,IAAzB,EAA+B;iBACtB/C,YAAY1f,EAAZ,CAAeuhB,QAAf,CAAwBkB,IAAxB,EAA8B,UAACE,QAAD,EAAc;gBAC7C,CAAC,CAACA,QAAF,KAAe1W,OAAO9J,CAAP,CAAS5F,CAAT,CAAnB,EAAgC;;;;mBAIzB4F,CAAP,CAAS5F,CAAT,IAAc,CAAC,CAAComB,QAAhB;;gBAEIpmB,IAAIqB,KAAR,EAAe;;;;gBAIXrB,IAAIqB,KAAR,EAAe;sBACLrB,CAAR;oBACK8X,KAAL,GAAanD,QAAb;;;;;gBAKIW,QAAQ5F,OAAO8F,IAAP,CAAYjP,OAAZ,CAAd;;gBAEI+O,KAAJ,EAAW;sBACDA,MAAMxU,GAAd;oBACKgX,KAAL,GAAa,MAAKrU,EAAL,CAAQ8f,YAAR,CAAqB3d,CAArB,CAAuB0P,MAAMxU,GAA7B,EAAkC6T,QAA/C;aAFF,MAGO;sBACGrW,QAAR;oBACKwZ,KAAL,GAAa,IAAb;;WAzBG,QAAP;SADF,MA6BO;iBACE,IAAP;;;YAGEoO,QAAQ7kB,UAAU/C,QAAtB,EAAgC;kBACtB0B,CAAR;gBACK8X,KAAL,GAAanD,QAAb;;;eAGK,CAAC,CAACuR,IAAT;OA9Ca,CAAf;;;;;IAbcjD,KADe;;KAAA,CAExBL,QAFwB,GAEb,KACd,aADc,GAEd,mBAFc,GAGd,kCAHc,GAId,wCAJc,GAKd,IAP2B;;;SAiE1B;UACC,MADD;WAEEqD;GAFT;;;ACjEK,SAASI,aAAT,CAAuBpD,KAAvB,EAA8B;MAC7BqD,KAD6B;;;;;;;;;IACfrD,KADe;;OAAA,CAE1BL,QAF0B,GAEf,KACd,aADc,GAEd,6BAFc,GAGd,wBAHc,GAId,wCAJc,GAKd,IAP6B;;;SAU5B;UACC,SADD;WAEE0D;GAFT;;;ACPK,SAASC,eAAT,CAAyBtD,KAAzB,EAAgC;MAC/BuD,OAD+B;;;qBAWvBvC,IAAZ,EAAkB;;;mHACVA,IADU;;YAFlB5iB,KAEkB,GAFV/C,QAEU;UAIR6kB,WAJQ,SAId1f,EAJc,CAIR0f,WAJQ;UAKdngB,IALc,SAKdA,IALc;UAMNjH,KANM,SAMdiH,IANc,CAMNjH,KANM;;UAQZ0qB,mBAAJ;;YAEK/W,MAAL,GAAc,MAAKjM,EAAL,CAAQ8f,YAAR,CAAqBrmB,MAArB,CAA4B,UAACwS,MAAD,EAASgW,KAAT,EAAgB1lB,CAAhB,EAAsB;YAE5D9D,IAF4D,GAK1DwpB,KAL0D,CAE5DxpB,IAF4D;YAG5DsY,KAH4D,GAK1DkR,KAL0D,CAG5DlR,KAH4D;YAI5DG,QAJ4D,GAK1D+Q,KAL0D,CAI5D/Q,QAJ4D;;YAM1DxP,MAAMqP,MAAM2R,EAAhB;;YAEIM,UAAJ,EAAgB;;;;YAIZvqB,SAAS,QAAT,IAAqBA,SAAS,WAAlC,EAA+C;;;;YAI3CA,SAAS,WAAb,EAA0B;uBACX,IAAb;;;YAGEA,SAAS,WAAb,EAA0B;gBAClB8G,KAAKjH,KAAX;SADF,MAEO,IAAIoJ,GAAJ,EAAS;gBACRge,YAAY1f,EAAZ,CAAeuhB,QAAf,CAAwB7f,GAAxB,EAA6B,UAACihB,QAAD,EAAc;gBAC3C,MAAKM,MAAL,CAAY,MAAKhX,MAAL,CAAY9J,CAAZ,CAAc5F,CAAd,EAAiBjE,KAA7B,EAAoCqqB,QAApC,CAAJ,EAAmD;;;;kBAI9C1W,MAAL,CAAY9J,CAAZ,CAAc5F,CAAd,EAAiBjE,KAAjB,GAAyBqqB,QAAzB;;gBAEIpmB,IAAI,MAAKqB,KAAb,EAAoB;;;;gBAIhBrB,IAAI,MAAKqB,KAAb,EAAoB;oBACbA,KAAL,GAAarB,CAAb;oBACK8X,KAAL,GAAanD,QAAb;;;;;gBAKIW,QAAQ,MAAK5F,MAAL,CAAY8F,IAAZ,CAAiB;kBAAGzZ,KAAH,QAAGA,KAAH;qBAC7B,MAAK2qB,MAAL,CAAY3qB,KAAZ,EAAmBiH,KAAKjH,KAAxB,CAD6B;aAAjB,CAAd;;gBAIIuZ,KAAJ,EAAW;oBACJjU,KAAL,GAAaiU,MAAMxU,GAAnB;oBACKgX,KAAL,GAAaxC,MAAMvZ,KAAN,CAAY4Y,QAAzB;aAFF,MAGO;oBACAtT,KAAL,GAAa/C,QAAb;oBACKwZ,KAAL,GAAa,IAAb;;WA3BE,QAAN;SADK,MA+BA;gBACC3V,SAAN;;;YAGE,MAAKukB,MAAL,CAAYvhB,GAAZ,EAAiBpJ,KAAjB,KAA2B,MAAKsF,KAAL,KAAe/C,QAA9C,EAAwD;gBACjD+C,KAAL,GAAarB,CAAb;gBACK8X,KAAL,GAAanD,QAAb;;;eAGK9R,IAAP,CAAY;oBAAA;4BAAA;iBAGHsC;SAHT;OA9DY,EAmEX,IAAIsK,GAAJ,CAAQ,EAAR,CAnEW,CAAd;;;;;;uCAsEe;;;YACX8V,YAAY,IAAhB;;aAEKjB,KAAL,CAAW,YAAX,EAAyB,YAAM;cACzBiB,SAAJ,EAAe;wBACD,KAAZ;;;;;cAMOa,QARoB,GASzB,OAAKpjB,IAToB,CAQ3BjH,KAR2B;;;iBAWxBsF,KAAL,GAAa/C,QAAb;iBACKoR,MAAL,CAAYS,OAAZ,CAAoB,iBAA4BnQ,CAA5B,EAAkC;gBAA/B9D,IAA+B,SAA/BA,IAA+B;gBAAzBH,KAAyB,SAAzBA,KAAyB;gBAAlB4Y,QAAkB,SAAlBA,QAAkB;;gBAC9CxP,MAAMjJ,SAAS,WAAT,GACRkqB,QADQ,GAERrqB,KAFJ;;gBAII,OAAK2qB,MAAL,CAAYvhB,GAAZ,EAAiBihB,QAAjB,KAA8B,OAAK/kB,KAAL,KAAe/C,QAAjD,EAA2D;qBACpD+C,KAAL,GAAarB,CAAb;qBACK8X,KAAL,GAAanD,QAAb;;WAPJ;;cAWI,OAAKtT,KAAL,KAAe/C,QAAnB,EAA6B;mBACtBwZ,KAAL,GAAa,IAAb;;SAxBJ;;;;6BA6BKtS,MA3H4B,EA2HpBC,MA3HoB,EA2HZ;eACd,IAAIE,KAAJ,CAAUH,MAAV,EAAkBkhB,MAAlB,CAAyBjhB,MAAzB,CAAP;;;;IA3HkBwd,KADe;;SAAA,CAE5BL,QAF4B,GAEjB,KACd,aADc,GAEd,mBAFc,GAGd,kCAHc,GAId,wCAJc,GAKd,IAP+B;;;SAgI9B;UACC,UADD;WAEE4D;GAFT;;;;;;;;;;;;;;ACjIK,SAASG,aAAT,CAAuBC,KAAvB,EAA8B;MAC7BC,KAD6B;;;;;;;;;;;;;;qLAEjCrS,KAFiC,GAEzB,EAFyB;;;;;kCAIrB4R,QAJqB,EAIX;YAElB1qB,IAFkB,GAKhB,IALgB,CAElBA,IAFkB;YAGlBsH,IAHkB,GAKhB,IALgB,CAGlBA,IAHkB;YAIlBwR,KAJkB,GAKhB,IALgB,CAIlBA,KAJkB;;;YAOhBxR,IAAJ,EAAU;qBACG,IAAI2C,KAAJ,CAAU3C,IAAV,EAAgB9F,MAAhB,CAAuB,UAACsX,KAAD,EAAQ1Y,IAAR,EAAiB;kBAC3CA,IAAN,IAAcsqB,QAAd;WADS,CAAX;;;mBAKS,IAAIzgB,KAAJ,CAAUygB,YAAY,EAAtB,EAA0BxgB,CAArC;;YAEID,KAAJ,CAAU6O,KAAV,EAAiBrE,OAAjB,CAAyB,UAACpU,KAAD,EAAQC,IAAR,EAAiB;cACpC,CAACoqB,SAASpqB,IAAT,CAAL,EAAqB;iBACdM,UAAL,CAAgBN,IAAhB;;SAFJ;aAKKF,IAAL,CAAUsqB,QAAV;;aAEK5R,KAAL,GAAa4R,QAAb;;;;qCAGa;YAEX1qB,IAFW,GAIT,IAJS,CAEXA,IAFW;YAGX8Y,KAHW,GAIT,IAJS,CAGXA,KAHW;;;aAMRlY,UAAL,CAAgB8I,KAAhB,CAAsB1J,IAAtB,EAA4B,IAAIiK,KAAJ,CAAU6O,KAAV,EAAiB7Q,IAAjB,GAAwBiC,CAApD;;;;IAlCgBghB,KADe;;SAuC5B;UACC,QADD;WAEEC;GAFT;;;ACvCK,SAASC,aAAT,CAAuBF,KAAvB,EAA8B;MAC7BG,KAD6B;;;;;;;;;;kCAErBhrB,KAFqB,EAEd;YACb,KAAKirB,GAAT,EAAc;eACPA,GAAL;;;YAGE,CAACxpB,WAAWzB,KAAX,CAAL,EAAwB;;;;YAIpB,KAAKiH,IAAT,EAAe;eACRgkB,GAAL,GAAW,KAAKtrB,IAAL,CAAU4iB,EAAV,CAAa,KAAKtb,IAAL,CAAU+M,IAAV,CAAe,GAAf,CAAb,EAAkChU,KAAlC,CAAX;SADF,MAEO;kBACGqH,KAAR,CAAc,iGAAd;;;;;qCAIW;YACL4jB,GADK,GACG,IADH,CACLA,GADK;;;YAGTA,GAAJ,EAAS;;;;;;IApBOJ,KADe;;SA2B5B;UACC,QADD;WAEEG;GAFT;;;AC1BK,SAASE,cAAT,CAAwBL,KAAxB,EAA+B;MAC9BM,MAD8B;;;;;;;;;;;;;;uLAElCxQ,OAFkC,GAExB,EAFwB;;;;;kCAItB0P,QAJsB,EAIZ;YAElB1qB,IAFkB,GAKhB,IALgB,CAElBA,IAFkB;YAGlBsH,IAHkB,GAKhB,IALgB,CAGlBA,IAHkB;YAIlB0T,OAJkB,GAKhB,IALgB,CAIlBA,OAJkB;;YAMdyQ,aAAa,EAAnB;;mBAEW,IAAIxhB,KAAJ,CAAUygB,QAAV,EAAoBxgB,CAA/B;;YAEI5C,IAAJ,EAAU;qBACGojB,WACPpjB,IADO,GAEP,EAFJ;;;YAKE5D,SAASgnB,QAAT,CAAJ,EAAwB;qBACXA,SAASniB,KAAT,CAAe,KAAf,CAAX;;;YAGE3G,QAAQ8oB,QAAR,CAAJ,EAAuB;kBACb1P,OAAR,EAAiB,UAAC9a,GAAD,EAAS;gBACpBwqB,SAAS/e,OAAT,CAAiBzL,GAAjB,MAA0B,CAAC,CAA/B,EAAkC;mBAC3BS,WAAL,CAAiBT,GAAjB;;WAFJ;kBAKQwqB,QAAR,EAAkB,UAACxqB,GAAD,EAAS;gBACrBwD,SAASxD,GAAT,CAAJ,EAAmB;yBACNiH,IAAX,CAAgBjH,GAAhB;mBACKC,QAAL,CAAcD,GAAd;;WAHJ;SANF,MAYO;kBACG8a,OAAR,EAAiB,UAAC9a,GAAD,EAAS;gBACpB,CAACwqB,QAAD,IAAa,CAACA,SAASxqB,GAAT,CAAlB,EAAiC;mBAC1BS,WAAL,CAAiBT,GAAjB;;WAFJ;kBAKQwqB,QAAR,EAAkB,UAACjhB,GAAD,EAAMvJ,GAAN,EAAc;gBAC1BuJ,GAAJ,EAAS;yBACItC,IAAX,CAAgBjH,GAAhB;mBACKC,QAAL,CAAcD,GAAd;;WAHJ;;;aAQG8a,OAAL,GAAeyQ,UAAf;;;;qCAGa;YACLzrB,IADK,GACI,IADJ,CACLA,IADK;;;aAGRW,WAAL,CAAiB+I,KAAjB,CAAuB1J,IAAvB,EAA6B,IAAIiK,KAAJ,CAAU,KAAK5J,KAAf,EAAsB4H,IAAtB,GAA6BiC,CAA1D;;;;IAvDiBghB,KADe;;SA4D7B;UACC,SADD;WAEEM;GAFT;;;AC7DK,SAASE,aAAT,CAAuBR,KAAvB,EAA8B7C,WAA9B,EAA2Cd,KAA3C,EAAkD;MACjDoE,KADiD;;;mBAIzCpD,IAAZ,EAAkB;;;+GACVA,IADU;;UAIdjhB,IAJc,SAIdA,IAJc;UAKdsgB,cALc,SAKdA,cALc;UAMd5nB,IANc,SAMdA,IANc;;UAQZ+oB,QAAQnB,cAAZ;UACIvnB,QAAQ,MAAKurB,YAAL,EAAZ;;UAEItkB,IAAJ,EAAU;gBACAjH,iBAAiBknB,KAAjB,GACJlnB,KADI,GAEJunB,cAFJ;gBAGQtgB,KAAK,CAAL,CAAR;;;UAGExF,WAAWzB,KAAX,CAAJ,EAAuB;cACfL,IAAN;OADF,MAEO,IAAI0D,SAASrD,KAAT,CAAJ,EAAqB;cACpBA,KAAN,IAAeL,IAAf;;;;;;IAxBckrB,KADmC;;OAAA,CAE9C5B,QAF8C,GAEnC,KAFmC;;;SA8BhD;UACC,QADD;WAEEqC;GAFT;;;AChCK,SAASE,aAAT,CAAuBX,KAAvB,EAA8B;MAC7BY,KAD6B;;;;;;;;;;kCAErBzrB,KAFqB,EAEd;YACTL,IADS,GACA,IADA,CACTA,IADS;;;YAGbK,KAAJ,EAAW;eACJ0rB,IAAL;SADF,MAEO;eACAC,IAAL;;;;;qCAIW;aACRhsB,IAAL,CAAUgsB,IAAV;;;;IAZgBd,KADe;;SAiB5B;UACC,QADD;WAEEY;GAFT;;;ACfK,SAASG,aAAT,CAAuBf,KAAvB,EAA8B7C,WAA9B,EAA2Cd,KAA3C,EAAkD;MACjD2E,KADiD;;;mBAIzC3D,IAAZ,EAAkB;;;+GACVA,IADU;;UAIdjhB,IAJc,SAIdA,IAJc;UAKdsgB,cALc,SAKdA,cALc;UAMdhP,IANc,SAMdA,IANc;;UAQZmQ,QAAQnB,cAAZ;UACIvnB,QAAQ,MAAKurB,YAAL,EAAZ;;UAEItkB,IAAJ,EAAU;gBACAjH,iBAAiBknB,KAAjB,GACJlnB,KADI,GAEJunB,cAFJ;gBAGQtgB,KAAK,CAAL,CAAR;;;UAGExF,WAAWzB,KAAX,CAAJ,EAAuB;cACfuY,IAAN;OADF,MAEO,IAAIlV,SAASrD,KAAT,CAAJ,EAAqB;cACpBA,KAAN,IAAeuY,IAAf;;;;;;IAxBcsS,KADmC;;OAAA,CAE9C5B,QAF8C,GAEnC,KAFmC;;;SA8BhD;UACC,QADD;WAEE4C;GAFT;;;AChCK,SAASC,WAAT,CAAqBjB,KAArB,EAA4B;MAC3BkB,GAD2B;;;iBAInB7D,IAAZ,EAAkB;;;2GACVA,IADU;;UAGZ,MAAKjhB,IAAT,EAAe;cACRgkB,GAAL,GAAW,MAAKtrB,IAAL,CAAU4iB,EAAV,CAAa,MAAKtb,IAAL,CAAU+M,IAAV,CAAe,GAAf,CAAb,EAAkC,YAAM;gBAC5CuX,YAAL;SADS,CAAX;OADF,MAIO;gBACGlkB,KAAR,CAAc,2FAAd;;;;;;;qCAIW;YACL4jB,GADK,GACG,IADH,CACLA,GADK;;;YAGTA,GAAJ,EAAS;;;;;;IAlBKJ,KADe;;KAAA,CAExB5B,QAFwB,GAEb,KAFa;;;SAyB1B;UACC,MADD;WAEE8C;GAFT;;;ACzBK,SAASC,aAAT,CAAuBnB,KAAvB,EAA8B;MAC7BoB,KAD6B;;;;;;;;;;kCAErBjsB,KAFqB,EAEd;YACTL,IADS,GACA,IADA,CACTA,IADS;;;YAGbK,KAAJ,EAAW;eACJ2rB,IAAL;SADF,MAEO;eACAD,IAAL;;;;;qCAIW;aACR/rB,IAAL,CAAUgsB,IAAV;;;;IAZgBd,KADe;;SAiB5B;UACC,QADD;WAEEoB;GAFT;;;ACbK,SAASC,cAAT,CAAwBrB,KAAxB,EAA+B;MAC9BsB,MAD8B;;;;;;;;;;;;;;uLAElCjsB,GAFkC,GAE5B,EAF4B;;;;;kCAItBmqB,QAJsB,EAIZ+B,QAJY,EAIF;YAE5BzsB,IAF4B,GAK1B,IAL0B,CAE5BA,IAF4B;YAG5BsH,IAH4B,GAK1B,IAL0B,CAG5BA,IAH4B;YAI5B/G,GAJ4B,GAK1B,IAL0B,CAI5BA,GAJ4B;;;YAO1B+G,IAAJ,EAAU;qBACG,IAAI2C,KAAJ,CAAU3C,IAAV,EAAgB9F,MAAhB,CAAuB,UAACjB,GAAD,EAAMD,IAAN,EAAe;gBAC3CA,IAAJ,IAAYoqB,QAAZ;WADS,CAAX;;;YAKEhnB,SAASgnB,QAAT,CAAJ,EAAwB;qBACX,IAAI3W,GAAJ,CAAQ2W,SAASniB,KAAT,CAAe,KAAf,CAAR,EACRmD,MADQ,GAERlK,MAFQ,CAED,UAACjB,GAAD,EAAMioB,IAAN,EAAe;sCACCA,IADD;gBACdloB,IADc;gBACRD,KADQ;;gBAGjBC,IAAJ,IAAYD,KAAZ;WALO,CAAX;;;mBASS,IAAI4J,KAAJ,CAAUygB,YAAY,EAAtB,EAA0BxgB,CAArC;;YAEID,KAAJ,CAAU1J,GAAV,EAAekU,OAAf,CAAuB,UAACpU,KAAD,EAAQC,IAAR,EAAiB;cAClC,CAACoqB,SAASpqB,IAAT,CAAL,EAAqB;iBACdO,SAAL,CAAeP,IAAf;;SAFJ;aAKKC,GAAL,CAASmqB,QAAT;;aAEKnqB,GAAL,GAAWmqB,QAAX;;;;qCAGa;YAEX1qB,IAFW,GAIT,IAJS,CAEXA,IAFW;YAGXO,GAHW,GAIT,IAJS,CAGXA,GAHW;;;aAMRM,SAAL,CAAe6I,KAAf,CAAqB1J,IAArB,EAA2B,IAAIiK,KAAJ,CAAU1J,GAAV,EAAe0H,IAAf,GAAsBiC,CAAjD;;;;IA5CiBghB,KADe;;SAiD7B;UACC,SADD;WAEEsB;GAFT;;;AClDF,IAAME,mBAAmBrjB,SAAS,cAAT,EAAyB,OAAzB,EACtBD,IADsB,CACjB,MADiB,EACT,eADS,EAEtBA,IAFsB,CAEjB,QAFiB,EAEP,QAFO,EAGtBA,IAHsB,CAGjB,OAHiB,EAGR,UAACgQ,IAAD;SACbA,SAAS,OAAT,IACGA,SAAS,UADZ,IAEGA,SAAS,OAFZ,IAGGA,SAAS,MAHZ,GAII,QAJJ,GAKI,cANS;CAHQ,CAAzB;;AAYA,AAAO,SAASuT,iBAAT,CAA2BzB,KAA3B,EAAkC;MACjC0B,SADiC;;;uBAIzBrE,IAAZ,EAAkB;;;uHACVA,IADU;;UAGRvoB,IAHQ,SAGRA,IAHQ;;UAIVukB,YAAY,MAAKlkB,KAAL,GAAa,MAAKurB,YAAL,EAA/B;;UAEI9pB,WAAWyiB,SAAX,CAAJ,EAA2B;aACpBld,QAAL,CAAckd,SAAd;OADF,MAEO,IAAIA,cAAc,IAAlB,EAAwB;cACxB+G,GAAL,GAAWtrB,KAAK4iB,EAAL,CAAQ8J,iBAAiB1sB,KAAKQ,IAAtB,EAA4B,CAACR,KAAKM,IAAL,CAAU,MAAV,CAAD,CAA5B,CAAR,EAA0D,YAAM;eACpE+G,QAAL;SADS,CAAX;;;;;;;qCAMW;YACLhH,KADK,GACK,IADL,CACLA,KADK;;;YAGTyB,WAAWzB,KAAX,CAAJ,EAAuB;cACbmkB,UADa,GACE,KAAK5L,IAAL,CAAUiF,UADZ,CACb2G,UADa;;cAEf7e,QAAQ6e,WAAW7Y,OAAX,CAAmBtL,KAAnB,CAAd;;cAEIsF,UAAU,CAAC,CAAf,EAAkB;uBACLuP,MAAX,CAAkBvP,KAAlB,EAAyB,CAAzB;;SALJ,MAOO,IAAItF,UAAU,IAAd,EAAoB;eACpBirB,GAAL;;;;;IA7BkBJ,KADe;;WAAA,CAE9B5B,QAF8B,GAEnB,KAFmB;;;SAmChC;UACC,YADD;WAEEsD;GAFT;;;AC9CF,IAAMC,eAAexjB,SAAS,cAAT,EAAyB,UAAC+P,IAAD,EAAOpZ,IAAP;SAC5CA,KAAKokB,OAAL,CAAa,iBAAb,KAAmCpkB,KAAKokB,OAAL,CAAa,iBAAb,CAAnC,GACI,MADJ,GAEI,OAHwC;CAAzB,EAKlBhb,IALkB,CAKb,QALa,EAKH,UAACgQ,IAAD,EAAOpZ,IAAP;SACdA,KAAKokB,OAAL,CAAa,UAAb,IACI,iBADJ,GAEI,OAHU;CALG,EAUlBhb,IAVkB,CAUb,OAVa,EAUJ,UAACgQ,IAAD,EAAU;MACnBA,SAAS,MAAb,EAAqB;WACZ,OAAP;;;SAGKA,SAAS,OAAT,IAAoBA,SAAS,UAA7B,GACH,SADG,GAEH,OAFJ;CAfiB,CAArB;AAmBA,IAAM0T,mBAAmBzjB,SAAS,cAAT,EAAyB,UAAChJ,KAAD;SAAWA,KAAX;CAAzB,EACtB+I,IADsB,CACjB,OADiB,EACR,UAAC/I,KAAD,EAAQ+Y,IAAR,EAAc2T,UAAd,EAA6B;MACtC3T,SAAS,OAAT,IAAoBA,SAAS,UAAjC,EAA6C;WACpC/Y,KAAP;;;MAGE+Y,SAAS,OAAb,EAAsB;WACb/Y,UAAU0sB,UAAjB;;;SAGK1sB,MAAMsL,OAAN,CAAcohB,UAAd,MAA8B,CAAC,CAAtC;CAVqB,CAAzB;AAYA,IAAMC,mBAAmB3jB,SAAS,cAAT,EAAyB,UAAChJ,KAAD;SAAWA,KAAX;CAAzB,EACtB+I,IADsB,CACjB,QADiB,EACP,UAAC/I,KAAD,EAAQ+Y,IAAR,EAAc2T,UAAd,EAA0B/Y,MAA1B,EAAkChU,IAAlC,EAAwCuH,OAAxC,EAAiD0lB,IAAjD,EAAuDC,UAAvD,EAAsE;MAChF,CAACA,UAAL,EAAiB;WACR7sB,KAAP;;;SAGKkH,QACJ/F,MADI,CACG,UAACwS,MAAD,QAAiC;QAAtBmZ,QAAsB,QAAtBA,QAAsB;QAAZ9sB,KAAY,QAAZA,KAAY;;QACnC8sB,YAAYnZ,OAAOrI,OAAP,CAAetL,KAAf,MAA0B,CAAC,CAA3C,EAA8C;aACrC8G,IAAP,CAAY9G,KAAZ;;GAHC,EAKF,EALE,EAMJ6J,CANH;CANqB,EActBd,IAdsB,CAcjB,OAdiB,EAcR,UAAC/I,KAAD,EAAQ+Y,IAAR,EAAc2T,UAAd,EAA0B/Y,MAA1B,EAAkChU,IAAlC,EAAwCuH,OAAxC,EAAiD0lB,IAAjD,EAA0D;MACnE7T,SAAS,OAAT,IAAoBA,SAAS,UAAjC,EAA6C;WACpC/Y,KAAP;;;MAGE+Y,SAAS,OAAb,EAAsB;WACb/Y,QACH0sB,UADG,GAEH,IAFJ;;;MAKE,CAAC1sB,KAAD,IAAU4sB,IAAd,EAAoB;WACXjZ,MAAP;;;MAGE3T,KAAJ,EAAW;QACL2T,MAAJ,EAAY;aACHA,OAAOrI,OAAP,CAAeohB,UAAf,MAA+B,CAAC,CAAhC,GACH,IAAIhZ,GAAJ,CAAQC,MAAR,EAAgB1G,MAAhB,CAAuByf,UAAvB,EAAmC7iB,CADhC,GAEH8J,MAFJ;;;WAKK,CAAC+Y,UAAD,CAAP;;;MAGE,CAACnrB,QAAQoS,MAAR,CAAL,EAAsB;WACb,EAAP;;;MAGIrO,QAAQqO,OAAOrI,OAAP,CAAeohB,UAAf,CAAd;;MAEIpnB,UAAU,CAAC,CAAf,EAAkB;uCAEX,IAAIoO,GAAJ,CAAQC,MAAR,EAAgBtD,KAAhB,CAAsB,CAAtB,EAAyB/K,KAAzB,EAAgCuE,CADrC,qBAEK,IAAI6J,GAAJ,CAAQC,MAAR,EAAgBtD,KAAhB,CAAsB/K,QAAQ,CAA9B,EAAiCuE,CAFtC;;;SAMK8J,MAAP;CApDqB,CAAzB;AAsDA,IAAM0Y,qBAAmBrjB,SAAS,cAAT,EAAyB,OAAzB,EACtBD,IADsB,CACjB,QADiB,EACP,QADO,EAEtBA,IAFsB,CAEjB,OAFiB,EAER,UAACgQ,IAAD;SACbA,SAAS,OAAT,IACGA,SAAS,UADZ,IAEGA,SAAS,OAFZ,IAGGA,SAAS,MAHZ,GAII,QAJJ,GAKI,cANS;CAFQ,CAAzB;;AAWA,AAAO,SAASgU,cAAT,CAAwBlC,KAAxB,EAA+B7C,WAA/B,EAA4Cd,KAA5C,EAAmD;MAClD8F,MADkD;;;oBAI1C9E,IAAZ,EAAkB;;;iHACVA,IADU;;UAIdjhB,IAJc,SAIdA,IAJc;UAKdsgB,cALc,SAKdA,cALc;UAMd5nB,IANc,SAMdA,IANc;UAOd4Y,IAPc,SAOdA,IAPc;;UASVpY,OAAOR,KAAKQ,IAAlB;UACM4Y,OAAOpZ,KAAKM,IAAL,CAAU,MAAV,CAAb;UACMD,QAAQ,MAAKurB,YAAL,EAAd;UACI0B,oBAAoB,IAAxB;;YAEKhtB,IAAL,GAAYusB,aAAarsB,IAAb,EAAmB,CAAC4Y,IAAD,EAAOpZ,IAAP,CAAnB,CAAZ;YACKQ,IAAL,GAAYA,IAAZ;YACK4Y,IAAL,GAAYA,IAAZ;YACK/Y,KAAL,GAAaA,KAAb;YACKkH,OAAL,GAAevH,KAAK8Z,IAAL,CAAU,QAAV,CAAf;YACKiP,KAAL,GAAanB,cAAb;;UAEItgB,IAAJ,EAAU;cACH9G,IAAL,GAAY8G,KAAK,CAAL,CAAZ;cACKyhB,KAAL,GAAa1oB,iBAAiBknB,KAAjB,GACTlnB,KADS,GAETunB,cAFJ;;;UAKE,CAAC9lB,WAAWzB,KAAX,CAAL,EAAwB;4BACF,MAAK0oB,KAAL,CAAWhhB,EAAX,CAAcuhB,QAAd,CAAuB1jB,6BAA4BvF,KAA5B,EAAsCA,KAAtC,CAAvB,EAAqE,UAACqqB,QAAD,EAAc;cACjG,MAAK6C,YAAL,KAAsB7C,QAA1B,EAAoC;kBAC7B6C,YAAL,GAAoB7C,QAApB;kBACK8C,OAAL,CAAa9C,QAAb;;SAHgB,QAApB;;;UAQI+C,mBAAmB,MAAKC,OAAL,CAAaJ,iBAAb,EAAgC,IAAhC,CAAzB;UACMK,0BAA0B3qB,MAAMsqB,iBAAN,CAAhC;UACMM,aAAaxU,SAAS,UAA5B;UACMyU,cAAc,SAAdA,WAAc,GAAM;cACnBN,YAAL,GAAoB,MAAKG,OAAL,CAAa,MAAKH,YAAlB,CAApB;cACKM,WAAL;OAFF;;UAKIF,2BAA2BC,UAA/B,EAA2C;cACpCL,YAAL,GAAoBE,gBAApB;cACKI,WAAL;;YAEI,CAACF,uBAAD,IAA4BC,UAAhC,EAA4C;gBACrCJ,OAAL,CAAaF,iBAAb;;OALJ,MAOO;cACAC,YAAL,GAAoBD,iBAApB;cACKE,OAAL,CAAaF,iBAAb;;;YAGGQ,eAAL,GAAuB9tB,KAAK4iB,EAAL,CAAQ8J,mBAAiBlsB,IAAjB,EAAuB,CAAC4Y,IAAD,CAAvB,CAAR,EAAwC,UAAC1D,CAAD,EAAO;YAChEA,EAAEnQ,MAAF,KAAaqT,IAAjB,EAAuB;;;OADF,CAAvB;YAKKmV,eAAL,GAAuB/tB,KAAK0c,OAAL,CAAa,MAAb,EAAqBkG,EAArB,CAAwB,OAAxB,EAAiC,YAAM;mBACjDiL,WAAX,EAAwB,CAAxB;OADqB,CAAvB;;;;;;oCAKY;YAEV9E,KAFU,GAKR,IALQ,CAEVA,KAFU;YAGV1oB,KAHU,GAKR,IALQ,CAGVA,KAHU;YAIVktB,YAJU,GAKR,IALQ,CAIVA,YAJU;;;YAORzrB,WAAWzB,KAAX,CAAJ,EAAuB;gBACfktB,YAAN;SADF,MAEO;gBACCltB,KAAN,IAAektB,YAAf;;;;;8BAIIltB,KArF8C,EAqFvC;YAEXL,IAFW,GAQT,IARS,CAEXA,IAFW;YAGXQ,IAHW,GAQT,IARS,CAGXA,IAHW;YAIXF,IAJW,GAQT,IARS,CAIXA,IAJW;YAKX8Y,IALW,GAQT,IARS,CAKXA,IALW;YAMXR,IANW,GAQT,IARS,CAMXA,IANW;YAOXrR,OAPW,GAQT,IARS,CAOXA,OAPW;;;YAUTjH,SAAS,MAAb,EAAqB;eACdI,IAAL,CAAUL,KAAV;SADF,MAEO,IAAIC,SAAS,iBAAb,EAAgC;kBAC7BmU,OAAR,CAAgB,UAACuZ,MAAD,EAAY;mBACnBb,QAAP,GAAkB9sB,MAAMsL,OAAN,CAAcqiB,OAAO3tB,KAArB,MAAgC,CAAC,CAAnD;WADF;SADK,MAIA;eACAC,IAAL,CAAUA,IAAV,EAAgBwsB,iBAAiBtsB,IAAjB,EAAuB,CAACH,KAAD,EAAQ+Y,IAAR,EAAcR,KAAKvY,KAAnB,CAAvB,CAAhB;;;;;8BAII2T,MA1G8C,EA0GtCiZ,IA1GsC,EA0GhC;YAElBjtB,IAFkB,GAQhB,IARgB,CAElBA,IAFkB;YAGlBQ,IAHkB,GAQhB,IARgB,CAGlBA,IAHkB;YAIlBF,IAJkB,GAQhB,IARgB,CAIlBA,IAJkB;YAKlB8Y,IALkB,GAQhB,IARgB,CAKlBA,IALkB;YAMlBR,IANkB,GAQhB,IARgB,CAMlBA,IANkB;YAOlBrR,OAPkB,GAQhB,IARgB,CAOlBA,OAPkB;;;eAUbjH,SAAS,MAAT,GACHN,KAAKU,IAAL,EADG,GAEHssB,iBAAiBxsB,IAAjB,EAAuB,CAACR,KAAKM,IAAL,CAAUA,IAAV,CAAD,EAAkB8Y,IAAlB,EAAwBR,KAAKvY,KAA7B,EAAoC2T,MAApC,EAA4ChU,IAA5C,EAAkDuH,OAAlD,EAA2D0lB,IAA3D,EAAiE3sB,SAAS,iBAA1E,CAAvB,CAFJ;;;;qCAKa;aACRwtB,eAAL;aACKC,eAAL;;;;IA1HiB7C,KADmC;;QAAA,CAE/C5B,QAF+C,GAEpC,KAFoC;;;SA+HjD;UACC,SADD;WAEE+D;GAFT;;;;;;;;;;;;;;;;;;;ACnOF,IAAMY,mBAAmB,MAAzB;AACA,IAAMC,sBAAsB,MAA5B;AACA,IAAMC,6BAA6B,WAAnC;AACA,IAAMC,uBAAuB,IAA7B;AACA,IAAMC,mBAAmB,aAAzB;AACA,IAAMC,qBAAqB,SAA3B;AACA,IAAMC,sBAAsB,yBAA5B;;AAEA,IAAMC,aAAa,qBAAnB;AACA,IAAMC,yBAAyB,8CAA/B;AACA,IAAMC,iBAAiB,2BAAvB;AACA,IAAMC,eAAe,6DAArB;AACA,IAAMC,eAAe,gEAArB;AACA,IAAMC,eAAe,yCAArB;AACA,IAAMC,sBAAsB,wHAA5B;AACA,IAAMC,8BAA8B,qCAApC;AACA,IAAMC,iBAAiB,uEAAvB;AACA,IAAMC,sBAAsB,+BAA5B;AACA,IAAMC,iBAAiB,+FAAvB;AACA,IAAMC,0BAA0B,2CAAhC;AACA,IAAMC,sBAAsB,eAA5B;AACA,IAAMC,gBAAgB,CACpB,IADoB,EAEpB,IAFoB,EAGpB,IAHoB,EAIpB,KAJoB,EAKpB,KALoB,EAMpB,KANoB,EAOpB,KAPoB,EAQpB,KARoB,EASpB,MAToB,EAUpB,MAVoB,EAWpB,MAXoB,EAYpB,MAZoB,EAapB,MAboB,EAcpB,MAdoB,EAepB,MAfoB,EAgBpB,MAhBoB,EAiBpB,OAjBoB,EAkBpB,OAlBoB,EAmBpB,OAnBoB,EAoBpB,OApBoB,EAqBpB,OArBoB,EAsBpB,OAtBoB,EAuBpB,OAvBoB,EAwBpB,OAxBoB,EAyBpB,OAzBoB,EA0BpB,QA1BoB,EA2BpB,QA3BoB,EA4BpB,QA5BoB,EA6BpB,QA7BoB,EA8BpB,QA9BoB,EA+BpB,QA/BoB,EAgCpB,QAhCoB,EAiCpB,QAjCoB,EAkCpB,SAlCoB,EAmCpB,SAnCoB,EAoCpB,SApCoB,EAqCpB,SArCoB,EAsCpB,SAtCoB,EAuCpB,UAvCoB,EAwCpB,UAxCoB,EAyCpB,UAzCoB,EA0CpB,WA1CoB,EA2CpB,WA3CoB,EA4CpB,WA5CoB,EA6CpB,YA7CoB,EA8CpB,YA9CoB,CAAtB;AAgDA,IAAMC,iBAAiB,IAAIhlB,MAAJ,UAAmB+kB,cAAchb,IAAd,CAAmB,GAAnB,CAAnB,QAAvB;;AAEA,IAAMkb,aAAa,YAAnB;AACA,IAAMC,mBAAmB,sBAAzB;AACA,IAAMnX,iBAAe,sFAArB;;AAEA,SAASoX,OAAT,CAAiBpnB,MAAjB,EAAyBqnB,WAAzB,EAAsCC,UAAtC,EAAkD;eACnC,CAAC,CAACA,UAAf;;MAEMC,gBAAgBvnB,MAAtB;MACMwnB,WAAW;gBACH,IADG;wBAEK,EAFL;mBAGA;GAHjB;MAKMC,YAAY,EAAlB;MACQC,kBAVwC,GAUjBF,QAViB,CAUxCE,kBAVwC;;MAW5C9pB,aAAa,EAAjB;MACIN,QAAQ,CAAZ;;SAEO0C,OAAOtG,MAAd,EAAsB;QAChBiuB,mBAAJ;QACIzlB,cAAJ;QACI0lB,WAAW,EAAf;QACIC,gBAAJ;QACIC,qBAAJ;;eAIIJ,mBAAmBA,mBAAmBhuB,MAAnB,GAA4B,CAA/C,KAAqD,EATrC;QAOZquB,UAPY,QAOlBhX,IAPkB;QAQViX,YARU,QAQlBpZ,MARkB;;QAUdqZ,cAAcjoB,OAAO,CAAP,CAApB;;QAEI,CAAC2nB,aAAa3nB,OAAOkC,KAAP,CAAa0jB,gBAAb,CAAd,KAAiD,CAAC4B,SAASU,cAA/D,EAA+E;qBAC9D,IAAf;cACQP,WAAW,CAAX,CAAR;KAFF,MAGO;UACDH,SAAS5pB,UAAb,EAAyB;gBACfoC,OAAOkC,KAAP,CAAaukB,mBAAb,CAAR;;YAEIvkB,KAAJ,EAAW;cACHimB,OAAO,CAACjmB,MAAM,CAAN,KAAYA,MAAM,CAAN,CAAb,EAAuBhC,KAAvB,CAA6B+lB,kBAA7B,CAAb;cACMwB,aAAY,EAAlB;cACMW,kBAAkBttB,OAAOwH,MAAP,CAAcklB,SAASa,aAAvB,CAAxB;;eAEK,IAAIpsB,IAAI,CAAR,EAAWvC,SAASyuB,KAAKzuB,MAA9B,EAAsCuC,IAAIvC,MAA1C,EAAkDuC,GAAlD,EAAuD;gBAC/CqsB,WAAWH,KAAKlsB,CAAL,CAAjB;;gBAEIqsB,QAAJ,EAAc;yBACFxpB,IAAV,CAAewpB,QAAf;8BACgBA,QAAhB,IAA4B,IAA5B;;;;mCAIoBb,WAAUzb,IAAV,CAAe,GAAf,CAAxB;mBACSqc,aAAT,GAAyBD,eAAzB;6BACmBtpB,IAAnB,CAAwB;kBAChB,KADgB;oBAEdqoB;WAFV,EAGG;kBACK,KADL;oBAEOD;WALV;SAhBF,MAuBO,IAAIe,gBAAgB,GAApB,EAAyB;kBACtB,GAAR;6BACmBnpB,IAAnB,CAAwB;kBAChB,OADgB;oBAEd;WAFV;SAFK,MAMA,IAAImpB,gBAAgB,GAApB,EAAyB;kBACtB,GAAR;6BACmBnpB,IAAnB,CAAwB;kBAChB,OADgB;oBAEd;WAFV;SAFK,MAMA,IAAImpB,gBAAgB,GAApB,EAAyB;kBACtB,GAAR;qBACW,KAAX;mBACSC,cAAT,GAA0B,IAA1B;6BACmBppB,IAAnB,CAAwB;kBAChB,gBADgB;oBAEd;WAFV;;iBAKO0oB,SAAS5pB,UAAhB;SATK,MAUA,IAAIqqB,gBAAgB,GAApB,EAAyB;kBACtB,GAAR;mBACSM,cAAT,GAA0B,IAA1B;6BACmBzpB,IAAnB,CAAwB;kBAChB,QADgB;oBAEd;WAFV;;iBAKO0oB,SAAS5pB,UAAhB;SARK,MASA;kBACGoC,OAAOkC,KAAP,CAAa6kB,mBAAb,CAAR;;cAEI7kB,KAAJ,EAAW;uBACEA,MAAM,CAAN,EAAS5I,OAAT,CAAiBusB,mBAAjB,EAAsC,GAAtC,CAAX;WADF,MAEO;oBACG7lB,OAAOkC,KAAP,CAAakkB,sBAAb,CAAR;;gBAEI,CAAClkB,KAAL,EAAY;sBACFlC,OAAOkC,KAAP,CAAaokB,YAAb,CAAR;;kBAEI,CAACpkB,KAAL,EAAY;wBACFlC,OAAOkC,KAAP,CAAaqkB,YAAb,CAAR;;oBAEI,CAACrkB,KAAL,EAAY;0BACFlC,OAAOkC,KAAP,CAAaskB,YAAb,CAAR;;sBAEI,CAACtkB,KAAL,EAAY;4BACFlC,OAAOkC,KAAP,CAAaikB,UAAb,CAAR;;wBAEIjkB,KAAJ,EAAW;iCACE,GAAX;qBADF,MAEO;8BACGlC,OAAOkC,KAAP,CAAamkB,cAAb,CAAR;;0BAEInkB,KAAJ,EAAW;4BACHomB,YAAWpmB,MAAM,CAAN,CAAjB;;4BAEI,CAACslB,SAASa,aAAT,CAAuBC,SAAvB,CAAL,EAAuC;oCAC3BA,SAAV,IAAsB,IAAtB;;;mCAGSE,YAAYF,SAAZ,EAAsBd,SAASa,aAA/B,CAAX;;;;;;;;gBAQRnmB,KAAJ,EAAW;uBACAumB,QAAT,GAAoB,IAApB;wBACUvB,UAAV;;qBAEOM,SAAS5pB,UAAhB;;;;OArGR,MAyGO,IAAI4pB,SAASU,cAAb,EAA6B;gBAC1BloB,OAAOkC,KAAP,CAAawkB,2BAAb,CAAR;;YAEIxkB,KAAJ,EAAW;cACHlC,UAASkC,MAAM,CAAN,EACZ5I,OADY,CACJwsB,0BADI,EACwB,UAAC5jB,KAAD,EAAW;gBACxCwmB,SAASxmB,MAAM,CAAN,CAAf;;mBAEOgkB,oBAAoB/rB,IAApB,CAAyBuuB,MAAzB,IACHxmB,KADG,GAEHwmB,MAFJ;WAJW,EAQZpvB,OARY,CAQJysB,oBARI,EAQkB,KARlB,EASZzsB,OATY,CASJ0sB,gBATI,EASc,UAAC9jB,KAAD,EAAW;gBAChCA,UAAU,MAAd,EAAsB;sBACZ,QAAR;aADF,MAEO,IAAIA,UAAU,IAAd,EAAoB;sBACjB,KAAR;aADK,MAEA;sBACG,KAAR;;;2BAGYA,KAAd;WAlBW,CAAf;;4BAqBiBlC,OAAjB;SAtBF,MAuBO,IAAIioB,gBAAgB,GAApB,EAAyB;kBACtB,GAAR;oBACUf,UAAV;qBACW,GAAX;mBACSuB,QAAT,GAAoB,IAApB;6BACmBxc,GAAnB;;iBAEOub,SAASU,cAAhB;SAPK,MAQA,IAAIloB,OAAOqI,KAAP,CAAa,CAAb,EAAgB,CAAhB,MAAuB,IAA3B,EAAiC;kBAC9B,IAAR;qBACW,IAAX;mBACSzK,UAAT,GAAsB,IAAtB;6BACmBkB,IAAnB,CAAwB;kBAChB,gBADgB;oBAEd;WAFV,EAGG;kBACK,KADL;oBAEOooB;WALV;;iBAQOM,SAASU,cAAhB;;OA9CG,MAgDA,IAAIV,SAASe,cAAb,EAA6B;gBAC1BvoB,OAAOkC,KAAP,CAAa2kB,cAAb,CAAR;;YAEI3kB,KAAJ,EAAW;cACL+kB,eAAe9sB,IAAf,CAAoB+H,MAAM,CAAN,CAApB,CAAJ,EAAmC;kBAC3B,CAAN,UAAgBA,MAAM,CAAN,CAAhB;;;qBAGaA,MAAM,CAAN,CAAf;mBACStE,UAAT,GAAsB,IAAtB;6BACmBkB,IAAnB,CAAwB;kBAChB,KADgB;oBAEdooB;WAFV;;iBAKOM,SAASe,cAAhB;SAZF,MAaO;kBACGvoB,OAAOkC,KAAP,CAAa4kB,uBAAb,CAAR;;cAEI5kB,KAAJ,EAAW;gBACHomB,aAAWpmB,MAAM,CAAN,CAAjB;;gBAEI,CAACslB,SAASa,aAAT,CAAuBC,UAAvB,CAAL,EAAuC;wBAC3BA,UAAV,IAAsB,IAAtB;;;gBAGErB,eAAe9sB,IAAf,CAAoBmuB,UAApB,CAAJ,EAAmC;oBAC3B,CAAN,UAAgBA,UAAhB;;;uBAGapmB,MAAM,CAAN,CAAf,SAA6BsmB,YAAYF,UAAZ,EAAsBd,SAASa,aAA/B,CAA7B,GAA+EnmB,MAAM,CAAN,CAA/E;;gBAEI,CAACA,MAAM,CAAN,CAAL,EAAe;uBACJumB,QAAT,GAAoB,IAApB;;qBAEOjB,SAASe,cAAhB;;;;OAnCD,MAuCA,IAAIf,SAASiB,QAAb,EAAuB;YACxBR,gBAAgB,GAAhB,IAAuBA,gBAAgB,GAAvC,IAA8CA,gBAAgB,GAA9D,IAAqEA,gBAAgB,GAAzF,EAA8F;qBACjFU,kBAAkBnB,QAAlB,CAAX;;sBAKIE,mBAAmBA,mBAAmBhuB,MAAnB,GAA4B,CAA/C,KAAqD,EANmC;;oBAAA,SAI1FqX,IAJ0F;sBAAA,SAK1FnC,MAL0F;;;YAS1FqZ,gBAAgB,GAApB,EAAyB;kBACf,GAAR;mBACSrqB,UAAT,GAAsB,IAAtB;6BACmBkB,IAAnB,CAAwB;kBAChB,MADgB;oBAEd;WAFV;;iBAKO0oB,SAASiB,QAAhB;SARF,MASO,IAAIR,gBAAgB,GAApB,EAAyB;kBACtB,GAAR;mBACSrqB,UAAT,GAAsB,IAAtB;6BACmBkB,IAAnB,CAAwB;kBAChB,SADgB;oBAEd;WAFV,EAGG;kBACK,KADL;oBAEOooB;WALV;;iBAQOM,SAASiB,QAAhB;SAXK,MAYA,IAAIR,gBAAgB,GAAhB,IAAuBD,iBAAiB,GAA5C,EAAiD;kBAC9C,GAAR;mBACSpqB,UAAT,GAAsB,IAAtB;6BACmBqO,GAAnB;;iBAEOub,SAASiB,QAAhB;SALK,MAMA,IAAIR,gBAAgB,GAApB,EAAyB;kBACtB,GAAR;mBACSrqB,UAAT,GAAsB,IAAtB;6BACmBkB,IAAnB,CAAwB;kBAChB,UADgB;oBAEd;WAFV,EAGG;kBACK,KADL;oBAEOooB;WALV;;iBAQOM,SAASiB,QAAhB;SAXK,MAYA,IAAIR,gBAAgB,GAAhB,IAAuBD,iBAAiB,GAAxC,IAA+CD,eAAe,gBAAlE,EAAoF;kBACjFE,WAAR;sBACY,GAAZ;mBACSC,cAAT,GAA0B,IAA1B;6BACmBjc,GAAnB;;iBAEOub,SAASiB,QAAhB;SANK,MAOA,IAAIR,gBAAgB,GAAhB,IAAuBD,iBAAiB,GAAxC,IAA+CD,eAAe,UAAlE,EAA8E;kBAC3EE,WAAR;sBACYA,WAAZ;oBACUf,UAAV;6BACmBjb,GAAnB;SAJK,MAKA,IAAIgc,gBAAgB,GAAhB,IAAuBD,iBAAiB,GAAxC,IAA+CD,eAAe,OAAlE,EAA2E;kBACxEE,WAAR;sBACYA,WAAZ;oBACUf,UAAV;6BACmBjb,GAAnB;SAJK,MAKA,IAAIgc,gBAAgB,GAAhB,IAAuBD,iBAAiB,GAAxC,IAA+CD,eAAe,QAAlE,EAA4E;kBACzEE,WAAR;sBACYA,WAAZ;oBACUf,UAAV;mBACSqB,cAAT,GAA0B,IAA1B;;iBAEOf,SAASiB,QAAhB;SANK,MAOA;kBACGzoB,OAAOkC,KAAP,CAAa0kB,mBAAb,CAAR;;cAEI1kB,KAAJ,EAAW;sBACCglB,UAAV;;gBAEID,eAAe9sB,IAAf,CAAoB+H,MAAM,CAAN,CAApB,CAAJ,EAAmC;iCACfA,MAAM,CAAN,CAAlB;;WAJJ,MAMO;oBACGlC,OAAOkC,KAAP,CAAaykB,cAAb,CAAR;;gBAEIzkB,KAAJ,EAAW;0BACGA,MAAM,CAAN,EAAS5I,OAAT,CAAiBusB,mBAAjB,EAAsC,GAAtC,CAAZ;uBACSjoB,UAAT,GAAsB,IAAtB;iCACmBkB,IAAnB,CAAwB;sBAChB,KADgB;wBAEdooB;eAFV;;qBAKOM,SAASiB,QAAhB;;;;;;UAMJ,CAACvmB,KAAL,EAAY;YACN+lB,gBAAgB,GAAhB,IAAuBA,gBAAgB,GAAvC,IAA8CA,gBAAgB,GAAlE,EAAuE;sBACzDU,kBAAkBnB,QAAlB,CAAZ;;sBAKIE,mBAAmBA,mBAAmBhuB,MAAnB,GAA4B,CAA/C,KAAqD,EANY;;oBAAA,SAInEqX,IAJmE;sBAAA,SAKnEnC,MALmE;;;YASnEga,qBAAJ;;YAEIZ,iBAAiB,GAAjB,IAAwBC,gBAAgB,GAAxC,IAA+CF,eAAe,MAAlE,EAA0E;yBACzD,IAAf;;iBAEOP,SAAS5pB,UAAhB;SAHF,MAIO,IAAIoqB,iBAAiB,GAAjB,IAAwBC,gBAAgB,GAAxC,IAA+CF,eAAe,OAAlE,EAA2E;yBACjE,IAAf;;iBAEOP,SAAS5pB,UAAhB;SAHK,MAIA,IAAIqqB,gBAAgB,GAAhB,IAAuBD,iBAAiB,GAAxC,IAA+CD,eAAe,QAAlE,EAA4E;yBAClE,IAAf;;iBAEOP,SAASe,cAAhB;;;YAGEK,YAAJ,EAAkB;kBACRX,WAAR;sBACYA,WAAZ;mBACSQ,QAAT,GAAoB,IAApB;oBACUvB,UAAV;6BACmBjb,GAAnB;;;;UAKF4b,YAAYX,UAAZ,IACGQ,mBAAmBhuB,MADtB,IAEGguB,mBAAmBA,mBAAmBhuB,MAAnB,GAA4B,CAA/C,EAAkDkV,MAAlD,KAA6DsY,UAHlE,EAIE;2BACmBjb,GAAnB;;;;QAIE4c,UAAU,CAAC3mB,KAAD,IAAU,CAACA,MAAM,CAAN,CAA3B;QACM4mB,aAAa9oB,OAAOsD,OAAP,CAAe,GAAf,CAAnB;;QAEIulB,YAAYC,aAAa,CAAb,IAAkBxB,UAA9B,CAAJ,EAA+C;UACvCyB,mBAAmBzB,aACrBC,aADqB,GAErBA,cAAclf,KAAd,CAAoB,CAApB,EAAuBkf,cAAc7tB,MAAd,GAAuBsG,OAAOtG,MAA9B,GAAuCovB,UAA9D,CAFJ;;YAIM,IAAIhrB,KAAJ,6BACuBypB,cAAclf,KAAd,CAAoB/K,KAApB,EAA2BA,QAAQ,EAAnC,CADvB,sBACgFA,KADhF,UAC4F0rB,mBAAmBD,gBAAnB,EAAqC1B,WAArC,EAAkDK,kBAAlD,EAAsEJ,UAAtE,CAD5F,CAAN;KALF,MAQO,IAAIuB,WAAWC,eAAe,CAA9B,EAAiC;oBACxBlB,QAAd;;;KADK,MAIA,IAAIiB,WAAWC,eAAe,CAAC,CAA/B,EAAkC;aAChC,IAAP;;;YAGM,OAAO5mB,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCA,MAAM,CAAN,CAA5C;;QAEI,CAAC4lB,YAAL,EAAmB;oBACHF,YAAY1lB,KAA1B;;;aAGOlC,OAAOqI,KAAP,CAAanG,MAAMxI,MAAnB,CAAT;aACSwI,MAAMxI,MAAf;;;gBAGYivB,kBAAkBnB,QAAlB,CAAd;;MAEIE,mBAAmBhuB,MAAvB,EAA+B;QACvBqvB,oBAAmBxB,cAAclf,KAAd,CAAoB,CAApB,EAAuBkf,cAAc7tB,MAAd,GAAuBsG,OAAOtG,MAArD,CAAzB;;UAEM,IAAIoE,KAAJ,+BAAuCkrB,mBAAmBD,iBAAnB,EAAqC1B,WAArC,EAAkDK,kBAAlD,EAAsEJ,UAAtE,CAAvC,CAAN;;;MAGE,CAACtnB,OAAOtG,MAAR,IAAkB,CAAC4tB,UAAvB,EAAmC;WAC1B,IAAP;;;SAGK;0BAAA;wBAAA;cAGKC,cAAclf,KAAd,CAAoB,CAApB,EAAuB/K,KAAvB,CAHL;UAIC0C,OAAOqI,KAAP,CAAa,CAAb;GAJR;;;AAQF,SAASmgB,WAAT,CAAqBrwB,IAArB,EAA2BkwB,aAA3B,EAA0C;MACpCA,cAAclwB,IAAd,CAAJ,EAAyB;WAChBA,IAAP;;;SAGK8uB,eAAe9sB,IAAf,CAAoBhC,IAApB,YACIA,IADJ,iBAEGA,IAFV;;;AAKF,SAASwwB,iBAAT,CAA2BnB,QAA3B,EAAqC;MAC3BE,kBAD2B,GACJF,QADI,CAC3BE,kBAD2B;;MAE/BE,WAAW,EAAf;;SAGEF,mBAAmBA,mBAAmBhuB,MAAnB,GAA4B,CAA/C,KACGguB,mBAAmBA,mBAAmBhuB,MAAnB,GAA4B,CAA/C,EAAkDkV,MAAlD,KAA6DuY,gBAFlE,EAGE;gBACY,GAAZ;aACSkB,aAAT,GAAyBvtB,OAAOI,cAAP,CAAsBssB,SAASa,aAA/B,CAAzB;uBACmBpc,GAAnB;;QAGEyb,mBAAmBhuB,MAAnB,IACGguB,mBAAmBA,mBAAmBhuB,MAAnB,GAA4B,CAA/C,EAAkDkV,MAAlD,KAA6DsY,UAFlE,EAGE;yBACmBjb,GAAnB;;;;SAIG2b,QAAP;;;AAGF,SAASoB,kBAAT,CAA4BD,gBAA5B,EAA8C1B,WAA9C,EAA2DK,kBAA3D,EAA+EJ,UAA/E,EAA2F;cAClEI,mBAAmBA,mBAAmBhuB,MAAnB,GAA4B,CAA/C,KAAqD,EADa;MAC3EuvB,IAD2E,SACnFra,MADmF;;MAErFsa,oBAAoB,EAAxB;;MAEID,QAAQA,SAAS/B,UAAjB,IAA+B+B,SAAS9B,gBAA5C,EAA8D;iBAChD8B,IAAZ;;;MAGE,CAAC3B,UAAL,EAAiB;8CAC0BD,WAAzC;;;MAGI8B,aAAaF,qBACFA,IADE,UAEf,EAFJ;;SAIWE,UAAX,6BAA+CJ,gBAA/C,SAAqEG,iBAArE,WAA8FlZ,cAA9F;CAGF;;AC7hBA;;;;;;;AAOA,AACA,AACA,AACA,AACA,AAKA,AACA,AACA,AACA,AACA,AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA,IAAMoZ,aAAatuB,OAAOwH,MAAP,CAAc,IAAd,CAAnB;AACA,IAAM+mB,aAAavuB,OAAOwH,MAAP,CAAc,IAAd,CAAnB;WAII;IAFFgnB,qBAAAA;IACAtsB,sBAAAA;;AAEF,IAAMiV,UAAU,IAAIhQ,MAAJ,OAAgBlJ,qBAAhB,QAA2C,GAA3C,CAAhB;AACA,IAAMwwB,WAAW,IAAItnB,MAAJ,OAAgBjJ,sBAAhB,OAAjB;AACA,IAAM8Z,QAAQ,4BAAd;AACA,IAAM0W,qBAAqB,IAA3B;AACA,IAAMC,cAAc,gBAApB;AACA,IAAMC,YAAY,IAAI9V,IAAJ,EAAlB;AACA,IAAI+V,iBAAJ;AACA,IAAIC,gBAAJ;AACA,IAAIC,gBAAJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAoCM3K;;;;;;;;;;;;;;;;;;;;;;;;;;;gCA0CerhB,KAAK;cACdwB,KAAR,8BAA0CxB,IAAID,UAA9C,+BAAoFC,IAAIujB,KAAJ,CAAU1hB,EAAV,CAAavH,IAAjG,UAA6G0F,GAA7G;;;;;;;;;;;;;;;;;;;;gCAGiB;aACV,IAAI+D,KAAJ,cAAe,KAAKkoB,OAApB,EAAP;;;;gCAGiB;aACV,IAAIloB,KAAJ,cAAe,KAAKmoB,OAApB,EAAP;;;;;;;;;;;wCAQyBC,MAAM;UAC3B,CAAC,IAAIpoB,KAAJ,CAAU,IAAV,EAAgBqoB,MAAhB,CAAuB,aAAvB,CAAL,EAA4C;aACrCC,WAAL,GAAmB,IAAIxe,GAAJ,CAAQ,EAAR,CAAnB;;;WAGGwe,WAAL,CAAiBprB,IAAjB,CAAsBkrB,IAAtB;;;;;;;;;;;wCAQyBA,MAAM;UAC3B,CAAC,IAAIpoB,KAAJ,CAAU,IAAV,EAAgBqoB,MAAhB,CAAuB,aAAvB,CAAL,EAA4C;aACrCE,WAAL,GAAmB,IAAIze,GAAJ,CAAQ,EAAR,CAAnB;;;WAGGye,WAAL,CAAiBrrB,IAAjB,CAAsBkrB,IAAtB;;;;;;;;;;;;;;0BAWW7xB,MAAMiyB,WAAU;UACrBC,QAAQ,IAAIzoB,KAAJ,CAAU,IAAV,CAAd;;UAEIvG,SAAS+uB,SAAT,CAAJ,EAAwB;;;;;;;;;;;;UACGlL,KAAzB,UACSL,QADT,GACoBuL,SADpB;;;UAKE3wB,WAAW2wB,SAAX,KAAwB,CAACE,aAAapL,KAAb,EAAoBkL,SAApB,CAA7B,EAA4D;YACpDjvB,eAAcivB,SAApB;;;;;6BAGclK,IAAZ,EAAkB;;;8HACVA,IADU;;yBAGJ7mB,IAAZ,SAAuB6mB,IAAvB;;;;;UAJqBhB,KAAzB;;;UASE,CAACzlB,WAAW2wB,SAAX,CAAL,EAA2B;gBACjBG,IAAR,qHAAgIpyB,IAAhI;;;;;UAKE,CAACmyB,aAAapL,KAAb,EAAoBkL,SAApB,CAAL,EAAoC;oBACtBA,SAAZ;;;UAGEhB,WAAWjxB,IAAX,CAAJ,EAAsB;gBACZoyB,IAAR,WAAsBpyB,IAAtB;;;;;UAKE,CAAC8Z,QAAQ9X,IAAR,CAAahC,IAAb,CAAL,EAAyB;gBACfoyB,IAAR,YAAuBpyB,IAAvB;;;;;UAKE,CAACkyB,MAAMJ,MAAN,CAAa,SAAb,CAAL,EAA8B;aACvBH,OAAL,GAAehvB,OAAOwH,MAAP,CAAc+nB,MAAMpvB,KAAN,GAAc4G,CAAd,CAAgBioB,OAA9B,CAAf;;;UAGEU,oBAAJ;;UAEI;sBACY,CAAC,KAAKN,WAAL,IAAoB,IAAIxe,GAAJ,CAAQ,EAAR,CAArB,EAAkClH,MAAlC,CAAyC,UAAC4lB,QAAD,EAAWJ,IAAX,EAAoB;cACnEQ,cAAcR,KAAKI,QAAL,EAAejyB,IAAf,CAApB;;iBAEOmyB,aAAapL,KAAb,EAAoBsL,WAApB,IACHA,WADG,GAEHJ,QAFJ;SAHY,EAMXA,SANW,CAAd;OADF,CAQE,OAAOvsB,GAAP,EAAY;gBACJwB,KAAR,wBAAoC,KAAKorB,KAAzC,mCAA+E5sB,GAA/E;;;UAGEysB,aAAapL,KAAb,EAAoBsL,WAApB,CAAJ,EAAsC;oBACzBA,WAAX;;;UAGI/C,YAAY,EAAlB;;gBAESgD,KAAT,GAAiBtyB,IAAjB;gBACSuyB,KAAT,GAAiBC,qBACfC,uBACEhM,mBACMwL,UAASvL,QAAT,IAAqB,EAD3B,GAEEuL,UAAStZ,kBAFX,CADF,EAKE2W,SALF,CADe,CAAjB;gBASSoD,UAAT,GAAsB,IAAIjpB,KAAJ,CAAU6lB,SAAV,EACnBqD,MADmB,CACZ,IADY,EACN,GADM,EAEnBlrB,IAFmB,EAAtB;;UAII,IAAIgC,KAAJ,CAAUwoB,SAAV,EAAoBH,MAApB,CAA2B,aAA3B,CAAJ,EAA+C;YACzCroB,KAAJ,CAAUwoB,UAASW,WAAnB,EAAgC9vB,KAAhC,CAAsC,IAAtC;;;WAGG6uB,OAAL,CAAa3xB,IAAb,IAAqBiyB,SAArB;;;;;;;;;;;;;;0BAWWjyB,MAAMiyB,UAAU;UACrBC,QAAQ,IAAIzoB,KAAJ,CAAU,IAAV,CAAd;;UAEInI,WAAW2wB,QAAX,KAAwB,CAACE,aAAazH,KAAb,EAAoBuH,QAApB,CAA7B,EAA4D;YACpDY,eAAcZ,QAApB;;;;;;;;;;;;wCAGc/H,QADd,EACwB+B,QADxB,EACkC;2BAClB/qB,IAAZ,CAAiB,IAAjB,EAAuBgpB,QAAvB,EAAiC+B,QAAjC,EAA2C,IAA3C;;;;UAFqBvB,KAAzB;;;UAOE,CAACyH,aAAazH,KAAb,EAAoBuH,QAApB,CAAL,EAAoC;gBAC1BG,IAAR,WAAsBpyB,IAAtB;;;;;UAKEkxB,WAAWlxB,IAAX,CAAJ,EAAsB;gBACZoyB,IAAR,WAAsBpyB,IAAtB;;;;;UAKE,CAACoxB,SAASpvB,IAAT,CAAchC,IAAd,CAAL,EAA0B;gBAChBoyB,IAAR,YAAuBpyB,IAAvB;;;;;UAKE,CAACkyB,MAAMJ,MAAN,CAAa,SAAb,CAAL,EAA8B;aACvBF,OAAL,GAAejvB,OAAOwH,MAAP,CAAc+nB,MAAMpvB,KAAN,GAAc4G,CAAd,CAAgBkoB,OAA9B,CAAf;;;UAGES,oBAAJ;;UAEI;sBACY,CAAC,KAAKL,WAAL,IAAoB,IAAIze,GAAJ,CAAQ,EAAR,CAArB,EAAkClH,MAAlC,CAAyC,UAAC4lB,QAAD,EAAWJ,IAAX,EAAoB;cACnEQ,cAAcR,KAAKI,QAAL,EAAejyB,IAAf,CAApB;;iBAEOmyB,aAAazH,KAAb,EAAoB2H,WAApB,IACHA,WADG,GAEHJ,QAFJ;SAHY,EAMXA,QANW,CAAd;OADF,CAQE,OAAOvsB,GAAP,EAAY;gBACJwB,KAAR,wBAAoC,KAAKorB,KAAzC,mCAA+E5sB,GAA/E;;;UAGEysB,aAAazH,KAAb,EAAoB2H,WAApB,CAAJ,EAAsC;mBACzBA,WAAX;;;eAGOC,KAAT,GAAiBtyB,IAAjB;eACS8yB,MAAT,GAAkBC,qBAAqB/yB,IAArB,CAAlB;;WAEK4xB,OAAL,CAAa5xB,IAAb,IAAqBiyB,QAArB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2BA4BuB;wCAAVe,QAAU;gBAAA;;;aAChB,IAAIzf,GAAJ,CAAQtO,SAAR,EAAmBoH,MAAnB,CAA0B,UAAC4c,KAAD,EAAQgK,OAAR,EAAoB;YAC7CZ,cAAcY,QAAQhK,KAAR,CAApB;;eAEOkJ,aAAapL,KAAb,EAAoBsL,WAApB,IACHA,WADG,GAEHpJ,KAFJ;OAHK,EAMJ,IANI,CAAP;;;;iBASUlB,IAAZ,EAAkB;;;;QAEd/nB,IAFc,GAYZ+nB,IAZY,CAEd/nB,IAFc;QAGRkzB,YAHQ,GAYZnL,IAZY,CAGdjhB,IAHc;QAIdygB,UAJc,GAYZQ,IAZY,CAIdR,UAJc;QAKd9O,QALc,GAYZsP,IAZY,CAKdtP,QALc;QAMdC,MANc,GAYZqP,IAZY,CAMdrP,MANc;QAOd4P,UAPc,GAYZP,IAZY,CAOdO,UAPc;QAQd6K,WARc,GAYZpL,IAZY,CAQdoL,WARc;QASdlM,WATc,GAYZc,IAZY,CASdd,WATc;QAUdG,cAVc,GAYZW,IAZY,CAUdX,cAVc;QAWd4B,SAXc,GAYZjB,IAZY,CAWdiB,SAXc;;QAaVO,mBAAmB,IAAIhW,GAAJ,CAAQ,EAAR,CAAzB;QACMvQ,cAAc,IAAIyG,KAAJ,CAAU,IAAV,EAAgB3G,KAAhB,GAAwB4G,CAAxB,CAA0B1G,WAA9C;QACMowB,iBAAiB,IAAI7f,GAAJ,CAAQ,EAAR,CAAvB;QACM+V,SAAS,IAAI/V,GAAJ,CAAQ,EAAR,CAAf;QACM8f,gBAAgB3a,kBAAkBqO,KAAxC;;2BAEuB,IAAvB,EAA6B;;;;;;;SAOxB,IAPwB;;;;;;;;;;;;;;;;;UAwBvB;kBAAA;8BAAA;iBAGO,IAAIxT,GAAJ,CAAQ,EAAR,CAHP;sBAAA;8BAAA;gCAAA;gCAAA;sCAAA;iBASO,IAAIkI,IAAJ,EATP;YAUEzY,WAVF;sBAWYyV,YAAY,IAAIlF,GAAJ,CAAQ,EAAR,CAXxB;kBAYQ6f,cAZR;sBAAA;4BAAA;0CAAA;kBAgBQ,kBAAC7tB,IAAD,EAAO+tB,QAAP,EAAiBC,QAAjB,EAA2B1J,YAA3B,EAAyC2J,QAAzC,EAAmDC,QAAnD,EAAgE;cACpE,CAACnyB,WAAWiE,IAAX,CAAL,EAAuB;mBACdA,IAAP;;;yBAGa,CAAC,CAACskB,YAAjB;qBACW,CAAC,CAAC2J,QAAb;;cAEMjL,QAASvoB,SAAS,SAAT,IAAsB,CAACwzB,QAAxB,IAAqCC,QAArC,GACV,CAACA,kBAAD,EAAmBlsB,EAAnB,CAAsBghB,KADZ,SAAd;;sBAG6BgL,WAAWA,SAAShsB,EAApB,GAAyB,EAXkB;cAWhEgiB,gBAXgE,SAWhEA,gBAXgE;;;;;cAclET,WAAW,SAAXA,QAAW,GAAM;gBACjB9b,eAAJ;;gBAEIsmB,QAAJ,EAAc;yBACD,IAAX;wBACU,IAAI/f,GAAJ,CAAQ,EAAR,CAAV;;;gBAGE;uBACOhO,KAAKgjB,KAAL,CAAT;aADF,CAEE,OAAO7iB,GAAP,EAAY;kBACRD,UAAJ,GAAiBF,KAAKE,UAAtB;kBACIH,QAAJ,GAAeC,KAAKD,QAApB;kBACI2jB,KAAJ;;kBAEI3nB,WAAW0B,YAAY0wB,WAAvB,CAAJ,EAAyC;4BAC3BA,WAAZ,CAAwBhuB,GAAxB;;;;gBAIA4tB,QAAJ,EAAc;kBACNK,gBAAgB,IAAIpgB,GAAJ,CAAQ,EAAR,CAAtB;;sBAEQU,OAAR,CAAgB,UAAC0V,QAAD,EAAc;oBACtBC,UAAU,SAAVA,OAAU,GAAM;sBACdgK,YAAY9K,UAAlB;;sBAEI8K,cAAc5mB,MAAlB,EAA0B;6BACf4mB,SAAT,EAAoB5mB,MAApB;;iBAJJ;oBAOM6mB,eAAe;4CAAA;kCAAA;;iBAArB;;wBAMQC,QAAR,GAAmB,YAAM;gCACT7f,OAAd,CAAsB,UAAC4f,YAAD,EAAkB;wBAEpCjK,OAFoC,GAIlCiK,YAJkC,CAEpCjK,OAFoC;wBAGpCD,QAHoC,GAIlCkK,YAJkC,CAGpClK,QAHoC;;wBAKhCoK,SAASxK,iBAAiBpe,OAAjB,CAAyB0oB,YAAzB,CAAf;wBACMG,SAASrK,SAASxe,OAAT,CAAiBye,OAAjB,CAAf;;wBAEImK,WAAW,CAAC,CAAhB,EAAmB;uCACArf,MAAjB,CAAwBqf,MAAxB,EAAgC,CAAhC;;;wBAGEC,WAAW,CAAC,CAAhB,EAAmB;+BACRtf,MAAT,CAAgBsf,MAAhB,EAAwB,CAAxB;;mBAbJ;iBADF;;8BAmBcrtB,IAAd,CAAmBktB,YAAnB;iCACiBltB,IAAjB,CAAsBktB,YAAtB;yBACSltB,IAAT,CAAcijB,OAAd;eAnCF;;yBAsCW,KAAX;wBACU,IAAIrW,GAAJ,CAAQ,EAAR,CAAV;;;mBAGKvG,MAAP;WAjEF;;iBAoEO8b,UAAP;SAlGA;gBAoGM,gBAACmL,cAAD,EAAoB;yBACX1K,gBAAf;;yBAEetV,OAAf,CAAuB,UAACuV,KAAD,EAAW;kBAC1BjiB,EAAN,CAASkc,MAAT,CAAgB,IAAhB;WADF;;iBAIOxP,OAAP,CAAe,UAACwV,KAAD,EAAW;kBAClBliB,EAAN,CAASkc,MAAT,CAAgB,IAAhB;WADF;;cAII;mBACGyQ,YAAL;WADF,CAEE,OAAOxuB,GAAP,EAAY;oBACJwB,KAAR,wBAAoClH,IAApC,qBAA2D0F,GAA3D;;;cAGE,CAACuuB,cAAD,IAAmBZ,aAAvB,EAAsC;mBAC7B9rB,EAAP,CAAUmiB,aAAV,CAAwB,OAAKniB,EAAL,CAAQof,OAAhC;;;cAGE,CAACsN,cAAD,IAAmBd,WAAvB,EAAoC;gBAC5BhuB,QAAQguB,YAAY5rB,EAAZ,CAAekR,QAAf,CAAwBtN,OAAxB,QAAd;;gBAEIhG,UAAU,CAAC,CAAf,EAAkB;0BACJoC,EAAZ,CAAekR,QAAf,CAAwB/D,MAAxB,CAA+BvP,KAA/B,EAAsC,CAAtC;;;;iBAICoC,EAAL,CAAQof,OAAR,CAAgBlD,MAAhB;SAjIA;oBAmIU,oBAAC0Q,YAAD,EAAeC,YAAf,EAAgC;cACpCjvB,QAAQ,OAAKoC,EAAL,CAAQof,OAAR,CAAgBxb,OAAhB,CAAwBgpB,aAAazqB,CAAb,CAAe,CAAf,EAAkB0Z,eAA1C,IAA6D,CAA3E;;cAEIje,UAAU,CAAd,EAAiB;mBACVoC,EAAL,CAAQof,OAAR,GAAkBwN,aACfjkB,KADe,GAEfmkB,SAFe,CAEL,OAAK9sB,EAAL,CAAQof,OAAR,CAAgBjd,CAFX,CAAlB;WADF,MAIO;mBACAnC,EAAL,CAAQof,OAAR,GAAkB,OAAKpf,EAAL,CAAQof,OAAR,CACfzW,KADe,CACT,CADS,EACN/K,KADM,EAEfkvB,SAFe,CAELF,aAAazqB,CAFR,EAGf2qB,SAHe,CAGL,OAAK9sB,EAAL,CAAQof,OAAR,CAAgBzW,KAAhB,CAAsB/K,KAAtB,EAA6BuE,CAHxB,CAAlB;;;cAME2pB,iBAAiB,CAACe,YAAtB,EAAoC;mBAC3B7sB,EAAP,CAAU+sB,UAAV,CAAqBH,YAArB;;SAlJF;qBAqJW,qBAACI,aAAD,EAAgB/kB,KAAhB,EAA0B;cAC/BrK,QAAQ,OAAKoC,EAAL,CAAQof,OAAR,CAAgBxb,OAAhB,CAAwBopB,cAAc7qB,CAAd,CAAgB,CAAhB,CAAxB,CAAd;cACM8qB,aAAa,OAAKjtB,EAAL,CAAQof,OAAR,CAAgBxb,OAAhB,CAAwBqE,MAAM9F,CAAN,CAAQ,CAAR,CAAxB,IAAsC,CAAzD;;cAEI8qB,eAAe,CAAnB,EAAsB;mBACfjtB,EAAL,CAAQof,OAAR,GAAkB4N,cACfrkB,KADe,GAEfmkB,SAFe,CAEL,OAAK9sB,EAAL,CAAQof,OAAR,CAAgBzW,KAAhB,CAAsBskB,UAAtB,EAAkCrvB,KAAlC,EAAyCuE,CAFpC,EAGf2qB,SAHe,CAGL,OAAK9sB,EAAL,CAAQof,OAAR,CAAgBzW,KAAhB,CAAsB/K,QAAQovB,cAAchzB,MAA5C,EAAoDmI,CAH/C,CAAlB;WADF,MAKO,IAAIvE,QAAQqvB,UAAZ,EAAwB;mBACxBjtB,EAAL,CAAQof,OAAR,GAAkB,OAAKpf,EAAL,CAAQof,OAAR,CACfzW,KADe,CACT,CADS,EACNskB,UADM,EAEfH,SAFe,CAELE,cAAc7qB,CAFT,EAGf2qB,SAHe,CAGL,OAAK9sB,EAAL,CAAQof,OAAR,CAAgBzW,KAAhB,CAAsBskB,UAAtB,EAAkCrvB,KAAlC,EAAyCuE,CAHpC,EAIf2qB,SAJe,CAIL,OAAK9sB,EAAL,CAAQof,OAAR,CAAgBzW,KAAhB,CAAsB/K,QAAQovB,cAAchzB,MAA5C,EAAoDmI,CAJ/C,CAAlB;WADK,MAMA;mBACAnC,EAAL,CAAQof,OAAR,GAAkB,OAAKpf,EAAL,CAAQof,OAAR,CACfzW,KADe,CACT,CADS,EACN/K,KADM,EAEfkvB,SAFe,CAEL,OAAK9sB,EAAL,CAAQof,OAAR,CAAgBzW,KAAhB,CAAsB/K,QAAQovB,cAAchzB,MAA5C,EAAoDizB,UAApD,EAAgE9qB,CAF3D,EAGf2qB,SAHe,CAGLE,cAAc7qB,CAHT,EAIf2qB,SAJe,CAIL,OAAK9sB,EAAL,CAAQof,OAAR,CAAgBzW,KAAhB,CAAsBskB,UAAtB,EAAkC9qB,CAJ7B,CAAlB;;;cAOE2pB,iBAAiBmB,UAArB,EAAiC;mBACxBjtB,EAAP,CAAUktB,WAAV,CAAsBF,aAAtB,EAAqC/kB,KAArC;;SA7KF;uBAgLa,uBAACklB,eAAD,EAAqB;iBAC7BntB,EAAL,CAAQof,OAAR,GAAkB,OAAKpf,EAAL,CAAQof,OAAR,CAAgBzb,MAAhB,CAAuB,UAAC1L,IAAD;mBACvCk1B,gBAAgBvpB,OAAhB,CAAwB3L,IAAxB,MAAkC,CAAC,CADI;WAAvB,CAAlB;;cAII6zB,aAAJ,EAAmB;mBACV9rB,EAAP,CAAUmiB,aAAV,CAAwBgL,eAAxB;;SAtLF;2BAyLiB,2BAACC,eAAD,EAAkBC,QAAlB,EAA+B;cACxC5L,SADwC,GAC1B,OAAKzhB,EADqB,CACxCyhB,SADwC;;cAE5CxZ,QAAQ+hB,SAAZ;;cAEIvI,qBAAqBjC,KAAzB,EAAgC;oBACtBiC,UAAUzhB,EAAV,CAAa2hB,aAAb,CAA2ByL,eAA3B,EAA4CC,QAA5C,CAAR;WADF,MAEO,IAAI5L,SAAJ,EAAe;oBACZA,SAAR;4BACgB6L,WAAhB,CAA4B7L,SAA5B;;gBAEIqK,aAAJ,EAAmB;kBACbuB,QAAJ,EAAc;uBACLrtB,EAAP,CAAUktB,WAAV,CAAsBE,eAAtB,EAAuCnlB,KAAvC;eADF,MAEO;uBACEjI,EAAP,CAAU+sB,UAAV,CAAqBK,eAArB,EAAsC,IAAtC;;;WARC,MAWA,IAAItB,aAAJ,EAAmB;gBAChBrK,UADgB,GACFtQ,OAAOnR,EADL,CAChByhB,SADgB;;;gBAGpBA,UAAJ,EAAe;kBACToL,qBAAJ;;kBAEIpL,sBAAqBjC,KAAzB,EAAgC;wBACtBiC,WAAUzhB,EAAV,CAAa2hB,aAAb,CAA2ByL,eAA3B,EAA4CC,QAA5C,CAAR;+BACe,IAAf;eAFF,MAGO;wBACG5L,UAAR;+BACe,KAAf;gCACgB6L,WAAhB,CAA4B7L,UAA5B;;;kBAGE4L,QAAJ,EAAc;uBACLrtB,EAAP,CAAUktB,WAAV,CAAsBE,eAAtB,EAAuCnlB,KAAvC;eADF,MAEO;uBACEjI,EAAP,CAAU+sB,UAAV,CAAqBK,eAArB,EAAsCP,YAAtC;;aAfJ,MAiBO;sBACG1b,OAAOnR,EAAP,CAAUutB,iBAAV,CAA4BH,eAA5B,EAA6CC,QAA7C,CAAR;;WArBG,MAuBA;4BACWtX,IAAhB,CAAqBgL,UAArB,EAAiC,KAAjC;;;cAGEsM,QAAJ,EAAc;mBACPrtB,EAAL,CAAQktB,WAAR,CAAoBE,eAApB,EAAqCnlB,KAArC;WADF,MAEO;mBACAjI,EAAL,CAAQ+sB,UAAR,CAAmBK,eAAnB,EAAoC,IAApC;;;iBAGKnlB,KAAP;SA3OA;uBA6Oa,uBAACmlB,eAAD,EAAkBC,QAAlB,EAA+B;cACpC5L,SADoC,GACtB,OAAKzhB,EADiB,CACpCyhB,SADoC;;cAExCxZ,QAAQ+hB,SAAZ;cACIwD,uBAAJ;;cAEI,OAAKxtB,EAAL,CAAQof,OAAR,CAAgBplB,MAApB,EAA4B;oBAClB,OAAKgG,EAAL,CAAQof,OAAR,CAAgBmK,IAAhB,EAAR;6BACiB,IAAjB;4BACgB+D,WAAhB,CAA4BrlB,KAA5B;WAHF,MAIO,IAAIwZ,qBAAqBjC,KAAzB,EAAgC;oBAC7BiC,UAAUzhB,EAAV,CAAa2hB,aAAb,CAA2ByL,eAA3B,EAA4CC,QAA5C,CAAR;WADK,MAEA,IAAI5L,SAAJ,EAAe;oBACZA,SAAR;6BACiB,IAAjB;4BACgB6L,WAAhB,CAA4B7L,SAA5B;WAHK,MAIA,IAAIqK,aAAJ,EAAmB;oBAChB3a,OAAOnR,EAAP,CAAUutB,iBAAV,CAA4BH,eAA5B,EAA6CC,QAA7C,CAAR;WADK,MAEA;4BACWtX,IAAhB,CAAqBgL,UAArB,EAAiC,KAAjC;;;cAGE+K,iBAAiB0B,cAArB,EAAqC;gBAC/BH,QAAJ,EAAc;qBACLrtB,EAAP,CAAUktB,WAAV,CAAsBE,eAAtB,EAAuCnlB,KAAvC;aADF,MAEO;qBACEjI,EAAP,CAAU+sB,UAAV,CAAqBK,eAArB;;;;iBAIGnlB,KAAP;;;KAlSN;;YAuSQxM,YAAYgyB,aAApB,EAAmC,UAACn1B,KAAD,EAAQswB,QAAR,EAAqB;aACjDA,QAAL,IAAiBtwB,KAAjB;KADF;gBAGY6yB,UAAZ,CAAuBze,OAAvB,CAA+B,UAACkc,QAAD,EAAc;aACtCA,QAAL,IAAiB,OAAKA,QAAL,CAAjB;KADF;;QAIM8E,aAAatyB,OAAOwH,MAAP,CAAc,IAAd,CAAnB;QACM+qB,cAAc,IAAIzrB,KAAJ,CAAUwrB,UAAV,CAApB;QACInuB,OAAOnE,OAAOwH,MAAP,CAAcnH,YAAY4vB,WAAZ,IAA2B,IAAzC,CAAX;QACIuC,iBAAJ;;QAEI1rB,KAAJ,CAAUypB,YAAV,EAAwBjf,OAAxB,CAAgC,UAACpU,KAAD,EAAQu1B,GAAR,EAAgB;UACxCC,UAAU/D,YAAYtvB,IAAZ,CAAiBozB,GAAjB,CAAhB;UACME,YAAYD,WAAWF,QAAX,GACdxyB,OAAOwH,MAAP,CAAcrD,IAAd,CADc,GAEdA,IAFJ;;aAIOwuB,SAAP;;UAEID,OAAJ,EAAa;YACLE,WAAWtO,YAAY1f,EAAZ,CAAeuhB,QAAf,CAAwBjpB,KAAxB,EAA+B,UAACA,KAAD,EAAW;kBACjDy1B,SAAR,EAAmB,UAACz1B,KAAD,EAAQu1B,GAAR,EAAgB;mBAC1BE,UAAUF,GAAV,CAAP;WADF;gCAGsBE,SAAtB,EAAiCE,kBAAkB31B,KAAlB,CAAjC;wBACciH,IAAd,EAAoBmuB,UAApB,EAAgCC,WAAhC;SALe,SAAjB;;mBAQW,IAAX;;eAEO9uB,sBAAsBkvB,SAAtB,EAAiCE,kBAAkBD,QAAlB,CAAjC,CAAP;;;UAGIE,cAAcz1B,SAAS,YAA7B;UACM6pB,eAAe4L,eAAeL,QAAQ,OAA5C;;iBAEW,KAAX;;UAEIp1B,SAAS,QAAT,IAAqBo1B,QAAQ,KAAjC,EAAwC;gBAC9BnO,YAAY1f,EAAZ,CAAeuhB,QAAf,CAAwBjpB,KAAxB,EAA+B,UAACA,KAAD,EAAW;oBACtCu1B,GAAV,IAAiBv1B,KAAjB;wBACciH,IAAd,EAAoBmuB,UAApB,EAAgCC,WAAhC;SAFM,UAGCrL,YAHD,EAGe4L,eAAetC,YAAY5rB,EAAZ,CAAevH,IAAf,KAAwB,SAHtD,CAAR;;;4BAMoBs1B,SAAtB,qBACGF,GADH,EACSv1B,KADT;KAlCF;;2BAuCuB,IAAvB,EAA6B;;;;;;YAMrBo1B,UANqB;;;;;;;eAalBtyB,OAAOwH,MAAP,CACP8c,cACItkB,OAAOwH,MAAP,CAAc8c,YAAYyO,OAA1B,CADJ,GAEI,IAHG,CAbkB;;;;;;;8BAAA;;;;;;;;KAA7B;;kBAkCc5uB,IAAd,EAAoBmuB,UAApB,EAAgCC,WAAhC;;QAEI/B,WAAJ,EAAiB;kBACH5rB,EAAZ,CAAekR,QAAf,CAAwB9R,IAAxB,CAA6B,IAA7B;;;;;;;;;;;;;;qCAUa;;;;;;;;;;kCAOH;;;;;;;;;;mCAOC;;;;;;;;;;;iCAQFgvB,QAAQ;aACZ,IAAP,EAAaA,MAAb;;;;;;;;;;;;;;qCAWelwB,YAAYjB,UAAU;eAC5B,CAACiB,UAAD,CAAT,EAAuB,CAAC,QAAD,CAAvB,EAAmC,wBAAnC;;qBAKIwpB,QAAQxpB,UAAR,EAAoBA,UAApB,EAAgC,IAAhC,CANiC;UAIvBJ,IAJuB,YAInCI,UAJmC;UAKnCH,QALmC,YAKnCA,QALmC;;UAQ/BC,OAAOH,sBAAsBC,IAAtB,EAA4BC,QAA5B,CAAb;;aAEO,KAAKiC,EAAL,CAAQ0f,WAAR,CAAoB1f,EAApB,CAAuBuhB,QAAvB,CAAgCvjB,IAAhC,EAAsCf,QAAtC,EAAgD,IAAhD,CAAP;;;;;;;;;;;;;iCAUWiB,YAAY;eACd,CAACA,UAAD,CAAT,EAAuB,CAAC,QAAD,CAAvB,EAAmC,oBAAnC;;sBAKIwpB,QAAQxpB,UAAR,EAAoBA,UAApB,EAAgC,IAAhC,CANmB;UAITJ,IAJS,aAIrBI,UAJqB;UAKrBH,QALqB,aAKrBA,QALqB;;UAQjBC,OAAOH,sBAAsBC,IAAtB,EAA4BC,QAA5B,CAAb;;aAEO,KAAKiC,EAAL,CAAQ0f,WAAR,CAAoB1f,EAApB,CAAuBuhB,QAAvB,CAAgCvjB,IAAhC,CAAP;;;;;;;;;;;;+BASSmwB,SAAS;4BACI,KAAKA,OAA3B,EAAoCA,OAApC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BAoCa;;;yCAAN1F,IAAM;YAAA;;;UACP4F,aAAa3wB,UAAUA,UAAU1D,MAAV,GAAmB,CAA7B,CAAnB;;UAEI,CAACD,WAAWs0B,UAAX,CAAL,EAA6B;gBACnBxD,IAAR,qDAA+D,KAAK7qB,EAAL,CAAQvH,IAAvE;;;;;UAKI4pB,UAAU,SAAVA,OAAU,GAAM;;OAAtB;;UAII3kB,UAAU1D,MAAV,KAAqB,CAAzB,EAA4B;0BACR,IAAlB,EAAwBqoB,OAAxB;wBACgB,IAAhB,EAAsBA,OAAtB;2BACmB,IAAnB,EAAyBA,OAAzB;;;;;;;cAOM3kB,SAAR,EAAmB,UAACkrB,QAAD,EAAc;YAC3BA,aAAayF,UAAjB,EAA6B;;;;wBAIdzF,QAAf;;YAEIA,aAAa,GAAjB,EAAsB;iBACb0F,0BAAwBjM,OAAxB,CAAP;;;YAGEuG,aAAa,MAAjB,EAAyB;iBAChB2F,wBAAsBlM,OAAtB,CAAP;;;YAGEuG,aAAa,SAAjB,EAA4B;iBACnB4F,2BAAyBnM,OAAzB,CAAP;;;YAGE,UAAU5nB,IAAV,CAAemuB,QAAf,CAAJ,EAA8B;qBACjBA,SAAShvB,OAAT,CAAiB,SAAjB,EAA4B,EAA5B,CAAX;;cAEI,CAAC,OAAKoG,EAAL,CAAQT,IAAR,CAAaqpB,QAAb,CAAL,EAA6B;;;;iBAIxB5oB,EAAL,CAAQT,IAAR,CAAaqpB,QAAb,EAAuBxG,QAAvB,CAAgCqM,IAAhC,CAAqCrvB,IAArC,CAA0CijB,OAA1C;;;;;YAKE,aAAa5nB,IAAb,CAAkBmuB,QAAlB,CAAJ,EAAiC;qBACpBA,SAAShvB,OAAT,CAAiB,YAAjB,EAA+B,EAA/B,CAAX;;cAEI,CAAC,OAAKoG,EAAL,CAAQmuB,OAAR,CAAgBvF,QAAhB,CAAL,EAAgC;;;;cAIxBxG,QAPuB,GAOV,OAAKpiB,EAAL,CAAQmuB,OAAR,CAAgBvF,QAAhB,CAPU,CAOvBxG,QAPuB;;;mBAStBqM,IAAT,CAAcrvB,IAAd,CAAmBijB,OAAnB;iBACKriB,EAAL,CAAQgiB,gBAAR,CAAyB5iB,IAAzB,CAA8B;4BAAA;;WAA9B;;;;;YAQE,CAAC,OAAKY,EAAL,CAAQouB,MAAR,CAAexF,QAAf,CAAL,EAA+B;;;;eAI1B5oB,EAAL,CAAQouB,MAAR,CAAexF,QAAf,EAAyBxG,QAAzB,CAAkCqM,IAAlC,CAAuCrvB,IAAvC,CAA4CijB,OAA5C;OArDF;;;;;;;;AAvzBE7C,MACG4K,UAAUhvB,OAAOwH,MAAP,CAAc8mB,UAAd;AADblK,MAEG6K,UAAUjvB,OAAOwH,MAAP,CAAc+mB,UAAd;AAFbnK,MAWGpO,qBAAqB;AAXxBoO,MAmBG6L,cAAc;AAnBjB7L,MA2BGiO,gBAAgB;AA3BnBjO,MAmCGL,WAAW;;;AAg1BpB,IAAIjd,KAAJ,CAAUsd,MAAMnf,SAAhB,EAA2B9E,KAA3B,CAAiC,IAAjC;;AAEAmzB,iBAAiBC,MAAjB,EAAyBjF,UAAzB,EAAqClK,KAArC;;AAEA,IAAMoP,SAASpP,MAAM4K,OAArB;;IAEMjH;;;;;;;;;;;;;2BAWqB;yCAAVsI,QAAU;gBAAA;;;aAChB,IAAIzf,GAAJ,CAAQtO,SAAR,EAAmBoH,MAAnB,CAA0B,UAAC4c,KAAD,EAAQgK,OAAR,EAAoB;YAC7CZ,cAAcY,QAAQhK,KAAR,CAApB;;eAEOkJ,aAAazH,KAAb,EAAoB2H,WAApB,IACHA,WADG,GAEHpJ,KAFJ;OAHK,EAMJ,IANI,CAAP;;;;iBASUlB,IAAZ,EAAkB;;;;QAEd/nB,IAFc,GAWZ+nB,IAXY,CAEd/nB,IAFc;QAGdH,KAHc,GAWZkoB,IAXY,CAGdloB,KAHc;QAIdu2B,OAJc,GAWZrO,IAXY,CAIdqO,OAJc;QAKd52B,IALc,GAWZuoB,IAXY,CAKdvoB,IALc;QAMdsH,IANc,GAWZihB,IAXY,CAMdjhB,IANc;QAOduvB,OAPc,GAWZtO,IAXY,CAOdsO,OAPc;QAQdlD,WARc,GAWZpL,IAXY,CAQdoL,WARc;QASdlM,WATc,GAWZc,IAXY,CASdd,WATc;QAUdG,cAVc,GAWZW,IAXY,CAUdX,cAVc;;QAYVmC,mBAAmB,IAAIhW,GAAJ,CAAQ,EAAR,CAAzB;QACMoW,WAAW,IAAIpW,GAAJ,CAAQ,EAAR,CAAjB;;2BAEuB,IAAvB,EAA6B;UACvB;kBAAA;gBAEM1T,KAFN;oBAAA;mBAISu2B,OAJT;gCAAA;gCAAA;sCAAA;0BAAA;0CAAA;kBAUQ,kBAACxM,OAAD,EAAa;oBAKjB,OAAKriB,EALY;cAEnB+uB,SAFmB,OAEnBA,SAFmB;cAGnBz2B,KAHmB,OAGnBA,KAHmB;cAInB02B,MAJmB,OAInBA,MAJmB;;cAMfxJ,eAAeuJ,YACjBz2B,KADiB,GAEjBonB,YAAY1f,EAAZ,CAAeuhB,QAAf,CAAwByN,MAAxB,CAFJ;;cAII3M,OAAJ,EAAa;qBACFjjB,IAAT,CAAcijB,OAAd;;;iBAGKmD,YAAP;SAxBA;gBA0BM,gBAACkH,cAAD,EAAoB;yBACX1K,gBAAf;;cAEI;mBACG2K,YAAL;WADF,CAEE,OAAOxuB,GAAP,EAAY;oBACJwB,KAAR,wBAAoClH,IAApC,qBAA2D0F,GAA3D;;;cAGE,CAACuuB,cAAD,IAAmBd,WAAvB,EAAoC;gBAC5BhuB,QAAQguB,YAAY5rB,EAAZ,CAAe+hB,MAAf,CAAsBne,OAAtB,QAAd;;gBAEIhG,UAAU,CAAC,CAAf,EAAkB;0BACJoC,EAAZ,CAAe+hB,MAAf,CAAsB5U,MAAtB,CAA6BvP,KAA7B,EAAoC,CAApC;;;;;KAxCV;;SA+CK2B,IAAL,GAAYA,IAAZ;SACKuvB,OAAL,GAAeA,OAAf;SACKpP,WAAL,GAAmBA,WAAnB;SACKG,cAAL,GAAsBA,cAAtB;SACK5nB,IAAL,GAAYA,IAAZ;SACK4Y,IAAL,GAAY5Y,KAAKkK,CAAL,CAAO,CAAP,CAAZ;;QAEIypB,WAAJ,EAAiB;kBACH5rB,EAAZ,CAAe+hB,MAAf,CAAsB3iB,IAAtB,CAA2B,IAA3B;;;;;;kCAIU;;;mCAEC;;;;;;;;;;;;qCASEnC,UAAU;aAClB,KAAK+C,EAAL,CAAQuhB,QAAR,CAAiBtkB,QAAjB,CAAP;;;;;;;;;;;;mCASa;aACN,KAAK+C,EAAL,CAAQuhB,QAAR,EAAP;;;;;;AArHE4B,MACG5B,WAAW;;;AAwHpBmN,iBAAiBO,MAAjB,EAAyBtF,UAAzB,EAAqCxG,KAArC;;AAEA,IAAMpB,SAASvC,MAAM6K,OAArB;;AAEA,SAAS6E,OAAT,CAAiBxN,KAAjB,EAAwB7Q,IAAxB,EAA8B;MACxB,CAAC+d,OAAOlN,KAAP,CAAL,EAAoB;UACZ,IAAItjB,KAAJ,UAAkBsjB,KAAlB,sCAAN;;;MAGIX,aAAa,IAAI7M,IAAJ,CAASrD,IAAT,CAAnB;;aAEWnY,IAAX,CAAgB,EAAhB;;MAEI,CAACqoB,WAAW/mB,MAAhB,EAAwB;UAChB,IAAIoE,KAAJ,CAAU,8DAAV,CAAN;;;aAGS+D,CAAX,CAAa,CAAb,EAAgBgtB,eAAhB,GAAkC7O,YAAY;UACtC;YACEoB,KADF;aAEG,EAFH;gBAGM,IAAI1V,GAAJ,CAAQ,EAAR;KAJgC;YAMpC+U,UANoC;;GAAZ,CAAlC;aASW1oB,IAAX,CAAgB,aAAhB,EAA+BqpB,KAA/B;;;AAGF,SAAS0N,SAAT,CAAmBve,IAAnB,EAAyB;MACjB5Y,OAAO,IAAIic,IAAJ,CAASrD,IAAT,CAAb;;OAEKnY,IAAL,CAAU,EAAV;;MAEI,CAACT,KAAK+B,MAAV,EAAkB;UACV,IAAIoE,KAAJ,CAAU,gEAAV,CAAN;;;SAGKnG,KAAKkK,CAAL,CAAO,CAAP,CAAP;;MAEI,CAAC0O,KAAKse,eAAV,EAA2B;UACnB,IAAI/wB,KAAJ,CAAU,yDAAV,CAAN;;;SAGKyS,KAAKse,eAAL,CAAqBnvB,EAArB,CAAwBkc,MAAxB,EAAP;;;AAGF,SAASwS,gBAAT,CAA0B9vB,MAA1B,EAA+BoiB,KAA/B,EAAsCzlB,KAAtC,EAA6C;UACnCqD,MAAR,EAAa,UAACywB,QAAD,EAAc;oBAIrBA,SAAS9zB,KAAT,EAAgB+kB,WAAhB,EAA6Bd,KAA7B,CAJqB;QAEvB/mB,IAFuB,aAEvBA,IAFuB;QAGvBH,KAHuB,aAGvBA,KAHuB;;QAMrBiD,UAAUikB,KAAd,EAAqB;UACbuI,YAAY,EAAlB;;YAEMiD,KAAN,GAAcE,uBACZhM,mBACM5mB,MAAM6mB,QAAN,IAAkB,EADxB,GAEE7mB,MAAM8Y,kBAFR,CADY,EAKZ2W,SALY,CAAd;YAOMoD,UAAN,GAAmB,IAAIjpB,KAAJ,CAAU6lB,SAAV,EAChBqD,MADgB,CACT,IADS,EACH,GADG,EAEhBlrB,IAFgB,EAAnB;KAVF,MAaO;YACCqrB,MAAN,GAAeC,qBAAqB/yB,IAArB,CAAf;;;UAGIA,IAAN,IAAcH,KAAd;GAvBF;;;AA2BF,SAASgoB,WAAT,QAAwG;MAAjFzP,IAAiF,SAAjFA,IAAiF;MAA3EM,MAA2E,SAA3EA,MAA2E;MAAnE4P,UAAmE,SAAnEA,UAAmE;MAAvD6K,WAAuD,SAAvDA,WAAuD;MAA1ClM,WAA0C,SAA1CA,WAA0C;MAA7BG,cAA6B,SAA7BA,cAA6B;MAAb4B,SAAa,SAAbA,SAAa;;MAChGxpB,OAAO8oB,WAAWxoB,IAAX,CAAgB,cAAhB,MAAoC6a,KAApC,GACTsL,IAAI4Q,GAAJ,EADS,GAET,IAAIpb,IAAJ,CAASwK,IAAIS,QAAJ,GAAehd,CAAf,CAAiB,CAAjB,EAAoBid,OAA7B,CAFJ;MAGMmQ,cAAc7P,cAAcA,YAAY1f,EAAZ,CAAeyT,EAAf,CAAkB2W,OAAhC,GAA0CwE,MAA9D;MACMY,cAAc9P,cAAcA,YAAY1f,EAAZ,CAAeyT,EAAf,CAAkB4W,OAAhC,GAA0CtI,MAA9D;MACI7Q,WAAWL,KAAKK,QAAL,IAAiB,IAAIlF,GAAJ,CAAQ,EAAR,CAAhC;MACIzM,OAAOsR,KAAKE,KAAL,IAAc,EAAzB;MACItY,OAAOoY,KAAKpY,IAAL,IAAa,cAAxB;MACIgD,cAAcoV,KAAKpY,IAAL,IAAa82B,YAAY1e,KAAKpY,IAAjB,CAA/B;MACIg3B,oBAAJ;MACIzP,mBAAJ;MACI0P,mBAAJ;MACIC,uBAAJ;MACIC,sBAAJ;;MAEIn3B,SAAS,SAAT,IAAsB8G,KAAK9G,IAA/B,EAAqC;WAC5B,YAAP;kBACc82B,YAAY92B,IAAZ,CAAd;oBACgB8G,KAAK9G,IAArB;iBACa,IAAIyJ,KAAJ,CAAU3C,IAAV,EAAgB6rB,MAAhB,CAAuB,MAAvB,EAA+BjpB,CAA5C;qBACiB+O,QAAjB;eACW,IAAIlF,GAAJ,CAAQ,EAAR,CAAX;WACO,EAAP;GAPF,MAQO,IAAIvT,SAAS,SAAT,IAAsB6E,eAAe3D,IAAf,CAAoB4F,IAApB,EAA0B,aAA1B,CAA1B,EAAoE;WAClE,cAAP;kBACcmgB,YAAY1f,EAAZ,CAAeuhB,QAAf,CAAwBhiB,KAAK9D,WAA7B,CAAd;;QAEI1B,WAAW0B,WAAX,CAAJ,EAA6B;aACpB,IAAIyG,KAAJ,CAAU3C,IAAV,EAAgB6rB,MAAhB,CAAuB,aAAvB,EAAsCjpB,CAA7C;KADF,MAEO;oBACS,IAAd;;GAPG,MASA,IAAI,CAACstB,cAAch3B,KAAK+J,KAAL,CAAW,qBAAX,CAAf,KAAqD/J,SAAS,SAAlE,EAA6E;kBACpEm2B,OAAO,SAAP,CAAd;iBACaa,cAAcA,YAAY,CAAZ,CAAd,GAA+B,IAA5C;;;MAGEI,sBAAJ;;MAEIp0B,WAAJ,EAAiB;QACX;sBACc,IAAIA,WAAJ,CAAgB;kBAAA;kBAAA;8BAAA;0BAAA;sBAAA;8BAAA;gCAAA;gCAAA;sCAAA;;OAAhB,CAAhB;KADF,CAaE,OAAO0C,GAAP,EAAY;cACJwB,KAAR,4BAAwClH,IAAxC,QAAkD0F,GAAlD;oBACc,IAAd;;;;MAIA,CAAC1C,WAAL,EAAkB;gBAIZoV,IAJY;QAEdvY,KAFc,SAEdA,KAFc;QAGd4Y,SAHc,SAGdA,QAHc;;;QAMVI,UAAUrZ,KAAK2K,MAAL,CAAYnK,IAAZ,CAAhB;QACMq3B,eAAe10B,OAAOwH,MAAP,CAAc,IAAd,CAArB;QACImO,QAAQ3V,OAAOwH,MAAP,CAAc,IAAd,CAAZ;QACIgrB,iBAAJ;QACMmC,mBAAmB;YACjBze,OADiB;8BAAA;8BAAA;;KAAzB;;QAOIpP,KAAJ,CAAU3C,IAAV,EAAgBmN,OAAhB,CAAwB,UAACpU,KAAD,EAAQD,IAAR,EAAiB;UACjCy1B,UAAU/D,YAAYtvB,IAAZ,CAAiBpC,IAAjB,CAAhB;UACM23B,aAAalC,WAAWF,QAAX,GACfxyB,OAAOwH,MAAP,CAAcmO,KAAd,CADe,GAEfA,KAFJ;;cAIQif,UAAR;;UAEIlC,OAAJ,EAAa;YACLmC,YAAYvQ,YAAY1f,EAAZ,CAAeuhB,QAAf,CAAwBjpB,KAAxB,EAA+B,UAACA,KAAD,EAAW;qBAC/C,YAAM;oBACP03B,UAAR,EAAoB,UAAC13B,KAAD,EAAQu1B,GAAR,EAAgB;qBAC3BmC,WAAWnC,GAAX,CAAP;aADF;mBAGOmC,UAAP,EAAmBE,mBACjB53B,KADiB,EACVk3B,WADU,EACGO,gBADH,CAAnB;2BAGehf,KAAf,EAAsB+e,YAAtB,EAAoCxe,OAApC,EAA6C,KAA7C;WAPF,EAQG,CARH;SADgB,EAUfsa,WAVe,CAAlB;;mBAYW,IAAX;;eAEOruB,OAAOyyB,UAAP,EAAmBE,mBACxBD,SADwB,EACbT,WADa,EACAO,gBADA,CAAnB,CAAP;;;UAKIvtB,QAAQ2tB,WAAWX,WAAX,EAAwBn3B,IAAxB,CAAd;;iBAEW,KAAX;;UAEImK,KAAJ,EAAW;YACLlK,UAAU,IAAd,EAAoB;kBACV,MAAR;;;mBAGSD,IAAX,IAAmB;gBACX,OADW;mBAER,KAFQ;;;aAKZmK,KAFL,EAGKutB,gBAHL,CAHiB;;SAAnB;;;;;iBAcS13B,IAAX,IAAmB;cACX,MADW;eAEVqnB,YAAY1f,EAAZ,CAAeuhB,QAAf,CAAwBjpB,KAAxB,EAA+B,UAACA,KAAD,EAAW;qBACpCD,IAAX,IAAmB;kBACX,MADW;;WAAnB;yBAIe0Y,KAAf,EAAsB+e,YAAtB,EAAoCxe,OAApC,EAA6C,KAA7C;SALK,EAMJsa,WANI;OAFT;KAnDF;;QA+DMwE,eAAeC,eAAetf,KAAf,EAAsB+e,YAAtB,EAAoCxe,OAApC,EAA6C,IAA7C,CAArB;;QAEI7Y,SAAS,UAAb,EAAyB;cACfE,IAAR,CAAaL,KAAb;;;QAGEG,SAAS,OAAb,EAAsB;UAChBsB,WAAWzB,KAAX,CAAJ,EAAuB;YACjBK,OAAO+mB,YAAY1f,EAAZ,CAAeuhB,QAAf,CAAwBjpB,KAAxB,EAA+B,UAACA,KAAD,EAAW;cAC/C2C,MAAM3C,KAAN,CAAJ,EAAkB;oBACR,EAAR;;;kBAGMK,IAAR,MAAiBL,KAAjB;SALS,EAMRszB,WANQ,CAAX;;YAQI3wB,MAAMtC,IAAN,CAAJ,EAAiB;iBACR,EAAP;;;gBAGMA,IAAR,MAAiBA,IAAjB;OAbF,MAcO;gBACGA,IAAR,CAAaL,KAAb;;;;QAIA4Y,SAAJ,EAAc;UACN6P,cAAatoB,SAAS,UAAT,GACf,IAAIyb,IAAJ,CAAS5C,QAAQnP,CAAR,CAAU,CAAV,EAAaid,OAAtB,CADe,GAEf9N,OAFJ;UAGImQ,oBAAJ;;gBAES/U,OAAT,CAAiB,UAACuV,KAAD,EAAW;sBACd3B,YAAY;gBAChB2B,KADgB;kBAEdlB,WAFc;iCAAA;kCAAA;kCAAA;wCAAA;;SAAZ,CAAZ;OADF;;;QAaI+K,gBAAgB3a,kBAAkBqO,KAAxC;;QAEIiC,qBAAqBjC,KAAzB,EAAgC;gBACpBxf,EAAV,CAAa2hB,aAAb,CAA2BrQ,OAA3B,EAAoC,KAApC;KADF,MAEO,IAAImQ,SAAJ,EAAe;cACZ6L,WAAR,CAAoB7L,SAApB;;UAEIqK,aAAJ,EAAmB;eACV9rB,EAAP,CAAU+sB,UAAV,CAAqBzb,OAArB;;KAJG,MAMA,IAAIwa,aAAJ,EAAmB;aACjB9rB,EAAP,CAAUutB,iBAAV,CAA4Bjc,OAA5B,EAAqC,KAArC;KADK,MAEA;cACGyE,IAAR,CAAagL,UAAb,EAAyB,KAAzB;;;;;WAKKzP,OAAP;;;uBAQEue,aAnNkG;MA+MpG7vB,EA/MoG,kBA+MpGA,EA/MoG;MAgN9FswB,IAhN8F,kBAgNpG/wB,IAhNoG;MAiNpG4uB,OAjNoG,kBAiNpGA,OAjNoG;MAkNjGC,MAlNiG;;;MAqNlGqB,eAAeh3B,SAAS,SAA5B,EAAuC;gBACzBuH,EAAZ,CAAemgB,OAAf,CAAuB/gB,IAAvB,CAA4BywB,aAA5B;;;MAGEH,UAAJ,EAAgB;WACP;aACEA,UADF;gBAEKC;KAFZ;SAIKl3B,IAAL,GAAYinB,YAAY1f,EAAZ,CAAeuhB,QAAf,CAAwBqO,aAAxB,EAAuC,UAACW,OAAD,EAAa;WACzD93B,IAAL,GAAY83B,OAAZ;;UAEM73B,UAAO,IAAIsT,GAAJ,CAAQ,CAAC6E,IAAD,CAAR,CAAb;;WAEKvY,KAAL,GAAai4B,YAAY,MAAZ,GACTtF,qBAAqBvyB,OAArB,CADS,GAETA,OAFJ;KALU,EAQTm3B,aARS,EAQM,IARN,CAAZ;;QAUMn3B,QAAO,IAAIsT,GAAJ,CAAQ,CAAC6E,IAAD,CAAR,CAAb;;SAEKvY,KAAL,GAAauY,KAAKpY,IAAL,KAAc,MAAd,GACTwyB,qBAAqBvyB,KAArB,CADS,GAETA,KAFJ;SAGKgnB,WAAL,GAAmBA,WAAnB;;;MAGIhnB,UAAOD,SAAS,YAAT,GACT,IAAIuT,GAAJ,CAAQskB,KAAKh4B,KAAL,IAAc,EAAtB,CADS,GAETmD,YAAYuvB,KAFhB;;SAIOoD,OAAOjsB,CAAd;SACOisB,OAAO1O,WAAd;;KAEGngB,IAAH,GAAUixB,sBAAsBF,IAAtB,CAAV;KACGlC,MAAH,GAAYoC,sBAAsBpC,MAAtB,CAAZ;KACGD,OAAH,GAAaqC,sBAAsBrC,OAAtB,EAA+B,SAA/B,EAA0CzO,WAA1C,CAAb;;MAEIjnB,SAAS,SAAb,EAAwB;;;QAChBg4B,+DACH5f,KAAK6P,QADF,EACa7P,KAAK4P,IADlB,gCAEH5P,KAAK8P,SAFF,EAEc9P,KAAKjT,KAFnB,gBAAN;QAIMojB,QAAQtB,YAAY1f,EAAZ,CAAevH,IAAf,KAAwB,SAAxB,GACVinB,YAAY1f,EAAZ,CAAeghB,KADL,GAEVtB,WAFJ;;OAIGjM,EAAH,GAAQiM,YAAY1f,EAAZ,CAAeyT,EAAvB;OACGid,YAAH,GAAkBF,sBAAsBC,WAAtB,CAAlB;yBACqBzwB,GAAGghB,KAAH,GAAW5lB,OAAOwH,MAAP,CAAcoe,KAAd,CAAhC,EAAsDyP,WAAtD,EAAmEzwB,GAAG0wB,YAAtE;;;MAGEj4B,SAAS,QAAb,EAAuB;;;OAClBuoB,KAAH,GAAW5lB,OAAOwH,MAAP,CAAc8c,YAAY1f,EAAZ,CAAevH,IAAf,KAAwB,SAAxB,GAAoCinB,YAAY1f,EAAZ,CAAeghB,KAAnD,GAA2DtB,WAAzE,uDACR4Q,KAAK7P,IAAL,IAAa,OADL,EACe;aACf,IADe;gBAEZ;KAHH,kCAKR6P,KAAK1yB,KAAL,IAAc,QALN,EAKiB;aACjB,IADiB;gBAEd;KAPH,mBAAX;;;uBAYmB0yB,IAArB,EAA2BA,IAA3B,EAAiCtwB,GAAGT,IAApC;uBACqB4uB,OAArB,EAA8BA,OAA9B,EAAuCnuB,GAAGmuB,OAA1C;uBACqB0B,aAArB,EAAoCzB,MAApC,EAA4CpuB,GAAGouB,MAA/C;;MAEI;kBACYuC,cAAd;GADF,CAEE,OAAOxyB,GAAP,EAAY;YACJwB,KAAR,wBAAoClH,IAApC,uBAA6D0F,GAA7D;;;cAGUO,SAAZ;gBACcjG,SAAS,YAAT,GACV63B,KAAK5Q,WADK,GAEVmQ,aAFJ;mBAGiBp3B,SAAS,YAAT,GACb63B,KAAKzQ,cADQ,GAEbgQ,aAFJ;;UAIKnjB,OAAL,CAAa,UAACuV,KAAD,EAAW;gBACV3B,YAAY;YAChB2B,KADgB;cAEd4N,aAFc;4BAAA;mBAITA,aAJS;8BAAA;oCAAA;;KAAZ,CAAZ;GADF;;MAYI;kBACYe,WAAd;GADF,CAEE,OAAOzyB,GAAP,EAAY;YACJwB,KAAR,wBAAoClH,IAApC,oBAA0D0F,GAA1D;;;SAGK0xB,aAAP;;;AAGF,SAASgB,WAAT,QAAqH;MAA9Fp4B,IAA8F,SAA9FA,IAA8F;MAAxF0qB,KAAwF,SAAxFA,KAAwF;MAAjF0L,OAAiF,SAAjFA,OAAiF;MAAxEv2B,KAAwE,SAAxEA,KAAwE;MAAjEiH,IAAiE,SAAjEA,IAAiE;MAA3DuvB,OAA2D,SAA3DA,OAA2D;MAAlD72B,IAAkD,SAAlDA,IAAkD;MAA5C2zB,WAA4C,SAA5CA,WAA4C;MAA/BlM,WAA+B,SAA/BA,WAA+B;MAAlBG,cAAkB,SAAlBA,cAAkB;;MAC7GqC,QAAQ,IAAIiB,KAAJ,CAAU;cAAA;gBAAA;oBAAA;cAAA;oBAAA;cAAA;4BAAA;4BAAA;;GAAV,CAAd;;MAYIA,MAAM5B,QAAV,EAAoB;QACZjpB,UAAQ4pB,MAAM5pB,KAAN,GAAc4pB,MAAM4O,gBAAN,CAAuB,UAACnO,QAAD,EAAW+B,QAAX,EAAwB;YACnEpsB,KAAN,GAAcqqB,QAAd;;UAEI;cACI2I,WAAN,CAAkB3I,QAAlB,EAA4B+B,QAA5B;OADF,CAEE,OAAOvmB,GAAP,EAAY;gBACJwB,KAAR,wBAAoClH,IAApC,oBAA0D0F,GAA1D;;KANwB,CAA5B;;UAUMmtB,WAAN,CAAkBhzB,OAAlB;;;SAGK4pB,KAAP;;;AAGF,SAAS+I,oBAAT,CAA8B/Z,QAA9B,EAAwC;SAC/B,IAAIlF,GAAJ,CAAQkF,YAAY,EAApB,EACJ3L,MADI,CACG,EADH,EAEJ9L,MAFI,CAEG,UAACA,MAAD,EAASwoB,KAAT,EAAmB;QACjBxpB,IADiB,GACRwpB,KADQ,CACjBxpB,IADiB;QAGvBC,OAHuB,GAKrBe,MALqB,CAGvBf,IAHuB;QAIvBq4B,MAJuB,GAKrBt3B,MALqB,CAIvBs3B,MAJuB;;;QAOrBt4B,SAAS,WAAT,IAAwBA,SAAS,QAArC,EAA+C;UACzCs4B,MAAJ,EAAY;gBACL3xB,IAAL,CAAU;gBACF,MADE;oBAEE2xB;SAFZ;;eAKOA,MAAP,GAAgB,IAAhB;;;UAGEt4B,SAAS,MAAb,EAAqB;eACZs4B,MAAP,GAAgB,IAAI/kB,GAAJ,CAAQ,CAACiW,KAAD,CAAR,CAAhB;OADF,MAEO,IAAIxpB,IAAJ,EAAU;gBACV2G,IAAL,CAAU6iB,KAAV;;KAbJ,MAeO;OACJ8O,UAAUr4B,OAAX,EAAiB0G,IAAjB,CAAsB6iB,KAAtB;;UAEIxpB,SAAS,QAAT,IAAqBs4B,MAAzB,EAAiC;gBAC1B3xB,IAAL,CAAU;gBACF,MADE;oBAEE2xB;SAFZ;;eAKOA,MAAP,GAAgB,IAAhB;;;;QAIAt4B,IAAJ,EAAU;YACFyY,QAAN,GAAiB+Z,qBAAqBhJ,MAAM/Q,QAA3B,CAAjB;;GAtCC,EAwCF;UACK,IAAIlF,GAAJ,CAAQ,EAAR,CADL;YAEO;GA1CL,EA2CF7J,CA3CE,CA2CAzJ,IA3CP;;;AA8CF,SAASwyB,sBAAT,CAAgCha,QAAhC,EAA0C6W,SAA1C,EAAmE;MAAdiJ,OAAc,uEAAJ,EAAI;;SAC1D,IAAIhlB,GAAJ,CAAQkF,YAAY,EAApB,EAAwBzX,MAAxB,CAA+B,UAACyX,QAAD,EAAW+Q,KAAX,EAAqB;QAEvDxpB,IAFuD,GAMrDwpB,KANqD,CAEvDxpB,IAFuD;QAGvDsY,KAHuD,GAMrDkR,KANqD,CAGvDlR,KAHuD;QAI7CgP,WAJ6C,GAMrDkC,KANqD,CAIvD/Q,QAJuD;QAKhD+f,YALgD,GAMrDhP,KANqD,CAKvD3pB,KALuD;;QAOnD44B,UAAUz4B,SAAS,QAAzB;QACMH,KARmD,GAQzC2pB,KARyC,CAQnD3pB,KARmD;;QASrD64B,eAAe,EAAnB;;QAEID,OAAJ,EAAa;;;wEAERjP,MAAMlR,KAAN,CAAY0P,IAAZ,IAAoB,OADvB,EACiC,IADjC,iCAEGwB,MAAMlR,KAAN,CAAYnT,KAAZ,IAAqB,QAFxB,EAEmC,IAFnC;;;UAMImT,KAAN,GAAc,IAAI7O,KAAJ,CAAU6O,KAAV,EAAiBC,GAAjB,CAAqB,UAAC1Y,KAAD,EAAQD,IAAR,EAAiB;UAC9CC,UAAU,IAAd,EAAoB;eACX,IAAP;;;UAGEA,MAAM,CAAN,MAAa,GAAb,IAAoBA,MAAMA,MAAM0B,MAAN,GAAe,CAArB,MAA4B,GAApD,EAAyD;eAChD1B,KAAP;;;UAGI+X,SAASqX,QAAQpvB,MAAMqQ,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAR,EAA4BrQ,KAA5B,EAAmC,IAAnC,CAAf;;UAEI,CAAC+X,MAAL,EAAa;eACJ/X,KAAP;;;UAGE+X,OAAO+gB,IAAX,EAAiB;cACT,IAAIhzB,KAAJ,CAAU,yFAAV,CAAN;;;UAGIizB,QAAQh5B,SAAS,KAAvB;;UAEMi5B,gBAAgB,IAAIpvB,KAAJ,CAAUmO,OAAO0X,SAAjB,EAA4BpkB,MAA5B,CAAmC,UAACrL,KAAD,EAAQswB,QAAR,EAAqB;YACxEsI,WAAWG,KAAX,IAAoBF,aAAavI,QAAb,CAAxB,EAAgD;;;;YAI5C,CAACoI,QAAQpI,QAAR,CAAL,EAAwB;iBACf,IAAP;;OANkB,EAQnBzmB,CARH;;aAUO4lB,SAAP,EAAkBuJ,aAAlB;;aAEOzzB,sBAAsBwS,OAAOnS,UAA7B,EAAyCmS,OAAOtS,QAAhD,CAAP;KAjCY,EAkCXoE,CAlCH;;QAoCI1J,SAAS,OAAb,EAAsB;6BAEfu4B,OADL,EAEKG,YAFL;;UAKIpR,WAAJ,EAAiB;cACT7O,QAAN,GAAiBga,uBAAuBnL,WAAvB,EAAoCgI,SAApC,EAA+CiJ,OAA/C,CAAjB;;;eAGO5xB,IAAT,CAAc6iB,KAAd;;;;;WAKK3pB,MAAM0B,MAAb,EAAqB;UACbwI,QAAQlK,MAAMkK,KAAN,CAAYsnB,kBAAZ,CAAd;;UAEI,CAACtnB,KAAL,EAAY;iBACDpD,IAAT,CAAc;gBACN,OADM;;SAAd;;;;;UAQMxB,KAZW,GAYD4E,KAZC,CAYX5E,KAZW;;;UAcfA,KAAJ,EAAW;iBACAwB,IAAT,CAAc;gBACN,OADM;iBAEL9G,MAAMqQ,KAAN,CAAY,CAAZ,EAAe/K,KAAf;SAFT;gBAIQtF,MAAMqQ,KAAN,CAAY/K,KAAZ,CAAR;;;UAGIyS,SAASqX,QAAQpvB,MAAMqQ,KAAN,CAAY,CAAZ,CAAR,EAAwBsoB,YAAxB,CAAf;;UAEI,CAAC5gB,MAAL,EAAa;iBACFjR,IAAT,CAAc;gBACN,OADM;;SAAd;;;;;UAQIkyB,gBAAgB,IAAIpvB,KAAJ,CAAUmO,OAAO0X,SAAjB,EAA4BpkB,MAA5B,CAAmC,UAACrL,KAAD,EAAQswB,QAAR,EAAqB;YACxE,CAACoI,QAAQpI,QAAR,CAAL,EAAwB;iBACf,IAAP;;OAFkB,EAInBzmB,CAJH;;aAMO4lB,SAAP,EAAkBuJ,aAAlB;;eAESlyB,IAAT,CAAc;cACN,OADM;eAELvB,sBAAsBwS,OAAOnS,UAA7B,EAAyCmS,OAAOtS,QAAhD;OAFT;cAIQsS,OAAO+gB,IAAf;;GAlHG,EAoHJ,IAAIplB,GAAJ,CAAQ,EAAR,CApHI,CAAP;;;AAuHF,SAAS4e,YAAT,CAAsB2G,KAAtB,EAA6B7G,QAA7B,EAAuC;SAC9Bd,cAAcjwB,IAAd,CAAmB43B,KAAnB,EAA0B7G,QAA1B,KAAuCd,cAAcjwB,IAAd,CAAmB43B,MAAMlxB,SAAzB,EAAoCqqB,SAASrqB,SAA7C,CAA9C;;;AAGF,SAASmxB,cAAT,CAAwBxP,gBAAxB,EAA0C;mBACvBtV,OAAjB,CAAyB,iBAA2B;QAAxB2V,OAAwB,SAAxBA,OAAwB;QAAfD,QAAe,SAAfA,QAAe;;QAC5CxkB,QAAQwkB,SAASxe,OAAT,CAAiBye,OAAjB,CAAd;;QAEIzkB,UAAU,CAAC,CAAf,EAAkB;eACPuP,MAAT,CAAgBvP,KAAhB,EAAuB,CAAvB;;GAJJ;;;AASF,SAAS4yB,qBAAT,CAA+B/2B,MAA/B,EAAuC4X,IAAvC,EAA6CqO,WAA7C,EAA0D;MACpDsB,QAAQ,EAAZ;;MAEI3P,SAAS,SAAb,EAAwB;YACdjW,OAAOwH,MAAP,CACN8c,cACIA,YAAY1f,EAAZ,CAAemuB,OADnB,GAEI,IAHE,CAAR;;;SAOK,IAAIjsB,KAAJ,CAAUzI,MAAV,EAAkBA,MAAlB,CAAyB,UAACunB,KAAD,EAAQ1oB,KAAR,EAAe+E,GAAf,EAAuB;UAC/CA,GAAN,IAAa;kBAAA;gBAED;cACF,IAAI2O,GAAJ,CAAQ,EAAR,CADE;cAEF,IAAIA,GAAJ,CAAQ,EAAR;;KAJV;GADK,EAQJgV,KARI,EAQG7e,CARV;;;AAWF,SAASsvB,oBAAT,CAA8BzQ,KAA9B,EAAqCyP,WAArC,EAAkDC,YAAlD,EAAgE;MAC1DxuB,KAAJ,CAAU8e,KAAV,EAAiBzF,MAAjB,CAAwB,IAAIrZ,KAAJ,CAAUuuB,WAAV,EAAuBzf,GAAvB,CAA2B,UAAC1Y,KAAD,EAAQ+E,GAAR,EAAgB;QAC3D2jB,QAAQ0P,aAAarzB,GAAb,CAAd;;WAEO;oBACS,KADT;kBAEO,IAFP;SAAA,oBAGC;YACA4sB,QAAJ,EAAc;cACRC,QAAQtmB,OAAR,CAAgBod,MAAMoB,QAAN,CAAesP,IAA/B,MAAyC,CAAC,CAA9C,EAAiD;oBACvCtyB,IAAR,CAAa4hB,MAAMoB,QAAN,CAAesP,IAA5B;;;;eAIG1Q,MAAM1oB,KAAb;OAVG;SAAA,kBAYDA,KAZC,EAYM;YACLA,UAAU0oB,MAAM1oB,KAApB,EAA2B;;;;YAIvB,CAAC6xB,OAAL,EAAc;oBACF,EAAV;;;YAGIwH,kBAAkB3Q,MAAMoB,QAAN,CAAesP,IAAf,CAAoB/oB,KAApB,EAAxB;YACM+b,WAAW1D,MAAM1oB,KAAvB;;cAEM8pB,QAAN,CAAesP,IAAf,GAAsB,IAAI1lB,GAAJ,CAAQ,EAAR,CAAtB;cACM1T,KAAN,GAAcA,KAAd;;wBAEgBoU,OAAhB,CAAwB,UAAC2V,OAAD,EAAa;kBAC3BkK,QAAR;;SADF;gBAIQntB,IAAR,CAAa;sBAAA;4BAAA;;SAAb;;mBAMW,YAAM;cACX,CAAC+qB,OAAL,EAAc;;;;cAIRyH,MAAM,IAAI5lB,GAAJ,CAAQ,EAAR,CAAZ;cACMC,SAAS,EAAf;;qCAES1P,CARM;6BAaT4tB,QAAQ5tB,CAAR,CAbS;gBAUXykB,KAVW,cAUXA,KAVW;gBAWX1oB,KAXW,cAWXA,KAXW;gBAYXosB,QAZW,cAYXA,QAZW;;;kBAePtC,QAAN,CAAeqM,IAAf,CAAoB/hB,OAApB,CAA4B,UAAC2V,OAAD,EAAa;kBACjCzkB,QAAQg0B,IAAIhuB,OAAJ,CAAYye,OAAZ,CAAd;;kBAEIzkB,UAAU,CAAC,CAAf,EAAkB;oBACZwB,IAAJ,CAASijB,OAAT;uBACOjjB,IAAP,CAAY;8BAAA;;iBAAZ;eAFF,MAMO;uBACExB,KAAP,EAAc8mB,QAAd,GAAyBA,QAAzB;;aAVJ;;oBAcQvX,MAAR,CAAe5Q,CAAf,EAAkB,CAAlB;;;eArBG,IAAIA,IAAI4tB,QAAQnwB,MAAR,GAAiB,CAA9B,EAAiCuC,KAAK,CAAtC,EAAyCA,GAAzC,EAA8C;kBAArCA,CAAqC;;;oBAwBpC,IAAV;;cAEImQ,OAAJ,CAAY,UAAC2V,OAAD,EAAU9lB,CAAV,EAAgB;4BAItB0P,OAAO1P,CAAP,CAJsB;gBAExBjE,KAFwB,aAExBA,KAFwB;gBAGxBosB,QAHwB,aAGxBA,QAHwB;;;oBAMlBpsB,KAAR,EAAeosB,QAAf;WANF;SAlCF,EA0CG,CA1CH;;KArCJ;GAHsB,EAqFrBviB,CArFH;;;AAwFF,SAASmsB,iBAAT,CAA2B5M,KAA3B,EAAkCW,OAAlC,EAA2C;UACjCX,MAAM1hB,EAAN,CAASouB,MAAjB,EAAyB,iBAAkB;QAAfhM,QAAe,SAAfA,QAAe;;aAChCqM,IAAT,CAAcrvB,IAAd,CAAmBijB,OAAnB;GADF;;;AAKF,SAASmM,kBAAT,CAA4B9M,KAA5B,EAAmCW,OAAnC,EAA4C;kBAItCX,MAAM1hB,EAJgC;MAExCmuB,OAFwC,aAExCA,OAFwC;MAGxCnM,gBAHwC,aAGxCA,gBAHwC;;;OAMrC,IAAMlqB,MAAX,IAAqBq2B,OAArB,EAA8B;;QAEtB/L,WAAW+L,QAAQr2B,MAAR,EAAgBsqB,QAAhB,CAAyBqM,IAA1C;;aAESrvB,IAAT,CAAcijB,OAAd;qBACiBjjB,IAAjB,CAAsB;sBAAA;;KAAtB;;;;AAOJ,SAASmvB,eAAT,CAAyB7M,KAAzB,EAAgCW,OAAhC,EAAyC;UAC/BX,MAAM1hB,EAAN,CAAST,IAAjB,EAAuB,iBAAkB;QAAf6iB,QAAe,SAAfA,QAAe;;aAC9BqM,IAAT,CAAcrvB,IAAd,CAAmBijB,OAAnB;GADF;;;AAKF,SAASwP,aAAT,CAAuBtyB,IAAvB,EAA6BmuB,UAA7B,EAAyCC,WAAzC,EAAsD;cACxCmE,aAAZ,GAA4BplB,OAA5B,CAAoC,UAACmhB,GAAD,EAAS;QACvC,EAAEA,OAAOtuB,IAAT,CAAJ,EAAoB;iBACPsuB,GAAX,IAAkBnvB,SAAlB;;GAFJ;;OAMK,IAAMmvB,GAAX,IAAkBtuB,IAAlB,EAAwB;eACXsuB,GAAX,IAAkBtuB,KAAKsuB,GAAL,CAAlB;;;;AAIJ,SAASI,iBAAT,CAA2B1uB,IAA3B,EAAiC;SACxB,IAAI2C,KAAJ,CAAU3C,IAAV,EAAgB9F,MAAhB,CAAuB,UAAC8F,IAAD,EAAOjH,KAAP,EAAcu1B,GAAd,EAAsB;QAC9C9D,YAAYtvB,IAAZ,CAAiBozB,GAAjB,CAAJ,EAA2B;aAClBtuB,IAAP,EAAa0uB,kBAAkB31B,KAAlB,CAAb;KADF,MAEO;WACAu1B,GAAL,IAAYv1B,KAAZ;;GAJG,EAMJ6J,CANH;;;AASF,SAAS+tB,kBAAT,CAA4Bnf,KAA5B,EAAmCgR,MAAnC,EAA2CgO,gBAA3C,EAA6D;SACpD,IAAI7tB,KAAJ,CAAU6O,KAAV,EAAiBtX,MAAjB,CAAwB,UAACs4B,aAAD,EAAgBz5B,KAAhB,EAAuBD,IAAvB,EAAgC;QACzD0xB,YAAYtvB,IAAZ,CAAiBpC,IAAjB,CAAJ,EAA4B;aACnBkF,OAAOw0B,aAAP,EAAsB7B,mBAAmB53B,KAAnB,EAA0BypB,MAA1B,EAAkCgO,gBAAlC,CAAtB,CAAP;;;QAGIvtB,QAAQ2tB,WAAWpO,MAAX,EAAmB1pB,IAAnB,CAAd;;QAEImK,KAAJ,EAAW;oBACKnK,IAAd,IAAsB;cACd,OADc;iBAEX,IAFW;;;WAKfmK,KAFL,EAGKutB,gBAHL,CAHoB;;OAAtB;;;;;kBAcY13B,IAAd,IAAsB;YACd,MADc;;KAAtB;GAtBK,EA0BJ8J,CA1BH;;;AA6BF,SAASguB,UAAT,CAAoBpO,MAApB,EAA4B1pB,IAA5B,EAAkC;MAC5BmK,cAAJ;;OAEK,IAAM/J,IAAX,IAAmBspB,MAAnB,EAA2B;QACnBoB,UAAQpB,OAAOtpB,IAAP,CAAd;QACMu5B,aAAa35B,KAAKmK,KAAL,CAAW2gB,QAAMoI,MAAjB,CAAnB;;QAEIyG,UAAJ,EAAgB;UACRC,YAAYD,WAAW,CAAX,CAAlB;UACIzyB,aAAJ;;UAEI,QAAQ9E,IAAR,CAAaw3B,SAAb,CAAJ,EAA6B;eACpB,EAAP;OADF,MAEO,IAAIA,SAAJ,EAAe;eACb,IAAItjB,GAAJ,CAAQsjB,SAAR,EACJzxB,KADI,CACE,MADF,EAEJwQ,GAFI,CAEA,UAACtU,CAAD;iBAAO,IAAIiS,GAAJ,CAAQjS,CAAR,EAAWqT,IAAX,GAAkB5N,CAAzB;SAFA,EAGJA,CAHH;;;cAMM;kBAAA;iBAEG6vB,WAAW,CAAX,CAFH;sBAAA;;OAAR;;;;;;SAWGxvB,KAAP;;;AAGF,SAAS6tB,cAAT,CAAwBtf,KAAxB,EAA+BmhB,WAA/B,EAA4Cj6B,IAA5C,EAAkD6pB,SAAlD,EAA6D;UACnDoQ,WAAR,EAAqB,iBAAkB75B,IAAlB,EAA2B;QAAxBgZ,IAAwB,SAAxBA,IAAwB;QAAlB/Y,KAAkB,SAAlBA,KAAkB;;QAC1C,CAACyY,MAAM1Y,IAAN,CAAL,EAAkB;UACZgZ,SAAS,MAAb,EAAqB;aACdxY,UAAL,CAAgBR,IAAhB;OADF,MAEO;cACC2H,EAAN,CAASkc,MAAT;;;aAGKgW,YAAY75B,IAAZ,CAAP;;GARJ;;MAYM0pB,SAAS,IAAI/V,GAAJ,CAAQ,EAAR,CAAf;;+BAEW3T,IAfgD;sBAqBrD0Y,MAAM1Y,IAAN,CArBqD;QAiBvDgZ,IAjBuD,eAiBvDA,IAjBuD;QAkBvDwd,OAlBuD,eAkBvDA,OAlBuD;QAmBvDv2B,KAnBuD,eAmBvDA,KAnBuD;QAoBvDkoB,IApBuD,eAoBvDA,IApBuD;;QAsBrD2R,iBAAJ;QACIC,oBAAJ;QACIC,kBAAJ;;QAEIH,YAAY75B,IAAZ,CAAJ,EAAuB;8BAIjB65B,YAAY75B,IAAZ,CAJiB;UAEbi6B,QAFa,qBAEnBjhB,IAFmB;UAGZkhB,SAHY,qBAGnBj6B,KAHmB;;;UAMjB+Y,SAAS,MAAb,EAAqB;YACfihB,aAAa,OAAjB,EAA0B;oBACdtyB,EAAV,CAAakc,MAAb;;;YAGEqW,cAAcj6B,KAAlB,EAAyB;eAClBD,IAAL,CAAUA,IAAV,EAAgBC,KAAhB;;;oBAGUA,KAAZ;OATF,MAUO;YACC4pB,QAAQqQ,SAAd;;YAEID,aAAa,MAAjB,EAAyB;eAClBz5B,UAAL,CAAgBR,IAAhB;;;cAGI2H,EAAN,CAAS+uB,SAAT,GAAqBF,OAArB;;YAEIA,OAAJ,EAAa;+BACU3M,KAArB,EAA4B5pB,KAA5B;SADF,MAEO,IAAI,CAAC4pB,MAAMliB,EAAN,CAASwyB,SAAV,IAAuBhS,KAAK2C,KAAL,CAAW5B,QAAtC,EAAgD;cAC/CoB,WAAWT,MAAMliB,EAAN,CAAS0f,WAAT,CAAqB1f,EAArB,CAAwBuhB,QAAxB,CAAiCjpB,KAAjC,EAAwC,UAACqqB,QAAD,EAAc;+BAIjE5R,MAAM1Y,IAAN,CAJiE;gBAEnEgZ,IAFmE,gBAEnEA,IAFmE;gBAGnEwd,OAHmE,gBAGnEA,OAHmE;;;gBAMjExd,SAAS,OAAT,IAAoB,CAACwd,OAAzB,EAAkC;mCACX3M,KAArB,EAA4BS,QAA5B;;WAPa,EASdT,KATc,CAAjB;;gBAWMliB,EAAN,CAASwyB,SAAT,GAAqB,IAArB;;+BAEqBtQ,KAArB,EAA4BS,QAA5B;;;oBAGUT,KAAZ;;;iBAGS7Q,IAAX;oBACcwd,OAAd;KAhDF,MAiDO;UACDxd,SAAS,MAAb,EAAqB;aACdhZ,IAAL,CAAUA,IAAV,EAAgBC,KAAhB;;oBAEYA,KAAZ;OAHF,MAIO;YACCm6B,aAAa,SAAbA,UAAa,GAAM;eAClB5D,OAAL,GAAeA,OAAf;;cAEM3M,QAAQ2O,YAAYrQ,IAAZ,CAAd;;cAEI,CAACqO,OAAD,IAAYrO,KAAK2C,KAAL,CAAW5B,QAA3B,EAAqC;gBAEjC7B,WAFiC,GAI/Bc,IAJ+B,CAEjCd,WAFiC;gBAGjCpnB,OAHiC,GAI/BkoB,IAJ+B,CAGjCloB,KAHiC;;gBAK7Bo6B,aAAahT,YAAY1f,EAAZ,CAAeuhB,QAAf,CAAwBjpB,OAAxB,EAA+B,UAACqqB,QAAD,EAAc;iCAI1D5R,MAAM1Y,IAAN,CAJ0D;kBAE5DgZ,IAF4D,gBAE5DA,IAF4D;kBAG5Dwd,OAH4D,gBAG5DA,OAH4D;;;kBAM1Dxd,SAAS,OAAT,IAAoB,CAACwd,OAAzB,EAAkC;qCACX3M,KAArB,EAA4BS,QAA5B;;aAPe,EAShBT,KATgB,CAAnB;;kBAWMliB,EAAN,CAASwyB,SAAT,GAAqB,IAArB;kBACMxyB,EAAN,CAAS1H,KAAT,GAAiBo6B,UAAjB;;;sBAGUxQ,KAAZ;;iBAEO;sBAAA;kBAEC;wBAAA;8BAAA;qBAGGA;;WALX;SA3BF;;YAqCIJ,SAAJ,EAAe;iBACN1iB,IAAP,CAAYqzB,UAAZ;SADF,MAEO;;;;;iBAKEphB,IAAX;oBACcwd,OAAd;;;gBAGUx2B,IAAZ,IAAoB;YACZ85B,QADY;eAETC,WAFS;aAGXC;KAHT;;;OAlHG,IAAMh6B,IAAX,IAAmB0Y,KAAnB,EAA0B;WAAf1Y,IAAe;;;MAyHtBypB,SAAJ,EAAe;WACN,YAAM;aACJpV,OAAP,CAAe,UAAC+lB,UAAD,EAAgB;0BAIzBA,YAJyB;YAE3Bp6B,IAF2B,eAE3BA,IAF2B;YAG3BmoB,IAH2B,eAG3BA,IAH2B;;oBAMjBnoB,IAAZ,IAAoBmoB,IAApB;OANF;KADF;;;;AAaJ,SAASmS,oBAAT,CAA8BzQ,KAA9B,EAAqC5pB,KAArC,EAA4C;MACpCosB,WAAWxC,MAAMliB,EAAN,CAAS1H,KAA1B;;QAEM0H,EAAN,CAAS1H,KAAT,GAAiBA,KAAjB;;QAEM0H,EAAN,CAASoiB,QAAT,CAAkB1V,OAAlB,CAA0B,UAAC2V,OAAD,EAAa;YAC7B/pB,KAAR,EAAeosB,QAAf;GADF;;;AAKF,SAAS8G,oBAAT,CAA8B/yB,IAA9B,EAAoC;SAC3B,IAAI8J,MAAJ,OAAgB,IAAIoM,GAAJ,CAAQlW,IAAR,EAAcm6B,YAAd,GAA6BzwB,CAA7C,4CAAP;;;AAGF,SAAS0wB,WAAT,CAAqB16B,GAArB,EAA0B;MACpB+J,KAAJ,CAAU/J,GAAV,EAAeoD,KAAf,CAAqBikB,KAArB;MACItd,KAAJ,CAAU/J,IAAIkI,SAAd,EAAyB9E,KAAzB,CAA+BikB,MAAMnf,SAArC;;;AAGF,SAASyyB,eAAT,CAAyB3T,QAAzB,EAAmC4T,SAAnC,EAA8C;MACpCtK,IADoC,GACpBtJ,QADoB,CACpCsJ,IADoC;MAC9BnwB,KAD8B,GACpB6mB,QADoB,CAC9B7mB,KAD8B;;MAEtC06B,eAAe53B,OAAOwH,MAAP,CAAc,IAAd,CAArB;MACMqwB,UAAU,IAAI/wB,KAAJ,CAAUumB,IAAV,EAAgBhvB,MAAhB,CAAuB,UAACgvB,IAAD,EAAOG,QAAP,EAAoB;SACpDA,QAAL,IAAiB,IAAjB;GADc,CAAhB;;SAIOoK,YAAP,EAAqBD,SAArB;UACQz6B,KAAR,EAAe+mB,WAAf;;WAESA,WAAT,QAAgDzhB,KAAhD,EAAuDyF,IAAvD,EAA6D;QAAtCgO,IAAsC,SAAtCA,IAAsC;QAAhC/Y,KAAgC,SAAhCA,KAAgC;QAAzB4Y,QAAyB,SAAzBA,QAAyB;;QACvDG,SAAS,UAAb,EAAyB;cACf,IAAI1C,GAAJ,CAAQrW,KAAR,EAAeyX,IAAf,GAAsB5N,CAA9B;;UAEI6wB,aAAa16B,KAAb,CAAJ,EAAyB;aAClBsF,KAAL,IAAco1B,aAAa16B,KAAb,EAAoBA,KAAlC;gBACQiF,MAAR,CAAe,IAAI2E,KAAJ,CAAU8wB,aAAa16B,KAAb,EAAoBmwB,IAA9B,EAAoChvB,MAApC,CAA2C,UAACgvB,IAAD,EAAOG,QAAP,EAAoB;eACvEA,QAAL,IAAiB,IAAjB;SADa,EAEZzmB,CAFH;;KALJ,MASO;cACG+O,QAAR,EAAkBmO,WAAlB;;;;OAICrlB,MAAL,GAAc,CAAd;MACIgS,GAAJ,CAAQyc,IAAR,EAAcqE,SAAd,CAAwBmG,QAAQ/yB,IAAR,GAAeiC,CAAvC;;SAEOgd,QAAP;CAGF;;ACtnEA;;;;;;AAMA,AACA,AAEA,IAAM+T,OAAO,IAAIvkB,GAAJ,CAAQ,GAAR,CAAb;AACA,IAAMwkB,qBAAqB,CACzB,QADyB,EAEzB,QAFyB,EAGzB,SAHyB,EAIzB,WAJyB,EAKzB,UALyB,EAMzB,QANyB,EAOzB,UAPyB,CAA3B;AASA,IAAMC,uBAAuB,IAAIlxB,KAAJ,CAAUixB,kBAAV,EAA8BniB,GAA9B,CAAkC,UAAC1Y,KAAD;SAAWA,MAAMqQ,KAAN,CAAY,CAAZ,EAAe,CAAf,CAAX;CAAlC,EAAgExG,CAA7F;AACA,IAAMkxB,cAAc,CAClB,SADkB,EAElB,UAFkB,EAGlB,OAHkB,EAIlB,OAJkB,EAKlB,KALkB,EAMlB,MANkB,EAOlB,MAPkB,EAQlB,QARkB,EASlB,WATkB,EAUlB,SAVkB,EAWlB,UAXkB,EAYlB,UAZkB,CAApB;AAcA,IAAMC,gBAAgB,IAAIpxB,KAAJ,CAAUmxB,WAAV,EAAuBriB,GAAvB,CAA2B,UAAC1Y,KAAD;SAAWA,MAAMqQ,KAAN,CAAY,CAAZ,EAAe,CAAf,CAAX;CAA3B,EAAyDxG,CAA/E;;;;;;;;;;;;;;;;;;AAkBA,cAAe,CACb;UACU,KADV;SAES,eAACoxB,IAAD,EAAOC,GAAP;WAAe3nB,MAAM0nB,KAAKC,GAAL,EAAU,GAAV,CAAN,EAAsB,CAAtB,CAAf;;CAHI,EAKb;UACU,GADV;SAES,eAACD,IAAD,EAAOC,GAAP;WAAeD,KAAKC,GAAL,EAAU,GAAV,CAAf;;CAPI,EASb;UACU,IADV;SAES,eAACD,IAAD,EAAOC,GAAP;WAAe3nB,MAAM0nB,KAAKC,GAAL,EAAU,GAAV,CAAN,EAAsB,CAAtB,CAAf;;CAXI,EAab;UACU,GADV;SAES,eAACD,IAAD,EAAOC,GAAP;WAAeD,KAAKC,GAAL,EAAU,GAAV,CAAf;;CAfI,EAiBb;UACU,IADV;SAES,eAACD,IAAD,EAAOC,GAAP;WAAe3nB,MAAM0nB,KAAKC,GAAL,EAAU,GAAV,CAAN,EAAsB,CAAtB,CAAf;;CAnBI,EAqBb;UACU,GADV;SAES,eAACD,IAAD,EAAOC,GAAP;WAAeD,KAAKC,GAAL,EAAU,GAAV,CAAf;;CAvBI,EAyBb;UACU,IADV;SAES,eAACD,IAAD,EAAOC,GAAP;WAAe3nB,MAAM0nB,KAAKC,GAAL,EAAU,GAAV,CAAN,EAAsB,CAAtB,CAAf;;CA3BI,EA6Bb;UACU,GADV;SAES,eAACD,IAAD,EAAOC,GAAP;WAAeD,KAAKC,GAAL,EAAU,GAAV,CAAf;;CA/BI,EAiCb;UACU,MADV;SAES,eAACD,IAAD,EAAOC,GAAP;WAAeL,mBAAmBI,KAAKC,GAAL,EAAU,IAAV,CAAnB,CAAf;;CAnCI,EAqCb;UACU,KADV;SAES,eAACD,IAAD,EAAOC,GAAP;WAAeJ,qBAAqBG,KAAKC,GAAL,EAAU,IAAV,CAArB,CAAf;;CAvCI,EAyCb;UACU,IADV;SAES,eAACD,IAAD,EAAOC,GAAP;WAAe3nB,MAAM0nB,KAAKC,GAAL,EAAU,GAAV,CAAN,EAAsB,CAAtB,CAAf;;CA3CI,EA6Cb;UACU,GADV;SAES,eAACD,IAAD,EAAOC,GAAP;WAAeD,KAAKC,GAAL,EAAU,GAAV,CAAf;;CA/CI,EAiDb;UACU,MADV;SAES,eAACD,IAAD,EAAOC,GAAP;WAAeH,YAAYE,KAAKC,GAAL,EAAU,GAAV,IAAiB,CAA7B,CAAf;;CAnDI,EAqDb;UACU,KADV;SAES,eAACD,IAAD,EAAOC,GAAP;WAAeF,cAAcC,KAAKC,GAAL,EAAU,GAAV,IAAiB,CAA/B,CAAf;;CAvDI,EAyDb;UACU,IADV;SAES,eAACD,IAAD,EAAOC,GAAP;WAAe3nB,MAAM0nB,KAAKC,GAAL,EAAU,GAAV,CAAN,EAAsB,CAAtB,CAAf;;CA3DI,EA6Db;UACU,GADV;SAES,eAACD,IAAD,EAAOC,GAAP;WAAeD,KAAKC,GAAL,EAAU,GAAV,CAAf;;CA/DI,EAiEb;UACU,MADV;SAES,eAACD,IAAD,EAAOC,GAAP;WAAe3nB,MAAM0nB,KAAKC,GAAL,EAAU,GAAV,CAAN,EAAsB,CAAtB,CAAf;;CAnEI,EAqEb;UACU,IADV;SAES,eAACD,IAAD,EAAOC,GAAP;WAAe3yB,OAAO0yB,KAAKC,GAAL,EAAU,GAAV,CAAP,EAAuB7qB,KAAvB,CAA6B,CAAC,CAA9B,CAAf;;CAvEI,EAyEb;UACU,GADV;SAES,eAAC4qB,IAAD,EAAOC,GAAP;WAAeD,KAAKC,GAAL,EAAU,GAAV,CAAf;;CA3EI,CAAf;;;;;;;;;AAsFA,SAAS3nB,KAAT,CAAepM,MAAf,EAAuB0L,MAAvB,EAA+B;MACvB7K,SAASO,OAAOpB,MAAP,CAAf;MACIg0B,SAAStoB,SAAS7K,OAAOtG,MAA7B;;WAESy5B,SAAS,CAAT,GAAa,CAAb,GAAiBA,MAA1B;;SAEOP,KAAKQ,MAAL,CAAYD,MAAZ,EAAoBtxB,CAApB,GAAwB7B,MAA/B;;;AChJF;;;;;;;AAOA,AACA,AACA,AACA,AACA,AACA,AACA,AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,IAAMqzB,SAAS;KACV,CADU;KAEV,IAFU;KAGV,KAHU;KAIV,OAJU;KAKV,QALU;KAMV,SANU;KAOV,UAPU;KAQV;CARL;;AAWA,IAAMC,cAActyB,SAAS;KACxB,WAACiyB,IAAD,EAAOC,GAAP;WAAeD,KAASC,GAAT,oBAAf;GADwB;KAExB,WAACD,IAAD,EAAOC,GAAP;WAAeD,KAASC,GAAT,eAAf;GAFwB;KAGxB,WAACD,IAAD,EAAOC,GAAP;WAAeD,KAASC,GAAT,eAAf;GAHwB;KAIxB,WAACD,IAAD,EAAOC,GAAP;WAAeD,KAASC,GAAT,aAAf;GAJwB;KAKxB,WAACD,IAAD,EAAOC,GAAP;WAAeD,KAASC,GAAT,YAAf;GALwB;MAMvB,YAACD,IAAD,EAAOC,GAAP;WAAeD,KAASC,GAAT,WAAf;GANuB;KAOxB,WAACD,IAAD,EAAOC,GAAP;WAAeD,KAASC,GAAT,gBAA0B,CAAzC;GAPwB;KAQxB,WAACD,IAAD,EAAOC,GAAP;WAAeD,KAASC,GAAT,gBAAf;;CARe,EASjB,QATiB,EASPlhB,GATO,CAApB;AAUA,IAAMuhB,cAAcvyB,SAAS;KACxB,WAACiyB,IAAD,EAAOj7B,KAAP,EAAck7B,GAAd;WAAsBD,KAASC,GAAT,mBAA6Bl7B,KAA7B,CAAtB;GADwB;KAExB,WAACi7B,IAAD,EAAOj7B,KAAP,EAAck7B,GAAd;WAAsBD,KAASC,GAAT,cAAwBl7B,KAAxB,CAAtB;GAFwB;KAGxB,WAACi7B,IAAD,EAAOj7B,KAAP,EAAck7B,GAAd;WAAsBD,KAASC,GAAT,cAAwBl7B,KAAxB,CAAtB;GAHwB;KAIxB,WAACi7B,IAAD,EAAOj7B,KAAP,EAAck7B,GAAd;WAAsBD,KAASC,GAAT,YAAsBl7B,KAAtB,CAAtB;GAJwB;KAKxB,WAACi7B,IAAD,EAAOj7B,KAAP,EAAck7B,GAAd;WAAsBD,KAASC,GAAT,WAAqBl7B,KAArB,CAAtB;GALwB;KAMxB,WAACi7B,IAAD,EAAOj7B,KAAP,EAAck7B,GAAd;WAAsBD,KAASC,GAAT,YAAsBl7B,QAAQ,CAA9B,CAAtB;GANwB;KAOxB,WAACi7B,IAAD,EAAOj7B,KAAP,EAAck7B,GAAd;WAAsBD,KAASC,GAAT,eAAyBl7B,KAAzB,CAAtB;;CAPe,CAApB;;;;;;;;;;;;;;IAqBMw7B;;;iBAC2B;QAAnBP,IAAmB,uEAAZ,IAAIl5B,IAAJ,EAAY;;oGACvBk5B,IADuB;;;;;;;;;;;;;;;;;;;;;;;;;;wBAuB3BQ,MAAMt0B,QAAQ;UACZ/B,UAAU1D,MAAV,IAAoB,CAAxB,EAA2B;kCACf+5B,IAAV,EAAiBt0B,MAAjB;;;aAGK,KAAKuJ,IAAL,CAAU,KAAKA,IAAL,KAAc,IAAI9G,KAAJ,CAAU6xB,IAAV,EAAgBtxB,GAAhB,CAAoB,UAACnK,KAAD,EAAQy7B,IAAR;eAAiBJ,OAAOI,IAAP,IAAez7B,KAAhC;OAApB,CAAxB,CAAP;;;;;;;;;;;;;;;;;;;4BAgBMA,OAAO;UACT,CAACoF,UAAU1D,MAAf,EAAuB;gBACb,IAAR;;;aAGK,IAAI6P,GAAJ,CAAQ,KAAK1H,CAAL,GAAS6xB,KAAjB,EAAwB1pB,OAAxB,CAAgChS,KAAhC,CAAP;;;;;;;;;;;;;;;;;;;2BAgBKgI,QAAqB;;;UAAb2zB,MAAa,uEAAJ,EAAI;;eACjB,IAAItlB,GAAJ,CAAQ,IAAIzM,KAAJ,CAAU5B,MAAV,EAAkB6B,CAA1B,CAAT;eACStB,OAAO,IAAIqB,KAAJ,CAAU+xB,MAAV,EAAkB9xB,CAAzB,CAAT;;cAEQ+xB,OAAR,EAAiB,UAACC,MAAD,EAAY;iBAClB7zB,OAAO8zB,aAAP,CAAqBH,SAASE,OAAOA,MAArC,EAA6CA,OAAO3xB,KAAP,SAAmB,KAAnB,CAA7C,CAAT;OADF;;aAIOlC,OAAO6B,CAAd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BAgCQ7B,QAAqB;;;UAAb2zB,MAAa,uEAAJ,EAAI;;eACpB,IAAItlB,GAAJ,CAAQ,IAAIzM,KAAJ,CAAU5B,MAAV,EAAkB6B,CAA1B,CAAT;eACStB,OAAO,IAAIqB,KAAJ,CAAU+xB,MAAV,EAAkB9xB,CAAzB,CAAT;;cAEQ+xB,OAAR,EAAiB,UAACC,MAAD,EAAY;iBAClB7zB,OAAO8zB,aAAP,CAAqBH,SAASE,OAAOA,MAArC,EAA6CA,OAAO3xB,KAAP,SAAmB,QAAnB,CAA7C,CAAT;OADF;;aAIOlC,OAAO6B,CAAd;;;;;;;;;;;;;;;;2BAaE4xB,MAAM;aACDH,YAAYG,IAAZ,EAAkB,CAAC,KAAK5xB,CAAN,EAAS,KAAT,CAAlB,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;2BAsBK4xB,MAAM;aACJH,YAAYG,IAAZ,EAAkB,CAAC,KAAK5xB,CAAN,EAAS,QAAT,CAAlB,CAAP;;;;;;;;;;;;;;;;;4BAcMoxB,MAAM;aACL,IAAIl5B,IAAJ,CAAS,IAAI6H,KAAJ,CAAUqxB,IAAV,EAAgBpxB,CAAzB,CAAP;;aAEOoxB,KAAKh5B,OAAL,KAAiB,KAAK4H,CAAL,CAAO5H,OAAP,EAAxB;;;;;;;;;;;;;;;;;6BAcOg5B,MAAM;aACN,IAAIl5B,IAAJ,CAAS,IAAI6H,KAAJ,CAAUqxB,IAAV,EAAgBpxB,CAAzB,CAAP;;aAEOoxB,KAAKh5B,OAAL,KAAiB,KAAK4H,CAAL,CAAO5H,OAAP,EAAxB;;;;;;;;;;;;;;;;;;8BAeQ85B,OAAOC,OAAO;UAChBtrB,OAAO,KAAK7G,CAAL,CAAO5H,OAAP,EAAb;;cAEQ,IAAIF,IAAJ,CAAS,IAAI6H,KAAJ,CAAUmyB,KAAV,EAAiBlyB,CAA1B,CAAR;cACQ,IAAI9H,IAAJ,CAAS,IAAI6H,KAAJ,CAAUoyB,KAAV,EAAiBnyB,CAA1B,CAAR;;aAEO6G,OAAOqrB,MAAM95B,OAAN,EAAP,IAA0ByO,OAAOsrB,MAAM/5B,OAAN,EAAxC;;;;;;;;;;;;;;;;gCAaU;aACH,KAAK4H,CAAL,CAAOzI,QAAP,OAAsB,cAA7B;;;;;;;;;;;;;;;+BAYS;aACF,KAAK66B,QAAL,CAAcP,KAAd,CAAP;;;;;;;;;;;;;;;;;;0BAeID,MAAMR,MAAM;;;UACZ,EAAEQ,QAAQJ,MAAV,KAAqBI,SAAS,GAAlC,EAAuC;eAC9B,KAAP;;;aAGK,IAAID,GAAJ,CAAQ,IAAIz5B,IAAJ,CAASk5B,IAAT,CAAR,CAAP;;UAEIiB,gBAAJ;;aAEOx3B,QAAQ22B,MAAR,EAAgB,UAACc,KAAD,EAAQC,CAAR,EAAc;YAC/BA,MAAMX,IAAV,EAAgB;oBACJ,IAAV;;;YAGE,CAACS,OAAD,IAAYE,MAAM,GAAtB,EAA2B;;;;YAIvBF,WAAW,OAAK71B,GAAL,CAAS+1B,CAAT,MAAgBnB,KAAK50B,GAAL,CAAS+1B,CAAT,CAA/B,EAA4C;iBACnC,KAAP;;OAVG,MAYA,KAZP;;;;;;;;;;;;;;;;;;2BA2BEX,MAAMt0B,QAAQ;UACV8zB,OAAO,KAAKpxB,CAAlB;;UAEIzE,UAAU1D,MAAV,IAAoB,CAAxB,EAA2B;kCACf+5B,IAAV,EAAiBt0B,MAAjB;;;aAGK,IAAIyC,KAAJ,CAAU6xB,IAAV,EAAgB5xB,CAAvB;;cAEQ4xB,IAAR,EAAc,UAACz7B,KAAD,EAAQy7B,IAAR,EAAiB;oBACjBA,IAAZ,EAAkB,CAACR,IAAD,EAAOj7B,KAAP,EAAc,KAAd,CAAlB;OADF;;aAIO,IAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;2BAyBKy7B,MAAMt0B,QAAQ;UACb8zB,OAAO,KAAKpxB,CAAlB;;UAEIzE,UAAU1D,MAAV,IAAoB,CAAxB,EAA2B;kCACf+5B,IAAV,EAAiBt0B,MAAjB;;;aAGK,IAAIyC,KAAJ,CAAU6xB,IAAV,EAAgB5xB,CAAvB;;cAEQ4xB,IAAR,EAAc,UAACz7B,KAAD,EAAQy7B,IAAR,EAAiB;oBACjBA,IAAZ,EAAkB,CAACR,IAAD,EAAOj7B,KAAP,EAAc,QAAd,CAAlB;OADF;;aAIO,IAAP;;;;;;;;;;;;;;;yBAYG0Q,OAAM;UACHuqB,OAAO,KAAKpxB,CAAlB;;UAEIzE,UAAU1D,MAAd,EAAsB;aACf26B,OAAL,CAAa3rB,KAAb;;;aAGKuqB,KAAKh5B,OAAL,EAAP;;;;kCAGY;aACL,KAAK4H,CAAL,CAAOyyB,WAAP,EAAP;;;;qCAGe;aACR,KAAKzyB,CAAL,CAAO0yB,cAAP,EAAP;;;;+BAGS;aACF,KAAK1yB,CAAL,CAAOzI,QAAP,EAAP;;;;8BAGQ;aACD,KAAKyI,CAAL,CAAO2yB,OAAP,EAAP;;;;EAlXc5yB;;AAqXlBzD,iBAAiBq1B,IAAIzzB,SAArB,qBACGtB,QAAOvF,WADV,EACwB,KADxB;;AAIAP,aAAa,CAAb,EAAgBmG,IAAhB,CAAqB;SACZjF,MADY;OAEd25B;CAFP;;;;;;;;;;AAaA,SAASE,GAAT,GAAe;SACN35B,KAAK25B,GAAL,EAAP;;;;;;;;;;AAUF,SAAST,IAAT,CAAcA,IAAd,EAAoB;MACd,CAAC71B,UAAU1D,MAAf,EAAuB;WACd,IAAI85B,GAAJ,CAAQ,IAAIz5B,IAAJ,CAAS25B,KAAT,CAAR,CAAP;;;SAGK,IAAI9xB,KAAJ,CAAUqxB,IAAV,EAAgBpxB,CAAvB;;SAEO,IAAI2xB,GAAJ,CAAQ,IAAIz5B,IAAJ,CAASk5B,IAAT,CAAR,CAAP;CAGF;;AClfA;;;;;;AAMA,AACA,AACA,AACA,AACA,AAEA;;;;AAIA,IAAMwB,oBAAoB,2DAA1B;AACA,IAAMC,gBAAgB1zB,SAAS,MAAT,EAAiB;SAAM,IAAI0K,GAAJ,CAAQ,EAAR,CAAN;CAAjB,EACnB3K,IADmB,CACdxH,OADc,EACL,UAACo6B,MAAD,EAASgB,KAAT,EAAmB;MAC5BC,cAAc,IAAIlpB,GAAJ,CAAQ,EAAR,CAAlB;;UAEQipB,KAAR,EAAe,UAAC38B,KAAD,EAAW;QACpB+C,cAAc/C,KAAd,KAAwBuB,QAAQvB,KAAR,CAA5B,EAA4C;oBAC5B48B,YAAY3vB,MAAZ,CAAmByvB,cAAc18B,KAAd,EAAqB,CAAK27B,MAAL,QAArB,CAAnB,CAAd;;;;;gBAKU70B,IAAZ,CAAiB;aACJ60B,MAAX,OADe;;KAAjB;GAPF;;SAaOiB,YAAY/yB,CAAnB;CAjBkB,EAmBnBd,IAnBmB,CAmBdhG,aAnBc,EAmBC,UAAC44B,MAAD,EAASgB,KAAT,EAAmB;MAClCC,cAAc,IAAIlpB,GAAJ,CAAQ,EAAR,CAAlB;;UAEQipB,KAAR,EAAe,UAAC38B,KAAD,EAAQ68B,KAAR,EAAkB;QAC3B95B,cAAc/C,KAAd,KAAwBuB,QAAQvB,KAAR,CAA5B,EAA4C;oBAC5B48B,YAAY3vB,MAAZ,CAAmByvB,cAAc18B,KAAd,EAAqB,CAAC27B,SAAaA,MAAb,SAAyBkB,KAAzB,SAAqCA,KAAtC,CAArB,CAAnB,CAAd;;;;;gBAKU/1B,IAAZ,CAAiB;aACR60B,SAAaA,MAAb,SAAyBkB,KAAzB,SAAqCA,KAD7B;aAERh6B,SAAS7C,KAAT,IAAkB6L,KAAKC,SAAL,CAAe9L,KAAf,CAAlB,GAA0CuI,OAAOvI,KAAP;KAFnD;GAPF;;SAaO48B,YAAY/yB,CAAnB;CAnCkB,CAAtB;;;;;;;;;;;;;;;AAmDA,oBAAe,UAACizB,OAAD,EAAUC,GAAV,EAAeC,MAAf,EAAuBL,KAAvB,EAAgE;MAAlCM,IAAkC,uEAA3B,EAA2B;MAAvBC,aAAuB,uEAAP,EAAO;8BAIzEA,aAJyE,CAE3EF,MAF2E;MAEnEG,YAFmE,yCAEpD,IAFoD;6BAIzED,aAJyE,CAG3EP,KAH2E;MAGpES,WAHoE,wCAGtD,IAHsD;;MAKzEtoB,MAAMuoB,WAAWN,GAAX,IACNA,GADM,GAEFx0B,OAAOu0B,OAAP,EAAgBx7B,OAAhB,CAAwB,MAAxB,EAAgC,EAAhC,CAFE,SAEuCiH,OAAOw0B,GAAP,EAAYz7B,OAAZ,CAAoB,MAApB,EAA4B,EAA5B,CAFjD;;UAIQ07B,MAAR,EAAgB,UAACh9B,KAAD,EAAQ68B,KAAR,EAAkB;UAC1B,IAAIxmB,GAAJ,CAAQvB,GAAR,EAAagnB,aAAb,OAAgCe,KAAhC,EAA0CS,OAAOt9B,KAAP,EAAcm9B,YAAd,CAA1C,EAAuEtzB,CAA7E;GADF;;MAIM+yB,cAAcF,cAAcC,KAAd,EAAqB,CAAC,EAAD,CAArB,CAApB;;MAEIC,YAAYl7B,MAAhB,EAAwB;WACf,CAACoT,IAAIxJ,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAAtB,GAA0B,GAA1B,GAAgC,GAAjC,IAAwCsxB,YAC5ClkB,GAD4C,CACxC;UAAGmkB,KAAH,QAAGA,KAAH;UAAU78B,KAAV,QAAUA,KAAV;aAA0Bs9B,OAAOT,KAAP,EAAcO,WAAd,CAA1B,SAA0DE,OAAOt9B,KAAP,EAAco9B,WAAd,CAA1D;KADwC,EAE5CppB,IAF4C,CAEvC,GAFuC,CAA/C;;;cAKSc,GAAX,IAAmBmoB,aAAYA,IAAZ,GAAsB,EAAzC;CArBF;;;;;;;AA6BA,SAASI,UAAT,CAAoBN,GAApB,EAAyB;SAChBN,kBAAkBt6B,IAAlB,CAAuB46B,GAAvB,CAAP;;;;;;;;;AASF,SAASO,MAAT,CAAgBt1B,MAAhB,EAAwBu1B,SAAxB,EAAmC;SAC1BA,YAAYC,mBAAmBx1B,MAAnB,CAAZ,GAAyCA,MAAhD;;;AC5GF;;;;;;AAMA,AACA,AAEA;;;;;;AAMA,oBAAe,UAACy1B,UAAD,EAAgB;MACvBC,UAAU,EAAhB;;UAEQ,CAACD,cAAc,EAAf,EAAmBv1B,KAAnB,CAAyB,IAAzB,CAAR,EAAwC,UAAClI,KAAD,EAAW;QAC3CsF,QAAQtF,MAAMsL,OAAN,CAAc,GAAd,CAAd;QACMvG,MAAM,IAAIsR,GAAJ,CAAQrW,MAAMwX,SAAN,CAAgB,CAAhB,EAAmBlS,KAAnB,CAAR,EACTmS,IADS,GAETmI,WAFS,GAEK/V,CAFjB;QAGMT,MAAM,IAAIiN,GAAJ,CAAQrW,MAAMwX,SAAN,CAAgBlS,QAAQ,CAAxB,CAAR,EAAoCmS,IAApC,GAA2C5N,CAAvD;;QAEI9E,GAAJ,EAAS;cACCA,GAAR,IAAe,CAAC24B,QAAQ34B,GAAR,IAAmB24B,QAAQ34B,GAAR,CAAnB,UAAuC,EAAxC,IAA8CqE,GAA7D;;GARJ;;SAYOs0B,OAAP;CAfF;;ACfA;;;;;;AAMA,AACA,AACA,AAEA,IAAMC,iBAAiB,IAAIjqB,GAAJ,CAAQ,CAAC,UAAD,EAAa,MAAb,EAAqB,MAArB,EAA6B,aAA7B,EAA4C,QAA5C,EAAsD,QAAtD,CAAR,CAAvB;AACA,IAAMkqB,cAAc,IAAIlqB,GAAJ,CAAQ,CAAC,QAAD,EAAW,KAAX,EAAkB,MAAlB,CAAR,CAApB;;;;;;;;;AASA,qBAAe,UAACmqB,IAAD,EAAO9uB,MAAP,EAAe2uB,OAAf,EAA2B;SACjC,IAAI9zB,KAAJ,CAAUi0B,IAAV,EAAgBh0B,CAAvB;;MAEI+zB,YAAYhqB,aAAZ,CAA0B7E,MAA1B,MAAsC,CAAC,CAA3C,EAA8C;WACrC,IAAP;;;MAGElM,SAASg7B,IAAT,KAAkBF,eAAe/pB,aAAf,CAA6B1S,YAAY28B,IAAZ,CAA7B,MAAoD,CAAC,CAA3E,EAA8E;QACxE,CAACH,QAAQI,WAAb,EAA0B;cAChBA,WAAR,GAAsB,CAAC,gCAAD,CAAtB;;;WAGK,IAAIl0B,KAAJ,CAAUi0B,IAAV,EAAgBjmB,IAAhB,EAAP;;;SAGKimB,IAAP;CAfF;;ACpBA;;;;;;;AAOA,AACA,AACA,AACA,AACA,AAIA,AACA,AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsEA,IAAME,aAAW;SACR,EADQ;QAET;cACM,EADN;cAEM;GAJG;WAMNv+B,SAAOw+B,QAAP,CAAgBC,MANV;UAOP,EAPO;QAQT,IARS;WASN,EATM;UAUP,KAVO;UAWP,EAXO;SAYR,EAZQ;gBAaD,EAbC;WAcN,CAdM;OAeV,EAfU;mBAgBE;CAhBnB;AAkBA,IAAMC,gBAAgB,IAAIxqB,GAAJ,CAAQ,CAAC,MAAD,EAAS,KAAT,CAAR,CAAtB;;;;;;;;;;;;;;;;;;;IAkBMyqB;;;mBACqB;;;QAAbC,MAAa,uEAAJ,EAAI;;;;;aAGdC,KAAT,GAAiB;aACRA,MAAMC,OAAN,CAAcj1B,KAAd,CAAoBg1B,KAApB,EAA2Bj5B,SAA3B,CAAP;;;QAGIm5B,OAAO,IAAI30B,KAAJ,CAAU,EAAV,EAAc6C,UAAd,CAAyBsxB,UAAzB,EAAmCK,MAAnC,EAA2Cv0B,CAAxD;;QAEI00B,KAAK7uB,MAAL,CAAYpE,OAAZ,CAAoBkzB,qBAApB,MAA+C,CAAC,CAApD,EAAuD;WAChD9uB,MAAL,CAAY5I,IAAZ,CAAiB03B,qBAAjB;;;;;;;;;WASKt4B,cAAP,CAAsBm4B,KAAtB,EAA6B,IAA7B,EAAmC,EAAEr+B,OAAOu+B,IAAT,EAAnC;WACOj1B,cAAP,CAAsB+0B,KAAtB,EAA6BF,MAAMp2B,SAAnC;;kBAEOs2B,KAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAyBItuB,YAA6B;UAAjBC,QAAiB,uEAAN,IAAM;;eACxB,CAACD,UAAD,CAAT,EAAuB,CAAC,UAAD,CAAvB,EAAqC,aAArC;;UAEQJ,KAHyB,GAGf,KAAKjI,EAHU,CAGzBiI,KAHyB;;;UAK7BK,QAAJ,EAAc;cACNlJ,IAAN,CAAWiJ,UAAX;OADF,MAEO;cACCnE,OAAN,CAAcmE,UAAd;;;aAGK,IAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2BA2BKA,YAA8B;UAAlBE,SAAkB,uEAAN,IAAM;;eAC1B,CAACF,UAAD,CAAT,EAAuB,CAAC,UAAD,CAAvB,EAAqC,cAArC;;UAEQL,MAH2B,GAGhB,KAAKhI,EAHW,CAG3BgI,MAH2B;;;UAK/BO,SAAJ,EAAe;eACNrE,OAAP,CAAemE,UAAf;OADF,MAEO;eACEjJ,IAAP,CAAYiJ,UAAZ;;;aAGK,IAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;2BAwBK7E,UAAUlL,OAAO;UAChBu+B,OAAO,KAAK72B,EAAlB;;UAEI,CAACtC,UAAU1D,MAAf,EAAuB;eACd68B,IAAP;;;UAGE98B,WAAWyJ,QAAX,CAAJ,EAA0B;iBACfqzB,IAAT;OADF,MAEO;YACDn5B,UAAU1D,MAAV,IAAoB,CAAxB,EAA2B;wCACXwJ,QAAd,EAAyBlL,KAAzB;;;YAGE4J,KAAJ,CAAU20B,IAAV,EAAgB9xB,UAAhB,CAA2BvB,QAA3B;;;aAGK,IAAP;;;;;;;;;;;;;;;;;;;4BAgBK6xB,KAAkB;UAAbqB,MAAa,uEAAJ,EAAI;;UACnB,CAAC/6B,SAAS05B,GAAT,CAAL,EAAoB;iBACTA,GAAT;cACM32B,SAAN;;;aAGK,KAAKk4B,OAAL,CAAavB,GAAb,EAAkB93B,OAAO,EAAE8J,QAAQ,QAAV,EAAP,EAA6BqvB,MAA7B,CAAlB,CAAP;;;;;;;;;;;;;;;;;;;2BAgBErB,KAAkB;UAAbqB,MAAa,uEAAJ,EAAI;;UAChB,CAAC/6B,SAAS05B,GAAT,CAAL,EAAoB;iBACTA,GAAT;cACM32B,SAAN;;;aAGK,KAAKk4B,OAAL,CAAavB,GAAb,EAAkB93B,OAAO,EAAE8J,QAAQ,KAAV,EAAP,EAA0BqvB,MAA1B,CAAlB,CAAP;;;;;;;;;;;;;;;;;;;yBAgBGrB,KAAkB;UAAbqB,MAAa,uEAAJ,EAAI;;UACjB,CAAC/6B,SAAS05B,GAAT,CAAL,EAAoB;iBACTA,GAAT;cACM32B,SAAN;;;aAGK,KAAKk4B,OAAL,CAAavB,GAAb,EAAkB93B,OAAO,EAAE8J,QAAQ,MAAV,EAAP,EAA2BqvB,MAA3B,CAAlB,CAAP;;;;;;;;;;;;;;;;;;;;;;;;4BAqBMK,QAAQz+B,OAAO;UACb09B,OADa,GACD,KAAKh2B,EADJ,CACbg2B,OADa;;;UAGjBt4B,UAAU1D,MAAV,IAAoB,CAAxB,EAA2B;oCACb+8B,MAAZ,EAAqBz+B,KAArB;;;cAGMy+B,MAAR,EAAgB,UAACz+B,KAAD,EAAQy+B,MAAR,EAAmB;YAC3B75B,WAAQ84B,QAAQe,MAAR,KAAmB,EAAjC;YACMC,SAASn9B,QAAQvB,KAAR,IAAiBA,KAAjB,GAAyB,CAACA,KAAD,CAAxC;;SAEC09B,QAAQe,MAAR,IAAkB75B,QAAnB,EAA0BkC,IAA1B,CAA+BuC,KAA/B,CAAqCzE,QAArC,EAA4C85B,MAA5C;OAJF;;aAOO,IAAP;;;;;;;;;;;;;;;;;;;;;;;+BAoBoB;UAAbN,MAAa,uEAAJ,EAAI;;UACdO,aAAa,IAAI/0B,KAAJ,CAAUw0B,MAAV,EAAkBnM,MAAlB,CAAyB,MAAzB,IACf,EAAE4L,MAAMO,OAAOP,IAAf,EADe,GAEf,EAFJ;;aAIOO,OAAOP,IAAd;;UAEMU,OAAO,IAAI30B,KAAJ,CAAU,EAAV,EACV6C,UADU,CACC,KAAK/E,EADN,EACU02B,MADV,EAEVn5B,MAFU,CAEH05B,UAFG,EAGV90B,CAHH;;aAKO,IAAIs0B,KAAJ,CAAUI,IAAV,CAAP;;;;;;;;;;;;;;;;;;;;0BAiBIxB,KAA6B;UAAxBc,IAAwB,uEAAjB,EAAiB;UAAbO,MAAa,uEAAJ,EAAI;;UAC7Bh5B,UAAU1D,MAAV,IAAoB,CAAC2B,SAAS05B,GAAT,CAAzB,EAAwC;iBAC7Bc,IAAT;eACOd,GAAP;cACM32B,SAAN;;;aAGK,KAAKk4B,OAAL,CAAavB,GAAb,EAAkB93B,OAAO,EAAE8J,QAAQ,OAAV,EAAmB8uB,UAAnB,EAAP,EAAkCO,MAAlC,CAAlB,CAAP;;;;;;;;;;;;;;;;;;;;yBAiBGrB,KAA6B;UAAxBc,IAAwB,uEAAjB,EAAiB;UAAbO,MAAa,uEAAJ,EAAI;;UAC5Bh5B,UAAU1D,MAAV,IAAoB,CAAC2B,SAAS05B,GAAT,CAAzB,EAAwC;iBAC7Bc,IAAT;eACOd,GAAP;cACM32B,SAAN;;;aAGK,KAAKk4B,OAAL,CAAavB,GAAb,EAAkB93B,OAAO,EAAE8J,QAAQ,MAAV,EAAkB8uB,UAAlB,EAAP,EAAiCO,MAAjC,CAAlB,CAAP;;;;;;;;;;;;;;;;;;;;wBAiBErB,KAA6B;UAAxBc,IAAwB,uEAAjB,EAAiB;UAAbO,MAAa,uEAAJ,EAAI;;UAC3Bh5B,UAAU1D,MAAV,IAAoB,CAAC2B,SAAS05B,GAAT,CAAzB,EAAwC;iBAC7Bc,IAAT;eACOd,GAAP;cACM32B,SAAN;;;aAGK,KAAKk4B,OAAL,CAAavB,GAAb,EAAkB93B,OAAO,EAAE8J,QAAQ,KAAV,EAAiB8uB,UAAjB,EAAP,EAAgCO,MAAhC,CAAlB,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BA2BMrB,KAAkB;UAAbqB,MAAa,uEAAJ,EAAI;;UACpBh5B,UAAU1D,MAAV,KAAqB,CAArB,IAA0B,CAAC2B,SAAS05B,GAAT,CAA/B,EAA8C;iBACnCA,GAAT;;;UAGI4B,aAAa,IAAI/0B,KAAJ,CAAUw0B,MAAV,EAAkBnM,MAAlB,CAAyB,MAAzB,IACf,EAAE4L,MAAMO,OAAOP,IAAf,EADe,GAEf,EAFJ;UAGMe,YAAYv7B,SAAS05B,GAAT,IACd,EAAEA,QAAF,EADc,GAEd,EAFJ;;aAIOqB,OAAOP,IAAd;;UAEMU,OAAO,IAAI30B,KAAJ,CAAU,KAAKlC,EAAf,EACVoC,SADU,GAEV2C,UAFU,CAECmyB,SAFD,EAEYR,MAFZ,EAGVn5B,MAHU,CAGH05B,UAHG,EAIV90B,CAJH;;UAMIg1B,YAAJ;UACIhwB,UAAUpB,UAAQU,OAAR,EAAd;;cAEQowB,KAAK7uB,MAAb,EAAqB,UAACK,UAAD,EAAgB;kBACzBlB,QAAQL,IAAR,CAAa,YAAM;cACvBuB,WAAWrO,MAAX,IAAqB,CAAzB,EAA4B;mBACnB+L,UAAQU,OAAR,EAAP;;;iBAGK,IAAIV,SAAJ,CAAY,UAACU,OAAD,EAAa;oBACtB4B,WAAWwuB,IAAX,CAAR;WADK,CAAP;SALQ,EAQP,UAAC14B,GAAD,EAAS;cACNkK,WAAWrO,MAAX,GAAoB,CAAxB,EAA2B;mBAClB+L,UAAQW,MAAR,CAAevI,GAAf,CAAP;;;iBAGK,IAAI4H,SAAJ,CAAY,UAACU,OAAD,EAAa;oBACtB4B,WAAWlK,GAAX,EAAgB04B,IAAhB,CAAR;WADK,CAAP;SAbQ,CAAV;OADF;;gBAoBU1vB,QAAQL,IAAR,CAAa;eAAM,IAAIf,SAAJ,CAAY,UAACU,OAAD,EAAUC,MAAV,EAAqB;cAE1DuB,KAF0D,GAexD4uB,IAfwD,CAE1D5uB,KAF0D;2BAexD4uB,IAfwD,CAG1DO,IAH0D;cAIxDC,QAJwD,cAIxDA,QAJwD;cAKxDC,QALwD,cAKxDA,QALwD;cAO1DnB,IAP0D,GAexDU,IAfwD,CAO1DV,IAP0D;cAQ1DH,OAR0D,GAexDa,IAfwD,CAQ1Db,OAR0D;cAS1D3uB,MAT0D,GAexDwvB,IAfwD,CAS1DxvB,MAT0D;cAU1DqG,UAV0D,GAexDmpB,IAfwD,CAU1DnpB,UAV0D;cAW1D6pB,YAX0D,GAexDV,IAfwD,CAW1DU,YAX0D;cAY1DjtB,OAZ0D,GAexDusB,IAfwD,CAY1DvsB,OAZ0D;cAa1D+qB,GAb0D,GAexDwB,IAfwD,CAa1DxB,GAb0D;cAc1DmC,eAd0D,GAexDX,IAfwD,CAc1DW,eAd0D;;;gBAiBtD,IAAIC,cAAJ,EAAN;;cAEIC,IAAJ,CAASrwB,MAAT,EAAiBguB,GAAjB,EAAsB,IAAtB,EAA4BgC,QAA5B,EAAsCC,QAAtC;;kBAEQtB,OAAR,EAAiB,UAAC19B,KAAD,EAAQy+B,MAAR,EAAmB;gBAC9BY,gBAAJ,CAAqBZ,MAArB,EAA6Bz+B,KAA7B;WADF;;cAIIoV,UAAJ,EAAgB;gBACV8oB,cAActqB,aAAd,CAA4B7E,MAA5B,MAAwC,CAAC,CAA7C,EAAgD;kBAC1CqG,UAAJ,GAAiBA,UAAjB;aADF,MAEO;kBACDkqB,MAAJ,CAAWlqB,UAAX,GAAwBA,UAAxB;;;;cAIAmqB,OAAJ,GAAc,YAAM;gBACZl4B,QAAQ,IAAIvB,KAAJ,CAAU,qBAAV,CAAd;;kBAEMiT,IAAN,GAAa,aAAb;;mBAEO1R,KAAP;;kBAEM,IAAN;WAPF;;cAUIiO,OAAJ,GAAc,YAAM;gBACZjO,QAAQ,IAAIvB,KAAJ,CAAU,eAAV,CAAd;;kBAEMiT,IAAN,GAAa,eAAb;;mBAEO1R,KAAP;;kBAEM,IAAN;WAPF;;cAUIm4B,SAAJ,GAAgB,YAAM;gBACdn4B,QAAQ,IAAIvB,KAAJ,CAAU,uBAAV,CAAd;;kBAEMiT,IAAN,GAAa,eAAb;;mBAEO1R,KAAP;;kBAEM,IAAN;WAPF;;cAUIo4B,kBAAJ,GAAyB,YAAM;gBACzB,CAACZ,GAAD,IAAQ,CAACA,IAAI5wB,MAAb,IAAuB4wB,IAAIa,UAAJ,KAAmB,CAA9C,EAAiD;;;;gBAI3CC,WAAW;sBACPpB,IADO;oBAET,CAACU,YAAD,IAAiBA,iBAAiB,MAAlC,GAA2CJ,IAAIe,YAA/C,GAA8Df,IAAIc,QAFzD;uBAGNE,aAAahB,IAAIiB,qBAAJ,EAAb,CAHM;sBAIPjB,IAAI5wB,MAAJ,KAAe,IAAf,GAAsB,GAAtB,GAA4B4wB,IAAI5wB,MAJzB;0BAKH4wB,IAAI5wB,MAAJ,KAAe,IAAf,GAAsB,YAAtB,GAAqC4wB,IAAIkB,UALtC;;aAAjB;;gBASIlxB,UAAUpB,UAAQU,OAAR,EAAd;;oBAEQwB,KAAR,EAAe,UAACI,UAAD,EAAgB;wBACnBlB,QAAQL,IAAR,CAAa,YAAM;oBACvBuB,WAAWrO,MAAX,IAAqB,CAAzB,EAA4B;yBACnB+L,UAAQU,OAAR,EAAP;;;uBAGK,IAAIV,SAAJ,CAAY,UAACU,OAAD,EAAa;0BACtB4B,WAAW4vB,QAAX,CAAR;iBADK,CAAP;eALQ,EAQP,UAAC95B,GAAD,EAAS;oBACNkK,WAAWrO,MAAX,GAAoB,CAAxB,EAA2B;yBAClB+L,UAAQW,MAAR,CAAevI,GAAf,CAAP;;;uBAGK,IAAI4H,SAAJ,CAAY,UAACU,OAAD,EAAa;0BACtB4B,WAAWlK,GAAX,EAAgB85B,QAAhB,CAAR;iBADK,CAAP;eAbQ,CAAV;aADF;;oBAoBQ9wB,QACLL,IADK,CACA;qBAAMmxB,QAAN;aADA,EAELK,KAFK,CAEC,UAACn6B,GAAD,EAAS;kBACV;oBACE85B,QAAJ,GAAeA,QAAf;eADF,CAEE,OAAOtqB,CAAP,EAAU;sBACJxP,GAAN;;;oBAGIA,GAAN;aATI,CAAR;WApCF;;cAkDIo5B,YAAJ,GAAmBA,YAAnB;cACIjtB,OAAJ,GAAc1P,OAAO0P,OAAP,KAAmB,CAAjC;cACIktB,eAAJ,GAAsB,CAAC,CAACA,eAAxB;;cAEIe,IAAJ,CAASpC,IAAT;SArH2B,CAAN;OAAb,CAAV;;cAwHQ/rB,KAAR,GAAgB,SAASA,KAAT,GAAiB;YAC3B+sB,GAAJ,EAAS;cACH/sB,KAAJ;;;eAGK,IAAP;OALF;;aAQOjD,OAAP;;;;EA7hBgBlJ;;AAiiBpBQ,iBAAiBg4B,MAAMp2B,SAAvB,qBACGtB,QAAOvF,WADV,EACwB,OADxB;;;;;;;;AAUA,SAASs9B,qBAAT,CAA+BJ,MAA/B,EAAuC;MAEnCtB,OAFmC,GASjCsB,MATiC,CAEnCtB,OAFmC;MAGnCe,IAHmC,GASjCO,MATiC,CAGnCP,IAHmC;MAInCH,OAJmC,GASjCU,MATiC,CAInCV,OAJmC;MAKnC3uB,MALmC,GASjCqvB,MATiC,CAKnCrvB,MALmC;MAMnCiuB,MANmC,GASjCoB,MATiC,CAMnCpB,MANmC;MAOnCL,KAPmC,GASjCyB,MATiC,CAOnCzB,KAPmC;MAQnCI,GARmC,GASjCqB,MATiC,CAQnCrB,GARmC;;MAU/BmD,SAASnxB,OAAOuH,WAAP,EAAf;;SAEOvH,MAAP,GAAgBmxB,MAAhB;SACOnD,GAAP,GAAaoD,aAAarD,OAAb,EAAsBC,GAAtB,EAA2BC,MAA3B,EAAmCL,KAAnC,CAAb;SACOkB,IAAP,GAAcuC,cAAcvC,IAAd,EAAoBqC,MAApB,EAA4BxC,OAA5B,CAAd;SACOA,OAAP,GAAiB,IAAI9zB,KAAJ,CAAU8zB,OAAV,EAAmBv8B,MAAnB,CAA0B,UAACu8B,OAAD,EAAU/pB,MAAV,EAAkB8qB,MAAlB,EAA6B;aAC7D,IAAIpoB,GAAJ,CAAQooB,MAAR,EACN4B,aADM,GAEN/+B,OAFM,CAEE,MAFF,EAEU,GAFV,EAGNuI,CAHH;;YAKQ40B,MAAR,IAAkB9qB,OAAOK,IAAP,CAAY,IAAZ,CAAlB;GANe,EAOdnK,CAPH;;;;;;;;;AAgBF,IAAMw0B,QAAQ,IAAIF,KAAJ,EAAd,CAEA;;ACvsBA;;;;;;AAMA,gBAEqB3+B;IAAbw+B,uBAAAA;;;AAER,kBAAe,UAACsC,WAAD,EAAiB;MAEpB3D,KAFoB,GAI1BqB,UAJ0B,CAE5B9mB,MAF4B;MAG5B+lB,IAH4B,GAI1Be,UAJ0B,CAG5Bf,IAH4B;;MAKxBD,SAAS;WACN,EADM;UAEPC,KAAK37B,OAAL,CAAa,IAAb,EAAmB,EAAnB;GAFR;;MAKI,CAACq7B,KAAL,EAAY;WACHK,MAAP;;;MAGE3mB,GAAJ,CAAQsmB,MAAMr7B,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAR,EACG4G,KADH,CACS,GADT,EAEGkM,OAFH,CAEW,UAACmsB,QAAD,EAAc;0BACKA,SAASr4B,KAAT,CAAe,GAAf,CADL;;QAChB20B,KADgB;;QACT78B,KADS,qCACD,EADC;;YAGbsgC,cAAcE,mBAAmB3D,KAAnB,CAAd,GAA0CA,KAAlD;YACQyD,cAAcE,mBAAmBxgC,KAAnB,CAAd,GAA0CA,KAAlD;;QAEI,CAAC,SAASmC,IAAT,CAAc06B,KAAd,CAAL,EAA2B;;;;QAIvB4D,kBAAJ;QACIC,cAAc1D,OAAOL,KAAzB;;QAEItmB,GAAJ,CAAQwmB,KAAR,EACG3yB,KADH,CACS,sBADT,EAEGkK,OAFH,CAEW,UAACjU,IAAD,EAAU;UACbA,KAAKmL,OAAL,CAAa,GAAb,CAAJ,EAAuB;oBACTnL,IAAZ;;;;;aAKKA,KAAKkQ,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAP;;oBAEcqwB,YAAYD,SAAZ,IAAyBC,YAAYD,SAAZ,MAA2BtgC,OAAO,EAAP,GAAY,EAAvC,CAAvC;kBACYA,QAAQugC,YAAYh/B,MAAhC;KAZJ;;gBAeY++B,SAAZ,IAAyBzgC,KAAzB;GA9BJ;;SAiCOg9B,MAAP;CA/CF;;ACVA;;;;;;;AAOA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AAEA,IAAM2D,SAAS,IAAIjtB,GAAJ,CAAQ,EAAR,CAAf;AACA,IAAMktB,gBAAgB,IAAIltB,GAAJ,CAAQ,EAAR,CAAtB;AACA,IAAMmtB,cAAc,EAApB;gBAOIrhC;IALFshC,oBAAAA;IACA9C,qBAAAA;IAEQ+C,uBADR/C,SACEroB;;AAGJ,IAAIqrB,oBAAJ;AACA,IAAIC,eAAJ;AACA,IAAIC,gBAAJ;AACA,IAAIxW,mBAAJ;AACA,IAAIyW,kBAAJ;AACA,IAAIC,sBAAJ;AACA,IAAIC,8BAA8B,KAAlC;AACA,IAAIC,sBAAJ;AACA,IAAIC,qBAAJ;AACA,IAAIC,qBAAJ;AACA,IAAIC,qBAAJ;AACA,IAAIC,2BAAJ;;AAEA,IAAMC,eAAe34B,SAAS,MAAT,EAAiB,YAAM;QACpC,IAAIlD,KAAJ,CAAU,oFAAV,CAAN;CADmB,EAGlBiD,IAHkB,CAGb3F,QAHa,EAGH,UAACw+B,IAAD;SAAW;UACnBA,KAAKv8B,MAAL,CAAY/D,OAAZ,CAAoB,OAApB,EAA6B,GAA7B,CADmB;SAEpBsgC,IAFoB;YAGjB;GAHM;CAHG,EAQlB74B,IARkB,CAQbpG,KARa,EAQN;SAAO;UACZ,GADY;SAEb,GAFa;YAGV;GAHG;CARM,EAalBoG,IAbkB,CAab1F,QAba,EAaH,UAACu+B,IAAD,EAAU;MACpBA,KAAKt2B,OAAL,CAAa,GAAb,CAAJ,EAAuB;UACf,IAAIxF,KAAJ,CAAU,sEAAV,CAAN;;;MAGIR,QAAQs8B,KAAKt2B,OAAL,CAAa,GAAb,CAAd;MACM0xB,SAAS,IAAIpzB,KAAJ,CAAU,EAAV,CAAf;MACIi4B,SAAS,EAAb;MACMC,UAAU,IAAIzrB,GAAJ,CAAQurB,IAAR,EACbvxB,KADa,CACP,CADO,EACJ/K,UAAU,CAAC,CAAX,GAAes8B,KAAKlgC,MAApB,GAA6B4D,KADzB,EAEbhE,OAFa,CAEL,UAFK,EAGb4G,KAHa,CAGP,IAHO,EAIbwQ,GAJa,CAIT,UAACqpB,IAAD,EAAO99B,CAAP,EAAUW,QAAV,EAAoB;QACnB,CAACm9B,IAAD,IAASn9B,SAAMlD,MAAN,GAAe,CAA5B,EAA+B;YACvB,IAAIoE,KAAJ,CAAU,oFAAV,CAAN;;;QAGIR,QAAQy8B,KAAKz2B,OAAL,CAAa,GAAb,CAAd;;QAEIhG,QAAQ,CAAZ,EAAe;YACP,IAAIQ,KAAJ,CAAU,qGAAV,CAAN;;;QAGER,UAAU,CAAC,CAAf,EAAkB;aACT;aACAy8B,IADA;eAEEA;OAFT;;;4BASEC,iBACFD,KAAK1xB,KAAL,CAAW,CAAX,CADE,EAEF,oGAFE,EAGF,qHAHE,CArBmB;QAmBrBlQ,IAnBqB,qBAmBrBA,IAnBqB;kDAoBrB6W,MApBqB;QAoBrBA,MApBqB,yCAoBZ,OApBY;;WA2BhBnN,CAAP,CAAS1J,IAAT,IAAiB68B,OAAO5yB,KAAxB;;WAEO;YACC,OADD;iBAEKjK,IAFL;aAGE6W;KAHT;GAjCY,EAuCbrP,IAvCa,CAuCR,gBAA0B;QAAvBoR,IAAuB,QAAvBA,IAAuB;QAAjBgkB,GAAiB,QAAjBA,GAAiB;QAAZ/8B,KAAY,QAAZA,KAAY;;QAC1B8hC,gBAAJ;;QAEI/oB,SAAS,OAAb,EAAsB;sBACL/Y,MAAMqF,MAAN,CAAa/D,OAAb,CAAqB,OAArB,EAA8B,GAA9B,CAAf;KADF,MAEO;gBACK,IAAI+U,GAAJ,CAAQrW,KAAR,EAAes6B,YAAf,GAA8BzwB,CAAxC;;;oBAGakzB,GAAf;;iBAEY+E,OAAZ;GAlDY,CAAhB;;SAqDO;UACCA,OADD;SAEAD,MAFA;YAGG7E,OAAOnzB;GAHjB;CA1EiB,CAArB;;AAiFA,IAAMo4B,SAAS;oBAAA;QAAA;kBAAA;kBAAA;oBAAA;8BAAA;;CAAf;;IAUMC,QACJ,eAAYh7B,OAAZ,EAAqB;;;YACTA,WAAW,EAArB;;cAWIA,WAAW,EAZI;MAIjB/G,IAJiB,SAIjBA,IAJiB;yBAKjByhC,IALiB;MAKjBA,IALiB,8BAKV,GALU;6BAMjBO,QANiB;MAMjBA,QANiB,kCAMN,KANM;MAOjBtpB,MAPiB,SAOjBA,MAPiB;gCAQjBynB,WARiB;MAQjBA,WARiB,qCAQH,IARG;gCASjBlD,WATiB;MASjBA,WATiB,qCASH,IATG;iCAUjBgF,YAViB;MAUjBA,YAViB,sCAUF,IAVE;iCAWjBjF,YAXiB;MAWjBA,YAXiB,sCAWF,IAXE;;sBAiBfwE,aAAaC,IAAb,CAjBe;MAcZS,WAdY,iBAcjBtF,GAdiB;MAeXuF,YAfW,iBAejBV,IAfiB;MAgBjB5E,MAhBiB,iBAgBjBA,MAhBiB;;MAkBbL,QAAQ,EAAd;;MAEI/yB,KAAJ,CAAU,IAAV,EAAgB3E,MAAhB,CAAuB;cAAA;gBAET4T,MAFS;cAGX,CAAC,CAACspB,QAHS;cAIX,IAAIzuB,GAAJ,CAAQ,EAAR,CAJW;kBAKP,CAAC,CAAC0uB,YALK;iBAMR,CAAC,CAAC9B,WANM;kBAOP,CAAC,CAACnD,YAPK;iBAQR,CAAC,CAACC,WARM;kBAAA;gBAAA;8BAAA;;GAAvB;;MAeM93B,QAAQjC,SAASu+B,IAAT,IACVA,KAAKt2B,OAAL,CAAa,GAAb,CADU,GAEV,CAAC,CAFL;;MAIIhG,UAAU,CAAC,CAAf,EAAkB;QACZ+Q,GAAJ,CAAQurB,IAAR,EACGtgC,OADH,CACW,IADX,EAEG+O,KAFH,CAES/K,QAAQ,CAFjB,EAGG4C,KAHH,CAGS,GAHT,EAIGkM,OAJH,CAIW,UAACyoB,KAAD,EAAW;+BAIdmF,iBACFnF,KADE,EAEF,sGAFE,EAGF,uHAHE,CAJc;UAEhB18B,IAFgB,sBAEhBA,IAFgB;qDAGhB6W,MAHgB;UAGhBA,MAHgB,yCAGP,SAHO;;YAUZ7W,IAAN,IAAc,IAAI8J,MAAJ,OAAgB+M,OAAO3R,MAAP,CAAc/D,OAAd,CAAsB,OAAtB,EAA+B,GAA/B,CAAhB,OAAd;KAdJ;;;MAkBEnB,SAASohC,YAAT,KACA,IAAI33B,KAAJ,CAAUozB,MAAV,EAAkB5yB,KAAlB,IACG,IAAIR,KAAJ,CAAU+yB,KAAV,EAAiBvyB,KAFpB,CAAJ,EAGK;UACG,IAAItE,KAAJ,CAAU,iEAAV,CAAN;;;;AAKN,IAAMy8B,YAAY,IAAIL,KAAJ,EAAlB;;AAEA,SAASM,UAAT,GAAsB;MAChBxB,WAAJ,EAAiB;;;;gBAIH,IAAd;kBACgB,CAACL,OAAOlnB,IAAP,CAAY;QAAGtZ,IAAH,SAAGA,IAAH;WAAcA,SAASihC,aAAvB;GAAZ,KAAqD,EAAtD,EAA0DphC,KAA1E;iBACe,CAAC2gC,OAAOlnB,IAAP,CAAY;QAAGtZ,IAAH,SAAGA,IAAH;WAAcA,SAASohC,YAAvB;GAAZ,KAAoD,EAArD,EAAyDvhC,KAAxE;;MAEIohC,iBAAiB,CAACE,aAAtB,EAAqC;UAC7B,IAAIx7B,KAAJ,6CAAqDs7B,aAArD,yBAAN;;;SAIChtB,OADH,CACW,UAACquB,KAAD,EAAW;QAEhBC,UAFgB,GAIdD,KAJc,CAEhBC,UAFgB;QAGhBviC,IAHgB,GAIdsiC,KAJc,CAGhBtiC,IAHgB;;QAKZwiC,aAAaD,cAAcvB,SAAjC;;gBAC0BR,OAAOlnB,IAAP,CAAY;UAAGtZ,IAAH,SAAGA,IAAH;aAAcA,SAASwiC,UAAvB;KAAZ,KAAkD,EAN1D;QAMH9pB,MANG,SAMV7Y,KANU;;QAQd,CAAC6Y,MAAL,EAAa;YACL,IAAI/S,KAAJ,6BAAqC68B,UAArC,iCAA6ExiC,IAA7E,yBAAN;;;QAGE,CAAC0Y,OAAOspB,QAAR,IAAoBhiC,SAASghC,SAAjC,EAA4C;YACpC,IAAIr7B,KAAJ,0CAAkD3F,IAAlD,yBAAN;;;QAGEA,SAASghC,SAAb,EAAwB;YAChBuB,UAAN,GAAmBC,UAAnB;;;UAGI9pB,MAAN,GAAe1Y,SAASghC,SAAT,GACXoB,SADW,GAEX1pB,MAFJ;GArBJ,EAyBGzE,OAzBH,CAyBW,UAACquB,KAAD,EAAW;QAEhBtiC,IAFgB,GAYdsiC,KAZc,CAEhBtiC,IAFgB;wBAYdsiC,KAZc,CAGhB5pB,MAHgB;QAIN+pB,YAJM,iBAId5F,MAJc;QAKP6F,WALO,iBAKdlG,KALc;QAMdiF,IANc,iBAMdA,IANc;QAQhB5E,MARgB,GAYdyF,KAZc,CAQhBzF,MARgB;QAShBL,KATgB,GAYd8F,KAZc,CAShB9F,KATgB;QAUhB0F,WAVgB,GAYdI,KAZc,CAUhBJ,WAVgB;QAWhBC,YAXgB,GAYdG,KAZc,CAWhBH,YAXgB;;QAadr/B,QAAQw/B,KAAZ;QACIr4B,QAAQ,CAAZ;QACI03B,UAAUQ,YAAd;QACIT,SAAS,EAAb;;QAEIz+B,SAASw+B,IAAT,CAAJ,EAAoB;YACZ,IAAI97B,KAAJ,CAAU,sDAAV,CAAN;;;WAGK7C,QAAQA,MAAM4V,MAArB,EAA6B;eAClB,IAAIjP,KAAJ,CAAU3G,MAAM+5B,MAAhB,EAAwB5yB,KAAjC;gBACUnH,MAAMq/B,YAAN,GAAqBR,OAA/B;eACS7+B,MAAMo/B,WAAN,GAAoBR,MAA7B;;YAEMjpB,QAAN,CAAe9R,IAAf,CAAoB27B,KAApB;;;cAGQ,IAAIx4B,MAAJ,QAAgB63B,QAAQxgC,OAAR,CAAgB,MAAhB,EAAwB,GAAxB,EAA6BA,OAA7B,CAAqC,KAArC,EAA4C,EAA5C,KAAmD,GAAnE,QAAV;aACS8B,SAASi/B,WAAT,IACLP,OADK,GAEL,CAACD,SAASQ,WAAV,EAAuB/gC,OAAvB,CAA+B,MAA/B,EAAuC,GAAvC,EAA4CA,OAA5C,CAAoD,KAApD,EAA2D,EAA3D,KAAkE,GAFtE;;QAIIsI,KAAJ,CAAU+yB,KAAV,EAAiB15B,KAAjB,CAAuB4/B,WAAvB;QACIj5B,KAAJ,CAAUozB,MAAV,EACG/5B,KADH,CACS2/B,YADT,EAEGxuB,OAFH,CAEW,UAACpU,KAAD,EAAQ+E,GAAR,EAAai4B,MAAb,EAAwB;aACxBj4B,GAAP,KAAeqF,KAAf;KAHJ;;QAMIjK,SAASohC,YAAT,KACA,IAAI33B,KAAJ,CAAUozB,MAAV,EAAkB5yB,KAAlB,IACG,IAAIR,KAAJ,CAAU+yB,KAAV,EAAiBvyB,KAFpB,CAAJ,EAGK;YACG,IAAItE,KAAJ,CAAU,kEAAV,CAAN;;;UAGIi3B,GAAN,GAAY8E,MAAZ;UACMiB,YAAN,GAAqBhB,OAArB;GA3EJ;;;;MAgFIvf,EAAJ,CAAO;YAAA,sBACM;UACLyb,SAASroB,IAAT,KAAkBorB,UAAtB,EAAkC;iBACvB,IAAT;;;UAGEE,MAAJ,EAAY;;;KANT;SAAA,iBAUC5rB,CAVD,EAUI;UACD0tB,cAAc,IAAInnB,IAAJ,CAASvG,EAAEnQ,MAAX,EAAmBmX,OAAnB,CAA2B,GAA3B,CAApB;;UAEI0mB,YAAYrhC,MAAZ,IAAsBqhC,YAAYhjC,IAAZ,CAAiB,QAAjB,MAA+B,QAArD,IAAiE,CAACgjC,YAAYhf,OAAZ,CAAoB,YAApB,CAAtE,EAAyG;YACjGjd,OAAO,CAACi8B,YAAYhf,OAAZ,CAAoB,SAApB,CAAd;;UAEEif,cAAF;;gBAEQD,YAAYhjC,IAAZ,CAAiB,MAAjB,KAA4B,EAApC,EAAwC+G,IAAxC;;;GAlBN;;;AAwBF,SAASm8B,SAAT,CAAmB/7B,OAAnB,EAA4B;SACnB,UAACggB,KAAD,EAAW;;;cACNjiB,OAAO,EAAP,EAAWiC,OAAX,EAAoBggB,MAAMgc,aAA1B,CAAV;;gBAUIh8B,WAAW,EAXC;QAId/G,IAJc,SAIdA,IAJc;QAKdyhC,IALc,SAKdA,IALc;QAMdO,QANc,SAMdA,QANc;QAOdgB,IAPc,SAOdA,IAPc;QAQdC,UARc,SAQdA,UARc;8BASd9hC,OATc;QASdA,OATc,iCASJ,IATI;QAUL+hC,SAVK,SAUdn6B,OAVc;;QAaZ83B,WAAJ,EAAiB;cACPzO,IAAR,CAAa,+CAAb;;aAEO9yB,MAAP;;;QAGEyhC,WAAWiC,IAAf,EAAqB;YACb,IAAIr9B,KAAJ,wCAA+Cq7B,SAA/C,eAAoEhhC,IAApE,wBAAN;;;QAGEuqB,cAAc2Y,SAAlB,EAA6B;YACrB,IAAIv9B,KAAJ,2CAAkDy7B,YAAlD,eAA0EphC,IAA1E,wBAAN;;;QAGE,CAACA,IAAL,EAAW;YACH,IAAI2F,KAAJ,CAAU,oEAAV,CAAN;;;QAGE66B,OAAO1jB,IAAP,CAAY;UAASqmB,IAAT,SAAGnjC,IAAH;aAAoBmjC,SAASnjC,IAA7B;KAAZ,CAAJ,EAAoD;YAC5C,IAAI2F,KAAJ,CAAU,wDAAV,CAAN;;;QAGEq9B,IAAJ,EAAU;gBACE,IAAV;kBACYhjC,IAAZ;cACQ0Y,MAAR,GAAiB,IAAjB;;UAEIuqB,UAAJ,EAAgB;wBACEA,UAAhB;sCAC8B,CAAC9hC,OAA/B;;;;QAIA+hC,SAAJ,EAAe;mBACA,IAAb;qBACeljC,IAAf;;UAEIgiC,QAAJ,EAAc;cACN,IAAIr8B,KAAJ,CAAU,kDAAV,CAAN;;;UAGE1C,SAASw+B,IAAT,CAAJ,EAAoB;cACZ,IAAI97B,KAAJ,CAAU,yDAAV,CAAN;;;;QAIE28B,QAAQ,IAAIP,KAAJ,CAAUh7B,OAAV,CAAd;;WAEOJ,IAAP,CAAY27B,KAAZ;;QAEIc,oBAAJ;QACIC,oBAAJ;;;;;sBAcctb,IAAZ,EAAkB;;;mHACVA,IADU;;YAGZib,IAAJ,EAAU;;;gBAGHtN,OAAL,CAAaoM,MAAb,GAAsBA,MAAtB;;;cAGGwB,kBAAL,GAA0BhB,KAA1B;cACKiB,kBAAL,GAA0B9C,cAAc+C,QAAd,CAAuBlB,KAAvB,CAA1B;cACKmB,kBAAL,GAA0B,MAAKF,kBAA/B;cACKz8B,IAAL,CAAUw7B,KAAV,GAAkBf,kBAAlB;;sBAEc,KAAd;sBACcmC,UAAU1jC,IAAV,EAAgB,UAAC2jC,MAAD,EAAY;cAClCC,iBAAiBD,WAAW,OAAlC;;gBAEKJ,kBAAL,GAA0BK,cAA1B;;cAEIA,cAAJ,EAAoB;kBACbH,kBAAL,GAA0B,IAA1B;kBACK38B,IAAL,CAAUw7B,KAAV,GAAkBf,kBAAlB;;;cAGEoC,WAAW,MAAf,EAAuB;;WAAvB,MAEO,IAAIA,WAAW,OAAf,EAAwB;;;SAZnB,CAAd;;YAiBI,MAAKJ,kBAAT,EAA6B;;;;;;;;;;uCAKhB;;wBAEC,IAAd;0BACgB,IAAhB;;;;;MApDiBxc,KAArB,UAESL,QAFT,GAEoB,qCACd,MADc,sCAEkB1mB,QAAQgiC,WAAW,iBAAX,GAA+B,EAAvC,CAFlB,WAGd,wDAHc,GAId,iCAJc,GAKd,GALc,GAMdjb,MAAML,QANQ,GAOd,QAPc,GAQd,SAVN;;aAyDSmd,cAAT,CAAwBvB,KAAxB,EAA+B;UACzBe,WAAJ,EAAiB;;;;UAIXpa,QAAQ;YACR;oBACQ,IAAI1V,GAAJ,CAAQ,CAAC+uB,KAAD,CAAR;;OAFd;UAKIwB,iBAAJ;;YAEMv8B,EAAN,CAASkR,QAAT,CAAkBxE,OAAlB,CAA0B,SAAS8vB,UAAT,CAAoB9a,KAApB,EAA2B;YAC/CA,MAAMqa,kBAAV,EAA8B;cACxBQ,QAAJ,EAAc;;;;qBAIH,IAAX;;;wBAOE7a,MAAM1hB,EAbyC;YAUjDvH,IAViD,aAUjDA,IAViD;YAWjDyY,QAXiD,aAWjDA,QAXiD;YAYjD6Q,MAZiD,aAYjDA,MAZiD;;;YAe/C7Q,QAAJ,EAAc;mBACHxE,OAAT,CAAiB8vB,UAAjB;;;YAGEza,MAAJ,EAAY;iBACHrV,OAAP,CAAe8vB,UAAf;;;YAGE9a,MAAM+a,eAAV,EAA2B;cACrB;kBACIA,eAAN;WADF,CAEE,OAAOt+B,GAAP,EAAY;oBACJwB,KAAR,wBAAoClH,IAApC,mBAAyD0F,GAAzD;;;OA3BN;;oBAgCc,IAAd;;;aAGOu+B,eAAT,CAAyB3B,KAAzB,EAAgC;UAC1B,CAACe,WAAL,EAAkB;;;;UAIZpa,QAAQ;YACR;oBACQ,IAAI1V,GAAJ,CAAQ,CAAC+uB,KAAD,CAAR;;OAFd;UAKIwB,iBAAJ;;YAEMv8B,EAAN,CAASkR,QAAT,CAAkBxE,OAAlB,CAA0B,SAASiwB,WAAT,CAAqBjb,KAArB,EAA4B;YAChDA,MAAMqa,kBAAV,EAA8B;cACxBQ,QAAJ,EAAc;;;;qBAIH,IAAX;;;yBAOE7a,MAAM1hB,EAb0C;YAUlDvH,IAVkD,cAUlDA,IAVkD;YAWlDyY,QAXkD,cAWlDA,QAXkD;YAYlD6Q,MAZkD,cAYlDA,MAZkD;;;YAehD7Q,QAAJ,EAAc;mBACHxE,OAAT,CAAiBiwB,WAAjB;;;YAGE5a,MAAJ,EAAY;iBACHrV,OAAP,CAAeiwB,WAAf;;;YAGEjb,MAAMkb,gBAAV,EAA4B;cACtB;kBACIA,gBAAN;WADF,CAEE,OAAOz+B,GAAP,EAAY;oBACJwB,KAAR,wBAAoClH,IAApC,oBAA0D0F,GAA1D;;;OA3BN;;oBAgCc,KAAd;;GAtNJ;;;AA2NF,SAASg+B,SAAT,CAAmB1jC,IAAnB,EAAyBwE,QAAzB,EAAmC;cACrBxE,IAAZ,IAAoBwE,QAApB;;SAEO,YAAM;WACJk8B,YAAY1gC,IAAZ,CAAP;GADF;;;AAKF,SAASokC,OAAT,CAAiBxH,GAAjB,EAAsBj2B,IAAtB,EAA4B;gBACZi2B,GAAd,EAAmBj2B,IAAnB;;;;AAIF,SAAS09B,WAAT,GAAuB;MACf/B,QAAQgC,gBAAd;;MAEIhC,KAAJ,EAAW;iBAILA,KAJK;gBAAA,UAEPA,KAFO;sBAAA;;WAKFf,kBAAP,EAA2B;YACnBD,aAAathC,IADM;YAEnB69B,SAAS0G,IAFU;gBAGf1G,SAAS2G,QAHM;YAInB3G,SAASroB,IAJU;cAKjBqoB,SAASC,MALQ;gBAMfD,SAAS4G,QANM;YAOnB5G,SAAS6G,IAPU;gBAQf7G,SAAS8G,QARM;cASjB9G,SAAS9mB;KATnB;GALF,MAgBO;QACDkqB,aAAJ,EAAmB;2BAKbE,aALa;UAEfvE,GAFe,kBAEfA,GAFe;UAGfI,YAHe,kBAGfA,YAHe;UAIfC,WAJe,kBAIfA,WAJe;;;aAOVmH,QAAQpE,aAAa,EAAb,EAAiBpD,GAAjB,EAAsB,EAAtB,EAA0B,EAA1B,EAA8B,EAA9B,EAAkC;gBACvCI,YADuC;eAExCC;OAFM,CAAR,EAGHiE,2BAHG,CAAP;;;mBAMa,IAAf;yBACqB,IAArB;;;MAGI0D,gBAAgB,IAAIrxB,GAAJ,CAAQ,EAAR,CAAtB;MACMsxB,eAAe,IAAItxB,GAAJ,CAAQ,EAAR,CAArB;MACImF,eAAJ;;SAEO+nB,cAAcl/B,MAAd,IAAwB,CAACmX,MAAhC,EAAwC;QAChC4pB,UAAQ7B,cAAc3sB,GAAd,EAAd;;QAEIwuB,QAAM7pB,QAAN,CAAe+qB,QAAf,CAAwBlC,YAAxB,CAAJ,EAA2C;oBAC3B36B,IAAd,CAAmB27B,OAAnB;eACSA,OAAT;KAFF,MAGO;oBACS37B,IAAd,CAAmB27B,OAAnB;;;;MAIAhB,YAAJ,EAAkB;QACZwD,gBAAgBxD,YAApB;;WAEOwD,kBAAkBpsB,MAAlB,IAA4BosB,kBAAkB1C,SAArD,EAAgE;mBACjD32B,OAAb,CAAqBq5B,aAArB;sBACgBA,cAAcpsB,MAA9B;;;kBAGY/R,IAAd,wCAAsBk+B,aAAan7B,CAAnC;;;gBAGYuK,OAAd,CAAsB,iBAAc;QAAXjU,IAAW,SAAXA,IAAW;;QAC9B0gC,YAAY1gC,IAAZ,CAAJ,EAAuB;kBACTA,IAAZ,EAAkB,OAAlB;;GAFJ;gBAKciU,OAAd,CAAsB,UAACquB,KAAD,EAAW;QACvBtiC,IADuB,GACdsiC,KADc,CACvBtiC,IADuB;;;QAG3B0gC,YAAY1gC,IAAZ,CAAJ,EAAuB;kBACTA,IAAZ,EACE6kC,aAAarB,QAAb,CAAsBlB,KAAtB,IACI,MADJ,GAEI,QAHN;;GAJJ;;;AAaF,SAASgC,cAAT,GAA0B;MAClBG,WAAW5G,SAAS4G,QAAT,IAAqB,GAAtC;MACM1tB,SAAS8mB,SAAS9mB,MAAT,IAAmB,EAAlC;MACIguB,kBAAJ;;SAEOjoB,IAAP,CAAY,UAACwlB,KAAD,EAAW;QACjBA,MAAMN,QAAV,EAAoB;;;;QAKbgD,QANc,GAYjB1C,KAZiB,CAMnB1F,GANmB;QAOnB+F,YAPmB,GAYjBL,KAZiB,CAOnBK,YAPmB;QAQnB9F,MARmB,GAYjByF,KAZiB,CAQnBzF,MARmB;QASZoI,aATY,GAYjB3C,KAZiB,CASnB9F,KATmB;QAUnByF,YAVmB,GAYjBK,KAZiB,CAUnBL,YAVmB;QAWnB9B,WAXmB,GAYjBmC,KAZiB,CAWnBnC,WAXmB;;QAaf+E,WAAWC,WAAWhF,WAAX,CAAjB;QACM3D,QAAQ,IAAI/yB,KAAJ,CAAUy7B,SAAS1I,KAAnB,CAAd;QACM4I,iBAAiB,EAAvB;QACMr7B,QAAQ,CACZ,CAAC06B,SAAStjC,OAAT,CAAiB,KAAjB,EAAwB,EAAxB,KAA+B,GAAhC,KACC8B,SAAS+hC,QAAT,IAAqBjuB,MAArB,GAA8B,EAD/B,CADY,EAGZhN,KAHY,CAGN44B,YAHM,CAAd;;QAKI,CAAC54B,KAAL,EAAY;;;;;SAKP,IAAM2yB,KAAX,IAAoBuI,aAApB,EAAmC;UAC7B,CAACzI,MAAM1K,MAAN,CAAa4K,KAAb,CAAD,IAAwB,CAACuI,cAAcvI,KAAd,EAAqB16B,IAArB,CAA0Bw6B,MAAM9yB,CAAN,CAAQgzB,KAAR,CAA1B,CAA7B,EAAwE;;;;;UAKpE1oB,KAAN;;SAEK,IAAM0oB,MAAX,IAAoBG,MAApB,EAA4B;qBACXH,MAAf,IAAwB2I,OAAOt7B,MAAM8yB,OAAOH,MAAP,CAAN,CAAP,EAA6BuF,YAA7B,CAAxB;;;gBAGU;kBAAA;cAEFmD,cAFE;aAGH5I,MAAM9yB,CAHH;YAIJw7B,SAASpI;KAJjB;;WAOO,IAAP;GA7CF;;MAgDIiI,SAAJ,EAAe;WACNA,SAAP;;;MAGE,CAAC3D,YAAL,EAAmB;;;;;WAKVC,YADT;YAEU;KACL8D,WAAW9D,aAAalB,WAAxB,CAHL;;;AAOF,SAASkF,MAAT,CAAgBx9B,MAAhB,EAAwBo6B,YAAxB,EAAsC;SAC7BA,eACH5B,mBAAmBx4B,MAAnB,CADG,GAEHA,MAFJ;;;AAKF,SAASy9B,aAAT,CAAuB1I,GAAvB,EAA4Bj2B,IAA5B,EAAkC;MAC5B;YACMA,OAAO,WAAP,GAAqB,cAA7B,EAA6C,IAA7C,EAAmD,IAAnD,EAAyDi2B,GAAzD;aACS,IAAT;GAFF,CAGE,OAAOl3B,GAAP,EAAY;aACH8P,IAAT,GAAgBonB,GAAhB;;;;AAIJ,SAASiF,gBAAT,CAA0BnF,KAA1B,EAAiC6I,aAAjC,EAAgDC,cAAhD,EAAgE;MACxDC,YAAY/I,MAAM3yB,KAAN,CAAY,YAAZ,CAAlB;;MAEI,CAAC07B,SAAL,EAAgB;UACR,IAAI9/B,KAAJ,CAAU4/B,aAAV,CAAN;;;MAGIvlC,OAAOylC,UAAU,CAAV,CAAb;MACM5lC,QAAQ68B,MAAMxsB,KAAN,CAAYlQ,KAAKuB,MAAjB,CAAd;MACIsV,eAAJ;;MAEIhX,UAAUA,MAAMsL,OAAN,CAAc,GAAd,KAAsBtL,MAAMsL,OAAN,CAAc,GAAd,MAAuBtL,MAAM0B,MAAN,GAAe,CAAtE,CAAJ,EAA8E;UACtE,IAAIoE,KAAJ,CAAU6/B,cAAV,CAAN;;;MAGE3lC,KAAJ,EAAW;aACA,IAAIiK,MAAJ,CAAWjK,MAAMqQ,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAX,CAAT;;;SAGK;cAAA;;GAAP;;;AAMF,SAASw1B,QAAT,CAAkB1lC,IAAlB,EAAsC;MAAd+G,OAAc,uEAAJ,EAAI;;eACXy5B,OAAOlnB,IAAP,CAAY;QAAShW,CAAT,UAAGtD,IAAH;WAAiBsD,MAAMtD,IAAvB;GAAZ,KAA4C,EADjC;MACrBsiC,KADqB,UAC5BziC,KAD4B;;MAGhC,CAACyiC,KAAL,EAAY;UACJ,IAAI38B,KAAJ,qCAA6C3F,IAA7C,6BAAN;;;MAIA48B,GARkC,GAWhC0F,KAXgC,CAQlC1F,GARkC;MASlCI,YATkC,GAWhCsF,KAXgC,CASlCtF,YATkC;MAUlCC,WAVkC,GAWhCqF,KAXgC,CAUlCrF,WAVkC;;;MAahCh6B,SAAS25B,GAAT,CAAJ,EAAmB;UACX,IAAIj3B,KAAJ,CAAU,kEAAV,CAAN;;;wBAOEoB,OArBgC,CAkBlC81B,MAlBkC;MAkBlCA,MAlBkC,mCAkBzB,EAlByB;uBAqBhC91B,OArBgC,CAmBlCy1B,KAnBkC;MAmBlCA,KAnBkC,kCAmB1B,EAnB0B;sBAqBhCz1B,OArBgC,CAoBlC+1B,IApBkC;MAoBlCA,IApBkC,iCAoB3B,EApB2B;;;SAuB7BkD,aAAa,EAAb,EAAiBpD,GAAjB,EAAsBC,MAAtB,EAA8BL,KAA9B,EAAqCM,IAArC,EAA2C;YACxCE,YADwC;WAEzCC;GAFF,CAAP;;;AAMF,SAAS0I,EAAT,CAAY3lC,IAAZ,EAAkB+G,OAAlB,EAA2B;UACjB2+B,SAAS1lC,IAAT,EAAe+G,OAAf,CAAR,EAAiC,IAAjC;;;AAGF,SAAS6+B,OAAT,CAAiBhJ,GAAjB,EAAsB;UACZA,GAAR,EAAa,IAAb;;;AAGF,SAASiJ,OAAT,CAAiBjJ,GAAjB,EAAsB;gBACNA,GAAd,EAAmB,IAAnB;;;AAGF,SAASkJ,QAAT,CAAkB9lC,IAAlB,EAAwB+G,OAAxB,EAAiC;UACvB2+B,SAAS1lC,IAAT,EAAe+G,OAAf,CAAR;;;AAGF,SAASg/B,aAAT,CAAuBnJ,GAAvB,EAA4B;UAClBA,GAAR;;;AAGF,SAASoJ,UAAT,CAAoBpJ,GAApB,EAAyB;gBACTA,GAAd;CAGF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICtxBQ14B,OAAM+hC;;;AAEdnhC,OAAOZ,IAAP,EAAU+hC,OAAV;;AAEA,OAAO/hC,KAAEA,CAAT;;AAEA7E,SAAO6E,CAAP,GAAWA,IAAX;;","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}