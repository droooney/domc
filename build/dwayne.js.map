{"version":3,"file":"dwayne.js","sources":["../src/global.js","../src/utils/array.js","../src/utils/object.js","../src/utils/defineProperty.js","../src/utils/toStringTag.js","../src/utils/is.js","../src/utils/escapeRegex.js","../src/utils/objectStatics.js","../src/utils/toCase.js","../src/Elem.js","../src/blocks/d-block.js","../src/blocks/d-each.js","../src/blocks/d-elements.js","../src/blocks/d-if.js","../src/blocks/d-item.js","../src/blocks/d-switch.js","../src/mixins/d-attr.js","../src/mixins/d-bind.js","../src/mixins/d-class.js","../src/mixins/d-elem.js","../src/mixins/d-hide.js","../src/mixins/d-node.js","../src/mixins/d-on.js","../src/mixins/d-show.js","../src/mixins/d-style.js","../src/mixins/d-value.js","../src/Block.js"],"sourcesContent":["/* eslint no-nested-ternary: 0 */\n/* eslint no-negated-condition: 0 */\nexport default typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n","export function collectFromArray(array, callback, initialValue = {}) {\n  iterateArray(array, (value, index) => {\n    callback(initialValue, value, index, array);\n  });\n\n  return initialValue;\n}\n\nexport function findInArray(array, callback) {\n  for (let i = 0, length = array.length; i < length; i++) {\n    const value = array[i];\n\n    if (callback(value, i, array)) {\n      return {\n        key: i,\n        value\n      };\n    }\n  }\n}\n\nexport function iterateArray(array, callback) {\n  for (let i = 0, length = array.length; i < length; i++) {\n    callback(array[i], i, array);\n  }\n}\n\nexport function removeArrayElem(array, elem) {\n  const index = array.indexOf(elem);\n\n  if (index !== -1) {\n    array.splice(index, 1);\n  }\n}\n\nexport function toObjectKeys(array) {\n  return collectFromArray(array, addKey);\n}\n\nfunction addKey(vars, variable) {\n  vars[variable] = true;\n}\n","import { iterateArray } from './array';\n\nconst {\n  hasOwnProperty: has\n} = {};\n\n/**\n * @const\n * @function assign\n * @param {Object} target - Object to assign rest of arguments to.\n * @param {...Object} objects - Objects that are assigned to the target.\n * @returns {Object} Target.\n */\nexport function assign(target, ...objects) {\n  iterateArray(arguments, (source, index) => {\n    if (index) {\n      iterateObject(source, (value, key) => {\n        target[key] = value;\n      });\n    }\n  });\n\n  return target;\n}\n\nexport function collectFromObject(object, callback, initialValue = {}) {\n  iterateObject(object, (value, key) => {\n    callback(initialValue, value, key, object);\n  });\n\n  return initialValue;\n}\n\nexport function hasOwnProperty(object, key) {\n  return object::has(key);\n}\n\nexport function iterateObject(object, callback) {\n  for (const key in object) {\n    if (hasOwnProperty(object, key)) {\n      callback(object[key], key, object);\n    }\n  }\n}\n\nexport function mapObject(object, callback) {\n  const newObject = {};\n\n  iterateObject(object, (value, key) => {\n    newObject[key] = callback(value, key, object);\n  });\n\n  return newObject;\n}\n","import { iterateObject } from './object';\n\n/**\n * @function defineProperties\n * @param {Object} target - Target to define properties for.\n * @param {Object} properties - Object with properties needed to be assign to the target.\n * @returns {void}\n * @description Function for defining properties of an object.\n */\nexport const { defineProperties } = Object;\n\nexport function definePrototypeProperties(target, properties) {\n  iterateObject(properties, (value, name) => {\n    Object.defineProperty(target, name, {\n      value,\n      writable: true,\n      enumerable: false,\n      configurable: true\n    });\n  });\n}\n\n/**\n * @function defineFrozenProperties\n * @param {Object} target - Target to define properties for.\n * @param {Object} properties - Object with properties needed to be assign to the target.\n * @returns {void}\n * @description Function for defining frozen properties of an object.\n */\nexport function defineFrozenProperties(target, properties) {\n  iterateObject(properties, (value, name) => {\n    Object.defineProperty(target, name, {\n      value,\n      writable: false,\n      enumerable: false,\n      configurable: false\n    });\n  });\n}\n","import { definePrototypeProperties } from './defineProperty';\n\nconst { Symbol } = global;\nconst { toString } = {};\n\n/**\n * @function toStringTag\n * @param {*} object - Object to get toStringTag of.\n * @returns {String} Cut string.\n * @description Cut \"Type\" string from \"[object Type]\" string that gotten from {}.toString,call(object).\n */\nexport function toStringTag(object) {\n  return object::toString().slice(8, -1);\n}\n\nexport function setToStringTag(object, tag) {\n  if (Symbol && Symbol.toStringTag) {\n    definePrototypeProperties(object.prototype, {\n      [Symbol.toStringTag]: tag\n    });\n  }\n}\n","/**\n * @module helpers/checkTypes\n * @private\n * @mixin\n * @description Exports is<Type> methods.\n */\n\nimport { toStringTag } from './toStringTag';\n\n/**\n * @function isArray\n * @public\n * @param {*} value - Value to check if it is an array.\n * @returns {Boolean} If the argument is an array or not.\n * \n * @example\n * isArray([]);                             // true\n * isArray(0);                              // true\n * isArray(document.querySelectorAll('*')); // false\n */\nexport const { isArray } = Array;\n\n/**\n * @function isFunction\n * @public\n * @param {*} value - Value to check if it is a function.\n * @returns {Boolean} If the argument is a function or not.\n * \n * @example\n * isFunction(() => {});            // true\n * \n * const func = () => {};\n * Object.setPrototypeOf(func, {});\n * isFunction(func);                // true\n */\nexport function isFunction(value) {\n  return toStringTag(value) === 'Function' || typeof value === 'function';\n}\n\n/**\n * @function isNil\n * @public\n * @param {*} value - Value to check if it is null or undefined.\n * @returns {Boolean} If the argument is null or undefined or not.\n *\n * @example\n * isNil(null);      // true\n * isNil(undefined); // true\n * isNil(false);     // false\n */\nexport function isNil(value) {\n  /* eslint eqeqeq: 0 */\n  return value == null;\n}\n\n/**\n * @function isString\n * @public\n * @param {*} value - Value to check if it is a string.\n * @returns {Boolean} If the argument is a string or not.\n *\n * @example\n * isString('0');             // true\n * isString(new String('0')); // true\n */\nexport function isString(value) {\n  return toStringTag(value) === 'String';\n}\n","const regexpSpecialCharacters = [\n  '.',\n  '+', '*', '?',\n  '(', ')',\n  '[', ']',\n  '{', '}',\n  '<', '>',\n  '^', '$',\n  '!',\n  '=',\n  ':',\n  '-',\n  '|',\n  ',',\n  '\\\\'\n];\nconst regexpSpecialsRegexp = new RegExp(\n  regexpSpecialCharacters\n    .map((s) => `\\\\${ s }`)\n    .join('|'),\n  'g'\n);\n\nexport function escapeRegex(string) {\n  return string.replace(regexpSpecialsRegexp, '\\\\$&');\n}\n","export const {\n  create,\n  keys,\n  getPrototypeOf: getProto\n} = Object;\n\nexport const setProto = Object.setPrototypeOf || ((target, proto) => {\n  /* eslint no-proto: 0 */\n  target.__proto__ = proto;\n});\n","const DASHED_SYMBOL_REGEX = /-[a-z]/g;\nconst UPPERCASED_SYMBOL_REGEX = /[A-Z]/g;\n\nexport function toCamelCase(value) {\n  return value.replace(DASHED_SYMBOL_REGEX, capitalize);\n}\n\nexport function toHyphenCase(value) {\n  return value.replace(UPPERCASED_SYMBOL_REGEX, hyphenize);\n}\n\nfunction capitalize(match) {\n  return match[1].toUpperCase();\n}\n\nfunction hyphenize(match) {\n  return `-${ match[0].toLowerCase() }`;\n}\n","import {\n  isArray, isNil, isString,\n  assign, definePrototypeProperties,\n  defineProperties,\n  collectFromArray, collectFromObject,\n  iterateArray, iterateObject,\n  toCamelCase, toHyphenCase, toStringTag,\n  setToStringTag, setProto\n} from './utils';\n\n/**\n * @typedef {String} ElemEventString\n * @public\n * @description A string containing events separated by a comma with zero or more spaces or just spaces.\n */\n\n/**\n * @callback ElemListener\n * @public\n * @param {Event} e - Fired event.\n * @param {Element} elem - Element on which the listener was called.\n * @param {Number} index - Index of the element on which the listener was called.\n */\n\n/**\n * @callback ElemRemoveListeners\n * @public\n * @param {...ElemEventString} events - If at least one argument present only removes event listeners specified\n * by the events in the arguments.\n */\n\nconst {\n  document = {},\n  Symbol\n} = global;\nconst HIDE_CLASS = '__dwayne-hidden__';\nconst EVENT_SEPARATOR_REGEX = /(?:,| ) */;\nconst CSS_STYLES_SEPARATOR_REGEX = /; ?/;\nconst CSS_PROP_VALUE_SEPARATOR_REGEX = /: /;\nconst CSS_IMPORTANT_REGEX = / ?!important$/;\nconst EVENT_REGEX = /Event$/;\nconst ELEMENT_REGEX = /Element$/;\nconst HTML_COLLECTION_REGEX = /^(HTMLCollection|NodeList)$/;\nconst X_LINK_ATTR_REGEX = /^xlink:\\w/;\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst XML_NS = 'http://www.w3.org/2000/xmlns/';\nconst X_LINK_NS = 'http://www.w3.org/1999/xlink';\nconst XHTML_NS = 'http://www.w3.org/1999/xhtml';\nconst emptyCollection = [];\n\n/**\n * @class Elem\n * @extends Array\n * @public\n * @param {Element|Element[]} [elem = []] - An element or an array of elements to wrap.\n * @returns {Elem} Instance of Elem.\n * @description Wrap of an elements set.\n *\n * @example\n * new Elem(document.body);\n * new Elem(document.querySelectorAll('.cls'));\n * new Elem(document.getElementsByClassName('cls'));\n */\nclass Elem extends [].constructor {\n  static addMethods(property, value) {\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    definePrototypeProperties(this.prototype, property);\n\n    return this;\n  }\n\n  constructor(elem = emptyCollection) {\n    super();\n\n    if (!isElementsCollection(elem)) {\n      elem = [elem];\n    }\n\n    setProto(this, Elem.prototype);\n\n    iterateArray(elem, (elem) => {\n      if (!isElementsCollection(elem)) {\n        elem = [elem];\n      }\n\n      iterateArray(elem, (elem) => {\n        if (!this.includes(elem) && isValidNode(elem)) {\n          this.push(elem);\n        }\n      });\n    });\n  }\n\n  /**\n   * @method Elem#add\n   * @public\n   * @param {...(Elem|Element|Element[])} elements - Each argument is a Elem, or Element, or array of Elements.\n   * @returns {Elem} Returns this.\n   * @description Method for adding new elements to the set.\n   *\n   * @example\n   * elem1.find('.cls1')\n   *   .add(elem2.find('.cls2'))\n   *   .hide();\n   */\n  add() {\n    const elems = this.slice();\n\n    iterateArray(arguments, (elem) => {\n      if (!isElementsCollection(elem)) {\n        elem = [elem];\n      }\n\n      iterateArray(elem, (elem) => {\n        if (!elems.includes(elem) && isValidNode(elem)) {\n          elems.push(elem);\n        }\n      });\n    });\n\n    return elems;\n  }\n\n  /**\n   * @method Elem#addClass\n   * @public\n   * @param {...String} classes - Classes to add.\n   * @returns {Elem} Returns this.\n   * @description Method for adding classes to the all the elements in the set.\n   *\n   * @example\n   * elem.addClass('red', 'round');\n   */\n  addClass() {\n    return this.forEach((elem) => {\n      const list = elem.classList;\n\n      iterateArray(arguments, (cls) => list.add(cls));\n    });\n  }\n\n  /**\n   * @method Elem#attr\n   * @public\n   * @param {String|Object.<String, String>} [attr] - Name of the attribute to get or\n   * an object of the format { [attrName]: value, ... } to set attributes.\n   * @param {String} [value] - If the first argument is a string\n   * it should be a value to set for that attribute.\n   * @returns {Object|String|Elem} If no arguments passed, D-Wrap of attributes of the first element in the set\n   * returned, if 1 string argument is passed the value of the attribute of the first element in the set\n   * returned otherwise returns this.\n   * @description Method for getting/setting attributes.\n   *\n   * @example\n   * elem.attr('attr1', 'value1'); // attribute attr1 set to 'value1' and this returned\n   * elem.attr('attr1');           // 'value1'\n   * elem.attr({\n   *   attr1: 'value3',            // attribute attr1 set to 'value3'\n   *   attr2: 'value2'             // attribute attr2 set to 'value2'\n   * });                           // this returned\n   * elem.attr();                  // { attr1: 'value3', attr2: 'value2' }\n   */\n  attr(attr, value) {\n    const elem = this[0];\n\n    if (!arguments.length) {\n      if (!elem) {\n        return {};\n      }\n\n      return collectFromObject(elem.attributes, addAttr);\n    }\n\n    if (arguments.length <= 1 && isString(attr)) {\n      if (!elem) {\n        return null;\n      }\n\n      const ns = getAttrNS(attr, elem);\n\n      return ns\n        ? elem.getAttributeNS(ns, attr)\n        : elem.getAttribute(attr);\n    }\n\n    if (arguments.length >= 2) {\n      attr = { [attr]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(attr, (value, key) => {\n        if (isNil(value) || value === false) {\n          return new Elem(elem).removeAttr(key);\n        }\n\n        value = value === true ? '' : value;\n\n        const ns = getAttrNS(key, elem);\n\n        if (ns) {\n          elem.setAttributeNS(ns, key, value);\n        } else {\n          elem.setAttribute(key, value);\n        }\n      });\n    });\n  }\n\n  /**\n   * @method Elem#children\n   * @public\n   * @returns {Elem} D-Wrap of the children of the first element in the set.\n   * @description Method for getting element's children.\n   *\n   * @example\n   * const children = elem.children();\n   */\n  children() {\n    return new Elem(this.length ? this[0].childNodes : []);\n  }\n\n  /**\n   * @method Elem#closest\n   * @public\n   * @param {String} selector - See the link.\n   * @returns {Elem} Set of the closest elements.\n   * @description Synonym for\n   * [Element#closest]{@link https://developer.mozilla.org/en/docs/Web/API/Element/closest}.\n   */\n  closest(selector) {\n    return this.collect((add, elem) => {\n      while (elem) {\n        if (new Elem(elem).is(selector)) {\n          return add(elem);\n        }\n\n        elem = elem.parentNode;\n      }\n    });\n  }\n\n  collect(callback) {\n    const elements = [];\n    const cb = ::elements.push;\n\n    this.forEach((elem, index) => {\n      callback(cb, elem, index, this);\n    });\n\n    return new Elem(elements);\n  }\n\n  /**\n   * @method Elem#contains\n   * @public\n   * @param {Elem|Element} element - Element to find out if it's within the first element in the set.\n   * @returns {Boolean} Returns if the argument within this element.\n   * @description Method is extension for\n   * [Node#contains]{@link https://developer.mozilla.org/en/docs/Web/API/Node/contains}.\n   *\n   * @example\n   * elem.contains(elem2);   // true|false\n   */\n  contains(element) {\n    const parent = this[0];\n    const child = toElem(element)[0];\n\n    return !parent || !child\n      ? false\n      : parent.contains(child);\n  }\n\n  /**\n   * @method Elem#create\n   * @public\n   * @param {String} type - Type of created element. If type is \"#text\" a text node is created.\n   * If type is \"#comment\" a comment node is created.\n   * @returns {Elem} New instance of Elem - wrap of the created elements.\n   * @description Method for creating elements inside this element.\n   * If this element is not an Element the element is just created.\n   *\n   * @example\n   * elem.create('div');\n   */\n  create(type) {\n    return this.collect((add, elem) => {\n      let el = null;\n      const isText = type === '#text';\n      const document = isHTMLDocument(elem)\n        ? elem\n        : elem.ownerDocument;\n\n      if (isText || type === '#comment') {\n        el = isText\n          ? document.createTextNode('')\n          : document.createComment('');\n      } else {\n        const ns = type === 'svg'\n          ? SVG_NS\n          : elem.namespaceURI || document.documentElement.namespaceURI || XHTML_NS;\n\n        el = document.createElementNS(ns, type);\n      }\n\n      add(new Elem(el).into(elem));\n    });\n  }\n\n  /**\n   * @method Elem#createComment\n   * @public\n   * @param {String} text - Text of the comment.\n   * @returns {Elem} New instance of Elem - wrap of the created comments.\n   * @description Method for creating comments inside this element.\n   * If this element is not an Element the comment is just created.\n   *\n   * @example\n   * elem.createComment('comment');\n   */\n  createComment(text) {\n    return this\n      .create('#comment')\n      .text(text);\n  }\n\n  /**\n   * @method Elem#createText\n   * @public\n   * @param {String} text - Text.\n   * @returns {Elem} New instance of Elem - wrap of the created text nodes.\n   * @description Method for creating text nodes inside this element.\n   * If this element is not an Element the text node is just created.\n   *\n   * @example\n   * elem.createText('text');\n   */\n  createText(text) {\n    return this\n      .create('#text')\n      .text(text);\n  }\n\n  /**\n   * @method Elem#css\n   * @public\n   * @param {String|Object.<String, String>} [property] - Name of the property to get or\n   * an object of the format { [property]: value, ... } to set styles.\n   * @param {String} [value] - If the first argument is a string it should be a value to set for that property.\n   * @returns {Object|String|Elem} If no arguments passed, D-Wrap of css styles of the element returned,\n   * if 1 string argument is passed the value of the property returned otherwise returns this.\n   * @description Method for getting/setting styles. Supports !important.\n   *\n   * @example\n   * elem.css('display', 'none'); // display set to 'none' and this returned\n   * elem.css('display');         // 'none'\n   * elem.css({\n   *   display: 'inline',         // display set to 'inline'\n   *   cursor: 'pointer'          // cursor set to 'pointer'\n   * });                          // this returned\n   * elem.css();                  // { display: 'none', cursor: 'pointer' }\n   */\n  css(property, value) {\n    const { style } = this[0] || {};\n\n    if (!arguments.length) {\n      if (!style) {\n        return {};\n      }\n\n      return collectFromArray(style.cssText.split(CSS_STYLES_SEPARATOR_REGEX), addCSSProp);\n    }\n\n    if (arguments.length <= 1 && isString(property)) {\n      if (!style) {\n        return '';\n      }\n\n      property = toHyphenCase(property);\n\n      return style.getPropertyValue(property) + (style.getPropertyPriority(property) ? ' !important' : '');\n    }\n\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(property, (value, property) => {\n        property = toHyphenCase(property);\n\n        if (isNil(value) || value === false) {\n          return new Elem(elem).removeCSS(property);\n        }\n\n        elem.style.removeProperty(property);\n        elem.style.setProperty(\n          property,\n          value.replace(CSS_IMPORTANT_REGEX, ''),\n          CSS_IMPORTANT_REGEX.test(value) ? 'important' : ''\n        );\n      });\n    });\n  }\n\n  /**\n   * @method Elem#data\n   * @public\n   * @param {String|Object.<String, String>} [key] - Name of the data attribute (without data- prefix)\n   * to get or an object of the format { [attrName]: value, ... } to set attributes.\n   * @param {String} [value] - If the first argument is a string it should be a value to set for that attribute.\n   * @returns {Object|String|Elem} If no arguments passed, D-Wrap of dataset of the element returned,\n   * if 1 string argument is passed the value of the data attribute returned otherwise returns this.\n   * @description Method for getting/setting data attributes. See\n   * [HTMLElement#dataset]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/dataset}.\n   *\n   * @example\n   * elem.data('someKey1', 'value'); // attribute data-some-key1 set to 'value1' and this returned\n   * elem.data('someKey1');          // 'value1'\n   * elem.data({\n   *   someKey1: 'value3',           // attribute data-some-key1 set to 'value3'\n   *   someKey2: 'value2'            // attribute data-some-key2 set to 'value2'\n   * });                             // this returned\n   * elem.data();                    // { someKey1: 'value3', someKey2: 'value2' }\n   */\n  data(key, value) {\n    const { dataset } = this[0] || {};\n\n    if (!arguments.length) {\n      if (!dataset) {\n        return {};\n      }\n\n      return collectFromObject(dataset, addDataAttr);\n    }\n\n    if (arguments.length === 1 && isString(key)) {\n      if (!dataset) {\n        return;\n      }\n\n      return dataset[key];\n    }\n\n    if (arguments.length >= 2) {\n      key = { [key]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(key, (value, key) => {\n        elem.dataset[key] = value;\n      });\n    });\n  }\n\n  /**\n   * @method Elem#dispatch\n   * @public\n   * @param {String|Event} event - Event or a string (new Event(event) is created).\n   * @param {Object} [details = {}] - Object that is assigned to the event.\n   * @returns {Elem} Returns this.\n   * @see https://developer.mozilla.org/en/docs/Web/API/Event/Event\n   * @description Synonym for\n   * [EventTarget#dispatchEvent]{@link https://developer.mozilla.org/en/docs/Web/API/EventTarget/dispatchEvent}.\n   *\n   * @example\n   * elem.dispatch('click');\n   * elem.dispatch('click', { bubbles: false, cancellable: false, data: 1 });\n   * elem.dispatch(new CustomEvent('custom-event'));\n   */\n  dispatch(event, details = {}) {\n    const {\n      bubbles = true,\n      cancelable = true,\n      ...realDetails\n    } = details || {};\n    let finalEvent = event;\n\n    if (!EVENT_REGEX.test(toStringTag(finalEvent))) {\n      try {\n        finalEvent = new Event(finalEvent, { bubbles, cancelable });\n        assign(finalEvent, realDetails);\n      } catch (err) {}\n    }\n\n    return this.forEach((elem) => {\n      if (!EVENT_REGEX.test(toStringTag(finalEvent))) {\n        const document = isHTMLDocument(elem)\n          ? elem\n          : elem.ownerDocument;\n\n        finalEvent = document.createEvent('Event');\n        finalEvent.initEvent(event, bubbles, cancelable);\n\n        assign(finalEvent, realDetails);\n      }\n\n      elem.dispatchEvent(finalEvent);\n    });\n  }\n\n  /**\n   * @method Elem#elem\n   * @public\n   * @param {Number} [index = 0] - Index of the element of the set to get. Negative index means elem.length + index.\n   * @returns {Elem} New instance of Elem.\n   *\n   * @example\n   * elem.elem(1); // a wrap of the element in the set that has index 1\n   * elem.elem();  // a wrap of the element in the set that has index 0\n   */\n  elem(index = 0) {\n    if (index < 0) {\n      index = this.length + index;\n    }\n\n    return new Elem(this[index]);\n  }\n\n  /**\n   * @method Elem#filter\n   * @public\n   * @param {IterationCallback} [filterFn = Boolean] - Filter function\n   * @returns {Elem} New instance of Elem.\n   * @description Method for filtering elements.\n   *\n   * @example\n   * elem.filter((elem) => new Elem(elem).closest('.parent'));\n   */\n  filter(filterFn = Boolean) {\n    return this.collect((add, elem, index) => {\n      if (filterFn(elem, index, this)) {\n        add(elem);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#find\n   * @public\n   * @param {String} selector - Selector to find.\n   * @returns {Elem} New instance of Elem.\n   * @description Synonym for\n   * [Element#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Element/querySelectorAll}.\n   */\n  find(selector) {\n    return this.collect((add, elem) => {\n      add(find(selector, elem));\n    });\n  }\n\n  /**\n   * @method Elem#forEach\n   * @public\n   * @param {IterationCallback} callback - Called on each iteration.\n   * @returns {Elem} Returns this.\n   * @description Method for iterating over the set.\n   *\n   * @example\n   * find('.cls').forEach((element, index, set) => {\n   *   // do something\n   * });\n   */\n  forEach(callback) {\n    iterateArray(this, (value, key) => {\n      callback(value, key, this);\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Elem#hasAttr\n   * @public\n   * @param {String} attr - Name of the attribute.\n   * @returns {Boolean} If the first element in the set has the attribute.\n   * @description Method that returns if the first element in the set has the attribute or not.\n   *\n   * @example\n   * elem.attr('attr', 'value').hasAttr('attr'); // true\n   * elem.removeAttr('attr').hasAttr('attr');    // false\n   */\n  hasAttr(attr) {\n    const elem = this[0];\n\n    if (!elem) {\n      return false;\n    }\n\n    const ns = getAttrNS(attr, elem);\n\n    return ns\n      ? elem.hasAttributeNS(ns, attr)\n      : elem.hasAttribute(attr);\n  }\n\n  /**\n   * @method Elem#hasClass\n   * @public\n   * @param {String} cls - Name of the class.\n   * @returns {Boolean} If the first element in the set has the class.\n   * @description Method that returns if the first element in the set has the class or not.\n   *\n   * @example\n   * elem.addClass('cls').hasClass('cls');    // true\n   * elem.removeClass('cls').hasClass('cls'); // false\n   */\n  hasClass(cls) {\n    const elem = this[0];\n\n    return elem\n      ? elem.classList.contains(cls)\n      : false;\n  }\n\n  /**\n   * @method Elem#hide\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Hides all elements in the set.\n   *\n   * @example\n   * elem.hide();\n   */\n  hide() {\n    return this.forEach(hide);\n  }\n\n  /**\n   * @method Elem#html\n   * @public\n   * @param {String|*} [html] - HTML to write instead of current HTML.\n   * @returns {Elem|String} If no arguments passed HTML of the first element in the set returned.\n   * Otherwise all elements HTML in the set are set to the html argument.\n   * @description Gets or sets HTML.\n   *\n   * @example\n   * elem.html('<div>1</div>');\n   * elem.html(); // '<div>1</div>'\n   */\n  html(html) {\n    if (!arguments.length) {\n      const elem = this[0];\n\n      return elem\n        ? elem.innerHTML\n        : '';\n    }\n\n    return this.forEach((elem) => {\n      elem.innerHTML = html;\n    });\n  }\n\n  includes(elem) {\n    return this.indexOf(elem) !== -1;\n  }\n\n  /**\n   * @method Elem#insertAfter\n   * @public\n   * @param {Elem|Element} element - Element to insert this element after.\n   * @returns {Elem} Returns this.\n   * @description Puts the elements from the set after the element specified by the argument.\n   * The elements remain in the same order.\n   *\n   * @example\n   * elem.insertAfter(elem2);\n   * elem.insertAfter(document.getElementById('id'));\n   * elem.insertAfter('#id div.c1');\n   */\n  insertAfter(element) {\n    element = toElem(element).elem(0);\n\n    let parent = element.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    element = element.next()[0];\n    parent = parent[0];\n\n    return this.forEach((elem) => {\n      if (elem === element) {\n        element = element.nextSibling;\n\n        return;\n      }\n\n      if (element) {\n        parent.insertBefore(elem, element);\n      } else {\n        parent.appendChild(elem);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#insertBefore\n   * @public\n   * @param {Elem|Element} element - Element to insert this element before.\n   * @returns {Elem} Returns this.\n   * @description Puts the elements from the set before the element specified by the argument.\n   * The elements remain in the same order.\n   *\n   * @example\n   * elem.insertBefore(elem2);\n   * elem.insertBefore(document.getElementById('id'));\n   * elem.insertBefore('#id div.c1');\n   */\n  insertBefore(element) {\n    element = toElem(element).elem(0);\n\n    let parent = element.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    element = element[0];\n    parent = parent[0];\n\n    return this.forEach((elem) => {\n      parent.insertBefore(elem, element);\n    });\n  }\n\n  /**\n   * @method Elem#into\n   * @public\n   * @param {Elem|Element} element - Element to put this elements into.\n   * @param {Boolean} end - If the elements should be inserted to the end. If false they are inserted to the start.\n   * @returns {Elem} Returns this.\n   * @description Method is similar to\n   * [Node#appendChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/appendChild}.\n   *\n   * @example\n   * elem.into(elem2);\n   * elem.into(document.getElementById('id'));\n   * elem.into('#id div.c1');\n   */\n  into(element, end = true) {\n    element = toElem(element)[0];\n\n    if (\n      !element\n      || isHTMLDocument(element)\n    ) {\n      return this;\n    }\n\n    if (!end && element.firstChild) {\n      for (let i = this.length - 1; i >= 0; i--) {\n        element.insertBefore(this[i], element.firstChild);\n      }\n\n      return this;\n    }\n\n    return this.forEach((elem) => {\n      element.appendChild(elem);\n    });\n  }\n\n  /**\n   * @method Elem#is\n   * @public\n   * @param {String} selector\n   * @returns {Boolean} If the first element in the set matches the selector.\n   * @description Synonym for\n   * [Element#matches]{@link https://developer.mozilla.org/en/docs/Web/API/Element/matches}.\n   *\n   * @example\n   * elem.addClass('cls');\n   * elem.is('.cls');         // true\n   *\n   * elem.removeClass('cls');\n   * elem.is('.cls');         // false\n   */\n  is(selector) {\n    if (!this.length) {\n      return false;\n    }\n\n    const elem = this[0];\n    const matches = (\n      elem.matches\n      || elem.matchesSelector\n      || elem.webkitMatchesSelector\n      || elem.mozMatchesSelector\n      || elem.msMatchesSelector\n      || elem.oMatchesSelector\n    );\n\n    try {\n      return matches.call(elem, selector);\n    } catch (err) {\n      console.error(`Selector '${ selector }' is not a valid selector (Elem#is)`);\n\n      return false;\n    }\n  }\n\n  /**\n   * @method Elem#name\n   * @public\n   * @returns {String} nodeName (lowercased) of the first element in the set.\n   * @description Method for getting name of the first element in the set.\n   *\n   * @example\n   * const elem1 = elem.create('div');\n   * elem1.name() // 'div'\n   */\n  name() {\n    return getName(this[0]);\n  }\n\n  /**\n   * @method Elem#next\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Method for finding next element to each element in the set.\n   *\n   * @example\n   * elem.next(); // finds next element to each element in the set\n   */\n  next() {\n    return this.collect(addNext);\n  }\n\n  /**\n   * @method Elem#on\n   * @public\n   * @param {ElemEventString|Object.<ElemEventString|ElemListener>} event - Either a {@link ElemEventString} string\n   * or an object with event keys (a key is also ElemEventString) and listeners values.\n   * @param {ElemListener} [listener] - If the first argument is a string it must be a listener function for\n   * specified event(s).\n   * @returns {ElemRemoveListeners} Function that takes optional event argument.\n   * @description Adds event listeners for all the elements in the set.\n   *\n   * @example\n   * elem.on(\n   *   'change, input',\n   *   'input, select, textarea, datalist, keygen, output',\n   *   (e, elem, index) => console.log(elem.value)\n   * );\n   * elem.on(\n   *   'change, input',\n   *   (e, elem, index) => console.log(elem.value)\n   * );\n   * elem.on(\n   *   {\n   *     'change, input': (e, elem, index) => console.log(elem.value),\n   *     'blur': () => console.log('blur')\n   *   },\n   *   'input, select, textarea, datalist, keygen, output'\n   * );\n   *\n   * const removeListeners = elem.on({\n   *   'change, input': (e, elem, index) => console.log(elem.value),\n   *   'blur': () => console.log('blur')\n   * });\n   *\n   * removeListeners('click');\n   * removeListeners('blur, change');\n   * removeListeners('blur, change', 'input');\n   * removeListeners();\n   */\n  on(event, listener) {\n    if (isString(event)) {\n      event = { [event]: listener };\n    }\n\n    const newEvents = {};\n    const allListeners = {};\n\n    iterateObject(event, (listener, event) => {\n      iterateArray(event.split(EVENT_SEPARATOR_REGEX), (event) => {\n        (newEvents[event] = newEvents[event] || []).push(listener);\n      });\n    });\n\n    this.forEach((elem) => {\n      iterateObject(newEvents, (listeners, event) => {\n        iterateArray(listeners, (listener) => {\n          elem.addEventListener(event, listener, false);\n          (allListeners[event] = allListeners[event] || []).push(() => {\n            elem.removeEventListener(event, listener);\n          });\n        });\n      });\n    });\n\n    return function removeEventListeners(event) {\n      if (arguments.length) {\n        iterateArray(arguments, (event) => {\n          iterateArray(event.split(EVENT_SEPARATOR_REGEX), (event) => {\n            const removeListeners = allListeners[event];\n\n            if (removeListeners) {\n              iterateArray(removeListeners, (removeListener) => removeListener());\n\n              delete allListeners[event];\n            }\n          });\n        });\n      } else {\n        iterateObject(allListeners, (removeListeners, event) => {\n          iterateArray(removeListeners, (removeListener) => removeListener());\n\n          delete allListeners[event];\n        });\n      }\n    };\n  }\n\n  /**\n   * @method Elem#parent\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Method returns wrap of the set of the parent elements of each element in the set.\n   */\n  parent() {\n    return this.collect(addParent);\n  }\n\n  /**\n   * @method Elem#prev\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Method for finding previous element to each element in the set.\n   *\n   * @example\n   * elem.prev(); // finds previous element to each element in the set\n   */\n  prev() {\n    return this.collect(addPrev);\n  }\n\n  /**\n   * @method Elem#prop\n   * @public\n   * @param {String|Object.<String, *>} property - Either a string of a property or an assigned object.\n   * @param {*} [value] - If a property parameter is a string\n   * this has to be an assigned value if it's present.\n   * @returns {Elem|*} Returns this if it's setter or a value if getter.\n   * @description Method that is either a property getter for the first element in the set\n   * or a setter for every element in the set.\n   *\n   * @example\n   * elem.prop('draggable', false);\n   * elem.prop('draggable'); // false\n   */\n  prop(property, value) {\n    if (arguments.length <= 1 && isString(property)) {\n      return this[0] ? this[0][property] : undefined;\n    }\n\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(property, (value, prop) => {\n        elem[prop] = value;\n      });\n    });\n  }\n\n  /**\n   * @method Elem#remove\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Removes all the elements from the set from the document.\n   * Note: it doesn't remove them from the set so watch out for the memory leaks.\n   *\n   * @example\n   * elem.remove();\n   */\n  remove() {\n    return this.forEach(remove);\n  }\n\n  /**\n   * @method Elem#removeAttr\n   * @public\n   * @param {...String} attributes - Attributes to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the attributes from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeAttr('foo', 'bar', 'baz');\n   */\n  removeAttr() {\n    return this.forEach((elem) => {\n      iterateArray(arguments, (attr) => {\n        const ns = getAttrNS(attr, elem);\n\n        if (ns) {\n          elem.removeAttributeNS(ns, attr);\n        } else {\n          elem.removeAttribute(attr);\n        }\n      });\n    });\n  }\n\n  /**\n   * @method Elem#removeClass\n   * @public\n   * @param {...String} classes - Classes to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the classes from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeClass('foo', 'bar', 'baz');\n   */\n  removeClass() {\n    return this.forEach((elem) => {\n      const list = elem.classList;\n\n      iterateArray(arguments, (cls) => list.remove(cls));\n    });\n  }\n\n  /**\n   * @method Elem#removeCSS\n   * @public\n   * @param {...String} props - CSS properties to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the CSS properties from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeCSS('display', 'position', 'margin');\n   */\n  removeCSS() {\n    return this.forEach((elem) => {\n      iterateArray(arguments, (css) => {\n        elem.style.removeProperty(toHyphenCase(css));\n      });\n    });\n  }\n\n  /**\n   * @method Elem#replace\n   * @public\n   * @param {Elem|Element} element - Element to replace the first element in the set\n   * with a set of elements specified by the argument (Element or Elem).\n   * @returns {Elem} Returns this.\n   * @description Method is similar to\n   * [Node#replaceChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/replaceChild}.\n   *\n   * @example\n   * elem.replace(elem2);\n   * elem.replace(document.getElementById('id'));\n   * elem.replace('#id div.c1');\n   */\n  replace(element) {\n    element = toElem(element);\n\n    const first = this.elem(0);\n    const parent = first.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    let elem = parent;\n    let method = 'into';\n    const next = first.next()[0];\n    const prev = first.prev()[0];\n\n    if (next) {\n      elem = next;\n      method = 'insertBefore';\n    } else if (prev) {\n      elem = prev;\n      method = 'insertAfter';\n    }\n\n    first.remove();\n\n    element[method](elem);\n  }\n\n  /**\n   * @method Elem#show\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Shows all elements in the set.\n   * If an element was hidden using {@link Elem#hide} previous display is set.\n   *\n   * @example\n   * elem.show();\n   */\n  show() {\n    return this.forEach(show);\n  }\n\n  slice() {\n    return new Elem(super.slice.apply(this, arguments));\n  }\n\n  /**\n   * @method Elem#text\n   * @public\n   * @param {String|*} [text] - Text to write instead of current text.\n   * @returns {Elem|String} If no arguments passed text of the first element in the set returned.\n   * Otherwise all elements texts in the set are set to the text argument.\n   * @description Gets or sets text.\n   *\n   * @example\n   * elem.text('123');\n   * elem.text(); // '123'\n   */\n  text(text) {\n    if (!arguments.length) {\n      return this.prop('textContent');\n    }\n\n    return this.forEach((elem) => {\n      elem.textContent = text;\n    });\n  }\n\n  /**\n   * @method Elem#toggleAttr\n   * @public\n   * @param {String} attr - Attribute to toggle.\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the attribute\n   * with the '' value and if falsey method removes the attribute. If not present method adds\n   * the attribute if it doesn't exist and removes if it does.\n   * @returns {Elem} Returns this.\n   * @description Method for toggling attributes.\n   *\n   * @example\n   * elem.toggleAttr('attr');\n   * elem.toggleAttr('attr', someCondition);\n   */\n  toggleAttr(attr, condition) {\n    return this.forEach((elem) => {\n      elem = new Elem(elem);\n\n      if (arguments.length < 2 ? !elem.hasAttr(attr) : condition) {\n        elem.attr(attr, '');\n      } else {\n        elem.removeAttr(attr);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#toggleClass\n   * @public\n   * @param {String} cls - Class to toggle.\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the class\n   * and if falsey method removes the class. If not present method adds\n   * the class if it doesn't exist and removes if it does.\n   * @returns {Elem} Returns this.\n   * @description Method for toggling classes.\n   *\n   * @example\n   * elem.toggleClass('cls');\n   * elem.toggleClass('cls', someCondition);\n   */\n  toggleClass(cls, condition) {\n    return this.forEach((elem) => {\n      const { classList } = elem;\n\n      classList.toggle(cls, arguments.length < 2 ? !classList.contains(cls) : condition);\n    });\n  }\n}\n\nsetToStringTag(Elem, 'Elem');\n\nif (Symbol && Symbol.species) {\n  defineProperties(Elem, {\n    [Symbol.species]: {\n      get() {\n        return Array;\n      }\n    }\n  });\n}\n\n/**\n * @const {Elem} doc\n * @type {Elem}\n * @public\n * @description Elem instance of document.\n */\nconst doc = new Elem(document);\n\n/**\n * @const {Elem} html\n * @type {Elem}\n * @public\n * @description Elem instance of document.documentElement.\n */\nconst html = new Elem(document.documentElement);\n\n/**\n * @const {Elem} body\n * @type {Elem}\n * @public\n * @description Elem instance of document.body.\n */\nconst body = new Elem(document.body);\n\n/**\n * @const {Elem} head\n * @type {Elem}\n * @public\n * @description Elem instance of document.head.\n */\nconst head = new Elem(document.head);\n\n/**\n * @function toElem\n * @private\n * @param {Element|Elem} elem - Element or Elem.\n * @returns {Elem} Instance of Elem.\n */\nfunction toElem(elem) {\n  return isElem(elem)\n    ? elem\n    : new Elem(elem);\n}\n\n/**\n * @function isElem\n * @private\n * @param {*} value - Value to check if it's Elem.\n * @returns {Boolean} If the value is Elem.\n * @description Returns if the value is Elem or not.\n */\nfunction isElem(value) {\n  return value instanceof Elem;\n}\n\n/**\n * @function isHTMLDocument\n * @private\n * @param {*} value - Value to check if it's HTMLDocument.\n * @returns {Boolean} If the value is HTMLDocument.\n * @description Returns if the value is HTMLDocument or not.\n */\nfunction isHTMLDocument(value) {\n  return toStringTag(value) === 'HTMLDocument';\n}\n\n/**\n * @function isElementsCollection\n * @private\n * @param {*} value - Value to check if it's Comment or Text.\n * @returns {Boolean} If the value is HTMLDocument.\n * @description Returns if the value is Comment or Text or not.\n */\nfunction isElementsCollection(value) {\n  return (\n    HTML_COLLECTION_REGEX.test(toStringTag(value))\n    || isElem(value)\n    || isArray(value)\n  );\n}\n\nfunction isValidNode(value) {\n  const tag = toStringTag(value);\n\n  return (\n    ELEMENT_REGEX.test(tag)\n    || tag === 'HTMLDocument'\n    || tag === 'Text'\n    || tag === 'DocumentFragment'\n    || tag === 'Comment'\n  );\n}\n\n/**\n * @function getName\n * @private\n * @param {Element} [elem] - Element which name is needed to know.\n * @returns {String} Element name.\n */\nfunction getName(elem) {\n  return (elem && elem.nodeName && elem.nodeName.toLowerCase()) || '';\n}\n\nfunction getAttrNS(attr, elem) {\n  if (attr === 'xmlns' || attr === 'xmlns:xlink') {\n    return elem.nodeName === 'SVG'\n      ? XML_NS\n      : null;\n  }\n\n  if (X_LINK_ATTR_REGEX.test(attr)) {\n    return new Elem(elem).closest('svg').length\n      ? X_LINK_NS\n      : null;\n  }\n}\n\nfunction createHideStyleNode(head) {\n  const style = head.find(`style#${ HIDE_CLASS }`);\n\n  if (style.length) {\n    return;\n  }\n\n  head\n    .create('style')\n    .prop('id', HIDE_CLASS)\n    .text(`.${ HIDE_CLASS }{display:none !important;}`);\n}\n\nfunction addAttr(attrs, attr) {\n  attrs[attr.name] = attr.value;\n}\n\nfunction addCSSProp(css, value) {\n  if (value) {\n    const property = value.split(CSS_PROP_VALUE_SEPARATOR_REGEX);\n\n    css[toCamelCase(property[0])] = property[1];\n  }\n}\n\nfunction addDataAttr(data, value, key) {\n  data[key] = value;\n}\n\nfunction hide(elem) {\n  createHideStyleNode(new Elem(elem.ownerDocument.head));\n  new Elem(elem).addClass(HIDE_CLASS);\n}\n\nfunction addNext(add, elem) {\n  add(elem.nextSibling);\n}\n\nfunction addParent(add, elem) {\n  add(elem.parentNode);\n}\n\nfunction addPrev(add, elem) {\n  add(elem.previousSibling);\n}\n\nfunction remove(elem) {\n  const parent = elem.parentNode;\n\n  if (parent) {\n    parent.removeChild(elem);\n  }\n}\n\nfunction show(elem) {\n  new Elem(elem).removeClass(HIDE_CLASS);\n}\n\n/**\n * @function find\n * @public\n * @param {String} selector - Selector to find.\n * @param {Element} [base = document] - Base to find in.\n * @returns {Elem} New instance of Elem.\n * @description Synonym for\n * [Document#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Document/querySelectorAll}.\n */\nfunction find(selector, base = document) {\n  return new Elem(base.querySelectorAll(String(selector)));\n}\n\ncreateHideStyleNode(head);\n\nexport { Elem, doc, html, body, head, find };\n","import { findInArray } from '../utils';\n\nexport function registerDBlock(Block) {\n  class DBlock extends Block {\n    static template = html`\n      <d-elements\n        value=\"{elems}\"\n        parentScope=\"{ParentScope}\"\n        parentTemplate=\"{ParentTemplate}\"\n      />\n    `;\n\n    afterConstruct() {\n      const {\n        parentScope: {\n          $$: {\n            parentScope: parentParentScope,\n            parentTemplate: parentParentTemplate,\n            argsChildren: children\n          }\n        },\n        argsChildren: ownChildren,\n        parentTemplate,\n        dBlockName\n      } = this.$$;\n      let found;\n\n      if (ownChildren.length) {\n        return;\n      }\n\n      this.ParentScope = parentParentScope;\n      this.ParentTemplate = parentParentTemplate;\n\n      if (dBlockName) {\n        found = findInArray(children, ({ name: nodeName }) => nodeName === `d-block:${ dBlockName }`);\n\n        if (!found) {\n          let parent = this;\n\n          /* eslint no-empty: 0 */\n          while (\n            (parent = parent.$$.parentScope)\n            && !(found = findInArray(parent.$$.dBlocks, ({ $$: { dBlockName: DBlockName } }) => DBlockName === dBlockName))\n            && parent.$$.parentScope.$$.name === '#d-item'\n          ) {}\n\n          if (found) {\n            this.ParentScope = parent;\n            this.ParentTemplate = parentTemplate;\n            found.value = {\n              children: found.value.$$.argsChildren\n            };\n          }\n        }\n\n        this.elems = found && found.value.children.length\n          ? found.value.children\n          : null;\n      } else {\n        this.elems = children;\n      }\n    }\n  }\n\n  return {\n    name: 'd-block',\n    value: DBlock\n  };\n}\n","import {\n  assign, iterateArray, iterateObject,\n  isArray, isFunction\n} from '../utils';\n\nconst watchArgs = js`[\n  args.set,\n  args.filterBy,\n  args.sortBy\n]`;\n\nexport function registerDEach(Block, createBlock) {\n  class DEach extends Block {\n    constructor(opts) {\n      super(opts);\n\n      const {\n        args: {\n          item: itemName = '$item',\n          index: indexName = '$index'\n        }\n      } = this;\n\n      assign(this.$$, {\n        itemsByUIDs: {},\n        UID: this.args.uid || undefined,\n        itemName,\n        indexName\n      });\n    }\n\n    afterRender() {\n      this.evaluateAndWatch(watchArgs, this.renderSet);\n      this.renderSet();\n    }\n\n    renderSet = () => {\n      const {\n        argsChildren,\n        itemsByUIDs,\n        parentScope,\n        parentElem,\n        parentTemplate,\n        scope,\n        itemName,\n        indexName,\n        UID\n      } = this.$$;\n      const {\n        args: { sortBy }\n      } = this;\n      const newItemsByUIDs = {};\n      const newUIDsCounter = {};\n      const newUIDs = {};\n      let {\n        set,\n        filterBy\n      } = this.args;\n      const isArr = isArray(set);\n      const iterate = isArr\n        ? iterateArray\n        : iterateObject;\n\n      if (isArr && isFunction(sortBy)) {\n        set = set\n          .slice()\n          .sort(sortBy);\n      }\n\n      if (isFunction(filterBy)) {\n        filterBy = [filterBy];\n      }\n\n      if (isArray(filterBy)) {\n        iterateArray(filterBy, (filter) => {\n          set = set.filter(filter);\n        });\n      }\n\n      iterate(set, (item, index) => {\n        scope[itemName] = item;\n        scope[indexName] = index;\n\n        const uid = parentScope.$$.evaluate(UID, null, null, false, false, this);\n\n        newUIDsCounter[uid] = (newUIDsCounter[uid] || 0) + 1;\n        newUIDs[index] = uid;\n      });\n\n      scope[itemName] = null;\n      scope[indexName] = null;\n\n      iterateObject(itemsByUIDs, (items, uid) => {\n        if (!newUIDsCounter[uid]) {\n          iterateArray(items, remove);\n\n          return;\n        }\n\n        iterateArray(items.splice(newUIDsCounter[uid]), remove);\n      });\n\n      let prevBlock;\n\n      iterate(set, (item, index) => {\n        const uid = newUIDs[index];\n        let block;\n\n        if (itemsByUIDs[uid] && itemsByUIDs[uid].length) {\n          block = itemsByUIDs[uid].shift();\n          block.$$.scope[indexName] = index;\n          block.$$.scope[itemName] = item;\n\n          if (block.$$.prevBlock !== prevBlock && prevBlock) {\n            prevBlock.$$.insertAfterIt(block.$$.content, true);\n          }\n        } else {\n          block = createBlock({\n            node: {\n              itemName,\n              indexName,\n              item,\n              index,\n              name: '#d-item',\n              children: argsChildren\n            },\n            parent: this,\n            parentElem,\n            parentBlock: this,\n            parentScope,\n            parentTemplate,\n            prevBlock\n          });\n        }\n\n        (newItemsByUIDs[uid] = newItemsByUIDs[uid] || []).push(block);\n        block.$$.prevBlock = prevBlock;\n        prevBlock = block;\n      });\n\n      this.$$.itemsByUIDs = newItemsByUIDs;\n    };\n  }\n\n  return {\n    name: 'd-each',\n    value: DEach\n  };\n}\n\nfunction remove(item) {\n  item.$$.remove();\n}\n","import { Elem } from '../Elem';\nimport { iterateArray, removeArrayElem } from '../utils';\n\nconst watchArgs = js`args.value`;\n\nexport function registerDElements(Block, createBlock) {\n  class DElements extends Block {\n    afterConstruct() {\n      const { parentElem } = this.$$;\n      const {\n        parentScope,\n        parentTemplate\n      } = this.args;\n\n      this.$$.evaluate(watchArgs, () => {\n        const {\n          children,\n          mixins,\n          parent,\n          watchersToRemove,\n          content\n        } = this.$$;\n        const { value } = this.args;\n\n        iterateArray(children, removeWithParentSignal);\n        iterateArray(mixins, removeWithParentSignal);\n        content.remove();\n\n        if (parent instanceof Block) {\n          parent.$$.removeContent(content);\n        }\n\n        this.$$.children = [];\n        this.$$.mixins = [];\n        this.$$.watchersToRemove = watchersToRemove.filter(({ watchers, watcher, forDElements }) => {\n          if (forDElements) {\n            return true;\n          }\n\n          removeArrayElem(watchers, watcher);\n        });\n        this.$$.content = new Elem();\n\n        let prevBlock;\n\n        iterateArray(value || [], (child) => {\n          prevBlock = createBlock({\n            node: child,\n            parent: this,\n            parentElem,\n            parentBlock: this,\n            parentScope,\n            parentTemplate,\n            prevBlock\n          });\n        });\n      }, this, true);\n    }\n  }\n\n  return {\n    name: 'd-elements',\n    value: DElements\n  };\n}\n\nfunction removeWithParentSignal(item) {\n  item.$$.remove(true);\n}\n","import { findInArray } from '../utils';\n\nexport function registerDIf(Block) {\n  class DIf extends Block {\n    static template = html`\n      <d-elements\n        value=\"{elems}\"\n        parentScope=\"{$$.parentScope}\"\n        parentTemplate=\"{$$.parentTemplate}\"\n      />\n    `;\n\n    constructor(opts) {\n      super(opts);\n\n      const {\n        parentScope,\n        argsChildren\n      } = this.$$;\n      let index = Infinity;\n      const values = argsChildren.map((child, i) => {\n        const {\n          name,\n          attrs = {},\n          children\n        } = child;\n        let cond = attrs.if;\n\n        if (name !== 'd-else' && cond) {\n          cond = parentScope.$$.evaluate(cond, (newValue) => {\n            if (!!newValue === values[i]) {\n              return;\n            }\n\n            values[i] = !!newValue;\n\n            if (i > index) {\n              return;\n            }\n\n            if (i < index) {\n              index = i;\n              this.elems = children;\n\n              return;\n            }\n\n            const found = findInArray(values, Boolean);\n\n            if (found) {\n              index = found.key;\n              this.elems = argsChildren[found.key].children;\n            } else {\n              index = Infinity;\n              this.elems = null;\n            }\n          }, this);\n        } else {\n          cond = true;\n        }\n\n        if (cond && index === Infinity) {\n          index = i;\n          this.elems = children;\n        }\n\n        return !!cond;\n      });\n    }\n  }\n\n  return {\n    name: 'd-if',\n    value: DIf\n  };\n}\n","export function registerDItem(Block) {\n  class DItem extends Block {\n    static template = html`\n      <d-elements\n        value=\"{$$.argsChildren}\"\n        parentScope=\"{this}\"\n        parentTemplate=\"{$$.parentTemplate}\"\n      />\n    `;\n  }\n\n  return {\n    name: '#d-item',\n    value: DItem\n  };\n}\n","import { collectFromArray, findInArray, iterateArray } from '../utils';\n\nconst watchArgs = js`args.value`;\n\nexport function registerDSwitch(Block) {\n  class DSwitch extends Block {\n    static template = html`\n      <d-elements\n        value=\"{elems}\"\n        parentScope=\"{$$.parentScope}\"\n        parentTemplate=\"{$$.parentTemplate}\"\n      />\n    `;\n\n    index = Infinity;\n\n    constructor(opts) {\n      super(opts);\n\n      const {\n        $$: {\n          argsChildren,\n          parentScope\n        },\n        args,\n        args: { value }\n      } = this;\n      let wasDefault;\n\n      this.values = collectFromArray(argsChildren, (values, child, i) => {\n        const {\n          name,\n          attrs,\n          children\n        } = child;\n        let val = attrs.if;\n\n        if (wasDefault) {\n          return;\n        }\n\n        if (name !== 'd-case' && name !== 'd-default') {\n          return;\n        }\n\n        if (name === 'd-default') {\n          wasDefault = true;\n        }\n\n        if (name === 'd-default') {\n          val = value;\n        } else if (val) {\n          val = parentScope.$$.evaluate(val, (newValue) => {\n            if (this.equals(this.values[i].value, newValue)) {\n              return;\n            }\n\n            this.values[i].value = newValue;\n\n            if (i > this.index) {\n              return;\n            }\n\n            if (i < this.index) {\n              this.index = i;\n              this.elems = children;\n\n              return;\n            }\n\n            const found = findInArray(this.values, ({ value }) => (\n              this.equals(value, args.value)\n            ));\n\n            if (found) {\n              this.index = found.key;\n              this.elems = found.value.children;\n            } else {\n              this.index = Infinity;\n              this.elems = null;\n            }\n          }, this);\n        } else {\n          val = undefined;\n        }\n\n        if (this.equals(val, value) && this.index === Infinity) {\n          this.index = i;\n          this.elems = children;\n        }\n\n        values.push({\n          name,\n          children,\n          value: val\n        });\n      }, []);\n    }\n\n    afterConstruct() {\n      this.evaluateAndWatch(watchArgs, () => {\n        const {\n          value: newValue\n        } = this.args;\n\n        this.index = Infinity;\n\n        iterateArray(this.values, ({ name, value, children }, i) => {\n          const val = name === 'd-default'\n            ? newValue\n            : value;\n\n          if (this.equals(val, newValue) && this.index === Infinity) {\n            this.index = i;\n            this.elems = children;\n          }\n        });\n\n        if (this.index === Infinity) {\n          this.elems = null;\n        }\n      });\n    }\n\n    equals(value1, value2) {\n      return value1 === value2;\n    }\n  }\n\n  return {\n    name: 'd-switch',\n    value: DSwitch\n  };\n}\n","import { collectFromObject, iterateObject, keys } from '../utils';\n\nexport function registerDAttr(Mixin) {\n  class DAttr extends Mixin {\n    attrs = {};\n\n    afterUpdate(newValue) {\n      const {\n        elem,\n        args,\n        attrs\n      } = this;\n\n      if (args) {\n        newValue = collectFromObject(args, (attrs, attr) => {\n          attrs[attr] = newValue;\n        });\n      }\n\n      iterateObject(attrs, (value, prop) => {\n        if (!(prop in newValue)) {\n          elem.removeAttr(prop);\n        }\n      });\n      elem.attr(newValue);\n\n      this.attrs = newValue;\n    }\n\n    beforeRemove() {\n      const {\n        elem,\n        attrs\n      } = this;\n\n      elem.removeAttr.apply(elem, keys(attrs));\n    }\n  }\n\n  return {\n    name: 'd-attr',\n    value: DAttr\n  };\n}\n\n","import { isFunction } from '../utils';\n\nexport function registerDBind(Mixin) {\n  class DBind extends Mixin {\n    afterUpdate(value) {\n      if (this.off) {\n        this.off();\n      }\n\n      if (!isFunction(value)) {\n        return;\n      }\n\n      if (this.args) {\n        this.off = this.elem.on(this.args.join(','), value);\n      } else {\n        console.error('Provide \"d-bind\" mixin with an event names (like \"d-bind(click)\" or \"d-bind(keyup, keypress)\")!');\n      }\n    }\n\n    beforeRemove() {\n      const { off } = this;\n\n      if (off) {\n        off();\n      }\n    }\n  }\n\n  return {\n    name: 'd-bind',\n    value: DBind\n  };\n}\n","import {\n  isArray, isString,\n  iterateArray, iterateObject\n} from '../utils';\n\nconst EMPTY_SPACE_REGEX = /\\s+/;\n\nexport function registerDClass(Mixin) {\n  class DClass extends Mixin {\n    classes = [];\n\n    afterUpdate(newValue) {\n      const {\n        elem,\n        args,\n        classes\n      } = this;\n      const newClasses = [];\n\n      if (args) {\n        newValue = newValue\n          ? args\n          : [];\n      }\n\n      if (isString(newValue)) {\n        newValue = newValue.split(EMPTY_SPACE_REGEX);\n      }\n\n      if (isArray(newValue)) {\n        iterateArray(classes, (cls) => {\n          if (newValue.indexOf(cls) === -1) {\n            elem.removeClass(cls);\n          }\n        });\n        iterateArray(newValue, (cls) => {\n          if (isString(cls)) {\n            newClasses.push(cls);\n            elem.addClass(cls);\n          }\n        });\n      } else {\n        iterateArray(classes, (cls) => {\n          if (!newValue || !newValue[cls]) {\n            elem.removeClass(cls);\n          }\n        });\n        iterateObject(newValue, (val, cls) => {\n          if (val) {\n            newClasses.push(cls);\n            elem.addClass(cls);\n          }\n        });\n      }\n\n      this.classes = newClasses;\n    }\n\n    beforeRemove() {\n      const {\n        elem,\n        classes\n      } = this;\n\n      elem.removeClass.apply(elem, classes);\n    }\n  }\n\n  return {\n    name: 'd-class',\n    value: DClass\n  };\n}\n","import { isFunction, isString } from '../utils';\n\nexport function registerDElem(Mixin, createBlock, Block) {\n  class DElem extends Mixin {\n    static evaluate = false;\n\n    constructor(opts) {\n      super(opts);\n\n      const {\n        args,\n        parentTemplate,\n        elem\n      } = this;\n      let scope = parentTemplate;\n      let value = this.evaluateOnce();\n\n      if (args) {\n        scope = value instanceof Block\n          ? value\n          : parentTemplate;\n        value = args[0];\n      }\n\n      if (isFunction(value)) {\n        value(elem);\n      } else if (isString(value)) {\n        scope[value] = elem;\n      }\n    }\n  }\n\n  return {\n    name: 'd-elem',\n    value: DElem\n  };\n}\n","export function registerDHide(Mixin) {\n  class DHide extends Mixin {\n    afterUpdate(value) {\n      const { elem } = this;\n\n      if (value) {\n        elem.hide();\n      } else {\n        elem.show();\n      }\n    }\n\n    beforeRemove() {\n      this.elem.show();\n    }\n  }\n\n  return {\n    name: 'd-hide',\n    value: DHide\n  };\n}\n","import { isFunction, isString } from '../utils';\n\nexport function registerDNode(Mixin, createBlock, Block) {\n  class DNode extends Mixin {\n    static evaluate = false;\n\n    constructor(opts) {\n      super(opts);\n\n      const {\n        args,\n        parentTemplate,\n        node\n      } = this;\n      let scope = parentTemplate;\n      let value = this.evaluateOnce();\n\n      if (args) {\n        scope = value instanceof Block\n          ? value\n          : parentTemplate;\n        value = args[0];\n      }\n\n      if (isFunction(value)) {\n        value(node);\n      } else if (isString(value)) {\n        scope[value] = node;\n      }\n    }\n  }\n\n  return {\n    name: 'd-node',\n    value: DNode\n  };\n}\n","export function registerDOn(Mixin) {\n  class DOn extends Mixin {\n    static evaluate = false;\n\n    constructor(opts) {\n      super(opts);\n\n      if (this.args) {\n        this.off = this.elem.on(this.args.join(','), () => {\n          this.evaluateOnce();\n        });\n      } else {\n        console.error('Provide \"d-on\" mixin with an event names (like \"d-on(click)\" or \"d-on(keyup, keypress)\")!');\n      }\n    }\n\n    beforeRemove() {\n      const { off } = this;\n\n      if (off) {\n        off();\n      }\n    }\n  }\n\n  return {\n    name: 'd-on',\n    value: DOn\n  };\n}\n","export function registerDShow(Mixin) {\n  class DShow extends Mixin {\n    afterUpdate(value) {\n      const { elem } = this;\n\n      if (value) {\n        elem.show();\n      } else {\n        elem.hide();\n      }\n    }\n\n    beforeRemove() {\n      this.elem.show();\n    }\n  }\n\n  return {\n    name: 'd-show',\n    value: DShow\n  };\n}\n","import {\n  isString, iterateObject, keys,\n  collectFromObject, collectFromArray\n} from '../utils';\n\nconst CSS_STYLES_SEPARATOR_REGEX = /; ?/;\n\nexport function registerDStyle(Mixin) {\n  class DStyle extends Mixin {\n    css = {};\n\n    afterUpdate(newValue, oldValue) {\n      const {\n        elem,\n        args,\n        css\n      } = this;\n\n      if (args) {\n        newValue = collectFromObject(args, (css, prop) => {\n          css[prop] = newValue;\n        });\n      }\n\n      if (isString(newValue)) {\n        newValue = collectFromArray(\n          newValue\n            .split(CSS_STYLES_SEPARATOR_REGEX)\n            .filter(Boolean),\n          addCSSProp\n        );\n      }\n\n      iterateObject(css, (value, prop) => {\n        if (!newValue[prop]) {\n          elem.removeCSS(prop);\n        }\n      });\n      elem.css(newValue);\n\n      this.css = newValue;\n    }\n\n    beforeRemove() {\n      const {\n        elem,\n        css\n      } = this;\n\n      elem.removeCSS.apply(elem, keys(css));\n    }\n  }\n\n  return {\n    name: 'd-style',\n    value: DStyle\n  };\n}\n\nfunction addCSSProp(css, item) {\n  const [prop, value] = item;\n\n  css[prop] = value;\n}\n","import {\n  isArray, isFunction, isNil,\n  collectFromArray\n} from '../utils';\n\nexport function registerDValue(Mixin, createBlock, Block) {\n  class DValue extends Mixin {\n    static evaluate = false;\n\n    constructor(opts) {\n      super(opts);\n\n      const {\n        args,\n        parentTemplate,\n        elem,\n        node\n      } = this;\n      const name = elem.name();\n      const type = elem.prop('type');\n      const value = this.evaluateOnce();\n      let initialScopeValue = null;\n\n      this.prop = getProp(name, type, elem);\n      this.name = name;\n      this.type = type;\n      this.value = value;\n      this.options = elem.find('option');\n      this.scope = parentTemplate;\n\n      if (args) {\n        this.name = args[0];\n        this.scope = value instanceof Block\n          ? value\n          : parentTemplate;\n      }\n\n      if (!isFunction(value)) {\n        initialScopeValue = this.scope.$$.evaluate(getEvalFunction(value), (newValue) => {\n          if (this.currentValue !== newValue) {\n            this.currentValue = newValue;\n            this.setProp(newValue);\n          }\n        }, this);\n      }\n\n      const initialElemValue = this.getProp(initialScopeValue, true);\n      const isInitialScopeValueNull = isNil(initialScopeValue);\n      const isCheckbox = type === 'checkbox';\n      const changeScope = () => {\n        this.currentValue = this.getProp(this.currentValue);\n        this.changeScope();\n      };\n\n      if (isInitialScopeValueNull || isCheckbox) {\n        this.currentValue = initialElemValue;\n        this.changeScope();\n\n        if (!isInitialScopeValueNull && isCheckbox) {\n          this.setProp(initialScopeValue);\n        }\n      } else {\n        this.currentValue = initialScopeValue;\n        this.setProp(initialScopeValue);\n      }\n\n      this.offElemListener = elem.on(getListenerName(name, type), (e) => {\n        if (e.target === node) {\n          changeScope();\n        }\n      });\n      this.offFormListener = elem.closest('form').on('reset', () => {\n        setTimeout(changeScope, 0);\n      });\n    }\n\n    changeScope() {\n      const {\n        scope,\n        value,\n        currentValue\n      } = this;\n\n      if (isFunction(value)) {\n        value(currentValue);\n      } else {\n        scope[value] = currentValue;\n      }\n    }\n\n    setProp(value) {\n      const {\n        elem,\n        name,\n        prop,\n        type,\n        node,\n        options\n      } = this;\n\n      if (prop === 'text') {\n        elem.text(value);\n      } else if (prop === 'multiple-select') {\n        options.forEach((option) => {\n          option.selected = value.indexOf(option.value) !== -1;\n        });\n      } else {\n        elem.prop(prop, getValueForSetting(name, value, type, node.value));\n      }\n    }\n\n    getProp(values, init) {\n      const {\n        elem,\n        name,\n        prop,\n        type,\n        node,\n        options\n      } = this;\n\n      return prop === 'text'\n        ? elem.text()\n        : getValueForGetting(name, elem.prop(prop), type, node.value, values, options, init, prop === 'multiple-select');\n    }\n\n    beforeRemove() {\n      this.offElemListener();\n      this.offFormListener();\n    }\n  }\n\n  return {\n    name: 'd-value',\n    value: DValue\n  };\n}\n\nfunction getProp(name, type, elem) {\n  switch (name) {\n    case 'select': {\n      return elem.hasAttr('multiple')\n        ? 'multiple-select'\n        : 'value';\n    }\n\n    case 'input': {\n      if (type === 'file') {\n        return 'files';\n      }\n\n      return type === 'radio' || type === 'checkbox'\n        ? 'checked'\n        : 'value';\n    }\n\n    default: {\n      return elem.hasAttr('contentEditable')\n        ? 'text'\n        : 'value';\n    }\n  }\n}\n\nfunction getValueForSetting(name, value, type, inputValue) {\n  if (name !== 'input') {\n    return value;\n  }\n\n  const isRadio = type === 'radio';\n\n  if (!isRadio && type !== 'checkbox') {\n    return value;\n  }\n\n  return isRadio\n    ? value === inputValue\n    : value.indexOf(inputValue) !== -1;\n}\n\nfunction getValueForGetting(name, value, type, inputValue, values, options, init, isMultiple) {\n  switch (name) {\n    case 'select': {\n      if (!isMultiple) {\n        return value;\n      }\n\n      return collectFromArray(options, addValue, []);\n    }\n\n    case 'input': {\n      if (type !== 'radio' && type !== 'checkbox') {\n        return value;\n      }\n\n      if (type === 'radio') {\n        return value\n          ? inputValue\n          : null;\n      }\n\n      if (!value && init) {\n        return values;\n      }\n\n      if (value) {\n        if (values) {\n          return values.indexOf(inputValue) === -1\n            ? values.concat(inputValue)\n            : values;\n        }\n\n        return [inputValue];\n      }\n\n      if (!isArray(values)) {\n        return [];\n      }\n\n      const index = values.indexOf(inputValue);\n\n      if (index !== -1) {\n        return [\n          ...values.slice(0, index),\n          ...values.slice(index + 1)\n        ];\n      }\n\n      return values;\n    }\n\n    default: {\n      return value;\n    }\n  }\n}\n\nfunction getListenerName(name, type) {\n  switch (name) {\n    case 'select': {\n      return 'change';\n    }\n\n    case 'input': {\n      return (\n        type === 'radio'\n        || type === 'checkbox'\n        || type === 'color'\n        || type === 'file'\n      )\n        ? 'change'\n        : 'change input';\n    }\n\n    default: {\n      return 'input';\n    }\n  }\n}\n\nfunction getEvalFunction(value) {\n  return (scope) => scope[value];\n}\n\nfunction addValue(values, { selected, value }) {\n  if (selected && values.indexOf(value) === -1) {\n    values.push(value);\n  }\n}\n","/**\n * @module Block\n * @private\n * @mixin\n * @description Exports Block class.\n */\n\nimport { Elem } from './Elem';\nimport {\n  defineFrozenProperties, defineProperties,\n  assign, escapeRegex, mapObject,\n  toObjectKeys, collectFromObject,\n  iterateArray, iterateObject,\n  isFunction, isNil, isArray,\n  setToStringTag, hasOwnProperty,\n  removeArrayElem, create,\n  getProto, setProto, keys\n} from './utils';\nimport * as Blocks from './blocks';\nimport * as Mixins from './mixins';\n\n/**\n * @typedef {Error} EvaluationError\n * @public\n * @property {String} expression - Expression which has been evaluated with the error.\n * @property {Block} block - Block in context of which the expression has been evaluated with the error.\n */\n\n/**\n * @callback Watcher\n * @public\n * @param {*} newValue - New value.\n * @param {*} oldValue - Old value.\n */\n\n/**\n * @callback VarsWatcher\n * @public\n */\n\n/**\n * @callback Wrapper\n * @public\n * @param {Block} Block class to wrap.\n * @returns {Block} New Block class.\n */\n\n/**\n * @callback AfterUpdate\n * @public\n * @param {*} newValue - New value.\n * @param {*} oldValue - Old value.\n * @param {*} mixin - Mixin instance.\n */\n\n/**\n * @callback BlockRegisterHook\n * @public\n * @param {Block} Block - Registering block.\n * @param {String} name - Block name.\n * @returns Return value is used for registering the block.\n * If Block subclass returned it's registered instead of the initial block, otherwise\n * the initial block is used.\n */\n\n/**\n * @callback MixinRegisterHook\n * @public\n * @param {Block} Mixin - Registering mixin.\n * @param {String} name - Mixin name.\n * @returns Return value is used for registering the mixin.\n * If Mixin subclass returned it's registered instead of the initial mixin, otherwise\n * the initial mixin is used.\n */\n\nconst rootBlocks = create(null);\nconst rootMixins = create(null);\nconst blockHooks = [];\nconst mixinHooks = [];\nconst { isPrototypeOf } = {};\nconst TAG_NAME_REGEX = /^[a-z][a-z\\d\\-_.:!@#$%^&*()[\\]{}='\"\\\\]*$/i;\nconst ATTR_NAME_REGEX = /^[\\u0000-\\u0020\\s'\">/=]+$/;\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst D_REST_REGEX = /^d-rest(?:#|$)/;\nconst WATCHED_ARG_PREFIX_REGEX = /^args\\./;\nconst WATCHED_GLOBAL_PREFIX_REGEX = /^globals\\./;\nconst NAMED_D_BLOCK_REGEX = /^d-block:([\\s\\S]+)$/;\nconst COMMA_REGEX = /,/;\nconst afterElem = new Elem();\nconst emptyChildren = [];\nconst emptyAttrs = {};\nlet evalMode;\nlet getting = [];\nlet changed;\n\n/**\n * @class Block\n * @public\n * @param {Object} opts - Element options.\n * @returns {Block} Instance of Block.\n * @description Class for dynamic templating.\n *\n * @example\n * import { D, Block, initApp } from 'dwayne';\n *\n * class App extends Block {\n *   static template = '<Hello text=\"{text}\"/>';\n *\n *   constructor(opts) {\n *     super(opts);\n *\n *     this.text = 'world (0)';\n *     this.times = 0;\n *\n *     this.setInterval();\n *   }\n *\n *   setInterval() {\n *     D(1000).interval(() => {\n *       this.text = `world (${ ++this.times })`;\n *     });\n *   }\n * }\n *\n * Block.block('App', App);\n * Block.block('Hello', 'Hello, {args.text}!');\n *\n * initApp('App', document.getElementById('root'));\n */\nclass Block {\n  static _blocks = create(rootBlocks);\n  static _mixins = create(rootMixins);\n\n  /**\n   * @member {Object} [Block.defaultArgs = null]\n   * @type {Object}\n   * @public\n   * @description Block default args.\n   */\n  static defaultArgs = null;\n\n  /**\n   * @member {Object} [Block.defaultLocals = null]\n   * @type {Object}\n   * @public\n   * @description Block default locals.\n   */\n  static defaultLocals = null;\n\n  /**\n   * @member {Object} [Block.template = { vars: [], value: [] }]\n   * @type {Object}\n   * @public\n   * @description Block template.\n   */\n  static template = {\n    vars: [],\n    value: []\n  };\n\n  /**\n   * @method Block.onEvalError\n   * @public\n   * @param {EvaluationError} err - The method is called when an evaluation error occurs.\n   */\n  static onEvalError(err) {\n    console.error(`Eval error (evaluating \"${ err.expression }\" in context of block \"${ err.block.$$.name }\"):`, err);\n  }\n\n  /**\n   * @method Block.beforeRegisterBlock\n   * @public\n   * @param {BlockRegisterHook} hook - Block register hook.\n   */\n  static beforeRegisterBlock(hook) {\n    blockHooks.push(hook);\n\n    return () => {\n      removeArrayElem(blockHooks, hook);\n    };\n  }\n\n  /**\n   * @method Block.beforeRegisterMixin\n   * @public\n   * @param {MixinRegisterHook} hook - Mixin register hook.\n   */\n  static beforeRegisterMixin(hook) {\n    mixinHooks.push(hook);\n\n    return () => {\n      removeArrayElem(mixinHooks, hook);\n    };\n  }\n\n  /**\n   * @method Block.block\n   * @public\n   * @param {String} name - Block or mixin name.\n   * @param {Template|typeof Block} Subclass - Subclass of Block or template string of it.\n   * @returns {typeof Block|undefined} Returns registered Block or undefined if the block hasn't been registered.\n   * @description Register block in the namespace of this.\n   */\n  static block(name, Subclass) {\n    if (isFunction(Subclass) && !isInstanceOf(Block, Subclass)) {\n      const constructor = Subclass;\n\n      Subclass = class extends Block {\n        constructor(opts) {\n          super(opts);\n\n          this::constructor(opts);\n        }\n      };\n    }\n\n    if (!isFunction(Subclass) && isArray(Subclass)) {\n      Subclass = class extends Block {\n        static template = {\n          vars: [],\n          value: Subclass\n        };\n      };\n    }\n\n    if (!isFunction(Subclass) && Subclass.vars && Subclass.value) {\n      Subclass = class extends Block {\n        static template = Subclass;\n      };\n    }\n\n    if (!isFunction(Subclass)) {\n      console.warn(`Block must be a string (representing a block template), a function or a class that extends Block class (name: \"${ name }\") (Block.block)`);\n\n      return;\n    }\n\n    if (!isInstanceOf(Block, Subclass)) {\n      extendBlock(Subclass);\n    }\n\n    if (rootBlocks[name]) {\n      console.warn(`The \"${ name }\" block is a built-in block so the block will not be registered (Block.block)`);\n\n      return;\n    }\n\n    if (!TAG_NAME_REGEX.test(name)) {\n      console.warn(`Name \"${ name }\" is not allowed for blocks so the block will not be registered (Block.block)`);\n\n      return;\n    }\n\n    if (!hasOwnProperty(this, '_blocks')) {\n      this._blocks = create(getProto(this)._blocks);\n    }\n\n    if (!hasOwnProperty(this, 'defaultLocals')) {\n      this.defaultLocals = {};\n    }\n\n    if (!hasOwnProperty(this, 'defaultArgs')) {\n      this.defaultArgs = create(null);\n    }\n\n    try {\n      Subclass = blockHooks.reduce((returnValue, hook) => {\n        const currentReturnValue = hook(returnValue, name, this);\n\n        return isInstanceOf(Block, currentReturnValue)\n          ? currentReturnValue\n          : returnValue;\n      }, Subclass);\n    } catch (err) {\n      console.error('Uncaught error in \"beforeRegisterBlock\" hook:', err);\n    }\n\n    const {\n      vars,\n      value\n    } = Subclass.template;\n\n    Subclass._html = value;\n    Subclass._vars = vars;\n\n    if (hasOwnProperty(Subclass, 'defaultArgs')) {\n      setProto(Subclass.defaultArgs, null);\n    }\n\n    this._blocks[name] = Subclass;\n\n    return Subclass;\n  }\n\n  /**\n   * @method Block.mixin\n   * @public\n   * @param {String} name - Block or mixin name.\n   * @param {typeof Mixin|AfterUpdate} Subclass - Subclass of Mixin or AfterUpdate callback.\n   * @returns {typeof Mixin|undefined} Returns registered Block or undefined if the block hasn't been registered.\n   * @description Register mixin in the namespace of this.\n   */\n  static mixin(name, Subclass) {\n    if (isFunction(Subclass) && !isInstanceOf(Mixin, Subclass)) {\n      const afterUpdate = Subclass;\n\n      Subclass = class extends Mixin {\n        afterUpdate(newValue, oldValue) {\n          this::afterUpdate(newValue, oldValue, this);\n        }\n      };\n    }\n\n    if (!isInstanceOf(Mixin, Subclass)) {\n      console.warn(`The \"${ name }\" class does not extend Mixin and will not be registered (Block.mixin)`);\n\n      return;\n    }\n\n    if (rootMixins[name]) {\n      console.warn(`The \"${ name }\" mixin is a built-in mixin so the mixin will not be registered (Block.mixin)`);\n\n      return;\n    }\n\n    if (!ATTR_NAME_REGEX.test(name)) {\n      console.warn(`Name \"${ name }\" is not allowed for mixins so the mixin will not be registered (Block.mixin)`);\n\n      return;\n    }\n\n    if (!hasOwnProperty(this, '_mixins')) {\n      this._mixins = create(getProto(this)._mixins);\n    }\n\n    try {\n      Subclass = mixinHooks.reduce((returnValue, hook) => {\n        const currentReturnValue = hook(returnValue, name, this);\n\n        return isInstanceOf(Mixin, currentReturnValue)\n          ? currentReturnValue\n          : returnValue;\n      }, Subclass);\n    } catch (err) {\n      console.error('Uncaught error in \"beforeRegisterMixin\" hook:', err);\n    }\n\n    Subclass._match = constructMixinRegExp(name);\n\n    this._mixins[name] = Subclass;\n\n    return Subclass;\n  }\n\n  /**\n   * @method Block.wrap\n   * @public\n   * @param {...Wrapper} wrappers - Functions that return wrapped block.\n   * @returns {typeof Block} New block.\n   * @description Method for wrapping blocks into another blocks.\n   * It is considered best practice to just extends the old block with a new one.\n   *\n   * @example\n   * class MyBlock extends Block {\n   *   static template = '<div>123</div>';\n   * }\n   *\n   * MyBlock.wrap((Block) => {\n   *   return class extends Block {\n   *     static template = `<section class=\"wrapper\">${ Block.template }</section>`;\n   *\n   *     constructor(opts) {\n   *       super(opts);\n   *\n   *       this.additionalVar = 'additional';\n   *     }\n   *   };\n   * });\n   */\n  static wrap(...wrappers) {\n    return wrappers.reduce(wrapBlock, this);\n  }\n\n  constructor(opts) {\n    const {\n      name,\n      args: originalArgs,\n      dBlockName,\n      children,\n      parent,\n      parentElem,\n      parentBlock,\n      parentScope,\n      parentTemplate,\n      prevBlock\n    } = opts;\n    const watchersToRemove = [];\n    const constructor = getProto(this).constructor;\n    const childrenBlocks = [];\n    const mixins = [];\n    const isParentBlock = parent instanceof Block;\n\n    defineFrozenProperties(this, {\n      /**\n       * @member {Block} Block#$\n       * @type {Block}\n       * @public\n       * @description This.\n       */\n      $: this,\n\n      /**\n       * @member {Object} Block#$$\n       * @type {Object}\n       * @protected\n       * @property {Object} args - Private args scope.\n       * @property {Object[]} argsChildren - Block args children.\n       * @property {Block[]} children - Child blocks.\n       * @property {Mixin[]} mixins - Child mixins.\n       * @property {Elem} parentElem - Parent element.\n       * @property {Elem} content - Content elements.\n       * @property {Function} evaluate - Evaluate function.\n       * @property {Object} globals - Private globals scope.\n       * @property {Object} locals - Private locals scope.\n       * @property {Object[]} watchersToRemove - Watchers to remove before removing element.\n       */\n      $$: {\n        name,\n        dBlockName,\n        dBlocks: [],\n        parent,\n        parentElem,\n        parentScope,\n        parentBlock,\n        parentTemplate,\n        content: new Elem(),\n        ns: constructor,\n        argsChildren: children,\n        children: childrenBlocks,\n        mixins,\n        prevBlock,\n        watchersToRemove,\n        isRemoved: false,\n        evaluate: (func, onChange, targetBlock, forDElements, forDItem, forDEach) => {\n          if (!isFunction(func)) {\n            return func;\n          }\n\n          forDElements = !!forDElements;\n          forDItem = !!forDItem;\n\n          const scope = (name === '#d-item' && !forDItem) || forDEach\n            ? (forDEach || this).$$.scope\n            : this;\n          const { watchersToRemove } = targetBlock ? targetBlock.$$ : {};\n          const onChangeFlag = !!onChange;\n\n          const evaluate = () => {\n            let result;\n\n            if (onChangeFlag) {\n              evalMode = true;\n              getting = [];\n            }\n\n            try {\n              result = func(scope);\n            } catch (err) {\n              err.expression = func.expression;\n              err.original = func.original;\n              err.block = this;\n\n              if (isFunction(constructor.onEvalError)) {\n                try {\n                  constructor.onEvalError(err);\n                } catch (e) {\n                  console.error('Uncaught error in onEvalError:', e);\n                }\n              }\n            }\n\n            if (onChangeFlag) {\n              const localWatchers = [];\n\n              iterateArray(getting, (watchers) => {\n                const watcher = () => {\n                  const newResult = evaluate();\n\n                  if (newResult !== result && !targetBlock.$$.isRemoved) {\n                    onChange(newResult, result);\n                  }\n                };\n                const watcherBlock = {\n                  forDElements,\n                  watcher,\n                  watchers\n                };\n\n                watcher.onRemove = () => {\n                  iterateArray(localWatchers, (watcherBlock) => {\n                    const {\n                      watcher,\n                      watchers\n                    } = watcherBlock;\n\n                    removeArrayElem(watchersToRemove, watcherBlock);\n                    removeArrayElem(watchers, watcher);\n                  });\n                };\n\n                localWatchers.push(watcherBlock);\n                watchersToRemove.push(watcherBlock);\n                watchers.push(watcher);\n              });\n\n              evalMode = false;\n              getting = [];\n            }\n\n            return result;\n          };\n\n          return evaluate();\n        },\n        remove: (isParentSignal) => {\n          this.$$.isRemoved = true;\n\n          removeWatchers(watchersToRemove);\n\n          iterateArray(childrenBlocks, removeWithParentSignal);\n\n          iterateArray(mixins, removeWithParentSignal);\n\n          try {\n            this.beforeRemove();\n          } catch (err) {\n            console.error(`Uncaught error in ${ name }#beforeRemove:`, err);\n          }\n\n          if (!isParentSignal && isParentBlock) {\n            parent.$$.removeContent(this.$$.content);\n          }\n\n          if (!isParentSignal && parentBlock) {\n            removeArrayElem(parentBlock.$$.children, this);\n          }\n\n          this.$$.content.remove();\n        },\n        addContent: (contentToAdd, notRecursive) => {\n          const index = this.$$.content.indexOf(contentToAdd[0].previousSibling) + 1;\n\n          if (index === 0) {\n            this.$$.content = contentToAdd.add(this.$$.content);\n          } else {\n            this.$$.content = this.$$.content\n              .slice(0, index)\n              .add(contentToAdd, this.$$.content.slice(index));\n          }\n\n          if (isParentBlock && !notRecursive) {\n            parent.$$.addContent(contentToAdd);\n          }\n        },\n        moveContent: (contentToMove, after) => {\n          const index = this.$$.content.indexOf(contentToMove[0]);\n          const indexToPut = this.$$.content.indexOf(after[0]) + 1;\n\n          if (indexToPut === 0) {\n            this.$$.content = contentToMove.add(\n              this.$$.content.slice(indexToPut, index),\n              this.$$.content.slice(index + contentToMove.length)\n            );\n          } else if (index > indexToPut) {\n            this.$$.content = this.$$.content\n              .slice(0, indexToPut)\n              .add(\n                contentToMove,\n                this.$$.content.slice(indexToPut, index),\n                this.$$.content.slice(index + contentToMove.length)\n              );\n          } else {\n            this.$$.content = this.$$.content\n              .slice(0, index)\n              .add(\n                this.$$.content.slice(index + contentToMove.length, indexToPut),\n                contentToMove,\n                this.$$.content.slice(indexToPut)\n              );\n          }\n\n          if (isParentBlock && indexToPut) {\n            parent.$$.moveContent(contentToMove, after);\n          }\n        },\n        removeContent: (contentToRemove) => {\n          this.$$.content = this.$$.content.filter((elem) => (\n            contentToRemove.indexOf(elem) === -1\n          ));\n\n          if (isParentBlock) {\n            parent.$$.removeContent(contentToRemove);\n          }\n        },\n        insertInStartOfIt: (contentToInsert, moveFlag) => {\n          const { prevBlock } = this.$$;\n          let after = afterElem;\n\n          if (prevBlock instanceof Block) {\n            after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n          } else if (prevBlock) {\n            after = prevBlock;\n            contentToInsert.insertAfter(prevBlock);\n\n            if (isParentBlock) {\n              if (moveFlag) {\n                parent.$$.moveContent(contentToInsert, after);\n              } else {\n                parent.$$.addContent(contentToInsert, true);\n              }\n            }\n          } else if (isParentBlock) {\n            const { prevBlock } = parent.$$;\n\n            if (prevBlock) {\n              let notRecursive;\n\n              if (prevBlock instanceof Block) {\n                after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n                notRecursive = true;\n              } else {\n                after = prevBlock;\n                notRecursive = false;\n                contentToInsert.insertAfter(prevBlock);\n              }\n\n              if (moveFlag) {\n                parent.$$.moveContent(contentToInsert, after);\n              } else {\n                parent.$$.addContent(contentToInsert, notRecursive);\n              }\n            } else {\n              after = parent.$$.insertInStartOfIt(contentToInsert, moveFlag);\n            }\n          } else {\n            contentToInsert.into(parentElem, false);\n          }\n\n          if (moveFlag) {\n            this.$$.moveContent(contentToInsert, after);\n          } else {\n            this.$$.addContent(contentToInsert, true);\n          }\n\n          return after;\n        },\n        insertAfterIt: (contentToInsert, moveFlag) => {\n          const { prevBlock } = this.$$;\n          let after = afterElem;\n          let tryToAddOrMove;\n\n          if (this.$$.content.length) {\n            after = this.$$.content.elem(-1);\n            tryToAddOrMove = true;\n            contentToInsert.insertAfter(after);\n          } else if (prevBlock instanceof Block) {\n            after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n          } else if (prevBlock) {\n            after = prevBlock;\n            tryToAddOrMove = true;\n            contentToInsert.insertAfter(prevBlock);\n          } else if (isParentBlock) {\n            after = parent.$$.insertInStartOfIt(contentToInsert, moveFlag);\n          } else {\n            contentToInsert.into(parentElem, false);\n          }\n\n          if (isParentBlock && tryToAddOrMove) {\n            if (moveFlag) {\n              parent.$$.moveContent(contentToInsert, after);\n            } else {\n              parent.$$.addContent(contentToInsert);\n            }\n          }\n\n          return after;\n        }\n      }\n    });\n\n    iterateObject(constructor.defaultLocals, (value, variable) => {\n      this[variable] = value;\n    });\n    iterateArray(constructor._vars, (variable) => {\n      this[variable] = this[variable];\n    });\n\n    const argsObject = create(null);\n    let args = create(constructor.defaultArgs || null);\n    let wasDRest;\n\n    iterateObject(originalArgs, (value, arg) => {\n      const isDRest = D_REST_REGEX.test(arg);\n      const localArgs = isDRest || wasDRest\n        ? create(args)\n        : args;\n\n      args = localArgs;\n\n      if (isDRest) {\n        const restArgs = parentScope.$$.evaluate(value, (value) => {\n          iterateObject(localArgs, cleanProperty);\n          assign(localArgs, transformRestArgs(value));\n          calculateArgs(args, argsObject);\n        }, this);\n\n        wasDRest = true;\n\n        return assign(localArgs, transformRestArgs(restArgs));\n      }\n\n      const isDElements = name === 'd-elements';\n      const forDElements = isDElements && arg === 'value';\n\n      wasDRest = false;\n\n      if (name !== 'd-each' || arg !== 'uid') {\n        value = parentScope.$$.evaluate(value, (value) => {\n          localArgs[arg] = value;\n          calculateArgs(args, argsObject);\n        }, this, forDElements, isDElements && parentBlock.$$.name === '#d-item');\n      }\n\n      localArgs[arg] = value;\n    });\n\n    defineFrozenProperties(this, {\n      /**\n       * @member {Object} Block#args\n       * @type {Object}\n       * @public\n       */\n      args: argsObject,\n\n      /**\n       * @member {Object} Block#globals\n       * @type {Object}\n       * @public\n       */\n      globals: create(\n        parentScope\n          ? parentScope.globals\n          : null\n      ),\n\n      /**\n       * @member {Block|undefined} Block#parentScope\n       * @type {Block|undefined}\n       * @public\n       */\n      parentScope,\n\n      /**\n       * @member {Block|undefined} Block#parentTemplate\n       * @type {Block|undefined}\n       * @public\n       */\n      parentTemplate\n    });\n\n    calculateArgs(args, argsObject);\n\n    if (parentBlock) {\n      parentBlock.$$.children.push(this);\n    }\n  }\n\n  /**\n   * @method Block#afterConstruct\n   * @public\n   * @description Is called after block construction (including all scopes)\n   * but before rendering the block and its children.\n   */\n  afterConstruct() {}\n\n  /**\n   * @method Block#afterRender\n   * @public\n   * @description Is called after block has been rendered.\n   */\n  afterRender() {}\n\n  /**\n   * @method Block#beforeRemove\n   * @public\n   * @description Is called before the block removal.\n   */\n  beforeRemove() {}\n\n  /**\n   * @method Block#getContent\n   * @public\n   * @returns {Elem}\n   * @description Returns contents of the block.\n   */\n  getContent() {\n    return this.$$.content.slice();\n  }\n\n  /**\n   * @method Block#evaluateAndWatch\n   * @public\n   * @param {Function} func - Function to evaluate.\n   * @param {Watcher} callback - Callback which is called when the expression value is changed.\n   * @returns {*} Evaluation result.\n   * @description Method for evaluating an expression in context of the block and watching for the changes.\n   */\n  evaluateAndWatch(func, callback) {\n    return this.$$.evaluate(func, callback, this);\n  }\n\n  /**\n   * @method Block#watch\n   * @public\n   * @param {...('args'|'globals'|String)} [vars] - Vars to watch (args, globals or locals).\n   * If no specified all locals, args and globals are to be watched.\n   * If the 'args' string all args are to be watched.\n   * If the 'globals' string all globals are to be watched.\n   * @param {VarsWatcher} watcher - Called when watched vars are changed.\n   * @description Method for watching for vars. If no vars passed in arguments\n   * all vars are to be watched. If the 'args' string is in the arguments all args are to be watched.\n   * If the 'globals' string is in the arguments all globals are to be watched.\n   * Otherwise specified vars will be watched.\n   * Watchers should not be put inside the constructor. It is considered best\n   * practice to do it inside the {@link Block#afterConstruct} method.\n   * Note that these expressions (vars, i.e. \"args.arg\") are not to be\n   * evaluated so you cannot put there things like \"a[b]\" or any js code,\n   * only expressions like \"a\", \"b\", \"args.a\", \"args.b\" and \"globals.a\", \"globals.b\".\n   * Also note that if there are more than one var that are changed at once (synchronously)\n   * the watcher is called only once.\n   * Note that the watcher is executed right away because in most cases\n   * this behaviour is very convenient.\n   *\n   * @example\n   * class MyBlock extends Block {\n   *   static template = '<div />';\n   *\n   *   afterConstruct() {\n   *     this.watch('a', () => {});\n   *     this.watch('args.a', 'globals.r', () => {});\n   *     this.watch(() => {});\n   *   }\n   * }\n   */\n  watch(...vars) {\n    const oldWatcher = arguments[arguments.length - 1];\n\n    if (!isFunction(oldWatcher)) {\n      console.warn(`The last argument (watcher) wasn't specified (${ this.$$.name }#watch)`);\n\n      return;\n    }\n\n    const watcher = () => {\n      oldWatcher();\n    };\n\n    if (arguments.length === 1) {\n      watchForAllLocals(this, watcher);\n      watchForAllArgs(this, watcher);\n      watchForAllGlobals(this, watcher);\n\n      oldWatcher();\n\n      return;\n    }\n\n    iterateArray(arguments, (variable) => {\n      if (variable === oldWatcher) {\n        return;\n      }\n\n      variable = `${ variable }`;\n\n      if (variable === '$') {\n        return watchForAllLocals(this, watcher);\n      }\n\n      if (variable === 'args') {\n        return watchForAllArgs(this, watcher);\n      }\n\n      if (variable === 'globals') {\n        return watchForAllGlobals(this, watcher);\n      }\n\n      if (WATCHED_ARG_PREFIX_REGEX.test(variable)) {\n        variable = variable.replace(WATCHED_ARG_PREFIX_REGEX, '');\n\n        if (!this.$$.args[variable]) {\n          return;\n        }\n\n        this.$$.args[variable].watchers.perm.push(watcher);\n\n        return;\n      }\n\n      if (WATCHED_GLOBAL_PREFIX_REGEX.test(variable)) {\n        variable = variable.replace(WATCHED_GLOBAL_PREFIX_REGEX, '');\n\n        if (!this.$$.globals[variable]) {\n          return;\n        }\n\n        const { watchers } = this.$$.globals[variable];\n\n        watchers.perm.push(watcher);\n        this.$$.watchersToRemove.push({\n          watcher,\n          watchers\n        });\n\n        return;\n      }\n\n      if (!this.$$.locals[variable]) {\n        return;\n      }\n\n      this.$$.locals[variable].watchers.perm.push(watcher);\n    });\n\n    oldWatcher();\n  }\n}\n\nsetToStringTag(Block, 'Block');\nsetProto(Block.prototype, null);\n\nregisterBuiltIns(Blocks, rootBlocks, Block);\n\nconst blocks = Block._blocks;\n\nclass Mixin {\n  static evaluate = true;\n\n  /**\n   * @method Mixin.wrap\n   * @public\n   * @param {...Wrapper} wrappers - Functions that return wrapped mixin.\n   * @returns {Mixin} New mixin.\n   * @description Method for wrapping mixins.\n   * It is considered best practice to just extends the old mixin with a new one.\n   */\n  static wrap(...wrappers) {\n    return wrappers.reduce(wrapMixin, this);\n  }\n\n  constructor(opts) {\n    const {\n      name,\n      value,\n      dynamic,\n      elem,\n      args,\n      comment,\n      parentBlock,\n      parentScope,\n      parentTemplate\n    } = opts;\n    const watchersToRemove = [];\n    const watchers = [];\n\n    defineFrozenProperties(this, {\n      $$: {\n        name,\n        _value: value,\n        value,\n        isDynamic: dynamic,\n        parentScope,\n        parentBlock,\n        parentTemplate,\n        watchers,\n        watchersToRemove,\n        isRemoved: false,\n        evaluate: (watcher) => {\n          const {\n            isDynamic,\n            value,\n            _value\n          } = this.$$;\n          const currentValue = isDynamic\n            ? value\n            : parentScope.$$.evaluate(_value);\n\n          if (watcher) {\n            watchers.push(watcher);\n          }\n\n          return currentValue;\n        },\n        remove: (isParentSignal) => {\n          this.$$.isRemoved = true;\n\n          removeWatchers(watchersToRemove);\n\n          try {\n            this.beforeRemove();\n          } catch (err) {\n            console.error(`Uncaught error in ${ name }#beforeRemove:`, err);\n          }\n\n          if (!isParentSignal && parentBlock) {\n            removeArrayElem(parentBlock.$$.mixins, this);\n          }\n        }\n      }\n    });\n\n    this.args = args;\n    this.comment = comment;\n    this.parentScope = parentScope;\n    this.parentTemplate = parentTemplate;\n    this.elem = elem;\n    this.node = elem[0];\n\n    if (parentBlock) {\n      parentBlock.$$.mixins.push(this);\n    }\n  }\n\n  afterUpdate() {}\n\n  beforeRemove() {}\n\n  /**\n   * @method Block#evaluateAndWatch\n   * @public\n   * @param {Watcher} callback - Callback which is called when the mixin value is changed.\n   * @returns {*} Evaluation result.\n   * @description Method for evaluating the mixin value and watching for the changes.\n   */\n  evaluateAndWatch(callback) {\n    return this.$$.evaluate(callback);\n  }\n\n  /**\n   * @method Block#evaluateOnce\n   * @public\n   * @returns {*} Evaluation result.\n   * @description Method for evaluating the mixin value once.\n   */\n  evaluateOnce() {\n    return this.$$.evaluate();\n  }\n}\n\nsetToStringTag(Mixin, 'Mixin');\n\nregisterBuiltIns(Mixins, rootMixins, Mixin);\n\nconst mixins = Block._mixins;\n\nfunction initApp(html, node) {\n  const parentElem = new Elem(node).elem(0);\n\n  if (!parentElem.length) {\n    throw new Error('No valid element to insert the app into was given! (initApp)');\n  }\n\n  if (parentElem.prop('DwayneRootBlock')) {\n    throw new Error('There already exists a Dwayne app inside the given element! (initApp)');\n  }\n\n  if (isArray(html)) {\n    html = {\n      vars: [],\n      value: html\n    };\n  }\n\n  class RootBlock extends Block {\n    static _vars = html.vars;\n    static _html = html.value\n  }\n\n  const block = createBlock({\n    node: {\n      name: '#RootBlock'\n    },\n    Constructor: RootBlock,\n    parent: parentElem,\n    parentElem\n  });\n\n  parentElem\n    .prop('DwayneRootBlock', block)\n    .attr('dwayne-root', '');\n}\n\nfunction removeApp(node) {\n  const elem = new Elem(node);\n\n  if (!elem.length) {\n    throw new Error('No valid element to remove the app from was given! (removeApp)');\n  }\n\n  const { DwayneRootBlock } = elem[0];\n\n  if (!DwayneRootBlock) {\n    throw new Error('No app registered inside the given element! (removeApp)');\n  }\n\n  DwayneRootBlock.$$.remove();\n  elem.removeAttr('dwayne-root');\n\n  delete elem[0].DwayneRootBlock;\n}\n\nfunction registerBuiltIns(set, scope, proto) {\n  iterateObject(set, (register) => {\n    const {\n      name,\n      value\n    } = register(proto, createBlock, Block);\n\n    if (proto === Block) {\n      const {\n        vars,\n        value: html\n      } = value.template;\n\n      value._html = html;\n      value._vars = vars;\n    } else {\n      value._match = constructMixinRegExp(name);\n    }\n\n    scope[name] = value;\n  });\n}\n\nfunction createBlock({ node, Constructor, parent, parentElem, parentBlock, parentScope, parentTemplate, prevBlock }) {\n  const doc = new Elem(parentElem[0].ownerDocument);\n  const elem = parentElem[0].namespaceURI === SVG_NS\n    ? doc.create('svg')\n    : doc;\n  const localBlocks = parentScope ? parentScope.$$.ns._blocks : blocks;\n  const localMixins = parentScope ? parentScope.$$.ns._mixins : mixins;\n  let children = node.children = node.children || emptyChildren;\n  let args = node.attrs = node.attrs || emptyAttrs;\n  let name = node.name || 'UnknownBlock';\n  let constructor = Constructor || (node.name && localBlocks[node.name]);\n  let dBlockMatch;\n  let dBlockName;\n  let dBlockArgs;\n  let dBlockChildren;\n  let dElementsName;\n\n  if (name === 'd-block' && args.name) {\n    name = 'd-elements';\n    constructor = localBlocks[name];\n    dElementsName = args.name;\n    dBlockArgs = args;\n    dBlockChildren = children;\n    children = emptyChildren;\n\n    delete args.name;\n    args = {};\n  } else if (name === 'd-block' && hasOwnProperty(args, 'constructor')) {\n    name = 'UnknownBlock';\n    constructor = parentScope.$$.evaluate(args.constructor);\n\n    if (isFunction(constructor)) {\n      delete args.constructor;\n    } else {\n      constructor = null;\n    }\n  } else if ((dBlockMatch = name.match(NAMED_D_BLOCK_REGEX)) || name === 'd-block') {\n    constructor = blocks['d-block'];\n    dBlockName = dBlockMatch ? dBlockMatch[1] : null;\n  }\n\n  let blockInstance;\n\n  if (constructor) {\n    try {\n      blockInstance = new constructor({\n        name,\n        args,\n        dBlockName,\n        children,\n        parent,\n        parentElem,\n        parentBlock,\n        parentScope,\n        parentTemplate,\n        prevBlock\n      });\n    } catch (err) {\n      console.error(`Uncaught error in new ${ name }:`, err);\n      constructor = null;\n    }\n  }\n\n  if (!constructor) {\n    const {\n      value,\n      children\n    } = node;\n\n    const element = elem.create(name);\n    const currentAttrs = create(null);\n    let attrs = create(null);\n    let wasDRest;\n    const mixinDefaultOpts = {\n      elem: element,\n      parentBlock,\n      parentScope,\n      parentTemplate\n    };\n\n    iterateObject(args, (value, attr) => {\n      const isDRest = D_REST_REGEX.test(attr);\n      const localAttrs = isDRest || wasDRest\n        ? create(attrs)\n        : attrs;\n\n      attrs = localAttrs;\n\n      if (isDRest) {\n        const restAttrs = parentScope.$$.evaluate(value, (value) => {\n          setTimeout(() => {\n            iterateObject(localAttrs, cleanProperty);\n            assign(localAttrs, transformRestAttrs(\n              value, localMixins, mixinDefaultOpts\n            ));\n            calculateAttrs(attrs, currentAttrs, element, false);\n          }, 0);\n        }, parentBlock);\n\n        wasDRest = true;\n\n        return assign(localAttrs, transformRestAttrs(\n          restAttrs, localMixins, mixinDefaultOpts\n        ));\n      }\n\n      const match = mixinMatch(localMixins, attr);\n\n      wasDRest = false;\n\n      if (match) {\n        if (value === true) {\n          value = 'true';\n        }\n\n        localAttrs[attr] = {\n          type: 'mixin',\n          dynamic: false,\n          opts: {\n            value,\n            ...match,\n            ...mixinDefaultOpts\n          },\n          value\n        };\n\n        return;\n      }\n\n      localAttrs[attr] = {\n        type: 'attr',\n        value: parentScope.$$.evaluate(value, (value) => {\n          localAttrs[attr] = {\n            type: 'attr',\n            value\n          };\n          calculateAttrs(attrs, currentAttrs, element, false);\n        }, parentBlock)\n      };\n    });\n\n    const createMixins = calculateAttrs(attrs, currentAttrs, element, true);\n\n    if (name === '#comment') {\n      element.text(value);\n    }\n\n    if (name === '#text') {\n      if (isFunction(value)) {\n        let text = parentScope.$$.evaluate(value, (value) => {\n          if (isNil(value)) {\n            value = '';\n          }\n\n          element.text(`${ value }`);\n        }, parentBlock);\n\n        if (isNil(text)) {\n          text = '';\n        }\n\n        element.text(`${ text }`);\n      } else {\n        element.text(value);\n      }\n    }\n\n    if (children) {\n      const parentElem = name === 'template'\n        ? new Elem(element[0].content)\n        : element;\n      let prevBlock;\n\n      iterateArray(children, (child) => {\n        prevBlock = createBlock({\n          node: child,\n          parent: parentElem,\n          parentElem,\n          parentBlock,\n          parentScope,\n          parentTemplate,\n          prevBlock\n        });\n      });\n    }\n\n    const isParentBlock = parent instanceof Block;\n\n    if (prevBlock instanceof Block) {\n      prevBlock.$$.insertAfterIt(element, false);\n    } else if (prevBlock) {\n      element.insertAfter(prevBlock);\n\n      if (isParentBlock) {\n        parent.$$.addContent(element);\n      }\n    } else if (isParentBlock) {\n      parent.$$.insertInStartOfIt(element, false);\n    } else {\n      element.into(parentElem, false);\n    }\n\n    createMixins();\n\n    return element;\n  }\n\n  const {\n    $$,\n    args: Args,\n    globals,\n    ...locals\n  } = blockInstance;\n\n  if (dBlockMatch || name === 'd-block') {\n    parentScope.$$.dBlocks.push(blockInstance);\n  }\n\n  if (dBlockArgs) {\n    node = {\n      attrs: dBlockArgs,\n      children: dBlockChildren\n    };\n    node.name = parentScope.$$.evaluate(dElementsName, (newName) => {\n      node.name = newName;\n\n      Args.value = [node];\n    }, blockInstance, true);\n\n    Args.value = [node];\n    Args.parentScope = parentScope;\n  }\n\n  const html = name === 'd-elements'\n    ? Args.value || []\n    : constructor._html;\n\n  $$.args = constructPrivateScope(Args);\n  $$.locals = constructPrivateScope(locals);\n  $$.globals = constructPrivateScope(globals, 'globals', parentScope);\n\n  if (name === '#d-item') {\n    const scopeValues = {\n      [node.itemName]: node.item,\n      [node.indexName]: node.index\n    };\n    const scope = parentScope.$$.name === '#d-item'\n      ? parentScope.$$.scope\n      : parentScope;\n\n    $$.ns = parentScope.$$.ns;\n    $$.privateScope = constructPrivateScope(scopeValues);\n    constructPublicScope($$.scope = create(scope), scopeValues, $$.privateScope);\n  }\n\n  if (name === 'd-each') {\n    $$.scope = create(parentScope.$$.name === '#d-item' ? parentScope.$$.scope : parentScope, {\n      [Args.item || '$item']: {\n        value: null,\n        writable: true\n      },\n      [Args.index || '$index']: {\n        value: null,\n        writable: true\n      }\n    });\n  }\n\n  constructPublicScope(Args, Args, $$.args);\n  constructPublicScope(globals, globals, $$.globals);\n  constructPublicScope(blockInstance, locals, $$.locals);\n\n  try {\n    blockInstance.afterConstruct();\n  } catch (err) {\n    console.error(`Uncaught error in ${ name }#afterConstruct:`, err);\n  }\n\n  prevBlock = undefined;\n  parentScope = name === 'd-elements'\n    ? Args.parentScope\n    : blockInstance;\n  parentTemplate = name === 'd-elements'\n    ? Args.parentTemplate\n    : blockInstance;\n\n  iterateArray(html, (child) => {\n    prevBlock = createBlock({\n      node: child,\n      parent: blockInstance,\n      parentElem,\n      parentBlock: blockInstance,\n      parentScope,\n      parentTemplate,\n      prevBlock\n    });\n  });\n\n  try {\n    blockInstance.afterRender();\n  } catch (err) {\n    console.error(`Uncaught error in ${ name }#afterRender:`, err);\n  }\n\n  return blockInstance;\n}\n\nfunction createMixin({ name, Mixin, dynamic, value, args, comment, elem, parentBlock, parentScope, parentTemplate }) {\n  const mixin = new Mixin({\n    name,\n    value,\n    dynamic,\n    args,\n    comment,\n    elem,\n    parentBlock,\n    parentScope,\n    parentTemplate\n  });\n\n  if (Mixin.evaluate) {\n    const value = mixin.value = mixin.evaluateAndWatch((newValue, oldValue) => {\n      mixin.value = newValue;\n\n      try {\n        mixin.afterUpdate(newValue, oldValue);\n      } catch (err) {\n        console.error(`Uncaught error in ${ name }#afterUpdate:`, err);\n      }\n    });\n\n    mixin.afterUpdate(value);\n  }\n\n  return mixin;\n}\n\nfunction isInstanceOf(Class, Subclass) {\n  return Class::isPrototypeOf(Subclass) && Class.prototype::isPrototypeOf(Subclass.prototype);\n}\n\nfunction removeWatchers(watchersToRemove) {\n  iterateArray(watchersToRemove, removeWatcher);\n}\n\nfunction constructPrivateScope(object, type, parentScope) {\n  let scope = {};\n\n  if (type === 'globals') {\n    scope = create(\n      parentScope\n        ? parentScope.$$.globals\n        : null\n    );\n  }\n\n  return collectFromObject(object, (scope, value, key) => {\n    scope[key] = {\n      value,\n      watchers: {\n        temp: [],\n        perm: []\n      }\n    };\n  }, scope);\n}\n\nfunction constructPublicScope(scope, scopeValues, privateScope) {\n  defineProperties(scope, mapObject(scopeValues, (value, key) => {\n    const scope = privateScope[key];\n    const { watchers } = scope;\n\n    return {\n      configurable: false,\n      enumerable: true,\n      get() {\n        if (evalMode) {\n          if (getting.indexOf(watchers.temp) === -1) {\n            getting.push(watchers.temp);\n          }\n        }\n\n        return scope.value;\n      },\n      set(value) {\n        if (value === scope.value) {\n          return;\n        }\n\n        if (!changed) {\n          changed = [];\n        }\n\n        const oldTempWatchers = watchers.temp.slice();\n        const oldValue = scope.value;\n\n        watchers.temp = [];\n        scope.value = value;\n\n        iterateArray(oldTempWatchers, removeTempWatcher);\n        changed.push({\n          scope,\n          oldValue,\n          value\n        });\n\n        setTimeout(() => {\n          if (!changed) {\n            return;\n          }\n\n          const was = [];\n          const values = [];\n\n          for (let i = changed.length - 1; i >= 0; i--) {\n            const {\n              scope,\n              value,\n              oldValue\n            } = changed[i];\n\n            iterateArray(scope.watchers.perm, (watcher) => {\n              const index = was.indexOf(watcher);\n\n              if (index === -1) {\n                was.push(watcher);\n                values.push({\n                  value,\n                  oldValue\n                });\n              } else {\n                values[index].oldValue = oldValue;\n              }\n            });\n\n            changed.splice(i, 1);\n          }\n\n          changed = null;\n\n          iterateArray(was, (watcher, i) => {\n            const {\n              value,\n              oldValue\n            } = values[i];\n\n            watcher(value, oldValue);\n          });\n        }, 0);\n      }\n    };\n  }));\n}\n\nfunction watchForAllLocals(block, watcher) {\n  iterateObject(block.$$.locals, ({ watchers }) => {\n    watchers.perm.push(watcher);\n  });\n}\n\nfunction watchForAllGlobals(block, watcher) {\n  const {\n    globals,\n    watchersToRemove\n  } = block.$$;\n\n  for (const glob in globals) {\n    /* eslint guard-for-in: 0 */\n    const watchers = globals[glob].watchers.perm;\n\n    watchers.push(watcher);\n    watchersToRemove.push({\n      watcher,\n      watchers\n    });\n  }\n}\n\nfunction watchForAllArgs(block, watcher) {\n  iterateObject(block.$$.args, ({ watchers }) => {\n    watchers.perm.push(watcher);\n  });\n}\n\nfunction calculateArgs(args, argsObject) {\n  iterateArray(keys(argsObject), (arg) => {\n    if (!(arg in args)) {\n      argsObject[arg] = undefined;\n    }\n  });\n\n  for (const arg in args) {\n    argsObject[arg] = args[arg];\n  }\n}\n\nfunction transformRestArgs(args) {\n  return collectFromObject(args, addArgs);\n}\n\nfunction transformRestAttrs(attrs, mixins, mixinDefaultOpts) {\n  return collectFromObject(attrs, (eventualAttrs, value, attr) => {\n    if (D_REST_REGEX.test(attr)) {\n      return assign(eventualAttrs, transformRestAttrs(value, mixins, mixinDefaultOpts));\n    }\n\n    const match = mixinMatch(mixins, attr);\n\n    if (match) {\n      eventualAttrs[attr] = {\n        type: 'mixin',\n        dynamic: true,\n        opts: {\n          value,\n          ...match,\n          ...mixinDefaultOpts\n        },\n        value\n      };\n\n      return;\n    }\n\n    eventualAttrs[attr] = {\n      type: 'attr',\n      value\n    };\n  });\n}\n\nfunction mixinMatch(mixins, attr) {\n  let match;\n\n  for (const name in mixins) {\n    const Mixin = mixins[name];\n    const localMatch = attr.match(Mixin._match);\n\n    if (localMatch) {\n      const argsMatch = localMatch[1];\n      let args;\n\n      if (argsMatch === '') {\n        args = [];\n      } else if (argsMatch) {\n        args = argsMatch.split(COMMA_REGEX);\n      }\n\n      match = {\n        args,\n        comment: localMatch[2],\n        Mixin,\n        name\n      };\n\n      break;\n    }\n  }\n\n  return match;\n}\n\nfunction calculateAttrs(attrs, attrsObject, elem, firstTime) {\n  iterateObject(attrsObject, ({ type, value }, attr) => {\n    if (!attrs[attr]) {\n      if (type === 'attr') {\n        elem.removeAttr(attr);\n      } else {\n        value.$$.remove();\n      }\n\n      delete attrsObject[attr];\n    }\n  });\n\n  const mixins = [];\n\n  for (const attr in attrs) {\n    const {\n      type,\n      dynamic,\n      value,\n      opts\n    } = attrs[attr];\n    let nextType;\n    let nextDynamic;\n    let nextValue;\n\n    if (attrsObject[attr]) {\n      const {\n        type: prevType,\n        value: prevValue\n      } = attrsObject[attr];\n\n      if (type === 'attr') {\n        if (prevType === 'mixin') {\n          prevValue.$$.remove();\n        }\n\n        if (prevValue !== value) {\n          elem.attr(attr, value);\n        }\n\n        nextValue = value;\n      } else {\n        const mixin = prevValue;\n\n        if (prevType === 'attr') {\n          elem.removeAttr(attr);\n        }\n\n        mixin.$$.isDynamic = dynamic;\n\n        if (dynamic) {\n          executeMixinWatchers(mixin, value);\n        } else if (!mixin.$$.evaluated && opts.Mixin.evaluate) {\n          const newValue = mixin.$$.parentScope.$$.evaluate(value, (newValue) => {\n            const {\n              type,\n              dynamic\n            } = attrs[attr];\n\n            if (type === 'mixin' && !dynamic) {\n              executeMixinWatchers(mixin, newValue);\n            }\n          }, mixin);\n\n          mixin.$$.evaluated = true;\n\n          executeMixinWatchers(mixin, newValue);\n        }\n\n        nextValue = mixin;\n      }\n\n      nextType = type;\n      nextDynamic = dynamic;\n    } else {\n      if (type === 'attr') {\n        elem.attr(attr, value);\n\n        nextValue = value;\n      } else {\n        const buildMixin = () => {\n          opts.dynamic = dynamic;\n\n          const mixin = createMixin(opts);\n\n          if (!dynamic && opts.Mixin.evaluate) {\n            const {\n              parentScope,\n              value\n            } = opts;\n            const firstValue = parentScope.$$.evaluate(value, (newValue) => {\n              const {\n                type,\n                dynamic\n              } = attrs[attr];\n\n              if (type === 'mixin' && !dynamic) {\n                executeMixinWatchers(mixin, newValue);\n              }\n            }, mixin);\n\n            mixin.$$.evaluated = true;\n            mixin.$$.value = firstValue;\n          }\n\n          nextValue = mixin;\n\n          return {\n            attr,\n            opts: {\n              type,\n              dynamic,\n              value: mixin\n            }\n          };\n        };\n\n        if (firstTime) {\n          mixins.push(buildMixin);\n        } else {\n          buildMixin();\n        }\n      }\n\n      nextType = type;\n      nextDynamic = dynamic;\n    }\n\n    attrsObject[attr] = {\n      type: nextType,\n      dynamic: nextDynamic,\n      value: nextValue\n    };\n  }\n\n  if (firstTime) {\n    return () => {\n      iterateArray(mixins, (buildMixin) => {\n        const {\n          attr,\n          opts\n        } = buildMixin();\n\n        attrsObject[attr] = opts;\n      });\n    };\n  }\n}\n\nfunction executeMixinWatchers(mixin, value) {\n  const oldValue = mixin.$$.value;\n\n  mixin.$$.value = value;\n\n  iterateArray(mixin.$$.watchers, (watcher) => {\n    watcher(value, oldValue);\n  });\n}\n\nfunction constructMixinRegExp(name) {\n  return new RegExp(`^${ escapeRegex(name) }(?:\\\\(([^\\\\)]*)\\\\))?(?:#([\\\\s\\\\S]*))?$`);\n}\n\nfunction extendBlock(cls) {\n  setProto(cls, Block);\n  setProto(cls.prototype, Block.prototype);\n}\n\nfunction insertTemplates(template, templates) {\n  const { vars, value } = template;\n  const newTemplates = create(null);\n  const newVars = toObjectKeys(vars);\n\n  assign(newTemplates, templates);\n  iterateArray(value, forEachNode);\n\n  function forEachNode({ type, value, children }, index, tree) {\n    if (type === '#comment') {\n      value = value.trim();\n\n      if (newTemplates[value]) {\n        tree[index] = newTemplates[value].value;\n        assign(newVars, toObjectKeys(newTemplates[value].vars));\n      }\n    } else {\n      iterateArray(children, forEachNode);\n    }\n  }\n\n  vars.length = 0;\n  vars.push(...keys(newVars));\n\n  return template;\n}\n\nfunction wrapBlock(block, wrapper) {\n  const returnValue = wrapper(block);\n\n  return isInstanceOf(Block, returnValue)\n    ? returnValue\n    : block;\n}\n\nfunction wrapMixin(mixin, wrapper) {\n  const returnValue = wrapper(mixin);\n\n  return isInstanceOf(Mixin, returnValue)\n    ? returnValue\n    : mixin;\n}\n\nfunction removeWithParentSignal(child) {\n  child.$$.remove(true);\n}\n\nfunction remove(child) {\n  child.$$.remove();\n}\n\nfunction cleanProperty(value, arg, object) {\n  delete object[arg];\n}\n\nfunction removeWatcher({ watcher, watchers }) {\n  removeArrayElem(watchers, watcher);\n}\n\nfunction removeTempWatcher(watcher) {\n  watcher.onRemove();\n  watcher();\n}\n\nfunction addArgs(args, value, arg) {\n  if (D_REST_REGEX.test(arg)) {\n    assign(args, transformRestArgs(value));\n  } else {\n    args[arg] = value;\n  }\n}\n\nexport { Block, Mixin, initApp, removeApp, insertTemplates };\n"],"names":["window","global","self","collectFromArray","array","callback","initialValue","value","index","findInArray","i","length","iterateArray","removeArrayElem","elem","indexOf","splice","toObjectKeys","addKey","vars","variable","has","hasOwnProperty","assign","target","objects","arguments","source","key","collectFromObject","object","iterateObject","mapObject","newObject","defineProperties","Object","definePrototypeProperties","properties","name","defineProperty","defineFrozenProperties","Symbol","toString","toStringTag","slice","setToStringTag","tag","prototype","isArray","Array","isFunction","isNil","isString","regexpSpecialCharacters","regexpSpecialsRegexp","RegExp","map","s","join","escapeRegex","string","replace","create","keys","getProto","getPrototypeOf","setProto","setPrototypeOf","proto","__proto__","DASHED_SYMBOL_REGEX","UPPERCASED_SYMBOL_REGEX","toCamelCase","capitalize","toHyphenCase","hyphenize","match","toUpperCase","toLowerCase","document","HIDE_CLASS","EVENT_SEPARATOR_REGEX","CSS_STYLES_SEPARATOR_REGEX","CSS_PROP_VALUE_SEPARATOR_REGEX","CSS_IMPORTANT_REGEX","EVENT_REGEX","ELEMENT_REGEX","HTML_COLLECTION_REGEX","X_LINK_ATTR_REGEX","SVG_NS","XML_NS","X_LINK_NS","XHTML_NS","emptyCollection","Elem","property","isElementsCollection","includes","isValidNode","push","elems","forEach","list","classList","cls","add","attr","attributes","addAttr","ns","getAttrNS","getAttributeNS","getAttribute","removeAttr","setAttributeNS","setAttribute","childNodes","selector","collect","is","parentNode","elements","cb","element","parent","child","toElem","contains","type","el","isText","isHTMLDocument","ownerDocument","createTextNode","createComment","namespaceURI","documentElement","createElementNS","into","text","style","cssText","split","addCSSProp","getPropertyValue","getPropertyPriority","removeCSS","removeProperty","setProperty","test","dataset","addDataAttr","event","details","bubbles","cancelable","realDetails","finalEvent","Event","err","createEvent","initEvent","dispatchEvent","filterFn","Boolean","find","hasAttributeNS","hasAttribute","hide","html","innerHTML","next","nextSibling","insertBefore","appendChild","end","firstChild","matches","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","call","error","getName","addNext","listener","newEvents","allListeners","listeners","addEventListener","removeEventListener","removeEventListeners","removeListeners","removeListener","addParent","addPrev","undefined","prop","remove","removeAttributeNS","removeAttribute","css","first","method","prev","show","babelHelpers.get","apply","textContent","condition","hasAttr","toggle","constructor","species","doc","body","head","isElem","nodeName","closest","createHideStyleNode","attrs","data","addClass","previousSibling","removeChild","removeClass","base","querySelectorAll","String","registerDBlock","Block","DBlock","$$","parentScope","parentParentScope","parentParentTemplate","parentTemplate","children","argsChildren","ownChildren","dBlockName","found","ParentScope","ParentTemplate","dBlocks","DBlockName","template","watchArgs","registerDEach","createBlock","DEach","opts","args","item","itemName","indexName","uid","evaluateAndWatch","renderSet","itemsByUIDs","parentElem","scope","UID","sortBy","newItemsByUIDs","newUIDsCounter","newUIDs","set","filterBy","isArr","iterate","sort","filter","evaluate","items","prevBlock","block","shift","insertAfterIt","content","registerDElements","DElements","mixins","watchersToRemove","removeWithParentSignal","removeContent","watchers","watcher","forDElements","registerDIf","DIf","Infinity","values","cond","if","newValue","registerDItem","DItem","registerDSwitch","DSwitch","wasDefault","val","equals","value1","value2","registerDAttr","Mixin","DAttr","registerDBind","DBind","off","on","EMPTY_SPACE_REGEX","registerDClass","DClass","classes","newClasses","registerDElem","DElem","evaluateOnce","registerDHide","DHide","registerDNode","DNode","node","registerDOn","DOn","registerDShow","DShow","registerDStyle","DStyle","oldValue","registerDValue","DValue","initialScopeValue","getProp","options","getEvalFunction","currentValue","setProp","initialElemValue","isInitialScopeValueNull","isCheckbox","changeScope","offElemListener","getListenerName","e","offFormListener","option","selected","getValueForSetting","init","getValueForGetting","inputValue","isRadio","isMultiple","addValue","concat","rootBlocks","rootMixins","blockHooks","mixinHooks","isPrototypeOf","TAG_NAME_REGEX","ATTR_NAME_REGEX","D_REST_REGEX","WATCHED_ARG_PREFIX_REGEX","WATCHED_GLOBAL_PREFIX_REGEX","NAMED_D_BLOCK_REGEX","COMMA_REGEX","afterElem","emptyChildren","emptyAttrs","evalMode","getting","changed","expression","hook","Subclass","isInstanceOf","warn","_blocks","defaultLocals","defaultArgs","reduce","returnValue","currentReturnValue","_html","_vars","afterUpdate","_mixins","_match","constructMixinRegExp","wrappers","wrapBlock","originalArgs","parentBlock","childrenBlocks","isParentBlock","func","onChange","targetBlock","forDItem","forDEach","onChangeFlag","result","original","onEvalError","localWatchers","newResult","isRemoved","watcherBlock","onRemove","isParentSignal","beforeRemove","contentToAdd","notRecursive","addContent","contentToMove","after","indexToPut","moveContent","contentToRemove","contentToInsert","moveFlag","insertAfter","insertInStartOfIt","tryToAddOrMove","argsObject","wasDRest","arg","isDRest","localArgs","restArgs","cleanProperty","transformRestArgs","isDElements","globals","oldWatcher","watchForAllLocals","watchForAllArgs","watchForAllGlobals","perm","locals","registerBuiltIns","Blocks","blocks","wrapMixin","dynamic","comment","isDynamic","_value","Mixins","initApp","Error","RootBlock","removeApp","DwayneRootBlock","register","Constructor","localBlocks","localMixins","dBlockMatch","dBlockArgs","dBlockChildren","dElementsName","blockInstance","currentAttrs","mixinDefaultOpts","localAttrs","restAttrs","transformRestAttrs","mixinMatch","createMixins","calculateAttrs","Args","newName","constructPrivateScope","scopeValues","privateScope","afterConstruct","afterRender","createMixin","mixin","Class","removeWatchers","removeWatcher","constructPublicScope","temp","oldTempWatchers","removeTempWatcher","was","glob","calculateArgs","addArgs","eventualAttrs","localMatch","argsMatch","attrsObject","firstTime","nextType","nextDynamic","nextValue","prevType","prevValue","evaluated","buildMixin","firstValue","executeMixinWatchers","extendBlock","insertTemplates","templates","newTemplates","newVars","forEachNode","tree","trim","wrapper"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}