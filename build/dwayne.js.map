{"version":3,"file":"dwayne.js","sources":["../lib/constants/global.js","../lib/constants/appliedRegExps.js","../lib/constants/canvasMethods.js","../lib/constants/constructors.js","../lib/constants/elements.js","../lib/constants/htmlAllowedTagSymbols.js","../lib/constants/regexpSpecialCharacters.js","../lib/helpers/toStringTag.js","../lib/helpers/checkTypes.js","../lib/constants/validateCheckExpressions.js","../lib/D.js","../lib/helpers/iterate.js","../lib/helpers/assign.js","../lib/helpers/defineProperty.js","../lib/helpers/Symbol.js","../lib/helpers/toArray.js","../lib/helpers/validate.js","../lib/Alphabet.js","../lib/Switcher.js","../lib/Super.js","../lib/Promise.js","../lib/Func.js","../lib/Num.js","../lib/Arr.js","../lib/BlobObject.js","../lib/Str.js","../lib/helpers/markupToJSON.js","../lib/Elem.js","../lib/blocks/d-block.js","../lib/blocks/d-each.js","../lib/blocks/d-elements.js","../lib/blocks/d-if.js","../lib/blocks/d-item.js","../lib/blocks/d-switch.js","../lib/blocks/d-text.js","../lib/mixins/d-attr.js","../lib/mixins/d-bind.js","../lib/mixins/d-class.js","../lib/mixins/d-elem.js","../lib/mixins/d-hide.js","../lib/mixins/d-on.js","../lib/mixins/d-show.js","../lib/mixins/d-style.js","../lib/mixins/d-text.js","../lib/mixins/d-validate.js","../lib/mixins/d-value.js","../lib/Block.js","../lib/constants/formats.js","../lib/Dat.js","../lib/helpers/constructURL.js","../lib/helpers/parseHeaders.js","../lib/helpers/transformData.js","../lib/Fetch.js","../lib/helpers/resolveURL.js","../lib/Router.js","../browser.js"],"sourcesContent":["/* eslint no-nested-ternary: 0 */\r\n/* eslint no-negated-condition: 0 */\r\nexport default typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\r\n","/**\r\n * @module constants/appliedRegExps\r\n * @private\r\n * @description Exports different types of syntax for {@link Elem#apply}.\r\n */\r\n\r\n/**\r\n * @callback matchAppliedExprCallback\r\n * @param {Elem} elem - D-elem of an element to apply expression to.\r\n * @param {String} string - Matched applied name.\r\n * @param {String} arg - Argument within the parentheses.\r\n */\r\n\r\n/**\r\n * @type {Object.<String, matchAppliedExprCallback|Object.<String, matchAppliedExprCallback>>}\r\n * @description Object of different types of syntax.\r\n */\r\n\r\nexport const appliedRegExps = {\r\n  '#'(elem, id) {\r\n    elem.id(id);\r\n  },\r\n  '.'(elem, cls) {\r\n    elem.addClass(cls);\r\n  },\r\n  $(elem, attr, value) {\r\n    elem.attr(attr, value);\r\n  },\r\n  '@'(elem, prop, value) {\r\n    elem.css(prop, value);\r\n  },\r\n  '&'(elem, name, html) {\r\n    elem.html(html);\r\n  },\r\n  '*'(elem, name, text) {\r\n    elem.text(text);\r\n  },\r\n  '-': {\r\n    '.'(elem, cls) {\r\n      elem.removeClass(cls);\r\n    },\r\n    $(elem, attr) {\r\n      elem.removeAttr(attr);\r\n    },\r\n    '@'(elem, prop) {\r\n      elem.removeCSS(prop);\r\n    }\r\n  }\r\n};\r\n","/**\r\n * @module constants/elements\r\n * @private\r\n * @description Exports different canvas methods for {@link Elem} for creating html-elements.\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {String[]}\r\n */\r\nexport const canvasGetMethods = [\r\n  /**\r\n   * @member {Function} Elem#createImageData\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {ImageData|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/createImageData\r\n   */\r\n  'createImageData',\r\n\r\n  /**\r\n   * @member {Function} Elem#createLinearGradient\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {CanvasGradient|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/createLinearGradient\r\n   */\r\n  'createLinearGradient',\r\n\r\n  /**\r\n   * @member {Function} Elem#createPattern\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {CanvasPattern|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/createPattern\r\n   */\r\n  'createPattern',\r\n\r\n  /**\r\n   * @member {Function} Elem#createRadialGradient\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {CanvasGradient|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/createRadialGradient\r\n   */\r\n  'createRadialGradient',\r\n\r\n  /**\r\n   * @member {Function} Elem#getImageData\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {ImageData|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/getImageData\r\n   */\r\n  'getImageData',\r\n\r\n  /**\r\n   * @member {Function} Elem#getLineDash\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Number[]|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/getLineDash\r\n   */\r\n  'getLineDash',\r\n\r\n  /**\r\n   * @member {Function} Elem#isPointInPath\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Boolean|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/isPointInPath\r\n   */\r\n  'isPointInPath',\r\n\r\n  /**\r\n   * @member {Function} Elem#isPointInStroke\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Boolean|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/isPointInStroke\r\n   */\r\n  'isPointInStroke',\r\n\r\n  /**\r\n   * @member {Function} Elem#measureText\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {TextMetrics|void}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/measureText\r\n   */\r\n  'measureText'\r\n];\r\n\r\nexport const canvasRestMethods = [\r\n  /**\r\n   * @member {Function} Elem#arc\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/arc\r\n   */\r\n  'arc',\r\n\r\n  /**\r\n   * @member {Function} Elem#arcTo\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/arcTo\r\n   */\r\n  'arcTo',\r\n\r\n  /**\r\n   * @member {Function} Elem#beginPath\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/beginPath\r\n   */\r\n  'beginPath',\r\n\r\n  /**\r\n   * @member {Function} Elem#bezierCurveTo\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo\r\n   */\r\n  'bezierCurveTo',\r\n\r\n  /**\r\n   * @member {Function} Elem#clearRect\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/clearRect\r\n   */\r\n  'clearRect',\r\n\r\n  /**\r\n   * @member {Function} Elem#clip\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/clip\r\n   */\r\n  'clip',\r\n\r\n  /**\r\n   * @member {Function} Elem#closePath\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/closePath\r\n   */\r\n  'closePath',\r\n\r\n  /**\r\n   * @member {Function} Elem#drawFocusIfNeeded\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/drawFocusIfNeeded\r\n   */\r\n  'drawFocusIfNeeded',\r\n\r\n  /**\r\n   * @member {Function} Elem#drawImage\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/drawImage\r\n   */\r\n  'drawImage',\r\n\r\n  /**\r\n   * @member {Function} Elem#ellipse\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/ellipse\r\n   */\r\n  'ellipse',\r\n\r\n  /**\r\n   * @member {Function} Elem#fill\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/fill\r\n   */\r\n  'fill',\r\n\r\n  /**\r\n   * @member {Function} Elem#fillRect\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/fillRect\r\n   */\r\n  'fillRect',\r\n\r\n  /**\r\n   * @member {Function} Elem#fillText\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/fillText\r\n   */\r\n  'fillText',\r\n\r\n  /**\r\n   * @member {Function} Elem#lineTo\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/lineTo\r\n   */\r\n  'lineTo',\r\n\r\n  /**\r\n   * @member {Function} Elem#moveTo\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/moveTo\r\n   */\r\n  'moveTo',\r\n\r\n  /**\r\n   * @member {Function} Elem#putImageData\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/putImageData\r\n   */\r\n  'putImageData',\r\n\r\n  /**\r\n   * @member {Function} Elem#quadraticCurveTo\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo\r\n   */\r\n  'quadraticCurveTo',\r\n\r\n  /**\r\n   * @member {Function} Elem#rect\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/rect\r\n   */\r\n  'rect',\r\n\r\n  /**\r\n   * @member {Function} Elem#resetTransform\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/resetTransform\r\n   */\r\n  'resetTransform',\r\n\r\n  /**\r\n   * @member {Function} Elem#restore\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/restore\r\n   */\r\n  'restore',\r\n\r\n  /**\r\n   * @member {Function} Elem#rotate\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/rotate\r\n   */\r\n  'rotate',\r\n\r\n  /**\r\n   * @member {Function} Elem#save\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/save\r\n   */\r\n  'save',\r\n\r\n  /**\r\n   * @member {Function} Elem#scale\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/scale\r\n   */\r\n  'scale',\r\n\r\n  /**\r\n   * @member {Function} Elem#setLineDash\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/setLineDash\r\n   */\r\n  'setLineDash',\r\n\r\n  /**\r\n   * @member {Function} Elem#setTransform\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/setTransform\r\n   */\r\n  'setTransform',\r\n\r\n  /**\r\n   * @member {Function} Elem#stroke\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/stroke\r\n   */\r\n  'stroke',\r\n\r\n  /**\r\n   * @member {Function} Elem#strokeRect\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/strokeRect\r\n   */\r\n  'strokeRect',\r\n\r\n  /**\r\n   * @member {Function} Elem#strokeText\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/strokeText\r\n   */\r\n  'strokeText',\r\n\r\n  /**\r\n   * @member {Function} Elem#transform\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/transform\r\n   */\r\n  'transform',\r\n\r\n  /**\r\n   * @member {Function} Elem#translate\r\n   * @type {Function}\r\n   * @param {...*} args\r\n   * @returns {Elem}\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/translate\r\n   */\r\n  'translate'\r\n];\r\n","/**\r\n * @module constants/constructors\r\n * @private\r\n * @description Exports constructors levels.\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {Array[]}\r\n */\r\nexport const constructors = [\r\n  [],\r\n  [],\r\n  []\r\n];\r\n","/**\r\n * @module constants/elements\r\n * @private\r\n * @description Exports methods for {@link Elem} for creating html-elements.\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {String[]}\r\n */\r\nexport const htmlElements = [\r\n  /**\r\n   * @member {Function} Elem#a\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'a',\r\n\r\n  /**\r\n   * @member {Function} Elem#abbr\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'abbr',\r\n\r\n  /**\r\n   * @member {Function} Elem#address\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'address',\r\n\r\n  /**\r\n   * @member {Function} Elem#area\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'area',\r\n\r\n  /**\r\n   * @member {Function} Elem#article\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'article',\r\n\r\n  /**\r\n   * @member {Function} Elem#audio\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'audio',\r\n\r\n  /**\r\n   * @member {Function} Elem#b\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'b',\r\n\r\n  /**\r\n   * @member {Function} Elem#base\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'base',\r\n\r\n  /**\r\n   * @member {Function} Elem#bdi\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'bdi',\r\n\r\n  /**\r\n   * @member {Function} Elem#bdo\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'bdo',\r\n\r\n  /**\r\n   * @member {Function} Elem#blockquote\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'blockquote',\r\n\r\n  /**\r\n   * @member {Function} Elem#body\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'body',\r\n\r\n  /**\r\n   * @member {Function} Elem#br\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'br',\r\n\r\n  /**\r\n   * @member {Function} Elem#button\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'button',\r\n\r\n  /**\r\n   * @member {Function} Elem#canvas\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'canvas',\r\n\r\n  /**\r\n   * @member {Function} Elem#caption\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'caption',\r\n\r\n  /**\r\n   * @member {Function} Elem#cite\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'cite',\r\n\r\n  /**\r\n   * @member {Function} Elem#code\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'code',\r\n\r\n  /**\r\n   * @member {Function} Elem#col\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'col',\r\n\r\n  /**\r\n   * @member {Function} Elem#colgroup\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'colgroup',\r\n\r\n  /**\r\n   * @member {Function} Elem#content\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'content',\r\n\r\n  /**\r\n   * @member {Function} Elem#datalist\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'datalist',\r\n\r\n  /**\r\n   * @member {Function} Elem#dd\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'dd',\r\n\r\n  /**\r\n   * @member {Function} Elem#del\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'del',\r\n\r\n  /**\r\n   * @member {Function} Elem#details\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'details',\r\n\r\n  /**\r\n   * @member {Function} Elem#dfn\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'dfn',\r\n\r\n  /**\r\n   * @member {Function} Elem#dialog\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'dialog',\r\n\r\n  /**\r\n   * @member {Function} Elem#div\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'div',\r\n\r\n  /**\r\n   * @member {Function} Elem#dl\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'dl',\r\n\r\n  /**\r\n   * @member {Function} Elem#dt\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'dt',\r\n\r\n  /**\r\n   * @member {Function} Elem#element\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'element',\r\n\r\n  /**\r\n   * @member {Function} Elem#em\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'em',\r\n\r\n  /**\r\n   * @member {Function} Elem#embed\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'embed',\r\n\r\n  /**\r\n   * @member {Function} Elem#fieldset\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'fieldset',\r\n\r\n  /**\r\n   * @member {Function} Elem#figcaption\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'figcaption',\r\n\r\n  /**\r\n   * @member {Function} Elem#figure\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'figure',\r\n\r\n  /**\r\n   * @member {Function} Elem#footer\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'footer',\r\n\r\n  /**\r\n   * @member {Function} Elem#form\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'form',\r\n\r\n  /**\r\n   * @member {Function} Elem#h1\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'h1',\r\n\r\n  /**\r\n   * @member {Function} Elem#h2\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'h2',\r\n\r\n  /**\r\n   * @member {Function} Elem#h3\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'h3',\r\n\r\n  /**\r\n   * @member {Function} Elem#h4\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'h4',\r\n\r\n  /**\r\n   * @member {Function} Elem#h5\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'h5',\r\n\r\n  /**\r\n   * @member {Function} Elem#h6\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'h6',\r\n\r\n  /**\r\n   * @member {Function} Elem#head\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'head',\r\n\r\n  /**\r\n   * @member {Function} Elem#header\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'header',\r\n\r\n  /**\r\n   * @member {Function} Elem#hgroup\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'hgroup',\r\n\r\n  /**\r\n   * @member {Function} Elem#hr\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'hr',\r\n\r\n  /**\r\n   * @member {Function} Elem#i\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'i',\r\n\r\n  /**\r\n   * @member {Function} Elem#iframe\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'iframe',\r\n\r\n  /**\r\n   * @member {Function} Elem#img\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'img',\r\n\r\n  /**\r\n   * @member {Function} Elem#input\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'input',\r\n\r\n  /**\r\n   * @member {Function} Elem#ins\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'ins',\r\n\r\n  /**\r\n   * @member {Function} Elem#kbd\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'kbd',\r\n\r\n  /**\r\n   * @member {Function} Elem#label\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'label',\r\n\r\n  /**\r\n   * @member {Function} Elem#legend\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'legend',\r\n\r\n  /**\r\n   * @member {Function} Elem#li\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'li',\r\n\r\n  /**\r\n   * @member {Function} Elem#link\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'link',\r\n\r\n  /**\r\n   * @member {Function} Elem#main\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'main',\r\n\r\n  /**\r\n   * @member {Function} Elem#mark\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'mark',\r\n\r\n  /**\r\n   * @member {Function} Elem#menu\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'menu',\r\n\r\n  /**\r\n   * @member {Function} Elem#menuitem\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'menuitem',\r\n\r\n  /**\r\n   * @member {Function} Elem#meta\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'meta',\r\n\r\n  /**\r\n   * @member {Function} Elem#meter\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'meter',\r\n\r\n  /**\r\n   * @member {Function} Elem#nav\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'nav',\r\n\r\n  /**\r\n   * @member {Function} Elem#noscript\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'noscript',\r\n\r\n  /**\r\n   * @member {Function} Elem#ol\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'ol',\r\n\r\n  /**\r\n   * @member {Function} Elem#optgroup\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'optgroup',\r\n\r\n  /**\r\n   * @member {Function} Elem#option\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'option',\r\n\r\n  /**\r\n   * @member {Function} Elem#output\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'output',\r\n\r\n  /**\r\n   * @member {Function} Elem#p\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'p',\r\n\r\n  /**\r\n   * @member {Function} Elem#param\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'param',\r\n\r\n  /**\r\n   * @member {Function} Elem#pre\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'pre',\r\n\r\n  /**\r\n   * @member {Function} Elem#progress\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'progress',\r\n\r\n  /**\r\n   * @member {Function} Elem#q\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'q',\r\n\r\n  /**\r\n   * @member {Function} Elem#rp\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'rp',\r\n\r\n  /**\r\n   * @member {Function} Elem#rt\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'rt',\r\n\r\n  /**\r\n   * @member {Function} Elem#rtc\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'rtc',\r\n\r\n  /**\r\n   * @member {Function} Elem#ruby\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'ruby',\r\n\r\n  /**\r\n   * @member {Function} Elem#s\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  's',\r\n\r\n  /**\r\n   * @member {Function} Elem#samp\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'samp',\r\n\r\n  /**\r\n   * @member {Function} Elem#script\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'script',\r\n\r\n  /**\r\n   * @member {Function} Elem#section\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'section',\r\n\r\n  /**\r\n   * @member {Function} Elem#select\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'select',\r\n\r\n  /**\r\n   * @member {Function} Elem#shadow\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'shadow',\r\n\r\n  /**\r\n   * @member {Function} Elem#small\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'small',\r\n\r\n  /**\r\n   * @member {Function} Elem#source\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'source',\r\n\r\n  /**\r\n   * @member {Function} Elem#span\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'span',\r\n\r\n  /**\r\n   * @member {Function} Elem#strong\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'strong',\r\n\r\n  /**\r\n   * @member {Function} Elem#style\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'style',\r\n\r\n  /**\r\n   * @member {Function} Elem#sub\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'sub',\r\n\r\n  /**\r\n   * @member {Function} Elem#summary\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'summary',\r\n\r\n  /**\r\n   * @member {Function} Elem#sup\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'sup',\r\n\r\n  /**\r\n   * @member {Function} Elem#table\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'table',\r\n\r\n  /**\r\n   * @member {Function} Elem#tbody\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'tbody',\r\n\r\n  /**\r\n   * @member {Function} Elem#td\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'td',\r\n\r\n  /**\r\n   * @member {Function} Elem#template\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'template',\r\n\r\n  /**\r\n   * @member {Function} Elem#textarea\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'textarea',\r\n\r\n  /**\r\n   * @member {Function} Elem#tfoot\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'tfoot',\r\n\r\n  /**\r\n   * @member {Function} Elem#th\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'th',\r\n\r\n  /**\r\n   * @member {Function} Elem#thead\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'thead',\r\n\r\n  /**\r\n   * @member {Function} Elem#time\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'time',\r\n\r\n  /**\r\n   * @member {Function} Elem#title\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'title',\r\n\r\n  /**\r\n   * @member {Function} Elem#tr\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'tr',\r\n\r\n  /**\r\n   * @member {Function} Elem#track\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'track',\r\n\r\n  /**\r\n   * @member {Function} Elem#u\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'u',\r\n\r\n  /**\r\n   * @member {Function} Elem#ul\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'ul',\r\n\r\n  /**\r\n   * @member {Function} Elem#var\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'var',\r\n\r\n  /**\r\n   * @member {Function} Elem#video\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'video',\r\n\r\n  /**\r\n   * @member {Function} Elem#wbr\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'wbr'\r\n];\r\n\r\nexport const svgElements = [\r\n  /**\r\n   * @member {Function} Elem#altGlyph\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'altGlyph',\r\n\r\n  /**\r\n   * @member {Function} Elem#altGlyphDef\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'altGlyphDef',\r\n\r\n  /**\r\n   * @member {Function} Elem#altGlyphItem\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'altGlyphItem',\r\n\r\n  /**\r\n   * @member {Function} Elem#animate\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'animate',\r\n\r\n  /**\r\n   * @member {Function} Elem#animateColor\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'animateColor',\r\n\r\n  /**\r\n   * @member {Function} Elem#animateMotion\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'animateMotion',\r\n\r\n  /**\r\n   * @member {Function} Elem#animateTransform\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'animateTransform',\r\n\r\n  /**\r\n   * @member {Function} Elem#circle\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'circle',\r\n\r\n  /**\r\n   * @member {Function} Elem#clipPath\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'clipPath',\r\n\r\n  /**\r\n   * @member {Function} Elem#colorProfile\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'color-profile',\r\n\r\n  /**\r\n   * @member {Function} Elem#cursor\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'cursor',\r\n\r\n  /**\r\n   * @member {Function} Elem#defs\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'defs',\r\n\r\n  /**\r\n   * @member {Function} Elem#desc\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'desc',\r\n\r\n  /**\r\n   * @member {Function} Elem#discard\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'discard',\r\n\r\n  /**\r\n   * @member {Function} Elem#ellipse\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'ellipse',\r\n\r\n  /**\r\n   * @member {Function} Elem#feBlend\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feBlend',\r\n\r\n  /**\r\n   * @member {Function} Elem#feColorMatrix\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feColorMatrix',\r\n\r\n  /**\r\n   * @member {Function} Elem#feComponentTransfer\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feComponentTransfer',\r\n\r\n  /**\r\n   * @member {Function} Elem#feComposite\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feComposite',\r\n\r\n  /**\r\n   * @member {Function} Elem#feConvolveMatrix\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feConvolveMatrix',\r\n\r\n  /**\r\n   * @member {Function} Elem#feDiffuseLighting\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feDiffuseLighting',\r\n\r\n  /**\r\n   * @member {Function} Elem#feDisplacementMap\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feDisplacementMap',\r\n\r\n  /**\r\n   * @member {Function} Elem#feDistantLight\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feDistantLight',\r\n\r\n  /**\r\n   * @member {Function} Elem#feDropShadow\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feDropShadow',\r\n\r\n  /**\r\n   * @member {Function} Elem#feFlood\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feFlood',\r\n\r\n  /**\r\n   * @member {Function} Elem#feFuncA\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feFuncA',\r\n\r\n  /**\r\n   * @member {Function} Elem#feFuncB\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feFuncB',\r\n\r\n  /**\r\n   * @member {Function} Elem#feFuncG\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feFuncG',\r\n\r\n  /**\r\n   * @member {Function} Elem#feFuncR\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feFuncR',\r\n\r\n  /**\r\n   * @member {Function} Elem#feGaussianBlur\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feGaussianBlur',\r\n\r\n  /**\r\n   * @member {Function} Elem#feImage\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feImage',\r\n\r\n  /**\r\n   * @member {Function} Elem#feMerge\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feMerge',\r\n\r\n  /**\r\n   * @member {Function} Elem#feMergeNode\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feMergeNode',\r\n\r\n  /**\r\n   * @member {Function} Elem#feMorphology\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feMorphology',\r\n\r\n  /**\r\n   * @member {Function} Elem#feOffset\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feOffset',\r\n\r\n  /**\r\n   * @member {Function} Elem#fePointLight\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'fePointLight',\r\n\r\n  /**\r\n   * @member {Function} Elem#feSpecularLighting\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feSpecularLighting',\r\n\r\n  /**\r\n   * @member {Function} Elem#feSpotLight\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feSpotLight',\r\n\r\n  /**\r\n   * @member {Function} Elem#feTile\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feTile',\r\n\r\n  /**\r\n   * @member {Function} Elem#feTurbulence\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'feTurbulence',\r\n\r\n  /**\r\n   * @member {Function} Elem#font\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'font',\r\n\r\n  /**\r\n   * @member {Function} Elem#fontFace\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'font-face',\r\n\r\n  /**\r\n   * @member {Function} Elem#fontFaceFormat\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'font-face-format',\r\n\r\n  /**\r\n   * @member {Function} Elem#fontFaceName\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'font-face-name',\r\n\r\n  /**\r\n   * @member {Function} Elem#fontFaceSrc\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'font-face-src',\r\n\r\n  /**\r\n   * @member {Function} Elem#fontFaceUri\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'font-face-uri',\r\n\r\n  /**\r\n   * @member {Function} Elem#foreignObject\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'foreignObject',\r\n\r\n  /**\r\n   * @member {Function} Elem#g\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'g',\r\n\r\n  /**\r\n   * @member {Function} Elem#glyph\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'glyph',\r\n\r\n  /**\r\n   * @member {Function} Elem#glyphRef\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'glyphRef',\r\n\r\n  /**\r\n   * @member {Function} Elem#hatch\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'hatch',\r\n\r\n  /**\r\n   * @member {Function} Elem#hatchpath\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'hatchpath',\r\n\r\n  /**\r\n   * @member {Function} Elem#hkern\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'hkern',\r\n\r\n  /**\r\n   * @member {Function} Elem#image\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'image',\r\n\r\n  /**\r\n   * @member {Function} Elem#line\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'line',\r\n\r\n  /**\r\n   * @member {Function} Elem#linearGradient\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'linearGradient',\r\n\r\n  /**\r\n   * @member {Function} Elem#marker\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'marker',\r\n\r\n  /**\r\n   * @member {Function} Elem#mask\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'mask',\r\n\r\n  /**\r\n   * @member {Function} Elem#mesh\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'mesh',\r\n\r\n  /**\r\n   * @member {Function} Elem#meshgradient\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'meshgradient',\r\n\r\n  /**\r\n   * @member {Function} Elem#meshpatch\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'meshpatch',\r\n\r\n  /**\r\n   * @member {Function} Elem#meshrow\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'meshrow',\r\n\r\n  /**\r\n   * @member {Function} Elem#metadata\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'metadata',\r\n\r\n  /**\r\n   * @member {Function} Elem#missingGlyph\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'missing-glyph',\r\n\r\n  /**\r\n   * @member {Function} Elem#mpath\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'mpath',\r\n\r\n  /**\r\n   * @member {Function} Elem#path\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'path',\r\n\r\n  /**\r\n   * @member {Function} Elem#pattern\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'pattern',\r\n\r\n  /**\r\n   * @member {Function} Elem#polygon\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'polygon',\r\n\r\n  /**\r\n   * @member {Function} Elem#polyline\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'polyline',\r\n\r\n  /**\r\n   * @member {Function} Elem#radialGradient\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'radialGradient',\r\n\r\n  /**\r\n   * @member {Function} Elem#rect\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'rect',\r\n\r\n  /**\r\n   * @member {Function} Elem#set\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'set',\r\n\r\n  /**\r\n   * @member {Function} Elem#solidcolor\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'solidcolor',\r\n\r\n  /**\r\n   * @member {Function} Elem#stop\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'stop',\r\n\r\n  /**\r\n   * @member {Function} Elem#style\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'style',\r\n\r\n  /**\r\n   * @member {Function} Elem#svg\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'svg',\r\n\r\n  /**\r\n   * @member {Function} Elem#switch\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'switch',\r\n\r\n  /**\r\n   * @member {Function} Elem#symbol\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'symbol',\r\n\r\n  /**\r\n   * @member {Function} Elem#textPath\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'textPath',\r\n\r\n  /**\r\n   * @member {Function} Elem#tref\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'tref',\r\n\r\n  /**\r\n   * @member {Function} Elem#tspan\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'tspan',\r\n\r\n  /**\r\n   * @member {Function} Elem#unknown\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'unknown',\r\n\r\n  /**\r\n   * @member {Function} Elem#use\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'use',\r\n\r\n  /**\r\n   * @member {Function} Elem#view\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'view',\r\n\r\n  /**\r\n   * @member {Function} Elem#vkern\r\n   * @type {Function}\r\n   * @param {...String} appliedExpressions\r\n   * @returns {Elem}\r\n   */\r\n  'vkern'\r\n];\r\n\r\nexport const voidElements = [\r\n  'area',\r\n  'base',\r\n  'br',\r\n  'col',\r\n  'command',\r\n  'embed',\r\n  'hr',\r\n  'img',\r\n  'input',\r\n  'keygen',\r\n  'link',\r\n  'meta',\r\n  'param',\r\n  'source',\r\n  'track',\r\n  'wbr'\r\n];\r\n","export const htmlAllowedTagSymbols = '[a-z][a-z\\\\d\\\\-_.:!@#\\\\$%\\\\^&*()\\\\[\\\\]{}\\\\\\\\=\\'\"]*';\r\nexport const htmlAllowedAttrSymbols = '[^\\\\u0000-\\\\u0020\\\\s\"\\'>/=]+';\r\n","/**\r\n * @module constants/regexpSpecialCharacters\r\n * @private\r\n * @description Exports special characters for RegExp.\r\n */\r\n\r\n/**\r\n * @const\r\n * @name module:constants/regexpSpecialCharacters~regexpSpecialCharacters\r\n * @type {String[]}\r\n */\r\nexport const regexpSpecialCharacters = [\r\n  '.',\r\n  '+', '*', '?',\r\n  '(', ')',\r\n  '[', ']',\r\n  '{', '}',\r\n  '<', '>',\r\n  '^', '$',\r\n  '!',\r\n  '=',\r\n  ':',\r\n  '-',\r\n  '|',\r\n  ',',\r\n  '\\\\'\r\n];\r\n","/**\r\n * @module helpers/toStringTag\r\n * @private\r\n * @description Exports toStringTag method.\r\n */\r\n\r\n/**\r\n * @function toStringTag\r\n * @param {*} object - Object to get toStringTag of.\r\n * @returns {String} Cut string.\r\n * @description Cut \"Type\" string from \"[object Type]\" string that gotten from {}.toString,call(object).\r\n */\r\nexport function toStringTag(object) {\r\n  return {}.toString.call(object).replace(/^\\[object |]$/g, '');\r\n}\r\n","/**\r\n * @module helpers/checkTypes\r\n * @private\r\n * @mixin\r\n * @description Exports is<Type> methods.\r\n */\r\n\r\nimport { toStringTag } from './toStringTag';\r\n\r\n/**\r\n * @function isArray\r\n * @public\r\n * @param {*} value - Value to check if it is an array.\r\n * @returns {Boolean} If the argument is an array or not.\r\n * \r\n * @example\r\n * isArray([]);                             // true\r\n * isArray(0);                              // true\r\n * isArray(document.querySelectorAll('*')); // false\r\n */\r\nexport function isArray(value) {\r\n  return toStringTag(value) === 'Array';\r\n}\r\n\r\n/**\r\n * @function isArrayLike\r\n * @public\r\n * @param {*} value - Value to check if it is array-like.\r\n * @returns {Boolean} If the argument is array-like or not.\r\n * @description Basically returns if the argument has non-negative integer \"length\" property and isn't a function.\r\n * \r\n * @example\r\n * isArrayLike([]);                             // true\r\n * isArrayLike('');                             // true\r\n * isArrayLike(() => {});                       // false\r\n * isArrayLike(document.querySelectorAll('*')); // true\r\n */\r\nexport function isArrayLike(value) {\r\n  if (!value || isFunction(value)) {\r\n    return false;\r\n  }\r\n  \r\n  const length = value.length;\r\n  \r\n  return isInteger(length) && length >= 0;\r\n}\r\n\r\n/**\r\n * @function isBoolean\r\n * @public\r\n * @param {*} value - Value to check if it is a boolean.\r\n * @returns {Boolean} If the argument is a boolean or not.\r\n * \r\n * @example\r\n * isBoolean(true);               // true\r\n * isBoolean(new Boolean(false)); // true\r\n * isBoolean(null);               // false\r\n */\r\nexport function isBoolean(value) {\r\n  return toStringTag(value) === 'Boolean';\r\n}\r\n\r\n/**\r\n * @function isDate\r\n * @public\r\n * @param {*} value - Value to check if it is a date.\r\n * @returns {Boolean} If the argument is a date or not.\r\n * \r\n * @example\r\n * isDate(new Date());                 // true\r\n * isDate('1999-12-31T23:59:59.999Z'); // false\r\n */\r\nexport function isDate(value) {\r\n  return toStringTag(value) === 'Date';\r\n}\r\n\r\n/**\r\n * @function isDateLike\r\n * @public\r\n * @param {*} value - Value to check if it is date-like.\r\n * @returns {Boolean} If the argument is date-like or not.\r\n * @description Basically returns if new Date(argument) is not invalid date.\r\n * \r\n * @example\r\n * isDateLike(new Date());                 // true\r\n * isDateLike('1999-12-31T23:59:59.999Z'); // true\r\n * isDateLike(0);                          // true\r\n */\r\nexport function isDateLike(value) {\r\n  value = new Date(value);\r\n  \r\n  return !isNaN(value.getTime());\r\n}\r\n\r\n/**\r\n * @function isElement\r\n * @public\r\n * @param {*} value - Value to check if it is an element.\r\n * @returns {Boolean} If the argument is element or not.\r\n *\r\n * @example\r\n * isElement(document.querySelector('html')); // true\r\n */\r\nexport function isElement(value) {\r\n  return /Element$/.test(toStringTag(value));\r\n}\r\n\r\n/**\r\n * @function isFinite\r\n * @public\r\n * @param {*} value - Value to check if it is finite.\r\n * @returns {Boolean} If the argument is finite or not.\r\n * \r\n * @example\r\n * isFinite(0);        // true\r\n * isFinite('0');      // false\r\n * isFinite(Infinity); // false\r\n * isFinite(NaN);      // false\r\n */\r\nexport function isFinite(value) {\r\n  if (!isNumber(value)) {\r\n    return false;\r\n  }\r\n  \r\n  value = Number(value);\r\n\r\n  return !isNaN(value) && value !== Infinity && value !== -Infinity;\r\n}\r\n\r\n/**\r\n * @function isFunction\r\n * @public\r\n * @param {*} value - Value to check if it is a function.\r\n * @returns {Boolean} If the argument is a function or not.\r\n * \r\n * @example\r\n * isFunction(() => {});            // true\r\n * \r\n * const func = () => {};\r\n * Object.setPrototypeOf(func, {});\r\n * isFunction(func);                // true\r\n */\r\nexport function isFunction(value) {\r\n  return toStringTag(value) === 'Function' || typeof value === 'function';\r\n}\r\n\r\n/**\r\n * @function isInteger\r\n * @public\r\n * @param {*} value - Value to check if it is an integer.\r\n * @returns {Boolean} If the argument is an integer or not.\r\n *\r\n * @example\r\n * isInteger(0);             // true\r\n * isInteger(0.1);           // false\r\n * isInteger(new Number(0)); // true\r\n * isInteger('0');           // false\r\n * isInteger(Infinity);      // false\r\n * isInteger(NaN);           // false\r\n */\r\nexport function isInteger(value) {\r\n  return isNumber(value) && value % 1 === 0;\r\n}\r\n\r\n/**\r\n * @function isIntegerLike\r\n * @public\r\n * @param {*} value - Value to check if it is integer-like.\r\n * @returns {Boolean} If the argument is integer-like or not.\r\n *\r\n * @example\r\n * isIntegerLike(0);             // true\r\n * isIntegerLike(new Number(0)); // true\r\n * isIntegerLike(0.1);           // false\r\n * isIntegerLike('0');           // true\r\n */\r\nexport function isIntegerLike(value) {\r\n  value = parseInt(Number(value));\r\n\r\n  return !!(value || value === 0);\r\n}\r\n\r\n/**\r\n * @function isNaN\r\n * @public\r\n * @param {*} value - Value to check if it is NaN.\r\n * @returns {Boolean} If the argument is NaN or not.\r\n *\r\n * @example\r\n * isNaN(0);               // false\r\n * isNaN('NaN');           // false\r\n * isNaN(NaN);             // true\r\n * isNaN(new Number(NaN)); // true\r\n */\r\nexport function isNaN(value) {\r\n  if (!isNumber(value)) {\r\n    return false;\r\n  }\r\n  \r\n  value = Number(value);\r\n\r\n  return value !== value;\r\n}\r\n\r\n/**\r\n * @function isNull\r\n * @public\r\n * @param {*} value - Value to check if it is null.\r\n * @returns {Boolean} If the argument is null or not.\r\n *\r\n * @example\r\n * isNull(null);      // true\r\n * isNull(undefined); // false\r\n */\r\nexport function isNull(value) {\r\n  return value === null;\r\n}\r\n\r\n/**\r\n * @function isNil\r\n * @public\r\n * @param {*} value - Value to check if it is null or undefined.\r\n * @returns {Boolean} If the argument is null or undefined or not.\r\n *\r\n * @example\r\n * isNil(null);      // true\r\n * isNil(undefined); // true\r\n * isNil(false);     // false\r\n */\r\nexport function isNil(value) {\r\n  return value === null || typeof value === 'undefined';\r\n}\r\n\r\n/**\r\n * @function isNumber\r\n * @public\r\n * @param {*} value - Value to check if it is a number.\r\n * @returns {Boolean} If the argument is a number or not.\r\n *\r\n * @example\r\n * isNumber(0);             // true\r\n * isNumber(new Number(0)); // true\r\n * isNumber(NaN);           // true\r\n * isNumber('0');           // false\r\n */\r\nexport function isNumber(value) {\r\n  return toStringTag(value) === 'Number';\r\n}\r\n\r\n/**\r\n * @function isNumberLike\r\n * @public\r\n * @param {*} value - Value to check if it is number-like.\r\n * @returns {Boolean} If the argument is number-like or not.\r\n *\r\n * @example\r\n * isNumberLike(0);          // true\r\n * isNumberLike('0');        // true\r\n * isNumberLike('Infinity'); // true\r\n * isNumberLike('NaN');      // true\r\n * isNumberLike(NaN);        // true\r\n */\r\nexport function isNumberLike(value) {\r\n  if (isNaN(value) || value === 'NaN') {\r\n    return true;\r\n  }\r\n  \r\n  value = Number(value);\r\n  \r\n  return !!(value || value === 0);\r\n}\r\n\r\n/**\r\n * @function isObject\r\n * @public\r\n * @param {*} value - Value to check if it is an object.\r\n * @returns {Boolean} If the argument is an object or not.\r\n *\r\n * @example\r\n * isObject({});   // true\r\n * isObject(1);    // false\r\n * isObject(null); // false\r\n */\r\nexport function isObject(value) {\r\n  return !!value && (toStringTag(value) === 'Object' || typeof value === 'object' || value instanceof Object);\r\n}\r\n\r\n/**\r\n * @function isPlainObject\r\n * @public\r\n * @param {*} value - Value to check if it is a plain object.\r\n * @returns {Boolean} If the argument is a plain object or not.\r\n *\r\n * @example\r\n * const obj = {};\r\n *\r\n * ifPlainObject(obj); // true\r\n *\r\n * Object.setPrototypeOf(object, null);\r\n *\r\n * ifPlainObject(obj); // true\r\n *\r\n * Object.setPrototypeOf(object, {});\r\n *\r\n * ifPlainObject(obj); // false\r\n */\r\nexport function isPlainObject(value) {\r\n  if (isPrimitive(value)) {\r\n    return false;\r\n  }\r\n\r\n  const proto = Object.getPrototypeOf(value);\r\n\r\n  if (isNull(proto)) {\r\n    return true;\r\n  }\r\n\r\n  const constructor = proto.constructor;\r\n\r\n  return isFunction(constructor) &&\r\n    constructor instanceof constructor &&\r\n    isNull(Object.getPrototypeOf(proto));\r\n}\r\n\r\n/**\r\n * @function isPrimitive\r\n * @public\r\n * @param {*} value - Value to check if it is primitive.\r\n * @returns {Boolean} If the argument is primitive or not.\r\n *\r\n * @example\r\n * isPrimitive(1);             // true\r\n * isPrimitive({});            // false\r\n * isPrimitive('');            // true\r\n * isPrimitive(new Number(0)); // false\r\n * isPrimitive(true);          // true\r\n * isPrimitive(Symbol('foo')); // true\r\n * isPrimitive(null);          // true\r\n * isPrimitive(undefined);     // true\r\n */\r\nexport function isPrimitive(value) {\r\n  return isNull(value) || /^(number|string|boolean|symbol|undefined)$/.test(typeof value);\r\n}\r\n\r\n/**\r\n * @function isRegExp\r\n * @public\r\n * @param {*} value - Value to check if it is a regular expression.\r\n * @returns {Boolean} If the argument is a regular expression or not.\r\n *\r\n * @example\r\n * isRegExp(/foo/);             // true\r\n * isRegExp('/foo/');           // false\r\n * isRegExp(new RegExp('foo')); // true\r\n */\r\nexport function isRegExp(value) {\r\n  return toStringTag(value) === 'RegExp';\r\n}\r\n\r\n/**\r\n * @function isString\r\n * @public\r\n * @param {*} value - Value to check if it is a string.\r\n * @returns {Boolean} If the argument is a string or not.\r\n *\r\n * @example\r\n * isString('0');             // true\r\n * isString(new String('0')); // true\r\n */\r\nexport function isString(value) {\r\n  return toStringTag(value) === 'String';\r\n}\r\n\r\n/**\r\n * @function isSymbol\r\n * @public\r\n * @param {*} value - Value to check if it is a symbol.\r\n * @returns {Boolean} If the argument is a symbol or not.\r\n *\r\n * @example\r\n * isSymbol(Symbol('1')); // true\r\n */\r\nexport function isSymbol(value) {\r\n  return toStringTag(value) === 'Symbol';\r\n}\r\n\r\n/**\r\n * @function isUndefined\r\n * @public\r\n * @param {*} value - Value to check if it is undefined.\r\n * @returns {Boolean} If the argument is undefined or not.\r\n *\r\n * @example\r\n * isUndefined(null);      // false\r\n * isUndefined(undefined); // true\r\n */\r\nexport function isUndefined(value) {\r\n  return typeof value === 'undefined';\r\n}\r\n","/**\r\n * @module constants/validateCheckExpressions\r\n * @private\r\n * @description Exports different types of validate expressions for {@link module:helpers/validate}.\r\n */\r\n\r\nimport * as methods from '../helpers/checkTypes';\r\n\r\n/**\r\n * @callback checkValidityCallback\r\n * @private\r\n * @param {*} value - Value to check.\r\n */\r\n\r\n/**\r\n * @typedef {Object} validateExpr\r\n * @private\r\n * @property {String} text - Text of the thrown error.\r\n * @property {Error} error - Type of the thrown error.\r\n * @property {checkValidityCallback} check - Callback for checking value.\r\n */\r\n\r\n/**\r\n * @type {validateExpr[]}\r\n * @private\r\n * @description Object of different types of validation.\r\n */\r\nexport const validateCheckExpressions = {\r\n  '>0': {\r\n    check: (n) => n > 0,\r\n    text: '$n argument must be positive!',\r\n    error: RangeError\r\n  },\r\n  '>=0': {\r\n    check: (n) => n >= 0,\r\n    text: '$n argument must be non-negative!',\r\n    error: RangeError\r\n  },\r\n  '<0': {\r\n    check: (n) => n < 0,\r\n    text: '$n argument must be negative!',\r\n    error: RangeError\r\n  },\r\n  '<=0': {\r\n    check: (n) => n <= 0,\r\n    text: '$n argument must be non-positive!',\r\n    error: RangeError\r\n  },\r\n  '!!': {\r\n    check: (v) => !methods.isNil(v),\r\n    text: '$n argument must be not null or undefined!',\r\n    error: TypeError\r\n  },\r\n  array: {\r\n    check: methods.isArray,\r\n    text: '$n argument must be an array!',\r\n    error: TypeError\r\n  },\r\n  'array||!': {\r\n    check: (a) => methods.isArray(a) || methods.isNil(a),\r\n    text: '$n argument must be an array, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  arrayLike: {\r\n    check: methods.isArrayLike,\r\n    text: '$n argument must be array-like!',\r\n    error: TypeError\r\n  },\r\n  'arrayLike||!': {\r\n    check: (a) => methods.isArrayLike(a) || methods.isNil(a),\r\n    text: '$n argument must be array-like, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  date: {\r\n    check: methods.isDate,\r\n    text: '$n argument must be a date!',\r\n    error: TypeError\r\n  },\r\n  'date||!': {\r\n    check: (d) => methods.isDate(d) || methods.isNil(d),\r\n    text: '$n argument must be a date, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  dateLike: {\r\n    check: methods.isDateLike,\r\n    text: '$n argument must be date-like!',\r\n    error: TypeError\r\n  },\r\n  'dateLike||!': {\r\n    check: (d) => methods.isDateLike(d) || methods.isNil(d),\r\n    text: '$n argument must be date-like, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  function: {\r\n    check: methods.isFunction,\r\n    text: '$n argument must be a function!',\r\n    error: TypeError\r\n  },\r\n  'function||!': {\r\n    check: (f) => methods.isFunction(f) || methods.isNil(f),\r\n    text: '$n argument must be a function, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  int: {\r\n    check: methods.isInteger,\r\n    text: '$n argument must be an integer!',\r\n    error: TypeError\r\n  },\r\n  'int||!': {\r\n    check: (i) => methods.isInteger(i) || methods.isNil(i),\r\n    text: '$n argument must be an integer, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  intLike: {\r\n    check: methods.isIntegerLike,\r\n    text: '$n argument must be integer-like!',\r\n    error: TypeError\r\n  },\r\n  'intLike||!': {\r\n    check: (i) => methods.isIntegerLike(i) || methods.isNil(i),\r\n    text: '$n argument must be integer-like, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  number: {\r\n    check: methods.isNumber,\r\n    text: '$n argument must be a number!',\r\n    error: TypeError\r\n  },\r\n  'number||!': {\r\n    check: (n) => methods.isNumber(n) || methods.isNil(n),\r\n    text: '$n argument must be a number, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  numberLike: {\r\n    check: methods.isNumberLike,\r\n    text: '$n argument must be number-like!',\r\n    error: TypeError\r\n  },\r\n  'numberLike||!': {\r\n    check: (n) => methods.isNumberLike(n) || methods.isNil(n),\r\n    text: '$n argument must be number-like, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  object: {\r\n    check: methods.isObject,\r\n    text: '$n argument must be an object!',\r\n    error: TypeError\r\n  },\r\n  'object||!': {\r\n    check: (o) => methods.isObject(o) || methods.isNil(o),\r\n    text: '$n argument must be an object, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  regexp: {\r\n    check: methods.isRegExp,\r\n    text: '$n argument must be a regular expression!',\r\n    error: TypeError\r\n  },\r\n  'regexp||!': {\r\n    check: (r) => methods.isRegExp(r) || methods.isNil(r),\r\n    text: '$n argument must be a regular expression, or undefined, or null!',\r\n    error: TypeError\r\n  },\r\n  string: {\r\n    check: methods.isString,\r\n    text: '$n argument must be a string!',\r\n    error: TypeError\r\n  },\r\n  'string||!': {\r\n    check: (s) => methods.isString(s) || methods.isNil(s),\r\n    text: '$n argument must be a string, or undefined, or null!',\r\n    error: TypeError\r\n  }\r\n};\r\n","/**\r\n * @module D\r\n * @private\r\n * @description Exports D function.\r\n */\r\n\r\nimport { constructors } from './constants';\r\n\r\n/**\r\n * @function D\r\n * @public\r\n * @param {*} [value] - Any value.\r\n * @returns {DWrap} Wrap of the argument.\r\n * @description Function for creating a D-wrap of an object.\r\n *\r\n * @example\r\n * D({});            // Super\r\n * D(() => {});      // Func\r\n * D([]);            // Arr\r\n * D(1);             // Num\r\n * D('1');           // Str\r\n * D(new Date());    // Dat\r\n * D(document.body); // Elem\r\n */\r\nfunction D(value) {\r\n  for (let i = constructors.length - 1; i >= 0; i--) {\r\n    const levelConstructors = constructors[i];\r\n\r\n    for (let k = 0, len = levelConstructors.length; k < len; k++) {\r\n      const constructor = levelConstructors[k];\r\n\r\n      if (value instanceof constructor.cls) {\r\n        return value;\r\n      }\r\n\r\n      if (constructor.check(value)) {\r\n        return new constructor.cls(value);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport * from './helpers/checkTypes';\r\nexport { D };\r\n","/**\r\n * @module helpers/iterate\r\n * @private\r\n * @description Exports iterate method.\r\n */\r\n\r\nimport { isArrayLike, isUndefined } from './checkTypes';\r\n\r\n/**\r\n * @callback IterationCallback\r\n * @param {*} value - Iteration value.\r\n * @param {String|Number} key - Iteration key.\r\n * @param {*} object - Initial iterable object.\r\n */\r\n\r\n/**\r\n * @function iterate\r\n * @param {(Object|Array|null|undefined)} object - Value to iterate over.\r\n * @param {IterationCallback} callback - Callback that is called on every iteration.\r\n * @returns {*} If callback returns not undefined then iterate returns this value.\r\n * @description Function for iterating over all types of values.\r\n */\r\nexport function iterate(object, callback) {\r\n  const array = isArrayLike(object);\r\n  const iteratedKeys = {};\r\n\r\n  let iterated = 0;\r\n\r\n  for (const key in object) {\r\n    if ({}.hasOwnProperty.call(iteratedKeys, key)) {\r\n      continue;\r\n    }\r\n\r\n    iteratedKeys[key] = true;\r\n\r\n    if ({}.hasOwnProperty.call(object, key)) {\r\n      if (array && iterated++ >= object.length) {\r\n        break;\r\n      }\r\n\r\n      const value = callback(object[key], array ? Number(key) : key, object);\r\n\r\n      if (!isUndefined(value)) {\r\n        return value;\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @module helpers/assign\r\n * @private\r\n * @description Exports Object.assign-like method.\r\n */\r\n\r\nimport { iterate } from './iterate';\r\n\r\n/**\r\n * @const\r\n * @function assign\r\n * @param {Object} target - Object to assign rest of arguments to.\r\n * @param {...Object} objects - Objects that are assigned to the target.\r\n * @returns {Object} Target.\r\n */\r\nexport function assign(target, ...objects) {\r\n  iterate(arguments, (source, index) => {\r\n    if (index) {\r\n      iterate(source, (value, key) => {\r\n        target[key] = value;\r\n      });\r\n    }\r\n  });\r\n    \r\n  return target;\r\n}\r\n","/**\r\n * @module helpers/defineProperty\r\n * @private\r\n * @description Exports defineProperty and dynamicDefineProperties methods.\r\n */\r\n\r\nimport { iterate } from './iterate';\r\n\r\n/**\r\n * @callback propertyGeneratorCallback\r\n * @param {String} name - Name of the property.\r\n * @param {Number} i - Index of the array.\r\n * @returns {*} Generated property.\r\n */\r\n\r\n/**\r\n * @function dynamicDefineProperties\r\n * @param {Object} target - Object to define properties for.\r\n * @param {Array} properties - Object which keys are properties.\r\n * @param {propertyGeneratorCallback} propertyGenerator - Callback for every property.\r\n * @returns {void}\r\n * @description Function for dynamic creating properties based on name of the method.\r\n */\r\nexport function dynamicDefineProperties(target, properties, propertyGenerator) {\r\n  iterate(properties, (name, i) => {\r\n    Object.defineProperty(target, name, {\r\n      value: propertyGenerator(name, i),\r\n      writable: true,\r\n      enumerable: false,\r\n      configurable: true\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * @function defineProperties\r\n * @param {Object} target - Target to define properties for.\r\n * @param {Object} properties - Object with properties needed to be assign to the target.\r\n * @returns {void}\r\n * @description Function for defining properties of an object.\r\n */\r\nexport function defineProperties(target, properties) {\r\n  iterate(properties, (method, name) => {\r\n    if (/^get /.test(name)) {\r\n      Object.defineProperty(target, name.replace(/^get /, ''), {\r\n        get: method,\r\n        set: undefined,\r\n        enumerable: false,\r\n        configurable: true\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    if (/^set /.test(name)) {\r\n      Object.defineProperty(target, name.replace(/^set /, ''), {\r\n        set: method,\r\n        get: undefined,\r\n        enumerable: false,\r\n        configurable: true\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    if (/^get\\/set /.test(name)) {\r\n      Object.defineProperty(target, name.replace(/^get\\/set /, ''), {\r\n        get: method.get,\r\n        set: method.set,\r\n        enumerable: false,\r\n        configurable: true\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    if (name !== 'Symbol.toStringTag') {\r\n      Object.defineProperty(target, name, {\r\n        value: method,\r\n        writable: true,\r\n        enumerable: false,\r\n        configurable: true\r\n      });\r\n    }\r\n  });\r\n}\r\n","/**\r\n * @module helpers/Symbol\r\n * @private\r\n * @description Exports Symbol class.\r\n */\r\n\r\nexport const Symbol = global.Symbol || {\r\n  toStringTag: 'Symbol.toStringTag',\r\n  iterator: Math.random().toString(36)\r\n};\r\n","/**\r\n * @module helpers/toArray\r\n * @private\r\n * @description Exports toArray method.\r\n */\r\n\r\nimport { isArray, isArrayLike, isString } from './checkTypes';\r\nimport { iterate } from './iterate';\r\n\r\n/**\r\n * @function toArray\r\n * @param {*} value - Any value.\r\n * @param {Boolean} [createNewArray = false] - If it is needed to create new array.\r\n * @returns {Array} Create array.\r\n * @description Function for creating an array of any value.\r\n */\r\nexport function toArray(value, createNewArray) {\r\n  if (isArray(value) && !createNewArray) {\r\n    return value;\r\n  }\r\n\r\n  const array = [];\r\n\r\n  if (isArrayLike(value) && !isString(value)) {\r\n    iterate(value, (value) => {\r\n      array.push(value);\r\n    });\r\n  } else {\r\n    array.push(value);\r\n  }\r\n\r\n  return array;\r\n}\r\n","/**\r\n * @module helpers/validate\r\n * @private\r\n * @description Exports validate method.\r\n */\r\n\r\nimport { validateCheckExpressions } from '../constants';\r\nimport { iterate } from './iterate';\r\nimport { isArray } from './checkTypes';\r\n\r\nconst numbers = ['1st', '2nd', '3rd', '4th', '5th', '6th', '7th'];\r\n\r\n/**\r\n * @function validate\r\n * @private\r\n * @param {Object} args - Arguments of function.\r\n * @param {Object} options - Object with validate parameters.\r\n * @param {String} [name] - Name of the function what called validate.\r\n * @returns {void}\r\n * @description Function for checking arguments of other functions.\r\n */\r\nexport function validate(args, options, name) {\r\n  iterate(options, (array, number) => {\r\n    if (!isArray(array)) {\r\n      array = [array];\r\n    }\r\n\r\n    iterate(array, (checker) => {\r\n      checker = validateCheckExpressions[checker];\r\n\r\n      if (!checker.check(args[number])) {\r\n        throw new checker.error(checker.text.replace('$n', numbers[number]) + (name ? ` (at ${ name })` : ''));\r\n      }\r\n    });\r\n  });\r\n}\r\n","/**\r\n * @module Alphabet\r\n * @private\r\n * @mixin\r\n * @description Exports Alphabet class.\r\n */\r\n\r\nimport { isString, validate, defineProperties, Symbol } from './helpers';\r\n\r\n/**\r\n * @typedef {String} Char\r\n * @public\r\n * @description A string of one char.\r\n */\r\n\r\n/**\r\n * @class Alphabet\r\n * @public\r\n * @param {ArrayLike} alphabet - Alphabet to wrap.\r\n * @returns {Alphabet} Instance of Alphabet.\r\n * @description Class for alphabet manipulations: add, delete symbols, generate a token from an alphabet,\r\n * check if an alphabet contains a word.\r\n *\r\n * @example\r\n * new Alphabet(['a', 'b', 'c']);\r\n */\r\nclass Alphabet {\r\n  constructor(alphabet = []) {\r\n    const a = {};\r\n\r\n    for (let i = 0, length = alphabet.length; i < length; i++) {\r\n      const char = alphabet[i];\r\n\r\n      if (!check(char)) {\r\n        throw new Error('Each element of an array must be a single char! (in Alphabet)');\r\n      }\r\n\r\n      a[char] = char;\r\n    }\r\n\r\n    /**\r\n     * @member {Object} Alphabet#$$\r\n     * @public\r\n     * @description The alphabet.\r\n     */\r\n    Object.defineProperty(this, '$$', { value: a });\r\n  }\r\n\r\n  /**\r\n   * @method Alphabet#add\r\n   * @public\r\n   * @param {...Char} chars - Chars to add.\r\n   * @returns {Alphabet} Returns this.\r\n   * @description Method for adding new letters to the alphabet.\r\n   *\r\n   * @example\r\n   * const alphabet = new Alphabet(['a', 'b', 'c']);\r\n   *\r\n   * alphabet.add('d', 'e');\r\n   *\r\n   * alphabet.get().$; // ['a', 'b', 'c', 'd', 'e']\r\n   */\r\n  add(...chars) {\r\n    for (let i = 0, length = chars.length; i < length; i++) {\r\n      const char = chars[i];\r\n\r\n      if (!check(char)) {\r\n        throw new Error('Each argument must be a single char! (in Alphabet#add)');\r\n      }\r\n\r\n      this.$$[char] = char;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Alphabet#contains\r\n   * @public\r\n   * @param {String} word - Word to check if it is in the alphabet or not.\r\n   * @returns {Boolean} If the word in the alphabet or not.\r\n   * @description Method that returns if a word is in alphabet or not.\r\n   *\r\n   * @example\r\n   * const alphabet = new Alphabet(['f', 'b', 'o', 'a', 'r']);\r\n   *\r\n   * alphabet.contains('foo'); // true\r\n   * alphabet.contains('bar'); // true\r\n   * alphabet.contains('baz'); // false\r\n   */\r\n  contains(word) {\r\n    validate([word], ['string'], 'Alphabet#contains');\r\n\r\n    const alphabet = this.$$;\r\n\r\n    for (let i = 0, length = word.length; i < length; i++) {\r\n      if (!alphabet[word[i]]) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @method Alphabet#delete\r\n   * @public\r\n   * @param {...Char} chars - Chars to delete.\r\n   * @returns {Alphabet} Returns this.\r\n   * @description Method for deleting letters from the alphabet.\r\n   *\r\n   * @example\r\n   * const alphabet = new Alphabet(['a', 'b', 'c', 'd']);\r\n   *\r\n   * alphabet.delete('a');\r\n   *\r\n   * alphabet.get().$; // ['b', 'c', 'd']\r\n   *\r\n   * alphabet.delete('b', 'd');\r\n   *\r\n   * alphabet.get().$; // ['c']\r\n   */\r\n  delete(...chars) {\r\n    for (let i = 0, length = chars.length; i < length; i++) {\r\n      const char = chars[i];\r\n\r\n      if (!check(char)) {\r\n        throw new Error('Each argument must be a single char! (in Alphabet#delete)');\r\n      }\r\n\r\n      delete this.$$[char];\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Alphabet#get\r\n   * @returns {Array} Wrap of an array of alphabet letters.\r\n   * @description Method for getting array of alphabet letters.\r\n   *\r\n   * @example\r\n   * new Alphabet(['a', 'b', 'c']).get().$; // ['a', 'b', 'c']\r\n   */\r\n  get() {\r\n    return Object.keys(this.$$);\r\n  }\r\n\r\n  /**\r\n   * @method Alphabet#token\r\n   * @public\r\n   * @param {Number} length - Token length.\r\n   * @returns {String} Token.\r\n   * @description Method for generating random token with given length.\r\n   *\r\n   * @example\r\n   * new Alphabet(['a', 'b', 'c']).token(4); // 'abcb'\r\n   */\r\n  token(length) {\r\n    validate([length], [['intLike', '>0']], 'Alphabet#token');\r\n\r\n    const alphabet = Object.keys(this.$$);\r\n    const len = alphabet.length;\r\n    let token = '';\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      token += alphabet[Math.floor(Math.random() * len)];\r\n    }\r\n\r\n    return token;\r\n  }\r\n}\r\n\r\ndefineProperties(Alphabet.prototype, {\r\n  [Symbol.toStringTag]: 'Alphabet'\r\n});\r\n\r\nfunction check(char) {\r\n  return isString(char) && char.length === 1;\r\n}\r\n\r\n/**\r\n * @function alphabet\r\n * @public\r\n * @param {String} string - String to generate an alphabet from.\r\n * @returns {Alphabet} New instance of Alphabet.\r\n * @description Function for creating an alphabet from a string that has format like this:\r\n * '&lt;char1&gt;-&lt;char2&gt; &lt;char3&gt;-&lt;char4&gt;'\r\n *\r\n * @example\r\n * const a1 = alphabet('a-c 1-3');\r\n * const a2 = alphabet('5-5f-g');\r\n *\r\n * a1.get().$; // ['1', '2', '3', 'a', 'b', 'c']\r\n * a2.get().$; // ['5', 'f', 'g']\r\n */\r\nfunction alphabet(string) {\r\n  validate([string], ['string']);\r\n\r\n  const ranges = string.split(/([\\s\\S]-+[\\s\\S])?/g);\r\n  const length = ranges.length;\r\n  const alphabet = [];\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    const range = ranges[i];\r\n\r\n    if (!range || range === ' ') {\r\n      continue;\r\n    }\r\n\r\n    if (/-/.test(range) && !/[\\s\\S]-+[\\s\\S]/.test(range)) {\r\n      throw new Error(`Wrong part of the string (${ range })! (in alphabet)`);\r\n    }\r\n\r\n    if (/-/.test(range)) {\r\n      const start = range.charCodeAt(0);\r\n      const end = range.charCodeAt(2);\r\n\r\n      if (start > end) {\r\n        throw new Error('Start of the range must be before its end! (in alphabet)');\r\n      }\r\n\r\n      for (let k = 0, len = end - start + 1; k < len; k++) {\r\n        alphabet.push(String.fromCharCode(start + k));\r\n      }\r\n\r\n      continue;\r\n    }\r\n\r\n    if (range.length === 1) {\r\n      alphabet.push(range);\r\n    }\r\n  }\r\n\r\n  return new Alphabet(alphabet);\r\n}\r\n\r\nexport { Alphabet, alphabet };\r\n","/**\r\n * @module Switcher\r\n * @private\r\n * @mixin\r\n * @description Exports Switcher class.\r\n */\r\n\r\nimport {\r\n  isArray, isFunction, isString, isUndefined,\r\n  iterate, Symbol, toArray, defineProperties\r\n} from './helpers';\r\n\r\n/**\r\n * @typedef {'boolean'|'equals'|'strictEquals'|'call'} SwitcherMode\r\n * @public\r\n * @description Enum type of switcher modes.\r\n */\r\n\r\n/**\r\n * @callback SwitcherCallCallback\r\n * @public\r\n * @param {*} value - Switcher value.\r\n * @returns {Boolean|*} On what the callback returns depends if the case is a match (truthy for the match).\r\n */\r\n\r\n/**\r\n * @callback SwitcherMatchCallback\r\n * @public\r\n * @param {...*} args - Arguments from the second argument that switcher was called with.\r\n * @param {*} value - Switcher value.\r\n * @param {*} matched - Switcher matched case.\r\n */\r\n\r\n/**\r\n * @class Switcher\r\n * @public\r\n * @param {Object} [cases = {}] - Object of cases.\r\n * @param {SwitcherMode} [mode = 'equals'] - Switcher mode.\r\n * @param {*} [defaultValue] - Switcher default value.\r\n * @returns {Switcher} - Instance of Switcher.\r\n * @description Switcher class for creating functions working similar to switch (value) {} construction,\r\n * but with the value assignment. Switcher instance is a function that accepts a value argument and an optional\r\n * args argument. Args with additional switcher value and matched case\r\n * are passed into the function of the matched case (if it is a function).\r\n *\r\n * @example\r\n * const switcher = new Switcher();\r\n * const switcher = new Switcher({\r\n *   case1: 'value1',\r\n *   case2: 'value2'\r\n * });\r\n * const switcher = new Switcher('strictEquals');\r\n * const switcher = new Switcher({\r\n *   case1: 'value1',\r\n *   case2: 'value2'\r\n * }, 'strictEquals');\r\n * const switcher = new Switcher('strictEquals', 'defaultValue');\r\n * const switcher = new Switcher({\r\n *   case1: 'value1',\r\n *   case2: 'value2'\r\n * }, 'strictEquals', 'defaultValue');\r\n *\r\n * // See [switcher]{@link switcher} examples for more information.\r\n */\r\nclass Switcher extends Function {\r\n  constructor(cases = {}, mode = 'equals', defaultValue) {\r\n    super();\r\n\r\n    if (isString(cases)) {\r\n      if (!isUndefined(arguments[1])) {\r\n        defaultValue = mode;\r\n      }\r\n\r\n      mode = cases;\r\n      cases = {};\r\n    }\r\n\r\n    const eventualCases = [];\r\n\r\n    iterate(cases, (value, Case) => {\r\n      eventualCases.push({ case: Case, value });\r\n    });\r\n\r\n    function switcher(value, args = []) {\r\n      const { mode, default: def, cases } = switcher.$$;\r\n\r\n      let ret = iterate(cases, ({ value: val, case: Case }) => {\r\n        if (\r\n          (mode === 'boolean' && Case) ||\r\n          /* eslint eqeqeq: 0 */\r\n          (mode === 'equals' && Case == value) ||\r\n          (mode === 'strictEquals' && Case === value) ||\r\n          (mode === 'call' && Case(value))\r\n        ) {\r\n          return { case: Case, value: val };\r\n        }\r\n      });\r\n\r\n      if (isUndefined(ret)) {\r\n        ret = { value: def };\r\n      }\r\n\r\n      if (!isFunction(ret.value)) {\r\n        return ret.value;\r\n      }\r\n\r\n      args = toArray(args, true);\r\n      args.push(value, ret.case);\r\n\r\n      return ret.value.apply(null, args);\r\n    }\r\n\r\n    /**\r\n     * @member Switcher#$$\r\n     * @type {Object}\r\n     * @protected\r\n     * @property {Array} cases - Array of cases.\r\n     * @property {SwitcherMode} mode - Switcher mode.\r\n     * @property {*} default - Switcher default value.\r\n     * @description Config parameters.\r\n     */\r\n    Object.defineProperty(switcher, '$$', {\r\n      value: {\r\n        cases: eventualCases,\r\n        mode,\r\n        default: defaultValue\r\n      }\r\n    });\r\n    Object.setPrototypeOf(switcher, Switcher.prototype);\r\n\r\n    return switcher;\r\n  }\r\n\r\n  /**\r\n   * @method Switcher#case\r\n   * @public\r\n   * @param {*|SwitcherCallCallback|Array.<*|SwitcherCallCallback>} cases - Case or an array of cases.\r\n   * @param {*|SwitcherMatchCallback} value - Value that has to be assigned or a function\r\n   * that is called with switcher value, if it's the case.\r\n   * @returns {Switcher} Returns this.\r\n   * @description Method for defining new cases.\r\n   *\r\n   * @example\r\n   * const sw = new Switcher()\r\n   *   .case(1, 'one')\r\n   *   .case(2, 'two');\r\n   *\r\n   * sw(1); // 'one'\r\n   * sw(2); // 'two'\r\n   */\r\n  case(cases, value) {\r\n    if (!isArray(cases)) {\r\n      cases = [cases];\r\n    }\r\n\r\n    iterate(cases, (Case) => {\r\n      this.$$.cases.push({ case: Case, value });\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Switcher#default\r\n   * @public\r\n   * @param {*} def - New default value.\r\n   * @returns {Switcher} Returns this.\r\n   * @description Method for redefining default switcher value.\r\n   *\r\n   * @example\r\n   * const sw = new Switcher()\r\n   *   .case(1, 'one')\r\n   *   .default('three');\r\n   *\r\n   * sw(1); // 'one'\r\n   * sw(2); // 'three'\r\n   */\r\n  default(def) {\r\n    this.$$.default = def;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Switcher#mode\r\n   * @public\r\n   * @param {SwitcherMode} mode - New switcher mode.\r\n   * @returns {Switcher} Returns this.\r\n   * @description Method for redefining switcher mode.\r\n   *\r\n   * @example\r\n   * const sw = new Switcher()\r\n   *   .mode('strictEquals')\r\n   *   .case(1, 'number')\r\n   *   .case('1', 'string');\r\n   *\r\n   * sw(1);   // 'number'\r\n   * sw('1'); // 'string'\r\n   */\r\n  mode(mode) {\r\n    this.$$.mode = mode;\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\ndefineProperties(Switcher.prototype, {\r\n  [Symbol.toStringTag]: 'Switcher'\r\n});\r\n\r\n/**\r\n * @function switcher\r\n * @public\r\n * @param {Object} [cases = {}] - Object of cases.\r\n * @param {SwitcherMode} [mode = 'equals'] - Switcher mode.\r\n * @param {*} [defaultValue] - Switcher default value.\r\n * @returns {Switcher} New instance of Switcher.\r\n * @description Simple wrap of [new Switcher(...)]{@link Switcher}.\r\n * \r\n * @example\r\n * const sw = switcher({\r\n *   1: 'foo',\r\n *   2: 'bar'\r\n * });\r\n * sw(1); // 'foo'\r\n * sw(2); // 'bar'\r\n * sw(3); // undefined\r\n * \r\n * @example\r\n * const sw = switcher()\r\n *   .case([1, 2], 'foo')\r\n *   .case(3, 'bar');\r\n *   \r\n * sw(1); // 'foo'\r\n * sw(2); // 'foo'\r\n * sw(3); // 'bar'\r\n * \r\n * @example\r\n * const sw = switcher('call')\r\n *   .case(isArray, 'array')\r\n *   .case(isString, 'string')\r\n *   .case(isNumber, 'number')\r\n *   .default('rest');\r\n *   \r\n * sw([]);    // 'array'\r\n * sw('foo'); // 'string'\r\n * sw(123);   // 'number'\r\n * sw({});    // 'rest'\r\n * \r\n * @example\r\n * const sw = switcher({\r\n *   1: (value) => {\r\n *     console.log(value + 1);\r\n *   },\r\n *   2: () => {\r\n *     console.log(value - 1);\r\n *   }\r\n * });\r\n * \r\n * sw(1); // 2\r\n * sw(2); // 1\r\n * \r\n * @example\r\n * const sw = switcher({\r\n *   first: (array) => array[0],\r\n *   last: (array) => array[array.length - 1]\r\n * }, 'equals', (array, index) => array[index]);\r\n * const array = [1, 2, 3, 4];\r\n * \r\n * sw('first', [array]); // 1\r\n * sw('last', [array]);  // 4\r\n * sw(1, [array]);       // 2\r\n * sw(2, [array]);       // 3\r\n */\r\nfunction switcher(cases, mode, defaultValue) {\r\n  return new Switcher(...arguments);\r\n}\r\n\r\n/**\r\n * @function when\r\n * @public\r\n * @param {Boolean|*} condition - Condition used for returning the proper value.\r\n * @param {*} value1 - Value if the condition is truthy.\r\n * @param {*} value2 - Value if the condition is falsey.\r\n * @returns {*} value1 or value2.\r\n * @description Synonym for\r\n * [ternary operator]{@link https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference/Operators/Conditional_Operator}.\r\n * \r\n * @example\r\n * when(true, 'true', 'false'); // 'true'\r\n */\r\nfunction when(condition, value1, value2) {\r\n  return condition ? value1 : value2;\r\n}\r\n\r\nexport { Switcher, switcher, when };\r\n","/**\r\n * @module Super\r\n * @private\r\n * @mixin\r\n * @description Exports Super class.\r\n */\r\n\r\nimport { D } from './D';\r\nimport { switcher } from './Switcher';\r\nimport { constructors } from './constants/constructors';\r\nimport {\r\n  isArray, isArrayLike, isDate, isElement, isFunction, isNil, isNaN, isNull,\r\n  isObject, isPlainObject, isPrimitive, isRegExp, isString, isUndefined,\r\n  validate, toStringTag, iterate, Symbol, defineProperties\r\n} from './helpers';\r\n\r\n/**\r\n * @typedef {Super|Arr|Func|Elem|Str|Num|Dat|BlobObject} DWrap\r\n * @public\r\n * @description Any kind of D-Wrap.\r\n */\r\n\r\n/**\r\n * @typedef {String|Number|null} Key\r\n * @public\r\n * @description Key type used in many methods.\r\n */\r\n\r\n/**\r\n * @typedef {TreeElement[]} Tree\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {Object} TreeElement\r\n * @public\r\n * @property {Key} key - Tree element key.\r\n * @property {*} value - Tree element value.\r\n * @description {@link Tree} element.\r\n */\r\n\r\n/**\r\n * @callback DeepIterationCallback\r\n * @public\r\n * @param {*} value - Current iteration value.\r\n * @param {String|Number} key - Current iteration key/index.\r\n * @param {*} object - Iteration object.\r\n * @param {Tree} tree - Tree of { key, value } elements.\r\n */\r\n\r\n/**\r\n * @callback DeepReduceCallback\r\n * @public\r\n * @param {*} previousValue - Previous value.\r\n * @param {*} value - Current iteration value.\r\n * @param {String|Number} key - Current iteration key/index.\r\n * @param {*} object - Iteration object.\r\n * @param {Tree} tree - Tree of { key, value } elements.\r\n */\r\n\r\n/**\r\n * @callback IterationCallback\r\n * @public\r\n * @param {*} value - Current iteration value.\r\n * @param {String|Number} key - Current iteration key/index.\r\n * @param {*} object - Iteration object.\r\n */\r\n\r\n/**\r\n * @callback JSONCallback\r\n * @public\r\n * @param {String|null} key - Current value.\r\n * @param {*} value - Current key.\r\n * @param {Object} object - Iteration object.\r\n */\r\n\r\n/**\r\n * @callback ObjectCallback\r\n * @public\r\n * @param {Object} newObject - The new object.\r\n * @param {*} value - Current iteration value.\r\n * @param {String|Number} key - Current iteration key/index.\r\n * @param {*} object - Iteration object.\r\n */\r\n\r\n/**\r\n * @callback ReduceCallback\r\n * @public\r\n * @param {*} previousValue - Previous value.\r\n * @param {*} value - Current iteration value.\r\n * @param {String|Number} key - Current iteration key/index.\r\n * @param {*} object - Iteration object.\r\n */\r\n\r\n/**\r\n * @callback SuperMethod\r\n * @public\r\n * @this {DWrap}\r\n */\r\n\r\nconst cloneSwitcher = switcher('call', (object) => object)\r\n  .case(\r\n    (object) => new Super(object) === object,\r\n    (object) => new (Object.getPrototypeOf(object).constructor)(new Super(object.$).deepClone().$)\r\n  )\r\n  .case(isElement, (object, deep) => object.clone(deep))\r\n  .case(isDate, (object) => new Date(object))\r\n  .case(isRegExp, (object) => new RegExp(object.source, object.toString().match(/[gimuy]*$/)[0]))\r\n  .case(isArray, () => [])\r\n  .case(isPlainObject, () => ({}));\r\n\r\n/**\r\n * @class Super\r\n * @public\r\n * @param {*} [object] - An object to wrap.\r\n * @returns {DWrap} Instance of Super.\r\n * @description Wrap of any value. And there is no way to create a nested wrap.\r\n *\r\n * @example\r\n * new Super({}); // Super\r\n */\r\nclass Super {\r\n  constructor(object) {\r\n    if (object instanceof Super) {\r\n      return object;\r\n    }\r\n\r\n    /**\r\n     * @member Super#$\r\n     * @type {*}\r\n     * @public\r\n     * @description Wrapped object.\r\n     */\r\n    Object.defineProperty(this, '$', { value: object });\r\n  }\r\n\r\n  /**\r\n   * @method Super.addStaticProperties\r\n   * @public\r\n   * @param {String|Object} property - Either a string of a property or an object\r\n   * with properties keys and values values.\r\n   * @param {Object} [value] - If a property parameter is a string this has to be a property value.\r\n   * @returns {this} Returns this.\r\n   * @description Sets static properties for DWrap constructors.\r\n   *\r\n   * @example\r\n   * Super.addStaticProperties('cool', 42);\r\n   * Super.addStaticProperties('superCool', 42*42);\r\n   */\r\n  static addStaticProperties(property, value) {\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: value };\r\n    }\r\n\r\n    defineProperties(this, property);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super.addInstanceProperties\r\n   * @public\r\n   * @param {String|Object} property - Either a string of a property or an object\r\n   * with properties keys and values values.\r\n   * @param {Object} [value] - If a property parameter is a string this has to be a property value.\r\n   * @returns {this} Returns this.\r\n   * @description Sets static properties for DWrap prototypes.\r\n   *\r\n   * @example\r\n   * Super.addInstanceProperties('cool', 42);\r\n   * Super.addInstanceProperties('superCool', 42*42);\r\n   */\r\n  static addInstanceProperties(property, value) {\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: value };\r\n    }\r\n\r\n    defineProperties(this.prototype, property);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#assign\r\n   * @public\r\n   * @param {...(Object|Super|*)} objects - Objects to be assigned to the object.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Synonym for\r\n   * [Object.assign]\r\n   * {@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2 }).assign({ a: 3 }, { c: 3, d: 4 }, { d: 5 }).$; // { a: 3, b: 2, c: 3, d: 5 }\r\n   */\r\n  assign(...objects) {\r\n    const object = this.$;\r\n\r\n    iterate(object && arguments, (o) => {\r\n      iterate(new Super(o).$, (value, key) => {\r\n        object[key] = value;\r\n      });\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#average\r\n   * @public\r\n   * @param {IterationCallback} [callback = null] - Callback that is passed to {@link Super#sum}.\r\n   * @returns {Number} Average value.\r\n   * @description Synonym for object.sum(callback) / object.count.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).average();                         // 2\r\n   * new Super({ a: 1, b: 2, c: 5 }).average((value) => value * value); // 10\r\n   */\r\n  average(callback = null) {\r\n    validate([callback], ['function||!'], 'Super#average');\r\n\r\n    return this.sum(callback) / this.count;\r\n  }\r\n\r\n  /**\r\n   * @method Super#call\r\n   * @public\r\n   * @param {SuperMethod} func - Function to be called with this context.\r\n   * @param {...*} args - Arguments to be called with.\r\n   * @returns {*} Return of function call.\r\n   * @description Synonym for func.call(DObject, ...args);\r\n   *\r\n   * @example\r\n   * new Super({ a: 1 }).call(function (b, c) {\r\n   *   return this.a + b + c;\r\n   * }, 2, 3); // 6\r\n   */\r\n  call(func, ...args) {\r\n    validate([func], ['function'], 'Super#call');\r\n\r\n    return func.apply(this, args);\r\n  }\r\n\r\n  /**\r\n   * @method Super#clone\r\n   * @returns {DWrap} New object.\r\n   * @description Method assigns properties of the object to an empty one and returns the new one.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2 } }).clone().$; // { a: 1, b: { c: 2 } }\r\n   */\r\n  clone() {\r\n    const object = this.$;\r\n    const clone = cloneSwitcher(object, [object, false]);\r\n\r\n    if (clone !== object) {\r\n      iterate(object, (value, key) => {\r\n        clone[key] = value;\r\n      });\r\n    }\r\n\r\n    return new this.constructor(clone);\r\n  }\r\n\r\n  /**\r\n   * @member Super#count\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description Returns number of own enumerable keys of the object.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2 }).count; // 2\r\n   */\r\n  get count() {\r\n    const object = this.$;\r\n\r\n    if (!isObject(object)) {\r\n      return 0;\r\n    }\r\n\r\n    return isArrayLike(object) ? object.length : Object.keys(object).length;\r\n  }\r\n\r\n  /**\r\n   * @method Super#create\r\n   * @public\r\n   * @param {Object} [descriptors] - Descriptors passed to Object.create.\r\n   * @returns {DWrap} New instance of D-Wrap.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create\r\n   * @description Synonym for\r\n   * [Object.create]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create}.\r\n   *\r\n   * @example\r\n   * new Super({}).create({\r\n   *   a: {\r\n   *     value: 1,\r\n   *     enumerable: false,\r\n   *     writable: true,\r\n   *     configurable: false\r\n   *   }\r\n   * }).$; // { a: 1 }\r\n   */\r\n  create(descriptors) {\r\n    return D(isPrimitive(this.$) ? undefined : Object.create(this.$, descriptors));\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepAssign\r\n   * @public\r\n   * @param {...*} objects - Objects to be assigned to the object.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Deep analogue of {@link Super#assign}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1 }).deepAssign(\r\n   *   {\r\n   *     b: {\r\n   *       c: 2\r\n   *     }\r\n   *   },\r\n   *   {\r\n   *     a: {\r\n   *       b: 1\r\n   *     }\r\n   *   },\r\n   *   {\r\n   *     a: {\r\n   *       c: {\r\n   *         d: 1\r\n   *       }\r\n   *     },\r\n   *     b: 2\r\n   *   },\r\n   *   null\r\n   * });\r\n   * // {\r\n   * //   a: {\r\n   * //     b: 1,\r\n   * //     c: {\r\n   * //       d: 1\r\n   * //     }\r\n   * //   },\r\n   * //   b: 2,\r\n   * // }\r\n   */\r\n  deepAssign(...objects) {\r\n    const object = this.$;\r\n\r\n    if (isPrimitive(object)) {\r\n      return this;\r\n    }\r\n\r\n    iterate(arguments, (o) => {\r\n      deepAssign(object, o);\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepClone\r\n   * @public\r\n   * @returns {DWrap} New instance of DWrap.\r\n   * @description Deep cloning method. Clones plain objects, arrays, regular expressions and elements, the rest stays the same.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: [2, 3], c: { d: 4 } }).deepClone().$;\r\n   * // {\r\n   * //   a: 1,\r\n   * //   b: [2, 3],\r\n   * //   c: { d: 4 }\r\n   * // }\r\n   */\r\n  deepClone() {\r\n    return new this.constructor(deepClone(this.$));\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepEquals\r\n   * @public\r\n   * @param {*} [object] - Object to compare to.\r\n   * @returns {Boolean} - If the objects are deep equal or not.\r\n   * @description Method for deep comparison of two objects.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1 }).deepEquals({ a: '1' }); // true\r\n   * new Super(/1/).deepEquals(/1/);             // true\r\n   */\r\n  deepEquals(object = null) {\r\n    return deepEqual(this.$, object, false);\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepEvery\r\n   * @public\r\n   * @param {DeepIterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy iteration goes on and if falsey it stops.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {Boolean} If all the callback calls returned truthy value.\r\n   * @description Returns boolean if all the callback calls returned truthy value.\r\n   * Otherwise false. Deep analogue of {@link Super#every}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepEvery((value) => value < 4); // true\r\n   * new Super({ a: {}, b: {}, c: {} }).deepEvery(() => false);              // true\r\n   */\r\n  deepEvery(callback, n) {\r\n    if (arguments.length === 1 && !isFunction(callback)) {\r\n      n = callback;\r\n      callback = Boolean;\r\n    } else if (arguments.length === 1) {\r\n      n = Infinity;\r\n    } else if (!arguments.length) {\r\n      n = Infinity;\r\n      callback = Boolean;\r\n    }\r\n\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepEvery');\r\n\r\n    n = Number(n);\r\n\r\n    return deepEvery(this.$, callback, n, [{ key: null, value: this.$ }]);\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepFilter\r\n   * @public\r\n   * @param {DeepIterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy the element is included and if falsey it's excluded.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {DWrap} New D-Wrap of filtered object.\r\n   * @description Returns filtered by the callback object. Deep analogue of {@link Super#filter}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFilter((value) => value%2).$;     // { a: 1, b: { d: 3 } }\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFilter((value) => value === 1).$; // { a: 1 }\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFilter((value) => value > 3).$;   // {}\r\n   */\r\n  deepFilter(callback, n) {\r\n    if (arguments.length === 1 && !isFunction(callback)) {\r\n      n = callback;\r\n      callback = Boolean;\r\n    } else if (arguments.length === 1) {\r\n      n = Infinity;\r\n    } else if (!arguments.length) {\r\n      n = Infinity;\r\n      callback = Boolean;\r\n    }\r\n\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepFilter');\r\n\r\n    const filtered = deepFilter(this.$, callback, n, [{ key: null, value: this.$ }]);\r\n\r\n    return D(isNil(filtered) ? filtered : filtered || {});\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepFind\r\n   * @public\r\n   * @param {DeepIterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy iteration stops and if falsey it continues.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {Tree|null} Tree of { key, value } if something found and null if not.\r\n   * @description Returns tree of the elements if something found and null if nothing found.\r\n   * Deep analogue of {@link Super#find}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFind((value) => value === 2);\r\n   * // [\r\n   * //   { key: 'c', value: 2 },\r\n   * //   { key: 'b', value: { c: 2, d: 3 } },\r\n   * //   { key: null, value: <initial object> }\r\n   * // ]\r\n   */\r\n  deepFind(callback, n) {\r\n    if (arguments.length === 1 && !isFunction(callback)) {\r\n      n = callback;\r\n      callback = Boolean;\r\n    } else if (arguments.length === 1) {\r\n      n = Infinity;\r\n    } else if (!arguments.length) {\r\n      n = Infinity;\r\n      callback = Boolean;\r\n    }\r\n\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepFind');\r\n\r\n    return deepFind(this.$, callback, n, [{ key: null, value: this.$ }]);\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepForEach\r\n   * @public\r\n   * @param {DeepIterationCallback} callback - Called on each iteration.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Method for iterating over any object. Deep analogue of {@link Super#forEach}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepForEach((value, key, object) => object[key] = value * value).$;\r\n   * // { a: 1, b: { c: 4, d: 9 } }\r\n   */\r\n  deepForEach(callback, n = Infinity) {\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepForEach');\r\n\r\n    n = Number(n);\r\n\r\n    deepForEach(this.$, callback, n, [{ key: null, value: this.$ }]);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepForEach\r\n   * @public\r\n   * @param {DeepIterationCallback} callback - Called on each iteration.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Method for iterating over any object. Deep analogue of {@link Super#forEach}.\r\n   * Unlike {@link Super#deepForEach} the callback is called on every value of every object inside\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepForEach((value, key, object) => object[key] = value * value).$;\r\n   * // { a: 1, b: { c: 4, d: 9 } }\r\n   */\r\n  deepForEachEntry(callback, n = Infinity) {\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepForEach');\r\n\r\n    n = Number(n);\r\n\r\n    deepForEachEntry(this.$, callback, n, [{ key: null, value: this.$ }]);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepFreeze\r\n   * @public\r\n   * @returns {DWrap} Returns this.\r\n   * @description Deep analogue of {@link Super#freeze}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepFreeze(); // Super\r\n   */\r\n  deepFreeze() {\r\n    deepFreeze(this.$);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepMap\r\n   * @public\r\n   * @param {DeepIterationCallback} callback - Called on each iteration.\r\n   * Return value is used for creating a new object.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {DWrap} D-Wrap of the new object.\r\n   * @description Returns a wrap of a new object using the callback. Deep analogue of {@link Super#map}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepMap((value) => value * value).$;\r\n   * // { a: 1, b: { c: 4, d: 9 } }\r\n   */\r\n  deepMap(callback, n = Infinity) {\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepMap');\r\n\r\n    n = Number(n);\r\n\r\n    return D(deepMap(this.$, callback, n, [{ key: null, value: this.$ }]));\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepReduce\r\n   * @public\r\n   * @param {DeepReduceCallback} callback - Called on each iteration.\r\n   * Return value is passed to the next callback call.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @param {*} [IV = <first value>|undefined] - Initial value.\r\n   * @returns {*} Modified IV.\r\n   * @description Returns modified IV. Deep analogue of {@link Super#reduce}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepReduce((sum, value) => sum + value * value, Infinity, 0); // 14\r\n   */\r\n  deepReduce(callback, n = Infinity, IV) {\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepReduce');\r\n\r\n    n = Number(n);\r\n\r\n    const object = this.$;\r\n    const tree = [{ key: null, value: this.$ }];\r\n\r\n    if (arguments.length < 3) {\r\n      return deepReduce(object, callback, n, false, undefined, tree).IV;\r\n    }\r\n\r\n    return deepReduce(object, callback, n, false, { IV }, tree).IV;\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepSome\r\n   * @public\r\n   * @param {DeepIterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy iteration stops and if falsey it continues.\r\n   * @param {Number} [n = Infinity] - Iteration depth.\r\n   * @returns {Boolean} If all the callback calls returned truthy value.\r\n   * @description Returns true if some of the callback calls returned truthy value.\r\n   * Otherwise false. Deep analogue of {@link Super#some}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: { c: 2, d: 3 } }).deepSome((value) => value > 4); // false\r\n   * new Super({ a: {}, b: {}, c: {} }).deepSome(() => true);               // false\r\n   */\r\n  deepSome(callback, n) {\r\n    if (arguments.length === 1 && !isFunction(callback)) {\r\n      n = callback;\r\n      callback = Boolean;\r\n    } else if (arguments.length === 1) {\r\n      n = Infinity;\r\n    } else if (!arguments.length) {\r\n      n = Infinity;\r\n      callback = Boolean;\r\n    }\r\n\r\n    validate([callback, n], ['function', ['numberLike', '>0']], 'Super#deepSome');\r\n\r\n    n = Number(n);\r\n\r\n    return deepSome(this.$, callback, n, [{ key: null, value: this.$ }]);\r\n  }\r\n\r\n  /**\r\n   * @method Super#deepStrictEquals\r\n   * @public\r\n   * @param {*} [object] - Object to compare to.\r\n   * @returns {Boolean} - If the objects are deep strict equal or not.\r\n   * @description Method for deep strict comparison of two objects.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1 }).deepStrictEquals({ a: '1' }); // false\r\n   * new Super(/1/).deepStrictEquals(/1/);             // true\r\n   */\r\n  deepStrictEquals(object = null) {\r\n    return deepEqual(this.$, object, true);\r\n  }\r\n\r\n  /**\r\n   * @method Super#define\r\n   * @param {String|Object} property - Either a string of a property or a descriptors object.\r\n   * @param {Object} [descriptor] - If a property parameter is a string this has to be a property descriptor.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Synonym for both\r\n   * [Object.defineProperty]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty}\r\n   * and\r\n   * [Object.defineProperties]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties}.\r\n   *\r\n   * @example\r\n   * new Super({}).define('a', {\r\n   *   value: 1,\r\n   *   enumerable: false,\r\n   *   writable: true,\r\n   *   configurable: false\r\n   * }).$; // { a: 1 }\r\n   * new Super({}).define({\r\n   *   a: {\r\n   *     value: 1,\r\n   *     enumerable: false,\r\n   *     writable: true,\r\n   *     configurable: false\r\n   *   }\r\n   * }).$; // { a: 1 }\r\n   */\r\n  define(property, descriptor) {\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: descriptor };\r\n    }\r\n\r\n    property = new Super(property).$;\r\n\r\n    if (isObject(this.$)) {\r\n      Object.defineProperties(this.$, property);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#delete\r\n   * @public\r\n   * @param {...String} props - List of properties to delete.\r\n   * @returns {DWrap} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/delete\r\n   * @description Synonym for multiple\r\n   * [\"delete\" operator]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/delete}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).delete('c', 'a').$; // { b: 2 }\r\n   */\r\n  delete(...props) {\r\n    const object = this.$;\r\n\r\n    iterate(object && props, (property) => {\r\n      delete object[property];\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#equals\r\n   * @public\r\n   * @param {*} [object] - Object to compare.\r\n   * @returns {Boolean} If the objects are equal or not.\r\n   * @description Returns true if objects are equal using '==' operator and false if not. NaNs are considered to be equal.\r\n   *\r\n   * @example\r\n   * new Super(3).equals('3');   // true\r\n   * new Super(NaN).equals(NaN); // true\r\n   */\r\n  equals(object) {\r\n    const o = this.$;\r\n\r\n    object = new Super(object).$;\r\n\r\n    /* eslint eqeqeq: 0 */\r\n    return o == object || (isNaN(o) && isNaN(object));\r\n  }\r\n\r\n  /**\r\n   * @method Super#every\r\n   * @public\r\n   * @param {IterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy iteration goes on and if falsey it stops.\r\n   * @returns {Boolean} If all the callback calls returned truthy value.\r\n   * @description Returns boolean if all the callback calls returned truthy value.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).every((value) => value < 4); // true\r\n   * new Super({}).every(() => false);                            // true\r\n   */\r\n  every(callback = Boolean) {\r\n    validate([callback], ['function'], 'Super#every');\r\n\r\n    return iterate(this.$, (value, key, object) => {\r\n      if (!callback(value, key, object)) {\r\n        return false;\r\n      }\r\n    }) !== false;\r\n  }\r\n\r\n  /**\r\n   * @method Super#filter\r\n   * @public\r\n   * @param {IterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy the element is included and if falsey it's excluded.\r\n   * @returns {DWrap} New D-Wrap of filtered object.\r\n   * @description Returns filtered by the callback object.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).filter((value) => value%2).$; // { a: 1, c: 3 }\r\n   * new Super(null).filter((value) => value%2).$;                 // null\r\n   */\r\n  filter(callback = Boolean) {\r\n    validate([callback], ['function'], 'Super#filter');\r\n\r\n    const object = this.$;\r\n    const array = isArrayLike(object);\r\n\r\n    /* eslint no-nested-ternary: 0 */\r\n    const o = array ? [] : isNil(object) ? object : {};\r\n\r\n    iterate(object, (value, key) => {\r\n      if (callback(value, key, object)) {\r\n        if (array) {\r\n          o.push(value);\r\n        } else {\r\n          o[key] = value;\r\n        }\r\n      }\r\n    });\r\n\r\n    return D(o);\r\n  }\r\n\r\n  /**\r\n   * @method Super#find\r\n   * @public\r\n   * @param {IterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy iteration stops and if falsey it continues.\r\n   * @returns {{ key: Key, value: * }|null} { key, value } if found and null if not.\r\n   * @description Returns found { key, value } if something found and null if nothing found.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).find((value) => value === 2); // { key: 'b', value: 2 }\r\n   * new Super([1, 2, 3]).find((value) => value === 2);            // { key: 1, value: 2 }\r\n   */\r\n  find(callback) {\r\n    validate([callback], ['function'], 'Super#find');\r\n\r\n    return iterate(this.$, (value, key, object) => {\r\n      if (callback(value, key, object)) {\r\n        return { key, value };\r\n      }\r\n    }) || null;\r\n  }\r\n\r\n  /**\r\n   * @method Super#forEach\r\n   * @public\r\n   * @param {IterationCallback} callback - Called on each iteration.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Method for iterating over any object.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).forEach((value, key, object) => {\r\n   *   object[key] = value * value;\r\n   * }).$; // { a: 1, b: { c: 4, d: 5 } }\r\n   */\r\n  forEach(callback) {\r\n    validate([callback], ['function'], 'Super#forEach');\r\n\r\n    iterate(this.$, (value, key, object) => {\r\n      callback(value, key, object);\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#freeze\r\n   * @public\r\n   * @returns {DWrap} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\r\n   * @description Synonym for\r\n   * [Object.freeze]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).freeze(); // Super\r\n   */\r\n  freeze() {\r\n    Object.freeze(this.$);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#get\r\n   * @public\r\n   * @param {String|Object.<String, Function>} property - Either a string of a property or a getters object.\r\n   * @param {Function} [getter] - If a property parameter is a string this has to be a getter function.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Method for defining getters.\r\n   *\r\n   * @example\r\n   * const object1 = new Super({}).get('a', () => 1).$;\r\n   * object1.a; // 1\r\n   *\r\n   * const object2 = new Super({}).get({\r\n   *   a: () => 2\r\n   * }).$;\r\n   * object2.a; // 2\r\n   */\r\n  get(property, getter) {\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: getter };\r\n    }\r\n\r\n    const object = this.$;\r\n\r\n    iterate(isObject(object) && new Super(property).$, (getter, property) => {\r\n      Object.defineProperty(object, property, { get: getter });\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#has\r\n   * @public\r\n   * @param {String|*} key - Property to check.\r\n   * @returns {Boolean} Returns true if the object has the key and false if not.\r\n   * @see https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/in\r\n   * @description Synonym for\r\n   * [\"in\" operator]{@link https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/in}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).has('b'); // true\r\n   */\r\n  has(key) {\r\n    const object = this.$;\r\n\r\n    if (!isObject(object)) {\r\n      return false;\r\n    }\r\n\r\n    return key in object;\r\n  }\r\n\r\n  /**\r\n   * @method Super#hasOwn\r\n   * @public\r\n   * @param {String|*} key - Property to check.\r\n   * @returns {Boolean} Returns true if the object has its own key and false if not.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\r\n   * @description Synonym for\r\n   * [Object#hasOwnProperty]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).hasOwn('b');              // true\r\n   * new Super({ a: 1, b: 2, c: 3 }).hasOwn('hasOwnProperty'); // false\r\n   */\r\n  hasOwn(key) {\r\n    const object = this.$;\r\n\r\n    if (!isObject(object)) {\r\n      return false;\r\n    }\r\n\r\n    return {}.hasOwnProperty.call(object, key);\r\n  }\r\n\r\n  /**\r\n   * @method Super#instanceof\r\n   * @public\r\n   * @param {Function} constructor - Constructor to check.\r\n   * @returns {Boolean} If the object is an instance of constructor.\r\n   * @see https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/instanceof\r\n   * @description Synonym for\r\n   * [\"instanceof\" operator]{@link https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/instanceof}.\r\n   */\r\n  instanceof(constructor) {\r\n    return this.$ instanceof constructor;\r\n  }\r\n\r\n  /**\r\n   * @method Super#isFrozen\r\n   * @public\r\n   * @returns {Boolean} If the object is frozen.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\r\n   * @description Synonym for\r\n   * [Object.isFrozen]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen}.\r\n   *\r\n   * @example\r\n   * new Super({}).freeze().isFrozen(); // true\r\n   */\r\n  isFrozen() {\r\n    return Object.isFrozen(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Super#json\r\n   * @public\r\n   * @param {JSONCallback|String[]} [replacer] - See the link.\r\n   * @param {String|Number} [space] - See the link.\r\n   * @returns {String} JSON string.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\r\n   * @description Synonym for\r\n   * [JSON.stringify]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).json(); // '{\"a\":1,\"b\":2,\"c\":3}'\r\n   * new Super({ a: 1, b: 2, c: 3 }).json('    ');\r\n   * // {\r\n   * //     \"a\": 1,\r\n   * //     \"b\": 2,\r\n   * //     \"c\": 3\r\n   * // }\r\n   * new Super({ a: 1, b: 2, c: 3 }).json((key, value) => {\r\n   *   if (typeof value === 'number') {\r\n   *     return value%2 ? key + value0 : undefined;\r\n   *   }\r\n   *\r\n   *   return value;\r\n   * }, 2);\r\n   * // {\r\n   * //   \"a\": \"a1\",\r\n   * //   \"c\": \"c3\"\r\n   * // }\r\n   */\r\n  json(replacer, space) {\r\n    if (arguments.length === 1 && !isFunction(replacer) && !isArray(replacer)) {\r\n      [].unshift.call(arguments, null);\r\n    }\r\n\r\n    [].unshift.call(arguments, this.$);\r\n\r\n    return JSON.stringify.apply(JSON, arguments);\r\n  }\r\n\r\n  /**\r\n   * @method Super#keyOf\r\n   * @public\r\n   * @param {*} value - Value to find.\r\n   * @returns {String|Number|null} A key or an index if found and null if not.\r\n   * @description Method for finding equal to the argument value in the object. NaNs are considered to be equal.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).keyOf(2);   // 'b'\r\n   * new Super({ a: 1, b: 2, c: 3 }).keyOf('2'); // 'b'\r\n   */\r\n  keyOf(value) {\r\n    const key = iterate(this.$, (val, key) => {\r\n      if (val == value || (isNaN(val) && isNaN(value))) {\r\n        return key;\r\n      }\r\n    });\r\n\r\n    return isUndefined(key) ? null : key;\r\n  }\r\n\r\n  /**\r\n   * @method Super#keyOfStrict\r\n   * @public\r\n   * @param {*} value - Value to find.\r\n   * @returns {String|Number|null} A key or an index if found and null if not.\r\n   * @description Method for finding strict equal to the argument value in the object. NaNs are considered to be equal.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).keyOfStrict(2);   // 'b'\r\n   * new Super({ a: 1, b: 2, c: 3 }).keyOfStrict('2'); // 'b'\r\n   */\r\n  keyOfStrict(value) {\r\n    const key = iterate(this.$, (val, key) => {\r\n      if (val === value || (isNaN(val) && isNaN(value))) {\r\n        return key;\r\n      }\r\n    });\r\n\r\n    return isUndefined(key) ? null : key;\r\n  }\r\n\r\n  /**\r\n   * @method Super#keys\r\n   * @public\r\n   * @returns {DWrap} A wrap of the keys array.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\r\n   * @description Synonym for\r\n   * [Object.keys]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/keys}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).keys().$; // ['a', 'b', 'c']\r\n   * new Super(null).keys().$;                 // []\r\n   */\r\n  keys() {\r\n    const object = this.$;\r\n\r\n    return D(isObject(object) ? Object.keys(object) : []);\r\n  }\r\n\r\n  /**\r\n   * @method Super#map\r\n   * @public\r\n   * @param {IterationCallback} callback - Called on each iteration.\r\n   * Return value is used for creating a new object.\r\n   * @returns {DWrap} D-Wrap of the new object.\r\n   * @description Returns a wrap of a new object using the callback.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).map((value) => value * 2).$; // { a: 2, b: 4, c: 6 }\r\n   * new Super(null).map((value) => value * 2).$;                 // null\r\n   */\r\n  map(callback) {\r\n    validate([callback], ['function'], 'Super#map');\r\n\r\n    const object = this.$;\r\n    const o = isArrayLike(object) ? [] : isNull(object) ? null : {};\r\n\r\n    iterate(object, (value, key) => {\r\n      o[key] = callback(value, key, object);\r\n    });\r\n\r\n    return D(o);\r\n  }\r\n\r\n  /**\r\n   * @method Super#max\r\n   * @public\r\n   * @param {IterationCallback} callback - Called on each iteration.\r\n   * Return value is used for comparison with the previous max value.\r\n   * @returns {{key: Key, value: Number}} Object with max value and key of the max value.\r\n   * @description Method for finding max value in the object.\r\n   * If no callback is present comparison is between values of the object.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).max();                     // { key: 'c', value: 3 }\r\n   * new Super({ a: 1, b: 2, c: 3 }).max((value) => 4 - value); // { key: 'a', value: 3 }\r\n   * new Super({ a: 'a', b: 'b', c: 'c' }).max();               // { key: null, value: -Infinity }\r\n   */\r\n  max(callback = null) {\r\n    validate([callback], ['function||!'], 'Super#max');\r\n\r\n    return this.object((max, value, key, object) => {\r\n      const val = Number(callback ? callback(value, key, object) : value);\r\n\r\n      if (val > max.value) {\r\n        max.key = key;\r\n        max.value = val;\r\n      }\r\n    }, { key: null, value: -Infinity }).$;\r\n  }\r\n\r\n  /**\r\n   * @method Super#min\r\n   * @public\r\n   * @param {IterationCallback} callback - Called on each iteration.\r\n   * Return value is used for comparison with the previous min value.\r\n   * @returns {{key: Key, value: Number}} Object with min value and key of the min value.\r\n   * @description Method for finding min value in the object.\r\n   * If no callback is present comparison is between values of the object.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).min();                     // { key: 'a', value: 1 }\r\n   * new Super({ a: 1, b: 2, c: 3 }).min((value) => 4 - value); // { key: 'c', value: 1 }\r\n   * new Super({ a: 'a', b: 'b', c: 'c' }).min();               // { key: null, value: Infinity }\r\n   */\r\n  min(callback = null) {\r\n    validate([callback], ['function||!'], 'Super#min');\r\n\r\n    return this.object((min, value, key, object) => {\r\n      const val = Number(callback ? callback(value, key, object) : value);\r\n\r\n      if (val < min.value) {\r\n        min.key = key;\r\n        min.value = val;\r\n      }\r\n    }, { key: null, value: Infinity }).$;\r\n  }\r\n\r\n  /**\r\n   * @method Super#object\r\n   * @public\r\n   * @param {ObjectCallback} callback - Called on each iteration.\r\n   * @param {Object|*} [object = {}] - Object that is passed to the callback.\r\n   * @returns {DWrap} Wrap of the new object.\r\n   * @description Type of {@link Super#reduce}.\r\n   * The object is passed as an argument into the callback. The output is this object.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2 }).object((object, value, key) => {\r\n   *   object[key] = value;\r\n   *   object[key + key] = value * 2;\r\n   * }).$; // { a: 1, aa: 2, b: 2, bb: 4 }\r\n   */\r\n  object(callback, object = {}) {\r\n    validate([callback], ['function'], 'Super#object');\r\n\r\n    iterate(this.$, (value, key, obj) => {\r\n      callback(object, value, key, obj);\r\n    });\r\n\r\n    return D(object);\r\n  }\r\n\r\n  /**\r\n   * @method Super#prop\r\n   * @public\r\n   * @param {String|Object.<String, *>} property - Either a string of a property or an assigned object.\r\n   * @param {*} [value] - If a property parameter is a string\r\n   * this has to be an assigned value if it's present.\r\n   * @returns {DWrap|*} Returns this if it's a setter or a value if getter.\r\n   * @description Method for getting and setting properties.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).prop('a');              // 1\r\n   * new Super({ a: 1, b: 2, c: 3 }).prop('a', 7).$;         // { a: 7, b: 2, c: 3 }\r\n   * new Super({ a: 1, b: 2, c: 3 }).prop({ a: 7, b: 8 }).$; // { a: 7, b: 8, c: 3 }\r\n   */\r\n  prop(property, value) {\r\n    if (arguments.length <= 1 && isString(property)) {\r\n      return this.$ ? this.$[property] : undefined;\r\n    }\r\n\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: value };\r\n    }\r\n\r\n    return this.assign(property);\r\n  }\r\n\r\n  /**\r\n   * @method Super#propertyDescriptor\r\n   * @public\r\n   * @param {String} property - Property of the object.\r\n   * @returns {Object|undefined} Property descriptor.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\r\n   * @descriptor Synonym for\r\n   * [Object.getOwnPropertyDescriptor]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1 }).propertyDescriptor('a');\r\n   * // {\r\n   * //   value: 1,\r\n   * //   enumerable: true,\r\n   * //   writable: true,\r\n   * //   configurable: true\r\n   * // }\r\n   */\r\n  propertyDescriptor(property) {\r\n    const object = this.$;\r\n\r\n    return isObject(object) ? Object.getOwnPropertyDescriptor(object, property) : undefined;\r\n  }\r\n\r\n  /**\r\n   * @method Super#propertyNames\r\n   * @public\r\n   * @returns {DWrap} D-Wrap of the names array.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\r\n   * @descriptor Synonym for\r\n   * [Object.getOwnPropertyNames]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames}.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2 }).define('c', { value: 3 }).$; // ['a', 'b', 'c']\r\n   */\r\n  propertyNames() {\r\n    const object = this.$;\r\n\r\n    return D(isObject(object) ? Object.getOwnPropertyNames(object) : []);\r\n  }\r\n\r\n  /**\r\n   * @method Super#propertySymbols\r\n   * @public\r\n   * @returns {DWrap} D-Wrap of the names array.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\r\n   * @descriptor Synonym for\r\n   * [Object.getOwnPropertySymbols]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols}.\r\n   *\r\n   * @example\r\n   * new Super({ [Symbol('foo')]: 1 }).define(Symbol('bar'), { value: 2 }).$; // [Symbol('foo'), Symbol('bar')]\r\n   */\r\n  propertySymbols() {\r\n    const object = this.$;\r\n\r\n    return D(isObject(object) ? Object.getOwnPropertySymbols(object) : []);\r\n  }\r\n\r\n  /**\r\n   * @method Super#proto\r\n   * @public\r\n   * @param {*} [proto] - If it's present it's set as a prototype to the object.\r\n   * @returns {DWrap} In getter mode returns wrap of the prototype and in setter mode returns this.\r\n   * @description Synonym for both\r\n   * [Object.getPrototypeOf]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf}\r\n   * and\r\n   * [Object.setPrototypeOf]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf}.\r\n   */\r\n  proto(proto) {\r\n    const object = this.$;\r\n    const isContextObject = !isNil(object);\r\n\r\n    if (arguments.length) {\r\n      if (isContextObject && (isObject(proto) || isNull(proto))) {\r\n        Object.setPrototypeOf(object, proto);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    return isContextObject ? new Super(Object.getPrototypeOf(object)) : new Super();\r\n  }\r\n\r\n  /**\r\n   * @method Super#reduce\r\n   * @public\r\n   * @param {ReduceCallback} callback - Called on each iteration.\r\n   * Return value is passed to the next callback call.\r\n   * @param {*} [IV = <first value>|undefined] - Initial value.\r\n   * @returns {*} Modified IV.\r\n   * @description Returns modified IV. If the second argument is not present first value in the object is taken\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).reduce((sum, value) => sum + value * value, 0); // 14\r\n   */\r\n  reduce(callback, IV) {\r\n    validate([callback], ['function'], 'Super#reduce');\r\n\r\n    const object = this.$;\r\n\r\n    let startKey;\r\n\r\n    if (arguments.length === 1) {\r\n      iterate(object, (value, key) => {\r\n        startKey = key;\r\n        IV = value;\r\n\r\n        return true;\r\n      });\r\n    }\r\n\r\n    iterate(object, (value, key) => {\r\n      if (key !== startKey) {\r\n        IV = callback(IV, value, key, object);\r\n      }\r\n    });\r\n\r\n    return IV;\r\n  }\r\n\r\n  /**\r\n   * @method Super#set\r\n   * @public\r\n   * @param {String|Object.<String, Function>} property - Either a string of a property or a setters object.\r\n   * @param {Function} [setter] - If a property parameter is a string this has to be a setter function.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Method for defining setters.\r\n   *\r\n   * @example\r\n   * const object = new Super({})\r\n   *   .get('public', function () {\r\n   *     return this._private;\r\n   *   })\r\n   *   .set('public', function (value) {\r\n   *     if (typeof value === 'number') {\r\n   *       this._private = value;\r\n   *     }\r\n   *   });\r\n   * object.prop('public', '1').$; // { public: undefined }\r\n   * object.prop('public', 1).$;   // { public: 1, _private: 1 }\r\n   *\r\n   * new Super({}).set({\r\n   *   public(value) {\r\n   *     if (typeof value === 'number') {\r\n   *       this._private = value;\r\n   *     }\r\n   *   }\r\n   * });\r\n   */\r\n  set(property, setter) {\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: setter };\r\n    }\r\n\r\n    const object = this.$;\r\n\r\n    iterate(isObject(object) && new Super(property).$, (setter, property) => {\r\n      Object.defineProperty(object, property, { set: setter });\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#some\r\n   * @public\r\n   * @param {IterationCallback} [callback = Boolean] - Called on each iteration.\r\n   * If returns truthy iteration stops and if falsey it continues.\r\n   * @returns {Boolean} If all the callback calls returned truthy value.\r\n   * @description Returns true if some of the callback calls returned truthy value. Otherwise false.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).some((value) => value > 4); // false\r\n   * new Super({}).some(() => true);                             // false\r\n   */\r\n  some(callback = Boolean) {\r\n    validate([callback], ['function'], 'Super#some');\r\n\r\n    return iterate(this.$, (value, key, object) => {\r\n      if (callback(value, key, object)) {\r\n        return true;\r\n      }\r\n    }) || false;\r\n  }\r\n\r\n  /**\r\n   * @method Super#strictEquals\r\n   * @public\r\n   * @param {*} [object] - Object to compare.\r\n   * @returns {Boolean} If the objects are equal or not.\r\n   * @description Returns true if objects are equal using '===' operator and false if not.\r\n   * NaNs are considered to be strict equal.\r\n   *\r\n   * @example\r\n   * new Super(3).strictEquals('3');   // false\r\n   * new Super(NaN).strictEquals(NaN); // true\r\n   */\r\n  strictEquals(object) {\r\n    const o = this.$;\r\n\r\n    object = new Super(object).$;\r\n\r\n    return o === object || (isNaN(o) && isNaN(object));\r\n  }\r\n\r\n  /**\r\n   * @method Super#sum\r\n   * @public\r\n   * @param {IterationCallback} [callback = null] - Called on each iteration.\r\n   * @returns {Number} Sum.\r\n   * @description Type of {@link Super#reduce}.\r\n   * If the callback is present it's used for summing. If not the value is used.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).sum();                         // 6\r\n   * new Super({ a: 1, b: 2, c: 3 }).sum((value) => value * value); // 14\r\n   */\r\n  sum(callback = null) {\r\n    validate([callback], ['function||!'], 'Super#sum');\r\n\r\n    return this.reduce((sum, value, key, object) => (\r\n      sum + Number(callback ? callback(value, key, object) : value)\r\n    ), 0);\r\n  }\r\n\r\n  toJSON() {\r\n    return this.$;\r\n  }\r\n\r\n  /**\r\n   * @member Super#toStringTag\r\n   * @type {String}\r\n   * @public\r\n   * @readonly\r\n   * @description Returns toString tag of the object.\r\n   *\r\n   * @example\r\n   * new Super({}).toStringTag; // 'Object'\r\n   * new Super([]).toStringTag; // 'Array'\r\n   * new Super(1).toStringTag;  // 'Number'\r\n   */\r\n  get toStringTag() {\r\n    return toStringTag(this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Super#type\r\n   * @type {String}\r\n   * @public\r\n   * @readonly\r\n   * @description Synonym for\r\n   * [\"typeof\" operator]{@link https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/instanceof}..\r\n   *\r\n   * @example\r\n   * new Super({}).type;   // 'object'\r\n   * new Super(1).type;    // 'number'\r\n   * new Super('1').type;  // 'string'\r\n   * new Super(true).type; // 'boolean'\r\n   */\r\n  get type() {\r\n    return typeof this.$;\r\n  }\r\n\r\n  /**\r\n   * @method Super#value\r\n   * @public\r\n   * @param {String|Object.<String, *>} property - Either a string of a property or a values object.\r\n   * @param {Object.<String, *>} [value] - If a property parameter is a string this has to be a value to be set.\r\n   * @returns {DWrap} Returns this.\r\n   * @description Method for defining non-enumerable, non-writable, non-configurable values.\r\n   * Synonym for object.define(property, { value: value }).\r\n   *\r\n   * @example\r\n   * new Super({}).value('a', 1).$; // { a: 1 }\r\n   * new Super({}).value({\r\n   *   a: 1\r\n   * }).$;                          // { a: 1 }\r\n   */\r\n  value(property, value) {\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: value };\r\n    }\r\n\r\n    const object = this.$;\r\n\r\n    iterate(isObject(object) && new Super(property).$, (value, property) => {\r\n      Object.defineProperty(object, property, { value });\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Super#values\r\n   * @public\r\n   * @returns {DWrap} A wrap of the values array.\r\n   * @description Returns D-Wrap of the values array.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).values().$; // [1, 2, 3]\r\n   * new Super(null).values().$;                 // []\r\n   */\r\n  values() {\r\n    const array = [];\r\n\r\n    iterate(this.$, (value) => {\r\n      array.push(value);\r\n    });\r\n\r\n    return D(array);\r\n  }\r\n\r\n  /**\r\n   * @method Super#word\r\n   * @public\r\n   * @param {IterationCallback} callback - Called on each iteration.\r\n   * @returns {String} Concatenated string.\r\n   * @description Type of {@link Super#reduce}.\r\n   * If the callback is present it's used for concatenating. If not the value is used.\r\n   *\r\n   * @example\r\n   * new Super({ a: 1, b: 2, c: 3 }).word();                         // '123'\r\n   * new Super({ a: 1, b: 2, c: 3 }).word((value) => value + value); // '112233'\r\n   */\r\n  word(callback = null) {\r\n    validate([callback], ['function||!'], 'Super#word');\r\n\r\n    return this.reduce((word, value, key, object) => (\r\n      word + String(callback ? callback(value, key, object) : value)\r\n    ), '');\r\n  }\r\n}\r\n\r\ndefineProperties(Super.prototype, {\r\n  [Symbol.toStringTag]: 'Super'\r\n});\r\n\r\n/**\r\n * @function deepAssign\r\n * @private\r\n * @param {*} target - Object to assign properties to.\r\n * @param {*} object - Object to assign properties from.\r\n * @returns {void}\r\n */\r\nfunction deepAssign(target, object) {\r\n  iterate(object, (value, key) => {\r\n    if (isPrimitive(target[key]) || !{}.hasOwnProperty.call(target, key)) {\r\n      target[key] = deepClone(value);\r\n\r\n      return;\r\n    }\r\n\r\n    if (!isPrimitive(target[key])) {\r\n      deepAssign(target[key], value);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @function deepClone\r\n * @private\r\n * @param {*} object - Object to clone.\r\n * @description Does the deep cloning.\r\n */\r\nfunction deepClone(object) {\r\n  const clone = cloneSwitcher(object, [object, true]);\r\n\r\n  if (clone !== object) {\r\n    iterate(object, (value, key) => {\r\n      clone[key] = deepClone(value);\r\n    });\r\n  }\r\n\r\n  return clone;\r\n}\r\n\r\n/**\r\n * @function deepEqual\r\n * @private\r\n * @param {*} o1 - First object to compare.\r\n * @param {*} o2 - Second object to compare.\r\n * @param {Boolean} strict - If comparison should be strict or not.\r\n * @returns {Boolean} - If the object are deep equal or not.\r\n */\r\nfunction deepEqual(o1, o2, strict) {\r\n  if (o1 === o2) {\r\n    return true;\r\n  }\r\n\r\n  if (isNaN(o1) && isNaN(o2) && isPrimitive(o1) && isPrimitive(o2)) {\r\n    return true;\r\n  }\r\n\r\n  if (isNaN(o1) || isNaN(o2)) {\r\n    return false;\r\n  }\r\n\r\n  if (isPrimitive(o1) || isPrimitive(o2)) {\r\n    return strict ? o1 === o2 : o1 == o2;\r\n  }\r\n\r\n  if (isDate(o1) && isDate(o2)) {\r\n    return o1.getTime() === o2.getTime();\r\n  }\r\n\r\n  if (isDate(o1) || isDate(o2)) {\r\n    return false;\r\n  }\r\n\r\n  if (isRegExp(o1) && isRegExp(o2)) {\r\n    return o1.source === o2.source &&\r\n      o1.toString().match(/[gimuy]*$/)[0] === o2.toString().match(/[gimuy]*$/)[0] &&\r\n      o1.lastIndex === o2.lastIndex;\r\n  }\r\n\r\n  if (isRegExp(o1) || isRegExp(o2)) {\r\n    return false;\r\n  }\r\n\r\n  if ((!isPlainObject(o1) && !isArray(o1)) || (!isPlainObject(o2) && !isArray(o2))) {\r\n    return false;\r\n  }\r\n\r\n  const p1 = Object.getPrototypeOf(o1);\r\n  const p2 = Object.getPrototypeOf(o1);\r\n\r\n  if (Object.keys(o1).length !== Object.keys(o2).length) {\r\n    return false;\r\n  }\r\n\r\n  if (p1 && p2 && (toStringTag(p1.constructor) !== toStringTag(p2.constructor))) {\r\n    return false;\r\n  }\r\n\r\n  return iterate(o1, (value, key) => {\r\n    if (!(key in o2) || !deepEqual(value, o2[key], strict)) {\r\n      return false;\r\n    }\r\n  }) !== false;\r\n}\r\n\r\n/**\r\n * @function deepEvery\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * If returns truthy the iteration goes on and if not it stops.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {Boolean} - If all the callback calls returned truthy value.\r\n */\r\nfunction deepEvery(object, callback, n, tree) {\r\n  const end = n === 1;\r\n\r\n  return iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    if (\r\n      end || isPrimitive(value)\r\n        ? !callback(value, key, object, newTree)\r\n        : !deepEvery(value, callback, n - 1, newTree)\r\n    ) {\r\n      return false;\r\n    }\r\n  }) !== false;\r\n}\r\n\r\n/**\r\n * @function deepFilter\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * If returns truthy the element is included in the output and if not it's excluded.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {*} Filtered object.\r\n */\r\nfunction deepFilter(object, callback, n, tree) {\r\n  const array = isArrayLike(object);\r\n  const nul = isNil(object);\r\n  const o = array ? [] : nul ? object : {};\r\n  const end = n === 1;\r\n\r\n  iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    if ((end || isPrimitive(value)) && callback(value, key, object, newTree)) {\r\n      if (array) {\r\n        o.push(value);\r\n      } else {\r\n        o[key] = value;\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (!end) {\r\n      const filtered = deepFilter(value, callback, n - 1, newTree);\r\n\r\n      if (filtered) {\r\n        if (array) {\r\n          o.push(filtered);\r\n        } else {\r\n          o[key] = filtered;\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  if (array) {\r\n    return o.length ? o : undefined;\r\n  }\r\n\r\n  if (!nul) {\r\n    return Object.keys(o).length ? o : undefined;\r\n  }\r\n\r\n  return o;\r\n}\r\n\r\n/**\r\n * @function deepFind\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * If returns truthy the iteration stops and if not it continues.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {Tree|null} - If found the whole tree is returned and if not it's null what's returned.\r\n */\r\nfunction deepFind(object, callback, n, tree) {\r\n  const end = n === 1;\r\n\r\n  return iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    if (end || isPrimitive(value)) {\r\n      if (callback(value, key, object, newTree)) {\r\n        return newTree;\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    const result = deepFind(value, callback, n - 1, newTree);\r\n\r\n    if (result) {\r\n      return result;\r\n    }\r\n  }) || null;\r\n}\r\n\r\n/**\r\n * @function deepForEach\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {void}\r\n */\r\nfunction deepForEach(object, callback, n, tree) {\r\n  const end = n === 1;\r\n\r\n  iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    if (end || isPrimitive(value)) {\r\n      callback(value, key, object, newTree);\r\n    } else {\r\n      deepForEach(value, callback, n - 1, newTree);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @function deepForEachEntry\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {void}\r\n */\r\nfunction deepForEachEntry(object, callback, n, tree) {\r\n  const end = n === 1;\r\n\r\n  iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    callback(value, key, object, newTree);\r\n\r\n    if (!end && !isPrimitive(value)) {\r\n      deepForEachEntry(value, callback, n - 1, newTree);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @function deepFreeze\r\n * @private\r\n * @param {*} object - Object to freeze.\r\n * @returns {void}\r\n */\r\nfunction deepFreeze(object) {\r\n  Object.freeze(object);\r\n  iterate(object, deepFreeze);\r\n}\r\n\r\n/**\r\n * @function deepMap\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * Returned value is used to create to new object.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {*} New object.\r\n */\r\nfunction deepMap(object, callback, n, tree) {\r\n  const o = isArrayLike(object) ? [] : isNil(object) ? object : {};\r\n  const end = n === 1;\r\n\r\n  iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    o[key] = end || isPrimitive(value)\r\n      ? callback(value, key, object, newTree)\r\n      : deepMap(value, callback, n - 1, newTree);\r\n  });\r\n\r\n  return o;\r\n}\r\n\r\n/**\r\n * @function deepReduce\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepReduceCallback} callback - Callback that is called on every element.\r\n * Returned value is used to create to new object.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Boolean} start - If callback was called already or not.\r\n * @param {{ IV: * }|undefined} IV - If callback was called already or not.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {{ IV: * }} Transformed IV.\r\n */\r\nfunction deepReduce(object, callback, n, start, IV, tree) {\r\n  const end = n === 1;\r\n\r\n  iterate(object, (value, key, object) => {\r\n    if (!IV && (end || isPrimitive(value)) && !start) {\r\n      IV = { IV: value };\r\n      start = true;\r\n\r\n      return;\r\n    }\r\n\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    IV = end || isPrimitive(value)\r\n      ? { IV: callback(IV.IV, value, key, object, newTree) }\r\n      : deepReduce(value, callback, n - 1, start, IV, newTree);\r\n  });\r\n\r\n  return IV;\r\n}\r\n\r\n/**\r\n * @function deepSome\r\n * @private\r\n * @param {*} object - Object to iterate over.\r\n * @param {DeepIterationCallback} callback - Callback that is called on every element.\r\n * If returns truthy the iteration stops and if not it continues.\r\n * @param {Number} n - Depth of iteration.\r\n * @param {Tree} tree - Tree of { key, value } objects of iteration.\r\n * @returns {Boolean} - If some of the callback calls returned truthy value.\r\n */\r\nfunction deepSome(object, callback, n, tree) {\r\n  const end = n === 1;\r\n\r\n  return iterate(object, (value, key, object) => {\r\n    const newTree = [{ key, value }].concat(tree);\r\n\r\n    if (\r\n      end || isPrimitive(value)\r\n        ? callback(value, key, object, newTree)\r\n        : deepSome(value, callback, n - 1, newTree)\r\n    ) {\r\n      return true;\r\n    }\r\n  }) || false;\r\n}\r\n\r\nconstructors[0].push({\r\n  check: () => true,\r\n  cls: Super\r\n});\r\n\r\nexport { Super };\r\n","/**\r\n * @module Promise\r\n * @private\r\n * @mixin\r\n * @description Exports Promise class.\r\n */\r\n\r\nimport { isFunction, defineProperties, Symbol } from './helpers';\r\n\r\n/**\r\n * @callback onFulfilledOrRejected\r\n * @public\r\n * @param {*} value - Promise value.\r\n * @param {Boolean} success - If the previous promise is fulfilled it's true and false if rejected.\r\n */\r\n\r\n/**\r\n * @callback onRejected\r\n * @public\r\n * @param {Error|*} err - Promise error.\r\n */\r\n\r\n/**\r\n * @callback onFulfilled\r\n * @public\r\n * @param {*} value - Promise value.\r\n */\r\n\r\nconst secret = {};\r\nconst iterator = Symbol.iterator;\r\n\r\n/**\r\n * @class Promise\r\n * @public\r\n * @param {Function} executor - Function that takes two arguments: resolve and reject functions.\r\n * Call the resolve function when you need to fulfill the promise and call the reject one\r\n * when you need to reject it.\r\n * @returns {Promise} Instance of Promise.\r\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\r\n * @description Class with almost identical API to\r\n * [ES6 Promise]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise}.\r\n * There is a couple differences: set Promise.onError to a function with which you want to\r\n * subscribe to a promise error and set Promise.onUnhandledRejection to a function with which\r\n * you want to subscribe to an unhandled error\r\n * (defaults to console.error.bind(console, '%s %o', 'Uncaught (in promise)')).\r\n */\r\nclass Promise {\r\n  static onError = null;\r\n  static onUnhandledRejection = console.error.bind(console, '%s %o', 'Uncaught (in promise)');\r\n\r\n  constructor(executor) {\r\n    if (!isFunction(executor)) {\r\n      throw new TypeError(`Promise resolver ${ {}.toString.call(executor) } is not a function`);\r\n    }\r\n\r\n    let hiddenStatus;\r\n    let hiddenValue;\r\n\r\n    const\tonFulfill = [];\r\n    const onReject = [];\r\n    const realPromise = this;\r\n    const hiddenPromise = {\r\n      handled: false,\r\n      get status() {\r\n        return hiddenStatus;\r\n      },\r\n      set status(value) {\r\n        hiddenStatus = value;\r\n        realPromise.status = value;\r\n      },\r\n      get value() {\r\n        return hiddenValue;\r\n      },\r\n      set value(val) {\r\n        hiddenValue = val;\r\n        realPromise.value = val;\r\n      }\r\n    };\r\n\r\n    hiddenPromise.status = 'pending';\r\n    hiddenPromise.value = undefined;\r\n\r\n    /**\r\n     * @typedef {Object} hiddenPromise\r\n     * @private\r\n     * @property {Boolean|Object} handled - If the promise is handled or not.\r\n     * @property {'pending'|'fulfilled'|'rejected'} status - Status of the promise.\r\n     * @property {*} value - Value of the promise.\r\n     */\r\n\r\n    /**\r\n     * @member {Function} hiddenPromise#handle\r\n     * @private\r\n     * @param {('reject'|'resolve')} event - Type of the event to handle.\r\n     * @param {Function} handler - Handler itself.\r\n     * @param {Function} resolve - Resolve function.\r\n     * @param {Function} reject - Reject function.\r\n     * @param {Object} secret - Secret.\r\n     * @description Private method for handling promises.\r\n     */\r\n\r\n    /**\r\n     * @member {hiddenPromise} Promise#$$\r\n     * @protected\r\n     */\r\n    defineProperties(this.$$ = {}, {\r\n      'get/set handled': {\r\n        get() {\r\n          return hiddenPromise.handled;\r\n        },\r\n        set(key) {\r\n          if (key === secret) {\r\n            hiddenPromise.handled = true;\r\n          }\r\n        }\r\n      },\r\n      handle(status, f, resolve, reject, key) {\r\n        if (key === secret) {\r\n          const proxy = isFunction(f) ? (value) => {\r\n            try {\r\n              resolve(f(value));\r\n            } catch (err) {\r\n              reject(err);\r\n            }\r\n          } : null;\r\n\r\n          if (status === 'resolve') {\r\n            onFulfill.push(proxy || ((value) => resolve(value)));\r\n          } else if (status === 'reject') {\r\n            onReject.push(proxy || ((err) => reject(err)));\r\n          }\r\n        }\r\n      },\r\n      'get status'() {\r\n        return hiddenPromise.status;\r\n      },\r\n      'get value'() {\r\n        return hiddenPromise.value;\r\n      }\r\n    });\r\n\r\n    try {\r\n      executor(resolve, reject);\r\n    } catch (err) {\r\n      reject(err);\r\n    }\r\n\r\n    function reject(err) {\r\n      if (hiddenPromise.status === 'pending') {\r\n        hiddenPromise.status = 'rejected';\r\n        hiddenPromise.value = err;\r\n\r\n        for (let i = 0, length = onReject.length; i < length; i++) {\r\n          hiddenPromise.handled = true;\r\n\r\n          onReject[i](err);\r\n        }\r\n\r\n        const {\r\n          onUnhandledRejection,\r\n          onError\r\n        } = Promise;\r\n\r\n        if (isFunction(onError)) {\r\n          onError(err);\r\n        }\r\n\r\n        setTimeout(() => {\r\n          if (!hiddenPromise.handled && isFunction(onUnhandledRejection)) {\r\n            onUnhandledRejection(err);\r\n          }\r\n        }, 1);\r\n      }\r\n    }\r\n\r\n    function resolve(value) {\r\n      if (hiddenPromise.status === 'pending') {\r\n        if (value && isFunction(value.then)) {\r\n          return value.then((value) => {\r\n            resolve(value);\r\n          }, (err) => {\r\n            reject(err);\r\n          });\r\n        }\r\n\r\n        hiddenPromise.status = 'fulfilled';\r\n        hiddenPromise.value = value;\r\n\r\n        for (let i = 0, length = onFulfill.length; i < length; i++) {\r\n          hiddenPromise.handled = true;\r\n\r\n          onFulfill[i](value);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method Promise.all\r\n   * @param {(Array|Iterable).<Promise|*>} iterable - Iterable object (like array) of promises\r\n   * or any values.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\r\n   */\r\n  static all(iterable) {\r\n    const array = [];\r\n\r\n    let toResolve = 0;\r\n\r\n    if (iterable[iterator]) {\r\n      iterable = iterable[iterator]();\r\n\r\n      return new Promise((resolve, reject) => {\r\n        let next;\r\n        let i = 0;\r\n\r\n        while (!(next = iterable.next()).done) {\r\n          const promise = Promise.resolve(next.value);\r\n\r\n          toResolve++;\r\n\r\n          ((i) => {\r\n            promise.then((value) => {\r\n              toResolve--;\r\n              array[i] = value;\r\n\r\n              setTimeout(() => {\r\n                if (next.done && !toResolve) {\r\n                  resolve(array);\r\n                }\r\n              }, 1);\r\n            }, reject);\r\n          })(i++);\r\n        }\r\n\r\n        if (!i) {\r\n          return Promise.resolve([]);\r\n        }\r\n      });\r\n    }\r\n\r\n    const length = iterable.length;\r\n\r\n    if (!length) {\r\n      return Promise.resolve([]);\r\n    }\r\n\r\n    toResolve = length;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      for (let i = 0; i < length; i++) {\r\n        const promise = Promise.resolve(iterable[i]);\r\n\r\n        promise.then((value) => {\r\n          toResolve--;\r\n          array[i] = value;\r\n\r\n          if (!toResolve) {\r\n            resolve(array);\r\n          }\r\n        }, reject);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Promise.race\r\n   * @param {(Array|Iterable).<Promise|*>} iterable - Iterable object (like array) of promises\r\n   * or any values.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\r\n   */\r\n  static race(iterable) {\r\n    if (iterable[iterator]) {\r\n      iterable = iterable[iterator]();\r\n\r\n      return new Promise((resolve, reject) => {\r\n        let next;\r\n\r\n        while (!(next = iterable.next()).done) {\r\n          next.value.then(resolve, reject);\r\n        }\r\n      });\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      for (let i = 0, length = iterable.length; i < length; i++) {\r\n        iterable[i].then(resolve, reject);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Promise.reject\r\n   * @param {*} value - Value to reject.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject\r\n   */\r\n  static reject(value) {\r\n    return new Promise((resolve, reject) => {\r\n      reject(value);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Promise.resolve\r\n   * @param {Promise|Thenable|*} value - Promise, thenable or any value to resolve.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\r\n   */\r\n  static resolve(value) {\r\n    if (value && isFunction(value.then)) {\r\n      return value;\r\n    }\r\n\r\n    return new Promise((resolve) => {\r\n      resolve(value);\r\n    });\r\n  }\r\n\r\n  abort() {}\r\n\r\n  /**\r\n   * @method Promise#catch\r\n   * @param {onRejected} onRejected - onRejected callback.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\r\n   */\r\n  catch(onRejected) {\r\n    return this.then(null, onRejected);\r\n  }\r\n\r\n  /**\r\n   * @method Promise#finally\r\n   * @public\r\n   * @param {onFulfilledOrRejected} onFulfilledOrRejected - onFulfilledOrRejected callback.\r\n   * @returns {Promise}\r\n   * @description Method for catching both fulfilled and rejected promises.\r\n   *\r\n   * @example\r\n   * spinner.show();\r\n   * fetchData()\r\n   *   .then((data) => {\r\n   *     // do something with data\r\n   *   })\r\n   *   .catch((err) => {\r\n   *     // handle error somehow\r\n   *   })\r\n   *   .finally(() => {\r\n   *     spinner.hide();\r\n   *   });\r\n   */\r\n  finally(onFulfilledOrRejected) {\r\n    const isFunc = isFunction(onFulfilledOrRejected);\r\n\r\n    return this.then((value) => (\r\n      Promise\r\n        .resolve(\r\n          isFunc\r\n            ? onFulfilledOrRejected(value, true)\r\n            : 0\r\n        )\r\n        .then(() => value)\r\n    ), (err) => (\r\n      Promise\r\n        .resolve(\r\n          isFunc\r\n            ? onFulfilledOrRejected(err, false)\r\n            : 0\r\n        )\r\n        .then(() => Promise.reject(err))\r\n    ));\r\n  }\r\n\r\n  /**\r\n   * @method Promise#then\r\n   * @param {onFulfilled} [onFulfilled] - onFulfilled callback.\r\n   * @param {onRejected} [onRejected] - onRejected callback.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\r\n   */\r\n  then(onFulfilled, onRejected) {\r\n    const promise = this.$$;\r\n\r\n    if (promise.status === 'pending') {\r\n      return new Promise((resolve, reject) => {\r\n        promise.handle('reject', onRejected, resolve, reject, secret);\r\n        promise.handle('resolve', onFulfilled, resolve, reject, secret);\r\n      });\r\n    }\r\n\r\n    promise.handled = secret;\r\n\r\n    const { value } = promise;\r\n\r\n    let method;\r\n    let handler;\r\n\r\n    if (promise.status === 'fulfilled') {\r\n      method = 'resolve';\r\n      handler = onFulfilled;\r\n    } else {\r\n      method = 'reject';\r\n      handler = onRejected;\r\n    }\r\n\r\n    if (!isFunction(handler)) {\r\n      return Promise[method](value);\r\n    }\r\n\r\n    try {\r\n      return Promise.resolve(handler(value));\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n  }\r\n}\r\n\r\ndefineProperties(Promise.prototype, {\r\n  [Symbol.toStringTag]: 'Promise'\r\n});\r\n\r\nexport { Promise };\r\n","/**\r\n * @module Func\r\n * @private\r\n * @mixin\r\n * @description Exports Func class.\r\n */\r\n\r\nimport { Super } from './Super';\r\nimport { Promise } from './Promise';\r\nimport { constructors } from './constants';\r\nimport { isFunction, validate, toArray, Symbol, defineProperties, iterate } from './helpers';\r\n\r\n/**\r\n * @callback BeforeMiddleware\r\n * @param {Array} args - Previous arguments.\r\n * @param {Func} func - This function.\r\n * @returns {Array} - New arguments.\r\n */\r\n\r\n/**\r\n * @callback AfterMiddleware\r\n * @param {*} returnValue - Previous return value.\r\n * @param {Func} func - This function.\r\n * @returns {*} - New return value.\r\n */\r\n\r\n/**\r\n * @class Func\r\n * @extends Super\r\n * @public\r\n * @param {Function} [func = function () {}] - Function to wrap.\r\n * @returns {Func} Instance of Func.\r\n * @description A wrap of a function.\r\n *\r\n * @example\r\n * const func = new Func(Math.max);\r\n *\r\n * func(1, 4, -2, 5); // 5\r\n */\r\nclass Func extends Super {\r\n  constructor(func = () => {}) {\r\n    super();\r\n\r\n    function proxy() {\r\n      if (++proxy.$$.called < proxy.$$.canBeCalled) {\r\n        const { before, after, sync, contextLocked } = proxy.$$;\r\n        let { context, args } = proxy.$$;\r\n        let ret;\r\n\r\n        context = contextLocked ? context : context || this;\r\n        args = args.concat(toArray(arguments));\r\n\r\n        if (sync) {\r\n          iterate(before, (middleware) => {\r\n            args = middleware.call(context, toArray(args), proxy);\r\n          });\r\n\r\n          ret = func.apply(context, toArray(args));\r\n\r\n          iterate(after, (middleware) => {\r\n            ret = middleware.call(context, ret, proxy);\r\n          });\r\n\r\n          return ret;\r\n        }\r\n\r\n        let promise = Promise.resolve(args);\r\n\r\n        iterate(before, (middleware) => {\r\n          promise = promise.then((args) => middleware.call(context, toArray(args), proxy));\r\n        });\r\n\r\n        promise = promise.then((args) => func.apply(context, toArray(args)));\r\n\r\n        iterate(after, (middleware) => {\r\n          promise = promise.then((ret) => middleware.call(context, ret, proxy));\r\n        });\r\n\r\n        return promise;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @member {Object} Func#$$\r\n     * @type {Object}\r\n     * @protected\r\n     * @property {Array} after - After middleware array.\r\n     * @property {Array} args - Locked and bound arguments.\r\n     * @property {Array} argsLocked - Locked arguments.\r\n     * @property {Array} before - Before middleware array.\r\n     * @property {Number} called - How many times the function was called.\r\n     * @property {Number} canBeCalled - How many times the function can be actually called.\r\n     * @property {*} context - Locked or bound context.\r\n     * @property {Boolean} contextLocked - Is context locked or not.\r\n     * @property {Boolean} sync - Is function synchronous or not.\r\n     * @description Config parameters.\r\n     */\r\n    Object.defineProperty(proxy, '$$', {\r\n      value: {\r\n        after: [],\r\n        args: [],\r\n        argsLocked: [],\r\n        before: [],\r\n        called: 0,\r\n        canBeCalled: Infinity,\r\n        context: null,\r\n        contextLocked: false,\r\n        sync: true\r\n      }\r\n    });\r\n\r\n    /**\r\n     * @member {Function} Func#$\r\n     * @type {Function}\r\n     * @public\r\n     * @description Original function.\r\n     */\r\n    Object.defineProperty(proxy, '$', { value: func });\r\n    Object.setPrototypeOf(proxy, Func.prototype);\r\n\r\n    return proxy;\r\n  }\r\n\r\n  /**\r\n   * @method Func#after\r\n   * @public\r\n   * @param {AfterMiddleware} middleware - After middleware.\r\n   * @param {Boolean|*} [afterAll = true] - Boolean parameter where to put middleware.\r\n   * Truthy parameter stands for \"to the end\" and falsey for \"to the beginning\".\r\n   * @returns {Func} Returns this.\r\n   * @description Adds after middleware.\r\n   *\r\n   * @example\r\n   * const func = new Func((a) => a + 1)\r\n   *   .after((result) => result * result);\r\n   *\r\n   * func(4);  // 25\r\n   * func(-4); // 9\r\n   */\r\n  after(middleware, afterAll = true) {\r\n    validate([middleware], ['function'], 'Func#after');\r\n\r\n    const { after } = this.$$;\r\n\r\n    if (afterAll) {\r\n      after.push(middleware);\r\n    } else {\r\n      after.unshift(middleware);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#apply\r\n   * @public\r\n   * @param {*} [context] - Context to call with.\r\n   * @param {(Array|Arguments)} [args] - Arguments to call with.\r\n   * @returns {*} Return of function call.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\r\n   * @description Synonym for\r\n   * [Function#apply]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Function/apply}.\r\n   */\r\n  apply(context, args) {\r\n    return (() => {}).apply.apply(this, arguments);\r\n  }\r\n\r\n  /**\r\n   * @method Func#async\r\n   * @public\r\n   * @param {Boolean|*} [condition] - If the function should be synchronous or not.\r\n   * @returns {Func} Returns this.\r\n   * @description If the function should be synchronous or not.\r\n   *\r\n   * @example\r\n   * const func = new Func((a) => a + 1).async();\r\n   *\r\n   * func(4).then((result) => {\r\n   *   console.log(result); // 5\r\n   * });\r\n   */\r\n  async(condition = true) {\r\n    this.$$.sync = !condition;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#before\r\n   * @public\r\n   * @param {BeforeMiddleware} middleware - Before middleware.\r\n   * @param {Boolean|*} [beforeAll = true] - Boolean parameter where to put middleware.\r\n   * Truthy parameter stands for \"to the beginning\" and falsey for \"to the end\".\r\n   * @returns {Func} Returns this.\r\n   * @description Adds before middleware.\r\n   *\r\n   * @example\r\n   * const func = new Func((a) => a + 1)\r\n   *   .before(([arg]) => [arg * arg]);\r\n   *\r\n   * func(4); // 17\r\n   * func(3); // 10\r\n   */\r\n  before(middleware, beforeAll = true) {\r\n    validate([middleware], ['function'], 'Func#before');\r\n\r\n    const { before } = this.$$;\r\n\r\n    if (beforeAll) {\r\n      before.unshift(middleware);\r\n    } else {\r\n      before.push(middleware);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#bind\r\n   * @public\r\n   * @param {*} context - Context to bind.\r\n   * @param {...(Array|Arguments|*)} args - Arguments to bind.\r\n   * @returns {Func} Returns this.\r\n   * @description Composition of {@link Func#bindContext} and {@link Func#bindArgs}.\r\n   *\r\n   * @example\r\n   * const func = new Func(function (a, b) {\r\n   *   return this.a + a + b;\r\n   * }).bind({ a: 2 }, 1);\r\n   *\r\n   * func(1); // 4\r\n   * func(3); // 6\r\n   */\r\n  bind(context, ...args) {\r\n    return this\r\n      .bindContext(context)\r\n      .bindArgs(args);\r\n  }\r\n\r\n  /**\r\n   * @method Func#bindArgs\r\n   * @public\r\n   * @param {(Array|Arguments)} args - Arguments to bind.\r\n   * @returns {Func} Returns this.\r\n   * @description Binds arguments in addition to already locked and bound ones.\r\n   *\r\n   * @example\r\n   * const func = new Func((...args) => {\r\n   *   let sum = 0;\r\n   *\r\n   *   for (let i = 0; i < args.length; i++) {\r\n   *     sum += args[i];\r\n   *   }\r\n   *\r\n   *   return sum;\r\n   * });\r\n   *\r\n   * func(1, 2, 3); // 6\r\n   *\r\n   * func.bindArgs([4]);\r\n   *\r\n   * func(1, 2, 3); // 10\r\n   *\r\n   * func.bindArgs([5]);\r\n   *\r\n   * func(1, 2, 3); // 15\r\n   */\r\n  bindArgs(args) {\r\n    const func = this.$$;\r\n\r\n    func.args = func.args.concat(toArray(args));\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#bindContext\r\n   * @public\r\n   * @param {*} context - Context to bind.\r\n   * @returns {Func} Returns this.\r\n   * @description Bind new context if it's not already locked.\r\n   *\r\n   * @example\r\n   * const func = new Func(function () {\r\n   *   return this.a;\r\n   * }).bindContext({ a: 1 });\r\n   *\r\n   * func(); // 1\r\n   *\r\n   * func.bindContext({ a: 2 });\r\n   *\r\n   * func(); // 2\r\n   */\r\n  bindContext(context) {\r\n    const func = this.$$;\r\n\r\n    if (!func.contextLocked) {\r\n      func.context = context;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#call\r\n   * @public\r\n   * @param {*} [context] - Context to call with.\r\n   * @param {...*} [args] - Arguments to call with.\r\n   * @returns {*} Return of function call.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Function/call\r\n   * @description Synonym for\r\n   * [Function#call]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Function/call}.\r\n   */\r\n  call(context, ...args) {\r\n    return (() => {}).call.apply(this, arguments);\r\n  }\r\n\r\n  /**\r\n   * @member {Number} Func#called\r\n   * @public\r\n   * @readonly\r\n   * @description Returns how many times the function was called.\r\n   *\r\n   * @example\r\n   * const func = new Func((a) => a + 1);\r\n   *\r\n   * func();\r\n   * func();\r\n   *\r\n   * func.called // 2\r\n   */\r\n  get called() {\r\n    return this.$$.called;\r\n  }\r\n\r\n  /**\r\n   * @method Func#canBeCalled\r\n   * @public\r\n   * @param {Number} times - Number of maximum times the function is called (middlewares are also taken for a count).\r\n   * @returns {Func} Returns this.\r\n   * @description Method for limiting call times of function.\r\n   *\r\n   * @example\r\n   * const func = new Func((a) => a + 1)\r\n   *   .canBeCalled(1);\r\n   *\r\n   * func(1); // 2\r\n   * func(1); // undefined\r\n   */\r\n  canBeCalled(times) {\r\n    this.$$.canBeCalled = times;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#limitArgsTo\r\n   * @public\r\n   * @param {Number} number - Number of arguments to limit to.\r\n   * @returns {Func} Returns this.\r\n   * @description Built-in before middleware for limiting number of arguments\r\n   * that is put to the end of before middlewares.\r\n   *\r\n   * @example\r\n   * const func = new Func((a, b) => [a, b]);\r\n   *\r\n   * func(1, 2); // [1, 2]\r\n   *\r\n   * func.limitArgsTo(1);\r\n   *\r\n   * func(1, 2); // [1, undefined]\r\n   */\r\n  limitArgsTo(number) {\r\n    return this.before((args) => args.slice(0, number), false);\r\n  }\r\n\r\n  /**\r\n   * @method Func#lock\r\n   * @public\r\n   * @param {*} context - Context to lock.\r\n   * @param {(Array|Arguments|*)} args - Arguments to lock.\r\n   * @returns {Func} Returns this.\r\n   * @description Composition of {@link Func#lockContext} and {@link Func#lockArgs}.\r\n   *\r\n   * @example\r\n   * const func = new Func(function (a, b) {\r\n   *   return this.a + a + b;\r\n   * }).lock({ a: 2 }, [1]);\r\n   *\r\n   * func(1); // 4\r\n   * func(3); // 6\r\n   */\r\n  lock(context, args) {\r\n    return this\r\n      .lockContext(context)\r\n      .lockArgs(args);\r\n  }\r\n\r\n  /**\r\n   * @method Func#lockArgs\r\n   * @public\r\n   * @param {(Array|Arguments|*)} args - Arguments to lock.\r\n   * @returns {Func} Returns this.\r\n   * @description Erases bound arguments and adds new arguments to already locked ones.\r\n   *\r\n   * @example\r\n   * const func = new Func((...args) => {\r\n   *   let sum = 0;\r\n   *\r\n   *   for (let i = 0; i < args.length; i++) {\r\n   *     sum += args[i];\r\n   *   }\r\n   *\r\n   *   return sum;\r\n   * });\r\n   *\r\n   * func(1, 2, 3); // 6\r\n   *\r\n   * func.lockArgs([4]);\r\n   *\r\n   * func(1, 2, 3); // 10\r\n   *\r\n   * func.bindArgs([6, 7]);\r\n   * func.lockArgs([5]);\r\n   *\r\n   * func(1, 2, 3); // 15\r\n   */\r\n  lockArgs(args) {\r\n    const func = this.$$;\r\n\r\n    func.args = func.argsLocked = func.argsLocked.concat(toArray(args));\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#lockContext\r\n   * @public\r\n   * @param {*} context - Context to lock.\r\n   * @returns {Func} Returns this.\r\n   * @description Locks context if it's not already locked.\r\n   *\r\n   * @example\r\n   * const func = new Func(function () {\r\n   *   return this.a;\r\n   * }).lockContext({ a: 1 });\r\n   *\r\n   * func(); // 1\r\n   *\r\n   * func.lockContext({ a: 2 });\r\n   *\r\n   * func(); // 1\r\n   */\r\n  lockContext(context) {\r\n    const func = this.$$;\r\n\r\n    if (!func.contextLocked) {\r\n      func.context = context;\r\n      func.contextLocked = true;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#timing\r\n   * @public\r\n   * @param {String} mark - Argument that is passed to console.time() and console.timeEnd().\r\n   * By default name of the original function, or if it's not present, 'anonymous' is used.\r\n   * @returns {Func} Returns this.\r\n   * @description Built-in before and after middlewares for noting calling time.\r\n   * In case of asynchronous functions it notes time between calling function and resolving or rejecting the result.\r\n   *\r\n   * @example\r\n   * const func = new Func((a) => a + 1)\r\n   *   .timing('plus 1');\r\n   *\r\n   * func(2); // plus 1: 0.010ms\r\n   *\r\n   * const async = new Func(() => new Promise(() => {\r\n   *     setTimeout(resolve, 1000);\r\n   *   }))\r\n   *   .async()\r\n   *   .timing();\r\n   *\r\n   * async();\r\n   * // After 1 second...\r\n   * // anonymous: 1000.010ms\r\n   */\r\n  timing(mark) {\r\n    mark = arguments.length ? String(mark) : this.$.name || 'anonymous';\r\n\r\n    this.before((args) => {\r\n      console.time(mark);\r\n\r\n      return args;\r\n    }, false);\r\n\r\n    this.after((ret) => {\r\n      console.timeEnd(mark);\r\n\r\n      return ret;\r\n    }, false);\r\n\r\n    return this;\r\n  }\r\n\r\n  toString() {\r\n    return (() => {}).toString.call(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Func#unbind\r\n   * @public\r\n   * @returns {Func} Returns this.\r\n   * @description Composition of {@link Func#unbindContext} and {@link Func#unbindArgs}.\r\n   *\r\n   * @example\r\n   * const func = new Func(function (a) {\r\n   *   return this.foo + ' & ' +  a;\r\n   * }).bind({ foo: 2 }, 1);\r\n   *\r\n   * func(); // '2 & 1'\r\n   *\r\n   * func.unbind();\r\n   *\r\n   * func(); // 'undefined & undefined'\r\n   */\r\n  unbind() {\r\n    return this\r\n      .unbindContext()\r\n      .unbindArgs();\r\n  }\r\n\r\n  /**\r\n   * @method Func#unbindArgs\r\n   * @public\r\n   * @returns {Func} Returns this.\r\n   * @description Erases all bound arguments.\r\n   *\r\n   * @example\r\n   * const func = new Func((...args) => {\r\n   *   let sum = 0;\r\n   *\r\n   *   for (let i = 0; i < args.length; i++) {\r\n   *     sum += args[i];\r\n   *   }\r\n   *\r\n   *   return sum;\r\n   * }).bindArgs([4, 5]);\r\n   *\r\n   * func(1, 2, 3); // 15\r\n   *\r\n   * func.unbindArgs();\r\n   *\r\n   * func(1, 2, 3); // 6\r\n   */\r\n  unbindArgs() {\r\n    const func = this.$$;\r\n\r\n    func.args = func.argsLocked;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Func#unbindContext\r\n   * @public\r\n   * @returns {Func} Returns this.\r\n   * @description Erases context if it's not locked.\r\n   *\r\n   * @example\r\n   * const func = new Func(function () {\r\n   *   return this.foo;\r\n   * }).bindContext({ foo: 1 });\r\n   *\r\n   * func(); // 1\r\n   *\r\n   * func.unbindArgs();\r\n   *\r\n   * func(); // undefined\r\n   */\r\n  unbindContext() {\r\n    const func = this.$$;\r\n\r\n    if (!func.contextLocked) {\r\n      func.context = null;\r\n    }\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\ndefineProperties(Func.prototype, {\r\n  [Symbol.toStringTag]: 'Func'\r\n});\r\n\r\nconstructors[1].push({\r\n  check: isFunction,\r\n  cls: Func\r\n});\r\n\r\n/**\r\n * @function method\r\n * @public\r\n * @param {String} method - Method to call.\r\n * @param {(Array|Arguments|*)} args - Arguments to call the method with.\r\n * @returns {Function} Function that calls stated method with given arguments.\r\n * @description Function that returns the function\r\n * that calls stated method of its first argument with given arguments.\r\n *\r\n * @example\r\n * [1.2345, 2.789, 3.14].map(method('toFixed', [2])); // ['1.23', '2.79', '3.14']\r\n */\r\nfunction method(method, args = []) {\r\n  return (x) => x[method].apply(x, toArray(args));\r\n}\r\n\r\n/**\r\n * @function noop\r\n * @public\r\n * @returns {void}\r\n * @description Empty function.\r\n */\r\nfunction noop() {}\r\n\r\n/**\r\n * @function prop\r\n * @public\r\n * @param {String} prop - Property to return.\r\n * @returns {Function} Function that returns given property of its first argument.\r\n * @description Function that return the function that returns given property of its first argument.\r\n *\r\n * @example\r\n * ['foo', '12', '7890'].map(prop('length')); // [3, 2, 4]\r\n */\r\nfunction prop(prop) {\r\n  return ({ [prop]: value }) => value;\r\n}\r\n\r\n/**\r\n * @function self\r\n * @public\r\n * @returns {*} First argument itself.\r\n * @description Function that returns the first argument.\r\n *\r\n * @example\r\n * [1, 2].map(self);                     // [1, 2]\r\n * [1, 3, NaN, 0, 7, null].filter(self); // [1, 3, 7]\r\n */\r\nfunction self() {\r\n  return arguments[0];\r\n}\r\n\r\nexport { Func, method, noop, prop, self };\r\n","/**\r\n * @module Num\r\n * @private\r\n * @mixin\r\n * @description Exports Num class.\r\n */\r\n\r\nimport { Super } from './Super';\r\nimport { Func } from './Func';\r\nimport { Promise } from './Promise';\r\nimport { constructors } from './constants';\r\nimport {\r\n  isNumber, isFinite, toArray,\r\n  defineProperties, validate, Symbol\r\n} from './helpers';\r\n\r\nconst toRadian = Math.PI / 180;\r\nconst toDegree = 180 / Math.PI;\r\nconst ln2 = Math.LN2;\r\nconst ln10 = Math.LN10;\r\n\r\n/**\r\n * @class Num\r\n * @extends Super\r\n * @public\r\n * @param {Number} [number = 0] - A number to wrap.\r\n * @returns {Num} Instance of Num.\r\n * @description Wrap of a number.\r\n *\r\n * @example\r\n * const num = new Num(1);\r\n */\r\nclass Num extends Super {\r\n  constructor(number = 0) {\r\n    super(+number);\r\n\r\n    /**\r\n     * @member Num#$\r\n     * @type {Number}\r\n     * @public\r\n     * @description Original number.\r\n     */\r\n  }\r\n\r\n  /**\r\n   * @member Num#abs\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/abs\r\n   * @description Synonym for\r\n   * [Math.abs]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/abs}.\r\n   *\r\n   * @example\r\n   * new Num(1).abs;  // 1\r\n   * new Num(-1).abs; // 1\r\n   */\r\n  get abs() {\r\n    return Math.abs(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Num#acos\r\n   * @public\r\n   * @param {Boolean|*} [toDegrees = false] If it is truthy the return value is transformed into degrees.\r\n   * @returns {Number} Arccosine of the number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/acos\r\n   * @description Synonym for\r\n   * [Math.acos]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/acos}.\r\n   */\r\n  acos(toDegrees) {\r\n    return (toDegrees ? toDegree : 1) * Math.acos(this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#acosh\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh\r\n   * @description Synonym for\r\n   * [Math.acosh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh}.\r\n   */\r\n  get acosh() {\r\n    const number = this.$;\r\n\r\n    return Math.log(number + Math.sqrt(number * number - 1));\r\n  }\r\n\r\n  /**\r\n   * @member Num#asinh\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh\r\n   * @description Synonym for\r\n   * [Math.asinh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh}.\r\n   */\r\n  get asinh() {\r\n    const number = this.$;\r\n\r\n    return Math.log(number + Math.sqrt(number * number + 1));\r\n  }\r\n\r\n  /**\r\n   * @method Num#asin\r\n   * @public\r\n   * @param {Boolean|*} [toDegrees = false] If it is truthy the return value is transformed into degrees.\r\n   * @returns {Number} Arcsine of the number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/asin\r\n   * @description Synonym for\r\n   * [Math.asin]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/asin}.\r\n   */\r\n  asin(toDegrees) {\r\n    return (toDegrees ? toDegree : 1) * Math.asin(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Num#atan\r\n   * @public\r\n   * @param {Boolean|*} [toDegrees = false] If it is truthy the return value is transformed into degrees.\r\n   * @returns {Number} Arcsine of the number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/atan\r\n   * @description Synonym for\r\n   * [Math.atan]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/atan}.\r\n   */\r\n  atan(toDegrees) {\r\n    return (toDegrees ? toDegree : 1) * Math.atan(this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#atanh\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh\r\n   * @description Synonym for\r\n   * [Math.atanh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh}.\r\n   */\r\n  get atanh() {\r\n    const number = this.$;\r\n\r\n    return Math.log((1 + number) / (1 - number)) / 2;\r\n  }\r\n\r\n  /**\r\n   * @member Num#cbrt\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt\r\n   * @description Synonym for\r\n   * [Math.cbrt]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt}.\r\n   */\r\n  get cbrt() {\r\n    const cbrt = Math.pow(Math.abs(this.$), 1 / 3);\r\n\r\n    return this.$ > 0 ? cbrt : -cbrt;\r\n  }\r\n\r\n  /**\r\n   * @member Num#ceil\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil\r\n   * @description Synonym for\r\n   * [Math.ceil]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil}.\r\n   *\r\n   * @example\r\n   * new Num(1.1).ceil;  // 2\r\n   * new Num(-1.1).ceil; // -1\r\n   */\r\n  get ceil() {\r\n    return Math.ceil(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Num#cos\r\n   * @public\r\n   * @param {Boolean|*} [asDegrees = false] If it is truthy the number is treated as a degree value.\r\n   * @returns {Number} Cosine of the number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cos\r\n   * @description Synonym for\r\n   * [Math.cos]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cos}.\r\n   */\r\n  cos(asDegrees) {\r\n    return Math.cos((asDegrees ? toRadian : 1) * this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#cosh\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh\r\n   * @description Synonym for\r\n   * [Math.cosh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh}.\r\n   */\r\n  get cosh() {\r\n    const exp = this.exp;\r\n\r\n    return (exp + 1 / exp) / 2;\r\n  }\r\n\r\n  /**\r\n   * @member Num#cube\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description Cube of the number.\r\n   *\r\n   * @example\r\n   * new Num(2).cube;  // 8\r\n   * new Num(-3).ceil; // -27\r\n   */\r\n  get cube() {\r\n    return this.$ * this.$ * this.$;\r\n  }\r\n\r\n  /**\r\n   * @member Num#exp\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/exp\r\n   * @description Synonym for\r\n   * [Math.exp]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/exp}.\r\n   */\r\n  get exp() {\r\n    return Math.exp(this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#floor\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\r\n   * @description Synonym for\r\n   * [Math.floor]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/floor}.\r\n   *\r\n   * @example\r\n   * new Num(1.1).floor;  // 1\r\n   * new Num(-1.1).floor; // -2\r\n   */\r\n  get floor() {\r\n    return Math.floor(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Num#interval\r\n   * @public\r\n   * @param {Function} func - Function that is called every <number> milliseconds.\r\n   * @param {Array} [args] - Arguments passed to the function.\r\n   * @returns {Function} Function that aborts the interval. The context of the function (if it's not already bound)\r\n   * is the object with the abort method.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/setInterval\r\n   * @description Analogue of the\r\n   * [setInterval]{@link https://developer.mozilla.org/en/docs/Web/API/WindowTimers/setInterval}.\r\n   *\r\n   * @example\r\n   * const times = 0;\r\n   * new Num(50).interval(function () {\r\n   *   if (++times === 10) {\r\n   *     this.abort();\r\n   *   }\r\n   * });\r\n   */\r\n  interval(func, args = []) {\r\n    validate([func], ['function'], 'Num#interval');\r\n\r\n    func = new Func(func).bindContext({ abort });\r\n    args = toArray(args);\r\n\r\n    const number = this.$;\r\n\r\n    let aborted;\r\n    let timeout = setTimeout(function interval() {\r\n      if (!aborted) {\r\n        func.apply(null, args);\r\n\r\n        if (!aborted) {\r\n          timeout = setTimeout(interval, number);\r\n        }\r\n      }\r\n    }, 0);\r\n\r\n    return abort;\r\n\r\n    function abort() {\r\n      aborted = true;\r\n\r\n      return clearTimeout(timeout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @member Num#ln\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log\r\n   * @description Synonym for\r\n   * [Math.log]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log}.\r\n   */\r\n  get ln() {\r\n    return Math.log(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Num#log\r\n   * @public\r\n   * @param {Number} number - Number to get logarithm of.\r\n   * @returns {Number} Logarithm of the argument number to the number base.\r\n   * @description Returns the logarithm of the argument number to the number base.\r\n   *\r\n   * @example\r\n   * new Num(2).log(16);  // 4\r\n   * new Num(3).log(243); // 5\r\n   */\r\n  log(number) {\r\n    return Math.log(number) / Math.log(this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#log2\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log2\r\n   * @description Synonym for\r\n   * [Math.log2]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log2}.\r\n   */\r\n  get log2() {\r\n    return this.ln / ln2;\r\n  }\r\n\r\n  /**\r\n   * @member Num#log10\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log10\r\n   * @description Synonym for\r\n   * [Math.log10]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/log10}.\r\n   */\r\n  get log10() {\r\n    return this.ln / ln10;\r\n  }\r\n\r\n  /**\r\n   * @method Num#pow\r\n   * @public\r\n   * @param {Number} power - Power the number should be raised to.\r\n   * @returns {Number} The number to the <power> power.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/pow\r\n   * @description Synonym for\r\n   * [Math.pow]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/pow}.\r\n   *\r\n   * @example\r\n   * new Num(4).pow(.5); // 2\r\n   * new Num(3).pow(2);  // 9\r\n   */\r\n  pow(power) {\r\n    return Math.pow(this.$, power);\r\n  }\r\n\r\n  /**\r\n   * @method Num#root\r\n   * @public\r\n   * @param {Number} power - Power the number should be raised to.\r\n   * @returns {Number} The <power> root of the number.\r\n   * @description Synonym for number.pow(1 / power);\r\n   *\r\n   * @example\r\n   * new Num(4).root(2);   // 0.5\r\n   * new Num(243).root(5); // 3\r\n   */\r\n  root(power) {\r\n    return Math.pow(this.$, 1 / power);\r\n  }\r\n\r\n  /**\r\n   * @member Num#round\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/round\r\n   * @description Synonym for\r\n   * [Math.round]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/round}.\r\n   *\r\n   * @example\r\n   * new Num(1.1).floor;  // 1\r\n   * new Num(-1.1).floor; // -1\r\n   * new Num(1.5).floor;  // 2\r\n   */\r\n  get round() {\r\n    return Math.round(this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#sign\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\r\n   * @description Synonym for\r\n   * [Math.sign]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sign}.\r\n   */\r\n  get sign() {\r\n    const number = this.$;\r\n\r\n    if (!number) {\r\n      return number;\r\n    }\r\n\r\n    return number > 0 ? 1 : -1;\r\n  }\r\n\r\n  /**\r\n   * @method Num#sin\r\n   * @public\r\n   * @param {Boolean|*} [asDegrees = false] If it is truthy the number is treated as a degree value.\r\n   * @returns {Number} Sine of the number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sin\r\n   * @description Synonym for\r\n   * [Math.sin]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sin}.\r\n   */\r\n  sin(asDegrees) {\r\n    return Math.sin((asDegrees ? toRadian : 1) * this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#sinh\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh\r\n   * @description Synonym for\r\n   * [Math.sinh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh}.\r\n   */\r\n  get sinh() {\r\n    const exp = this.exp;\r\n\r\n    return (exp - 1 / exp) / 2;\r\n  }\r\n\r\n  /**\r\n   * @member Num#sq\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description The square of the number.\r\n   *\r\n   * @example\r\n   * new Num(2).sq;  // 4\r\n   * new Num(-3).sq; // 9\r\n   */\r\n  get sq() {\r\n    return this.$ * this.$;\r\n  }\r\n\r\n  /**\r\n   * @member Num#sqrt\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt\r\n   * @description Synonym for\r\n   * [Math.sqrt]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt}.\r\n   */\r\n  get sqrt() {\r\n    return Math.sqrt(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method Num#tan\r\n   * @public\r\n   * @param {Boolean|*} [asDegrees = false] If it is truthy the number is treated as a degree value.\r\n   * @returns {Number} Tangent of the number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/tan\r\n   * @description Synonym for\r\n   * [Math.tan]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/tan}.\r\n   */\r\n  tan(asDegrees) {\r\n    return Math.tan((asDegrees ? toRadian : 1) * this.$);\r\n  }\r\n\r\n  /**\r\n   * @member Num#tanh\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh\r\n   * @description Synonym for\r\n   * [Math.tanh]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh}.\r\n   */\r\n  get tanh() {\r\n    const number = this.$;\r\n\r\n    if (!isFinite(number)) {\r\n      return this.sign;\r\n    }\r\n\r\n    const exp = Math.exp(2 * number);\r\n\r\n    return (exp - 1) / (exp + 1);\r\n  }\r\n\r\n  /**\r\n   * @method Num#timeout\r\n   * @public\r\n   * @param {*} [value] - Value to be resolved by the promise.\r\n   * @returns {Promise} Promise that could be aborted.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/WindowTimers/setTimeout\r\n   * @description Promise-based analogue of\r\n   * [setTimeout]{@link https://developer.mozilla.org/en/docs/Web/API/WindowTimers/setTimeout}.\r\n   *\r\n   * @example\r\n   * new Num(50).timeout('resolved').then((value) => {\r\n   *   console.log(value); // 'resolved'\r\n   * });\r\n   *\r\n   * const promise = new Num(50).timeout();\r\n   * promise.abort();\r\n   */\r\n  timeout(value) {\r\n    let timeout;\r\n    let reject;\r\n\r\n    const promise = new Promise((resolve, rej) => {\r\n      reject = rej;\r\n      timeout = setTimeout(resolve, this.$, value);\r\n    });\r\n\r\n    promise.abort = function abort() {\r\n      clearTimeout(timeout);\r\n\r\n      reject(new Error('Timeout was aborted'));\r\n\r\n      return this;\r\n    };\r\n\r\n    return promise;\r\n  }\r\n\r\n  /**\r\n   * @method Num#toBase\r\n   * @public\r\n   * @param {Number} [base = 10] - Base that the number should inverted to.\r\n   * @returns {String} A string representation of the number in <base> base.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toString\r\n   * @description Synonym for\r\n   * [Number#toString]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toString}.\r\n   *\r\n   * @example\r\n   * new Num(4).toBase(2); // 100\r\n   * new Num(3).toBase();  // 3\r\n   */\r\n  toBase(base = 10) {\r\n    return this.$.toString(base);\r\n  }\r\n\r\n  /**\r\n   * @method Num#toExponential\r\n   * @public\r\n   * @param {Number} [fractionDigits] - See the link.\r\n   * @returns {String} A string representation of the number in the exponential format.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential\r\n   * @description Synonym for\r\n   * [Number#toExponential]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential}.\r\n   */\r\n  toExponential(fractionDigits) {\r\n    return this.$.toExponential(fractionDigits);\r\n  }\r\n\r\n  /**\r\n   * @method Num#toFixed\r\n   * @public\r\n   * @param {Number} [digits = 0] - See the link.\r\n   * @returns {String} Fixed-point formatted number.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed\r\n   * @description Synonym for\r\n   * [Number#toFixed]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed}.\r\n   */\r\n  toFixed(digits) {\r\n    return this.$.toFixed(digits);\r\n  }\r\n\r\n  /**\r\n   * @method Num#toPrecision\r\n   * @public\r\n   * @param {Number} [precision] - See the link.\r\n   * @returns {String} A string representation of the number to the specified precision.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision\r\n   * @description Synonym for\r\n   * [Number#toPrecision]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision}.\r\n   */\r\n  toPrecision(precision) {\r\n    return this.$.toPrecision(precision);\r\n  }\r\n\r\n  valueOf() {\r\n    return Number(this.$);\r\n  }\r\n}\r\n\r\ndefineProperties(Num.prototype, {\r\n  [Symbol.toStringTag]: 'Num'\r\n});\r\n\r\nconstructors[1].push({\r\n  check: isNumber,\r\n  cls: Num\r\n});\r\n\r\n/**\r\n * @function rand\r\n * @public\r\n * @param {Number} [start = 0] - Start of the range.\r\n * @param {Number} [end = 1] - End of the range.\r\n * @returns {Number} Random number.\r\n * @description Returns a random number in the range specified by the arguments.\r\n *\r\n * @example\r\n * rand(1, 5); // 2.315\r\n * rand(1, 5); // 4.356763\r\n */\r\nfunction rand(start = 0, end = 1) {\r\n  return start + (end - start) * Math.random();\r\n}\r\n\r\n/**\r\n * @function random\r\n * @public\r\n * @param {Integer} start - Start of the range.\r\n * @param {Integer} end - End of the range.\r\n * @returns {Number} Random integer.\r\n * @description Returns a random integer number in the range specified by the arguments.\r\n *\r\n * @example\r\n * random(1, 5); // 3\r\n * random(1, 5); // 1\r\n */\r\nfunction random(start, end) {\r\n  validate([start, end], ['intLike', 'intLike'], 'random');\r\n\r\n  if (end <= start) {\r\n    throw new Error('The second argument must be greater than the first!', 'random');\r\n  }\r\n\r\n  return Math.floor(rand(start, end + 1));\r\n}\r\n\r\nexport { Num, rand, random };\r\n","/**\n * @module Arr\n * @private\n * @mixin\n * @description Exports Arr class.\n */\n\nimport { random } from './Num';\nimport { Super } from './Super';\nimport { constructors } from './constants';\nimport {\n  isArrayLike, isNaN, isNumber, isString,\n  toArray, validate, iterate as iterator, Symbol, defineProperties\n} from './helpers';\n\n/**\n * @typedef {Array|*} ArrayLike\n * @public\n * @description Array-like type.\n */\n\n/**\n * @callback ArrayCallback\n * @public\n * @param {Number} i - Iteration index.\n */\n\n/**\n * @callback IterateCallback\n * @public\n * @param {Number} i - Iteration index.\n */\n\n/**\n * @callback CompareFunction\n * @public\n * @param {*} x - First value to be compared.\n * @param {*} y - Second value to be compared.\n */\n\n/**\n * @class Arr\n * @extends Super\n * @public\n * @param {Array} [array = []] - An array to wrap.\n * @returns {Arr} Instance of Arr.\n * @description Wrap of an array.\n *\n * @example\n * new Arr([1, 2]);\n */\nclass Arr extends Super {\n  constructor(array = []) {\n    super(toArray(array instanceof Arr ? array.$ : array));\n\n    /**\n     * @member Arr#$\n     * @type {Array}\n     * @public\n     * @description Made array.\n     */\n  }\n\n  /**\n   * @method Arr#concat\n   * @public\n   * @param {...(Array|Arr|*)} values - Arrays or any other values to concat the array with.\n   * @returns {Arr} New instance of Arr.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\n   * @description Synonym for\n   * [Array#concat]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/concat}.\n   */\n  concat(...values) {\n    const array = toArray(this.$, true);\n\n    iterator(arguments, (value) => {\n      value = new Super(value).$;\n\n      if (isArrayLike(value) && !isString(value)) {\n        iterator(value, (value) => {\n          array.push(value);\n        });\n\n        return;\n      }\n\n      array.push(value);\n    });\n\n    return new this.constructor(array);\n  }\n\n  /**\n   * @member Arr#first\n   * @type {*}\n   * @public\n   * @readonly\n   * @description Returns the first element of the array.\n   *\n   * @example\n   * new Arr([1, 2, 3]).first; // 1\n   * new Arr([]).first;        // undefined\n   */\n  get first() {\n    return this.$[0];\n  }\n\n  /**\n   * @method Arr#includes\n   * @public\n   * @param {*} value - Value to search.\n   * @returns {Boolean} If the array includes the value.\n   * @description Synonym for array.indexOfStrict(value) !== -1.\n   *\n   * @example\n   * new Arr([1, 2, 3]).includes(1);       // true\n   * new Arr([1, 2, 3]).includes('1');     // false\n   * new Arr([1, 2, 3]).includes(3);       // true\n   * new Arr([1, 2, NaN]).includes(NaN);   // true\n   */\n  includes(value) {\n    return this.indexOfStrict(value) !== -1;\n  }\n\n  /**\n   * @method Arr#indexOf\n   * @public\n   * @param {*} value - Value to search.\n   * @returns {Number} Index of the argument.\n   * @description Almost the same as {@link Super#keyOf}. The difference is that if the value is not found\n   * -1 returned instead of null and if found Number(key) returned.\n   *\n   * @example\n   * new Arr([1, 2, 3]).indexOf(1);       // 0\n   * new Arr([1, 2, 3]).indexOf('1');     // 0\n   * new Arr([1, 2, 3]).indexOf(3);       // -1\n   * new Arr([1, 2, NaN]).indexOf(NaN);   // 2\n   */\n  indexOf(value) {\n    const key = this.keyOf(value);\n\n    return key === null ? -1 : Number(key);\n  }\n\n  /**\n   * @method Arr#indexOfStrict\n   * @public\n   * @param {*} value - Value to search.\n   * @returns {Number} Index of the argument.\n   * @description Almost the same as {@link Super#keyOfStrict}. The difference is that if the value is not found\n   * -1 returned instead of null and if found Number(key) returned.\n   *\n   * @example\n   * new Arr([1, 2, 3]).indexOfStrict(1);       // 0\n   * new Arr([1, 2, 3]).indexOfStrict('1');     // -1\n   * new Arr([1, 2, 3]).indexOfStrict(3);       // -1\n   * new Arr([1, 2, NaN]).indexOfStrict(NaN);   // 2\n   */\n  indexOfStrict(value) {\n    const key = this.keyOfStrict(value);\n\n    return key === null ? -1 : Number(key);\n  }\n\n  /**\n   * @method Arr#join\n   * @public\n   * @param {String} [separator = ','] - See the link.\n   * @returns {String} - String of joined array.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/join\n   * @description Synonym for\n   * [Array#join]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/join}.\n   */\n  join(separator) {\n    return this.$.join.apply(this.$, arguments);\n  }\n\n  /**\n   * @member Arr#last\n   * @type {*}\n   * @public\n   * @readonly\n   * @description The last element of the array.\n   *\n   * @example\n   * new Arr([1, 2, 3]).last; // 3\n   * new Arr([]).last;        // undefined\n   */\n  get last() {\n    const array = this.$;\n\n    return array[array.length - 1];\n  }\n\n  /**\n   * @member Arr#length\n   * @type {Number}\n   * @public\n   * @readonly\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/length\n   * @description Synonym for\n   * [Array#length]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/length}.\n   */\n  get length() {\n    return this.$.length;\n  }\n\n  /**\n   * @method Arr#pop\n   * @public\n   * @returns {*} Returns deleted element.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\n   * @description Synonym for\n   * [Array#pop]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/pop}.\n   */\n  pop() {\n    return this.$.pop();\n  }\n\n  /**\n   * @method Arr#push\n   * @public\n   * @param {...*} values See the link.\n   * @this {Arr}\n   * @returns {Arr} Returns this.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push\n   * @description Synonym for\n   * [Array#push]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push}\n   * besides returning this.\n   */\n  push(...values) {\n    this.$.push.apply(this.$, arguments);\n\n    return this;\n  }\n\n  /**\n   * @method Arr#random\n   * @public\n   * @returns {*} Random item of the array.\n   * @description Method for getting random items of the array.\n   *\n   * @example\n   * new Arr([1, 5, 3]).random(); // 3\n   * new Arr([1, 5, 3]).random(); // 5\n   */\n  random() {\n    return this.$[random(0, this.$.length - 1)];\n  }\n\n  /**\n   * @method Arr#reverse\n   * @public\n   * @returns {Arr} A wrap of the reversed array.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\n   * @description Synonym for\n   * [Array#reverse]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse}.\n   */\n  reverse() {\n    this.$.reverse();\n\n    return this;\n  }\n\n  /**\n   * @method Arr#shift\n   * @public\n   * @returns {*} Returns deleted element.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\n   * @description Synonym for\n   * [Array#shift]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/shift}.\n   */\n  shift() {\n    return this.$.shift();\n  }\n\n  /**\n   * @method Arr#shuffle\n   * @public\n   * @returns {Arr} Returns this.\n   * @description Method for shuffling.\n   *\n   * @example\n   * new Arr([1, 2, 3, 4]).shuffle().$; // [4, 2, 3, 1]\n   * new Arr([1, 2, 3, 4]).shuffle().$; // [1, 3, 4, 2]\n   */\n  shuffle() {\n    const length = this.$.length;\n\n    return this.forEach((value, index, array) => {\n      const randomIndex = index + Math.floor((length - index) * Math.random());\n\n      array[index] = array[randomIndex];\n      array[randomIndex] = value;\n    });\n  }\n\n  /**\n   * @method Arr#slice\n   * @public\n   * @param {Number} [begin = 0] - See the link.\n   * @param {Number} [end = array.length] - See the link.\n   * @returns {Arr} A wrap of a sliced array.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\n   * @description Synonym for\n   * [Array#slice]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/slice}.\n   */\n  slice(begin, end) {\n    return new this.constructor(this.$.slice.apply(this.$, arguments));\n  }\n\n  /**\n   * @method Arr#sort\n   * @public\n   * @param {CompareFunction} [compareFunction] - See the link.\n   * @returns {Arr} Returns this.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n   * @description Synonym for\n   * [Array#sort]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/sort}.\n   */\n  sort(compareFunction) {\n    validate([compareFunction], ['function||!'], 'Arr#sort');\n\n    this.$.sort(compareFunction);\n\n    return this;\n  }\n\n  /**\n   * @method Arr#sortAsc\n   * @public\n   * @returns {Arr} Returns this.\n   * @description Method for ascending sorting. Puts non-numbers first, then NaNs, then sorted values.\n   *\n   * @example\n   * new Arr([NaN, 1, -7, '100', 5]).sortAsc().$; // ['100', NaN, -7, 1, 5]\n   */\n  sortAsc() {\n    return this.sort(asc);\n  }\n\n  /**\n   * @method Arr#sortDesc\n   * @public\n   * @returns {Arr} Returns this.\n   * @description Method for descending sorting. Puts sorted values first, then NaNs, then non-numbers.\n   *\n   * @example\n   * new Arr([NaN, 1, -7, '100', 5]).sortDesc().$; // [5, 1, -7, NaN, '100']\n   */\n  sortDesc() {\n    return this.sort((y, x) => asc(x, y));\n  }\n\n  /**\n   * @method Arr#splice\n   * @public\n   * @param {Number} [start] - See the link.\n   * @param {Number} [deleteCount] - See the link.\n   * @param {...*} [items] - See the link.\n   * @returns {Arr} A wrap of return value of #splice call.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\n   * @description Synonym for\n   * [Array#splice]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/splice}.\n   */\n  splice(start, deleteCount, ...items) {\n    return new Arr(this.$.splice.apply(this.$, arguments));\n  }\n\n  /**\n   * @method Arr#string\n   * @public\n   * @returns {String} Concatenated array.\n   * @description Synonym for array.join('').\n   *\n   * @example\n   * new Arr([1, 2, 3]).string(); // '123'\n   */\n  string() {\n    return this.join('');\n  }\n\n  /**\n   * @method Arr#unshift\n   * @public\n   * @param {...*} [values] - See the link.\n   * @returns {Arr} Returns this.\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\n   * @description Synonym for\n   * [Array#unshift]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift}\n   * besides returning this.\n   */\n  unshift(...values) {\n    this.$.unshift.apply(this.$, arguments);\n\n    return this;\n  }\n}\n\ndefineProperties(Arr.prototype, {\n  [Symbol.toStringTag]: 'Arr'\n});\n\n/**\n * @function asc\n * @private\n * @param {*} x - First value to be compared.\n * @param {*} y - Second value to be compared.\n * @returns {Number} Where to put the first element: before or after.\n */\nfunction asc(x, y) {\n  if (!isNumber(x) && !isNumber(y)) {\n    return 0;\n  }\n\n  if (!isNumber(x)) {\n    return -1;\n  }\n\n  if (!isNumber(y)) {\n    return 1;\n  }\n\n  if (isNaN(x) && isNaN(y)) {\n    return 0;\n  }\n\n  if (isNaN(x)) {\n    return -1;\n  }\n\n  if (isNaN(y)) {\n    return 1;\n  }\n\n  return x - y;\n}\n\nconstructors[1].push({\n  check: isArrayLike,\n  cls: Arr\n});\n\n/**\n * @function array\n * @public\n * @param {Number} number - Length of the array.\n * @param {ArrayCallback} [callback] - If it's present it has to be a function\n * that returns the element that is pushed to the new array.\n * @returns {Arr} New instance of Arr.\n * @description Method for creating new array from the length using optional callback.\n *\n * @example\n * array(3).$;               // [0, 1, 2]\n * array(3, (i) => i * 2).$; // [0, 2, 4]\n */\nfunction array(number, callback) {\n  validate([number, callback], [['intLike', '>=0'], 'function||!'], 'array');\n\n  const array = [];\n\n  for (let i = 0; i < number; i++) {\n    array.push(callback ? callback(i) : i);\n  }\n\n  return new Arr(array);\n}\n\n/**\n * @function iterate\n * @public\n * @param {Number} number - Number of iterations.\n * @param {IterateCallback} callback - Callback that is called on each iteration with the iteration index.\n * @returns {void}\n * @description Method for replacing for (...) construction.\n *\n * @example\n * iterate();\n */\nfunction iterate(number, callback) {\n  validate([number, callback], [['intLike', '>=0'], 'function'], 'iterate');\n\n  for (let i = 0; i < number; i++) {\n    callback(i);\n  }\n}\n\nexport { Arr, array, iterate };\n","/**\r\n * @module BlobObject\r\n * @private\r\n * @mixin\r\n * @description Exports BlobObject class.\r\n */\r\n\r\nimport { Super } from './Super';\r\nimport { Promise } from './Promise';\r\nimport { constructors } from './constants';\r\nimport {\r\n  isArray, isFunction,\r\n  toStringTag, Symbol, defineProperties\r\n} from './helpers';\r\n\r\n/**\r\n * @typedef {{ buffer: String, binary: String, dataURL: String, text: String }} methods\r\n * @private\r\n * @description List of read blob methods.\r\n */\r\nconst methods = {\r\n  buffer: 'ArrayBuffer',\r\n  binary: 'BinaryString',\r\n  dataURL: 'DataURL',\r\n  text: 'Text'\r\n};\r\nconst { URL } = global;\r\n\r\n/**\r\n * @typedef {('buffer'|'binary'|'dataURL'|'text')} ReadBlobMethod\r\n * @public\r\n * @description Enum type of read blob methods.\r\n */\r\n\r\n/**\r\n * @typedef {ArrayBuffer|ArrayBufferView|Blob|String} BlobParts\r\n * @public\r\n * @description Allowed blob parts.\r\n */\r\n\r\n/**\r\n * @callback ReaderEventListener\r\n * @public\r\n * @param {Event} e - Fired event.\r\n * @param {FileReader} reader - FileReader.\r\n */\r\n\r\n/**\r\n * @class BlobObject\r\n * @extends Super\r\n * @public\r\n * @param {Blob} blob - Blob to wrap.\r\n * @returns {BlobObject} Instance of BlobObject.\r\n * @description Wrap of a blob.\r\n *\r\n * @example\r\n * new BlobObject(new Blob(['{\"foo\":\"bar\"}'], { type: 'application/json' }));\r\n */\r\nclass BlobObject extends Super {\r\n  /**\r\n   * @member BlobObject#$\r\n   * @type {Blob}\r\n   * @public\r\n   * @description Original Blob.\r\n   */\r\n\r\n  /**\r\n   * @member {String} BlobObject#dataURL\r\n   * @type {String}\r\n   * @public\r\n   * @readonly\r\n   * @description Returns dataURL representation of the blob.\r\n   */\r\n  get dataURL() {\r\n    return URL.createObjectURL(this.$);\r\n  }\r\n\r\n  /**\r\n   * @method BlobObject#readAs\r\n   * @public\r\n   * @param {ReadBlobMethod} method - Method that is used for reading from blob.\r\n   * @param {ReaderEventListener} [progress] - Progress listener.\r\n   * @returns {Promise} Promise that could be aborted.\r\n   * @description Method for reading from blobs.\r\n   *\r\n   * @example\r\n   * new BlobObject(new Blob(['{\"foo\":\"bar\"}'], { type: 'application/json' }))\r\n   *   .readAs('text')\r\n   *   .then((value) => {\r\n   *     console.log(value); // '{\"foo\":\"bar\"}'\r\n   *   });\r\n   */\r\n  readAs(method, progress) {\r\n    if (!methods[method]) {\r\n      throw new Error('1st argument must be one of following values: buffer, binary, dataURL, text');\r\n    }\r\n\r\n    let reader = new FileReader();\r\n    let toReject;\r\n\r\n    if (isFunction(progress)) {\r\n      reader.onprogress = function (e) {\r\n        progress(e, this);\r\n      };\r\n    }\r\n\r\n    const promise = new Promise((resolve, reject) => {\r\n      toReject = reject;\r\n\r\n      reader.onerror = ({ target }) => {\r\n        if (reader) {\r\n          reject(target.error);\r\n        }\r\n      };\r\n\r\n      reader.onload = ({ target }) => {\r\n        resolve(target.result);\r\n      };\r\n\r\n      reader[`readAs${ methods[method] }`](this.$);\r\n    });\r\n\r\n    promise.abort = function abort() {\r\n      toReject(new Error('Reading was aborted'));\r\n\r\n      reader.abort();\r\n\r\n      reader = null;\r\n\r\n      return this;\r\n    };\r\n\r\n    return promise;\r\n  }\r\n\r\n  /**\r\n   * @method BlobObject#saveAs\r\n   * @public\r\n   * @param {String} [name] - Name that is used for saving file.\r\n   * @returns {BlobObject} Returns this.\r\n   * @description Method for saving blobs.\r\n   *\r\n   * @example\r\n   * new BlobObject(new Blob(['{\"foo\":\"bar\"}'], { type: 'application/json' }))\r\n   *   .saveAs('blob.json');\r\n   */\r\n  saveAs(name = 'download') {\r\n    const anchor = document.createElement('a');\r\n\r\n    anchor.href = this.dataURL;\r\n    anchor.setAttribute('download', name);\r\n    anchor.click();\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\ndefineProperties(BlobObject.prototype, {\r\n  [Symbol.toStringTag]: 'BlobObject'\r\n});\r\n\r\nconstructors[1].push({\r\n  check: (blob) => /^(Blob|File)$/.test(toStringTag(blob)),\r\n  cls: BlobObject\r\n});\r\n\r\n/**\r\n * @function blob\r\n * @public\r\n * @param {(BlobParts[]|BlobParts)} blobParts - Blob parts that are passed to\r\n * [Blob]{@link https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob} constructor.\r\n * @param {Object} [options] - Options that are passed to\r\n * [Blob]{@link https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob} constructor.\r\n * @returns {BlobObject} New instance of BlobObject.\r\n * @description Function for creating blobs not involving BlobObject and Blob constructors.\r\n */\r\nfunction blob(blobParts, options = {}) {\r\n  if (!isArray(blobParts)) {\r\n    blobParts = [blobParts];\r\n  }\r\n\r\n  return new BlobObject(new Blob(blobParts, options));\r\n}\r\n\r\nexport { BlobObject, blob };\r\n","/**\r\n * @module Str\r\n * @private\r\n * @mixin\r\n * @description Exports Str class.\r\n */\r\n\r\nimport { D } from './D';\r\nimport { Super } from './Super';\r\nimport { constructors, regexpSpecialCharacters } from './constants';\r\nimport {\r\n  isFunction, isNumberLike, isObject, isString,\r\n  validate, Symbol, defineProperties, iterate\r\n} from './helpers';\r\n\r\nconst htmlSpecials = {\r\n  '&': '&amp;',\r\n  '<': '&lt;',\r\n  '>': '&gt;'\r\n};\r\nconst regexpSpecialsRegexp = new RegExp(\r\n  new Super(regexpSpecialCharacters)\r\n    .word((x) => `\\\\${ x }|`)\r\n    .replace(/\\|$/, ''),\r\n  'g'\r\n);\r\n\r\n/**\r\n * @class Str\r\n * @extends Super\r\n * @public\r\n * @param {String} [string = ''] - A string to wrap.\r\n * @returns {Str} Instance of Str.\r\n * @description Wrap of a string.\r\n *\r\n * @example\r\n * const s = new Num('1');\r\n */\r\nclass Str extends Super {\r\n  constructor(string = '') {\r\n    super(`${ string }`);\r\n\r\n    /**\r\n     * @member Str#$\r\n     * @type {String}\r\n     * @public\r\n     * @description Original string.\r\n     */\r\n  }\r\n\r\n  /**\r\n   * @method Str#capitalizeFirst\r\n   * @public\r\n   * @returns {Str} Capitalized string.\r\n   * @description Method capitalizing the first symbol.\r\n   *\r\n   * @example\r\n   * new Str('foo').capitalizeFirst().$; // 'Foo'\r\n   */\r\n  capitalizeFirst() {\r\n    const string = this.$;\r\n\r\n    return new Str(string.slice(0, 1).toUpperCase() + string.slice(1));\r\n  }\r\n\r\n  /**\r\n   * @method Str#endsWith\r\n   * @public\r\n   * @param {String} searchString - See the link.\r\n   * @param {Number} [position = string.length] - See the link.\r\n   * @returns {Boolean} If the string ends with the argument string.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\r\n   * @description Synonym for\r\n   * [String#endsWith]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith}.\r\n   */\r\n  endsWith(searchString, position) {\r\n    if (arguments.length < 2) {\r\n      position = this.$.length;\r\n    }\r\n\r\n    return this\r\n      .slice(0, position)\r\n      .revert()\r\n      .startsWith(new Str(searchString).revert().$);\r\n  }\r\n\r\n  /**\r\n   * @method Str#escapeHTML\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Methods escaping \"&\", \"<\" and \">\" symbols.\r\n   *\r\n   * @example\r\n   * new Str('\"1 < 2\" & \"7 > 4\" are true expressions.').escapeHTML().$;\r\n   * // '\"1 &lt; 2\" &amp \"7 &gt; 2\" are true expressions.'\r\n   */\r\n  escapeHTML() {\r\n    let string = this.$;\r\n\r\n    iterate(htmlSpecials, (escaped, symbol) => {\r\n      string = string.replace(new RegExp(symbol, 'g'), escaped);\r\n    });\r\n\r\n    return new Str(string);\r\n  }\r\n\r\n  /**\r\n   * @method Str#escapeRegExp\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Method escaping RegExp special characters.\r\n   *\r\n   * @example\r\n   * new Str('(213.98 - [] {})').escapeRegExp().$; // '\\(213\\.98 \\- \\[\\] \\{\\}\\)'\r\n   */\r\n  escapeRegExp() {\r\n    return this.replace(regexpSpecialsRegexp, '\\\\$&');\r\n  }\r\n\r\n  /**\r\n   * @method Str#in\r\n   * @public\r\n   * @param {*} object - Object to check the string as a property in.\r\n   * @returns {Boolean} If it is in the object or not.\r\n   * @description Returns string in object.\r\n   *\r\n   * @example\r\n   * new Str('a').in({ a: 1 }); // true\r\n   * new Str('toFixed').in(1);  // false\r\n   * new Str('a').in(null);     // false\r\n   */\r\n  in(object) {\r\n    if (!isObject(object)) {\r\n      return false;\r\n    }\r\n\r\n    return this.$ in object;\r\n  }\r\n\r\n  /**\r\n   * @method Str#indexOf\r\n   * @public\r\n   * @param {String} searchValue - See the link.\r\n   * @param {Number} [fromIndex = 0] - See the link.\r\n   * @returns {Number} Found index or -1.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\r\n   * @description Synonym for\r\n   * [String#indexOf]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf}.\r\n   */\r\n  indexOf(searchValue, fromIndex) {\r\n    return this.$.indexOf.apply(this.$, arguments);\r\n  }\r\n\r\n  /**\r\n   * @method Str#lastIndexOf\r\n   * @public\r\n   * @param {String} searchValue - See the link.\r\n   * @param {Number} [fromIndex = string.length] - See the link.\r\n   * @returns {Number} Found index or -1.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf\r\n   * @description Synonym for\r\n   * [String#lastIndexOf]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf}.\r\n   */\r\n  lastIndexOf(searchValue, fromIndex) {\r\n    return this.$.lastIndexOf.apply(this.$, arguments);\r\n  }\r\n\r\n  /**\r\n   * @member Str#length\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/length\r\n   * @description Synonym for\r\n   * [String#length]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/length}.\r\n   */\r\n  get length() {\r\n    return this.$.length;\r\n  }\r\n\r\n  /**\r\n   * @method Str#match\r\n   * @public\r\n   * @returns {Arr|Super} D-Wrap of found match.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/match\r\n   * @description Synonym for\r\n   * [String#match]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/match}.\r\n   */\r\n  match(regexp) {\r\n    return D(this.$.match.apply(this.$, arguments));\r\n  }\r\n\r\n  /**\r\n   * @method Str#repeat\r\n   * @public\r\n   * @param {Integer} times - Times to repeat the string.\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\r\n   * @description Synonym for\r\n   * [String#repeat]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/repeat}.\r\n   *\r\n   * @example\r\n   * new Str('123').repeat(2).$; // '123123'\r\n   * new Str('123').repeat(0).$; // ''\r\n   */\r\n  repeat(times) {\r\n    validate([times], [['intLike', '>=0']], 'Str#repeat');\r\n\r\n    times = +times;\r\n\r\n    const string = this.$;\r\n\r\n    let s = '';\r\n\r\n    for (let i = 0; i < times; i++) {\r\n      s += string;\r\n    }\r\n\r\n    return new Str(s);\r\n  }\r\n\r\n  /**\r\n   * @method Str#replace\r\n   * @public\r\n   * @param {RegExp|String} regexp - See the link.\r\n   * @param {String|Function} [replacer = ''] - See the link.\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/replace\r\n   * @description Synonym for\r\n   * [String#replace]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/replace}\r\n   * besides that replacer has a default value of ''.\r\n   */\r\n  replace(regexp, replacer = '') {\r\n    return new Str(this.$.replace(regexp, replacer));\r\n  }\r\n\r\n  /**\r\n   * @method Str#replaceString\r\n   * @public\r\n   * @param {String} string - String to replace.\r\n   * @param {String} [replacer = ''] - String to replace with.\r\n   * @returns {Str} New instance of Str.\r\n   * @description Method for global string replaceing.\r\n   *\r\n   * @example\r\n   * new Str('123123').replaceString('1', '4').$; // '423423'\r\n   * new Str('123123').replaceString('1').$;      // '2323'\r\n   */\r\n  replaceString(string, replacer = '') {\r\n    string = new Super(string).$;\r\n\r\n    validate([string], ['string'], 'Str#replaceString');\r\n\r\n    return new Str(this.$.split(string).join(replacer));\r\n  }\r\n\r\n  /**\r\n   * @method Str#revert\r\n   * @public\r\n   * @returns {Str} New instance of string.\r\n   * @description Method for reverting a string.\r\n   *\r\n   * @example\r\n   * new Str('1234').revert().$; // '4321'\r\n   */\r\n  revert() {\r\n    const string = this.$;\r\n    let str = '';\r\n\r\n    for (let i = string.length - 1; i >= 0; i--) {\r\n      str += string[i];\r\n    }\r\n\r\n    return new Str(str);\r\n  }\r\n\r\n  /**\r\n   * @method Str#search\r\n   * @public\r\n   * @param {RegExp} regexp - See the link.\r\n   * @returns {Number} Index of the first match, if found, and -1 if not.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/search\r\n   * @description Synonym for\r\n   * [String#search]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/search}.\r\n   */\r\n  search(regexp) {\r\n    validate([regexp], ['regexp']);\r\n\r\n    return this.$.search.apply(this.$, arguments);\r\n  }\r\n\r\n  /**\r\n   * @method Str#slice\r\n   * @public\r\n   * @param {Number} [beginSlice = 0] - See the link.\r\n   * @param {Number} [endSlice = string.length] - See the link.\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/slice\r\n   * @description Synonym for\r\n   * [String#slice]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/slice}.\r\n   */\r\n  slice(beginSlice, endSlice) {\r\n    return new Str(this.$.slice.apply(this.$, arguments));\r\n  }\r\n\r\n  /**\r\n   * @method Str#split\r\n   * @public\r\n   * @param {RegExp|String} [separator] - See the link.\r\n   * @returns {Arr|Super} D-Wrap of the array.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/split\r\n   * @description Synonym for\r\n   * [String#split]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/split}.\r\n   */\r\n  split(separator) {\r\n    return D(this.$.split.apply(this.$, arguments));\r\n  }\r\n\r\n  /**\r\n   * @method Str#startsWith\r\n   * @public\r\n   * @param {String} searchString - See the link.\r\n   * @param {Number} [position = 0] - See the link.\r\n   * @returns {Boolean} If the string ends with the argument string.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\r\n   * @description Synonym for\r\n   * [String#startsWith]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith}.\r\n   */\r\n  startsWith(searchString, position = 0) {\r\n    return this.$.indexOf.apply(this.$, arguments) === position;\r\n  }\r\n\r\n  /**\r\n   * @method Str#substr\r\n   * @public\r\n   * @param {Number} [start = 0] - See the link.\r\n   * @param {Number} [length = string.length] - See the link.\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/substr\r\n   * @description Synonym for\r\n   * [String#substr]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/substr}.\r\n   */\r\n  substr(start, length) {\r\n    return new Str(this.$.substr.apply(this.$, arguments));\r\n  }\r\n\r\n  /**\r\n   * @method Str#substring\r\n   * @public\r\n   * @param {Number} [indexStart = 0] - See the link.\r\n   * @param {Number} [indexEnd = string.length] - See the link.\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/substring\r\n   * @description Synonym for\r\n   * [String#substring]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/substring}.\r\n   */\r\n  substring(indexStart, indexEnd) {\r\n    return new Str(this.$.substring.apply(this.$, arguments));\r\n  }\r\n\r\n  /**\r\n   * @method Str#toCamelCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Removes following regexp /\\s\\-_\\./ making the string camel cased.\r\n   *\r\n   * @example\r\n   * new Str('spinal-case').toCamelCase().$;  // 'spinalCase'\r\n   * new Str('_snake_case_').toCamelCase().$; // 'snakeCase'\r\n   */\r\n  toCamelCase() {\r\n    return new Str(trim(this.$)\r\n      .replace(/[\\s\\-_.]+/g, '-')\r\n      .replace(/-[^-]/g, (match) => match[1].toUpperCase())\r\n      .replace(/^[\\S]/, (match) => match.toLowerCase())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @method Str#toCapitalCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Removes following regexp /\\-_\\./ making the string capital letter cased.\r\n   *\r\n   * @example\r\n   * new Str('spinal-case').toCapitalCase().$;  // 'Spinal Case'\r\n   * new Str('_snake_case_').toCapitalCase().$; // 'Snake Case'\r\n   */\r\n  toCapitalCase() {\r\n    return new Str(trim(this.$)\r\n      .replace(/[\\s\\-_.]+/g, ' ')\r\n      .replace(/[\\S]/g, (match) => (\r\n        match.toLowerCase() === match ? match : ` ${ match }`\r\n      ))\r\n      .replace(/\\s[\\S]/g, (match) => match.toUpperCase())\r\n      .replace(/\\s+/g, ' ')\r\n      .replace(/^\\s/, '')\r\n      .replace(/^[\\S]/, (match) => match.toUpperCase())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @method Str#toDotCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Removes following regexp /\\-_\\./ making the string dot cased.\r\n   *\r\n   * @example\r\n   * new Str('spinal-case').toDotCase().$;  // 'spinal.case'\r\n   * new Str('_snake_case_').toDotCase().$; // 'snake.case'\r\n   */\r\n  toDotCase() {\r\n    return new Str(trim(this.$)\r\n      .replace(/[\\s\\-_.]+/g, '.')\r\n      .replace(/[^.]/g, (match) => (\r\n        match.toLowerCase() === match ? match : `.${ match }`\r\n      ))\r\n      .replace(/\\.+/g, '.')\r\n      .replace(/^\\./, '')\r\n      .toLowerCase()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @method Str#toHyphenCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Removes following regexp /\\s\\-_\\./ making the string camel cased.\r\n   *\r\n   * @example\r\n   * new Str('camelCase').toSpinalCase().$;    // 'camel-case'\r\n   * new Str('_snake_case_').toSpinalCase().$; // 'snake-case'\r\n   */\r\n  toHyphenCase() {\r\n    return new Str(trim(this.$)\r\n      .replace(/[\\s\\-_.]+/g, '-')\r\n      .replace(/[^-]/g, (match) => (\r\n        match.toLowerCase() === match ? match : `-${ match }`\r\n      ))\r\n      .replace(/-+/g, '-')\r\n      .replace(/^-/, '')\r\n      .toLowerCase()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @method Str#toLowerCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase\r\n   * @description Synonym for\r\n   * [String#toLowerCase]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase}.\r\n   *\r\n   * @example\r\n   * new Str('UPPER-CASE').toLowerCase().$;  // 'upper-case'\r\n   */\r\n  toLowerCase() {\r\n    return new Str(this.$.toLowerCase());\r\n  }\r\n\r\n  /**\r\n   * @method Str#toSnakeCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Removes following regexp /\\s\\-\\./ making the string spinal cased.\r\n   *\r\n   * @example\r\n   * new Str('spinal-case').toSnakeCase().$; // 'spinal_case'\r\n   * new Str('camelCase').toSnakeCase().$;   // 'camel_case'\r\n   */\r\n  toSnakeCase() {\r\n    return new Str(trim(this.$)\r\n      .replace(/[\\s\\-_.]+/g, '_')\r\n      .replace(/[^_]/g, (match) => (\r\n        match.toLowerCase() === match ? match : `_${ match }`\r\n      ))\r\n      .replace(/_+/g, '_')\r\n      .replace(/^_/, '')\r\n      .toLowerCase()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @method Str#toSpaceCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @description Removes following regexp /\\-_\\./ making the string space cased.\r\n   *\r\n   * @example\r\n   * new Str('spinal-case').toSpaceCase().$;  // 'spinal case'\r\n   * new Str('_snake_case_').toSpaceCase().$; // 'snake case'\r\n   */\r\n  toSpaceCase() {\r\n    return new Str(trim(this.$)\r\n      .replace(/[\\s\\-_.]+/g, ' ')\r\n      .replace(/[\\S]/g, (match) => (\r\n        match.toLowerCase() === match ? match : ` ${ match }`\r\n      ))\r\n      .replace(/\\s+/g, ' ')\r\n      .replace(/^\\s/, '')\r\n      .toLowerCase()\r\n    );\r\n  }\r\n\r\n  toString() {\r\n    return this.$;\r\n  }\r\n\r\n  /**\r\n   * @method Str#toUpperCase\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\r\n   * @description Synonym for\r\n   * [String#toUpperCase]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase}.\r\n   *\r\n   * @example\r\n   * new Str('lower-case').toUpperCase().$;  // 'LOWER-CASE'\r\n   */\r\n  toUpperCase() {\r\n    return new Str(this.$.toUpperCase());\r\n  }\r\n\r\n  /**\r\n   * @method Str#trim\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trim\r\n   * @description Synonym for\r\n   * [String#trim]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trim}.\r\n   */\r\n  trim() {\r\n    return new Str(this.$.replace(/^[\\s\\ufeff\\u00a0]+|[\\s\\ufeff\\u00a0]+$/g, ''));\r\n  }\r\n\r\n  /**\r\n   * @method Str#trimLeft\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trimLeft\r\n   * @description Synonym for\r\n   * [String#trimLeft]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trimLeft}.\r\n   */\r\n  trimLeft() {\r\n    return new Str(this.$.replace(/^[\\s\\ufeff\\u00a0]+/, ''));\r\n  }\r\n\r\n  /**\r\n   * @method Str#trimRight\r\n   * @public\r\n   * @returns {Str} New instance of Str.\r\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trimRight\r\n   * @description Synonym for\r\n   * [String#trimRight]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trimRight}.\r\n   */\r\n  trimRight() {\r\n    return new Str(this.$.replace(/[\\s\\ufeff\\u00a0]+$/, ''));\r\n  }\r\n}\r\n\r\ndefineProperties(Str.prototype, {\r\n  [Symbol.toStringTag]: 'Str'\r\n});\r\n\r\nconstructors[2].push({\r\n  check: isString,\r\n  cls: Str\r\n});\r\n\r\nfunction trim(string) {\r\n  return string.replace(/^[\\s\\-_.]+|[\\s\\-_.]+$/g, '');\r\n}\r\n\r\n/**\r\n * @function parseJSON\r\n * @public\r\n * @param {String} [json = null] - String to parse.\r\n * @param {Object} [options] - Options.\r\n * @param {Boolean|*} [options.numbers] - If it is needed to parse number-like strings as numbers.\r\n * @param {Boolean|*} [options.dates] - If it is needed to parse date-like string as dates.\r\n * Date-like string is considered to match ^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\\dZ?$\r\n * @param {JSONCallback} [callback] - Callback that called on every iteration.\r\n * @returns {DWrap} D-Wrap of found match.\r\n * @description Method for parsing json.\r\n *\r\n * @example\r\n * parseJSON('{ \"a\": 1 }').$;                                           // { a: 1 }\r\n * parseJSON('{ \"a\": \"1\" }', { numbers: true }).$;                      // { numbers: true }\r\n * parseJSON('{ \"a\": \"1999-12-31T23:59:59.999Z\" }', { dates: true }).$; // { a: Date {...} }\r\n */\r\nfunction parseJSON(json = null, options = {}, callback) {\r\n  if (arguments.length <= 1) {\r\n    return D(JSON.parse(json));\r\n  }\r\n\r\n  if (isFunction(options)) {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n\r\n  const { numbers, dates } = options;\r\n  const parsed = JSON.parse(json, function (key, value) {\r\n    if (dates && /^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\\dZ?$/.test(value)) {\r\n      value = new Date(value);\r\n    } else if (numbers && isNumberLike(value) && isString(value)) {\r\n      value = Number(value);\r\n    }\r\n\r\n    return callback ? callback.apply(this, arguments) : value;\r\n  });\r\n\r\n  return D(parsed);\r\n}\r\n\r\nexport { Str, parseJSON };\r\n","/**\r\n * @module helpers/markupToJSON\r\n * @private\r\n * @description Exports markupToJSON method.\r\n */\r\n\r\nimport { Arr } from '../Arr';\r\nimport { Str } from '../Str';\r\nimport { Super } from '../Super';\r\nimport { switcher } from '../Switcher';\r\nimport { htmlAllowedTagSymbols, htmlAllowedAttrSymbols, voidElements } from '../constants';\r\n\r\n/**\r\n * @typedef {Object} MarkupElement\r\n * @property {'comment'|'text'|'element'} type - Type of the node.\r\n * @property {MarkupElement} parent - Type of the node.\r\n * @property {Object.<String, String>} attrs - Node attributes\r\n * @property {MarkupElement[]} children - Node children.\r\n */\r\n\r\nconst submitString = 'Please, submit an issue at https://github.com/dwaynejs/dwayne/issues.';\r\nconst NODE_REGEX_SET = new Super({\r\n  'tag-open': new RegExp(`<(${ htmlAllowedTagSymbols })\\\\s*`, 'i'),\r\n  'tag-close': constructCloseTagRegExp(htmlAllowedTagSymbols),\r\n  comment: /<!--((?:-[^\\->]|[^\\->])(?:-?[^-])*[^-]?|)-->/\r\n});\r\nconst TAG_OPEN_CLOSE = /^(\\/?)>/;\r\n// const ATTRIBUTE = /^([^\\u0000-\\u0020\\s\"'>\\/=]+)(?:\\s*=\\s*('[^']*'|\"[^\"]*\"|[^\\s\"'`<>=]+))?\\s*/;\r\nconst ATTRIBUTE = new RegExp(`^(${ htmlAllowedAttrSymbols })(?:\\\\s*=\\\\s*('[^']*'|\"[^\"]*\"|[^\\\\s\"'\\`<>=]+))?\\\\s*`);\r\nconst div = document.createElement('div');\r\nconst nodeSwitcher = switcher('strictEquals', (elem) => elem)\r\n  .case('tag-open', (elem, node) => {\r\n    const {\r\n      value: name,\r\n      selfClosing\r\n    } = node;\r\n\r\n    node = {\r\n      name,\r\n      attrs: new Super(node.attrs).map((value) => (\r\n        parseCharacterData(value)\r\n      )).$,\r\n      parent: elem,\r\n      children: new Arr([])\r\n    };\r\n\r\n    elem.children.push(node);\r\n\r\n    if (!selfClosing && voidElements.indexOf(name) === -1) {\r\n      elem = node;\r\n    }\r\n\r\n    return elem;\r\n  })\r\n  .case('tag-close', (elem, node) => {\r\n    if (elem.name === node.value) {\r\n      elem = elem.parent;\r\n    }\r\n\r\n    return elem;\r\n  })\r\n  .case(['comment', 'text'], (elem, node, collapseWhiteSpace, type) => {\r\n    const element = {\r\n      name: `#${ type }`,\r\n      parent: elem,\r\n      value: node.value\r\n    };\r\n\r\n    if (type === 'text' && elem.name !== 'script' && elem.name !== 'style') {\r\n      element.value = parseCharacterData(element.value);\r\n\r\n      if (collapseWhiteSpace) {\r\n        element.value = new Str(element.value).trim().$;\r\n      }\r\n    }\r\n\r\n    if (!collapseWhiteSpace || !/^\\s*$/.test(element.value)) {\r\n      elem.children.push(element);\r\n    }\r\n\r\n    return elem;\r\n  });\r\nconst rawTextSwitcher = switcher('strictEquals', false)\r\n  .case(['title', 'textarea', 'style', 'script'], true);\r\n\r\nclass InternalParsingError {\r\n  constructor(index) {\r\n    this.index = index;\r\n  }\r\n}\r\n\r\nclass ParsingError extends Error {\r\n  type = 'PARSING_ERROR';\r\n}\r\n\r\n/**\r\n * @function markupToJSON\r\n * @private\r\n * @param {String} markup - Markup to parse to JSON.\r\n * @param {Boolean} [collapseWhiteSpace = false] - If the whitespace should be collapsed.\r\n * @returns {Arr.<MarkupElement>} Markup elements array.\r\n * @description Function for parsing html and xml to JSON.\r\n */\r\nexport default (markup, collapseWhiteSpace) => {\r\n  collapseWhiteSpace = !!collapseWhiteSpace;\r\n\r\n  const elements = new Arr([]);\r\n  const startMarkup = markup;\r\n  let found;\r\n  let globalIndex = 0;\r\n  let elem = {\r\n    name: null,\r\n    children: elements\r\n  };\r\n\r\n  while (markup.length) {\r\n    try {\r\n      found = find(markup, elem);\r\n    } catch (err) {\r\n      if (!(err instanceof InternalParsingError)) {\r\n        throwUnexpectedError();\r\n      }\r\n\r\n      throw new ParsingError(`Parsing error near index ${ nearString(startMarkup, globalIndex + err.index) }`);\r\n    }\r\n\r\n    const {\r\n      type,\r\n      attrs,\r\n      selfClosing,\r\n      index,\r\n      value\r\n    } = found;\r\n\r\n    globalIndex += index;\r\n\r\n    if (!index) {\r\n      throwUnexpectedError();\r\n    }\r\n\r\n    const node = {\r\n      type,\r\n      value\r\n    };\r\n\r\n    if (type === 'tag-open') {\r\n      node.attrs = attrs;\r\n      node.selfClosing = selfClosing;\r\n    }\r\n\r\n    elem = nodeSwitcher(node.type, [elem, node, collapseWhiteSpace]);\r\n\r\n    markup = markup.slice(index);\r\n  }\r\n\r\n  return elements;\r\n\r\n  function throwUnexpectedError() {\r\n    throw new ParsingError(`Unexpected parsing error near index ${ nearString(startMarkup, globalIndex) }. ${ submitString }`);\r\n  }\r\n};\r\n\r\nfunction find(markup, elem) {\r\n  const { name } = elem;\r\n  let matches;\r\n\r\n  if (rawTextSwitcher(name)) {\r\n    matches = new Super({\r\n      'tag-close': markup.match(constructCloseTagRegExp(name))\r\n    });\r\n  } else {\r\n    matches = NODE_REGEX_SET.map((regex) => (\r\n      markup.match(regex)\r\n    ));\r\n  }\r\n\r\n  let match;\r\n\r\n  if (\r\n    match = matches.find((match) => (\r\n      match && match.index === 0\r\n    ))\r\n  ) {\r\n    const returning = {\r\n      type: match.key,\r\n      index: match.value[0].length,\r\n      value: match.value[1]\r\n    };\r\n    const attrs = {};\r\n\r\n    if (match.key === 'tag-open') {\r\n      const startMarkup = markup;\r\n      let closeMatch;\r\n\r\n      returning.selfClosing = false;\r\n      returning.attrs = attrs;\r\n\r\n      while (\r\n        (markup = startMarkup.slice(returning.index)) &&\r\n        !(closeMatch = markup.match(TAG_OPEN_CLOSE))\r\n      ) {\r\n        const attr = markup.match(ATTRIBUTE);\r\n\r\n        if (!attr) {\r\n          returning.index += 1;\r\n\r\n          continue;\r\n        }\r\n\r\n        attrs[attr[1]] = (attr[2] || '').replace(/^(\"|')|(\"|')$/g, '');\r\n        returning.index += attr[0].length;\r\n      }\r\n\r\n      if (closeMatch) {\r\n        returning.index += closeMatch[0].length;\r\n        returning.selfClosing = !!closeMatch[1];\r\n      }\r\n    }\r\n\r\n    return returning;\r\n  }\r\n\r\n  let { value: index } = matches.min((match) => (\r\n    match ? match.index : NaN\r\n  ));\r\n\r\n  if (index === Infinity) {\r\n    index = markup.length;\r\n  }\r\n\r\n  return {\r\n    type: 'text',\r\n    index,\r\n    value: markup.slice(0, index)\r\n  };\r\n}\r\n\r\nfunction constructCloseTagRegExp(tagName) {\r\n  return new RegExp(`</(${ tagName })\\\\s*>`, 'i');\r\n}\r\n\r\nfunction nearString(markup, index) {\r\n  return `${ index } (~~~ \"${ markup.slice(index, index + 15) }\" ~~~, the string itself is \"${ markup }\")`;\r\n}\r\n\r\nfunction parseCharacterData(string) {\r\n  return string.replace(/&(\\w+|#x?\\d+);/g, (match) => {\r\n    div.innerHTML = match;\r\n\r\n    return div.textContent || div.innerText;\r\n  });\r\n}\r\n","/**\r\n * @module Elem\r\n * @private\r\n * @mixin\r\n * @description Exports Elem class.\r\n */\r\n\r\nimport { Super } from './Super';\r\nimport { Arr, array, iterate as times } from './Arr';\r\nimport { blob } from './BlobObject';\r\nimport { method } from './Func';\r\nimport { Promise } from './Promise';\r\nimport { Str } from './Str';\r\nimport { switcher } from './Switcher';\r\nimport {\r\n  constructors, appliedRegExps, htmlElements, svgElements,\r\n  canvasGetMethods, canvasRestMethods\r\n} from './constants';\r\nimport {\r\n  isArray, isArrayLike, isElement, isFunction,\r\n  isInteger, isNil, isNumber, isNull, isString,\r\n  assign, dynamicDefineProperties, defineProperties, toArray,\r\n  validate, toStringTag, iterate, Symbol\r\n} from './helpers';\r\nimport markupToJSON from './helpers/markupToJSON';\r\n\r\n/**\r\n * @typedef {String} ElemEventString\r\n * @public\r\n * @description A string containing events separated by a comma with zero or more spaces or just spaces.\r\n */\r\n\r\n/**\r\n * @callback ElemValueCallback\r\n * @public\r\n * @param {String} value - Old value.\r\n * @param {Elem} elem - Current element.\r\n * @param {Number} index - Index in the set of the elements.\r\n */\r\n\r\n/**\r\n * @callback ElemSetOfCallback\r\n * @public\r\n * @param {Element} created - Created element.\r\n * @param {*} value - Value of the iterated element in the object.\r\n * @param {Key} key - Key of the iterated element in the object.\r\n * @param {*} object - Object that is iterated over.\r\n * @param {Element} elem - Current element.\r\n * @param {Number} index - Index of the current element.\r\n */\r\n\r\n/**\r\n * @callback ValidateCallback\r\n * @public\r\n * @param {*} value - Element value.\r\n * @param {Element} elem - Element to validate.\r\n * @param {Number} index - Index of the element.\r\n */\r\n\r\n/**\r\n * @callback CtxCallback\r\n * @public\r\n * @param {CanvasRenderingContext2D} ctx - Canvas rendering context.\r\n */\r\n\r\n/**\r\n * @callback ElemListener\r\n * @public\r\n * @param {Event} e - Fired event.\r\n * @param {Element} elem - Element on which the listener was called.\r\n * @param {Number} index - Index of the element on which the listener was called.\r\n */\r\n\r\n/**\r\n * @callback ElemRemoveListeners\r\n * @public\r\n * @param {...ElemEventString} events - If at least one argument present only removes event listeners specified\r\n * by the events in the arguments.\r\n */\r\n\r\nconst nativeDocument = global.document;\r\nconst emptyDiv = nativeDocument.createElement('div');\r\nconst eventSeparator = /(,| ) */;\r\nconst textProperty = new Super(Node.prototype).propertyDescriptor('textContent') ? 'textContent' : 'innerText';\r\nconst classes = {};\r\nconst attrs = {};\r\nconst windowsDwayneData = new Arr([]);\r\nconst inputElements = 'input, select, textarea, datalist, keygen, output';\r\nconst click = method('click');\r\nconst svgNS = 'http://www.w3.org/2000/svg';\r\nconst xmlNS = 'http://www.w3.org/2000/xmlns/';\r\nconst xlinkNS = 'http://www.w3.org/1999/xlink';\r\nconst xhtmlNS = 'http://www.w3.org/1999/xhtml';\r\nconst typeSwitcher = switcher('call', (elem, type) => {\r\n  const ns = type === 'svg'\r\n    ? svgNS\r\n    : elem.prop('namespaceURI') || nativeDocument.documentElement.namespaceURI || xhtmlNS;\r\n\r\n  return nativeDocument.createElementNS(ns, type);\r\n})\r\n  .case(\r\n    (type) => type === '#comment',\r\n    () => nativeDocument.createComment('')\r\n  )\r\n  .case(\r\n    (type) => type === '#text',\r\n    () => nativeDocument.createTextNode('')\r\n  );\r\nconst refSwitcher = switcher('strictEquals', 'href')\r\n  .case(\r\n    ['img', 'script', 'iframe', 'audio', 'video'],\r\n    'src'\r\n  )\r\n  .case(\r\n    'form',\r\n    'action'\r\n  );\r\nconst filterSwitcher = switcher('call', (selector) => selector)\r\n  .case(\r\n    isString,\r\n    (selector) => (\r\n      (elem) => new Elem(elem).is(selector)\r\n    )\r\n  )\r\n  .case(\r\n    [isArray, isElem],\r\n    (elems) => {\r\n      elems = new Arr(elems);\r\n\r\n      return (elem) => elems.indexOf(elem) !== -1;\r\n    }\r\n  );\r\nconst innerSwitcher = switcher('strictEquals', 0)\r\n  .case('padding-box', (paddings) => paddings)\r\n  .case('border-box', (paddings, borders) => paddings + borders);\r\nconst outerSwitcher = switcher('strictEquals', (borders, paddings) => borders + paddings)\r\n  .case('padding-box', (borders) => borders)\r\n  .case('border-box', 0);\r\nconst attrNSSwitcher = switcher('call', null)\r\n  .case((attr) => attr === 'xmlns' || attr === 'xmlns:xlink', (elem) => (\r\n    elem.name === 'svg'\r\n      ? xmlNS\r\n      : null\r\n  ))\r\n  .case((attr) => /^xlink:\\w/.test(attr), (elem) => (\r\n    elem.closest('svg').length\r\n      ? xlinkNS\r\n      : null\r\n  ));\r\n\r\n/**\r\n * @class Elem\r\n * @extends Arr\r\n * @public\r\n * @param {Element|Element[]} [elem = []] - An element or an array of elements to wrap.\r\n * @returns {Elem} Instance of Elem.\r\n * @description Wrap of an elements set. Also has all methods from from\r\n * [CanvasRenderingContext2D]{@link https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D}.\r\n * Getters methods return the same as methods from CanvasRenderingContext2D and the rest return this.\r\n * Work for the first canvas element in the set.\r\n *\r\n * @example\r\n * new Elem(document.body);\r\n * new Elem(document.querySelectorAll('.cls'));\r\n * new Elem(document.getElementsByClassName('cls'));\r\n */\r\nclass Elem extends Arr {\r\n  constructor(elem = []) {\r\n    super((() => {\r\n      let element = elem;\r\n\r\n      if (isArrayLike(element) && (\r\n        isWindow(element) ||\r\n        isHTMLDocument(element) ||\r\n        isDocumentFragment(element) ||\r\n        isElement(element) ||\r\n        isCommentOrText(element) ||\r\n        isStyleRule(element)\r\n      )) {\r\n        element = [element];\r\n      }\r\n\r\n      return new Arr(toArray(new Super(element).$, true)).object((elems, elem) => {\r\n        if (elems.indexOf(elem) === -1 && (\r\n          isElement(elem) ||\r\n          isWindow(elem) ||\r\n          isHTMLDocument(elem) ||\r\n          isDocumentFragment(elem) ||\r\n          isCommentOrText(elem) ||\r\n          isStyleRule(elem)\r\n        )) {\r\n          return elems.push(elem);\r\n        }\r\n\r\n        if (isElem(elem)) {\r\n          elems.push.apply(elems, elem.$);\r\n        }\r\n      }, []).$;\r\n    })());\r\n\r\n    this.$$ = elem;\r\n\r\n    this.forEach(addDwayneData);\r\n\r\n    /**\r\n     * @member {Array.<Node|Window>} Elem#$\r\n     * @type {Array.<Node|Window>}\r\n     * @public\r\n     * @description Constructed element set.\r\n     */\r\n\r\n    /**\r\n     * @member {*} Elem#$$\r\n     * @type {*}\r\n     * @public\r\n     * @description Initial element set.\r\n     */\r\n  }\r\n\r\n  /**\r\n   * @method Elem#add\r\n   * @public\r\n   * @param {...(String|Elem|Element|Element[])} elements - Each argument is a selector, or Elem, or Element, or array of Elements.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for adding new elements to the set.\r\n   *\r\n   * @example\r\n   * elem1.find('.cls1')\r\n   *   .add(elem2.find('.cls2'))\r\n   *   .hide();\r\n   */\r\n  add(...elements) {\r\n    iterate(arguments, (elem) => {\r\n      toFind(elem).forEach((elem) => {\r\n        if (this.indexOf(elem) === -1) {\r\n          this.push(elem);\r\n        }\r\n      });\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#addClass\r\n   * @public\r\n   * @param {...String} classes - Classes to add.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for adding classes to the all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.addClass('red', 'round');\r\n   */\r\n  addClass(...classes) {\r\n    return this.forEach((elem) => {\r\n      const list = elem.classList;\r\n\r\n      iterate(isElement(elem) && arguments, (cls) => list.add(cls));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#addComment\r\n   * @public\r\n   * @param {String} text - Text of comment to add.\r\n   * @param {Boolean} end - If the comment should be inserted to the end. If false it's inserted to the start.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for adding comment to all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.addHTML('<div>1</div>');\r\n   */\r\n  addComment(text, end = true) {\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.insertAdjacentHTML(end ? 'beforeend' : 'afterbegin', `<!--${ text }-->`);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#addHTML\r\n   * @public\r\n   * @param {String} html - HTML to add.\r\n   * @param {Boolean} end - If the HTML should be inserted to the end. If false it's inserted to the start.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for adding HTML to all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.addHTML('<div>1</div>');\r\n   */\r\n  addHTML(html, end = true) {\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.insertAdjacentHTML(end ? 'beforeend' : 'afterbegin', html);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#addRule\r\n   * @public\r\n   * @param {String} name - Name of the rule.\r\n   * @param {String} selector - Selector for the rule\r\n   * @param {Object.<String, String>} style - Style for the selector.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for adding css styles into the first style tag in the set.\r\n   * Note: style element should be inside the document.\r\n   *\r\n   * @example\r\n   * style.addRule('img-size', 'img.square', {\r\n   *   width: '40px !important',\r\n   *   height: '40px !important'\r\n   * });\r\n   */\r\n  addRule(name, selector, style) {\r\n    this.some((elem) => {\r\n      if (getName(elem) === 'style') {\r\n        const { sheet } = elem;\r\n        const { length } = sheet.cssRules;\r\n        const rules = new Super(style).word((value, property) => (\r\n          `${ new Str(property).toHyphenCase() }: ${ value };\\n`\r\n        ));\r\n\r\n        sheet.insertRule(\r\n          `${ selector } {${ rules && '\\n' }${ rules }}`,\r\n          length\r\n        );\r\n        sheet.cssRules[length].dwayneData = { name };\r\n\r\n        return true;\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#addText\r\n   * @public\r\n   * @param {String} text - Text to add.\r\n   * @param {Boolean} end - If the text should be inserted to the end. If false it's inserted to the start.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for adding text to all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.addText('123');\r\n   */\r\n  addText(text, end = true) {\r\n    return this.forEach((elem) => {\r\n      new Elem(nativeDocument.createTextNode(text)).into(elem, end);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#apply\r\n   * @public\r\n   * @param {...String} strings - Strings to apply.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method that is a shorthand for many other methods.\r\n   * All shorthands can be separated with space and written within one string.\r\n   *\r\n   * @example\r\n   * elem.apply(\r\n   *   '#id .c1 .c2 @border(1px solid black) $disabled $attr(some value) *(Click me!)'\r\n   * );\r\n   * // shorthand for\r\n   * // elem\r\n   * //   .id('id')\r\n   * //   .addClass('c1', 'c2')\r\n   * //   .css('border', '1px solid black')\r\n   * //   .attr({\r\n   * //     attr, 'some value'\r\n   * //     disabled: ''\r\n   * //   })\r\n   * //   .text('Click me!');\r\n   * // There is a full list of possible types of syntax below...\r\n   *\r\n   * elem.apply('#id');                    // shorthand for elem.id('id');\r\n   * elem.apply('.c1 .c2');                // shorthand for elem.addClass('c1', 'c2');\r\n   * elem.apply('-.c1 -.c2');              // shorthand for elem.removeClass('c1', 'c2');\r\n   * elem.apply('-@float -@display');      // shorthand for elem.removeCSS('float', 'display');\r\n   * elem.apply('-$a1 -$a2');              // shorthand for elem.removeAttr('a1', 'a2');\r\n   * elem.apply('*(some text)');           // shorthand for elem.text('some text');\r\n   * elem.apply('&(<div>1</div>)');        // shorthand for elem.html('<div>1</div>');\r\n   * elem.apply('@float(right)');          // shorthand for elem.css('float', 'right');\r\n   * elem.apply('@transform(scale(5px))'); // shorthand for elem.css('transform', 'scale(5px)');\r\n   * elem.apply('@margin(2px 2px)');       // shorthand for elem.css('margin', '2px 2px');\r\n   * elem.apply('@marginLeft(2px)');       // shorthand for elem.css('marginLeft', '2px 2px');\r\n   * elem.apply('@margin-left(2px)');      // shorthand for elem.css('margin-left', '2px 2px');\r\n   * elem.apply('$attr(some value)');      // shorthand for elem.attr('attr', 'some value');\r\n   * elem.apply('$attr');                  // shorthand for elem.attr('attr', '');\r\n   */\r\n  apply(...strings) {\r\n    let applied;\r\n    let setApplied;\r\n    let callback;\r\n    let name;\r\n    let np1;\r\n    let slice;\r\n\r\n    new Str(new Arr(arguments).join(' '))\r\n      .split(/(\\s+)/)\r\n      .forEach((string) => {\r\n        if (!applied) {\r\n          np1 = string.slice(0, 1);\r\n          callback = appliedRegExps[np1];\r\n          slice = 1;\r\n\r\n          if (callback && !isFunction(callback)) {\r\n            callback = callback[string.slice(1, 2)];\r\n            slice = 2;\r\n          }\r\n\r\n          if (/^\\s+$/.test(string) || !callback) {\r\n            return;\r\n          }\r\n\r\n          name = string.slice(slice).match(/^[^()]+/);\r\n\r\n          if (!name && (np1 !== '*' && np1 !== '&')) {\r\n            return;\r\n          }\r\n\r\n          applied = {\r\n            name: name ? name[0] : '',\r\n            args: string.slice(slice + (name ? name[0] : '').length),\r\n            callback\r\n          };\r\n\r\n          setApplied = true;\r\n        }\r\n\r\n        if (!setApplied) {\r\n          applied.args += string;\r\n        }\r\n\r\n        if (!applied.args || /^\\([\\s\\S]+\\)$/.test(applied.args)) {\r\n          applied.callback(this, applied.name, applied.args.replace(/^\\(|\\)$/g, ''));\r\n          applied = null;\r\n        }\r\n\r\n        setApplied = false;\r\n      });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#attr\r\n   * @public\r\n   * @param {String|Object.<String, String|ElemValueCallback>} [attr] - Name of the attribute to get or\r\n   * an object of the format { [attrName]: value, ... } to set attributes.\r\n   * @param {String|ElemValueCallback} [value] - If the first argument is a string\r\n   * it should be a value to set for that attribute.\r\n   * @returns {Super|String|Elem} If no arguments passed, D-Wrap of attributes of the first element in the set\r\n   * returned, if 1 string argument is passed the value of the attribute of the first element in the set\r\n   * returned otherwise returns this.\r\n   * @description Method for getting/setting attributes.\r\n   *\r\n   * @example\r\n   * elem.attr('attr1', 'value1'); // attribute attr1 set to 'value1' and this returned\r\n   * elem.attr('attr1');           // 'value1'\r\n   * elem.attr({\r\n   *   attr1: 'value3',            // attribute attr1 set to 'value3'\r\n   *   attr2: 'value2'             // attribute attr2 set to 'value2'\r\n   * });                           // this returned\r\n   * elem.attr().$;                // { attr1: 'value3', attr2: 'value2' }\r\n   */\r\n  attr(attr, value) {\r\n    const elem = getElem(this);\r\n\r\n    if (!arguments.length) {\r\n      return new Super(elem.attributes).object((o, attr) => {\r\n        o[attr.name] = attr.value;\r\n      });\r\n    }\r\n\r\n    if (arguments.length <= 1 && isString(attr)) {\r\n      const ns = attrNSSwitcher(attr, [new Elem(elem)]);\r\n\r\n      return isNull(ns)\r\n        ? elem.getAttribute(attr)\r\n        : elem.getAttributeNS(ns, attr);\r\n    }\r\n\r\n    if (arguments.length >= 2) {\r\n      attr = { [attr]: value };\r\n    }\r\n\r\n    return this.forEach((elem, index) => {\r\n      if (!isElement(elem)) {\r\n        return;\r\n      }\r\n\r\n      new Super(attr).forEach((value, key) => {\r\n        if (isNil(value)) {\r\n          return new Elem(elem).removeAttr(key);\r\n        }\r\n\r\n        if (isFunction(value)) {\r\n          value = value(new Elem(elem).attr(key), elem, index);\r\n        }\r\n\r\n        if (isNil(value)) {\r\n          return new Elem(elem).removeAttr(key);\r\n        }\r\n\r\n        const ns = attrNSSwitcher(key, [new Elem(elem)]);\r\n\r\n        if (isNull(ns)) {\r\n          elem.setAttribute(key, value);\r\n        } else {\r\n          elem.setAttributeNS(ns, key, value);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#blob\r\n   * @public\r\n   * @param {Object} [options = {}] - Options that are passed into {@link blob}.\r\n   * @returns {Promise.<BlobObject>} New instance of promise.\r\n   * @description Returns a {@link BlobObject} Promise. Works with image or canvas first element.\r\n   *\r\n   * @example\r\n   * image.blob().then((blob) => console.log(blob));  // BlobObject\r\n   * canvas.blob().then((blob) => console.log(blob)); // BlobObject\r\n   */\r\n  blob(options = {}) {\r\n    return new Promise((resolve, reject) => {\r\n      const elem = this.first();\r\n      const { name } = elem;\r\n\r\n      if (name !== 'img' && name !== 'canvas') {\r\n        reject(new Error('First element in the set isn\\'t an image or a canvas! (Elem#blob)'));\r\n      }\r\n\r\n      if (name === 'canvas') {\r\n        return resolve(elem);\r\n      }\r\n\r\n      elem\r\n        .load()\r\n        .then(() => {\r\n          if (elem.isBroken()) {\r\n            return reject(new Error('The image is broken! (Elem#blob)'));\r\n          }\r\n\r\n          const canvas = new Elem(nativeDocument).canvas();\r\n          const width = elem.width();\r\n          const height = elem.height();\r\n\r\n          canvas\r\n            .width(width)\r\n            .height(height)\r\n            .drawImage(elem.$[0], 0, 0);\r\n\r\n          resolve(canvas);\r\n        });\r\n    }).then((canvas) => {\r\n      const dataURL = canvas.dataURL();\r\n      const byteString = atob(dataURL.split(',')[1]);\r\n      const length = byteString.length;\r\n      const ab = new ArrayBuffer(length);\r\n      const ia = new Uint8Array(ab);\r\n\r\n      times(length, (i) => {\r\n        ia[i] = byteString.charCodeAt(i);\r\n      });\r\n\r\n      return blob(ab, options);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#blur\r\n   * @returns {Elem} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLElement/blur\r\n   * @description Synonym for\r\n   * [HTMLElement#blur]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/blur}.\r\n   */\r\n  blur() {\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.blur();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#calcCSS\r\n   * @param {String} [pseudo] - See the link.\r\n   * @returns {CSSStyleDeclaration} See the link.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/Window/getComputedStyle\r\n   * @description Synonym for\r\n   * [getComputedStyle]{@link https://developer.mozilla.org/en/docs/Web/API/Window/getComputedStyle}.\r\n   * Returns computed style for the first element in the set or undefined.\r\n   */\r\n  calcCSS(pseudo = null) {\r\n    return getComputedStyle(getElem(this), pseudo);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#changeRule\r\n   * @public\r\n   * @param {String} name - Name of the rule.\r\n   * @param {Object.<String, String>} style - Style for the selector.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for changing css styles in the first style tag in the set.\r\n   * Note: style element should be inside the document.\r\n   *\r\n   * @example\r\n   * style.changeRule('img-size', {\r\n   *   width: '50px !important',\r\n   *   height: '50px !important'\r\n   * });\r\n   */\r\n  changeRule(name, style) {\r\n    this.some((elem) => {\r\n      if (getName(elem) === 'style') {\r\n        const { value: rule } = new Arr(elem.sheet.cssRules).find((rule) => rule.dwayneData && rule.dwayneData.name === name) || {};\r\n\r\n        if (rule) {\r\n          new Elem(rule).css(style);\r\n\r\n          return true;\r\n        }\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#child\r\n   * @public\r\n   * @param {Number|String|Elem|Element|Element[]} element - If the argument is a number a wrap of the set of the children\r\n   * of this index of each element in the set returned otherwise an element to put into this element, a collection\r\n   * or a selector of it.\r\n   * @param {Boolean} end - If the elements should be inserted to the end. If false they are inserted to the start.\r\n   * @returns {Elem} Returns a wrap of children or inserted elements.\r\n   * @description Method is similar to\r\n   * [Node#appendChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/appendChild}.\r\n   *\r\n   * @example\r\n   * const child = elem.child(1);\r\n   *\r\n   * elem.child(elem2);\r\n   * elem.child(document.getElementById('id'));\r\n   * elem.child('#id div.c1');\r\n   */\r\n  child(element, end = true) {\r\n    if (isInteger(element) && element >= 0) {\r\n      return this.children().elem(element);\r\n    }\r\n\r\n    return toFind(element).into(this, end);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#children\r\n   * @public\r\n   * @returns {Elem} D-Wrap of the children of the first element in the set.\r\n   * @description Method for getting element's children.\r\n   *\r\n   * @example\r\n   * const children = elem.children();\r\n   */\r\n  children() {\r\n    return new Elem(this.length ? this.$[0].childNodes : []);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#class\r\n   * @public\r\n   * @param {String} [cls] - If it's present it has to contain class attribute to set.\r\n   * @returns {Arr|Elem} If the argument is present this returned otherwise a wrap of the classes array returned.\r\n   * @description Method for getting/setting classes.\r\n   *\r\n   * @example\r\n   * elem.class('c1 c2'); // class set to 'c1 c2'\r\n   * elem.class().$;      // ['c1', 'c2']\r\n   */\r\n  class(cls) {\r\n    if (!arguments.length) {\r\n      return new Arr(getElem(this).className.split(' '));\r\n    }\r\n\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.className = cls;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#click\r\n   * @returns {Elem} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLElement/click\r\n   * @description Synonym for\r\n   * [HTMLElement#click]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/click}.\r\n   */\r\n  click() {\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.click();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#clone\r\n   * @public\r\n   * @param {Boolean|*} [deep = false] - See thee link.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/Node/cloneNode\r\n   * @description Synonym for\r\n   * [Node#cloneNode]{@link https://developer.mozilla.org/en/docs/Web/API/Node/cloneNode}.\r\n   */\r\n  clone(deep = false) {\r\n    return this.object((elems, elem) => {\r\n      elems.add(elem.cloneNode(!!deep));\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#closest\r\n   * @public\r\n   * @param {String} selector - See the link.\r\n   * @returns {Elem} Set of the closest elements.\r\n   * @description Synonym for\r\n   * [Element#closest]{@link https://developer.mozilla.org/en/docs/Web/API/Element/closest}.\r\n   */\r\n  closest(selector) {\r\n    return this.object((elems, elem) => {\r\n      while (elem) {\r\n        if (new Elem(elem).is(selector)) {\r\n          return elems.add(elem);\r\n        }\r\n\r\n        elem = elem.parentNode;\r\n      }\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#contains\r\n   * @public\r\n   * @param {String|Elem|Element} element - Element to find out if it's within the first element\r\n   * in the set or a selector of it.\r\n   * @returns {Boolean} Returns if the argument within this element.\r\n   * @description Method is extension for\r\n   * [Node#contains]{@link https://developer.mozilla.org/en/docs/Web/API/Node/contains}.\r\n   *\r\n   * @example\r\n   * elem1.contains(elem2);   // true|false\r\n   * elem.contains(selector); // true|false\r\n   */\r\n  contains(element) {\r\n    element = toFind(element);\r\n\r\n    return getElem(this).contains(getElem(element));\r\n  }\r\n\r\n  /**\r\n   * @method Elem#create\r\n   * @public\r\n   * @param {String} type - Type of created element. If type is \"#text\" a text node is created.\r\n   * If type is \"#comment\" a comment node is created.\r\n   * @param {...String} appliedExpressions - Strings that are passed into {@link Elem#apply}.\r\n   * @returns {Elem} New instance of Elem - wrap of the created elements.\r\n   * @description Method for creating elements inside this element.\r\n   * If this element is not an Element the element is just created.\r\n   *\r\n   * @example\r\n   * elem.create('div', '#id .c1 .c2 *Some text*');\r\n   *\r\n   * // also there are shorthands for almost every HTML-element\r\n   * elem.div();\r\n   * elem.input('$type(checkbox) $name(country)');\r\n   */\r\n  create(type, ...appliedExpressions) {\r\n    return this.object((elems, elem) => {\r\n      const element = new Elem(typeSwitcher(type, [new Elem(elem)]));\r\n\r\n      element.into(elem);\r\n\r\n      elems.add(element.apply.apply(element, appliedExpressions));\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#createComment\r\n   * @public\r\n   * @param {String} text - Text of the comment.\r\n   * @returns {Elem} New instance of Elem - wrap of the created comments.\r\n   * @description Method for creating comments inside this element.\r\n   * If this element is not an Element the comment is just created.\r\n   *\r\n   * @example\r\n   * elem.createComment('comment');\r\n   */\r\n  createComment(text) {\r\n    return this\r\n      .create('#comment')\r\n      .text(text);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#createText\r\n   * @public\r\n   * @param {String} text - Text.\r\n   * @returns {Elem} New instance of Elem - wrap of the created text nodes.\r\n   * @description Method for creating text nodes inside this element.\r\n   * If this element is not an Element the text node is just created.\r\n   *\r\n   * @example\r\n   * elem.createText('text');\r\n   */\r\n  createText(text) {\r\n    return this\r\n      .create('#text')\r\n      .text(text);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#css\r\n   * @public\r\n   * @param {String|Object.<String, String|ElemValueCallback>} [property] - Name of the property to get or\r\n   * an object of the format { [property]: value, ... } to set styles.\r\n   * @param {String|ElemValueCallback} [value] - If the first argument is a string it should be a value to set for that property.\r\n   * @returns {Super|String|Elem} If no arguments passed, D-Wrap of css styles of the element returned,\r\n   * if 1 string argument is passed the value of the property returned otherwise returns this.\r\n   * @description Method for getting/setting styles. Supports !important.\r\n   *\r\n   * @example\r\n   * elem.css('display', 'none'); // display set to 'none' and this returned\r\n   * elem.css('display');         // 'none'\r\n   * elem.css({\r\n   *   display: 'inline',         // display set to 'inline'\r\n   *   cursor: 'pointer'          // cursor set to 'pointer'\r\n   * });                          // this returned\r\n   * elem.css().$;                // { display: 'none', cursor: 'pointer' }\r\n   */\r\n  css(property, value) {\r\n    let style = getElem(this).style;\r\n\r\n    if (isStyleRule(this.$[0])) {\r\n      style = this.$[0].style;\r\n    }\r\n\r\n    if (!arguments.length) {\r\n      return new Str(style.cssText)\r\n        .split(/; ?/)\r\n        .object((o, value) => {\r\n          if (value) {\r\n            property = value.split(/: /);\r\n\r\n            o[new Str(property[0]).toCamelCase().$] = property[1];\r\n          }\r\n        });\r\n    }\r\n\r\n    if (arguments.length <= 1 && isString(property)) {\r\n      property = new Str(property).toHyphenCase().$;\r\n\r\n      return style.getPropertyValue(property) + (style.getPropertyPriority(property) ? ' !important' : '');\r\n    }\r\n\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: value };\r\n    }\r\n\r\n    return this.forEach((elem, index) => {\r\n      if (!isElement(elem) && !isStyleRule(elem)) {\r\n        return;\r\n      }\r\n\r\n      new Super(property).forEach((value, property) => {\r\n        if (isNil(value)) {\r\n          return new Elem(elem).removeCSS(property);\r\n        }\r\n\r\n        property = new Str(property).toHyphenCase().$;\r\n\r\n        if (isFunction(value)) {\r\n          value = value(new Elem(elem).css(property), elem, index);\r\n        }\r\n\r\n        if (isNil(value)) {\r\n          return new Elem(elem).removeAttr(key);\r\n        }\r\n\r\n        elem.style.removeProperty(property);\r\n        elem.style.setProperty(\r\n          property,\r\n          value.replace(/ ?!important$/, ''),\r\n          /!important$/.test(value) ? 'important' : ''\r\n        );\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#ctx\r\n   * @public\r\n   * @param {String|Object|CtxCallback} [property] - If present and object\r\n   * it's assigned to the canvas rendering context, if function\r\n   * it's called with canvas rendering context argument, if string\r\n   * the value from the second argument is used for assigning\r\n   * this property to canvas rendering context and if not present\r\n   * canvas rendering context returned.\r\n   * @param {*} [value] - See the property argument.\r\n   * @returns {CanvasRenderingContext2D|Elem}\r\n   * @description Rendering context of the first canvas in the set.\r\n   *\r\n   * @example\r\n   * canvas.ctx; // CanvasRenderingContext2D\r\n   */\r\n  ctx(property, value) {\r\n    let ctx;\r\n\r\n    this.some((elem) => {\r\n      if (getName(elem) === 'canvas') {\r\n        ctx = elem.dwayneData.ctx;\r\n\r\n        return true;\r\n      }\r\n    });\r\n\r\n    if (!arguments.length) {\r\n      return ctx;\r\n    }\r\n\r\n    if (!ctx) {\r\n      return this;\r\n    }\r\n\r\n    if (isFunction(property)) {\r\n      property(ctx);\r\n    } else {\r\n      if (arguments.length >= 2) {\r\n        property = { [property]: value };\r\n      }\r\n\r\n      assign(ctx, property);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#data\r\n   * @public\r\n   * @param {String|Object.<String, String|ElemValueCallback>} [key] - Name of the data attribute (without data- prefix)\r\n   * to get or an object of the format { [attrName]: value, ... } to set attributes.\r\n   * @param {String|ElemValueCallback} [value] - If the first argument is a string it should be a value to set for that attribute.\r\n   * @returns {Super|String|Elem} If no arguments passed, D-Wrap of dataset of the element returned,\r\n   * if 1 string argument is passed the value of the data attribute returned otherwise returns this.\r\n   * @description Method for getting/setting data attributes. See\r\n   * [HTMLElement#dataset]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/dataset}.\r\n   *\r\n   * @example\r\n   * elem.data('someKey1', 'value'); // attribute data-some-key1 set to 'value1' and this returned\r\n   * elem.data('someKey1');          // 'value1'\r\n   * elem.data({\r\n   *   someKey1: 'value3',           // attribute data-some-key1 set to 'value3'\r\n   *   someKey2: 'value2'            // attribute data-some-key2 set to 'value2'\r\n   * });                             // this returned\r\n   * elem.data().$;                  // { someKey1: 'value3', someKey2: 'value2' }\r\n   */\r\n  data(key, value) {\r\n    const dataset = getElem(this).dataset;\r\n\r\n    if (!arguments.length) {\r\n      return new Super(dataset).object((o, value, key) => {\r\n        o[key] = value;\r\n      });\r\n    }\r\n\r\n    if (arguments.length === 1 && isString(key)) {\r\n      return dataset[key];\r\n    }\r\n\r\n    if (arguments.length >= 2) {\r\n      key = { [key]: value };\r\n    }\r\n\r\n    return this.forEach((elem, index) => {\r\n      if (!isElement(elem)) {\r\n        return;\r\n      }\r\n\r\n      iterate(key, (value, key) => {\r\n        elem.dataset[key] = isFunction(value) ? value(elem.dataset[key], elem, index) : value;\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#dataURL\r\n   * @param {String} [type = 'image/png'] - See the link\r\n   * @param {Number} [encoderOptions = 0.92] - See the link.\r\n   * @returns {String} Data URL for the first canvas element in the set.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/toDataURL\r\n   * @description Synonym for\r\n   * [HTMLCanvasElement#toDataURL]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/toDataURL}.\r\n   *\r\n   * @example\r\n   * canvas.dataURL();\r\n   */\r\n  dataURL(type, encoderOptions) {\r\n    const ctx = this.ctx();\r\n\r\n    if (!ctx) {\r\n      return '';\r\n    }\r\n\r\n    return ctx.canvas.toDataURL.apply(ctx.canvas, arguments);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#deleteRule\r\n   * @public\r\n   * @param {String} name - Name of the rule.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for deleting css styles in a style tag.\r\n   * Note: style element should be inside the document.\r\n   *\r\n   * @example\r\n   * style.deleteRule('img-size');\r\n   */\r\n  deleteRule(name) {\r\n    this.some((elem) => {\r\n      if (getName(elem) === 'style') {\r\n        const rule = new Arr(elem.sheet.cssRules).find((rule) => rule.dwayneData && rule.dwayneData.name === name);\r\n\r\n        if (rule) {\r\n          elem.sheet.deleteRule(rule.key);\r\n\r\n          return true;\r\n        }\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#dispatch\r\n   * @public\r\n   * @param {String|Event} event - Event or a string (new Event(event) is created).\r\n   * @param {Object} [eventInit = {}] - See the link.\r\n   * @param {Boolean} [eventInit.bubbles = true] - See the link.\r\n   * @param {Boolean} [eventInit.cancelable = true] - See the link.\r\n   * @param {Object} [details = {}] - Object that is assigned to the event.\r\n   * @returns {Elem} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/Event/Event\r\n   * @description Synonym for\r\n   * [EventTarget#dispatchEvent]{@link https://developer.mozilla.org/en/docs/Web/API/EventTarget/dispatchEvent}.\r\n   *\r\n   * @example\r\n   * elem.dispatch('click');\r\n   * elem.dispatch('click', { bubbles: false, cancellable: false });\r\n   * elem.dispatch(new CustomEvent('custom-event'));\r\n   */\r\n  dispatch(event, eventInit = {}, details = {}) {\r\n    const { bubbles = true, cancelable = true } = eventInit || {};\r\n    let finalEvent = event;\r\n\r\n    if (!/Event$/.test(toStringTag(finalEvent))) {\r\n      try {\r\n        finalEvent = new Event(finalEvent, { bubbles, cancelable });\r\n      } catch (err) {\r\n        finalEvent = nativeDocument.createEvent('Event');\r\n        finalEvent.initEvent(event, bubbles, cancelable);\r\n      }\r\n\r\n      assign(finalEvent, details);\r\n    }\r\n\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.dispatchEvent(finalEvent);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#elem\r\n   * @public\r\n   * @param {Number} [index = 0] - Index of the element of the set to get. Negative index means elem.length + index.\r\n   * @returns {Elem} New instance of Elem.\r\n   *\r\n   * @example\r\n   * elem.elem(1); // a wrap of the element in the set that has index 1\r\n   * elem.elem();  // a wrap of the element in the set that has index 0\r\n   */\r\n  elem(index = 0) {\r\n    if (index < 0) {\r\n      index = this.length + index;\r\n    }\r\n\r\n    return new Elem(this.$[index]);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#filter\r\n   * @public\r\n   * @param {String|Function|Element[]|Elem} [selector = Boolean] - If it's a string the method filters elements with the selector\r\n   * otherwise super.filter is called.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Method for filtering elements.\r\n   *\r\n   * @example\r\n   * elem.filter((elem) => new Elem(elem).closest('.parent'));\r\n   * elem.filter(elemsInArray);\r\n   * elem.filter(elemsInElem);\r\n   * elem.filter('.child');\r\n   */\r\n  filter(selector = Boolean) {\r\n    return new Elem(super.filter(filterSwitcher(selector)));\r\n  }\r\n\r\n  /**\r\n   * @method Elem#find\r\n   * @public\r\n   * @param {String|Function} selector - Selector to find.\r\n   * @returns {Elem|{ key: Key, value: * }|null} New instance of Elem if selector is a string\r\n   * otherwise super.find is called.\r\n   * @description Synonym for\r\n   * [Element#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Element/querySelectorAll}.\r\n   */\r\n  find(selector) {\r\n    if (!isString(selector)) {\r\n      return super.find(selector);\r\n    }\r\n\r\n    return this.object((elems, elem) => {\r\n      elems.add(find(selector, elem));\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#first\r\n   * @public\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Synonym for elem.elem(0).\r\n   */\r\n  first() {\r\n    return this.elem(0);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#firstChild\r\n   * @public\r\n   * @param {String} [selector = null] - If present, finds first child in every elem that matches the selector.\r\n   * If not, finds first child of each element in the set.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Method for finding first children of each element in the set.\r\n   *\r\n   * @example\r\n   * elem.first();       // finds first child of each element in the elem set\r\n   * elem.first('.foo'); // find first child that has foo class of each element in the set\r\n   */\r\n  firstChild(selector = null) {\r\n    return this.object((elems, elem) => {\r\n      const { value: found } = new Elem(elem)\r\n        .children()\r\n        .find((elem) => new Elem(elem).is(selector)) || {};\r\n\r\n      elems.add(found);\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#focus\r\n   * @returns {Elem} Returns this.\r\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLElement/focus\r\n   * @description Synonym for\r\n   * [HTMLElement#focus]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/focus}.\r\n   */\r\n  focus() {\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#getRule\r\n   * @public\r\n   * @param {String} name - Name of the rule.\r\n   * @returns {{ selector: (String|void), rules: Object }} Set of the css rules.\r\n   * @description Method for getting set of the rules under the name.\r\n   * Note: style element should be inside the document.\r\n   *\r\n   * @example\r\n   * style.addRule('img-size', 'img.square', {\r\n   *   width: '40px',\r\n   *   height: '40px'\r\n   * });\r\n   * style.getRule('img-size');\r\n   * // {\r\n   * //   selector: 'img.square',\r\n   * //   rules: {\r\n   * //     width: '40px',\r\n   * //     height: '40px'\r\n   * //   }\r\n   * // }\r\n   */\r\n  getRule(name) {\r\n    let found = {\r\n      selector: undefined,\r\n      rules: {}\r\n    };\r\n\r\n    this.some((elem) => {\r\n      if (getName(elem) === 'style') {\r\n        const { value: rule } = new Arr(elem.sheet.cssRules).find((rule) => rule.dwayneData && rule.dwayneData.name === name) || {};\r\n\r\n        if (rule) {\r\n          found = {\r\n            selector: rule.selectorText,\r\n            rules: new Elem(rule).css().$\r\n          };\r\n\r\n          return true;\r\n        }\r\n      }\r\n    });\r\n\r\n    return found;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#hasAttr\r\n   * @public\r\n   * @param {String} attr - Name of the attribute.\r\n   * @returns {Boolean} If the first element in the set has the attribute.\r\n   * @description Method that returns if the first element in the set has the attribute or not.\r\n   *\r\n   * @example\r\n   * elem.attr('attr', 'value').hasAttr('attr'); // true\r\n   * elem.removeAttr('attr').hasAttr('attr');    // false\r\n   */\r\n  hasAttr(attr) {\r\n    const elem = getElem(this);\r\n    const ns = attrNSSwitcher(attr, [new Elem(elem)]);\r\n\r\n    return isNull(ns)\r\n      ? elem.hasAttribute(attr)\r\n      : elem.hasAttributeNS(ns, attr);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#hasClass\r\n   * @public\r\n   * @param {String} cls - Name of the class.\r\n   * @returns {Boolean} If the first element in the set has the class.\r\n   * @description Method that returns if the first element in the set has the class or not.\r\n   *\r\n   * @example\r\n   * elem.addClass('cls').hasClass('cls');    // true\r\n   * elem.removeClass('cls').hasClass('cls'); // false\r\n   */\r\n  hasClass(cls) {\r\n    return getElem(this).classList.contains(cls);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#height\r\n   * @public\r\n   * @param {*|ElemValueCallback} [height] - Height to set.\r\n   * @returns {Elem|String} If no arguments passed height of the first element in the set returned.\r\n   * Otherwise all elements heights in the set are set to the height argument.\r\n   * @description Gets or sets height.\r\n   *\r\n   * @example\r\n   * elem.height(123);\r\n   * elem.height(); // 123\r\n   */\r\n  height(height) {\r\n    return this.prop.apply(this, new Arr(arguments).unshift('height').$);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#hide\r\n   * @public\r\n   * @returns {Elem} Returns this.\r\n   * @description Hides all elements in the set.\r\n   *\r\n   * @example\r\n   * elem.hide();\r\n   */\r\n  hide() {\r\n    return this.forEach((elem) => {\r\n      elem = new Elem(elem);\r\n\r\n      const currentDisplay = elem.css('display');\r\n\r\n      if (currentDisplay.indexOf('none')) {\r\n        elem.prop('dwayneData').previousDisplay = currentDisplay;\r\n      }\r\n\r\n      elem.css('display', 'none !important');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#html\r\n   * @public\r\n   * @param {String|ElemValueCallback|*} [html] - HTML to write instead of current HTML.\r\n   * @returns {Elem|String} If no arguments passed HTML of the first element in the set returned.\r\n   * Otherwise all elements HTML in the set are set to the html argument.\r\n   * @description Gets or sets HTML.\r\n   *\r\n   * @example\r\n   * elem.html('<div>1</div>');\r\n   * elem.html(); // '<div>1</div>'\r\n   */\r\n  html(html) {\r\n    if (!arguments.length) {\r\n      return getElem(this).innerHTML;\r\n    }\r\n\r\n    return this.forEach((elem, index) => {\r\n      if (isElement(elem)) {\r\n        elem.innerHTML = isFunction(html) ? html(elem.innerHTML, elem, index) : html;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#id\r\n   * @public\r\n   * @param {String|*} [id] - Id to set.\r\n   * @returns {Elem|String} If no arguments passed id of the first element in the set returned.\r\n   * Otherwise all elements ids in the set are set to the id argument.\r\n   * @description Gets id or sets ids.\r\n   *\r\n   * @example\r\n   * elem.id('unique');\r\n   * elem.id(); // 'unique'\r\n   */\r\n  id(id) {\r\n    if (!arguments.length) {\r\n      return getElem(this).id;\r\n    }\r\n\r\n    return this.forEach((elem) => {\r\n      if (isElement(elem)) {\r\n        elem.id = id;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @member {Number} Elem#innerHeight\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description Getter for finding how much height content of the first element can be.\r\n   *\r\n   * @example\r\n   * elem.css({\r\n   *   boxSizing: 'border-box',\r\n   *   height: '200px',\r\n   *   paddingTop: '2px',\r\n   *   paddingBottom: '3px',\r\n   *   borderTop: '1px solid black',\r\n   *   borderBottom: '4px solid black'\r\n   * }).innerHeight; // 190\r\n   * elem\r\n   *   .css('box-sizing', 'content-box')\r\n   *   .innerHeight; // 200\r\n   * elem\r\n   *   .css('box-sizing', 'padding-box')\r\n   *   .innerHeight; // 195\r\n   */\r\n  get innerHeight() {\r\n    const elem = this.$[0];\r\n\r\n    if (isWindow(elem)) {\r\n      return elem.innerHeight;\r\n    }\r\n\r\n    const {\r\n      borderTopWidth,\r\n      borderBottomWidth,\r\n      boxSizing,\r\n      height,\r\n      paddingTop,\r\n      paddingBottom\r\n    } = this.calcCSS();\r\n    const borders = px(borderTopWidth) + px(borderBottomWidth);\r\n    const paddings = px(paddingTop) + px(paddingBottom);\r\n\r\n    return px(height) - innerSwitcher(boxSizing, [paddings, borders]);\r\n  }\r\n\r\n  /**\r\n   * @member {Number} Elem#innerWidth\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description Getter for finding how much width content of the first element can be.\r\n   *\r\n   * @example\r\n   * elem.css({\r\n   *   boxSizing: 'border-box',\r\n   *   width: '200px',\r\n   *   paddingLeft: '2px',\r\n   *   paddingRight: '3px',\r\n   *   borderLeft: '1px solid black',\r\n   *   borderRight: '4px solid black'\r\n   * }).innerWidth; // 190\r\n   * elem\r\n   *   .css('box-sizing', 'content-box')\r\n   *   .innerWidth; // 200\r\n   * elem\r\n   *   .css('box-sizing', 'padding-box')\r\n   *   .innerWidth; // 195\r\n   */\r\n  get innerWidth() {\r\n    const elem = this.$[0];\r\n\r\n    if (isWindow(elem)) {\r\n      return elem.innerWidth;\r\n    }\r\n\r\n    const {\r\n      borderLeftWidth,\r\n      borderRightWidth,\r\n      boxSizing,\r\n      paddingLeft,\r\n      paddingRight,\r\n      width\r\n    } = this.calcCSS();\r\n    const borders = px(borderLeftWidth) + px(borderRightWidth);\r\n    const paddings = px(paddingLeft) + px(paddingRight);\r\n\r\n    return px(width) - innerSwitcher(boxSizing, [paddings, borders]);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#insertAfter\r\n   * @public\r\n   * @param {String|Elem|Element} element - Element to insert this element after or a selector of it.\r\n   * @returns {Elem} Returns this.\r\n   * @description Puts the elements from the set after the element specified by the argument.\r\n   * The elements remain in the same order.\r\n   *\r\n   * @example\r\n   * elem.insertAfter(elem2);\r\n   * elem.insertAfter(document.getElementById('id'));\r\n   * elem.insertAfter('#id div.c1');\r\n   */\r\n  insertAfter(element) {\r\n    element = toFind(element).first();\r\n\r\n    let parent = element.parent();\r\n\r\n    if (!parent.length) {\r\n      return this;\r\n    }\r\n\r\n    element = element.next().$[0];\r\n    parent = parent.$[0];\r\n\r\n    return this.forEach((elem) => {\r\n      if (element) {\r\n        parent.insertBefore(elem, element);\r\n      } else {\r\n        parent.appendChild(elem);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#insertBefore\r\n   * @public\r\n   * @param {String|Elem|Element} element - Element to insert this element before or a selector of it.\r\n   * @returns {Elem} Returns this.\r\n   * @description Puts the elements from the set before the element specified by the argument.\r\n   * The elements remain in the same order.\r\n   *\r\n   * @example\r\n   * elem.insertBefore(elem2);\r\n   * elem.insertBefore(document.getElementById('id'));\r\n   * elem.insertBefore('#id div.c1');\r\n   */\r\n  insertBefore(element) {\r\n    element = toFind(element).first();\r\n\r\n    let parent = element.parent();\r\n\r\n    if (!parent.length) {\r\n      return this;\r\n    }\r\n\r\n    element = element.$[0];\r\n    parent = parent.$[0];\r\n\r\n    return this.forEach((elem) => {\r\n      parent.insertBefore(elem, element);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#into\r\n   * @public\r\n   * @param {String|Elem|Element} element - Element to put this elements into or a selector of it.\r\n   * @param {Boolean} end - If the elements should be inserted to the end. If false they are inserted to the start.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method is similar to\r\n   * [Node#appendChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/appendChild}.\r\n   *\r\n   * @example\r\n   * elem.into(elem2);\r\n   * elem.into(document.getElementById('id'));\r\n   * elem.into('#id div.c1');\r\n   */\r\n  into(element, end = true) {\r\n    element = toFind(element).$[0];\r\n\r\n    if (\r\n      !element ||\r\n      isWindow(element) ||\r\n      isHTMLDocument(element) ||\r\n      isCommentOrText(element)\r\n    ) {\r\n      return this;\r\n    }\r\n\r\n    if (!end && element.firstChild) {\r\n      return this\r\n        .slice()\r\n        .reverse()\r\n        .forEach((elem) => {\r\n          element.insertBefore(elem, element.firstChild);\r\n        });\r\n    }\r\n\r\n    return this.forEach((elem) => {\r\n      element.appendChild(elem);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#is\r\n   * @public\r\n   * @param {String} selector\r\n   * @returns {Boolean} If the first element in the set matches the selector.\r\n   * If the selector is undefined or null always returns true. If it's not for not elements\r\n   * entries returns false.\r\n   * @description Synonym for\r\n   * [Element#matches]{@link https://developer.mozilla.org/en/docs/Web/API/Element/matches}.\r\n   *\r\n   * @example\r\n   * elem.addClass('cls');\r\n   * elem.is('.cls');         // true\r\n   *\r\n   * elem.removeClass('cls');\r\n   * elem.is('.cls');         // false\r\n   */\r\n  is(selector) {\r\n    if (isNull(selector)) {\r\n      return true;\r\n    }\r\n\r\n    const elem = getElem(this);\r\n    const matches = (\r\n      elem.matches ||\r\n      elem.matchesSelector ||\r\n      elem.webkitMatchesSelector ||\r\n      elem.mozMatchesSelector ||\r\n      elem.msMatchesSelector ||\r\n      elem.oMatchesSelector\r\n    );\r\n\r\n    if (!isElement(this.$[0])) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      return matches.call(elem, selector);\r\n    } catch (err) {\r\n      console.error(`Selector '${ selector }' is not a valid selector (Elem#is)`);\r\n\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method Elem#isBroken\r\n   * @public\r\n   * @returns {Boolean} If the first image in the set is broken.\r\n   * @description Returns if the first element in the set is broken. Not image and not loaded image is considered proper.\r\n   *\r\n   * @example\r\n   * const img = elem.img().on({\r\n   *   'load': onload,\r\n   *   'error': onload\r\n   * });\r\n   *\r\n   * onload = () => {\r\n   *   console.log(img.isBroken()); // true\r\n   * };\r\n   *\r\n   * img.ref('/some/non-existent/site/not-found.png');\r\n   */\r\n  isBroken() {\r\n    let isBroken = false;\r\n\r\n    this.some((elem) => {\r\n      if (getName(elem) === 'img') {\r\n        isBroken = !!(elem.complete && (!elem.naturalWidth || !elem.naturalHeight));\r\n\r\n        return true;\r\n      }\r\n    });\r\n\r\n    return isBroken;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#isWithinDocument\r\n   * @public\r\n   * @returns {Boolean} Returns if the first element in the set is within the document or not.\r\n   * @description Returns if the first element in the set is within the document or not.\r\n   *\r\n   * @example\r\n   * new Elem(document.body).isWithinDocument();  // true\r\n   * new Elem(document).div().isWithinDocument(); // false\r\n   */\r\n  isWithinDocument() {\r\n    return this.first().closest('html').length !== 0;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#last\r\n   * @public\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Synonym for elem.elem(-1).\r\n   */\r\n  last() {\r\n    return this.elem(-1);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#lastChild\r\n   * @public\r\n   * @param {String} [selector = null] - If present, finds last child in every elem that matches the selector.\r\n   * If not, finds last child of each element in the set.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Method for finding last children of each element in the set.\r\n   *\r\n   * @example\r\n   * elem.last();       // finds last child of each element in the elem set\r\n   * elem.last('.foo'); // find last child that has 'foo' class of each element in the set\r\n   */\r\n  lastChild(selector = null) {\r\n    return this.object((elems, elem) => {\r\n      const { value: found } = new Elem(elem)\r\n        .children()\r\n        .reverse()\r\n        .find((elem) => new Elem(elem).is(selector)) || {};\r\n\r\n      elems.add(found);\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#load\r\n   * @public\r\n   * @returns {Promise.<{ proper: Elem, broken: Elem }>} Promise with broken and proper images.\r\n   * @description Loads each image in the set and puts it to the proper or broken array.\r\n   *\r\n   * @example\r\n   * images.load().then(({ broken }) => {\r\n   *   broken.filter('img').ref('/fallback.png');\r\n   * });\r\n   */\r\n  load() {\r\n    const images = {\r\n      proper: new Elem(),\r\n      broken: new Elem()\r\n    };\r\n\r\n    return Promise.all(\r\n      this\r\n        .filter((elem) => getName(elem) === 'img')\r\n        .map((elem) => {\r\n          const $elem = new Elem(elem);\r\n\r\n          if (elem.complete) {\r\n            images[$elem.isBroken() ? 'broken' : 'proper'].push(elem);\r\n\r\n            return;\r\n          }\r\n\r\n          return new Promise((resolve) => {\r\n            const removeListeners = $elem.on({\r\n              load() {\r\n                images.proper.add(elem);\r\n\r\n                removeListeners();\r\n                resolve();\r\n              },\r\n              error() {\r\n                images.broken.add(elem);\r\n\r\n                removeListeners();\r\n                resolve();\r\n              }\r\n            });\r\n          });\r\n        })\r\n        .$\r\n    ).then(() => images);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#moveAttr\r\n   * @public\r\n   * @param {String} attr - Attribute to move to the first element.\r\n   * @param {String} [value = ''] - Value to set for the attribute. If not set attribute of the previous element or '' used.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for moving an attribute from previous element to the next one (first element in this set).\r\n   *\r\n   * @example\r\n   * elem1.moveAttr('attr', 'value');     // attribute 'attr' set to 'value' on elem1\r\n   * elem2.moveAttr('attr');              // attribute 'attr' removed from elem1. set to 'value' on elem2\r\n   * elem3.moveAttr('attr', 'new value'); // attribute 'attr' removed from elem2. set to 'new value' on elem3\r\n   */\r\n  moveAttr(attr, value = '') {\r\n    const prev = attrs[attr];\r\n    const elem = this.elem();\r\n\r\n    if (prev && elem.length) {\r\n      if (arguments.length < 2) {\r\n        value = prev.attr(attr);\r\n      }\r\n\r\n      prev.removeAttr(attr);\r\n    }\r\n\r\n    if (elem.length) {\r\n      attrs[attr] = elem.attr(attr, value);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#moveClass\r\n   * @public\r\n   * @param {String} cls - Class to move to the first element.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for moving a class from previous element to the next one (first element in this set).\r\n   *\r\n   * @example\r\n   * elem1.moveClass('cls'); // class 'cls' added to elem1\r\n   * elem2.moveClass('cls'); // class 'cls' removed from elem1. added to elem1\r\n   */\r\n  moveClass(cls) {\r\n    const prev = classes[cls];\r\n    const elem = this.elem();\r\n\r\n    if (prev && elem.length) {\r\n      prev.removeClass(cls);\r\n    }\r\n\r\n    if (elem.length) {\r\n      classes[cls] = elem.addClass(cls);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @member {String} Elem#name\r\n   * @type {String}\r\n   * @public\r\n   * @readonly\r\n   * @description nodeName (lowercased) of the first element in the set.\r\n   *\r\n   * @example\r\n   * const elem1 = elem.create('div');\r\n   * elem1.name // 'div'\r\n   */\r\n  get name() {\r\n    return getName(this.$[0]);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#next\r\n   * @public\r\n   * @param {String} [selector = null] - If present, finds next element to every elem that matches the selector.\r\n   * If not, finds next element to each element in the set.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Method for finding next element to each element in the set.\r\n   *\r\n   * @example\r\n   * elem.next();       // finds next element to each element in the set\r\n   * elem.next('.foo'); // finds next element to each element that has 'foo' class\r\n   */\r\n  next(selector = null) {\r\n    return this.object((elems, elem) => {\r\n      /* eslint no-cond-assign: 0 */\r\n      while (elem = elem.nextSibling) {\r\n        if (new Elem(elem).is(selector)) {\r\n          return elems.add(elem);\r\n        }\r\n      }\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#off\r\n   * @public\r\n   * @param {...ElemEventString} events - Events to remove.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method that removes all the listeners from each element in the set specified by the events arguments.\r\n   *\r\n   * @example\r\n   * elem.off('click');\r\n   * elem.off('click, input');\r\n   * elem.off('click, input', 'focus');\r\n   */\r\n  off(...events) {\r\n    return this.forEach((elem) => {\r\n      const { listeners } = elem.dwayneData;\r\n\r\n      iterate(arguments, (event) => {\r\n        iterate(event.split(eventSeparator), (event) => {\r\n          (listeners[event] || new Super()).forEach(({ removeListener }) => removeListener());\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#on\r\n   * @public\r\n   * @param {ElemEventString|Object.<ElemEventString|ElemListener>} event - Either a {@link ElemEventString} string\r\n   * or an object with event keys (a key is also ElemEventString) and listeners values.\r\n   * @param {String} [selector = null] - Selector to filter event targets.\r\n   * @param {ElemListener} [listener] - If the first argument is a string it must be a listener function for\r\n   * specified event(s).\r\n   * @returns {ElemRemoveListeners} Function that takes optional event argument.\r\n   * @description Adds event listeners for all the elements in the set.\r\n   * For debugging: If you need to know what listeners are in work (and what selectors filter targets)\r\n   * you can look at the base property of the only dwayne listener that listens for the event\r\n   * and find all working listeners in listener.base.dwayneData.listeners[event].$.\r\n   *\r\n   * @example\r\n   * elem.on(\r\n   *   'change, input',\r\n   *   'input, select, textarea, datalist, keygen, output',\r\n   *   (e, elem, index) => console.log(elem.value)\r\n   * );\r\n   * elem.on(\r\n   *   'change, input',\r\n   *   (e, elem, index) => console.log(elem.value)\r\n   * );\r\n   * elem.on(\r\n   *   {\r\n   *     'change, input': (e, elem, index) => console.log(elem.value),\r\n   *     'blur': () => console.log('blur')\r\n   *   },\r\n   *   'input, select, textarea, datalist, keygen, output'\r\n   * );\r\n   *\r\n   * const removeListeners = elem.on({\r\n   *   'change, input': (e, elem, index) => console.log(elem.value),\r\n   *   'blur': () => console.log('blur')\r\n   * });\r\n   *\r\n   * removeListeners('click');\r\n   * removeListeners('blur, change');\r\n   * removeListeners('blur, change', 'input');\r\n   * removeListeners();\r\n   */\r\n  on(event, selector = null, listener) {\r\n    const allListeners = new Super({});\r\n\r\n    if (isFunction(selector)) {\r\n      listener = selector;\r\n      selector = null;\r\n    }\r\n\r\n    if (isString(event)) {\r\n      event = { [event]: listener };\r\n    }\r\n\r\n    event = new Super(event).object((listeners, listener, event) => {\r\n      iterate(event.split(eventSeparator), (event) => {\r\n        listeners[event] = listener;\r\n      });\r\n    });\r\n\r\n    this.forEach((elem) => {\r\n      if (!isElement(elem) && !isWindow(elem) && !isHTMLDocument(elem)) {\r\n        return;\r\n      }\r\n\r\n      const { listeners } = (windowsDwayneData.find(({ element }) => element === elem) || {}).value || elem.dwayneData;\r\n\r\n      event.forEach((listener, event) => {\r\n        const removeEventListeners = listeners[event] = listeners[event] || new Super({}).define('index', {\r\n          value: 0,\r\n          configurable: true,\r\n          writable: true\r\n        });\r\n        const index = removeEventListeners.prop('index');\r\n\r\n        if (!removeEventListeners.has('listener')) {\r\n          const newListener = (e) => {\r\n            removeEventListeners.forEach(({ selector, listener }) => {\r\n              if (new Elem(e.target).is(selector)) {\r\n                listener.call(elem, e, elem, index);\r\n              }\r\n            });\r\n          };\r\n\r\n          newListener.base = elem;\r\n\r\n          elem.addEventListener(event, newListener, false);\r\n          removeEventListeners.define('listener', {\r\n            value: newListener,\r\n            configurable: true,\r\n            writable: true\r\n          });\r\n        }\r\n\r\n        const removeListener = () => {\r\n          removeEventListeners.delete(index);\r\n\r\n          if (!removeEventListeners.count) {\r\n            elem.removeEventListener(event, removeEventListeners.prop('listener'), false);\r\n            removeEventListeners.delete('listener');\r\n          }\r\n        };\r\n\r\n        allListeners.prop(event, (allListeners.prop(event) || new Arr()).push(removeListener));\r\n\r\n        removeEventListeners.assign({\r\n          index: index + 1,\r\n          [index]: {\r\n            selector,\r\n            listener,\r\n            removeListener\r\n          }\r\n        });\r\n      });\r\n    });\r\n\r\n    return function removeEventListeners(event) {\r\n      if (arguments.length) {\r\n        iterate(arguments, (event) => {\r\n          iterate(event.split(eventSeparator), (event) => {\r\n            if (allListeners.has(event)) {\r\n              allListeners.prop(event).forEach((removeListener) => removeListener());\r\n              allListeners.delete(event);\r\n            }\r\n          });\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      allListeners.forEach((removeListeners) => {\r\n        removeListeners.forEach((removeListener) => removeListener());\r\n      });\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @member {Number} Elem#outerHeight\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description Getter for finding how much height the element actually is.\r\n   *\r\n   * @example\r\n   * elem.css({\r\n   *   boxSizing: 'border-box',\r\n   *   height: '200px',\r\n   *   paddingTop: '2px',\r\n   *   paddingBottom: '3px',\r\n   *   borderTop: '1px solid black',\r\n   *   borderBottom: '4px solid black'\r\n   *   marginTop: '0px',\r\n   *   marginBottom: '5px'\r\n   * }).outerHeight; // 205\r\n   * elem\r\n   *   .css('box-sizing', 'content-box')\r\n   *   .outerHeight; // 215\r\n   * elem\r\n   *   .css('box-sizing', 'padding-box')\r\n   *   .outerHeight; // 210\r\n   */\r\n  get outerHeight() {\r\n    const elem = this.$[0];\r\n\r\n    if (isWindow(elem)) {\r\n      return elem.outerHeight;\r\n    }\r\n\r\n    const {\r\n      borderTopWidth,\r\n      borderBottomWidth,\r\n      boxSizing,\r\n      height,\r\n      marginTop,\r\n      marginBottom,\r\n      paddingTop,\r\n      paddingBottom\r\n    } = this.calcCSS();\r\n    const borders = px(borderTopWidth) + px(borderBottomWidth);\r\n    const paddings = px(paddingTop) + px(paddingBottom);\r\n\r\n    return px(height) + px(marginTop) + px(marginBottom) + outerSwitcher(boxSizing, [borders, paddings]);\r\n  }\r\n\r\n  /**\r\n   * @member {Number} Elem#outerWidth\r\n   * @type {Number}\r\n   * @public\r\n   * @readonly\r\n   * @description Getter for finding how much width the element actually is.\r\n   *\r\n   * @example\r\n   * elem.css({\r\n   *   boxSizing: 'border-box',\r\n   *   width: '200px',\r\n   *   paddingLeft: '2px',\r\n   *   paddingRight: '3px',\r\n   *   borderLeft: '1px solid black',\r\n   *   borderRight: '4px solid black'\r\n   *   marginLeft: '0px',\r\n   *   marginRight: '5px'\r\n   * }).outerWidth; // 205\r\n   * elem\r\n   *   .css('box-sizing', 'content-box')\r\n   *   .outerWidth; // 215\r\n   * elem\r\n   *   .css('box-sizing', 'padding-box')\r\n   *   .outerWidth; // 210\r\n   */\r\n  get outerWidth() {\r\n    const elem = this.$[0];\r\n\r\n    if (isWindow(elem)) {\r\n      return elem.outerWidth;\r\n    }\r\n\r\n    const {\r\n      borderLeftWidth,\r\n      borderRightWidth,\r\n      boxSizing,\r\n      marginLeft,\r\n      marginRight,\r\n      paddingLeft,\r\n      paddingRight,\r\n      width\r\n    } = this.calcCSS();\r\n    const borders = px(borderLeftWidth) + px(borderRightWidth);\r\n    const paddings = px(paddingLeft) + px(paddingRight);\r\n\r\n    return px(width) + px(marginLeft) + px(marginRight) + outerSwitcher(boxSizing, [borders, paddings]);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#parent\r\n   * @public\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Method returns wrap of the set of the parent elements of each element in the set.\r\n   */\r\n  parent() {\r\n    return this.object((elems, elem) => elems.add(elem.parentNode), new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#parentTree\r\n   * @public\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Returns wrap of all parents of each element in the set.\r\n   *\r\n   * @example\r\n   * elem.parentTree(); // Elem\r\n   */\r\n  parentTree() {\r\n    return this.object((elems, elem) => {\r\n      while (elem = elem.parentNode) {\r\n        elems.add(elem);\r\n      }\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#prev\r\n   * @public\r\n   * @param {String} [selector = null] - If present, finds previous element to every elem that matches the selector.\r\n   * If not, finds previous element to each element in the set.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Method for finding previous element to each element in the set.\r\n   *\r\n   * @example\r\n   * elem.next();       // finds previous element to each element in the set\r\n   * elem.next('.foo'); // finds previous element to each element that has 'foo' class\r\n   */\r\n  prev(selector = null) {\r\n    return this.object((elems, elem) => {\r\n      /* eslint no-cond-assign: 0 */\r\n      while (elem = elem.previousSibling) {\r\n        if (new Elem(elem).is(selector)) {\r\n          return elems.add(elem);\r\n        }\r\n      }\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#prop\r\n   * @public\r\n   * @param {String|Object.<String, ElemValueCallback|*>} property - Either a string of a property or an assigned object.\r\n   * @param {ElemValueCallback|*} [value] - If a property parameter is a string\r\n   * this has to be an assigned value if it's present.\r\n   * @returns {Elem|*} Returns this if it's setter or a value if getter.\r\n   * @description Method that is either a property getter for the first element in the set\r\n   * or a setter for every element in the set.\r\n   *\r\n   * @example\r\n   * elem.prop('draggable', false);\r\n   * elem.prop('draggable'); // false\r\n   */\r\n  prop(property, value) {\r\n    if (arguments.length <= 1 && isString(property)) {\r\n      return this.$[0] ? this.$[0][property] : undefined;\r\n    }\r\n\r\n    if (arguments.length >= 2) {\r\n      property = { [property]: value };\r\n    }\r\n\r\n    return this.forEach((elem, index) => {\r\n      iterate(property, (value, prop) => {\r\n        elem[prop] = isFunction(value) ? value(elem[prop], elem, index) : value;\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#ref\r\n   * @public\r\n   * @param {String|ElemValueCallback} [link] - If it's present link to a resource.\r\n   * @returns {Elem|String} If the link argument isn't present it's a getter of the 'src' attribute\r\n   * for the one of following elements: img, script, iframe, audio, video; of the 'action' attribute\r\n   * for a form element and of the 'href' attribute for the rest. If it's present it's a setter\r\n   * of the same attribute for all the element in the set.\r\n   * @description Method for getting resources links and setting them.\r\n   *\r\n   * @example\r\n   * elem.ref('/some/cool/image.png');\r\n   * elem.ref(); // '/some/cool/image.png'\r\n   */\r\n  ref(link) {\r\n    if (!arguments.length) {\r\n      return this.attr(refSwitcher(this.name));\r\n    }\r\n\r\n    return this.forEach((elem) => {\r\n      elem = new Elem(elem);\r\n\r\n      elem.attr(refSwitcher(elem.name), link);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#remove\r\n   * @public\r\n   * @returns {Elem} Returns this.\r\n   * @description Removes all the elements from the set from the document.\r\n   * Note: it doesn't remove them from the set so watch out for the memory leaks.\r\n   *\r\n   * @example\r\n   * elem.remove();\r\n   */\r\n  remove() {\r\n    return this.forEach((elem) => {\r\n      const parent = elem.parentNode;\r\n\r\n      if (parent) {\r\n        parent.removeChild(elem);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#removeAttr\r\n   * @public\r\n   * @param {...String} attributes - Attributes to remove.\r\n   * @returns {Elem} Returns this.\r\n   * @description Removes all the attributes from arguments from all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.removeAttr('foo', 'bar', 'baz');\r\n   */\r\n  removeAttr(...attributes) {\r\n    return this.forEach((elem) => {\r\n      if (!isElement(elem)) {\r\n        return;\r\n      }\r\n\r\n      iterate(arguments, (attr) => {\r\n        const ns = attrNSSwitcher(attr, [new Elem(elem)]);\r\n\r\n        if (isNull(ns)) {\r\n          elem.removeAttribute(attr);\r\n        } else {\r\n          elem.removeAttributeNS(ns, attr);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#removeClass\r\n   * @public\r\n   * @param {...String} classes - Classes to remove.\r\n   * @returns {Elem} Returns this.\r\n   * @description Removes all the classes from arguments from all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.removeClass('foo', 'bar', 'baz');\r\n   */\r\n  removeClass(...classes) {\r\n    return this.forEach((elem) => {\r\n      const list = elem.classList;\r\n\r\n      iterate(isElement(elem) && arguments, (cls) => list.remove(cls));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#removeCSS\r\n   * @public\r\n   * @param {...String} props - CSS properties to remove.\r\n   * @returns {Elem} Returns this.\r\n   * @description Removes all the CSS properties from arguments from all the elements in the set.\r\n   *\r\n   * @example\r\n   * elem.removeCSS('display', 'position', 'margin');\r\n   */\r\n  removeCSS(...props) {\r\n    return this.forEach((elem) => {\r\n      if (!isElement(elem)) {\r\n        return;\r\n      }\r\n\r\n      iterate(arguments, (css) => {\r\n        elem.style.removeProperty(css);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#replace\r\n   * @public\r\n   * @param {String|Elem|Element} element - Element to replace the first element in the set\r\n   * with a set of elements specified by the argument (Element, set of elements or a selector of them).\r\n   * @returns {Elem} Returns this.\r\n   * @description Method is similar to\r\n   * [Node#replaceChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/replaceChild}.\r\n   *\r\n   * @example\r\n   * elem.replace(elem2);\r\n   * elem.replace(document.getElementById('id'));\r\n   * elem.replace('#id div.c1');\r\n   */\r\n  replace(element) {\r\n    element = toFind(element);\r\n\r\n    const parent = this.first().parent();\r\n\r\n    if (!parent.length) {\r\n      return this;\r\n    }\r\n\r\n    let elem = parent;\r\n    let method = 'into';\r\n    const next = this.next().first().$[0];\r\n    const prev = this.prev().first().$[0];\r\n\r\n    if (next) {\r\n      elem = next;\r\n      method = 'insertBefore';\r\n    } else if (prev) {\r\n      elem = prev;\r\n      method = 'insertAfter';\r\n    }\r\n\r\n    this.first().remove();\r\n\r\n    element[method](elem);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#setOf\r\n   * @public\r\n   * @param {String} type - HTML element type.\r\n   * @param {Number|Object|Array.<*>} iterator - A number (how many elements to create inside each element),\r\n   * an object or an array to iterate over.\r\n   * @param {ElemSetOfCallback} callback\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Function for creating set of elements inside each element in the set based on an array or an object.\r\n   *\r\n   * @example\r\n   * table.setOf('tr', [[1, 2], [3, 4], [5, 6]], (row, array) => {\r\n   *   D(row).setOf('td', array, (col, number) => {\r\n   *     D(col).text(number);\r\n   *   });\r\n   * });\r\n   */\r\n  setOf(type, iterator, callback) {\r\n    validate({ 2: callback }, { 2: ['function'] }, 'Elem#setOf');\r\n\r\n    iterator = new Super(iterator).$;\r\n\r\n    if (isNumber(iterator)) {\r\n      try {\r\n        validate({ 1: iterator }, { 1: ['intLike', '>=0'] }, 'Elem#setOf');\r\n      } catch (e) {\r\n        throw new Error('2nd argument must be either or non-negative integer, or object! (at Elem#setOf)');\r\n      }\r\n\r\n      iterator = array(iterator).$;\r\n    }\r\n\r\n    return this.object((elems, elem, index) => {\r\n      iterate(iterator, (value, key) => {\r\n        const created = new Elem(elem).create(type);\r\n\r\n        callback(created.$[0], value, key, iterator, elem, index);\r\n\r\n        elems.add(created);\r\n      });\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#show\r\n   * @public\r\n   * @returns {Elem} Returns this.\r\n   * @description Shows all elements in the set.\r\n   * If an element was hidden using {@link Elem#hide} previous display is set.\r\n   *\r\n   * @example\r\n   * elem.show();\r\n   */\r\n  show() {\r\n    return this.forEach((elem) => {\r\n      const { dwayneData } = elem;\r\n\r\n      elem = new Elem(elem);\r\n\r\n      if (elem.css('display').indexOf('none') === 0) {\r\n        elem.css('display', dwayneData.previousDisplay);\r\n      }\r\n\r\n      dwayneData.previousDisplay = '';\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#text\r\n   * @public\r\n   * @param {String|ElemValueCallback|*} [text] - Text to write instead of current text.\r\n   * @returns {Elem|String} If no arguments passed text of the first element in the set returned.\r\n   * Otherwise all elements texts in the set are set to the text argument.\r\n   * @description Gets or sets text.\r\n   *\r\n   * @example\r\n   * elem.text('123');\r\n   * elem.text(); // '123'\r\n   */\r\n  text(text) {\r\n    if (!arguments.length) {\r\n      return this.prop(textProperty);\r\n    }\r\n\r\n    return this.forEach((elem, index) => {\r\n      const txt = elem[textProperty];\r\n\r\n      new Elem(elem).prop(\r\n        textProperty,\r\n        isFunction(text)\r\n          ? text(txt, elem, index)\r\n          : text\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#toggleAttr\r\n   * @public\r\n   * @param {String} attr - Attribute to toggle.\r\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the attribute\r\n   * with the '' value and if falsey method removes the attribute. If not present method adds\r\n   * the attribute if it doesn't exist and removes if it does.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for toggling attributes.\r\n   *\r\n   * @example\r\n   * elem.toggleAttr('attr');\r\n   * elem.toggleAttr('attr', someCondition);\r\n   */\r\n  toggleAttr(attr, condition) {\r\n    return this.forEach((elem) => {\r\n      elem = new Elem(elem);\r\n\r\n      if (arguments.length < 2 ? !elem.hasAttr(attr) : condition) {\r\n        elem.attr(attr, '');\r\n      } else {\r\n        elem.removeAttr(attr);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method Elem#toggleAttr\r\n   * @public\r\n   * @param {String} cls - Class to toggle.\r\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the class\r\n   * and if falsey method removes the class. If not present method adds\r\n   * the class if it doesn't exist and removes if it does.\r\n   * @returns {Elem} Returns this.\r\n   * @description Method for toggling classes.\r\n   *\r\n   * @example\r\n   * elem.toggleClass('cls');\r\n   * elem.toggleClass('cls', someCondition);\r\n   */\r\n  toggleClass(cls, condition) {\r\n    return (arguments.length < 2 ? !this.hasClass(cls) : condition)\r\n      ? this.addClass(cls)\r\n      : this.removeClass(cls);\r\n  }\r\n\r\n  get toStringTag() {\r\n    return toStringTag(this.$$);\r\n  }\r\n\r\n  /**\r\n   * @method Elem#up\r\n   * @public\r\n   * @param {Integer} [level = 1] - What level up along the tree should be the parent.\r\n   * @returns {Elem} New instance of Elem.\r\n   * @description Creates a collection of parents of level &lt;level&gt;.\r\n   *\r\n   * @example\r\n   * elem.up();\r\n   * elem.up(2);\r\n   */\r\n  up(level = 1) {\r\n    validate([level], [['intLike', '>=0']], 'Elem#up');\r\n\r\n    level = Number(level);\r\n\r\n    return this.object((elems, elem) => {\r\n      let n = level;\r\n\r\n      while (n-- && elem) {\r\n        elem = elem.parentNode;\r\n      }\r\n\r\n      elems.add(elem);\r\n    }, new Elem());\r\n  }\r\n\r\n  /**\r\n   * @method Elem#validate\r\n   * @public\r\n   * @param {ValidateCallback} [validator] - If present, function that validates inputs.\r\n   * @returns {Elem|Object.<String, Error|*>|null}\r\n   * If a callback argument provided returns this. If no arguments provided returns either an object\r\n   * with input names keys and errors values or null if no errors found.\r\n   * @description If a callback argument provided adds it to the element validators list.\r\n   * If no arguments provided validates every input element in the set with its own functions.\r\n   * If an element is a form it validates all input elements inside it. After the validation\r\n   * fires 'validate' event with 'valid' and 'error' (if form it's errors) properties.\r\n   *\r\n   * @example\r\n   * form.on('input change', 'input', (value, input) => {\r\n   *   input = D(input);\r\n   *\r\n   *   if (Number(value) % 3) {\r\n   *     input.addClass('invalid');\r\n   *\r\n   *     throw new Error('The value should be divided by 3!');\r\n   *   }\r\n   *\r\n   *   input.removeClass('invalid');\r\n   * });\r\n   */\r\n  validate(validator) {\r\n    validate([validator], ['function||!'], 'Elem#validate');\r\n\r\n    if (validator) {\r\n      return this.forEach(({ dwayneData }) => {\r\n        dwayneData.validators.push(validator);\r\n      });\r\n    }\r\n\r\n    const errors = new Super({ errors: null });\r\n\r\n    this\r\n      .filter(`${ inputElements }, form`)\r\n      .forEach((elem, index) => {\r\n        if (getName(elem) === 'form') {\r\n          let formErrors = { errors: null };\r\n          const form = new Elem(elem);\r\n          const inputs = form.find(inputElements);\r\n\r\n          inputs.forEach((input, index) => {\r\n            validatorWrap(input, index, formErrors);\r\n          });\r\n\r\n          errors.deepAssign(formErrors);\r\n\r\n          formErrors = formErrors.errors;\r\n\r\n          form.dispatch('validate', {}, {\r\n            valid: !formErrors,\r\n            errors: formErrors\r\n          });\r\n\r\n          return inputs.forEach((input) => {\r\n            const inputError = (formErrors || {})[input.name];\r\n\r\n            new Elem(input).dispatch('validate', {}, {\r\n              valid: !inputError,\r\n              error: inputError || null\r\n            });\r\n          });\r\n        }\r\n\r\n        let inputError = { errors: null };\r\n\r\n        validatorWrap(elem, index, inputError);\r\n        errors.deepAssign(inputError);\r\n\r\n        inputError = (inputError.errors || {})[elem.name];\r\n\r\n        new Elem(elem).dispatch('validate', {}, {\r\n          valid: !inputError,\r\n          error: inputError || null\r\n        });\r\n      });\r\n\r\n    function validatorWrap(input, index, errors) {\r\n      try {\r\n        if (input.validity && !input.validity.valid) {\r\n          throw new Error(input.validationMessage);\r\n        }\r\n\r\n        input.dwayneData.validators.forEach((validator) => {\r\n          validator(input.value, input, index);\r\n        });\r\n      } catch (err) {\r\n        (errors.errors = errors.errors || {})[input.name] = err;\r\n      }\r\n    }\r\n\r\n    if (errors.every((error) => isNull(error))) {\r\n      return null;\r\n    }\r\n\r\n    return errors.$.errors;\r\n  }\r\n\r\n  /**\r\n   * @method Elem#width\r\n   * @public\r\n   * @param {*|ElemValueCallback} [width] - Width to set.\r\n   * @returns {Elem|String} If no arguments passed width of the first element in the set returned.\r\n   * Otherwise all elements widths in the set are set to the width argument.\r\n   * @description Gets or sets width.\r\n   *\r\n   * @example\r\n   * elem.width(123);\r\n   * elem.width(); // 123\r\n   */\r\n  width(width) {\r\n    return this.prop.apply(this, new Arr(arguments).unshift('width').$);\r\n  }\r\n}\r\n\r\ndefineProperties(Elem.prototype, {\r\n  [Symbol.toStringTag]: 'Elem'\r\n});\r\n\r\n/**\r\n * @const {Elem} win\r\n * @type {Elem}\r\n * @public\r\n * @description Elem instance of window.\r\n */\r\nconst win = new Elem(global);\r\n\r\n/**\r\n * @const {Elem} doc\r\n * @type {Elem}\r\n * @public\r\n * @description Elem instance of document.\r\n */\r\nconst doc = new Elem(nativeDocument);\r\n\r\n/**\r\n * @const {Elem} html\r\n * @type {Elem}\r\n * @public\r\n * @description Elem instance of document.documentElement.\r\n */\r\nconst html = new Elem(nativeDocument.documentElement);\r\n\r\n/**\r\n * @const {Elem} body\r\n * @type {Elem}\r\n * @public\r\n * @description Elem instance of document.body.\r\n */\r\nconst body = new Elem(nativeDocument.body);\r\n\r\n/**\r\n * @const {Elem} head\r\n * @type {Elem}\r\n * @public\r\n * @description Elem instance of document.head.\r\n */\r\nconst head = new Elem(nativeDocument.head);\r\n\r\nconst elements = new Arr(htmlElements).concat(svgElements).$;\r\nconst props = new Arr(elements).map((type) => new Str(type).toCamelCase().$).$;\r\n\r\ndynamicDefineProperties(Elem.prototype, props, (elem, i) => function () {\r\n  return this.create.apply(this, new Arr(arguments).unshift(elements[i]).$);\r\n});\r\n\r\ndynamicDefineProperties(Elem.prototype, canvasGetMethods, (method) => function () {\r\n  const ctx = this.ctx();\r\n\r\n  if (ctx) {\r\n    return ctx[method].apply(ctx, arguments);\r\n  }\r\n});\r\n\r\ndynamicDefineProperties(Elem.prototype, canvasRestMethods, (method) => function () {\r\n  const ctx = this.ctx();\r\n\r\n  if (ctx) {\r\n    ctx[method].apply(ctx, arguments);\r\n  }\r\n\r\n  return this;\r\n});\r\n\r\n/**\r\n * @function toFind\r\n * @private\r\n * @param {Element|Elem|String} elem - Element, selector of Elements or Elem.\r\n * @returns {Elem} Instance of Elem.\r\n */\r\nfunction toFind(elem) {\r\n  if (isElem(elem)) {\r\n    return elem;\r\n  }\r\n\r\n  if (isString(elem)) {\r\n    elem = find(elem);\r\n  }\r\n\r\n  return new Elem(elem);\r\n}\r\n\r\n/**\r\n * @function isElem\r\n * @private\r\n * @param {*} value - Value to check if it's Elem.\r\n * @returns {Boolean} If the value is Elem.\r\n * @description Returns if the value is Elem or not.\r\n */\r\nfunction isElem(value) {\r\n  return value instanceof Elem;\r\n}\r\n\r\n/**\r\n * @function isWindow\r\n * @private\r\n * @param {*} value - Value to check if it's Window.\r\n * @returns {Boolean} If the value is Window.\r\n * @description Returns if the value is Window or not.\r\n */\r\nfunction isWindow(value) {\r\n  return toStringTag(value) === 'Window';\r\n}\r\n\r\n/**\r\n * @function isHTMLDocument\r\n * @private\r\n * @param {*} value - Value to check if it's HTMLDocument.\r\n * @returns {Boolean} If the value is HTMLDocument.\r\n * @description Returns if the value is HTMLDocument or not.\r\n */\r\nfunction isHTMLDocument(value) {\r\n  return toStringTag(value) === 'HTMLDocument';\r\n}\r\n\r\n/**\r\n * @function isDocumentFragment\r\n * @private\r\n * @param {*} value - Value to check if it's a DocumentFragment.\r\n * @returns {Boolean} If the value is a DocumentFragment.\r\n * @description Returns if the value is a DocumentFragment or not.\r\n */\r\nfunction isDocumentFragment(value) {\r\n  return toStringTag(value) === 'DocumentFragment';\r\n}\r\n\r\n/**\r\n * @function isStyleRule\r\n * @private\r\n * @param {*} value - Value to check if it's a style rule.\r\n * @returns {Boolean} If the value is a style rule.\r\n * @description Returns if the value is a style rule or not.\r\n */\r\nfunction isStyleRule(value) {\r\n  return toStringTag(value) === 'CSSStyleRule';\r\n}\r\n\r\n/**\r\n * @function\r\n * @private\r\n * @param {*} value - Value to check if it's Comment or Text.\r\n * @returns {Boolean} If the value is HTMLDocument.\r\n * @description Returns if the value is Comment or Text or not.\r\n */\r\nfunction isCommentOrText(value) {\r\n  const tag = toStringTag(value);\r\n\r\n  return tag === 'Comment' || tag === 'Text';\r\n}\r\n\r\n/**\r\n * @function getElem\r\n * @private\r\n * @param {Elem} elem - Element to check.\r\n * @returns {Element} The argument or a fallback if needed.\r\n */\r\nfunction getElem(elem) {\r\n  return isElement(elem.$[0]) ? elem.$[0] : emptyDiv;\r\n}\r\n\r\n/**\r\n * @function getName\r\n * @private\r\n * @param {Element} [elem] - Element which name is needed to know.\r\n * @returns {String} Element name.\r\n */\r\nfunction getName(elem) {\r\n  return (elem && elem.nodeName && elem.nodeName.toLowerCase()) || '';\r\n}\r\n\r\n/**\r\n * @function addDwayneData\r\n * @private\r\n * @param {Element} elem - Element to add dwayneData to.\r\n * @returns {void}\r\n */\r\nfunction addDwayneData(elem) {\r\n  if (!{}.hasOwnProperty.call(elem, 'dwayneData') && !isWindow(elem)) {\r\n    /**\r\n     * @member Element#dwayneData\r\n     * @type {Object}\r\n     * @protected\r\n     * @property {String} previousDisplay - Parameter used for hiding/showing elements.\r\n     * @property {Object.<String, Super>} removeListeners - Parameter used for remove event listeners.\r\n     * @property {CanvasRenderingContext2D} [ctx] - Canvas rendering context.\r\n     * @property {Arr} validators - Validators assigned to element.\r\n     * @description D data.\r\n     */\r\n    Object.defineProperty(elem, 'dwayneData', {\r\n      value: {\r\n        previousDisplay: '',\r\n        listeners: {},\r\n        ctx: getName(elem) === 'canvas' && elem.getContext('2d'),\r\n        validators: new Arr([])\r\n      }\r\n    });\r\n  } else if (isWindow(elem) && !windowsDwayneData.some(({ element }) => element === elem)) {\r\n    windowsDwayneData.push({\r\n      element: elem,\r\n      listeners: {}\r\n    });\r\n  }\r\n}\r\n\r\nconstructors[2].push({\r\n  check: (elem) => (\r\n    isElement(elem) ||\r\n    isWindow(elem) ||\r\n    isHTMLDocument(elem) ||\r\n    isCommentOrText(elem) ||\r\n    isDocumentFragment(elem) ||\r\n    /^(HTMLCollection|NodeList)$/.test(toStringTag(elem))\r\n  ),\r\n  cls: Elem\r\n});\r\n\r\n/**\r\n * @function find\r\n * @public\r\n * @param {String} selector - Selector to find.\r\n * @param {Element} [base = document] - Base to find in.\r\n * @returns {Elem} New instance of Elem.\r\n * @description Synonym for\r\n * [Document#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Document/querySelectorAll}.\r\n */\r\nfunction find(selector, base = nativeDocument) {\r\n  return new Elem(\r\n    isElement(base) || isHTMLDocument(base)\r\n      ? base.querySelectorAll(String(selector))\r\n      : []\r\n  );\r\n}\r\n\r\n/**\r\n * @function parseHTML\r\n * @public\r\n * @param {String} html - HTML to parse.\r\n * @param {Boolean} [collapseWhiteSpace = false] - If the whitespace should be\r\n * collapsed during the parsing.\r\n * @returns {Elem} New instance of Elem.\r\n * @description Parses HTML and returns a wrap of #document-fragment containing the contents.\r\n *\r\n * @example\r\n * parseHTML('<div>123</div>'); // Elem\r\n */\r\nfunction parseHTML(html, collapseWhiteSpace) {\r\n  const json = markupToJSON(html, collapseWhiteSpace);\r\n  const template = doc.template();\r\n  const elem = new Elem(template.$[0].content);\r\n\r\n  json.forEach(function forEachNode(node) {\r\n    const {\r\n      name,\r\n      attrs,\r\n      value,\r\n      parent,\r\n      children\r\n    } = node;\r\n\r\n    const parentNode = parent.elem || elem;\r\n    const element = parentNode.create(name);\r\n\r\n    node.elem = element;\r\n\r\n    if (value) {\r\n      element.text(value);\r\n    }\r\n\r\n    if (attrs) {\r\n      element.attr(attrs);\r\n    }\r\n\r\n    if (name === 'template') {\r\n      node.elem = new Elem(element.prop('content'));\r\n    }\r\n\r\n    if (children) {\r\n      children.forEach(forEachNode);\r\n    }\r\n  });\r\n\r\n  return new Elem(elem);\r\n}\r\n\r\n/**\r\n * @function px\r\n * @public\r\n * @param {String|Number} size - String containing pixels value or a number.\r\n * @returns {Number} Number of pixels.\r\n * @description Function for parsing pixel strings.\r\n *\r\n * @example\r\n * px('0px');  // 0\r\n * px('42px'); // 42\r\n */\r\nfunction px(size) {\r\n  return Number(String(size).replace(/px$/, ''));\r\n}\r\n\r\nexport { Elem, win, doc, html, body, head, find, parseHTML, px };\r\n","export function registerDBlock(Block) {\r\n  class DBlock extends Block {\r\n    static template = '<d-elements value=\"{elems}\" />';\r\n\r\n    elems = null;\r\n\r\n    afterConstruct() {\r\n      const { children } = this.$$.parent;\r\n      const { name } = this.args;\r\n      let found;\r\n\r\n      if (name) {\r\n        found = children.find(({ name: nodeName }) => nodeName === `d-block-${ name }`);\r\n\r\n        if (found && found.value.children.length) {\r\n          this.elems = found.value.children;\r\n        }\r\n      } else {\r\n        this.elems = children;\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-block',\r\n    value: DBlock\r\n  };\r\n}\r\n","import { Arr } from '../Arr';\r\nimport { Elem } from '../Elem';\r\nimport { Super } from '../Super';\r\nimport { assign } from '../helpers';\r\n\r\nexport function registerDEach(Block, createBlock) {\r\n  class DEach extends Block {\r\n    constructor(opts) {\r\n      super(opts);\r\n\r\n      const {\r\n        args: {\r\n          item: itemName = '$item',\r\n          index: indexName = '$index'\r\n        }\r\n      } = this;\r\n\r\n      assign(this.$$, {\r\n        uids: new Super({}),\r\n        items: new Arr([]),\r\n        UID: String(this.args.uid),\r\n        itemName,\r\n        indexName\r\n      });\r\n    }\r\n\r\n    afterRender() {\r\n      this.constructValues(this.args.set);\r\n      this.watchArgs('set', (set) => {\r\n        this.constructValues(set);\r\n      });\r\n    }\r\n\r\n    constructValues(set) {\r\n      const {\r\n        elems: {\r\n          start,\r\n          parent: parentElem\r\n        },\r\n        uids,\r\n        parent,\r\n        scope,\r\n        itemName,\r\n        indexName,\r\n        UID\r\n      } = this.$$;\r\n      const { children } = this;\r\n      const $uids = uids.$;\r\n      const newKeys = {};\r\n      const newUIDs = {};\r\n\r\n      new Super(set).forEach((item, index) => {\r\n        scope[itemName] = item;\r\n        scope[indexName] = index;\r\n\r\n        const uid = parent.$$.evaluate(String(UID), null, null, false, false, this);\r\n\r\n        newKeys[uid] = newKeys[uid] || {};\r\n        newKeys[uid][index] = true;\r\n        newUIDs[index] = uid;\r\n      });\r\n\r\n      scope[itemName] = null;\r\n      scope[indexName] = null;\r\n\r\n      uids.forEach((items, uid) => {\r\n        if (!newKeys[uid]) {\r\n          items.forEach((Item) => {\r\n            Item.remove();\r\n          });\r\n\r\n          return;\r\n        }\r\n\r\n        items.splice(Object.keys(newKeys[uid]).length).forEach((Item) => {\r\n          Item.remove();\r\n        });\r\n      });\r\n\r\n      let after = start;\r\n\r\n      new Super(set).forEach((item, index) => {\r\n        const uid = newUIDs[index];\r\n        let block;\r\n\r\n        if ($uids[uid] && $uids[uid].length) {\r\n          block = newKeys[uid][index] = uids.$[uid].shift();\r\n          block.$$.scope[indexName] = index;\r\n          block.$$.scope[itemName] = item;\r\n        } else {\r\n          block = newKeys[uid][index] = createBlock({\r\n            node: {\r\n              itemName,\r\n              indexName,\r\n              item,\r\n              index,\r\n              name: '#d-item',\r\n              block: parent,\r\n              children\r\n            },\r\n            after,\r\n            parent: parentElem,\r\n            parentBlock: this,\r\n            parentScope: parent\r\n          });\r\n        }\r\n\r\n        const {\r\n          start,\r\n          end\r\n        } = block.$$.elems;\r\n\r\n        if (start.prev().$[0] !== after.$[0]) {\r\n          const { content } = block.$$.elems;\r\n\r\n          new Elem([\r\n            start,\r\n            content,\r\n            end\r\n          ]).insertAfter(after);\r\n        }\r\n\r\n        after = end;\r\n      });\r\n\r\n      this.$$.uids = new Super(newKeys).map((items) => (\r\n        new Super(items).values()\r\n      ));\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-each',\r\n    value: DEach\r\n  };\r\n}\r\n","import { Arr } from '../Arr';\r\nimport { Elem } from '../Elem';\r\n\r\nexport function registerDElements(Block, createBlock) {\r\n  class DElements extends Block {\r\n    afterConstruct() {\r\n      this.watchArgs('value', (value) => {\r\n        const {\r\n          children,\r\n          mixins,\r\n          watchersToRemove,\r\n          elems: {\r\n            start,\r\n            content,\r\n            parent\r\n          }\r\n        } = this.$$;\r\n        let after = start;\r\n\r\n        children.forEach((child) => {\r\n          child.remove(true);\r\n        });\r\n        mixins.forEach((mixin) => {\r\n          mixin.remove(true);\r\n        });\r\n        content.remove();\r\n\r\n        this.$$.children = new Arr([]);\r\n        this.$$.mixins = new Arr([]);\r\n        this.$$.watchersToRemove = watchersToRemove.filter(({ watchers, watcher, forDElements }) => {\r\n          if (forDElements) {\r\n            return true;\r\n          }\r\n\r\n          const index = watchers.indexOf(watcher);\r\n\r\n          if (index !== -1) {\r\n            watchers.splice(index, 1);\r\n          }\r\n        });\r\n\r\n        const newContent = new Elem();\r\n\r\n        new Arr(value || []).forEach((child) => {\r\n          const block = createBlock({\r\n            node: child,\r\n            after,\r\n            parent,\r\n            parentBlock: this,\r\n            parentScope: this\r\n          });\r\n\r\n          if (block instanceof Block) {\r\n            const { elems } = block.$$;\r\n\r\n            after = elems.end;\r\n\r\n            newContent.add(elems.start, elems.content, elems.end);\r\n          } else {\r\n            after = block;\r\n\r\n            newContent.add(block);\r\n          }\r\n        });\r\n\r\n        this.$$.elems.content = newContent;\r\n      });\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-elements',\r\n    value: DElements\r\n  };\r\n}\r\n","export function registerDIf(Block) {\r\n  class DIf extends Block {\r\n    static template = '<d-elements value=\"{elems}\"/>';\r\n\r\n    index = Infinity;\r\n    elems = null;\r\n    values = this.children.map((child, i) => {\r\n      const {\r\n        name,\r\n        attrs,\r\n        children\r\n      } = child;\r\n      const cond = this.evaluateAndWatch(name === 'd-else' ? '{true}' : attrs.if || '{true}', (newValue) => {\r\n        if (!!newValue === this.values.$[i]) {\r\n          return;\r\n        }\r\n\r\n        this.values.$[i] = !!newValue;\r\n\r\n        if (i > this.index) {\r\n          return;\r\n        }\r\n\r\n        if (i < this.index) {\r\n          this.index = i;\r\n          this.elems = children;\r\n\r\n          return;\r\n        }\r\n\r\n        const found = this.values.find(Boolean);\r\n\r\n        if (found) {\r\n          this.index = found.key;\r\n          this.elems = this.children.$[found.key].children;\r\n        } else {\r\n          this.index = Infinity;\r\n          this.elems = null;\r\n        }\r\n      });\r\n\r\n      if (cond && this.index === Infinity) {\r\n        this.index = i;\r\n        this.elems = children;\r\n      }\r\n\r\n      return cond;\r\n    });\r\n  }\r\n\r\n  return {\r\n    name: 'd-if',\r\n    value: DIf\r\n  };\r\n}\r\n","export function registerDItem(Block) {\r\n  class DItem extends Block {\r\n    static template = '<d-elements value=\"{children}\"/>';\r\n  }\r\n\r\n  return {\r\n    name: '#d-item',\r\n    value: DItem\r\n  };\r\n}\r\n","import { Arr } from '../Arr';\r\nimport { Super } from '../Super';\r\n\r\nexport function registerDSwitch(Block) {\r\n  class DSwitch extends Block {\r\n    static template = '<d-elements value=\"{elems}\"/>';\r\n\r\n    index = Infinity;\r\n    elems = null;\r\n\r\n    constructor(opts) {\r\n      super(opts);\r\n\r\n      const {\r\n        args,\r\n        args: { value }\r\n      } = this;\r\n      let wasDefault;\r\n\r\n      this.values = this.children.object((values, child, i) => {\r\n        const {\r\n          name,\r\n          attrs,\r\n          children\r\n        } = child;\r\n\r\n        if (wasDefault) {\r\n          return;\r\n        }\r\n\r\n        if (name !== 'd-case' && name !== 'd-default') {\r\n          return;\r\n        }\r\n\r\n        if (name === 'd-default') {\r\n          wasDefault = true;\r\n        }\r\n\r\n        let val;\r\n\r\n        if (name === 'd-default') {\r\n          val = args.value;\r\n        } else {\r\n          val = this.evaluateAndWatch(attrs.if || '{undefined}', (newValue) => {\r\n            if (this.equals(this.values.$[i].value, newValue)) {\r\n              return;\r\n            }\r\n\r\n            this.values.$[i].value = newValue;\r\n\r\n            if (i > this.index) {\r\n              return;\r\n            }\r\n\r\n            if (i < this.index) {\r\n              this.index = i;\r\n              this.elems = children;\r\n\r\n              return;\r\n            }\r\n\r\n            const found = this.values.find(({ value }) => (\r\n              this.equals(value, args.value)\r\n            ));\r\n\r\n            if (found) {\r\n              this.index = found.key;\r\n              this.elems = found.value.children;\r\n            } else {\r\n              this.index = Infinity;\r\n              this.elems = null;\r\n            }\r\n          });\r\n        }\r\n\r\n        if (this.equals(val, value) && this.index === Infinity) {\r\n          this.index = i;\r\n          this.elems = children;\r\n        }\r\n\r\n        values.push({\r\n          name,\r\n          children,\r\n          value: val\r\n        });\r\n      }, new Arr([]));\r\n    }\r\n\r\n    afterConstruct() {\r\n      this.watchArgs('value', (newValue) => {\r\n        this.index = Infinity;\r\n        this.values.forEach(({ name, value, children }, i) => {\r\n          const val = name === 'd-default'\r\n            ? newValue\r\n            : value;\r\n\r\n          if (this.equals(val, newValue) && this.index === Infinity) {\r\n            this.index = i;\r\n            this.elems = children;\r\n          }\r\n        });\r\n\r\n        if (this.index === Infinity) {\r\n          this.elems = null;\r\n        }\r\n      });\r\n    }\r\n\r\n    equals(value1, value2) {\r\n      return new Super(value1).equals(value2);\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-switch',\r\n    value: DSwitch\r\n  };\r\n}\r\n","import { isNil } from '../helpers';\r\n\r\nexport function registerDText(Block) {\r\n  class DText extends Block {\r\n    static template = '<d-elements value=\"{[{ name: \\'#text\\', value: text }]}\"/>';\r\n\r\n    text = '';\r\n\r\n    afterConstruct() {\r\n      this.text = isNil(this.args.value) ? '' : this.args.value;\r\n\r\n      this.watchArgs('value', (newValue) => {\r\n        this.text = isNil(newValue) ? '' : newValue;\r\n      });\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-text',\r\n    value: DText\r\n  };\r\n}\r\n","import { Super } from '../Super';\r\n\r\nexport function registerDAttr(Mixin) {\r\n  class DAttr extends Mixin {\r\n    afterUpdate(newValue, oldValue) {\r\n      const { elem } = this;\r\n\r\n      newValue = new Super(newValue).$;\r\n\r\n      new Super(oldValue).forEach((value, prop) => {\r\n        if (!newValue[prop]) {\r\n          elem.removeAttr(prop);\r\n        }\r\n      });\r\n      elem.attr(newValue);\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-attr',\r\n    value: DAttr\r\n  };\r\n}\r\n\r\n","import { isFunction } from '../helpers';\r\n\r\nexport function registerDBind(Mixin) {\r\n  class DBind extends Mixin {\r\n    afterUpdate(value) {\r\n      if (this.off) {\r\n        this.off();\r\n      }\r\n\r\n      if (!isFunction(value)) {\r\n        return;\r\n      }\r\n\r\n      this.off = this.elem.on(this.match[0], value);\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-bind',\r\n    value: DBind\r\n  };\r\n}\r\n","import { Super } from '../Super';\r\nimport { isArray, isString, iterate } from '../helpers';\r\n\r\nexport function registerDClass(Mixin) {\r\n  class DClass extends Mixin {\r\n    classes = [];\r\n\r\n    afterUpdate(newValue) {\r\n      const {\r\n        elem,\r\n        classes\r\n      } = this;\r\n      const newClasses = [];\r\n\r\n      newValue = new Super(newValue).$;\r\n\r\n      if (isString(newValue)) {\r\n        newValue = newValue.split(/\\s+/);\r\n      }\r\n\r\n      if (isArray(newValue)) {\r\n        iterate(classes, (cls) => {\r\n          if (newValue.indexOf(cls) === -1) {\r\n            elem.removeClass(cls);\r\n          }\r\n        });\r\n        iterate(newValue, (cls) => {\r\n          if (isString(cls)) {\r\n            newClasses.push(cls);\r\n            elem.addClass(cls);\r\n          }\r\n        });\r\n      } else {\r\n        iterate(classes, (cls) => {\r\n          if (!newValue || !newValue[cls]) {\r\n            elem.removeClass(cls);\r\n          }\r\n        });\r\n        iterate(newValue, (val, cls) => {\r\n          if (val) {\r\n            newClasses.push(cls);\r\n            elem.addClass(cls);\r\n          }\r\n        });\r\n      }\r\n\r\n      this.classes = newClasses;\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-class',\r\n    value: DClass\r\n  };\r\n}\r\n","import { isFunction, isString } from '../helpers';\r\n\r\nexport function registerDElem(Mixin) {\r\n  class DElem extends Mixin {\r\n    static evaluate = false;\r\n\r\n    constructor(opts) {\r\n      super(opts);\r\n\r\n      const {\r\n        block,\r\n        elem\r\n      } = this;\r\n      const value = this.evaluateOnce();\r\n\r\n      if (isFunction(value)) {\r\n        value(elem);\r\n      } else if (isString(value)) {\r\n        block[value] = elem;\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-elem',\r\n    value: DElem\r\n  };\r\n}\r\n","export function registerDHide(Mixin) {\r\n  class DHide extends Mixin {\r\n    afterUpdate(value) {\r\n      const { elem } = this;\r\n\r\n      if (value) {\r\n        elem.hide();\r\n      } else {\r\n        elem.show();\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-hide',\r\n    value: DHide\r\n  };\r\n}\r\n","export function registerDOn(Mixin) {\r\n  class DOn extends Mixin {\r\n    static evaluate = false;\r\n\r\n    constructor(opts) {\r\n      super(opts);\r\n\r\n      this.elem.on(this.match[0], () => {\r\n        this.evaluateOnce();\r\n      });\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-on',\r\n    value: DOn\r\n  };\r\n}\r\n","export function registerDShow(Mixin) {\r\n  class DShow extends Mixin {\r\n    afterUpdate(value) {\r\n      const { elem } = this;\r\n\r\n      if (value) {\r\n        elem.show();\r\n      } else {\r\n        elem.hide();\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-show',\r\n    value: DShow\r\n  };\r\n}\r\n","import { Super } from '../Super';\r\n\r\nexport function registerDStyle(Mixin) {\r\n  class DStyle extends Mixin {\r\n    afterUpdate(newValue, oldValue) {\r\n      const { elem } = this;\r\n\r\n      newValue = new Super(newValue).$;\r\n\r\n      new Super(oldValue).forEach((value, prop) => {\r\n        if (!newValue[prop]) {\r\n          elem.removeCSS(prop);\r\n        }\r\n      });\r\n      elem.css(newValue);\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-style',\r\n    value: DStyle\r\n  };\r\n}\r\n","import { isNil } from '../helpers';\r\n\r\nexport function registerDText(Mixin) {\r\n  class DText extends Mixin {\r\n    afterUpdate(value) {\r\n      this.elem.text(\r\n        isNil(value)\r\n          ? ''\r\n          : `${ value }`\r\n      );\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-text',\r\n    value: DText\r\n  };\r\n}\r\n","import { switcher } from '../Switcher';\nimport { isFunction } from '../helpers';\n\nconst listenerSwitcher = switcher('strictEquals', 'input')\n  .case('form', 'input, change')\n  .case('select', 'change')\n  .case('input', (type) => (\n    type === 'radio'\n    || type === 'checkbox'\n    || type === 'color'\n    || type === 'file'\n      ? 'change'\n      : 'input'\n  ));\n\nexport function registerDValidate(Mixin) {\n  class DValidate extends Mixin {\n    static evaluate = false;\n\n    constructor(opts) {\n      super(opts);\n\n      const { elem } = this;\n      const validator = this.evaluateOnce();\n\n      if (isFunction(validator)) {\n        elem.validate(validator);\n      } else if (validator === true) {\n        elem.on(listenerSwitcher(elem.name, [elem.prop('type')]), () => {\n          elem.validate();\n        });\n      }\n    }\n  }\n\n  return {\n    name: 'd-validate',\n    value: DValidate\n  };\n}\n","import { Arr } from '../Arr';\r\nimport { switcher } from '../Switcher';\r\nimport { isArray, isFunction, isNil } from '../helpers';\r\n\r\nconst propSwitcher = switcher('strictEquals', (type, elem) => (\r\n  elem.hasAttr('contenteditable') || elem.hasAttr('contentEditable')\r\n    ? 'text'\r\n    : 'value'\r\n))\r\n  .case('select', (type, elem) => (\r\n    elem.hasAttr('multiple')\r\n      ? 'multiple-select'\r\n      : 'value'\r\n  ))\r\n  .case('input', (type) => {\r\n    if (type === 'file') {\r\n      return 'files';\r\n    }\r\n\r\n    return type === 'radio' || type === 'checkbox'\r\n      ? 'checked'\r\n      : 'value';\r\n  });\r\nconst setValueSwitcher = switcher('strictEquals', (value) => value)\r\n  .case('input', (value, type, inputValue) => {\r\n    if (type !== 'radio' && type !== 'checkbox') {\r\n      return value;\r\n    }\r\n\r\n    if (type === 'radio') {\r\n      return value === inputValue;\r\n    }\r\n\r\n    return value.indexOf(inputValue) !== -1;\r\n  });\r\nconst getValueSwitcher = switcher('strictEquals', (value) => value)\r\n  .case('select', (value, type, inputValue, values, elem, options) => {\r\n    if (!elem.hasAttr('multiple')) {\r\n      return value;\r\n    }\r\n\r\n    return options\r\n      .object((values, { selected, value }) => {\r\n        if (selected && values.indexOf(value) === -1) {\r\n          values.push(value);\r\n        }\r\n      }, [])\r\n      .$;\r\n  })\r\n  .case('input', (value, type, inputValue, values, elem, options, init) => {\r\n    if (type !== 'radio' && type !== 'checkbox') {\r\n      return value;\r\n    }\r\n\r\n    if (type === 'radio') {\r\n      return value\r\n        ? inputValue\r\n        : null;\r\n    }\r\n\r\n    if (!value && init) {\r\n      return values;\r\n    }\r\n\r\n    if (value) {\r\n      if (values) {\r\n        return values.indexOf(inputValue) === -1\r\n          ? new Arr(values).concat(inputValue).$\r\n          : values;\r\n      }\r\n\r\n      return [inputValue];\r\n    }\r\n\r\n    if (!isArray(values)) {\r\n      return [];\r\n    }\r\n\r\n    const index = values.indexOf(inputValue);\r\n\r\n    if (index !== -1) {\r\n      return [\r\n        ...new Arr(values).slice(0, index).$,\r\n        ...new Arr(values).slice(index + 1).$\r\n      ];\r\n    }\r\n\r\n    return values;\r\n  });\r\nconst listenerSwitcher = switcher('strictEquals', 'input')\r\n  .case('select', 'change')\r\n  .case('input', (type) => (\r\n    type === 'radio'\r\n    || type === 'checkbox'\r\n    || type === 'color'\r\n    || type === 'file'\r\n      ? 'change'\r\n      : 'input'\r\n  ));\r\n\r\nexport function registerDValue(Mixin) {\r\n  class DValue extends Mixin {\r\n    static evaluate = false;\r\n\r\n    constructor(opts) {\r\n      super(opts);\r\n\r\n      const {\r\n        $$: { _value },\r\n        block,\r\n        elem,\r\n        node\r\n      } = this;\r\n      const name = elem.name;\r\n      const type = elem.prop('type');\r\n      const value = this.evaluateOnce();\r\n      let initialScopeValue = null;\r\n\r\n      this.prop = propSwitcher(name, [type, elem]);\r\n      this.name = name;\r\n      this.type = type;\r\n      this.value = value;\r\n      this.options = elem.find('option');\r\n\r\n      if (!isFunction(value)) {\r\n        initialScopeValue = block.$$.evaluate(`{${ _value }}`, (newValue) => {\r\n          this.currentValue = newValue;\r\n          this.setProp(newValue);\r\n        }, this);\r\n      }\r\n\r\n      const initialElemValue = this.getProp(initialScopeValue, true);\r\n      const isInitialScopeValueNull = isNil(initialScopeValue);\r\n      const isCheckbox = type === 'checkbox';\r\n\r\n      if (isInitialScopeValueNull || isCheckbox) {\r\n        this.currentValue = initialElemValue;\r\n        this.changeScope();\r\n\r\n        if (!isInitialScopeValueNull && isCheckbox) {\r\n          this.setProp(initialScopeValue);\r\n        }\r\n      } else {\r\n        this.currentValue = initialScopeValue;\r\n        this.setProp(initialScopeValue);\r\n      }\r\n\r\n      elem.on(listenerSwitcher(name, [type]), (e) => {\r\n        if (e.target === node) {\r\n          this.currentValue = this.getProp(this.currentValue);\r\n          this.changeScope();\r\n        }\r\n      });\r\n    }\r\n\r\n    changeScope() {\r\n      const {\r\n        block,\r\n        value,\r\n        currentValue\r\n      } = this;\r\n\r\n      if (isFunction(value)) {\r\n        value(currentValue);\r\n      } else {\r\n        block[value] = currentValue;\r\n      }\r\n    }\r\n\r\n    setProp(value) {\r\n      const {\r\n        elem,\r\n        name,\r\n        prop,\r\n        type,\r\n        node,\r\n        options\r\n      } = this;\r\n\r\n      if (prop === 'text') {\r\n        elem.text(value);\r\n      } else if (prop === 'multiple-select') {\r\n        options.forEach((option) => {\r\n          option.selected = value.indexOf(option.value) !== -1;\r\n        });\r\n      } else {\r\n        elem.prop(prop, setValueSwitcher(name, [value, type, node.value]));\r\n      }\r\n    }\r\n\r\n    getProp(values, init) {\r\n      const {\r\n        elem,\r\n        name,\r\n        prop,\r\n        type,\r\n        node,\r\n        options\r\n      } = this;\r\n\r\n      return prop === 'text'\r\n        ? elem.text()\r\n        : getValueSwitcher(name, [elem.prop(prop), type, node.value, values, elem, options, init]);\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: 'd-value',\r\n    value: DValue\r\n  };\r\n}\r\n","/**\n * @module Block\n * @private\n * @mixin\n * @description Exports Block class.\n */\n\nimport { Arr } from './Arr';\nimport { doc, Elem } from './Elem';\nimport { Str } from './Str';\nimport { Super } from './Super';\nimport {\n  iterate, validate,\n  isFunction, isNil, isUndefined\n} from './helpers';\nimport * as Blocks from './blocks';\nimport * as Mixins from './mixins';\nimport { htmlAllowedTagSymbols, htmlAllowedAttrSymbols } from './constants';\nimport markupToJSON from './helpers/markupToJSON';\n\n/**\n * @callback Watcher\n * @param {*} newValue - New value.\n * @param {*} oldValue - Old value.\n */\n\n/**\n * @callback Wrapper\n * @param {Block} Block class to wrap.\n * @returns {Block} New Block class.\n */\n\nconst rootBlocks = Object.create(null);\nconst rootMixins = Object.create(null);\nconst isPrototypeOf = {}.isPrototypeOf;\nconst tagName = new RegExp(`^${ htmlAllowedTagSymbols }$`, 'i');\nconst attrName = new RegExp(`^${ htmlAllowedAttrSymbols }$`);\nconst expressionRegExp = /^\\{[\\s\\S]+\\}$/;\nconst { document } = global;\nconst svgNS = 'http://www.w3.org/2000/svg';\nlet onEvalError = (err) => {\n  console.error(`Eval error (evaluating \"${ err.expression }\" in context of block \"${ err.block.$$.name }\"):`, err);\n};\nlet evalMode;\nlet getting;\nlet changed;\n\n/**\n * @class Block\n * @public\n * @param {Object} opts - Element options.\n * @returns {Block} Instance of Block.\n * @description Class for dynamic templating.\n *\n * @example\n * import { D, Block, initApp, registerBlock } from 'dwayne';\n *\n * class App extends Block {\n *   static template = '<Hello text=\"{text}\"/>';\n *\n *   constructor(args, children) {\n *     super(args, children);\n *\n *     this.text = 'world (0)';\n *     this.times = 0;\n *\n *     this.setInterval();\n *   }\n *\n *   setInterval() {\n *     D(1000).interval(() => {\n *       this.text = `world (${ ++this.times })`;\n *     });\n *   }\n * }\n *\n * class Hello extends Block {\n *   static template = 'Hello, <d-text value=\"{args.text}\"/>!';\n * }\n *\n * Block.App = App;\n * Block.Hello = Hello;\n *\n * initApp();\n */\nclass Block {\n  static _blocks = Object.create(rootBlocks);\n  static _mixins = Object.create(rootMixins);\n\n  /**\n   * @member {Boolean} [Block.collapseWhiteSpace = true]\n   * @type {Boolean}\n   * @public\n   * @description If the whitespace between html elements and\n   * in the start and the end inside the tag should be omitted during parsing.\n   */\n  static collapseWhiteSpace = true;\n\n  static get onEvalError() {\n    return onEvalError;\n  }\n\n  static set onEvalError(listener) {\n    if (isFunction(listener)) {\n      onEvalError = listener;\n    } else {\n      onEvalError = null;\n    }\n  }\n\n  static getBlocks() {\n    return new Super({ ...this._blocks });\n  }\n\n  static getMixins() {\n    return new Super({ ...this._mixins });\n  }\n\n  /**\n   * @method Block.register\n   * @public\n   * @param {String} name - Block or mixin name.\n   * @param {Block|Mixin} Subclass - Subclass of Block or Mixin.\n   * @returns {void}\n   * @description Register block or mixin in the namespace of this.\n   */\n  static register(name, Subclass) {\n    const _this = new Super(this);\n\n    if (!_this.hasOwn('_blocks')) {\n      Subclass._blocks = Object.create(_this.proto().$._blocks);\n    }\n\n    if (!_this.hasOwn('_mixins')) {\n      Subclass._mixins = Object.create(_this.proto().$._mixins);\n    }\n\n    const {\n      _blocks,\n      _mixins\n    } = this;\n\n    if (!isInstanceOfBlock(Subclass) && !isInstanceOfMixin(Subclass)) {\n      console.warn(`The \"${ name }\" class does not extend Block or Mixin and will not be registered (Block.register)`);\n\n      return;\n    }\n\n    if (isInstanceOfBlock(Subclass)) {\n      if (rootBlocks[name]) {\n        console.warn(`The \"${ name }\" block is a built-in block so the block will not be registered (Block.register)`);\n\n        return;\n      }\n\n      if (!tagName.test(name)) {\n        console.warn(`Name \"${ name }\" is not allowed for blocks so the block will not be registered (Block.register)`);\n\n        return;\n      }\n\n      Subclass._html = deepCloneChildren(\n        markupToJSON(\n          `${ Subclass.template || '' }`,\n          Subclass.collapseWhiteSpace\n        )\n      );\n\n      _blocks[name] = Subclass;\n    } else {\n      if (rootMixins[name]) {\n        console.warn(`The \"${ name }\" mixin is a built-in mixin so the mixin will not be registered (Block.register)`);\n\n        return;\n      }\n\n      if (!attrName.test(name)) {\n        console.warn(`Name \"${ name }\" is not allowed for mixins so the mixin will not be registered (Block.register)`);\n\n        return;\n      }\n\n      Subclass._match = new RegExp(`^${ new Str(name).escapeRegExp().$ }(?:-([\\\\s\\\\S]+))?$`);\n\n      _mixins[name] = Subclass;\n    }\n  }\n\n  /**\n   * @member {String} Block.template\n   * @type {String}\n   * @public\n   * @description Block template.\n   */\n\n  /**\n   * @method Block.wrap\n   * @public\n   * @param {Wrapper} func - Function that returns wrapped block.\n   * @returns {Block} New block.\n   * @description Method for wrapping blocks into another blocks.\n   * It is considered best practice to just extends the old block with a new one.\n   *\n   * @example\n   * class MyBlock extends Block {\n   *   static template = '<div>123</div>';\n   * }\n   *\n   * MyBlock.wrap((Block) => {\n   *   return class extends Block {\n   *     static template = `<section class=\"wrapper\">${ Block.template }</section>`;\n   *\n   *     constructor() {\n   *       this.additionalVar = 'additional';\n   *     }\n   *   };\n   * });\n   */\n  static wrap(func) {\n    validate([func], ['function']);\n\n    return func(this);\n  }\n\n  constructor(opts) {\n    const {\n      name,\n      args: originalArgs,\n      children,\n      parent,\n      parentBlock,\n      parentScope\n    } = opts;\n    const watchersToRemove = new Arr([]);\n\n    Object.defineProperties(this, {\n      /**\n       * @member {Block} Block#$\n       * @type {Block}\n       * @public\n       * @description This.\n       */\n      $: {\n        value: this\n      },\n\n      /**\n       * @member {Object} Block#$$\n       * @type {Object}\n       * @protected\n       * @property {Object} args - Private args scope.\n       * @property {Arr} children - Child blocks.\n       * @property {Arr} mixins - Child mixins.\n       * @property {Object} elems - Elements connected to the block.\n       * @property {Elem} elems.parent - Parent element.\n       * @property {Elem} elems.start - Start comment block.\n       * @property {Elem} elems.end - End comment block.\n       * @property {Elem} elems.content - Content elements.\n       * @property {Function} evaluate - Evaluate function.\n       * @property {Object} global - Private global scope.\n       * @property {Object} locals - Private locals scope.\n       * @property {Arr} watchersToRemove - Watchers to remove before removing element.\n       */\n      $$: {\n        value: {\n          name,\n          parent: parentScope,\n          parentBlock,\n          ns: new Super(this).proto().$.constructor,\n          children: new Arr([]),\n          mixins: new Arr([]),\n          elems: {\n            start: doc.createComment(` ${ name }: start `),\n            end: doc.createComment(` ${ name }: end `),\n            content: new Elem(),\n            parent\n          },\n          watchersToRemove,\n          evaluate: (expression, onChange, instance, forDElements, forDItem, forDEach) => {\n            if (!expressionRegExp.test(expression)) {\n              return expression || true;\n            }\n\n            forDElements = !!forDElements;\n            forDItem = !!forDItem;\n            expression = expression.replace(/^\\{|\\}$/g, '');\n\n            const store = (name === '#d-item' && !forDItem) || forDEach\n              ? (forDEach || this).$$.scope\n              : this;\n\n            /* eslint no-new-func: 0 */\n            const { watchersToRemove } = instance ? instance.$$ : {};\n            const func = new Function(\n              '',\n              'with(document.DwayneStore){$$.expr=eval(\"$$.expr=\"+$$.expr);return $$.expr}'\n            );\n\n            return evaluate.call(this);\n\n            function evaluate() {\n              let result;\n\n              if (onChange) {\n                evalMode = true;\n                getting = new Arr([]);\n              }\n\n              store.$$.expr = expression;\n              document.DwayneStore = store;\n\n              try {\n                result = func();\n              } catch (err) {\n                if (onEvalError) {\n                  err.expression = expression;\n                  err.block = this;\n                  onEvalError(err);\n                }\n              }\n\n              if (onChange) {\n                const localWatchers = new Arr([]);\n\n                getting.forEach((watchers) => {\n                  const watcher = () => {\n                    const newResult = evaluate.call(this);\n\n                    if (newResult !== result) {\n                      onChange(newResult, result);\n                    }\n                  };\n                  const watcherBlock = {\n                    forDElements,\n                    watcher,\n                    watchers\n                  };\n\n                  watcher.onRemove = () => {\n                    localWatchers.forEach((watcherBlock) => {\n                      const {\n                        watcher,\n                        watchers\n                      } = watcherBlock;\n                      const index1 = watchersToRemove.indexOf(watcherBlock);\n                      const index2 = watchers.indexOf(watcher);\n\n                      if (index1 !== -1) {\n                        watchersToRemove.splice(index1, 1);\n                      }\n\n                      if (index2 !== -1) {\n                        watchers.splice(index2, 1);\n                      }\n                    });\n                  };\n\n                  localWatchers.push(watcherBlock);\n                  watchersToRemove.push(watcherBlock);\n                  watchers.push(watcher);\n                });\n\n                evalMode = false;\n                getting = new Arr([]);\n              }\n\n              store.$$.expr = null;\n              document.DwayneStore = null;\n\n              return result;\n            }\n          }\n        }\n      }\n    });\n\n    const args = new Super(originalArgs).map((value, arg) => {\n      if (name === 'd-each' && (\n        arg === 'item'\n        || arg === 'index'\n        || arg === 'uid'\n      )) {\n        return value;\n      }\n\n      const forDElements = name === 'd-elements' && arg === 'value';\n\n      return parentScope.$$.evaluate(value, (value) => {\n        this.args[arg] = value;\n      }, this, forDElements, forDElements && parentBlock.$$.name === '#d-item');\n    }).$;\n\n    this.args = args;\n    this.children = children || new Arr([]);\n    this.global = Object.create(\n      parentScope\n        ? Object.create(parentScope.global)\n        : null\n    );\n\n    this.$$.elems.start.$[0].DwayneBlock = this;\n    this.$$.elems.end.$[0].DwayneBlock = this;\n\n    if (parentBlock) {\n      parentBlock.$$.children.push(this);\n    }\n  }\n\n  /**\n   * @method Block#afterConstruct\n   * @public\n   * @description Is called after block construction (including all scopes)\n   * but before rendering the block and its children.\n   */\n  afterConstruct() {}\n\n  /**\n   * @method Block#afterRender\n   * @public\n   * @description Is called after block has been rendered.\n   */\n  afterRender() {}\n\n  /**\n   * @method Block#afterRender\n   * @public\n   * @description Is called before the block removal.\n   */\n  beforeRemove() {}\n\n  evaluateAndWatch(expression, callback) {\n    return this.$$.parent.$$.evaluate(expression, callback, this);\n  }\n\n  evaluateOnce(expression) {\n    return this.$$.parent.$$.evaluate(expression);\n  }\n\n  /**\n   * @method Block#remove\n   * @public\n   * @description Method fot forcing the block to be removed. Calls\n   * remove method for all of its child blocks and calls beforeRemove function.\n   */\n  remove(isParentSignal) {\n    const {\n      name,\n      parentBlock,\n      children,\n      mixins,\n      elems: {\n        start,\n        content,\n        end\n      },\n      watchersToRemove\n    } = this.$$;\n\n    removeWatchers(watchersToRemove);\n\n    children.forEach((child) => {\n      child.remove(true);\n    });\n\n    mixins.forEach((mixin) => {\n      mixin.remove(true);\n    });\n\n    try {\n      this.beforeRemove();\n    } catch (err) {\n      console.error(`Uncaught error in ${ name }#beforeRemove:`, err);\n    }\n\n    if (!isParentSignal && parentBlock) {\n      const index = parentBlock.$$.children.indexOf(this);\n\n      if (index !== -1) {\n        parentBlock.$$.children.splice(index, 1);\n      }\n    }\n\n    new Elem([\n      start,\n      content,\n      end\n    ]).remove();\n  }\n\n  /**\n   * @method Block#watch\n   * @public\n   * @param {...String} [args] - Vars to watch (args, global or local).\n   * @param {Watcher} watcher - Called when watched vars are changed.\n   * @description Method for watching for vars. If no vars passed in arguments\n   * all vars are to be watched. Otherwise specified vars will be watched.\n   * Watchers should not be put inside the constructor. It is considered best\n   * practice to do it inside the {@link Block#afterConstruct} method.\n   * Note that these expressions (vars, i.e. \"args.arg\") are not to be\n   * evaluated so you cannot put there things like \"a[b]\" or any js code,\n   * only expressions like \"a\", \"b\", \"args.a\", \"args.b\" and \"global.a\", \"global.b\".\n   *\n   * @example\n   * class MyBlock extends Block {\n   *   static template = '<div />';\n   *\n   *   afterConstruct() {\n   *     this.watch('a', () => {});\n   *     this.watch('args.a', 'global.r', () => {});\n   *     this.watch(() => {});\n   *   }\n   * }\n   */\n  watch() {\n    const watcher = arguments[arguments.length - 1];\n\n    if (!isFunction(watcher)) {\n      return;\n    }\n\n    if (arguments.length === 1) {\n      for (const global in this.$$.global) {\n        /* eslint guard-for-in: 0 */\n        const watchers = this.$$.global[global].watchers.perm;\n\n        watchers.push(watcher);\n        this.$$.watchersToRemove.push({\n          watcher,\n          watchers\n        });\n      }\n\n      iterate(this.$$.args, ({ watchers }) => {\n        watchers.perm.push(watcher);\n      });\n\n      return iterate(this.$$.locals, ({ watchers }) => {\n        watchers.perm.push(watcher);\n      });\n    }\n\n    iterate(arguments, (variable) => {\n      if (variable === watcher) {\n        return;\n      }\n\n      variable = `${ variable }`;\n\n      if (/^args\\./.test(variable)) {\n        variable = variable.replace(/^args\\./, '');\n\n        if (!this.$$.args[variable]) {\n          return;\n        }\n\n        this.$$.args[variable].watchers.perm.push(watcher);\n\n        return;\n      }\n\n      if (/^global\\./.test(variable)) {\n        variable = variable.replace(/^global\\./, '');\n\n        if (!this.$$.global[variable]) {\n          return;\n        }\n\n        this.$$.global[variable].watchers.perm.push(watcher);\n\n        return;\n      }\n\n      if (!this.$$.locals[variable]) {\n        return;\n      }\n\n      this.$$.locals[variable].watchers.perm.push(watcher);\n    });\n  }\n\n  /**\n   * @method Block#watchArgs\n   * @public\n   * @param {...String} [args] - Args to watch.\n   * @param {Watcher} watcher - Called when watched args are changed.\n   * @description Method for watching for args. If no args passed in arguments\n   * all args are to be watched. Otherwise specified args will be watched.\n   * Watchers should not be put inside the constructor. It is considered best\n   * practice to do it inside the {@link Block#afterConstruct} method.\n   *\n   * @example\n   * class MyBlock extends Block {\n   *   static template = '<div />';\n   *\n   *   afterConstruct() {\n   *     this.watchArgs('a', () => {});\n   *     this.watchArgs('a', 'b', () => {});\n   *     this.watchArgs(() => {});\n   *   }\n   * }\n   */\n  watchArgs() {\n    const watcher = arguments[arguments.length - 1];\n\n    if (!isFunction(watcher)) {\n      return;\n    }\n\n    if (arguments.length === 1) {\n      return iterate(this.$$.args, ({ watchers }) => {\n        watchers.perm.push(watcher);\n      });\n    }\n\n    iterate(arguments, (arg) => {\n      if (arg === watcher) {\n        return;\n      }\n\n      if (!this.$$.args[arg]) {\n        return;\n      }\n\n      this.$$.args[arg].watchers.perm.push(watcher);\n    });\n  }\n\n  /**\n   * @method Block#watchGlobal\n   * @public\n   * @param {...String} [globals] - Globals to watch.\n   * @param {Watcher} watcher - Called when watched globals are changed.\n   * @description Method for watching for globals. If no globals passed in arguments\n   * all globals are to be watched. Otherwise specified globals will be watched.\n   * Watchers should not be put inside the constructor. It is considered best\n   * practice to do it inside the {@link Block#afterConstruct} method.\n   *\n   * @example\n   * class MyBlock extends Block {\n   *   static template = '<div />';\n   *\n   *   afterConstruct() {\n   *     this.watchGlobal('a', () => {});\n   *     this.watchGlobal('a', 'b', () => {});\n   *     this.watchGlobal(() => {});\n   *   }\n   * }\n   */\n  watchGlobals() {\n    const watcher = arguments[arguments.length - 1];\n\n    if (!isFunction(watcher)) {\n      return;\n    }\n\n    if (arguments.length === 1) {\n      for (const global in this.$$.global) {\n        /* eslint guard-for-in: 0 */\n        const watchers = this.$$.global[global].watchers.perm;\n\n        watchers.push(watcher);\n        this.$$.watchersToRemove.push({\n          watcher,\n          watchers\n        });\n      }\n\n      return;\n    }\n\n    iterate(arguments, (global) => {\n      if (global === watcher) {\n        return;\n      }\n\n      if (!this.$$.global[global]) {\n        return;\n      }\n\n      this.$$.global[global].watchers.perm.push(watcher);\n    });\n  }\n\n  /**\n   * @method Block#watchLocals\n   * @public\n   * @param {...String} [locals] - Locals to watch.\n   * @param {Watcher} watcher - Called when watched locals are changed.\n   * @description Method for watching for locals. If no locals passed in arguments\n   * all locals are to be watched. Otherwise specified locals will be watched.\n   * Watchers should not be put inside the constructor. It is considered best\n   * practice to do it inside the {@link Block#afterConstruct} method.\n   *\n   * @example\n   * class MyBlock extends Block {\n   *   static template = '<div />';\n   *\n   *   afterConstruct() {\n   *     this.watchLocals('a', () => {});\n   *     this.watchLocals('a', 'b', () => {});\n   *     this.watchLocals(() => {});\n   *   }\n   * }\n   */\n  watchLocals() {\n    const watcher = arguments[arguments.length - 1];\n\n    if (!isFunction(watcher)) {\n      return;\n    }\n\n    if (arguments.length === 1) {\n      return iterate(this.$$.locals, ({ watchers }) => {\n        watchers.perm.push(watcher);\n      });\n    }\n\n    iterate(arguments, (local) => {\n      if (local === watcher) {\n        return;\n      }\n\n      if (!this.$$.locals[local]) {\n        return;\n      }\n\n      this.$$.locals[local].watchers.perm.push(watcher);\n    });\n  }\n}\n\nregisterBuiltIns(Blocks, rootBlocks, Block);\n\nconst blocks = Block._blocks;\n\nclass Mixin {\n  static evaluate = true;\n\n  constructor(opts) {\n    const {\n      name,\n      value,\n      elem,\n      match,\n      parentBlock,\n      parentScope\n    } = opts;\n\n    Object.defineProperties(this, {\n      $$: {\n        value: {\n          name,\n          _value: value,\n          parent: parentScope,\n          parentBlock,\n          watchersToRemove: new Arr([])\n        }\n      }\n    });\n\n    this.match = new Arr(match).slice(1).$;\n    this.block = parentScope;\n    this.elem = elem;\n    this.node = elem.$[0];\n\n    if (parentBlock) {\n      parentBlock.$$.mixins.push(this);\n    }\n  }\n\n  afterUpdate() {}\n\n  beforeRemove() {}\n\n  evaluateAndWatch(callback) {\n    const {\n      _value,\n      parent\n    } = this.$$;\n\n    return parent.$$.evaluate(_value, callback, this);\n  }\n\n  evaluateOnce() {\n    const {\n      _value,\n      parent\n    } = this.$$;\n\n    return parent.$$.evaluate(_value);\n  }\n\n  /**\n   * @method Mixin#remove\n   * @public\n   * @description Method fot forcing the mixin to be removed.\n   */\n  remove(isParentSignal) {\n    const {\n      name,\n      parentBlock,\n      watchersToRemove\n    } = this.$$;\n\n    removeWatchers(watchersToRemove);\n\n    try {\n      this.beforeRemove();\n    } catch (err) {\n      console.error(`Uncaught error in ${ name }#beforeRemove:`, err);\n    }\n\n    if (!isParentSignal && parentBlock) {\n      const index = parentBlock.$$.mixins.indexOf(this);\n\n      if (index !== -1) {\n        parentBlock.$$.mixins.splice(index, 1);\n      }\n    }\n  }\n}\n\nregisterBuiltIns(Mixins, rootMixins, Mixin);\n\nconst mixins = Block._mixins;\n\nfunction initApp(block, node) {\n  if (!blocks[block]) {\n    throw new Error(`No \"${ block }\" block is registered! (initApp)`);\n  }\n\n  const start = doc.createComment(' d-root: start ');\n  const end = doc.createComment(' d-root: end ');\n  const parent = new Elem(node);\n\n  parent.html('');\n\n  new Elem([\n    start,\n    end\n  ]).into(parent);\n\n  createBlock({\n    node: {\n      name: block,\n      attrs: {},\n      children: new Arr([])\n    },\n    after: start,\n    parent\n  });\n}\n\nfunction registerBuiltIns(set, scope, proto) {\n  iterate(set, (register) => {\n    const {\n      name,\n      value\n    } = register(proto, createBlock);\n\n    if (proto === Block) {\n      value._html = deepCloneChildren(\n        markupToJSON(\n          `${ value.template || '' }`,\n          value.collapseWhiteSpace\n        )\n      );\n    } else {\n      value._match = new RegExp(`^${ new Str(name).escapeRegExp().$ }(?:-([\\\\s\\\\S]+))?$`);\n    }\n\n    scope[name] = value;\n  });\n}\n\nfunction createBlock({ node, after, parent, parentBlock, parentScope }) {\n  parentScope = (node && node.block) || parentScope;\n\n  const name = (node && node.name) || 'UnknownBlock';\n  const args = (node && node.attrs) || {};\n  const children = (node && node.children) || new Arr([]);\n  const elem = parent.prop('namespaceURI') === svgNS\n    ? doc.svg()\n    : new Elem(doc.template().$[0].content);\n  const localBlocks = parentScope ? parentScope.$$.ns._blocks : blocks;\n  const localMixins = parentScope ? parentScope.$$.ns._mixins : mixins;\n  let constructor = node && node.name && localBlocks[node.name];\n  let dBlockMatch;\n\n  if (!children.length && ((dBlockMatch = name.match(/^d-block-([\\s\\S]+)$/)) || name === 'd-block')) {\n    constructor = blocks['d-block'];\n    args.name = dBlockMatch ? dBlockMatch[1] : '{null}';\n  }\n\n  if (!constructor) {\n    const {\n      value,\n      children\n    } = node;\n\n    if (name === '#text' && expressionRegExp.test(value)) {\n      return createBlock({\n        node: {\n          name: 'd-text',\n          attrs: { value },\n          children: new Arr([]),\n          block: parentScope\n        },\n        after,\n        parent,\n        parentBlock,\n        parentScope\n      });\n    }\n\n    const element = elem.create(name);\n    const currentMixins = new Arr([]);\n\n    const attrs = new Super(args).object((object, value, attr) => {\n      let match;\n\n      for (const name in localMixins) {\n        const Mixin = localMixins[name];\n        const localMatch = attr.match(Mixin._match);\n\n        if (localMatch) {\n          match = {\n            match: localMatch,\n            Mixin,\n            name\n          };\n\n          break;\n        }\n      }\n\n      if (match) {\n        currentMixins.push({\n          name: match.name,\n          Mixin: match.Mixin,\n          match: match.match,\n          value,\n          elem: element,\n          parentBlock,\n          parentScope\n        });\n\n        return;\n      }\n\n      if (!value) {\n        object[attr] = '';\n\n        return;\n      }\n\n      object[attr] = parentScope.$$.evaluate(value, (value) => {\n        element.attr(attr, value);\n      }, parentBlock);\n    }).$;\n\n    if (!isNil(value)) {\n      element.text(value);\n    }\n\n    if (attrs) {\n      element.attr(attrs);\n    }\n\n    if (after.length) {\n      element.insertAfter(after);\n    } else {\n      element.into(parent);\n    }\n\n    after = new Elem();\n\n    if (children) {\n      transformDIfChildren(children).forEach((child) => {\n        const block = createBlock({\n          node: child,\n          after,\n          parent: element,\n          parentBlock,\n          parentScope\n        });\n\n        if (block instanceof Block) {\n          after = block.$$.elems.end;\n        } else {\n          after = block;\n        }\n      });\n    }\n\n    currentMixins.forEach((opts) => {\n      createMixin(opts);\n    });\n\n    return element;\n  }\n\n  const blockInstance = new constructor({\n    name,\n    args,\n    children,\n    parent,\n    parentBlock,\n    parentScope\n  });\n\n  Object.defineProperties(blockInstance, {\n    args: {\n      value: blockInstance.args\n    },\n    global: {\n      value: blockInstance.global\n    }\n  });\n\n  let html = name === 'd-elements'\n    ? new Arr(blockInstance.args.value || [])\n    : deepCloneChildren(constructor._html, blockInstance);\n\n  if (name === 'd-elements' && parentBlock.$$.name === '#d-item') {\n    html = deepCloneChildren(html, parentBlock);\n  }\n\n  const {\n    $$,\n    args: Args,\n    global,\n    ...locals\n  } = blockInstance;\n\n  delete locals.$;\n  delete locals.$$;\n\n  $$.args = constructPrivateScope(Args);\n  $$.locals = constructPrivateScope(locals);\n  $$.global = constructPrivateScope(global, 'global', parentScope);\n\n  if (name === '#d-item') {\n    const scopeValues = {\n      [node.itemName]: node.item,\n      [node.indexName]: node.index\n    };\n    let parent = blockInstance;\n    let scope = parentScope;\n    let DItemFound;\n\n    while (!DItemFound && (parent = parent.$$.parentBlock)) {\n      DItemFound = parent.$$.name === '#d-item';\n    }\n\n    if (DItemFound) {\n      scope = parent.$$.scope;\n    }\n\n    $$.ns = parentScope.$$.ns;\n    $$.privateScope = constructPrivateScope(scopeValues);\n    constructPublicScope($$.scope = Object.create(scope), scopeValues, $$.privateScope);\n  }\n\n  if (name === 'd-each') {\n    $$.scope = Object.create(parentScope);\n  }\n\n  constructPublicScope(Args, Args, $$.args);\n  constructPublicScope(global, global, $$.global);\n  constructPublicScope(blockInstance, locals, $$.locals);\n\n  try {\n    blockInstance.afterConstruct();\n  } catch (err) {\n    console.error(`Uncaught error in ${ name }#afterConstruct:`, err);\n  }\n\n  const elems = new Elem([\n    $$.elems.start,\n    $$.elems.end\n  ]);\n\n  if (after.length) {\n    elems.insertAfter(after);\n  } else {\n    elems.into(parent);\n  }\n\n  after = $$.elems.start;\n\n  transformDIfChildren(html).forEach((child) => {\n    const block = createBlock({\n      node: child,\n      after,\n      parent,\n      parentBlock: blockInstance,\n      parentScope\n    });\n\n    if (block instanceof Block) {\n      const { elems } = block.$$;\n\n      after = elems.end;\n\n      $$.elems.content.add(elems.start, elems.content, elems.end);\n    } else {\n      after = block;\n\n      $$.elems.content.add(block);\n    }\n  });\n\n  try {\n    blockInstance.afterRender();\n  } catch (err) {\n    console.error(`Uncaught error in ${ name }#afterRender:`, err);\n  }\n\n  return blockInstance;\n}\n\nfunction createMixin({ name, Mixin, value, match, elem, parentBlock, parentScope }) {\n  const mixin = new Mixin({\n    name,\n    value,\n    match,\n    elem,\n    parentBlock,\n    parentScope\n  });\n\n  if (Mixin.evaluate) {\n    const value = mixin.value = mixin.evaluateAndWatch((newValue, oldValue) => {\n      mixin.value = newValue;\n\n      try {\n        mixin.afterUpdate(newValue, oldValue);\n      } catch (err) {\n        console.error(`Uncaught error in ${ name }#afterUpdate:`, err);\n      }\n    });\n\n    mixin.afterUpdate(value);\n  }\n}\n\nfunction deepCloneChildren(children, block) {\n  return new Arr(children || []).map((child) => {\n    const {\n      name,\n      attrs,\n      value,\n      children\n    } = child;\n    const newChild = {\n      name,\n      value,\n      attrs: { ...attrs }\n    };\n\n    if (block) {\n      newChild.block = block;\n    }\n\n    if (children) {\n      newChild.children = deepCloneChildren(children, block);\n    }\n\n    return newChild;\n  });\n}\n\nfunction transformDIfChildren(children) {\n  return new Arr(children || [])\n    .concat({})\n    .object((object, child) => {\n      const { name } = child;\n      const {\n        html,\n        ifElse\n      } = object;\n\n      if (name !== 'd-else-if' && name !== 'd-else') {\n        if (ifElse) {\n          html.push({\n            name: 'd-if',\n            block: ifElse.$[0].block,\n            children: ifElse\n          });\n\n          object.ifElse = null;\n        }\n\n        if (name === 'd-if') {\n          object.ifElse = new Arr([child]);\n        } else if (!isUndefined(name)) {\n          html.push(child);\n        }\n      } else {\n        (ifElse || html).push(child);\n\n        if (name === 'd-else' && ifElse) {\n          html.push({\n            name: 'd-if',\n            block: ifElse.$[0].block,\n            children: ifElse\n          });\n\n          object.ifElse = null;\n        }\n      }\n    }, {\n      html: new Arr([]),\n      ifElse: null\n    }).$.html;\n}\n\nfunction isInstanceOfBlock(block) {\n  return isPrototypeOf.call(Block, block) && isPrototypeOf.call(Block.prototype, block.prototype);\n}\n\nfunction isInstanceOfMixin(mixin) {\n  return isPrototypeOf.call(Mixin, mixin) && isPrototypeOf.call(Mixin.prototype, mixin.prototype);\n}\n\nfunction removeWatchers(watchersToRemove) {\n  watchersToRemove.forEach(({ watcher, watchers }) => {\n    const index = watchers.indexOf(watcher);\n\n    if (index !== -1) {\n      watchers.splice(index, 1);\n    }\n  });\n}\n\nfunction constructPrivateScope(object, type, parentScope) {\n  let scope = {};\n\n  if (type === 'global') {\n    scope = Object.create(\n      parentScope\n        ? parentScope.$$.global\n        : null\n    );\n  }\n\n  return new Super(object).object((scope, value, key) => {\n    scope[key] = {\n      value,\n      watchers: {\n        temp: new Arr([]),\n        perm: new Arr([])\n      }\n    };\n  }, scope).$;\n}\n\nfunction constructPublicScope(scope, scopeValues, privateScope) {\n  new Super(scope).define(new Super(scopeValues).map((value, key) => {\n    const scope = privateScope[key];\n\n    return {\n      get() {\n        if (evalMode) {\n          if (getting.indexOf(scope.watchers.temp) === -1) {\n            getting.push(scope.watchers.temp);\n          }\n        }\n\n        return scope.value;\n      },\n      set(value) {\n        if (value === scope.value) {\n          return;\n        }\n\n        if (!changed) {\n          changed = [];\n        }\n\n        const oldTempWatchers = scope.watchers.temp.slice();\n        const oldValue = scope.value;\n\n        scope.watchers.temp = new Arr([]);\n        scope.value = value;\n\n        oldTempWatchers.forEach((watcher) => {\n          watcher.onRemove();\n          watcher();\n        });\n        changed.push({\n          scope,\n          oldValue,\n          value\n        });\n\n        setTimeout(() => {\n          if (!changed) {\n            return;\n          }\n\n          const was = new Arr([]);\n          const values = [];\n\n          for (let i = changed.length - 1; i >= 0; i--) {\n            const {\n              scope,\n              value,\n              oldValue\n            } = changed[i];\n\n            scope.watchers.perm.forEach((watcher) => {\n              const index = was.indexOf(watcher);\n\n              if (index === -1) {\n                was.push(watcher);\n                values.push({\n                  value,\n                  oldValue\n                });\n              } else {\n                values[index].oldValue = oldValue;\n              }\n            });\n\n            changed.splice(i, 1);\n          }\n\n          changed = null;\n\n          was.forEach((watcher, i) => {\n            const {\n              value,\n              oldValue\n            } = values[i];\n\n            watcher(value, oldValue);\n          });\n        }, 0);\n      }\n    };\n  }).$);\n}\n\nexport { Block, Mixin, initApp };\n","/**\r\n * @module constants/formats\r\n * @private\r\n * @description Exports different types of formatting for {@link Date#format}.\r\n */\r\n\r\nimport { Super } from '../Super';\r\nimport { Str } from '../Str';\r\n\r\nconst zero = new Str('0');\r\nconst daysOfTheWeekNames = [\r\n  'Sunday',\r\n  'Monday',\r\n  'Tuesday',\r\n  'Wednesday',\r\n  'Thursday',\r\n  'Friday',\r\n  'Saturday'\r\n];\r\nconst daysOfTheWeekAliases = new Super(daysOfTheWeekNames).map((value) => value.slice(0, 3)).$;\r\nconst monthsNames = [\r\n  'January',\r\n  'February',\r\n  'March',\r\n  'April',\r\n  'May',\r\n  'June',\r\n  'Jule',\r\n  'August',\r\n  'September',\r\n  'October',\r\n  'November',\r\n  'December'\r\n];\r\nconst monthsAliases = new Super(monthsNames).map((value) => value.slice(0, 3)).$;\r\n\r\n/**\r\n * @callback module:constants/formats~matchCallback\r\n * @param {Dat} date - D-wrap of a date to apply format to.\r\n * @param {String} string - Matched applied expression.\r\n */\r\n\r\n/**\r\n * @typedef {Object} module:constants/formats~formatExpr\r\n * @property {String} format - Matched format.\r\n * @property {module:constants/formats~matchCallback} match - Callback if there was a match.\r\n */\r\n\r\n/**\r\n * @type {module:constants/formats~formatExpr[]}\r\n * @description Array of different formats.\r\n */\r\nexport default [\r\n  {\r\n    format: 'ccc',\r\n    match: (date, utc) => round(date[utc]('c'), 3)\r\n  },\r\n  {\r\n    format: 'c',\r\n    match: (date, utc) => date[utc]('c')\r\n  },\r\n  {\r\n    format: 'ss',\r\n    match: (date, utc) => round(date[utc]('s'), 2)\r\n  },\r\n  {\r\n    format: 's',\r\n    match: (date, utc) => date[utc]('s')\r\n  },\r\n  {\r\n    format: 'mm',\r\n    match: (date, utc) => round(date[utc]('m'), 2)\r\n  },\r\n  {\r\n    format: 'm',\r\n    match: (date, utc) => date[utc]('m')\r\n  },\r\n  {\r\n    format: 'hh',\r\n    match: (date, utc) => round(date[utc]('h'), 2)\r\n  },\r\n  {\r\n    format: 'h',\r\n    match: (date, utc) => date[utc]('h')\r\n  },\r\n  {\r\n    format: 'dddd',\r\n    match: (date, utc) => daysOfTheWeekNames[date[utc]('dw')]\r\n  },\r\n  {\r\n    format: 'ddd',\r\n    match: (date, utc) => daysOfTheWeekAliases[date[utc]('dw')]\r\n  },\r\n  {\r\n    format: 'dd',\r\n    match: (date, utc) => round(date[utc]('d'), 2)\r\n  },\r\n  {\r\n    format: 'd',\r\n    match: (date, utc) => date[utc]('d')\r\n  },\r\n  {\r\n    format: 'MMMM',\r\n    match: (date, utc) => monthsNames[date[utc]('M') - 1]\r\n  },\r\n  {\r\n    format: 'MMM',\r\n    match: (date, utc) => monthsAliases[date[utc]('M') - 1]\r\n  },\r\n  {\r\n    format: 'MM',\r\n    match: (date, utc) => round(date[utc]('M'), 2)\r\n  },\r\n  {\r\n    format: 'M',\r\n    match: (date, utc) => date[utc]('M')\r\n  },\r\n  {\r\n    format: 'yyyy',\r\n    match: (date, utc) => round(date[utc]('y'), 4)\r\n  },\r\n  {\r\n    format: 'yy',\r\n    match: (date, utc) => String(date[utc]('y')).slice(-2)\r\n  },\r\n  {\r\n    format: 'y',\r\n    match: (date, utc) => date[utc]('y')\r\n  }\r\n];\r\n\r\n/**\r\n * @function round\r\n * @private\r\n * @param {Number} number - Number to round.\r\n * @param {Number} digits - Number of the digits of the output.\r\n * @returns {String} String with necessary additional starting zeroes.\r\n */\r\nfunction round(number, digits) {\r\n  const string = String(number);\r\n  let zeroes = digits - string.length;\r\n\r\n  zeroes = zeroes < 0 ? 0 : zeroes;\r\n\r\n  return zero.repeat(zeroes).$ + string;\r\n}\r\n","/**\r\n * @module Dat\r\n * @private\r\n * @mixin\r\n * @description Exports Dat class.\r\n */\r\n\r\nimport { Super } from './Super';\r\nimport { Num } from './Num';\r\nimport { Str } from './Str';\r\nimport { switcher } from './Switcher';\r\nimport { constructors } from './constants';\r\nimport formats from './constants/formats';\r\nimport { isDate, iterate, Symbol, defineProperties } from './helpers';\r\n\r\n/**\r\n * @typedef {*} DateLike\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {'c'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} AddPeriod\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {'c'|'s'|'m'|'h'|'d'|'dw'|'M'|'y'} GetPeriod\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {'c'|'s'|'m'|'h'|'d'|'M'|'y'} OfOnePeriod\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {'c'|'s'|'m'|'h'|'d'|'M'|'y'} SetPeriod\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {'ccc'|'c'|'ss'|'s'|'mm'|'m'|'hh'|'h'|'dddd'|'ddd'|'dd'|'d'|'MMMM'|'MMM'|'MM'|'M'|'yyyy'|'yy'|'y'} Format\r\n * @public\r\n */\r\n\r\nconst coeffs = {\r\n  c: 1,\r\n  s: 1000,\r\n  m: 60000,\r\n  h: 3600000,\r\n  d: 86400000,\r\n  w: 604800000,\r\n  M: 2592000000,\r\n  y: 31536000000\r\n};\r\n\r\nconst getSwitcher = switcher({\r\n  c: (date, utc) => date[`${ utc }Milliseconds`](),\r\n  s: (date, utc) => date[`${ utc }Seconds`](),\r\n  m: (date, utc) => date[`${ utc }Minutes`](),\r\n  h: (date, utc) => date[`${ utc }Hours`](),\r\n  d: (date, utc) => date[`${ utc }Date`](),\r\n  dw: (date, utc) => date[`${ utc }Day`](),\r\n  M: (date, utc) => date[`${ utc }Month`]() + 1,\r\n  y: (date, utc) => date[`${ utc }FullYear`]()\r\n}, 'equals', NaN);\r\nconst setSwitcher = switcher({\r\n  c: (date, value, utc) => date[`${ utc }Milliseconds`](value),\r\n  s: (date, value, utc) => date[`${ utc }Seconds`](value),\r\n  m: (date, value, utc) => date[`${ utc }Minutes`](value),\r\n  h: (date, value, utc) => date[`${ utc }Hours`](value),\r\n  d: (date, value, utc) => date[`${ utc }Date`](value),\r\n  M: (date, value, utc) => date[`${ utc }Month`](value - 1),\r\n  y: (date, value, utc) => date[`${ utc }FullYear`](value)\r\n});\r\n\r\n/**\r\n * @class Dat\r\n * @extends Super\r\n * @public\r\n * @param {Date} [date = new Date()] - A date to wrap.\r\n * @returns {Dat} Instance of Dat.\r\n * @description Wrap of a date.\r\n *\r\n * @example\r\n * const date = new Dat(new Date());\r\n */\r\nclass Dat extends Super {\r\n  constructor(date = new Date()) {\r\n    super(date);\r\n\r\n    /**\r\n     * @member Dat#$\r\n     * @type {Date}\r\n     * @public\r\n     * @description Original date.\r\n     */\r\n  }\r\n\r\n  /**\r\n   * @method Dat#add\r\n   * @public\r\n   * @param {AddPeriod|Object.<AddPeriod, Number>} what - What to add.\r\n   * @param {Number} [number] - Number of what to add if the first argument is a period string.\r\n   * @returns {Dat} Returns this.\r\n   * @description Method for adding amounts of time to the date. Returns new instance of Dat.\r\n   *\r\n   * @example\r\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).add('c', 2).toISOString();         // '2000-01-01T00:00:00.001Z'\r\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).add({ c: 2, d: 5 }).toISOString(); // '2000-01-06T00:00:00.001Z'\r\n   */\r\n  add(what, number) {\r\n    if (arguments.length >= 2) {\r\n      what = { [what]: number };\r\n    }\r\n\r\n    return this.time(this.time() + new Super(what).sum((value, what) => coeffs[what] * value));\r\n  }\r\n\r\n  /**\r\n   * @method Dat#expires\r\n   * @public\r\n   * @param {*} [value = this] - Value to resolve after the date expires.\r\n   * @returns {Promise} New instance of Promise.\r\n   * @description Method for defining when the date expires.\r\n   *\r\n   * @example\r\n   * new Dat().add('c', 500).expires('Expired').then((value) => {\r\n   *   // After 500 milliseconds\r\n   *   console.log(value); // 'Expired'\r\n   * });\r\n   */\r\n  expires(value) {\r\n    if (!arguments.length) {\r\n      value = this;\r\n    }\r\n\r\n    return new Num(this.$ - now()).timeout(value);\r\n  }\r\n\r\n  /**\r\n   * @method Dat#format\r\n   * @public\r\n   * @param {String} string - Template for the output.\r\n   * @param {String} [prefix = ''] - If needed [all special strings]{@link Format}\r\n   * are treated as they should be prefix with prefix.\r\n   * @returns {String} Formatted string.\r\n   * @description Method for creating formatted output based on a string.\r\n   *\r\n   * @example\r\n   * new Dat('1999-12-31T23:59:59.999Z').format('Seconds: $ss, milliseconds: $ccc.', '$');\r\n   * // 'Seconds: 59, milliseconds: 999.'\r\n   */\r\n  format(string, prefix = '') {\r\n    string = new Str(new Super(string).$);\r\n    prefix = String(new Super(prefix).$);\r\n\r\n    iterate(formats, (format) => {\r\n      string = string.replaceString(prefix + format.format, format.match(this, 'get'));\r\n    });\r\n\r\n    return string.$;\r\n  }\r\n\r\n  /**\r\n   * @method Dat#formatUTC\r\n   * @public\r\n   * @param {String} string - See {@link Dat#format}.\r\n   * @param {String} [prefix = ''] - See {@link Dat#format}.\r\n   * @returns {String} Formatted string.\r\n   * @description UTC version of {@link Dat#format}.\r\n   *\r\n   * @example\r\n   * new Dat('1999-07-07T03:09:09.099Z').formatUTC(\r\n   *   `\r\n   *     Milliseconds: $ccc|$c.\r\n   *     Seconds:      $ss|$s.\r\n   *     Minutes:      $mm|$m.\r\n   *     Hours:        $hh|$h.\r\n   *     Day:          $dddd|$ddd|$dd|$d.\r\n   *     Month:        $MMMM|$MMM|$MM|$M.\r\n   *     Year:         $yyyy|$yy|$y.\r\n   *   `,\r\n   *   '$'\r\n   * );\r\n   * // Milliseconds: 099|99.\r\n   * // Seconds:      09|9.\r\n   * // Minutes:      09|9.\r\n   * // Hours:        03|3.\r\n   * // Day:          Friday|Fri|07|7.\r\n   * // Month:        July|Jul|07|7.\r\n   * // Year:         1999|99|1999.\r\n   */\r\n  formatUTC(string, prefix = '') {\r\n    string = new Str(new Super(string).$);\r\n    prefix = String(new Super(prefix).$);\r\n\r\n    iterate(formats, (format) => {\r\n      string = string.replaceString(prefix + format.format, format.match(this, 'getUTC'));\r\n    });\r\n\r\n    return string.$;\r\n  }\r\n\r\n  /**\r\n   * @method Dat#get\r\n   * @public\r\n   * @param {GetPeriod} what - What to get.\r\n   * @returns {Number} Number of what to get.\r\n   * @description Method for getting values such as seconds or minutes.\r\n   *\r\n   * @example\r\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).get('s'); // 59\r\n   */\r\n  get(what) {\r\n    return getSwitcher(what, [this.$, 'get']);\r\n  }\r\n\r\n  /**\r\n   * @method Dat#getUTC\r\n   * @public\r\n   * @param {GetPeriod} what - See {@link Dat#get}.\r\n   * @returns {Number} Number of what to get.\r\n   * @description UTC version of {@link Dat#get}.\r\n   *\r\n   * @example\r\n   * const date = new Dat(new Date('1999-12-31T23:59:59.999Z'));\r\n   *\r\n   * date.getUTC('c');  // 999\r\n   * date.getUTC('s');  // 59\r\n   * date.getUTC('m');  // 59\r\n   * date.getUTC('h');  // 23\r\n   * date.getUTC('d');  // 31\r\n   * date.getUTC('dw'); // 5\r\n   * date.getUTC('M');  // 12\r\n   * date.getUTC('y');  // 1999\r\n   */\r\n  getUTC(what) {\r\n    return getSwitcher(what, [this.$, 'getUTC']);\r\n  }\r\n\r\n  /**\r\n   * @method Dat#isAfter\r\n   * @public\r\n   * @param {DateLike} date - Date to be compared to this date.\r\n   * @returns {Boolean} If this date is after the argument one.\r\n   * @description Finds out if this date is after the argument one.\r\n   *\r\n   * @example\r\n   * new Dat(new Date(333)).isAfter(new Date(334)); // false\r\n   * new Dat(new Date(333)).isAfter(new Date(332)); // true\r\n   */\r\n  isAfter(date) {\r\n    date = new Date(new Super(date).$);\r\n\r\n    return date.getTime() < this.$.getTime();\r\n  }\r\n\r\n  /**\r\n   * @method Dat#isBefore\r\n   * @public\r\n   * @param {DateLike} date - Date to be compared to this date.\r\n   * @returns {Boolean} If this date is before the argument one.\r\n   * @description Finds out if this date is before the argument one.\r\n   *\r\n   * @example\r\n   * new Dat(new Date(333)).isBefore(new Date(334)); // true\r\n   * new Dat(new Date(333)).isBefore(new Date(332)); // false\r\n   */\r\n  isBefore(date) {\r\n    date = new Date(new Super(date).$);\r\n\r\n    return date.getTime() > this.$.getTime();\r\n  }\r\n\r\n  /**\r\n   * @method Dat#isBetween\r\n   * @public\r\n   * @param {DateLike} date1 - Start of the range.\r\n   * @param {DateLike} date2 - End of the range.\r\n   * @returns {Boolean} If this date is after date1 and before date2.\r\n   * @description Finds out if this date is after date1 and before date2.\r\n   *\r\n   * @example\r\n   * new Dat(new Date(333)).isBetween(new Date(332), new Date(334)); // true\r\n   * new Dat(new Date(333)).isBetween(new Date(334), new Date(332)); // false\r\n   */\r\n  isBetween(date1, date2) {\r\n    const time = this.$.getTime();\r\n\r\n    date1 = new Date(new Super(date1).$);\r\n    date2 = new Date(new Super(date2).$);\r\n\r\n    return time > date1.getTime() && time < date2.getTime();\r\n  }\r\n\r\n  /**\r\n   * @method Dat#isInvalid\r\n   * @public\r\n   * @returns {Boolean} If the date is invalid.\r\n   * @description Returns if the date is invalid.\r\n   *\r\n   * @example\r\n   * new Dat(new Date('a')).isInvalid(); // true\r\n   * new Dat(new Date(1)).isInvalid();   // false\r\n   */\r\n  isInvalid() {\r\n    return this.$.toString() === 'Invalid Date';\r\n  }\r\n\r\n  /**\r\n   * @method Dat#isPassed\r\n   * @public\r\n   * @returns {Boolean} If the date is passed.\r\n   * @description Returns if the date is passed.\r\n   *\r\n   * @example\r\n   * new Dat(new Date(1)).isPassed(); // true\r\n   */\r\n  isPassed() {\r\n    return this.isBefore(now());\r\n  }\r\n\r\n  /**\r\n   * @method Dat#ofOne\r\n   * @public\r\n   * @param {OfOnePeriod} what - Period to check.\r\n   * @param {DateLike} date - Date to check.\r\n   * @returns {Boolean} If two dates are of one second, minute or something else.\r\n   * @description Returns if two dates are of one second, minute or something else.\r\n   *\r\n   * @example\r\n   * new Dat(new Date('1999-12-31T23:59:59.000Z')).ofOne('s', new Date(1999-12-31T23:59:59.333Z')); // true\r\n   * new Dat(new Date('1999-12-31T23:59:59.000Z')).ofOne('s', new Date(1999-12-31T23:59:58.999Z')); // false\r\n   */\r\n  ofOne(what, date) {\r\n    if (!(what in coeffs) || what === 'w') {\r\n      return false;\r\n    }\r\n\r\n    date = new Dat(new Date(date));\r\n\r\n    let started;\r\n\r\n    return iterate(coeffs, (coeff, w) => {\r\n      if (w === what) {\r\n        started = true;\r\n      }\r\n\r\n      if (!started || w === 'w') {\r\n        return;\r\n      }\r\n\r\n      if (started && this.get(w) !== date.get(w)) {\r\n        return false;\r\n      }\r\n    }) !== false;\r\n  }\r\n\r\n  /**\r\n   * @method Dat#set\r\n   * @public\r\n   * @param {SetPeriod|Object.<SetPeriod, Number>} what - What to add.\r\n   * @param {Number} [number] - Number of what to set if the first argument is a period string.\r\n   * @returns {Dat} Returns this.\r\n   * @description Method for setting values such as seconds or minutes.\r\n   *\r\n   * @example\r\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).set('s', 58).get('s');           // 58\r\n   * new Dat(new Date('1999-12-31T23:59:59.999Z')).set({ c: 998, s: 58 }).get('c'); // 998\r\n   */\r\n  set(what, number) {\r\n    const date = this.$;\r\n\r\n    if (arguments.length >= 2) {\r\n      what = { [what]: number };\r\n    }\r\n\r\n    what = new Super(what).$;\r\n\r\n    iterate(what, (value, what) => {\r\n      setSwitcher(what, [date, value, 'set']);\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Dat#setUTC\r\n   * @public\r\n   * @param {SetPeriod|Object.<SetPeriod, Number>} what - See {@link Dat#set}.\r\n   * @param {Number} [number] - See {@link Dat#set}.\r\n   * @returns {Dat} Returns this.\r\n   * @description UTC version of {@link Dat#set}.\r\n   *\r\n   * @example\r\n   * const date = new Dat(new Date('1999-12-31T23:59:59.999Z'));\r\n   *\r\n   * date.setUTC('ccc', 998).getUTC('ccc'); // 998\r\n   * date.setUTC({\r\n   *   s: 58,\r\n   *   m: 58,\r\n   *   h: 22\r\n   * });\r\n   *\r\n   * date.getUTC('s'); // 58\r\n   * date.getUTC('m'); // 58\r\n   * date.getUTC('h'); // 23\r\n   */\r\n  setUTC(what, number) {\r\n    const date = this.$;\r\n\r\n    if (arguments.length >= 2) {\r\n      what = { [what]: number };\r\n    }\r\n\r\n    what = new Super(what).$;\r\n\r\n    iterate(what, (value, what) => {\r\n      setSwitcher(what, [date, value, 'setUTC']);\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Dat#setUTC\r\n   * @public\r\n   * @param {Number} [time] - Time to set.\r\n   * @returns {Dat|Number} - If the time argument is present this is returned otherwise the time is returned.\r\n   * @description Synonym for both\r\n   * [Date#getTime]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime} and\r\n   * [Date#setTime]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime}.\r\n   */\r\n  time(time) {\r\n    const date = this.$;\r\n\r\n    if (arguments.length) {\r\n      date.setTime(time);\r\n    }\r\n\r\n    return date.getTime();\r\n  }\r\n\r\n  toISOString() {\r\n    return this.$.toISOString();\r\n  }\r\n\r\n  toLocaleString() {\r\n    return this.$.toLocaleString();\r\n  }\r\n\r\n  toString() {\r\n    return this.$.toString();\r\n  }\r\n\r\n  valueOf() {\r\n    return this.$.valueOf();\r\n  }\r\n}\r\ndefineProperties(Dat.prototype, {\r\n  [Symbol.toStringTag]: 'Dat'\r\n});\r\n\r\nconstructors[1].push({\r\n  check: isDate,\r\n  cls: Dat\r\n});\r\n\r\n/**\r\n * @function now\r\n * @public\r\n * @returns {Number} Number of milliseconds.\r\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/now\r\n * @description Synonym for\r\n * [Date.now]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/now}.\r\n */\r\nfunction now() {\r\n  return Date.now();\r\n}\r\n\r\n/**\r\n * @function date\r\n * @public\r\n * @param {DateLike} [date = new Date()] - Date-like value that is passed to the Date constructor.\r\n * @returns {Dat} New instance of Dat.\r\n * @description Synonym for new Dat(new Date(date));\r\n */\r\nfunction date(date) {\r\n  if (!arguments.length) {\r\n    return new Dat(new Date(now()));\r\n  }\r\n\r\n  date = new Super(date).$;\r\n\r\n  return new Dat(new Date(date));\r\n}\r\n\r\nexport { Dat, now, date };\r\n","/**\r\n * @module helpers/constructURL\r\n * @private\r\n * @description Exports constructURL method.\r\n */\r\n\r\nimport { Arr } from '../Arr';\r\nimport { Str } from '../Str';\r\nimport { switcher } from '../Switcher';\r\nimport { isArray, isObject, isPlainObject } from './checkTypes';\r\nimport { iterate } from './iterate';\r\n\r\n/**\r\n * @type {RegExp}\r\n * @description Absolute URL pattern.\r\n */\r\nconst absoluteURLRegexp = /^(([a-z][a-z\\d+\\-.]*:)?\\/\\/|data:[a-z]+\\/[a-z]+;base64,)/i;\r\nconst querySwitcher = switcher('call', () => new Arr([]))\r\n  .case(isArray, (prefix, query) => {\r\n    let queryParams = new Arr([]);\r\n\r\n    iterate(query, (value) => {\r\n      if (isPlainObject(value) || isArray(value)) {\r\n        queryParams = queryParams.concat(querySwitcher(value, [`${ prefix }[]`]));\r\n\r\n        return;\r\n      }\r\n\r\n      queryParams.push({\r\n        param: `${ prefix }[]`,\r\n        value\r\n      });\r\n    });\r\n\r\n    return queryParams.$;\r\n  })\r\n  .case(isPlainObject, (prefix, query) => {\r\n    let queryParams = new Arr([]);\r\n\r\n    iterate(query, (value, param) => {\r\n      if (isPlainObject(value) || isArray(value)) {\r\n        queryParams = queryParams.concat(querySwitcher(value, [prefix ? `${ prefix }[${ param }]` : param]));\r\n\r\n        return;\r\n      }\r\n\r\n      queryParams.push({\r\n        param: prefix ? `${ prefix }[${ param }]` : param,\r\n        value: isObject(value) ? JSON.stringify(value) : String(value)\r\n      });\r\n    });\r\n\r\n    return queryParams.$;\r\n  });\r\n\r\n/**\r\n * @function constructURL\r\n * @param {String} baseURL - BaseURL of the output URL.\r\n * @param {String} url - Main part of the output URL.\r\n * @param {Object} params - Params to replace in the url expressions like \":param\".\r\n * @param {Object} query - Object with query params.\r\n * @param {Object} [hash = ''] - URL hash.\r\n * @param {Object} [encodeOptions = {}] - If you need to encode something.\r\n * @param {Object} [encodeOptions.params = true] - If you need to encode params.\r\n * @param {Object} [encodeOptions.query = true] - If you need to encode query params.\r\n * @returns {String} Constructed URL.\r\n * @description Function for constructing URL from the base URL, URL, params and query params.\r\n */\r\nexport default (baseURL, url, params, query, hash = '', encodeOptions = {}) => {\r\n  const {\r\n    params: encodeParams = true,\r\n    query: encodeQuery = true\r\n  } = encodeOptions;\r\n  let URL = isAbsolute(url)\r\n    ? url\r\n    : `${ String(baseURL).replace(/\\/+$/, '') }/${ String(url).replace(/^\\/+/, '') }`;\r\n\r\n  iterate(params, (value, param) => {\r\n    URL = new Str(URL).replaceString(`:${ param }`, encode(value, encodeParams)).$;\r\n  });\r\n\r\n  const queryParams = querySwitcher(query, ['']);\r\n\r\n  if (queryParams.length) {\r\n    URL += (URL.indexOf('?') === -1 ? '?' : '&') + queryParams\r\n      .map(({ param, value }) => `${ encode(param, encodeQuery) }=${ encode(value, encodeQuery) }`)\r\n      .join('&');\r\n  }\r\n\r\n  return `${ URL }${ hash ? `#${ hash }` : '' }`;\r\n};\r\n\r\n/**\r\n * @function isAbsolute\r\n * @param {String} url - URL to check if it is absolute or not.\r\n * @returns {Boolean} If the argument URL is absolute or not.\r\n */\r\nfunction isAbsolute(url) {\r\n  return absoluteURLRegexp.test(url);\r\n}\r\n\r\n/**\r\n * @function encode\r\n * @param {String} string - String to encode using encodeURIComponent.\r\n * @param {Boolean} isEncoded - If the string should be encoded.\r\n * @returns {String} Encoded string.\r\n */\r\nfunction encode(string, isEncoded) {\r\n  return isEncoded ? encodeURIComponent(string) : string;\r\n}\r\n","/**\r\n * @module helpers/parseHeaders\r\n * @private\r\n * @description Exports parseHeaders method.\r\n */\r\n\r\nimport { Str } from '../Str';\r\nimport { iterate } from './iterate';\r\n\r\n/**\r\n * @function parseHeaders\r\n * @param {String} rawHeaders - Raw headers.\r\n * @returns {Object} Headers object\r\n * @description Function for parsing raw headers.\r\n */\r\nexport default (rawHeaders) => {\r\n  const headers = {};\r\n\r\n  iterate((rawHeaders || '').split('\\n'), (value) => {\r\n    const index = value.indexOf(':');\r\n    const key = new Str(value.substring(0, index))\r\n      .trim()\r\n      .toCamelCase().$;\r\n    const val = new Str(value.substring(index + 1)).trim().$;\r\n\r\n    if (key) {\r\n      headers[key] = (headers[key] ? `${ headers[key] }, ` : '') + val;\r\n    }\r\n  });\r\n\r\n  return headers;\r\n};\r\n","/**\r\n * @module helpers/transformData\r\n * @private\r\n * @description Exports transformData method.\r\n */\r\n\r\nimport { Arr } from '../Arr';\r\nimport { Super } from '../Super';\r\nimport { isObject, toStringTag } from './';\r\n\r\nconst notToTransform = new Arr(['FormData', 'File', 'Blob', 'ArrayBuffer', 'String', 'Number']);\r\nconst withoutBody = new Arr(['DELETE', 'GET', 'HEAD']);\r\n\r\n/**\r\n * @function transformData\r\n * @param {*} data - Data to transform\r\n * @param {String} method - HTTP method.\r\n * @param {Object} headers - Object with headers.\r\n * @returns {*} - Transformed data.\r\n */\r\nexport default (data, method, headers) => {\r\n  data = new Super(data).$;\r\n\r\n  if (withoutBody.indexOfStrict(method) !== -1) {\r\n    return null;\r\n  }\r\n\r\n  if (isObject(data) && notToTransform.indexOfStrict(toStringTag(data)) === -1) {\r\n    if (!headers.contentType) {\r\n      headers.contentType = ['application/json;charset=utf-8'];\r\n    }\r\n\r\n    return new Super(data).json();\r\n  }\r\n\r\n  return data;\r\n};\r\n","/**\r\n * @module Fetch\r\n * @private\r\n * @mixin\r\n * @description Exports Fetch class.\r\n */\r\n\r\nimport { Promise } from './Promise';\r\nimport { Super } from './Super';\r\nimport { Arr } from './Arr';\r\nimport { Str } from './Str';\r\nimport {\r\n  isArray, isFunction, isString,\r\n  assign, Symbol, validate, iterate, defineProperties\r\n} from './helpers';\r\nimport constructURL from './helpers/constructURL';\r\nimport parseHeaders from './helpers/parseHeaders';\r\nimport transformData from './helpers/transformData';\r\n\r\n/**\r\n * @typedef {'get'|'post'|'delete'|'head'|'put'|'patch'} FetchMethod\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef {Object} FetchConfig\r\n * @public\r\n * @property {Array.<AfterMiddleware|FetchErrorAfterMiddleware>} [after]\r\n * @property {Object} [auth]\r\n * @property {String} [auth.username]\r\n * @property {String} [auth.password]\r\n * @property {String} [baseURL]\r\n * @property {Array.<BeforeMiddleware|FetchErrorBeforeMiddleware>} [before]\r\n * @property {*} [data]\r\n * @property {Object.<String, String[]>} [headers]\r\n * @property {FetchMethod} [method]\r\n * @property {Object} [params]\r\n * @property {Object} [query]\r\n * @property {String} [responseType]\r\n * @property {Number} [timeout]\r\n * @property {String} [url]\r\n * @property {Boolean} [withCredentials]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FetchResponse\r\n * @public\r\n * @property {FetchConfig} config\r\n * @property {*} data\r\n * @property {Object.<String, String>} headers\r\n * @property {Number} status\r\n * @property {String} statusText\r\n * @property {XMLHttpRequest} xhr\r\n */\r\n\r\n/**\r\n * @callback FetchAfterMiddleware\r\n * @public\r\n * @param {FetchResponse} config - Fetch response.\r\n */\r\n\r\n/**\r\n * @callback FetchErrorAfterMiddleware\r\n * @public\r\n * @param {Error|*} err - Thrown error.\r\n * @param {FetchResponse} config - Fetch response.\r\n */\r\n\r\n/**\r\n * @callback FetchBeforeMiddleware\r\n * @public\r\n * @param {FetchConfig} config - Fetch config.\r\n */\r\n\r\n/**\r\n * @callback FetchErrorBeforeMiddleware\r\n * @public\r\n * @param {Error|*} err - Thrown error.\r\n * @param {FetchConfig} config - Fetch config.\r\n */\r\n\r\n/**\r\n * @callback FetchConfigFunction\r\n * @public\r\n * @param {FetchConfig} config\r\n */\r\n\r\nconst defaults = {\r\n  after: [],\r\n  auth: {\r\n    username: '',\r\n    password: ''\r\n  },\r\n  baseURL: global.location.origin,\r\n  before: [],\r\n  data: null,\r\n  headers: {},\r\n  method: 'get',\r\n  params: {},\r\n  query: {},\r\n  responseType: '',\r\n  timeout: 0,\r\n  url: '',\r\n  withCredentials: false\r\n};\r\nconst uploadMethods = new Arr(['post', 'put']);\r\n\r\n/**\r\n * @class Fetch\r\n * @extends Function\r\n * @public\r\n * @param {FetchConfig} [config = {}] - A number to wrap.\r\n * @returns {Fetch} Instance of Fetch.\r\n * An instance of Fetch is a function that simply calls #request with the same arguments.\r\n * @description Class for fetching data.\r\n *\r\n * @example\r\n * const fetch = new Fetch();\r\n *\r\n * fetch('/data').then((res) => {\r\n *   console.log(res);\r\n * });\r\n */\r\nclass Fetch extends Function {\r\n  constructor(config = {}) {\r\n    super();\r\n\r\n    function fetch() {\r\n      return fetch.request.apply(fetch, arguments);\r\n    }\r\n\r\n    const conf = new Super({}).deepAssign(defaults, config).$;\r\n\r\n    if (conf.before.indexOf(fetchBeforeMiddleware) === -1) {\r\n      conf.before.push(fetchBeforeMiddleware);\r\n    }\r\n\r\n    /**\r\n     * @member {FetchConfig} Fetch#$$\r\n     * @type {FetchConfig}\r\n     * @public\r\n     * @description Fetch config.\r\n     */\r\n    Object.defineProperty(fetch, '$$', { value: conf });\r\n    Object.setPrototypeOf(fetch, Fetch.prototype);\r\n\r\n    return fetch;\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#after\r\n   * @public\r\n   * @param {FetchAfterMiddleware|FetchErrorAfterMiddleware} middleware - Middleware to add.\r\n   * @param {Boolean|*} [afterAll = true] - Boolean parameter where to put the middleware.\r\n   * Truthy parameter stands for \"to the end\" and falsey for \"to the beginning\".\r\n   * @returns {Fetch} Returns this.\r\n   * @description Middleware that is called after the request.\r\n   * If the middleware has 2 or less arguments it's treated as success middleware otherwise as an error one.\r\n   * If the middleware returns a promise it becomes a part of the middleware chain.\r\n   *\r\n   * @example\r\n   * const fetch = new Fetch()\r\n   *   .after((err, res) => {\r\n   *     console.log(err);\r\n   *\r\n   *     throw err;\r\n   *   })\r\n   *   .after((res) => {\r\n   *     res.json = D(res.data).parseJSON():\r\n   *   });\r\n   */\r\n  after(middleware, afterAll = true) {\r\n    validate([middleware], ['function'], 'Fetch#after');\r\n\r\n    const { after } = this.$$;\r\n\r\n    if (afterAll) {\r\n      after.push(middleware);\r\n    } else {\r\n      after.unshift(middleware);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#before\r\n   * @public\r\n   * @param {FetchBeforeMiddleware|FetchErrorBeforeMiddleware} middleware - Middleware to add.\r\n   * @param {Boolean|*} [beforeAll = true] - Boolean parameter where to put the middleware.\r\n   * Truthy parameter stands for \"to the beginning\" and falsey for \"to the end\".\r\n   * @returns {Fetch} Returns this.\r\n   * @description Middleware that is called before the request.\r\n   * If the middleware has 2 or less arguments it's treated as success middleware otherwise as an error one.\r\n   * If the middleware returns a promise it becomes a part of the middleware chain.\r\n   *\r\n   * @example\r\n   * const fetch = new Fetch()\r\n   *   .before((err, req) => {\r\n   *     console.log(err);\r\n   *\r\n   *     throw err;\r\n   *   })\r\n   *   .before((req) => {\r\n   *     if (req.url === '/veryLongRequest') {\r\n   *       req.timeout = 30000;\r\n   *     }\r\n   *   });\r\n   */\r\n  before(middleware, beforeAll = true) {\r\n    validate([middleware], ['function'], 'Fetch#before');\r\n\r\n    const { before } = this.$$;\r\n\r\n    if (beforeAll) {\r\n      before.unshift(middleware);\r\n    } else {\r\n      before.push(middleware);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#config\r\n   * @public\r\n   * @param {String|FetchConfig|FetchConfigFunction} [property] - If it's a function\r\n   * it's called with the fetch config argument, if it's a string the value argument\r\n   * is used for assigning this property to the fetch config\r\n   * otherwise it's assigned to the fetch config.\r\n   * @param {*} [value] - See the property argument.\r\n   * @returns {Fetch|FetchConfig} If the argument is present this is returned otherwise the fetch config is returned.\r\n   * @description Method for getting and setting config.\r\n   *\r\n   * @example\r\n   * const fetch = new Fetch();\r\n   *\r\n   * fetch.config({ baseURL: 5000 });\r\n   * fetch.config().timeout; // 5000\r\n   *\r\n   * fetch.config((config) => {\r\n   *   config.baseURL += '/api';\r\n   * });\r\n   */\r\n  config(property, value) {\r\n    const conf = this.$$;\r\n\r\n    if (!arguments.length) {\r\n      return conf;\r\n    }\r\n\r\n    if (isFunction(property)) {\r\n      property(conf);\r\n    } else {\r\n      if (arguments.length >= 2) {\r\n        property = { [property]: value };\r\n      }\r\n\r\n      new Super(conf).deepAssign(property);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#delete\r\n   * @public\r\n   * @param {String} [url] - See {@link Fetch#request}.\r\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\r\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\r\n   * @description Shorthand for #request for delete requests.\r\n   *\r\n   * @example\r\n   * new Fetch().delete('/data').then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  delete(url, config = {}) {\r\n    if (!isString(url)) {\r\n      config = url;\r\n      url = undefined;\r\n    }\r\n\r\n    return this.request(url, assign({ method: 'delete' }, config));\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#get\r\n   * @public\r\n   * @param {String} [url] - See {@link Fetch#request}.\r\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\r\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\r\n   * @description Shorthand for #request for get requests.\r\n   *\r\n   * @example\r\n   * new Fetch().get('/data').then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  get(url, config = {}) {\r\n    if (!isString(url)) {\r\n      config = url;\r\n      url = undefined;\r\n    }\r\n\r\n    return this.request(url, assign({ method: 'get' }, config));\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#head\r\n   * @public\r\n   * @param {String} [url] - See {@link Fetch#request}.\r\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\r\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\r\n   * @description Shorthand for #request for head requests.\r\n   *\r\n   * @example\r\n   * new Fetch().head('/data').then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  head(url, config = {}) {\r\n    if (!isString(url)) {\r\n      config = url;\r\n      url = undefined;\r\n    }\r\n\r\n    return this.request(url, assign({ method: 'head' }, config));\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#headers\r\n   * @public\r\n   * @param {String|Object.<String, String|String[]>} header - A header string or an object of the following format:\r\n   * { [header]: [value1, value2, ...] }.\r\n   * @param {String|String[]} [value] - Header value. If the first argument is a string\r\n   * this has to be a header value or an array of header values.\r\n   * @returns {Fetch} Returns this.\r\n   * @description Method for setting request headers.\r\n   *\r\n   * @example\r\n   * const fetch = new Fetch()\r\n   *   .headers('Header1', 'Value')\r\n   *   .headers('Header2', ['Value1', 'Value2'])\r\n   *   .headers({\r\n   *     Header3: ['Value1', 'Value2']\r\n   *   });\r\n   */\r\n  headers(header, value) {\r\n    const { headers } = this.$$;\r\n\r\n    if (arguments.length >= 2) {\r\n      header = { [header]: value };\r\n    }\r\n\r\n    iterate(header, (value, header) => {\r\n      const array = headers[header] || [];\r\n      const toPush = isArray(value) ? value : [value];\r\n\r\n      (headers[header] = array).push.apply(array, toPush);\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#instance\r\n   * @public\r\n   * @param {FetchConfig} [config] - New config if needed.\r\n   * @returns {Fetch} New instance of Fetch.\r\n   * @description Method for creating new fetch instances based on already existent.\r\n   *\r\n   * @example\r\n   * const mainFetch = new Fetch({\r\n   *   baseURL: '//other.domain.com/api',\r\n   *   withCredentials: true\r\n   * });\r\n   *\r\n   * const longFetch = mainFetch.instance({\r\n   *   timeout: 10000\r\n   * });\r\n   */\r\n  instance(config = {}) {\r\n    const dataConfig = new Super(config).hasOwn('data')\r\n      ? { data: config.data }\r\n      : {};\r\n\r\n    delete config.data;\r\n\r\n    const conf = new Super({})\r\n      .deepAssign(this.$$, config)\r\n      .assign(dataConfig)\r\n      .$;\r\n\r\n    return new Fetch(conf);\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#patch\r\n   * @public\r\n   * @param {String} [url] - See {@link Fetch#request}.\r\n   * @param {*} [data] - Additional parameter for uploading data.\r\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\r\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\r\n   * @description Shorthand for #request for head requests.\r\n   *\r\n   * @example\r\n   * new Fetch().patch('/data', { user: 'John' }).then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  patch(url, data = {}, config = {}) {\r\n    if (arguments.length && !isString(url)) {\r\n      config = data;\r\n      data = url;\r\n      url = undefined;\r\n    }\r\n\r\n    return this.request(url, assign({ method: 'patch', data }, config));\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#post\r\n   * @public\r\n   * @param {String} [url] - See {@link Fetch#request}.\r\n   * @param {*} [data] - Additional parameter for uploading data.\r\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\r\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\r\n   * @description Shorthand for #request for head requests.\r\n   *\r\n   * @example\r\n   * new Fetch().post('/data', { user: 'John' }).then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  post(url, data = {}, config = {}) {\r\n    if (arguments.length && !isString(url)) {\r\n      config = data;\r\n      data = url;\r\n      url = undefined;\r\n    }\r\n\r\n    return this.request(url, assign({ method: 'post', data }, config));\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#put\r\n   * @public\r\n   * @param {String} [url] - See {@link Fetch#request}.\r\n   * @param {*} [data] - Additional parameter for uploading data.\r\n   * @param {FetchConfig} [config] - See {@link Fetch#request}.\r\n   * @returns {Promise.<FetchResponse, Error>} See {@link Fetch#request}.\r\n   * @description Shorthand for #request for head requests.\r\n   *\r\n   * @example\r\n   * new Fetch().put('/data', { user: 'John' }).then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  put(url, data = {}, config = {}) {\r\n    if (arguments.length && !isString(url)) {\r\n      config = data;\r\n      data = url;\r\n      url = undefined;\r\n    }\r\n\r\n    return this.request(url, assign({ method: 'put', data }, config));\r\n  }\r\n\r\n  /**\r\n   * @method Fetch#request\r\n   * @public\r\n   * @param {String} [url] - URL for the request.\r\n   * @param {FetchConfig} [config] - Additional config for this particular request.\r\n   * @returns {Promise.<FetchResponse, Error>} Promise that is resolved with the request response.\r\n   * @description Main function for making requests. All request methods call this method\r\n   * including the fetch instance itself.\r\n   *\r\n   * @example\r\n   * const fetch = new Fetch();\r\n   *\r\n   * fetch.request('/data', { timeout: 1000 }).then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   *\r\n   * fetch.request({ timeout: 1000 }).then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   *\r\n   * fetch.request().then((res) => {\r\n   *   console.log(res);\r\n   * });\r\n   */\r\n  request(url, config = {}) {\r\n    if (arguments.length === 1 && !isString(url)) {\r\n      config = url;\r\n    }\r\n\r\n    const dataConfig = new Super(config).hasOwn('data')\r\n      ? { data: config.data }\r\n      : {};\r\n    const urlConfig = isString(url)\r\n      ? { url }\r\n      : {};\r\n\r\n    delete config.data;\r\n\r\n    const conf = new Super(this.$$)\r\n      .deepClone()\r\n      .deepAssign(urlConfig, config)\r\n      .assign(dataConfig)\r\n      .$;\r\n\r\n    let xhr;\r\n    let promise = Promise.resolve();\r\n\r\n    iterate(conf.before, (middleware) => {\r\n      promise = promise.then(() => {\r\n        if (middleware.length >= 2) {\r\n          return Promise.resolve();\r\n        }\r\n\r\n        return new Promise((resolve) => {\r\n          resolve(middleware(conf));\r\n        });\r\n      }, (err) => {\r\n        if (middleware.length < 2) {\r\n          return Promise.reject(err);\r\n        }\r\n\r\n        return new Promise((resolve) => {\r\n          resolve(middleware(err, conf));\r\n        });\r\n      });\r\n    });\r\n\r\n    promise = promise.then(() => new Promise((resolve, reject) => {\r\n      const {\r\n        after,\r\n        auth: {\r\n          username,\r\n          password\r\n        },\r\n        data,\r\n        headers,\r\n        method,\r\n        onprogress,\r\n        responseType,\r\n        timeout,\r\n        url,\r\n        withCredentials\r\n      } = conf;\r\n\r\n      xhr = new XMLHttpRequest();\r\n\r\n      xhr.open(method, url, true, username, password);\r\n\r\n      iterate(headers, (value, header) => {\r\n        xhr.setRequestHeader(header, value);\r\n      });\r\n\r\n      if (onprogress) {\r\n        if (uploadMethods.indexOfStrict(method) === -1) {\r\n          xhr.onprogress = onprogress;\r\n        } else {\r\n          xhr.upload.onprogress = onprogress;\r\n        }\r\n      }\r\n\r\n      xhr.onabort = () => {\r\n        const error = new Error('Request was aborted');\r\n\r\n        error.type = 'ABORT_ERROR';\r\n\r\n        reject(error);\r\n\r\n        xhr = null;\r\n      };\r\n\r\n      xhr.onerror = () => {\r\n        const error = new Error('Network error');\r\n\r\n        error.type = 'NETWORK_ERROR';\r\n\r\n        reject(error);\r\n\r\n        xhr = null;\r\n      };\r\n\r\n      xhr.ontimeout = () => {\r\n        const error = new Error('Request time exceeded');\r\n\r\n        error.type = 'TIMEOUT_ERROR';\r\n\r\n        reject(error);\r\n\r\n        xhr = null;\r\n      };\r\n\r\n      xhr.onreadystatechange = () => {\r\n        if (!xhr || !xhr.status || xhr.readyState !== 4) {\r\n          return;\r\n        }\r\n\r\n        const response = {\r\n          config: conf,\r\n          data: !responseType || responseType === 'text' ? xhr.responseText : xhr.response,\r\n          headers: parseHeaders(xhr.getAllResponseHeaders()),\r\n          status: xhr.status === 1223 ? 204 : xhr.status,\r\n          statusText: xhr.status === 1223 ? 'No Content' : xhr.statusText,\r\n          xhr\r\n        };\r\n\r\n        let promise = Promise.resolve();\r\n\r\n        iterate(after, (middleware) => {\r\n          promise = promise.then(() => {\r\n            if (middleware.length >= 2) {\r\n              return Promise.resolve();\r\n            }\r\n\r\n            return new Promise((resolve) => {\r\n              resolve(middleware(response));\r\n            });\r\n          }, (err) => {\r\n            if (middleware.length < 2) {\r\n              return Promise.reject(err);\r\n            }\r\n\r\n            return new Promise((resolve) => {\r\n              resolve(middleware(err, response));\r\n            });\r\n          });\r\n        });\r\n\r\n        resolve(promise\r\n          .then(() => response)\r\n          .catch((err) => {\r\n            try {\r\n              err.response = response;\r\n            } catch (e) {\r\n              throw err;\r\n            }\r\n\r\n            throw err;\r\n          })\r\n        );\r\n      };\r\n\r\n      xhr.responseType = responseType;\r\n      xhr.timeout = Number(timeout) || 0;\r\n      xhr.withCredentials = !!withCredentials;\r\n\r\n      xhr.send(data);\r\n    }));\r\n\r\n    promise.abort = function abort() {\r\n      if (xhr) {\r\n        xhr.abort();\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\n    return promise;\r\n  }\r\n}\r\n\r\ndefineProperties(Fetch.prototype, {\r\n  [Symbol.toStringTag]: 'Fetch'\r\n});\r\n\r\n/**\r\n * @function fetchBeforeMiddleware\r\n * @private\r\n * @param {FetchConfig} config\r\n * @description Built-in before middleware for url, data, method, headers construction.\r\n */\r\nfunction fetchBeforeMiddleware(config) {\r\n  const {\r\n    baseURL,\r\n    data,\r\n    headers,\r\n    method,\r\n    params,\r\n    query,\r\n    url\r\n  } = config;\r\n  const METHOD = method.toUpperCase();\r\n\r\n  config.method = METHOD;\r\n  config.url = constructURL(baseURL, url, params, query);\r\n  config.data = transformData(data, METHOD, headers);\r\n  config.headers = new Super(headers).object((headers, values, header) => {\r\n    header = new Str(header)\r\n      .toCapitalCase()\r\n      .replace(/\\s+/g, '-')\r\n      .$;\r\n\r\n    headers[header] = values.join(', ');\r\n  }).$;\r\n}\r\n\r\n/**\r\n * @const {Fetch} fetch\r\n * @type {Fetch}\r\n * @public\r\n * @description Empty instance of Fetch.\r\n */\r\nconst fetch = new Fetch();\r\n\r\nexport { Fetch, fetch };\r\n","/**\r\n * @module helpers/resolveURL\r\n * @private\r\n * @description Exports Object.assign-like method.\r\n */\r\n\r\nimport { Str } from '../Str';\r\n\r\nconst { location } = global;\r\n\r\nexport default (decodeQuery) => {\r\n  const {\r\n    search: query,\r\n    hash\r\n  } = location;\r\n  const params = {\r\n    query: {},\r\n    hash: hash.replace(/^#/, '')\r\n  };\r\n\r\n  if (!query) {\r\n    return params;\r\n  }\r\n\r\n  new Str(query.replace(/^\\?/, ''))\r\n    .split('&')\r\n    .forEach((rawParam) => {\r\n      let [param, value = ''] = rawParam.split('=');\r\n\r\n      param = decodeQuery ? decodeURIComponent(param) : param;\r\n      value = decodeQuery ? decodeURIComponent(value) : value;\r\n\r\n      if (!/^[^[]+/.test(param)) {\r\n        return;\r\n      }\r\n\r\n      let paramName;\r\n      let paramObject = params.query;\r\n\r\n      new Str(param)\r\n        .match(/^[^[\\]]*|\\[[^[\\]]*]/g)\r\n        .forEach((name) => {\r\n          if (name.indexOf('[')) {\r\n            paramName = name;\r\n\r\n            return;\r\n          }\r\n\r\n          name = name.slice(1, -1);\r\n\r\n          paramObject = paramObject[paramName] = paramObject[paramName] || (name ? {} : []);\r\n          paramName = name || paramObject.length;\r\n        });\r\n\r\n      paramObject[paramName] = value;\r\n    });\r\n\r\n  return params;\r\n};\r\n","/**\n * @module Router\n * @private\n * @mixin\n * @description Exports Router.\n */\n\nimport { Arr } from './Arr';\nimport { Elem, win } from './Elem';\nimport { self } from './Func';\nimport { Str } from './Str';\nimport { Super } from './Super';\nimport { switcher } from './Switcher';\nimport { assign, isNil, isRegExp, isString } from './helpers';\nimport constructURL from './helpers/constructURL';\nimport resolveURL from './helpers/resolveURL';\n\nconst Routes = new Arr([]);\nconst currentRoutes = new Arr([]);\nconst subscribers = {};\nconst {\n  history,\n  location,\n  location: {\n    href: initialURL\n  }\n} = global;\nlet initialized;\nlet pushed;\nlet wasRoot;\nlet wasDefault;\nlet rootRoute;\nlet redirectRoute;\nlet RedirectRoute;\nlet defaultRoute;\nlet DefaultRoute;\nlet currentRoute;\nlet currentRouteParams;\n\nconst pathSwitcher = switcher('call', () => {\n  throw new Error('State path must be a string, a regular expression or undefined! (at registerState)');\n})\n  .case(isRegExp, (path) => ({\n    path: path.source.replace(/\\\\\\//g, '/'),\n    url: path,\n    params: {}\n  }))\n  .case(isNil, () => ({\n    path: '/',\n    url: '/',\n    params: {}\n  }))\n  .case(isString, (path) => {\n    if (path.indexOf('/')) {\n      throw new Error('If route path is a string it must start with \"/\"! (at registerState)');\n    }\n\n    const index = path.indexOf('?');\n    const params = new Super({});\n    let newURL = '';\n    const newPath = new Str(path)\n      .slice(0, index === -1 ? path.length : index)\n      .replace(/^\\/|\\/$/g)\n      .split(/\\//)\n      .map((part, i, array) => {\n        if (!part && array.length > 1) {\n          throw new Error('If route path is a string it must not contain \"//\" or end with \"/\"! (at makeRoute)');\n        }\n\n        const index = part.indexOf(':');\n\n        if (index > 0) {\n          throw new Error('If route path is a string resource part must be either a string or an URL parameter! (at makeRoute)');\n        }\n\n        if (index === -1) {\n          return {\n            url: part,\n            value: part\n          };\n        }\n\n        const {\n          name,\n          regexp = /[^/]*/\n        } = resolveParameter(\n          part.slice(1),\n          'URL parameter must not be an empty string or contain characters besides \"a-zA-Z_$\"! (at makeRoute)',\n          'URL parameter regexp validator must be within parentheses (e.g. :userId(\\\\d+) and not contain ones)! (at makeRoute)'\n        );\n\n        params.$[name] = params.count;\n\n        return {\n          type: 'param',\n          url: `:${ name }`,\n          value: regexp\n        };\n      })\n      .word(({ type, url, value }) => {\n        let newPath;\n\n        if (type === 'param') {\n          newPath = `(${ value.source.replace(/\\\\\\//g, '/') })`;\n        } else {\n          newPath = new Str(value).escapeRegExp().$;\n        }\n\n        newURL += `/${ url }`;\n\n        return `/${ newPath }`;\n      });\n\n    return {\n      path: newPath,\n      url: newURL,\n      params: params.$\n    };\n  });\n\nconst router = {\n  buildURL,\n  go,\n  goToURL,\n  pushURL,\n  redirect,\n  redirectToURL,\n  replaceURL\n};\n\nclass Route {\n  constructor(options) {\n    options = options || {};\n\n    const {\n      name,\n      path = '/',\n      abstract = false,\n      parent,\n      decodeQuery = true,\n      encodeQuery = true,\n      decodeParams = true,\n      encodeParams = true\n    } = options || {};\n    const {\n      url: relativeURL,\n      path: relativePath,\n      params\n    } = pathSwitcher(path);\n    const query = {};\n\n    new Super(this).assign({\n      name,\n      parentName: parent,\n      abstract: !!abstract,\n      children: new Arr([]),\n      decodeParams: !!decodeParams,\n      decodeQuery: !!decodeQuery,\n      encodeParams: !!encodeParams,\n      encodeQuery: !!encodeQuery,\n      params,\n      query,\n      relativePath,\n      relativeURL\n    });\n\n    const index = isString(path)\n      ? path.indexOf('?')\n      : -1;\n\n    if (index !== -1) {\n      new Str(path)\n        .replace(/&$/)\n        .slice(index + 1)\n        .split('&')\n        .forEach((param) => {\n          const {\n            name,\n            regexp = /[\\s\\S]*/\n          } = resolveParameter(\n            param,\n            'Query parameter must not be an empty string or contain characters besides \"a-zA-Z_$\"! (at makeRoute)',\n            'Query parameter regexp validator must be within parentheses (e.g. :userId(\\\\d+)) and not contain them! (at makeRoute)'\n          );\n\n          query[name] = new RegExp(`^${ regexp.source.replace(/\\\\\\//g, '/') }$`);\n        });\n    }\n\n    if (name === defaultRoute && (\n        new Super(params).count\n        || new Super(query).count\n      )) {\n      throw new Error('Default route must not have URL or query params! (at makeRoute)');\n    }\n  }\n}\n\nconst baseRoute = new Route();\n\nfunction initRouter() {\n  if (initialized) {\n    return;\n  }\n\n  initialized = true;\n  RedirectRoute = (Routes.find(({ name }) => name === redirectRoute) || {}).value;\n  DefaultRoute = (Routes.find(({ name }) => name === defaultRoute) || {}).value;\n\n  if (redirectRoute && !RedirectRoute) {\n    throw new Error(`There is no specified fallback route (\"${ redirectRoute }\")! (at initRouter)`);\n  }\n\n  Routes\n    .forEach((route) => {\n      const {\n        parentName,\n        name\n      } = route;\n      const ParentName = parentName || rootRoute;\n      const { value: parent } = Routes.find(({ name }) => name === ParentName) || {};\n\n      if (!parent) {\n        throw new Error(`No such parent route (\"${ ParentName }\") found for the route (\"${ name }\")! (at initRouter)`);\n      }\n\n      if (!parent.abstract && name !== rootRoute) {\n        throw new Error(`Parent route must be abstract (for \"${ name }\")! (at initRouter)`);\n      }\n\n      if (name !== rootRoute) {\n        route.parentName = ParentName;\n      }\n\n      route.parent = name === rootRoute\n        ? baseRoute\n        : parent;\n    })\n    .forEach((route) => {\n      const {\n        name,\n        parent: {\n          params: parentParams,\n          query: parentQuery,\n          path\n        },\n        params,\n        query,\n        relativeURL,\n        relativePath\n      } = route;\n      let proto = route;\n      let count = 0;\n      let newPath = relativePath;\n      let newURL = '';\n\n      if (isRegExp(path)) {\n        throw new Error('URL regexp route cannot be extended! (at initRouter)');\n      }\n\n      while (proto = proto.parent) {\n        count += new Super(proto.params).count;\n        newPath = proto.relativePath + newPath;\n        newURL = proto.relativeURL + newURL;\n\n        proto.children.push(route);\n      }\n\n      newPath = new RegExp(`^${ newPath.replace(/\\/+/g, '/').replace(/\\/$/, '') || '/' }$`);\n      newURL = isRegExp(relativeURL)\n        ? newPath\n        : (newURL + relativeURL).replace(/\\/+/g, '/').replace(/\\/$/, '') || '/';\n\n      new Super(query).proto(parentQuery);\n      new Super(params)\n        .proto(parentParams)\n        .forEach((value, key, params) => {\n          params[key] += count;\n        });\n\n      if (name === defaultRoute && (\n          new Super(params).count\n          || new Super(query).count\n        )) {\n        throw new Error('Default route must not have URL or query params! (at initRouter)');\n      }\n\n      route.url = newURL;\n      route.validatePath = newPath;\n    });\n\n  changeRoute();\n\n  win.on({\n    popstate() {\n      if (location.href !== initialURL) {\n        pushed = true;\n      }\n\n      if (pushed) {\n        changeRoute();\n      }\n    },\n    click(e) {\n      const closestLink = new Elem(e.target).closest('a');\n\n      if (closestLink.length && closestLink.attr('target') !== '_blank') {\n        const push = !closestLink.hasAttr('replace');\n\n        e.preventDefault();\n\n        forward(closestLink.attr('href') || '', push);\n      }\n    }\n  });\n}\n\nfunction makeRoute(options) {\n  return (Block) => {\n    options = assign({}, options, Block.routerOptions);\n\n    const {\n      name,\n      path,\n      abstract,\n      root,\n      fallbackTo,\n      default: isDefault\n    } = options || {};\n\n    if (initialized) {\n      console.warn('Router was already initialized (at makeRoute)');\n\n      return self;\n    }\n\n    if (wasRoot && root) {\n      throw new Error(`There can't be two root routes (\"${ rootRoute }\" and \"${ name }\")! (at makeRoute)`);\n    }\n\n    if (wasDefault && isDefault) {\n      throw new Error(`There can't be two default routes (\"${ defaultRoute }\" and \"${ name }\")! (at makeRoute)`);\n    }\n\n    if (!name) {\n      throw new Error('State must have a non-empty string \"name\" property! (at makeRoute)');\n    }\n\n    if (Routes.some(({ name: Name }) => Name === name)) {\n      throw new Error('State must have unique \"name\" property! (at makeRoute)');\n    }\n\n    if (root) {\n      wasRoot = true;\n      rootRoute = name;\n      options.parent = null;\n\n      if (fallbackTo) {\n        redirectRoute = fallbackTo;\n      }\n    }\n\n    if (isDefault) {\n      wasDefault = true;\n      defaultRoute = name;\n\n      if (abstract) {\n        throw new Error('Default route can\\'t be abstract! (at makeRoute)');\n      }\n\n      if (isRegExp(path)) {\n        throw new Error('Default route can\\'t have a regexp path! (at makeRoute)');\n      }\n    }\n\n    const route = new Route(options);\n\n    Routes.push(route);\n\n    let unsubscribe;\n    let routeLoaded;\n\n    return class extends Block {\n      /* eslint prefer-template: 0 */\n      static template = '<div'\n        + ` class=\"dwayne-route route-${ name }\"`\n        + ' d-class=\"{{ \\'active-route\\': __isCurrentRoute__ }}\"'\n        + ' d-show=\"{__isCurrentRoute__}\"'\n        + '>'\n        + Block.template\n        + '</div>';\n\n      constructor(opts) {\n        super(opts);\n\n        if (root) {\n          initRouter();\n\n          this.global.router = router;\n        }\n\n        this.__routerInstance__ = route;\n        this.__isCurrentRoute__ = currentRoutes.includes(route);\n        this.args.route = currentRouteParams;\n\n        routeLoaded = false;\n        unsubscribe = subscribe(name, (action) => {\n          const isCurrentRoute = action !== 'leave';\n\n          if (action === 'load') {\n            callBeforeLoad(this);\n          } else if (action === 'leave') {\n            callBeforeLeave(this);\n          }\n\n          if (isCurrentRoute) {\n            this.args.route = currentRouteParams;\n          }\n\n          this.__isCurrentRoute__ = isCurrentRoute;\n        });\n\n        if (this.__isCurrentRoute__) {\n          callBeforeLoad(this);\n        }\n      }\n\n      beforeRemove() {\n        unsubscribe();\n        unsubscribe = null;\n        callBeforeLeave(this);\n        super.beforeRemove();\n      }\n    };\n\n    function callBeforeLoad(route) {\n      if (routeLoaded) {\n        return;\n      }\n\n      const block = {\n        $$: {\n          children: new Arr([route])\n        }\n      };\n      let wasRoute;\n\n      block.$$.children.forEach(function beforeLoad(block) {\n        if (block.__routerInstance__) {\n          if (wasRoute) {\n            return;\n          }\n\n          wasRoute = true;\n        }\n\n        const {\n          name,\n          children,\n          mixins\n        } = block.$$;\n\n        if (children) {\n          children.forEach(beforeLoad);\n        }\n\n        if (mixins) {\n          mixins.forEach(beforeLoad);\n        }\n\n        if (block.beforeLoadRoute) {\n          try {\n            block.beforeLoadRoute();\n          } catch (err) {\n            console.error(`Uncaught error in ${ name }#beforeLeave:`, err);\n          }\n        }\n      });\n\n      routeLoaded = true;\n    }\n\n    function callBeforeLeave(route) {\n      if (!routeLoaded) {\n        return;\n      }\n\n      const block = {\n        $$: {\n          children: new Arr([route])\n        }\n      };\n      let wasRoute;\n\n      block.$$.children.forEach(function beforeLeave(block) {\n        if (block.__routerInstance__) {\n          if (wasRoute) {\n            return;\n          }\n\n          wasRoute = true;\n        }\n\n        const {\n          name,\n          children,\n          mixins\n        } = block.$$;\n\n        if (children) {\n          children.forEach(beforeLeave);\n        }\n\n        if (mixins) {\n          mixins.forEach(beforeLeave);\n        }\n\n        if (block.beforeLeaveRoute) {\n          try {\n            block.beforeLeaveRoute();\n          } catch (err) {\n            console.error(`Uncaught error in ${ name }#beforeLeave:`, err);\n          }\n        }\n      });\n\n      routeLoaded = false;\n    }\n  };\n}\n\nfunction subscribe(name, callback) {\n  subscribers[name] = callback;\n\n  return () => {\n    delete subscribers[name];\n  };\n}\n\nfunction forward(url, push) {\n  changeHistory(url, push);\n  changeRoute();\n}\n\nfunction changeRoute() {\n  const route = findRouteByURL();\n\n  if (route) {\n    ({\n      route: currentRoute,\n      ...currentRouteParams\n    } = route);\n    assign(currentRouteParams, {\n      name: currentRoute.name,\n      host: location.host,\n      hostname: location.hostname,\n      href: location.href,\n      origin: location.origin,\n      pathname: location.pathname,\n      port: location.port,\n      protocol: location.protocol,\n      search: location.search\n    });\n  } else {\n    if (redirectRoute) {\n      const {\n        url,\n        encodeParams,\n        encodeQuery\n      } = RedirectRoute;\n\n      return forward(constructURL('', url, {}, {}, '', {\n        params: encodeParams,\n        query: encodeQuery\n      }));\n    }\n\n    currentRoute = null;\n    currentRouteParams = null;\n  }\n\n  const routesToLeave = new Arr([]);\n  const routesToLoad = new Arr([]);\n  let parent;\n\n  while (currentRoutes.length && !parent) {\n    const route = currentRoutes.pop();\n\n    if (route.children.includes(currentRoute)) {\n      currentRoutes.push(route);\n      parent = route;\n    } else {\n      routesToLeave.push(route);\n    }\n  }\n\n  if (currentRoute) {\n    let currentParent = currentRoute;\n\n    while (currentParent !== parent && currentParent !== baseRoute) {\n      routesToLoad.unshift(currentParent);\n      currentParent = currentParent.parent;\n    }\n\n    currentRoutes.push(...routesToLoad.$);\n  }\n\n  routesToLeave.forEach(({ name }) => {\n    if (subscribers[name]) {\n      subscribers[name]('leave');\n    }\n  });\n  currentRoutes.forEach((route) => {\n    const { name } = route;\n\n    if (subscribers[name]) {\n      subscribers[name](\n        routesToLoad.includes(route)\n          ? 'load'\n          : 'update'\n      );\n    }\n  });\n}\n\nfunction findRouteByURL() {\n  const pathname = location.pathname || '/';\n  const search = location.search || '';\n  let urlParams;\n\n  Routes.some((route) => {\n    if (route.abstract) {\n      return;\n    }\n\n    const {\n      url: routeURL,\n      validatePath,\n      params,\n      query: requiredQuery,\n      decodeParams,\n      decodeQuery\n    } = route;\n    const resolved = resolveURL(decodeQuery);\n    const query = new Super(resolved.query);\n    const eventualParams = {};\n    const match = (\n      (pathname.replace(/\\/$/, '') || '/') +\n      (isRegExp(routeURL) ? search : '')\n    ).match(validatePath);\n\n    if (!match) {\n      return;\n    }\n\n    /* eslint guard-for-in: 0 */\n    for (const param in requiredQuery) {\n      if (!query.hasOwn(param) || !requiredQuery[param].test(query.$[param])) {\n        return;\n      }\n    }\n\n    match.shift();\n\n    for (const param in params) {\n      eventualParams[param] = decode(match[params[param]], decodeParams);\n    }\n\n    urlParams = {\n      route,\n      params: eventualParams,\n      query: query.$,\n      hash: resolved.hash\n    };\n\n    return true;\n  });\n\n  if (urlParams) {\n    return urlParams;\n  }\n\n  if (!defaultRoute) {\n    return;\n  }\n\n  return {\n    route: DefaultRoute,\n    params: {},\n    ...resolveURL(DefaultRoute.decodeQuery)\n  };\n}\n\nfunction decode(string, decodeParams) {\n  return decodeParams\n    ? decodeURIComponent(string)\n    : string;\n}\n\nfunction changeHistory(url, push) {\n  try {\n    history[push ? 'pushState' : 'replaceState'](null, null, url);\n    pushed = true;\n  } catch (err) {\n    location.href = url;\n  }\n}\n\nfunction resolveParameter(param, nameErrorName, valueErrorName) {\n  const nameMatch = param.match(/^[a-z_$]+/i);\n\n  if (!nameMatch) {\n    throw new Error(nameErrorName);\n  }\n\n  const name = nameMatch[0];\n  const value = param.slice(name.length);\n  let regexp;\n\n  if (value && (value.indexOf('(') || value.indexOf(')') !== value.length - 1)) {\n    throw new Error(valueErrorName);\n  }\n\n  if (value) {\n    regexp = new RegExp(value.slice(1, -1));\n  }\n\n  return {\n    name,\n    regexp\n  };\n}\n\nfunction buildURL(name, options = {}) {\n  const { value: route } = Routes.find(({ name: n }) => n === name) || {};\n\n  if (!route) {\n    throw new Error(`There are no routes with name \"${ name }\"! (at router.buildURL)`);\n  }\n\n  const {\n    url,\n    encodeParams,\n    encodeQuery\n  } = route;\n\n  if (isRegExp(url)) {\n    throw new Error('URL can be built only from the string URLs! (at router.buildURL)');\n  }\n\n  const {\n    params = {},\n    query = {},\n    hash = ''\n  } = options;\n\n  return constructURL('', url, params, query, hash, {\n    params: encodeParams,\n    query: encodeQuery\n  });\n}\n\nfunction go(name, options) {\n  forward(buildURL(name, options), true);\n}\n\nfunction goToURL(url) {\n  forward(url, true);\n}\n\nfunction pushURL(url) {\n  changeHistory(url, true);\n}\n\nfunction redirect(name, options) {\n  forward(buildURL(name, options));\n}\n\nfunction redirectToURL(url) {\n  forward(url);\n}\n\nfunction replaceURL(url) {\n  changeHistory(url);\n}\n\nexport { makeRoute, router };\n","import * as statics from './lib/browser';\r\nimport { assign } from './lib/helpers/assign';\r\n\r\nconst { D } = statics;\r\n\r\nassign(D, statics);\r\n\r\ndelete D.D;\r\n\r\nglobal.D = D;\r\n"],"names":["window","global","self","appliedRegExps","elem","id","cls","addClass","attr","value","prop","css","name","html","text","removeClass","removeAttr","removeCSS","canvasGetMethods","canvasRestMethods","constructors","htmlElements","svgElements","voidElements","htmlAllowedTagSymbols","htmlAllowedAttrSymbols","regexpSpecialCharacters","toStringTag","object","toString","call","replace","isArray","isArrayLike","isFunction","length","isInteger","isBoolean","isDate","isDateLike","Date","isNaN","getTime","isElement","test","isFinite","isNumber","Number","Infinity","isIntegerLike","parseInt","isNull","isNil","isNumberLike","isObject","Object","isPlainObject","isPrimitive","proto","getPrototypeOf","constructor","isRegExp","isString","isSymbol","isUndefined","validateCheckExpressions","n","RangeError","v","methods","TypeError","a","d","f","i","o","r","s","D","levelConstructors","k","len","check","iterate","callback","array","iteratedKeys","iterated","key","hasOwnProperty","assign","target","objects","arguments","source","index","dynamicDefineProperties","properties","propertyGenerator","defineProperty","defineProperties","method","undefined","get","set","Symbol","Math","random","toArray","createNewArray","push","numbers","validate","args","options","number","checker","error","Alphabet","alphabet","char","Error","chars","$$","word","keys","token","floor","prototype","string","ranges","split","range","start","charCodeAt","end","String","fromCharCode","Switcher","cases","mode","defaultValue","eventualCases","Case","case","switcher","def","default","ret","val","apply","setPrototypeOf","Function","when","condition","value1","value2","cloneSwitcher","Super","$","deepClone","deep","clone","RegExp","match","sum","count","func","descriptors","create","deepEqual","Boolean","deepEvery","filtered","deepFilter","deepFind","deepMap","IV","tree","deepReduce","deepSome","property","descriptor","props","freeze","getter","isFrozen","replacer","space","unshift","JSON","stringify","max","min","obj","getOwnPropertyDescriptor","getOwnPropertyNames","getOwnPropertySymbols","isContextObject","startKey","setter","reduce","deepAssign","o1","o2","strict","lastIndex","p1","p2","newTree","concat","nul","result","deepForEach","deepForEachEntry","deepFreeze","secret","iterator","Promise","executor","hiddenStatus","hiddenValue","onFulfill","onReject","realPromise","hiddenPromise","status","handled","resolve","reject","proxy","err","onUnhandledRejection","onError","then","onRejected","onFulfilledOrRejected","isFunc","onFulfilled","promise","handle","handler","iterable","toResolve","next","done","console","bind","Func","called","canBeCalled","before","after","sync","contextLocked","context","middleware","afterAll","beforeAll","bindContext","bindArgs","times","slice","lockContext","lockArgs","argsLocked","mark","time","timeEnd","unbindContext","unbindArgs","x","noop","toRadian","PI","toDegree","ln2","LN2","ln10","LN10","Num","toDegrees","acos","asin","atan","asDegrees","cos","abort","aborted","timeout","setTimeout","interval","clearTimeout","log","power","pow","sin","tan","rej","base","fractionDigits","toExponential","digits","toFixed","precision","toPrecision","abs","sqrt","cbrt","ceil","exp","ln","round","sign","rand","Arr","values","indexOfStrict","keyOf","keyOfStrict","separator","join","pop","reverse","shift","forEach","randomIndex","begin","compareFunction","sort","asc","y","deleteCount","items","splice","URL","BlobObject","progress","reader","FileReader","toReject","onprogress","e","onerror","onload","anchor","document","createElement","href","dataURL","setAttribute","click","createObjectURL","blob","blobParts","Blob","htmlSpecials","regexpSpecialsRegexp","Str","toUpperCase","searchString","position","revert","startsWith","escaped","symbol","searchValue","fromIndex","indexOf","lastIndexOf","regexp","str","search","beginSlice","endSlice","substr","indexStart","indexEnd","substring","trim","toLowerCase","parseJSON","json","parse","dates","parsed","submitString","NODE_REGEX_SET","constructCloseTagRegExp","TAG_OPEN_CLOSE","ATTRIBUTE","div","nodeSwitcher","node","selfClosing","attrs","map","parseCharacterData","children","parent","collapseWhiteSpace","type","element","rawTextSwitcher","InternalParsingError","ParsingError","markup","elements","startMarkup","found","globalIndex","find","nearString","throwUnexpectedError","matches","regex","returning","closeMatch","NaN","tagName","innerHTML","textContent","innerText","nativeDocument","emptyDiv","eventSeparator","textProperty","Node","propertyDescriptor","classes","windowsDwayneData","inputElements","svgNS","xmlNS","xlinkNS","xhtmlNS","typeSwitcher","ns","documentElement","namespaceURI","createElementNS","createComment","createTextNode","refSwitcher","filterSwitcher","selector","Elem","is","isElem","elems","innerSwitcher","paddings","borders","outerSwitcher","attrNSSwitcher","closest","isWindow","isHTMLDocument","isDocumentFragment","isCommentOrText","isStyleRule","addDwayneData","list","classList","add","insertAdjacentHTML","style","some","getName","sheet","cssRules","rules","toHyphenCase","insertRule","dwayneData","into","strings","applied","setApplied","np1","getElem","attributes","getAttribute","getAttributeNS","setAttributeNS","first","load","isBroken","canvas","width","height","drawImage","byteString","atob","ab","ArrayBuffer","ia","Uint8Array","blur","pseudo","getComputedStyle","rule","toFind","childNodes","className","cloneNode","parentNode","contains","appliedExpressions","cssText","toCamelCase","getPropertyValue","getPropertyPriority","removeProperty","setProperty","ctx","dataset","encoderOptions","toDataURL","deleteRule","event","eventInit","details","bubbles","cancelable","finalEvent","Event","createEvent","initEvent","dispatchEvent","focus","selectorText","hasAttribute","hasAttributeNS","currentDisplay","previousDisplay","insertBefore","appendChild","firstChild","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","complete","naturalWidth","naturalHeight","images","all","filter","$elem","removeListeners","on","proper","broken","prev","nextSibling","events","listeners","removeListener","listener","allListeners","removeEventListeners","define","has","newListener","addEventListener","delete","removeEventListener","previousSibling","link","removeChild","removeAttribute","removeAttributeNS","remove","created","txt","hasAttr","hasClass","level","validator","validators","errors","formErrors","form","inputs","input","dispatch","inputError","validatorWrap","validity","valid","validationMessage","every","innerHeight","calcCSS","borderTopWidth","borderBottomWidth","boxSizing","paddingTop","paddingBottom","px","innerWidth","borderLeftWidth","borderRightWidth","paddingLeft","paddingRight","outerHeight","marginTop","marginBottom","outerWidth","marginLeft","marginRight","win","doc","body","head","tag","nodeName","getContext","querySelectorAll","parseHTML","markupToJSON","template","content","forEachNode","size","registerDBlock","Block","DBlock","registerDEach","createBlock","DEach","opts","item","itemName","indexName","uid","constructValues","watchArgs","parentElem","uids","scope","UID","$uids","newKeys","newUIDs","evaluate","Item","block","insertAfter","registerDElements","DElements","mixins","watchersToRemove","child","mixin","watchers","watcher","forDElements","newContent","registerDIf","DIf","cond","evaluateAndWatch","if","newValue","registerDItem","DItem","registerDSwitch","DSwitch","wasDefault","equals","registerDText","DText","registerDAttr","Mixin","DAttr","oldValue","registerDBind","DBind","off","registerDClass","DClass","newClasses","registerDElem","DElem","evaluateOnce","registerDHide","DHide","hide","show","registerDOn","DOn","registerDShow","DShow","registerDStyle","DStyle","listenerSwitcher","registerDValidate","DValidate","propSwitcher","setValueSwitcher","inputValue","getValueSwitcher","selected","init","registerDValue","DValue","_value","initialScopeValue","currentValue","setProp","initialElemValue","getProp","isInitialScopeValueNull","isCheckbox","changeScope","option","rootBlocks","rootMixins","isPrototypeOf","attrName","expressionRegExp","onEvalError","expression","evalMode","getting","changed","_blocks","_mixins","Subclass","_this","hasOwn","isInstanceOfBlock","isInstanceOfMixin","warn","_html","deepCloneChildren","_match","escapeRegExp","originalArgs","parentBlock","parentScope","onChange","instance","forDItem","forDEach","store","expr","DwayneStore","localWatchers","newResult","watcherBlock","onRemove","index1","index2","arg","DwayneBlock","isParentSignal","beforeRemove","perm","locals","variable","local","registerBuiltIns","Blocks","blocks","Mixins","initApp","register","svg","localBlocks","localMixins","dBlockMatch","currentMixins","localMatch","blockInstance","Args","constructPrivateScope","scopeValues","DItemFound","privateScope","afterConstruct","afterRender","createMixin","afterUpdate","newChild","transformDIfChildren","ifElse","removeWatchers","constructPublicScope","temp","oldTempWatchers","was","zero","daysOfTheWeekNames","daysOfTheWeekAliases","monthsNames","monthsAliases","date","utc","zeroes","repeat","coeffs","getSwitcher","setSwitcher","Dat","what","now","prefix","formats","format","replaceString","date1","date2","isBefore","started","coeff","w","setTime","toISOString","toLocaleString","valueOf","absoluteURLRegexp","querySwitcher","query","queryParams","param","baseURL","url","params","hash","encodeOptions","encodeParams","encodeQuery","isAbsolute","encode","isEncoded","encodeURIComponent","rawHeaders","headers","notToTransform","withoutBody","data","contentType","defaults","location","origin","uploadMethods","Fetch","config","fetch","request","conf","fetchBeforeMiddleware","header","toPush","dataConfig","urlConfig","xhr","auth","username","password","responseType","withCredentials","XMLHttpRequest","open","setRequestHeader","upload","onabort","ontimeout","onreadystatechange","readyState","response","responseText","parseHeaders","getAllResponseHeaders","statusText","catch","send","METHOD","constructURL","transformData","toCapitalCase","decodeQuery","rawParam","decodeURIComponent","paramName","paramObject","Routes","currentRoutes","subscribers","history","initialURL","initialized","pushed","wasRoot","rootRoute","redirectRoute","RedirectRoute","defaultRoute","DefaultRoute","currentRoute","currentRouteParams","pathSwitcher","path","newURL","newPath","part","resolveParameter","router","Route","abstract","decodeParams","relativeURL","relativePath","baseRoute","initRouter","route","parentName","ParentName","parentParams","parentQuery","validatePath","closestLink","preventDefault","makeRoute","routerOptions","root","fallbackTo","isDefault","Name","unsubscribe","routeLoaded","__routerInstance__","__isCurrentRoute__","includes","subscribe","action","isCurrentRoute","callBeforeLoad","wasRoute","beforeLoad","beforeLoadRoute","callBeforeLeave","beforeLeave","beforeLeaveRoute","forward","changeRoute","findRouteByURL","host","hostname","pathname","port","protocol","routesToLeave","routesToLoad","currentParent","urlParams","routeURL","requiredQuery","resolved","resolveURL","eventualParams","decode","changeHistory","nameErrorName","valueErrorName","nameMatch","buildURL","go","goToURL","pushURL","redirect","redirectToURL","replaceURL","statics"],"mappings":"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","preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}