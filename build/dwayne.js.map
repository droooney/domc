{"version":3,"file":"dwayne.js","sources":["../src/utils/array.js","../src/utils/object.js","../src/utils/defineProperty.js","../src/global.js","../src/utils/objectStatics.js","../src/constants.js","../src/utils/toStringTag.js","../src/utils/is.js","../src/utils/escapeRegex.js","../src/utils/noop.js","../src/utils/setSymbolSpecies.js","../src/utils/toCase.js","../src/helpers/Elem/addAttr.js","../src/helpers/Elem/addCSSProp.js","../src/helpers/Elem/addDataAttr.js","../src/helpers/Elem/addNext.js","../src/helpers/Elem/addParent.js","../src/helpers/Elem/addPrev.js","../src/helpers/Elem/createHideStyleNode.js","../src/helpers/Elem/getAttrNS.js","../src/helpers/Elem/is.js","../src/helpers/Elem/getEvent.js","../src/helpers/Elem/hide.js","../src/helpers/Elem/matches.js","../src/helpers/Elem/remove.js","../src/helpers/Elem/show.js","../src/helpers/Elem/toElem.js","../src/find.js","../src/Elem.js","../src/helpers/Block/calculateArgs.js","../src/helpers/Block/cleanProperty.js","../src/helpers/Block/constructMixinRegex.js","../src/helpers/Block/mixinMatch.js","../src/helpers/Block/transformRestAttrs.js","../src/helpers/Block/executeMixinWatchers.js","../src/helpers/Block/createMixin.js","../src/helpers/Block/calculateAttrs.js","../src/helpers/Block/constructPrivateScope.js","../src/helpers/Block/removeWatcher.js","../src/helpers/Block/constructPublicScope.js","../src/helpers/Block/createBlock.js","../src/helpers/Block/isInstanceOf.js","../src/helpers/Block/remove.js","../src/Mixin.js","../src/helpers/Block/wrap.js","../src/Block.js","../src/blocks/d-block.js","../src/blocks/d-item.js","../src/blocks/d-each.js","../src/blocks/d-elements.js","../src/blocks/d-if.js","../src/blocks/d-switch.js","../src/mixins/d-attr.js","../src/mixins/d-bind.js","../src/mixins/d-class.js","../src/mixins/d-elem.js","../src/mixins/d-hide.js","../src/mixins/d-node.js","../src/mixins/d-on.js","../src/mixins/d-show.js","../src/mixins/d-style.js","../src/mixins/d-value.js","../src/helpers/Block/registerBuiltins.js","../src/elems.js","../src/insertTemplates.js","../src/initApp.js","../src/removeApp.js"],"sourcesContent":["export function collectFromArray(array, callback, initialValue = {}) {\n  iterateArray(array, (value, index) => {\n    callback(initialValue, value, index, array);\n  });\n\n  return initialValue;\n}\n\nexport function findInArray(array, callback) {\n  for (let i = 0, length = array.length; i < length; i++) {\n    const value = array[i];\n\n    if (callback(value, i, array)) {\n      return {\n        key: i,\n        value\n      };\n    }\n  }\n}\n\nexport function iterateArray(array, callback) {\n  for (let i = 0, length = array.length; i < length; i++) {\n    callback(array[i], i, array);\n  }\n}\n\nexport function removeArrayElem(array, elem) {\n  const index = array.indexOf(elem);\n\n  if (index !== -1) {\n    array.splice(index, 1);\n  }\n}\n\nexport function toObjectKeys(array) {\n  return collectFromArray(array, addKey);\n}\n\nfunction addKey(vars, variable) {\n  vars[variable] = true;\n}\n","import { iterateArray } from './array';\n\nconst {\n  hasOwnProperty: has\n} = {};\nconst { slice } = [];\n\nexport function assign(target) {\n  iterateArray(arguments, (source, index) => {\n    if (index) {\n      iterateObject(source, (value, key) => {\n        target[key] = value;\n      });\n    }\n  });\n\n  return target;\n}\n\nexport function collectFromObject(object, callback, initialValue = {}) {\n  iterateObject(object, (value, key) => {\n    callback(initialValue, value, key, object);\n  });\n\n  return initialValue;\n}\n\nexport function except(object) {\n  const newObject = {};\n  const paths = arguments::slice(1);\n\n  iterateObject(object, (value, key) => {\n    if (paths.indexOf(key) === -1) {\n      newObject[key] = value;\n    }\n  });\n\n  return newObject;\n}\n\nexport function hasOwnProperty(object, key) {\n  return object::has(key);\n}\n\nexport function iterateObject(object, callback) {\n  for (const key in object) {\n    if (hasOwnProperty(object, key)) {\n      callback(object[key], key, object);\n    }\n  }\n}\n\nexport function mapObject(object, callback) {\n  const newObject = {};\n\n  iterateObject(object, (value, key) => {\n    newObject[key] = callback(value, key, object);\n  });\n\n  return newObject;\n}\n","import { iterateObject } from './object';\n\n/**\n * @function defineProperties\n * @param {Object} target - Target to define properties for.\n * @param {Object} properties - Object with properties needed to be assign to the target.\n * @returns {void}\n * @description Function for defining properties of an object.\n */\nexport const { defineProperties } = Object;\n\nexport function definePrototypeProperties(target, properties) {\n  iterateObject(properties, (value, name) => {\n    Object.defineProperty(target, name, {\n      value,\n      writable: true,\n      enumerable: false,\n      configurable: true\n    });\n  });\n}\n\n/**\n * @function defineFrozenProperties\n * @param {Object} target - Target to define properties for.\n * @param {Object} properties - Object with properties needed to be assign to the target.\n * @returns {void}\n * @description Function for defining frozen properties of an object.\n */\nexport function defineFrozenProperties(target, properties) {\n  iterateObject(properties, (value, name) => {\n    Object.defineProperty(target, name, {\n      value,\n      writable: false,\n      enumerable: false,\n      configurable: false\n    });\n  });\n}\n","/* eslint no-nested-ternary: 0 */\n/* eslint no-negated-condition: 0 */\nexport default typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n","export const {\n  create,\n  keys,\n  getPrototypeOf: getProto\n} = Object;\n\nexport const setProto = Object.setPrototypeOf || ((target, proto) => {\n  /* eslint no-proto: 0 */\n  target.__proto__ = proto;\n});\n","import { create } from './utils/objectStatics';\n\nexport const HIDE_CLASS = '__dwayne-hidden__';\nexport const SVG_NS = 'http://www.w3.org/2000/svg';\nexport const D_REST_REGEX = /^d-rest(?:#|$)/;\n\nexport const rootBlocks = create(null);\nexport const rootMixins = create(null);\nexport const {\n  document = {},\n  Symbol = {}\n} = global;\n","import { definePrototypeProperties } from './defineProperty';\nimport { Symbol } from '../constants';\n\nconst { toString } = {};\n\n/**\n * @function toStringTag\n * @param {*} object - Object to get toStringTag of.\n * @returns {String} Cut string.\n * @description Cut \"Type\" string from \"[object Type]\" string that gotten from {}.toString,call(object).\n */\nexport function toStringTag(object) {\n  return object::toString().slice(8, -1);\n}\n\nexport function setToStringTag(klass, tag) {\n  if (Symbol.toStringTag) {\n    definePrototypeProperties(klass.prototype, {\n      [Symbol.toStringTag]: tag\n    });\n  }\n}\n","/**\n * @module helpers/checkTypes\n * @private\n * @mixin\n * @description Exports is<Type> methods.\n */\n\nimport { toStringTag } from './toStringTag';\n\n/**\n * @function isArray\n * @public\n * @param {*} value - Value to check if it is an array.\n * @returns {Boolean} If the argument is an array or not.\n * \n * @example\n * isArray([]);                             // true\n * isArray(0);                              // true\n * isArray(document.querySelectorAll('*')); // false\n */\nexport const { isArray } = Array;\n\n/**\n * @function isFunction\n * @public\n * @param {*} value - Value to check if it is a function.\n * @returns {Boolean} If the argument is a function or not.\n * \n * @example\n * isFunction(() => {});            // true\n * \n * const func = () => {};\n * Object.setPrototypeOf(func, {});\n * isFunction(func);                // true\n */\nexport function isFunction(value) {\n  return toStringTag(value) === 'Function' || typeof value === 'function';\n}\n\n/**\n * @function isNil\n * @public\n * @param {*} value - Value to check if it is null or undefined.\n * @returns {Boolean} If the argument is null or undefined or not.\n *\n * @example\n * isNil(null);      // true\n * isNil(undefined); // true\n * isNil(false);     // false\n */\nexport function isNil(value) {\n  /* eslint eqeqeq: 0 */\n  return value == null;\n}\n\n/**\n * @function isString\n * @public\n * @param {*} value - Value to check if it is a string.\n * @returns {Boolean} If the argument is a string or not.\n *\n * @example\n * isString('0');             // true\n * isString(new String('0')); // true\n */\nexport function isString(value) {\n  return toStringTag(value) === 'String';\n}\n","const regexpSpecialCharacters = [\n  '.',\n  '+', '*', '?',\n  '(', ')',\n  '[', ']',\n  '{', '}',\n  '<', '>',\n  '^', '$',\n  '!',\n  '=',\n  ':',\n  '-',\n  '|',\n  ',',\n  '\\\\'\n];\nconst regexpSpecialsRegexp = new RegExp(\n  regexpSpecialCharacters\n    .map((s) => `\\\\${ s }`)\n    .join('|'),\n  'g'\n);\n\nexport function escapeRegex(string) {\n  return string.replace(regexpSpecialsRegexp, '\\\\$&');\n}\n","export function noop() {}\n","import { defineProperties } from './defineProperty';\nimport { Symbol } from '../constants';\n\nexport function setSymbolSpecies(klass, species) {\n  if (Symbol.species) {\n    defineProperties(klass, {\n      [Symbol.species]: {\n        get() {\n          return species;\n        }\n      }\n    });\n  }\n}\n","const DASHED_SYMBOL_REGEX = /-[a-z]/g;\nconst UPPERCASED_SYMBOL_REGEX = /[A-Z]/g;\n\nexport function toCamelCase(value) {\n  return value.replace(DASHED_SYMBOL_REGEX, capitalize);\n}\n\nexport function toHyphenCase(value) {\n  return value.replace(UPPERCASED_SYMBOL_REGEX, hyphenize);\n}\n\nfunction capitalize(match) {\n  return match[1].toUpperCase();\n}\n\nfunction hyphenize(match) {\n  return `-${ match[0].toLowerCase() }`;\n}\n","export function addAttr(attrs, attr) {\n  attrs[attr.name] = attr.value;\n}\n","import { toCamelCase } from '../../utils';\n\nconst CSS_PROP_VALUE_SEPARATOR_REGEX = /: /;\n\nexport function addCSSProp(css, value) {\n  if (value) {\n    const property = value.split(CSS_PROP_VALUE_SEPARATOR_REGEX);\n\n    css[toCamelCase(property[0])] = property[1];\n  }\n}\n","export function addDataAttr(data, value, key) {\n  data[key] = value;\n}\n","export function addNext(add, elem) {\n  add(elem.nextSibling);\n}\n","export function addParent(add, elem) {\n  add(elem.parentNode);\n}\n","export function addPrev(add, elem) {\n  add(elem.previousSibling);\n}\n","import { HIDE_CLASS } from '../../constants';\n\nexport function createHideStyleNode(head) {\n  const style = head.find(`style#${ HIDE_CLASS }`);\n\n  if (style.length) {\n    return;\n  }\n\n  head\n    .create('style')\n    .prop('id', HIDE_CLASS)\n    .text(`.${ HIDE_CLASS }{display:none !important;}`);\n}\n","import { Elem } from '../../Elem';\n\nconst X_LINK_ATTR_FIND_REGEX = /^xlink:\\w/;\nconst X_LINK_ATTR_REPLACE_REGEX = /^xlink:/;\nconst XML_NS = 'http://www.w3.org/2000/xmlns/';\nconst X_LINK_NS = 'http://www.w3.org/1999/xlink';\nconst Null = {\n  ns: null\n};\n\nexport function getAttrNS(attr, elem) {\n  const isXmlNs = attr === 'xmlns';\n\n  if (isXmlNs || attr === 'xmlns:xlink') {\n    if (elem.nodeName !== 'SVG') {\n      return Null;\n    }\n\n    return {\n      ns: XML_NS,\n      name: isXmlNs\n        ? 'xmlns'\n        : 'xlink'\n    };\n  }\n\n  if (X_LINK_ATTR_FIND_REGEX.test(attr)) {\n    if (!new Elem(elem).closest('svg').length) {\n      return Null;\n    }\n\n    return {\n      ns: X_LINK_NS,\n      name: attr.replace(X_LINK_ATTR_REPLACE_REGEX, '')\n    };\n  }\n\n  return Null;\n}\n","import { toStringTag, isArray } from '../../utils';\nimport { Elem } from '../../Elem';\n\nconst HTML_COLLECTION_REGEX = /^(HTMLCollection|NodeList)$/;\nconst DOCUMENT_REGEX = /Document$/;\nconst ELEMENT_REGEX = /Element$/;\n\nexport function isDocument(value) {\n  return DOCUMENT_REGEX.test(toStringTag(value));\n}\n\nexport function isElem(value) {\n  return value instanceof Elem;\n}\n\nexport function isElementsCollection(value) {\n  return (\n    HTML_COLLECTION_REGEX.test(toStringTag(value))\n    || isElem(value)\n    || isArray(value)\n  );\n}\n\nexport function isValidNode(value) {\n  const tag = toStringTag(value);\n\n  return (\n    ELEMENT_REGEX.test(tag)\n    || DOCUMENT_REGEX.test(tag)\n    || tag === 'Text'\n    || tag === 'DocumentFragment'\n    || tag === 'Comment'\n  );\n}\n","import { assign, toStringTag } from '../../utils';\nimport { isDocument } from './is';\n\nconst EVENT_REGEX = /Event$/;\n\nexport function getEvent(event, bubbles, cancelable, realDetails, elem) {\n  let finalEvent = event;\n\n  if (!EVENT_REGEX.test(toStringTag(finalEvent))) {\n    try {\n      finalEvent = new Event(finalEvent, { bubbles, cancelable });\n      assign(finalEvent, realDetails);\n    } catch (err) {\n      const document = isDocument(elem)\n        ? elem\n        : elem.ownerDocument;\n\n      finalEvent = document.createEvent('Event');\n      finalEvent.initEvent(event, bubbles, cancelable);\n\n      assign(finalEvent, realDetails);\n    }\n  }\n\n  return finalEvent;\n}\n","import { createHideStyleNode } from './createHideStyleNode';\nimport { HIDE_CLASS } from '../../constants';\nimport { Elem } from '../../Elem';\n\nexport function hide(elem) {\n  createHideStyleNode(new Elem(elem.ownerDocument.head));\n  new Elem(elem).addClass(HIDE_CLASS);\n}\n","import { isDocument } from './is';\n\nconst { indexOf } = [];\n\nexport function getMatchesFunction(elem) {\n  return (\n    elem.matches\n    || elem.matchesSelector\n    || elem.webkitMatchesSelector\n    || elem.mozMatchesSelector\n    || elem.msMatchesSelector\n    || elem.oMatchesSelector\n    || matches\n  );\n}\n\nfunction matches(selector) {\n  const document = isDocument(this)\n    ? this\n    : this.ownerDocument;\n\n  return document.querySelectorAll(selector)::indexOf(this) !== -1;\n}\n","export function remove(elem) {\n  const parent = elem.parentNode;\n\n  if (parent) {\n    parent.removeChild(elem);\n  }\n}\n","import { HIDE_CLASS } from '../../constants';\nimport { Elem } from '../../Elem';\n\nexport function show(elem) {\n  new Elem(elem).removeClass(HIDE_CLASS);\n}\n","import { isElem } from './is';\nimport { Elem } from '../../Elem';\n\nexport function toElem(elem) {\n  return isElem(elem)\n    ? elem\n    : new Elem(elem);\n}\n","import { Elem } from './Elem';\nimport { document } from './constants';\n\n/**\n * @function find\n * @public\n * @param {String} selector - Selector to find.\n * @param {Element|Node} [base = document] - Base to find in.\n * @returns {Elem} New instance of Elem.\n * @description Synonym for\n * [Document#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Document/querySelectorAll}.\n */\nexport function find(selector, base = document) {\n  return new Elem(base.querySelectorAll(String(selector)));\n}\n","import {\n  isNil, isString,\n  definePrototypeProperties,\n  collectFromArray, collectFromObject,\n  iterateArray, iterateObject,\n  toHyphenCase, setSymbolSpecies,\n  setToStringTag, setProto\n} from './utils';\nimport {\n  isDocument, isValidNode, getMatchesFunction,\n  addAttr, addCSSProp, addDataAttr,\n  addNext, addParent, addPrev,\n  toElem, isElementsCollection,\n  getAttrNS, getEvent, hide, show, remove\n} from './helpers/Elem';\nimport { SVG_NS } from './constants';\nimport { find } from './find';\n\n/**\n * @typedef {String} ElemEventString\n * @public\n * @description A string containing events separated by a comma with zero or more spaces or just spaces.\n */\n\n/**\n * @callback ElemListener\n * @public\n * @param {Event} e - Fired event.\n * @param {Element} elem - Element on which the listener was called.\n * @param {Number} index - Index of the element on which the listener was called.\n */\n\n/**\n * @callback ElemRemoveListeners\n * @public\n * @param {...ElemEventString} events - If at least one argument present only removes event listeners specified\n * by the events in the arguments.\n */\n\n/**\n * @callback IterationCallback\n * @public\n * @param {Element|Node} node - Iteration element.\n * @param {Number} index - Iteration index.\n * @param {Elem} elem - Initial set.\n */\n\n/**\n * @callback ElemMethod\n * @public\n * @this Elem\n */\n\nconst EVENT_SEPARATOR_REGEX = /(?:,| ) */;\nconst CSS_STYLES_SEPARATOR_REGEX = /; ?/;\nconst CSS_IMPORTANT_REGEX = / ?!important$/;\nconst XHTML_NS = 'http://www.w3.org/1999/xhtml';\nconst emptyCollection = [];\n\n/**\n * @class Elem\n * @extends Array.<Element|Node>\n * @public\n * @param {Element|Element[]} [elem = []] - An element or an array of elements to wrap.\n * @returns {Elem} Instance of Elem.\n * @description Wrap of an elements set.\n *\n * @example\n * new Elem(document.body);\n * new Elem(document.querySelectorAll('.cls'));\n * new Elem(document.getElementsByClassName('cls'));\n */\nclass Elem extends Array {\n  /**\n   * @method Elem.addMethods\n   * @public\n   * @param {String|Object.<String, ElemMethod>} methodName - Name of the method or object of\n   * method names and methods.\n   * @param {ElemMethod} [method] - If the first argument is a string this should be the method itself.\n   * @returns {typeof Elem}\n   */\n  static addMethods(methodName, method) {\n    if (arguments.length >= 2) {\n      methodName = { [methodName]: method };\n    }\n\n    definePrototypeProperties(this.prototype, methodName);\n\n    return this;\n  }\n\n  constructor(elem = emptyCollection) {\n    super();\n\n    if (!isElementsCollection(elem)) {\n      elem = [elem];\n    }\n\n    setProto(this, Elem.prototype);\n\n    iterateArray(elem, (elem) => {\n      if (!isElementsCollection(elem)) {\n        elem = [elem];\n      }\n\n      iterateArray(elem, (elem) => {\n        if (!this.includes(elem) && isValidNode(elem)) {\n          this.push(elem);\n        }\n      });\n    });\n  }\n\n  /**\n   * @method Elem#add\n   * @public\n   * @param {...(Elem|Element|Element[])} elements - Each argument is a Elem, or Element, or array of Elements.\n   * @returns {Elem} Returns this.\n   * @description Method for adding new elements to the set.\n   *\n   * @example\n   * elem1.find('.cls1')\n   *   .add(elem2.find('.cls2'))\n   *   .hide();\n   */\n  add() {\n    const elems = this.slice();\n\n    iterateArray(arguments, (elem) => {\n      if (!isElementsCollection(elem)) {\n        elem = [elem];\n      }\n\n      iterateArray(elem, (elem) => {\n        if (!elems.includes(elem) && isValidNode(elem)) {\n          elems.push(elem);\n        }\n      });\n    });\n\n    return elems;\n  }\n\n  /**\n   * @method Elem#addClass\n   * @public\n   * @param {...String} classes - Classes to add.\n   * @returns {Elem} Returns this.\n   * @description Method for adding classes to the all the elements in the set.\n   *\n   * @example\n   * elem.addClass('red', 'round');\n   */\n  addClass() {\n    return this.forEach((elem) => {\n      const list = elem.classList;\n\n      iterateArray(arguments, (cls) => list.add(cls));\n    });\n  }\n\n  /**\n   * @method Elem#attr\n   * @public\n   * @param {String|Object.<String, String>} [attr] - Name of the attribute to get or\n   * an object of the format { [attrName]: value, ... } to set attributes.\n   * @param {String} [value] - If the first argument is a string\n   * it should be a value to set for that attribute.\n   * @returns {Object|String|Elem} If no arguments passed, D-Wrap of attributes of the first element in the set\n   * returned, if 1 string argument is passed the value of the attribute of the first element in the set\n   * returned otherwise returns this.\n   * @description Method for getting/setting attributes.\n   *\n   * @example\n   * elem.attr('attr1', 'value1'); // attribute attr1 set to 'value1' and this returned\n   * elem.attr('attr1');           // 'value1'\n   * elem.attr({\n   *   attr1: 'value3',            // attribute attr1 set to 'value3'\n   *   attr2: 'value2'             // attribute attr2 set to 'value2'\n   * });                           // this returned\n   * elem.attr();                  // { attr1: 'value3', attr2: 'value2' }\n   */\n  attr(attr, value) {\n    const elem = this[0];\n\n    if (!arguments.length) {\n      if (!elem) {\n        return {};\n      }\n\n      return collectFromArray(elem.attributes, addAttr);\n    }\n\n    if (arguments.length <= 1 && isString(attr)) {\n      if (!elem) {\n        return null;\n      }\n\n      const {\n        ns,\n        name\n      } = getAttrNS(attr, elem);\n\n      return ns\n        ? elem.getAttributeNS(ns, name)\n        : elem.getAttribute(attr);\n    }\n\n    if (arguments.length >= 2) {\n      attr = { [attr]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(attr, (value, key) => {\n        if (isNil(value) || value === false) {\n          return new Elem(elem).removeAttr(key);\n        }\n\n        value = value === true ? '' : value;\n\n        const { ns } = getAttrNS(key, elem);\n\n        if (ns) {\n          elem.setAttributeNS(ns, key, value);\n        } else {\n          elem.setAttribute(key, value);\n        }\n      });\n    });\n  }\n\n  /**\n   * @method Elem#children\n   * @public\n   * @returns {Elem} D-Wrap of the children of the first element in the set.\n   * @description Method for getting element's children.\n   *\n   * @example\n   * const children = elem.children();\n   */\n  children() {\n    return new Elem(this.length ? this[0].childNodes : []);\n  }\n\n  /**\n   * @method Elem#closest\n   * @public\n   * @param {String} selector - See the link.\n   * @returns {Elem} Set of the closest elements.\n   * @description Synonym for\n   * [Element#closest]{@link https://developer.mozilla.org/en/docs/Web/API/Element/closest}.\n   */\n  closest(selector) {\n    return this.collect((add, elem) => {\n      while (elem) {\n        if (new Elem(elem).is(selector)) {\n          return add(elem);\n        }\n\n        elem = elem.parentNode;\n      }\n    });\n  }\n\n  collect(callback) {\n    const elements = [];\n    const cb = ::elements.push;\n\n    this.forEach((elem, index) => {\n      callback(cb, elem, index, this);\n    });\n\n    return new Elem(elements);\n  }\n\n  /**\n   * @method Elem#contains\n   * @public\n   * @param {Elem|Element} element - Element to find out if it's within the first element in the set.\n   * @returns {Boolean} Returns if the argument within this element.\n   * @description Method is extension for\n   * [Node#contains]{@link https://developer.mozilla.org/en/docs/Web/API/Node/contains}.\n   *\n   * @example\n   * elem.contains(elem2);   // true|false\n   */\n  contains(element) {\n    const parent = this[0];\n    const child = toElem(element)[0];\n\n    return !parent || !child\n      ? false\n      : parent.contains(child);\n  }\n\n  /**\n   * @method Elem#create\n   * @public\n   * @param {String} type - Type of created element. If type is \"#text\" a text node is created.\n   * If type is \"#comment\" a comment node is created.\n   * @returns {Elem} New instance of Elem - wrap of the created elements.\n   * @description Method for creating elements inside this element.\n   * If this element is not an Element the element is just created.\n   *\n   * @example\n   * elem.create('div');\n   */\n  create(type) {\n    return this.collect((add, elem) => {\n      let el = null;\n      const isText = type === '#text';\n      const document = isDocument(elem)\n        ? elem\n        : elem.ownerDocument;\n\n      if (isText || type === '#comment') {\n        el = isText\n          ? document.createTextNode('')\n          : document.createComment('');\n      } else {\n        el = type === 'svg'\n          ? document.createElementNS(SVG_NS, type)\n          : document.createElement(type);\n      }\n\n      if (!isDocument(elem)) {\n        new Elem(el).into(elem);\n      }\n\n      add(el);\n    });\n  }\n\n  /**\n   * @method Elem#css\n   * @public\n   * @param {String|Object.<String, String>} [property] - Name of the property to get or\n   * an object of the format { [property]: value, ... } to set styles.\n   * @param {String} [value] - If the first argument is a string it should be a value to set for that property.\n   * @returns {Object|String|Elem} If no arguments passed, D-Wrap of css styles of the element returned,\n   * if 1 string argument is passed the value of the property returned otherwise returns this.\n   * @description Method for getting/setting styles. Supports !important.\n   *\n   * @example\n   * elem.css('display', 'none'); // display set to 'none' and this returned\n   * elem.css('display');         // 'none'\n   * elem.css({\n   *   display: 'inline',         // display set to 'inline'\n   *   cursor: 'pointer'          // cursor set to 'pointer'\n   * });                          // this returned\n   * elem.css();                  // { display: 'none', cursor: 'pointer' }\n   */\n  css(property, value) {\n    const { style } = this[0] || {};\n\n    if (!arguments.length) {\n      if (!style) {\n        return {};\n      }\n\n      return collectFromArray(style.cssText.split(CSS_STYLES_SEPARATOR_REGEX), addCSSProp);\n    }\n\n    if (arguments.length <= 1 && isString(property)) {\n      if (!style) {\n        return '';\n      }\n\n      property = toHyphenCase(property);\n\n      return style.getPropertyValue(property) + (style.getPropertyPriority(property) ? ' !important' : '');\n    }\n\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(property, (value, property) => {\n        property = toHyphenCase(property);\n\n        if (isNil(value) || value === false) {\n          return new Elem(elem).removeCSS(property);\n        }\n\n        elem.style.removeProperty(property);\n        elem.style.setProperty(\n          property,\n          value.replace(CSS_IMPORTANT_REGEX, ''),\n          CSS_IMPORTANT_REGEX.test(value) ? 'important' : ''\n        );\n      });\n    });\n  }\n\n  /**\n   * @method Elem#data\n   * @public\n   * @param {String|Object.<String, String>} [key] - Name of the data attribute (without data- prefix)\n   * to get or an object of the format { [attrName]: value, ... } to set attributes.\n   * @param {String} [value] - If the first argument is a string it should be a value to set for that attribute.\n   * @returns {Object|String|Elem} If no arguments passed, D-Wrap of dataset of the element returned,\n   * if 1 string argument is passed the value of the data attribute returned otherwise returns this.\n   * @description Method for getting/setting data attributes. See\n   * [HTMLElement#dataset]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/dataset}.\n   *\n   * @example\n   * elem.data('someKey1', 'value'); // attribute data-some-key1 set to 'value1' and this returned\n   * elem.data('someKey1');          // 'value1'\n   * elem.data({\n   *   someKey1: 'value3',           // attribute data-some-key1 set to 'value3'\n   *   someKey2: 'value2'            // attribute data-some-key2 set to 'value2'\n   * });                             // this returned\n   * elem.data();                    // { someKey1: 'value3', someKey2: 'value2' }\n   */\n  data(key, value) {\n    const { dataset } = this[0] || {};\n\n    if (!arguments.length) {\n      if (!dataset) {\n        return {};\n      }\n\n      return collectFromObject(dataset, addDataAttr);\n    }\n\n    if (arguments.length === 1 && isString(key)) {\n      if (!dataset) {\n        return;\n      }\n\n      return dataset[key];\n    }\n\n    if (arguments.length >= 2) {\n      key = { [key]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(key, (value, key) => {\n        elem.dataset[key] = value;\n      });\n    });\n  }\n\n  /**\n   * @method Elem#dispatch\n   * @public\n   * @param {String|Event} event - Event or a string (new Event(event) is created).\n   * @param {Object} [details = {}] - Object that is assigned to the event.\n   * @returns {Elem} Returns this.\n   * @see https://developer.mozilla.org/en/docs/Web/API/Event/Event\n   * @description Synonym for\n   * [EventTarget#dispatchEvent]{@link https://developer.mozilla.org/en/docs/Web/API/EventTarget/dispatchEvent}.\n   *\n   * @example\n   * elem.dispatch('click');\n   * elem.dispatch('click', { bubbles: false, cancellable: false, data: 1 });\n   * elem.dispatch(new CustomEvent('custom-event'));\n   */\n  dispatch(event, details = {}) {\n    const {\n      bubbles = true,\n      cancelable = true,\n      ...realDetails\n    } = details;\n\n    return this.forEach((elem) => {\n      elem.dispatchEvent(getEvent(\n        event,\n        bubbles,\n        cancelable,\n        realDetails,\n        elem\n      ));\n    });\n  }\n\n  /**\n   * @method Elem#elem\n   * @public\n   * @param {Number} [index = 0] - Index of the element of the set to get. Negative index means elem.length + index.\n   * @returns {Elem} New instance of Elem.\n   *\n   * @example\n   * elem.elem(1); // a wrap of the element in the set that has index 1\n   * elem.elem();  // a wrap of the element in the set that has index 0\n   */\n  elem(index = 0) {\n    if (index < 0) {\n      index = this.length + index;\n    }\n\n    return new Elem(this[index]);\n  }\n\n  /**\n   * @method Elem#filter\n   * @public\n   * @param {IterationCallback|String} filter - Filter function or a selector.\n   * @returns {Elem} New instance of Elem.\n   * @description Method for filtering elements.\n   *\n   * @example\n   * elem.filter((elem) => new Elem(elem).closest('.parent'));\n   */\n  filter(filter) {\n    if (isString(filter)) {\n      const selector = filter;\n\n      filter = (elem) => (\n        new Elem(elem).is(selector)\n      );\n    }\n\n    return this.collect((add, elem, index) => {\n      if (filter(elem, index, this)) {\n        add(elem);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#find\n   * @public\n   * @param {String} selector - Selector to find.\n   * @returns {Elem} New instance of Elem.\n   * @description Synonym for\n   * [Element#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Element/querySelectorAll}.\n   */\n  find(selector) {\n    return this.collect((add, elem) => {\n      add(find(selector, elem));\n    });\n  }\n\n  /**\n   * @method Elem#forEach\n   * @public\n   * @param {IterationCallback} callback - Called on each iteration.\n   * @returns {Elem} Returns this.\n   * @description Method for iterating over the set.\n   *\n   * @example\n   * find('.cls').forEach((element, index, set) => {\n   *   // do something\n   * });\n   */\n  forEach(callback) {\n    iterateArray(this, (value, key) => {\n      callback(value, key, this);\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Elem#hasAttr\n   * @public\n   * @param {String} attr - Name of the attribute.\n   * @returns {Boolean} If the first element in the set has the attribute.\n   * @description Method that returns if the first element in the set has the attribute or not.\n   *\n   * @example\n   * elem.attr('attr', 'value').hasAttr('attr'); // true\n   * elem.removeAttr('attr').hasAttr('attr');    // false\n   */\n  hasAttr(attr) {\n    const elem = this[0];\n\n    if (!elem) {\n      return false;\n    }\n\n    const { ns } = getAttrNS(attr, elem);\n\n    return ns\n      ? elem.hasAttributeNS(ns, attr)\n      : elem.hasAttribute(attr);\n  }\n\n  /**\n   * @method Elem#hasClass\n   * @public\n   * @param {String} cls - Name of the class.\n   * @returns {Boolean} If the first element in the set has the class.\n   * @description Method that returns if the first element in the set has the class or not.\n   *\n   * @example\n   * elem.addClass('cls').hasClass('cls');    // true\n   * elem.removeClass('cls').hasClass('cls'); // false\n   */\n  hasClass(cls) {\n    const elem = this[0];\n\n    return elem\n      ? elem.classList.contains(cls)\n      : false;\n  }\n\n  /**\n   * @method Elem#hide\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Hides all elements in the set.\n   *\n   * @example\n   * elem.hide();\n   */\n  hide() {\n    return this.forEach(hide);\n  }\n\n  /**\n   * @method Elem#html\n   * @public\n   * @param {String|*} [html] - HTML to write instead of current HTML.\n   * @returns {Elem|String} If no arguments passed HTML of the first element in the set returned.\n   * Otherwise all elements HTML in the set are set to the html argument.\n   * @description Gets or sets HTML.\n   *\n   * @example\n   * elem.html('<div>1</div>');\n   * elem.html(); // '<div>1</div>'\n   */\n  html(html) {\n    if (!arguments.length) {\n      const elem = this[0];\n\n      return elem\n        ? elem.innerHTML\n        : '';\n    }\n\n    return this.forEach((elem) => {\n      elem.innerHTML = html;\n    });\n  }\n\n  includes(elem) {\n    return this.indexOf(elem) !== -1;\n  }\n\n  /**\n   * @method Elem#insertAfter\n   * @public\n   * @param {Elem|Element} element - Element to insert this element after.\n   * @returns {Elem} Returns this.\n   * @description Puts the elements from the set after the element specified by the argument.\n   * The elements remain in the same order.\n   *\n   * @example\n   * elem.insertAfter(elem2);\n   * elem.insertAfter(document.getElementById('id'));\n   * elem.insertAfter('#id div.c1');\n   */\n  insertAfter(element) {\n    element = toElem(element).elem(0);\n\n    let parent = element.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    element = element.next()[0];\n    parent = parent[0];\n\n    return this.forEach((elem) => {\n      if (elem === element) {\n        element = element.nextSibling;\n\n        return;\n      }\n\n      if (element) {\n        parent.insertBefore(elem, element);\n      } else {\n        parent.appendChild(elem);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#insertBefore\n   * @public\n   * @param {Elem|Element} element - Element to insert this element before.\n   * @returns {Elem} Returns this.\n   * @description Puts the elements from the set before the element specified by the argument.\n   * The elements remain in the same order.\n   *\n   * @example\n   * elem.insertBefore(elem2);\n   * elem.insertBefore(document.getElementById('id'));\n   * elem.insertBefore('#id div.c1');\n   */\n  insertBefore(element) {\n    element = toElem(element).elem(0);\n\n    let parent = element.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    element = element[0];\n    parent = parent[0];\n\n    return this.forEach((elem) => {\n      parent.insertBefore(elem, element);\n    });\n  }\n\n  /**\n   * @method Elem#into\n   * @public\n   * @param {Elem|Element} element - Element to put this elements into.\n   * @param {Boolean} end - If the elements should be inserted to the end. If false they are inserted to the start.\n   * @returns {Elem} Returns this.\n   * @description Method is similar to\n   * [Node#appendChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/appendChild}.\n   *\n   * @example\n   * elem.into(elem2);\n   * elem.into(document.getElementById('id'));\n   * elem.into('#id div.c1');\n   */\n  into(element, end = true) {\n    element = toElem(element)[0];\n\n    if (!element) {\n      return this;\n    }\n\n    if (!end && element.firstChild) {\n      for (let i = this.length - 1; i >= 0; i--) {\n        element.insertBefore(this[i], element.firstChild);\n      }\n\n      return this;\n    }\n\n    return this.forEach((elem) => {\n      element.appendChild(elem);\n    });\n  }\n\n  /**\n   * @method Elem#is\n   * @public\n   * @param {String} selector\n   * @returns {Boolean} If the first element in the set matches the selector.\n   * @description Synonym for\n   * [Element#matches]{@link https://developer.mozilla.org/en/docs/Web/API/Element/matches}.\n   *\n   * @example\n   * elem.addClass('cls');\n   * elem.is('.cls');         // true\n   *\n   * elem.removeClass('cls');\n   * elem.is('.cls');         // false\n   */\n  is(selector) {\n    if (!this.length) {\n      return false;\n    }\n\n    const elem = this[0];\n    const matches = getMatchesFunction(elem);\n\n    return elem::matches(selector);\n  }\n\n  /**\n   * @method Elem#name\n   * @public\n   * @returns {String|void} nodeName (lowercased) of the first element in the set.\n   * @description Method for getting name of the first element in the set.\n   *\n   * @example\n   * elem.create('div').name() // 'div'\n   */\n  name() {\n    const elem = this[0];\n\n    return elem\n      ? elem.nodeName.toLowerCase()\n      : undefined;\n  }\n\n  /**\n   * @method Elem#next\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Method for finding next element to each element in the set.\n   *\n   * @example\n   * elem.next(); // finds next element to each element in the set\n   */\n  next() {\n    return this.collect(addNext);\n  }\n\n  /**\n   * @method Elem#on\n   * @public\n   * @param {ElemEventString|Object.<ElemEventString|ElemListener>} event - Either a {@link ElemEventString} string\n   * or an object with event keys (a key is also ElemEventString) and listeners values.\n   * @param {ElemListener} [listener] - If the first argument is a string it must be a listener function for\n   * specified event(s).\n   * @returns {ElemRemoveListeners} Function that takes optional event argument.\n   * @description Adds event listeners for all the elements in the set.\n   *\n   * @example\n   * elem.on(\n   *   'change, input',\n   *   'input, select, textarea, datalist, keygen, output',\n   *   (e, elem, index) => console.log(elem.value)\n   * );\n   * elem.on(\n   *   'change, input',\n   *   (e, elem, index) => console.log(elem.value)\n   * );\n   * elem.on(\n   *   {\n   *     'change, input': (e, elem, index) => console.log(elem.value),\n   *     'blur': () => console.log('blur')\n   *   },\n   *   'input, select, textarea, datalist, keygen, output'\n   * );\n   *\n   * const removeListeners = elem.on({\n   *   'change, input': (e, elem, index) => console.log(elem.value),\n   *   'blur': () => console.log('blur')\n   * });\n   *\n   * removeListeners('click');\n   * removeListeners('blur, change');\n   * removeListeners('blur, change', 'input');\n   * removeListeners();\n   */\n  on(event, listener) {\n    if (isString(event)) {\n      event = { [event]: listener };\n    }\n\n    const newEvents = {};\n    const allListeners = {};\n\n    iterateObject(event, (listener, event) => {\n      iterateArray(event.split(EVENT_SEPARATOR_REGEX), (event) => {\n        (newEvents[event] = newEvents[event] || []).push(listener);\n      });\n    });\n\n    this.forEach((elem) => {\n      iterateObject(newEvents, (listeners, event) => {\n        iterateArray(listeners, (listener) => {\n          elem.addEventListener(event, listener, false);\n          (allListeners[event] = allListeners[event] || []).push(() => {\n            elem.removeEventListener(event, listener);\n          });\n        });\n      });\n    });\n\n    return function removeEventListeners(event) {\n      if (arguments.length) {\n        iterateArray(arguments, (event) => {\n          iterateArray(event.split(EVENT_SEPARATOR_REGEX), (event) => {\n            const removeListeners = allListeners[event];\n\n            if (removeListeners) {\n              iterateArray(removeListeners, (removeListener) => removeListener());\n\n              delete allListeners[event];\n            }\n          });\n        });\n      } else {\n        iterateObject(allListeners, (removeListeners, event) => {\n          iterateArray(removeListeners, (removeListener) => removeListener());\n\n          delete allListeners[event];\n        });\n      }\n    };\n  }\n\n  /**\n   * @method Elem#parent\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Method returns wrap of the set of the parent elements of each element in the set.\n   */\n  parent() {\n    return this.collect(addParent);\n  }\n\n  /**\n   * @method Elem#prev\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Method for finding previous element to each element in the set.\n   *\n   * @example\n   * elem.prev(); // finds previous element to each element in the set\n   */\n  prev() {\n    return this.collect(addPrev);\n  }\n\n  /**\n   * @method Elem#prop\n   * @public\n   * @param {String|Object.<String, *>} property - Either a string of a property or an assigned object.\n   * @param {*} [value] - If a property parameter is a string\n   * this has to be an assigned value if it's present.\n   * @returns {Elem|*} Returns this if it's setter or a value if getter.\n   * @description Method that is either a property getter for the first element in the set\n   * or a setter for every element in the set.\n   *\n   * @example\n   * elem.prop('draggable', false);\n   * elem.prop('draggable'); // false\n   */\n  prop(property, value) {\n    if (arguments.length <= 1 && isString(property)) {\n      return this[0] ? this[0][property] : undefined;\n    }\n\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(property, (value, prop) => {\n        elem[prop] = value;\n      });\n    });\n  }\n\n  /**\n   * @method Elem#remove\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Removes all the elements from the set from the document.\n   * Note: it doesn't remove them from the set so watch out for the memory leaks.\n   *\n   * @example\n   * elem.remove();\n   */\n  remove() {\n    return this.forEach(remove);\n  }\n\n  /**\n   * @method Elem#removeAttr\n   * @public\n   * @param {...String} attributes - Attributes to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the attributes from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeAttr('foo', 'bar', 'baz');\n   */\n  removeAttr() {\n    return this.forEach((elem) => {\n      iterateArray(arguments, (attr) => {\n        const { ns } = getAttrNS(attr, elem);\n\n        if (ns) {\n          elem.removeAttributeNS(ns, attr);\n        } else {\n          elem.removeAttribute(attr);\n        }\n      });\n    });\n  }\n\n  /**\n   * @method Elem#removeClass\n   * @public\n   * @param {...String} classes - Classes to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the classes from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeClass('foo', 'bar', 'baz');\n   */\n  removeClass() {\n    return this.forEach((elem) => {\n      const list = elem.classList;\n\n      iterateArray(arguments, (cls) => list.remove(cls));\n    });\n  }\n\n  /**\n   * @method Elem#removeCSS\n   * @public\n   * @param {...String} props - CSS properties to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the CSS properties from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeCSS('display', 'position', 'margin');\n   */\n  removeCSS() {\n    return this.forEach((elem) => {\n      iterateArray(arguments, (css) => {\n        elem.style.removeProperty(toHyphenCase(css));\n      });\n    });\n  }\n\n  /**\n   * @method Elem#replace\n   * @public\n   * @param {Elem|Element} element - Element to replace the first element in the set\n   * with a set of elements specified by the argument (Element or Elem).\n   * @returns {Elem} Returns this.\n   * @description Method is similar to\n   * [Node#replaceChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/replaceChild}.\n   *\n   * @example\n   * elem.replace(elem2);\n   * elem.replace(document.getElementById('id'));\n   * elem.replace('#id div.c1');\n   */\n  replace(element) {\n    element = toElem(element);\n\n    const first = this.elem(0);\n    const parent = first.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    let elem = parent;\n    let method = 'into';\n    const next = first.next()[0];\n    const prev = first.prev()[0];\n\n    if (next) {\n      elem = next;\n      method = 'insertBefore';\n    } else if (prev) {\n      elem = prev;\n      method = 'insertAfter';\n    }\n\n    first.remove();\n\n    element[method](elem);\n  }\n\n  /**\n   * @method Elem#show\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Shows all elements in the set.\n   * If an element was hidden using {@link Elem#hide} previous display is set.\n   *\n   * @example\n   * elem.show();\n   */\n  show() {\n    return this.forEach(show);\n  }\n\n  slice() {\n    return new Elem(super.slice.apply(this, arguments));\n  }\n\n  /**\n   * @method Elem#text\n   * @public\n   * @param {String|*} [text] - Text to write instead of current text.\n   * @returns {Elem|String} If no arguments passed text of the first element in the set returned.\n   * Otherwise all elements texts in the set are set to the text argument.\n   * @description Gets or sets text.\n   *\n   * @example\n   * elem.text('123');\n   * elem.text(); // '123'\n   */\n  text(text) {\n    if (!arguments.length) {\n      return this.prop('textContent');\n    }\n\n    return this.forEach((elem) => {\n      elem.textContent = text;\n    });\n  }\n\n  /**\n   * @method Elem#toggleAttr\n   * @public\n   * @param {String} attr - Attribute to toggle.\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the attribute\n   * with the '' value and if falsey method removes the attribute. If not present method adds\n   * the attribute if it doesn't exist and removes if it does.\n   * @returns {Elem} Returns this.\n   * @description Method for toggling attributes.\n   *\n   * @example\n   * elem.toggleAttr('attr');\n   * elem.toggleAttr('attr', someCondition);\n   */\n  toggleAttr(attr, condition) {\n    return this.forEach((elem) => {\n      elem = new Elem(elem);\n\n      if (arguments.length < 2 ? !elem.hasAttr(attr) : condition) {\n        elem.attr(attr, '');\n      } else {\n        elem.removeAttr(attr);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#toggleClass\n   * @public\n   * @param {String} cls - Class to toggle.\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the class\n   * and if falsey method removes the class. If not present method adds\n   * the class if it doesn't exist and removes if it does.\n   * @returns {Elem} Returns this.\n   * @description Method for toggling classes.\n   *\n   * @example\n   * elem.toggleClass('cls');\n   * elem.toggleClass('cls', someCondition);\n   */\n  toggleClass(cls, condition) {\n    return this.forEach((elem) => {\n      const { classList } = elem;\n\n      classList.toggle(cls, arguments.length < 2 ? !classList.contains(cls) : condition);\n    });\n  }\n}\n\nsetToStringTag(Elem, 'Elem');\nsetSymbolSpecies(Elem, Array);\n\nexport { Elem };\n","import { iterateArray, keys } from '../../utils';\n\nexport function calculateArgs(args, argsObject) {\n  iterateArray(keys(argsObject), (arg) => {\n    if (!(arg in args)) {\n      argsObject[arg] = undefined;\n    }\n  });\n\n  /* eslint guard-for-in: 0 */\n  for (const arg in args) {\n    argsObject[arg] = args[arg];\n  }\n}\n","export function cleanProperty(value, arg, object) {\n  delete object[arg];\n}\n","import { escapeRegex } from '../../utils';\n\nexport function constructMixinRegex(name) {\n  return new RegExp(`^${ escapeRegex(name) }(?:\\\\(([^\\\\)]*)\\\\))?(?:#([\\\\s\\\\S]*))?$`);\n}\n","const COMMA_REGEX = /,/;\n\nexport function mixinMatch(mixins, attr) {\n  let match;\n\n  /* eslint guard-for-in: 0 */\n  for (const name in mixins) {\n    const Mixin = mixins[name];\n    const localMatch = attr.match(Mixin._match);\n\n    if (localMatch) {\n      const argsMatch = localMatch[1];\n      let args;\n\n      if (argsMatch === '') {\n        args = [];\n      } else if (argsMatch) {\n        args = argsMatch.split(COMMA_REGEX);\n      }\n\n      match = {\n        args,\n        comment: localMatch[2],\n        Mixin,\n        name\n      };\n\n      break;\n    }\n  }\n\n  return match;\n}\n","import { collectFromObject, assign } from '../../utils';\nimport { D_REST_REGEX } from '../../constants';\nimport { mixinMatch } from './mixinMatch';\n\nexport function transformRestAttrs(attrs, mixins, mixinDefaultOpts) {\n  return collectFromObject(attrs, (eventualAttrs, value, attr) => {\n    if (D_REST_REGEX.test(attr)) {\n      return assign(eventualAttrs, transformRestAttrs(value, mixins, mixinDefaultOpts));\n    }\n\n    const match = mixinMatch(mixins, attr);\n\n    if (match) {\n      eventualAttrs[attr] = {\n        type: 'mixin',\n        dynamic: true,\n        opts: {\n          value,\n          ...match,\n          ...mixinDefaultOpts\n        },\n        value\n      };\n\n      return;\n    }\n\n    eventualAttrs[attr] = {\n      type: 'attr',\n      value\n    };\n  });\n}\n\nexport function transformRestArgs(args) {\n  return collectFromObject(args, addArgs);\n}\n\nfunction addArgs(args, value, arg) {\n  if (D_REST_REGEX.test(arg)) {\n    assign(args, transformRestArgs(value));\n  } else {\n    args[arg] = value;\n  }\n}\n","import { iterateArray } from '../../utils';\n\nexport function executeMixinWatchers(mixin, value) {\n  const oldValue = mixin.$$.value;\n\n  mixin.$$.value = value;\n\n  iterateArray(mixin.$$.watchers, (watcher) => {\n    watcher(value, oldValue);\n  });\n}\n","export function createMixin({\n  name, Mixin, dynamic,\n  value, args, comment, elem,\n  parentBlock, parentScope, parentTemplate\n}) {\n  const mixin = new Mixin({\n    name,\n    value,\n    dynamic,\n    args,\n    comment,\n    elem,\n    parentBlock,\n    parentScope,\n    parentTemplate\n  });\n\n  if (Mixin.evaluate) {\n    const value = mixin.value = mixin.evaluate((newValue, oldValue) => {\n      mixin.value = newValue;\n\n      try {\n        mixin.afterUpdate(newValue, oldValue);\n      } catch (err) {\n        console.error(`Uncaught error in ${ name }#afterUpdate:`, err);\n      }\n    });\n\n    mixin.afterUpdate(value);\n  }\n\n  return mixin;\n}\n","import { iterateObject, iterateArray } from '../../utils';\nimport { executeMixinWatchers } from './executeMixinWatchers';\nimport { createMixin } from './createMixin';\n\nexport function calculateAttrs(attrs, attrsObject, elem, firstTime) {\n  iterateObject(attrsObject, ({ type, value }, attr) => {\n    if (!attrs[attr]) {\n      if (type === 'attr') {\n        elem.removeAttr(attr);\n      } else {\n        value.$$.remove();\n      }\n\n      delete attrsObject[attr];\n    }\n  });\n\n  const mixins = [];\n\n  /* eslint guard-for-in: 0 */\n  for (const attr in attrs) {\n    const {\n      type,\n      dynamic,\n      value,\n      opts\n    } = attrs[attr];\n    let nextType;\n    let nextDynamic;\n    let nextValue;\n\n    if (attrsObject[attr]) {\n      const {\n        type: prevType,\n        value: prevValue\n      } = attrsObject[attr];\n\n      if (type === 'attr') {\n        if (prevType === 'mixin') {\n          prevValue.$$.remove();\n        }\n\n        if (prevValue !== value) {\n          elem.attr(attr, value);\n        }\n\n        nextValue = value;\n      } else {\n        const mixin = prevValue;\n\n        if (prevType === 'attr') {\n          elem.removeAttr(attr);\n        }\n\n        mixin.$$.isDynamic = dynamic;\n\n        if (dynamic) {\n          executeMixinWatchers(mixin, value);\n        } else if (!mixin.$$.evaluated && opts.Mixin.evaluate) {\n          const newValue = mixin.$$.parentScope.$$.evaluate(value, (newValue) => {\n            const {\n              type,\n              dynamic\n            } = attrs[attr];\n\n            if (type === 'mixin' && !dynamic) {\n              executeMixinWatchers(mixin, newValue);\n            }\n          }, mixin);\n\n          mixin.$$.evaluated = true;\n\n          executeMixinWatchers(mixin, newValue);\n        }\n\n        nextValue = mixin;\n      }\n\n      nextType = type;\n      nextDynamic = dynamic;\n    } else {\n      if (type === 'attr') {\n        elem.attr(attr, value);\n\n        nextValue = value;\n      } else {\n        const buildMixin = () => {\n          opts.dynamic = dynamic;\n\n          const mixin = createMixin(opts);\n\n          if (!dynamic && opts.Mixin.evaluate) {\n            const {\n              parentScope,\n              value\n            } = opts;\n            const firstValue = parentScope.$$.evaluate(value, (newValue) => {\n              const {\n                type,\n                dynamic\n              } = attrs[attr];\n\n              if (type === 'mixin' && !dynamic) {\n                executeMixinWatchers(mixin, newValue);\n              }\n            }, mixin);\n\n            mixin.$$.evaluated = true;\n            mixin.$$.value = firstValue;\n          }\n\n          nextValue = mixin;\n\n          return {\n            attr,\n            opts: {\n              type,\n              dynamic,\n              value: mixin\n            }\n          };\n        };\n\n        if (firstTime) {\n          mixins.push(buildMixin);\n        } else {\n          buildMixin();\n        }\n      }\n\n      nextType = type;\n      nextDynamic = dynamic;\n    }\n\n    attrsObject[attr] = {\n      type: nextType,\n      dynamic: nextDynamic,\n      value: nextValue\n    };\n  }\n\n  if (firstTime) {\n    return () => {\n      iterateArray(mixins, (buildMixin) => {\n        const {\n          attr,\n          opts\n        } = buildMixin();\n\n        attrsObject[attr] = opts;\n      });\n    };\n  }\n}\n","import { create, collectFromObject } from '../../utils';\n\nexport function constructPrivateScope(object, type, parentScope) {\n  let scope = {};\n\n  if (type === 'globals') {\n    scope = create(\n      parentScope\n        ? parentScope.$$.globals\n        : null\n    );\n  }\n\n  return collectFromObject(object, (scope, value, key) => {\n    scope[key] = {\n      value,\n      watchers: []\n    };\n  }, scope);\n}\n","import { removeArrayElem, iterateArray } from '../../utils';\n\nexport function removeTempWatcher(watcher) {\n  watcher();\n}\n\nexport function removeWatchers(watchersToRemove) {\n  iterateArray(watchersToRemove, removeWatcher);\n}\n\nfunction removeWatcher({ watcher, watchers }) {\n  removeArrayElem(watchers, watcher);\n}\n","import { defineProperties, mapObject, iterateArray } from '../../utils';\nimport { gettingVars, evalMode } from '../../Block';\nimport { removeTempWatcher } from './removeWatcher';\n\nexport function constructPublicScope(scope, scopeValues, privateScope) {\n  defineProperties(scope, mapObject(scopeValues, (value, key) => {\n    const scope = privateScope[key];\n\n    return {\n      configurable: false,\n      enumerable: true,\n      get() {\n        if (evalMode) {\n          if (gettingVars.indexOf(scope.watchers) === -1) {\n            gettingVars.push(scope.watchers);\n          }\n        }\n\n        return scope.value;\n      },\n      set(value) {\n        if (value === scope.value) {\n          return;\n        }\n\n        const oldTempWatchers = scope.watchers.slice();\n\n        scope.watchers = [];\n        scope.value = value;\n\n        iterateArray(oldTempWatchers, removeTempWatcher);\n      }\n    };\n  }));\n}\n","import {\n  except, create, assign,\n  iterateObject, iterateArray,\n  isNil\n} from '../../utils';\nimport { Elem } from '../../Elem';\nimport {\n  SVG_NS, D_REST_REGEX\n} from '../../constants';\nimport { cleanProperty } from './cleanProperty';\nimport { transformRestAttrs } from './transformRestAttrs';\nimport { calculateAttrs } from './calculateAttrs';\nimport { mixinMatch } from './mixinMatch';\nimport { constructPrivateScope } from './constructPrivateScope';\nimport { constructPublicScope } from './constructPublicScope';\nimport { Block } from '../../Block';\n\nconst NAMED_D_BLOCK_REGEX = /^d-block:([\\s\\S]+)$/;\n\nexport function createBlock({ node, parent, parentElem, parentBlock, parentScope, parentTemplate, prevBlock }) {\n  const doc = new Elem(parentElem[0].ownerDocument);\n  const elem = parentElem[0].namespaceURI === SVG_NS\n    ? doc.create('svg')\n    : doc;\n  const localBlocks = parentTemplate ? parentTemplate.$$.ns._blocks : Block._blocks;\n  const localMixins = parentTemplate ? parentTemplate.$$.ns._mixins : Block._mixins;\n  const { children } = node;\n  const args = node.attrs || {};\n  const name = node.name || 'UnknownBlock';\n  let constructor = node.Constructor || (node.name && localBlocks[node.name]);\n  let dBlockMatch;\n  let dBlockName;\n  let dBlockArgs;\n\n  if (name === 'd-block' && args.name) {\n    dBlockArgs = except(args, 'name');\n  } else if (name === 'd-block' && args.Constructor) {\n    dBlockArgs = except(args, 'Constructor');\n  } else if ((dBlockMatch = name.match(NAMED_D_BLOCK_REGEX)) || name === 'd-block') {\n    constructor = Block._blocks['d-block'];\n    dBlockName = dBlockMatch ? dBlockMatch[1] : null;\n  }\n\n  let blockInstance;\n\n  if (constructor) {\n    try {\n      blockInstance = new constructor({\n        name,\n        args,\n        dBlockName,\n        dBlockArgs,\n        children,\n        parent,\n        parentElem,\n        parentBlock,\n        parentScope,\n        parentTemplate,\n        prevBlock\n      });\n    } catch (err) {\n      console.error(`Uncaught error in new ${ name }:`, err);\n      constructor = null;\n    }\n  }\n\n  if (!constructor) {\n    const {\n      value,\n      children\n    } = node;\n\n    const element = elem.create(name);\n    const currentAttrs = create(null);\n    let attrs = create(null);\n    let wasDRest;\n    const mixinDefaultOpts = {\n      elem: element,\n      parentBlock,\n      parentScope,\n      parentTemplate\n    };\n\n    iterateObject(args, (value, attr) => {\n      const isDRest = D_REST_REGEX.test(attr);\n      const localAttrs = isDRest || wasDRest\n        ? create(attrs)\n        : attrs;\n\n      attrs = localAttrs;\n\n      if (isDRest) {\n        const restAttrs = parentScope.$$.evaluate(value, (value) => {\n          setTimeout(() => {\n            iterateObject(localAttrs, cleanProperty);\n            assign(localAttrs, transformRestAttrs(\n              value, localMixins, mixinDefaultOpts\n            ));\n            calculateAttrs(attrs, currentAttrs, element, false);\n          }, 0);\n        }, parentBlock);\n\n        wasDRest = true;\n\n        return assign(localAttrs, transformRestAttrs(\n          restAttrs, localMixins, mixinDefaultOpts\n        ));\n      }\n\n      const match = mixinMatch(localMixins, attr);\n\n      wasDRest = false;\n\n      if (match) {\n        localAttrs[attr] = {\n          type: 'mixin',\n          dynamic: false,\n          opts: {\n            value,\n            ...match,\n            ...mixinDefaultOpts\n          },\n          value\n        };\n\n        return;\n      }\n\n      localAttrs[attr] = {\n        type: 'attr',\n        value: parentScope.$$.evaluate(value, (value) => {\n          localAttrs[attr] = {\n            type: 'attr',\n            value\n          };\n          calculateAttrs(attrs, currentAttrs, element, false);\n        }, parentBlock)\n      };\n    });\n\n    const createMixins = calculateAttrs(attrs, currentAttrs, element, true);\n\n    if (name === '#comment') {\n      element.text(value);\n    }\n\n    if (name === '#text') {\n      let text = parentScope.$$.evaluate(value, (value) => {\n        if (isNil(value)) {\n          value = '';\n        }\n\n        element.text(`${ value }`);\n      }, parentBlock);\n\n      if (isNil(text)) {\n        text = '';\n      }\n\n      element.text(`${ text }`);\n    }\n\n    if (children) {\n      let prevBlock;\n      let parentElem = element;\n\n      if (name === 'template') {\n        parentElem = new Elem(element[0].content);\n      } else if (name === 'iframe') {\n        if (!('src' in attrs)) {\n          const document = element[0].contentDocument;\n\n          new Elem(document.documentElement).remove();\n\n          parentElem = new Elem(document);\n        }\n      }\n\n      iterateArray(children, (child) => {\n        prevBlock = createBlock({\n          node: child,\n          parent: parentElem,\n          parentElem,\n          parentBlock,\n          parentScope,\n          parentTemplate,\n          prevBlock\n        });\n      });\n    }\n\n    const isParentBlock = parent instanceof Block;\n\n    if (prevBlock instanceof Block) {\n      prevBlock.$$.insertAfterIt(element, false);\n    } else if (prevBlock) {\n      element.insertAfter(prevBlock);\n\n      if (isParentBlock) {\n        parent.$$.addContent(element);\n      }\n    } else if (isParentBlock) {\n      parent.$$.insertInStartOfIt(element, false);\n    } else {\n      element.into(parentElem, false);\n    }\n\n    createMixins();\n\n    return element;\n  }\n\n  const {\n    $$,\n    args: Args,\n    globals,\n    ...locals\n  } = blockInstance;\n\n  const html = name === 'd-elements'\n    ? Args.value || []\n    : constructor.template.value;\n\n  $$.args = constructPrivateScope(Args);\n  $$.locals = constructPrivateScope(locals);\n  $$.globals = constructPrivateScope(globals, 'globals', parentScope);\n\n  if (name === '#d-item') {\n    const scopeValues = {\n      [node.itemName]: node.item,\n      [node.indexName]: node.index\n    };\n    const scope = parentScope.$$.name === '#d-item'\n      ? parentScope.$$.scope\n      : parentScope;\n\n    $$.ns = parentScope.$$.ns;\n    $$.privateScope = constructPrivateScope(scopeValues);\n    constructPublicScope($$.scope = create(scope), scopeValues, $$.privateScope);\n  }\n\n  if (name === 'd-each') {\n    $$.scope = create(parentScope.$$.name === '#d-item' ? parentScope.$$.scope : parentScope, {\n      [Args.item || '$item']: {\n        value: null,\n        writable: true\n      },\n      [Args.index || '$index']: {\n        value: null,\n        writable: true\n      }\n    });\n  }\n\n  constructPublicScope(Args, Args, $$.args);\n  constructPublicScope(globals, globals, $$.globals);\n  constructPublicScope(blockInstance, locals, $$.locals);\n\n  try {\n    blockInstance.afterConstruct();\n  } catch (err) {\n    console.error(`Uncaught error in ${ name }#afterConstruct:`, err);\n  }\n\n  prevBlock = undefined;\n  parentScope = name === 'd-elements'\n    ? Args.parentScope\n    : blockInstance;\n  parentTemplate = name === 'd-elements'\n    ? Args.parentTemplate\n    : blockInstance;\n\n  iterateArray(html, (child) => {\n    prevBlock = createBlock({\n      node: child,\n      parent: blockInstance,\n      parentElem,\n      parentBlock: blockInstance,\n      parentScope,\n      parentTemplate,\n      prevBlock\n    });\n  });\n\n  blockInstance.$$.isRendered = true;\n\n  try {\n    blockInstance.afterRender();\n  } catch (err) {\n    console.error(`Uncaught error in ${ name }#afterRender:`, err);\n  }\n\n  return blockInstance;\n}\n","const { isPrototypeOf } = {};\n\nexport function isInstanceOf(Class, Subclass) {\n  return Class::isPrototypeOf(Subclass) && Class.prototype::isPrototypeOf(Subclass.prototype);\n}\n","export function removeWithParentSignal(child) {\n  child.$$.remove(true);\n}\n\nexport function remove(child) {\n  child.$$.remove();\n}\n","import {\n  defineFrozenProperties,\n  removeArrayElem, setToStringTag\n} from './utils';\nimport { wrapMixin, removeWatchers } from './helpers/Block';\n\n/**\n * @class Mixin\n * @public\n * @param {Object} opts - Mixin options.\n * @returns {Mixin} Instance of Mixin.\n */\nclass Mixin {\n  /**\n   * @member {Boolean} [Mixin.evaluate = true]\n   * @type {Boolean}\n   * @public\n   * @description If the mixin value should be evaluated and watched or not.\n   */\n  static evaluate = true;\n\n  /**\n   * @method Mixin.wrap\n   * @public\n   * @param {...Wrapper} wrappers - Functions that return wrapped mixin.\n   * @returns {typeof Mixin} New mixin.\n   * @description Method for wrapping mixins.\n   * It is considered best practice to just extends the old mixin with a new one.\n   */\n  static wrap(...wrappers) {\n    return wrappers.reduce(wrapMixin, this);\n  }\n\n  constructor(opts) {\n    const {\n      name,\n      value,\n      dynamic,\n      elem,\n      args,\n      comment,\n      parentBlock,\n      parentScope,\n      parentTemplate\n    } = opts;\n    const watchersToRemove = [];\n    const watchers = [];\n\n    defineFrozenProperties(this, {\n      $$: {\n        name,\n        _value: value,\n        value,\n        isDynamic: dynamic,\n        parentScope,\n        parentBlock,\n        parentTemplate,\n        watchers,\n        watchersToRemove,\n        isRemoved: false,\n        evaluate: (watcher) => {\n          const {\n            isDynamic,\n            value,\n            _value\n          } = this.$$;\n          const currentValue = isDynamic\n            ? value\n            : parentScope.$$.evaluate(_value);\n\n          if (watcher) {\n            watchers.push(watcher);\n          }\n\n          return currentValue;\n        },\n        remove: (isParentSignal) => {\n          isParentSignal = !!isParentSignal;\n          this.$$.isRemoved = true;\n\n          removeWatchers(watchersToRemove);\n\n          try {\n            this.beforeRemove(isParentSignal);\n          } catch (err) {\n            console.error(`Uncaught error in ${ name }#beforeRemove:`, err);\n          }\n\n          if (!isParentSignal) {\n            removeArrayElem(parentBlock.$$.mixins, this);\n          }\n        }\n      }\n    });\n\n    /**\n     * @member {String[]} [Mixin#args]\n     * @type {String[]}\n     * @public\n     */\n    this.args = args;\n\n    /**\n     * @member {String} [Mixin#comment]\n     * @type {String}\n     * @public\n     */\n    this.comment = comment;\n\n    /**\n     * @member {Block} [Mixin#parentBlock]\n     * @type {Block}\n     * @public\n     */\n    this.parentBlock = parentBlock;\n\n    /**\n     * @member {Block} [Mixin#parentScope]\n     * @type {Block}\n     * @public\n     */\n    this.parentScope = parentScope;\n\n    /**\n     * @member {Block} [Mixin#parentTemplate]\n     * @type {Block}\n     * @public\n     */\n    this.parentTemplate = parentTemplate;\n\n    /**\n     * @member {Elem} Mixin#elem\n     * @type {Elem}\n     * @public\n     */\n    this.elem = elem;\n\n    /**\n     * @member {Element} Mixin#node\n     * @type {Element}\n     * @public\n     */\n    this.node = elem[0];\n\n    parentBlock.$$.mixins.push(this);\n  }\n\n  afterUpdate() {}\n\n  /**\n   * @method Mixin#beforeRemove\n   * @public\n   * @param {Boolean} isElementRemoved - If element removed as well.\n   * @description Is called before the mixin removal.\n   */\n  beforeRemove(isElementRemoved) {}\n\n  /**\n   * @method Block#evaluate\n   * @public\n   * @param {Watcher} [callback] - If present, callback which is called when the mixin value is changed.\n   * @returns {*} Evaluation result.\n   * @description Method for evaluating the mixin value and watching for the changes.\n   */\n  evaluate(callback) {\n    return this.$$.evaluate(callback);\n  }\n\n  toString() {\n    return '[object Mixin]';\n  }\n}\n\nsetToStringTag(Mixin, 'Mixin');\n\nexport { Mixin };\n","import { isInstanceOf } from './isInstanceOf';\nimport { Block } from '../../Block';\nimport { Mixin } from '../../Mixin';\n\nexport function wrapBlock(block, wrapper) {\n  const returnValue = wrapper(block);\n\n  return isInstanceOf(Block, returnValue)\n    ? returnValue\n    : block;\n}\n\nexport function wrapMixin(mixin, wrapper) {\n  const returnValue = wrapper(mixin);\n\n  return isInstanceOf(Mixin, returnValue)\n    ? returnValue\n    : mixin;\n}\n","import { Elem } from './Elem';\nimport {\n  defineFrozenProperties,\n  assign, iterateArray, iterateObject,\n  isFunction, isArray,\n  setToStringTag, hasOwnProperty,\n  removeArrayElem, create,\n  getProto, setProto\n} from './utils';\nimport {\n  constructMixinRegex, isInstanceOf,\n  removeWatchers, removeWithParentSignal, cleanProperty,\n  transformRestArgs, calculateArgs, wrapBlock\n} from './helpers/Block';\nimport {\n  D_REST_REGEX,\n  rootBlocks, rootMixins\n} from './constants';\nimport { Mixin } from './Mixin';\n\n/**\n * @typedef {Object} Template\n * @public\n * @property {String[]} vars - Template used vars.\n * @property {Object[]} value - Template itself.\n */\n\n/**\n * @typedef {Object[]} ScopelessTemplate\n * @public\n */\n\n/**\n * @typedef {Error} EvaluationError\n * @public\n * @property {Function} func - Function which caused eval error.\n * @property {String} original - Evaluated expression original js.\n * @property {Block} block - Block in context of which the expression has been evaluated with the error.\n */\n\n/**\n * @callback Watcher\n * @public\n * @param {*} newValue - New value.\n * @param {*} oldValue - Old value.\n */\n\n/**\n * @callback Wrapper\n * @public\n * @param {typeof Block|typeof Mixin} Block class to wrap.\n * @returns {typeof Block} New Block class.\n */\n\n/**\n * @callback AfterUpdate\n * @public\n * @param {*} newValue - New value.\n * @param {*} oldValue - Old value.\n * @param {Mixin} mixin - Mixin instance.\n */\n\n/**\n * @callback BlockRegisterHook\n * @public\n * @param {typeof Block} Block - Registering block.\n * @param {String} name - Block name.\n * @returns Return value is used for registering the block.\n * If Block subclass returned it's registered instead of the initial block, otherwise\n * the initial block is used.\n */\n\n/**\n * @callback MixinRegisterHook\n * @public\n * @param {typeof Mixin} Mixin - Registering mixin.\n * @param {String} name - Mixin name.\n * @returns Return value is used for registering the mixin.\n * If Mixin subclass returned it's registered instead of the initial mixin, otherwise\n * the initial mixin is used.\n */\n\n/**\n * @callback RemoveHook\n * @public\n */\n\nconst blockHooks = [];\nconst mixinHooks = [];\nconst TAG_NAME_REGEX = /^[a-z][a-z\\d\\-_.:!@#$%^&*()[\\]{}='\"\\\\]*$/i;\nconst ATTR_NAME_REGEX = /^[^\\u0000-\\u0020\\s'\">/=]+$/;\nconst toStringTag = '[object Block]';\nconst afterElem = new Elem();\nconst emptyObject = {};\nlet evalMode = false;\nlet gettingVars = [];\n\n/**\n * @class Block\n * @extends null\n * @public\n * @param {Object} opts - Block options.\n * @returns {Block} Instance of Block.\n *\n * @example\n * import { Block, initApp } from 'dwayne';\n *\n * class App extends Block {\n *   static template = '<Hello text=\"{text}\"/> ({ this.times })';\n *\n *   constructor(opts) {\n *     super(opts);\n *\n *     this.text = 'world';\n *     this.times = 0;\n *\n *     this.setInterval();\n *   }\n *\n *   setInterval() {\n *     this.interval = setInterval(() => {\n *       this.times++;\n *     });\n *   }\n *\n *   beforeRemove() {\n *     clearInterval(this.interval);\n *   }\n * }\n *\n * Block.block('App', App);\n * Block.block('Hello', html`Hello, {args.text}!`);\n *\n * initApp('App', document.getElementById('root'));\n */\nclass Block {\n  /**\n   * @member {Object.<String, typeof Block>} Block._blocks\n   * @type {Object.<String, typeof Block>}\n   * @protected\n   * @description Block namespace blocks.\n   */\n  static _blocks = create(rootBlocks);\n\n  /**\n   * @member {Object.<String, typeof Mixin>} Block._mixins\n   * @type {Object.<String, typeof Mixin>}\n   * @protected\n   * @description Block namespace mixins.\n   */\n  static _mixins = create(rootMixins);\n\n  /**\n   * @member {Object} [Block.defaultArgs = null]\n   * @type {Object}\n   * @public\n   * @description Block default args.\n   */\n  static defaultArgs = null;\n\n  /**\n   * @member {Object} [Block.defaultLocals = null]\n   * @type {Object}\n   * @public\n   * @description Block default locals.\n   */\n  static defaultLocals = null;\n\n  /**\n   * @member {Object} [Block.template = { vars: [], value: [] }]\n   * @type {Object}\n   * @public\n   * @description Block template.\n   */\n  static template = {\n    vars: [],\n    value: []\n  };\n\n  /**\n   * @method Block.onEvalError\n   * @public\n   * @param {EvaluationError} err - The method is called when an evaluation error occurs.\n   */\n  static onEvalError(err) {\n    console.error(`Eval error (evaluating \"${ err.original || err.func }\" in context of ${ err.block.$$.name }):`, err);\n  }\n\n  /**\n   * @method Block.beforeRegisterBlock\n   * @public\n   * @param {BlockRegisterHook} hook - Block register hook.\n   * @returns {RemoveHook}\n   */\n  static beforeRegisterBlock(hook) {\n    blockHooks.push(hook);\n\n    return () => {\n      removeArrayElem(blockHooks, hook);\n    };\n  }\n\n  /**\n   * @method Block.beforeRegisterMixin\n   * @public\n   * @param {MixinRegisterHook} hook - Mixin register hook.\n   * @returns {RemoveHook}\n   */\n  static beforeRegisterMixin(hook) {\n    mixinHooks.push(hook);\n\n    return () => {\n      removeArrayElem(mixinHooks, hook);\n    };\n  }\n\n  /**\n   * @method Block.block\n   * @public\n   * @param {String} name - Block or mixin name.\n   * @param {Template|ScopelessTemplate|typeof Block} Subclass - Subclass of Block or template string of it.\n   * @returns {typeof Block|undefined} Returns registered Block or undefined if the block hasn't been registered.\n   * @description Register block in the namespace of this.\n   */\n  static block(name, Subclass) {\n    if (isFunction(Subclass) && !isInstanceOf(Block, Subclass)) {\n      const constructor = Subclass;\n\n      Subclass = class extends Block {\n        static template = constructor.template;\n\n        constructor(opts) {\n          super(opts);\n          this::constructor(opts);\n        }\n      };\n    }\n\n    if (!isFunction(Subclass) && isArray(Subclass)) {\n      Subclass = class extends Block {\n        static template = {\n          vars: [],\n          value: Subclass\n        };\n      };\n    }\n\n    if (!isFunction(Subclass) && Subclass.vars && Subclass.value) {\n      Subclass = class extends Block {\n        static template = Subclass;\n      };\n    }\n\n    if (!isInstanceOf(Block, Subclass)) {\n      console.warn(`Block must be a template (array or an object from an html loader), a function or a class that extends Block class (name: \"${ name }\") (Block.block)`);\n\n      return;\n    }\n\n    if (rootBlocks[name]) {\n      console.warn(`The \"${ name }\" block is a built-in block so the block will not be registered (Block.block)`);\n\n      return;\n    }\n\n    if (!TAG_NAME_REGEX.test(name)) {\n      console.warn(`Name \"${ name }\" is not allowed for blocks so the block will not be registered (Block.block)`);\n\n      return;\n    }\n\n    if (!hasOwnProperty(this, '_blocks')) {\n      this._blocks = create(getProto(this)._blocks);\n    }\n\n    if (!hasOwnProperty(this, 'defaultLocals')) {\n      this.defaultLocals = {};\n    }\n\n    if (!hasOwnProperty(this, 'defaultArgs')) {\n      this.defaultArgs = create(null);\n    }\n\n    try {\n      Subclass = blockHooks.reduce((returnValue, hook) => {\n        const currentReturnValue = hook(returnValue, name, this);\n\n        return isInstanceOf(Block, currentReturnValue)\n          ? currentReturnValue\n          : returnValue;\n      }, Subclass);\n    } catch (err) {\n      console.error('Uncaught error in \"beforeRegisterBlock\" hook:', err);\n    }\n\n    if (isArray(Subclass.template)) {\n      Subclass.template = {\n        vars: [],\n        value: Subclass.template\n      };\n    }\n\n    const {\n      vars,\n      value\n    } = Subclass.template;\n\n    Subclass._blocks = hasOwnProperty(Subclass, '_blocks')\n      ? Subclass._blocks\n      : create(this._blocks);\n    Subclass._mixins = hasOwnProperty(Subclass, '_mixins')\n      ? Subclass._mixins\n      : create(this._mixins);\n\n    if (hasOwnProperty(Subclass, 'defaultArgs')) {\n      setProto(Subclass.defaultArgs, null);\n    }\n\n    this._blocks[name] = Subclass;\n\n    return Subclass;\n  }\n\n  /**\n   * @method Block.get\n   * @public\n   * @param {String} name - Block name.\n   * @returns {typeof Block|undefined} Returns registered Block with specified name.\n   */\n  static get(name) {\n    return this._blocks[name];\n  }\n\n  /**\n   * @method Block.getMixin\n   * @public\n   * @param {String} name - Mixin name.\n   * @returns {typeof Mixin|undefined} Returns registered Mixin with specified name.\n   */\n  static getMixin(name) {\n    return this._mixins[name];\n  }\n\n  /**\n   * @method Block.mixin\n   * @public\n   * @param {String} name - Block or mixin name.\n   * @param {typeof Mixin|AfterUpdate} Subclass - Subclass of Mixin or AfterUpdate callback.\n   * @returns {typeof Mixin|undefined} Returns registered Block or undefined if the block hasn't been registered.\n   * @description Register mixin in the namespace of this.\n   */\n  static mixin(name, Subclass) {\n    if (isFunction(Subclass) && !isInstanceOf(Mixin, Subclass)) {\n      const afterUpdate = Subclass;\n\n      Subclass = class extends Mixin {\n        afterUpdate(newValue, oldValue) {\n          this::afterUpdate(newValue, oldValue, this);\n        }\n      };\n    }\n\n    if (!isInstanceOf(Mixin, Subclass)) {\n      console.warn(`The \"${ name }\" class does not extend Mixin or is not an afterUpdate function, so it will not be registered (Block.mixin)`);\n\n      return;\n    }\n\n    if (rootMixins[name] || name === 'd-rest') {\n      console.warn(`The \"${ name }\" mixin is a built-in mixin so the mixin will not be registered (Block.mixin)`);\n\n      return;\n    }\n\n    if (!ATTR_NAME_REGEX.test(name)) {\n      console.warn(`Name \"${ name }\" is not allowed for mixins so the mixin will not be registered (Block.mixin)`);\n\n      return;\n    }\n\n    if (!hasOwnProperty(this, '_mixins')) {\n      this._mixins = create(getProto(this)._mixins);\n    }\n\n    try {\n      Subclass = mixinHooks.reduce((returnValue, hook) => {\n        const currentReturnValue = hook(returnValue, name, this);\n\n        return isInstanceOf(Mixin, currentReturnValue)\n          ? currentReturnValue\n          : returnValue;\n      }, Subclass);\n    } catch (err) {\n      console.error('Uncaught error in \"beforeRegisterMixin\" hook:', err);\n    }\n\n    Subclass._match = constructMixinRegex(name);\n\n    this._mixins[name] = Subclass;\n\n    return Subclass;\n  }\n\n  /**\n   * @method Block.wrap\n   * @public\n   * @param {...Wrapper} wrappers - Functions that return wrapped block.\n   * @returns {typeof Block} New block.\n   * @description Method for wrapping blocks into another blocks.\n   * It is considered best practice to just extends the old block with a new one.\n   *\n   * @example\n   * class MyBlock extends Block {\n   *   static template = '<div>123</div>';\n   * }\n   *\n   * MyBlock.wrap((Block) => {\n   *   return class extends Block {\n   *     static template = `<section class=\"wrapper\">${ Block.template }</section>`;\n   *\n   *     constructor(opts) {\n   *       super(opts);\n   *\n   *       this.additionalVar = 'additional';\n   *     }\n   *   };\n   * });\n   */\n  static wrap(...wrappers) {\n    return wrappers.reduce(wrapBlock, this);\n  }\n\n  constructor(opts) {\n    const {\n      name,\n      args: originalArgs,\n      dBlockName,\n      dBlockArgs,\n      children,\n      parent,\n      parentElem,\n      parentBlock,\n      parentScope,\n      parentTemplate,\n      prevBlock\n    } = opts;\n    const watchersToRemove = [];\n    const constructor = getProto(this).constructor;\n    const childrenBlocks = [];\n    const mixins = [];\n    const isParentBlock = parent instanceof Block;\n\n    defineFrozenProperties(this, {\n      /**\n       * @member {Object} Block#$$\n       * @type {Object}\n       * @protected\n       * @property {Object} Block#$$.args - Private args scope.\n       * @property {Block[]} Block#$$.children - Child blocks.\n       * @property {Elem} Block#$$.content - Content elements.\n       * @property {String|void} Block#$$.dBlockName - d-block name.\n       * @property {Object|void} Block#$$.dBlockName - d-block args.\n       * @property {Block[]} Block#$$.dBlocks - d-block's within the block.\n       * @property {Function} Block#$$.evaluate - Evaluate function.\n       * @property {Object} Block#$$.globals - Private globals scope.\n       * @property {Object[]} Block#$$.htmlChildren - Block html children.\n       * @property {Boolean} Block#$$.isRemoved - If the block is removed.\n       * @property {Boolean} Block#$$.isRendered - If the block is rendered.\n       * @property {Object} Block#$$.locals - Private locals scope.\n       * @property {Mixin[]} Block#$$.mixins - Child mixins.\n       * @property {String} Block#$$.name - Block name.\n       * @property {typeof Block} Block#$$.ns - Block constructor.\n       * @property {Block|Elem|void} Block#$$.parent - Parent block or elem.\n       * @property {Block|void} Block#$$.parentBlock - Parent block.\n       * @property {Elem} parentElem - Parent element.\n       * @property {Block|void} Block#$$.parentScope - Parent scope.\n       * @property {Block|void} Block#$$.parentTemplate - Parent template.\n       * @property {Block|Elem|void} Block#$$.prevBlock - Parent template.\n       * @property {Watcher[]} Block#$$.watchers - Temporary vars watchers.\n       * @property {Object[]} Block#$$.watchersToRemove - Watchers to remove before removing element.\n       */\n      $$: {\n        name,\n        dBlockName,\n        dBlockArgs,\n        dBlocks: [],\n        parent,\n        parentElem,\n        parentScope,\n        parentBlock,\n        parentTemplate,\n        content: new Elem(),\n        ns: constructor,\n        htmlChildren: children || [],\n        children: childrenBlocks,\n        mixins,\n        prevBlock,\n        watchersToRemove,\n        isRemoved: false,\n        isRendered: false,\n        evaluate: (func, onChange, targetBlock, forDElements, forDItem, forDEach) => {\n          if (!isFunction(func)) {\n            return func;\n          }\n\n          forDElements = !!forDElements;\n          forDItem = !!forDItem;\n\n          const scope = (name === '#d-item' && !forDItem) || forDEach\n            ? (forDEach || this).$$.scope\n            : this;\n          const { watchersToRemove } = targetBlock ? targetBlock.$$ : emptyObject;\n          const onChangeFlag = !!onChange;\n\n          const evaluate = () => {\n            let result;\n\n            if (onChangeFlag) {\n              evalMode = true;\n              gettingVars = [];\n            }\n\n            try {\n              result = func(scope);\n            } catch (err) {\n              err.func = func;\n              err.original = func.original;\n              err.block = this;\n\n              if (isFunction(constructor.onEvalError)) {\n                try {\n                  constructor.onEvalError(err);\n                } catch (e) {\n                  console.error(`Uncaught error in ${ name }.onEvalError:`, e);\n                }\n              }\n            }\n\n            if (onChangeFlag) {\n              const localWatchers = [];\n\n              iterateArray(gettingVars, (watchers) => {\n                const watcher = () => {\n                  iterateArray(localWatchers, (watcherBlock) => {\n                    const {\n                      watcher,\n                      watchers\n                    } = watcherBlock;\n\n                    removeArrayElem(watchersToRemove, watcherBlock);\n                    removeArrayElem(watchers, watcher);\n                  });\n\n                  const newResult = evaluate();\n\n                  if (newResult !== result && !targetBlock.$$.isRemoved && !this.$$.isRemoved) {\n                    onChange(newResult, result);\n                  }\n                };\n                const watcherBlock = {\n                  forDElements,\n                  watcher,\n                  watchers\n                };\n\n                localWatchers.push(watcherBlock);\n                watchersToRemove.push(watcherBlock);\n                watchers.push(watcher);\n              });\n\n              evalMode = false;\n              gettingVars = [];\n            }\n\n            return result;\n          };\n\n          return evaluate();\n        },\n        remove: (isParentSignal) => {\n          this.$$.isRemoved = true;\n\n          removeWatchers(watchersToRemove);\n\n          iterateArray(childrenBlocks, removeWithParentSignal);\n          iterateArray(mixins, removeWithParentSignal);\n\n          try {\n            this.beforeRemove();\n          } catch (err) {\n            console.error(`Uncaught error in ${ name }#beforeRemove:`, err);\n          }\n\n          if (!isParentSignal && isParentBlock) {\n            parent.$$.removeContent(this.$$.content);\n          }\n\n          if (!isParentSignal && parentBlock) {\n            removeArrayElem(parentBlock.$$.children, this);\n          }\n\n          this.$$.content.remove();\n        },\n        changeContent: (newContent) => {\n          this.$$.content = newContent;\n\n          if (this.$$.isRendered && !this.$$.isRemoved) {\n            try {\n              this.afterDOMChange();\n            } catch (err) {\n              console.error(`Uncaught error in ${ name }#afterDOMChange:`, err);\n            }\n          }\n        },\n        addContent: (contentToAdd, notRecursive) => {\n          const oldContent = this.$$.content;\n          const index = oldContent.indexOf(contentToAdd[0].previousSibling) + 1;\n          let newContent;\n\n          if (index === 0) {\n            newContent = contentToAdd.add(oldContent);\n          } else {\n            newContent = oldContent\n              .slice(0, index)\n              .add(contentToAdd, oldContent.slice(index));\n          }\n\n          this.$$.changeContent(newContent);\n\n          if (isParentBlock && !notRecursive) {\n            parent.$$.addContent(contentToAdd, notRecursive);\n          }\n        },\n        moveContent: (contentToMove, after) => {\n          const oldContent = this.$$.content;\n          const index = oldContent.indexOf(contentToMove[0]);\n          const indexToPut = oldContent.indexOf(after[0]) + 1;\n          let newContent;\n\n          if (indexToPut === 0) {\n            newContent = contentToMove.add(\n              oldContent.slice(indexToPut, index),\n              oldContent.slice(index + contentToMove.length)\n            );\n          } else if (index > indexToPut) {\n            newContent = oldContent\n              .slice(0, indexToPut)\n              .add(\n                contentToMove,\n                oldContent.slice(indexToPut, index),\n                oldContent.slice(index + contentToMove.length)\n              );\n          } else {\n            newContent = oldContent\n              .slice(0, index)\n              .add(\n                oldContent.slice(index + contentToMove.length, indexToPut),\n                contentToMove,\n                oldContent.slice(indexToPut)\n              );\n          }\n\n          this.$$.changeContent(newContent);\n\n          if (isParentBlock && indexToPut) {\n            parent.$$.moveContent(contentToMove, after);\n          }\n        },\n        removeContent: (contentToRemove) => {\n          this.$$.changeContent(this.$$.content.filter((elem) => (\n            contentToRemove.indexOf(elem) === -1\n          )));\n\n          if (isParentBlock) {\n            parent.$$.removeContent(contentToRemove);\n          }\n        },\n        insertInStartOfIt: (contentToInsert, moveFlag) => {\n          const { prevBlock } = this.$$;\n          let after = afterElem;\n\n          if (prevBlock instanceof Block) {\n            after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n          } else if (prevBlock) {\n            after = prevBlock;\n            contentToInsert.insertAfter(prevBlock);\n\n            if (isParentBlock) {\n              if (moveFlag) {\n                parent.$$.moveContent(contentToInsert, after);\n              } else {\n                parent.$$.addContent(contentToInsert, true);\n              }\n            }\n          } else if (isParentBlock) {\n            const { prevBlock } = parent.$$;\n\n            if (prevBlock) {\n              let notRecursive;\n\n              if (prevBlock instanceof Block) {\n                after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n                notRecursive = true;\n              } else {\n                after = prevBlock;\n                notRecursive = false;\n                contentToInsert.insertAfter(prevBlock);\n              }\n\n              if (moveFlag) {\n                parent.$$.moveContent(contentToInsert, after);\n              } else {\n                parent.$$.addContent(contentToInsert, notRecursive);\n              }\n            } else {\n              after = parent.$$.insertInStartOfIt(contentToInsert, moveFlag);\n            }\n          } else {\n            contentToInsert.into(parentElem, false);\n          }\n\n          if (moveFlag) {\n            this.$$.moveContent(contentToInsert, after);\n          } else {\n            this.$$.addContent(contentToInsert, true);\n          }\n\n          return after;\n        },\n        insertAfterIt: (contentToInsert, moveFlag) => {\n          const { prevBlock } = this.$$;\n          let after = afterElem;\n          let tryToAddOrMove;\n\n          if (this.$$.content.length) {\n            after = this.$$.content.elem(-1);\n            tryToAddOrMove = true;\n            contentToInsert.insertAfter(after);\n          } else if (prevBlock instanceof Block) {\n            after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n          } else if (prevBlock) {\n            after = prevBlock;\n            tryToAddOrMove = true;\n            contentToInsert.insertAfter(prevBlock);\n          } else if (isParentBlock) {\n            after = parent.$$.insertInStartOfIt(contentToInsert, moveFlag);\n          } else {\n            contentToInsert.into(parentElem, false);\n          }\n\n          if (isParentBlock && tryToAddOrMove) {\n            if (moveFlag) {\n              parent.$$.moveContent(contentToInsert, after);\n            } else {\n              parent.$$.addContent(contentToInsert);\n            }\n          }\n\n          return after;\n        }\n      }\n    });\n\n    iterateObject(constructor.defaultLocals, (value, variable) => {\n      this[variable] = value;\n    });\n    iterateArray(constructor.template.vars, (variable) => {\n      this[variable] = this[variable];\n    });\n\n    const argsObject = create(null);\n    let args = create(constructor.defaultArgs || null);\n    let wasDRest;\n\n    iterateObject(originalArgs, (value, arg) => {\n      const isDRest = D_REST_REGEX.test(arg);\n      const localArgs = isDRest || wasDRest\n        ? create(args)\n        : args;\n\n      args = localArgs;\n\n      if (isDRest) {\n        const restArgs = parentScope.$$.evaluate(value, (value) => {\n          iterateObject(localArgs, cleanProperty);\n          assign(localArgs, transformRestArgs(value));\n          calculateArgs(args, argsObject);\n        }, this);\n\n        wasDRest = true;\n\n        return assign(localArgs, transformRestArgs(restArgs));\n      }\n\n      const isDElements = name === 'd-elements';\n      const forDElements = isDElements && arg === 'value';\n\n      wasDRest = false;\n\n      if (name !== 'd-each' || arg !== 'uid') {\n        value = parentScope.$$.evaluate(value, (value) => {\n          localArgs[arg] = value;\n          calculateArgs(args, argsObject);\n        }, this, forDElements, isDElements && parentBlock.$$.name === '#d-item');\n      }\n\n      localArgs[arg] = value;\n    });\n\n    defineFrozenProperties(this, {\n      /**\n       * @member {Object} Block#args\n       * @type {Object}\n       * @public\n       */\n      args: argsObject,\n\n      /**\n       * @member {Object} Block#globals\n       * @type {Object}\n       * @public\n       */\n      globals: create(\n        parentScope\n          ? parentScope.globals\n          : null\n      )\n    });\n\n    calculateArgs(args, argsObject);\n\n    if (parentBlock) {\n      parentBlock.$$.children.push(this);\n    }\n  }\n\n  /**\n   * @method Block#afterConstruct\n   * @public\n   * @description Is called after block construction (including all scopes)\n   * but before rendering the block and its children.\n   */\n  afterConstruct() {}\n\n  /**\n   * @method Block#afterDOMChange\n   * @public\n   * @description Is called after block DOM structure has changed. Note that\n   * it's important not to modify the DOM structure within the block. You can only insert\n   * elements to empty elements (which Dwayne considers empty) and remove ones from them.\n   */\n  afterDOMChange() {}\n\n  /**\n   * @method Block#afterRender\n   * @public\n   * @description Is called after block has been rendered.\n   */\n  afterRender() {}\n\n  /**\n   * @method Block#beforeRemove\n   * @public\n   * @description Is called before the block removal.\n   */\n  beforeRemove() {}\n\n  /**\n   * @method Block#getDOM\n   * @public\n   * @returns {Elem}\n   * @description Returns DOM contents of the block.\n   */\n  getDOM() {\n    return this.$$.content.slice();\n  }\n\n  /**\n   * @method Block#getName\n   * @public\n   * @returns {String}\n   * @description Returns Block name.\n   */\n  getName() {\n    return this.$$.name;\n  }\n\n  /**\n   * @method Block#getParentElem\n   * @public\n   * @returns {Elem|void}\n   * @description Returns parent Elem.\n   */\n  getParentElem() {\n    return this.$$.parentElem.slice();\n  }\n\n  /**\n   * @method Block#getTopBlock\n   * @public\n   * @returns {Block|void}\n   * @description Returns block in which template the block is located in.\n   */\n  getTopBlock() {\n    return this.$$.parentTemplate;\n  }\n\n  /**\n   * @method Block#evaluate\n   * @public\n   * @param {Function} func - Function to evaluate.\n   * @param {Watcher} [callback] - If present, callback which is called when the expression value is changed.\n   * @param {Block|Mixin} [target = this] - What block or mixin requests the value.\n   * @returns {*} Evaluation result.\n   * @description Method for evaluating an expression in context of the block and watching for the changes.\n   */\n  evaluate(func, callback, target = this) {\n    return this.$$.evaluate(func, callback, target);\n  }\n\n  toString() {\n    return toStringTag;\n  }\n}\n\nsetToStringTag(Block, 'Block');\nsetProto(Block.prototype, null);\n\nexport { Block, gettingVars, evalMode };\n","import { findInArray, isFunction } from '../utils';\nimport { Block } from '../Block';\nimport { rootBlocks } from '../constants';\n\nconst watchNameArgs = js`args.name`;\nconst watchConstructorArgs = js`args.Constructor`;\n\nclass DBlock extends Block {\n  static template = html`\n    <d-elements\n      value=\"{elems}\"\n      parentScope=\"{ParentScope}\"\n      parentTemplate=\"{ParentTemplate}\"\n    />\n  `;\n\n  afterConstruct(opts) {\n    const {\n      parentScope: {\n        $$: {\n          parentScope: parentParentScope,\n          parentTemplate: parentParentTemplate,\n          htmlChildren: children\n        }\n      },\n      htmlChildren: ownChildren,\n      parentScope,\n      parentTemplate,\n      dBlockName: DBlockName\n    } = this.$$;\n    const {\n      name,\n      Constructor\n    } = this.args;\n    let found;\n\n    this.ParentScope = parentScope;\n    this.ParentTemplate = parentTemplate;\n\n    if (name) {\n      this.constructDynamicNameBlock(\n        this.evaluate(watchNameArgs, this.constructDynamicNameBlock)\n      );\n\n      return;\n    }\n\n    if (Constructor) {\n      this.constructDynamicConstructorBlock(\n        this.evaluate(watchConstructorArgs, this.constructDynamicConstructorBlock)\n      );\n\n      return;\n    }\n\n    if (ownChildren.length) {\n      parentTemplate.$$.dBlocks.push(this);\n\n      return;\n    }\n\n    this.ParentScope = parentParentScope;\n    this.ParentTemplate = parentParentTemplate;\n\n    if (DBlockName) {\n      found = findInArray(children, ({ name: nodeName }) => nodeName === `d-block:${ DBlockName }`);\n\n      if (!found) {\n        found = findInArray(parentTemplate.$$.dBlocks, ({ $$: { dBlockName } }) => dBlockName === DBlockName);\n\n        if (found) {\n          this.ParentScope = parentTemplate;\n          this.ParentTemplate = parentTemplate;\n          found.value = {\n            children: found.value.$$.htmlChildren\n          };\n        }\n      }\n\n      this.elems = found\n        ? found.value.children\n        : null;\n    } else {\n      this.elems = children;\n    }\n  }\n\n  constructDynamicNameBlock = (name) => {\n    const {\n      htmlChildren,\n      dBlockArgs\n    } = this.$$;\n\n    this.elems = [{\n      name,\n      attrs: dBlockArgs,\n      children: htmlChildren\n    }];\n  };\n\n  constructDynamicConstructorBlock = (Constructor) => {\n    if (!isFunction(Constructor)) {\n      this.elems = null;\n\n      return;\n    }\n\n    const {\n      htmlChildren,\n      dBlockArgs\n    } = this.$$;\n\n    this.elems = [{\n      Constructor,\n      attrs: dBlockArgs,\n      children: htmlChildren\n    }];\n  };\n}\n\nrootBlocks['d-block'] = DBlock;\n\nexport { DBlock };\n","import { Block } from '../Block';\n\nconst template = html`\n  <d-elements\n    value=\"{$$.htmlChildren}\"\n    parentScope=\"{this}\"\n    parentTemplate=\"{$$.parentTemplate}\"\n  />\n`;\n\nclass DItem extends Block {\n  static template = template;\n}\n\nexport { DItem };\n","import {\n  assign, iterateArray, iterateObject,\n  isArray, isFunction\n} from '../utils';\nimport { remove, createBlock } from '../helpers/Block';\nimport { Block } from '../Block';\nimport { rootBlocks } from '../constants';\nimport { DItem } from './d-item';\n\nconst watchArgs = js`[\n  args.set,\n  args.filterBy,\n  args.sortBy\n]`;\n\nrootBlocks['d-each'] = class DEach extends Block {\n  constructor(opts) {\n    super(opts);\n\n    const {\n      args: {\n        item: itemName = '$item',\n        index: indexName = '$index'\n      }\n    } = this;\n\n    assign(this.$$, {\n      itemsByUIDs: {},\n      UID: this.args.uid || undefined,\n      itemName,\n      indexName\n    });\n  }\n\n  afterConstruct() {\n    this.evaluate(watchArgs, this.renderSet);\n    this.renderSet();\n  }\n\n  renderSet = () => {\n    const {\n      htmlChildren,\n      itemsByUIDs,\n      parentScope,\n      parentElem,\n      parentTemplate,\n      scope,\n      itemName,\n      indexName,\n      UID\n    } = this.$$;\n    const {\n      args: { sortBy }\n    } = this;\n    const newItemsByUIDs = {};\n    const newUIDsCounter = {};\n    const newUIDs = {};\n    let {\n      set,\n      filterBy\n    } = this.args;\n    const isArr = isArray(set);\n    const iterate = isArr\n      ? iterateArray\n      : iterateObject;\n\n    if (isArr && isFunction(sortBy)) {\n      set = set\n        .slice()\n        .sort(sortBy);\n    }\n\n    if (isFunction(filterBy)) {\n      filterBy = [filterBy];\n    }\n\n    if (isArray(filterBy)) {\n      iterateArray(filterBy, (filter) => {\n        set = set.filter(filter);\n      });\n    }\n\n    iterate(set, (item, index) => {\n      scope[itemName] = item;\n      scope[indexName] = index;\n\n      const uid = parentScope.$$.evaluate(UID, null, null, false, false, this);\n\n      newUIDsCounter[uid] = (newUIDsCounter[uid] || 0) + 1;\n      newUIDs[index] = uid;\n    });\n\n    scope[itemName] = null;\n    scope[indexName] = null;\n\n    iterateObject(itemsByUIDs, (items, uid) => {\n      if (!newUIDsCounter[uid]) {\n        iterateArray(items, remove);\n\n        return;\n      }\n\n      iterateArray(items.splice(newUIDsCounter[uid]), remove);\n    });\n\n    let prevBlock;\n\n    iterate(set, (item, index) => {\n      const uid = newUIDs[index];\n      let block;\n\n      if (itemsByUIDs[uid] && itemsByUIDs[uid].length) {\n        block = itemsByUIDs[uid].shift();\n        block.$$.scope[indexName] = index;\n        block.$$.scope[itemName] = item;\n\n        const {\n          prevBlock: prevPrevBlock\n        } = block.$$;\n\n        if (prevPrevBlock && prevPrevBlock !== prevBlock) {\n          const { content } = block.$$;\n\n          if (prevBlock) {\n            prevBlock.$$.insertAfterIt(content, true);\n          } else {\n            this.$$.insertInStartOfIt(content, true);\n          }\n        }\n      } else {\n        block = createBlock({\n          node: {\n            itemName,\n            indexName,\n            item,\n            index,\n            name: '#d-item',\n            Constructor: DItem,\n            children: htmlChildren\n          },\n          parent: this,\n          parentElem,\n          parentBlock: this,\n          parentScope,\n          parentTemplate,\n          prevBlock\n        });\n      }\n\n      (newItemsByUIDs[uid] = newItemsByUIDs[uid] || []).push(block);\n      block.$$.prevBlock = prevBlock;\n      prevBlock = block;\n    });\n\n    this.$$.itemsByUIDs = newItemsByUIDs;\n  };\n};\n","import { iterateArray, removeArrayElem } from '../utils';\nimport { removeWithParentSignal, createBlock } from '../helpers/Block';\nimport { Block } from '../Block';\nimport { Elem } from '../Elem';\nimport { rootBlocks } from '../constants';\n\nconst watchArgs = js`args.value`;\n\nrootBlocks['d-elements'] = class DElements extends Block {\n  afterConstruct() {\n    const { parentElem } = this.$$;\n    const {\n      parentScope,\n      parentTemplate\n    } = this.args;\n\n    this.$$.evaluate(watchArgs, (value) => {\n      const {\n        children,\n        mixins,\n        parent,\n        watchersToRemove,\n        content\n      } = this.$$;\n\n      iterateArray(children, removeWithParentSignal);\n      iterateArray(mixins, removeWithParentSignal);\n      content.remove();\n\n      if (parent instanceof Block) {\n        parent.$$.removeContent(content);\n      }\n\n      this.$$.children = [];\n      this.$$.mixins = [];\n      this.$$.watchersToRemove = watchersToRemove.filter(({ watchers, watcher, forDElements }) => {\n        if (forDElements) {\n          return true;\n        }\n\n        removeArrayElem(watchers, watcher);\n      });\n      this.$$.content = new Elem();\n\n      let prevBlock;\n\n      iterateArray(value || [], (child) => {\n        prevBlock = createBlock({\n          node: child,\n          parent: this,\n          parentElem,\n          parentBlock: this,\n          parentScope,\n          parentTemplate,\n          prevBlock\n        });\n      });\n    }, this, true);\n  }\n};\n","import { findInArray } from '../utils';\nimport { Block } from '../Block';\nimport { rootBlocks } from '../constants';\n\nrootBlocks['d-if'] = class DIf extends Block {\n  static template = html`\n    <d-elements\n      value=\"{elems}\"\n      parentScope=\"{$$.parentScope}\"\n      parentTemplate=\"{$$.parentTemplate}\"\n    />\n  `;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      parentScope,\n      htmlChildren\n    } = this.$$;\n    let index = Infinity;\n    const values = htmlChildren.map((child, i) => {\n      const {\n        name,\n        attrs = {},\n        children\n      } = child;\n      let cond = attrs.if;\n\n      if (name !== 'd-else' && cond) {\n        cond = parentScope.$$.evaluate(cond, (newValue) => {\n          if (!!newValue === values[i]) {\n            return;\n          }\n\n          values[i] = !!newValue;\n\n          if (i > index) {\n            return;\n          }\n\n          if (i < index && newValue) {\n            index = i;\n            this.elems = children;\n\n            return;\n          }\n\n          const found = findInArray(values, Boolean);\n\n          if (found) {\n            index = found.key;\n            this.elems = htmlChildren[found.key].children;\n          } else {\n            index = Infinity;\n            this.elems = null;\n          }\n        }, this);\n      } else {\n        cond = true;\n      }\n\n      if (cond && index === Infinity) {\n        index = i;\n        this.elems = children;\n      }\n\n      return !!cond;\n    });\n  }\n};\n","import { findInArray } from '../utils';\nimport { Block } from '../Block';\nimport { rootBlocks } from '../constants';\n\nconst watchArgs = js`[\n  args.value,\n  args.compareFn\n]`;\n\nrootBlocks['d-switch'] = class DSwitch extends Block {\n  static template = html`\n    <d-elements\n      value=\"{elems}\"\n      parentScope=\"{$$.parentScope}\"\n      parentTemplate=\"{$$.parentTemplate}\"\n    />\n  `;\n  static defaultArgs = {\n    compareFn(switchValue, caseValue) {\n      return (\n        switchValue === caseValue\n        || (switchValue !== switchValue && caseValue !== caseValue)\n      );\n    }\n  };\n\n  index = Infinity;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      $$: {\n        htmlChildren,\n        parentScope\n      },\n      args,\n      args: { value }\n    } = this;\n\n    this.values = htmlChildren.map((child, i) => {\n      const {\n        name,\n        attrs = {},\n        children\n      } = child;\n      let val;\n\n      if (name !== 'd-default') {\n        val = parentScope.$$.evaluate(attrs.if, (newValue) => {\n          this.values[i].value = newValue;\n\n          if (i > this.index) {\n            return;\n          }\n\n          const found = findInArray(this.values, ({ name, value }) => (\n            name === 'd-default'\n            || this.args.compareFn(args.value, value)\n          ));\n\n          this.index = found\n            ? found.key\n            : Infinity;\n          this.elems = found\n            ? found.value.children\n            : null;\n        }, this);\n      }\n\n      if (this.index === Infinity && (\n        name === 'd-default'\n        || this.args.compareFn(value, val)\n      )) {\n        this.index = i;\n        this.elems = children;\n      }\n\n      return {\n        name,\n        children,\n        value: val\n      };\n    });\n  }\n\n  afterConstruct() {\n    this.evaluate(watchArgs, () => {\n      const {\n        value: newValue,\n        compareFn\n      } = this.args;\n\n      this.index = Infinity;\n\n      this.values.some(({ name, value, children }, i) => {\n        if (\n          name === 'd-default'\n          || compareFn(newValue, value)\n        ) {\n          this.index = i;\n          this.elems = children;\n\n          return true;\n        }\n      });\n\n      if (this.index === Infinity) {\n        this.elems = null;\n      }\n    });\n  }\n};\n","import { collectFromObject, iterateObject, keys } from '../utils';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-attr'] = class DAttr extends Mixin {\n  attrs = {};\n\n  afterUpdate(newValue) {\n    const {\n      elem,\n      args,\n      attrs\n    } = this;\n\n    if (args) {\n      newValue = collectFromObject(args, (attrs, attr) => {\n        attrs[attr] = newValue;\n      });\n    }\n\n    iterateObject(attrs, (value, prop) => {\n      if (!(prop in newValue)) {\n        elem.removeAttr(prop);\n      }\n    });\n    elem.attr(newValue);\n\n    this.attrs = newValue;\n  }\n\n  beforeRemove() {\n    const {\n      elem,\n      attrs\n    } = this;\n\n    elem.removeAttr.apply(elem, keys(attrs));\n  }\n};\n\n","import { isFunction, noop } from '../utils';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-bind'] = class DBind extends Mixin {\n  off = noop;\n\n  afterUpdate(value) {\n    this.off();\n\n    if (!isFunction(value)) {\n      return;\n    }\n\n    if (this.args) {\n      this.off = this.elem.on(this.args.join(','), value);\n    } else {\n      this.off = noop;\n\n      console.error('Provide \"d-bind\" mixin with an event names (like \"d-bind(click)\" or \"d-bind(keyup, keypress)\")!');\n    }\n  }\n\n  beforeRemove() {\n    this.off();\n  }\n};\n","import {\n  isArray, isString,\n  iterateArray, iterateObject\n} from '../utils';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nconst EMPTY_SPACE_REGEX = /\\s+/;\n\nrootMixins['d-class'] = class DClass extends Mixin {\n  classes = [];\n\n  afterUpdate(newValue) {\n    const {\n      elem,\n      args,\n      classes\n    } = this;\n    const newClasses = [];\n\n    if (args) {\n      newValue = newValue\n        ? args\n        : [];\n    }\n\n    if (isString(newValue)) {\n      newValue = newValue.split(EMPTY_SPACE_REGEX);\n    }\n\n    if (isArray(newValue)) {\n      iterateArray(classes, (cls) => {\n        if (newValue.indexOf(cls) === -1) {\n          elem.removeClass(cls);\n        }\n      });\n      iterateArray(newValue, (cls) => {\n        if (isString(cls)) {\n          newClasses.push(cls);\n          elem.addClass(cls);\n        }\n      });\n    } else {\n      iterateArray(classes, (cls) => {\n        if (!newValue || !newValue[cls]) {\n          elem.removeClass(cls);\n        }\n      });\n      iterateObject(newValue, (val, cls) => {\n        if (val) {\n          newClasses.push(cls);\n          elem.addClass(cls);\n        }\n      });\n    }\n\n    this.classes = newClasses;\n  }\n\n  beforeRemove() {\n    const {\n      elem,\n      classes\n    } = this;\n\n    elem.removeClass.apply(elem, classes);\n  }\n};\n","import { isFunction, isString } from '../utils';\nimport { Block } from '../Block';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-elem'] = class DElem extends Mixin {\n  static evaluate = false;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      args,\n      parentTemplate,\n      elem\n    } = this;\n    let scope = parentTemplate;\n    let value = this.evaluate();\n\n    if (args) {\n      scope = value instanceof Block\n        ? value\n        : parentTemplate;\n      value = args[0];\n    }\n\n    if (isFunction(value)) {\n      value(elem);\n    } else if (isString(value)) {\n      scope[value] = elem;\n    }\n  }\n};\n","import { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nclass DHide extends Mixin {\n  afterUpdate(value) {\n    const { elem } = this;\n\n    if (value) {\n      elem.hide();\n    } else {\n      elem.show();\n    }\n  }\n\n  beforeRemove() {\n    this.elem.show();\n  }\n}\n\nrootMixins['d-hide'] = DHide;\n\nexport { DHide };\n","import { isFunction, isString } from '../utils';\nimport { Block } from '../Block';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-node'] = class DNode extends Mixin {\n  static evaluate = false;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      args,\n      parentTemplate,\n      node\n    } = this;\n    let scope = parentTemplate;\n    let value = this.evaluate();\n\n    if (args) {\n      scope = value instanceof Block\n        ? value\n        : parentTemplate;\n      value = args[0];\n    }\n\n    if (isFunction(value)) {\n      value(node);\n    } else if (isString(value)) {\n      scope[value] = node;\n    }\n  }\n};\n","import { noop } from '../utils';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-on'] = class DOn extends Mixin {\n  static evaluate = false;\n\n  constructor(opts) {\n    super(opts);\n\n    if (this.args) {\n      this.off = this.elem.on(this.args.join(','), () => {\n        this.evaluate();\n      });\n    } else {\n      this.off = noop;\n\n      console.error('Provide \"d-on\" mixin with an event names (like \"d-on(click)\" or \"d-on(keyup, keypress)\")!');\n    }\n  }\n\n  beforeRemove() {\n    this.off();\n  }\n};\n","import { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-show'] = class DShow extends Mixin {\n  afterUpdate(value) {\n    const { elem } = this;\n\n    if (value) {\n      elem.show();\n    } else {\n      elem.hide();\n    }\n  }\n\n  beforeRemove() {\n    this.elem.show();\n  }\n};\n","import {\n  isString, iterateObject, keys,\n  collectFromObject, collectFromArray\n} from '../utils';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nconst CSS_STYLES_SEPARATOR_REGEX = /\\s*;\\s*/;\nconst CSS_STYLE_SEPARATOR_REGEX = /\\s*:\\s*/;\n\nrootMixins['d-style'] = class DStyle extends Mixin {\n  css = {};\n\n  afterUpdate(newValue, oldValue) {\n    const {\n      elem,\n      args,\n      css\n    } = this;\n\n    if (args) {\n      newValue = collectFromObject(args, (css, prop) => {\n        css[prop] = newValue;\n      });\n    }\n\n    if (isString(newValue)) {\n      newValue = collectFromArray(\n        newValue\n          .split(CSS_STYLES_SEPARATOR_REGEX)\n          .filter(Boolean)\n          .map(constructStyleFromString),\n        addCSSProp\n      );\n    }\n\n    iterateObject(css, (value, prop) => {\n      if (!newValue[prop]) {\n        elem.removeCSS(prop);\n      }\n    });\n    elem.css(newValue);\n\n    this.css = newValue;\n  }\n\n  beforeRemove() {\n    const {\n      elem,\n      css\n    } = this;\n\n    elem.removeCSS.apply(elem, keys(css));\n  }\n};\n\nfunction addCSSProp(css, item) {\n  const [prop, value] = item;\n\n  css[prop] = value;\n}\n\nfunction constructStyleFromString(style) {\n  const split = style.split(CSS_STYLE_SEPARATOR_REGEX);\n\n  return [\n    split[0].trim(),\n    split[1].trim()\n  ];\n}\n","import {\n  isFunction, isNil,\n  collectFromArray\n} from '../utils';\nimport { Block } from '../Block';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-value'] = class DValue extends Mixin {\n  static evaluate = false;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      args,\n      parentTemplate,\n      elem\n    } = this;\n    const name = elem.name();\n    const type = elem.prop('type');\n    const value = this.evaluate();\n    let initialScopeValue = null;\n\n    this.prop = getProp(name, type, elem);\n    this.name = name;\n    this.type = type;\n    this.value = value;\n    this.options = elem.find('option');\n    this.scope = parentTemplate;\n\n    if (args) {\n      this.scope = value instanceof Block\n        ? value\n        : parentTemplate;\n      this.value = args[0];\n    }\n\n    if (!isFunction(this.value)) {\n      initialScopeValue = this.scope.$$.evaluate((scope) => scope[this.value], (newValue) => {\n        if (this.currentValue !== newValue) {\n          this.currentValue = newValue;\n          this.setProp(newValue);\n        }\n      }, this);\n    }\n\n    const initialElemValue = this.getProp(initialScopeValue, true);\n    const isInitialScopeValueNull = isNil(initialScopeValue);\n    const isCheckbox = type === 'checkbox';\n    const changeScope = () => {\n      this.currentValue = this.getProp(this.currentValue, false);\n      this.changeScope();\n    };\n\n    if (isInitialScopeValueNull || isCheckbox) {\n      this.currentValue = initialElemValue;\n      this.changeScope();\n\n      if (!isInitialScopeValueNull && isCheckbox) {\n        this.setProp(initialScopeValue);\n      }\n    } else {\n      this.currentValue = initialScopeValue;\n      this.setProp(initialScopeValue);\n    }\n\n    this.offElemListener = elem.on(getListenerName(name, type), changeScope);\n    this.offFormListener = elem.closest('form').on('reset', () => {\n      setTimeout(changeScope, 0);\n    });\n  }\n\n  changeScope() {\n    const {\n      scope,\n      value,\n      currentValue\n    } = this;\n\n    if (isFunction(value)) {\n      value(currentValue);\n    } else {\n      scope[value] = currentValue;\n    }\n  }\n\n  setProp(value) {\n    const {\n      elem,\n      name,\n      prop,\n      type,\n      node,\n      options\n    } = this;\n\n    if (prop === 'text') {\n      elem.text(value);\n    } else if (prop === 'multiple-select') {\n      options.forEach((option) => {\n        option.selected = value.indexOf(option.value) !== -1;\n      });\n    } else {\n      elem.prop(prop, getValueForSetting(name, value, type, node.value));\n    }\n  }\n\n  getProp(values, init) {\n    const {\n      elem,\n      name,\n      prop,\n      type,\n      node,\n      options\n    } = this;\n\n    return prop === 'text'\n      ? elem.text()\n      : getValueForGetting(name, elem.prop(prop), type, node.value, values, options, init, prop === 'multiple-select');\n  }\n\n  beforeRemove() {\n    this.offElemListener();\n    this.offFormListener();\n  }\n};\n\nfunction getProp(name, type, elem) {\n  switch (name) {\n    case 'select': {\n      return elem.hasAttr('multiple')\n        ? 'multiple-select'\n        : 'value';\n    }\n\n    case 'input': {\n      if (type === 'file') {\n        return 'files';\n      }\n\n      return type === 'radio' || type === 'checkbox'\n        ? 'checked'\n        : 'value';\n    }\n\n    default: {\n      return elem.hasAttr('contentEditable')\n        ? 'text'\n        : 'value';\n    }\n  }\n}\n\nfunction getValueForSetting(name, value, type, inputValue) {\n  if (name !== 'input') {\n    return value;\n  }\n\n  const isRadio = type === 'radio';\n\n  if (!isRadio && type !== 'checkbox') {\n    return value;\n  }\n\n  return isRadio\n    ? value === inputValue\n    : value.indexOf(inputValue) !== -1;\n}\n\nfunction getValueForGetting(name, value, type, inputValue, values, options, init, isMultiple) {\n  switch (name) {\n    case 'select': {\n      if (!isMultiple) {\n        return value;\n      }\n\n      return collectFromArray(options, addValue, []);\n    }\n\n    case 'input': {\n      if (type !== 'radio' && type !== 'checkbox') {\n        return value;\n      }\n\n      if (type === 'radio') {\n        return value\n          ? inputValue\n          : null;\n      }\n\n      values = values || [];\n\n      if (!value && init) {\n        return values;\n      }\n\n      if (value) {\n        return values.indexOf(inputValue) === -1\n          ? values.concat(inputValue)\n          : values;\n      }\n\n      const index = values.indexOf(inputValue);\n\n      if (index !== -1) {\n        return [\n          ...values.slice(0, index),\n          ...values.slice(index + 1)\n        ];\n      }\n\n      return values;\n    }\n\n    default: {\n      return value;\n    }\n  }\n}\n\nfunction getListenerName(name, type) {\n  switch (name) {\n    case 'select': {\n      return 'change';\n    }\n\n    case 'input': {\n      return (\n        type === 'radio'\n        || type === 'checkbox'\n        || type === 'color'\n        || type === 'file'\n      )\n        ? 'change'\n        : 'change input';\n    }\n\n    default: {\n      return 'input';\n    }\n  }\n}\n\nfunction addValue(values, { selected, value }) {\n  if (selected && values.indexOf(value) === -1) {\n    values.push(value);\n  }\n}\n","import { iterateObject } from '../../utils';\nimport { rootMixins } from '../../constants';\nimport { constructMixinRegex } from './constructMixinRegex';\n\niterateObject(rootMixins, (Mixin, name) => {\n  Mixin._match = constructMixinRegex(name);\n});\n","import { Elem } from './Elem';\nimport { createHideStyleNode } from './helpers/Elem';\nimport { document } from './constants';\n\n/**\n * @const {Elem} doc\n * @type {Elem}\n * @public\n * @description Elem instance of document.\n */\nexport const doc = new Elem(document);\n\n/**\n * @const {Elem} html\n * @type {Elem}\n * @public\n * @description Elem instance of document.documentElement.\n */\nexport const html = new Elem(document.documentElement);\n\n/**\n * @const {Elem} body\n * @type {Elem}\n * @public\n * @description Elem instance of document.body.\n */\nexport const body = new Elem(document.body);\n\n/**\n * @const {Elem} head\n * @type {Elem}\n * @public\n * @description Elem instance of document.head.\n */\nexport const head = new Elem(document.head);\n\ncreateHideStyleNode(head);\n","import {\n  toObjectKeys,\n  assign, keys, create\n} from './utils';\n\nexport function insertTemplates(template, templates) {\n  const {\n    vars,\n    value\n  } = template;\n  const newTemplates = create(null);\n  const newVars = toObjectKeys(vars);\n\n  assign(newTemplates, templates);\n  iterateAndChangeChildren(value);\n\n  function iterateAndChangeChildren(nodes = []) {\n    for (let i = 0; i < nodes.length; i++) {\n      const {\n        name,\n        value,\n        children\n      } = nodes[i];\n\n      if (name === '#comment') {\n        const trimmed = value.trim();\n\n        if (newTemplates[trimmed]) {\n          const newTemplate = newTemplates[trimmed].value;\n\n          nodes.splice(i, 1, ...newTemplate);\n          assign(newVars, toObjectKeys(newTemplates[trimmed].vars));\n\n          i += newTemplate.length - 1;\n        }\n      } else {\n        iterateAndChangeChildren(children);\n      }\n    }\n  }\n\n  vars.length = 0;\n  vars.push(...keys(newVars));\n\n  return template;\n}\n","import { isArray, isString } from './utils';\nimport { createBlock, isInstanceOf } from './helpers/Block';\nimport { Block } from './Block';\nimport { Elem } from './Elem';\n\n/**\n * @function initApp\n * @public\n * @param {Template|ScopelessTemplate|String|typeof Block} block - Root template (may be scopeless),\n * string defining a name of the root block or a block subclass.\n * @param {Elem|Element} container - Container of the app.\n * @returns {void}\n * @description Method for initializing app.\n *\n * @example\n * import { initApp, doc } from 'dwayne';\n *\n * initApp(html`<App/>`, doc.create('div'));\n * initApp(htmlScopeless`<App/>`, doc.create('div'));\n * initApp('App', doc.create('div'));\n * initApp(App, doc.create('div'));\n */\nexport function initApp(block, container) {\n  const parentElem = new Elem(container).elem(0);\n\n  if (!parentElem.length) {\n    throw new Error('No valid element to insert the app into was given! (initApp)');\n  }\n\n  if (parentElem.prop('DwayneRootBlock')) {\n    throw new Error('There already exists a Dwayne app inside the given element! (initApp)');\n  }\n\n  if (isString(block)) {\n    block = {\n      vars: [],\n      value: [{\n        name: block\n      }]\n    };\n  }\n\n  if (isArray(block)) {\n    block = {\n      vars: [],\n      value: block\n    };\n  }\n\n  let Constructor;\n\n  if (isInstanceOf(Block, block)) {\n    Constructor = block;\n  } else {\n    Constructor = class RootBlock extends Block {\n      static template = block;\n    };\n  }\n\n  const rootBlock = createBlock({\n    node: {\n      name: '#RootBlock',\n      Constructor\n    },\n    parent: parentElem,\n    parentElem\n  });\n\n  parentElem\n    .prop('DwayneRootBlock', rootBlock)\n    .attr('dwayne-root', '');\n}\n","import { Block } from './Block';\nimport { Elem } from './Elem';\n\n/**\n * @function removeApp\n * @public\n * @param {Elem|Element} container - Container of the app.\n * @returns {void}\n * @description Method for removing app.\n *\n * @example\n * import { removeApp, find } from 'dwayne';\n *\n * removeApp(find('.root'));\n */\nexport function removeApp(container) {\n  const elem = new Elem(container).elem(0);\n\n  if (!elem.length) {\n    throw new Error('No valid element to remove the app from was given! (removeApp)');\n  }\n\n  container = elem[0];\n\n  const { DwayneRootBlock } = container;\n\n  if (!(DwayneRootBlock instanceof Block)) {\n    throw new Error('No app registered inside the given element! (removeApp)');\n  }\n\n  DwayneRootBlock.$$.remove();\n  elem.removeAttr('dwayne-root');\n\n  delete container.DwayneRootBlock;\n}\n"],"names":["collectFromArray","array","callback","initialValue","value","index","findInArray","i","length","iterateArray","removeArrayElem","elem","indexOf","splice","toObjectKeys","addKey","vars","variable","has","hasOwnProperty","slice","assign","target","arguments","source","key","collectFromObject","object","except","newObject","paths","iterateObject","mapObject","defineProperties","Object","definePrototypeProperties","properties","name","defineProperty","defineFrozenProperties","window","global","self","create","keys","getProto","getPrototypeOf","setProto","setPrototypeOf","proto","__proto__","HIDE_CLASS","SVG_NS","D_REST_REGEX","rootBlocks","rootMixins","document","Symbol","toString","toStringTag","setToStringTag","klass","tag","prototype","isArray","Array","isFunction","isNil","isString","regexpSpecialCharacters","regexpSpecialsRegexp","RegExp","map","s","join","escapeRegex","string","replace","noop","setSymbolSpecies","species","DASHED_SYMBOL_REGEX","UPPERCASED_SYMBOL_REGEX","toCamelCase","capitalize","toHyphenCase","hyphenize","match","toUpperCase","toLowerCase","addAttr","attrs","attr","CSS_PROP_VALUE_SEPARATOR_REGEX","addCSSProp","css","property","split","addDataAttr","data","addNext","add","nextSibling","addParent","parentNode","addPrev","previousSibling","createHideStyleNode","head","style","find","prop","text","X_LINK_ATTR_FIND_REGEX","X_LINK_ATTR_REPLACE_REGEX","XML_NS","X_LINK_NS","Null","getAttrNS","isXmlNs","nodeName","test","Elem","closest","HTML_COLLECTION_REGEX","DOCUMENT_REGEX","ELEMENT_REGEX","isDocument","isElem","isElementsCollection","isValidNode","EVENT_REGEX","getEvent","event","bubbles","cancelable","realDetails","finalEvent","Event","err","ownerDocument","createEvent","initEvent","hide","addClass","getMatchesFunction","matches","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","selector","querySelectorAll","remove","parent","removeChild","show","removeClass","toElem","base","String","EVENT_SEPARATOR_REGEX","CSS_STYLES_SEPARATOR_REGEX","CSS_IMPORTANT_REGEX","emptyCollection","methodName","method","includes","push","elems","forEach","list","classList","cls","attributes","ns","getAttributeNS","getAttribute","removeAttr","setAttributeNS","setAttribute","childNodes","collect","is","elements","cb","element","child","contains","type","el","isText","createTextNode","createComment","createElementNS","createElement","into","cssText","getPropertyValue","getPropertyPriority","removeCSS","removeProperty","setProperty","dataset","details","dispatchEvent","filter","hasAttributeNS","hasAttribute","html","innerHTML","next","insertBefore","appendChild","end","firstChild","undefined","listener","newEvents","allListeners","listeners","addEventListener","removeEventListener","removeEventListeners","removeListeners","removeListener","removeAttributeNS","removeAttribute","first","prev","babelHelpers.get","apply","textContent","condition","hasAttr","toggle","calculateArgs","args","argsObject","arg","cleanProperty","constructMixinRegex","COMMA_REGEX","mixinMatch","mixins","Mixin","localMatch","_match","argsMatch","transformRestAttrs","mixinDefaultOpts","eventualAttrs","transformRestArgs","addArgs","executeMixinWatchers","mixin","oldValue","$$","watchers","watcher","createMixin","dynamic","comment","parentBlock","parentScope","parentTemplate","evaluate","newValue","afterUpdate","error","calculateAttrs","attrsObject","firstTime","opts","nextType","nextDynamic","nextValue","prevType","prevValue","isDynamic","evaluated","buildMixin","firstValue","constructPrivateScope","scope","globals","removeTempWatcher","removeWatchers","watchersToRemove","removeWatcher","constructPublicScope","scopeValues","privateScope","evalMode","gettingVars","oldTempWatchers","NAMED_D_BLOCK_REGEX","createBlock","node","parentElem","prevBlock","doc","namespaceURI","localBlocks","_blocks","Block","localMixins","_mixins","children","constructor","Constructor","dBlockMatch","dBlockName","dBlockArgs","blockInstance","currentAttrs","wasDRest","isDRest","localAttrs","restAttrs","createMixins","content","contentDocument","documentElement","isParentBlock","insertAfterIt","insertAfter","addContent","insertInStartOfIt","Args","locals","template","itemName","item","indexName","afterConstruct","isRendered","afterRender","isPrototypeOf","isInstanceOf","Class","Subclass","removeWithParentSignal","wrappers","reduce","wrapMixin","_value","currentValue","isParentSignal","isRemoved","beforeRemove","isElementRemoved","wrapBlock","block","wrapper","returnValue","blockHooks","mixinHooks","TAG_NAME_REGEX","ATTR_NAME_REGEX","afterElem","emptyObject","original","func","hook","warn","defaultLocals","defaultArgs","currentReturnValue","originalArgs","childrenBlocks","onChange","targetBlock","forDElements","forDItem","forDEach","onChangeFlag","result","onEvalError","e","localWatchers","watcherBlock","newResult","removeContent","newContent","afterDOMChange","contentToAdd","notRecursive","oldContent","changeContent","contentToMove","after","indexToPut","moveContent","contentToRemove","contentToInsert","moveFlag","tryToAddOrMove","localArgs","restArgs","isDElements","watchNameArgs","watchConstructorArgs","DBlock","constructDynamicNameBlock","htmlChildren","constructDynamicConstructorBlock","parentParentScope","parentParentTemplate","ownChildren","DBlockName","found","ParentScope","ParentTemplate","dBlocks","DItem","watchArgs","uid","renderSet","itemsByUIDs","UID","sortBy","newItemsByUIDs","newUIDsCounter","newUIDs","set","filterBy","isArr","iterate","sort","items","shift","prevPrevBlock","Infinity","values","cond","if","Boolean","val","compareFn","some","switchValue","caseValue","off","on","EMPTY_SPACE_REGEX","classes","newClasses","DHide","CSS_STYLE_SEPARATOR_REGEX","constructStyleFromString","trim","initialScopeValue","getProp","options","setProp","initialElemValue","isInitialScopeValueNull","isCheckbox","changeScope","offElemListener","getListenerName","offFormListener","option","selected","getValueForSetting","init","getValueForGetting","inputValue","isRadio","isMultiple","addValue","concat","body","insertTemplates","templates","newTemplates","newVars","iterateAndChangeChildren","nodes","trimmed","newTemplate","initApp","container","Error","rootBlock","removeApp","DwayneRootBlock"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}