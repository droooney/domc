{"version":3,"file":"dwayne.js","sources":["../src/utils/array.js","../src/utils/is.js","../src/utils/object.js","../src/utils/defineProperty.js","../src/utils/escapeRegex.js","../src/utils/noop.js","../src/utils/objectStatics.js","../src/global.js","../src/constants.js","../src/utils/setSymbolSpecies.js","../src/utils/toCase.js","../src/utils/toStringTag.js","../src/helpers/Elem/addAttr.js","../src/helpers/Elem/addCSSProp.js","../src/helpers/Elem/addDataAttr.js","../src/helpers/Elem/addNext.js","../src/helpers/Elem/addParent.js","../src/helpers/Elem/addPrev.js","../src/helpers/Elem/createHideStyleNode.js","../src/helpers/Elem/getAttrNS.js","../src/helpers/Elem/is.js","../src/helpers/Elem/getEvent.js","../src/helpers/Elem/hide.js","../src/helpers/Elem/matches.js","../src/helpers/Elem/remove.js","../src/helpers/Elem/show.js","../src/helpers/Elem/toElem.js","../src/find.js","../src/Elem.js","../src/helpers/Block/calculateArgs.js","../src/helpers/Block/cleanProperty.js","../src/helpers/Block/constructMixinRegex.js","../src/helpers/Block/mixinMatch.js","../src/helpers/Block/transformRestAttrs.js","../src/helpers/Block/executeMixinWatchers.js","../src/helpers/Block/calculateAttrs.js","../src/helpers/Block/normalizeArgs.js","../src/helpers/Block/constructPrivateScope.js","../src/helpers/Block/removeWatcher.js","../src/helpers/Block/constructPublicScope.js","../src/helpers/Block/createBlock.js","../src/helpers/Block/isInstanceOf.js","../src/helpers/Block/remove.js","../src/Mixin.js","../src/helpers/Block/wrap.js","../src/Block.js","../src/blocks/d-block.js","../src/blocks/d-item.js","../src/blocks/d-each.js","../src/blocks/d-elements.js","../src/blocks/d-if.js","../src/blocks/d-switch.js","../src/mixins/d-bind.js","../src/mixins/d-class.js","../src/mixins/d-elem.js","../src/mixins/d-hide.js","../src/mixins/d-node.js","../src/mixins/d-on.js","../src/mixins/d-show.js","../src/mixins/d-style.js","../src/mixins/d-value.js","../src/helpers/Block/registerBuiltins.js","../src/elems.js","../src/insertTemplates.js","../src/initApp.js","../src/removeApp.js"],"sourcesContent":["export function collectFromArray(array, callback, initialValue = {}) {\n  iterateArray(array, (value, index) => {\n    callback(initialValue, value, index, array);\n  });\n\n  return initialValue;\n}\n\nexport function findInArray(array, callback) {\n  for (let i = 0, length = array.length; i < length; i++) {\n    const value = array[i];\n\n    if (callback(value, i, array)) {\n      return {\n        key: i,\n        value\n      };\n    }\n  }\n}\n\nexport function iterateArray(array, callback) {\n  for (let i = 0, length = array.length; i < length; i++) {\n    callback(array[i], i, array);\n  }\n}\n\nexport function removeArrayElem(array, elem) {\n  const index = array.indexOf(elem);\n\n  if (index !== -1) {\n    array.splice(index, 1);\n  }\n}\n\nexport function toObjectKeys(array) {\n  return collectFromArray(array, addKey);\n}\n\nfunction addKey(vars, variable) {\n  vars[variable] = true;\n}\n","export const { isArray } = Array;\n\nexport function isFunction(value) {\n  return typeof value === 'function';\n}\n\nexport function isNil(value) {\n  /* eslint-disable eqeqeq */\n  return value == null;\n  /* eslint-enable eqeqeq */\n}\n\nexport function isString(value) {\n  return typeof value === 'string';\n}\n","import { iterateArray } from './array';\n\nconst {\n  hasOwnProperty: has\n} = {};\nconst { slice } = [];\n\nexport function assign(target) {\n  iterateArray(arguments, (source, index) => {\n    if (index) {\n      iterateObject(source, (value, key) => {\n        target[key] = value;\n      });\n    }\n  });\n\n  return target;\n}\n\nexport function collectFromObject(object, callback, initialValue = {}) {\n  iterateObject(object, (value, key) => {\n    callback(initialValue, value, key, object);\n  });\n\n  return initialValue;\n}\n\nexport function except(object) {\n  const newObject = {};\n  const paths = arguments::slice(1);\n\n  iterateObject(object, (value, key) => {\n    if (paths.indexOf(key) === -1) {\n      newObject[key] = value;\n    }\n  });\n\n  return newObject;\n}\n\nexport function hasOwnProperty(object, key) {\n  return object::has(key);\n}\n\nexport function iterateObject(object, callback) {\n  for (const key in object) {\n    if (hasOwnProperty(object, key)) {\n      callback(object[key], key, object);\n    }\n  }\n}\n\nexport function mapObject(object, callback) {\n  const newObject = {};\n\n  iterateObject(object, (value, key) => {\n    newObject[key] = callback(value, key, object);\n  });\n\n  return newObject;\n}\n","import { iterateObject } from './object';\n\n/**\n * @function defineProperties\n * @param {Object} target - Target to define properties for.\n * @param {Object} properties - Object with properties needed to be assign to the target.\n * @returns {void}\n * @description Function for defining properties of an object.\n */\nexport const { defineProperties } = Object;\n\nexport function definePrototypeProperties(target, properties) {\n  iterateObject(properties, (value, name) => {\n    Object.defineProperty(target, name, {\n      value,\n      writable: true,\n      enumerable: false,\n      configurable: true\n    });\n  });\n}\n\n/**\n * @function defineFrozenProperties\n * @param {Object} target - Target to define properties for.\n * @param {Object} properties - Object with properties needed to be assign to the target.\n * @returns {void}\n * @description Function for defining frozen properties of an object.\n */\nexport function defineFrozenProperties(target, properties) {\n  iterateObject(properties, (value, name) => {\n    Object.defineProperty(target, name, {\n      value,\n      writable: false,\n      enumerable: false,\n      configurable: false\n    });\n  });\n}\n","const regexpSpecialCharacters = [\n  '.',\n  '+', '*', '?',\n  '(', ')',\n  '[', ']',\n  '{', '}',\n  '<', '>',\n  '^', '$',\n  '!',\n  '=',\n  ':',\n  '-',\n  '|',\n  ',',\n  '\\\\'\n];\nconst regexpSpecialsRegexp = new RegExp(\n  regexpSpecialCharacters\n    .map((s) => `\\\\${ s }`)\n    .join('|'),\n  'g'\n);\n\nexport function escapeRegex(string) {\n  return string.replace(regexpSpecialsRegexp, '\\\\$&');\n}\n","export function noop() {}\n","export const {\n  create,\n  keys,\n  getPrototypeOf: getProto\n} = Object;\n\nexport const setProto = Object.setPrototypeOf || ((target, proto) => {\n  /* eslint-disable no-proto */\n  target.__proto__ = proto;\n  /* eslint-enable no-proto */\n});\n","/* eslint-disable no-nested-ternary */\n/* eslint-disable no-negated-condition */\nexport default typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n/* eslint-enable no-nested-ternary */\n/* eslint-enable no-negated-condition */\n","import { create } from './utils/objectStatics';\n\nexport const HIDE_CLASS = '__dwayne-hidden__';\nexport const SVG_NS = 'http://www.w3.org/2000/svg';\nexport const D_REST_REGEX = /^d-rest(?:#|$)/;\n\nexport const rootBlocks = create(null);\nexport const rootMixins = create(null);\nexport const {\n  document = {},\n  Symbol = {}\n} = global;\n","import { defineProperties } from './defineProperty';\nimport { Symbol } from '../constants';\n\nexport function setSymbolSpecies(klass, species) {\n  if (Symbol.species) {\n    defineProperties(klass, {\n      [Symbol.species]: {\n        get() {\n          return species;\n        }\n      }\n    });\n  }\n}\n","const DASHED_SYMBOL_REGEX = /-[a-z]/g;\nconst UPPERCASED_SYMBOL_REGEX = /[A-Z]/g;\n\nexport function toCamelCase(value) {\n  return value.replace(DASHED_SYMBOL_REGEX, capitalize);\n}\n\nexport function toHyphenCase(value) {\n  return value.replace(UPPERCASED_SYMBOL_REGEX, hyphenize);\n}\n\nfunction capitalize(match) {\n  return match[1].toUpperCase();\n}\n\nfunction hyphenize(match) {\n  return `-${ match[0].toLowerCase() }`;\n}\n","import { definePrototypeProperties } from './defineProperty';\nimport { Symbol } from '../constants';\n\nconst { toString } = {};\n\n/**\n * @function toStringTag\n * @param {*} object - Object to get toStringTag of.\n * @returns {String} Cut string.\n * @description Cut \"Type\" string from \"[object Type]\" string that gotten from {}.toString,call(object).\n */\nexport function toStringTag(object) {\n  return object::toString().slice(8, -1);\n}\n\nexport function setToStringTag(klass, tag) {\n  if (Symbol.toStringTag) {\n    definePrototypeProperties(klass.prototype, {\n      [Symbol.toStringTag]: tag\n    });\n  }\n}\n","export function addAttr(attrs, attr) {\n  attrs[attr.name] = attr.value;\n}\n","import { toCamelCase } from '../../utils';\n\nconst CSS_PROP_VALUE_SEPARATOR_REGEX = /: /;\n\nexport function addCSSProp(css, value) {\n  if (value) {\n    const property = value.split(CSS_PROP_VALUE_SEPARATOR_REGEX);\n\n    css[toCamelCase(property[0])] = property[1];\n  }\n}\n","export function addDataAttr(data, value, key) {\n  data[key] = value;\n}\n","export function addNext(add, elem) {\n  add(elem.nextSibling);\n}\n","export function addParent(add, elem) {\n  add(elem.parentNode);\n}\n","export function addPrev(add, elem) {\n  add(elem.previousSibling);\n}\n","import { HIDE_CLASS } from '../../constants';\n\nexport function createHideStyleNode(head) {\n  const style = head.find(`style#${ HIDE_CLASS }`);\n\n  if (style.length) {\n    return;\n  }\n\n  head\n    .create('style')\n    .prop('id', HIDE_CLASS)\n    .text(`.${ HIDE_CLASS }{display:none !important;}`);\n}\n","import { Elem } from '../../Elem';\n\nconst X_LINK_ATTR_FIND_REGEX = /^xlink:\\w/;\nconst X_LINK_ATTR_REPLACE_REGEX = /^xlink:/;\nconst XML_NS = 'http://www.w3.org/2000/xmlns/';\nconst X_LINK_NS = 'http://www.w3.org/1999/xlink';\nconst Null = {\n  ns: null\n};\n\nexport function getAttrNS(attr, elem) {\n  const isXmlNs = attr === 'xmlns';\n\n  if (isXmlNs || attr === 'xmlns:xlink') {\n    if (elem.nodeName !== 'SVG') {\n      return Null;\n    }\n\n    return {\n      ns: XML_NS,\n      name: isXmlNs\n        ? 'xmlns'\n        : 'xlink'\n    };\n  }\n\n  if (X_LINK_ATTR_FIND_REGEX.test(attr)) {\n    if (!new Elem(elem).closest('svg').length) {\n      return Null;\n    }\n\n    return {\n      ns: X_LINK_NS,\n      name: attr.replace(X_LINK_ATTR_REPLACE_REGEX, '')\n    };\n  }\n\n  return Null;\n}\n","import { toStringTag, isArray } from '../../utils';\nimport { Elem } from '../../Elem';\n\nconst HTML_COLLECTION_REGEX = /^(HTMLCollection|NodeList)$/;\nconst DOCUMENT_REGEX = /Document$/;\nconst ELEMENT_REGEX = /Element$/;\n\nexport function isDocument(value) {\n  return DOCUMENT_REGEX.test(toStringTag(value));\n}\n\nexport function isElem(value) {\n  return value instanceof Elem;\n}\n\nexport function isElementsCollection(value) {\n  return (\n    HTML_COLLECTION_REGEX.test(toStringTag(value))\n    || isElem(value)\n    || isArray(value)\n  );\n}\n\nexport function isValidNode(value) {\n  const tag = toStringTag(value);\n\n  return (\n    ELEMENT_REGEX.test(tag)\n    || DOCUMENT_REGEX.test(tag)\n    || tag === 'Text'\n    || tag === 'DocumentFragment'\n    || tag === 'Comment'\n  );\n}\n","import { assign, toStringTag } from '../../utils';\nimport { isDocument } from './is';\n\nconst EVENT_REGEX = /Event$/;\n\nexport function getEvent(event, bubbles, cancelable, realDetails, elem) {\n  let finalEvent = event;\n\n  if (!EVENT_REGEX.test(toStringTag(finalEvent))) {\n    try {\n      finalEvent = new Event(finalEvent, { bubbles, cancelable });\n      assign(finalEvent, realDetails);\n    } catch (err) {\n      const document = isDocument(elem)\n        ? elem\n        : elem.ownerDocument;\n\n      finalEvent = document.createEvent('Event');\n      finalEvent.initEvent(event, bubbles, cancelable);\n\n      assign(finalEvent, realDetails);\n    }\n  }\n\n  return finalEvent;\n}\n","import { createHideStyleNode } from './createHideStyleNode';\nimport { HIDE_CLASS } from '../../constants';\nimport { Elem } from '../../Elem';\n\nexport function hide(elem) {\n  createHideStyleNode(new Elem(elem.ownerDocument.head));\n  new Elem(elem).addClass(HIDE_CLASS);\n}\n","import { isDocument } from './is';\n\nconst { indexOf } = [];\n\nexport function getMatchesFunction(elem) {\n  return (\n    elem.matches\n    || elem.matchesSelector\n    || elem.webkitMatchesSelector\n    || elem.mozMatchesSelector\n    || elem.msMatchesSelector\n    || elem.oMatchesSelector\n    || matches\n  );\n}\n\nfunction matches(selector) {\n  const document = isDocument(this)\n    ? this\n    : this.ownerDocument;\n\n  return document.querySelectorAll(selector)::indexOf(this) !== -1;\n}\n","export function remove(elem) {\n  const parent = elem.parentNode;\n\n  if (parent) {\n    parent.removeChild(elem);\n  }\n}\n","import { HIDE_CLASS } from '../../constants';\nimport { Elem } from '../../Elem';\n\nexport function show(elem) {\n  new Elem(elem).removeClass(HIDE_CLASS);\n}\n","import { isElem } from './is';\nimport { Elem } from '../../Elem';\n\nexport function toElem(elem) {\n  return isElem(elem)\n    ? elem\n    : new Elem(elem);\n}\n","import { Elem } from './Elem';\nimport { document } from './constants';\n\n/**\n * @function find\n * @public\n * @param {String} selector - Selector to find.\n * @param {Element|Node} [base = document] - Base to find in.\n * @returns {Elem} New instance of Elem.\n * @description Synonym for\n * [Document#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Document/querySelectorAll}.\n */\nexport function find(selector, base = document) {\n  return new Elem(base.querySelectorAll(String(selector)));\n}\n","import {\n  isNil, isString,\n  definePrototypeProperties,\n  collectFromArray, collectFromObject,\n  iterateArray, iterateObject,\n  toHyphenCase, setSymbolSpecies,\n  setToStringTag, setProto\n} from './utils';\nimport {\n  isDocument, isValidNode, getMatchesFunction,\n  addAttr, addCSSProp, addDataAttr,\n  addNext, addParent, addPrev,\n  toElem, isElementsCollection,\n  getAttrNS, getEvent, hide, show, remove\n} from './helpers/Elem';\nimport { SVG_NS } from './constants';\nimport { find } from './find';\n\n/**\n * @typedef {String} ElemEventString\n * @public\n * @description A string containing events separated by a comma with zero or more spaces or just spaces.\n */\n\n/**\n * @callback ElemListener\n * @public\n * @param {Event} e - Fired event.\n * @param {Element} elem - Element on which the listener was called.\n * @param {Number} index - Index of the element on which the listener was called.\n */\n\n/**\n * @callback ElemRemoveListeners\n * @public\n * @param {...ElemEventString} events - If at least one argument present only removes event listeners specified\n * by the events in the arguments.\n */\n\n/**\n * @callback IterationCallback\n * @public\n * @param {Element|Node} node - Iteration element.\n * @param {Number} index - Iteration index.\n * @param {Elem} elem - Initial set.\n */\n\n/**\n * @callback CollectCallback\n * @public\n * @param {AddCallback} add - Add element to the eventual set function.\n * @param {Element|Node} node - Iteration element.\n * @param {Number} index - Iteration index.\n * @param {Elem} elem - Initial set.\n */\n\n/**\n * @callback AddCallback\n * @public\n * @param {...(Element|Node|elem)} elem - Element to add.\n */\n\n/**\n * @callback ElemMethod\n * @public\n * @this Elem\n */\n\nconst EVENT_SEPARATOR_REGEX = /[,| ] */;\nconst CSS_STYLES_SEPARATOR_REGEX = /; ?/;\nconst CSS_IMPORTANT_REGEX = / ?!important$/;\nconst emptyCollection = [];\n\n/**\n * @class Elem\n * @extends Array.<Element|Node>\n * @public\n * @param {Element|Element[]} [elem = []] - An element or an array of elements to wrap.\n * @returns {Elem} Instance of Elem.\n * @description Wrap of an elements set.\n *\n * @example\n * new Elem(document.body);\n * new Elem(document.querySelectorAll('.cls'));\n * new Elem(document.getElementsByClassName('cls'));\n */\nclass Elem extends Array {\n  /**\n   * @method Elem.addMethods\n   * @public\n   * @param {String|Object.<String, ElemMethod>} methodName - Name of the method or object of\n   * method names and methods.\n   * @param {ElemMethod} [method] - If the first argument is a string this should be the method itself.\n   * @returns {typeof Elem}\n   */\n  static addMethods(methodName, method) {\n    if (arguments.length >= 2) {\n      methodName = { [methodName]: method };\n    }\n\n    definePrototypeProperties(this.prototype, methodName);\n\n    return this;\n  }\n\n  constructor(elem = emptyCollection) {\n    super();\n\n    if (!isElementsCollection(elem)) {\n      elem = [elem];\n    }\n\n    setProto(this, Elem.prototype);\n\n    iterateArray(elem, (elem) => {\n      if (!isElementsCollection(elem)) {\n        elem = [elem];\n      }\n\n      iterateArray(elem, (elem) => {\n        if (!this.includes(elem) && isValidNode(elem)) {\n          this.push(elem);\n        }\n      });\n    });\n  }\n\n  /**\n   * @method Elem#add\n   * @public\n   * @param {...(Elem|Element|Element[])} elements - Each argument is a Elem, or Element, or array of Elements.\n   * @returns {Elem} Returns this.\n   * @description Method for adding new elements to the set.\n   *\n   * @example\n   * elem1.find('.cls1')\n   *   .add(elem2.find('.cls2'))\n   *   .hide();\n   */\n  add(...elements) {\n    const elems = this.slice();\n\n    iterateArray(elements, (elem) => {\n      if (!isElementsCollection(elem)) {\n        elem = [elem];\n      }\n\n      iterateArray(elem, (elem) => {\n        if (!elems.includes(elem) && isValidNode(elem)) {\n          elems.push(elem);\n        }\n      });\n    });\n\n    return elems;\n  }\n\n  /**\n   * @method Elem#addClass\n   * @public\n   * @param {...String} classes - Classes to add.\n   * @returns {Elem} Returns this.\n   * @description Method for adding classes to the all the elements in the set.\n   *\n   * @example\n   * elem.addClass('red', 'round');\n   */\n  addClass(...classes) {\n    return this.forEach((elem) => {\n      const list = elem.classList;\n\n      iterateArray(classes, (cls) => list.add(cls));\n    });\n  }\n\n  /**\n   * @method Elem#attr\n   * @public\n   * @param {String|Object.<String, String>} [attr] - Name of the attribute to get or\n   * an object of the format { [attrName]: value, ... } to set attributes.\n   * @param {String} [value] - If the first argument is a string\n   * it should be a value to set for that attribute.\n   * @returns {Object|String|Elem} If no arguments passed, D-Wrap of attributes of the first element in the set\n   * returned, if 1 string argument is passed the value of the attribute of the first element in the set\n   * returned otherwise returns this.\n   * @description Method for getting/setting attributes.\n   *\n   * @example\n   * elem.attr('attr1', 'value1'); // attribute attr1 set to 'value1' and this returned\n   * elem.attr('attr1');           // 'value1'\n   * elem.attr({\n   *   attr1: 'value3',            // attribute attr1 set to 'value3'\n   *   attr2: 'value2'             // attribute attr2 set to 'value2'\n   * });                           // this returned\n   * elem.attr();                  // { attr1: 'value3', attr2: 'value2' }\n   */\n  attr(attr, value) {\n    const elem = this[0];\n\n    if (!arguments.length) {\n      if (!elem) {\n        return {};\n      }\n\n      return collectFromArray(elem.attributes, addAttr);\n    }\n\n    if (arguments.length <= 1 && isString(attr)) {\n      if (!elem) {\n        return null;\n      }\n\n      const {\n        ns,\n        name\n      } = getAttrNS(attr, elem);\n\n      return ns\n        ? elem.getAttributeNS(ns, name)\n        : elem.getAttribute(attr);\n    }\n\n    if (arguments.length >= 2) {\n      attr = { [attr]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(attr, (value, key) => {\n        if (isNil(value) || value === false) {\n          return new Elem(elem).removeAttr(key);\n        }\n\n        value = value === true ? '' : value;\n\n        const { ns } = getAttrNS(key, elem);\n\n        if (ns) {\n          elem.setAttributeNS(ns, key, value);\n        } else {\n          elem.setAttribute(key, value);\n        }\n      });\n    });\n  }\n\n  /**\n   * @method Elem#children\n   * @public\n   * @returns {Elem} D-Wrap of the children of the first element in the set.\n   * @description Method for getting element's children.\n   *\n   * @example\n   * const children = elem.children();\n   */\n  children() {\n    return new Elem(this.length ? this[0].childNodes : []);\n  }\n\n  /**\n   * @method Elem#closest\n   * @public\n   * @param {String} selector - See the link.\n   * @returns {Elem} Set of the closest elements.\n   * @description Synonym for\n   * [Element#closest]{@link https://developer.mozilla.org/en/docs/Web/API/Element/closest}.\n   */\n  closest(selector) {\n    return this.collect((add, elem) => {\n      while (elem) {\n        if (new Elem(elem).is(selector)) {\n          return add(elem);\n        }\n\n        elem = elem.parentNode;\n      }\n    });\n  }\n\n  /**\n   * @method Elem#collect\n   * @public\n   * @param {CollectCallback} callback - Called on each iteration.\n   * @returns {Elem} Returns eventual set.\n   * @description Method for collecting elements into a new set.\n   *\n   * @example\n   * const parents = elem.collect((add, elem) => {\n   *   add(elem.parentNode);\n   * });\n   */\n  collect(callback) {\n    const elements = [];\n    const cb = ::elements.push;\n\n    this.forEach((elem, index) => {\n      callback(cb, elem, index, this);\n    });\n\n    return new Elem(elements);\n  }\n\n  /**\n   * @method Elem#contains\n   * @public\n   * @param {Elem|Element} element - Element to find out if it's within the first element in the set.\n   * @returns {Boolean} Returns if the argument within this element.\n   * @description Method is extension for\n   * [Node#contains]{@link https://developer.mozilla.org/en/docs/Web/API/Node/contains}.\n   *\n   * @example\n   * elem.contains(elem2);   // true|false\n   */\n  contains(element) {\n    const parent = this[0];\n    const child = toElem(element)[0];\n\n    return !parent || !child\n      ? false\n      : parent.contains(child);\n  }\n\n  /**\n   * @method Elem#create\n   * @public\n   * @param {String} type - Type of created element. If type is \"#text\" a text node is created.\n   * If type is \"#comment\" a comment node is created.\n   * @returns {Elem} New instance of Elem - wrap of the created elements.\n   * @description Method for creating elements inside this element.\n   * If this element is not an Element the element is just created.\n   *\n   * @example\n   * elem.create('div');\n   */\n  create(type) {\n    return this.collect((add, elem) => {\n      let el = null;\n      const isText = type === '#text';\n      const document = isDocument(elem)\n        ? elem\n        : elem.ownerDocument;\n\n      if (isText || type === '#comment') {\n        el = isText\n          ? document.createTextNode('')\n          : document.createComment('');\n      } else {\n        el = type === 'svg'\n          ? document.createElementNS(SVG_NS, type)\n          : document.createElement(type);\n      }\n\n      if (!isDocument(elem)) {\n        new Elem(el).into(elem);\n      }\n\n      add(el);\n    });\n  }\n\n  /**\n   * @method Elem#css\n   * @public\n   * @param {String|Object.<String, String>} [property] - Name of the property to get or\n   * an object of the format { [property]: value, ... } to set styles.\n   * @param {String} [value] - If the first argument is a string it should be a value to set for that property.\n   * @returns {Object|String|Elem} If no arguments passed, D-Wrap of css styles of the element returned,\n   * if 1 string argument is passed the value of the property returned otherwise returns this.\n   * @description Method for getting/setting styles. Supports !important.\n   *\n   * @example\n   * elem.css('display', 'none'); // display set to 'none' and this returned\n   * elem.css('display');         // 'none'\n   * elem.css({\n   *   display: 'inline',         // display set to 'inline'\n   *   cursor: 'pointer'          // cursor set to 'pointer'\n   * });                          // this returned\n   * elem.css();                  // { display: 'none', cursor: 'pointer' }\n   */\n  css(property, value) {\n    const { style } = this[0] || {};\n\n    if (!arguments.length) {\n      if (!style) {\n        return {};\n      }\n\n      return collectFromArray(style.cssText.split(CSS_STYLES_SEPARATOR_REGEX), addCSSProp);\n    }\n\n    if (arguments.length <= 1 && isString(property)) {\n      if (!style) {\n        return '';\n      }\n\n      property = toHyphenCase(property);\n\n      return style.getPropertyValue(property) + (style.getPropertyPriority(property) ? ' !important' : '');\n    }\n\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(property, (value, property) => {\n        property = toHyphenCase(property);\n\n        if (isNil(value) || value === false) {\n          return new Elem(elem).removeCSS(property);\n        }\n\n        elem.style.removeProperty(property);\n        elem.style.setProperty(\n          property,\n          value.replace(CSS_IMPORTANT_REGEX, ''),\n          CSS_IMPORTANT_REGEX.test(value) ? 'important' : ''\n        );\n      });\n    });\n  }\n\n  /**\n   * @method Elem#data\n   * @public\n   * @param {String|Object.<String, String>} [key] - Name of the data attribute (without data- prefix)\n   * to get or an object of the format { [attrName]: value, ... } to set attributes.\n   * @param {String} [value] - If the first argument is a string it should be a value to set for that attribute.\n   * @returns {Object|String|Elem} If no arguments passed, D-Wrap of dataset of the element returned,\n   * if 1 string argument is passed the value of the data attribute returned otherwise returns this.\n   * @description Method for getting/setting data attributes. See\n   * [HTMLElement#dataset]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/dataset}.\n   *\n   * @example\n   * elem.data('someKey1', 'value'); // attribute data-some-key1 set to 'value1' and this returned\n   * elem.data('someKey1');          // 'value1'\n   * elem.data({\n   *   someKey1: 'value3',           // attribute data-some-key1 set to 'value3'\n   *   someKey2: 'value2'            // attribute data-some-key2 set to 'value2'\n   * });                             // this returned\n   * elem.data();                    // { someKey1: 'value3', someKey2: 'value2' }\n   */\n  data(key, value) {\n    const { dataset } = this[0] || {};\n\n    if (!arguments.length) {\n      if (!dataset) {\n        return {};\n      }\n\n      return collectFromObject(dataset, addDataAttr);\n    }\n\n    if (arguments.length === 1 && isString(key)) {\n      if (!dataset) {\n        return;\n      }\n\n      return dataset[key];\n    }\n\n    if (arguments.length >= 2) {\n      key = { [key]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(key, (value, key) => {\n        elem.dataset[key] = value;\n      });\n    });\n  }\n\n  /**\n   * @method Elem#dispatch\n   * @public\n   * @param {String|Event} event - Event or a string (new Event(event) is created).\n   * @param {Object} [details = {}] - Object that is assigned to the event.\n   * @returns {Elem} Returns this.\n   * @see https://developer.mozilla.org/en/docs/Web/API/Event/Event\n   * @description Synonym for\n   * [EventTarget#dispatchEvent]{@link https://developer.mozilla.org/en/docs/Web/API/EventTarget/dispatchEvent}.\n   *\n   * @example\n   * elem.dispatch('click');\n   * elem.dispatch('click', { bubbles: false, cancellable: false, data: 1 });\n   * elem.dispatch(new CustomEvent('custom-event'));\n   */\n  dispatch(event, details = {}) {\n    const {\n      bubbles = true,\n      cancelable = true,\n      ...realDetails\n    } = details;\n\n    return this.forEach((elem) => {\n      elem.dispatchEvent(getEvent(\n        event,\n        bubbles,\n        cancelable,\n        realDetails,\n        elem\n      ));\n    });\n  }\n\n  /**\n   * @method Elem#elem\n   * @public\n   * @param {Number} [index = 0] - Index of the element of the set to get. Negative index means elem.length + index.\n   * @returns {Elem} New instance of Elem.\n   *\n   * @example\n   * elem.elem(1); // a wrap of the element in the set that has index 1\n   * elem.elem();  // a wrap of the element in the set that has index 0\n   */\n  elem(index = 0) {\n    if (index < 0) {\n      index = this.length + index;\n    }\n\n    return new Elem(this[index]);\n  }\n\n  /**\n   * @method Elem#filter\n   * @public\n   * @param {IterationCallback|String} filter - Filter function or a selector.\n   * @returns {Elem} New instance of Elem.\n   * @description Method for filtering elements.\n   *\n   * @example\n   * elem.filter((elem) => new Elem(elem).closest('.parent'));\n   */\n  filter(filter) {\n    if (isString(filter)) {\n      const selector = filter;\n\n      filter = (elem) => (\n        new Elem(elem).is(selector)\n      );\n    }\n\n    return this.collect((add, elem, index) => {\n      if (filter(elem, index, this)) {\n        add(elem);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#find\n   * @public\n   * @param {String} selector - Selector to find.\n   * @returns {Elem} New instance of Elem.\n   * @description Synonym for\n   * [Element#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Element/querySelectorAll}.\n   */\n  find(selector) {\n    return this.collect((add, elem) => {\n      add(find(selector, elem));\n    });\n  }\n\n  /**\n   * @method Elem#forEach\n   * @public\n   * @param {IterationCallback} callback - Called on each iteration.\n   * @returns {Elem} Returns this.\n   * @description Method for iterating over the set.\n   *\n   * @example\n   * find('.cls').forEach((element, index, set) => {\n   *   // do something\n   * });\n   */\n  forEach(callback) {\n    iterateArray(this, (value, key) => {\n      callback(value, key, this);\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Elem#hasAttr\n   * @public\n   * @param {String} attr - Name of the attribute.\n   * @returns {Boolean} If the first element in the set has the attribute.\n   * @description Method that returns if the first element in the set has the attribute or not.\n   *\n   * @example\n   * elem.attr('attr', 'value').hasAttr('attr'); // true\n   * elem.removeAttr('attr').hasAttr('attr');    // false\n   */\n  hasAttr(attr) {\n    const elem = this[0];\n\n    if (!elem) {\n      return false;\n    }\n\n    const { ns } = getAttrNS(attr, elem);\n\n    return ns\n      ? elem.hasAttributeNS(ns, attr)\n      : elem.hasAttribute(attr);\n  }\n\n  /**\n   * @method Elem#hasClass\n   * @public\n   * @param {String} cls - Name of the class.\n   * @returns {Boolean} If the first element in the set has the class.\n   * @description Method that returns if the first element in the set has the class or not.\n   *\n   * @example\n   * elem.addClass('cls').hasClass('cls');    // true\n   * elem.removeClass('cls').hasClass('cls'); // false\n   */\n  hasClass(cls) {\n    const elem = this[0];\n\n    return elem\n      ? elem.classList.contains(cls)\n      : false;\n  }\n\n  /**\n   * @method Elem#hide\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Hides all elements in the set.\n   *\n   * @example\n   * elem.hide();\n   */\n  hide() {\n    return this.forEach(hide);\n  }\n\n  /**\n   * @method Elem#html\n   * @public\n   * @param {String|*} [html] - HTML to write instead of current HTML.\n   * @returns {Elem|String} If no arguments passed HTML of the first element in the set returned.\n   * Otherwise all elements HTML in the set are set to the html argument.\n   * @description Gets or sets HTML.\n   *\n   * @example\n   * elem.html('<div>1</div>');\n   * elem.html(); // '<div>1</div>'\n   */\n  html(html) {\n    if (!arguments.length) {\n      const elem = this[0];\n\n      return elem\n        ? elem.innerHTML\n        : '';\n    }\n\n    return this.forEach((elem) => {\n      elem.innerHTML = html;\n    });\n  }\n\n  /**\n   * @method Elem#includes\n   * @public\n   * @param {Element|node} elem - Element to search.\n   * @return {Boolean} If the element is in the set.\n   * @description The same as Array#includes.\n   */\n  includes(elem) {\n    return this.indexOf(elem) !== -1;\n  }\n\n  /**\n   * @method Elem#insertAfter\n   * @public\n   * @param {Elem|Element} element - Element to insert this element after.\n   * @returns {Elem} Returns this.\n   * @description Puts the elements from the set after the element specified by the argument.\n   * The elements remain in the same order.\n   *\n   * @example\n   * elem.insertAfter(elem2);\n   * elem.insertAfter(document.getElementById('id'));\n   * elem.insertAfter('#id div.c1');\n   */\n  insertAfter(element) {\n    element = toElem(element).elem(0);\n\n    let parent = element.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    element = element.next()[0];\n    parent = parent[0];\n\n    return this.forEach((elem) => {\n      if (elem === element) {\n        element = element.nextSibling;\n\n        return;\n      }\n\n      if (element) {\n        parent.insertBefore(elem, element);\n      } else {\n        parent.appendChild(elem);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#insertBefore\n   * @public\n   * @param {Elem|Element} element - Element to insert this element before.\n   * @returns {Elem} Returns this.\n   * @description Puts the elements from the set before the element specified by the argument.\n   * The elements remain in the same order.\n   *\n   * @example\n   * elem.insertBefore(elem2);\n   * elem.insertBefore(document.getElementById('id'));\n   * elem.insertBefore('#id div.c1');\n   */\n  insertBefore(element) {\n    element = toElem(element).elem(0);\n\n    let parent = element.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    element = element[0];\n    parent = parent[0];\n\n    return this.forEach((elem) => {\n      parent.insertBefore(elem, element);\n    });\n  }\n\n  /**\n   * @method Elem#into\n   * @public\n   * @param {Elem|Element} element - Element to put this elements into.\n   * @param {Boolean} end - If the elements should be inserted to the end. If false they are inserted to the start.\n   * @returns {Elem} Returns this.\n   * @description Method is similar to\n   * [Node#appendChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/appendChild}.\n   *\n   * @example\n   * elem.into(elem2);\n   * elem.into(document.getElementById('id'));\n   * elem.into('#id div.c1');\n   */\n  into(element, end = true) {\n    element = toElem(element)[0];\n\n    if (!element) {\n      return this;\n    }\n\n    if (!end && element.firstChild) {\n      for (let i = this.length - 1; i >= 0; i--) {\n        element.insertBefore(this[i], element.firstChild);\n      }\n\n      return this;\n    }\n\n    return this.forEach((elem) => {\n      element.appendChild(elem);\n    });\n  }\n\n  /**\n   * @method Elem#is\n   * @public\n   * @param {String} selector\n   * @returns {Boolean} If the first element in the set matches the selector.\n   * @description Synonym for\n   * [Element#matches]{@link https://developer.mozilla.org/en/docs/Web/API/Element/matches}.\n   *\n   * @example\n   * elem.addClass('cls');\n   * elem.is('.cls');         // true\n   *\n   * elem.removeClass('cls');\n   * elem.is('.cls');         // false\n   */\n  is(selector) {\n    if (!this.length) {\n      return false;\n    }\n\n    const elem = this[0];\n    const matches = getMatchesFunction(elem);\n\n    return elem::matches(selector);\n  }\n\n  /**\n   * @method Elem#name\n   * @public\n   * @returns {String|void} nodeName (lowercased) of the first element in the set.\n   * @description Method for getting name of the first element in the set.\n   *\n   * @example\n   * elem.create('div').name() // 'div'\n   */\n  name() {\n    const elem = this[0];\n\n    return elem\n      ? elem.nodeName.toLowerCase()\n      : undefined;\n  }\n\n  /**\n   * @method Elem#next\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Method for finding next element to each element in the set.\n   *\n   * @example\n   * elem.next(); // finds next element to each element in the set\n   */\n  next() {\n    return this.collect(addNext);\n  }\n\n  /**\n   * @method Elem#on\n   * @public\n   * @param {ElemEventString|Object.<ElemEventString|ElemListener>} event - Either a {@link ElemEventString} string\n   * or an object with event keys (a key is also ElemEventString) and listeners values.\n   * @param {ElemListener} [listener] - If the first argument is a string it must be a listener function for\n   * specified event(s).\n   * @returns {ElemRemoveListeners} Function that takes optional event argument.\n   * @description Adds event listeners for all the elements in the set.\n   *\n   * @example\n   * elem.on(\n   *   'change, input',\n   *   (e, elem, index) => console.log(elem.value)\n   * );\n   * elem.on(\n   *   'change, input',\n   *   (e, elem, index) => console.log(elem.value)\n   * );\n   * elem.on({\n   *   'change, input': (e, elem, index) => console.log(elem.value),\n   *   'blur': () => console.log('blur')\n   * });\n   *\n   * const removeListeners = elem.on({\n   *   'change, input': (e, elem, index) => console.log(elem.value),\n   *   'blur': () => console.log('blur')\n   * });\n   *\n   * removeListeners('click');\n   * removeListeners('blur, change');\n   * removeListeners('blur, change', 'input');\n   * removeListeners();\n   */\n  on(event, listener) {\n    if (isString(event)) {\n      event = { [event]: listener };\n    }\n\n    const newEvents = {};\n    const allListeners = {};\n\n    iterateObject(event, (listener, event) => {\n      iterateArray(event.split(EVENT_SEPARATOR_REGEX), (event) => {\n        (newEvents[event] = newEvents[event] || []).push(listener);\n      });\n    });\n\n    this.forEach((elem) => {\n      iterateObject(newEvents, (listeners, event) => {\n        iterateArray(listeners, (listener) => {\n          elem.addEventListener(event, listener, false);\n          (allListeners[event] = allListeners[event] || []).push(() => {\n            elem.removeEventListener(event, listener);\n          });\n        });\n      });\n    });\n\n    return function removeEventListeners(event) {\n      if (arguments.length) {\n        iterateArray(arguments, (event) => {\n          iterateArray(event.split(EVENT_SEPARATOR_REGEX), (event) => {\n            const removeListeners = allListeners[event];\n\n            if (removeListeners) {\n              iterateArray(removeListeners, (removeListener) => removeListener());\n\n              delete allListeners[event];\n            }\n          });\n        });\n      } else {\n        iterateObject(allListeners, (removeListeners, event) => {\n          iterateArray(removeListeners, (removeListener) => removeListener());\n\n          delete allListeners[event];\n        });\n      }\n    };\n  }\n\n  /**\n   * @method Elem#parent\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Method returns wrap of the set of the parent elements of each element in the set.\n   */\n  parent() {\n    return this.collect(addParent);\n  }\n\n  /**\n   * @method Elem#prev\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Method for finding previous element to each element in the set.\n   *\n   * @example\n   * elem.prev(); // finds previous element to each element in the set\n   */\n  prev() {\n    return this.collect(addPrev);\n  }\n\n  /**\n   * @method Elem#prop\n   * @public\n   * @param {String|Object.<String, *>} property - Either a string of a property or an assigned object.\n   * @param {*} [value] - If a property parameter is a string\n   * this has to be an assigned value if it's present.\n   * @returns {Elem|*} Returns this if it's setter or a value if getter.\n   * @description Method that is either a property getter for the first element in the set\n   * or a setter for every element in the set.\n   *\n   * @example\n   * elem.prop('draggable', false);\n   * elem.prop('draggable'); // false\n   */\n  prop(property, value) {\n    if (arguments.length <= 1 && isString(property)) {\n      return this[0] ? this[0][property] : undefined;\n    }\n\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(property, (value, prop) => {\n        elem[prop] = value;\n      });\n    });\n  }\n\n  /**\n   * @method Elem#remove\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Removes all the elements from the set from the document.\n   * Note: it doesn't remove them from the set so watch out for the memory leaks.\n   *\n   * @example\n   * elem.remove();\n   */\n  remove() {\n    return this.forEach(remove);\n  }\n\n  /**\n   * @method Elem#removeAttr\n   * @public\n   * @param {...String} attributes - Attributes to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the attributes from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeAttr('foo', 'bar', 'baz');\n   */\n  removeAttr(...attributes) {\n    return this.forEach((elem) => {\n      iterateArray(attributes, (attr) => {\n        const { ns } = getAttrNS(attr, elem);\n\n        if (ns) {\n          elem.removeAttributeNS(ns, attr);\n        } else {\n          elem.removeAttribute(attr);\n        }\n      });\n    });\n  }\n\n  /**\n   * @method Elem#removeClass\n   * @public\n   * @param {...String} classes - Classes to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the classes from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeClass('foo', 'bar', 'baz');\n   */\n  removeClass(...classes) {\n    return this.forEach((elem) => {\n      const list = elem.classList;\n\n      iterateArray(classes, (cls) => list.remove(cls));\n    });\n  }\n\n  /**\n   * @method Elem#removeCSS\n   * @public\n   * @param {...String} props - CSS properties to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the CSS properties from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeCSS('display', 'position', 'margin');\n   */\n  removeCSS(...props) {\n    return this.forEach((elem) => {\n      iterateArray(props, (css) => {\n        elem.style.removeProperty(toHyphenCase(css));\n      });\n    });\n  }\n\n  /**\n   * @method Elem#replace\n   * @public\n   * @param {Elem|Element} element - Element to replace the first element in the set\n   * with a set of elements specified by the argument (Element or Elem).\n   * @returns {Elem} Returns this.\n   * @description Method is similar to\n   * [Node#replaceChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/replaceChild}.\n   *\n   * @example\n   * elem.replace(elem2);\n   * elem.replace(document.getElementById('id'));\n   * elem.replace('#id div.c1');\n   */\n  replace(element) {\n    element = toElem(element);\n\n    const first = this.elem(0);\n    const parent = first.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    let elem = parent;\n    let method = 'into';\n    const next = first.next()[0];\n    const prev = first.prev()[0];\n\n    if (next) {\n      elem = next;\n      method = 'insertBefore';\n    } else if (prev) {\n      elem = prev;\n      method = 'insertAfter';\n    }\n\n    first.remove();\n\n    element[method](elem);\n  }\n\n  /**\n   * @method Elem#show\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Shows all elements in the set.\n   * If an element was hidden using {@link Elem#hide} previous display is set.\n   *\n   * @example\n   * elem.show();\n   */\n  show() {\n    return this.forEach(show);\n  }\n\n  /**\n   * @method Elem#slice\n   * @public\n   * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\n   * @returns {Elem}\n   * @description The same as Array#slice but for Elem.\n   */\n  slice() {\n    return new Elem(super.slice.apply(this, arguments));\n  }\n\n  /**\n   * @method Elem#text\n   * @public\n   * @param {String|*} [text] - Text to write instead of current text.\n   * @returns {Elem|String} If no arguments passed text of the first element in the set returned.\n   * Otherwise all elements texts in the set are set to the text argument.\n   * @description Gets or sets text.\n   *\n   * @example\n   * elem.text('123');\n   * elem.text(); // '123'\n   */\n  text(text) {\n    if (!arguments.length) {\n      return this.prop('textContent');\n    }\n\n    return this.forEach((elem) => {\n      elem.textContent = text;\n    });\n  }\n\n  /**\n   * @method Elem#toggleAttr\n   * @public\n   * @param {String} attr - Attribute to toggle.\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the attribute\n   * with the '' value and if falsey method removes the attribute. If not present method adds\n   * the attribute if it doesn't exist and removes if it does.\n   * @returns {Elem} Returns this.\n   * @description Method for toggling attributes.\n   *\n   * @example\n   * elem.toggleAttr('attr');\n   * elem.toggleAttr('attr', someCondition);\n   */\n  toggleAttr(attr, condition) {\n    return this.forEach((elem) => {\n      elem = new Elem(elem);\n\n      if (arguments.length < 2 ? !elem.hasAttr(attr) : condition) {\n        elem.attr(attr, '');\n      } else {\n        elem.removeAttr(attr);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#toggleClass\n   * @public\n   * @param {String} cls - Class to toggle.\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the class\n   * and if falsey method removes the class. If not present method adds\n   * the class if it doesn't exist and removes if it does.\n   * @returns {Elem} Returns this.\n   * @description Method for toggling classes.\n   *\n   * @example\n   * elem.toggleClass('cls');\n   * elem.toggleClass('cls', someCondition);\n   */\n  toggleClass(cls, condition) {\n    return this.forEach((elem) => {\n      const { classList } = elem;\n\n      elem = new Elem(elem);\n\n      if (arguments.length < 2 ? !classList.contains(cls) : condition) {\n        elem.addClass(cls);\n      } else {\n        elem.removeClass(cls);\n      }\n    });\n  }\n}\n\nsetToStringTag(Elem, 'Elem');\nsetSymbolSpecies(Elem, Array);\n\nexport { Elem };\n","import { iterateArray, iterateObject, keys } from '../../utils';\n\nexport function calculateArgs(normalizedArgs, args, argsObject) {\n  iterateArray(keys(argsObject), (arg) => {\n    if (!(arg in args)) {\n      argsObject[arg] = undefined;\n    }\n  });\n\n  iterateObject(normalizedArgs, (value, arg) => {\n    argsObject[arg] = value;\n  });\n}\n","export function cleanProperty(value, arg, object) {\n  delete object[arg];\n}\n","import { escapeRegex } from '../../utils';\n\nexport function constructMixinRegex(name) {\n  return new RegExp(`^${ escapeRegex(name) }(?:\\\\(([^\\\\)]*)\\\\))?(?:#([\\\\s\\\\S]*))?$`);\n}\n","const COMMA_REGEX = /,/;\n\nexport function mixinMatch(mixins, attr) {\n  let match;\n\n  /* eslint-disable guard-for-in */\n  for (const name in mixins) {\n    const Mixin = mixins[name];\n    const localMatch = attr.match(Mixin._match);\n\n    if (localMatch) {\n      const argsMatch = localMatch[1];\n      let args;\n\n      if (argsMatch === '') {\n        args = [];\n      } else if (argsMatch) {\n        args = argsMatch.split(COMMA_REGEX);\n      }\n\n      match = {\n        args,\n        comment: localMatch[2],\n        Mixin,\n        name\n      };\n\n      break;\n    }\n  }\n  /* eslint-enable guard-for-in */\n\n  return match;\n}\n","import { collectFromObject, assign } from '../../utils';\nimport { D_REST_REGEX } from '../../constants';\nimport { mixinMatch } from './mixinMatch';\n\nexport function transformRestAttrs(attrs, mixins, mixinDefaultOpts) {\n  return collectFromObject(attrs, (eventualAttrs, value, attr) => {\n    if (D_REST_REGEX.test(attr)) {\n      return assign(eventualAttrs, transformRestAttrs(value, mixins, mixinDefaultOpts));\n    }\n\n    const match = mixinMatch(mixins, attr);\n\n    if (match) {\n      eventualAttrs[attr] = {\n        type: 'mixin',\n        dynamic: true,\n        opts: {\n          value,\n          ...match,\n          ...mixinDefaultOpts\n        },\n        value\n      };\n\n      return;\n    }\n\n    eventualAttrs[attr] = {\n      type: 'attr',\n      value\n    };\n  });\n}\n\nexport function transformRestArgs(args) {\n  return collectFromObject(args, addArgs);\n}\n\nfunction addArgs(args, value, arg) {\n  if (D_REST_REGEX.test(arg)) {\n    assign(args, transformRestArgs(value));\n  } else {\n    args[arg] = value;\n  }\n}\n","import { iterateArray } from '../../utils';\n\nexport function executeMixinWatchers(mixin, value) {\n  const oldValue = mixin.$$.value;\n\n  mixin.$$.value = value;\n\n  iterateArray(mixin.$$.watchers, (watcher) => {\n    watcher(value, oldValue);\n  });\n}\n","import { iterateObject, iterateArray } from '../../utils';\nimport { executeMixinWatchers } from './executeMixinWatchers';\n\nexport function calculateAttrs(normalizedAttrs, attrs, attrsObject, elem, firstTime) {\n  iterateObject(attrsObject, ({ type, value }, attr) => {\n    if (!(attr in attrs)) {\n      if (type === 'attr') {\n        elem.removeAttr(attr);\n      } else {\n        value.$$.remove();\n      }\n\n      delete attrsObject[attr];\n    }\n  });\n\n  const mixins = [];\n\n  iterateObject(normalizedAttrs, ({ type, dynamic, value, opts }, attr) => {\n    let nextType;\n    let nextDynamic;\n    let nextValue;\n\n    if (attrsObject[attr]) {\n      const {\n        type: prevType,\n        value: prevValue,\n        dynamic: prevDynamic\n      } = attrsObject[attr];\n\n      if (type === 'attr') {\n        if (prevType === 'mixin') {\n          prevValue.$$.remove();\n        }\n\n        if (prevValue !== value) {\n          elem.attr(attr, value);\n        }\n\n        nextValue = value;\n      } else {\n        let mixin = prevValue;\n        let created;\n\n        if (prevType === 'attr') {\n          elem.removeAttr(attr);\n\n          created = true;\n          opts.dynamic = dynamic;\n          mixin = new opts.Mixin(opts);\n        } else {\n          mixin.$$.isDynamic = dynamic;\n        }\n\n        if (dynamic) {\n          executeMixinWatchers(mixin, value);\n        } else if (!mixin.$$.evaluated && opts.Mixin.evaluate) {\n          const newValue = mixin.$$.parentScope.$$.evaluate(\n            value,\n            constructMixinWatcher(mixin, attr, attrs),\n            mixin\n          );\n\n          mixin.$$.evaluated = true;\n\n          executeMixinWatchers(mixin, newValue);\n        } else if (prevDynamic && opts.Mixin.evaluate) {\n          executeMixinWatchers(mixin, mixin.$$.parentScope.$$.evaluate(value));\n        }\n\n        nextValue = mixin;\n\n        if (created) {\n          mixin.$$.setAfterUpdate();\n        }\n      }\n\n      nextType = type;\n      nextDynamic = dynamic;\n    } else {\n      if (type === 'attr') {\n        elem.attr(attr, value);\n\n        nextValue = value;\n      } else {\n        const buildMixin = () => {\n          opts.dynamic = dynamic;\n\n          const mixin = new opts.Mixin(opts);\n\n          if (!dynamic && opts.Mixin.evaluate) {\n            const {\n              parentScope,\n              value\n            } = opts;\n            const firstValue = parentScope.$$.evaluate(\n              value,\n              constructMixinWatcher(mixin, attr, attrs),\n              mixin\n            );\n\n            mixin.$$.evaluated = true;\n            mixin.$$.value = firstValue;\n          }\n\n          nextValue = mixin;\n          mixin.$$.setAfterUpdate();\n\n          return {\n            attr,\n            opts: {\n              type,\n              dynamic,\n              value: mixin\n            }\n          };\n        };\n\n        if (firstTime) {\n          mixins.push(buildMixin);\n        } else {\n          buildMixin();\n        }\n      }\n\n      nextType = type;\n      nextDynamic = dynamic;\n    }\n\n    attrsObject[attr] = {\n      type: nextType,\n      dynamic: nextDynamic,\n      value: nextValue\n    };\n  });\n\n  if (firstTime) {\n    return () => {\n      iterateArray(mixins, (buildMixin) => {\n        const {\n          attr,\n          opts\n        } = buildMixin();\n\n        attrsObject[attr] = opts;\n      });\n    };\n  }\n}\n\nfunction constructMixinWatcher(mixin, attr, attrs) {\n  return function (newValue) {\n    const {\n      type,\n      dynamic\n    } = attrs[attr];\n\n    if (type === 'mixin' && !dynamic) {\n      executeMixinWatchers(mixin, newValue);\n    }\n  };\n}\n","import { iterateArray, iterateObject } from '../../utils';\n\nexport function normalizeArgs(argsChain) {\n  const newArgs = {};\n\n  iterateArray(argsChain, (args) => {\n    iterateObject(args, (value, arg) => {\n      newArgs[arg] = value;\n    });\n  });\n\n  return newArgs;\n}\n","import { create, collectFromObject } from '../../utils';\n\nexport function constructPrivateScope(object, type, parentScope) {\n  let scope = {};\n\n  if (type === 'globals') {\n    scope = create(\n      parentScope\n        ? parentScope.$$.globals\n        : null\n    );\n  }\n\n  return collectFromObject(object, (scope, value, key) => {\n    scope[key] = {\n      value,\n      watchers: []\n    };\n  }, scope);\n}\n","import { removeArrayElem, iterateArray } from '../../utils';\n\nexport function removeTempWatcher(watcher) {\n  watcher();\n}\n\nexport function removeWatchers(watchersToRemove) {\n  iterateArray(watchersToRemove, removeWatcher);\n}\n\nfunction removeWatcher({ watcher, watchers }) {\n  removeArrayElem(watchers, watcher);\n}\n","import { defineProperties, mapObject, iterateArray } from '../../utils';\nimport { gettingVars, evalMode } from '../../Block';\nimport { removeTempWatcher } from './removeWatcher';\n\nexport function constructPublicScope(scope, scopeValues, privateScope) {\n  defineProperties(scope, mapObject(scopeValues, (value, key) => {\n    const scope = privateScope[key];\n\n    return {\n      configurable: false,\n      enumerable: true,\n      get() {\n        if (evalMode) {\n          if (gettingVars.indexOf(scope.watchers) === -1) {\n            gettingVars.push(scope.watchers);\n          }\n        }\n\n        return scope.value;\n      },\n      set(value) {\n        if (value === scope.value) {\n          return;\n        }\n\n        const oldTempWatchers = scope.watchers.slice();\n\n        scope.watchers = [];\n        scope.value = value;\n\n        iterateArray(oldTempWatchers, removeTempWatcher);\n      }\n    };\n  }));\n}\n","import {\n  except, create, assign,\n  iterateObject, iterateArray,\n  isNil\n} from '../../utils';\nimport { isDocument } from '../Elem';\nimport { Elem } from '../../Elem';\nimport {\n  SVG_NS, D_REST_REGEX\n} from '../../constants';\nimport { cleanProperty } from './cleanProperty';\nimport { transformRestAttrs } from './transformRestAttrs';\nimport { calculateAttrs } from './calculateAttrs';\nimport { normalizeArgs } from './normalizeArgs';\nimport { mixinMatch } from './mixinMatch';\nimport { constructPrivateScope } from './constructPrivateScope';\nimport { constructPublicScope } from './constructPublicScope';\nimport { Block } from '../../Block';\n\nconst NAMED_D_BLOCK_REGEX = /^d-block:([\\s\\S]+)$/;\nconst emptyArray = [];\n\nexport function createBlock({ node, parent, parentElem, parentBlock, parentScope, parentTemplate, prevBlock }) {\n  const doc = isDocument(parentElem[0])\n    ? parentElem\n    : new Elem(parentElem[0].ownerDocument);\n  const elem = parentElem[0].namespaceURI === SVG_NS\n    ? doc.create('svg')\n    : doc;\n  const localBlocks = parentTemplate ? parentTemplate.$$.ns._blocks : Block._blocks;\n  const localMixins = parentTemplate ? parentTemplate.$$.ns._mixins : Block._mixins;\n  const args = node.attrs || {};\n  const name = node.name || 'UnknownBlock';\n  let { children } = node;\n  let constructor = node.Constructor || (node.name && localBlocks[node.name]);\n  let dBlockMatch;\n  let dBlockName;\n  let dBlockArgs;\n\n  if (name === 'd-block' && args.name) {\n    dBlockArgs = except(args, 'name');\n  } else if (name === 'd-block' && args.Constructor) {\n    dBlockArgs = except(args, 'Constructor');\n  } else if ((dBlockMatch = name.match(NAMED_D_BLOCK_REGEX)) || name === 'd-block') {\n    constructor = Block._blocks['d-block'];\n    dBlockName = dBlockMatch ? dBlockMatch[1] : null;\n  }\n\n  let blockInstance;\n\n  if (constructor) {\n    try {\n      blockInstance = new constructor({\n        name,\n        args,\n        dBlockName,\n        dBlockArgs,\n        children,\n        parent,\n        parentElem,\n        parentBlock,\n        parentScope,\n        parentTemplate,\n        prevBlock\n      });\n    } catch (err) {\n      console.error(`Uncaught error in new ${ name }:`, err);\n      constructor = null;\n    }\n  }\n\n  if (!constructor) {\n    const { value } = node;\n\n    const element = elem.create(name);\n    const currentAttrs = create(null);\n    let attrs = create(null);\n    let wasDRest;\n    const attrsChain = [attrs];\n    const mixinDefaultOpts = {\n      elem: element,\n      parentBlock,\n      parentScope,\n      parentTemplate\n    };\n\n    iterateObject(args, (value, attr) => {\n      const isDRest = D_REST_REGEX.test(attr);\n      const localAttrs = isDRest || wasDRest\n        ? create(attrs)\n        : attrs;\n\n      if (attrs !== localAttrs) {\n        attrsChain.push(localAttrs);\n      }\n\n      attrs = localAttrs;\n\n      if (isDRest) {\n        const restAttrs = parentScope.$$.evaluate(value, (value) => {\n          iterateObject(localAttrs, cleanProperty);\n          assign(localAttrs, transformRestAttrs(\n            value,\n            localMixins,\n            mixinDefaultOpts\n          ));\n          calculateAttrs(normalizeArgs(attrsChain), attrs, currentAttrs, element, false);\n        }, parentBlock);\n\n        wasDRest = true;\n\n        return assign(localAttrs, transformRestAttrs(\n          restAttrs, localMixins, mixinDefaultOpts\n        ));\n      }\n\n      const match = mixinMatch(localMixins, attr);\n\n      wasDRest = false;\n\n      if (match) {\n        localAttrs[attr] = {\n          type: 'mixin',\n          dynamic: false,\n          opts: {\n            value,\n            ...match,\n            ...mixinDefaultOpts\n          },\n          value\n        };\n\n        return;\n      }\n\n      localAttrs[attr] = {\n        type: 'attr',\n        value: parentScope.$$.evaluate(value, (value) => {\n          localAttrs[attr] = {\n            type: 'attr',\n            value\n          };\n          calculateAttrs(normalizeArgs(attrsChain), attrs, currentAttrs, element, false);\n        }, parentBlock)\n      };\n    });\n\n    parentBlock.$$.mixinsToBuild.push(calculateAttrs(normalizeArgs(attrsChain), attrs, currentAttrs, element, true));\n\n    if (name === '#comment') {\n      element.text(value);\n    }\n\n    if (name === '#text') {\n      let text = parentScope.$$.evaluate(value, (value) => {\n        if (isNil(value)) {\n          value = '';\n        }\n\n        element.text(`${ value }`);\n      }, parentBlock);\n\n      if (isNil(text)) {\n        text = '';\n      }\n\n      element.text(`${ text }`);\n    }\n\n    const isParentBlock = parent instanceof Block;\n\n    if (prevBlock instanceof Block) {\n      prevBlock.$$.insertAfterIt(element, false);\n    } else if (prevBlock) {\n      element.insertAfter(prevBlock);\n\n      if (isParentBlock) {\n        parent.$$.addContent(element);\n      }\n    } else if (isParentBlock) {\n      parent.$$.insertInStartOfIt(element, false);\n    } else {\n      element.into(parentElem, false);\n    }\n\n    if (children) {\n      let prevBlock;\n      let parentElem = element;\n\n      /* istanbul ignore if */\n      if (name === 'template') {\n        parentElem = new Elem(element[0].content = element[0].content || doc[0].createDocumentFragment());\n      } else if (name === 'iframe') {\n        if ('src' in attrs) {\n          children = emptyArray;\n        } else {\n          const document = element[0].contentDocument;\n\n          new Elem(document.documentElement).remove();\n\n          parentElem = new Elem(document);\n        }\n      }\n\n      iterateArray(children, (child) => {\n        prevBlock = createBlock({\n          node: child,\n          parent: parentElem,\n          parentElem,\n          parentBlock,\n          parentScope,\n          parentTemplate,\n          prevBlock\n        });\n      });\n    }\n\n    return element;\n  }\n\n  const {\n    $$,\n    args: Args,\n    globals,\n    ...locals\n  } = blockInstance;\n\n  const html = name === 'd-elements'\n    ? Args.value || []\n    : constructor.template.value || constructor.template;\n\n  $$.args = constructPrivateScope(Args);\n  $$.locals = constructPrivateScope(locals);\n  $$.globals = constructPrivateScope(globals, 'globals', parentScope);\n\n  if (name === '#d-item') {\n    const scopeValues = {\n      [node.itemName]: node.item,\n      [node.indexName]: node.index\n    };\n    const scope = parentScope.$$.name === '#d-item'\n      ? parentScope.$$.scope\n      : parentScope;\n\n    $$.ns = parentScope.$$.ns;\n    $$.privateScope = constructPrivateScope(scopeValues);\n    constructPublicScope($$.scope = create(scope), scopeValues, $$.privateScope);\n  }\n\n  constructPublicScope(Args, Args, $$.args);\n  constructPublicScope(globals, globals, $$.globals);\n  constructPublicScope(blockInstance, locals, $$.locals);\n\n  try {\n    blockInstance.afterConstruct();\n  } catch (err) {\n    console.error(`Uncaught error in ${ name }#afterConstruct:`, err);\n  }\n\n  prevBlock = undefined;\n  parentScope = name === 'd-elements'\n    ? Args.parentScope\n    : blockInstance;\n  parentTemplate = name === 'd-elements'\n    ? Args.parentTemplate\n    : blockInstance;\n\n  iterateArray(html, (child) => {\n    prevBlock = createBlock({\n      node: child,\n      parent: blockInstance,\n      parentElem,\n      parentBlock: blockInstance,\n      parentScope,\n      parentTemplate,\n      prevBlock\n    });\n  });\n\n  blockInstance.$$.isRendered = true;\n\n  iterateArray(blockInstance.$$.mixinsToBuild, (executeBuilders) => {\n    executeBuilders();\n  });\n  blockInstance.$$.mixinsToBuild = [];\n\n  try {\n    blockInstance.afterRender();\n  } catch (err) {\n    console.error(`Uncaught error in ${ name }#afterRender:`, err);\n  }\n\n  return blockInstance;\n}\n","const { isPrototypeOf } = {};\n\nexport function isInstanceOf(Class, Subclass) {\n  return Class::isPrototypeOf(Subclass) && Class.prototype::isPrototypeOf(Subclass.prototype);\n}\n","export function removeWithParentSignal(child) {\n  child.$$.remove(true);\n}\n\nexport function remove(child) {\n  child.$$.remove();\n}\n","import {\n  defineFrozenProperties, getProto,\n  removeArrayElem, setToStringTag\n} from './utils';\nimport { wrapMixin, removeWatchers } from './helpers/Block';\n\nconst toStringTag = '[object Mixin]';\n\n/**\n * @class Mixin\n * @public\n * @param {Object} opts - Mixin options.\n * @returns {Mixin} Instance of Mixin.\n */\nclass Mixin {\n  /**\n   * @member {Boolean} [Mixin.evaluate = true]\n   * @type {Boolean}\n   * @public\n   * @description If the mixin value should be evaluated and watched or not.\n   */\n  static evaluate = true;\n\n  /**\n   * @method Mixin.wrap\n   * @public\n   * @param {...Wrapper} wrappers - Functions that return wrapped mixin.\n   * @returns {typeof Mixin} New mixin.\n   * @description Method for wrapping mixins.\n   * It is considered best practice to just extends the old mixin with a new one.\n   */\n  static wrap(...wrappers) {\n    return wrappers.reduce(wrapMixin, this);\n  }\n\n  constructor(opts) {\n    const {\n      name,\n      value,\n      dynamic,\n      elem,\n      args,\n      comment,\n      parentBlock,\n      parentScope,\n      parentTemplate\n    } = opts;\n    const watchersToRemove = [];\n    const watchers = [];\n    const { constructor } = getProto(this);\n    const afterUpdate = (newValue, oldValue) => {\n      this.$$.value = newValue;\n\n      try {\n        this.afterUpdate(newValue, oldValue);\n      } catch (err) {\n        console.error(`Uncaught error in ${ name }#afterUpdate:`, err);\n      }\n    };\n\n    defineFrozenProperties(this, {\n      /**\n       * @member {Object} Mixin#$$\n       * @type {Object}\n       * @protected\n       * @property {Function} Mixin#$$.evaluate - Evaluate function.\n       * @property {Boolean} Mixin#$$.isDynamic - If the mixin is dynamic.\n       * @property {Boolean} Mixin#$$.isRemoved - If the block is removed.\n       * @property {String} Mixin#$$.name - Mixin name.\n       * @property {Block|void} Mixin#$$.parentBlock - Parent block.\n       * @property {Block|void} Mixin#$$.parentScope - Parent scope.\n       * @property {Block|void} Mixin#$$.parentTemplate - Parent template.\n       * @property {Watcher[]} Block#$$.watchers - Temporary vars watchers.\n       * @property {Object[]} Block#$$.watchersToRemove - Watchers to remove before removing mixin.\n       */\n      $$: {\n        name,\n        _value: value,\n        value,\n        isDynamic: dynamic,\n        parentScope,\n        parentBlock,\n        parentTemplate,\n        watchers,\n        watchersToRemove,\n        isRemoved: false,\n        evaluate: (watcher) => {\n          const {\n            isDynamic,\n            value,\n            _value\n          } = this.$$;\n          const currentValue = isDynamic\n            ? value\n            : parentScope.$$.evaluate(_value);\n\n          if (watcher) {\n            watchers.push(watcher);\n          }\n\n          return currentValue;\n        },\n        remove: (isParentSignal) => {\n          isParentSignal = !!isParentSignal;\n          this.$$.isRemoved = true;\n\n          removeWatchers(watchersToRemove);\n\n          try {\n            this.beforeRemove(isParentSignal);\n          } catch (err) {\n            console.error(`Uncaught error in ${ name }#beforeRemove:`, err);\n          }\n\n          if (!isParentSignal) {\n            removeArrayElem(parentBlock.$$.mixins, this);\n          }\n        },\n        setAfterUpdate: () => {\n          if (constructor.evaluate) {\n            afterUpdate(this.$$.evaluate(afterUpdate));\n          }\n        }\n      }\n    });\n\n    /**\n     * @member {String[]} [Mixin#args]\n     * @type {String[]}\n     * @public\n     */\n    this.args = args;\n\n    /**\n     * @member {String} [Mixin#comment]\n     * @type {String}\n     * @public\n     */\n    this.comment = comment;\n\n    /**\n     * @member {Block} [Mixin#parentScope]\n     * @type {Block}\n     * @public\n     */\n    this.parentScope = parentScope;\n\n    /**\n     * @member {Block} [Mixin#parentTemplate]\n     * @type {Block}\n     * @public\n     */\n    this.parentTemplate = parentTemplate;\n\n    /**\n     * @member {Elem} Mixin#elem\n     * @type {Elem}\n     * @public\n     */\n    this.elem = elem;\n\n    /**\n     * @member {Element} Mixin#node\n     * @type {Element}\n     * @public\n     */\n    this.node = elem[0];\n\n    parentBlock.$$.mixins.push(this);\n  }\n\n  afterUpdate() {}\n\n  /**\n   * @method Mixin#beforeRemove\n   * @public\n   * @param {Boolean} isElementRemoved - If element removed as well.\n   * @description Is called before the mixin removal.\n   */\n  beforeRemove(isElementRemoved) {}\n\n  /**\n   * @method Block#evaluate\n   * @public\n   * @param {Watcher} [callback] - If present, callback which is called when the mixin value is changed.\n   * @returns {*} Evaluation result.\n   * @description Method for evaluating the mixin value and watching for the changes.\n   */\n  evaluate(callback) {\n    return this.$$.evaluate(callback);\n  }\n\n  toString() {\n    return toStringTag;\n  }\n}\n\nsetToStringTag(Mixin, 'Mixin');\n\nexport { Mixin };\n","import { isInstanceOf } from './isInstanceOf';\nimport { Block } from '../../Block';\nimport { Mixin } from '../../Mixin';\n\nexport function wrapBlock(block, wrapper) {\n  const returnValue = wrapper(block);\n\n  return isInstanceOf(Block, returnValue)\n    ? returnValue\n    : block;\n}\n\nexport function wrapMixin(mixin, wrapper) {\n  const returnValue = wrapper(mixin);\n\n  return isInstanceOf(Mixin, returnValue)\n    ? returnValue\n    : mixin;\n}\n","import { Elem } from './Elem';\nimport {\n  defineFrozenProperties,\n  assign, iterateArray, iterateObject,\n  isFunction, isArray,\n  setToStringTag, hasOwnProperty,\n  removeArrayElem, create,\n  getProto, setProto\n} from './utils';\nimport {\n  constructMixinRegex, isInstanceOf, normalizeArgs,\n  removeWatchers, removeWithParentSignal, cleanProperty,\n  transformRestArgs, calculateArgs, wrapBlock\n} from './helpers/Block';\nimport {\n  D_REST_REGEX,\n  rootBlocks, rootMixins\n} from './constants';\nimport { Mixin } from './Mixin';\n\n/**\n * @typedef {Object} Template\n * @public\n * @property {String[]} vars - Template used vars.\n * @property {Object[]} value - Template itself.\n */\n\n/**\n * @typedef {Object[]} ScopelessTemplate\n * @public\n */\n\n/**\n * @typedef {Error} EvaluationError\n * @public\n * @property {Function} func - Function which caused eval error.\n * @property {String} original - Evaluated expression original js.\n * @property {Block} block - Block in context of which the expression has been evaluated with the error.\n */\n\n/**\n * @callback Watcher\n * @public\n * @param {*} newValue - New value.\n * @param {*} oldValue - Old value.\n */\n\n/**\n * @callback Wrapper\n * @public\n * @param {typeof Block|typeof Mixin} Block class to wrap.\n * @returns {typeof Block} New Block class.\n */\n\n/**\n * @callback AfterUpdate\n * @public\n * @param {*} newValue - New value.\n * @param {*} oldValue - Old value.\n * @param {Mixin} mixin - Mixin instance.\n */\n\n/**\n * @callback BlockRegisterHook\n * @public\n * @param {typeof Block} Block - Registering block.\n * @param {String} name - Block name.\n * @returns Return value is used for registering the block.\n * If Block subclass returned it's registered instead of the initial block, otherwise\n * the initial block is used.\n */\n\n/**\n * @callback MixinRegisterHook\n * @public\n * @param {typeof Mixin} Mixin - Registering mixin.\n * @param {String} name - Mixin name.\n * @returns Return value is used for registering the mixin.\n * If Mixin subclass returned it's registered instead of the initial mixin, otherwise\n * the initial mixin is used.\n */\n\n/**\n * @callback RemoveHook\n * @public\n */\n\nconst blockHooks = [];\nconst mixinHooks = [];\nconst TAG_NAME_REGEX = /^[a-z][a-z\\d\\-_.:!@#$%^&*()[\\]{}='\"\\\\]*$/i;\nconst ATTR_NAME_REGEX = /^[^\\u0000-\\u0020\\s'\">/=]+$/;\nconst toStringTag = '[object Block]';\nconst afterElem = new Elem();\nconst emptyObject = {};\nlet evalMode = false;\nlet gettingVars = [];\n\n/**\n * @class Block\n * @extends null\n * @public\n * @param {Object} opts - Block options.\n * @returns {Block} Instance of Block.\n *\n * @example\n * import { Block, initApp } from 'dwayne';\n *\n * class App extends Block {\n *   static template = '<Hello text=\"{text}\"/> ({ this.times })';\n *\n *   constructor(opts) {\n *     super(opts);\n *\n *     this.text = 'world';\n *     this.times = 0;\n *\n *     this.setInterval();\n *   }\n *\n *   setInterval() {\n *     this.interval = setInterval(() => {\n *       this.times++;\n *     });\n *   }\n *\n *   beforeRemove() {\n *     clearInterval(this.interval);\n *   }\n * }\n *\n * Block.block('App', App);\n * Block.block('Hello', html`Hello, {args.text}!`);\n *\n * initApp('App', document.getElementById('root'));\n */\nclass Block {\n  /**\n   * @member {Object.<String, typeof Block>} Block._blocks\n   * @type {Object.<String, typeof Block>}\n   * @protected\n   * @description Block namespace blocks.\n   */\n  static _blocks = create(rootBlocks);\n\n  /**\n   * @member {Object.<String, typeof Mixin>} Block._mixins\n   * @type {Object.<String, typeof Mixin>}\n   * @protected\n   * @description Block namespace mixins.\n   */\n  static _mixins = create(rootMixins);\n\n  /**\n   * @member {Object} [Block.defaultArgs = null]\n   * @type {Object}\n   * @public\n   * @description Block default args.\n   */\n  static defaultArgs = null;\n\n  /**\n   * @member {Object} [Block.defaultLocals = null]\n   * @type {Object}\n   * @public\n   * @description Block default locals.\n   */\n  static defaultLocals = null;\n\n  /**\n   * @member {Object} [Block.template = { vars: [], value: [] }]\n   * @type {Object}\n   * @public\n   * @description Block template.\n   */\n  static template = {\n    vars: [],\n    value: []\n  };\n\n  /**\n   * @method Block.onEvalError\n   * @public\n   * @param {EvaluationError} err - The method is called when an evaluation error occurs.\n   */\n  static onEvalError(err) {\n    console.error(`Eval error (evaluating \"${ err.original || err.func }\" in context of ${ err.block.$$.name }):`, err);\n  }\n\n  /**\n   * @method Block.beforeRegisterBlock\n   * @public\n   * @param {BlockRegisterHook} hook - Block register hook.\n   * @returns {RemoveHook}\n   */\n  static beforeRegisterBlock(hook) {\n    blockHooks.push(hook);\n\n    return () => {\n      removeArrayElem(blockHooks, hook);\n    };\n  }\n\n  /**\n   * @method Block.beforeRegisterMixin\n   * @public\n   * @param {MixinRegisterHook} hook - Mixin register hook.\n   * @returns {RemoveHook}\n   */\n  static beforeRegisterMixin(hook) {\n    mixinHooks.push(hook);\n\n    return () => {\n      removeArrayElem(mixinHooks, hook);\n    };\n  }\n\n  /**\n   * @method Block.block\n   * @public\n   * @param {String} name - Block or mixin name.\n   * @param {Template|ScopelessTemplate|typeof Block} Subclass - Subclass of Block or template string of it.\n   * @returns {typeof Block|undefined} Returns registered Block or undefined if the block hasn't been registered.\n   * @description Register block in the namespace of this.\n   */\n  static block(name, Subclass) {\n    if (isFunction(Subclass) && !isInstanceOf(Block, Subclass)) {\n      const constructor = Subclass;\n\n      Subclass = class extends Block {\n        static template = constructor.template;\n\n        constructor(opts) {\n          super(opts);\n          this::constructor(opts);\n        }\n      };\n    }\n\n    if (!isFunction(Subclass) && isArray(Subclass)) {\n      Subclass = class extends Block {\n        static template = {\n          vars: [],\n          value: Subclass\n        };\n      };\n    }\n\n    if (!isFunction(Subclass) && Subclass.vars && Subclass.value) {\n      Subclass = class extends Block {\n        static template = Subclass;\n      };\n    }\n\n    if (!isInstanceOf(Block, Subclass)) {\n      console.warn(`Block must be a template (array or an object from an html loader), a function or a class that extends Block class (name: \"${ name }\") (Block.block)`);\n\n      return;\n    }\n\n    if (name === 'd-elements') {\n      console.warn('The \"d-elements\" block is a built-in block so the block will not be registered (Block.block)');\n\n      return;\n    }\n\n    if (!TAG_NAME_REGEX.test(name)) {\n      console.warn(`Name \"${ name }\" is not allowed for blocks so the block will not be registered (Block.block)`);\n\n      return;\n    }\n\n    if (!hasOwnProperty(this, '_blocks')) {\n      this._blocks = create(getProto(this)._blocks);\n    }\n\n    if (!hasOwnProperty(this, 'defaultLocals')) {\n      this.defaultLocals = {};\n    }\n\n    if (!hasOwnProperty(this, 'defaultArgs')) {\n      this.defaultArgs = create(null);\n    }\n\n    try {\n      Subclass = blockHooks.reduce((returnValue, hook) => {\n        const currentReturnValue = hook(returnValue, name, this);\n\n        return isInstanceOf(Block, currentReturnValue)\n          ? currentReturnValue\n          : returnValue;\n      }, Subclass);\n    } catch (err) {\n      console.error('Uncaught error in \"beforeRegisterBlock\" hook:', err);\n    }\n\n    Subclass._blocks = hasOwnProperty(Subclass, '_blocks')\n      ? Subclass._blocks\n      : create(this._blocks);\n    Subclass._mixins = hasOwnProperty(Subclass, '_mixins')\n      ? Subclass._mixins\n      : create(this._mixins);\n\n    if (hasOwnProperty(Subclass, 'defaultArgs')) {\n      setProto(Subclass.defaultArgs, null);\n    }\n\n    this._blocks[name] = Subclass;\n\n    return Subclass;\n  }\n\n  /**\n   * @method Block.get\n   * @public\n   * @param {String} name - Block name.\n   * @returns {typeof Block|undefined} Returns registered Block with specified name.\n   */\n  static get(name) {\n    return this._blocks[name];\n  }\n\n  /**\n   * @method Block.getMixin\n   * @public\n   * @param {String} name - Mixin name.\n   * @returns {typeof Mixin|undefined} Returns registered Mixin with specified name.\n   */\n  static getMixin(name) {\n    return this._mixins[name];\n  }\n\n  /**\n   * @method Block.mixin\n   * @public\n   * @param {String} name - Block or mixin name.\n   * @param {typeof Mixin|AfterUpdate} Subclass - Subclass of Mixin or AfterUpdate callback.\n   * @returns {typeof Mixin|undefined} Returns registered Block or undefined if the block hasn't been registered.\n   * @description Register mixin in the namespace of this.\n   */\n  static mixin(name, Subclass) {\n    if (isFunction(Subclass) && !isInstanceOf(Mixin, Subclass)) {\n      const afterUpdate = Subclass;\n\n      Subclass = class extends Mixin {\n        afterUpdate(newValue, oldValue) {\n          this::afterUpdate(newValue, oldValue, this);\n        }\n      };\n    }\n\n    if (!isInstanceOf(Mixin, Subclass)) {\n      console.warn(`The \"${ name }\" class does not extend Mixin or is not an afterUpdate function, so it will not be registered (Block.mixin)`);\n\n      return;\n    }\n\n    if (name === 'd-rest') {\n      console.warn('The \"d-rest\" mixin is a built-in mixin so the mixin will not be registered (Block.mixin)');\n\n      return;\n    }\n\n    if (!ATTR_NAME_REGEX.test(name)) {\n      console.warn(`Name \"${ name }\" is not allowed for mixins so the mixin will not be registered (Block.mixin)`);\n\n      return;\n    }\n\n    if (!hasOwnProperty(this, '_mixins')) {\n      this._mixins = create(getProto(this)._mixins);\n    }\n\n    try {\n      Subclass = mixinHooks.reduce((returnValue, hook) => {\n        const currentReturnValue = hook(returnValue, name, this);\n\n        return isInstanceOf(Mixin, currentReturnValue)\n          ? currentReturnValue\n          : returnValue;\n      }, Subclass);\n    } catch (err) {\n      console.error('Uncaught error in \"beforeRegisterMixin\" hook:', err);\n    }\n\n    Subclass._match = constructMixinRegex(name);\n\n    this._mixins[name] = Subclass;\n\n    return Subclass;\n  }\n\n  /**\n   * @method Block.wrap\n   * @public\n   * @param {...Wrapper} wrappers - Functions that return wrapped block.\n   * @returns {typeof Block} New block.\n   * @description Method for wrapping blocks into another blocks.\n   * It is considered best practice to just extends the old block with a new one.\n   *\n   * @example\n   * class MyBlock extends Block {\n   *   static template = '<div>123</div>';\n   * }\n   *\n   * MyBlock.wrap((Block) => {\n   *   return class extends Block {\n   *     static template = `<section class=\"wrapper\">${ Block.template }</section>`;\n   *\n   *     constructor(opts) {\n   *       super(opts);\n   *\n   *       this.additionalVar = 'additional';\n   *     }\n   *   };\n   * });\n   */\n  static wrap(...wrappers) {\n    return wrappers.reduce(wrapBlock, this);\n  }\n\n  constructor(opts) {\n    const {\n      name,\n      args: originalArgs,\n      dBlockName,\n      dBlockArgs,\n      children,\n      parent,\n      parentElem,\n      parentBlock,\n      parentScope,\n      parentTemplate,\n      prevBlock\n    } = opts;\n    const watchersToRemove = [];\n    const { constructor } = getProto(this);\n    const childrenBlocks = [];\n    const mixins = [];\n    const isParentBlock = parent instanceof Block;\n\n    defineFrozenProperties(this, {\n      /**\n       * @member {Object} Block#$$\n       * @type {Object}\n       * @protected\n       * @property {Object} Block#$$.args - Private args scope.\n       * @property {Block[]} Block#$$.children - Child blocks.\n       * @property {Elem} Block#$$.content - Content elements.\n       * @property {Object|void} Block#$$.dBlockArgs - d-block args.\n       * @property {String|void} Block#$$.dBlockName - d-block name.\n       * @property {Block[]} Block#$$.dBlocks - d-block's within the block.\n       * @property {Function} Block#$$.evaluate - Evaluate function.\n       * @property {Object} Block#$$.globals - Private globals scope.\n       * @property {Object[]} Block#$$.htmlChildren - Block html children.\n       * @property {Boolean} Block#$$.isRemoved - If the block is removed.\n       * @property {Boolean} Block#$$.isRendered - If the block is rendered.\n       * @property {Object} Block#$$.locals - Private locals scope.\n       * @property {Mixin[]} Block#$$.mixins - Child mixins.\n       * @property {Function[]} Block#$$.mixinsToBuild - Pending mixins builders.\n       * @property {String} Block#$$.name - Block name.\n       * @property {typeof Block} Block#$$.ns - Block constructor.\n       * @property {Block|Elem|void} Block#$$.parent - Parent block or elem.\n       * @property {Block|void} Block#$$.parentBlock - Parent block.\n       * @property {Elem} parentElem - Parent element.\n       * @property {Block|void} Block#$$.parentScope - Parent scope.\n       * @property {Block|void} Block#$$.parentTemplate - Parent template.\n       * @property {Block|Elem|void} Block#$$.prevBlock - Parent template.\n       * @property {Watcher[]} Block#$$.watchers - Temporary vars watchers.\n       * @property {Object[]} Block#$$.watchersToRemove - Watchers to remove before removing the block.\n       */\n      $$: {\n        name,\n        dBlockName,\n        dBlockArgs,\n        dBlocks: [],\n        parent,\n        parentElem,\n        parentScope,\n        parentBlock,\n        parentTemplate,\n        content: new Elem(),\n        ns: constructor,\n        htmlChildren: children || [],\n        children: childrenBlocks,\n        mixins,\n        mixinsToBuild: [],\n        prevBlock,\n        watchersToRemove,\n        isRemoved: false,\n        isRendered: false,\n        evaluate: (func, onChange, targetBlock, forDElements, forDItem) => {\n          if (!isFunction(func)) {\n            return func;\n          }\n\n          forDElements = !!forDElements;\n          forDItem = !!forDItem;\n\n          const scope = name === '#d-item' && !forDItem\n            ? this.$$.scope\n            : this;\n          const { watchersToRemove } = targetBlock ? targetBlock.$$ : emptyObject;\n          const onChangeFlag = !!onChange;\n\n          const evaluate = () => {\n            let result;\n\n            if (onChangeFlag) {\n              evalMode = true;\n              gettingVars = [];\n            }\n\n            try {\n              result = func(scope);\n            } catch (err) {\n              err.func = func;\n              err.original = func.original;\n              err.block = this;\n\n              if (isFunction(constructor.onEvalError)) {\n                try {\n                  constructor.onEvalError(err);\n                } catch (e) {\n                  console.error(`Uncaught error in ${ name }.onEvalError:`, e);\n                }\n              }\n            }\n\n            if (onChangeFlag) {\n              const localWatchers = [];\n\n              iterateArray(gettingVars, (watchers) => {\n                const watcher = () => {\n                  iterateArray(localWatchers, (watcherBlock) => {\n                    const {\n                      watcher,\n                      watchers\n                    } = watcherBlock;\n\n                    removeArrayElem(watchersToRemove, watcherBlock);\n                    removeArrayElem(watchers, watcher);\n                  });\n\n                  const newResult = evaluate();\n\n                  if (newResult !== result && !targetBlock.$$.isRemoved && !this.$$.isRemoved) {\n                    onChange(newResult, result);\n                  }\n                };\n                const watcherBlock = {\n                  forDElements,\n                  watcher,\n                  watchers\n                };\n\n                localWatchers.push(watcherBlock);\n                watchersToRemove.push(watcherBlock);\n                watchers.push(watcher);\n              });\n\n              evalMode = false;\n              gettingVars = [];\n            }\n\n            return result;\n          };\n\n          return evaluate();\n        },\n        remove: (isParentSignal) => {\n          this.$$.isRemoved = true;\n\n          removeWatchers(watchersToRemove);\n\n          iterateArray(childrenBlocks, removeWithParentSignal);\n          iterateArray(mixins, removeWithParentSignal);\n\n          try {\n            this.beforeRemove();\n          } catch (err) {\n            console.error(`Uncaught error in ${ name }#beforeRemove:`, err);\n          }\n\n          if (!isParentSignal && isParentBlock) {\n            parent.$$.removeContent(this.$$.content);\n          }\n\n          if (!isParentSignal && parentBlock) {\n            removeArrayElem(parentBlock.$$.children, this);\n          }\n\n          this.$$.content.remove();\n        },\n        changeContent: (newContent) => {\n          this.$$.content = newContent;\n\n          if (this.$$.isRendered && !this.$$.isRemoved) {\n            try {\n              this.afterDOMChange();\n            } catch (err) {\n              console.error(`Uncaught error in ${ name }#afterDOMChange:`, err);\n            }\n          }\n        },\n        addContent: (contentToAdd, notRecursive) => {\n          const oldContent = this.$$.content;\n          const index = oldContent.indexOf(contentToAdd[0].previousSibling) + 1;\n          let newContent;\n\n          if (index === 0) {\n            newContent = contentToAdd.add(oldContent);\n          } else {\n            newContent = oldContent\n              .slice(0, index)\n              .add(contentToAdd, oldContent.slice(index));\n          }\n\n          this.$$.changeContent(newContent);\n\n          if (isParentBlock && !notRecursive) {\n            parent.$$.addContent(contentToAdd, notRecursive);\n          }\n        },\n        moveContent: (contentToMove, after) => {\n          const oldContent = this.$$.content;\n          const index = oldContent.indexOf(contentToMove[0]);\n          const indexToPut = oldContent.indexOf(after[0]) + 1;\n          let newContent;\n\n          if (indexToPut === 0) {\n            newContent = contentToMove.add(\n              oldContent.slice(indexToPut, index),\n              oldContent.slice(index + contentToMove.length)\n            );\n          } else if (index > indexToPut) {\n            newContent = oldContent\n              .slice(0, indexToPut)\n              .add(\n                contentToMove,\n                oldContent.slice(indexToPut, index),\n                oldContent.slice(index + contentToMove.length)\n              );\n          } else {\n            newContent = oldContent\n              .slice(0, index)\n              .add(\n                oldContent.slice(index + contentToMove.length, indexToPut),\n                contentToMove,\n                oldContent.slice(indexToPut)\n              );\n          }\n\n          this.$$.changeContent(newContent);\n\n          if (isParentBlock && indexToPut) {\n            parent.$$.moveContent(contentToMove, after);\n          }\n        },\n        removeContent: (contentToRemove) => {\n          this.$$.changeContent(this.$$.content.filter((elem) => (\n            contentToRemove.indexOf(elem) === -1\n          )));\n\n          if (isParentBlock) {\n            parent.$$.removeContent(contentToRemove);\n          }\n        },\n        insertInStartOfIt: (contentToInsert, moveFlag) => {\n          const { prevBlock } = this.$$;\n          let after = afterElem;\n\n          if (prevBlock instanceof Block) {\n            after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n          } else if (prevBlock) {\n            after = prevBlock;\n            contentToInsert.insertAfter(prevBlock);\n\n            if (isParentBlock) {\n              if (moveFlag) {\n                parent.$$.moveContent(contentToInsert, after);\n              } else {\n                parent.$$.addContent(contentToInsert, true);\n              }\n            }\n          } else if (isParentBlock) {\n            const { prevBlock } = parent.$$;\n\n            if (prevBlock) {\n              let notRecursive;\n\n              if (prevBlock instanceof Block) {\n                after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n                notRecursive = true;\n              } else {\n                after = prevBlock;\n                notRecursive = false;\n                contentToInsert.insertAfter(prevBlock);\n              }\n\n              if (moveFlag) {\n                parent.$$.moveContent(contentToInsert, after);\n              } else {\n                parent.$$.addContent(contentToInsert, notRecursive);\n              }\n            } else {\n              after = parent.$$.insertInStartOfIt(contentToInsert, moveFlag);\n            }\n          } else {\n            contentToInsert.into(parentElem, false);\n          }\n\n          if (moveFlag) {\n            this.$$.moveContent(contentToInsert, after);\n          } else {\n            this.$$.addContent(contentToInsert, true);\n          }\n\n          return after;\n        },\n        insertAfterIt: (contentToInsert, moveFlag) => {\n          const { prevBlock } = this.$$;\n          let after = afterElem;\n          let tryToAddOrMove;\n\n          if (this.$$.content.length) {\n            after = this.$$.content.elem(-1);\n            tryToAddOrMove = true;\n            contentToInsert.insertAfter(after);\n          } else if (prevBlock instanceof Block) {\n            after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n          } else if (prevBlock) {\n            after = prevBlock;\n            tryToAddOrMove = true;\n            contentToInsert.insertAfter(prevBlock);\n          } else if (isParentBlock) {\n            after = parent.$$.insertInStartOfIt(contentToInsert, moveFlag);\n          } else {\n            contentToInsert.into(parentElem, false);\n          }\n\n          if (isParentBlock && tryToAddOrMove) {\n            if (moveFlag) {\n              parent.$$.moveContent(contentToInsert, after);\n            } else {\n              parent.$$.addContent(contentToInsert);\n            }\n          }\n\n          return after;\n        }\n      }\n    });\n\n    iterateObject(constructor.defaultLocals, (value, variable) => {\n      this[variable] = value;\n    });\n    iterateArray(constructor.template.vars || [], (variable) => {\n      this[variable] = this[variable];\n    });\n\n    const argsObject = create(null);\n    const { defaultArgs } = constructor;\n    let args = create(defaultArgs || null);\n    let wasDRest;\n    const argsChain = [];\n\n    if (defaultArgs) {\n      argsChain.push(defaultArgs);\n    }\n\n    argsChain.push(args);\n\n    iterateObject(originalArgs, (value, arg) => {\n      const isDRest = D_REST_REGEX.test(arg);\n      const localArgs = isDRest || wasDRest\n        ? create(args)\n        : args;\n\n      if (args !== localArgs) {\n        argsChain.push(localArgs);\n      }\n\n      args = localArgs;\n\n      if (isDRest) {\n        const restArgs = parentScope.$$.evaluate(value, (value) => {\n          iterateObject(localArgs, cleanProperty);\n          assign(localArgs, transformRestArgs(value));\n          calculateArgs(normalizeArgs(argsChain), args, argsObject);\n        }, this);\n\n        wasDRest = true;\n\n        return assign(localArgs, transformRestArgs(restArgs));\n      }\n\n      const isDElements = name === 'd-elements';\n      const forDElements = isDElements && arg === 'value';\n\n      wasDRest = false;\n\n      localArgs[arg] = parentScope.$$.evaluate(value, (value) => {\n        localArgs[arg] = value;\n        calculateArgs(normalizeArgs(argsChain), args, argsObject);\n      }, this, forDElements, isDElements && parentBlock.$$.name === '#d-item');\n    });\n\n    defineFrozenProperties(this, {\n      /**\n       * @member {Object} Block#args\n       * @type {Object}\n       * @public\n       */\n      args: argsObject,\n\n      /**\n       * @member {Object} Block#globals\n       * @type {Object}\n       * @public\n       */\n      globals: create(\n        parentScope\n          ? parentScope.globals\n          : null\n      )\n    });\n\n    calculateArgs(normalizeArgs(argsChain), args, argsObject);\n\n    if (parentBlock) {\n      parentBlock.$$.children.push(this);\n    }\n  }\n\n  /**\n   * @method Block#afterConstruct\n   * @public\n   * @description Is called after block construction (including all scopes)\n   * but before rendering the block and its children.\n   */\n  afterConstruct() {}\n\n  /**\n   * @method Block#afterDOMChange\n   * @public\n   * @description Is called after block DOM structure has changed. Note that\n   * it's important not to modify the DOM structure within the block. You can only insert\n   * elements to empty elements (which Dwayne considers empty) and remove ones from them.\n   */\n  afterDOMChange() {}\n\n  /**\n   * @method Block#afterRender\n   * @public\n   * @description Is called after block has been rendered.\n   */\n  afterRender() {}\n\n  /**\n   * @method Block#beforeRemove\n   * @public\n   * @description Is called before the block removal.\n   */\n  beforeRemove() {}\n\n  /**\n   * @method Block#getDOM\n   * @public\n   * @returns {Elem}\n   * @description Returns DOM contents of the block.\n   */\n  getDOM() {\n    return this.$$.content.slice();\n  }\n\n  /**\n   * @method Block#getName\n   * @public\n   * @returns {String}\n   * @description Returns Block name.\n   */\n  getName() {\n    return this.$$.name;\n  }\n\n  /**\n   * @method Block#getParentElem\n   * @public\n   * @returns {Elem|void}\n   * @description Returns parent Elem.\n   */\n  getParentElem() {\n    return this.$$.parentElem.slice();\n  }\n\n  /**\n   * @method Block#getParentScope\n   * @public\n   * @returns {Block|void}\n   * @description Returns block in which template the block is located in.\n   */\n  getParentScope() {\n    return this.$$.parentScope;\n  }\n\n  /**\n   * @method Block#getParentTemplate\n   * @public\n   * @returns {Block|void}\n   * @description Returns block in which template the block is located in.\n   */\n  getParentTemplate() {\n    return this.$$.parentTemplate;\n  }\n\n  /**\n   * @method Block#evaluate\n   * @public\n   * @param {Function} func - Function to evaluate.\n   * @param {Watcher} [callback] - If present, callback which is called when the expression value is changed.\n   * @param {Block|Mixin} [target = this] - What block or mixin requests the value.\n   * @returns {*} Evaluation result.\n   * @description Method for evaluating an expression in context of the block and watching for the changes.\n   */\n  evaluate(func, callback, target = this) {\n    return this.$$.evaluate(func, callback, target);\n  }\n\n  toString() {\n    return toStringTag;\n  }\n}\n\nsetToStringTag(Block, 'Block');\nsetProto(Block.prototype, null);\n\nexport { Block, gettingVars, evalMode };\n","import { findInArray, isFunction } from '../utils';\nimport { Block } from '../Block';\nimport { rootBlocks } from '../constants';\n\nconst watchNameArgs = js`args.name`;\nconst watchConstructorArgs = js`args.Constructor`;\n\nclass DBlock extends Block {\n  static template = html`\n    <d-elements\n      value=\"{elems}\"\n      parentScope=\"{ParentScope}\"\n      parentTemplate=\"{ParentTemplate}\"\n    />\n  `;\n\n  afterConstruct(opts) {\n    const {\n      parentScope: {\n        $$: {\n          parentScope: parentParentScope,\n          parentTemplate: parentParentTemplate,\n          htmlChildren: children\n        }\n      },\n      htmlChildren: ownChildren,\n      parentScope,\n      parentTemplate,\n      dBlockName: DBlockName\n    } = this.$$;\n    const {\n      name,\n      Constructor\n    } = this.args;\n    let found;\n\n    this.ParentScope = parentScope;\n    this.ParentTemplate = parentTemplate;\n\n    if (name) {\n      this.constructDynamicNameBlock(\n        this.evaluate(watchNameArgs, this.constructDynamicNameBlock)\n      );\n\n      return;\n    }\n\n    if (Constructor) {\n      this.constructDynamicConstructorBlock(\n        this.evaluate(watchConstructorArgs, this.constructDynamicConstructorBlock)\n      );\n\n      return;\n    }\n\n    if (ownChildren.length) {\n      parentTemplate.$$.dBlocks.push(this);\n\n      return;\n    }\n\n    this.ParentScope = parentParentScope;\n    this.ParentTemplate = parentParentTemplate;\n\n    if (DBlockName) {\n      found = findInArray(children, ({ name: nodeName }) => nodeName === `d-block:${ DBlockName }`);\n\n      if (!found) {\n        found = findInArray(parentTemplate.$$.dBlocks, ({ $$: { dBlockName } }) => dBlockName === DBlockName);\n\n        if (found) {\n          this.ParentScope = parentTemplate;\n          this.ParentTemplate = parentTemplate;\n          found.value = {\n            children: found.value.$$.htmlChildren\n          };\n        }\n      }\n\n      this.elems = found\n        ? found.value.children\n        : null;\n    } else {\n      this.elems = children;\n    }\n  }\n\n  constructDynamicNameBlock = (name) => {\n    const {\n      htmlChildren,\n      dBlockArgs\n    } = this.$$;\n\n    this.elems = [{\n      name,\n      attrs: dBlockArgs,\n      children: htmlChildren\n    }];\n  };\n\n  constructDynamicConstructorBlock = (Constructor) => {\n    if (!isFunction(Constructor)) {\n      this.elems = null;\n\n      return;\n    }\n\n    const {\n      htmlChildren,\n      dBlockArgs\n    } = this.$$;\n\n    this.elems = [{\n      Constructor,\n      attrs: dBlockArgs,\n      children: htmlChildren\n    }];\n  };\n}\n\nrootBlocks['d-block'] = DBlock;\n\nexport { DBlock };\n","import { Block } from '../Block';\n\nconst template = html`\n  <d-elements\n    value=\"{$$.htmlChildren}\"\n    parentScope=\"{this}\"\n    parentTemplate=\"{$$.parentTemplate}\"\n  />\n`;\n\nclass DItem extends Block {\n  static template = template;\n}\n\nexport { DItem };\n","import {\n  iterateArray, iterateObject,\n  isArray, isFunction, create\n} from '../utils';\nimport { remove, createBlock } from '../helpers/Block';\nimport { Block } from '../Block';\nimport { rootBlocks } from '../constants';\nimport { DItem } from './d-item';\n\nconst watchArgs = js`[\n  args.set,\n  args.filterBy,\n  args.sortBy\n]`;\n\nrootBlocks['d-each'] = class DEach extends Block {\n  static defaultArgs = {\n    uid(item, index) {\n      return index;\n    }\n  };\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      args: {\n        item = '$item',\n        index = '$index'\n      }\n    } = this;\n\n    this.itemName = item;\n    this.indexName = index;\n    this.itemsByUIDs = create(null);\n  }\n\n  afterConstruct() {\n    this.renderSet(this.evaluate(watchArgs, this.renderSet));\n  }\n\n  renderSet = (args) => {\n    let set = args[0];\n    let filterBy = args[1];\n    const sortBy = args[2];\n\n    const {\n      htmlChildren,\n      parentScope,\n      parentElem,\n      parentTemplate\n    } = this.$$;\n    const {\n      args: {\n        uid: UID\n      },\n      itemsByUIDs,\n      itemName,\n      indexName\n    } = this;\n    const newItemsByUIDs = create(null);\n    const newUIDsByIndexes = create(null);\n    const newUIDs = create(null);\n    const isArr = isArray(set);\n    const iterate = isArr\n      ? iterateArray\n      : iterateObject;\n\n    if (isArr && isFunction(sortBy)) {\n      set = set\n        .slice()\n        .sort(sortBy);\n    }\n\n    if (isFunction(filterBy)) {\n      filterBy = [filterBy];\n    }\n\n    if (isArray(filterBy)) {\n      iterateArray(filterBy, (filter) => {\n        set = set.filter(filter);\n      });\n    }\n\n    iterate(set, (item, index) => {\n      const uid = UID(item, index, set, parentScope);\n\n      if (uid in newUIDsByIndexes) {\n        console.error(`UIDs can't be same for multiple items! In UID function: \"${ UID.original || UID }\"`);\n      }\n\n      newUIDsByIndexes[uid] = index;\n      newUIDs[index] = uid;\n    });\n\n    iterateObject(itemsByUIDs, (block, uid) => {\n      if (!(uid in newUIDsByIndexes)) {\n        remove(block);\n      }\n    });\n\n    let prevBlock;\n\n    iterate(set, (item, index) => {\n      const uid = newUIDs[index];\n      let block;\n\n      if (newUIDsByIndexes[uid] !== index) {\n        return;\n      }\n\n      const prevUIDBlock = itemsByUIDs[uid];\n\n      if (prevUIDBlock) {\n        block = prevUIDBlock;\n        block.$$.scope[indexName] = index;\n        block.$$.scope[itemName] = item;\n\n        if (block.$$.prevBlock !== prevBlock) {\n          const { content } = block.$$;\n\n          if (prevBlock) {\n            prevBlock.$$.insertAfterIt(content, true);\n          } else {\n            this.$$.insertInStartOfIt(content, true);\n          }\n        }\n      } else {\n        block = createBlock({\n          node: {\n            itemName,\n            indexName,\n            item,\n            index,\n            name: '#d-item',\n            Constructor: DItem,\n            children: htmlChildren\n          },\n          parent: this,\n          parentElem,\n          parentBlock: this,\n          parentScope,\n          parentTemplate,\n          prevBlock\n        });\n      }\n\n      newItemsByUIDs[uid] = block;\n      block.$$.prevBlock = prevBlock;\n      prevBlock = block;\n    });\n\n    this.itemsByUIDs = newItemsByUIDs;\n  };\n};\n","import { iterateArray, removeArrayElem } from '../utils';\nimport { removeWithParentSignal, createBlock } from '../helpers/Block';\nimport { Block } from '../Block';\nimport { Elem } from '../Elem';\nimport { rootBlocks } from '../constants';\n\nconst watchArgs = js`args.value`;\n\nrootBlocks['d-elements'] = class DElements extends Block {\n  afterConstruct() {\n    const { parentElem } = this.$$;\n    const {\n      parentScope,\n      parentTemplate\n    } = this.args;\n\n    this.$$.evaluate(watchArgs, (value) => {\n      const {\n        children,\n        mixins,\n        parent,\n        watchersToRemove,\n        content\n      } = this.$$;\n\n      iterateArray(children, removeWithParentSignal);\n      iterateArray(mixins, removeWithParentSignal);\n      content.remove();\n\n      if (parent instanceof Block) {\n        parent.$$.removeContent(content);\n      }\n\n      this.$$.children = [];\n      this.$$.mixins = [];\n      this.$$.watchersToRemove = watchersToRemove.filter(({ watchers, watcher, forDElements }) => {\n        if (forDElements) {\n          return true;\n        }\n\n        removeArrayElem(watchers, watcher);\n      });\n      this.$$.content = new Elem();\n\n      let prevBlock;\n\n      iterateArray(value || [], (child) => {\n        prevBlock = createBlock({\n          node: child,\n          parent: this,\n          parentElem,\n          parentBlock: this,\n          parentScope,\n          parentTemplate,\n          prevBlock\n        });\n      });\n      iterateArray(this.$$.mixinsToBuild, (executeBuilders) => {\n        executeBuilders();\n      });\n      this.$$.mixinsToBuild = [];\n    }, this, true);\n  }\n};\n","import { Block } from '../Block';\nimport { rootBlocks } from '../constants';\n\nconst watchArgs = js`args.if`;\n\nrootBlocks['d-if'] = class DIf extends Block {\n  static template = html`\n    <d-elements\n      value=\"{elems}\"\n      parentScope=\"{$$.parentScope}\"\n      parentTemplate=\"{$$.parentTemplate}\"\n    />\n  `;\n\n  afterConstruct() {\n    this.condition = false;\n    this.constructElems(this.evaluate(watchArgs, this.constructElems));\n  }\n\n  constructElems = (condition) => {\n    condition = !!condition;\n\n    if (this.condition !== condition) {\n      this.condition = condition;\n      this.elems = condition\n        ? this.$$.htmlChildren\n        : null;\n    }\n  };\n};\n","import { findInArray } from '../utils';\nimport { Block } from '../Block';\nimport { rootBlocks } from '../constants';\n\nconst watchArgs = js`[\n  args.value,\n  args.compareFn\n]`;\n\nrootBlocks['d-switch'] = class DSwitch extends Block {\n  static template = html`\n    <d-elements\n      value=\"{elems}\"\n      parentScope=\"{$$.parentScope}\"\n      parentTemplate=\"{$$.parentTemplate}\"\n    />\n  `;\n  static defaultArgs = {\n    compareFn(switchValue, caseValue) {\n      return (\n        switchValue === caseValue\n        || (switchValue !== switchValue && caseValue !== caseValue)\n      );\n    }\n  };\n\n  index = Infinity;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      $$: {\n        htmlChildren,\n        parentScope\n      },\n      args,\n      args: { value }\n    } = this;\n    let wasDefault = false;\n\n    this.values = htmlChildren\n      .filter(({ name }) => {\n        if (name !== 'd-case' && name !== 'd-default') {\n          return;\n        }\n\n        if (wasDefault) {\n          return;\n        }\n\n        if (name === 'd-default') {\n          wasDefault = true;\n        }\n\n        return true;\n      })\n      .map((child, i) => {\n        const {\n          name,\n          attrs = {},\n          children\n        } = child;\n        let val;\n\n        if (name !== 'd-default') {\n          val = parentScope.$$.evaluate(attrs.if, (newValue) => {\n            this.values[i].value = newValue;\n\n            if (i > this.index) {\n              return;\n            }\n\n            const found = findInArray(this.values, ({ name, value }) => (\n              name === 'd-default'\n              || this.args.compareFn(args.value, value)\n            ));\n\n            this.index = found\n              ? found.key\n              : Infinity;\n            this.elems = found\n              ? found.value.children\n              : null;\n          }, this);\n        }\n\n        if (this.index === Infinity && (\n          name === 'd-default'\n          || this.args.compareFn(value, val)\n        )) {\n          this.index = i;\n          this.elems = children;\n        }\n\n        return {\n          name,\n          children,\n          value: val\n        };\n      });\n  }\n\n  afterConstruct() {\n    this.evaluate(watchArgs, (args) => {\n      const newValue = args[0];\n      const compareFn = args[1];\n\n      this.index = Infinity;\n\n      this.values.some(({ name, value, children }, i) => {\n        if (\n          name === 'd-default'\n          || compareFn(newValue, value)\n        ) {\n          this.index = i;\n          this.elems = children;\n\n          return true;\n        }\n      });\n\n      if (this.index === Infinity) {\n        this.elems = null;\n      }\n    });\n  }\n};\n","import { isFunction, noop } from '../utils';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-bind'] = class DBind extends Mixin {\n  off = noop;\n\n  afterUpdate(value) {\n    this.off();\n\n    if (!isFunction(value)) {\n      return;\n    }\n\n    if (this.args) {\n      this.off = this.elem.on(this.args.join(','), value);\n    } else {\n      this.off = noop;\n\n      console.error('Provide \"d-bind\" mixin with an event names (like \"d-bind(click)\" or \"d-bind(keyup, keypress)\")!');\n    }\n  }\n\n  beforeRemove(isElementRemoved) {\n    if (!isElementRemoved) {\n      this.off();\n    }\n  }\n};\n","import {\n  isArray, isString,\n  iterateArray, iterateObject\n} from '../utils';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nconst EMPTY_SPACE_REGEX = /\\s+/;\n\nrootMixins['d-class'] = class DClass extends Mixin {\n  classes = [];\n\n  afterUpdate(newValue) {\n    const {\n      elem,\n      args,\n      classes\n    } = this;\n    const newClasses = [];\n\n    if (args) {\n      newValue = newValue\n        ? args\n        : [];\n    }\n\n    if (isString(newValue)) {\n      newValue = newValue.split(EMPTY_SPACE_REGEX);\n    }\n\n    if (isArray(newValue)) {\n      iterateArray(classes, (cls) => {\n        if (newValue.indexOf(cls) === -1) {\n          elem.removeClass(cls);\n        }\n      });\n      iterateArray(newValue, (cls) => {\n        if (isString(cls)) {\n          newClasses.push(cls);\n          elem.addClass(cls);\n        }\n      });\n    } else {\n      iterateArray(classes, (cls) => {\n        if (!newValue || !newValue[cls]) {\n          elem.removeClass(cls);\n        }\n      });\n      iterateObject(newValue, (val, cls) => {\n        if (val) {\n          newClasses.push(cls);\n          elem.addClass(cls);\n        }\n      });\n    }\n\n    this.classes = newClasses;\n  }\n\n  beforeRemove(isElementRemoved) {\n    if (!isElementRemoved) {\n      const {\n        elem,\n        classes\n      } = this;\n\n      elem.removeClass.apply(elem, classes);\n    }\n  }\n};\n","import { isFunction, isString } from '../utils';\nimport { Block } from '../Block';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-elem'] = class DElem extends Mixin {\n  static evaluate = false;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      args,\n      parentTemplate,\n      elem\n    } = this;\n    let scope = parentTemplate;\n    let value = this.evaluate();\n\n    if (args) {\n      scope = value instanceof Block\n        ? value\n        : parentTemplate;\n      value = args[0];\n    }\n\n    if (isFunction(value)) {\n      value(elem);\n    } else if (isString(value)) {\n      scope[value] = elem;\n    }\n  }\n};\n","import { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nclass DHide extends Mixin {\n  afterUpdate(value) {\n    const { elem } = this;\n\n    if (value) {\n      elem.hide();\n    } else {\n      elem.show();\n    }\n  }\n\n  beforeRemove(isElementRemoved) {\n    if (!isElementRemoved) {\n      this.elem.show();\n    }\n  }\n}\n\nrootMixins['d-hide'] = DHide;\n\nexport { DHide };\n","import { isFunction, isString } from '../utils';\nimport { Block } from '../Block';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-node'] = class DNode extends Mixin {\n  static evaluate = false;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      args,\n      parentTemplate,\n      node\n    } = this;\n    let scope = parentTemplate;\n    let value = this.evaluate();\n\n    if (args) {\n      scope = value instanceof Block\n        ? value\n        : parentTemplate;\n      value = args[0];\n    }\n\n    if (isFunction(value)) {\n      value(node);\n    } else if (isString(value)) {\n      scope[value] = node;\n    }\n  }\n};\n","import { noop } from '../utils';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-on'] = class DOn extends Mixin {\n  static evaluate = false;\n\n  constructor(opts) {\n    super(opts);\n\n    if (this.args) {\n      this.off = this.elem.on(this.args.join(','), () => {\n        this.evaluate();\n      });\n    } else {\n      this.off = noop;\n\n      console.error('Provide \"d-on\" mixin with an event names (like \"d-on(click)\" or \"d-on(keyup, keypress)\")!');\n    }\n  }\n\n  beforeRemove(isElementRemoved) {\n    if (!isElementRemoved) {\n      this.off();\n    }\n  }\n};\n","import { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-show'] = class DShow extends Mixin {\n  afterUpdate(value) {\n    const { elem } = this;\n\n    if (value) {\n      elem.show();\n    } else {\n      elem.hide();\n    }\n  }\n\n  beforeRemove(isElementRemoved) {\n    if (!isElementRemoved) {\n      this.elem.show();\n    }\n  }\n};\n","import {\n  isString, iterateObject, keys,\n  collectFromObject, collectFromArray\n} from '../utils';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nconst CSS_STYLES_SEPARATOR_REGEX = /\\s*;\\s*/;\nconst CSS_STYLE_SEPARATOR_REGEX = /\\s*:\\s*/;\n\nrootMixins['d-style'] = class DStyle extends Mixin {\n  css = {};\n\n  afterUpdate(newValue, oldValue) {\n    const {\n      elem,\n      args,\n      css\n    } = this;\n\n    if (args) {\n      newValue = collectFromObject(args, (css, prop) => {\n        css[prop] = newValue;\n      });\n    }\n\n    if (isString(newValue)) {\n      newValue = collectFromArray(\n        newValue\n          .split(CSS_STYLES_SEPARATOR_REGEX)\n          .filter(Boolean)\n          .map(constructStyleFromString),\n        addCSSProp\n      );\n    }\n\n    iterateObject(css, (value, prop) => {\n      if (!newValue[prop]) {\n        elem.removeCSS(prop);\n      }\n    });\n    elem.css(newValue);\n\n    this.css = newValue;\n  }\n\n  beforeRemove(isElementRemoved) {\n    if (!isElementRemoved) {\n      const {\n        elem,\n        css\n      } = this;\n\n      elem.removeCSS.apply(elem, keys(css));\n    }\n  }\n};\n\nfunction addCSSProp(css, item) {\n  const [prop, value] = item;\n\n  css[prop] = value;\n}\n\nfunction constructStyleFromString(style) {\n  const split = style.split(CSS_STYLE_SEPARATOR_REGEX);\n\n  return [\n    split[0].trim(),\n    split[1].trim()\n  ];\n}\n","import {\n  isFunction, isNil,\n  collectFromArray\n} from '../utils';\nimport { Block } from '../Block';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-value'] = class DValue extends Mixin {\n  static evaluate = false;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      args,\n      parentTemplate,\n      elem\n    } = this;\n    const name = elem.name();\n    const type = elem.prop('type');\n    const value = this.evaluate();\n    let initialScopeValue = null;\n\n    this.prop = getProp(name, type, elem);\n    this.name = name;\n    this.type = type;\n    this.value = value;\n    this.options = elem.children().filter('option');\n    this.scope = parentTemplate;\n\n    if (args) {\n      this.scope = value instanceof Block\n        ? value\n        : parentTemplate;\n      this.value = args[0];\n    }\n\n    if (!isFunction(this.value)) {\n      initialScopeValue = this.scope.$$.evaluate((scope) => scope[this.value], (newValue) => {\n        if (this.currentValue !== newValue) {\n          this.currentValue = newValue;\n          this.setProp(newValue);\n        }\n      }, this);\n    }\n\n    const initialElemValue = this.getProp(initialScopeValue, true);\n    const isInitialScopeValueNull = isNil(initialScopeValue);\n    const isCheckbox = type === 'checkbox';\n    const changeScope = () => {\n      this.currentValue = this.getProp(this.currentValue, false);\n      this.changeScope();\n    };\n\n    if (isInitialScopeValueNull || isCheckbox) {\n      this.currentValue = initialElemValue;\n      this.changeScope();\n\n      if (!isInitialScopeValueNull && isCheckbox) {\n        this.setProp(initialScopeValue);\n      }\n    } else {\n      this.currentValue = initialScopeValue;\n      this.setProp(initialScopeValue);\n    }\n\n    this.offElemListener = elem.on(getListenerName(name, type), changeScope);\n    this.offFormListener = elem.closest('form').on('reset', () => {\n      setTimeout(changeScope, 0);\n    });\n  }\n\n  changeScope() {\n    const {\n      scope,\n      value,\n      currentValue\n    } = this;\n\n    if (isFunction(value)) {\n      value(currentValue);\n    } else {\n      scope[value] = currentValue;\n    }\n  }\n\n  setProp(value) {\n    const {\n      elem,\n      name,\n      prop,\n      type,\n      node,\n      options\n    } = this;\n\n    if (prop === 'text') {\n      elem.text(value);\n    } else if (prop === 'multiple-select') {\n      options.forEach((option) => {\n        option.selected = value.indexOf(option.value) !== -1;\n      });\n    } else {\n      elem.prop(prop, getValueForSetting(name, value, type, node.value));\n    }\n  }\n\n  getProp(values, init) {\n    const {\n      elem,\n      name,\n      prop,\n      type,\n      node,\n      options\n    } = this;\n\n    return prop === 'text'\n      ? elem.text()\n      : getValueForGetting(name, elem.prop(prop), type, node.value, values, options, init, prop === 'multiple-select');\n  }\n\n  beforeRemove(isElementRemoved) {\n    if (!isElementRemoved) {\n      this.offElemListener();\n    }\n\n    this.offFormListener();\n  }\n};\n\nfunction getProp(name, type, elem) {\n  switch (name) {\n    case 'select': {\n      return elem.hasAttr('multiple')\n        ? 'multiple-select'\n        : 'value';\n    }\n\n    case 'input': {\n      if (type === 'file') {\n        return 'files';\n      }\n\n      return type === 'radio' || type === 'checkbox'\n        ? 'checked'\n        : 'value';\n    }\n\n    default: {\n      return elem.hasAttr('contentEditable')\n        ? 'text'\n        : 'value';\n    }\n  }\n}\n\nfunction getValueForSetting(name, value, type, inputValue) {\n  if (name !== 'input') {\n    return value;\n  }\n\n  const isRadio = type === 'radio';\n\n  if (!isRadio && type !== 'checkbox') {\n    return value;\n  }\n\n  return isRadio\n    ? value === inputValue\n    : value.indexOf(inputValue) !== -1;\n}\n\nfunction getValueForGetting(name, value, type, inputValue, values, options, init, isMultiple) {\n  switch (name) {\n    case 'select': {\n      if (!isMultiple) {\n        return value;\n      }\n\n      return collectFromArray(options, addValue, []);\n    }\n\n    case 'input': {\n      if (type !== 'radio' && type !== 'checkbox') {\n        return value;\n      }\n\n      if (type === 'radio') {\n        return value\n          ? inputValue\n          : null;\n      }\n\n      values = values || [];\n\n      if (!value && init) {\n        return values;\n      }\n\n      if (value) {\n        return values.indexOf(inputValue) === -1\n          ? values.concat(inputValue)\n          : values;\n      }\n\n      const index = values.indexOf(inputValue);\n\n      if (index !== -1) {\n        return [\n          ...values.slice(0, index),\n          ...values.slice(index + 1)\n        ];\n      }\n\n      return values;\n    }\n\n    default: {\n      return value;\n    }\n  }\n}\n\nfunction getListenerName(name, type) {\n  switch (name) {\n    case 'select': {\n      return 'change';\n    }\n\n    case 'input': {\n      return (\n        type === 'radio'\n        || type === 'checkbox'\n        || type === 'color'\n        || type === 'file'\n      )\n        ? 'change'\n        : 'change input';\n    }\n\n    default: {\n      return 'input';\n    }\n  }\n}\n\nfunction addValue(values, { selected, value }) {\n  if (selected && values.indexOf(value) === -1) {\n    values.push(value);\n  }\n}\n","import { iterateObject } from '../../utils';\nimport { rootMixins } from '../../constants';\nimport { constructMixinRegex } from './constructMixinRegex';\n\niterateObject(rootMixins, (Mixin, name) => {\n  Mixin._match = constructMixinRegex(name);\n});\n","import { Elem } from './Elem';\nimport { createHideStyleNode } from './helpers/Elem';\nimport { document } from './constants';\n\n/**\n * @const {Elem} doc\n * @type {Elem}\n * @public\n * @description Elem instance of document.\n */\nexport const doc = new Elem(document);\n\n/**\n * @const {Elem} html\n * @type {Elem}\n * @public\n * @description Elem instance of document.documentElement.\n */\nexport const html = new Elem(document.documentElement);\n\n/**\n * @const {Elem} body\n * @type {Elem}\n * @public\n * @description Elem instance of document.body.\n */\nexport const body = new Elem(document.body);\n\n/**\n * @const {Elem} head\n * @type {Elem}\n * @public\n * @description Elem instance of document.head.\n */\nexport const head = new Elem(document.head);\n\ncreateHideStyleNode(head);\n","import {\n  toObjectKeys,\n  assign, keys, create\n} from './utils';\n\nexport function insertTemplates(template, templates) {\n  const {\n    vars,\n    value\n  } = template;\n  const newTemplates = create(null);\n  const newVars = toObjectKeys(vars);\n\n  assign(newTemplates, templates);\n  iterateAndChangeChildren(value);\n\n  function iterateAndChangeChildren(nodes = []) {\n    for (let i = 0; i < nodes.length; i++) {\n      const {\n        name,\n        value,\n        children\n      } = nodes[i];\n\n      if (name === '#comment') {\n        const trimmed = value.trim();\n\n        if (newTemplates[trimmed]) {\n          const newTemplate = newTemplates[trimmed].value;\n\n          nodes.splice(i, 1, ...newTemplate);\n          assign(newVars, toObjectKeys(newTemplates[trimmed].vars));\n\n          i += newTemplate.length - 1;\n        }\n      } else {\n        iterateAndChangeChildren(children);\n      }\n    }\n  }\n\n  vars.length = 0;\n  vars.push(...keys(newVars));\n\n  return template;\n}\n","import { isArray, isString } from './utils';\nimport { createBlock, isInstanceOf } from './helpers/Block';\nimport { Block } from './Block';\nimport { Elem } from './Elem';\n\n/**\n * @function initApp\n * @public\n * @param {Template|ScopelessTemplate|String|typeof Block} block - Root template (may be scopeless),\n * string defining a name of the root block or a block subclass.\n * @param {Elem|Element} container - Container of the app.\n * @returns {void}\n * @description Method for initializing app.\n *\n * @example\n * import { initApp, doc } from 'dwayne';\n *\n * initApp(html`<App/>`, doc.create('div'));\n * initApp(htmlScopeless`<App/>`, doc.create('div'));\n * initApp('App', doc.create('div'));\n * initApp(App, doc.create('div'));\n */\nexport function initApp(block, container) {\n  const parentElem = new Elem(container).elem(0);\n\n  if (!parentElem.length) {\n    console.error('No valid element to insert the app into was given! (initApp)');\n\n    return;\n  }\n\n  if (parentElem.prop('DwayneRootBlock')) {\n    console.error('There already exists a Dwayne app inside the given element! (initApp)');\n\n    return;\n  }\n\n  if (isString(block)) {\n    block = {\n      vars: [],\n      value: [{\n        name: block\n      }]\n    };\n  }\n\n  if (isArray(block)) {\n    block = {\n      vars: [],\n      value: block\n    };\n  }\n\n  let Constructor;\n\n  if (isInstanceOf(Block, block)) {\n    Constructor = block;\n  } else {\n    Constructor = class RootBlock extends Block {\n      static template = block;\n    };\n  }\n\n  const rootBlock = createBlock({\n    node: {\n      name: '#RootBlock',\n      Constructor\n    },\n    parent: parentElem,\n    parentElem\n  });\n\n  parentElem\n    .prop('DwayneRootBlock', rootBlock)\n    .attr('dwayne-root', '');\n}\n","import { Block } from './Block';\nimport { Elem } from './Elem';\n\n/**\n * @function removeApp\n * @public\n * @param {Elem|Element} container - Container of the app.\n * @returns {void}\n * @description Method for removing app.\n *\n * @example\n * import { removeApp, find } from 'dwayne';\n *\n * removeApp(find('.root'));\n */\nexport function removeApp(container) {\n  const elem = new Elem(container).elem(0);\n\n  if (!elem.length) {\n    console.error('No valid element to remove the app from was given! (removeApp)');\n\n    return;\n  }\n\n  container = elem[0];\n\n  const { DwayneRootBlock } = container;\n\n  if (!(DwayneRootBlock instanceof Block)) {\n    console.error('No app registered inside the given element! (removeApp)');\n\n    return;\n  }\n\n  DwayneRootBlock.$$.remove();\n  elem.removeAttr('dwayne-root');\n\n  delete container.DwayneRootBlock;\n}\n"],"names":["collectFromArray","array","callback","initialValue","value","index","findInArray","i","length","iterateArray","removeArrayElem","elem","indexOf","splice","toObjectKeys","addKey","vars","variable","isArray","Array","isFunction","isNil","isString","has","hasOwnProperty","slice","assign","target","arguments","source","key","collectFromObject","object","except","newObject","paths","iterateObject","mapObject","defineProperties","Object","definePrototypeProperties","properties","name","defineProperty","defineFrozenProperties","regexpSpecialCharacters","regexpSpecialsRegexp","RegExp","map","s","join","escapeRegex","string","replace","noop","create","keys","getProto","getPrototypeOf","setProto","setPrototypeOf","proto","__proto__","window","global","self","HIDE_CLASS","SVG_NS","D_REST_REGEX","rootBlocks","rootMixins","document","Symbol","setSymbolSpecies","klass","species","DASHED_SYMBOL_REGEX","UPPERCASED_SYMBOL_REGEX","toCamelCase","capitalize","toHyphenCase","hyphenize","match","toUpperCase","toLowerCase","toString","toStringTag","setToStringTag","tag","prototype","addAttr","attrs","attr","CSS_PROP_VALUE_SEPARATOR_REGEX","addCSSProp","css","property","split","addDataAttr","data","addNext","add","nextSibling","addParent","parentNode","addPrev","previousSibling","createHideStyleNode","head","style","find","prop","text","X_LINK_ATTR_FIND_REGEX","X_LINK_ATTR_REPLACE_REGEX","XML_NS","X_LINK_NS","Null","getAttrNS","isXmlNs","nodeName","test","Elem","closest","HTML_COLLECTION_REGEX","DOCUMENT_REGEX","ELEMENT_REGEX","isDocument","isElem","isElementsCollection","isValidNode","EVENT_REGEX","getEvent","event","bubbles","cancelable","realDetails","finalEvent","Event","err","ownerDocument","createEvent","initEvent","hide","addClass","getMatchesFunction","matches","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","selector","querySelectorAll","remove","parent","removeChild","show","removeClass","toElem","base","String","EVENT_SEPARATOR_REGEX","CSS_STYLES_SEPARATOR_REGEX","CSS_IMPORTANT_REGEX","emptyCollection","methodName","method","includes","push","elems","elements","classes","forEach","list","classList","cls","attributes","ns","getAttributeNS","getAttribute","removeAttr","setAttributeNS","setAttribute","childNodes","collect","is","cb","element","child","contains","type","el","isText","createTextNode","createComment","createElementNS","createElement","into","cssText","getPropertyValue","getPropertyPriority","removeCSS","removeProperty","setProperty","dataset","details","dispatchEvent","filter","hasAttributeNS","hasAttribute","html","innerHTML","next","insertBefore","appendChild","end","firstChild","undefined","listener","newEvents","allListeners","listeners","addEventListener","removeEventListener","removeEventListeners","removeListeners","removeListener","removeAttributeNS","removeAttribute","props","first","prev","babelHelpers.get","apply","textContent","condition","hasAttr","calculateArgs","normalizedArgs","args","argsObject","arg","cleanProperty","constructMixinRegex","COMMA_REGEX","mixinMatch","mixins","Mixin","localMatch","_match","argsMatch","transformRestAttrs","mixinDefaultOpts","eventualAttrs","transformRestArgs","addArgs","executeMixinWatchers","mixin","oldValue","$$","watchers","watcher","calculateAttrs","normalizedAttrs","attrsObject","firstTime","dynamic","opts","nextType","nextDynamic","nextValue","prevType","prevValue","prevDynamic","created","isDynamic","evaluated","evaluate","newValue","parentScope","constructMixinWatcher","setAfterUpdate","buildMixin","firstValue","normalizeArgs","argsChain","newArgs","constructPrivateScope","scope","globals","removeTempWatcher","removeWatchers","watchersToRemove","removeWatcher","constructPublicScope","scopeValues","privateScope","evalMode","gettingVars","oldTempWatchers","NAMED_D_BLOCK_REGEX","emptyArray","createBlock","node","parentElem","parentBlock","parentTemplate","prevBlock","doc","namespaceURI","localBlocks","_blocks","Block","localMixins","_mixins","children","constructor","Constructor","dBlockMatch","dBlockName","dBlockArgs","blockInstance","error","currentAttrs","wasDRest","attrsChain","isDRest","localAttrs","restAttrs","mixinsToBuild","isParentBlock","insertAfterIt","insertAfter","addContent","insertInStartOfIt","content","createDocumentFragment","contentDocument","documentElement","Args","locals","template","itemName","item","indexName","afterConstruct","isRendered","executeBuilders","afterRender","isPrototypeOf","isInstanceOf","Class","Subclass","removeWithParentSignal","wrappers","reduce","wrapMixin","comment","afterUpdate","_value","currentValue","isParentSignal","isRemoved","beforeRemove","isElementRemoved","wrapBlock","block","wrapper","returnValue","blockHooks","mixinHooks","TAG_NAME_REGEX","ATTR_NAME_REGEX","afterElem","emptyObject","original","func","hook","warn","defaultLocals","defaultArgs","currentReturnValue","originalArgs","childrenBlocks","onChange","targetBlock","forDElements","forDItem","onChangeFlag","result","onEvalError","e","localWatchers","watcherBlock","newResult","removeContent","newContent","afterDOMChange","contentToAdd","notRecursive","oldContent","changeContent","contentToMove","after","indexToPut","moveContent","contentToRemove","contentToInsert","moveFlag","tryToAddOrMove","localArgs","restArgs","isDElements","watchNameArgs","watchConstructorArgs","DBlock","constructDynamicNameBlock","htmlChildren","constructDynamicConstructorBlock","parentParentScope","parentParentTemplate","ownChildren","DBlockName","found","ParentScope","ParentTemplate","dBlocks","DItem","watchArgs","itemsByUIDs","renderSet","set","filterBy","sortBy","UID","uid","newItemsByUIDs","newUIDsByIndexes","newUIDs","isArr","iterate","sort","prevUIDBlock","constructElems","Infinity","wasDefault","values","val","if","compareFn","some","switchValue","caseValue","off","on","EMPTY_SPACE_REGEX","newClasses","DHide","CSS_STYLE_SEPARATOR_REGEX","Boolean","constructStyleFromString","trim","initialScopeValue","getProp","options","setProp","initialElemValue","isInitialScopeValueNull","isCheckbox","changeScope","offElemListener","getListenerName","offFormListener","option","selected","getValueForSetting","init","getValueForGetting","inputValue","isRadio","isMultiple","addValue","concat","body","insertTemplates","templates","newTemplates","newVars","iterateAndChangeChildren","nodes","trimmed","newTemplate","initApp","container","rootBlock","removeApp","DwayneRootBlock"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}