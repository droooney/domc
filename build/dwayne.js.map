{"version":3,"file":"dwayne.js","sources":["../src/global.js","../src/utils/array.js","../src/utils/object.js","../src/utils/defineProperty.js","../src/utils/toStringTag.js","../src/utils/is.js","../src/utils/escapeRegex.js","../src/utils/noop.js","../src/utils/objectStatics.js","../src/utils/toCase.js","../src/helpers/Elem/addAttr.js","../src/helpers/Elem/addCSSProp.js","../src/helpers/Elem/addDataAttr.js","../src/helpers/Elem/addNext.js","../src/helpers/Elem/addParent.js","../src/helpers/Elem/addPrev.js","../src/constants.js","../src/helpers/Elem/createHideStyleNode.js","../src/helpers/Elem/getAttrNS.js","../src/helpers/Elem/hide.js","../src/helpers/Elem/isElem.js","../src/helpers/Elem/isElementsCollection.js","../src/helpers/Elem/isHTMLDocument.js","../src/helpers/Elem/isValidNode.js","../src/helpers/Elem/remove.js","../src/helpers/Elem/show.js","../src/helpers/Elem/toElem.js","../src/find.js","../src/Elem.js","../src/helpers/Block/calculateArgs.js","../src/helpers/Block/cleanProperty.js","../src/helpers/Block/constructMixinRegex.js","../src/helpers/Block/mixinMatch.js","../src/helpers/Block/transformRestAttrs.js","../src/helpers/Block/executeMixinWatchers.js","../src/helpers/Block/createMixin.js","../src/helpers/Block/calculateAttrs.js","../src/helpers/Block/constructPrivateScope.js","../src/helpers/Block/removeWatcher.js","../src/helpers/Block/constructPublicScope.js","../src/helpers/Block/createBlock.js","../src/helpers/Block/isInstanceOf.js","../src/helpers/Block/remove.js","../src/helpers/Block/watchForAll.js","../src/Mixin.js","../src/helpers/Block/wrap.js","../src/initApp.js","../src/Block.js","../src/blocks/d-block.js","../src/blocks/d-item.js","../src/blocks/d-each.js","../src/blocks/d-elements.js","../src/blocks/d-if.js","../src/blocks/d-switch.js","../src/mixins/d-attr.js","../src/mixins/d-bind.js","../src/mixins/d-class.js","../src/mixins/d-elem.js","../src/mixins/d-hide.js","../src/mixins/d-node.js","../src/mixins/d-on.js","../src/mixins/d-show.js","../src/mixins/d-style.js","../src/mixins/d-value.js","../src/helpers/Block/registerBuiltins.js","../src/elems.js","../src/insertTemplates.js","../src/removeApp.js"],"sourcesContent":["/* eslint no-nested-ternary: 0 */\n/* eslint no-negated-condition: 0 */\nexport default typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n","export function collectFromArray(array, callback, initialValue = {}) {\n  iterateArray(array, (value, index) => {\n    callback(initialValue, value, index, array);\n  });\n\n  return initialValue;\n}\n\nexport function findInArray(array, callback) {\n  for (let i = 0, length = array.length; i < length; i++) {\n    const value = array[i];\n\n    if (callback(value, i, array)) {\n      return {\n        key: i,\n        value\n      };\n    }\n  }\n}\n\nexport function iterateArray(array, callback) {\n  for (let i = 0, length = array.length; i < length; i++) {\n    callback(array[i], i, array);\n  }\n}\n\nexport function removeArrayElem(array, elem) {\n  const index = array.indexOf(elem);\n\n  if (index !== -1) {\n    array.splice(index, 1);\n  }\n}\n\nexport function toObjectKeys(array) {\n  return collectFromArray(array, addKey);\n}\n\nfunction addKey(vars, variable) {\n  vars[variable] = true;\n}\n","import { iterateArray } from './array';\n\nconst {\n  hasOwnProperty: has\n} = {};\nconst { slice } = [];\n\nexport function assign(target) {\n  iterateArray(arguments, (source, index) => {\n    if (index) {\n      iterateObject(source, (value, key) => {\n        target[key] = value;\n      });\n    }\n  });\n\n  return target;\n}\n\nexport function collectFromObject(object, callback, initialValue = {}) {\n  iterateObject(object, (value, key) => {\n    callback(initialValue, value, key, object);\n  });\n\n  return initialValue;\n}\n\nexport function except(object) {\n  const newObject = {};\n  const paths = arguments::slice(1);\n\n  iterateObject(object, (value, key) => {\n    if (paths.indexOf(key) === -1) {\n      newObject[key] = value;\n    }\n  });\n\n  return newObject;\n}\n\nexport function hasOwnProperty(object, key) {\n  return object::has(key);\n}\n\nexport function iterateObject(object, callback) {\n  for (const key in object) {\n    if (hasOwnProperty(object, key)) {\n      callback(object[key], key, object);\n    }\n  }\n}\n\nexport function mapObject(object, callback) {\n  const newObject = {};\n\n  iterateObject(object, (value, key) => {\n    newObject[key] = callback(value, key, object);\n  });\n\n  return newObject;\n}\n","import { iterateObject } from './object';\n\n/**\n * @function defineProperties\n * @param {Object} target - Target to define properties for.\n * @param {Object} properties - Object with properties needed to be assign to the target.\n * @returns {void}\n * @description Function for defining properties of an object.\n */\nexport const { defineProperties } = Object;\n\nexport function definePrototypeProperties(target, properties) {\n  iterateObject(properties, (value, name) => {\n    Object.defineProperty(target, name, {\n      value,\n      writable: true,\n      enumerable: false,\n      configurable: true\n    });\n  });\n}\n\n/**\n * @function defineFrozenProperties\n * @param {Object} target - Target to define properties for.\n * @param {Object} properties - Object with properties needed to be assign to the target.\n * @returns {void}\n * @description Function for defining frozen properties of an object.\n */\nexport function defineFrozenProperties(target, properties) {\n  iterateObject(properties, (value, name) => {\n    Object.defineProperty(target, name, {\n      value,\n      writable: false,\n      enumerable: false,\n      configurable: false\n    });\n  });\n}\n","import { definePrototypeProperties } from './defineProperty';\n\nconst { Symbol } = global;\nconst { toString } = {};\n\n/**\n * @function toStringTag\n * @param {*} object - Object to get toStringTag of.\n * @returns {String} Cut string.\n * @description Cut \"Type\" string from \"[object Type]\" string that gotten from {}.toString,call(object).\n */\nexport function toStringTag(object) {\n  return object::toString().slice(8, -1);\n}\n\nexport function setToStringTag(object, tag) {\n  if (Symbol && Symbol.toStringTag) {\n    definePrototypeProperties(object.prototype, {\n      [Symbol.toStringTag]: tag\n    });\n  }\n}\n","/**\n * @module helpers/checkTypes\n * @private\n * @mixin\n * @description Exports is<Type> methods.\n */\n\nimport { toStringTag } from './toStringTag';\n\n/**\n * @function isArray\n * @public\n * @param {*} value - Value to check if it is an array.\n * @returns {Boolean} If the argument is an array or not.\n * \n * @example\n * isArray([]);                             // true\n * isArray(0);                              // true\n * isArray(document.querySelectorAll('*')); // false\n */\nexport const { isArray } = Array;\n\n/**\n * @function isFunction\n * @public\n * @param {*} value - Value to check if it is a function.\n * @returns {Boolean} If the argument is a function or not.\n * \n * @example\n * isFunction(() => {});            // true\n * \n * const func = () => {};\n * Object.setPrototypeOf(func, {});\n * isFunction(func);                // true\n */\nexport function isFunction(value) {\n  return toStringTag(value) === 'Function' || typeof value === 'function';\n}\n\n/**\n * @function isNil\n * @public\n * @param {*} value - Value to check if it is null or undefined.\n * @returns {Boolean} If the argument is null or undefined or not.\n *\n * @example\n * isNil(null);      // true\n * isNil(undefined); // true\n * isNil(false);     // false\n */\nexport function isNil(value) {\n  /* eslint eqeqeq: 0 */\n  return value == null;\n}\n\n/**\n * @function isString\n * @public\n * @param {*} value - Value to check if it is a string.\n * @returns {Boolean} If the argument is a string or not.\n *\n * @example\n * isString('0');             // true\n * isString(new String('0')); // true\n */\nexport function isString(value) {\n  return toStringTag(value) === 'String';\n}\n","const regexpSpecialCharacters = [\n  '.',\n  '+', '*', '?',\n  '(', ')',\n  '[', ']',\n  '{', '}',\n  '<', '>',\n  '^', '$',\n  '!',\n  '=',\n  ':',\n  '-',\n  '|',\n  ',',\n  '\\\\'\n];\nconst regexpSpecialsRegexp = new RegExp(\n  regexpSpecialCharacters\n    .map((s) => `\\\\${ s }`)\n    .join('|'),\n  'g'\n);\n\nexport function escapeRegex(string) {\n  return string.replace(regexpSpecialsRegexp, '\\\\$&');\n}\n","export function noop() {}\n","export const {\n  create,\n  keys,\n  getPrototypeOf: getProto\n} = Object;\n\nexport const setProto = Object.setPrototypeOf || ((target, proto) => {\n  /* eslint no-proto: 0 */\n  target.__proto__ = proto;\n});\n","const DASHED_SYMBOL_REGEX = /-[a-z]/g;\nconst UPPERCASED_SYMBOL_REGEX = /[A-Z]/g;\n\nexport function toCamelCase(value) {\n  return value.replace(DASHED_SYMBOL_REGEX, capitalize);\n}\n\nexport function toHyphenCase(value) {\n  return value.replace(UPPERCASED_SYMBOL_REGEX, hyphenize);\n}\n\nfunction capitalize(match) {\n  return match[1].toUpperCase();\n}\n\nfunction hyphenize(match) {\n  return `-${ match[0].toLowerCase() }`;\n}\n","export function addAttr(attrs, attr) {\n  attrs[attr.name] = attr.value;\n}\n","import { toCamelCase } from '../../utils';\n\nconst CSS_PROP_VALUE_SEPARATOR_REGEX = /: /;\n\nexport function addCSSProp(css, value) {\n  if (value) {\n    const property = value.split(CSS_PROP_VALUE_SEPARATOR_REGEX);\n\n    css[toCamelCase(property[0])] = property[1];\n  }\n}\n","export function addDataAttr(data, value, key) {\n  data[key] = value;\n}\n","export function addNext(add, elem) {\n  add(elem.nextSibling);\n}\n","export function addParent(add, elem) {\n  add(elem.parentNode);\n}\n","export function addPrev(add, elem) {\n  add(elem.previousSibling);\n}\n","import { create } from './utils/objectStatics';\n\nexport const HIDE_CLASS = '__dwayne-hidden__';\nexport const SVG_NS = 'http://www.w3.org/2000/svg';\nexport const D_REST_REGEX = /^d-rest(?:#|$)/;\n\nexport const rootBlocks = create(null);\nexport const rootMixins = create(null);\nexport const Scope = {\n  evalMode: false,\n  gettingVars: []\n};\nexport const {\n  document = {}\n} = global;\n","import { HIDE_CLASS } from '../../constants';\n\nexport function createHideStyleNode(head) {\n  const style = head.find(`style#${ HIDE_CLASS }`);\n\n  if (style.length) {\n    return;\n  }\n\n  head\n    .create('style')\n    .prop('id', HIDE_CLASS)\n    .text(`.${ HIDE_CLASS }{display:none !important;}`);\n}\n","import { Elem } from '../../Elem';\n\nconst X_LINK_ATTR_FIND_REGEX = /^xlink:\\w/;\nconst X_LINK_ATTR_REPLACE_REGEX = /^xlink:/;\nconst XML_NS = 'http://www.w3.org/2000/xmlns/';\nconst X_LINK_NS = 'http://www.w3.org/1999/xlink';\nconst Null = {\n  ns: null\n};\n\nexport function getAttrNS(attr, elem) {\n  const isXmlNs = attr === 'xmlns';\n\n  if (isXmlNs || attr === 'xmlns:xlink') {\n    if (elem.nodeName !== 'SVG') {\n      return Null;\n    }\n\n    return {\n      ns: XML_NS,\n      name: isXmlNs\n        ? 'xmlns'\n        : 'xlink'\n    };\n  }\n\n  if (X_LINK_ATTR_FIND_REGEX.test(attr)) {\n    if (!new Elem(elem).closest('svg').length) {\n      return Null;\n    }\n\n    return {\n      ns: X_LINK_NS,\n      name: attr.replace(X_LINK_ATTR_REPLACE_REGEX, '')\n    };\n  }\n\n  return Null;\n}\n","import { createHideStyleNode } from './createHideStyleNode';\nimport { HIDE_CLASS } from '../../constants';\nimport { Elem } from '../../Elem';\n\nexport function hide(elem) {\n  createHideStyleNode(new Elem(elem.ownerDocument.head));\n  new Elem(elem).addClass(HIDE_CLASS);\n}\n","import { Elem } from '../../Elem';\n\nexport function isElem(value) {\n  return value instanceof Elem;\n}\n","import { toStringTag, isArray } from '../../utils';\nimport { isElem } from './isElem';\n\nconst HTML_COLLECTION_REGEX = /^(HTMLCollection|NodeList)$/;\n\nexport function isElementsCollection(value) {\n  return (\n    HTML_COLLECTION_REGEX.test(toStringTag(value))\n    || isElem(value)\n    || isArray(value)\n  );\n}\n","import { toStringTag } from '../../utils';\n\nexport function isHTMLDocument(value) {\n  return toStringTag(value) === 'HTMLDocument';\n}\n","import { toStringTag } from '../../utils';\n\nconst ELEMENT_REGEX = /Element$/;\n\nexport function isValidNode(value) {\n  const tag = toStringTag(value);\n\n  return (\n    ELEMENT_REGEX.test(tag)\n    || tag === 'HTMLDocument'\n    || tag === 'Text'\n    || tag === 'DocumentFragment'\n    || tag === 'Comment'\n  );\n}\n","export function remove(elem) {\n  const parent = elem.parentNode;\n\n  if (parent) {\n    parent.removeChild(elem);\n  }\n}\n","import { HIDE_CLASS } from '../../constants';\nimport { Elem } from '../../Elem';\n\nexport function show(elem) {\n  new Elem(elem).removeClass(HIDE_CLASS);\n}\n","import { isElem } from './isElem';\nimport { Elem } from '../../Elem';\n\nexport function toElem(elem) {\n  return isElem(elem)\n    ? elem\n    : new Elem(elem);\n}\n","import { Elem } from './Elem';\nimport { document } from './constants';\n\n/**\n * @function find\n * @public\n * @param {String} selector - Selector to find.\n * @param {Element|Node} [base = document] - Base to find in.\n * @returns {Elem} New instance of Elem.\n * @description Synonym for\n * [Document#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Document/querySelectorAll}.\n */\nexport function find(selector, base = document) {\n  return new Elem(base.querySelectorAll(String(selector)));\n}\n","import {\n  isNil, isString, assign,\n  definePrototypeProperties, defineProperties,\n  collectFromArray, collectFromObject,\n  iterateArray, iterateObject,\n  toHyphenCase, toStringTag,\n  setToStringTag, setProto\n} from './utils';\nimport {\n  isHTMLDocument, isValidNode,\n  addAttr, addCSSProp, addDataAttr,\n  addNext, addParent, addPrev,\n  toElem, isElementsCollection,\n  getAttrNS, hide, show, remove\n} from './helpers/Elem';\nimport { SVG_NS } from './constants';\nimport { find } from './find';\n\n/**\n * @typedef {String} ElemEventString\n * @public\n * @description A string containing events separated by a comma with zero or more spaces or just spaces.\n */\n\n/**\n * @callback ElemListener\n * @public\n * @param {Event} e - Fired event.\n * @param {Element} elem - Element on which the listener was called.\n * @param {Number} index - Index of the element on which the listener was called.\n */\n\n/**\n * @callback ElemRemoveListeners\n * @public\n * @param {...ElemEventString} events - If at least one argument present only removes event listeners specified\n * by the events in the arguments.\n */\n\n/**\n * @callback IterationCallback\n * @public\n * @param {Element|Node} node - Iteration element.\n * @param {Number} index - Iteration index.\n * @param {Elem} elem - Initial set.\n */\n\n/**\n * @callback ElemMethod\n * @public\n * @this Elem\n */\n\nconst { Symbol } = global;\nconst EVENT_SEPARATOR_REGEX = /(?:,| ) */;\nconst CSS_STYLES_SEPARATOR_REGEX = /; ?/;\nconst CSS_IMPORTANT_REGEX = / ?!important$/;\nconst EVENT_REGEX = /Event$/;\nconst XHTML_NS = 'http://www.w3.org/1999/xhtml';\nconst emptyCollection = [];\n\n/**\n * @class Elem\n * @extends Array.<Element|Node>\n * @public\n * @param {Element|Element[]} [elem = []] - An element or an array of elements to wrap.\n * @returns {Elem} Instance of Elem.\n * @description Wrap of an elements set.\n *\n * @example\n * new Elem(document.body);\n * new Elem(document.querySelectorAll('.cls'));\n * new Elem(document.getElementsByClassName('cls'));\n */\nclass Elem extends Array {\n  /**\n   * @method Elem.addMethods\n   * @public\n   * @param {String|Object.<String, ElemMethod>} methodName - Name of the method or object of\n   * method names and methods.\n   * @param {ElemMethod} [method] - If the first argument is a string this should be the method itself.\n   * @returns {typeof Elem}\n   */\n  static addMethods(methodName, method) {\n    if (arguments.length >= 2) {\n      methodName = { [methodName]: method };\n    }\n\n    definePrototypeProperties(this.prototype, methodName);\n\n    return this;\n  }\n\n  constructor(elem = emptyCollection) {\n    super();\n\n    if (!isElementsCollection(elem)) {\n      elem = [elem];\n    }\n\n    setProto(this, Elem.prototype);\n\n    iterateArray(elem, (elem) => {\n      if (!isElementsCollection(elem)) {\n        elem = [elem];\n      }\n\n      iterateArray(elem, (elem) => {\n        if (!this.includes(elem) && isValidNode(elem)) {\n          this.push(elem);\n        }\n      });\n    });\n  }\n\n  /**\n   * @method Elem#add\n   * @public\n   * @param {...(Elem|Element|Element[])} elements - Each argument is a Elem, or Element, or array of Elements.\n   * @returns {Elem} Returns this.\n   * @description Method for adding new elements to the set.\n   *\n   * @example\n   * elem1.find('.cls1')\n   *   .add(elem2.find('.cls2'))\n   *   .hide();\n   */\n  add() {\n    const elems = this.slice();\n\n    iterateArray(arguments, (elem) => {\n      if (!isElementsCollection(elem)) {\n        elem = [elem];\n      }\n\n      iterateArray(elem, (elem) => {\n        if (!elems.includes(elem) && isValidNode(elem)) {\n          elems.push(elem);\n        }\n      });\n    });\n\n    return elems;\n  }\n\n  /**\n   * @method Elem#addClass\n   * @public\n   * @param {...String} classes - Classes to add.\n   * @returns {Elem} Returns this.\n   * @description Method for adding classes to the all the elements in the set.\n   *\n   * @example\n   * elem.addClass('red', 'round');\n   */\n  addClass() {\n    return this.forEach((elem) => {\n      const list = elem.classList;\n\n      iterateArray(arguments, (cls) => list.add(cls));\n    });\n  }\n\n  /**\n   * @method Elem#attr\n   * @public\n   * @param {String|Object.<String, String>} [attr] - Name of the attribute to get or\n   * an object of the format { [attrName]: value, ... } to set attributes.\n   * @param {String} [value] - If the first argument is a string\n   * it should be a value to set for that attribute.\n   * @returns {Object|String|Elem} If no arguments passed, D-Wrap of attributes of the first element in the set\n   * returned, if 1 string argument is passed the value of the attribute of the first element in the set\n   * returned otherwise returns this.\n   * @description Method for getting/setting attributes.\n   *\n   * @example\n   * elem.attr('attr1', 'value1'); // attribute attr1 set to 'value1' and this returned\n   * elem.attr('attr1');           // 'value1'\n   * elem.attr({\n   *   attr1: 'value3',            // attribute attr1 set to 'value3'\n   *   attr2: 'value2'             // attribute attr2 set to 'value2'\n   * });                           // this returned\n   * elem.attr();                  // { attr1: 'value3', attr2: 'value2' }\n   */\n  attr(attr, value) {\n    const elem = this[0];\n\n    if (!arguments.length) {\n      if (!elem) {\n        return {};\n      }\n\n      return collectFromArray(elem.attributes, addAttr);\n    }\n\n    if (arguments.length <= 1 && isString(attr)) {\n      if (!elem) {\n        return null;\n      }\n\n      const {\n        ns,\n        name\n      } = getAttrNS(attr, elem);\n\n      return ns\n        ? elem.getAttributeNS(ns, name)\n        : elem.getAttribute(attr);\n    }\n\n    if (arguments.length >= 2) {\n      attr = { [attr]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(attr, (value, key) => {\n        if (isNil(value) || value === false) {\n          return new Elem(elem).removeAttr(key);\n        }\n\n        value = value === true ? '' : value;\n\n        const { ns } = getAttrNS(key, elem);\n\n        if (ns) {\n          elem.setAttributeNS(ns, key, value);\n        } else {\n          elem.setAttribute(key, value);\n        }\n      });\n    });\n  }\n\n  /**\n   * @method Elem#children\n   * @public\n   * @returns {Elem} D-Wrap of the children of the first element in the set.\n   * @description Method for getting element's children.\n   *\n   * @example\n   * const children = elem.children();\n   */\n  children() {\n    return new Elem(this.length ? this[0].childNodes : []);\n  }\n\n  /**\n   * @method Elem#closest\n   * @public\n   * @param {String} selector - See the link.\n   * @returns {Elem} Set of the closest elements.\n   * @description Synonym for\n   * [Element#closest]{@link https://developer.mozilla.org/en/docs/Web/API/Element/closest}.\n   */\n  closest(selector) {\n    return this.collect((add, elem) => {\n      while (elem) {\n        if (new Elem(elem).is(selector)) {\n          return add(elem);\n        }\n\n        elem = elem.parentNode;\n      }\n    });\n  }\n\n  collect(callback) {\n    const elements = [];\n    const cb = ::elements.push;\n\n    this.forEach((elem, index) => {\n      callback(cb, elem, index, this);\n    });\n\n    return new Elem(elements);\n  }\n\n  /**\n   * @method Elem#contains\n   * @public\n   * @param {Elem|Element} element - Element to find out if it's within the first element in the set.\n   * @returns {Boolean} Returns if the argument within this element.\n   * @description Method is extension for\n   * [Node#contains]{@link https://developer.mozilla.org/en/docs/Web/API/Node/contains}.\n   *\n   * @example\n   * elem.contains(elem2);   // true|false\n   */\n  contains(element) {\n    const parent = this[0];\n    const child = toElem(element)[0];\n\n    return !parent || !child\n      ? false\n      : parent.contains(child);\n  }\n\n  /**\n   * @method Elem#create\n   * @public\n   * @param {String} type - Type of created element. If type is \"#text\" a text node is created.\n   * If type is \"#comment\" a comment node is created.\n   * @returns {Elem} New instance of Elem - wrap of the created elements.\n   * @description Method for creating elements inside this element.\n   * If this element is not an Element the element is just created.\n   *\n   * @example\n   * elem.create('div');\n   */\n  create(type) {\n    return this.collect((add, elem) => {\n      let el = null;\n      const isText = type === '#text';\n      const document = isHTMLDocument(elem)\n        ? elem\n        : elem.ownerDocument;\n\n      if (isText || type === '#comment') {\n        el = isText\n          ? document.createTextNode('')\n          : document.createComment('');\n      } else {\n        const ns = type === 'svg'\n          ? SVG_NS\n          : elem.namespaceURI || document.documentElement.namespaceURI || XHTML_NS;\n\n        el = document.createElementNS(ns, type);\n      }\n\n      add(new Elem(el).into(elem));\n    });\n  }\n\n  /**\n   * @method Elem#createComment\n   * @public\n   * @param {String} text - Text of the comment.\n   * @returns {Elem} New instance of Elem - wrap of the created comments.\n   * @description Method for creating comments inside this element.\n   * If this element is not an Element the comment is just created.\n   *\n   * @example\n   * elem.createComment('comment');\n   */\n  createComment(text) {\n    return this\n      .create('#comment')\n      .text(text);\n  }\n\n  /**\n   * @method Elem#createText\n   * @public\n   * @param {String} text - Text.\n   * @returns {Elem} New instance of Elem - wrap of the created text nodes.\n   * @description Method for creating text nodes inside this element.\n   * If this element is not an Element the text node is just created.\n   *\n   * @example\n   * elem.createText('text');\n   */\n  createText(text) {\n    return this\n      .create('#text')\n      .text(text);\n  }\n\n  /**\n   * @method Elem#css\n   * @public\n   * @param {String|Object.<String, String>} [property] - Name of the property to get or\n   * an object of the format { [property]: value, ... } to set styles.\n   * @param {String} [value] - If the first argument is a string it should be a value to set for that property.\n   * @returns {Object|String|Elem} If no arguments passed, D-Wrap of css styles of the element returned,\n   * if 1 string argument is passed the value of the property returned otherwise returns this.\n   * @description Method for getting/setting styles. Supports !important.\n   *\n   * @example\n   * elem.css('display', 'none'); // display set to 'none' and this returned\n   * elem.css('display');         // 'none'\n   * elem.css({\n   *   display: 'inline',         // display set to 'inline'\n   *   cursor: 'pointer'          // cursor set to 'pointer'\n   * });                          // this returned\n   * elem.css();                  // { display: 'none', cursor: 'pointer' }\n   */\n  css(property, value) {\n    const { style } = this[0] || {};\n\n    if (!arguments.length) {\n      if (!style) {\n        return {};\n      }\n\n      return collectFromArray(style.cssText.split(CSS_STYLES_SEPARATOR_REGEX), addCSSProp);\n    }\n\n    if (arguments.length <= 1 && isString(property)) {\n      if (!style) {\n        return '';\n      }\n\n      property = toHyphenCase(property);\n\n      return style.getPropertyValue(property) + (style.getPropertyPriority(property) ? ' !important' : '');\n    }\n\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(property, (value, property) => {\n        property = toHyphenCase(property);\n\n        if (isNil(value) || value === false) {\n          return new Elem(elem).removeCSS(property);\n        }\n\n        elem.style.removeProperty(property);\n        elem.style.setProperty(\n          property,\n          value.replace(CSS_IMPORTANT_REGEX, ''),\n          CSS_IMPORTANT_REGEX.test(value) ? 'important' : ''\n        );\n      });\n    });\n  }\n\n  /**\n   * @method Elem#data\n   * @public\n   * @param {String|Object.<String, String>} [key] - Name of the data attribute (without data- prefix)\n   * to get or an object of the format { [attrName]: value, ... } to set attributes.\n   * @param {String} [value] - If the first argument is a string it should be a value to set for that attribute.\n   * @returns {Object|String|Elem} If no arguments passed, D-Wrap of dataset of the element returned,\n   * if 1 string argument is passed the value of the data attribute returned otherwise returns this.\n   * @description Method for getting/setting data attributes. See\n   * [HTMLElement#dataset]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/dataset}.\n   *\n   * @example\n   * elem.data('someKey1', 'value'); // attribute data-some-key1 set to 'value1' and this returned\n   * elem.data('someKey1');          // 'value1'\n   * elem.data({\n   *   someKey1: 'value3',           // attribute data-some-key1 set to 'value3'\n   *   someKey2: 'value2'            // attribute data-some-key2 set to 'value2'\n   * });                             // this returned\n   * elem.data();                    // { someKey1: 'value3', someKey2: 'value2' }\n   */\n  data(key, value) {\n    const { dataset } = this[0] || {};\n\n    if (!arguments.length) {\n      if (!dataset) {\n        return {};\n      }\n\n      return collectFromObject(dataset, addDataAttr);\n    }\n\n    if (arguments.length === 1 && isString(key)) {\n      if (!dataset) {\n        return;\n      }\n\n      return dataset[key];\n    }\n\n    if (arguments.length >= 2) {\n      key = { [key]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(key, (value, key) => {\n        elem.dataset[key] = value;\n      });\n    });\n  }\n\n  /**\n   * @method Elem#dispatch\n   * @public\n   * @param {String|Event} event - Event or a string (new Event(event) is created).\n   * @param {Object} [details = {}] - Object that is assigned to the event.\n   * @returns {Elem} Returns this.\n   * @see https://developer.mozilla.org/en/docs/Web/API/Event/Event\n   * @description Synonym for\n   * [EventTarget#dispatchEvent]{@link https://developer.mozilla.org/en/docs/Web/API/EventTarget/dispatchEvent}.\n   *\n   * @example\n   * elem.dispatch('click');\n   * elem.dispatch('click', { bubbles: false, cancellable: false, data: 1 });\n   * elem.dispatch(new CustomEvent('custom-event'));\n   */\n  dispatch(event, details = {}) {\n    const {\n      bubbles = true,\n      cancelable = true,\n      ...realDetails\n    } = details;\n    let finalEvent = event;\n\n    if (!EVENT_REGEX.test(toStringTag(finalEvent))) {\n      try {\n        finalEvent = new Event(finalEvent, { bubbles, cancelable });\n        assign(finalEvent, realDetails);\n      } catch (err) {}\n    }\n\n    return this.forEach((elem) => {\n      if (!EVENT_REGEX.test(toStringTag(finalEvent))) {\n        const document = isHTMLDocument(elem)\n          ? elem\n          : elem.ownerDocument;\n\n        finalEvent = document.createEvent('Event');\n        finalEvent.initEvent(event, bubbles, cancelable);\n\n        assign(finalEvent, realDetails);\n      }\n\n      elem.dispatchEvent(finalEvent);\n    });\n  }\n\n  /**\n   * @method Elem#elem\n   * @public\n   * @param {Number} [index = 0] - Index of the element of the set to get. Negative index means elem.length + index.\n   * @returns {Elem} New instance of Elem.\n   *\n   * @example\n   * elem.elem(1); // a wrap of the element in the set that has index 1\n   * elem.elem();  // a wrap of the element in the set that has index 0\n   */\n  elem(index = 0) {\n    if (index < 0) {\n      index = this.length + index;\n    }\n\n    return new Elem(this[index]);\n  }\n\n  /**\n   * @method Elem#filter\n   * @public\n   * @param {IterationCallback} [filterFn = Boolean] - Filter function\n   * @returns {Elem} New instance of Elem.\n   * @description Method for filtering elements.\n   *\n   * @example\n   * elem.filter((elem) => new Elem(elem).closest('.parent'));\n   */\n  filter(filterFn = Boolean) {\n    return this.collect((add, elem, index) => {\n      if (filterFn(elem, index, this)) {\n        add(elem);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#find\n   * @public\n   * @param {String} selector - Selector to find.\n   * @returns {Elem} New instance of Elem.\n   * @description Synonym for\n   * [Element#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Element/querySelectorAll}.\n   */\n  find(selector) {\n    return this.collect((add, elem) => {\n      add(find(selector, elem));\n    });\n  }\n\n  /**\n   * @method Elem#forEach\n   * @public\n   * @param {IterationCallback} callback - Called on each iteration.\n   * @returns {Elem} Returns this.\n   * @description Method for iterating over the set.\n   *\n   * @example\n   * find('.cls').forEach((element, index, set) => {\n   *   // do something\n   * });\n   */\n  forEach(callback) {\n    iterateArray(this, (value, key) => {\n      callback(value, key, this);\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Elem#hasAttr\n   * @public\n   * @param {String} attr - Name of the attribute.\n   * @returns {Boolean} If the first element in the set has the attribute.\n   * @description Method that returns if the first element in the set has the attribute or not.\n   *\n   * @example\n   * elem.attr('attr', 'value').hasAttr('attr'); // true\n   * elem.removeAttr('attr').hasAttr('attr');    // false\n   */\n  hasAttr(attr) {\n    const elem = this[0];\n\n    if (!elem) {\n      return false;\n    }\n\n    const { ns } = getAttrNS(attr, elem);\n\n    return ns\n      ? elem.hasAttributeNS(ns, attr)\n      : elem.hasAttribute(attr);\n  }\n\n  /**\n   * @method Elem#hasClass\n   * @public\n   * @param {String} cls - Name of the class.\n   * @returns {Boolean} If the first element in the set has the class.\n   * @description Method that returns if the first element in the set has the class or not.\n   *\n   * @example\n   * elem.addClass('cls').hasClass('cls');    // true\n   * elem.removeClass('cls').hasClass('cls'); // false\n   */\n  hasClass(cls) {\n    const elem = this[0];\n\n    return elem\n      ? elem.classList.contains(cls)\n      : false;\n  }\n\n  /**\n   * @method Elem#hide\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Hides all elements in the set.\n   *\n   * @example\n   * elem.hide();\n   */\n  hide() {\n    return this.forEach(hide);\n  }\n\n  /**\n   * @method Elem#html\n   * @public\n   * @param {String|*} [html] - HTML to write instead of current HTML.\n   * @returns {Elem|String} If no arguments passed HTML of the first element in the set returned.\n   * Otherwise all elements HTML in the set are set to the html argument.\n   * @description Gets or sets HTML.\n   *\n   * @example\n   * elem.html('<div>1</div>');\n   * elem.html(); // '<div>1</div>'\n   */\n  html(html) {\n    if (!arguments.length) {\n      const elem = this[0];\n\n      return elem\n        ? elem.innerHTML\n        : '';\n    }\n\n    return this.forEach((elem) => {\n      elem.innerHTML = html;\n    });\n  }\n\n  includes(elem) {\n    return this.indexOf(elem) !== -1;\n  }\n\n  /**\n   * @method Elem#insertAfter\n   * @public\n   * @param {Elem|Element} element - Element to insert this element after.\n   * @returns {Elem} Returns this.\n   * @description Puts the elements from the set after the element specified by the argument.\n   * The elements remain in the same order.\n   *\n   * @example\n   * elem.insertAfter(elem2);\n   * elem.insertAfter(document.getElementById('id'));\n   * elem.insertAfter('#id div.c1');\n   */\n  insertAfter(element) {\n    element = toElem(element).elem(0);\n\n    let parent = element.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    element = element.next()[0];\n    parent = parent[0];\n\n    return this.forEach((elem) => {\n      if (elem === element) {\n        element = element.nextSibling;\n\n        return;\n      }\n\n      if (element) {\n        parent.insertBefore(elem, element);\n      } else {\n        parent.appendChild(elem);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#insertBefore\n   * @public\n   * @param {Elem|Element} element - Element to insert this element before.\n   * @returns {Elem} Returns this.\n   * @description Puts the elements from the set before the element specified by the argument.\n   * The elements remain in the same order.\n   *\n   * @example\n   * elem.insertBefore(elem2);\n   * elem.insertBefore(document.getElementById('id'));\n   * elem.insertBefore('#id div.c1');\n   */\n  insertBefore(element) {\n    element = toElem(element).elem(0);\n\n    let parent = element.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    element = element[0];\n    parent = parent[0];\n\n    return this.forEach((elem) => {\n      parent.insertBefore(elem, element);\n    });\n  }\n\n  /**\n   * @method Elem#into\n   * @public\n   * @param {Elem|Element} element - Element to put this elements into.\n   * @param {Boolean} end - If the elements should be inserted to the end. If false they are inserted to the start.\n   * @returns {Elem} Returns this.\n   * @description Method is similar to\n   * [Node#appendChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/appendChild}.\n   *\n   * @example\n   * elem.into(elem2);\n   * elem.into(document.getElementById('id'));\n   * elem.into('#id div.c1');\n   */\n  into(element, end = true) {\n    element = toElem(element)[0];\n\n    if (\n      !element\n      || isHTMLDocument(element)\n    ) {\n      return this;\n    }\n\n    if (!end && element.firstChild) {\n      for (let i = this.length - 1; i >= 0; i--) {\n        element.insertBefore(this[i], element.firstChild);\n      }\n\n      return this;\n    }\n\n    return this.forEach((elem) => {\n      element.appendChild(elem);\n    });\n  }\n\n  /**\n   * @method Elem#is\n   * @public\n   * @param {String} selector\n   * @returns {Boolean} If the first element in the set matches the selector.\n   * @description Synonym for\n   * [Element#matches]{@link https://developer.mozilla.org/en/docs/Web/API/Element/matches}.\n   *\n   * @example\n   * elem.addClass('cls');\n   * elem.is('.cls');         // true\n   *\n   * elem.removeClass('cls');\n   * elem.is('.cls');         // false\n   */\n  is(selector) {\n    if (!this.length) {\n      return false;\n    }\n\n    const elem = this[0];\n    const matches = (\n      elem.matches\n      || elem.matchesSelector\n      || elem.webkitMatchesSelector\n      || elem.mozMatchesSelector\n      || elem.msMatchesSelector\n      || elem.oMatchesSelector\n    );\n\n    return elem::matches(selector);\n  }\n\n  /**\n   * @method Elem#name\n   * @public\n   * @returns {String|void} nodeName (lowercased) of the first element in the set.\n   * @description Method for getting name of the first element in the set.\n   *\n   * @example\n   * elem.create('div').name() // 'div'\n   */\n  name() {\n    const elem = this[0];\n\n    return elem\n      ? elem.nodeName.toLowerCase()\n      : undefined;\n  }\n\n  /**\n   * @method Elem#next\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Method for finding next element to each element in the set.\n   *\n   * @example\n   * elem.next(); // finds next element to each element in the set\n   */\n  next() {\n    return this.collect(addNext);\n  }\n\n  /**\n   * @method Elem#on\n   * @public\n   * @param {ElemEventString|Object.<ElemEventString|ElemListener>} event - Either a {@link ElemEventString} string\n   * or an object with event keys (a key is also ElemEventString) and listeners values.\n   * @param {ElemListener} [listener] - If the first argument is a string it must be a listener function for\n   * specified event(s).\n   * @returns {ElemRemoveListeners} Function that takes optional event argument.\n   * @description Adds event listeners for all the elements in the set.\n   *\n   * @example\n   * elem.on(\n   *   'change, input',\n   *   'input, select, textarea, datalist, keygen, output',\n   *   (e, elem, index) => console.log(elem.value)\n   * );\n   * elem.on(\n   *   'change, input',\n   *   (e, elem, index) => console.log(elem.value)\n   * );\n   * elem.on(\n   *   {\n   *     'change, input': (e, elem, index) => console.log(elem.value),\n   *     'blur': () => console.log('blur')\n   *   },\n   *   'input, select, textarea, datalist, keygen, output'\n   * );\n   *\n   * const removeListeners = elem.on({\n   *   'change, input': (e, elem, index) => console.log(elem.value),\n   *   'blur': () => console.log('blur')\n   * });\n   *\n   * removeListeners('click');\n   * removeListeners('blur, change');\n   * removeListeners('blur, change', 'input');\n   * removeListeners();\n   */\n  on(event, listener) {\n    if (isString(event)) {\n      event = { [event]: listener };\n    }\n\n    const newEvents = {};\n    const allListeners = {};\n\n    iterateObject(event, (listener, event) => {\n      iterateArray(event.split(EVENT_SEPARATOR_REGEX), (event) => {\n        (newEvents[event] = newEvents[event] || []).push(listener);\n      });\n    });\n\n    this.forEach((elem) => {\n      iterateObject(newEvents, (listeners, event) => {\n        iterateArray(listeners, (listener) => {\n          elem.addEventListener(event, listener, false);\n          (allListeners[event] = allListeners[event] || []).push(() => {\n            elem.removeEventListener(event, listener);\n          });\n        });\n      });\n    });\n\n    return function removeEventListeners(event) {\n      if (arguments.length) {\n        iterateArray(arguments, (event) => {\n          iterateArray(event.split(EVENT_SEPARATOR_REGEX), (event) => {\n            const removeListeners = allListeners[event];\n\n            if (removeListeners) {\n              iterateArray(removeListeners, (removeListener) => removeListener());\n\n              delete allListeners[event];\n            }\n          });\n        });\n      } else {\n        iterateObject(allListeners, (removeListeners, event) => {\n          iterateArray(removeListeners, (removeListener) => removeListener());\n\n          delete allListeners[event];\n        });\n      }\n    };\n  }\n\n  /**\n   * @method Elem#parent\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Method returns wrap of the set of the parent elements of each element in the set.\n   */\n  parent() {\n    return this.collect(addParent);\n  }\n\n  /**\n   * @method Elem#prev\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Method for finding previous element to each element in the set.\n   *\n   * @example\n   * elem.prev(); // finds previous element to each element in the set\n   */\n  prev() {\n    return this.collect(addPrev);\n  }\n\n  /**\n   * @method Elem#prop\n   * @public\n   * @param {String|Object.<String, *>} property - Either a string of a property or an assigned object.\n   * @param {*} [value] - If a property parameter is a string\n   * this has to be an assigned value if it's present.\n   * @returns {Elem|*} Returns this if it's setter or a value if getter.\n   * @description Method that is either a property getter for the first element in the set\n   * or a setter for every element in the set.\n   *\n   * @example\n   * elem.prop('draggable', false);\n   * elem.prop('draggable'); // false\n   */\n  prop(property, value) {\n    if (arguments.length <= 1 && isString(property)) {\n      return this[0] ? this[0][property] : undefined;\n    }\n\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(property, (value, prop) => {\n        elem[prop] = value;\n      });\n    });\n  }\n\n  /**\n   * @method Elem#remove\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Removes all the elements from the set from the document.\n   * Note: it doesn't remove them from the set so watch out for the memory leaks.\n   *\n   * @example\n   * elem.remove();\n   */\n  remove() {\n    return this.forEach(remove);\n  }\n\n  /**\n   * @method Elem#removeAttr\n   * @public\n   * @param {...String} attributes - Attributes to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the attributes from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeAttr('foo', 'bar', 'baz');\n   */\n  removeAttr() {\n    return this.forEach((elem) => {\n      iterateArray(arguments, (attr) => {\n        const { ns } = getAttrNS(attr, elem);\n\n        if (ns) {\n          elem.removeAttributeNS(ns, attr);\n        } else {\n          elem.removeAttribute(attr);\n        }\n      });\n    });\n  }\n\n  /**\n   * @method Elem#removeClass\n   * @public\n   * @param {...String} classes - Classes to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the classes from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeClass('foo', 'bar', 'baz');\n   */\n  removeClass() {\n    return this.forEach((elem) => {\n      const list = elem.classList;\n\n      iterateArray(arguments, (cls) => list.remove(cls));\n    });\n  }\n\n  /**\n   * @method Elem#removeCSS\n   * @public\n   * @param {...String} props - CSS properties to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the CSS properties from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeCSS('display', 'position', 'margin');\n   */\n  removeCSS() {\n    return this.forEach((elem) => {\n      iterateArray(arguments, (css) => {\n        elem.style.removeProperty(toHyphenCase(css));\n      });\n    });\n  }\n\n  /**\n   * @method Elem#replace\n   * @public\n   * @param {Elem|Element} element - Element to replace the first element in the set\n   * with a set of elements specified by the argument (Element or Elem).\n   * @returns {Elem} Returns this.\n   * @description Method is similar to\n   * [Node#replaceChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/replaceChild}.\n   *\n   * @example\n   * elem.replace(elem2);\n   * elem.replace(document.getElementById('id'));\n   * elem.replace('#id div.c1');\n   */\n  replace(element) {\n    element = toElem(element);\n\n    const first = this.elem(0);\n    const parent = first.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    let elem = parent;\n    let method = 'into';\n    const next = first.next()[0];\n    const prev = first.prev()[0];\n\n    if (next) {\n      elem = next;\n      method = 'insertBefore';\n    } else if (prev) {\n      elem = prev;\n      method = 'insertAfter';\n    }\n\n    first.remove();\n\n    element[method](elem);\n  }\n\n  /**\n   * @method Elem#show\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Shows all elements in the set.\n   * If an element was hidden using {@link Elem#hide} previous display is set.\n   *\n   * @example\n   * elem.show();\n   */\n  show() {\n    return this.forEach(show);\n  }\n\n  slice() {\n    return new Elem(super.slice.apply(this, arguments));\n  }\n\n  /**\n   * @method Elem#text\n   * @public\n   * @param {String|*} [text] - Text to write instead of current text.\n   * @returns {Elem|String} If no arguments passed text of the first element in the set returned.\n   * Otherwise all elements texts in the set are set to the text argument.\n   * @description Gets or sets text.\n   *\n   * @example\n   * elem.text('123');\n   * elem.text(); // '123'\n   */\n  text(text) {\n    if (!arguments.length) {\n      return this.prop('textContent');\n    }\n\n    return this.forEach((elem) => {\n      elem.textContent = text;\n    });\n  }\n\n  /**\n   * @method Elem#toggleAttr\n   * @public\n   * @param {String} attr - Attribute to toggle.\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the attribute\n   * with the '' value and if falsey method removes the attribute. If not present method adds\n   * the attribute if it doesn't exist and removes if it does.\n   * @returns {Elem} Returns this.\n   * @description Method for toggling attributes.\n   *\n   * @example\n   * elem.toggleAttr('attr');\n   * elem.toggleAttr('attr', someCondition);\n   */\n  toggleAttr(attr, condition) {\n    return this.forEach((elem) => {\n      elem = new Elem(elem);\n\n      if (arguments.length < 2 ? !elem.hasAttr(attr) : condition) {\n        elem.attr(attr, '');\n      } else {\n        elem.removeAttr(attr);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#toggleClass\n   * @public\n   * @param {String} cls - Class to toggle.\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the class\n   * and if falsey method removes the class. If not present method adds\n   * the class if it doesn't exist and removes if it does.\n   * @returns {Elem} Returns this.\n   * @description Method for toggling classes.\n   *\n   * @example\n   * elem.toggleClass('cls');\n   * elem.toggleClass('cls', someCondition);\n   */\n  toggleClass(cls, condition) {\n    return this.forEach((elem) => {\n      const { classList } = elem;\n\n      classList.toggle(cls, arguments.length < 2 ? !classList.contains(cls) : condition);\n    });\n  }\n}\n\nsetToStringTag(Elem, 'Elem');\n\nif (Symbol && Symbol.species) {\n  defineProperties(Elem, {\n    [Symbol.species]: {\n      get() {\n        return Array;\n      }\n    }\n  });\n}\n\nexport { Elem };\n","import { iterateArray, keys } from '../../utils';\n\nexport function calculateArgs(args, argsObject) {\n  iterateArray(keys(argsObject), (arg) => {\n    if (!(arg in args)) {\n      argsObject[arg] = undefined;\n    }\n  });\n\n  /* eslint guard-for-in: 0 */\n  for (const arg in args) {\n    argsObject[arg] = args[arg];\n  }\n}\n","export function cleanProperty(value, arg, object) {\n  delete object[arg];\n}\n","import { escapeRegex } from '../../utils';\n\nexport function constructMixinRegex(name) {\n  return new RegExp(`^${ escapeRegex(name) }(?:\\\\(([^\\\\)]*)\\\\))?(?:#([\\\\s\\\\S]*))?$`);\n}\n","const COMMA_REGEX = /,/;\n\nexport function mixinMatch(mixins, attr) {\n  let match;\n\n  /* eslint guard-for-in: 0 */\n  for (const name in mixins) {\n    const Mixin = mixins[name];\n    const localMatch = attr.match(Mixin._match);\n\n    if (localMatch) {\n      const argsMatch = localMatch[1];\n      let args;\n\n      if (argsMatch === '') {\n        args = [];\n      } else if (argsMatch) {\n        args = argsMatch.split(COMMA_REGEX);\n      }\n\n      match = {\n        args,\n        comment: localMatch[2],\n        Mixin,\n        name\n      };\n\n      break;\n    }\n  }\n\n  return match;\n}\n","import { collectFromObject, assign } from '../../utils';\nimport { D_REST_REGEX } from '../../constants';\nimport { mixinMatch } from './mixinMatch';\n\nexport function transformRestAttrs(attrs, mixins, mixinDefaultOpts) {\n  return collectFromObject(attrs, (eventualAttrs, value, attr) => {\n    if (D_REST_REGEX.test(attr)) {\n      return assign(eventualAttrs, transformRestAttrs(value, mixins, mixinDefaultOpts));\n    }\n\n    const match = mixinMatch(mixins, attr);\n\n    if (match) {\n      eventualAttrs[attr] = {\n        type: 'mixin',\n        dynamic: true,\n        opts: {\n          value,\n          ...match,\n          ...mixinDefaultOpts\n        },\n        value\n      };\n\n      return;\n    }\n\n    eventualAttrs[attr] = {\n      type: 'attr',\n      value\n    };\n  });\n}\n\nexport function transformRestArgs(args) {\n  return collectFromObject(args, addArgs);\n}\n\nfunction addArgs(args, value, arg) {\n  if (D_REST_REGEX.test(arg)) {\n    assign(args, transformRestArgs(value));\n  } else {\n    args[arg] = value;\n  }\n}\n","import { iterateArray } from '../../utils';\n\nexport function executeMixinWatchers(mixin, value) {\n  const oldValue = mixin.$$.value;\n\n  mixin.$$.value = value;\n\n  iterateArray(mixin.$$.watchers, (watcher) => {\n    watcher(value, oldValue);\n  });\n}\n","export function createMixin({\n  name, Mixin, dynamic,\n  value, args, comment, elem,\n  parentBlock, parentScope, parentTemplate\n}) {\n  const mixin = new Mixin({\n    name,\n    value,\n    dynamic,\n    args,\n    comment,\n    elem,\n    parentBlock,\n    parentScope,\n    parentTemplate\n  });\n\n  if (Mixin.evaluate) {\n    const value = mixin.value = mixin.evaluate((newValue, oldValue) => {\n      mixin.value = newValue;\n\n      try {\n        mixin.afterUpdate(newValue, oldValue);\n      } catch (err) {\n        console.error(`Uncaught error in ${ name }#afterUpdate:`, err);\n      }\n    });\n\n    mixin.afterUpdate(value);\n  }\n\n  return mixin;\n}\n","import { iterateObject, iterateArray } from '../../utils';\nimport { executeMixinWatchers } from './executeMixinWatchers';\nimport { createMixin } from './createMixin';\n\nexport function calculateAttrs(attrs, attrsObject, elem, firstTime) {\n  iterateObject(attrsObject, ({ type, value }, attr) => {\n    if (!attrs[attr]) {\n      if (type === 'attr') {\n        elem.removeAttr(attr);\n      } else {\n        value.$$.remove();\n      }\n\n      delete attrsObject[attr];\n    }\n  });\n\n  const mixins = [];\n\n  /* eslint guard-for-in: 0 */\n  for (const attr in attrs) {\n    const {\n      type,\n      dynamic,\n      value,\n      opts\n    } = attrs[attr];\n    let nextType;\n    let nextDynamic;\n    let nextValue;\n\n    if (attrsObject[attr]) {\n      const {\n        type: prevType,\n        value: prevValue\n      } = attrsObject[attr];\n\n      if (type === 'attr') {\n        if (prevType === 'mixin') {\n          prevValue.$$.remove();\n        }\n\n        if (prevValue !== value) {\n          elem.attr(attr, value);\n        }\n\n        nextValue = value;\n      } else {\n        const mixin = prevValue;\n\n        if (prevType === 'attr') {\n          elem.removeAttr(attr);\n        }\n\n        mixin.$$.isDynamic = dynamic;\n\n        if (dynamic) {\n          executeMixinWatchers(mixin, value);\n        } else if (!mixin.$$.evaluated && opts.Mixin.evaluate) {\n          const newValue = mixin.$$.parentScope.$$.evaluate(value, (newValue) => {\n            const {\n              type,\n              dynamic\n            } = attrs[attr];\n\n            if (type === 'mixin' && !dynamic) {\n              executeMixinWatchers(mixin, newValue);\n            }\n          }, mixin);\n\n          mixin.$$.evaluated = true;\n\n          executeMixinWatchers(mixin, newValue);\n        }\n\n        nextValue = mixin;\n      }\n\n      nextType = type;\n      nextDynamic = dynamic;\n    } else {\n      if (type === 'attr') {\n        elem.attr(attr, value);\n\n        nextValue = value;\n      } else {\n        const buildMixin = () => {\n          opts.dynamic = dynamic;\n\n          const mixin = createMixin(opts);\n\n          if (!dynamic && opts.Mixin.evaluate) {\n            const {\n              parentScope,\n              value\n            } = opts;\n            const firstValue = parentScope.$$.evaluate(value, (newValue) => {\n              const {\n                type,\n                dynamic\n              } = attrs[attr];\n\n              if (type === 'mixin' && !dynamic) {\n                executeMixinWatchers(mixin, newValue);\n              }\n            }, mixin);\n\n            mixin.$$.evaluated = true;\n            mixin.$$.value = firstValue;\n          }\n\n          nextValue = mixin;\n\n          return {\n            attr,\n            opts: {\n              type,\n              dynamic,\n              value: mixin\n            }\n          };\n        };\n\n        if (firstTime) {\n          mixins.push(buildMixin);\n        } else {\n          buildMixin();\n        }\n      }\n\n      nextType = type;\n      nextDynamic = dynamic;\n    }\n\n    attrsObject[attr] = {\n      type: nextType,\n      dynamic: nextDynamic,\n      value: nextValue\n    };\n  }\n\n  if (firstTime) {\n    return () => {\n      iterateArray(mixins, (buildMixin) => {\n        const {\n          attr,\n          opts\n        } = buildMixin();\n\n        attrsObject[attr] = opts;\n      });\n    };\n  }\n}\n","import { create, collectFromObject } from '../../utils';\n\nexport function constructPrivateScope(object, type, parentScope) {\n  let scope = {};\n\n  if (type === 'globals') {\n    scope = create(\n      parentScope\n        ? parentScope.$$.globals\n        : null\n    );\n  }\n\n  return collectFromObject(object, (scope, value, key) => {\n    scope[key] = {\n      value,\n      watchers: {\n        temp: [],\n        perm: []\n      }\n    };\n  }, scope);\n}\n","import { removeArrayElem, iterateArray } from '../../utils';\n\nexport function removeTempWatcher(watcher) {\n  watcher.onRemove();\n  watcher();\n}\n\nexport function removeWatchers(watchersToRemove) {\n  iterateArray(watchersToRemove, removeWatcher);\n}\n\nfunction removeWatcher({ watcher, watchers }) {\n  removeArrayElem(watchers, watcher);\n}\n","import { defineProperties, mapObject, iterateArray } from '../../utils';\nimport { Scope } from '../../constants';\nimport { removeTempWatcher } from './removeWatcher';\n\nlet changed;\n\nexport function constructPublicScope(scope, scopeValues, privateScope) {\n  defineProperties(scope, mapObject(scopeValues, (value, key) => {\n    const scope = privateScope[key];\n    const { watchers } = scope;\n\n    return {\n      configurable: false,\n      enumerable: true,\n      get() {\n        if (Scope.evalMode) {\n          if (Scope.gettingVars.indexOf(watchers.temp) === -1) {\n            Scope.gettingVars.push(watchers.temp);\n          }\n        }\n\n        return scope.value;\n      },\n      set(value) {\n        if (value === scope.value) {\n          return;\n        }\n\n        if (!changed) {\n          changed = [];\n        }\n\n        const oldTempWatchers = watchers.temp.slice();\n        const oldValue = scope.value;\n\n        watchers.temp = [];\n        scope.value = value;\n\n        iterateArray(oldTempWatchers, removeTempWatcher);\n        changed.push({\n          scope,\n          oldValue,\n          value\n        });\n\n        setTimeout(() => {\n          if (!changed) {\n            return;\n          }\n\n          const was = [];\n          const values = [];\n\n          for (let i = changed.length - 1; i >= 0; i--) {\n            const {\n              scope,\n              value,\n              oldValue\n            } = changed[i];\n\n            iterateArray(scope.watchers.perm, (watcher) => {\n              const index = was.indexOf(watcher);\n\n              if (index === -1) {\n                was.push(watcher);\n                values.push({\n                  value,\n                  oldValue\n                });\n              } else {\n                values[index].oldValue = oldValue;\n              }\n            });\n\n            changed.splice(i, 1);\n          }\n\n          changed = null;\n\n          iterateArray(was, (watcher, i) => {\n            const {\n              value,\n              oldValue\n            } = values[i];\n\n            watcher(value, oldValue);\n          });\n        }, 0);\n      }\n    };\n  }));\n}\n","import {\n  except, create, assign,\n  iterateObject, iterateArray,\n  isNil\n} from '../../utils';\nimport { Elem } from '../../Elem';\nimport {\n  SVG_NS, D_REST_REGEX\n} from '../../constants';\nimport { cleanProperty } from './cleanProperty';\nimport { transformRestAttrs } from './transformRestAttrs';\nimport { calculateAttrs } from './calculateAttrs';\nimport { mixinMatch } from './mixinMatch';\nimport { constructPrivateScope } from './constructPrivateScope';\nimport { constructPublicScope } from './constructPublicScope';\nimport { Block } from '../../Block';\n\nconst NAMED_D_BLOCK_REGEX = /^d-block:([\\s\\S]+)$/;\n\nexport function createBlock({ node, Constructor, parent, parentElem, parentBlock, parentScope, parentTemplate, prevBlock }) {\n  const doc = new Elem(parentElem[0].ownerDocument);\n  const elem = parentElem[0].namespaceURI === SVG_NS\n    ? doc.create('svg')\n    : doc;\n  const localBlocks = parentTemplate ? parentTemplate.$$.ns._blocks : Block._blocks;\n  const localMixins = parentTemplate ? parentTemplate.$$.ns._mixins : Block._mixins;\n  let children = node.children = node.children || [];\n  let args = node.attrs = node.attrs || {};\n  let name = node.name || 'UnknownBlock';\n  let constructor = Constructor || (node.name && localBlocks[node.name]);\n  let dBlockMatch;\n  let dBlockName;\n  let dBlockArgs;\n  let dBlockChildren;\n  let dElementsName;\n  let dElementsConstructor;\n\n  if (name === 'd-block' && args.name) {\n    name = 'd-elements';\n    constructor = localBlocks[name];\n    dElementsName = args.name;\n    dBlockArgs = except(args, 'name');\n    dBlockChildren = children;\n    children = [];\n    args = {};\n  } else if (name === 'd-block' && args.Constructor) {\n    name = 'UnknownBlock';\n    constructor = localBlocks[name];\n    dElementsConstructor = args.Constructor;\n    dBlockArgs = except(args, 'Constructor');\n    dBlockChildren = children;\n    children = [];\n    args = {};\n  } else if ((dBlockMatch = name.match(NAMED_D_BLOCK_REGEX)) || name === 'd-block') {\n    constructor = Block._blocks['d-block'];\n    dBlockName = dBlockMatch ? dBlockMatch[1] : null;\n  }\n\n  let blockInstance;\n\n  if (constructor) {\n    try {\n      blockInstance = new constructor({\n        name,\n        args,\n        dBlockName,\n        children,\n        parent,\n        parentElem,\n        parentBlock,\n        parentScope,\n        parentTemplate,\n        prevBlock\n      });\n    } catch (err) {\n      console.error(`Uncaught error in new ${ name }:`, err);\n      constructor = null;\n    }\n  }\n\n  if (!constructor) {\n    const {\n      value,\n      children\n    } = node;\n\n    const element = elem.create(name);\n    const currentAttrs = create(null);\n    let attrs = create(null);\n    let wasDRest;\n    const mixinDefaultOpts = {\n      elem: element,\n      parentBlock,\n      parentScope,\n      parentTemplate\n    };\n\n    iterateObject(args, (value, attr) => {\n      const isDRest = D_REST_REGEX.test(attr);\n      const localAttrs = isDRest || wasDRest\n        ? create(attrs)\n        : attrs;\n\n      attrs = localAttrs;\n\n      if (isDRest) {\n        const restAttrs = parentScope.$$.evaluate(value, (value) => {\n          setTimeout(() => {\n            iterateObject(localAttrs, cleanProperty);\n            assign(localAttrs, transformRestAttrs(\n              value, localMixins, mixinDefaultOpts\n            ));\n            calculateAttrs(attrs, currentAttrs, element, false);\n          }, 0);\n        }, parentBlock);\n\n        wasDRest = true;\n\n        return assign(localAttrs, transformRestAttrs(\n          restAttrs, localMixins, mixinDefaultOpts\n        ));\n      }\n\n      const match = mixinMatch(localMixins, attr);\n\n      wasDRest = false;\n\n      if (match) {\n        localAttrs[attr] = {\n          type: 'mixin',\n          dynamic: false,\n          opts: {\n            value,\n            ...match,\n            ...mixinDefaultOpts\n          },\n          value\n        };\n\n        return;\n      }\n\n      localAttrs[attr] = {\n        type: 'attr',\n        value: parentScope.$$.evaluate(value, (value) => {\n          localAttrs[attr] = {\n            type: 'attr',\n            value\n          };\n          calculateAttrs(attrs, currentAttrs, element, false);\n        }, parentBlock)\n      };\n    });\n\n    const createMixins = calculateAttrs(attrs, currentAttrs, element, true);\n\n    if (name === '#comment') {\n      element.text(value);\n    }\n\n    if (name === '#text') {\n      let text = parentScope.$$.evaluate(value, (value) => {\n        if (isNil(value)) {\n          value = '';\n        }\n\n        element.text(`${ value }`);\n      }, parentBlock);\n\n      if (isNil(text)) {\n        text = '';\n      }\n\n      element.text(`${ text }`);\n    }\n\n    if (children) {\n      const parentElem = name === 'template'\n        ? new Elem(element[0].content)\n        : element;\n      let prevBlock;\n\n      iterateArray(children, (child) => {\n        prevBlock = createBlock({\n          node: child,\n          parent: parentElem,\n          parentElem,\n          parentBlock,\n          parentScope,\n          parentTemplate,\n          prevBlock\n        });\n      });\n    }\n\n    const isParentBlock = parent instanceof Block;\n\n    if (prevBlock instanceof Block) {\n      prevBlock.$$.insertAfterIt(element, false);\n    } else if (prevBlock) {\n      element.insertAfter(prevBlock);\n\n      if (isParentBlock) {\n        parent.$$.addContent(element);\n      }\n    } else if (isParentBlock) {\n      parent.$$.insertInStartOfIt(element, false);\n    } else {\n      element.into(parentElem, false);\n    }\n\n    createMixins();\n\n    return element;\n  }\n\n  const {\n    $$,\n    args: Args,\n    globals,\n    ...locals\n  } = blockInstance;\n\n  if (dElementsName) {\n    node = {\n      attrs: dBlockArgs,\n      children: dBlockChildren\n    };\n    node.name = parentScope.$$.evaluate(dElementsName, (newName) => {\n      node.name = newName;\n\n      Args.value = [node];\n    }, blockInstance, true);\n\n    Args.value = [node];\n    Args.parentScope = parentScope;\n    Args.parentTemplate = parentTemplate;\n  }\n\n  if (dElementsConstructor) {\n    node = {\n      name,\n      attrs: dBlockArgs,\n      children: dBlockChildren\n    };\n\n    Args.Constructor = parentScope.$$.evaluate(dElementsConstructor, (newConstructor) => {\n      Args.Constructor = newConstructor;\n      Args.value = [node];\n    }, blockInstance, true);\n    Args.value = [node];\n    Args.parentScope = parentScope;\n    Args.parentTemplate = parentTemplate;\n  }\n\n  const html = name === 'd-elements'\n    ? Args.value || []\n    : constructor._html;\n\n  $$.args = constructPrivateScope(Args);\n  $$.locals = constructPrivateScope(locals);\n  $$.globals = constructPrivateScope(globals, 'globals', parentScope);\n\n  if (name === '#d-item') {\n    const scopeValues = {\n      [node.itemName]: node.item,\n      [node.indexName]: node.index\n    };\n    const scope = parentScope.$$.name === '#d-item'\n      ? parentScope.$$.scope\n      : parentScope;\n\n    $$.ns = parentScope.$$.ns;\n    $$.privateScope = constructPrivateScope(scopeValues);\n    constructPublicScope($$.scope = create(scope), scopeValues, $$.privateScope);\n  }\n\n  if (name === 'd-each') {\n    $$.scope = create(parentScope.$$.name === '#d-item' ? parentScope.$$.scope : parentScope, {\n      [Args.item || '$item']: {\n        value: null,\n        writable: true\n      },\n      [Args.index || '$index']: {\n        value: null,\n        writable: true\n      }\n    });\n  }\n\n  constructPublicScope(Args, Args, $$.args);\n  constructPublicScope(globals, globals, $$.globals);\n  constructPublicScope(blockInstance, locals, $$.locals);\n\n  try {\n    blockInstance.afterConstruct();\n  } catch (err) {\n    console.error(`Uncaught error in ${ name }#afterConstruct:`, err);\n  }\n\n  prevBlock = undefined;\n  parentScope = name === 'd-elements'\n    ? Args.parentScope\n    : blockInstance;\n  parentTemplate = name === 'd-elements'\n    ? Args.parentTemplate\n    : blockInstance;\n\n  iterateArray(html, (child) => {\n    prevBlock = createBlock({\n      node: child,\n      parent: blockInstance,\n      parentElem,\n      parentBlock: blockInstance,\n      parentScope,\n      parentTemplate,\n      prevBlock\n    });\n  });\n\n  blockInstance.$$.isRendered = true;\n\n  try {\n    blockInstance.afterRender();\n  } catch (err) {\n    console.error(`Uncaught error in ${ name }#afterRender:`, err);\n  }\n\n  return blockInstance;\n}\n","const { isPrototypeOf } = {};\n\nexport function isInstanceOf(Class, Subclass) {\n  return Class::isPrototypeOf(Subclass) && Class.prototype::isPrototypeOf(Subclass.prototype);\n}\n","export function removeWithParentSignal(child) {\n  child.$$.remove(true);\n}\n\nexport function remove(child) {\n  child.$$.remove();\n}\n","import { iterateObject } from '../../utils';\n\nexport function watchForAllLocals(block, watcher) {\n  iterateObject(block.$$.locals, ({ watchers }) => {\n    watchers.perm.push(watcher);\n  });\n}\n\nexport function watchForAllGlobals(block, watcher) {\n  const {\n    globals,\n    watchersToRemove\n  } = block.$$;\n\n  for (const glob in globals) {\n    /* eslint guard-for-in: 0 */\n    const watchers = globals[glob].watchers.perm;\n\n    watchers.push(watcher);\n    watchersToRemove.push({\n      watcher,\n      watchers\n    });\n  }\n}\n\nexport function watchForAllArgs(block, watcher) {\n  iterateObject(block.$$.args, ({ watchers }) => {\n    watchers.perm.push(watcher);\n  });\n}\n","import {\n  defineFrozenProperties,\n  removeArrayElem, setToStringTag\n} from './utils';\nimport { wrapMixin, removeWatchers } from './helpers/Block';\n\nclass Mixin {\n  static evaluate = true;\n\n  /**\n   * @method Mixin.wrap\n   * @public\n   * @param {...Wrapper} wrappers - Functions that return wrapped mixin.\n   * @returns {typeof Mixin} New mixin.\n   * @description Method for wrapping mixins.\n   * It is considered best practice to just extends the old mixin with a new one.\n   */\n  static wrap(...wrappers) {\n    return wrappers.reduce(wrapMixin, this);\n  }\n\n  constructor(opts) {\n    const {\n      name,\n      value,\n      dynamic,\n      elem,\n      args,\n      comment,\n      parentBlock,\n      parentScope,\n      parentTemplate\n    } = opts;\n    const watchersToRemove = [];\n    const watchers = [];\n\n    defineFrozenProperties(this, {\n      $$: {\n        name,\n        _value: value,\n        value,\n        isDynamic: dynamic,\n        parentScope,\n        parentBlock,\n        parentTemplate,\n        watchers,\n        watchersToRemove,\n        isRemoved: false,\n        evaluate: (watcher) => {\n          const {\n            isDynamic,\n            value,\n            _value\n          } = this.$$;\n          const currentValue = isDynamic\n            ? value\n            : parentScope.$$.evaluate(_value);\n\n          if (watcher) {\n            watchers.push(watcher);\n          }\n\n          return currentValue;\n        },\n        remove: (isParentSignal) => {\n          this.$$.isRemoved = true;\n\n          removeWatchers(watchersToRemove);\n\n          try {\n            this.beforeRemove();\n          } catch (err) {\n            console.error(`Uncaught error in ${ name }#beforeRemove:`, err);\n          }\n\n          if (!isParentSignal && parentBlock) {\n            removeArrayElem(parentBlock.$$.mixins, this);\n          }\n        }\n      }\n    });\n\n    /**\n     * @member {String[]} [Mixin#args]\n     * @type {String[]}\n     * @public\n     */\n    this.args = args;\n\n    /**\n     * @member {String} [Mixin#comment]\n     * @type {String}\n     * @public\n     */\n    this.comment = comment;\n\n    /**\n     * @member {Block} [Mixin#parentBlock]\n     * @type {Block}\n     * @public\n     */\n    this.parentBlock = parentBlock;\n\n    /**\n     * @member {Block} [Mixin#parentScope]\n     * @type {Block}\n     * @public\n     */\n    this.parentScope = parentScope;\n\n    /**\n     * @member {Block} [Mixin#parentTemplate]\n     * @type {Block}\n     * @public\n     */\n    this.parentTemplate = parentTemplate;\n\n    /**\n     * @member {Elem} Mixin#elem\n     * @type {Elem}\n     * @public\n     */\n    this.elem = elem;\n\n    /**\n     * @member {Element} Mixin#node\n     * @type {Element}\n     * @public\n     */\n    this.node = elem[0];\n\n    parentBlock.$$.mixins.push(this);\n  }\n\n  afterUpdate() {}\n\n  beforeRemove() {}\n\n  /**\n   * @method Block#evaluate\n   * @public\n   * @param {Watcher} [callback] - If present, callback which is called when the mixin value is changed.\n   * @returns {*} Evaluation result.\n   * @description Method for evaluating the mixin value and watching for the changes.\n   */\n  evaluate(callback) {\n    return this.$$.evaluate(callback);\n  }\n}\n\nsetToStringTag(Mixin, 'Mixin');\n\nexport { Mixin };\n","import { isInstanceOf } from './isInstanceOf';\nimport { Block } from '../../Block';\nimport { Mixin } from '../../Mixin';\n\nexport function wrapBlock(block, wrapper) {\n  const returnValue = wrapper(block);\n\n  return isInstanceOf(Block, returnValue)\n    ? returnValue\n    : block;\n}\n\nexport function wrapMixin(mixin, wrapper) {\n  const returnValue = wrapper(mixin);\n\n  return isInstanceOf(Mixin, returnValue)\n    ? returnValue\n    : mixin;\n}\n","import { isArray, isString } from './utils';\nimport { createBlock } from './helpers/Block';\nimport { Block } from './Block';\nimport { Elem } from './Elem';\n\nexport function initApp(html, container) {\n  const parentElem = new Elem(container).elem(0);\n\n  if (!parentElem.length) {\n    throw new Error('No valid element to insert the app into was given! (initApp)');\n  }\n\n  if (parentElem.prop('DwayneRootBlock')) {\n    throw new Error('There already exists a Dwayne app inside the given element! (initApp)');\n  }\n\n  if (isString(html)) {\n    html = {\n      vars: [],\n      value: [{\n        name: html\n      }]\n    };\n  }\n\n  if (isArray(html)) {\n    html = {\n      vars: [],\n      value: html\n    };\n  }\n\n  class RootBlock extends Block {\n    static _vars = html.vars;\n    static _html = html.value\n  }\n\n  const block = createBlock({\n    node: {\n      name: '#RootBlock'\n    },\n    Constructor: RootBlock,\n    parent: parentElem,\n    parentElem\n  });\n\n  parentElem\n    .prop('DwayneRootBlock', block)\n    .attr('dwayne-root', '');\n}\n","import { Elem } from './Elem';\nimport {\n  defineFrozenProperties,\n  assign, iterateArray, iterateObject,\n  isFunction, isArray,\n  setToStringTag, hasOwnProperty,\n  removeArrayElem, create,\n  getProto, setProto\n} from './utils';\nimport {\n  constructMixinRegex, isInstanceOf,\n  removeWatchers, removeWithParentSignal, cleanProperty,\n  transformRestArgs, calculateArgs, wrapBlock,\n  watchForAllArgs, watchForAllGlobals, watchForAllLocals\n} from './helpers/Block';\nimport {\n  D_REST_REGEX, Scope,\n  rootBlocks, rootMixins\n} from './constants';\nimport { initApp } from './initApp';\nimport { Mixin } from './Mixin';\n\n/**\n * @typedef {Error} EvaluationError\n * @public\n * @property {String} expression - Expression which has been evaluated with the error.\n * @property {Block} block - Block in context of which the expression has been evaluated with the error.\n */\n\n/**\n * @callback Watcher\n * @public\n * @param {*} newValue - New value.\n * @param {*} oldValue - Old value.\n */\n\n/**\n * @callback VarsWatcher\n * @public\n */\n\n/**\n * @callback Wrapper\n * @public\n * @param {typeof Block|typeof Mixin} Block class to wrap.\n * @returns {typeof Block} New Block class.\n */\n\n/**\n * @callback AfterUpdate\n * @public\n * @param {*} newValue - New value.\n * @param {*} oldValue - Old value.\n * @param {Mixin} mixin - Mixin instance.\n */\n\n/**\n * @callback BlockRegisterHook\n * @public\n * @param {typeof Block} Block - Registering block.\n * @param {String} name - Block name.\n * @returns Return value is used for registering the block.\n * If Block subclass returned it's registered instead of the initial block, otherwise\n * the initial block is used.\n */\n\n/**\n * @callback MixinRegisterHook\n * @public\n * @param {typeof Mixin} Mixin - Registering mixin.\n * @param {String} name - Mixin name.\n * @returns Return value is used for registering the mixin.\n * If Mixin subclass returned it's registered instead of the initial mixin, otherwise\n * the initial mixin is used.\n */\n\n/**\n * @callback RemoveHook\n * @public\n */\n\nconst blockHooks = [];\nconst mixinHooks = [];\nconst TAG_NAME_REGEX = /^[a-z][a-z\\d\\-_.:!@#$%^&*()[\\]{}='\"\\\\]*$/i;\nconst ATTR_NAME_REGEX = /^[^\\u0000-\\u0020\\s'\">/=]+$/;\nconst WATCHED_ARG_PREFIX_REGEX = /^args\\./;\nconst WATCHED_GLOBAL_PREFIX_REGEX = /^globals\\./;\nconst afterElem = new Elem();\nconst rootVars = [];\nconst rootTemplate = [];\n\n/**\n * @class Block\n * @extends null\n * @public\n * @param {Object} opts - Element options.\n * @returns {Block} Instance of Block.\n * @description Class for dynamic templating.\n *\n * @example\n * import { D, Block, initApp } from 'dwayne';\n *\n * class App extends Block {\n *   static template = '<Hello text=\"{text}\"/>';\n *\n *   constructor(opts) {\n *     super(opts);\n *\n *     this.text = 'world (0)';\n *     this.times = 0;\n *\n *     this.setInterval();\n *   }\n *\n *   setInterval() {\n *     D(1000).interval(() => {\n *       this.text = `world (${ ++this.times })`;\n *     });\n *   }\n * }\n *\n * Block.block('App', App);\n * Block.block('Hello', 'Hello, {args.text}!');\n *\n * initApp(html`<App/>`, document.getElementById('root'));\n */\nclass Block {\n  /**\n   * @member {Object.<String, typeof Block>} Block._blocks\n   * @type {Object.<String, typeof Block>}\n   * @protected\n   * @description Block namespace blocks.\n   */\n  static _blocks = create(rootBlocks);\n\n  /**\n   * @member {Object.<String, typeof Mixin>} Block._mixins\n   * @type {Object.<String, typeof Mixin>}\n   * @protected\n   * @description Block namespace mixins.\n   */\n  static _mixins = create(rootMixins);\n\n  /**\n   * @member {String[]} Block._vars\n   * @type {String[]}\n   * @protected\n   * @description Block used local vars.\n   */\n  static _vars = rootVars;\n\n  /**\n   * @member {Object[]} Block._html\n   * @type {Object[]}\n   * @protected\n   * @description Block template.\n   */\n  static _html = rootTemplate;\n\n  /**\n   * @member {Object} [Block.defaultArgs = null]\n   * @type {Object}\n   * @public\n   * @description Block default args.\n   */\n  static defaultArgs = null;\n\n  /**\n   * @member {Object} [Block.defaultLocals = null]\n   * @type {Object}\n   * @public\n   * @description Block default locals.\n   */\n  static defaultLocals = null;\n\n  /**\n   * @member {Object} [Block.template = { vars: [], value: [] }]\n   * @type {Object}\n   * @public\n   * @description Block template.\n   */\n  static template = {\n    vars: [],\n    value: []\n  };\n\n  /**\n   * @method Block.onEvalError\n   * @public\n   * @param {EvaluationError} err - The method is called when an evaluation error occurs.\n   */\n  static onEvalError(err) {\n    console.error(`Eval error (evaluating \"${ err.original || err.expression }\" in context of block \"${ err.block.$$.name }\"):`, err);\n  }\n\n  /**\n   * @method Block.beforeRegisterBlock\n   * @public\n   * @param {BlockRegisterHook} hook - Block register hook.\n   * @returns {RemoveHook}\n   */\n  static beforeRegisterBlock(hook) {\n    blockHooks.push(hook);\n\n    return () => {\n      removeArrayElem(blockHooks, hook);\n    };\n  }\n\n  /**\n   * @method Block.beforeRegisterMixin\n   * @public\n   * @param {MixinRegisterHook} hook - Mixin register hook.\n   */\n  static beforeRegisterMixin(hook) {\n    mixinHooks.push(hook);\n\n    return () => {\n      removeArrayElem(mixinHooks, hook);\n    };\n  }\n\n  /**\n   * @method Block.block\n   * @public\n   * @param {String} name - Block or mixin name.\n   * @param {Template|typeof Block} Subclass - Subclass of Block or template string of it.\n   * @returns {typeof Block|undefined} Returns registered Block or undefined if the block hasn't been registered.\n   * @description Register block in the namespace of this.\n   */\n  static block(name, Subclass) {\n    if (isFunction(Subclass) && !isInstanceOf(Block, Subclass)) {\n      const constructor = Subclass;\n\n      Subclass = class extends Block {\n        static template = constructor.template;\n\n        constructor(opts) {\n          super(opts);\n          this::constructor(opts);\n        }\n      };\n    }\n\n    if (!isFunction(Subclass) && isArray(Subclass)) {\n      Subclass = class extends Block {\n        static template = {\n          vars: [],\n          value: Subclass\n        };\n      };\n    }\n\n    if (!isFunction(Subclass) && Subclass.vars && Subclass.value) {\n      Subclass = class extends Block {\n        static template = Subclass;\n      };\n    }\n\n    if (!isInstanceOf(Block, Subclass)) {\n      console.warn(`Block must be a template (array or an object from an html loader), a function or a class that extends Block class (name: \"${ name }\") (Block.block)`);\n\n      return;\n    }\n\n    if (rootBlocks[name]) {\n      console.warn(`The \"${ name }\" block is a built-in block so the block will not be registered (Block.block)`);\n\n      return;\n    }\n\n    if (!TAG_NAME_REGEX.test(name)) {\n      console.warn(`Name \"${ name }\" is not allowed for blocks so the block will not be registered (Block.block)`);\n\n      return;\n    }\n\n    if (!hasOwnProperty(this, '_blocks')) {\n      this._blocks = create(getProto(this)._blocks);\n    }\n\n    if (!hasOwnProperty(this, 'defaultLocals')) {\n      this.defaultLocals = {};\n    }\n\n    if (!hasOwnProperty(this, 'defaultArgs')) {\n      this.defaultArgs = create(null);\n    }\n\n    try {\n      Subclass = blockHooks.reduce((returnValue, hook) => {\n        const currentReturnValue = hook(returnValue, name, this);\n\n        return isInstanceOf(Block, currentReturnValue)\n          ? currentReturnValue\n          : returnValue;\n      }, Subclass);\n    } catch (err) {\n      console.error('Uncaught error in \"beforeRegisterBlock\" hook:', err);\n    }\n\n    if (isArray(Subclass.template)) {\n      Subclass.template = {\n        vars: [],\n        value: Subclass.template\n      };\n    }\n\n    const {\n      vars,\n      value\n    } = Subclass.template;\n\n    Subclass._html = value;\n    Subclass._vars = vars;\n    Subclass._blocks = hasOwnProperty(Subclass, '_blocks')\n      ? Subclass._blocks\n      : create(this._blocks);\n    Subclass._mixins = hasOwnProperty(Subclass, '_mixins')\n      ? Subclass._mixins\n      : create(this._mixins);\n\n    if (hasOwnProperty(Subclass, 'defaultArgs')) {\n      setProto(Subclass.defaultArgs, null);\n    }\n\n    this._blocks[name] = Subclass;\n\n    return Subclass;\n  }\n\n  /**\n   * @method Block.get\n   * @public\n   * @param {String} name - Block name.\n   * @returns {typeof Block|undefined} Returns registered Block with specified name.\n   */\n  static get(name) {\n    return this._blocks[name];\n  }\n\n  /**\n   * @method Block.getMixin\n   * @public\n   * @param {String} name - Mixin name.\n   * @returns {typeof Mixin|undefined} Returns registered Mixin with specified name.\n   */\n  static getMixin(name) {\n    return this._mixins[name];\n  }\n\n  /**\n   * @method Block.init\n   * @public\n   * @param {Elem|Element} [container] - Container of the app.\n   * @returns {void}\n   * @description Method for initializing app.\n   */\n  static init(container) {\n    initApp(htmlScopeless`<d-block Constructor=\"{this}\"/>`, container);\n  }\n\n  /**\n   * @method Block.mixin\n   * @public\n   * @param {String} name - Block or mixin name.\n   * @param {typeof Mixin|AfterUpdate} Subclass - Subclass of Mixin or AfterUpdate callback.\n   * @returns {typeof Mixin|undefined} Returns registered Block or undefined if the block hasn't been registered.\n   * @description Register mixin in the namespace of this.\n   */\n  static mixin(name, Subclass) {\n    if (isFunction(Subclass) && !isInstanceOf(Mixin, Subclass)) {\n      const afterUpdate = Subclass;\n\n      Subclass = class extends Mixin {\n        afterUpdate(newValue, oldValue) {\n          this::afterUpdate(newValue, oldValue, this);\n        }\n      };\n    }\n\n    if (!isInstanceOf(Mixin, Subclass)) {\n      console.warn(`The \"${ name }\" class does not extend Mixin or is not an afterUpdate function, so it will not be registered (Block.mixin)`);\n\n      return;\n    }\n\n    if (rootMixins[name]) {\n      console.warn(`The \"${ name }\" mixin is a built-in mixin so the mixin will not be registered (Block.mixin)`);\n\n      return;\n    }\n\n    if (!ATTR_NAME_REGEX.test(name)) {\n      console.warn(`Name \"${ name }\" is not allowed for mixins so the mixin will not be registered (Block.mixin)`);\n\n      return;\n    }\n\n    if (!hasOwnProperty(this, '_mixins')) {\n      this._mixins = create(getProto(this)._mixins);\n    }\n\n    try {\n      Subclass = mixinHooks.reduce((returnValue, hook) => {\n        const currentReturnValue = hook(returnValue, name, this);\n\n        return isInstanceOf(Mixin, currentReturnValue)\n          ? currentReturnValue\n          : returnValue;\n      }, Subclass);\n    } catch (err) {\n      console.error('Uncaught error in \"beforeRegisterMixin\" hook:', err);\n    }\n\n    Subclass._match = constructMixinRegex(name);\n\n    this._mixins[name] = Subclass;\n\n    return Subclass;\n  }\n\n  /**\n   * @method Block.wrap\n   * @public\n   * @param {...Wrapper} wrappers - Functions that return wrapped block.\n   * @returns {typeof Block} New block.\n   * @description Method for wrapping blocks into another blocks.\n   * It is considered best practice to just extends the old block with a new one.\n   *\n   * @example\n   * class MyBlock extends Block {\n   *   static template = '<div>123</div>';\n   * }\n   *\n   * MyBlock.wrap((Block) => {\n   *   return class extends Block {\n   *     static template = `<section class=\"wrapper\">${ Block.template }</section>`;\n   *\n   *     constructor(opts) {\n   *       super(opts);\n   *\n   *       this.additionalVar = 'additional';\n   *     }\n   *   };\n   * });\n   */\n  static wrap(...wrappers) {\n    return wrappers.reduce(wrapBlock, this);\n  }\n\n  constructor(opts) {\n    const {\n      name,\n      args: originalArgs,\n      dBlockName,\n      children,\n      parent,\n      parentElem,\n      parentBlock,\n      parentScope,\n      parentTemplate,\n      prevBlock\n    } = opts;\n    const watchersToRemove = [];\n    const constructor = getProto(this).constructor;\n    const childrenBlocks = [];\n    const mixins = [];\n    const isParentBlock = parent instanceof Block;\n\n    defineFrozenProperties(this, {\n      /**\n       * @member {Block} Block#$\n       * @type {Block}\n       * @public\n       * @description This.\n       */\n      $: this,\n\n      /**\n       * @member {Object} Block#$$\n       * @type {Object}\n       * @protected\n       * @property {Object} args - Private args scope.\n       * @property {Object[]} htmlChildren - Block html children.\n       * @property {Block[]} children - Child blocks.\n       * @property {Mixin[]} mixins - Child mixins.\n       * @property {Elem} parentElem - Parent element.\n       * @property {Elem} content - Content elements.\n       * @property {Function} evaluate - Evaluate function.\n       * @property {Object} globals - Private globals scope.\n       * @property {Object} locals - Private locals scope.\n       * @property {Object[]} watchersToRemove - Watchers to remove before removing element.\n       */\n      $$: {\n        name,\n        dBlockName,\n        dBlocks: [],\n        parent,\n        parentElem,\n        parentScope,\n        parentBlock,\n        parentTemplate,\n        content: new Elem(),\n        ns: constructor,\n        htmlChildren: children,\n        children: childrenBlocks,\n        mixins,\n        prevBlock,\n        watchersToRemove,\n        isRemoved: false,\n        isRendered: false,\n        evaluate: (func, onChange, targetBlock, forDElements, forDItem, forDEach) => {\n          if (!isFunction(func)) {\n            return func;\n          }\n\n          forDElements = !!forDElements;\n          forDItem = !!forDItem;\n\n          const scope = (name === '#d-item' && !forDItem) || forDEach\n            ? (forDEach || this).$$.scope\n            : this;\n          const { watchersToRemove } = targetBlock ? targetBlock.$$ : {};\n          const onChangeFlag = !!onChange;\n\n          const evaluate = () => {\n            let result;\n\n            if (onChangeFlag) {\n              Scope.evalMode = true;\n              Scope.gettingVars = [];\n            }\n\n            try {\n              result = func(scope);\n            } catch (err) {\n              err.expression = func;\n              err.original = func.original;\n              err.block = this;\n\n              if (isFunction(constructor.onEvalError)) {\n                try {\n                  constructor.onEvalError(err);\n                } catch (e) {\n                  console.error('Uncaught error in Block.onEvalError:', e);\n                }\n              }\n            }\n\n            if (onChangeFlag) {\n              const localWatchers = [];\n\n              iterateArray(Scope.gettingVars, (watchers) => {\n                const watcher = () => {\n                  const newResult = evaluate();\n\n                  if (newResult !== result && !targetBlock.$$.isRemoved) {\n                    onChange(newResult, result);\n                  }\n                };\n                const watcherBlock = {\n                  forDElements,\n                  watcher,\n                  watchers\n                };\n\n                watcher.onRemove = () => {\n                  iterateArray(localWatchers, (watcherBlock) => {\n                    const {\n                      watcher,\n                      watchers\n                    } = watcherBlock;\n\n                    removeArrayElem(watchersToRemove, watcherBlock);\n                    removeArrayElem(watchers, watcher);\n                  });\n                };\n\n                localWatchers.push(watcherBlock);\n                watchersToRemove.push(watcherBlock);\n                watchers.push(watcher);\n              });\n\n              Scope.evalMode = false;\n              Scope.gettingVars = [];\n            }\n\n            return result;\n          };\n\n          return evaluate();\n        },\n        remove: (isParentSignal) => {\n          this.$$.isRemoved = true;\n\n          removeWatchers(watchersToRemove);\n\n          iterateArray(childrenBlocks, removeWithParentSignal);\n          iterateArray(mixins, removeWithParentSignal);\n\n          try {\n            this.beforeRemove();\n          } catch (err) {\n            console.error(`Uncaught error in ${ name }#beforeRemove:`, err);\n          }\n\n          if (!isParentSignal && isParentBlock) {\n            parent.$$.removeContent(this.$$.content);\n          }\n\n          if (!isParentSignal && parentBlock) {\n            removeArrayElem(parentBlock.$$.children, this);\n          }\n\n          this.$$.content.remove();\n        },\n        changeContent: (newContent) => {\n          this.$$.content = newContent;\n\n          if (this.$$.isRendered) {\n            try {\n              this.afterDOMChange();\n            } catch (err) {\n              console.error(`Uncaught error in ${ name }#afterContentChange:`, err);\n            }\n          }\n        },\n        addContent: (contentToAdd, notRecursive) => {\n          const oldContent = this.$$.content;\n          const index = oldContent.indexOf(contentToAdd[0].previousSibling) + 1;\n          let newContent;\n\n          if (index === 0) {\n            newContent = contentToAdd.add(oldContent);\n          } else {\n            newContent = oldContent\n              .slice(0, index)\n              .add(contentToAdd, oldContent.slice(index));\n          }\n\n          this.$$.changeContent(newContent);\n\n          if (isParentBlock && !notRecursive) {\n            parent.$$.addContent(contentToAdd, notRecursive);\n          }\n        },\n        moveContent: (contentToMove, after) => {\n          const oldContent = this.$$.content;\n          const index = oldContent.indexOf(contentToMove[0]);\n          const indexToPut = oldContent.indexOf(after[0]) + 1;\n          let newContent;\n\n          if (indexToPut === 0) {\n            newContent = contentToMove.add(\n              oldContent.slice(indexToPut, index),\n              oldContent.slice(index + contentToMove.length)\n            );\n          } else if (index > indexToPut) {\n            newContent = oldContent\n              .slice(0, indexToPut)\n              .add(\n                contentToMove,\n                oldContent.slice(indexToPut, index),\n                oldContent.slice(index + contentToMove.length)\n              );\n          } else {\n            newContent = oldContent\n              .slice(0, index)\n              .add(\n                oldContent.slice(index + contentToMove.length, indexToPut),\n                contentToMove,\n                oldContent.slice(indexToPut)\n              );\n          }\n\n          this.$$.changeContent(newContent);\n\n          if (isParentBlock && indexToPut) {\n            parent.$$.moveContent(contentToMove, after);\n          }\n        },\n        removeContent: (contentToRemove) => {\n          this.$$.changeContent(this.$$.content.filter((elem) => (\n            contentToRemove.indexOf(elem) === -1\n          )));\n\n          if (isParentBlock) {\n            parent.$$.removeContent(contentToRemove);\n          }\n        },\n        insertInStartOfIt: (contentToInsert, moveFlag) => {\n          const { prevBlock } = this.$$;\n          let after = afterElem;\n\n          if (prevBlock instanceof Block) {\n            after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n          } else if (prevBlock) {\n            after = prevBlock;\n            contentToInsert.insertAfter(prevBlock);\n\n            if (isParentBlock) {\n              if (moveFlag) {\n                parent.$$.moveContent(contentToInsert, after);\n              } else {\n                parent.$$.addContent(contentToInsert, true);\n              }\n            }\n          } else if (isParentBlock) {\n            const { prevBlock } = parent.$$;\n\n            if (prevBlock) {\n              let notRecursive;\n\n              if (prevBlock instanceof Block) {\n                after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n                notRecursive = true;\n              } else {\n                after = prevBlock;\n                notRecursive = false;\n                contentToInsert.insertAfter(prevBlock);\n              }\n\n              if (moveFlag) {\n                parent.$$.moveContent(contentToInsert, after);\n              } else {\n                parent.$$.addContent(contentToInsert, notRecursive);\n              }\n            } else {\n              after = parent.$$.insertInStartOfIt(contentToInsert, moveFlag);\n            }\n          } else {\n            contentToInsert.into(parentElem, false);\n          }\n\n          if (moveFlag) {\n            this.$$.moveContent(contentToInsert, after);\n          } else {\n            this.$$.addContent(contentToInsert, true);\n          }\n\n          return after;\n        },\n        insertAfterIt: (contentToInsert, moveFlag) => {\n          const { prevBlock } = this.$$;\n          let after = afterElem;\n          let tryToAddOrMove;\n\n          if (this.$$.content.length) {\n            after = this.$$.content.elem(-1);\n            tryToAddOrMove = true;\n            contentToInsert.insertAfter(after);\n          } else if (prevBlock instanceof Block) {\n            after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n          } else if (prevBlock) {\n            after = prevBlock;\n            tryToAddOrMove = true;\n            contentToInsert.insertAfter(prevBlock);\n          } else if (isParentBlock) {\n            after = parent.$$.insertInStartOfIt(contentToInsert, moveFlag);\n          } else {\n            contentToInsert.into(parentElem, false);\n          }\n\n          if (isParentBlock && tryToAddOrMove) {\n            if (moveFlag) {\n              parent.$$.moveContent(contentToInsert, after);\n            } else {\n              parent.$$.addContent(contentToInsert);\n            }\n          }\n\n          return after;\n        }\n      }\n    });\n\n    iterateObject(constructor.defaultLocals, (value, variable) => {\n      this[variable] = value;\n    });\n    iterateArray(constructor._vars, (variable) => {\n      this[variable] = this[variable];\n    });\n\n    const argsObject = create(null);\n    let args = create(constructor.defaultArgs || null);\n    let wasDRest;\n\n    iterateObject(originalArgs, (value, arg) => {\n      const isDRest = D_REST_REGEX.test(arg);\n      const localArgs = isDRest || wasDRest\n        ? create(args)\n        : args;\n\n      args = localArgs;\n\n      if (isDRest) {\n        const restArgs = parentScope.$$.evaluate(value, (value) => {\n          iterateObject(localArgs, cleanProperty);\n          assign(localArgs, transformRestArgs(value));\n          calculateArgs(args, argsObject);\n        }, this);\n\n        wasDRest = true;\n\n        return assign(localArgs, transformRestArgs(restArgs));\n      }\n\n      const isDElements = name === 'd-elements';\n      const forDElements = isDElements && arg === 'value';\n\n      wasDRest = false;\n\n      if (name !== 'd-each' || arg !== 'uid') {\n        value = parentScope.$$.evaluate(value, (value) => {\n          localArgs[arg] = value;\n          calculateArgs(args, argsObject);\n        }, this, forDElements, isDElements && parentBlock.$$.name === '#d-item');\n      }\n\n      localArgs[arg] = value;\n    });\n\n    defineFrozenProperties(this, {\n      /**\n       * @member {Object} Block#args\n       * @type {Object}\n       * @public\n       */\n      args: argsObject,\n\n      /**\n       * @member {Object} Block#globals\n       * @type {Object}\n       * @public\n       */\n      globals: create(\n        parentScope\n          ? parentScope.globals\n          : null\n      )\n    });\n\n    calculateArgs(args, argsObject);\n\n    if (parentBlock) {\n      parentBlock.$$.children.push(this);\n    }\n  }\n\n  /**\n   * @method Block#afterConstruct\n   * @public\n   * @description Is called after block construction (including all scopes)\n   * but before rendering the block and its children.\n   */\n  afterConstruct() {}\n\n  /**\n   * @method Block#afterDOMChange\n   * @public\n   * @description Is called after block DOM structure has changed.\n   */\n  afterDOMChange() {}\n\n  /**\n   * @method Block#afterRender\n   * @public\n   * @description Is called after block has been rendered.\n   */\n  afterRender() {}\n\n  /**\n   * @method Block#beforeRemove\n   * @public\n   * @description Is called before the block removal.\n   */\n  beforeRemove() {}\n\n  /**\n   * @method Block#getChildBlocks\n   * @public\n   * @returns {Block[]}\n   * @description Returns child blocks.\n   */\n  getChildBlocks() {\n    return this.$$.blocks.slice();\n  }\n\n  /**\n   * @method Block#getChildBlocks\n   * @public\n   * @returns {Mixin[]}\n   * @description Returns child mixins.\n   */\n  getChildMixins() {\n    return this.$$.mixins.slice();\n  }\n\n  /**\n   * @method Block#getChildren\n   * @public\n   * @returns {Object[]}\n   * @description Returns Block HTML children.\n   */\n  getChildren() {\n    return this.$$.htmlChildren;\n  }\n\n  /**\n   * @method Block#getConstructor\n   * @public\n   * @returns {typeof Block}\n   * @description Returns Block constructor.\n   */\n  getConstructor() {\n    return this.$$.ns;\n  }\n\n  /**\n   * @method Block#getDOM\n   * @public\n   * @returns {Elem}\n   * @description Returns DOM contents of the block.\n   */\n  getDOM() {\n    return this.$$.content.slice();\n  }\n\n  /**\n   * @method Block#getParentBlock\n   * @public\n   * @returns {Block|void}\n   * @description Returns parent block.\n   */\n  getParentBlock() {\n    return this.$$.parentBlock;\n  }\n\n  /**\n   * @method Block#getParentElem\n   * @public\n   * @returns {Elem|void}\n   * @description Returns parent Elem.\n   */\n  getParentElem() {\n    return this.$$.parentElem.slice();\n  }\n\n  /**\n   * @method Block#getParentScope\n   * @public\n   * @returns {Block|void}\n   * @description Returns parent scope.\n   */\n  getParentScope() {\n    return this.$$.parentScope;\n  }\n\n  /**\n   * @method Block#getParentTemplate\n   * @public\n   * @returns {Block|void}\n   * @description Returns parent template.\n   */\n  getParentTemplate() {\n    return this.$$.parentTemplate;\n  }\n\n  /**\n   * @method Block#evaluate\n   * @public\n   * @param {Function} func - Function to evaluate.\n   * @param {Watcher} [callback] - If present, callback which is called when the expression value is changed.\n   * @param {Block|Mixin} [target = this] - What block or mixin requests the value.\n   * @returns {*} Evaluation result.\n   * @description Method for evaluating an expression in context of the block and watching for the changes.\n   */\n  evaluate(func, callback, target = this) {\n    return this.$$.evaluate(func, callback, target);\n  }\n\n  toString() {\n    return this.$$.name;\n  }\n\n  /**\n   * @method Block#watch\n   * @public\n   * @param {...('args'|'globals'|String)} [vars] - Vars to watch (args, globals or locals).\n   * If no specified all locals, args and globals are to be watched.\n   * If the 'args' string all args are to be watched.\n   * If the 'globals' string all globals are to be watched.\n   * @param {VarsWatcher} watcher - Called when watched vars are changed.\n   * @description Method for watching for vars. If no vars passed in arguments\n   * all vars are to be watched. If the 'args' string is in the arguments all args are to be watched.\n   * If the 'globals' string is in the arguments all globals are to be watched.\n   * Otherwise specified vars will be watched.\n   * Watchers should not be put inside the constructor. It is considered best\n   * practice to do it inside the {@link Block#afterConstruct} method.\n   * Note that these expressions (vars, i.e. \"args.arg\") are not to be\n   * evaluated so you cannot put there things like \"a[b]\" or any js code,\n   * only expressions like \"a\", \"b\", \"args.a\", \"args.b\" and \"globals.a\", \"globals.b\".\n   * Also note that if there are more than one var that are changed at once (synchronously)\n   * the watcher is called only once.\n   * Note that the watcher is executed right away because in most cases\n   * this behaviour is very convenient.\n   *\n   * @example\n   * class MyBlock extends Block {\n   *   static template = '<div />';\n   *\n   *   afterConstruct() {\n   *     this.watch('a', () => {});\n   *     this.watch('args.a', 'globals.r', () => {});\n   *     this.watch(() => {});\n   *   }\n   * }\n   */\n  watch(...vars) {\n    const oldWatcher = arguments[arguments.length - 1];\n\n    if (!isFunction(oldWatcher)) {\n      console.warn(`The last argument (watcher) wasn't specified (${ this.$$.name }#watch)`);\n\n      return;\n    }\n\n    const watcher = () => {\n      oldWatcher();\n    };\n\n    if (arguments.length === 1) {\n      watchForAllLocals(this, watcher);\n      watchForAllArgs(this, watcher);\n      watchForAllGlobals(this, watcher);\n\n      oldWatcher();\n\n      return;\n    }\n\n    iterateArray(arguments, (variable) => {\n      if (variable === oldWatcher) {\n        return;\n      }\n\n      variable = `${ variable }`;\n\n      if (variable === '$') {\n        return watchForAllLocals(this, watcher);\n      }\n\n      if (variable === 'args') {\n        return watchForAllArgs(this, watcher);\n      }\n\n      if (variable === 'globals') {\n        return watchForAllGlobals(this, watcher);\n      }\n\n      if (WATCHED_ARG_PREFIX_REGEX.test(variable)) {\n        variable = variable.replace(WATCHED_ARG_PREFIX_REGEX, '');\n\n        if (!this.$$.args[variable]) {\n          return;\n        }\n\n        this.$$.args[variable].watchers.perm.push(watcher);\n\n        return;\n      }\n\n      if (WATCHED_GLOBAL_PREFIX_REGEX.test(variable)) {\n        variable = variable.replace(WATCHED_GLOBAL_PREFIX_REGEX, '');\n\n        if (!this.$$.globals[variable]) {\n          return;\n        }\n\n        const { watchers } = this.$$.globals[variable];\n\n        watchers.perm.push(watcher);\n        this.$$.watchersToRemove.push({\n          watcher,\n          watchers\n        });\n\n        return;\n      }\n\n      if (!this.$$.locals[variable]) {\n        return;\n      }\n\n      this.$$.locals[variable].watchers.perm.push(watcher);\n    });\n\n    oldWatcher();\n  }\n}\n\nsetToStringTag(Block, 'Block');\nsetProto(Block.prototype, null);\n\nexport { Block };\n","import { findInArray } from '../utils';\nimport { Block } from '../Block';\nimport { rootBlocks } from '../constants';\n\nclass DBlock extends Block {\n  static template = html`\n    <d-elements\n      value=\"{elems}\"\n      parentScope=\"{ParentScope}\"\n      parentTemplate=\"{ParentTemplate}\"\n    />\n  `;\n\n  afterConstruct() {\n    const {\n      parentScope: {\n        $$: {\n          parentScope: parentParentScope,\n          parentTemplate: parentParentTemplate,\n          htmlChildren: children\n        }\n      },\n      htmlChildren: ownChildren,\n      parentTemplate,\n      dBlockName\n    } = this.$$;\n    let found;\n\n    if (ownChildren.length) {\n      return;\n    }\n\n    this.ParentScope = parentParentScope;\n    this.ParentTemplate = parentParentTemplate;\n\n    if (dBlockName) {\n      found = findInArray(children, ({ name: nodeName }) => nodeName === `d-block:${ dBlockName }`);\n\n      if (!found) {\n        let parent = this;\n\n        /* eslint no-empty: 0 */\n        while (\n          (parent = parent.$$.parentScope)\n          && !(found = findInArray(parent.$$.dBlocks, ({ $$: { dBlockName: DBlockName } }) => DBlockName === dBlockName))\n          && parent.$$.parentScope.$$.name === '#d-item'\n        ) {}\n\n        if (found) {\n          this.ParentScope = parent;\n          this.ParentTemplate = parentTemplate;\n          found.value = {\n            children: found.value.$$.htmlChildren\n          };\n        }\n      }\n\n      this.elems = found && found.value.children.length\n        ? found.value.children\n        : null;\n    } else {\n      this.elems = children;\n    }\n  }\n}\n\nrootBlocks['d-block'] = DBlock;\n\nexport { DBlock };\n","import { Block } from '../Block';\n\nconst template = html`\n  <d-elements\n    value=\"{$$.htmlChildren}\"\n    parentScope=\"{this}\"\n    parentTemplate=\"{$$.parentTemplate}\"\n  />\n`;\n\nclass DItem extends Block {\n  static template = template;\n  static _vars = template.vars;\n  static _html = template.value;\n}\n\nexport { DItem };\n","import {\n  assign, iterateArray, iterateObject,\n  isArray, isFunction\n} from '../utils';\nimport { remove, createBlock } from '../helpers/Block';\nimport { Block } from '../Block';\nimport { rootBlocks } from '../constants';\nimport { DItem } from './d-item';\n\nconst watchArgs = js`[\n  args.set,\n  args.filterBy,\n  args.sortBy\n]`;\n\nrootBlocks['d-each'] = class DEach extends Block {\n  constructor(opts) {\n    super(opts);\n\n    const {\n      args: {\n        item: itemName = '$item',\n        index: indexName = '$index'\n      }\n    } = this;\n\n    assign(this.$$, {\n      itemsByUIDs: {},\n      UID: this.args.uid || undefined,\n      itemName,\n      indexName\n    });\n  }\n\n  afterRender() {\n    this.evaluate(watchArgs, this.renderSet);\n    this.renderSet();\n  }\n\n  renderSet = () => {\n    const {\n      htmlChildren,\n      itemsByUIDs,\n      parentScope,\n      parentElem,\n      parentTemplate,\n      scope,\n      itemName,\n      indexName,\n      UID\n    } = this.$$;\n    const {\n      args: { sortBy }\n    } = this;\n    const newItemsByUIDs = {};\n    const newUIDsCounter = {};\n    const newUIDs = {};\n    let {\n      set,\n      filterBy\n    } = this.args;\n    const isArr = isArray(set);\n    const iterate = isArr\n      ? iterateArray\n      : iterateObject;\n\n    if (isArr && isFunction(sortBy)) {\n      set = set\n        .slice()\n        .sort(sortBy);\n    }\n\n    if (isFunction(filterBy)) {\n      filterBy = [filterBy];\n    }\n\n    if (isArray(filterBy)) {\n      iterateArray(filterBy, (filter) => {\n        set = set.filter(filter);\n      });\n    }\n\n    iterate(set, (item, index) => {\n      scope[itemName] = item;\n      scope[indexName] = index;\n\n      const uid = parentScope.$$.evaluate(UID, null, null, false, false, this);\n\n      newUIDsCounter[uid] = (newUIDsCounter[uid] || 0) + 1;\n      newUIDs[index] = uid;\n    });\n\n    scope[itemName] = null;\n    scope[indexName] = null;\n\n    iterateObject(itemsByUIDs, (items, uid) => {\n      if (!newUIDsCounter[uid]) {\n        iterateArray(items, remove);\n\n        return;\n      }\n\n      iterateArray(items.splice(newUIDsCounter[uid]), remove);\n    });\n\n    let prevBlock;\n\n    iterate(set, (item, index) => {\n      const uid = newUIDs[index];\n      let block;\n\n      if (itemsByUIDs[uid] && itemsByUIDs[uid].length) {\n        block = itemsByUIDs[uid].shift();\n        block.$$.scope[indexName] = index;\n        block.$$.scope[itemName] = item;\n\n        if (block.$$.prevBlock !== prevBlock && prevBlock) {\n          prevBlock.$$.insertAfterIt(block.$$.content, true);\n        }\n      } else {\n        block = createBlock({\n          node: {\n            itemName,\n            indexName,\n            item,\n            index,\n            name: '#d-item',\n            children: htmlChildren\n          },\n          Constructor: DItem,\n          parent: this,\n          parentElem,\n          parentBlock: this,\n          parentScope,\n          parentTemplate,\n          prevBlock\n        });\n      }\n\n      (newItemsByUIDs[uid] = newItemsByUIDs[uid] || []).push(block);\n      block.$$.prevBlock = prevBlock;\n      prevBlock = block;\n    });\n\n    this.$$.itemsByUIDs = newItemsByUIDs;\n  };\n};\n","import { iterateArray, removeArrayElem } from '../utils';\nimport { removeWithParentSignal, createBlock } from '../helpers/Block';\nimport { Block } from '../Block';\nimport { Elem } from '../Elem';\nimport { rootBlocks } from '../constants';\n\nconst watchArgs = js`args.value`;\n\nrootBlocks['d-elements'] = class DElements extends Block {\n  afterConstruct() {\n    const { parentElem } = this.$$;\n    const {\n      Constructor,\n      parentScope,\n      parentTemplate\n    } = this.args;\n\n    this.$$.evaluate(watchArgs, () => {\n      const {\n        children,\n        mixins,\n        parent,\n        watchersToRemove,\n        content\n      } = this.$$;\n      const { value } = this.args;\n\n      iterateArray(children, removeWithParentSignal);\n      iterateArray(mixins, removeWithParentSignal);\n      content.remove();\n\n      if (parent instanceof Block) {\n        parent.$$.removeContent(content);\n      }\n\n      this.$$.children = [];\n      this.$$.mixins = [];\n      this.$$.watchersToRemove = watchersToRemove.filter(({ watchers, watcher, forDElements }) => {\n        if (forDElements) {\n          return true;\n        }\n\n        removeArrayElem(watchers, watcher);\n      });\n      this.$$.content = new Elem();\n\n      let prevBlock;\n\n      iterateArray(value || [], (child) => {\n        prevBlock = createBlock({\n          node: child,\n          Constructor,\n          parent: this,\n          parentElem,\n          parentBlock: this,\n          parentScope,\n          parentTemplate,\n          prevBlock\n        });\n      });\n    }, this, true);\n  }\n};\n","import { findInArray } from '../utils';\nimport { Block } from '../Block';\nimport { rootBlocks } from '../constants';\n\nrootBlocks['d-if'] = class DIf extends Block {\n  static template = html`\n    <d-elements\n      value=\"{elems}\"\n      parentScope=\"{$$.parentScope}\"\n      parentTemplate=\"{$$.parentTemplate}\"\n    />\n  `;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      parentScope,\n      htmlChildren\n    } = this.$$;\n    let index = Infinity;\n    const values = htmlChildren.map((child, i) => {\n      const {\n        name,\n        attrs = {},\n        children\n      } = child;\n      let cond = attrs.if;\n\n      if (name !== 'd-else' && cond) {\n        cond = parentScope.$$.evaluate(cond, (newValue) => {\n          if (!!newValue === values[i]) {\n            return;\n          }\n\n          values[i] = !!newValue;\n\n          if (i > index) {\n            return;\n          }\n\n          if (i < index) {\n            index = i;\n            this.elems = children;\n\n            return;\n          }\n\n          const found = findInArray(values, Boolean);\n\n          if (found) {\n            index = found.key;\n            this.elems = htmlChildren[found.key].children;\n          } else {\n            index = Infinity;\n            this.elems = null;\n          }\n        }, this);\n      } else {\n        cond = true;\n      }\n\n      if (cond && index === Infinity) {\n        index = i;\n        this.elems = children;\n      }\n\n      return !!cond;\n    });\n  }\n};\n","import { findInArray, iterateArray, noop } from '../utils';\nimport { Block } from '../Block';\nimport { rootBlocks } from '../constants';\n\nconst watchArgs = js`args.value`;\n\nrootBlocks['d-switch'] = class DSwitch extends Block {\n  static template = html`\n    <d-elements\n      value=\"{elems}\"\n      parentScope=\"{$$.parentScope}\"\n      parentTemplate=\"{$$.parentTemplate}\"\n    />\n  `;\n\n  index = Infinity;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      $$: {\n        htmlChildren = [],\n        parentScope\n      },\n      args,\n      args: { value }\n    } = this;\n\n    this.values = htmlChildren.map((child, i) => {\n      const {\n        name,\n        attrs = [],\n        children\n      } = child;\n      let val = attrs.if || noop;\n\n      if (name === 'd-default') {\n        val = value;\n      } else {\n        val = parentScope.$$.evaluate(val, (newValue) => {\n          if (equals(this.values[i].value, newValue)) {\n            return;\n          }\n\n          this.values[i].value = newValue;\n\n          if (i > this.index) {\n            return;\n          }\n\n          if (i < this.index) {\n            this.index = i;\n            this.elems = children;\n\n            return;\n          }\n\n          const found = findInArray(this.values, ({ value }) => (\n            equals(value, args.value)\n          ));\n\n          if (found) {\n            this.index = found.key;\n            this.elems = found.value.children;\n          } else {\n            this.index = Infinity;\n            this.elems = null;\n          }\n        }, this);\n      }\n\n      if (equals(val, value) && this.index === Infinity) {\n        this.index = i;\n        this.elems = children;\n      }\n\n      return {\n        name,\n        children,\n        value: val\n      };\n    });\n  }\n\n  afterConstruct() {\n    this.evaluate(watchArgs, () => {\n      const {\n        value: newValue\n      } = this.args;\n\n      this.index = Infinity;\n\n      iterateArray(this.values, ({ name, value, children }, i) => {\n        const val = name === 'd-default'\n          ? newValue\n          : value;\n\n        if (equals(val, newValue) && this.index === Infinity) {\n          this.index = i;\n          this.elems = children;\n        }\n      });\n\n      if (this.index === Infinity) {\n        this.elems = null;\n      }\n    });\n  }\n};\n\nfunction equals(value1, value2) {\n  return value1 === value2;\n}\n","import { collectFromObject, iterateObject, keys } from '../utils';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-attr'] = class DAttr extends Mixin {\n  attrs = {};\n\n  afterUpdate(newValue) {\n    const {\n      elem,\n      args,\n      attrs\n    } = this;\n\n    if (args) {\n      newValue = collectFromObject(args, (attrs, attr) => {\n        attrs[attr] = newValue;\n      });\n    }\n\n    iterateObject(attrs, (value, prop) => {\n      if (!(prop in newValue)) {\n        elem.removeAttr(prop);\n      }\n    });\n    elem.attr(newValue);\n\n    this.attrs = newValue;\n  }\n\n  beforeRemove() {\n    const {\n      elem,\n      attrs\n    } = this;\n\n    elem.removeAttr.apply(elem, keys(attrs));\n  }\n};\n\n","import { isFunction, noop } from '../utils';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-bind'] = class DBind extends Mixin {\n  off = noop;\n\n  afterUpdate(value) {\n    this.off();\n\n    if (!isFunction(value)) {\n      return;\n    }\n\n    if (this.args) {\n      this.off = this.elem.on(this.args.join(','), value);\n    } else {\n      this.off = noop;\n\n      console.error('Provide \"d-bind\" mixin with an event names (like \"d-bind(click)\" or \"d-bind(keyup, keypress)\")!');\n    }\n  }\n\n  beforeRemove() {\n    this.off();\n  }\n};\n","import {\n  isArray, isString,\n  iterateArray, iterateObject\n} from '../utils';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nconst EMPTY_SPACE_REGEX = /\\s+/;\n\nrootMixins['d-class'] = class DClass extends Mixin {\n  classes = [];\n\n  afterUpdate(newValue) {\n    const {\n      elem,\n      args,\n      classes\n    } = this;\n    const newClasses = [];\n\n    if (args) {\n      newValue = newValue\n        ? args\n        : [];\n    }\n\n    if (isString(newValue)) {\n      newValue = newValue.split(EMPTY_SPACE_REGEX);\n    }\n\n    if (isArray(newValue)) {\n      iterateArray(classes, (cls) => {\n        if (newValue.indexOf(cls) === -1) {\n          elem.removeClass(cls);\n        }\n      });\n      iterateArray(newValue, (cls) => {\n        if (isString(cls)) {\n          newClasses.push(cls);\n          elem.addClass(cls);\n        }\n      });\n    } else {\n      iterateArray(classes, (cls) => {\n        if (!newValue || !newValue[cls]) {\n          elem.removeClass(cls);\n        }\n      });\n      iterateObject(newValue, (val, cls) => {\n        if (val) {\n          newClasses.push(cls);\n          elem.addClass(cls);\n        }\n      });\n    }\n\n    this.classes = newClasses;\n  }\n\n  beforeRemove() {\n    const {\n      elem,\n      classes\n    } = this;\n\n    elem.removeClass.apply(elem, classes);\n  }\n};\n","import { isFunction, isString } from '../utils';\nimport { Block } from '../Block';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-elem'] = class DElem extends Mixin {\n  static evaluate = false;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      args,\n      parentTemplate,\n      elem\n    } = this;\n    let scope = parentTemplate;\n    let value = this.evaluate();\n\n    if (args) {\n      scope = value instanceof Block\n        ? value\n        : parentTemplate;\n      value = args[0];\n    }\n\n    if (isFunction(value)) {\n      value(elem);\n    } else if (isString(value)) {\n      scope[value] = elem;\n    }\n  }\n};\n","import { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nclass DHide extends Mixin {\n  afterUpdate(value) {\n    const { elem } = this;\n\n    if (value) {\n      elem.hide();\n    } else {\n      elem.show();\n    }\n  }\n\n  beforeRemove() {\n    this.elem.show();\n  }\n}\n\nrootMixins['d-hide'] = DHide;\n\nexport { DHide };\n","import { isFunction, isString } from '../utils';\nimport { Block } from '../Block';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-node'] = class DNode extends Mixin {\n  static evaluate = false;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      args,\n      parentTemplate,\n      node\n    } = this;\n    let scope = parentTemplate;\n    let value = this.evaluate();\n\n    if (args) {\n      scope = value instanceof Block\n        ? value\n        : parentTemplate;\n      value = args[0];\n    }\n\n    if (isFunction(value)) {\n      value(node);\n    } else if (isString(value)) {\n      scope[value] = node;\n    }\n  }\n};\n","import { noop } from '../utils';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-on'] = class DOn extends Mixin {\n  static evaluate = false;\n\n  constructor(opts) {\n    super(opts);\n\n    if (this.args) {\n      this.off = this.elem.on(this.args.join(','), () => {\n        this.evaluate();\n      });\n    } else {\n      this.off = noop;\n\n      console.error('Provide \"d-on\" mixin with an event names (like \"d-on(click)\" or \"d-on(keyup, keypress)\")!');\n    }\n  }\n\n  beforeRemove() {\n    this.off();\n  }\n};\n","import { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-show'] = class DShow extends Mixin {\n  afterUpdate(value) {\n    const { elem } = this;\n\n    if (value) {\n      elem.show();\n    } else {\n      elem.hide();\n    }\n  }\n\n  beforeRemove() {\n    this.elem.show();\n  }\n};\n","import {\n  isString, iterateObject, keys,\n  collectFromObject, collectFromArray\n} from '../utils';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nconst CSS_STYLES_SEPARATOR_REGEX = /\\s*;\\s*/;\nconst CSS_STYLE_SEPARATOR_REGEX = /\\s*:\\s*/;\n\nrootMixins['d-style'] = class DStyle extends Mixin {\n  css = {};\n\n  afterUpdate(newValue, oldValue) {\n    const {\n      elem,\n      args,\n      css\n    } = this;\n\n    if (args) {\n      newValue = collectFromObject(args, (css, prop) => {\n        css[prop] = newValue;\n      });\n    }\n\n    if (isString(newValue)) {\n      newValue = collectFromArray(\n        newValue\n          .split(CSS_STYLES_SEPARATOR_REGEX)\n          .filter(Boolean)\n          .map(constructStyleFromString),\n        addCSSProp\n      );\n    }\n\n    iterateObject(css, (value, prop) => {\n      if (!newValue[prop]) {\n        elem.removeCSS(prop);\n      }\n    });\n    elem.css(newValue);\n\n    this.css = newValue;\n  }\n\n  beforeRemove() {\n    const {\n      elem,\n      css\n    } = this;\n\n    elem.removeCSS.apply(elem, keys(css));\n  }\n};\n\nfunction addCSSProp(css, item) {\n  const [prop, value] = item;\n\n  css[prop] = value;\n}\n\nfunction constructStyleFromString(style) {\n  const split = style.split(CSS_STYLE_SEPARATOR_REGEX);\n\n  return [\n    split[0].trim(),\n    split[1].trim()\n  ];\n}\n","import {\n  isFunction, isNil,\n  collectFromArray\n} from '../utils';\nimport { Block } from '../Block';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-value'] = class DValue extends Mixin {\n  static evaluate = false;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      args,\n      parentTemplate,\n      elem\n    } = this;\n    const name = elem.name();\n    const type = elem.prop('type');\n    const value = this.evaluate();\n    let initialScopeValue = null;\n\n    this.prop = getProp(name, type, elem);\n    this.name = name;\n    this.type = type;\n    this.value = value;\n    this.options = elem.find('option');\n    this.scope = parentTemplate;\n\n    if (args) {\n      this.scope = value instanceof Block\n        ? value\n        : parentTemplate;\n      this.value = args[0];\n    }\n\n    if (!isFunction(this.value)) {\n      initialScopeValue = this.scope.$$.evaluate((scope) => scope[this.value], (newValue) => {\n        if (this.currentValue !== newValue) {\n          this.currentValue = newValue;\n          this.setProp(newValue);\n        }\n      }, this);\n    }\n\n    const initialElemValue = this.getProp(initialScopeValue, true);\n    const isInitialScopeValueNull = isNil(initialScopeValue);\n    const isCheckbox = type === 'checkbox';\n    const changeScope = () => {\n      this.currentValue = this.getProp(this.currentValue, false);\n      this.changeScope();\n    };\n\n    if (isInitialScopeValueNull || isCheckbox) {\n      this.currentValue = initialElemValue;\n      this.changeScope();\n\n      if (!isInitialScopeValueNull && isCheckbox) {\n        this.setProp(initialScopeValue);\n      }\n    } else {\n      this.currentValue = initialScopeValue;\n      this.setProp(initialScopeValue);\n    }\n\n    this.offElemListener = elem.on(getListenerName(name, type), changeScope);\n    this.offFormListener = elem.closest('form').on('reset', () => {\n      setTimeout(changeScope, 0);\n    });\n  }\n\n  changeScope() {\n    const {\n      scope,\n      value,\n      currentValue\n    } = this;\n\n    if (isFunction(value)) {\n      value(currentValue);\n    } else {\n      scope[value] = currentValue;\n    }\n  }\n\n  setProp(value) {\n    const {\n      elem,\n      name,\n      prop,\n      type,\n      node,\n      options\n    } = this;\n\n    if (prop === 'text') {\n      elem.text(value);\n    } else if (prop === 'multiple-select') {\n      options.forEach((option) => {\n        option.selected = value.indexOf(option.value) !== -1;\n      });\n    } else {\n      elem.prop(prop, getValueForSetting(name, value, type, node.value));\n    }\n  }\n\n  getProp(values, init) {\n    const {\n      elem,\n      name,\n      prop,\n      type,\n      node,\n      options\n    } = this;\n\n    return prop === 'text'\n      ? elem.text()\n      : getValueForGetting(name, elem.prop(prop), type, node.value, values, options, init, prop === 'multiple-select');\n  }\n\n  beforeRemove() {\n    this.offElemListener();\n    this.offFormListener();\n  }\n};\n\nfunction getProp(name, type, elem) {\n  switch (name) {\n    case 'select': {\n      return elem.hasAttr('multiple')\n        ? 'multiple-select'\n        : 'value';\n    }\n\n    case 'input': {\n      if (type === 'file') {\n        return 'files';\n      }\n\n      return type === 'radio' || type === 'checkbox'\n        ? 'checked'\n        : 'value';\n    }\n\n    default: {\n      return elem.hasAttr('contentEditable')\n        ? 'text'\n        : 'value';\n    }\n  }\n}\n\nfunction getValueForSetting(name, value, type, inputValue) {\n  if (name !== 'input') {\n    return value;\n  }\n\n  const isRadio = type === 'radio';\n\n  if (!isRadio && type !== 'checkbox') {\n    return value;\n  }\n\n  return isRadio\n    ? value === inputValue\n    : value.indexOf(inputValue) !== -1;\n}\n\nfunction getValueForGetting(name, value, type, inputValue, values, options, init, isMultiple) {\n  switch (name) {\n    case 'select': {\n      if (!isMultiple) {\n        return value;\n      }\n\n      return collectFromArray(options, addValue, []);\n    }\n\n    case 'input': {\n      if (type !== 'radio' && type !== 'checkbox') {\n        return value;\n      }\n\n      if (type === 'radio') {\n        return value\n          ? inputValue\n          : null;\n      }\n\n      values = values || [];\n\n      if (!value && init) {\n        return values;\n      }\n\n      if (value) {\n        return values.indexOf(inputValue) === -1\n          ? values.concat(inputValue)\n          : values;\n      }\n\n      const index = values.indexOf(inputValue);\n\n      if (index !== -1) {\n        return [\n          ...values.slice(0, index),\n          ...values.slice(index + 1)\n        ];\n      }\n\n      return values;\n    }\n\n    default: {\n      return value;\n    }\n  }\n}\n\nfunction getListenerName(name, type) {\n  switch (name) {\n    case 'select': {\n      return 'change';\n    }\n\n    case 'input': {\n      return (\n        type === 'radio'\n        || type === 'checkbox'\n        || type === 'color'\n        || type === 'file'\n      )\n        ? 'change'\n        : 'change input';\n    }\n\n    default: {\n      return 'input';\n    }\n  }\n}\n\nfunction addValue(values, { selected, value }) {\n  if (selected && values.indexOf(value) === -1) {\n    values.push(value);\n  }\n}\n","import { iterateObject } from '../../utils';\nimport { rootBlocks, rootMixins } from '../../constants';\nimport { constructMixinRegex } from './constructMixinRegex';\n\niterateObject(rootBlocks, (Block) => {\n  Block._vars = Block.template.vars;\n  Block._html = Block.template.value;\n});\n\niterateObject(rootMixins, (Mixin, name) => {\n  Mixin._match = constructMixinRegex(name);\n});\n","import { Elem } from './Elem';\nimport { createHideStyleNode } from './helpers/Elem';\nimport { document } from './constants';\n\n/**\n * @const {Elem} doc\n * @type {Elem}\n * @public\n * @description Elem instance of document.\n */\nexport const doc = new Elem(document);\n\n/**\n * @const {Elem} html\n * @type {Elem}\n * @public\n * @description Elem instance of document.documentElement.\n */\nexport const html = new Elem(document.documentElement);\n\n/**\n * @const {Elem} body\n * @type {Elem}\n * @public\n * @description Elem instance of document.body.\n */\nexport const body = new Elem(document.body);\n\n/**\n * @const {Elem} head\n * @type {Elem}\n * @public\n * @description Elem instance of document.head.\n */\nexport const head = new Elem(document.head);\n\ncreateHideStyleNode(head);\n","import {\n  toObjectKeys,\n  assign, keys, create\n} from './utils';\n\nexport function insertTemplates(template, templates) {\n  const {\n    vars,\n    value\n  } = template;\n  const newTemplates = create(null);\n  const newVars = toObjectKeys(vars);\n\n  assign(newTemplates, templates);\n  iterateAndChangeChildren(value);\n\n  function iterateAndChangeChildren(nodes = []) {\n    for (let i = 0; i < nodes.length; i++) {\n      const {\n        name,\n        value,\n        children\n      } = nodes[i];\n\n      if (name === '#comment') {\n        const trimmed = value.trim();\n\n        if (newTemplates[trimmed]) {\n          const newTemplate = newTemplates[trimmed].value;\n\n          nodes.splice(i, 1, ...newTemplate);\n          assign(newVars, toObjectKeys(newTemplates[trimmed].vars));\n\n          i += newTemplate.length - 1;\n        }\n      } else {\n        iterateAndChangeChildren(children);\n      }\n    }\n  }\n\n  vars.length = 0;\n  vars.push(...keys(newVars));\n\n  return template;\n}\n","import { Block } from './Block';\nimport { Elem } from './Elem';\n\nexport function removeApp(container) {\n  const elem = new Elem(container).elem(0);\n\n  if (!elem.length) {\n    throw new Error('No valid element to remove the app from was given! (removeApp)');\n  }\n\n  container = elem[0];\n\n  const { DwayneRootBlock } = container;\n\n  if (!(DwayneRootBlock instanceof Block)) {\n    throw new Error('No app registered inside the given element! (removeApp)');\n  }\n\n  DwayneRootBlock.$$.remove();\n  elem.removeAttr('dwayne-root');\n\n  delete container.DwayneRootBlock;\n}\n"],"names":["window","global","self","collectFromArray","array","callback","initialValue","value","index","findInArray","i","length","iterateArray","removeArrayElem","elem","indexOf","splice","toObjectKeys","addKey","vars","variable","has","hasOwnProperty","slice","assign","target","arguments","source","key","collectFromObject","object","except","newObject","paths","iterateObject","mapObject","defineProperties","Object","definePrototypeProperties","properties","name","defineProperty","defineFrozenProperties","Symbol","toString","toStringTag","setToStringTag","tag","prototype","isArray","Array","isFunction","isNil","isString","regexpSpecialCharacters","regexpSpecialsRegexp","RegExp","map","s","join","escapeRegex","string","replace","noop","create","keys","getProto","getPrototypeOf","setProto","setPrototypeOf","proto","__proto__","DASHED_SYMBOL_REGEX","UPPERCASED_SYMBOL_REGEX","toCamelCase","capitalize","toHyphenCase","hyphenize","match","toUpperCase","toLowerCase","addAttr","attrs","attr","CSS_PROP_VALUE_SEPARATOR_REGEX","addCSSProp","css","property","split","addDataAttr","data","addNext","add","nextSibling","addParent","parentNode","addPrev","previousSibling","HIDE_CLASS","SVG_NS","D_REST_REGEX","rootBlocks","rootMixins","Scope","document","createHideStyleNode","head","style","find","prop","text","X_LINK_ATTR_FIND_REGEX","X_LINK_ATTR_REPLACE_REGEX","XML_NS","X_LINK_NS","Null","getAttrNS","isXmlNs","nodeName","test","Elem","closest","hide","ownerDocument","addClass","isElem","HTML_COLLECTION_REGEX","isElementsCollection","isHTMLDocument","ELEMENT_REGEX","isValidNode","remove","parent","removeChild","show","removeClass","toElem","selector","base","querySelectorAll","String","EVENT_SEPARATOR_REGEX","CSS_STYLES_SEPARATOR_REGEX","CSS_IMPORTANT_REGEX","EVENT_REGEX","XHTML_NS","emptyCollection","methodName","method","includes","push","elems","forEach","list","classList","cls","attributes","ns","getAttributeNS","getAttribute","removeAttr","setAttributeNS","setAttribute","childNodes","collect","is","elements","cb","element","child","contains","type","el","isText","createTextNode","createComment","namespaceURI","documentElement","createElementNS","into","cssText","getPropertyValue","getPropertyPriority","removeCSS","removeProperty","setProperty","dataset","event","details","bubbles","cancelable","realDetails","finalEvent","Event","err","createEvent","initEvent","dispatchEvent","filterFn","Boolean","hasAttributeNS","hasAttribute","html","innerHTML","next","insertBefore","appendChild","end","firstChild","matches","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","undefined","listener","newEvents","allListeners","listeners","addEventListener","removeEventListener","removeEventListeners","removeListeners","removeListener","removeAttributeNS","removeAttribute","first","prev","babelHelpers.get","apply","textContent","condition","hasAttr","toggle","species","calculateArgs","args","argsObject","arg","cleanProperty","constructMixinRegex","COMMA_REGEX","mixinMatch","mixins","Mixin","localMatch","_match","argsMatch","transformRestAttrs","mixinDefaultOpts","eventualAttrs","transformRestArgs","addArgs","executeMixinWatchers","mixin","oldValue","$$","watchers","watcher","createMixin","dynamic","comment","parentBlock","parentScope","parentTemplate","evaluate","newValue","afterUpdate","error","calculateAttrs","attrsObject","firstTime","opts","nextType","nextDynamic","nextValue","prevType","prevValue","isDynamic","evaluated","buildMixin","firstValue","constructPrivateScope","scope","globals","removeTempWatcher","onRemove","removeWatchers","watchersToRemove","removeWatcher","changed","constructPublicScope","scopeValues","privateScope","evalMode","gettingVars","temp","oldTempWatchers","was","values","perm","NAMED_D_BLOCK_REGEX","createBlock","node","Constructor","parentElem","prevBlock","doc","localBlocks","_blocks","Block","localMixins","_mixins","children","constructor","dBlockMatch","dBlockName","dBlockArgs","dBlockChildren","dElementsName","dElementsConstructor","blockInstance","currentAttrs","wasDRest","isDRest","localAttrs","restAttrs","createMixins","content","isParentBlock","insertAfterIt","insertAfter","addContent","insertInStartOfIt","Args","locals","newName","newConstructor","_html","itemName","item","indexName","afterConstruct","isRendered","afterRender","isPrototypeOf","isInstanceOf","Class","Subclass","removeWithParentSignal","watchForAllLocals","block","watchForAllGlobals","glob","watchForAllArgs","wrappers","reduce","wrapMixin","_value","currentValue","isParentSignal","isRemoved","beforeRemove","wrapBlock","wrapper","returnValue","initApp","container","Error","RootBlock","_vars","blockHooks","mixinHooks","TAG_NAME_REGEX","ATTR_NAME_REGEX","WATCHED_ARG_PREFIX_REGEX","WATCHED_GLOBAL_PREFIX_REGEX","afterElem","rootVars","rootTemplate","original","expression","hook","template","warn","defaultLocals","defaultArgs","currentReturnValue","originalArgs","childrenBlocks","func","onChange","targetBlock","forDElements","forDItem","forDEach","onChangeFlag","result","onEvalError","e","localWatchers","newResult","watcherBlock","removeContent","newContent","afterDOMChange","contentToAdd","notRecursive","oldContent","changeContent","contentToMove","after","indexToPut","moveContent","contentToRemove","filter","contentToInsert","moveFlag","tryToAddOrMove","localArgs","restArgs","isDElements","blocks","htmlChildren","oldWatcher","DBlock","parentParentScope","parentParentTemplate","ownChildren","found","ParentScope","ParentTemplate","dBlocks","DBlockName","DItem","watchArgs","uid","renderSet","itemsByUIDs","UID","sortBy","newItemsByUIDs","newUIDsCounter","newUIDs","set","filterBy","isArr","iterate","sort","items","shift","Infinity","cond","if","val","equals","value1","value2","off","on","EMPTY_SPACE_REGEX","classes","newClasses","DHide","CSS_STYLE_SEPARATOR_REGEX","constructStyleFromString","trim","initialScopeValue","getProp","options","setProp","initialElemValue","isInitialScopeValueNull","isCheckbox","changeScope","offElemListener","getListenerName","offFormListener","option","selected","getValueForSetting","init","getValueForGetting","inputValue","isRadio","isMultiple","addValue","concat","body","insertTemplates","templates","newTemplates","newVars","iterateAndChangeChildren","nodes","trimmed","newTemplate","removeApp","DwayneRootBlock"],"mappings":";;;AAAA;;AAEA,eAAe,OAAOA,MAAP,KAAkB,WAAlB,GAAgCA,MAAhC,GAAyC,OAAOC,MAAP,KAAkB,WAAlB,GAAgCA,MAAhC,GAAyC,OAAOC,IAAP,KAAgB,WAAhB,GAA8BA,IAA9B,GAAqC,EAAtI;;ACFO,SAASC,gBAAT,CAA0BC,KAA1B,EAAiCC,QAAjC,EAA8D;MAAnBC,YAAmB,uEAAJ,EAAI;;eACtDF,KAAb,EAAoB,UAACG,KAAD,EAAQC,KAAR,EAAkB;aAC3BF,YAAT,EAAuBC,KAAvB,EAA8BC,KAA9B,EAAqCJ,KAArC;GADF;;SAIOE,YAAP;;;AAGF,AAAO,SAASG,WAAT,CAAqBL,KAArB,EAA4BC,QAA5B,EAAsC;OACtC,IAAIK,IAAI,CAAR,EAAWC,SAASP,MAAMO,MAA/B,EAAuCD,IAAIC,MAA3C,EAAmDD,GAAnD,EAAwD;QAChDH,QAAQH,MAAMM,CAAN,CAAd;;QAEIL,SAASE,KAAT,EAAgBG,CAAhB,EAAmBN,KAAnB,CAAJ,EAA+B;aACtB;aACAM,CADA;;OAAP;;;;;AAQN,AAAO,SAASE,YAAT,CAAsBR,KAAtB,EAA6BC,QAA7B,EAAuC;OACvC,IAAIK,IAAI,CAAR,EAAWC,SAASP,MAAMO,MAA/B,EAAuCD,IAAIC,MAA3C,EAAmDD,GAAnD,EAAwD;aAC7CN,MAAMM,CAAN,CAAT,EAAmBA,CAAnB,EAAsBN,KAAtB;;;;AAIJ,AAAO,SAASS,eAAT,CAAyBT,KAAzB,EAAgCU,IAAhC,EAAsC;MACrCN,QAAQJ,MAAMW,OAAN,CAAcD,IAAd,CAAd;;MAEIN,UAAU,CAAC,CAAf,EAAkB;UACVQ,MAAN,CAAaR,KAAb,EAAoB,CAApB;;;;AAIJ,AAAO,SAASS,YAAT,CAAsBb,KAAtB,EAA6B;SAC3BD,iBAAiBC,KAAjB,EAAwBc,MAAxB,CAAP;;;AAGF,SAASA,MAAT,CAAgBC,IAAhB,EAAsBC,QAAtB,EAAgC;OACzBA,QAAL,IAAiB,IAAjB;;;aCpCE;IADcC,aAAhBC;IAEMC,QAAU,GAAVA;;;AAER,AAAO,SAASC,MAAT,CAAgBC,MAAhB,EAAwB;eAChBC,SAAb,EAAwB,UAACC,MAAD,EAASnB,KAAT,EAAmB;QACrCA,KAAJ,EAAW;oBACKmB,MAAd,EAAsB,UAACpB,KAAD,EAAQqB,GAAR,EAAgB;eAC7BA,GAAP,IAAcrB,KAAd;OADF;;GAFJ;;SAQOkB,MAAP;;;AAGF,AAAO,SAASI,iBAAT,CAA2BC,MAA3B,EAAmCzB,QAAnC,EAAgE;MAAnBC,YAAmB,uEAAJ,EAAI;;gBACvDwB,MAAd,EAAsB,UAACvB,KAAD,EAAQqB,GAAR,EAAgB;aAC3BtB,YAAT,EAAuBC,KAAvB,EAA8BqB,GAA9B,EAAmCE,MAAnC;GADF;;SAIOxB,YAAP;;;AAGF,AAAO,SAASyB,MAAT,CAAgBD,MAAhB,EAAwB;MACvBE,YAAY,EAAlB;MACMC,QAAmBV,KAAX,iBAAiB,CAAjB,CAAd;;gBAEcO,MAAd,EAAsB,UAACvB,KAAD,EAAQqB,GAAR,EAAgB;QAChCK,MAAMlB,OAAN,CAAca,GAAd,MAAuB,CAAC,CAA5B,EAA+B;gBACnBA,GAAV,IAAiBrB,KAAjB;;GAFJ;;SAMOyB,SAAP;;;AAGF,AAAO,SAASV,cAAT,CAAwBQ,MAAxB,EAAgCF,GAAhC,EAAqC;SAC3BP,GAAR,cAAYO,GAAZ,CAAP;;;AAGF,AAAO,SAASM,aAAT,CAAuBJ,MAAvB,EAA+BzB,QAA/B,EAAyC;OACzC,IAAMuB,GAAX,IAAkBE,MAAlB,EAA0B;QACpBR,eAAeQ,MAAf,EAAuBF,GAAvB,CAAJ,EAAiC;eACtBE,OAAOF,GAAP,CAAT,EAAsBA,GAAtB,EAA2BE,MAA3B;;;;;AAKN,AAAO,SAASK,SAAT,CAAmBL,MAAnB,EAA2BzB,QAA3B,EAAqC;MACpC2B,YAAY,EAAlB;;gBAEcF,MAAd,EAAsB,UAACvB,KAAD,EAAQqB,GAAR,EAAgB;cAC1BA,GAAV,IAAiBvB,SAASE,KAAT,EAAgBqB,GAAhB,EAAqBE,MAArB,CAAjB;GADF;;SAIOE,SAAP;;;ACzDF;;;;;;;IAOeI,mBAAqBC,OAArBD;AAEf,AAAO,SAASE,yBAAT,CAAmCb,MAAnC,EAA2Cc,UAA3C,EAAuD;gBAC9CA,UAAd,EAA0B,UAAChC,KAAD,EAAQiC,IAAR,EAAiB;WAClCC,cAAP,CAAsBhB,MAAtB,EAA8Be,IAA9B,EAAoC;kBAAA;gBAExB,IAFwB;kBAGtB,KAHsB;oBAIpB;KAJhB;GADF;;;;;;;;;;AAiBF,AAAO,SAASE,sBAAT,CAAgCjB,MAAhC,EAAwCc,UAAxC,EAAoD;gBAC3CA,UAAd,EAA0B,UAAChC,KAAD,EAAQiC,IAAR,EAAiB;WAClCC,cAAP,CAAsBhB,MAAtB,EAA8Be,IAA9B,EAAoC;kBAAA;gBAExB,KAFwB;kBAGtB,KAHsB;oBAIpB;KAJhB;GADF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gBC5BiBvC;IAAX0C,sBAAAA;WACa;IAAbC,gBAAAA;;;;;;;;;AAQR,AAAO,SAASC,WAAT,CAAqBf,MAArB,EAA6B;SACnBc,QAAR,cAAmBrB,KAAnB,CAAyB,CAAzB,EAA4B,CAAC,CAA7B,CAAP;;;AAGF,AAAO,SAASuB,cAAT,CAAwBhB,MAAxB,EAAgCiB,GAAhC,EAAqC;MACtCJ,aAAUA,UAAOE,WAArB,EAAkC;8BACNf,OAAOkB,SAAjC,qBACGL,UAAOE,WADV,EACwBE,GADxB;;;;ACjBJ;;;;;;;AAOA,AAEA;;;;;;;;;;;IAWeE,UAAYC,MAAZD;;AAEf,AAaA,AAAO,SAASE,UAAT,CAAoB5C,KAApB,EAA2B;SACzBsC,YAAYtC,KAAZ,MAAuB,UAAvB,IAAqC,OAAOA,KAAP,KAAiB,UAA7D;;;;;;;;;;;;;;AAcF,AAAO,SAAS6C,KAAT,CAAe7C,KAAf,EAAsB;;SAEpBA,SAAS,IAAhB;;;;;;;;;;;;;AAaF,AAAO,SAAS8C,QAAT,CAAkB9C,KAAlB,EAAyB;SACvBsC,YAAYtC,KAAZ,MAAuB,QAA9B;;;AClEF,IAAM+C,0BAA0B,CAC9B,GAD8B,EAE9B,GAF8B,EAEzB,GAFyB,EAEpB,GAFoB,EAG9B,GAH8B,EAGzB,GAHyB,EAI9B,GAJ8B,EAIzB,GAJyB,EAK9B,GAL8B,EAKzB,GALyB,EAM9B,GAN8B,EAMzB,GANyB,EAO9B,GAP8B,EAOzB,GAPyB,EAQ9B,GAR8B,EAS9B,GAT8B,EAU9B,GAV8B,EAW9B,GAX8B,EAY9B,GAZ8B,EAa9B,GAb8B,EAc9B,IAd8B,CAAhC;AAgBA,IAAMC,uBAAuB,IAAIC,MAAJ,CAC3BF,wBACGG,GADH,CACO,UAACC,CAAD;gBAAaA,CAAb;CADP,EAEGC,IAFH,CAEQ,GAFR,CAD2B,EAI3B,GAJ2B,CAA7B;;AAOA,AAAO,SAASC,WAAT,CAAqBC,MAArB,EAA6B;SAC3BA,OAAOC,OAAP,CAAeP,oBAAf,EAAqC,MAArC,CAAP;;;ACxBK,SAASQ,IAAT,GAAgB;;ICCrBC,SAGE3B,OAHF2B;IACAC,OAEE5B,OAFF4B;IACgBC,WACd7B,OADF8B;AAGF,AAAO,IAAMC,WAAW/B,OAAOgC,cAAP,IAA0B,UAAC5C,MAAD,EAAS6C,KAAT,EAAmB;;SAE5DC,SAAP,GAAmBD,KAAnB;CAFK;;ACNP,IAAME,sBAAsB,SAA5B;AACA,IAAMC,0BAA0B,QAAhC;;AAEA,AAAO,SAASC,WAAT,CAAqBnE,KAArB,EAA4B;SAC1BA,MAAMuD,OAAN,CAAcU,mBAAd,EAAmCG,UAAnC,CAAP;;;AAGF,AAAO,SAASC,YAAT,CAAsBrE,KAAtB,EAA6B;SAC3BA,MAAMuD,OAAN,CAAcW,uBAAd,EAAuCI,SAAvC,CAAP;;;AAGF,SAASF,UAAT,CAAoBG,KAApB,EAA2B;SAClBA,MAAM,CAAN,EAASC,WAAT,EAAP;;;AAGF,SAASF,SAAT,CAAmBC,KAAnB,EAA0B;eACZA,MAAM,CAAN,EAASE,WAAT,EAAZ;;;AChBK,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,IAAxB,EAA8B;QAC7BA,KAAK3C,IAAX,IAAmB2C,KAAK5E,KAAxB;;;ACCF,IAAM6E,iCAAiC,IAAvC;;AAEA,AAAO,SAASC,UAAT,CAAoBC,GAApB,EAAyB/E,KAAzB,EAAgC;MACjCA,KAAJ,EAAW;QACHgF,WAAWhF,MAAMiF,KAAN,CAAYJ,8BAAZ,CAAjB;;QAEIV,YAAYa,SAAS,CAAT,CAAZ,CAAJ,IAAgCA,SAAS,CAAT,CAAhC;;;;ACRG,SAASE,WAAT,CAAqBC,IAArB,EAA2BnF,KAA3B,EAAkCqB,GAAlC,EAAuC;OACvCA,GAAL,IAAYrB,KAAZ;;;ACDK,SAASoF,OAAT,CAAiBC,GAAjB,EAAsB9E,IAAtB,EAA4B;MAC7BA,KAAK+E,WAAT;;;ACDK,SAASC,SAAT,CAAmBF,GAAnB,EAAwB9E,IAAxB,EAA8B;MAC/BA,KAAKiF,UAAT;;;ACDK,SAASC,OAAT,CAAiBJ,GAAjB,EAAsB9E,IAAtB,EAA4B;MAC7BA,KAAKmF,eAAT;;;ACCK,IAAMC,aAAa,mBAAnB;AACP,AAAO,IAAMC,SAAS,4BAAf;AACP,AAAO,IAAMC,eAAe,gBAArB;;AAEP,AAAO,IAAMC,aAAarC,OAAO,IAAP,CAAnB;AACP,AAAO,IAAMsC,aAAatC,OAAO,IAAP,CAAnB;AACP,AAAO,IAAMuC,QAAQ;YACT,KADS;eAEN;CAFR;gBAMHtG;iCADFuG;IAAAA,4CAAW;;ACXN,SAASC,mBAAT,CAA6BC,IAA7B,EAAmC;MAClCC,QAAQD,KAAKE,IAAL,YAAoBV,UAApB,CAAd;;MAEIS,MAAMhG,MAAV,EAAkB;;;;OAKfqD,MADH,CACU,OADV,EAEG6C,IAFH,CAEQ,IAFR,EAEcX,UAFd,EAGGY,IAHH,OAGaZ,UAHb;;;ACPF,IAAMa,yBAAyB,WAA/B;AACA,IAAMC,4BAA4B,SAAlC;AACA,IAAMC,SAAS,+BAAf;AACA,IAAMC,YAAY,8BAAlB;AACA,IAAMC,OAAO;MACP;CADN;;AAIA,AAAO,SAASC,SAAT,CAAmBjC,IAAnB,EAAyBrE,IAAzB,EAA+B;MAC9BuG,UAAUlC,SAAS,OAAzB;;MAEIkC,WAAWlC,SAAS,aAAxB,EAAuC;QACjCrE,KAAKwG,QAAL,KAAkB,KAAtB,EAA6B;aACpBH,IAAP;;;WAGK;UACDF,MADC;YAECI,UACF,OADE,GAEF;KAJN;;;MAQEN,uBAAuBQ,IAAvB,CAA4BpC,IAA5B,CAAJ,EAAuC;QACjC,CAAC,IAAIqC,IAAJ,CAAS1G,IAAT,EAAe2G,OAAf,CAAuB,KAAvB,EAA8B9G,MAAnC,EAA2C;aAClCwG,IAAP;;;WAGK;UACDD,SADC;YAEC/B,KAAKrB,OAAL,CAAakD,yBAAb,EAAwC,EAAxC;KAFR;;;SAMKG,IAAP;;;ACjCK,SAASO,IAAT,CAAc5G,IAAd,EAAoB;sBACL,IAAI0G,IAAJ,CAAS1G,KAAK6G,aAAL,CAAmBjB,IAA5B,CAApB;MACIc,IAAJ,CAAS1G,IAAT,EAAe8G,QAAf,CAAwB1B,UAAxB;;;ACJK,SAAS2B,MAAT,CAAgBtH,KAAhB,EAAuB;SACrBA,iBAAiBiH,IAAxB;;;ACAF,IAAMM,wBAAwB,6BAA9B;;AAEA,AAAO,SAASC,oBAAT,CAA8BxH,KAA9B,EAAqC;SAExCuH,sBAAsBP,IAAtB,CAA2B1E,YAAYtC,KAAZ,CAA3B,KACGsH,OAAOtH,KAAP,CADH,IAEG0C,QAAQ1C,KAAR,CAHL;;;ACJK,SAASyH,cAAT,CAAwBzH,KAAxB,EAA+B;SAC7BsC,YAAYtC,KAAZ,MAAuB,cAA9B;;;ACDF,IAAM0H,gBAAgB,UAAtB;;AAEA,AAAO,SAASC,WAAT,CAAqB3H,KAArB,EAA4B;MAC3BwC,MAAMF,YAAYtC,KAAZ,CAAZ;;SAGE0H,cAAcV,IAAd,CAAmBxE,GAAnB,KACGA,QAAQ,cADX,IAEGA,QAAQ,MAFX,IAGGA,QAAQ,kBAHX,IAIGA,QAAQ,SALb;;;ACPK,SAASoF,MAAT,CAAgBrH,IAAhB,EAAsB;MACrBsH,SAAStH,KAAKiF,UAApB;;MAEIqC,MAAJ,EAAY;WACHC,WAAP,CAAmBvH,IAAnB;;;;ACDG,SAASwH,IAAT,CAAcxH,IAAd,EAAoB;MACrB0G,IAAJ,CAAS1G,IAAT,EAAeyH,WAAf,CAA2BrC,UAA3B;;;ACDK,SAASsC,MAAT,CAAgB1H,IAAhB,EAAsB;SACpB+G,OAAO/G,IAAP,IACHA,IADG,GAEH,IAAI0G,IAAJ,CAAS1G,IAAT,CAFJ;;;ACDF;;;;;;;;;AASA,AAAO,SAAS8F,IAAT,CAAc6B,QAAd,EAAyC;MAAjBC,IAAiB,uEAAVlC,QAAU;;SACvC,IAAIgB,IAAJ,CAASkB,KAAKC,gBAAL,CAAsBC,OAAOH,QAAP,CAAtB,CAAT,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cCwCiBxI;IAAX0C,kBAAAA;;AACR,IAAMkG,wBAAwB,WAA9B;AACA,IAAMC,6BAA6B,KAAnC;AACA,IAAMC,sBAAsB,eAA5B;AACA,IAAMC,cAAc,QAApB;AACA,IAAMC,WAAW,8BAAjB;AACA,IAAMC,kBAAkB,EAAxB;;;;;;;;;;;;;;;;IAeM1B;;;;;;;;;;;;;+BASc2B,YAAYC,QAAQ;UAChC1H,UAAUf,MAAV,IAAoB,CAAxB,EAA2B;wCACTwI,UAAhB,EAA6BC,MAA7B;;;gCAGwB,KAAKpG,SAA/B,EAA0CmG,UAA1C;;aAEO,IAAP;;;;kBAGkC;QAAxBrI,IAAwB,uEAAjBoI,eAAiB;;;;;QAG9B,CAACnB,qBAAqBjH,IAArB,CAAL,EAAiC;aACxB,CAACA,IAAD,CAAP;;;oBAGa0G,KAAKxE,SAApB;;iBAEalC,IAAb,EAAmB,UAACA,IAAD,EAAU;UACvB,CAACiH,qBAAqBjH,IAArB,CAAL,EAAiC;eACxB,CAACA,IAAD,CAAP;;;mBAGWA,IAAb,EAAmB,UAACA,IAAD,EAAU;YACvB,CAAC,MAAKuI,QAAL,CAAcvI,IAAd,CAAD,IAAwBoH,YAAYpH,IAAZ,CAA5B,EAA+C;gBACxCwI,IAAL,CAAUxI,IAAV;;OAFJ;KALF;;;;;;;;;;;;;;;;;;;;0BAyBI;UACEyI,QAAQ,KAAKhI,KAAL,EAAd;;mBAEaG,SAAb,EAAwB,UAACZ,IAAD,EAAU;YAC5B,CAACiH,qBAAqBjH,IAArB,CAAL,EAAiC;iBACxB,CAACA,IAAD,CAAP;;;qBAGWA,IAAb,EAAmB,UAACA,IAAD,EAAU;cACvB,CAACyI,MAAMF,QAAN,CAAevI,IAAf,CAAD,IAAyBoH,YAAYpH,IAAZ,CAA7B,EAAgD;kBACxCwI,IAAN,CAAWxI,IAAX;;SAFJ;OALF;;aAYOyI,KAAP;;;;;;;;;;;;;;;;+BAaS;;;aACF,KAAKC,OAAL,CAAa,UAAC1I,IAAD,EAAU;YACtB2I,OAAO3I,KAAK4I,SAAlB;;iCAEwB,UAACC,GAAD;iBAASF,KAAK7D,GAAL,CAAS+D,GAAT,CAAT;SAAxB;OAHK,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;yBA4BGxE,OAAM5E,OAAO;UACVO,OAAO,KAAK,CAAL,CAAb;;UAEI,CAACY,UAAUf,MAAf,EAAuB;YACjB,CAACG,IAAL,EAAW;iBACF,EAAP;;;eAGKX,iBAAiBW,KAAK8I,UAAtB,EAAkC3E,OAAlC,CAAP;;;UAGEvD,UAAUf,MAAV,IAAoB,CAApB,IAAyB0C,SAAS8B,KAAT,CAA7B,EAA6C;YACvC,CAACrE,IAAL,EAAW;iBACF,IAAP;;;yBAMEsG,UAAUjC,KAAV,EAAgBrE,IAAhB,CARuC;YAMzC+I,EANyC,cAMzCA,EANyC;YAOzCrH,IAPyC,cAOzCA,IAPyC;;eAUpCqH,KACH/I,KAAKgJ,cAAL,CAAoBD,EAApB,EAAwBrH,IAAxB,CADG,GAEH1B,KAAKiJ,YAAL,CAAkB5E,KAAlB,CAFJ;;;UAKEzD,UAAUf,MAAV,IAAoB,CAAxB,EAA2B;mCACfwE,KAAV,EAAiB5E,KAAjB;;;aAGK,KAAKiJ,OAAL,CAAa,UAAC1I,IAAD,EAAU;sBACdqE,KAAd,EAAoB,UAAC5E,KAAD,EAAQqB,GAAR,EAAgB;cAC9BwB,MAAM7C,KAAN,KAAgBA,UAAU,KAA9B,EAAqC;mBAC5B,IAAIiH,IAAJ,CAAS1G,IAAT,EAAekJ,UAAf,CAA0BpI,GAA1B,CAAP;;;kBAGMrB,UAAU,IAAV,GAAiB,EAAjB,GAAsBA,KAA9B;;4BAEe6G,UAAUxF,GAAV,EAAed,IAAf,CAPmB;cAO1B+I,EAP0B,eAO1BA,EAP0B;;cAS9BA,EAAJ,EAAQ;iBACDI,cAAL,CAAoBJ,EAApB,EAAwBjI,GAAxB,EAA6BrB,KAA7B;WADF,MAEO;iBACA2J,YAAL,CAAkBtI,GAAlB,EAAuBrB,KAAvB;;SAZJ;OADK,CAAP;;;;;;;;;;;;;;;+BA4BS;aACF,IAAIiH,IAAJ,CAAS,KAAK7G,MAAL,GAAc,KAAK,CAAL,EAAQwJ,UAAtB,GAAmC,EAA5C,CAAP;;;;;;;;;;;;;;4BAWM1B,UAAU;aACT,KAAK2B,OAAL,CAAa,UAACxE,GAAD,EAAM9E,IAAN,EAAe;eAC1BA,IAAP,EAAa;cACP,IAAI0G,IAAJ,CAAS1G,IAAT,EAAeuJ,EAAf,CAAkB5B,QAAlB,CAAJ,EAAiC;mBACxB7C,IAAI9E,IAAJ,CAAP;;;iBAGKA,KAAKiF,UAAZ;;OANG,CAAP;;;;4BAWM1F,UAAU;;;UACViK,WAAW,EAAjB;UACMC,KAAOD,SAAShB,IAAhB,MAAOgB,QAAP,CAAN;;WAEKd,OAAL,CAAa,UAAC1I,IAAD,EAAON,KAAP,EAAiB;iBACnB+J,EAAT,EAAazJ,IAAb,EAAmBN,KAAnB;OADF;;aAIO,IAAIgH,IAAJ,CAAS8C,QAAT,CAAP;;;;;;;;;;;;;;;;;6BAcOE,SAAS;UACVpC,SAAS,KAAK,CAAL,CAAf;UACMqC,QAAQjC,OAAOgC,OAAP,EAAgB,CAAhB,CAAd;;aAEO,CAACpC,MAAD,IAAW,CAACqC,KAAZ,GACH,KADG,GAEHrC,OAAOsC,QAAP,CAAgBD,KAAhB,CAFJ;;;;;;;;;;;;;;;;;;8BAiBKE,MAAM;aACJ,KAAKP,OAAL,CAAa,UAACxE,GAAD,EAAM9E,IAAN,EAAe;YAC7B8J,KAAK,IAAT;YACMC,SAASF,SAAS,OAAxB;YACMnE,cAAWwB,eAAelH,IAAf,IACbA,IADa,GAEbA,KAAK6G,aAFT;;YAIIkD,UAAUF,SAAS,UAAvB,EAAmC;eAC5BE,SACDrE,YAASsE,cAAT,CAAwB,EAAxB,CADC,GAEDtE,YAASuE,aAAT,CAAuB,EAAvB,CAFJ;SADF,MAIO;cACClB,KAAKc,SAAS,KAAT,GACPxE,MADO,GAEPrF,KAAKkK,YAAL,IAAqBxE,YAASyE,eAAT,CAAyBD,YAA9C,IAA8D/B,QAFlE;;eAIKzC,YAAS0E,eAAT,CAAyBrB,EAAzB,EAA6Bc,IAA7B,CAAL;;;YAGE,IAAInD,IAAJ,CAASoD,EAAT,EAAaO,IAAb,CAAkBrK,IAAlB,CAAJ;OAnBK,CAAP;;;;;;;;;;;;;;;;;kCAkCYgG,MAAM;aACX,KACJ9C,MADI,CACG,UADH,EAEJ8C,IAFI,CAECA,IAFD,CAAP;;;;;;;;;;;;;;;;;+BAgBSA,MAAM;aACR,KACJ9C,MADI,CACG,OADH,EAEJ8C,IAFI,CAECA,IAFD,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;wBAwBEvB,UAAUhF,OAAO;iBACD,KAAK,CAAL,KAAW,EADV;UACXoG,KADW,QACXA,KADW;;UAGf,CAACjF,UAAUf,MAAf,EAAuB;YACjB,CAACgG,KAAL,EAAY;iBACH,EAAP;;;eAGKxG,iBAAiBwG,MAAMyE,OAAN,CAAc5F,KAAd,CAAoBsD,0BAApB,CAAjB,EAAkEzD,UAAlE,CAAP;;;UAGE3D,UAAUf,MAAV,IAAoB,CAApB,IAAyB0C,SAASkC,QAAT,CAA7B,EAAiD;YAC3C,CAACoB,KAAL,EAAY;iBACH,EAAP;;;mBAGS/B,aAAaW,QAAb,CAAX;;eAEOoB,MAAM0E,gBAAN,CAAuB9F,QAAvB,KAAoCoB,MAAM2E,mBAAN,CAA0B/F,QAA1B,IAAsC,aAAtC,GAAsD,EAA1F,CAAP;;;UAGE7D,UAAUf,MAAV,IAAoB,CAAxB,EAA2B;sCACX4E,QAAd,EAAyBhF,KAAzB;;;aAGK,KAAKiJ,OAAL,CAAa,UAAC1I,IAAD,EAAU;sBACdyE,QAAd,EAAwB,UAAChF,KAAD,EAAQgF,QAAR,EAAqB;qBAChCX,aAAaW,QAAb,CAAX;;cAEInC,MAAM7C,KAAN,KAAgBA,UAAU,KAA9B,EAAqC;mBAC5B,IAAIiH,IAAJ,CAAS1G,IAAT,EAAeyK,SAAf,CAAyBhG,QAAzB,CAAP;;;eAGGoB,KAAL,CAAW6E,cAAX,CAA0BjG,QAA1B;eACKoB,KAAL,CAAW8E,WAAX,CACElG,QADF,EAEEhF,MAAMuD,OAAN,CAAciF,mBAAd,EAAmC,EAAnC,CAFF,EAGEA,oBAAoBxB,IAApB,CAAyBhH,KAAzB,IAAkC,WAAlC,GAAgD,EAHlD;SARF;OADK,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;;yBAsCGqB,KAAKrB,OAAO;kBACK,KAAK,CAAL,KAAW,EADhB;UACPmL,OADO,SACPA,OADO;;UAGX,CAAChK,UAAUf,MAAf,EAAuB;YACjB,CAAC+K,OAAL,EAAc;iBACL,EAAP;;;eAGK7J,kBAAkB6J,OAAlB,EAA2BjG,WAA3B,CAAP;;;UAGE/D,UAAUf,MAAV,KAAqB,CAArB,IAA0B0C,SAASzB,GAAT,CAA9B,EAA6C;YACvC,CAAC8J,OAAL,EAAc;;;;eAIPA,QAAQ9J,GAAR,CAAP;;;UAGEF,UAAUf,MAAV,IAAoB,CAAxB,EAA2B;iCAChBiB,GAAT,EAAerB,KAAf;;;aAGK,KAAKiJ,OAAL,CAAa,UAAC1I,IAAD,EAAU;sBACdc,GAAd,EAAmB,UAACrB,KAAD,EAAQqB,GAAR,EAAgB;eAC5B8J,OAAL,CAAa9J,GAAb,IAAoBrB,KAApB;SADF;OADK,CAAP;;;;;;;;;;;;;;;;;;;;;6BAsBOoL,OAAqB;UAAdC,OAAc,uEAAJ,EAAI;6BAKxBA,OALwB,CAE1BC,OAF0B;UAE1BA,OAF0B,oCAEhB,IAFgB;gCAKxBD,OALwB,CAG1BE,UAH0B;UAG1BA,UAH0B,uCAGb,IAHa;UAIvBC,WAJuB,2BAKxBH,OALwB;;UAMxBI,aAAaL,KAAjB;;UAEI,CAAC3C,YAAYzB,IAAZ,CAAiB1E,YAAYmJ,UAAZ,CAAjB,CAAL,EAAgD;YAC1C;uBACW,IAAIC,KAAJ,CAAUD,UAAV,EAAsB,EAAEH,gBAAF,EAAWC,sBAAX,EAAtB,CAAb;iBACOE,UAAP,EAAmBD,WAAnB;SAFF,CAGE,OAAOG,GAAP,EAAY;;;aAGT,KAAK1C,OAAL,CAAa,UAAC1I,IAAD,EAAU;YACxB,CAACkI,YAAYzB,IAAZ,CAAiB1E,YAAYmJ,UAAZ,CAAjB,CAAL,EAAgD;cACxCxF,cAAWwB,eAAelH,IAAf,IACbA,IADa,GAEbA,KAAK6G,aAFT;;uBAIanB,YAAS2F,WAAT,CAAqB,OAArB,CAAb;qBACWC,SAAX,CAAqBT,KAArB,EAA4BE,OAA5B,EAAqCC,UAArC;;iBAEOE,UAAP,EAAmBD,WAAnB;;;aAGGM,aAAL,CAAmBL,UAAnB;OAZK,CAAP;;;;;;;;;;;;;;;;2BA0Bc;UAAXxL,KAAW,uEAAH,CAAG;;UACVA,QAAQ,CAAZ,EAAe;gBACL,KAAKG,MAAL,GAAcH,KAAtB;;;aAGK,IAAIgH,IAAJ,CAAS,KAAKhH,KAAL,CAAT,CAAP;;;;;;;;;;;;;;;;6BAayB;;;UAApB8L,QAAoB,uEAATC,OAAS;;aAClB,KAAKnC,OAAL,CAAa,UAACxE,GAAD,EAAM9E,IAAN,EAAYN,KAAZ,EAAsB;YACpC8L,SAASxL,IAAT,EAAeN,KAAf,SAAJ,EAAiC;cAC3BM,IAAJ;;OAFG,CAAP;;;;;;;;;;;;;;4BAeG2H,UAAU;aACN,KAAK2B,OAAL,CAAa,UAACxE,GAAD,EAAM9E,IAAN,EAAe;YAC7B8F,KAAK6B,QAAL,EAAe3H,IAAf,CAAJ;OADK,CAAP;;;;;;;;;;;;;;;;;;4BAiBMT,UAAU;;;mBACH,IAAb,EAAmB,UAACE,KAAD,EAAQqB,GAAR,EAAgB;iBACxBrB,KAAT,EAAgBqB,GAAhB;OADF;;aAIO,IAAP;;;;;;;;;;;;;;;;;4BAcMuD,MAAM;UACNrE,OAAO,KAAK,CAAL,CAAb;;UAEI,CAACA,IAAL,EAAW;eACF,KAAP;;;wBAGasG,UAAUjC,IAAV,EAAgBrE,IAAhB,CAPH;UAOJ+I,EAPI,eAOJA,EAPI;;aASLA,KACH/I,KAAK0L,cAAL,CAAoB3C,EAApB,EAAwB1E,IAAxB,CADG,GAEHrE,KAAK2L,YAAL,CAAkBtH,IAAlB,CAFJ;;;;;;;;;;;;;;;;;6BAgBOwE,KAAK;UACN7I,OAAO,KAAK,CAAL,CAAb;;aAEOA,OACHA,KAAK4I,SAAL,CAAegB,QAAf,CAAwBf,GAAxB,CADG,GAEH,KAFJ;;;;;;;;;;;;;;;8BAcK;aACE,KAAKH,OAAL,CAAa9B,IAAb,CAAP;;;;;;;;;;;;;;;;;;yBAeGgF,OAAM;UACL,CAAChL,UAAUf,MAAf,EAAuB;YACfG,OAAO,KAAK,CAAL,CAAb;;eAEOA,OACHA,KAAK6L,SADF,GAEH,EAFJ;;;aAKK,KAAKnD,OAAL,CAAa,UAAC1I,IAAD,EAAU;aACvB6L,SAAL,GAAiBD,KAAjB;OADK,CAAP;;;;6BAKO5L,MAAM;aACN,KAAKC,OAAL,CAAaD,IAAb,MAAuB,CAAC,CAA/B;;;;;;;;;;;;;;;;;;;gCAgBU0J,SAAS;gBACThC,OAAOgC,OAAP,EAAgB1J,IAAhB,CAAqB,CAArB,CAAV;;UAEIsH,SAASoC,QAAQpC,MAAR,EAAb;;UAEI,CAACA,OAAOzH,MAAZ,EAAoB;eACX,IAAP;;;gBAGQ6J,QAAQoC,IAAR,GAAe,CAAf,CAAV;eACSxE,OAAO,CAAP,CAAT;;aAEO,KAAKoB,OAAL,CAAa,UAAC1I,IAAD,EAAU;YACxBA,SAAS0J,OAAb,EAAsB;oBACVA,QAAQ3E,WAAlB;;;;;YAKE2E,OAAJ,EAAa;iBACJqC,YAAP,CAAoB/L,IAApB,EAA0B0J,OAA1B;SADF,MAEO;iBACEsC,WAAP,CAAmBhM,IAAnB;;OAVG,CAAP;;;;;;;;;;;;;;;;;;;iCA4BW0J,SAAS;gBACVhC,OAAOgC,OAAP,EAAgB1J,IAAhB,CAAqB,CAArB,CAAV;;UAEIsH,SAASoC,QAAQpC,MAAR,EAAb;;UAEI,CAACA,OAAOzH,MAAZ,EAAoB;eACX,IAAP;;;gBAGQ6J,QAAQ,CAAR,CAAV;eACSpC,OAAO,CAAP,CAAT;;aAEO,KAAKoB,OAAL,CAAa,UAAC1I,IAAD,EAAU;eACrB+L,YAAP,CAAoB/L,IAApB,EAA0B0J,OAA1B;OADK,CAAP;;;;;;;;;;;;;;;;;;;;yBAmBGA,SAAqB;UAAZuC,GAAY,uEAAN,IAAM;;gBACdvE,OAAOgC,OAAP,EAAgB,CAAhB,CAAV;;UAGE,CAACA,OAAD,IACGxC,eAAewC,OAAf,CAFL,EAGE;eACO,IAAP;;;UAGE,CAACuC,GAAD,IAAQvC,QAAQwC,UAApB,EAAgC;aACzB,IAAItM,IAAI,KAAKC,MAAL,GAAc,CAA3B,EAA8BD,KAAK,CAAnC,EAAsCA,GAAtC,EAA2C;kBACjCmM,YAAR,CAAqB,KAAKnM,CAAL,CAArB,EAA8B8J,QAAQwC,UAAtC;;;eAGK,IAAP;;;aAGK,KAAKxD,OAAL,CAAa,UAAC1I,IAAD,EAAU;gBACpBgM,WAAR,CAAoBhM,IAApB;OADK,CAAP;;;;;;;;;;;;;;;;;;;;;uBAoBC2H,UAAU;UACP,CAAC,KAAK9H,MAAV,EAAkB;eACT,KAAP;;;UAGIG,OAAO,KAAK,CAAL,CAAb;UACMmM,UACJnM,KAAKmM,OAAL,IACGnM,KAAKoM,eADR,IAEGpM,KAAKqM,qBAFR,IAGGrM,KAAKsM,kBAHR,IAIGtM,KAAKuM,iBAJR,IAKGvM,KAAKwM,gBANV;;aASaL,OAAN,YAAcxE,QAAd,CAAP;;;;;;;;;;;;;;;2BAYK;UACC3H,OAAO,KAAK,CAAL,CAAb;;aAEOA,OACHA,KAAKwG,QAAL,CAActC,WAAd,EADG,GAEHuI,SAFJ;;;;;;;;;;;;;;;2BAcK;aACE,KAAKnD,OAAL,CAAazE,OAAb,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAyCCgG,OAAO6B,UAAU;UACdnK,SAASsI,KAAT,CAAJ,EAAqB;mCACRA,KAAX,EAAmB6B,QAAnB;;;UAGIC,YAAY,EAAlB;UACMC,eAAe,EAArB;;oBAEc/B,KAAd,EAAqB,UAAC6B,QAAD,EAAW7B,KAAX,EAAqB;qBAC3BA,MAAMnG,KAAN,CAAYqD,qBAAZ,CAAb,EAAiD,UAAC8C,KAAD,EAAW;WACzD8B,UAAU9B,KAAV,IAAmB8B,UAAU9B,KAAV,KAAoB,EAAxC,EAA4CrC,IAA5C,CAAiDkE,QAAjD;SADF;OADF;;WAMKhE,OAAL,CAAa,UAAC1I,IAAD,EAAU;sBACP2M,SAAd,EAAyB,UAACE,SAAD,EAAYhC,KAAZ,EAAsB;uBAChCgC,SAAb,EAAwB,UAACH,QAAD,EAAc;iBAC/BI,gBAAL,CAAsBjC,KAAtB,EAA6B6B,QAA7B,EAAuC,KAAvC;aACCE,aAAa/B,KAAb,IAAsB+B,aAAa/B,KAAb,KAAuB,EAA9C,EAAkDrC,IAAlD,CAAuD,YAAM;mBACtDuE,mBAAL,CAAyBlC,KAAzB,EAAgC6B,QAAhC;aADF;WAFF;SADF;OADF;;aAWO,SAASM,oBAAT,CAA8BnC,KAA9B,EAAqC;YACtCjK,UAAUf,MAAd,EAAsB;uBACPe,SAAb,EAAwB,UAACiK,KAAD,EAAW;yBACpBA,MAAMnG,KAAN,CAAYqD,qBAAZ,CAAb,EAAiD,UAAC8C,KAAD,EAAW;kBACpDoC,kBAAkBL,aAAa/B,KAAb,CAAxB;;kBAEIoC,eAAJ,EAAqB;6BACNA,eAAb,EAA8B,UAACC,cAAD;yBAAoBA,gBAApB;iBAA9B;;uBAEON,aAAa/B,KAAb,CAAP;;aANJ;WADF;SADF,MAYO;wBACS+B,YAAd,EAA4B,UAACK,eAAD,EAAkBpC,KAAlB,EAA4B;yBACzCoC,eAAb,EAA8B,UAACC,cAAD;qBAAoBA,gBAApB;aAA9B;;mBAEON,aAAa/B,KAAb,CAAP;WAHF;;OAdJ;;;;;;;;;;;;6BA6BO;aACA,KAAKvB,OAAL,CAAatE,SAAb,CAAP;;;;;;;;;;;;;;;2BAYK;aACE,KAAKsE,OAAL,CAAapE,OAAb,CAAP;;;;;;;;;;;;;;;;;;;;yBAiBGT,UAAUhF,OAAO;UAChBmB,UAAUf,MAAV,IAAoB,CAApB,IAAyB0C,SAASkC,QAAT,CAA7B,EAAiD;eACxC,KAAK,CAAL,IAAU,KAAK,CAAL,EAAQA,QAAR,CAAV,GAA8BgI,SAArC;;;UAGE7L,UAAUf,MAAV,IAAoB,CAAxB,EAA2B;sCACX4E,QAAd,EAAyBhF,KAAzB;;;aAGK,KAAKiJ,OAAL,CAAa,UAAC1I,IAAD,EAAU;sBACdyE,QAAd,EAAwB,UAAChF,KAAD,EAAQsG,IAAR,EAAiB;eAClCA,IAAL,IAAatG,KAAb;SADF;OADK,CAAP;;;;;;;;;;;;;;;;gCAiBO;aACA,KAAKiJ,OAAL,CAAarB,MAAb,CAAP;;;;;;;;;;;;;;;;iCAaW;;;aACJ,KAAKqB,OAAL,CAAa,UAAC1I,IAAD,EAAU;kCACJ,UAACqE,IAAD,EAAU;4BACjBiC,UAAUjC,IAAV,EAAgBrE,IAAhB,CADiB;cACxB+I,EADwB,eACxBA,EADwB;;cAG5BA,EAAJ,EAAQ;iBACDoE,iBAAL,CAAuBpE,EAAvB,EAA2B1E,IAA3B;WADF,MAEO;iBACA+I,eAAL,CAAqB/I,IAArB;;SANJ;OADK,CAAP;;;;;;;;;;;;;;;;kCAuBY;;;aACL,KAAKqE,OAAL,CAAa,UAAC1I,IAAD,EAAU;YACtB2I,OAAO3I,KAAK4I,SAAlB;;kCAEwB,UAACC,GAAD;iBAASF,KAAKtB,MAAL,CAAYwB,GAAZ,CAAT;SAAxB;OAHK,CAAP;;;;;;;;;;;;;;;;gCAiBU;;;aACH,KAAKH,OAAL,CAAa,UAAC1I,IAAD,EAAU;kCACJ,UAACwE,GAAD,EAAS;eAC1BqB,KAAL,CAAW6E,cAAX,CAA0B5G,aAAaU,GAAb,CAA1B;SADF;OADK,CAAP;;;;;;;;;;;;;;;;;;;;4BAqBMkF,SAAS;gBACLhC,OAAOgC,OAAP,CAAV;;UAEM2D,QAAQ,KAAKrN,IAAL,CAAU,CAAV,CAAd;UACMsH,SAAS+F,MAAM/F,MAAN,EAAf;;UAEI,CAACA,OAAOzH,MAAZ,EAAoB;eACX,IAAP;;;UAGEG,OAAOsH,MAAX;UACIgB,SAAS,MAAb;UACMwD,OAAOuB,MAAMvB,IAAN,GAAa,CAAb,CAAb;UACMwB,OAAOD,MAAMC,IAAN,GAAa,CAAb,CAAb;;UAEIxB,IAAJ,EAAU;eACDA,IAAP;iBACS,cAAT;OAFF,MAGO,IAAIwB,IAAJ,EAAU;eACRA,IAAP;iBACS,aAAT;;;YAGIjG,MAAN;;cAEQiB,MAAR,EAAgBtI,IAAhB;;;;;;;;;;;;;;;;8BAaK;aACE,KAAK0I,OAAL,CAAalB,IAAb,CAAP;;;;4BAGM;aACC,IAAId,IAAJ,CAAS6G,sFAAYC,KAAZ,CAAkB,IAAlB,EAAwB5M,SAAxB,CAAT,CAAP;;;;;;;;;;;;;;;;;;yBAeGoF,OAAM;UACL,CAACpF,UAAUf,MAAf,EAAuB;eACd,KAAKkG,IAAL,CAAU,aAAV,CAAP;;;aAGK,KAAK2C,OAAL,CAAa,UAAC1I,IAAD,EAAU;aACvByN,WAAL,GAAmBzH,KAAnB;OADK,CAAP;;;;;;;;;;;;;;;;;;;;+BAmBS3B,MAAMqJ,WAAW;;;aACnB,KAAKhF,OAAL,CAAa,UAAC1I,IAAD,EAAU;eACrB,IAAI0G,IAAJ,CAAS1G,IAAT,CAAP;;YAEI,YAAUH,MAAV,GAAmB,CAAnB,GAAuB,CAACG,KAAK2N,OAAL,CAAatJ,IAAb,CAAxB,GAA6CqJ,SAAjD,EAA4D;eACrDrJ,IAAL,CAAUA,IAAV,EAAgB,EAAhB;SADF,MAEO;eACA6E,UAAL,CAAgB7E,IAAhB;;OANG,CAAP;;;;;;;;;;;;;;;;;;;;gCAyBUwE,KAAK6E,WAAW;;;aACnB,KAAKhF,OAAL,CAAa,UAAC1I,IAAD,EAAU;YACpB4I,SADoB,GACN5I,IADM,CACpB4I,SADoB;;;kBAGlBgF,MAAV,CAAiB/E,GAAjB,EAAsB,YAAUhJ,MAAV,GAAmB,CAAnB,GAAuB,CAAC+I,UAAUgB,QAAV,CAAmBf,GAAnB,CAAxB,GAAkD6E,SAAxE;OAHK,CAAP;;;;EA1lCetL;;AAkmCnBJ,eAAe0E,IAAf,EAAqB,MAArB;;AAEA,IAAI7E,WAAUA,QAAOgM,OAArB,EAA8B;mBACXnH,IAAjB,qBACG7E,QAAOgM,OADV,EACoB;OAAA,oBACV;aACGzL,KAAP;;GAHN;CASF;;ACtrCO,SAAS0L,aAAT,CAAuBC,IAAvB,EAA6BC,UAA7B,EAAyC;eACjC7K,KAAK6K,UAAL,CAAb,EAA+B,UAACC,GAAD,EAAS;QAClC,EAAEA,OAAOF,IAAT,CAAJ,EAAoB;iBACPE,GAAX,IAAkBxB,SAAlB;;GAFJ;;;OAOK,IAAMwB,GAAX,IAAkBF,IAAlB,EAAwB;eACXE,GAAX,IAAkBF,KAAKE,GAAL,CAAlB;;;;ACXG,SAASC,aAAT,CAAuBzO,KAAvB,EAA8BwO,GAA9B,EAAmCjN,MAAnC,EAA2C;SACzCA,OAAOiN,GAAP,CAAP;;;ACCK,SAASE,mBAAT,CAA6BzM,IAA7B,EAAmC;SACjC,IAAIgB,MAAJ,OAAgBI,YAAYpB,IAAZ,CAAhB,4CAAP;;;ACHF,IAAM0M,cAAc,GAApB;;AAEA,AAAO,SAASC,UAAT,CAAoBC,MAApB,EAA4BjK,IAA5B,EAAkC;MACnCL,cAAJ;;;OAGK,IAAMtC,IAAX,IAAmB4M,MAAnB,EAA2B;QACnBC,QAAQD,OAAO5M,IAAP,CAAd;QACM8M,aAAanK,KAAKL,KAAL,CAAWuK,MAAME,MAAjB,CAAnB;;QAEID,UAAJ,EAAgB;UACRE,YAAYF,WAAW,CAAX,CAAlB;UACIT,aAAJ;;UAEIW,cAAc,EAAlB,EAAsB;eACb,EAAP;OADF,MAEO,IAAIA,SAAJ,EAAe;eACbA,UAAUhK,KAAV,CAAgB0J,WAAhB,CAAP;;;cAGM;kBAAA;iBAEGI,WAAW,CAAX,CAFH;oBAAA;;OAAR;;;;;;SAWGxK,KAAP;;;AC3BK,SAAS2K,kBAAT,CAA4BvK,KAA5B,EAAmCkK,MAAnC,EAA2CM,gBAA3C,EAA6D;SAC3D7N,kBAAkBqD,KAAlB,EAAyB,UAACyK,aAAD,EAAgBpP,KAAhB,EAAuB4E,IAAvB,EAAgC;QAC1DiB,aAAamB,IAAb,CAAkBpC,IAAlB,CAAJ,EAA6B;aACpB3D,OAAOmO,aAAP,EAAsBF,mBAAmBlP,KAAnB,EAA0B6O,MAA1B,EAAkCM,gBAAlC,CAAtB,CAAP;;;QAGI5K,QAAQqK,WAAWC,MAAX,EAAmBjK,IAAnB,CAAd;;QAEIL,KAAJ,EAAW;oBACKK,IAAd,IAAsB;cACd,OADc;iBAEX,IAFW;;;WAKfL,KAFL,EAGK4K,gBAHL,CAHoB;;OAAtB;;;;;kBAcYvK,IAAd,IAAsB;YACd,MADc;;KAAtB;GAtBK,CAAP;;;AA6BF,AAAO,SAASyK,iBAAT,CAA2Bf,IAA3B,EAAiC;SAC/BhN,kBAAkBgN,IAAlB,EAAwBgB,OAAxB,CAAP;;;AAGF,SAASA,OAAT,CAAiBhB,IAAjB,EAAuBtO,KAAvB,EAA8BwO,GAA9B,EAAmC;MAC7B3I,aAAamB,IAAb,CAAkBwH,GAAlB,CAAJ,EAA4B;WACnBF,IAAP,EAAae,kBAAkBrP,KAAlB,CAAb;GADF,MAEO;SACAwO,GAAL,IAAYxO,KAAZ;;;;ACxCG,SAASuP,oBAAT,CAA8BC,KAA9B,EAAqCxP,KAArC,EAA4C;MAC3CyP,WAAWD,MAAME,EAAN,CAAS1P,KAA1B;;QAEM0P,EAAN,CAAS1P,KAAT,GAAiBA,KAAjB;;eAEawP,MAAME,EAAN,CAASC,QAAtB,EAAgC,UAACC,OAAD,EAAa;YACnC5P,KAAR,EAAeyP,QAAf;GADF;;;ACPK,SAASI,WAAT,OAIJ;MAHD5N,IAGC,QAHDA,IAGC;MAHK6M,KAGL,QAHKA,KAGL;MAHYgB,OAGZ,QAHYA,OAGZ;MAFD9P,KAEC,QAFDA,KAEC;MAFMsO,IAEN,QAFMA,IAEN;MAFYyB,OAEZ,QAFYA,OAEZ;MAFqBxP,IAErB,QAFqBA,IAErB;MADDyP,WACC,QADDA,WACC;MADYC,WACZ,QADYA,WACZ;MADyBC,cACzB,QADyBA,cACzB;;MACKV,QAAQ,IAAIV,KAAJ,CAAU;cAAA;gBAAA;oBAAA;cAAA;oBAAA;cAAA;4BAAA;4BAAA;;GAAV,CAAd;;MAYIA,MAAMqB,QAAV,EAAoB;QACZnQ,SAAQwP,MAAMxP,KAAN,GAAcwP,MAAMW,QAAN,CAAe,UAACC,QAAD,EAAWX,QAAX,EAAwB;YAC3DzP,KAAN,GAAcoQ,QAAd;;UAEI;cACIC,WAAN,CAAkBD,QAAlB,EAA4BX,QAA5B;OADF,CAEE,OAAO9D,GAAP,EAAY;gBACJ2E,KAAR,wBAAoCrO,IAApC,oBAA0D0J,GAA1D;;KANwB,CAA5B;;UAUM0E,WAAN,CAAkBrQ,MAAlB;;;SAGKwP,KAAP;;;AC3BK,SAASe,cAAT,CAAwB5L,KAAxB,EAA+B6L,WAA/B,EAA4CjQ,IAA5C,EAAkDkQ,SAAlD,EAA6D;gBACpDD,WAAd,EAA2B,gBAAkB5L,IAAlB,EAA2B;QAAxBwF,IAAwB,QAAxBA,IAAwB;QAAlBpK,KAAkB,QAAlBA,KAAkB;;QAChD,CAAC2E,MAAMC,IAAN,CAAL,EAAkB;UACZwF,SAAS,MAAb,EAAqB;aACdX,UAAL,CAAgB7E,IAAhB;OADF,MAEO;cACC8K,EAAN,CAAS9H,MAAT;;;aAGK4I,YAAY5L,IAAZ,CAAP;;GARJ;;MAYMiK,SAAS,EAAf;;;;6BAGWjK,IAhBuD;sBAsB5DD,MAAMC,IAAN,CAtB4D;QAkB9DwF,IAlB8D,eAkB9DA,IAlB8D;QAmB9D0F,OAnB8D,eAmB9DA,OAnB8D;QAoB9D9P,KApB8D,eAoB9DA,KApB8D;QAqB9D0Q,IArB8D,eAqB9DA,IArB8D;;QAuB5DC,iBAAJ;QACIC,oBAAJ;QACIC,kBAAJ;;QAEIL,YAAY5L,IAAZ,CAAJ,EAAuB;8BAIjB4L,YAAY5L,IAAZ,CAJiB;UAEbkM,QAFa,qBAEnB1G,IAFmB;UAGZ2G,SAHY,qBAGnB/Q,KAHmB;;;UAMjBoK,SAAS,MAAb,EAAqB;YACf0G,aAAa,OAAjB,EAA0B;oBACdpB,EAAV,CAAa9H,MAAb;;;YAGEmJ,cAAc/Q,KAAlB,EAAyB;eAClB4E,IAAL,CAAUA,IAAV,EAAgB5E,KAAhB;;;oBAGUA,KAAZ;OATF,MAUO;YACCwP,QAAQuB,SAAd;;YAEID,aAAa,MAAjB,EAAyB;eAClBrH,UAAL,CAAgB7E,IAAhB;;;cAGI8K,EAAN,CAASsB,SAAT,GAAqBlB,OAArB;;YAEIA,OAAJ,EAAa;+BACUN,KAArB,EAA4BxP,KAA5B;SADF,MAEO,IAAI,CAACwP,MAAME,EAAN,CAASuB,SAAV,IAAuBP,KAAK5B,KAAL,CAAWqB,QAAtC,EAAgD;cAC/CC,WAAWZ,MAAME,EAAN,CAASO,WAAT,CAAqBP,EAArB,CAAwBS,QAAxB,CAAiCnQ,KAAjC,EAAwC,UAACoQ,QAAD,EAAc;+BAIjEzL,MAAMC,IAAN,CAJiE;gBAEnEwF,IAFmE,gBAEnEA,IAFmE;gBAGnE0F,OAHmE,gBAGnEA,OAHmE;;;gBAMjE1F,SAAS,OAAT,IAAoB,CAAC0F,OAAzB,EAAkC;mCACXN,KAArB,EAA4BY,QAA5B;;WAPa,EASdZ,KATc,CAAjB;;gBAWME,EAAN,CAASuB,SAAT,GAAqB,IAArB;;+BAEqBzB,KAArB,EAA4BY,QAA5B;;;oBAGUZ,KAAZ;;;iBAGSpF,IAAX;oBACc0F,OAAd;KAhDF,MAiDO;UACD1F,SAAS,MAAb,EAAqB;aACdxF,IAAL,CAAUA,IAAV,EAAgB5E,KAAhB;;oBAEYA,KAAZ;OAHF,MAIO;YACCkR,aAAa,SAAbA,UAAa,GAAM;eAClBpB,OAAL,GAAeA,OAAf;;cAEMN,QAAQK,YAAYa,IAAZ,CAAd;;cAEI,CAACZ,OAAD,IAAYY,KAAK5B,KAAL,CAAWqB,QAA3B,EAAqC;gBAEjCF,WAFiC,GAI/BS,IAJ+B,CAEjCT,WAFiC;gBAGjCjQ,MAHiC,GAI/B0Q,IAJ+B,CAGjC1Q,KAHiC;;gBAK7BmR,aAAalB,YAAYP,EAAZ,CAAeS,QAAf,CAAwBnQ,MAAxB,EAA+B,UAACoQ,QAAD,EAAc;iCAI1DzL,MAAMC,IAAN,CAJ0D;kBAE5DwF,IAF4D,gBAE5DA,IAF4D;kBAG5D0F,OAH4D,gBAG5DA,OAH4D;;;kBAM1D1F,SAAS,OAAT,IAAoB,CAAC0F,OAAzB,EAAkC;qCACXN,KAArB,EAA4BY,QAA5B;;aAPe,EAShBZ,KATgB,CAAnB;;kBAWME,EAAN,CAASuB,SAAT,GAAqB,IAArB;kBACMvB,EAAN,CAAS1P,KAAT,GAAiBmR,UAAjB;;;sBAGU3B,KAAZ;;iBAEO;sBAAA;kBAEC;wBAAA;8BAAA;qBAGGA;;WALX;SA3BF;;YAqCIiB,SAAJ,EAAe;iBACN1H,IAAP,CAAYmI,UAAZ;SADF,MAEO;;;;;iBAKE9G,IAAX;oBACc0F,OAAd;;;gBAGUlL,IAAZ,IAAoB;YACZ+L,QADY;eAETC,WAFS;aAGXC;KAHT;;;OAlHG,IAAMjM,IAAX,IAAmBD,KAAnB,EAA0B;UAAfC,IAAe;;;MAyHtB6L,SAAJ,EAAe;WACN,YAAM;mBACE5B,MAAb,EAAqB,UAACqC,UAAD,EAAgB;0BAI/BA,YAJ+B;YAEjCtM,IAFiC,eAEjCA,IAFiC;YAGjC8L,IAHiC,eAGjCA,IAHiC;;oBAMvB9L,IAAZ,IAAoB8L,IAApB;OANF;KADF;;;;AC5IG,SAASU,qBAAT,CAA+B7P,MAA/B,EAAuC6I,IAAvC,EAA6C6F,WAA7C,EAA0D;MAC3DoB,QAAQ,EAAZ;;MAEIjH,SAAS,SAAb,EAAwB;YACd3G,OACNwM,cACIA,YAAYP,EAAZ,CAAe4B,OADnB,GAEI,IAHE,CAAR;;;SAOKhQ,kBAAkBC,MAAlB,EAA0B,UAAC8P,KAAD,EAAQrR,KAAR,EAAeqB,GAAf,EAAuB;UAChDA,GAAN,IAAa;kBAAA;gBAED;cACF,EADE;cAEF;;KAJV;GADK,EAQJgQ,KARI,CAAP;;;ACXK,SAASE,iBAAT,CAA2B3B,OAA3B,EAAoC;UACjC4B,QAAR;;;;AAIF,AAAO,SAASC,cAAT,CAAwBC,gBAAxB,EAA0C;eAClCA,gBAAb,EAA+BC,aAA/B;;;AAGF,SAASA,aAAT,OAA8C;MAArB/B,OAAqB,QAArBA,OAAqB;MAAZD,QAAY,QAAZA,QAAY;;kBAC5BA,QAAhB,EAA0BC,OAA1B;;;ACRF,IAAIgC,gBAAJ;;AAEA,AAAO,SAASC,oBAAT,CAA8BR,KAA9B,EAAqCS,WAArC,EAAkDC,YAAlD,EAAgE;mBACpDV,KAAjB,EAAwBzP,UAAUkQ,WAAV,EAAuB,UAAC9R,KAAD,EAAQqB,GAAR,EAAgB;QACvDgQ,QAAQU,aAAa1Q,GAAb,CAAd;QACQsO,QAFqD,GAExC0B,KAFwC,CAErD1B,QAFqD;;;WAItD;oBACS,KADT;kBAEO,IAFP;SAAA,iBAGC;YACA3J,MAAMgM,QAAV,EAAoB;cACdhM,MAAMiM,WAAN,CAAkBzR,OAAlB,CAA0BmP,SAASuC,IAAnC,MAA6C,CAAC,CAAlD,EAAqD;kBAC7CD,WAAN,CAAkBlJ,IAAlB,CAAuB4G,SAASuC,IAAhC;;;;eAIGb,MAAMrR,KAAb;OAVG;SAAA,eAYDA,KAZC,EAYM;YACLA,UAAUqR,MAAMrR,KAApB,EAA2B;;;;YAIvB,CAAC4R,OAAL,EAAc;oBACF,EAAV;;;YAGIO,kBAAkBxC,SAASuC,IAAT,CAAclR,KAAd,EAAxB;YACMyO,WAAW4B,MAAMrR,KAAvB;;iBAESkS,IAAT,GAAgB,EAAhB;cACMlS,KAAN,GAAcA,KAAd;;qBAEamS,eAAb,EAA8BZ,iBAA9B;gBACQxI,IAAR,CAAa;sBAAA;4BAAA;;SAAb;;mBAMW,YAAM;cACX,CAAC6I,OAAL,EAAc;;;;cAIRQ,MAAM,EAAZ;cACMC,SAAS,EAAf;;qCAESlS,CARM;6BAaTyR,QAAQzR,CAAR,CAbS;gBAUXkR,KAVW,cAUXA,KAVW;gBAWXrR,KAXW,cAWXA,KAXW;gBAYXyP,QAZW,cAYXA,QAZW;;;yBAeA4B,MAAM1B,QAAN,CAAe2C,IAA5B,EAAkC,UAAC1C,OAAD,EAAa;kBACvC3P,QAAQmS,IAAI5R,OAAJ,CAAYoP,OAAZ,CAAd;;kBAEI3P,UAAU,CAAC,CAAf,EAAkB;oBACZ8I,IAAJ,CAAS6G,OAAT;uBACO7G,IAAP,CAAY;8BAAA;;iBAAZ;eAFF,MAMO;uBACE9I,KAAP,EAAcwP,QAAd,GAAyBA,QAAzB;;aAVJ;;oBAcQhP,MAAR,CAAeN,CAAf,EAAkB,CAAlB;;;eArBG,IAAIA,IAAIyR,QAAQxR,MAAR,GAAiB,CAA9B,EAAiCD,KAAK,CAAtC,EAAyCA,GAAzC,EAA8C;kBAArCA,CAAqC;;;oBAwBpC,IAAV;;uBAEaiS,GAAb,EAAkB,UAACxC,OAAD,EAAUzP,CAAV,EAAgB;4BAI5BkS,OAAOlS,CAAP,CAJ4B;gBAE9BH,KAF8B,aAE9BA,KAF8B;gBAG9ByP,QAH8B,aAG9BA,QAH8B;;;oBAMxBzP,KAAR,EAAeyP,QAAf;WANF;SAlCF,EA0CG,CA1CH;;KAlCJ;GAJsB,CAAxB;;;ACUF,IAAM8C,sBAAsB,qBAA5B;;AAEA,AAAO,SAASC,WAAT,OAAqH;MAA9FC,IAA8F,QAA9FA,IAA8F;MAAxFC,WAAwF,QAAxFA,WAAwF;MAA3E7K,MAA2E,QAA3EA,MAA2E;MAAnE8K,UAAmE,QAAnEA,UAAmE;MAAvD3C,WAAuD,QAAvDA,WAAuD;MAA1CC,WAA0C,QAA1CA,WAA0C;MAA7BC,cAA6B,QAA7BA,cAA6B;MAAb0C,SAAa,QAAbA,SAAa;;MACpHC,MAAM,IAAI5L,IAAJ,CAAS0L,WAAW,CAAX,EAAcvL,aAAvB,CAAZ;MACM7G,OAAOoS,WAAW,CAAX,EAAclI,YAAd,KAA+B7E,MAA/B,GACTiN,IAAIpP,MAAJ,CAAW,KAAX,CADS,GAEToP,GAFJ;MAGMC,cAAc5C,iBAAiBA,eAAeR,EAAf,CAAkBpG,EAAlB,CAAqByJ,OAAtC,GAAgDC,MAAMD,OAA1E;MACME,cAAc/C,iBAAiBA,eAAeR,EAAf,CAAkBpG,EAAlB,CAAqB4J,OAAtC,GAAgDF,MAAME,OAA1E;MACIC,WAAWV,KAAKU,QAAL,GAAgBV,KAAKU,QAAL,IAAiB,EAAhD;MACI7E,OAAOmE,KAAK9N,KAAL,GAAa8N,KAAK9N,KAAL,IAAc,EAAtC;MACI1C,OAAOwQ,KAAKxQ,IAAL,IAAa,cAAxB;MACImR,cAAcV,eAAgBD,KAAKxQ,IAAL,IAAa6Q,YAAYL,KAAKxQ,IAAjB,CAA/C;MACIoR,oBAAJ;MACIC,mBAAJ;MACIC,mBAAJ;MACIC,uBAAJ;MACIC,sBAAJ;MACIC,6BAAJ;;MAEIzR,SAAS,SAAT,IAAsBqM,KAAKrM,IAA/B,EAAqC;WAC5B,YAAP;kBACc6Q,YAAY7Q,IAAZ,CAAd;oBACgBqM,KAAKrM,IAArB;iBACaT,OAAO8M,IAAP,EAAa,MAAb,CAAb;qBACiB6E,QAAjB;eACW,EAAX;WACO,EAAP;GAPF,MAQO,IAAIlR,SAAS,SAAT,IAAsBqM,KAAKoE,WAA/B,EAA4C;WAC1C,cAAP;kBACcI,YAAY7Q,IAAZ,CAAd;2BACuBqM,KAAKoE,WAA5B;iBACalR,OAAO8M,IAAP,EAAa,aAAb,CAAb;qBACiB6E,QAAjB;eACW,EAAX;WACO,EAAP;GAPK,MAQA,IAAI,CAACE,cAAcpR,KAAKsC,KAAL,CAAWgO,mBAAX,CAAf,KAAmDtQ,SAAS,SAAhE,EAA2E;kBAClE+Q,MAAMD,OAAN,CAAc,SAAd,CAAd;iBACaM,cAAcA,YAAY,CAAZ,CAAd,GAA+B,IAA5C;;;MAGEM,sBAAJ;;MAEIP,WAAJ,EAAiB;QACX;sBACc,IAAIA,WAAJ,CAAgB;kBAAA;kBAAA;8BAAA;0BAAA;sBAAA;8BAAA;gCAAA;gCAAA;sCAAA;;OAAhB,CAAhB;KADF,CAaE,OAAOzH,GAAP,EAAY;cACJ2E,KAAR,4BAAwCrO,IAAxC,QAAkD0J,GAAlD;oBACc,IAAd;;;;MAIA,CAACyH,WAAL,EAAkB;gBAIZX,IAJY;QAEdzS,KAFc,SAEdA,KAFc;QAGdmT,SAHc,SAGdA,QAHc;;;QAMVlJ,UAAU1J,KAAKkD,MAAL,CAAYxB,IAAZ,CAAhB;QACM2R,eAAenQ,OAAO,IAAP,CAArB;QACIkB,QAAQlB,OAAO,IAAP,CAAZ;QACIoQ,iBAAJ;QACM1E,mBAAmB;YACjBlF,OADiB;8BAAA;8BAAA;;KAAzB;;kBAOcqE,IAAd,EAAoB,UAACtO,KAAD,EAAQ4E,IAAR,EAAiB;UAC7BkP,UAAUjO,aAAamB,IAAb,CAAkBpC,IAAlB,CAAhB;UACMmP,aAAaD,WAAWD,QAAX,GACfpQ,OAAOkB,KAAP,CADe,GAEfA,KAFJ;;cAIQoP,UAAR;;UAEID,OAAJ,EAAa;YACLE,YAAY/D,YAAYP,EAAZ,CAAeS,QAAf,CAAwBnQ,KAAxB,EAA+B,UAACA,KAAD,EAAW;qBAC/C,YAAM;0BACD+T,UAAd,EAA0BtF,aAA1B;mBACOsF,UAAP,EAAmB7E,mBACjBlP,KADiB,EACViT,WADU,EACG9D,gBADH,CAAnB;2BAGexK,KAAf,EAAsBiP,YAAtB,EAAoC3J,OAApC,EAA6C,KAA7C;WALF,EAMG,CANH;SADgB,EAQf+F,WARe,CAAlB;;mBAUW,IAAX;;eAEO/O,OAAO8S,UAAP,EAAmB7E,mBACxB8E,SADwB,EACbf,WADa,EACA9D,gBADA,CAAnB,CAAP;;;UAKI5K,QAAQqK,WAAWqE,WAAX,EAAwBrO,IAAxB,CAAd;;iBAEW,KAAX;;UAEIL,KAAJ,EAAW;mBACEK,IAAX,IAAmB;gBACX,OADW;mBAER,KAFQ;;;aAKZL,KAFL,EAGK4K,gBAHL,CAHiB;;SAAnB;;;;;iBAcSvK,IAAX,IAAmB;cACX,MADW;eAEVqL,YAAYP,EAAZ,CAAeS,QAAf,CAAwBnQ,KAAxB,EAA+B,UAACA,KAAD,EAAW;qBACpC4E,IAAX,IAAmB;kBACX,MADW;;WAAnB;yBAIeD,KAAf,EAAsBiP,YAAtB,EAAoC3J,OAApC,EAA6C,KAA7C;SALK,EAMJ+F,WANI;OAFT;KA7CF;;QAyDMiE,eAAe1D,eAAe5L,KAAf,EAAsBiP,YAAtB,EAAoC3J,OAApC,EAA6C,IAA7C,CAArB;;QAEIhI,SAAS,UAAb,EAAyB;cACfsE,IAAR,CAAavG,KAAb;;;QAGEiC,SAAS,OAAb,EAAsB;UAChBsE,OAAO0J,YAAYP,EAAZ,CAAeS,QAAf,CAAwBnQ,KAAxB,EAA+B,UAACA,KAAD,EAAW;YAC/C6C,MAAM7C,KAAN,CAAJ,EAAkB;kBACR,EAAR;;;gBAGMuG,IAAR,MAAiBvG,KAAjB;OALS,EAMRgQ,WANQ,CAAX;;UAQInN,MAAM0D,IAAN,CAAJ,EAAiB;eACR,EAAP;;;cAGMA,IAAR,MAAiBA,IAAjB;;;QAGE4M,SAAJ,EAAc;UACNR,cAAa1Q,SAAS,UAAT,GACf,IAAIgF,IAAJ,CAASgD,QAAQ,CAAR,EAAWiK,OAApB,CADe,GAEfjK,OAFJ;UAGI2I,mBAAJ;;mBAEaO,SAAb,EAAuB,UAACjJ,KAAD,EAAW;qBACpBsI,YAAY;gBAChBtI,KADgB;kBAEdyI,WAFc;iCAAA;kCAAA;kCAAA;wCAAA;;SAAZ,CAAZ;OADF;;;QAaIwB,gBAAgBtM,kBAAkBmL,KAAxC;;QAEIJ,qBAAqBI,KAAzB,EAAgC;gBACpBtD,EAAV,CAAa0E,aAAb,CAA2BnK,OAA3B,EAAoC,KAApC;KADF,MAEO,IAAI2I,SAAJ,EAAe;cACZyB,WAAR,CAAoBzB,SAApB;;UAEIuB,aAAJ,EAAmB;eACVzE,EAAP,CAAU4E,UAAV,CAAqBrK,OAArB;;KAJG,MAMA,IAAIkK,aAAJ,EAAmB;aACjBzE,EAAP,CAAU6E,iBAAV,CAA4BtK,OAA5B,EAAqC,KAArC;KADK,MAEA;cACGW,IAAR,CAAa+H,UAAb,EAAyB,KAAzB;;;;;WAKK1I,OAAP;;;uBAQE0J,aA1MsH;MAsMxHjE,EAtMwH,kBAsMxHA,EAtMwH;MAuMlH8E,IAvMkH,kBAuMxHlG,IAvMwH;MAwMxHgD,OAxMwH,kBAwMxHA,OAxMwH;MAyMrHmD,MAzMqH;;;MA4MtHhB,aAAJ,EAAmB;WACV;aACEF,UADF;gBAEKC;KAFZ;SAIKvR,IAAL,GAAYgO,YAAYP,EAAZ,CAAeS,QAAf,CAAwBsD,aAAxB,EAAuC,UAACiB,OAAD,EAAa;WACzDzS,IAAL,GAAYyS,OAAZ;;WAEK1U,KAAL,GAAa,CAACyS,IAAD,CAAb;KAHU,EAITkB,aAJS,EAIM,IAJN,CAAZ;;SAMK3T,KAAL,GAAa,CAACyS,IAAD,CAAb;SACKxC,WAAL,GAAmBA,WAAnB;SACKC,cAAL,GAAsBA,cAAtB;;;MAGEwD,oBAAJ,EAA0B;WACjB;gBAAA;aAEEH,UAFF;gBAGKC;KAHZ;;SAMKd,WAAL,GAAmBzC,YAAYP,EAAZ,CAAeS,QAAf,CAAwBuD,oBAAxB,EAA8C,UAACiB,cAAD,EAAoB;WAC9EjC,WAAL,GAAmBiC,cAAnB;WACK3U,KAAL,GAAa,CAACyS,IAAD,CAAb;KAFiB,EAGhBkB,aAHgB,EAGD,IAHC,CAAnB;SAIK3T,KAAL,GAAa,CAACyS,IAAD,CAAb;SACKxC,WAAL,GAAmBA,WAAnB;SACKC,cAAL,GAAsBA,cAAtB;;;MAGI/D,OAAOlK,SAAS,YAAT,GACTuS,KAAKxU,KAAL,IAAc,EADL,GAEToT,YAAYwB,KAFhB;;KAIGtG,IAAH,GAAU8C,sBAAsBoD,IAAtB,CAAV;KACGC,MAAH,GAAYrD,sBAAsBqD,MAAtB,CAAZ;KACGnD,OAAH,GAAaF,sBAAsBE,OAAtB,EAA+B,SAA/B,EAA0CrB,WAA1C,CAAb;;MAEIhO,SAAS,SAAb,EAAwB;;;QAChB6P,+DACHW,KAAKoC,QADF,EACapC,KAAKqC,IADlB,gCAEHrC,KAAKsC,SAFF,EAEctC,KAAKxS,KAFnB,gBAAN;QAIMoR,QAAQpB,YAAYP,EAAZ,CAAezN,IAAf,KAAwB,SAAxB,GACVgO,YAAYP,EAAZ,CAAe2B,KADL,GAEVpB,WAFJ;;OAIG3G,EAAH,GAAQ2G,YAAYP,EAAZ,CAAepG,EAAvB;OACGyI,YAAH,GAAkBX,sBAAsBU,WAAtB,CAAlB;yBACqBpC,GAAG2B,KAAH,GAAW5N,OAAO4N,KAAP,CAAhC,EAA+CS,WAA/C,EAA4DpC,GAAGqC,YAA/D;;;MAGE9P,SAAS,QAAb,EAAuB;;;OAClBoP,KAAH,GAAW5N,OAAOwM,YAAYP,EAAZ,CAAezN,IAAf,KAAwB,SAAxB,GAAoCgO,YAAYP,EAAZ,CAAe2B,KAAnD,GAA2DpB,WAAlE,yCACRuE,KAAKM,IAAL,IAAa,OADL,EACe;aACf,IADe;gBAEZ;KAHH,2BAKRN,KAAKvU,KAAL,IAAc,QALN,EAKiB;aACjB,IADiB;gBAEd;KAPH,YAAX;;;uBAYmBuU,IAArB,EAA2BA,IAA3B,EAAiC9E,GAAGpB,IAApC;uBACqBgD,OAArB,EAA8BA,OAA9B,EAAuC5B,GAAG4B,OAA1C;uBACqBqC,aAArB,EAAoCc,MAApC,EAA4C/E,GAAG+E,MAA/C;;MAEI;kBACYO,cAAd;GADF,CAEE,OAAOrJ,GAAP,EAAY;YACJ2E,KAAR,wBAAoCrO,IAApC,uBAA6D0J,GAA7D;;;cAGUqB,SAAZ;gBACc/K,SAAS,YAAT,GACVuS,KAAKvE,WADK,GAEV0D,aAFJ;mBAGiB1R,SAAS,YAAT,GACbuS,KAAKtE,cADQ,GAEbyD,aAFJ;;eAIaxH,IAAb,EAAmB,UAACjC,KAAD,EAAW;gBAChBsI,YAAY;YAChBtI,KADgB;cAEdyJ,aAFc;4BAAA;mBAITA,aAJS;8BAAA;oCAAA;;KAAZ,CAAZ;GADF;;gBAYcjE,EAAd,CAAiBuF,UAAjB,GAA8B,IAA9B;;MAEI;kBACYC,WAAd;GADF,CAEE,OAAOvJ,GAAP,EAAY;YACJ2E,KAAR,wBAAoCrO,IAApC,oBAA0D0J,GAA1D;;;SAGKgI,aAAP;;;aCxUwB;IAAlBwB,uBAAAA;;;AAER,AAAO,SAASC,YAAT,CAAsBC,KAAtB,EAA6BC,QAA7B,EAAuC;;;SAC9BH,aAAP,aAAqBG,QAArB,KAAkC,kBAAM7S,SAAN,EAAiB0S,aAAjB,iBAA+BG,SAAS7S,SAAxC,CAAzC;;;ACHK,SAAS8S,sBAAT,CAAgCrL,KAAhC,EAAuC;QACtCwF,EAAN,CAAS9H,MAAT,CAAgB,IAAhB;;;AAGF,AAAO,SAASA,QAAT,CAAgBsC,KAAhB,EAAuB;QACtBwF,EAAN,CAAS9H,MAAT;;;ACHK,SAAS4N,iBAAT,CAA2BC,KAA3B,EAAkC7F,OAAlC,EAA2C;gBAClC6F,MAAM/F,EAAN,CAAS+E,MAAvB,EAA+B,gBAAkB;QAAf9E,QAAe,QAAfA,QAAe;;aACtC2C,IAAT,CAAcvJ,IAAd,CAAmB6G,OAAnB;GADF;;;AAKF,AAAO,SAAS8F,kBAAT,CAA4BD,KAA5B,EAAmC7F,OAAnC,EAA4C;kBAI7C6F,MAAM/F,EAJuC;MAE/C4B,OAF+C,aAE/CA,OAF+C;MAG/CI,gBAH+C,aAG/CA,gBAH+C;;;OAM5C,IAAMiE,IAAX,IAAmBrE,OAAnB,EAA4B;;QAEpB3B,WAAW2B,QAAQqE,IAAR,EAAchG,QAAd,CAAuB2C,IAAxC;;aAESvJ,IAAT,CAAc6G,OAAd;qBACiB7G,IAAjB,CAAsB;sBAAA;;KAAtB;;;;AAOJ,AAAO,SAAS6M,eAAT,CAAyBH,KAAzB,EAAgC7F,OAAhC,EAAyC;gBAChC6F,MAAM/F,EAAN,CAASpB,IAAvB,EAA6B,iBAAkB;QAAfqB,QAAe,SAAfA,QAAe;;aACpC2C,IAAT,CAAcvJ,IAAd,CAAmB6G,OAAnB;GADF;;;ICrBId;;;;;;;;;;;;;2BAWqB;wCAAV+G,QAAU;gBAAA;;;aAChBA,SAASC,MAAT,CAAgBC,SAAhB,EAA2B,IAA3B,CAAP;;;;iBAGUrF,IAAZ,EAAkB;;;;QAEdzO,IAFc,GAWZyO,IAXY,CAEdzO,IAFc;QAGdjC,KAHc,GAWZ0Q,IAXY,CAGd1Q,KAHc;QAId8P,OAJc,GAWZY,IAXY,CAIdZ,OAJc;QAKdvP,IALc,GAWZmQ,IAXY,CAKdnQ,IALc;QAMd+N,IANc,GAWZoC,IAXY,CAMdpC,IANc;QAOdyB,OAPc,GAWZW,IAXY,CAOdX,OAPc;QAQdC,WARc,GAWZU,IAXY,CAQdV,WARc;QASdC,WATc,GAWZS,IAXY,CASdT,WATc;QAUdC,cAVc,GAWZQ,IAXY,CAUdR,cAVc;;QAYVwB,mBAAmB,EAAzB;QACM/B,WAAW,EAAjB;;2BAEuB,IAAvB,EAA6B;UACvB;kBAAA;gBAEM3P,KAFN;oBAAA;mBAIS8P,OAJT;gCAAA;gCAAA;sCAAA;0BAAA;0CAAA;mBAUS,KAVT;kBAWQ,kBAACF,OAAD,EAAa;oBAKjB,MAAKF,EALY;cAEnBsB,SAFmB,OAEnBA,SAFmB;cAGnBhR,KAHmB,OAGnBA,KAHmB;cAInBgW,MAJmB,OAInBA,MAJmB;;cAMfC,eAAejF,YACjBhR,KADiB,GAEjBiQ,YAAYP,EAAZ,CAAeS,QAAf,CAAwB6F,MAAxB,CAFJ;;cAIIpG,OAAJ,EAAa;qBACF7G,IAAT,CAAc6G,OAAd;;;iBAGKqG,YAAP;SAzBA;gBA2BM,mBAACC,cAAD,EAAoB;gBACrBxG,EAAL,CAAQyG,SAAR,GAAoB,IAApB;;yBAEezE,gBAAf;;cAEI;kBACG0E,YAAL;WADF,CAEE,OAAOzK,GAAP,EAAY;oBACJ2E,KAAR,wBAAoCrO,IAApC,qBAA2D0J,GAA3D;;;cAGE,CAACuK,cAAD,IAAmBlG,WAAvB,EAAoC;4BAClBA,YAAYN,EAAZ,CAAeb,MAA/B;;;;KAxCR;;;;;;;SAmDKP,IAAL,GAAYA,IAAZ;;;;;;;SAOKyB,OAAL,GAAeA,OAAf;;;;;;;SAOKC,WAAL,GAAmBA,WAAnB;;;;;;;SAOKC,WAAL,GAAmBA,WAAnB;;;;;;;SAOKC,cAAL,GAAsBA,cAAtB;;;;;;;SAOK3P,IAAL,GAAYA,IAAZ;;;;;;;SAOKkS,IAAL,GAAYlS,KAAK,CAAL,CAAZ;;gBAEYmP,EAAZ,CAAeb,MAAf,CAAsB9F,IAAtB,CAA2B,IAA3B;;;;;kCAGY;;;mCAEC;;;;;;;;;;;;6BASNjJ,UAAU;aACV,KAAK4P,EAAL,CAAQS,QAAR,CAAiBrQ,QAAjB,CAAP;;;;;;AA5IEgP,MACGqB,WAAW;;;AA+IpB5N,eAAeuM,KAAf,EAAsB,OAAtB,EAEA;;ACpJO,SAASuH,SAAT,CAAmBZ,KAAnB,EAA0Ba,OAA1B,EAAmC;MAClCC,cAAcD,QAAQb,KAAR,CAApB;;SAEOL,aAAapC,KAAb,EAAoBuD,WAApB,IACHA,WADG,GAEHd,KAFJ;;;AAKF,AAAO,SAASM,SAAT,CAAmBvG,KAAnB,EAA0B8G,OAA1B,EAAmC;MAClCC,cAAcD,QAAQ9G,KAAR,CAApB;;SAEO4F,aAAatG,KAAb,EAAoByH,WAApB,IACHA,WADG,GAEH/G,KAFJ;;;ACVK,SAASgH,OAAT,CAAiBrK,IAAjB,EAAuBsK,SAAvB,EAAkC;MACjC9D,aAAa,IAAI1L,IAAJ,CAASwP,SAAT,EAAoBlW,IAApB,CAAyB,CAAzB,CAAnB;;MAEI,CAACoS,WAAWvS,MAAhB,EAAwB;UAChB,IAAIsW,KAAJ,CAAU,8DAAV,CAAN;;;MAGE/D,WAAWrM,IAAX,CAAgB,iBAAhB,CAAJ,EAAwC;UAChC,IAAIoQ,KAAJ,CAAU,uEAAV,CAAN;;;MAGE5T,SAASqJ,IAAT,CAAJ,EAAoB;WACX;YACC,EADD;aAEE,CAAC;cACAA;OADD;KAFT;;;MAQEzJ,QAAQyJ,IAAR,CAAJ,EAAmB;WACV;YACC,EADD;aAEEA;KAFT;;;MAMIwK,SA3BiC;;;;;;;;;IA2Bf3D,KA3Be;;WAAA,CA4B9B4D,KA5B8B,GA4BtBzK,KAAKvL,IA5BiB;WAAA,CA6B9BgU,KA7B8B,GA6BtBzI,KAAKnM,KA7BiB;;;MAgCjCyV,QAAQjD,YAAY;UAClB;YACE;KAFgB;iBAIXmE,SAJW;YAKhBhE,UALgB;;GAAZ,CAAd;;aAUGrM,IADH,CACQ,iBADR,EAC2BmP,KAD3B,EAEG7Q,IAFH,CAEQ,aAFR,EAEuB,EAFvB;;;ACxBF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA,IAAMiS,aAAa,EAAnB;AACA,IAAMC,aAAa,EAAnB;AACA,IAAMC,iBAAiB,2CAAvB;AACA,IAAMC,kBAAkB,4BAAxB;AACA,IAAMC,2BAA2B,SAAjC;AACA,IAAMC,8BAA8B,YAApC;AACA,IAAMC,YAAY,IAAIlQ,IAAJ,EAAlB;AACA,IAAMmQ,WAAW,EAAjB;AACA,IAAMC,eAAe,EAArB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAqCMrE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gCAiEerH,KAAK;cACd2E,KAAR,+BAA0C3E,IAAI2L,QAAJ,IAAgB3L,IAAI4L,UAA9D,gCAAoG5L,IAAI8J,KAAJ,CAAU/F,EAAV,CAAazN,IAAjH,UAA6H0J,GAA7H;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wCASyB6L,MAAM;iBACpBzO,IAAX,CAAgByO,IAAhB;;aAEO,YAAM;wBACKX,UAAhB,EAA4BW,IAA5B;OADF;;;;;;;;;;;wCAUyBA,MAAM;iBACpBzO,IAAX,CAAgByO,IAAhB;;aAEO,YAAM;wBACKV,UAAhB,EAA4BU,IAA5B;OADF;;;;;;;;;;;;;;0BAaWvV,MAAMqT,YAAU;;;UACvB1S,WAAW0S,UAAX,KAAwB,CAACF,aAAapC,KAAb,EAAoBsC,UAApB,CAA7B,EAA4D;;;YACpDlC,eAAckC,UAApB;;;;;4BAKc5E,IAAZ,EAAkB;;;2HACVA,IADU;;wBAEhB,aAAkBA,IAAlB;;;;;UALqBsC,KAAzB,UACSyE,QADT,GACoBrE,aAAYqE,QADhC;;;UAUE,CAAC7U,WAAW0S,UAAX,CAAD,IAAyB5S,QAAQ4S,UAAR,CAA7B,EAAgD;;;;;;;;;;;;UACrBtC,KAAzB,WACSyE,QADT,GACoB;gBACV,EADU;iBAETnC;SAHX;;;UAQE,CAAC1S,WAAW0S,UAAX,CAAD,IAAyBA,WAAS1U,IAAlC,IAA0C0U,WAAStV,KAAvD,EAA8D;;;;;;;;;;;;UACnCgT,KAAzB,WACSyE,QADT,GACoBnC,UADpB;;;UAKE,CAACF,aAAapC,KAAb,EAAoBsC,UAApB,CAAL,EAAoC;gBAC1BoC,IAAR,gIAA2IzV,IAA3I;;;;;UAKE6D,WAAW7D,IAAX,CAAJ,EAAsB;gBACZyV,IAAR,WAAsBzV,IAAtB;;;;;UAKE,CAAC8U,eAAe/P,IAAf,CAAoB/E,IAApB,CAAL,EAAgC;gBACtByV,IAAR,YAAuBzV,IAAvB;;;;;UAKE,CAAClB,eAAe,IAAf,EAAqB,SAArB,CAAL,EAAsC;aAC/BgS,OAAL,GAAetP,OAAOE,SAAS,IAAT,EAAeoP,OAAtB,CAAf;;;UAGE,CAAChS,eAAe,IAAf,EAAqB,eAArB,CAAL,EAA4C;aACrC4W,aAAL,GAAqB,EAArB;;;UAGE,CAAC5W,eAAe,IAAf,EAAqB,aAArB,CAAL,EAA0C;aACnC6W,WAAL,GAAmBnU,OAAO,IAAP,CAAnB;;;UAGE;qBACSoT,WAAWf,MAAX,CAAkB,UAACS,WAAD,EAAciB,IAAd,EAAuB;cAC5CK,qBAAqBL,KAAKjB,WAAL,EAAkBtU,IAAlB,SAA3B;;iBAEOmT,aAAapC,KAAb,EAAoB6E,kBAApB,IACHA,kBADG,GAEHtB,WAFJ;SAHS,EAMRjB,UANQ,CAAX;OADF,CAQE,OAAO3J,GAAP,EAAY;gBACJ2E,KAAR,CAAc,+CAAd,EAA+D3E,GAA/D;;;UAGEjJ,QAAQ4S,WAASmC,QAAjB,CAAJ,EAAgC;mBACrBA,QAAT,GAAoB;gBACZ,EADY;iBAEXnC,WAASmC;SAFlB;;;gCASEnC,WAASmC,QAjFc;UA+EzB7W,IA/EyB,uBA+EzBA,IA/EyB;UAgFzBZ,KAhFyB,uBAgFzBA,KAhFyB;;;iBAmFlB4U,KAAT,GAAiB5U,KAAjB;iBACS4W,KAAT,GAAiBhW,IAAjB;iBACSmS,OAAT,GAAmBhS,eAAeuU,UAAf,EAAyB,SAAzB,IACfA,WAASvC,OADM,GAEftP,OAAO,KAAKsP,OAAZ,CAFJ;iBAGSG,OAAT,GAAmBnS,eAAeuU,UAAf,EAAyB,SAAzB,IACfA,WAASpC,OADM,GAEfzP,OAAO,KAAKyP,OAAZ,CAFJ;;UAIInS,eAAeuU,UAAf,EAAyB,aAAzB,CAAJ,EAA6C;iBAClCA,WAASsC,WAAlB,EAA+B,IAA/B;;;WAGG7E,OAAL,CAAa9Q,IAAb,IAAqBqT,UAArB;;aAEOA,UAAP;;;;;;;;;;;;2BASSrT,MAAM;aACR,KAAK8Q,OAAL,CAAa9Q,IAAb,CAAP;;;;;;;;;;;;6BAScA,MAAM;aACb,KAAKiR,OAAL,CAAajR,IAAb,CAAP;;;;;;;;;;;;;yBAUUwU,WAAW;;;;;;;;;;WACmCA,SAAxD;;;;;;;;;;;;;;0BAWWxU,MAAMqT,UAAU;;;UACvB1S,WAAW0S,QAAX,KAAwB,CAACF,aAAatG,KAAb,EAAoBwG,QAApB,CAA7B,EAA4D;YACpDjF,eAAciF,QAApB;;;;;;;;;;;;wCAGclF,QADd,EACwBX,QADxB,EACkC;0BAC9B,YAAkBW,QAAlB,EAA4BX,QAA5B,EAAsC,IAAtC;;;;UAFqBX,KAAzB;;;UAOE,CAACsG,aAAatG,KAAb,EAAoBwG,QAApB,CAAL,EAAoC;gBAC1BoC,IAAR,WAAsBzV,IAAtB;;;;;UAKE8D,WAAW9D,IAAX,CAAJ,EAAsB;gBACZyV,IAAR,WAAsBzV,IAAtB;;;;;UAKE,CAAC+U,gBAAgBhQ,IAAhB,CAAqB/E,IAArB,CAAL,EAAiC;gBACvByV,IAAR,YAAuBzV,IAAvB;;;;;UAKE,CAAClB,eAAe,IAAf,EAAqB,SAArB,CAAL,EAAsC;aAC/BmS,OAAL,GAAezP,OAAOE,SAAS,IAAT,EAAeuP,OAAtB,CAAf;;;UAGE;mBACS4D,WAAWhB,MAAX,CAAkB,UAACS,WAAD,EAAciB,IAAd,EAAuB;cAC5CK,qBAAqBL,KAAKjB,WAAL,EAAkBtU,IAAlB,SAA3B;;iBAEOmT,aAAatG,KAAb,EAAoB+I,kBAApB,IACHA,kBADG,GAEHtB,WAFJ;SAHS,EAMRjB,QANQ,CAAX;OADF,CAQE,OAAO3J,GAAP,EAAY;gBACJ2E,KAAR,CAAc,+CAAd,EAA+D3E,GAA/D;;;eAGOqD,MAAT,GAAkBN,oBAAoBzM,IAApB,CAAlB;;WAEKiR,OAAL,CAAajR,IAAb,IAAqBqT,QAArB;;aAEOA,QAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2BA4BuB;wCAAVO,QAAU;gBAAA;;;aAChBA,SAASC,MAAT,CAAgBO,SAAhB,EAA2B,IAA3B,CAAP;;;;iBAGU3F,IAAZ,EAAkB;;;;QAEdzO,IAFc,GAYZyO,IAZY,CAEdzO,IAFc;QAGR6V,YAHQ,GAYZpH,IAZY,CAGdpC,IAHc;QAIdgF,UAJc,GAYZ5C,IAZY,CAId4C,UAJc;QAKdH,QALc,GAYZzC,IAZY,CAKdyC,QALc;QAMdtL,MANc,GAYZ6I,IAZY,CAMd7I,MANc;QAOd8K,UAPc,GAYZjC,IAZY,CAOdiC,UAPc;QAQd3C,WARc,GAYZU,IAZY,CAQdV,WARc;QASdC,WATc,GAYZS,IAZY,CASdT,WATc;QAUdC,cAVc,GAYZQ,IAZY,CAUdR,cAVc;QAWd0C,SAXc,GAYZlC,IAZY,CAWdkC,SAXc;;QAaVlB,mBAAmB,EAAzB;QACM0B,cAAczP,SAAS,IAAT,EAAeyP,WAAnC;QACM2E,iBAAiB,EAAvB;QACMlJ,SAAS,EAAf;QACMsF,gBAAgBtM,kBAAkBmL,KAAxC;;2BAEuB,IAAvB,EAA6B;;;;;;;SAOxB,IAPwB;;;;;;;;;;;;;;;;;UAwBvB;kBAAA;8BAAA;iBAGO,EAHP;sBAAA;8BAAA;gCAAA;gCAAA;sCAAA;iBASO,IAAI/L,IAAJ,EATP;YAUEmM,WAVF;sBAWYD,QAXZ;kBAYQ4E,cAZR;sBAAA;4BAAA;0CAAA;mBAgBS,KAhBT;oBAiBU,KAjBV;kBAkBQ,kBAACC,IAAD,EAAOC,QAAP,EAAiBC,WAAjB,EAA8BC,YAA9B,EAA4CC,QAA5C,EAAsDC,QAAtD,EAAmE;cACvE,CAACzV,WAAWoV,IAAX,CAAL,EAAuB;mBACdA,IAAP;;;yBAGa,CAAC,CAACG,YAAjB;qBACW,CAAC,CAACC,QAAb;;cAEM/G,QAASpP,SAAS,SAAT,IAAsB,CAACmW,QAAxB,IAAqCC,QAArC,GACV,CAACA,kBAAD,EAAmB3I,EAAnB,CAAsB2B,KADZ,SAAd;;qBAG6B6G,cAAcA,YAAYxI,EAA1B,GAA+B,EAXe;cAWnEgC,gBAXmE,QAWnEA,gBAXmE;;cAYrE4G,eAAe,CAAC,CAACL,QAAvB;;cAEM9H,WAAW,SAAXA,QAAW,GAAM;gBACjBoI,eAAJ;;gBAEID,YAAJ,EAAkB;oBACVtG,QAAN,GAAiB,IAAjB;oBACMC,WAAN,GAAoB,EAApB;;;gBAGE;uBACO+F,KAAK3G,KAAL,CAAT;aADF,CAEE,OAAO1F,GAAP,EAAY;kBACR4L,UAAJ,GAAiBS,IAAjB;kBACIV,QAAJ,GAAeU,KAAKV,QAApB;kBACI7B,KAAJ;;kBAEI7S,WAAWwQ,YAAYoF,WAAvB,CAAJ,EAAyC;oBACnC;8BACUA,WAAZ,CAAwB7M,GAAxB;iBADF,CAEE,OAAO8M,CAAP,EAAU;0BACFnI,KAAR,CAAc,sCAAd,EAAsDmI,CAAtD;;;;;gBAKFH,YAAJ,EAAkB;kBACVI,gBAAgB,EAAtB;;2BAEa1S,MAAMiM,WAAnB,EAAgC,UAACtC,QAAD,EAAc;oBACtCC,UAAU,SAAVA,OAAU,GAAM;sBACd+I,YAAYxI,UAAlB;;sBAEIwI,cAAcJ,MAAd,IAAwB,CAACL,YAAYxI,EAAZ,CAAeyG,SAA5C,EAAuD;6BAC5CwC,SAAT,EAAoBJ,MAApB;;iBAJJ;oBAOMK,eAAe;4CAAA;kCAAA;;iBAArB;;wBAMQpH,QAAR,GAAmB,YAAM;+BACVkH,aAAb,EAA4B,UAACE,YAAD,EAAkB;wBAE1ChJ,OAF0C,GAIxCgJ,YAJwC,CAE1ChJ,OAF0C;wBAG1CD,QAH0C,GAIxCiJ,YAJwC,CAG1CjJ,QAH0C;;;oCAM5B+B,gBAAhB,EAAkCkH,YAAlC;oCACgBjJ,QAAhB,EAA0BC,OAA1B;mBAPF;iBADF;;8BAYc7G,IAAd,CAAmB6P,YAAnB;iCACiB7P,IAAjB,CAAsB6P,YAAtB;yBACS7P,IAAT,CAAc6G,OAAd;eA5BF;;oBA+BMoC,QAAN,GAAiB,KAAjB;oBACMC,WAAN,GAAoB,EAApB;;;mBAGKsG,MAAP;WA9DF;;iBAiEOpI,UAAP;SAjGA;gBAmGM,mBAAC+F,cAAD,EAAoB;iBACrBxG,EAAL,CAAQyG,SAAR,GAAoB,IAApB;;yBAEezE,gBAAf;;uBAEaqG,cAAb,EAA6BxC,sBAA7B;uBACa1G,MAAb,EAAqB0G,sBAArB;;cAEI;mBACGa,YAAL;WADF,CAEE,OAAOzK,GAAP,EAAY;oBACJ2E,KAAR,wBAAoCrO,IAApC,qBAA2D0J,GAA3D;;;cAGE,CAACuK,cAAD,IAAmB/B,aAAvB,EAAsC;mBAC7BzE,EAAP,CAAUmJ,aAAV,CAAwB,OAAKnJ,EAAL,CAAQwE,OAAhC;;;cAGE,CAACgC,cAAD,IAAmBlG,WAAvB,EAAoC;4BAClBA,YAAYN,EAAZ,CAAeyD,QAA/B;;;iBAGGzD,EAAL,CAAQwE,OAAR,CAAgBtM,MAAhB;SAzHA;uBA2Ha,uBAACkR,UAAD,EAAgB;iBACxBpJ,EAAL,CAAQwE,OAAR,GAAkB4E,UAAlB;;cAEI,OAAKpJ,EAAL,CAAQuF,UAAZ,EAAwB;gBAClB;qBACG8D,cAAL;aADF,CAEE,OAAOpN,GAAP,EAAY;sBACJ2E,KAAR,wBAAoCrO,IAApC,2BAAiE0J,GAAjE;;;SAlIJ;oBAsIU,oBAACqN,YAAD,EAAeC,YAAf,EAAgC;cACpCC,aAAa,OAAKxJ,EAAL,CAAQwE,OAA3B;cACMjU,QAAQiZ,WAAW1Y,OAAX,CAAmBwY,aAAa,CAAb,EAAgBtT,eAAnC,IAAsD,CAApE;cACIoT,mBAAJ;;cAEI7Y,UAAU,CAAd,EAAiB;yBACF+Y,aAAa3T,GAAb,CAAiB6T,UAAjB,CAAb;WADF,MAEO;yBACQA,WACVlY,KADU,CACJ,CADI,EACDf,KADC,EAEVoF,GAFU,CAEN2T,YAFM,EAEQE,WAAWlY,KAAX,CAAiBf,KAAjB,CAFR,CAAb;;;iBAKGyP,EAAL,CAAQyJ,aAAR,CAAsBL,UAAtB;;cAEI3E,iBAAiB,CAAC8E,YAAtB,EAAoC;mBAC3BvJ,EAAP,CAAU4E,UAAV,CAAqB0E,YAArB,EAAmCC,YAAnC;;SAtJF;qBAyJW,qBAACG,aAAD,EAAgBC,KAAhB,EAA0B;cAC/BH,aAAa,OAAKxJ,EAAL,CAAQwE,OAA3B;cACMjU,QAAQiZ,WAAW1Y,OAAX,CAAmB4Y,cAAc,CAAd,CAAnB,CAAd;cACME,aAAaJ,WAAW1Y,OAAX,CAAmB6Y,MAAM,CAAN,CAAnB,IAA+B,CAAlD;cACIP,mBAAJ;;cAEIQ,eAAe,CAAnB,EAAsB;yBACPF,cAAc/T,GAAd,CACX6T,WAAWlY,KAAX,CAAiBsY,UAAjB,EAA6BrZ,KAA7B,CADW,EAEXiZ,WAAWlY,KAAX,CAAiBf,QAAQmZ,cAAchZ,MAAvC,CAFW,CAAb;WADF,MAKO,IAAIH,QAAQqZ,UAAZ,EAAwB;yBAChBJ,WACVlY,KADU,CACJ,CADI,EACDsY,UADC,EAEVjU,GAFU,CAGT+T,aAHS,EAITF,WAAWlY,KAAX,CAAiBsY,UAAjB,EAA6BrZ,KAA7B,CAJS,EAKTiZ,WAAWlY,KAAX,CAAiBf,QAAQmZ,cAAchZ,MAAvC,CALS,CAAb;WADK,MAQA;yBACQ8Y,WACVlY,KADU,CACJ,CADI,EACDf,KADC,EAEVoF,GAFU,CAGT6T,WAAWlY,KAAX,CAAiBf,QAAQmZ,cAAchZ,MAAvC,EAA+CkZ,UAA/C,CAHS,EAITF,aAJS,EAKTF,WAAWlY,KAAX,CAAiBsY,UAAjB,CALS,CAAb;;;iBASG5J,EAAL,CAAQyJ,aAAR,CAAsBL,UAAtB;;cAEI3E,iBAAiBmF,UAArB,EAAiC;mBACxB5J,EAAP,CAAU6J,WAAV,CAAsBH,aAAtB,EAAqCC,KAArC;;SAzLF;uBA4La,uBAACG,eAAD,EAAqB;iBAC7B9J,EAAL,CAAQyJ,aAAR,CAAsB,OAAKzJ,EAAL,CAAQwE,OAAR,CAAgBuF,MAAhB,CAAuB,UAAClZ,IAAD;mBAC3CiZ,gBAAgBhZ,OAAhB,CAAwBD,IAAxB,MAAkC,CAAC,CADQ;WAAvB,CAAtB;;cAII4T,aAAJ,EAAmB;mBACVzE,EAAP,CAAUmJ,aAAV,CAAwBW,eAAxB;;SAlMF;2BAqMiB,2BAACE,eAAD,EAAkBC,QAAlB,EAA+B;cACxC/G,SADwC,GAC1B,OAAKlD,EADqB,CACxCkD,SADwC;;cAE5CyG,QAAQlC,SAAZ;;cAEIvE,qBAAqBI,KAAzB,EAAgC;oBACtBJ,UAAUlD,EAAV,CAAa0E,aAAb,CAA2BsF,eAA3B,EAA4CC,QAA5C,CAAR;WADF,MAEO,IAAI/G,SAAJ,EAAe;oBACZA,SAAR;4BACgByB,WAAhB,CAA4BzB,SAA5B;;gBAEIuB,aAAJ,EAAmB;kBACbwF,QAAJ,EAAc;uBACLjK,EAAP,CAAU6J,WAAV,CAAsBG,eAAtB,EAAuCL,KAAvC;eADF,MAEO;uBACE3J,EAAP,CAAU4E,UAAV,CAAqBoF,eAArB,EAAsC,IAAtC;;;WARC,MAWA,IAAIvF,aAAJ,EAAmB;gBAChBvB,UADgB,GACF/K,OAAO6H,EADL,CAChBkD,SADgB;;;gBAGpBA,UAAJ,EAAe;kBACTqG,qBAAJ;;kBAEIrG,sBAAqBI,KAAzB,EAAgC;wBACtBJ,WAAUlD,EAAV,CAAa0E,aAAb,CAA2BsF,eAA3B,EAA4CC,QAA5C,CAAR;+BACe,IAAf;eAFF,MAGO;wBACG/G,UAAR;+BACe,KAAf;gCACgByB,WAAhB,CAA4BzB,UAA5B;;;kBAGE+G,QAAJ,EAAc;uBACLjK,EAAP,CAAU6J,WAAV,CAAsBG,eAAtB,EAAuCL,KAAvC;eADF,MAEO;uBACE3J,EAAP,CAAU4E,UAAV,CAAqBoF,eAArB,EAAsCT,YAAtC;;aAfJ,MAiBO;sBACGpR,OAAO6H,EAAP,CAAU6E,iBAAV,CAA4BmF,eAA5B,EAA6CC,QAA7C,CAAR;;WArBG,MAuBA;4BACW/O,IAAhB,CAAqB+H,UAArB,EAAiC,KAAjC;;;cAGEgH,QAAJ,EAAc;mBACPjK,EAAL,CAAQ6J,WAAR,CAAoBG,eAApB,EAAqCL,KAArC;WADF,MAEO;mBACA3J,EAAL,CAAQ4E,UAAR,CAAmBoF,eAAnB,EAAoC,IAApC;;;iBAGKL,KAAP;SAvPA;uBAyPa,uBAACK,eAAD,EAAkBC,QAAlB,EAA+B;cACpC/G,SADoC,GACtB,OAAKlD,EADiB,CACpCkD,SADoC;;cAExCyG,QAAQlC,SAAZ;cACIyC,uBAAJ;;cAEI,OAAKlK,EAAL,CAAQwE,OAAR,CAAgB9T,MAApB,EAA4B;oBAClB,OAAKsP,EAAL,CAAQwE,OAAR,CAAgB3T,IAAhB,CAAqB,CAAC,CAAtB,CAAR;6BACiB,IAAjB;4BACgB8T,WAAhB,CAA4BgF,KAA5B;WAHF,MAIO,IAAIzG,qBAAqBI,KAAzB,EAAgC;oBAC7BJ,UAAUlD,EAAV,CAAa0E,aAAb,CAA2BsF,eAA3B,EAA4CC,QAA5C,CAAR;WADK,MAEA,IAAI/G,SAAJ,EAAe;oBACZA,SAAR;6BACiB,IAAjB;4BACgByB,WAAhB,CAA4BzB,SAA5B;WAHK,MAIA,IAAIuB,aAAJ,EAAmB;oBAChBtM,OAAO6H,EAAP,CAAU6E,iBAAV,CAA4BmF,eAA5B,EAA6CC,QAA7C,CAAR;WADK,MAEA;4BACW/O,IAAhB,CAAqB+H,UAArB,EAAiC,KAAjC;;;cAGEwB,iBAAiByF,cAArB,EAAqC;gBAC/BD,QAAJ,EAAc;qBACLjK,EAAP,CAAU6J,WAAV,CAAsBG,eAAtB,EAAuCL,KAAvC;aADF,MAEO;qBACE3J,EAAP,CAAU4E,UAAV,CAAqBoF,eAArB;;;;iBAIGL,KAAP;;;KA9SN;;kBAmTcjG,YAAYuE,aAA1B,EAAyC,UAAC3X,KAAD,EAAQa,QAAR,EAAqB;aACvDA,QAAL,IAAiBb,KAAjB;KADF;iBAGaoT,YAAYwD,KAAzB,EAAgC,UAAC/V,QAAD,EAAc;aACvCA,QAAL,IAAiB,OAAKA,QAAL,CAAjB;KADF;;QAIM0N,aAAa9K,OAAO,IAAP,CAAnB;QACI6K,OAAO7K,OAAO2P,YAAYwE,WAAZ,IAA2B,IAAlC,CAAX;QACI/D,iBAAJ;;kBAEciE,YAAd,EAA4B,UAAC9X,KAAD,EAAQwO,GAAR,EAAgB;UACpCsF,UAAUjO,aAAamB,IAAb,CAAkBwH,GAAlB,CAAhB;UACMqL,YAAY/F,WAAWD,QAAX,GACdpQ,OAAO6K,IAAP,CADc,GAEdA,IAFJ;;aAIOuL,SAAP;;UAEI/F,OAAJ,EAAa;YACLgG,WAAW7J,YAAYP,EAAZ,CAAeS,QAAf,CAAwBnQ,KAAxB,EAA+B,UAACA,KAAD,EAAW;wBAC3C6Z,SAAd,EAAyBpL,aAAzB;iBACOoL,SAAP,EAAkBxK,kBAAkBrP,KAAlB,CAAlB;wBACcsO,IAAd,EAAoBC,UAApB;SAHe,SAAjB;;mBAMW,IAAX;;eAEOtN,OAAO4Y,SAAP,EAAkBxK,kBAAkByK,QAAlB,CAAlB,CAAP;;;UAGIC,cAAc9X,SAAS,YAA7B;UACMkW,eAAe4B,eAAevL,QAAQ,OAA5C;;iBAEW,KAAX;;UAEIvM,SAAS,QAAT,IAAqBuM,QAAQ,KAAjC,EAAwC;gBAC9ByB,YAAYP,EAAZ,CAAeS,QAAf,CAAwBnQ,KAAxB,EAA+B,UAACA,KAAD,EAAW;oBACtCwO,GAAV,IAAiBxO,KAAjB;wBACcsO,IAAd,EAAoBC,UAApB;SAFM,UAGC4J,YAHD,EAGe4B,eAAe/J,YAAYN,EAAZ,CAAezN,IAAf,KAAwB,SAHtD,CAAR;;;gBAMQuM,GAAV,IAAiBxO,KAAjB;KAhCF;;2BAmCuB,IAAvB,EAA6B;;;;;;YAMrBuO,UANqB;;;;;;;eAalB9K,OACPwM,cACIA,YAAYqB,OADhB,GAEI,IAHG;KAbX;;kBAoBchD,IAAd,EAAoBC,UAApB;;QAEIyB,WAAJ,EAAiB;kBACHN,EAAZ,CAAeyD,QAAf,CAAwBpK,IAAxB,CAA6B,IAA7B;;;;;;;;;;;;;;qCAUa;;;;;;;;;;qCAOA;;;;;;;;;;kCAOH;;;;;;;;;;mCAOC;;;;;;;;;;;qCAQE;aACR,KAAK2G,EAAL,CAAQsK,MAAR,CAAehZ,KAAf,EAAP;;;;;;;;;;;;qCASe;aACR,KAAK0O,EAAL,CAAQb,MAAR,CAAe7N,KAAf,EAAP;;;;;;;;;;;;kCASY;aACL,KAAK0O,EAAL,CAAQuK,YAAf;;;;;;;;;;;;qCASe;aACR,KAAKvK,EAAL,CAAQpG,EAAf;;;;;;;;;;;;6BASO;aACA,KAAKoG,EAAL,CAAQwE,OAAR,CAAgBlT,KAAhB,EAAP;;;;;;;;;;;;qCASe;aACR,KAAK0O,EAAL,CAAQM,WAAf;;;;;;;;;;;;oCASc;aACP,KAAKN,EAAL,CAAQiD,UAAR,CAAmB3R,KAAnB,EAAP;;;;;;;;;;;;qCASe;aACR,KAAK0O,EAAL,CAAQO,WAAf;;;;;;;;;;;;wCASkB;aACX,KAAKP,EAAL,CAAQQ,cAAf;;;;;;;;;;;;;;;6BAYO8H,MAAMlY,UAAyB;UAAfoB,MAAe,uEAAN,IAAM;;aAC/B,KAAKwO,EAAL,CAAQS,QAAR,CAAiB6H,IAAjB,EAAuBlY,QAAvB,EAAiCoB,MAAjC,CAAP;;;;+BAGS;aACF,KAAKwO,EAAL,CAAQzN,IAAf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BAoCa;;;yCAANrB,IAAM;YAAA;;;UACPsZ,aAAa/Y,UAAUA,UAAUf,MAAV,GAAmB,CAA7B,CAAnB;;UAEI,CAACwC,WAAWsX,UAAX,CAAL,EAA6B;gBACnBxC,IAAR,qDAA+D,KAAKhI,EAAL,CAAQzN,IAAvE;;;;;UAKI2N,UAAU,SAAVA,OAAU,GAAM;;OAAtB;;UAIIzO,UAAUf,MAAV,KAAqB,CAAzB,EAA4B;0BACR,IAAlB,EAAwBwP,OAAxB;wBACgB,IAAhB,EAAsBA,OAAtB;2BACmB,IAAnB,EAAyBA,OAAzB;;;;;;;mBAOWzO,SAAb,EAAwB,UAACN,QAAD,EAAc;YAChCA,aAAaqZ,UAAjB,EAA6B;;;;wBAIdrZ,QAAf;;YAEIA,aAAa,GAAjB,EAAsB;iBACb2U,0BAAwB5F,OAAxB,CAAP;;;YAGE/O,aAAa,MAAjB,EAAyB;iBAChB+U,wBAAsBhG,OAAtB,CAAP;;;YAGE/O,aAAa,SAAjB,EAA4B;iBACnB6U,2BAAyB9F,OAAzB,CAAP;;;YAGEqH,yBAAyBjQ,IAAzB,CAA8BnG,QAA9B,CAAJ,EAA6C;qBAChCA,SAAS0C,OAAT,CAAiB0T,wBAAjB,EAA2C,EAA3C,CAAX;;cAEI,CAAC,OAAKvH,EAAL,CAAQpB,IAAR,CAAazN,QAAb,CAAL,EAA6B;;;;iBAIxB6O,EAAL,CAAQpB,IAAR,CAAazN,QAAb,EAAuB8O,QAAvB,CAAgC2C,IAAhC,CAAqCvJ,IAArC,CAA0C6G,OAA1C;;;;;YAKEsH,4BAA4BlQ,IAA5B,CAAiCnG,QAAjC,CAAJ,EAAgD;qBACnCA,SAAS0C,OAAT,CAAiB2T,2BAAjB,EAA8C,EAA9C,CAAX;;cAEI,CAAC,OAAKxH,EAAL,CAAQ4B,OAAR,CAAgBzQ,QAAhB,CAAL,EAAgC;;;;cAIxB8O,QAPsC,GAOzB,OAAKD,EAAL,CAAQ4B,OAAR,CAAgBzQ,QAAhB,CAPyB,CAOtC8O,QAPsC;;;mBASrC2C,IAAT,CAAcvJ,IAAd,CAAmB6G,OAAnB;iBACKF,EAAL,CAAQgC,gBAAR,CAAyB3I,IAAzB,CAA8B;4BAAA;;WAA9B;;;;;YAQE,CAAC,OAAK2G,EAAL,CAAQ+E,MAAR,CAAe5T,QAAf,CAAL,EAA+B;;;;eAI1B6O,EAAL,CAAQ+E,MAAR,CAAe5T,QAAf,EAAyB8O,QAAzB,CAAkC2C,IAAlC,CAAuCvJ,IAAvC,CAA4C6G,OAA5C;OArDF;;;;;;;;AAp5BEoD,MAOGD,UAAUtP,OAAOqC,UAAP;AAPbkN,MAeGE,UAAUzP,OAAOsC,UAAP;AAfbiN,MAuBG4D,QAAQQ;AAvBXpE,MA+BG4B,QAAQyC;AA/BXrE,MAuCG4E,cAAc;AAvCjB5E,MA+CG2E,gBAAgB;AA/CnB3E,MAuDGyE,WAAW;QACV,EADU;SAET;;;;AAu5BXlV,eAAeyQ,KAAf,EAAsB,OAAtB;AACAnP,SAASmP,MAAMvQ,SAAf,EAA0B,IAA1B,EAEA;;IC7kCM0X;;;;;;;;;;qCASa;gBAYX,KAAKzK,EAZM;mCAEbO,WAFa,CAGXP,EAHW;UAII0K,iBAJJ,sBAITnK,WAJS;UAKOoK,oBALP,sBAKTnK,cALS;UAMKiD,QANL,sBAMT8G,YANS;UASCK,WATD,OASbL,YATa;UAUb/J,cAVa,OAUbA,cAVa;UAWboD,UAXa,OAWbA,UAXa;;UAaXiH,cAAJ;;UAEID,YAAYla,MAAhB,EAAwB;;;;WAInBoa,WAAL,GAAmBJ,iBAAnB;WACKK,cAAL,GAAsBJ,oBAAtB;;UAEI/G,UAAJ,EAAgB;gBACNpT,YAAYiT,QAAZ,EAAsB;cAASpM,QAAT,QAAG9E,IAAH;iBAAwB8E,0BAAyBuM,UAAjD;SAAtB,CAAR;;YAEI,CAACiH,KAAL,EAAY;cACN1S,SAAS,IAAb;;;iBAIE,CAACA,SAASA,OAAO6H,EAAP,CAAUO,WAApB,KACG,EAAEsK,QAAQra,YAAY2H,OAAO6H,EAAP,CAAUgL,OAAtB,EAA+B;gBAAqBC,UAArB,SAAGjL,EAAH,CAAS4D,UAAT;mBAAwCqH,eAAerH,UAAvD;WAA/B,CAAV,CADH,IAEGzL,OAAO6H,EAAP,CAAUO,WAAV,CAAsBP,EAAtB,CAAyBzN,IAAzB,KAAkC,SAHvC,EAIE;;cAEEsY,KAAJ,EAAW;iBACJC,WAAL,GAAmB3S,MAAnB;iBACK4S,cAAL,GAAsBvK,cAAtB;kBACMlQ,KAAN,GAAc;wBACFua,MAAMva,KAAN,CAAY0P,EAAZ,CAAeuK;aAD3B;;;;aAMCjR,KAAL,GAAauR,SAASA,MAAMva,KAAN,CAAYmT,QAAZ,CAAqB/S,MAA9B,GACTma,MAAMva,KAAN,CAAYmT,QADH,GAET,IAFJ;OAtBF,MAyBO;aACAnK,KAAL,GAAamK,QAAb;;;;;EAzDeH;;AAAfmH,OACG1C;;;;;;;;;;;;;;;;;;;AA6DT3R,WAAW,SAAX,IAAwBqU,MAAxB,CAEA;;AClEA,IAAM1C;;;;;;;;;;;;;;;;CAAN;;IAQMmD;;;;;;;;;EAAc5H;;AAAd4H,MACGnD,WAAWA;AADdmD,MAEGhE,QAAQa,SAAS7W;AAFpBga,MAGGhG,QAAQ6C,SAASzX,MAG1B;;;;;;AChBA,AAIA,AACA,AACA,AACA,AAEA,IAAM6a;;CAAN;;AAMA/U,WAAW,QAAX;;;iBACc4K,IAAZ,EAAkB;;;6GACVA,IADU;;;;2BAIdpC,IAJc;qCAKZwG,IALY;QAKND,QALM,mCAKK,OALL;sCAMZ5U,KANY;QAML8U,SANK,oCAMO,QANP;;;WAUT,MAAKrF,EAAZ,EAAgB;mBACD,EADC;WAET,MAAKpB,IAAL,CAAUwM,GAAV,IAAiB9N,SAFR;wBAAA;;KAAhB;;;;;;kCAQY;WACPmD,QAAL,CAAc0K,SAAd,EAAyB,KAAKE,SAA9B;WACKA,SAAL;;;;EArBuC/H,KAA3C;;;OAwBE+H,SAxBF,GAwBc,YAAM;cAWZ,OAAKrL,EAXO;QAEduK,YAFc,OAEdA,YAFc;QAGde,WAHc,OAGdA,WAHc;QAId/K,WAJc,OAIdA,WAJc;QAKd0C,UALc,OAKdA,UALc;QAMdzC,cANc,OAMdA,cANc;QAOdmB,KAPc,OAOdA,KAPc;QAQdwD,QARc,OAQdA,QARc;QASdE,SATc,OASdA,SATc;QAUdkG,GAVc,OAUdA,GAVc;QAaNC,MAbM,UAad5M,IAbc,CAaN4M,MAbM;;QAeVC,iBAAiB,EAAvB;QACMC,iBAAiB,EAAvB;QACMC,UAAU,EAAhB;gBAII,OAAK/M,IArBO;QAmBdgN,MAnBc,SAmBdA,GAnBc;QAoBdC,QApBc,SAoBdA,QApBc;;QAsBVC,QAAQ9Y,QAAQ4Y,MAAR,CAAd;QACMG,UAAUD,QACZnb,YADY,GAEZsB,aAFJ;;QAII6Z,SAAS5Y,WAAWsY,MAAX,CAAb,EAAiC;eACzBI,OACHta,KADG,GAEH0a,IAFG,CAEER,MAFF,CAAN;;;QAKEtY,WAAW2Y,QAAX,CAAJ,EAA0B;iBACb,CAACA,QAAD,CAAX;;;QAGE7Y,QAAQ6Y,QAAR,CAAJ,EAAuB;mBACRA,QAAb,EAAuB,UAAC9B,MAAD,EAAY;iBAC3B6B,OAAI7B,MAAJ,CAAWA,MAAX,CAAN;OADF;;;YAKM6B,MAAR,EAAa,UAACxG,IAAD,EAAO7U,KAAP,EAAiB;YACtB4U,QAAN,IAAkBC,IAAlB;YACMC,SAAN,IAAmB9U,KAAnB;;UAEM6a,MAAM7K,YAAYP,EAAZ,CAAeS,QAAf,CAAwB8K,GAAxB,EAA6B,IAA7B,EAAmC,IAAnC,EAAyC,KAAzC,EAAgD,KAAhD,SAAZ;;qBAEeH,GAAf,IAAsB,CAACM,eAAeN,GAAf,KAAuB,CAAxB,IAA6B,CAAnD;cACQ7a,KAAR,IAAiB6a,GAAjB;KAPF;;UAUMjG,QAAN,IAAkB,IAAlB;UACME,SAAN,IAAmB,IAAnB;;kBAEciG,WAAd,EAA2B,UAACW,KAAD,EAAQb,GAAR,EAAgB;UACrC,CAACM,eAAeN,GAAf,CAAL,EAA0B;qBACXa,KAAb,EAAoB/T,QAApB;;;;;mBAKW+T,MAAMlb,MAAN,CAAa2a,eAAeN,GAAf,CAAb,CAAb,EAAgDlT,QAAhD;KAPF;;QAUIgL,kBAAJ;;YAEQ0I,MAAR,EAAa,UAACxG,IAAD,EAAO7U,KAAP,EAAiB;UACtB6a,MAAMO,QAAQpb,KAAR,CAAZ;UACIwV,cAAJ;;UAEIuF,YAAYF,GAAZ,KAAoBE,YAAYF,GAAZ,EAAiB1a,MAAzC,EAAiD;gBACvC4a,YAAYF,GAAZ,EAAiBc,KAAjB,EAAR;cACMlM,EAAN,CAAS2B,KAAT,CAAe0D,SAAf,IAA4B9U,KAA5B;cACMyP,EAAN,CAAS2B,KAAT,CAAewD,QAAf,IAA2BC,IAA3B;;YAEIW,MAAM/F,EAAN,CAASkD,SAAT,KAAuBA,SAAvB,IAAoCA,SAAxC,EAAmD;oBACvClD,EAAV,CAAa0E,aAAb,CAA2BqB,MAAM/F,EAAN,CAASwE,OAApC,EAA6C,IAA7C;;OANJ,MAQO;gBACG1B,YAAY;gBACZ;8BAAA;gCAAA;sBAAA;wBAAA;kBAKE,SALF;sBAMMyH;WAPM;uBASLW,KATK;wBAAA;gCAAA;6BAAA;kCAAA;wCAAA;;SAAZ,CAAR;;;OAmBDO,eAAeL,GAAf,IAAsBK,eAAeL,GAAf,KAAuB,EAA9C,EAAkD/R,IAAlD,CAAuD0M,KAAvD;YACM/F,EAAN,CAASkD,SAAT,GAAqBA,SAArB;kBACY6C,KAAZ;KAlCF;;WAqCK/F,EAAL,CAAQsL,WAAR,GAAsBG,cAAtB;GAjIJ;;;ACTA,IAAMN;;CAAN;;AAEA/U,WAAW,YAAX;;;;;;;;;;qCACmB;;;UACP6M,UADO,GACQ,KAAKjD,EADb,CACPiD,UADO;kBAMX,KAAKrE,IANM;UAGboE,WAHa,SAGbA,WAHa;UAIbzC,WAJa,SAIbA,WAJa;UAKbC,cALa,SAKbA,cALa;;;WAQVR,EAAL,CAAQS,QAAR,CAAiB0K,WAAjB,EAA4B,YAAM;kBAO5B,OAAKnL,EAPuB;YAE9ByD,QAF8B,OAE9BA,QAF8B;YAG9BtE,MAH8B,OAG9BA,MAH8B;YAI9BhH,MAJ8B,OAI9BA,MAJ8B;YAK9B6J,gBAL8B,OAK9BA,gBAL8B;YAM9BwC,OAN8B,OAM9BA,OAN8B;YAQxBlU,KARwB,GAQd,OAAKsO,IARS,CAQxBtO,KARwB;;;qBAUnBmT,QAAb,EAAuBoC,sBAAvB;qBACa1G,MAAb,EAAqB0G,sBAArB;gBACQ3N,MAAR;;YAEIC,kBAAkBmL,KAAtB,EAA6B;iBACpBtD,EAAP,CAAUmJ,aAAV,CAAwB3E,OAAxB;;;eAGGxE,EAAL,CAAQyD,QAAR,GAAmB,EAAnB;eACKzD,EAAL,CAAQb,MAAR,GAAiB,EAAjB;eACKa,EAAL,CAAQgC,gBAAR,GAA2BA,iBAAiB+H,MAAjB,CAAwB,gBAAyC;cAAtC9J,QAAsC,QAAtCA,QAAsC;cAA5BC,OAA4B,QAA5BA,OAA4B;cAAnBuI,YAAmB,QAAnBA,YAAmB;;cACtFA,YAAJ,EAAkB;mBACT,IAAP;;;0BAGcxI,QAAhB,EAA0BC,OAA1B;SALyB,CAA3B;eAOKF,EAAL,CAAQwE,OAAR,GAAkB,IAAIjN,IAAJ,EAAlB;;YAEI2L,kBAAJ;;qBAEa5S,SAAS,EAAtB,EAA0B,UAACkK,KAAD,EAAW;sBACvBsI,YAAY;kBAChBtI,KADgB;oCAAA;0BAAA;kCAAA;+BAAA;oCAAA;0CAAA;;WAAZ,CAAZ;SADF;OA/BF,EA2CG,IA3CH,EA2CS,IA3CT;;;;EAT+C8I,KAAnD;;;;;ACRA,AACA,AACA,AAEAlN,WAAW,MAAX;;;eASc4K,IAAZ,EAAkB;;;yGACVA,IADU;;mBAMZ,MAAKhB,EANO;QAIdO,WAJc,YAIdA,WAJc;QAKdgK,YALc,YAKdA,YALc;;QAOZha,QAAQ4b,QAAZ;QACMxJ,SAAS4H,aAAa/W,GAAb,CAAiB,UAACgH,KAAD,EAAQ/J,CAAR,EAAc;UAE1C8B,IAF0C,GAKxCiI,KALwC,CAE1CjI,IAF0C;yBAKxCiI,KALwC,CAG1CvF,KAH0C;UAG1CA,KAH0C,gCAGlC,EAHkC;UAI1CwO,QAJ0C,GAKxCjJ,KALwC,CAI1CiJ,QAJ0C;;UAMxC2I,OAAOnX,MAAMoX,EAAjB;;UAEI9Z,SAAS,QAAT,IAAqB6Z,IAAzB,EAA+B;eACtB7L,YAAYP,EAAZ,CAAeS,QAAf,CAAwB2L,IAAxB,EAA8B,UAAC1L,QAAD,EAAc;cAC7C,CAAC,CAACA,QAAF,KAAeiC,OAAOlS,CAAP,CAAnB,EAA8B;;;;iBAIvBA,CAAP,IAAY,CAAC,CAACiQ,QAAd;;cAEIjQ,IAAIF,KAAR,EAAe;;;;cAIXE,IAAIF,KAAR,EAAe;oBACLE,CAAR;kBACK6I,KAAL,GAAamK,QAAb;;;;;cAKIoH,QAAQra,YAAYmS,MAAZ,EAAoBrG,OAApB,CAAd;;cAEIuO,KAAJ,EAAW;oBACDA,MAAMlZ,GAAd;kBACK2H,KAAL,GAAaiR,aAAaM,MAAMlZ,GAAnB,EAAwB8R,QAArC;WAFF,MAGO;oBACG0I,QAAR;kBACK7S,KAAL,GAAa,IAAb;;SAzBG,QAAP;OADF,MA6BO;eACE,IAAP;;;UAGE8S,QAAQ7b,UAAU4b,QAAtB,EAAgC;gBACtB1b,CAAR;cACK6I,KAAL,GAAamK,QAAb;;;aAGK,CAAC,CAAC2I,IAAT;KA9Ca,CAAf;;;;;EAjBmC9I,KAAvC,YACSyE,QADT;;;;;;;;;;;;;;;;;;;;;ACJA,AACA,AACA,AAEA,IAAMoD;;CAAN;;AAEA/U,WAAW,UAAX;;;mBAWc4K,IAAZ,EAAkB;;;iHACVA,IADU;;UAFlBzQ,KAEkB,GAFV4b,QAEU;yBAIdnM,EAJc;yCAKZuK,YALY;QAKZA,YALY,yCAKG,EALH;QAMZhK,WANY,YAMZA,WANY;QAQd3B,IARc,SAQdA,IARc;QASNtO,KATM,SASdsO,IATc,CASNtO,KATM;;;UAYXqS,MAAL,GAAc4H,aAAa/W,GAAb,CAAiB,UAACgH,KAAD,EAAQ/J,CAAR,EAAc;UAEzC8B,IAFyC,GAKvCiI,KALuC,CAEzCjI,IAFyC;yBAKvCiI,KALuC,CAGzCvF,KAHyC;UAGzCA,KAHyC,gCAGjC,EAHiC;UAIzCwO,QAJyC,GAKvCjJ,KALuC,CAIzCiJ,QAJyC;;UAMvC6I,MAAMrX,MAAMoX,EAAN,IAAYvY,IAAtB;;UAEIvB,SAAS,WAAb,EAA0B;cAClBjC,KAAN;OADF,MAEO;cACCiQ,YAAYP,EAAZ,CAAeS,QAAf,CAAwB6L,GAAxB,EAA6B,UAAC5L,QAAD,EAAc;cAC3C6L,OAAO,MAAK5J,MAAL,CAAYlS,CAAZ,EAAeH,KAAtB,EAA6BoQ,QAA7B,CAAJ,EAA4C;;;;gBAIvCiC,MAAL,CAAYlS,CAAZ,EAAeH,KAAf,GAAuBoQ,QAAvB;;cAEIjQ,IAAI,MAAKF,KAAb,EAAoB;;;;cAIhBE,IAAI,MAAKF,KAAb,EAAoB;kBACbA,KAAL,GAAaE,CAAb;kBACK6I,KAAL,GAAamK,QAAb;;;;;cAKIoH,QAAQra,YAAY,MAAKmS,MAAjB,EAAyB;gBAAGrS,KAAH,QAAGA,KAAH;mBACrCic,OAAOjc,KAAP,EAAcsO,KAAKtO,KAAnB,CADqC;WAAzB,CAAd;;cAIIua,KAAJ,EAAW;kBACJta,KAAL,GAAasa,MAAMlZ,GAAnB;kBACK2H,KAAL,GAAauR,MAAMva,KAAN,CAAYmT,QAAzB;WAFF,MAGO;kBACAlT,KAAL,GAAa4b,QAAb;kBACK7S,KAAL,GAAa,IAAb;;SA3BE,QAAN;;;UAgCEiT,OAAOD,GAAP,EAAYhc,KAAZ,KAAsB,MAAKC,KAAL,KAAe4b,QAAzC,EAAmD;cAC5C5b,KAAL,GAAaE,CAAb;cACK6I,KAAL,GAAamK,QAAb;;;aAGK;kBAAA;0BAAA;eAGE6I;OAHT;KAhDY,CAAd;;;;;;qCAwDe;;;WACV7L,QAAL,CAAc0K,WAAd,EAAyB,YAAM;YAEpBzK,QAFoB,GAGzB,OAAK9B,IAHoB,CAE3BtO,KAF2B;;;eAKxBC,KAAL,GAAa4b,QAAb;;qBAEa,OAAKxJ,MAAlB,EAA0B,iBAA4BlS,CAA5B,EAAkC;cAA/B8B,IAA+B,SAA/BA,IAA+B;cAAzBjC,KAAyB,SAAzBA,KAAyB;cAAlBmT,QAAkB,SAAlBA,QAAkB;;cACpD6I,MAAM/Z,SAAS,WAAT,GACRmO,QADQ,GAERpQ,KAFJ;;cAIIic,OAAOD,GAAP,EAAY5L,QAAZ,KAAyB,OAAKnQ,KAAL,KAAe4b,QAA5C,EAAsD;mBAC/C5b,KAAL,GAAaE,CAAb;mBACK6I,KAAL,GAAamK,QAAb;;SAPJ;;YAWI,OAAKlT,KAAL,KAAe4b,QAAnB,EAA6B;iBACtB7S,KAAL,GAAa,IAAb;;OAnBJ;;;;EAhF2CgK,KAA/C,YACSyE,QADT;;;;;;;;;;;;;;;;;;AAyGA,SAASwE,MAAT,CAAgBC,MAAhB,EAAwBC,MAAxB,EAAgC;SACvBD,WAAWC,MAAlB;;;AC5GFpW,WAAW,QAAX;;;;;;;;;;;;;;mLACEpB,KADF,GACU,EADV;;;;;gCAGcyL,QAHd,EAGwB;UAElB7P,IAFkB,GAKhB,IALgB,CAElBA,IAFkB;UAGlB+N,IAHkB,GAKhB,IALgB,CAGlBA,IAHkB;UAIlB3J,KAJkB,GAKhB,IALgB,CAIlBA,KAJkB;;;UAOhB2J,IAAJ,EAAU;mBACGhN,kBAAkBgN,IAAlB,EAAwB,UAAC3J,KAAD,EAAQC,IAAR,EAAiB;gBAC5CA,IAAN,IAAcwL,QAAd;SADS,CAAX;;;oBAKYzL,KAAd,EAAqB,UAAC3E,KAAD,EAAQsG,IAAR,EAAiB;YAChC,EAAEA,QAAQ8J,QAAV,CAAJ,EAAyB;eAClB3G,UAAL,CAAgBnD,IAAhB;;OAFJ;WAKK1B,IAAL,CAAUwL,QAAV;;WAEKzL,KAAL,GAAayL,QAAb;;;;mCAGa;UAEX7P,IAFW,GAIT,IAJS,CAEXA,IAFW;UAGXoE,KAHW,GAIT,IAJS,CAGXA,KAHW;;;WAMR8E,UAAL,CAAgBsE,KAAhB,CAAsBxN,IAAtB,EAA4BmD,KAAKiB,KAAL,CAA5B;;;;EAhCuCmK,KAA3C;;ACAA/I,WAAW,QAAX;;;;;;;;;;;;;;mLACEqW,GADF,GACQ5Y,IADR;;;;;gCAGcxD,KAHd,EAGqB;WACZoc,GAAL;;UAEI,CAACxZ,WAAW5C,KAAX,CAAL,EAAwB;;;;UAIpB,KAAKsO,IAAT,EAAe;aACR8N,GAAL,GAAW,KAAK7b,IAAL,CAAU8b,EAAV,CAAa,KAAK/N,IAAL,CAAUlL,IAAV,CAAe,GAAf,CAAb,EAAkCpD,KAAlC,CAAX;OADF,MAEO;aACAoc,GAAL,GAAW5Y,IAAX;;gBAEQ8M,KAAR,CAAc,iGAAd;;;;;mCAIW;WACR8L,GAAL;;;;EApBuCtN,KAA3C;;ACGA,IAAMwN,oBAAoB,KAA1B;;AAEAvW,WAAW,SAAX;;;;;;;;;;;;;;qLACEwW,OADF,GACY,EADZ;;;;;gCAGcnM,QAHd,EAGwB;UAElB7P,IAFkB,GAKhB,IALgB,CAElBA,IAFkB;UAGlB+N,IAHkB,GAKhB,IALgB,CAGlBA,IAHkB;UAIlBiO,OAJkB,GAKhB,IALgB,CAIlBA,OAJkB;;UAMdC,aAAa,EAAnB;;UAEIlO,IAAJ,EAAU;mBACG8B,WACP9B,IADO,GAEP,EAFJ;;;UAKExL,SAASsN,QAAT,CAAJ,EAAwB;mBACXA,SAASnL,KAAT,CAAeqX,iBAAf,CAAX;;;UAGE5Z,QAAQ0N,QAAR,CAAJ,EAAuB;qBACRmM,OAAb,EAAsB,UAACnT,GAAD,EAAS;cACzBgH,SAAS5P,OAAT,CAAiB4I,GAAjB,MAA0B,CAAC,CAA/B,EAAkC;iBAC3BpB,WAAL,CAAiBoB,GAAjB;;SAFJ;qBAKagH,QAAb,EAAuB,UAAChH,GAAD,EAAS;cAC1BtG,SAASsG,GAAT,CAAJ,EAAmB;uBACNL,IAAX,CAAgBK,GAAhB;iBACK/B,QAAL,CAAc+B,GAAd;;SAHJ;OANF,MAYO;qBACQmT,OAAb,EAAsB,UAACnT,GAAD,EAAS;cACzB,CAACgH,QAAD,IAAa,CAACA,SAAShH,GAAT,CAAlB,EAAiC;iBAC1BpB,WAAL,CAAiBoB,GAAjB;;SAFJ;sBAKcgH,QAAd,EAAwB,UAAC4L,GAAD,EAAM5S,GAAN,EAAc;cAChC4S,GAAJ,EAAS;uBACIjT,IAAX,CAAgBK,GAAhB;iBACK/B,QAAL,CAAc+B,GAAd;;SAHJ;;;WAQGmT,OAAL,GAAeC,UAAf;;;;mCAGa;UAEXjc,IAFW,GAIT,IAJS,CAEXA,IAFW;UAGXgc,OAHW,GAIT,IAJS,CAGXA,OAHW;;;WAMRvU,WAAL,CAAiB+F,KAAjB,CAAuBxN,IAAvB,EAA6Bgc,OAA7B;;;;EAxDyCzN,KAA7C;;;;;ACTA,AACA,AACA,AACA,AAEA/I,WAAW,QAAX;;;iBAGc2K,IAAZ,EAAkB;;;6GACVA,IADU;;QAIdpC,IAJc,SAIdA,IAJc;QAKd4B,cALc,SAKdA,cALc;QAMd3P,IANc,SAMdA,IANc;;QAQZ8Q,QAAQnB,cAAZ;QACIlQ,QAAQ,MAAKmQ,QAAL,EAAZ;;QAEI7B,IAAJ,EAAU;cACAtO,iBAAiBgT,KAAjB,GACJhT,KADI,GAEJkQ,cAFJ;cAGQ5B,KAAK,CAAL,CAAR;;;QAGE1L,WAAW5C,KAAX,CAAJ,EAAuB;YACfO,IAAN;KADF,MAEO,IAAIuC,SAAS9C,KAAT,CAAJ,EAAqB;YACpBA,KAAN,IAAeO,IAAf;;;;;;EAxBqCuO,KAA3C,YACSqB,QADT,GACoB,KADpB;;ICFMsM;;;;;;;;;;gCACQzc,OAAO;UACTO,IADS,GACA,IADA,CACTA,IADS;;;UAGbP,KAAJ,EAAW;aACJmH,IAAL;OADF,MAEO;aACAY,IAAL;;;;;mCAIW;WACRxH,IAAL,CAAUwH,IAAV;;;;EAZgB+G;;AAgBpB/I,WAAW,QAAX,IAAuB0W,KAAvB,CAEA;;;;;ACrBA,AACA,AACA,AACA,AAEA1W,WAAW,QAAX;;;iBAGc2K,IAAZ,EAAkB;;;6GACVA,IADU;;QAIdpC,IAJc,SAIdA,IAJc;QAKd4B,cALc,SAKdA,cALc;QAMduC,IANc,SAMdA,IANc;;QAQZpB,QAAQnB,cAAZ;QACIlQ,QAAQ,MAAKmQ,QAAL,EAAZ;;QAEI7B,IAAJ,EAAU;cACAtO,iBAAiBgT,KAAjB,GACJhT,KADI,GAEJkQ,cAFJ;cAGQ5B,KAAK,CAAL,CAAR;;;QAGE1L,WAAW5C,KAAX,CAAJ,EAAuB;YACfyS,IAAN;KADF,MAEO,IAAI3P,SAAS9C,KAAT,CAAJ,EAAqB;YACpBA,KAAN,IAAeyS,IAAf;;;;;;EAxBqC3D,KAA3C,YACSqB,QADT,GACoB,KADpB;;;;;ACLA,AACA,AACA,AAEApK,WAAW,MAAX;;;eAGc2K,IAAZ,EAAkB;;;yGACVA,IADU;;QAGZ,MAAKpC,IAAT,EAAe;YACR8N,GAAL,GAAW,MAAK7b,IAAL,CAAU8b,EAAV,CAAa,MAAK/N,IAAL,CAAUlL,IAAV,CAAe,GAAf,CAAb,EAAkC,YAAM;cAC5C+M,QAAL;OADS,CAAX;KADF,MAIO;YACAiM,GAAL,GAAW5Y,IAAX;;cAEQ8M,KAAR,CAAc,2FAAd;;;;;;;mCAIW;WACR8L,GAAL;;;;EAlBmCtN,KAAvC,YACSqB,QADT,GACoB,KADpB;;ACDApK,WAAW,QAAX;;;;;;;;;;gCACc/F,KADd,EACqB;UACTO,IADS,GACA,IADA,CACTA,IADS;;;UAGbP,KAAJ,EAAW;aACJ+H,IAAL;OADF,MAEO;aACAZ,IAAL;;;;;mCAIW;WACR5G,IAAL,CAAUwH,IAAV;;;;EAZuC+G,KAA3C;;ACIA,IAAMvG,+BAA6B,SAAnC;AACA,IAAMmU,4BAA4B,SAAlC;;AAEA3W,WAAW,SAAX;;;;;;;;;;;;;;qLACEhB,GADF,GACQ,EADR;;;;;gCAGcqL,QAHd,EAGwBX,QAHxB,EAGkC;UAE5BlP,IAF4B,GAK1B,IAL0B,CAE5BA,IAF4B;UAG5B+N,IAH4B,GAK1B,IAL0B,CAG5BA,IAH4B;UAI5BvJ,GAJ4B,GAK1B,IAL0B,CAI5BA,GAJ4B;;;UAO1BuJ,IAAJ,EAAU;mBACGhN,kBAAkBgN,IAAlB,EAAwB,UAACvJ,GAAD,EAAMuB,IAAN,EAAe;cAC5CA,IAAJ,IAAY8J,QAAZ;SADS,CAAX;;;UAKEtN,SAASsN,QAAT,CAAJ,EAAwB;mBACXxQ,iBACTwQ,SACGnL,KADH,CACSsD,4BADT,EAEGkR,MAFH,CAEUzN,OAFV,EAGG9I,GAHH,CAGOyZ,wBAHP,CADS,EAKT7X,YALS,CAAX;;;oBASYC,GAAd,EAAmB,UAAC/E,KAAD,EAAQsG,IAAR,EAAiB;YAC9B,CAAC8J,SAAS9J,IAAT,CAAL,EAAqB;eACd0E,SAAL,CAAe1E,IAAf;;OAFJ;WAKKvB,GAAL,CAASqL,QAAT;;WAEKrL,GAAL,GAAWqL,QAAX;;;;mCAGa;UAEX7P,IAFW,GAIT,IAJS,CAEXA,IAFW;UAGXwE,GAHW,GAIT,IAJS,CAGXA,GAHW;;;WAMRiG,SAAL,CAAe+C,KAAf,CAAqBxN,IAArB,EAA2BmD,KAAKqB,GAAL,CAA3B;;;;EA1CyC+J,KAA7C;;AA8CA,SAAShK,YAAT,CAAoBC,GAApB,EAAyB+P,IAAzB,EAA+B;4BACPA,IADO;MACtBxO,IADsB;MAChBtG,KADgB;;MAGzBsG,IAAJ,IAAYtG,KAAZ;;;AAGF,SAAS2c,wBAAT,CAAkCvW,KAAlC,EAAyC;MACjCnB,QAAQmB,MAAMnB,KAAN,CAAYyX,yBAAZ,CAAd;;SAEO,CACLzX,MAAM,CAAN,EAAS2X,IAAT,EADK,EAEL3X,MAAM,CAAN,EAAS2X,IAAT,EAFK,CAAP;;;;;;ACjEF,AAIA,AACA,AACA,AAEA7W,WAAW,SAAX;;;kBAGc2K,IAAZ,EAAkB;;;+GACVA,IADU;;QAIdpC,IAJc,SAIdA,IAJc;QAKd4B,cALc,SAKdA,cALc;QAMd3P,IANc,SAMdA,IANc;;QAQV0B,OAAO1B,KAAK0B,IAAL,EAAb;QACMmI,OAAO7J,KAAK+F,IAAL,CAAU,MAAV,CAAb;QACMtG,QAAQ,MAAKmQ,QAAL,EAAd;QACI0M,oBAAoB,IAAxB;;UAEKvW,IAAL,GAAYwW,QAAQ7a,IAAR,EAAcmI,IAAd,EAAoB7J,IAApB,CAAZ;UACK0B,IAAL,GAAYA,IAAZ;UACKmI,IAAL,GAAYA,IAAZ;UACKpK,KAAL,GAAaA,KAAb;UACK+c,OAAL,GAAexc,KAAK8F,IAAL,CAAU,QAAV,CAAf;UACKgL,KAAL,GAAanB,cAAb;;QAEI5B,IAAJ,EAAU;YACH+C,KAAL,GAAarR,iBAAiBgT,KAAjB,GACThT,KADS,GAETkQ,cAFJ;YAGKlQ,KAAL,GAAasO,KAAK,CAAL,CAAb;;;QAGE,CAAC1L,WAAW,MAAK5C,KAAhB,CAAL,EAA6B;0BACP,MAAKqR,KAAL,CAAW3B,EAAX,CAAcS,QAAd,CAAuB,UAACkB,KAAD;eAAWA,MAAM,MAAKrR,KAAX,CAAX;OAAvB,EAAqD,UAACoQ,QAAD,EAAc;YACjF,MAAK6F,YAAL,KAAsB7F,QAA1B,EAAoC;gBAC7B6F,YAAL,GAAoB7F,QAApB;gBACK4M,OAAL,CAAa5M,QAAb;;OAHgB,QAApB;;;QAQI6M,mBAAmB,MAAKH,OAAL,CAAaD,iBAAb,EAAgC,IAAhC,CAAzB;QACMK,0BAA0Bra,MAAMga,iBAAN,CAAhC;QACMM,aAAa/S,SAAS,UAA5B;QACMgT,cAAc,SAAdA,WAAc,GAAM;YACnBnH,YAAL,GAAoB,MAAK6G,OAAL,CAAa,MAAK7G,YAAlB,EAAgC,KAAhC,CAApB;YACKmH,WAAL;KAFF;;QAKIF,2BAA2BC,UAA/B,EAA2C;YACpClH,YAAL,GAAoBgH,gBAApB;YACKG,WAAL;;UAEI,CAACF,uBAAD,IAA4BC,UAAhC,EAA4C;cACrCH,OAAL,CAAaH,iBAAb;;KALJ,MAOO;YACA5G,YAAL,GAAoB4G,iBAApB;YACKG,OAAL,CAAaH,iBAAb;;;UAGGQ,eAAL,GAAuB9c,KAAK8b,EAAL,CAAQiB,gBAAgBrb,IAAhB,EAAsBmI,IAAtB,CAAR,EAAqCgT,WAArC,CAAvB;UACKG,eAAL,GAAuBhd,KAAK2G,OAAL,CAAa,MAAb,EAAqBmV,EAArB,CAAwB,OAAxB,EAAiC,YAAM;iBACjDe,WAAX,EAAwB,CAAxB;KADqB,CAAvB;;;;;;kCAKY;UAEV/L,KAFU,GAKR,IALQ,CAEVA,KAFU;UAGVrR,KAHU,GAKR,IALQ,CAGVA,KAHU;UAIViW,YAJU,GAKR,IALQ,CAIVA,YAJU;;;UAORrT,WAAW5C,KAAX,CAAJ,EAAuB;cACfiW,YAAN;OADF,MAEO;cACCjW,KAAN,IAAeiW,YAAf;;;;;4BAIIjW,KA/EV,EA+EiB;UAEXO,IAFW,GAQT,IARS,CAEXA,IAFW;UAGX0B,IAHW,GAQT,IARS,CAGXA,IAHW;UAIXqE,IAJW,GAQT,IARS,CAIXA,IAJW;UAKX8D,IALW,GAQT,IARS,CAKXA,IALW;UAMXqI,IANW,GAQT,IARS,CAMXA,IANW;UAOXsK,OAPW,GAQT,IARS,CAOXA,OAPW;;;UAUTzW,SAAS,MAAb,EAAqB;aACdC,IAAL,CAAUvG,KAAV;OADF,MAEO,IAAIsG,SAAS,iBAAb,EAAgC;gBAC7B2C,OAAR,CAAgB,UAACuU,MAAD,EAAY;iBACnBC,QAAP,GAAkBzd,MAAMQ,OAAN,CAAcgd,OAAOxd,KAArB,MAAgC,CAAC,CAAnD;SADF;OADK,MAIA;aACAsG,IAAL,CAAUA,IAAV,EAAgBoX,mBAAmBzb,IAAnB,EAAyBjC,KAAzB,EAAgCoK,IAAhC,EAAsCqI,KAAKzS,KAA3C,CAAhB;;;;;4BAIIqS,MApGV,EAoGkBsL,IApGlB,EAoGwB;UAElBpd,IAFkB,GAQhB,IARgB,CAElBA,IAFkB;UAGlB0B,IAHkB,GAQhB,IARgB,CAGlBA,IAHkB;UAIlBqE,IAJkB,GAQhB,IARgB,CAIlBA,IAJkB;UAKlB8D,IALkB,GAQhB,IARgB,CAKlBA,IALkB;UAMlBqI,IANkB,GAQhB,IARgB,CAMlBA,IANkB;UAOlBsK,OAPkB,GAQhB,IARgB,CAOlBA,OAPkB;;;aAUbzW,SAAS,MAAT,GACH/F,KAAKgG,IAAL,EADG,GAEHqX,mBAAmB3b,IAAnB,EAAyB1B,KAAK+F,IAAL,CAAUA,IAAV,CAAzB,EAA0C8D,IAA1C,EAAgDqI,KAAKzS,KAArD,EAA4DqS,MAA5D,EAAoE0K,OAApE,EAA6EY,IAA7E,EAAmFrX,SAAS,iBAA5F,CAFJ;;;;mCAKa;WACR+W,eAAL;WACKE,eAAL;;;;EArHyCzO,KAA7C,YACSqB,QADT,GACoB,KADpB;;AAyHA,SAAS2M,OAAT,CAAiB7a,IAAjB,EAAuBmI,IAAvB,EAA6B7J,IAA7B,EAAmC;UACzB0B,IAAR;SACO,QAAL;;eACS1B,KAAK2N,OAAL,CAAa,UAAb,IACH,iBADG,GAEH,OAFJ;;;SAKG,OAAL;;YACM9D,SAAS,MAAb,EAAqB;iBACZ,OAAP;;;eAGKA,SAAS,OAAT,IAAoBA,SAAS,UAA7B,GACH,SADG,GAEH,OAFJ;;;;;eAMO7J,KAAK2N,OAAL,CAAa,iBAAb,IACH,MADG,GAEH,OAFJ;;;;;AAON,SAASwP,kBAAT,CAA4Bzb,IAA5B,EAAkCjC,KAAlC,EAAyCoK,IAAzC,EAA+CyT,UAA/C,EAA2D;MACrD5b,SAAS,OAAb,EAAsB;WACbjC,KAAP;;;MAGI8d,UAAU1T,SAAS,OAAzB;;MAEI,CAAC0T,OAAD,IAAY1T,SAAS,UAAzB,EAAqC;WAC5BpK,KAAP;;;SAGK8d,UACH9d,UAAU6d,UADP,GAEH7d,MAAMQ,OAAN,CAAcqd,UAAd,MAA8B,CAAC,CAFnC;;;AAKF,SAASD,kBAAT,CAA4B3b,IAA5B,EAAkCjC,KAAlC,EAAyCoK,IAAzC,EAA+CyT,UAA/C,EAA2DxL,MAA3D,EAAmE0K,OAAnE,EAA4EY,IAA5E,EAAkFI,UAAlF,EAA8F;UACpF9b,IAAR;SACO,QAAL;;YACM,CAAC8b,UAAL,EAAiB;iBACR/d,KAAP;;;eAGKJ,iBAAiBmd,OAAjB,EAA0BiB,QAA1B,EAAoC,EAApC,CAAP;;;SAGG,OAAL;;YACM5T,SAAS,OAAT,IAAoBA,SAAS,UAAjC,EAA6C;iBACpCpK,KAAP;;;YAGEoK,SAAS,OAAb,EAAsB;iBACbpK,QACH6d,UADG,GAEH,IAFJ;;;iBAKOxL,UAAU,EAAnB;;YAEI,CAACrS,KAAD,IAAU2d,IAAd,EAAoB;iBACXtL,MAAP;;;YAGErS,KAAJ,EAAW;iBACFqS,OAAO7R,OAAP,CAAeqd,UAAf,MAA+B,CAAC,CAAhC,GACHxL,OAAO4L,MAAP,CAAcJ,UAAd,CADG,GAEHxL,MAFJ;;;YAKIpS,QAAQoS,OAAO7R,OAAP,CAAeqd,UAAf,CAAd;;YAEI5d,UAAU,CAAC,CAAf,EAAkB;6CAEXoS,OAAOrR,KAAP,CAAa,CAAb,EAAgBf,KAAhB,CADL,qBAEKoS,OAAOrR,KAAP,CAAaf,QAAQ,CAArB,CAFL;;;eAMKoS,MAAP;;;;;eAIOrS,KAAP;;;;;AAKN,SAASsd,eAAT,CAAyBrb,IAAzB,EAA+BmI,IAA/B,EAAqC;UAC3BnI,IAAR;SACO,QAAL;;eACS,QAAP;;;SAGG,OAAL;;eAEImI,SAAS,OAAT,IACGA,SAAS,UADZ,IAEGA,SAAS,OAFZ,IAGGA,SAAS,MAJP,GAMH,QANG,GAOH,cAPJ;;;;;eAWO,OAAP;;;;;AAKN,SAAS4T,QAAT,CAAkB3L,MAAlB,QAA+C;MAAnBoL,QAAmB,QAAnBA,QAAmB;MAATzd,KAAS,QAATA,KAAS;;MACzCyd,YAAYpL,OAAO7R,OAAP,CAAeR,KAAf,MAA0B,CAAC,CAA3C,EAA8C;WACrC+I,IAAP,CAAY/I,KAAZ;;;;ACnPJ2B,cAAcmE,UAAd,EAA0B,UAACkN,KAAD,EAAW;QAC7B4D,KAAN,GAAc5D,MAAMyE,QAAN,CAAe7W,IAA7B;QACMgU,KAAN,GAAc5B,MAAMyE,QAAN,CAAezX,KAA7B;CAFF;;AAKA2B,cAAcoE,UAAd,EAA0B,UAAC+I,KAAD,EAAQ7M,IAAR,EAAiB;QACnC+M,MAAN,GAAeN,oBAAoBzM,IAApB,CAAf;CADF;;ACLA;;;;;;AAMA,AAAO,IAAM4Q,MAAM,IAAI5L,IAAJ,CAAShB,QAAT,CAAZ;;;;;;;;AAQP,AAAO,IAAMkG,OAAO,IAAIlF,IAAJ,CAAShB,SAASyE,eAAlB,CAAb;;;;;;;;AAQP,AAAO,IAAMwT,OAAO,IAAIjX,IAAJ,CAAShB,SAASiY,IAAlB,CAAb;;;;;;;;AAQP,AAAO,IAAM/X,OAAO,IAAIc,IAAJ,CAAShB,SAASE,IAAlB,CAAb;;AAEPD,oBAAoBC,IAApB;;AC/BO,SAASgY,eAAT,CAAyB1G,QAAzB,EAAmC2G,SAAnC,EAA8C;MAEjDxd,IAFiD,GAI/C6W,QAJ+C,CAEjD7W,IAFiD;MAGjDZ,KAHiD,GAI/CyX,QAJ+C,CAGjDzX,KAHiD;;MAK7Cqe,eAAe5a,OAAO,IAAP,CAArB;MACM6a,UAAU5d,aAAaE,IAAb,CAAhB;;SAEOyd,YAAP,EAAqBD,SAArB;2BACyBpe,KAAzB;;WAESue,wBAAT,GAA8C;QAAZC,KAAY,uEAAJ,EAAI;;SACvC,IAAIre,IAAI,CAAb,EAAgBA,IAAIqe,MAAMpe,MAA1B,EAAkCD,GAAlC,EAAuC;qBAKjCqe,MAAMre,CAAN,CALiC;UAEnC8B,IAFmC,YAEnCA,IAFmC;UAGnCjC,MAHmC,YAGnCA,KAHmC;UAInCmT,QAJmC,YAInCA,QAJmC;;;UAOjClR,SAAS,UAAb,EAAyB;YACjBwc,UAAUze,OAAM4c,IAAN,EAAhB;;YAEIyB,aAAaI,OAAb,CAAJ,EAA2B;cACnBC,cAAcL,aAAaI,OAAb,EAAsBze,KAA1C;;gBAEMS,MAAN,eAAaN,CAAb,EAAgB,CAAhB,2BAAsBue,WAAtB;iBACOJ,OAAP,EAAgB5d,aAAa2d,aAAaI,OAAb,EAAsB7d,IAAnC,CAAhB;;eAEK8d,YAAYte,MAAZ,GAAqB,CAA1B;;OATJ,MAWO;iCACoB+S,QAAzB;;;;;OAKD/S,MAAL,GAAc,CAAd;OACK2I,IAAL,+BAAarF,KAAK4a,OAAL,CAAb;;SAEO7G,QAAP;;;ACzCK,SAASkH,SAAT,CAAmBlI,SAAnB,EAA8B;MAC7BlW,OAAO,IAAI0G,IAAJ,CAASwP,SAAT,EAAoBlW,IAApB,CAAyB,CAAzB,CAAb;;MAEI,CAACA,KAAKH,MAAV,EAAkB;UACV,IAAIsW,KAAJ,CAAU,gEAAV,CAAN;;;cAGUnW,KAAK,CAAL,CAAZ;;mBAE4BkW,SATO;MAS3BmI,eAT2B,cAS3BA,eAT2B;;;MAW/B,EAAEA,2BAA2B5L,KAA7B,CAAJ,EAAyC;UACjC,IAAI0D,KAAJ,CAAU,yDAAV,CAAN;;;kBAGchH,EAAhB,CAAmB9H,MAAnB;OACK6B,UAAL,CAAgB,aAAhB;;SAEOgN,UAAUmI,eAAjB;;;;;;;;;;;;;;;","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}