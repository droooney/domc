{"version":3,"file":"dwayne.js","sources":["../src/global.js","../src/utils/array.js","../src/utils/object.js","../src/utils/defineProperty.js","../src/utils/toStringTag.js","../src/utils/is.js","../src/utils/escapeRegex.js","../src/utils/objectStatics.js","../src/utils/toCase.js","../src/helpers/Elem/addAttr.js","../src/helpers/Elem/addCSSProp.js","../src/helpers/Elem/addDataAttr.js","../src/helpers/Elem/addNext.js","../src/helpers/Elem/addParent.js","../src/helpers/Elem/addPrev.js","../src/constants/index.js","../src/helpers/Elem/createHideStyleNode.js","../src/helpers/Elem/getAttrNS.js","../src/helpers/Elem/hide.js","../src/helpers/Elem/isElem.js","../src/helpers/Elem/isElementsCollection.js","../src/helpers/Elem/isHTMLDocument.js","../src/helpers/Elem/isValidNode.js","../src/helpers/Elem/remove.js","../src/helpers/Elem/show.js","../src/helpers/Elem/toElem.js","../src/find.js","../src/Elem.js","../src/helpers/Block/calculateArgs.js","../src/helpers/Block/cleanProperty.js","../src/helpers/Block/constructMixinRegex.js","../src/helpers/Block/mixinMatch.js","../src/helpers/Block/transformRestAttrs.js","../src/helpers/Block/executeMixinWatchers.js","../src/helpers/Block/createMixin.js","../src/helpers/Block/calculateAttrs.js","../src/helpers/Block/constructPrivateScope.js","../src/helpers/Block/removeWatcher.js","../src/helpers/Block/constructPublicScope.js","../src/helpers/Block/createBlock.js","../src/helpers/Block/extendBlock.js","../src/helpers/Block/isInstanceOf.js","../src/helpers/Block/remove.js","../src/helpers/Block/watchForAll.js","../src/Mixin.js","../src/helpers/Block/wrap.js","../src/Block.js","../src/blocks/d-block.js","../src/blocks/d-item.js","../src/blocks/d-each.js","../src/blocks/d-elements.js","../src/blocks/d-if.js","../src/blocks/d-switch.js","../src/mixins/d-attr.js","../src/mixins/d-bind.js","../src/mixins/d-class.js","../src/mixins/d-elem.js","../src/mixins/d-hide.js","../src/mixins/d-node.js","../src/mixins/d-on.js","../src/mixins/d-show.js","../src/mixins/d-style.js","../src/mixins/d-value.js","../src/helpers/Block/registerBuiltins.js","../src/elems.js","../src/insertTemplates.js","../src/initApp.js","../src/removeApp.js"],"sourcesContent":["/* eslint no-nested-ternary: 0 */\n/* eslint no-negated-condition: 0 */\nexport default typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n","export function collectFromArray(array, callback, initialValue = {}) {\n  iterateArray(array, (value, index) => {\n    callback(initialValue, value, index, array);\n  });\n\n  return initialValue;\n}\n\nexport function findInArray(array, callback) {\n  for (let i = 0, length = array.length; i < length; i++) {\n    const value = array[i];\n\n    if (callback(value, i, array)) {\n      return {\n        key: i,\n        value\n      };\n    }\n  }\n}\n\nexport function iterateArray(array, callback) {\n  for (let i = 0, length = array.length; i < length; i++) {\n    callback(array[i], i, array);\n  }\n}\n\nexport function removeArrayElem(array, elem) {\n  const index = array.indexOf(elem);\n\n  if (index !== -1) {\n    array.splice(index, 1);\n  }\n}\n\nexport function toObjectKeys(array) {\n  return collectFromArray(array, addKey);\n}\n\nfunction addKey(vars, variable) {\n  vars[variable] = true;\n}\n","import { iterateArray } from './array';\n\nconst {\n  hasOwnProperty: has\n} = {};\nconst { slice } = [];\n\nexport function assign(target) {\n  iterateArray(arguments, (source, index) => {\n    if (index) {\n      iterateObject(source, (value, key) => {\n        target[key] = value;\n      });\n    }\n  });\n\n  return target;\n}\n\nexport function collectFromObject(object, callback, initialValue = {}) {\n  iterateObject(object, (value, key) => {\n    callback(initialValue, value, key, object);\n  });\n\n  return initialValue;\n}\n\nexport function except(object) {\n  const newObject = {};\n  const paths = arguments::slice(1);\n\n  iterateObject(object, (value, key) => {\n    if (paths.indexOf(key) === -1) {\n      newObject[key] = value;\n    }\n  });\n\n  return newObject;\n}\n\nexport function hasOwnProperty(object, key) {\n  return object::has(key);\n}\n\nexport function iterateObject(object, callback) {\n  for (const key in object) {\n    if (hasOwnProperty(object, key)) {\n      callback(object[key], key, object);\n    }\n  }\n}\n\nexport function mapObject(object, callback) {\n  const newObject = {};\n\n  iterateObject(object, (value, key) => {\n    newObject[key] = callback(value, key, object);\n  });\n\n  return newObject;\n}\n","import { iterateObject } from './object';\n\n/**\n * @function defineProperties\n * @param {Object} target - Target to define properties for.\n * @param {Object} properties - Object with properties needed to be assign to the target.\n * @returns {void}\n * @description Function for defining properties of an object.\n */\nexport const { defineProperties } = Object;\n\nexport function definePrototypeProperties(target, properties) {\n  iterateObject(properties, (value, name) => {\n    Object.defineProperty(target, name, {\n      value,\n      writable: true,\n      enumerable: false,\n      configurable: true\n    });\n  });\n}\n\n/**\n * @function defineFrozenProperties\n * @param {Object} target - Target to define properties for.\n * @param {Object} properties - Object with properties needed to be assign to the target.\n * @returns {void}\n * @description Function for defining frozen properties of an object.\n */\nexport function defineFrozenProperties(target, properties) {\n  iterateObject(properties, (value, name) => {\n    Object.defineProperty(target, name, {\n      value,\n      writable: false,\n      enumerable: false,\n      configurable: false\n    });\n  });\n}\n","import { definePrototypeProperties } from './defineProperty';\n\nconst { Symbol } = global;\nconst { toString } = {};\n\n/**\n * @function toStringTag\n * @param {*} object - Object to get toStringTag of.\n * @returns {String} Cut string.\n * @description Cut \"Type\" string from \"[object Type]\" string that gotten from {}.toString,call(object).\n */\nexport function toStringTag(object) {\n  return object::toString().slice(8, -1);\n}\n\nexport function setToStringTag(object, tag) {\n  if (Symbol && Symbol.toStringTag) {\n    definePrototypeProperties(object.prototype, {\n      [Symbol.toStringTag]: tag\n    });\n  }\n}\n","/**\n * @module helpers/checkTypes\n * @private\n * @mixin\n * @description Exports is<Type> methods.\n */\n\nimport { toStringTag } from './toStringTag';\n\n/**\n * @function isArray\n * @public\n * @param {*} value - Value to check if it is an array.\n * @returns {Boolean} If the argument is an array or not.\n * \n * @example\n * isArray([]);                             // true\n * isArray(0);                              // true\n * isArray(document.querySelectorAll('*')); // false\n */\nexport const { isArray } = Array;\n\n/**\n * @function isFunction\n * @public\n * @param {*} value - Value to check if it is a function.\n * @returns {Boolean} If the argument is a function or not.\n * \n * @example\n * isFunction(() => {});            // true\n * \n * const func = () => {};\n * Object.setPrototypeOf(func, {});\n * isFunction(func);                // true\n */\nexport function isFunction(value) {\n  return toStringTag(value) === 'Function' || typeof value === 'function';\n}\n\n/**\n * @function isNil\n * @public\n * @param {*} value - Value to check if it is null or undefined.\n * @returns {Boolean} If the argument is null or undefined or not.\n *\n * @example\n * isNil(null);      // true\n * isNil(undefined); // true\n * isNil(false);     // false\n */\nexport function isNil(value) {\n  /* eslint eqeqeq: 0 */\n  return value == null;\n}\n\n/**\n * @function isString\n * @public\n * @param {*} value - Value to check if it is a string.\n * @returns {Boolean} If the argument is a string or not.\n *\n * @example\n * isString('0');             // true\n * isString(new String('0')); // true\n */\nexport function isString(value) {\n  return toStringTag(value) === 'String';\n}\n","const regexpSpecialCharacters = [\n  '.',\n  '+', '*', '?',\n  '(', ')',\n  '[', ']',\n  '{', '}',\n  '<', '>',\n  '^', '$',\n  '!',\n  '=',\n  ':',\n  '-',\n  '|',\n  ',',\n  '\\\\'\n];\nconst regexpSpecialsRegexp = new RegExp(\n  regexpSpecialCharacters\n    .map((s) => `\\\\${ s }`)\n    .join('|'),\n  'g'\n);\n\nexport function escapeRegex(string) {\n  return string.replace(regexpSpecialsRegexp, '\\\\$&');\n}\n","export const {\n  create,\n  keys,\n  getPrototypeOf: getProto\n} = Object;\n\nexport const setProto = Object.setPrototypeOf || ((target, proto) => {\n  /* eslint no-proto: 0 */\n  target.__proto__ = proto;\n});\n","const DASHED_SYMBOL_REGEX = /-[a-z]/g;\nconst UPPERCASED_SYMBOL_REGEX = /[A-Z]/g;\n\nexport function toCamelCase(value) {\n  return value.replace(DASHED_SYMBOL_REGEX, capitalize);\n}\n\nexport function toHyphenCase(value) {\n  return value.replace(UPPERCASED_SYMBOL_REGEX, hyphenize);\n}\n\nfunction capitalize(match) {\n  return match[1].toUpperCase();\n}\n\nfunction hyphenize(match) {\n  return `-${ match[0].toLowerCase() }`;\n}\n","export function addAttr(attrs, attr) {\n  attrs[attr.name] = attr.value;\n}\n","import { toCamelCase } from '../../utils';\n\nconst CSS_PROP_VALUE_SEPARATOR_REGEX = /: /;\n\nexport function addCSSProp(css, value) {\n  if (value) {\n    const property = value.split(CSS_PROP_VALUE_SEPARATOR_REGEX);\n\n    css[toCamelCase(property[0])] = property[1];\n  }\n}\n","export function addDataAttr(data, value, key) {\n  data[key] = value;\n}\n","export function addNext(add, elem) {\n  add(elem.nextSibling);\n}\n","export function addParent(add, elem) {\n  add(elem.parentNode);\n}\n","export function addPrev(add, elem) {\n  add(elem.previousSibling);\n}\n","import { create } from '../utils/objectStatics';\n\nexport const HIDE_CLASS = '__dwayne-hidden__';\nexport const SVG_NS = 'http://www.w3.org/2000/svg';\nexport const D_REST_REGEX = /^d-rest(?:#|$)/;\n\nexport const rootBlocks = create(null);\nexport const rootMixins = create(null);\nexport const Scope = {\n  evalMode: false,\n  gettingVars: []\n};\n","import { HIDE_CLASS } from '../../constants';\n\nexport function createHideStyleNode(head) {\n  const style = head.find(`style#${ HIDE_CLASS }`);\n\n  if (style.length) {\n    return;\n  }\n\n  head\n    .create('style')\n    .prop('id', HIDE_CLASS)\n    .text(`.${ HIDE_CLASS }{display:none !important;}`);\n}\n","import { Elem } from '../../Elem';\n\nconst X_LINK_ATTR_REGEX = /^xlink:\\w/;\nconst XML_NS = 'http://www.w3.org/2000/xmlns/';\nconst X_LINK_NS = 'http://www.w3.org/1999/xlink';\n\nexport function getAttrNS(attr, elem) {\n  if (attr === 'xmlns' || attr === 'xmlns:xlink') {\n    return elem.nodeName === 'SVG'\n      ? XML_NS\n      : null;\n  }\n\n  if (X_LINK_ATTR_REGEX.test(attr)) {\n    return new Elem(elem).closest('svg').length\n      ? X_LINK_NS\n      : null;\n  }\n}\n","import { createHideStyleNode } from './createHideStyleNode';\nimport { HIDE_CLASS } from '../../constants';\nimport { Elem } from '../../Elem';\n\nexport function hide(elem) {\n  createHideStyleNode(new Elem(elem.ownerDocument.head));\n  new Elem(elem).addClass(HIDE_CLASS);\n}\n","import { Elem } from '../../Elem';\n\nexport function isElem(value) {\n  return value instanceof Elem;\n}\n","import { toStringTag, isArray } from '../../utils';\nimport { isElem } from './isElem';\n\nconst HTML_COLLECTION_REGEX = /^(HTMLCollection|NodeList)$/;\n\nexport function isElementsCollection(value) {\n  return (\n    HTML_COLLECTION_REGEX.test(toStringTag(value))\n    || isElem(value)\n    || isArray(value)\n  );\n}\n","import { toStringTag } from '../../utils';\n\nexport function isHTMLDocument(value) {\n  return toStringTag(value) === 'HTMLDocument';\n}\n","import { toStringTag } from '../../utils';\n\nconst ELEMENT_REGEX = /Element$/;\n\nexport function isValidNode(value) {\n  const tag = toStringTag(value);\n\n  return (\n    ELEMENT_REGEX.test(tag)\n    || tag === 'HTMLDocument'\n    || tag === 'Text'\n    || tag === 'DocumentFragment'\n    || tag === 'Comment'\n  );\n}\n","export function remove(elem) {\n  const parent = elem.parentNode;\n\n  if (parent) {\n    parent.removeChild(elem);\n  }\n}\n","import { HIDE_CLASS } from '../../constants';\nimport { Elem } from '../../Elem';\n\nexport function show(elem) {\n  new Elem(elem).removeClass(HIDE_CLASS);\n}\n","import { isElem } from './isElem';\nimport { Elem } from '../../Elem';\n\nexport function toElem(elem) {\n  return isElem(elem)\n    ? elem\n    : new Elem(elem);\n}\n","import { Elem } from './Elem';\n\nconst {\n  document = {}\n} = global;\n\n/**\n * @function find\n * @public\n * @param {String} selector - Selector to find.\n * @param {Element|Node} [base = document] - Base to find in.\n * @returns {Elem} New instance of Elem.\n * @description Synonym for\n * [Document#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Document/querySelectorAll}.\n */\nexport function find(selector, base = document) {\n  return new Elem(base.querySelectorAll(String(selector)));\n}\n","import {\n  isNil, isString, assign,\n  definePrototypeProperties, defineProperties,\n  collectFromArray, collectFromObject,\n  iterateArray, iterateObject,\n  toHyphenCase, toStringTag,\n  setToStringTag, setProto\n} from './utils';\nimport {\n  isHTMLDocument, isValidNode,\n  addAttr, addCSSProp, addDataAttr,\n  addNext, addParent, addPrev,\n  toElem, isElementsCollection,\n  getAttrNS, hide, show, remove\n} from './helpers/Elem';\nimport { SVG_NS } from './constants';\nimport { find } from './find';\n\n/**\n * @typedef {String} ElemEventString\n * @public\n * @description A string containing events separated by a comma with zero or more spaces or just spaces.\n */\n\n/**\n * @callback ElemListener\n * @public\n * @param {Event} e - Fired event.\n * @param {Element} elem - Element on which the listener was called.\n * @param {Number} index - Index of the element on which the listener was called.\n */\n\n/**\n * @callback ElemRemoveListeners\n * @public\n * @param {...ElemEventString} events - If at least one argument present only removes event listeners specified\n * by the events in the arguments.\n */\n\n/**\n * @callback IterationCallback\n * @public\n * @param {Element|Node} node - Iteration element.\n * @param {Number} index - Iteration index.\n * @param {Elem} elem - Initial set.\n */\n\nconst { Symbol } = global;\nconst EVENT_SEPARATOR_REGEX = /(?:,| ) */;\nconst CSS_STYLES_SEPARATOR_REGEX = /; ?/;\nconst CSS_IMPORTANT_REGEX = / ?!important$/;\nconst EVENT_REGEX = /Event$/;\nconst XHTML_NS = 'http://www.w3.org/1999/xhtml';\nconst emptyCollection = [];\n\n/**\n * @class Elem\n * @extends Array\n * @public\n * @param {Element|Element[]} [elem = []] - An element or an array of elements to wrap.\n * @returns {Elem} Instance of Elem.\n * @description Wrap of an elements set.\n *\n * @example\n * new Elem(document.body);\n * new Elem(document.querySelectorAll('.cls'));\n * new Elem(document.getElementsByClassName('cls'));\n */\nclass Elem extends Array {\n  static addMethods(property, value) {\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    definePrototypeProperties(this.prototype, property);\n\n    return this;\n  }\n\n  constructor(elem = emptyCollection) {\n    super();\n\n    if (!isElementsCollection(elem)) {\n      elem = [elem];\n    }\n\n    setProto(this, Elem.prototype);\n\n    iterateArray(elem, (elem) => {\n      if (!isElementsCollection(elem)) {\n        elem = [elem];\n      }\n\n      iterateArray(elem, (elem) => {\n        if (!this.includes(elem) && isValidNode(elem)) {\n          this.push(elem);\n        }\n      });\n    });\n  }\n\n  /**\n   * @method Elem#add\n   * @public\n   * @param {...(Elem|Element|Element[])} elements - Each argument is a Elem, or Element, or array of Elements.\n   * @returns {Elem} Returns this.\n   * @description Method for adding new elements to the set.\n   *\n   * @example\n   * elem1.find('.cls1')\n   *   .add(elem2.find('.cls2'))\n   *   .hide();\n   */\n  add() {\n    const elems = this.slice();\n\n    iterateArray(arguments, (elem) => {\n      if (!isElementsCollection(elem)) {\n        elem = [elem];\n      }\n\n      iterateArray(elem, (elem) => {\n        if (!elems.includes(elem) && isValidNode(elem)) {\n          elems.push(elem);\n        }\n      });\n    });\n\n    return elems;\n  }\n\n  /**\n   * @method Elem#addClass\n   * @public\n   * @param {...String} classes - Classes to add.\n   * @returns {Elem} Returns this.\n   * @description Method for adding classes to the all the elements in the set.\n   *\n   * @example\n   * elem.addClass('red', 'round');\n   */\n  addClass() {\n    return this.forEach((elem) => {\n      const list = elem.classList;\n\n      iterateArray(arguments, (cls) => list.add(cls));\n    });\n  }\n\n  /**\n   * @method Elem#attr\n   * @public\n   * @param {String|Object.<String, String>} [attr] - Name of the attribute to get or\n   * an object of the format { [attrName]: value, ... } to set attributes.\n   * @param {String} [value] - If the first argument is a string\n   * it should be a value to set for that attribute.\n   * @returns {Object|String|Elem} If no arguments passed, D-Wrap of attributes of the first element in the set\n   * returned, if 1 string argument is passed the value of the attribute of the first element in the set\n   * returned otherwise returns this.\n   * @description Method for getting/setting attributes.\n   *\n   * @example\n   * elem.attr('attr1', 'value1'); // attribute attr1 set to 'value1' and this returned\n   * elem.attr('attr1');           // 'value1'\n   * elem.attr({\n   *   attr1: 'value3',            // attribute attr1 set to 'value3'\n   *   attr2: 'value2'             // attribute attr2 set to 'value2'\n   * });                           // this returned\n   * elem.attr();                  // { attr1: 'value3', attr2: 'value2' }\n   */\n  attr(attr, value) {\n    const elem = this[0];\n\n    if (!arguments.length) {\n      if (!elem) {\n        return {};\n      }\n\n      return collectFromObject(elem.attributes, addAttr);\n    }\n\n    if (arguments.length <= 1 && isString(attr)) {\n      if (!elem) {\n        return null;\n      }\n\n      const ns = getAttrNS(attr, elem);\n\n      return ns\n        ? elem.getAttributeNS(ns, attr)\n        : elem.getAttribute(attr);\n    }\n\n    if (arguments.length >= 2) {\n      attr = { [attr]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(attr, (value, key) => {\n        if (isNil(value) || value === false) {\n          return new Elem(elem).removeAttr(key);\n        }\n\n        value = value === true ? '' : value;\n\n        const ns = getAttrNS(key, elem);\n\n        if (ns) {\n          elem.setAttributeNS(ns, key, value);\n        } else {\n          elem.setAttribute(key, value);\n        }\n      });\n    });\n  }\n\n  /**\n   * @method Elem#children\n   * @public\n   * @returns {Elem} D-Wrap of the children of the first element in the set.\n   * @description Method for getting element's children.\n   *\n   * @example\n   * const children = elem.children();\n   */\n  children() {\n    return new Elem(this.length ? this[0].childNodes : []);\n  }\n\n  /**\n   * @method Elem#closest\n   * @public\n   * @param {String} selector - See the link.\n   * @returns {Elem} Set of the closest elements.\n   * @description Synonym for\n   * [Element#closest]{@link https://developer.mozilla.org/en/docs/Web/API/Element/closest}.\n   */\n  closest(selector) {\n    return this.collect((add, elem) => {\n      while (elem) {\n        if (new Elem(elem).is(selector)) {\n          return add(elem);\n        }\n\n        elem = elem.parentNode;\n      }\n    });\n  }\n\n  collect(callback) {\n    const elements = [];\n    const cb = ::elements.push;\n\n    this.forEach((elem, index) => {\n      callback(cb, elem, index, this);\n    });\n\n    return new Elem(elements);\n  }\n\n  /**\n   * @method Elem#contains\n   * @public\n   * @param {Elem|Element} element - Element to find out if it's within the first element in the set.\n   * @returns {Boolean} Returns if the argument within this element.\n   * @description Method is extension for\n   * [Node#contains]{@link https://developer.mozilla.org/en/docs/Web/API/Node/contains}.\n   *\n   * @example\n   * elem.contains(elem2);   // true|false\n   */\n  contains(element) {\n    const parent = this[0];\n    const child = toElem(element)[0];\n\n    return !parent || !child\n      ? false\n      : parent.contains(child);\n  }\n\n  /**\n   * @method Elem#create\n   * @public\n   * @param {String} type - Type of created element. If type is \"#text\" a text node is created.\n   * If type is \"#comment\" a comment node is created.\n   * @returns {Elem} New instance of Elem - wrap of the created elements.\n   * @description Method for creating elements inside this element.\n   * If this element is not an Element the element is just created.\n   *\n   * @example\n   * elem.create('div');\n   */\n  create(type) {\n    return this.collect((add, elem) => {\n      let el = null;\n      const isText = type === '#text';\n      const document = isHTMLDocument(elem)\n        ? elem\n        : elem.ownerDocument;\n\n      if (isText || type === '#comment') {\n        el = isText\n          ? document.createTextNode('')\n          : document.createComment('');\n      } else {\n        const ns = type === 'svg'\n          ? SVG_NS\n          : elem.namespaceURI || document.documentElement.namespaceURI || XHTML_NS;\n\n        el = document.createElementNS(ns, type);\n      }\n\n      add(new Elem(el).into(elem));\n    });\n  }\n\n  /**\n   * @method Elem#createComment\n   * @public\n   * @param {String} text - Text of the comment.\n   * @returns {Elem} New instance of Elem - wrap of the created comments.\n   * @description Method for creating comments inside this element.\n   * If this element is not an Element the comment is just created.\n   *\n   * @example\n   * elem.createComment('comment');\n   */\n  createComment(text) {\n    return this\n      .create('#comment')\n      .text(text);\n  }\n\n  /**\n   * @method Elem#createText\n   * @public\n   * @param {String} text - Text.\n   * @returns {Elem} New instance of Elem - wrap of the created text nodes.\n   * @description Method for creating text nodes inside this element.\n   * If this element is not an Element the text node is just created.\n   *\n   * @example\n   * elem.createText('text');\n   */\n  createText(text) {\n    return this\n      .create('#text')\n      .text(text);\n  }\n\n  /**\n   * @method Elem#css\n   * @public\n   * @param {String|Object.<String, String>} [property] - Name of the property to get or\n   * an object of the format { [property]: value, ... } to set styles.\n   * @param {String} [value] - If the first argument is a string it should be a value to set for that property.\n   * @returns {Object|String|Elem} If no arguments passed, D-Wrap of css styles of the element returned,\n   * if 1 string argument is passed the value of the property returned otherwise returns this.\n   * @description Method for getting/setting styles. Supports !important.\n   *\n   * @example\n   * elem.css('display', 'none'); // display set to 'none' and this returned\n   * elem.css('display');         // 'none'\n   * elem.css({\n   *   display: 'inline',         // display set to 'inline'\n   *   cursor: 'pointer'          // cursor set to 'pointer'\n   * });                          // this returned\n   * elem.css();                  // { display: 'none', cursor: 'pointer' }\n   */\n  css(property, value) {\n    const { style } = this[0] || {};\n\n    if (!arguments.length) {\n      if (!style) {\n        return {};\n      }\n\n      return collectFromArray(style.cssText.split(CSS_STYLES_SEPARATOR_REGEX), addCSSProp);\n    }\n\n    if (arguments.length <= 1 && isString(property)) {\n      if (!style) {\n        return '';\n      }\n\n      property = toHyphenCase(property);\n\n      return style.getPropertyValue(property) + (style.getPropertyPriority(property) ? ' !important' : '');\n    }\n\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(property, (value, property) => {\n        property = toHyphenCase(property);\n\n        if (isNil(value) || value === false) {\n          return new Elem(elem).removeCSS(property);\n        }\n\n        elem.style.removeProperty(property);\n        elem.style.setProperty(\n          property,\n          value.replace(CSS_IMPORTANT_REGEX, ''),\n          CSS_IMPORTANT_REGEX.test(value) ? 'important' : ''\n        );\n      });\n    });\n  }\n\n  /**\n   * @method Elem#data\n   * @public\n   * @param {String|Object.<String, String>} [key] - Name of the data attribute (without data- prefix)\n   * to get or an object of the format { [attrName]: value, ... } to set attributes.\n   * @param {String} [value] - If the first argument is a string it should be a value to set for that attribute.\n   * @returns {Object|String|Elem} If no arguments passed, D-Wrap of dataset of the element returned,\n   * if 1 string argument is passed the value of the data attribute returned otherwise returns this.\n   * @description Method for getting/setting data attributes. See\n   * [HTMLElement#dataset]{@link https://developer.mozilla.org/en/docs/Web/API/HTMLElement/dataset}.\n   *\n   * @example\n   * elem.data('someKey1', 'value'); // attribute data-some-key1 set to 'value1' and this returned\n   * elem.data('someKey1');          // 'value1'\n   * elem.data({\n   *   someKey1: 'value3',           // attribute data-some-key1 set to 'value3'\n   *   someKey2: 'value2'            // attribute data-some-key2 set to 'value2'\n   * });                             // this returned\n   * elem.data();                    // { someKey1: 'value3', someKey2: 'value2' }\n   */\n  data(key, value) {\n    const { dataset } = this[0] || {};\n\n    if (!arguments.length) {\n      if (!dataset) {\n        return {};\n      }\n\n      return collectFromObject(dataset, addDataAttr);\n    }\n\n    if (arguments.length === 1 && isString(key)) {\n      if (!dataset) {\n        return;\n      }\n\n      return dataset[key];\n    }\n\n    if (arguments.length >= 2) {\n      key = { [key]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(key, (value, key) => {\n        elem.dataset[key] = value;\n      });\n    });\n  }\n\n  /**\n   * @method Elem#dispatch\n   * @public\n   * @param {String|Event} event - Event or a string (new Event(event) is created).\n   * @param {Object} [details = {}] - Object that is assigned to the event.\n   * @returns {Elem} Returns this.\n   * @see https://developer.mozilla.org/en/docs/Web/API/Event/Event\n   * @description Synonym for\n   * [EventTarget#dispatchEvent]{@link https://developer.mozilla.org/en/docs/Web/API/EventTarget/dispatchEvent}.\n   *\n   * @example\n   * elem.dispatch('click');\n   * elem.dispatch('click', { bubbles: false, cancellable: false, data: 1 });\n   * elem.dispatch(new CustomEvent('custom-event'));\n   */\n  dispatch(event, details = {}) {\n    const {\n      bubbles = true,\n      cancelable = true,\n      ...realDetails\n    } = details || {};\n    let finalEvent = event;\n\n    if (!EVENT_REGEX.test(toStringTag(finalEvent))) {\n      try {\n        finalEvent = new Event(finalEvent, { bubbles, cancelable });\n        assign(finalEvent, realDetails);\n      } catch (err) {}\n    }\n\n    return this.forEach((elem) => {\n      if (!EVENT_REGEX.test(toStringTag(finalEvent))) {\n        const document = isHTMLDocument(elem)\n          ? elem\n          : elem.ownerDocument;\n\n        finalEvent = document.createEvent('Event');\n        finalEvent.initEvent(event, bubbles, cancelable);\n\n        assign(finalEvent, realDetails);\n      }\n\n      elem.dispatchEvent(finalEvent);\n    });\n  }\n\n  /**\n   * @method Elem#elem\n   * @public\n   * @param {Number} [index = 0] - Index of the element of the set to get. Negative index means elem.length + index.\n   * @returns {Elem} New instance of Elem.\n   *\n   * @example\n   * elem.elem(1); // a wrap of the element in the set that has index 1\n   * elem.elem();  // a wrap of the element in the set that has index 0\n   */\n  elem(index = 0) {\n    if (index < 0) {\n      index = this.length + index;\n    }\n\n    return new Elem(this[index]);\n  }\n\n  /**\n   * @method Elem#filter\n   * @public\n   * @param {IterationCallback} [filterFn = Boolean] - Filter function\n   * @returns {Elem} New instance of Elem.\n   * @description Method for filtering elements.\n   *\n   * @example\n   * elem.filter((elem) => new Elem(elem).closest('.parent'));\n   */\n  filter(filterFn = Boolean) {\n    return this.collect((add, elem, index) => {\n      if (filterFn(elem, index, this)) {\n        add(elem);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#find\n   * @public\n   * @param {String} selector - Selector to find.\n   * @returns {Elem} New instance of Elem.\n   * @description Synonym for\n   * [Element#querySelectorAll]{@link https://developer.mozilla.org/en/docs/Web/API/Element/querySelectorAll}.\n   */\n  find(selector) {\n    return this.collect((add, elem) => {\n      add(find(selector, elem));\n    });\n  }\n\n  /**\n   * @method Elem#forEach\n   * @public\n   * @param {IterationCallback} callback - Called on each iteration.\n   * @returns {Elem} Returns this.\n   * @description Method for iterating over the set.\n   *\n   * @example\n   * find('.cls').forEach((element, index, set) => {\n   *   // do something\n   * });\n   */\n  forEach(callback) {\n    iterateArray(this, (value, key) => {\n      callback(value, key, this);\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Elem#hasAttr\n   * @public\n   * @param {String} attr - Name of the attribute.\n   * @returns {Boolean} If the first element in the set has the attribute.\n   * @description Method that returns if the first element in the set has the attribute or not.\n   *\n   * @example\n   * elem.attr('attr', 'value').hasAttr('attr'); // true\n   * elem.removeAttr('attr').hasAttr('attr');    // false\n   */\n  hasAttr(attr) {\n    const elem = this[0];\n\n    if (!elem) {\n      return false;\n    }\n\n    const ns = getAttrNS(attr, elem);\n\n    return ns\n      ? elem.hasAttributeNS(ns, attr)\n      : elem.hasAttribute(attr);\n  }\n\n  /**\n   * @method Elem#hasClass\n   * @public\n   * @param {String} cls - Name of the class.\n   * @returns {Boolean} If the first element in the set has the class.\n   * @description Method that returns if the first element in the set has the class or not.\n   *\n   * @example\n   * elem.addClass('cls').hasClass('cls');    // true\n   * elem.removeClass('cls').hasClass('cls'); // false\n   */\n  hasClass(cls) {\n    const elem = this[0];\n\n    return elem\n      ? elem.classList.contains(cls)\n      : false;\n  }\n\n  /**\n   * @method Elem#hide\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Hides all elements in the set.\n   *\n   * @example\n   * elem.hide();\n   */\n  hide() {\n    return this.forEach(hide);\n  }\n\n  /**\n   * @method Elem#html\n   * @public\n   * @param {String|*} [html] - HTML to write instead of current HTML.\n   * @returns {Elem|String} If no arguments passed HTML of the first element in the set returned.\n   * Otherwise all elements HTML in the set are set to the html argument.\n   * @description Gets or sets HTML.\n   *\n   * @example\n   * elem.html('<div>1</div>');\n   * elem.html(); // '<div>1</div>'\n   */\n  html(html) {\n    if (!arguments.length) {\n      const elem = this[0];\n\n      return elem\n        ? elem.innerHTML\n        : '';\n    }\n\n    return this.forEach((elem) => {\n      elem.innerHTML = html;\n    });\n  }\n\n  includes(elem) {\n    return this.indexOf(elem) !== -1;\n  }\n\n  /**\n   * @method Elem#insertAfter\n   * @public\n   * @param {Elem|Element} element - Element to insert this element after.\n   * @returns {Elem} Returns this.\n   * @description Puts the elements from the set after the element specified by the argument.\n   * The elements remain in the same order.\n   *\n   * @example\n   * elem.insertAfter(elem2);\n   * elem.insertAfter(document.getElementById('id'));\n   * elem.insertAfter('#id div.c1');\n   */\n  insertAfter(element) {\n    element = toElem(element).elem(0);\n\n    let parent = element.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    element = element.next()[0];\n    parent = parent[0];\n\n    return this.forEach((elem) => {\n      if (elem === element) {\n        element = element.nextSibling;\n\n        return;\n      }\n\n      if (element) {\n        parent.insertBefore(elem, element);\n      } else {\n        parent.appendChild(elem);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#insertBefore\n   * @public\n   * @param {Elem|Element} element - Element to insert this element before.\n   * @returns {Elem} Returns this.\n   * @description Puts the elements from the set before the element specified by the argument.\n   * The elements remain in the same order.\n   *\n   * @example\n   * elem.insertBefore(elem2);\n   * elem.insertBefore(document.getElementById('id'));\n   * elem.insertBefore('#id div.c1');\n   */\n  insertBefore(element) {\n    element = toElem(element).elem(0);\n\n    let parent = element.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    element = element[0];\n    parent = parent[0];\n\n    return this.forEach((elem) => {\n      parent.insertBefore(elem, element);\n    });\n  }\n\n  /**\n   * @method Elem#into\n   * @public\n   * @param {Elem|Element} element - Element to put this elements into.\n   * @param {Boolean} end - If the elements should be inserted to the end. If false they are inserted to the start.\n   * @returns {Elem} Returns this.\n   * @description Method is similar to\n   * [Node#appendChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/appendChild}.\n   *\n   * @example\n   * elem.into(elem2);\n   * elem.into(document.getElementById('id'));\n   * elem.into('#id div.c1');\n   */\n  into(element, end = true) {\n    element = toElem(element)[0];\n\n    if (\n      !element\n      || isHTMLDocument(element)\n    ) {\n      return this;\n    }\n\n    if (!end && element.firstChild) {\n      for (let i = this.length - 1; i >= 0; i--) {\n        element.insertBefore(this[i], element.firstChild);\n      }\n\n      return this;\n    }\n\n    return this.forEach((elem) => {\n      element.appendChild(elem);\n    });\n  }\n\n  /**\n   * @method Elem#is\n   * @public\n   * @param {String} selector\n   * @returns {Boolean} If the first element in the set matches the selector.\n   * @description Synonym for\n   * [Element#matches]{@link https://developer.mozilla.org/en/docs/Web/API/Element/matches}.\n   *\n   * @example\n   * elem.addClass('cls');\n   * elem.is('.cls');         // true\n   *\n   * elem.removeClass('cls');\n   * elem.is('.cls');         // false\n   */\n  is(selector) {\n    if (!this.length) {\n      return false;\n    }\n\n    const elem = this[0];\n    const matches = (\n      elem.matches\n      || elem.matchesSelector\n      || elem.webkitMatchesSelector\n      || elem.mozMatchesSelector\n      || elem.msMatchesSelector\n      || elem.oMatchesSelector\n    );\n\n    try {\n      return matches.call(elem, selector);\n    } catch (err) {\n      console.error(`Selector '${ selector }' is not a valid selector (Elem#is)`);\n\n      return false;\n    }\n  }\n\n  /**\n   * @method Elem#name\n   * @public\n   * @returns {String|void} nodeName (lowercased) of the first element in the set.\n   * @description Method for getting name of the first element in the set.\n   *\n   * @example\n   * elem.create('div').name() // 'div'\n   */\n  name() {\n    const elem = this[0];\n\n    return elem && elem.nodeName\n      ? elem.nodeName.toLowerCase()\n      : undefined;\n  }\n\n  /**\n   * @method Elem#next\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Method for finding next element to each element in the set.\n   *\n   * @example\n   * elem.next(); // finds next element to each element in the set\n   */\n  next() {\n    return this.collect(addNext);\n  }\n\n  /**\n   * @method Elem#on\n   * @public\n   * @param {ElemEventString|Object.<ElemEventString|ElemListener>} event - Either a {@link ElemEventString} string\n   * or an object with event keys (a key is also ElemEventString) and listeners values.\n   * @param {ElemListener} [listener] - If the first argument is a string it must be a listener function for\n   * specified event(s).\n   * @returns {ElemRemoveListeners} Function that takes optional event argument.\n   * @description Adds event listeners for all the elements in the set.\n   *\n   * @example\n   * elem.on(\n   *   'change, input',\n   *   'input, select, textarea, datalist, keygen, output',\n   *   (e, elem, index) => console.log(elem.value)\n   * );\n   * elem.on(\n   *   'change, input',\n   *   (e, elem, index) => console.log(elem.value)\n   * );\n   * elem.on(\n   *   {\n   *     'change, input': (e, elem, index) => console.log(elem.value),\n   *     'blur': () => console.log('blur')\n   *   },\n   *   'input, select, textarea, datalist, keygen, output'\n   * );\n   *\n   * const removeListeners = elem.on({\n   *   'change, input': (e, elem, index) => console.log(elem.value),\n   *   'blur': () => console.log('blur')\n   * });\n   *\n   * removeListeners('click');\n   * removeListeners('blur, change');\n   * removeListeners('blur, change', 'input');\n   * removeListeners();\n   */\n  on(event, listener) {\n    if (isString(event)) {\n      event = { [event]: listener };\n    }\n\n    const newEvents = {};\n    const allListeners = {};\n\n    iterateObject(event, (listener, event) => {\n      iterateArray(event.split(EVENT_SEPARATOR_REGEX), (event) => {\n        (newEvents[event] = newEvents[event] || []).push(listener);\n      });\n    });\n\n    this.forEach((elem) => {\n      iterateObject(newEvents, (listeners, event) => {\n        iterateArray(listeners, (listener) => {\n          elem.addEventListener(event, listener, false);\n          (allListeners[event] = allListeners[event] || []).push(() => {\n            elem.removeEventListener(event, listener);\n          });\n        });\n      });\n    });\n\n    return function removeEventListeners(event) {\n      if (arguments.length) {\n        iterateArray(arguments, (event) => {\n          iterateArray(event.split(EVENT_SEPARATOR_REGEX), (event) => {\n            const removeListeners = allListeners[event];\n\n            if (removeListeners) {\n              iterateArray(removeListeners, (removeListener) => removeListener());\n\n              delete allListeners[event];\n            }\n          });\n        });\n      } else {\n        iterateObject(allListeners, (removeListeners, event) => {\n          iterateArray(removeListeners, (removeListener) => removeListener());\n\n          delete allListeners[event];\n        });\n      }\n    };\n  }\n\n  /**\n   * @method Elem#parent\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Method returns wrap of the set of the parent elements of each element in the set.\n   */\n  parent() {\n    return this.collect(addParent);\n  }\n\n  /**\n   * @method Elem#prev\n   * @public\n   * @returns {Elem} New instance of Elem.\n   * @description Method for finding previous element to each element in the set.\n   *\n   * @example\n   * elem.prev(); // finds previous element to each element in the set\n   */\n  prev() {\n    return this.collect(addPrev);\n  }\n\n  /**\n   * @method Elem#prop\n   * @public\n   * @param {String|Object.<String, *>} property - Either a string of a property or an assigned object.\n   * @param {*} [value] - If a property parameter is a string\n   * this has to be an assigned value if it's present.\n   * @returns {Elem|*} Returns this if it's setter or a value if getter.\n   * @description Method that is either a property getter for the first element in the set\n   * or a setter for every element in the set.\n   *\n   * @example\n   * elem.prop('draggable', false);\n   * elem.prop('draggable'); // false\n   */\n  prop(property, value) {\n    if (arguments.length <= 1 && isString(property)) {\n      return this[0] ? this[0][property] : undefined;\n    }\n\n    if (arguments.length >= 2) {\n      property = { [property]: value };\n    }\n\n    return this.forEach((elem) => {\n      iterateObject(property, (value, prop) => {\n        elem[prop] = value;\n      });\n    });\n  }\n\n  /**\n   * @method Elem#remove\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Removes all the elements from the set from the document.\n   * Note: it doesn't remove them from the set so watch out for the memory leaks.\n   *\n   * @example\n   * elem.remove();\n   */\n  remove() {\n    return this.forEach(remove);\n  }\n\n  /**\n   * @method Elem#removeAttr\n   * @public\n   * @param {...String} attributes - Attributes to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the attributes from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeAttr('foo', 'bar', 'baz');\n   */\n  removeAttr() {\n    return this.forEach((elem) => {\n      iterateArray(arguments, (attr) => {\n        const ns = getAttrNS(attr, elem);\n\n        if (ns) {\n          elem.removeAttributeNS(ns, attr);\n        } else {\n          elem.removeAttribute(attr);\n        }\n      });\n    });\n  }\n\n  /**\n   * @method Elem#removeClass\n   * @public\n   * @param {...String} classes - Classes to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the classes from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeClass('foo', 'bar', 'baz');\n   */\n  removeClass() {\n    return this.forEach((elem) => {\n      const list = elem.classList;\n\n      iterateArray(arguments, (cls) => list.remove(cls));\n    });\n  }\n\n  /**\n   * @method Elem#removeCSS\n   * @public\n   * @param {...String} props - CSS properties to remove.\n   * @returns {Elem} Returns this.\n   * @description Removes all the CSS properties from arguments from all the elements in the set.\n   *\n   * @example\n   * elem.removeCSS('display', 'position', 'margin');\n   */\n  removeCSS() {\n    return this.forEach((elem) => {\n      iterateArray(arguments, (css) => {\n        elem.style.removeProperty(toHyphenCase(css));\n      });\n    });\n  }\n\n  /**\n   * @method Elem#replace\n   * @public\n   * @param {Elem|Element} element - Element to replace the first element in the set\n   * with a set of elements specified by the argument (Element or Elem).\n   * @returns {Elem} Returns this.\n   * @description Method is similar to\n   * [Node#replaceChild]{@link https://developer.mozilla.org/en/docs/Web/API/Node/replaceChild}.\n   *\n   * @example\n   * elem.replace(elem2);\n   * elem.replace(document.getElementById('id'));\n   * elem.replace('#id div.c1');\n   */\n  replace(element) {\n    element = toElem(element);\n\n    const first = this.elem(0);\n    const parent = first.parent();\n\n    if (!parent.length) {\n      return this;\n    }\n\n    let elem = parent;\n    let method = 'into';\n    const next = first.next()[0];\n    const prev = first.prev()[0];\n\n    if (next) {\n      elem = next;\n      method = 'insertBefore';\n    } else if (prev) {\n      elem = prev;\n      method = 'insertAfter';\n    }\n\n    first.remove();\n\n    element[method](elem);\n  }\n\n  /**\n   * @method Elem#show\n   * @public\n   * @returns {Elem} Returns this.\n   * @description Shows all elements in the set.\n   * If an element was hidden using {@link Elem#hide} previous display is set.\n   *\n   * @example\n   * elem.show();\n   */\n  show() {\n    return this.forEach(show);\n  }\n\n  slice() {\n    return new Elem(super.slice.apply(this, arguments));\n  }\n\n  /**\n   * @method Elem#text\n   * @public\n   * @param {String|*} [text] - Text to write instead of current text.\n   * @returns {Elem|String} If no arguments passed text of the first element in the set returned.\n   * Otherwise all elements texts in the set are set to the text argument.\n   * @description Gets or sets text.\n   *\n   * @example\n   * elem.text('123');\n   * elem.text(); // '123'\n   */\n  text(text) {\n    if (!arguments.length) {\n      return this.prop('textContent');\n    }\n\n    return this.forEach((elem) => {\n      elem.textContent = text;\n    });\n  }\n\n  /**\n   * @method Elem#toggleAttr\n   * @public\n   * @param {String} attr - Attribute to toggle.\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the attribute\n   * with the '' value and if falsey method removes the attribute. If not present method adds\n   * the attribute if it doesn't exist and removes if it does.\n   * @returns {Elem} Returns this.\n   * @description Method for toggling attributes.\n   *\n   * @example\n   * elem.toggleAttr('attr');\n   * elem.toggleAttr('attr', someCondition);\n   */\n  toggleAttr(attr, condition) {\n    return this.forEach((elem) => {\n      elem = new Elem(elem);\n\n      if (arguments.length < 2 ? !elem.hasAttr(attr) : condition) {\n        elem.attr(attr, '');\n      } else {\n        elem.removeAttr(attr);\n      }\n    });\n  }\n\n  /**\n   * @method Elem#toggleClass\n   * @public\n   * @param {String} cls - Class to toggle.\n   * @param {Boolean|*} [condition] - If present and the condition is truthy method adds the class\n   * and if falsey method removes the class. If not present method adds\n   * the class if it doesn't exist and removes if it does.\n   * @returns {Elem} Returns this.\n   * @description Method for toggling classes.\n   *\n   * @example\n   * elem.toggleClass('cls');\n   * elem.toggleClass('cls', someCondition);\n   */\n  toggleClass(cls, condition) {\n    return this.forEach((elem) => {\n      const { classList } = elem;\n\n      classList.toggle(cls, arguments.length < 2 ? !classList.contains(cls) : condition);\n    });\n  }\n}\n\nsetToStringTag(Elem, 'Elem');\n\nif (Symbol && Symbol.species) {\n  defineProperties(Elem, {\n    [Symbol.species]: {\n      get() {\n        return Array;\n      }\n    }\n  });\n}\n\nexport { Elem };\n","import { iterateArray, keys } from '../../utils';\n\nexport function calculateArgs(args, argsObject) {\n  iterateArray(keys(argsObject), (arg) => {\n    if (!(arg in args)) {\n      argsObject[arg] = undefined;\n    }\n  });\n\n  /* eslint guard-for-in: 0 */\n  for (const arg in args) {\n    argsObject[arg] = args[arg];\n  }\n}\n","export function cleanProperty(value, arg, object) {\n  delete object[arg];\n}\n","import { escapeRegex } from '../../utils';\n\nexport function constructMixinRegex(name) {\n  return new RegExp(`^${ escapeRegex(name) }(?:\\\\(([^\\\\)]*)\\\\))?(?:#([\\\\s\\\\S]*))?$`);\n}\n","const COMMA_REGEX = /,/;\n\nexport function mixinMatch(mixins, attr) {\n  let match;\n\n  /* eslint guard-for-in: 0 */\n  for (const name in mixins) {\n    const Mixin = mixins[name];\n    const localMatch = attr.match(Mixin._match);\n\n    if (localMatch) {\n      const argsMatch = localMatch[1];\n      let args;\n\n      if (argsMatch === '') {\n        args = [];\n      } else if (argsMatch) {\n        args = argsMatch.split(COMMA_REGEX);\n      }\n\n      match = {\n        args,\n        comment: localMatch[2],\n        Mixin,\n        name\n      };\n\n      break;\n    }\n  }\n\n  return match;\n}\n","import { collectFromObject, assign } from '../../utils';\nimport { D_REST_REGEX } from '../../constants';\nimport { mixinMatch } from './mixinMatch';\n\nexport function transformRestAttrs(attrs, mixins, mixinDefaultOpts) {\n  return collectFromObject(attrs, (eventualAttrs, value, attr) => {\n    if (D_REST_REGEX.test(attr)) {\n      return assign(eventualAttrs, transformRestAttrs(value, mixins, mixinDefaultOpts));\n    }\n\n    const match = mixinMatch(mixins, attr);\n\n    if (match) {\n      eventualAttrs[attr] = {\n        type: 'mixin',\n        dynamic: true,\n        opts: {\n          value,\n          ...match,\n          ...mixinDefaultOpts\n        },\n        value\n      };\n\n      return;\n    }\n\n    eventualAttrs[attr] = {\n      type: 'attr',\n      value\n    };\n  });\n}\n\nexport function transformRestArgs(args) {\n  return collectFromObject(args, addArgs);\n}\n\nfunction addArgs(args, value, arg) {\n  if (D_REST_REGEX.test(arg)) {\n    assign(args, transformRestArgs(value));\n  } else {\n    args[arg] = value;\n  }\n}\n","import { iterateArray } from '../../utils';\n\nexport function executeMixinWatchers(mixin, value) {\n  const oldValue = mixin.$$.value;\n\n  mixin.$$.value = value;\n\n  iterateArray(mixin.$$.watchers, (watcher) => {\n    watcher(value, oldValue);\n  });\n}\n","export function createMixin({\n  name, Mixin, dynamic,\n  value, args, comment, elem,\n  parentBlock, parentScope, parentTemplate\n}) {\n  const mixin = new Mixin({\n    name,\n    value,\n    dynamic,\n    args,\n    comment,\n    elem,\n    parentBlock,\n    parentScope,\n    parentTemplate\n  });\n\n  if (Mixin.evaluate) {\n    const value = mixin.value = mixin.evaluate((newValue, oldValue) => {\n      mixin.value = newValue;\n\n      try {\n        mixin.afterUpdate(newValue, oldValue);\n      } catch (err) {\n        console.error(`Uncaught error in ${ name }#afterUpdate:`, err);\n      }\n    });\n\n    mixin.afterUpdate(value);\n  }\n\n  return mixin;\n}\n","import { iterateObject, iterateArray } from '../../utils';\nimport { executeMixinWatchers } from './executeMixinWatchers';\nimport { createMixin } from './createMixin';\n\nexport function calculateAttrs(attrs, attrsObject, elem, firstTime) {\n  iterateObject(attrsObject, ({ type, value }, attr) => {\n    if (!attrs[attr]) {\n      if (type === 'attr') {\n        elem.removeAttr(attr);\n      } else {\n        value.$$.remove();\n      }\n\n      delete attrsObject[attr];\n    }\n  });\n\n  const mixins = [];\n\n  /* eslint guard-for-in: 0 */\n  for (const attr in attrs) {\n    const {\n      type,\n      dynamic,\n      value,\n      opts\n    } = attrs[attr];\n    let nextType;\n    let nextDynamic;\n    let nextValue;\n\n    if (attrsObject[attr]) {\n      const {\n        type: prevType,\n        value: prevValue\n      } = attrsObject[attr];\n\n      if (type === 'attr') {\n        if (prevType === 'mixin') {\n          prevValue.$$.remove();\n        }\n\n        if (prevValue !== value) {\n          elem.attr(attr, value);\n        }\n\n        nextValue = value;\n      } else {\n        const mixin = prevValue;\n\n        if (prevType === 'attr') {\n          elem.removeAttr(attr);\n        }\n\n        mixin.$$.isDynamic = dynamic;\n\n        if (dynamic) {\n          executeMixinWatchers(mixin, value);\n        } else if (!mixin.$$.evaluated && opts.Mixin.evaluate) {\n          const newValue = mixin.$$.parentScope.$$.evaluate(value, (newValue) => {\n            const {\n              type,\n              dynamic\n            } = attrs[attr];\n\n            if (type === 'mixin' && !dynamic) {\n              executeMixinWatchers(mixin, newValue);\n            }\n          }, mixin);\n\n          mixin.$$.evaluated = true;\n\n          executeMixinWatchers(mixin, newValue);\n        }\n\n        nextValue = mixin;\n      }\n\n      nextType = type;\n      nextDynamic = dynamic;\n    } else {\n      if (type === 'attr') {\n        elem.attr(attr, value);\n\n        nextValue = value;\n      } else {\n        const buildMixin = () => {\n          opts.dynamic = dynamic;\n\n          const mixin = createMixin(opts);\n\n          if (!dynamic && opts.Mixin.evaluate) {\n            const {\n              parentScope,\n              value\n            } = opts;\n            const firstValue = parentScope.$$.evaluate(value, (newValue) => {\n              const {\n                type,\n                dynamic\n              } = attrs[attr];\n\n              if (type === 'mixin' && !dynamic) {\n                executeMixinWatchers(mixin, newValue);\n              }\n            }, mixin);\n\n            mixin.$$.evaluated = true;\n            mixin.$$.value = firstValue;\n          }\n\n          nextValue = mixin;\n\n          return {\n            attr,\n            opts: {\n              type,\n              dynamic,\n              value: mixin\n            }\n          };\n        };\n\n        if (firstTime) {\n          mixins.push(buildMixin);\n        } else {\n          buildMixin();\n        }\n      }\n\n      nextType = type;\n      nextDynamic = dynamic;\n    }\n\n    attrsObject[attr] = {\n      type: nextType,\n      dynamic: nextDynamic,\n      value: nextValue\n    };\n  }\n\n  if (firstTime) {\n    return () => {\n      iterateArray(mixins, (buildMixin) => {\n        const {\n          attr,\n          opts\n        } = buildMixin();\n\n        attrsObject[attr] = opts;\n      });\n    };\n  }\n}\n","import { create, collectFromObject } from '../../utils';\n\nexport function constructPrivateScope(object, type, parentScope) {\n  let scope = {};\n\n  if (type === 'globals') {\n    scope = create(\n      parentScope\n        ? parentScope.$$.globals\n        : null\n    );\n  }\n\n  return collectFromObject(object, (scope, value, key) => {\n    scope[key] = {\n      value,\n      watchers: {\n        temp: [],\n        perm: []\n      }\n    };\n  }, scope);\n}\n","import { removeArrayElem, iterateArray } from '../../utils';\n\nexport function removeTempWatcher(watcher) {\n  watcher.onRemove();\n  watcher();\n}\n\nexport function removeWatchers(watchersToRemove) {\n  iterateArray(watchersToRemove, removeWatcher);\n}\n\nfunction removeWatcher({ watcher, watchers }) {\n  removeArrayElem(watchers, watcher);\n}\n","import { defineProperties, mapObject, iterateArray } from '../../utils';\nimport { Scope } from '../../constants';\nimport { removeTempWatcher } from './removeWatcher';\n\nlet changed;\n\nexport function constructPublicScope(scope, scopeValues, privateScope) {\n  defineProperties(scope, mapObject(scopeValues, (value, key) => {\n    const scope = privateScope[key];\n    const { watchers } = scope;\n\n    return {\n      configurable: false,\n      enumerable: true,\n      get() {\n        if (Scope.evalMode) {\n          if (Scope.gettingVars.indexOf(watchers.temp) === -1) {\n            Scope.gettingVars.push(watchers.temp);\n          }\n        }\n\n        return scope.value;\n      },\n      set(value) {\n        if (value === scope.value) {\n          return;\n        }\n\n        if (!changed) {\n          changed = [];\n        }\n\n        const oldTempWatchers = watchers.temp.slice();\n        const oldValue = scope.value;\n\n        watchers.temp = [];\n        scope.value = value;\n\n        iterateArray(oldTempWatchers, removeTempWatcher);\n        changed.push({\n          scope,\n          oldValue,\n          value\n        });\n\n        setTimeout(() => {\n          if (!changed) {\n            return;\n          }\n\n          const was = [];\n          const values = [];\n\n          for (let i = changed.length - 1; i >= 0; i--) {\n            const {\n              scope,\n              value,\n              oldValue\n            } = changed[i];\n\n            iterateArray(scope.watchers.perm, (watcher) => {\n              const index = was.indexOf(watcher);\n\n              if (index === -1) {\n                was.push(watcher);\n                values.push({\n                  value,\n                  oldValue\n                });\n              } else {\n                values[index].oldValue = oldValue;\n              }\n            });\n\n            changed.splice(i, 1);\n          }\n\n          changed = null;\n\n          iterateArray(was, (watcher, i) => {\n            const {\n              value,\n              oldValue\n            } = values[i];\n\n            watcher(value, oldValue);\n          });\n        }, 0);\n      }\n    };\n  }));\n}\n","import {\n  except, create, assign,\n  iterateObject, iterateArray,\n  isNil\n} from '../../utils';\nimport { Elem } from '../../Elem';\nimport {\n  SVG_NS, D_REST_REGEX\n} from '../../constants';\nimport { cleanProperty } from './cleanProperty';\nimport { transformRestAttrs } from './transformRestAttrs';\nimport { calculateAttrs } from './calculateAttrs';\nimport { mixinMatch } from './mixinMatch';\nimport { constructPrivateScope } from './constructPrivateScope';\nimport { constructPublicScope } from './constructPublicScope';\nimport { Block } from '../../Block';\n\nconst NAMED_D_BLOCK_REGEX = /^d-block:([\\s\\S]+)$/;\n\nexport function createBlock({ node, Constructor, parent, parentElem, parentBlock, parentScope, parentTemplate, prevBlock }) {\n  const doc = new Elem(parentElem[0].ownerDocument);\n  const elem = parentElem[0].namespaceURI === SVG_NS\n    ? doc.create('svg')\n    : doc;\n  const localBlocks = parentTemplate ? parentTemplate.$$.ns._blocks : Block._blocks;\n  const localMixins = parentTemplate ? parentTemplate.$$.ns._mixins : Block._mixins;\n  let children = node.children = node.children || [];\n  let args = node.attrs = node.attrs || {};\n  let name = node.name || 'UnknownBlock';\n  let constructor = Constructor || (node.name && localBlocks[node.name]);\n  let dBlockMatch;\n  let dBlockName;\n  let dBlockArgs;\n  let dBlockChildren;\n  let dElementsName;\n  let dElementsConstructor;\n\n  if (name === 'd-block' && args.name) {\n    name = 'd-elements';\n    constructor = localBlocks[name];\n    dElementsName = args.name;\n    dBlockArgs = except(args, 'name');\n    dBlockChildren = children;\n    children = [];\n    args = {};\n  } else if (name === 'd-block' && args.Constructor) {\n    name = 'UnknownBlock';\n    constructor = localBlocks[name];\n    dElementsConstructor = args.Constructor;\n    dBlockArgs = except(args, 'Constructor');\n    dBlockChildren = children;\n    children = [];\n    args = {};\n  } else if ((dBlockMatch = name.match(NAMED_D_BLOCK_REGEX)) || name === 'd-block') {\n    constructor = Block._blocks['d-block'];\n    dBlockName = dBlockMatch ? dBlockMatch[1] : null;\n  }\n\n  let blockInstance;\n\n  if (constructor) {\n    try {\n      blockInstance = new constructor({\n        name,\n        args,\n        dBlockName,\n        children,\n        parent,\n        parentElem,\n        parentBlock,\n        parentScope,\n        parentTemplate,\n        prevBlock\n      });\n    } catch (err) {\n      console.error(`Uncaught error in new ${ name }:`, err);\n      constructor = null;\n    }\n  }\n\n  if (!constructor) {\n    const {\n      value,\n      children\n    } = node;\n\n    const element = elem.create(name);\n    const currentAttrs = create(null);\n    let attrs = create(null);\n    let wasDRest;\n    const mixinDefaultOpts = {\n      elem: element,\n      parentBlock,\n      parentScope,\n      parentTemplate\n    };\n\n    iterateObject(args, (value, attr) => {\n      const isDRest = D_REST_REGEX.test(attr);\n      const localAttrs = isDRest || wasDRest\n        ? create(attrs)\n        : attrs;\n\n      attrs = localAttrs;\n\n      if (isDRest) {\n        const restAttrs = parentScope.$$.evaluate(value, (value) => {\n          setTimeout(() => {\n            iterateObject(localAttrs, cleanProperty);\n            assign(localAttrs, transformRestAttrs(\n              value, localMixins, mixinDefaultOpts\n            ));\n            calculateAttrs(attrs, currentAttrs, element, false);\n          }, 0);\n        }, parentBlock);\n\n        wasDRest = true;\n\n        return assign(localAttrs, transformRestAttrs(\n          restAttrs, localMixins, mixinDefaultOpts\n        ));\n      }\n\n      const match = mixinMatch(localMixins, attr);\n\n      wasDRest = false;\n\n      if (match) {\n        if (value === true) {\n          value = 'true';\n        }\n\n        localAttrs[attr] = {\n          type: 'mixin',\n          dynamic: false,\n          opts: {\n            value,\n            ...match,\n            ...mixinDefaultOpts\n          },\n          value\n        };\n\n        return;\n      }\n\n      localAttrs[attr] = {\n        type: 'attr',\n        value: parentScope.$$.evaluate(value, (value) => {\n          localAttrs[attr] = {\n            type: 'attr',\n            value\n          };\n          calculateAttrs(attrs, currentAttrs, element, false);\n        }, parentBlock)\n      };\n    });\n\n    const createMixins = calculateAttrs(attrs, currentAttrs, element, true);\n\n    if (name === '#comment') {\n      element.text(value);\n    }\n\n    if (name === '#text') {\n      let text = parentScope.$$.evaluate(value, (value) => {\n        if (isNil(value)) {\n          value = '';\n        }\n\n        element.text(`${ value }`);\n      }, parentBlock);\n\n      if (isNil(text)) {\n        text = '';\n      }\n\n      element.text(`${ text }`);\n    }\n\n    if (children) {\n      const parentElem = name === 'template'\n        ? new Elem(element[0].content)\n        : element;\n      let prevBlock;\n\n      iterateArray(children, (child) => {\n        prevBlock = createBlock({\n          node: child,\n          parent: parentElem,\n          parentElem,\n          parentBlock,\n          parentScope,\n          parentTemplate,\n          prevBlock\n        });\n      });\n    }\n\n    const isParentBlock = parent instanceof Block;\n\n    if (prevBlock instanceof Block) {\n      prevBlock.$$.insertAfterIt(element, false);\n    } else if (prevBlock) {\n      element.insertAfter(prevBlock);\n\n      if (isParentBlock) {\n        parent.$$.addContent(element);\n      }\n    } else if (isParentBlock) {\n      parent.$$.insertInStartOfIt(element, false);\n    } else {\n      element.into(parentElem, false);\n    }\n\n    createMixins();\n\n    return element;\n  }\n\n  const {\n    $$,\n    args: Args,\n    globals,\n    ...locals\n  } = blockInstance;\n\n  if (dElementsName) {\n    node = {\n      attrs: dBlockArgs,\n      children: dBlockChildren\n    };\n    node.name = parentScope.$$.evaluate(dElementsName, (newName) => {\n      node.name = newName;\n\n      Args.value = [node];\n    }, blockInstance, true);\n\n    Args.value = [node];\n    Args.parentScope = parentScope;\n    Args.parentTemplate = parentTemplate;\n  }\n\n  if (dElementsConstructor) {\n    node = {\n      name,\n      attrs: dBlockArgs,\n      children: dBlockChildren\n    };\n\n    Args.Constructor = parentScope.$$.evaluate(dElementsConstructor, (newConstructor) => {\n      Args.Constructor = newConstructor;\n      Args.value = [node];\n    }, blockInstance, true);\n    Args.value = [node];\n    Args.parentScope = parentScope;\n    Args.parentTemplate = parentTemplate;\n  }\n\n  const html = name === 'd-elements'\n    ? Args.value || []\n    : constructor._html;\n\n  $$.args = constructPrivateScope(Args);\n  $$.locals = constructPrivateScope(locals);\n  $$.globals = constructPrivateScope(globals, 'globals', parentScope);\n\n  if (name === '#d-item') {\n    const scopeValues = {\n      [node.itemName]: node.item,\n      [node.indexName]: node.index\n    };\n    const scope = parentScope.$$.name === '#d-item'\n      ? parentScope.$$.scope\n      : parentScope;\n\n    $$.ns = parentScope.$$.ns;\n    $$.privateScope = constructPrivateScope(scopeValues);\n    constructPublicScope($$.scope = create(scope), scopeValues, $$.privateScope);\n  }\n\n  if (name === 'd-each') {\n    $$.scope = create(parentScope.$$.name === '#d-item' ? parentScope.$$.scope : parentScope, {\n      [Args.item || '$item']: {\n        value: null,\n        writable: true\n      },\n      [Args.index || '$index']: {\n        value: null,\n        writable: true\n      }\n    });\n  }\n\n  constructPublicScope(Args, Args, $$.args);\n  constructPublicScope(globals, globals, $$.globals);\n  constructPublicScope(blockInstance, locals, $$.locals);\n\n  try {\n    blockInstance.afterConstruct();\n  } catch (err) {\n    console.error(`Uncaught error in ${ name }#afterConstruct:`, err);\n  }\n\n  prevBlock = undefined;\n  parentScope = name === 'd-elements'\n    ? Args.parentScope\n    : blockInstance;\n  parentTemplate = name === 'd-elements'\n    ? Args.parentTemplate\n    : blockInstance;\n\n  iterateArray(html, (child) => {\n    prevBlock = createBlock({\n      node: child,\n      parent: blockInstance,\n      parentElem,\n      parentBlock: blockInstance,\n      parentScope,\n      parentTemplate,\n      prevBlock\n    });\n  });\n\n  blockInstance.$$.isRendered = true;\n\n  try {\n    blockInstance.afterRender();\n  } catch (err) {\n    console.error(`Uncaught error in ${ name }#afterRender:`, err);\n  }\n\n  return blockInstance;\n}\n","import { setProto } from '../../utils';\nimport { Block } from '../../Block';\n\nexport function extendBlock(cls) {\n  setProto(cls, Block);\n  setProto(cls.prototype, Block.prototype);\n}\n","const { isPrototypeOf } = {};\n\nexport function isInstanceOf(Class, Subclass) {\n  return Class::isPrototypeOf(Subclass) && Class.prototype::isPrototypeOf(Subclass.prototype);\n}\n","export function removeWithParentSignal(child) {\n  child.$$.remove(true);\n}\n\nexport function remove(child) {\n  child.$$.remove();\n}\n","import { iterateObject } from '../../utils';\n\nexport function watchForAllLocals(block, watcher) {\n  iterateObject(block.$$.locals, ({ watchers }) => {\n    watchers.perm.push(watcher);\n  });\n}\n\nexport function watchForAllGlobals(block, watcher) {\n  const {\n    globals,\n    watchersToRemove\n  } = block.$$;\n\n  for (const glob in globals) {\n    /* eslint guard-for-in: 0 */\n    const watchers = globals[glob].watchers.perm;\n\n    watchers.push(watcher);\n    watchersToRemove.push({\n      watcher,\n      watchers\n    });\n  }\n}\n\nexport function watchForAllArgs(block, watcher) {\n  iterateObject(block.$$.args, ({ watchers }) => {\n    watchers.perm.push(watcher);\n  });\n}\n","import {\n  defineFrozenProperties,\n  removeArrayElem, setToStringTag\n} from './utils';\nimport { wrapMixin, removeWatchers } from './helpers/Block';\n\nclass Mixin {\n  static evaluate = true;\n\n  /**\n   * @method Mixin.wrap\n   * @public\n   * @param {...Wrapper} wrappers - Functions that return wrapped mixin.\n   * @returns {typeof Mixin} New mixin.\n   * @description Method for wrapping mixins.\n   * It is considered best practice to just extends the old mixin with a new one.\n   */\n  static wrap(...wrappers) {\n    return wrappers.reduce(wrapMixin, this);\n  }\n\n  constructor(opts) {\n    const {\n      name,\n      value,\n      dynamic,\n      elem,\n      args,\n      comment,\n      parentBlock,\n      parentScope,\n      parentTemplate\n    } = opts;\n    const watchersToRemove = [];\n    const watchers = [];\n\n    defineFrozenProperties(this, {\n      $$: {\n        name,\n        _value: value,\n        value,\n        isDynamic: dynamic,\n        parentScope,\n        parentBlock,\n        parentTemplate,\n        watchers,\n        watchersToRemove,\n        isRemoved: false,\n        evaluate: (watcher) => {\n          const {\n            isDynamic,\n            value,\n            _value\n          } = this.$$;\n          const currentValue = isDynamic\n            ? value\n            : parentScope.$$.evaluate(_value);\n\n          if (watcher) {\n            watchers.push(watcher);\n          }\n\n          return currentValue;\n        },\n        remove: (isParentSignal) => {\n          this.$$.isRemoved = true;\n\n          removeWatchers(watchersToRemove);\n\n          try {\n            this.beforeRemove();\n          } catch (err) {\n            console.error(`Uncaught error in ${ name }#beforeRemove:`, err);\n          }\n\n          if (!isParentSignal && parentBlock) {\n            removeArrayElem(parentBlock.$$.mixins, this);\n          }\n        }\n      }\n    });\n\n    /**\n     * @member {String[]} [Mixin#args]\n     * @type {String[]}\n     * @public\n     */\n    this.args = args;\n\n    /**\n     * @member {String} [Mixin#comment]\n     * @type {String}\n     * @public\n     */\n    this.comment = comment;\n\n    /**\n     * @member {Block} [Mixin#parentBlock]\n     * @type {Block}\n     * @public\n     */\n    this.parentBlock = parentBlock;\n\n    /**\n     * @member {Block} [Mixin#parentScope]\n     * @type {Block}\n     * @public\n     */\n    this.parentScope = parentScope;\n\n    /**\n     * @member {Block} [Mixin#parentTemplate]\n     * @type {Block}\n     * @public\n     */\n    this.parentTemplate = parentTemplate;\n\n    /**\n     * @member {Elem} Mixin#elem\n     * @type {Elem}\n     * @public\n     */\n    this.elem = elem;\n\n    /**\n     * @member {Element} Mixin#node\n     * @type {Element}\n     * @public\n     */\n    this.node = elem[0];\n\n    if (parentBlock) {\n      parentBlock.$$.mixins.push(this);\n    }\n  }\n\n  afterUpdate() {}\n\n  beforeRemove() {}\n\n  /**\n   * @method Block#evaluate\n   * @public\n   * @param {Watcher} [callback] - If present, callback which is called when the mixin value is changed.\n   * @returns {*} Evaluation result.\n   * @description Method for evaluating the mixin value and watching for the changes.\n   */\n  evaluate(callback) {\n    return this.$$.evaluate(callback);\n  }\n}\n\nsetToStringTag(Mixin, 'Mixin');\n\nexport { Mixin };\n","import { isInstanceOf } from './isInstanceOf';\nimport { Block } from '../../Block';\nimport { Mixin } from '../../Mixin';\n\nexport function wrapBlock(block, wrapper) {\n  const returnValue = wrapper(block);\n\n  return isInstanceOf(Block, returnValue)\n    ? returnValue\n    : block;\n}\n\nexport function wrapMixin(mixin, wrapper) {\n  const returnValue = wrapper(mixin);\n\n  return isInstanceOf(Mixin, returnValue)\n    ? returnValue\n    : mixin;\n}\n","import { Elem } from './Elem';\nimport {\n  defineFrozenProperties,\n  assign, iterateArray, iterateObject,\n  isFunction, isArray,\n  setToStringTag, hasOwnProperty,\n  removeArrayElem, create,\n  getProto, setProto\n} from './utils';\nimport {\n  constructMixinRegex, isInstanceOf,\n  removeWatchers, removeWithParentSignal, cleanProperty,\n  transformRestArgs, calculateArgs,\n  watchForAllArgs, watchForAllGlobals, watchForAllLocals,\n  extendBlock, wrapBlock\n} from './helpers/Block';\nimport {\n  D_REST_REGEX, Scope,\n  rootBlocks, rootMixins\n} from './constants';\n\n/**\n * @typedef {Error} EvaluationError\n * @public\n * @property {String} expression - Expression which has been evaluated with the error.\n * @property {Block} block - Block in context of which the expression has been evaluated with the error.\n */\n\n/**\n * @callback Watcher\n * @public\n * @param {*} newValue - New value.\n * @param {*} oldValue - Old value.\n */\n\n/**\n * @callback VarsWatcher\n * @public\n */\n\n/**\n * @callback Wrapper\n * @public\n * @param {typeof Block|typeof Mixin} Block class to wrap.\n * @returns {typeof Block} New Block class.\n */\n\n/**\n * @callback AfterUpdate\n * @public\n * @param {*} newValue - New value.\n * @param {*} oldValue - Old value.\n * @param {*} mixin - Mixin instance.\n */\n\n/**\n * @callback BlockRegisterHook\n * @public\n * @param {Block} Block - Registering block.\n * @param {String} name - Block name.\n * @returns Return value is used for registering the block.\n * If Block subclass returned it's registered instead of the initial block, otherwise\n * the initial block is used.\n */\n\n/**\n * @callback MixinRegisterHook\n * @public\n * @param {Block} Mixin - Registering mixin.\n * @param {String} name - Mixin name.\n * @returns Return value is used for registering the mixin.\n * If Mixin subclass returned it's registered instead of the initial mixin, otherwise\n * the initial mixin is used.\n */\n\nconst blockHooks = [];\nconst mixinHooks = [];\nconst TAG_NAME_REGEX = /^[a-z][a-z\\d\\-_.:!@#$%^&*()[\\]{}='\"\\\\]*$/i;\nconst ATTR_NAME_REGEX = /^[\\u0000-\\u0020\\s'\">/=]+$/;\nconst WATCHED_ARG_PREFIX_REGEX = /^args\\./;\nconst WATCHED_GLOBAL_PREFIX_REGEX = /^globals\\./;\nconst afterElem = new Elem();\n\n/**\n * @class Block\n * @extends null\n * @public\n * @param {Object} opts - Element options.\n * @returns {Block} Instance of Block.\n * @description Class for dynamic templating.\n *\n * @example\n * import { D, Block, initApp } from 'dwayne';\n *\n * class App extends Block {\n *   static template = '<Hello text=\"{text}\"/>';\n *\n *   constructor(opts) {\n *     super(opts);\n *\n *     this.text = 'world (0)';\n *     this.times = 0;\n *\n *     this.setInterval();\n *   }\n *\n *   setInterval() {\n *     D(1000).interval(() => {\n *       this.text = `world (${ ++this.times })`;\n *     });\n *   }\n * }\n *\n * Block.block('App', App);\n * Block.block('Hello', 'Hello, {args.text}!');\n *\n * initApp(html`<App/>`, document.getElementById('root'));\n */\nclass Block {\n  static _blocks = create(rootBlocks);\n  static _mixins = create(rootMixins);\n\n  /**\n   * @member {Object} [Block.defaultArgs = null]\n   * @type {Object}\n   * @public\n   * @description Block default args.\n   */\n  static defaultArgs = null;\n\n  /**\n   * @member {Object} [Block.defaultLocals = null]\n   * @type {Object}\n   * @public\n   * @description Block default locals.\n   */\n  static defaultLocals = null;\n\n  /**\n   * @member {Object} [Block.template = { vars: [], value: [] }]\n   * @type {Object}\n   * @public\n   * @description Block template.\n   */\n  static template = {\n    vars: [],\n    value: []\n  };\n\n  /**\n   * @method Block.onEvalError\n   * @public\n   * @param {EvaluationError} err - The method is called when an evaluation error occurs.\n   */\n  static onEvalError(err) {\n    console.error(`Eval error (evaluating \"${ err.expression }\" in context of block \"${ err.block.$$.name }\"):`, err);\n  }\n\n  /**\n   * @method Block.beforeRegisterBlock\n   * @public\n   * @param {BlockRegisterHook} hook - Block register hook.\n   */\n  static beforeRegisterBlock(hook) {\n    blockHooks.push(hook);\n\n    return () => {\n      removeArrayElem(blockHooks, hook);\n    };\n  }\n\n  /**\n   * @method Block.beforeRegisterMixin\n   * @public\n   * @param {MixinRegisterHook} hook - Mixin register hook.\n   */\n  static beforeRegisterMixin(hook) {\n    mixinHooks.push(hook);\n\n    return () => {\n      removeArrayElem(mixinHooks, hook);\n    };\n  }\n\n  /**\n   * @method Block.block\n   * @public\n   * @param {String} name - Block or mixin name.\n   * @param {Template|typeof Block} Subclass - Subclass of Block or template string of it.\n   * @returns {typeof Block|undefined} Returns registered Block or undefined if the block hasn't been registered.\n   * @description Register block in the namespace of this.\n   */\n  static block(name, Subclass) {\n    if (isFunction(Subclass) && !isInstanceOf(Block, Subclass)) {\n      const constructor = Subclass;\n\n      Subclass = class extends Block {\n        constructor(opts) {\n          super(opts);\n\n          this::constructor(opts);\n        }\n      };\n    }\n\n    if (!isFunction(Subclass) && isArray(Subclass)) {\n      Subclass = class extends Block {\n        static template = {\n          vars: [],\n          value: Subclass\n        };\n      };\n    }\n\n    if (!isFunction(Subclass) && Subclass.vars && Subclass.value) {\n      Subclass = class extends Block {\n        static template = Subclass;\n      };\n    }\n\n    if (!isFunction(Subclass)) {\n      console.warn(`Block must be a string (representing a block template), a function or a class that extends Block class (name: \"${ name }\") (Block.block)`);\n\n      return;\n    }\n\n    if (!isInstanceOf(Block, Subclass)) {\n      extendBlock(Subclass);\n    }\n\n    if (rootBlocks[name]) {\n      console.warn(`The \"${ name }\" block is a built-in block so the block will not be registered (Block.block)`);\n\n      return;\n    }\n\n    if (!TAG_NAME_REGEX.test(name)) {\n      console.warn(`Name \"${ name }\" is not allowed for blocks so the block will not be registered (Block.block)`);\n\n      return;\n    }\n\n    if (!hasOwnProperty(this, '_blocks')) {\n      this._blocks = create(getProto(this)._blocks);\n    }\n\n    if (!hasOwnProperty(this, 'defaultLocals')) {\n      this.defaultLocals = {};\n    }\n\n    if (!hasOwnProperty(this, 'defaultArgs')) {\n      this.defaultArgs = create(null);\n    }\n\n    try {\n      Subclass = blockHooks.reduce((returnValue, hook) => {\n        const currentReturnValue = hook(returnValue, name, this);\n\n        return isInstanceOf(Block, currentReturnValue)\n          ? currentReturnValue\n          : returnValue;\n      }, Subclass);\n    } catch (err) {\n      console.error('Uncaught error in \"beforeRegisterBlock\" hook:', err);\n    }\n\n    const {\n      vars,\n      value\n    } = Subclass.template;\n\n    Subclass._html = value;\n    Subclass._vars = vars;\n\n    if (hasOwnProperty(Subclass, 'defaultArgs')) {\n      setProto(Subclass.defaultArgs, null);\n    }\n\n    this._blocks[name] = Subclass;\n\n    return Subclass;\n  }\n\n  /**\n   * @method Block.mixin\n   * @public\n   * @param {String} name - Block or mixin name.\n   * @param {typeof Mixin|AfterUpdate} Subclass - Subclass of Mixin or AfterUpdate callback.\n   * @returns {typeof Mixin|undefined} Returns registered Block or undefined if the block hasn't been registered.\n   * @description Register mixin in the namespace of this.\n   */\n  static mixin(name, Subclass) {\n    if (isFunction(Subclass) && !isInstanceOf(Mixin, Subclass)) {\n      const afterUpdate = Subclass;\n\n      Subclass = class extends Mixin {\n        afterUpdate(newValue, oldValue) {\n          this::afterUpdate(newValue, oldValue, this);\n        }\n      };\n    }\n\n    if (!isInstanceOf(Mixin, Subclass)) {\n      console.warn(`The \"${ name }\" class does not extend Mixin and will not be registered (Block.mixin)`);\n\n      return;\n    }\n\n    if (rootMixins[name]) {\n      console.warn(`The \"${ name }\" mixin is a built-in mixin so the mixin will not be registered (Block.mixin)`);\n\n      return;\n    }\n\n    if (!ATTR_NAME_REGEX.test(name)) {\n      console.warn(`Name \"${ name }\" is not allowed for mixins so the mixin will not be registered (Block.mixin)`);\n\n      return;\n    }\n\n    if (!hasOwnProperty(this, '_mixins')) {\n      this._mixins = create(getProto(this)._mixins);\n    }\n\n    try {\n      Subclass = mixinHooks.reduce((returnValue, hook) => {\n        const currentReturnValue = hook(returnValue, name, this);\n\n        return isInstanceOf(Mixin, currentReturnValue)\n          ? currentReturnValue\n          : returnValue;\n      }, Subclass);\n    } catch (err) {\n      console.error('Uncaught error in \"beforeRegisterMixin\" hook:', err);\n    }\n\n    Subclass._match = constructMixinRegex(name);\n\n    this._mixins[name] = Subclass;\n\n    return Subclass;\n  }\n\n  /**\n   * @method Block.wrap\n   * @public\n   * @param {...Wrapper} wrappers - Functions that return wrapped block.\n   * @returns {typeof Block} New block.\n   * @description Method for wrapping blocks into another blocks.\n   * It is considered best practice to just extends the old block with a new one.\n   *\n   * @example\n   * class MyBlock extends Block {\n   *   static template = '<div>123</div>';\n   * }\n   *\n   * MyBlock.wrap((Block) => {\n   *   return class extends Block {\n   *     static template = `<section class=\"wrapper\">${ Block.template }</section>`;\n   *\n   *     constructor(opts) {\n   *       super(opts);\n   *\n   *       this.additionalVar = 'additional';\n   *     }\n   *   };\n   * });\n   */\n  static wrap(...wrappers) {\n    return wrappers.reduce(wrapBlock, this);\n  }\n\n  constructor(opts) {\n    const {\n      name,\n      args: originalArgs,\n      dBlockName,\n      children,\n      parent,\n      parentElem,\n      parentBlock,\n      parentScope,\n      parentTemplate,\n      prevBlock\n    } = opts;\n    const watchersToRemove = [];\n    const constructor = getProto(this).constructor;\n    const childrenBlocks = [];\n    const mixins = [];\n    const isParentBlock = parent instanceof Block;\n\n    defineFrozenProperties(this, {\n      /**\n       * @member {Block} Block#$\n       * @type {Block}\n       * @public\n       * @description This.\n       */\n      $: this,\n\n      /**\n       * @member {Object} Block#$$\n       * @type {Object}\n       * @protected\n       * @property {Object} args - Private args scope.\n       * @property {Object[]} htmlChildren - Block html children.\n       * @property {Block[]} children - Child blocks.\n       * @property {Mixin[]} mixins - Child mixins.\n       * @property {Elem} parentElem - Parent element.\n       * @property {Elem} content - Content elements.\n       * @property {Function} evaluate - Evaluate function.\n       * @property {Object} globals - Private globals scope.\n       * @property {Object} locals - Private locals scope.\n       * @property {Object[]} watchersToRemove - Watchers to remove before removing element.\n       */\n      $$: {\n        name,\n        dBlockName,\n        dBlocks: [],\n        parent,\n        parentElem,\n        parentScope,\n        parentBlock,\n        parentTemplate,\n        content: new Elem(),\n        ns: constructor,\n        htmlChildren: children,\n        children: childrenBlocks,\n        mixins,\n        prevBlock,\n        watchersToRemove,\n        isRemoved: false,\n        isRendered: false,\n        evaluate: (func, onChange, targetBlock, forDElements, forDItem, forDEach) => {\n          if (!isFunction(func)) {\n            return func;\n          }\n\n          forDElements = !!forDElements;\n          forDItem = !!forDItem;\n\n          const scope = (name === '#d-item' && !forDItem) || forDEach\n            ? (forDEach || this).$$.scope\n            : this;\n          const { watchersToRemove } = targetBlock ? targetBlock.$$ : {};\n          const onChangeFlag = !!onChange;\n\n          const evaluate = () => {\n            let result;\n\n            if (onChangeFlag) {\n              Scope.evalMode = true;\n              Scope.gettingVars = [];\n            }\n\n            try {\n              result = func(scope);\n            } catch (err) {\n              err.expression = func.expression;\n              err.original = func.original;\n              err.block = this;\n\n              if (isFunction(constructor.onEvalError)) {\n                try {\n                  constructor.onEvalError(err);\n                } catch (e) {\n                  console.error('Uncaught error in onEvalError:', e);\n                }\n              }\n            }\n\n            if (onChangeFlag) {\n              const localWatchers = [];\n\n              iterateArray(Scope.gettingVars, (watchers) => {\n                const watcher = () => {\n                  const newResult = evaluate();\n\n                  if (newResult !== result && !targetBlock.$$.isRemoved) {\n                    onChange(newResult, result);\n                  }\n                };\n                const watcherBlock = {\n                  forDElements,\n                  watcher,\n                  watchers\n                };\n\n                watcher.onRemove = () => {\n                  iterateArray(localWatchers, (watcherBlock) => {\n                    const {\n                      watcher,\n                      watchers\n                    } = watcherBlock;\n\n                    removeArrayElem(watchersToRemove, watcherBlock);\n                    removeArrayElem(watchers, watcher);\n                  });\n                };\n\n                localWatchers.push(watcherBlock);\n                watchersToRemove.push(watcherBlock);\n                watchers.push(watcher);\n              });\n\n              Scope.evalMode = false;\n              Scope.gettingVars = [];\n            }\n\n            return result;\n          };\n\n          return evaluate();\n        },\n        remove: (isParentSignal) => {\n          this.$$.isRemoved = true;\n\n          removeWatchers(watchersToRemove);\n\n          iterateArray(childrenBlocks, removeWithParentSignal);\n          iterateArray(mixins, removeWithParentSignal);\n\n          try {\n            this.beforeRemove();\n          } catch (err) {\n            console.error(`Uncaught error in ${ name }#beforeRemove:`, err);\n          }\n\n          if (!isParentSignal && isParentBlock) {\n            parent.$$.removeContent(this.$$.content);\n          }\n\n          if (!isParentSignal && parentBlock) {\n            removeArrayElem(parentBlock.$$.children, this);\n          }\n\n          this.$$.content.remove();\n        },\n        changeContent: (newContent) => {\n          this.$$.content = newContent;\n\n          if (this.$$.isRendered) {\n            try {\n              this.afterDOMChange();\n            } catch (err) {\n              console.error(`Uncaught error in ${ name }#afterContentChange:`, err);\n            }\n          }\n        },\n        addContent: (contentToAdd, notRecursive) => {\n          const oldContent = this.$$.content;\n          const index = oldContent.indexOf(contentToAdd[0].previousSibling) + 1;\n          let newContent;\n\n          if (index === 0) {\n            newContent = contentToAdd.add(oldContent);\n          } else {\n            newContent = oldContent\n              .slice(0, index)\n              .add(contentToAdd, oldContent.slice(index));\n          }\n\n          this.$$.changeContent(newContent);\n\n          if (isParentBlock && !notRecursive) {\n            parent.$$.addContent(contentToAdd, notRecursive);\n          }\n        },\n        moveContent: (contentToMove, after) => {\n          const oldContent = this.$$.content;\n          const index = oldContent.indexOf(contentToMove[0]);\n          const indexToPut = oldContent.indexOf(after[0]) + 1;\n          let newContent;\n\n          if (indexToPut === 0) {\n            newContent = contentToMove.add(\n              oldContent.slice(indexToPut, index),\n              oldContent.slice(index + contentToMove.length)\n            );\n          } else if (index > indexToPut) {\n            newContent = oldContent\n              .slice(0, indexToPut)\n              .add(\n                contentToMove,\n                oldContent.slice(indexToPut, index),\n                oldContent.slice(index + contentToMove.length)\n              );\n          } else {\n            newContent = oldContent\n              .slice(0, index)\n              .add(\n                oldContent.slice(index + contentToMove.length, indexToPut),\n                contentToMove,\n                oldContent.slice(indexToPut)\n              );\n          }\n\n          this.$$.changeContent(newContent);\n\n          if (isParentBlock && indexToPut) {\n            parent.$$.moveContent(contentToMove, after);\n          }\n        },\n        removeContent: (contentToRemove) => {\n          this.$$.changeContent(this.$$.content.filter((elem) => (\n            contentToRemove.indexOf(elem) === -1\n          )));\n\n          if (isParentBlock) {\n            parent.$$.removeContent(contentToRemove);\n          }\n        },\n        insertInStartOfIt: (contentToInsert, moveFlag) => {\n          const { prevBlock } = this.$$;\n          let after = afterElem;\n\n          if (prevBlock instanceof Block) {\n            after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n          } else if (prevBlock) {\n            after = prevBlock;\n            contentToInsert.insertAfter(prevBlock);\n\n            if (isParentBlock) {\n              if (moveFlag) {\n                parent.$$.moveContent(contentToInsert, after);\n              } else {\n                parent.$$.addContent(contentToInsert, true);\n              }\n            }\n          } else if (isParentBlock) {\n            const { prevBlock } = parent.$$;\n\n            if (prevBlock) {\n              let notRecursive;\n\n              if (prevBlock instanceof Block) {\n                after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n                notRecursive = true;\n              } else {\n                after = prevBlock;\n                notRecursive = false;\n                contentToInsert.insertAfter(prevBlock);\n              }\n\n              if (moveFlag) {\n                parent.$$.moveContent(contentToInsert, after);\n              } else {\n                parent.$$.addContent(contentToInsert, notRecursive);\n              }\n            } else {\n              after = parent.$$.insertInStartOfIt(contentToInsert, moveFlag);\n            }\n          } else {\n            contentToInsert.into(parentElem, false);\n          }\n\n          if (moveFlag) {\n            this.$$.moveContent(contentToInsert, after);\n          } else {\n            this.$$.addContent(contentToInsert, true);\n          }\n\n          return after;\n        },\n        insertAfterIt: (contentToInsert, moveFlag) => {\n          const { prevBlock } = this.$$;\n          let after = afterElem;\n          let tryToAddOrMove;\n\n          if (this.$$.content.length) {\n            after = this.$$.content.elem(-1);\n            tryToAddOrMove = true;\n            contentToInsert.insertAfter(after);\n          } else if (prevBlock instanceof Block) {\n            after = prevBlock.$$.insertAfterIt(contentToInsert, moveFlag);\n          } else if (prevBlock) {\n            after = prevBlock;\n            tryToAddOrMove = true;\n            contentToInsert.insertAfter(prevBlock);\n          } else if (isParentBlock) {\n            after = parent.$$.insertInStartOfIt(contentToInsert, moveFlag);\n          } else {\n            contentToInsert.into(parentElem, false);\n          }\n\n          if (isParentBlock && tryToAddOrMove) {\n            if (moveFlag) {\n              parent.$$.moveContent(contentToInsert, after);\n            } else {\n              parent.$$.addContent(contentToInsert);\n            }\n          }\n\n          return after;\n        }\n      }\n    });\n\n    iterateObject(constructor.defaultLocals, (value, variable) => {\n      this[variable] = value;\n    });\n    iterateArray(constructor._vars, (variable) => {\n      this[variable] = this[variable];\n    });\n\n    const argsObject = create(null);\n    let args = create(constructor.defaultArgs || null);\n    let wasDRest;\n\n    iterateObject(originalArgs, (value, arg) => {\n      const isDRest = D_REST_REGEX.test(arg);\n      const localArgs = isDRest || wasDRest\n        ? create(args)\n        : args;\n\n      args = localArgs;\n\n      if (isDRest) {\n        const restArgs = parentScope.$$.evaluate(value, (value) => {\n          iterateObject(localArgs, cleanProperty);\n          assign(localArgs, transformRestArgs(value));\n          calculateArgs(args, argsObject);\n        }, this);\n\n        wasDRest = true;\n\n        return assign(localArgs, transformRestArgs(restArgs));\n      }\n\n      const isDElements = name === 'd-elements';\n      const forDElements = isDElements && arg === 'value';\n\n      wasDRest = false;\n\n      if (name !== 'd-each' || arg !== 'uid') {\n        value = parentScope.$$.evaluate(value, (value) => {\n          localArgs[arg] = value;\n          calculateArgs(args, argsObject);\n        }, this, forDElements, isDElements && parentBlock.$$.name === '#d-item');\n      }\n\n      localArgs[arg] = value;\n    });\n\n    defineFrozenProperties(this, {\n      /**\n       * @member {Object} Block#args\n       * @type {Object}\n       * @public\n       */\n      args: argsObject,\n\n      /**\n       * @member {Object} Block#globals\n       * @type {Object}\n       * @public\n       */\n      globals: create(\n        parentScope\n          ? parentScope.globals\n          : null\n      )\n    });\n\n    calculateArgs(args, argsObject);\n\n    if (parentBlock) {\n      parentBlock.$$.children.push(this);\n    }\n  }\n\n  /**\n   * @method Block#afterConstruct\n   * @public\n   * @description Is called after block construction (including all scopes)\n   * but before rendering the block and its children.\n   */\n  afterConstruct() {}\n\n  /**\n   * @method Block#afterDOMChange\n   * @public\n   * @description Is called after block DOM structure has changed.\n   */\n  afterDOMChange() {}\n\n  /**\n   * @method Block#afterRender\n   * @public\n   * @description Is called after block has been rendered.\n   */\n  afterRender() {}\n\n  /**\n   * @method Block#beforeRemove\n   * @public\n   * @description Is called before the block removal.\n   */\n  beforeRemove() {}\n\n  /**\n   * @method Block#getChildBlocks\n   * @public\n   * @returns {Block[]}\n   * @description Returns child blocks.\n   */\n  getChildBlocks() {\n    return this.$$.blocks.slice();\n  }\n\n  /**\n   * @method Block#getChildBlocks\n   * @public\n   * @returns {Mixin[]}\n   * @description Returns child mixins.\n   */\n  getChildMixins() {\n    return this.$$.mixins.slice();\n  }\n\n  /**\n   * @method Block#getChildren\n   * @public\n   * @returns {Object[]}\n   * @description Returns Block HTML children.\n   */\n  getChildren() {\n    return this.$$.htmlChildren;\n  }\n\n  /**\n   * @method Block#getDOM\n   * @public\n   * @returns {Elem}\n   * @description Returns DOM contents of the block.\n   */\n  getDOM() {\n    return this.$$.content.slice();\n  }\n\n  /**\n   * @method Block#getParentBlock\n   * @public\n   * @returns {Block|void}\n   * @description Returns parent block.\n   */\n  getParentBlock() {\n    return this.$$.parentBlock;\n  }\n\n  /**\n   * @method Block#getParentElem\n   * @public\n   * @returns {Elem|void}\n   * @description Returns parent Elem.\n   */\n  getParentElem() {\n    return this.$$.parentElem.slice();\n  }\n\n  /**\n   * @method Block#getParentScope\n   * @public\n   * @returns {Block|void}\n   * @description Returns parent scope.\n   */\n  getParentScope() {\n    return this.$$.parentScope;\n  }\n\n  /**\n   * @method Block#getParentTemplate\n   * @public\n   * @returns {Block|void}\n   * @description Returns parent template.\n   */\n  getParentTemplate() {\n    return this.$$.parentTemplate;\n  }\n\n  /**\n   * @method Block#evaluate\n   * @public\n   * @param {Function} func - Function to evaluate.\n   * @param {Watcher} [callback] - If present, callback which is called when the expression value is changed.\n   * @param {Block|Mixin} [target = this] - What block or mixin requests the value.\n   * @returns {*} Evaluation result.\n   * @description Method for evaluating an expression in context of the block and watching for the changes.\n   */\n  evaluate(func, callback, target = this) {\n    return this.$$.evaluate(func, callback, target);\n  }\n\n  /**\n   * @method Block#watch\n   * @public\n   * @param {...('args'|'globals'|String)} [vars] - Vars to watch (args, globals or locals).\n   * If no specified all locals, args and globals are to be watched.\n   * If the 'args' string all args are to be watched.\n   * If the 'globals' string all globals are to be watched.\n   * @param {VarsWatcher} watcher - Called when watched vars are changed.\n   * @description Method for watching for vars. If no vars passed in arguments\n   * all vars are to be watched. If the 'args' string is in the arguments all args are to be watched.\n   * If the 'globals' string is in the arguments all globals are to be watched.\n   * Otherwise specified vars will be watched.\n   * Watchers should not be put inside the constructor. It is considered best\n   * practice to do it inside the {@link Block#afterConstruct} method.\n   * Note that these expressions (vars, i.e. \"args.arg\") are not to be\n   * evaluated so you cannot put there things like \"a[b]\" or any js code,\n   * only expressions like \"a\", \"b\", \"args.a\", \"args.b\" and \"globals.a\", \"globals.b\".\n   * Also note that if there are more than one var that are changed at once (synchronously)\n   * the watcher is called only once.\n   * Note that the watcher is executed right away because in most cases\n   * this behaviour is very convenient.\n   *\n   * @example\n   * class MyBlock extends Block {\n   *   static template = '<div />';\n   *\n   *   afterConstruct() {\n   *     this.watch('a', () => {});\n   *     this.watch('args.a', 'globals.r', () => {});\n   *     this.watch(() => {});\n   *   }\n   * }\n   */\n  watch(...vars) {\n    const oldWatcher = arguments[arguments.length - 1];\n\n    if (!isFunction(oldWatcher)) {\n      console.warn(`The last argument (watcher) wasn't specified (${ this.$$.name }#watch)`);\n\n      return;\n    }\n\n    const watcher = () => {\n      oldWatcher();\n    };\n\n    if (arguments.length === 1) {\n      watchForAllLocals(this, watcher);\n      watchForAllArgs(this, watcher);\n      watchForAllGlobals(this, watcher);\n\n      oldWatcher();\n\n      return;\n    }\n\n    iterateArray(arguments, (variable) => {\n      if (variable === oldWatcher) {\n        return;\n      }\n\n      variable = `${ variable }`;\n\n      if (variable === '$') {\n        return watchForAllLocals(this, watcher);\n      }\n\n      if (variable === 'args') {\n        return watchForAllArgs(this, watcher);\n      }\n\n      if (variable === 'globals') {\n        return watchForAllGlobals(this, watcher);\n      }\n\n      if (WATCHED_ARG_PREFIX_REGEX.test(variable)) {\n        variable = variable.replace(WATCHED_ARG_PREFIX_REGEX, '');\n\n        if (!this.$$.args[variable]) {\n          return;\n        }\n\n        this.$$.args[variable].watchers.perm.push(watcher);\n\n        return;\n      }\n\n      if (WATCHED_GLOBAL_PREFIX_REGEX.test(variable)) {\n        variable = variable.replace(WATCHED_GLOBAL_PREFIX_REGEX, '');\n\n        if (!this.$$.globals[variable]) {\n          return;\n        }\n\n        const { watchers } = this.$$.globals[variable];\n\n        watchers.perm.push(watcher);\n        this.$$.watchersToRemove.push({\n          watcher,\n          watchers\n        });\n\n        return;\n      }\n\n      if (!this.$$.locals[variable]) {\n        return;\n      }\n\n      this.$$.locals[variable].watchers.perm.push(watcher);\n    });\n\n    oldWatcher();\n  }\n}\n\nsetToStringTag(Block, 'Block');\nsetProto(Block.prototype, null);\n\nexport { Block };\n","import { findInArray } from '../utils';\nimport { Block } from '../Block';\nimport { rootBlocks } from '../constants';\n\nrootBlocks['d-block'] = class DBlock extends Block {\n  static template = html`\n    <d-elements\n      value=\"{elems}\"\n      parentScope=\"{ParentScope}\"\n      parentTemplate=\"{ParentTemplate}\"\n    />\n  `;\n\n  afterConstruct() {\n    const {\n      parentScope: {\n        $$: {\n          parentScope: parentParentScope,\n          parentTemplate: parentParentTemplate,\n          htmlChildren: children\n        }\n      },\n      htmlChildren: ownChildren,\n      parentTemplate,\n      dBlockName\n    } = this.$$;\n    let found;\n\n    if (ownChildren.length) {\n      return;\n    }\n\n    this.ParentScope = parentParentScope;\n    this.ParentTemplate = parentParentTemplate;\n\n    if (dBlockName) {\n      found = findInArray(children, ({ name: nodeName }) => nodeName === `d-block:${ dBlockName }`);\n\n      if (!found) {\n        let parent = this;\n\n        /* eslint no-empty: 0 */\n        while (\n        (parent = parent.$$.parentScope)\n        && !(found = findInArray(parent.$$.dBlocks, ({ $$: { dBlockName: DBlockName } }) => DBlockName === dBlockName))\n        && parent.$$.parentScope.$$.name === '#d-item'\n          ) {}\n\n        if (found) {\n          this.ParentScope = parent;\n          this.ParentTemplate = parentTemplate;\n          found.value = {\n            children: found.value.$$.htmlChildren\n          };\n        }\n      }\n\n      this.elems = found && found.value.children.length\n        ? found.value.children\n        : null;\n    } else {\n      this.elems = children;\n    }\n  }\n};\n","import { Block } from '../Block';\n\nconst template = html`\n  <d-elements\n    value=\"{$$.htmlChildren}\"\n    parentScope=\"{this}\"\n    parentTemplate=\"{$$.parentTemplate}\"\n  />\n`;\n\nclass DItem extends Block {\n  static template = template;\n  static _vars = template.vars;\n  static _html = template.value;\n}\n\nexport { DItem };\n","import {\n  assign, iterateArray, iterateObject,\n  isArray, isFunction\n} from '../utils';\nimport { remove, createBlock } from '../helpers/Block';\nimport { Block } from '../Block';\nimport { rootBlocks } from '../constants';\nimport { DItem } from './d-item';\n\nconst watchArgs = js`[\n  args.set,\n  args.filterBy,\n  args.sortBy\n]`;\n\nrootBlocks['d-each'] = class DEach extends Block {\n  constructor(opts) {\n    super(opts);\n\n    const {\n      args: {\n        item: itemName = '$item',\n        index: indexName = '$index'\n      }\n    } = this;\n\n    assign(this.$$, {\n      itemsByUIDs: {},\n      UID: this.args.uid || undefined,\n      itemName,\n      indexName\n    });\n  }\n\n  afterRender() {\n    this.evaluate(watchArgs, this.renderSet);\n    this.renderSet();\n  }\n\n  renderSet = () => {\n    const {\n      htmlChildren,\n      itemsByUIDs,\n      parentScope,\n      parentElem,\n      parentTemplate,\n      scope,\n      itemName,\n      indexName,\n      UID\n    } = this.$$;\n    const {\n      args: { sortBy }\n    } = this;\n    const newItemsByUIDs = {};\n    const newUIDsCounter = {};\n    const newUIDs = {};\n    let {\n      set,\n      filterBy\n    } = this.args;\n    const isArr = isArray(set);\n    const iterate = isArr\n      ? iterateArray\n      : iterateObject;\n\n    if (isArr && isFunction(sortBy)) {\n      set = set\n        .slice()\n        .sort(sortBy);\n    }\n\n    if (isFunction(filterBy)) {\n      filterBy = [filterBy];\n    }\n\n    if (isArray(filterBy)) {\n      iterateArray(filterBy, (filter) => {\n        set = set.filter(filter);\n      });\n    }\n\n    iterate(set, (item, index) => {\n      scope[itemName] = item;\n      scope[indexName] = index;\n\n      const uid = parentScope.$$.evaluate(UID, null, null, false, false, this);\n\n      newUIDsCounter[uid] = (newUIDsCounter[uid] || 0) + 1;\n      newUIDs[index] = uid;\n    });\n\n    scope[itemName] = null;\n    scope[indexName] = null;\n\n    iterateObject(itemsByUIDs, (items, uid) => {\n      if (!newUIDsCounter[uid]) {\n        iterateArray(items, remove);\n\n        return;\n      }\n\n      iterateArray(items.splice(newUIDsCounter[uid]), remove);\n    });\n\n    let prevBlock;\n\n    iterate(set, (item, index) => {\n      const uid = newUIDs[index];\n      let block;\n\n      if (itemsByUIDs[uid] && itemsByUIDs[uid].length) {\n        block = itemsByUIDs[uid].shift();\n        block.$$.scope[indexName] = index;\n        block.$$.scope[itemName] = item;\n\n        if (block.$$.prevBlock !== prevBlock && prevBlock) {\n          prevBlock.$$.insertAfterIt(block.$$.content, true);\n        }\n      } else {\n        block = createBlock({\n          node: {\n            itemName,\n            indexName,\n            item,\n            index,\n            name: '#d-item',\n            children: htmlChildren\n          },\n          Constructor: DItem,\n          parent: this,\n          parentElem,\n          parentBlock: this,\n          parentScope,\n          parentTemplate,\n          prevBlock\n        });\n      }\n\n      (newItemsByUIDs[uid] = newItemsByUIDs[uid] || []).push(block);\n      block.$$.prevBlock = prevBlock;\n      prevBlock = block;\n    });\n\n    this.$$.itemsByUIDs = newItemsByUIDs;\n  };\n};\n","import { iterateArray, removeArrayElem } from '../utils';\nimport { removeWithParentSignal, createBlock } from '../helpers/Block';\nimport { Block } from '../Block';\nimport { Elem } from '../Elem';\nimport { rootBlocks } from '../constants';\n\nconst watchArgs = js`args.value`;\n\nrootBlocks['d-elements'] = class DElements extends Block {\n  afterConstruct() {\n    const { parentElem } = this.$$;\n    const {\n      Constructor,\n      parentScope,\n      parentTemplate\n    } = this.args;\n\n    this.$$.evaluate(watchArgs, () => {\n      const {\n        children,\n        mixins,\n        parent,\n        watchersToRemove,\n        content\n      } = this.$$;\n      const { value } = this.args;\n\n      iterateArray(children, removeWithParentSignal);\n      iterateArray(mixins, removeWithParentSignal);\n      content.remove();\n\n      if (parent instanceof Block) {\n        parent.$$.removeContent(content);\n      }\n\n      this.$$.children = [];\n      this.$$.mixins = [];\n      this.$$.watchersToRemove = watchersToRemove.filter(({ watchers, watcher, forDElements }) => {\n        if (forDElements) {\n          return true;\n        }\n\n        removeArrayElem(watchers, watcher);\n      });\n      this.$$.content = new Elem();\n\n      let prevBlock;\n\n      iterateArray(value || [], (child) => {\n        prevBlock = createBlock({\n          node: child,\n          Constructor,\n          parent: this,\n          parentElem,\n          parentBlock: this,\n          parentScope,\n          parentTemplate,\n          prevBlock\n        });\n      });\n    }, this, true);\n  }\n};\n","import { findInArray } from '../utils';\nimport { Block } from '../Block';\nimport { rootBlocks } from '../constants';\n\nrootBlocks['d-if'] = class DIf extends Block {\n  static template = html`\n    <d-elements\n      value=\"{elems}\"\n      parentScope=\"{$$.parentScope}\"\n      parentTemplate=\"{$$.parentTemplate}\"\n    />\n  `;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      parentScope,\n      htmlChildren\n    } = this.$$;\n    let index = Infinity;\n    const values = htmlChildren.map((child, i) => {\n      const {\n        name,\n        attrs = {},\n        children\n      } = child;\n      let cond = attrs.if;\n\n      if (name !== 'd-else' && cond) {\n        cond = parentScope.$$.evaluate(cond, (newValue) => {\n          if (!!newValue === values[i]) {\n            return;\n          }\n\n          values[i] = !!newValue;\n\n          if (i > index) {\n            return;\n          }\n\n          if (i < index) {\n            index = i;\n            this.elems = children;\n\n            return;\n          }\n\n          const found = findInArray(values, Boolean);\n\n          if (found) {\n            index = found.key;\n            this.elems = htmlChildren[found.key].children;\n          } else {\n            index = Infinity;\n            this.elems = null;\n          }\n        }, this);\n      } else {\n        cond = true;\n      }\n\n      if (cond && index === Infinity) {\n        index = i;\n        this.elems = children;\n      }\n\n      return !!cond;\n    });\n  }\n};\n","import { collectFromArray, findInArray, iterateArray } from '../utils';\nimport { Block } from '../Block';\nimport { rootBlocks } from '../constants';\n\nconst watchArgs = js`args.value`;\n\nrootBlocks['d-switch'] = class DSwitch extends Block {\n  static template = html`\n    <d-elements\n      value=\"{elems}\"\n      parentScope=\"{$$.parentScope}\"\n      parentTemplate=\"{$$.parentTemplate}\"\n    />\n  `;\n\n  index = Infinity;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      $$: {\n        htmlChildren,\n        parentScope\n      },\n      args,\n      args: { value }\n    } = this;\n    let wasDefault;\n\n    this.values = collectFromArray(htmlChildren, (values, child, i) => {\n      const {\n        name,\n        attrs,\n        children\n      } = child;\n      let val = attrs.if;\n\n      if (wasDefault) {\n        return;\n      }\n\n      if (name !== 'd-case' && name !== 'd-default') {\n        return;\n      }\n\n      if (name === 'd-default') {\n        wasDefault = true;\n      }\n\n      if (name === 'd-default') {\n        val = value;\n      } else if (val) {\n        val = parentScope.$$.evaluate(val, (newValue) => {\n          if (equals(this.values[i].value, newValue)) {\n            return;\n          }\n\n          this.values[i].value = newValue;\n\n          if (i > this.index) {\n            return;\n          }\n\n          if (i < this.index) {\n            this.index = i;\n            this.elems = children;\n\n            return;\n          }\n\n          const found = findInArray(this.values, ({ value }) => (\n            equals(value, args.value)\n          ));\n\n          if (found) {\n            this.index = found.key;\n            this.elems = found.value.children;\n          } else {\n            this.index = Infinity;\n            this.elems = null;\n          }\n        }, this);\n      } else {\n        val = undefined;\n      }\n\n      if (equals(val, value) && this.index === Infinity) {\n        this.index = i;\n        this.elems = children;\n      }\n\n      values.push({\n        name,\n        children,\n        value: val\n      });\n    }, []);\n  }\n\n  afterConstruct() {\n    this.evaluate(watchArgs, () => {\n      const {\n        value: newValue\n      } = this.args;\n\n      this.index = Infinity;\n\n      iterateArray(this.values, ({ name, value, children }, i) => {\n        const val = name === 'd-default'\n          ? newValue\n          : value;\n\n        if (equals(val, newValue) && this.index === Infinity) {\n          this.index = i;\n          this.elems = children;\n        }\n      });\n\n      if (this.index === Infinity) {\n        this.elems = null;\n      }\n    });\n  }\n};\n\nfunction equals(value1, value2) {\n  return value1 === value2;\n}\n","import { collectFromObject, iterateObject, keys } from '../utils';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-attr'] = class DAttr extends Mixin {\n  attrs = {};\n\n  afterUpdate(newValue) {\n    const {\n      elem,\n      args,\n      attrs\n    } = this;\n\n    if (args) {\n      newValue = collectFromObject(args, (attrs, attr) => {\n        attrs[attr] = newValue;\n      });\n    }\n\n    iterateObject(attrs, (value, prop) => {\n      if (!(prop in newValue)) {\n        elem.removeAttr(prop);\n      }\n    });\n    elem.attr(newValue);\n\n    this.attrs = newValue;\n  }\n\n  beforeRemove() {\n    const {\n      elem,\n      attrs\n    } = this;\n\n    elem.removeAttr.apply(elem, keys(attrs));\n  }\n};\n\n","import { isFunction } from '../utils';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-bind'] = class DBind extends Mixin {\n  afterUpdate(value) {\n    if (this.off) {\n      this.off();\n    }\n\n    if (!isFunction(value)) {\n      return;\n    }\n\n    if (this.args) {\n      this.off = this.elem.on(this.args.join(','), value);\n    } else {\n      console.error('Provide \"d-bind\" mixin with an event names (like \"d-bind(click)\" or \"d-bind(keyup, keypress)\")!');\n    }\n  }\n\n  beforeRemove() {\n    const { off } = this;\n\n    if (off) {\n      off();\n    }\n  }\n};\n","import {\n  isArray, isString,\n  iterateArray, iterateObject\n} from '../utils';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nconst EMPTY_SPACE_REGEX = /\\s+/;\n\nrootMixins['d-class'] = class DClass extends Mixin {\n  classes = [];\n\n  afterUpdate(newValue) {\n    const {\n      elem,\n      args,\n      classes\n    } = this;\n    const newClasses = [];\n\n    if (args) {\n      newValue = newValue\n        ? args\n        : [];\n    }\n\n    if (isString(newValue)) {\n      newValue = newValue.split(EMPTY_SPACE_REGEX);\n    }\n\n    if (isArray(newValue)) {\n      iterateArray(classes, (cls) => {\n        if (newValue.indexOf(cls) === -1) {\n          elem.removeClass(cls);\n        }\n      });\n      iterateArray(newValue, (cls) => {\n        if (isString(cls)) {\n          newClasses.push(cls);\n          elem.addClass(cls);\n        }\n      });\n    } else {\n      iterateArray(classes, (cls) => {\n        if (!newValue || !newValue[cls]) {\n          elem.removeClass(cls);\n        }\n      });\n      iterateObject(newValue, (val, cls) => {\n        if (val) {\n          newClasses.push(cls);\n          elem.addClass(cls);\n        }\n      });\n    }\n\n    this.classes = newClasses;\n  }\n\n  beforeRemove() {\n    const {\n      elem,\n      classes\n    } = this;\n\n    elem.removeClass.apply(elem, classes);\n  }\n};\n","import { isFunction, isString } from '../utils';\nimport { Block } from '../Block';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-elem'] = class DElem extends Mixin {\n  static evaluate = false;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      args,\n      parentTemplate,\n      elem\n    } = this;\n    let scope = parentTemplate;\n    let value = this.evaluate();\n\n    if (args) {\n      scope = value instanceof Block\n        ? value\n        : parentTemplate;\n      value = args[0];\n    }\n\n    if (isFunction(value)) {\n      value(elem);\n    } else if (isString(value)) {\n      scope[value] = elem;\n    }\n  }\n};\n","import { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-hide'] = class DHide extends Mixin {\n  afterUpdate(value) {\n    const { elem } = this;\n\n    if (value) {\n      elem.hide();\n    } else {\n      elem.show();\n    }\n  }\n\n  beforeRemove() {\n    this.elem.show();\n  }\n};\n","import { isFunction, isString } from '../utils';\nimport { Block } from '../Block';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-node'] = class DNode extends Mixin {\n  static evaluate = false;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      args,\n      parentTemplate,\n      node\n    } = this;\n    let scope = parentTemplate;\n    let value = this.evaluate();\n\n    if (args) {\n      scope = value instanceof Block\n        ? value\n        : parentTemplate;\n      value = args[0];\n    }\n\n    if (isFunction(value)) {\n      value(node);\n    } else if (isString(value)) {\n      scope[value] = node;\n    }\n  }\n};\n","import { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-on'] = class DOn extends Mixin {\n  static evaluate = false;\n\n  constructor(opts) {\n    super(opts);\n\n    if (this.args) {\n      this.off = this.elem.on(this.args.join(','), () => {\n        this.evaluate();\n      });\n    } else {\n      console.error('Provide \"d-on\" mixin with an event names (like \"d-on(click)\" or \"d-on(keyup, keypress)\")!');\n    }\n  }\n\n  beforeRemove() {\n    const { off } = this;\n\n    if (off) {\n      off();\n    }\n  }\n};\n","import { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-show'] = class DShow extends Mixin {\n  afterUpdate(value) {\n    const { elem } = this;\n\n    if (value) {\n      elem.show();\n    } else {\n      elem.hide();\n    }\n  }\n\n  beforeRemove() {\n    this.elem.show();\n  }\n};\n","import {\n  isString, iterateObject, keys,\n  collectFromObject, collectFromArray\n} from '../utils';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nconst CSS_STYLES_SEPARATOR_REGEX = /; ?/;\n\nrootMixins['d-style'] = class DStyle extends Mixin {\n  css = {};\n\n  afterUpdate(newValue, oldValue) {\n    const {\n      elem,\n      args,\n      css\n    } = this;\n\n    if (args) {\n      newValue = collectFromObject(args, (css, prop) => {\n        css[prop] = newValue;\n      });\n    }\n\n    if (isString(newValue)) {\n      newValue = collectFromArray(\n        newValue\n          .split(CSS_STYLES_SEPARATOR_REGEX)\n          .filter(Boolean),\n        addCSSProp\n      );\n    }\n\n    iterateObject(css, (value, prop) => {\n      if (!newValue[prop]) {\n        elem.removeCSS(prop);\n      }\n    });\n    elem.css(newValue);\n\n    this.css = newValue;\n  }\n\n  beforeRemove() {\n    const {\n      elem,\n      css\n    } = this;\n\n    elem.removeCSS.apply(elem, keys(css));\n  }\n};\n\nfunction addCSSProp(css, item) {\n  const [prop, value] = item;\n\n  css[prop] = value;\n}\n","import {\n  isArray, isFunction, isNil,\n  collectFromArray\n} from '../utils';\nimport { Mixin } from '../Mixin';\nimport { rootMixins } from '../constants';\n\nrootMixins['d-value'] = class DValue extends Mixin {\n  static evaluate = false;\n\n  constructor(opts) {\n    super(opts);\n\n    const {\n      args,\n      parentTemplate,\n      elem,\n      node\n    } = this;\n    const name = elem.name();\n    const type = elem.prop('type');\n    const value = this.evaluate();\n    let initialScopeValue = null;\n\n    this.prop = getProp(name, type, elem);\n    this.name = name;\n    this.type = type;\n    this.value = value;\n    this.options = elem.find('option');\n    this.scope = parentTemplate;\n\n    if (args) {\n      this.name = args[0];\n      this.scope = value instanceof Block\n        ? value\n        : parentTemplate;\n    }\n\n    if (!isFunction(value)) {\n      initialScopeValue = this.scope.$$.evaluate(getEvalFunction(value), (newValue) => {\n        if (this.currentValue !== newValue) {\n          this.currentValue = newValue;\n          this.setProp(newValue);\n        }\n      }, this);\n    }\n\n    const initialElemValue = this.getProp(initialScopeValue, true);\n    const isInitialScopeValueNull = isNil(initialScopeValue);\n    const isCheckbox = type === 'checkbox';\n    const changeScope = () => {\n      this.currentValue = this.getProp(this.currentValue);\n      this.changeScope();\n    };\n\n    if (isInitialScopeValueNull || isCheckbox) {\n      this.currentValue = initialElemValue;\n      this.changeScope();\n\n      if (!isInitialScopeValueNull && isCheckbox) {\n        this.setProp(initialScopeValue);\n      }\n    } else {\n      this.currentValue = initialScopeValue;\n      this.setProp(initialScopeValue);\n    }\n\n    this.offElemListener = elem.on(getListenerName(name, type), (e) => {\n      if (e.target === node) {\n        changeScope();\n      }\n    });\n    this.offFormListener = elem.closest('form').on('reset', () => {\n      setTimeout(changeScope, 0);\n    });\n  }\n\n  changeScope() {\n    const {\n      scope,\n      value,\n      currentValue\n    } = this;\n\n    if (isFunction(value)) {\n      value(currentValue);\n    } else {\n      scope[value] = currentValue;\n    }\n  }\n\n  setProp(value) {\n    const {\n      elem,\n      name,\n      prop,\n      type,\n      node,\n      options\n    } = this;\n\n    if (prop === 'text') {\n      elem.text(value);\n    } else if (prop === 'multiple-select') {\n      options.forEach((option) => {\n        option.selected = value.indexOf(option.value) !== -1;\n      });\n    } else {\n      elem.prop(prop, getValueForSetting(name, value, type, node.value));\n    }\n  }\n\n  getProp(values, init) {\n    const {\n      elem,\n      name,\n      prop,\n      type,\n      node,\n      options\n    } = this;\n\n    return prop === 'text'\n      ? elem.text()\n      : getValueForGetting(name, elem.prop(prop), type, node.value, values, options, init, prop === 'multiple-select');\n  }\n\n  beforeRemove() {\n    this.offElemListener();\n    this.offFormListener();\n  }\n};\n\nfunction getProp(name, type, elem) {\n  switch (name) {\n    case 'select': {\n      return elem.hasAttr('multiple')\n        ? 'multiple-select'\n        : 'value';\n    }\n\n    case 'input': {\n      if (type === 'file') {\n        return 'files';\n      }\n\n      return type === 'radio' || type === 'checkbox'\n        ? 'checked'\n        : 'value';\n    }\n\n    default: {\n      return elem.hasAttr('contentEditable')\n        ? 'text'\n        : 'value';\n    }\n  }\n}\n\nfunction getValueForSetting(name, value, type, inputValue) {\n  if (name !== 'input') {\n    return value;\n  }\n\n  const isRadio = type === 'radio';\n\n  if (!isRadio && type !== 'checkbox') {\n    return value;\n  }\n\n  return isRadio\n    ? value === inputValue\n    : value.indexOf(inputValue) !== -1;\n}\n\nfunction getValueForGetting(name, value, type, inputValue, values, options, init, isMultiple) {\n  switch (name) {\n    case 'select': {\n      if (!isMultiple) {\n        return value;\n      }\n\n      return collectFromArray(options, addValue, []);\n    }\n\n    case 'input': {\n      if (type !== 'radio' && type !== 'checkbox') {\n        return value;\n      }\n\n      if (type === 'radio') {\n        return value\n          ? inputValue\n          : null;\n      }\n\n      if (!value && init) {\n        return values;\n      }\n\n      if (value) {\n        if (values) {\n          return values.indexOf(inputValue) === -1\n            ? values.concat(inputValue)\n            : values;\n        }\n\n        return [inputValue];\n      }\n\n      if (!isArray(values)) {\n        return [];\n      }\n\n      const index = values.indexOf(inputValue);\n\n      if (index !== -1) {\n        return [\n          ...values.slice(0, index),\n          ...values.slice(index + 1)\n        ];\n      }\n\n      return values;\n    }\n\n    default: {\n      return value;\n    }\n  }\n}\n\nfunction getListenerName(name, type) {\n  switch (name) {\n    case 'select': {\n      return 'change';\n    }\n\n    case 'input': {\n      return (\n        type === 'radio'\n        || type === 'checkbox'\n        || type === 'color'\n        || type === 'file'\n      )\n        ? 'change'\n        : 'change input';\n    }\n\n    default: {\n      return 'input';\n    }\n  }\n}\n\nfunction getEvalFunction(value) {\n  return (scope) => scope[value];\n}\n\nfunction addValue(values, { selected, value }) {\n  if (selected && values.indexOf(value) === -1) {\n    values.push(value);\n  }\n}\n","import { iterateObject } from '../../utils';\nimport { rootBlocks, rootMixins } from '../../constants';\nimport { constructMixinRegex } from './constructMixinRegex';\n\niterateObject(rootBlocks, (Block) => {\n  Block._vars = Block.template.vars;\n  Block._html = Block.template.value;\n});\n\niterateObject(rootMixins, (Mixin, name) => {\n  Mixin._match = constructMixinRegex(name);\n});\n","import { Elem } from './Elem';\nimport { createHideStyleNode } from './helpers/Elem';\n\nconst {\n  document = {}\n} = global;\n\n/**\n * @const {Elem} doc\n * @type {Elem}\n * @public\n * @description Elem instance of document.\n */\nexport const doc = new Elem(document);\n\n/**\n * @const {Elem} html\n * @type {Elem}\n * @public\n * @description Elem instance of document.documentElement.\n */\nexport const html = new Elem(document.documentElement);\n\n/**\n * @const {Elem} body\n * @type {Elem}\n * @public\n * @description Elem instance of document.body.\n */\nexport const body = new Elem(document.body);\n\n/**\n * @const {Elem} head\n * @type {Elem}\n * @public\n * @description Elem instance of document.head.\n */\nexport const head = new Elem(document.head);\n\ncreateHideStyleNode(head);\n","import {\n  toObjectKeys, iterateArray,\n  assign, keys, create\n} from './utils';\n\nexport function insertTemplates(template, templates) {\n  const {\n    vars,\n    value\n  } = template;\n  const newTemplates = create(null);\n  const newVars = toObjectKeys(vars);\n\n  assign(newTemplates, templates);\n  iterateArray(value, forEachNode);\n\n  function forEachNode({ type, value, children }, index, tree) {\n    if (type === '#comment') {\n      value = value.trim();\n\n      if (newTemplates[value]) {\n        tree[index] = newTemplates[value].value;\n        assign(newVars, toObjectKeys(newTemplates[value].vars));\n      }\n    } else {\n      iterateArray(children, forEachNode);\n    }\n  }\n\n  vars.length = 0;\n  vars.push(...keys(newVars));\n\n  return template;\n}\n","import { isArray } from './utils';\nimport { createBlock } from './helpers/Block';\nimport { Block } from './Block';\nimport { Elem } from './Elem';\n\nexport function initApp(html, node) {\n  const parentElem = new Elem(node).elem(0);\n\n  if (!parentElem.length) {\n    throw new Error('No valid element to insert the app into was given! (initApp)');\n  }\n\n  if (parentElem.prop('DwayneRootBlock')) {\n    throw new Error('There already exists a Dwayne app inside the given element! (initApp)');\n  }\n\n  if (isArray(html)) {\n    html = {\n      vars: [],\n      value: html\n    };\n  }\n\n  class RootBlock extends Block {\n    static _vars = html.vars;\n    static _html = html.value\n  }\n\n  const block = createBlock({\n    node: {\n      name: '#RootBlock'\n    },\n    Constructor: RootBlock,\n    parent: parentElem,\n    parentElem\n  });\n\n  parentElem\n    .prop('DwayneRootBlock', block)\n    .attr('dwayne-root', '');\n}\n","import { Block } from './Block';\nimport { Elem } from './Elem';\n\nexport function removeApp(node) {\n  const elem = new Elem(node);\n\n  if (!elem.length) {\n    throw new Error('No valid element to remove the app from was given! (removeApp)');\n  }\n\n  node = elem[0];\n\n  const { DwayneRootBlock } = node;\n\n  if (!(DwayneRootBlock instanceof Block)) {\n    throw new Error('No app registered inside the given element! (removeApp)');\n  }\n\n  DwayneRootBlock.$$.remove();\n  elem.removeAttr('dwayne-root');\n\n  delete node.DwayneRootBlock;\n}\n"],"names":["window","global","self","collectFromArray","array","callback","initialValue","value","index","findInArray","i","length","iterateArray","removeArrayElem","elem","indexOf","splice","toObjectKeys","addKey","vars","variable","has","hasOwnProperty","slice","assign","target","arguments","source","key","collectFromObject","object","except","newObject","paths","iterateObject","mapObject","defineProperties","Object","definePrototypeProperties","properties","name","defineProperty","defineFrozenProperties","Symbol","toString","toStringTag","setToStringTag","tag","prototype","isArray","Array","isFunction","isNil","isString","regexpSpecialCharacters","regexpSpecialsRegexp","RegExp","map","s","join","escapeRegex","string","replace","create","keys","getProto","getPrototypeOf","setProto","setPrototypeOf","proto","__proto__","DASHED_SYMBOL_REGEX","UPPERCASED_SYMBOL_REGEX","toCamelCase","capitalize","toHyphenCase","hyphenize","match","toUpperCase","toLowerCase","addAttr","attrs","attr","CSS_PROP_VALUE_SEPARATOR_REGEX","addCSSProp","css","property","split","addDataAttr","data","addNext","add","nextSibling","addParent","parentNode","addPrev","previousSibling","HIDE_CLASS","SVG_NS","D_REST_REGEX","rootBlocks","rootMixins","Scope","createHideStyleNode","head","style","find","prop","text","X_LINK_ATTR_REGEX","XML_NS","X_LINK_NS","getAttrNS","nodeName","test","Elem","closest","hide","ownerDocument","addClass","isElem","HTML_COLLECTION_REGEX","isElementsCollection","isHTMLDocument","ELEMENT_REGEX","isValidNode","remove","parent","removeChild","show","removeClass","toElem","document","selector","base","querySelectorAll","String","EVENT_SEPARATOR_REGEX","CSS_STYLES_SEPARATOR_REGEX","CSS_IMPORTANT_REGEX","EVENT_REGEX","XHTML_NS","emptyCollection","includes","push","elems","forEach","list","classList","cls","attributes","ns","getAttributeNS","getAttribute","removeAttr","setAttributeNS","setAttribute","childNodes","collect","is","elements","cb","element","child","contains","type","el","isText","createTextNode","createComment","namespaceURI","documentElement","createElementNS","into","cssText","getPropertyValue","getPropertyPriority","removeCSS","removeProperty","setProperty","dataset","event","details","bubbles","cancelable","realDetails","finalEvent","Event","err","createEvent","initEvent","dispatchEvent","filterFn","Boolean","hasAttributeNS","hasAttribute","html","innerHTML","next","insertBefore","appendChild","end","firstChild","matches","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","call","error","undefined","listener","newEvents","allListeners","listeners","addEventListener","removeEventListener","removeEventListeners","removeListeners","removeListener","removeAttributeNS","removeAttribute","first","method","prev","babelHelpers.get","apply","textContent","condition","hasAttr","toggle","species","calculateArgs","args","argsObject","arg","cleanProperty","constructMixinRegex","COMMA_REGEX","mixinMatch","mixins","Mixin","localMatch","_match","argsMatch","transformRestAttrs","mixinDefaultOpts","eventualAttrs","transformRestArgs","addArgs","executeMixinWatchers","mixin","oldValue","$$","watchers","watcher","createMixin","dynamic","comment","parentBlock","parentScope","parentTemplate","evaluate","newValue","afterUpdate","calculateAttrs","attrsObject","firstTime","opts","nextType","nextDynamic","nextValue","prevType","prevValue","isDynamic","evaluated","buildMixin","firstValue","constructPrivateScope","scope","globals","removeTempWatcher","onRemove","removeWatchers","watchersToRemove","removeWatcher","changed","constructPublicScope","scopeValues","privateScope","evalMode","gettingVars","temp","oldTempWatchers","was","values","perm","NAMED_D_BLOCK_REGEX","createBlock","node","Constructor","parentElem","prevBlock","doc","localBlocks","_blocks","Block","localMixins","_mixins","children","constructor","dBlockMatch","dBlockName","dBlockArgs","dBlockChildren","dElementsName","dElementsConstructor","blockInstance","currentAttrs","wasDRest","isDRest","localAttrs","restAttrs","createMixins","content","isParentBlock","insertAfterIt","insertAfter","addContent","insertInStartOfIt","Args","locals","newName","newConstructor","_html","itemName","item","indexName","afterConstruct","isRendered","afterRender","extendBlock","isPrototypeOf","isInstanceOf","Class","Subclass","removeWithParentSignal","watchForAllLocals","block","watchForAllGlobals","glob","watchForAllArgs","wrappers","reduce","wrapMixin","_value","currentValue","isParentSignal","isRemoved","beforeRemove","wrapBlock","wrapper","returnValue","blockHooks","mixinHooks","TAG_NAME_REGEX","ATTR_NAME_REGEX","WATCHED_ARG_PREFIX_REGEX","WATCHED_GLOBAL_PREFIX_REGEX","afterElem","expression","hook","template","warn","defaultLocals","defaultArgs","currentReturnValue","_vars","originalArgs","childrenBlocks","func","onChange","targetBlock","forDElements","forDItem","forDEach","onChangeFlag","result","original","onEvalError","e","localWatchers","newResult","watcherBlock","removeContent","newContent","afterDOMChange","contentToAdd","notRecursive","oldContent","changeContent","contentToMove","after","indexToPut","moveContent","contentToRemove","filter","contentToInsert","moveFlag","tryToAddOrMove","localArgs","restArgs","isDElements","blocks","htmlChildren","oldWatcher","parentParentScope","parentParentTemplate","ownChildren","found","ParentScope","ParentTemplate","dBlocks","DBlockName","DItem","watchArgs","uid","renderSet","itemsByUIDs","UID","sortBy","newItemsByUIDs","newUIDsCounter","newUIDs","set","filterBy","isArr","iterate","sort","items","shift","Infinity","cond","if","wasDefault","val","equals","value1","value2","off","on","EMPTY_SPACE_REGEX","classes","newClasses","initialScopeValue","getProp","options","getEvalFunction","setProp","initialElemValue","isInitialScopeValueNull","isCheckbox","changeScope","offElemListener","getListenerName","offFormListener","option","selected","getValueForSetting","init","getValueForGetting","inputValue","isRadio","isMultiple","addValue","concat","body","insertTemplates","templates","newTemplates","newVars","forEachNode","tree","trim","initApp","Error","RootBlock","removeApp","DwayneRootBlock"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}